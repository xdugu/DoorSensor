

Microchip Technology PIC LITE Macro Assembler V1.45 build -152302408 
                                                                                               Sat Jan 13 00:28:50 2018

Microchip Technology Omniscient Code Generator v1.45 (Free mode) build 201711160504
     1                           	processor	16LF1829
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataBANK1,global,class=CODE,delta=2
     5                           	psect	idataBANK2,global,class=CODE,delta=2
     6                           	psect	stringtext1,global,class=STRCODE,delta=2
     7                           	psect	stringtext2,global,class=STRCODE,delta=2
     8                           	psect	stringtext3,global,class=STRCODE,delta=2
     9                           	psect	nvCOMMON,global,class=COMMON,space=1,delta=1
    10                           	psect	nvBANK2,global,class=BANK2,space=1,delta=1
    11                           	psect	cinit,global,class=CODE,merge=1,delta=2
    12                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
    13                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    14                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1
    15                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1
    16                           	psect	dataBANK2,global,class=BANK2,space=1,delta=1
    17                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1
    18                           	psect	clrtext,global,class=CODE,delta=2
    19                           	psect	cstackBANK3,global,class=BANK3,space=1,delta=1
    20                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    21                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    22                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    23                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    24                           	psect	text1,local,class=CODE,merge=1,delta=2
    25                           	psect	text2,local,class=CODE,merge=1,delta=2,group=2
    26                           	psect	text3,local,class=CODE,merge=1,delta=2
    27                           	psect	text4,local,class=CODE,merge=1,delta=2
    28                           	psect	text5,local,class=CODE,merge=1,delta=2
    29                           	psect	text6,local,class=CODE,merge=1,delta=2,group=2
    30                           	psect	text7,local,class=CODE,merge=1,delta=2,group=2
    31                           	psect	text8,local,class=CODE,merge=1,delta=2
    32                           	psect	text9,local,class=CODE,merge=1,delta=2
    33                           	psect	text10,local,class=CODE,merge=1,delta=2
    34                           	psect	text11,local,class=CODE,merge=1,delta=2
    35                           	psect	text12,local,class=CODE,merge=1,delta=2,group=2
    36                           	psect	text13,local,class=CODE,merge=1,delta=2
    37                           	psect	text14,local,class=CODE,merge=1,delta=2
    38                           	psect	text15,local,class=CODE,merge=1,delta=2
    39                           	psect	text16,local,class=CODE,merge=1,delta=2
    40                           	psect	text17,local,class=CODE,merge=1,delta=2
    41                           	psect	text18,local,class=CODE,merge=1,delta=2
    42                           	psect	text19,local,class=CODE,merge=1,delta=2
    43                           	psect	text20,local,class=CODE,merge=1,delta=2
    44                           	psect	text21,local,class=CODE,merge=1,delta=2
    45                           	psect	text22,local,class=CODE,merge=1,delta=2
    46                           	psect	text23,local,class=CODE,merge=1,delta=2
    47                           	psect	text24,local,class=CODE,merge=1,delta=2
    48                           	psect	text25,local,class=CODE,merge=1,delta=2
    49                           	psect	text26,local,class=CODE,merge=1,delta=2
    50                           	psect	text27,local,class=CODE,merge=1,delta=2
    51                           	psect	text28,local,class=CODE,merge=1,delta=2
    52                           	psect	text29,local,class=CODE,merge=1,delta=2
    53                           	psect	text30,local,class=CODE,merge=1,delta=2
    54                           	psect	text31,local,class=CODE,merge=1,delta=2
    55                           	psect	text32,local,class=CODE,merge=1,delta=2
    56                           	psect	text33,local,class=CODE,merge=1,delta=2
    57                           	psect	text34,local,class=CODE,merge=1,delta=2
    58                           	psect	text35,local,class=CODE,merge=1,delta=2
    59                           	psect	text36,local,class=CODE,merge=1,delta=2
    60                           	psect	text37,local,class=CODE,merge=1,delta=2
    61                           	psect	text38,local,class=CODE,merge=1,delta=2
    62                           	psect	text39,local,class=CODE,merge=1,delta=2
    63                           	psect	text40,local,class=CODE,merge=1,delta=2
    64                           	psect	text41,local,class=CODE,merge=1,delta=2
    65                           	psect	text42,local,class=CODE,merge=1,delta=2
    66                           	psect	text43,local,class=CODE,merge=1,delta=2
    67                           	psect	text44,local,class=CODE,merge=1,delta=2
    68                           	psect	text45,local,class=CODE,merge=1,delta=2
    69                           	psect	text46,local,class=CODE,merge=1,delta=2
    70                           	psect	text47,local,class=CODE,merge=1,delta=2
    71                           	psect	text48,local,class=CODE,merge=1,delta=2
    72                           	psect	text49,local,class=CODE,merge=1,delta=2
    73                           	psect	text50,local,class=CODE,merge=1,delta=2
    74                           	psect	text51,local,class=CODE,merge=1,delta=2
    75                           	psect	text52,local,class=CODE,merge=1,delta=2
    76                           	psect	text53,local,class=CODE,merge=1,delta=2
    77                           	psect	text54,local,class=CODE,merge=1,delta=2
    78                           	psect	text55,local,class=CODE,merge=1,delta=2
    79                           	psect	text56,local,class=CODE,merge=1,delta=2,group=2
    80                           	psect	text57,local,class=CODE,merge=1,delta=2,group=2
    81                           	psect	text58,local,class=CODE,merge=1,delta=2,group=2
    82                           	psect	text59,local,class=CODE,merge=1,delta=2,group=2
    83                           	psect	text60,local,class=CODE,merge=1,delta=2,group=2
    84                           	psect	text61,local,class=CODE,merge=1,delta=2,group=2
    85                           	psect	text62,local,class=CODE,merge=1,delta=2,group=2
    86                           	psect	text63,local,class=CODE,merge=1,delta=2,group=2
    87                           	psect	text64,local,class=CODE,merge=1,delta=2,group=2
    88                           	psect	text65,local,class=CODE,merge=1,delta=2,group=2
    89                           	psect	text66,local,class=CODE,merge=1,delta=2
    90                           	psect	text67,local,class=CODE,merge=1,delta=2
    91                           	psect	text68,local,class=CODE,merge=1,delta=2
    92                           	psect	text69,local,class=CODE,merge=1,delta=2
    93                           	psect	text70,local,class=CODE,merge=1,delta=2
    94                           	psect	text71,local,class=CODE,merge=1,delta=2
    95                           	psect	text72,local,class=CODE,merge=1,delta=2
    96                           	psect	text73,local,class=CODE,merge=1,delta=2
    97                           	psect	text74,local,class=CODE,merge=1,delta=2
    98                           	psect	text75,local,class=CODE,merge=1,delta=2
    99                           	psect	text76,local,class=CODE,merge=1,delta=2
   100                           	psect	text77,local,class=CODE,merge=1,delta=2
   101                           	psect	text78,local,class=CODE,merge=1,delta=2
   102                           	psect	text79,local,class=CODE,merge=1,delta=2
   103                           	psect	intentry,global,class=CODE,delta=2
   104                           	psect	text81,local,class=CODE,merge=1,delta=2
   105                           	psect	text82,local,class=CODE,merge=1,delta=2
   106                           	psect	text83,local,class=CODE,merge=1,delta=2
   107                           	psect	text84,local,class=CODE,merge=1,delta=2
   108                           	psect	text85,local,class=CODE,merge=1,delta=2
   109                           	psect	text86,local,class=CODE,merge=1,delta=2
   110                           	psect	text87,local,class=CODE,merge=1,delta=2
   111                           	psect	text88,local,class=CODE,merge=1,delta=2
   112                           	psect	swtext1,local,class=CONST,delta=2
   113                           	psect	text89,local,class=CODE,merge=1,delta=2
   114                           	psect	text90,local,class=CODE,merge=1,delta=2
   115                           	psect	text91,local,class=CODE,merge=1,delta=2
   116                           	dabs	1,0x7E,2
   117  0000                     
   118                           ; Version 1.45
   119                           ; Generated 16/11/2017 GMT
   120                           ; 
   121                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
   122                           ; All rights reserved.
   123                           ; 
   124                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
   125                           ; 
   126                           ; Redistribution and use in source and binary forms, with or without modification, are
   127                           ; permitted provided that the following conditions are met:
   128                           ; 
   129                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
   130                           ;        conditions and the following disclaimer.
   131                           ; 
   132                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
   133                           ;        of conditions and the following disclaimer in the documentation and/or other
   134                           ;        materials provided with the distribution.
   135                           ; 
   136                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
   137                           ;        software without specific prior written permission.
   138                           ; 
   139                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   140                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   141                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   142                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   143                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   144                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   145                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   146                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   147                           ; 
   148                           ; 
   149                           ; Code-generator required, PIC16LF1829 Definitions
   150                           ; 
   151                           ; SFR Addresses
   152  0000                     	;# 
   153  0001                     	;# 
   154  0002                     	;# 
   155  0003                     	;# 
   156  0004                     	;# 
   157  0005                     	;# 
   158  0006                     	;# 
   159  0007                     	;# 
   160  0008                     	;# 
   161  0009                     	;# 
   162  000A                     	;# 
   163  000B                     	;# 
   164  000C                     	;# 
   165  000D                     	;# 
   166  000E                     	;# 
   167  0011                     	;# 
   168  0012                     	;# 
   169  0013                     	;# 
   170  0014                     	;# 
   171  0015                     	;# 
   172  0016                     	;# 
   173  0016                     	;# 
   174  0017                     	;# 
   175  0018                     	;# 
   176  0019                     	;# 
   177  001A                     	;# 
   178  001B                     	;# 
   179  001C                     	;# 
   180  001E                     	;# 
   181  001F                     	;# 
   182  008C                     	;# 
   183  008D                     	;# 
   184  008E                     	;# 
   185  0091                     	;# 
   186  0092                     	;# 
   187  0093                     	;# 
   188  0094                     	;# 
   189  0095                     	;# 
   190  0096                     	;# 
   191  0097                     	;# 
   192  0098                     	;# 
   193  0099                     	;# 
   194  009A                     	;# 
   195  009B                     	;# 
   196  009B                     	;# 
   197  009C                     	;# 
   198  009D                     	;# 
   199  009E                     	;# 
   200  010C                     	;# 
   201  010D                     	;# 
   202  010E                     	;# 
   203  0111                     	;# 
   204  0112                     	;# 
   205  0113                     	;# 
   206  0114                     	;# 
   207  0115                     	;# 
   208  0116                     	;# 
   209  0117                     	;# 
   210  0118                     	;# 
   211  0119                     	;# 
   212  011A                     	;# 
   213  011B                     	;# 
   214  011D                     	;# 
   215  011E                     	;# 
   216  018C                     	;# 
   217  018D                     	;# 
   218  018E                     	;# 
   219  0191                     	;# 
   220  0191                     	;# 
   221  0192                     	;# 
   222  0193                     	;# 
   223  0193                     	;# 
   224  0193                     	;# 
   225  0194                     	;# 
   226  0195                     	;# 
   227  0196                     	;# 
   228  0199                     	;# 
   229  019A                     	;# 
   230  019B                     	;# 
   231  019B                     	;# 
   232  019B                     	;# 
   233  019B                     	;# 
   234  019C                     	;# 
   235  019C                     	;# 
   236  019D                     	;# 
   237  019E                     	;# 
   238  019F                     	;# 
   239  020C                     	;# 
   240  020D                     	;# 
   241  020E                     	;# 
   242  0211                     	;# 
   243  0211                     	;# 
   244  0212                     	;# 
   245  0212                     	;# 
   246  0213                     	;# 
   247  0213                     	;# 
   248  0214                     	;# 
   249  0214                     	;# 
   250  0215                     	;# 
   251  0215                     	;# 
   252  0215                     	;# 
   253  0216                     	;# 
   254  0216                     	;# 
   255  0217                     	;# 
   256  0217                     	;# 
   257  0219                     	;# 
   258  021A                     	;# 
   259  021B                     	;# 
   260  021C                     	;# 
   261  021D                     	;# 
   262  021E                     	;# 
   263  021F                     	;# 
   264  0291                     	;# 
   265  0291                     	;# 
   266  0292                     	;# 
   267  0293                     	;# 
   268  0294                     	;# 
   269  0295                     	;# 
   270  0295                     	;# 
   271  0296                     	;# 
   272  0298                     	;# 
   273  0298                     	;# 
   274  0299                     	;# 
   275  029A                     	;# 
   276  029B                     	;# 
   277  029C                     	;# 
   278  029D                     	;# 
   279  029E                     	;# 
   280  0311                     	;# 
   281  0311                     	;# 
   282  0312                     	;# 
   283  0313                     	;# 
   284  0318                     	;# 
   285  0318                     	;# 
   286  0319                     	;# 
   287  031A                     	;# 
   288  038C                     	;# 
   289  038D                     	;# 
   290  038E                     	;# 
   291  0391                     	;# 
   292  0392                     	;# 
   293  0393                     	;# 
   294  0394                     	;# 
   295  0395                     	;# 
   296  0396                     	;# 
   297  039A                     	;# 
   298  039C                     	;# 
   299  039D                     	;# 
   300  039E                     	;# 
   301  039F                     	;# 
   302  0415                     	;# 
   303  0416                     	;# 
   304  0417                     	;# 
   305  041C                     	;# 
   306  041D                     	;# 
   307  041E                     	;# 
   308  0FE4                     	;# 
   309  0FE5                     	;# 
   310  0FE6                     	;# 
   311  0FE7                     	;# 
   312  0FE8                     	;# 
   313  0FE9                     	;# 
   314  0FEA                     	;# 
   315  0FEB                     	;# 
   316  0FED                     	;# 
   317  0FEE                     	;# 
   318  0FEF                     	;# 
   319  0000                     	;# 
   320  0001                     	;# 
   321  0002                     	;# 
   322  0003                     	;# 
   323  0004                     	;# 
   324  0005                     	;# 
   325  0006                     	;# 
   326  0007                     	;# 
   327  0008                     	;# 
   328  0009                     	;# 
   329  000A                     	;# 
   330  000B                     	;# 
   331  000C                     	;# 
   332  000D                     	;# 
   333  000E                     	;# 
   334  0011                     	;# 
   335  0012                     	;# 
   336  0013                     	;# 
   337  0014                     	;# 
   338  0015                     	;# 
   339  0016                     	;# 
   340  0016                     	;# 
   341  0017                     	;# 
   342  0018                     	;# 
   343  0019                     	;# 
   344  001A                     	;# 
   345  001B                     	;# 
   346  001C                     	;# 
   347  001E                     	;# 
   348  001F                     	;# 
   349  008C                     	;# 
   350  008D                     	;# 
   351  008E                     	;# 
   352  0091                     	;# 
   353  0092                     	;# 
   354  0093                     	;# 
   355  0094                     	;# 
   356  0095                     	;# 
   357  0096                     	;# 
   358  0097                     	;# 
   359  0098                     	;# 
   360  0099                     	;# 
   361  009A                     	;# 
   362  009B                     	;# 
   363  009B                     	;# 
   364  009C                     	;# 
   365  009D                     	;# 
   366  009E                     	;# 
   367  010C                     	;# 
   368  010D                     	;# 
   369  010E                     	;# 
   370  0111                     	;# 
   371  0112                     	;# 
   372  0113                     	;# 
   373  0114                     	;# 
   374  0115                     	;# 
   375  0116                     	;# 
   376  0117                     	;# 
   377  0118                     	;# 
   378  0119                     	;# 
   379  011A                     	;# 
   380  011B                     	;# 
   381  011D                     	;# 
   382  011E                     	;# 
   383  018C                     	;# 
   384  018D                     	;# 
   385  018E                     	;# 
   386  0191                     	;# 
   387  0191                     	;# 
   388  0192                     	;# 
   389  0193                     	;# 
   390  0193                     	;# 
   391  0193                     	;# 
   392  0194                     	;# 
   393  0195                     	;# 
   394  0196                     	;# 
   395  0199                     	;# 
   396  019A                     	;# 
   397  019B                     	;# 
   398  019B                     	;# 
   399  019B                     	;# 
   400  019B                     	;# 
   401  019C                     	;# 
   402  019C                     	;# 
   403  019D                     	;# 
   404  019E                     	;# 
   405  019F                     	;# 
   406  020C                     	;# 
   407  020D                     	;# 
   408  020E                     	;# 
   409  0211                     	;# 
   410  0211                     	;# 
   411  0212                     	;# 
   412  0212                     	;# 
   413  0213                     	;# 
   414  0213                     	;# 
   415  0214                     	;# 
   416  0214                     	;# 
   417  0215                     	;# 
   418  0215                     	;# 
   419  0215                     	;# 
   420  0216                     	;# 
   421  0216                     	;# 
   422  0217                     	;# 
   423  0217                     	;# 
   424  0219                     	;# 
   425  021A                     	;# 
   426  021B                     	;# 
   427  021C                     	;# 
   428  021D                     	;# 
   429  021E                     	;# 
   430  021F                     	;# 
   431  0291                     	;# 
   432  0291                     	;# 
   433  0292                     	;# 
   434  0293                     	;# 
   435  0294                     	;# 
   436  0295                     	;# 
   437  0295                     	;# 
   438  0296                     	;# 
   439  0298                     	;# 
   440  0298                     	;# 
   441  0299                     	;# 
   442  029A                     	;# 
   443  029B                     	;# 
   444  029C                     	;# 
   445  029D                     	;# 
   446  029E                     	;# 
   447  0311                     	;# 
   448  0311                     	;# 
   449  0312                     	;# 
   450  0313                     	;# 
   451  0318                     	;# 
   452  0318                     	;# 
   453  0319                     	;# 
   454  031A                     	;# 
   455  038C                     	;# 
   456  038D                     	;# 
   457  038E                     	;# 
   458  0391                     	;# 
   459  0392                     	;# 
   460  0393                     	;# 
   461  0394                     	;# 
   462  0395                     	;# 
   463  0396                     	;# 
   464  039A                     	;# 
   465  039C                     	;# 
   466  039D                     	;# 
   467  039E                     	;# 
   468  039F                     	;# 
   469  0415                     	;# 
   470  0416                     	;# 
   471  0417                     	;# 
   472  041C                     	;# 
   473  041D                     	;# 
   474  041E                     	;# 
   475  0FE4                     	;# 
   476  0FE5                     	;# 
   477  0FE6                     	;# 
   478  0FE7                     	;# 
   479  0FE8                     	;# 
   480  0FE9                     	;# 
   481  0FEA                     	;# 
   482  0FEB                     	;# 
   483  0FED                     	;# 
   484  0FEE                     	;# 
   485  0FEF                     	;# 
   486  0000                     	;# 
   487  0001                     	;# 
   488  0002                     	;# 
   489  0003                     	;# 
   490  0004                     	;# 
   491  0005                     	;# 
   492  0006                     	;# 
   493  0007                     	;# 
   494  0008                     	;# 
   495  0009                     	;# 
   496  000A                     	;# 
   497  000B                     	;# 
   498  000C                     	;# 
   499  000D                     	;# 
   500  000E                     	;# 
   501  0011                     	;# 
   502  0012                     	;# 
   503  0013                     	;# 
   504  0014                     	;# 
   505  0015                     	;# 
   506  0016                     	;# 
   507  0016                     	;# 
   508  0017                     	;# 
   509  0018                     	;# 
   510  0019                     	;# 
   511  001A                     	;# 
   512  001B                     	;# 
   513  001C                     	;# 
   514  001E                     	;# 
   515  001F                     	;# 
   516  008C                     	;# 
   517  008D                     	;# 
   518  008E                     	;# 
   519  0091                     	;# 
   520  0092                     	;# 
   521  0093                     	;# 
   522  0094                     	;# 
   523  0095                     	;# 
   524  0096                     	;# 
   525  0097                     	;# 
   526  0098                     	;# 
   527  0099                     	;# 
   528  009A                     	;# 
   529  009B                     	;# 
   530  009B                     	;# 
   531  009C                     	;# 
   532  009D                     	;# 
   533  009E                     	;# 
   534  010C                     	;# 
   535  010D                     	;# 
   536  010E                     	;# 
   537  0111                     	;# 
   538  0112                     	;# 
   539  0113                     	;# 
   540  0114                     	;# 
   541  0115                     	;# 
   542  0116                     	;# 
   543  0117                     	;# 
   544  0118                     	;# 
   545  0119                     	;# 
   546  011A                     	;# 
   547  011B                     	;# 
   548  011D                     	;# 
   549  011E                     	;# 
   550  018C                     	;# 
   551  018D                     	;# 
   552  018E                     	;# 
   553  0191                     	;# 
   554  0191                     	;# 
   555  0192                     	;# 
   556  0193                     	;# 
   557  0193                     	;# 
   558  0193                     	;# 
   559  0194                     	;# 
   560  0195                     	;# 
   561  0196                     	;# 
   562  0199                     	;# 
   563  019A                     	;# 
   564  019B                     	;# 
   565  019B                     	;# 
   566  019B                     	;# 
   567  019B                     	;# 
   568  019C                     	;# 
   569  019C                     	;# 
   570  019D                     	;# 
   571  019E                     	;# 
   572  019F                     	;# 
   573  020C                     	;# 
   574  020D                     	;# 
   575  020E                     	;# 
   576  0211                     	;# 
   577  0211                     	;# 
   578  0212                     	;# 
   579  0212                     	;# 
   580  0213                     	;# 
   581  0213                     	;# 
   582  0214                     	;# 
   583  0214                     	;# 
   584  0215                     	;# 
   585  0215                     	;# 
   586  0215                     	;# 
   587  0216                     	;# 
   588  0216                     	;# 
   589  0217                     	;# 
   590  0217                     	;# 
   591  0219                     	;# 
   592  021A                     	;# 
   593  021B                     	;# 
   594  021C                     	;# 
   595  021D                     	;# 
   596  021E                     	;# 
   597  021F                     	;# 
   598  0291                     	;# 
   599  0291                     	;# 
   600  0292                     	;# 
   601  0293                     	;# 
   602  0294                     	;# 
   603  0295                     	;# 
   604  0295                     	;# 
   605  0296                     	;# 
   606  0298                     	;# 
   607  0298                     	;# 
   608  0299                     	;# 
   609  029A                     	;# 
   610  029B                     	;# 
   611  029C                     	;# 
   612  029D                     	;# 
   613  029E                     	;# 
   614  0311                     	;# 
   615  0311                     	;# 
   616  0312                     	;# 
   617  0313                     	;# 
   618  0318                     	;# 
   619  0318                     	;# 
   620  0319                     	;# 
   621  031A                     	;# 
   622  038C                     	;# 
   623  038D                     	;# 
   624  038E                     	;# 
   625  0391                     	;# 
   626  0392                     	;# 
   627  0393                     	;# 
   628  0394                     	;# 
   629  0395                     	;# 
   630  0396                     	;# 
   631  039A                     	;# 
   632  039C                     	;# 
   633  039D                     	;# 
   634  039E                     	;# 
   635  039F                     	;# 
   636  0415                     	;# 
   637  0416                     	;# 
   638  0417                     	;# 
   639  041C                     	;# 
   640  041D                     	;# 
   641  041E                     	;# 
   642  0FE4                     	;# 
   643  0FE5                     	;# 
   644  0FE6                     	;# 
   645  0FE7                     	;# 
   646  0FE8                     	;# 
   647  0FE9                     	;# 
   648  0FEA                     	;# 
   649  0FEB                     	;# 
   650  0FED                     	;# 
   651  0FEE                     	;# 
   652  0FEF                     	;# 
   653  0000                     	;# 
   654  0001                     	;# 
   655  0002                     	;# 
   656  0003                     	;# 
   657  0004                     	;# 
   658  0005                     	;# 
   659  0006                     	;# 
   660  0007                     	;# 
   661  0008                     	;# 
   662  0009                     	;# 
   663  000A                     	;# 
   664  000B                     	;# 
   665  000C                     	;# 
   666  000D                     	;# 
   667  000E                     	;# 
   668  0011                     	;# 
   669  0012                     	;# 
   670  0013                     	;# 
   671  0014                     	;# 
   672  0015                     	;# 
   673  0016                     	;# 
   674  0016                     	;# 
   675  0017                     	;# 
   676  0018                     	;# 
   677  0019                     	;# 
   678  001A                     	;# 
   679  001B                     	;# 
   680  001C                     	;# 
   681  001E                     	;# 
   682  001F                     	;# 
   683  008C                     	;# 
   684  008D                     	;# 
   685  008E                     	;# 
   686  0091                     	;# 
   687  0092                     	;# 
   688  0093                     	;# 
   689  0094                     	;# 
   690  0095                     	;# 
   691  0096                     	;# 
   692  0097                     	;# 
   693  0098                     	;# 
   694  0099                     	;# 
   695  009A                     	;# 
   696  009B                     	;# 
   697  009B                     	;# 
   698  009C                     	;# 
   699  009D                     	;# 
   700  009E                     	;# 
   701  010C                     	;# 
   702  010D                     	;# 
   703  010E                     	;# 
   704  0111                     	;# 
   705  0112                     	;# 
   706  0113                     	;# 
   707  0114                     	;# 
   708  0115                     	;# 
   709  0116                     	;# 
   710  0117                     	;# 
   711  0118                     	;# 
   712  0119                     	;# 
   713  011A                     	;# 
   714  011B                     	;# 
   715  011D                     	;# 
   716  011E                     	;# 
   717  018C                     	;# 
   718  018D                     	;# 
   719  018E                     	;# 
   720  0191                     	;# 
   721  0191                     	;# 
   722  0192                     	;# 
   723  0193                     	;# 
   724  0193                     	;# 
   725  0193                     	;# 
   726  0194                     	;# 
   727  0195                     	;# 
   728  0196                     	;# 
   729  0199                     	;# 
   730  019A                     	;# 
   731  019B                     	;# 
   732  019B                     	;# 
   733  019B                     	;# 
   734  019B                     	;# 
   735  019C                     	;# 
   736  019C                     	;# 
   737  019D                     	;# 
   738  019E                     	;# 
   739  019F                     	;# 
   740  020C                     	;# 
   741  020D                     	;# 
   742  020E                     	;# 
   743  0211                     	;# 
   744  0211                     	;# 
   745  0212                     	;# 
   746  0212                     	;# 
   747  0213                     	;# 
   748  0213                     	;# 
   749  0214                     	;# 
   750  0214                     	;# 
   751  0215                     	;# 
   752  0215                     	;# 
   753  0215                     	;# 
   754  0216                     	;# 
   755  0216                     	;# 
   756  0217                     	;# 
   757  0217                     	;# 
   758  0219                     	;# 
   759  021A                     	;# 
   760  021B                     	;# 
   761  021C                     	;# 
   762  021D                     	;# 
   763  021E                     	;# 
   764  021F                     	;# 
   765  0291                     	;# 
   766  0291                     	;# 
   767  0292                     	;# 
   768  0293                     	;# 
   769  0294                     	;# 
   770  0295                     	;# 
   771  0295                     	;# 
   772  0296                     	;# 
   773  0298                     	;# 
   774  0298                     	;# 
   775  0299                     	;# 
   776  029A                     	;# 
   777  029B                     	;# 
   778  029C                     	;# 
   779  029D                     	;# 
   780  029E                     	;# 
   781  0311                     	;# 
   782  0311                     	;# 
   783  0312                     	;# 
   784  0313                     	;# 
   785  0318                     	;# 
   786  0318                     	;# 
   787  0319                     	;# 
   788  031A                     	;# 
   789  038C                     	;# 
   790  038D                     	;# 
   791  038E                     	;# 
   792  0391                     	;# 
   793  0392                     	;# 
   794  0393                     	;# 
   795  0394                     	;# 
   796  0395                     	;# 
   797  0396                     	;# 
   798  039A                     	;# 
   799  039C                     	;# 
   800  039D                     	;# 
   801  039E                     	;# 
   802  039F                     	;# 
   803  0415                     	;# 
   804  0416                     	;# 
   805  0417                     	;# 
   806  041C                     	;# 
   807  041D                     	;# 
   808  041E                     	;# 
   809  0FE4                     	;# 
   810  0FE5                     	;# 
   811  0FE6                     	;# 
   812  0FE7                     	;# 
   813  0FE8                     	;# 
   814  0FE9                     	;# 
   815  0FEA                     	;# 
   816  0FEB                     	;# 
   817  0FED                     	;# 
   818  0FEE                     	;# 
   819  0FEF                     	;# 
   820  0000                     	;# 
   821  0001                     	;# 
   822  0002                     	;# 
   823  0003                     	;# 
   824  0004                     	;# 
   825  0005                     	;# 
   826  0006                     	;# 
   827  0007                     	;# 
   828  0008                     	;# 
   829  0009                     	;# 
   830  000A                     	;# 
   831  000B                     	;# 
   832  000C                     	;# 
   833  000D                     	;# 
   834  000E                     	;# 
   835  0011                     	;# 
   836  0012                     	;# 
   837  0013                     	;# 
   838  0014                     	;# 
   839  0015                     	;# 
   840  0016                     	;# 
   841  0016                     	;# 
   842  0017                     	;# 
   843  0018                     	;# 
   844  0019                     	;# 
   845  001A                     	;# 
   846  001B                     	;# 
   847  001C                     	;# 
   848  001E                     	;# 
   849  001F                     	;# 
   850  008C                     	;# 
   851  008D                     	;# 
   852  008E                     	;# 
   853  0091                     	;# 
   854  0092                     	;# 
   855  0093                     	;# 
   856  0094                     	;# 
   857  0095                     	;# 
   858  0096                     	;# 
   859  0097                     	;# 
   860  0098                     	;# 
   861  0099                     	;# 
   862  009A                     	;# 
   863  009B                     	;# 
   864  009B                     	;# 
   865  009C                     	;# 
   866  009D                     	;# 
   867  009E                     	;# 
   868  010C                     	;# 
   869  010D                     	;# 
   870  010E                     	;# 
   871  0111                     	;# 
   872  0112                     	;# 
   873  0113                     	;# 
   874  0114                     	;# 
   875  0115                     	;# 
   876  0116                     	;# 
   877  0117                     	;# 
   878  0118                     	;# 
   879  0119                     	;# 
   880  011A                     	;# 
   881  011B                     	;# 
   882  011D                     	;# 
   883  011E                     	;# 
   884  018C                     	;# 
   885  018D                     	;# 
   886  018E                     	;# 
   887  0191                     	;# 
   888  0191                     	;# 
   889  0192                     	;# 
   890  0193                     	;# 
   891  0193                     	;# 
   892  0193                     	;# 
   893  0194                     	;# 
   894  0195                     	;# 
   895  0196                     	;# 
   896  0199                     	;# 
   897  019A                     	;# 
   898  019B                     	;# 
   899  019B                     	;# 
   900  019B                     	;# 
   901  019B                     	;# 
   902  019C                     	;# 
   903  019C                     	;# 
   904  019D                     	;# 
   905  019E                     	;# 
   906  019F                     	;# 
   907  020C                     	;# 
   908  020D                     	;# 
   909  020E                     	;# 
   910  0211                     	;# 
   911  0211                     	;# 
   912  0212                     	;# 
   913  0212                     	;# 
   914  0213                     	;# 
   915  0213                     	;# 
   916  0214                     	;# 
   917  0214                     	;# 
   918  0215                     	;# 
   919  0215                     	;# 
   920  0215                     	;# 
   921  0216                     	;# 
   922  0216                     	;# 
   923  0217                     	;# 
   924  0217                     	;# 
   925  0219                     	;# 
   926  021A                     	;# 
   927  021B                     	;# 
   928  021C                     	;# 
   929  021D                     	;# 
   930  021E                     	;# 
   931  021F                     	;# 
   932  0291                     	;# 
   933  0291                     	;# 
   934  0292                     	;# 
   935  0293                     	;# 
   936  0294                     	;# 
   937  0295                     	;# 
   938  0295                     	;# 
   939  0296                     	;# 
   940  0298                     	;# 
   941  0298                     	;# 
   942  0299                     	;# 
   943  029A                     	;# 
   944  029B                     	;# 
   945  029C                     	;# 
   946  029D                     	;# 
   947  029E                     	;# 
   948  0311                     	;# 
   949  0311                     	;# 
   950  0312                     	;# 
   951  0313                     	;# 
   952  0318                     	;# 
   953  0318                     	;# 
   954  0319                     	;# 
   955  031A                     	;# 
   956  038C                     	;# 
   957  038D                     	;# 
   958  038E                     	;# 
   959  0391                     	;# 
   960  0392                     	;# 
   961  0393                     	;# 
   962  0394                     	;# 
   963  0395                     	;# 
   964  0396                     	;# 
   965  039A                     	;# 
   966  039C                     	;# 
   967  039D                     	;# 
   968  039E                     	;# 
   969  039F                     	;# 
   970  0415                     	;# 
   971  0416                     	;# 
   972  0417                     	;# 
   973  041C                     	;# 
   974  041D                     	;# 
   975  041E                     	;# 
   976  0FE4                     	;# 
   977  0FE5                     	;# 
   978  0FE6                     	;# 
   979  0FE7                     	;# 
   980  0FE8                     	;# 
   981  0FE9                     	;# 
   982  0FEA                     	;# 
   983  0FEB                     	;# 
   984  0FED                     	;# 
   985  0FEE                     	;# 
   986  0FEF                     	;# 
   987  0000                     	;# 
   988  0001                     	;# 
   989  0002                     	;# 
   990  0003                     	;# 
   991  0004                     	;# 
   992  0005                     	;# 
   993  0006                     	;# 
   994  0007                     	;# 
   995  0008                     	;# 
   996  0009                     	;# 
   997  000A                     	;# 
   998  000B                     	;# 
   999  000C                     	;# 
  1000  000D                     	;# 
  1001  000E                     	;# 
  1002  0011                     	;# 
  1003  0012                     	;# 
  1004  0013                     	;# 
  1005  0014                     	;# 
  1006  0015                     	;# 
  1007  0016                     	;# 
  1008  0016                     	;# 
  1009  0017                     	;# 
  1010  0018                     	;# 
  1011  0019                     	;# 
  1012  001A                     	;# 
  1013  001B                     	;# 
  1014  001C                     	;# 
  1015  001E                     	;# 
  1016  001F                     	;# 
  1017  008C                     	;# 
  1018  008D                     	;# 
  1019  008E                     	;# 
  1020  0091                     	;# 
  1021  0092                     	;# 
  1022  0093                     	;# 
  1023  0094                     	;# 
  1024  0095                     	;# 
  1025  0096                     	;# 
  1026  0097                     	;# 
  1027  0098                     	;# 
  1028  0099                     	;# 
  1029  009A                     	;# 
  1030  009B                     	;# 
  1031  009B                     	;# 
  1032  009C                     	;# 
  1033  009D                     	;# 
  1034  009E                     	;# 
  1035  010C                     	;# 
  1036  010D                     	;# 
  1037  010E                     	;# 
  1038  0111                     	;# 
  1039  0112                     	;# 
  1040  0113                     	;# 
  1041  0114                     	;# 
  1042  0115                     	;# 
  1043  0116                     	;# 
  1044  0117                     	;# 
  1045  0118                     	;# 
  1046  0119                     	;# 
  1047  011A                     	;# 
  1048  011B                     	;# 
  1049  011D                     	;# 
  1050  011E                     	;# 
  1051  018C                     	;# 
  1052  018D                     	;# 
  1053  018E                     	;# 
  1054  0191                     	;# 
  1055  0191                     	;# 
  1056  0192                     	;# 
  1057  0193                     	;# 
  1058  0193                     	;# 
  1059  0193                     	;# 
  1060  0194                     	;# 
  1061  0195                     	;# 
  1062  0196                     	;# 
  1063  0199                     	;# 
  1064  019A                     	;# 
  1065  019B                     	;# 
  1066  019B                     	;# 
  1067  019B                     	;# 
  1068  019B                     	;# 
  1069  019C                     	;# 
  1070  019C                     	;# 
  1071  019D                     	;# 
  1072  019E                     	;# 
  1073  019F                     	;# 
  1074  020C                     	;# 
  1075  020D                     	;# 
  1076  020E                     	;# 
  1077  0211                     	;# 
  1078  0211                     	;# 
  1079  0212                     	;# 
  1080  0212                     	;# 
  1081  0213                     	;# 
  1082  0213                     	;# 
  1083  0214                     	;# 
  1084  0214                     	;# 
  1085  0215                     	;# 
  1086  0215                     	;# 
  1087  0215                     	;# 
  1088  0216                     	;# 
  1089  0216                     	;# 
  1090  0217                     	;# 
  1091  0217                     	;# 
  1092  0219                     	;# 
  1093  021A                     	;# 
  1094  021B                     	;# 
  1095  021C                     	;# 
  1096  021D                     	;# 
  1097  021E                     	;# 
  1098  021F                     	;# 
  1099  0291                     	;# 
  1100  0291                     	;# 
  1101  0292                     	;# 
  1102  0293                     	;# 
  1103  0294                     	;# 
  1104  0295                     	;# 
  1105  0295                     	;# 
  1106  0296                     	;# 
  1107  0298                     	;# 
  1108  0298                     	;# 
  1109  0299                     	;# 
  1110  029A                     	;# 
  1111  029B                     	;# 
  1112  029C                     	;# 
  1113  029D                     	;# 
  1114  029E                     	;# 
  1115  0311                     	;# 
  1116  0311                     	;# 
  1117  0312                     	;# 
  1118  0313                     	;# 
  1119  0318                     	;# 
  1120  0318                     	;# 
  1121  0319                     	;# 
  1122  031A                     	;# 
  1123  038C                     	;# 
  1124  038D                     	;# 
  1125  038E                     	;# 
  1126  0391                     	;# 
  1127  0392                     	;# 
  1128  0393                     	;# 
  1129  0394                     	;# 
  1130  0395                     	;# 
  1131  0396                     	;# 
  1132  039A                     	;# 
  1133  039C                     	;# 
  1134  039D                     	;# 
  1135  039E                     	;# 
  1136  039F                     	;# 
  1137  0415                     	;# 
  1138  0416                     	;# 
  1139  0417                     	;# 
  1140  041C                     	;# 
  1141  041D                     	;# 
  1142  041E                     	;# 
  1143  0FE4                     	;# 
  1144  0FE5                     	;# 
  1145  0FE6                     	;# 
  1146  0FE7                     	;# 
  1147  0FE8                     	;# 
  1148  0FE9                     	;# 
  1149  0FEA                     	;# 
  1150  0FEB                     	;# 
  1151  0FED                     	;# 
  1152  0FEE                     	;# 
  1153  0FEF                     	;# 
  1154  0000                     	;# 
  1155  0001                     	;# 
  1156  0002                     	;# 
  1157  0003                     	;# 
  1158  0004                     	;# 
  1159  0005                     	;# 
  1160  0006                     	;# 
  1161  0007                     	;# 
  1162  0008                     	;# 
  1163  0009                     	;# 
  1164  000A                     	;# 
  1165  000B                     	;# 
  1166  000C                     	;# 
  1167  000D                     	;# 
  1168  000E                     	;# 
  1169  0011                     	;# 
  1170  0012                     	;# 
  1171  0013                     	;# 
  1172  0014                     	;# 
  1173  0015                     	;# 
  1174  0016                     	;# 
  1175  0016                     	;# 
  1176  0017                     	;# 
  1177  0018                     	;# 
  1178  0019                     	;# 
  1179  001A                     	;# 
  1180  001B                     	;# 
  1181  001C                     	;# 
  1182  001E                     	;# 
  1183  001F                     	;# 
  1184  008C                     	;# 
  1185  008D                     	;# 
  1186  008E                     	;# 
  1187  0091                     	;# 
  1188  0092                     	;# 
  1189  0093                     	;# 
  1190  0094                     	;# 
  1191  0095                     	;# 
  1192  0096                     	;# 
  1193  0097                     	;# 
  1194  0098                     	;# 
  1195  0099                     	;# 
  1196  009A                     	;# 
  1197  009B                     	;# 
  1198  009B                     	;# 
  1199  009C                     	;# 
  1200  009D                     	;# 
  1201  009E                     	;# 
  1202  010C                     	;# 
  1203  010D                     	;# 
  1204  010E                     	;# 
  1205  0111                     	;# 
  1206  0112                     	;# 
  1207  0113                     	;# 
  1208  0114                     	;# 
  1209  0115                     	;# 
  1210  0116                     	;# 
  1211  0117                     	;# 
  1212  0118                     	;# 
  1213  0119                     	;# 
  1214  011A                     	;# 
  1215  011B                     	;# 
  1216  011D                     	;# 
  1217  011E                     	;# 
  1218  018C                     	;# 
  1219  018D                     	;# 
  1220  018E                     	;# 
  1221  0191                     	;# 
  1222  0191                     	;# 
  1223  0192                     	;# 
  1224  0193                     	;# 
  1225  0193                     	;# 
  1226  0193                     	;# 
  1227  0194                     	;# 
  1228  0195                     	;# 
  1229  0196                     	;# 
  1230  0199                     	;# 
  1231  019A                     	;# 
  1232  019B                     	;# 
  1233  019B                     	;# 
  1234  019B                     	;# 
  1235  019B                     	;# 
  1236  019C                     	;# 
  1237  019C                     	;# 
  1238  019D                     	;# 
  1239  019E                     	;# 
  1240  019F                     	;# 
  1241  020C                     	;# 
  1242  020D                     	;# 
  1243  020E                     	;# 
  1244  0211                     	;# 
  1245  0211                     	;# 
  1246  0212                     	;# 
  1247  0212                     	;# 
  1248  0213                     	;# 
  1249  0213                     	;# 
  1250  0214                     	;# 
  1251  0214                     	;# 
  1252  0215                     	;# 
  1253  0215                     	;# 
  1254  0215                     	;# 
  1255  0216                     	;# 
  1256  0216                     	;# 
  1257  0217                     	;# 
  1258  0217                     	;# 
  1259  0219                     	;# 
  1260  021A                     	;# 
  1261  021B                     	;# 
  1262  021C                     	;# 
  1263  021D                     	;# 
  1264  021E                     	;# 
  1265  021F                     	;# 
  1266  0291                     	;# 
  1267  0291                     	;# 
  1268  0292                     	;# 
  1269  0293                     	;# 
  1270  0294                     	;# 
  1271  0295                     	;# 
  1272  0295                     	;# 
  1273  0296                     	;# 
  1274  0298                     	;# 
  1275  0298                     	;# 
  1276  0299                     	;# 
  1277  029A                     	;# 
  1278  029B                     	;# 
  1279  029C                     	;# 
  1280  029D                     	;# 
  1281  029E                     	;# 
  1282  0311                     	;# 
  1283  0311                     	;# 
  1284  0312                     	;# 
  1285  0313                     	;# 
  1286  0318                     	;# 
  1287  0318                     	;# 
  1288  0319                     	;# 
  1289  031A                     	;# 
  1290  038C                     	;# 
  1291  038D                     	;# 
  1292  038E                     	;# 
  1293  0391                     	;# 
  1294  0392                     	;# 
  1295  0393                     	;# 
  1296  0394                     	;# 
  1297  0395                     	;# 
  1298  0396                     	;# 
  1299  039A                     	;# 
  1300  039C                     	;# 
  1301  039D                     	;# 
  1302  039E                     	;# 
  1303  039F                     	;# 
  1304  0415                     	;# 
  1305  0416                     	;# 
  1306  0417                     	;# 
  1307  041C                     	;# 
  1308  041D                     	;# 
  1309  041E                     	;# 
  1310  0FE4                     	;# 
  1311  0FE5                     	;# 
  1312  0FE6                     	;# 
  1313  0FE7                     	;# 
  1314  0FE8                     	;# 
  1315  0FE9                     	;# 
  1316  0FEA                     	;# 
  1317  0FEB                     	;# 
  1318  0FED                     	;# 
  1319  0FEE                     	;# 
  1320  0FEF                     	;# 
  1321  0000                     	;# 
  1322  0001                     	;# 
  1323  0002                     	;# 
  1324  0003                     	;# 
  1325  0004                     	;# 
  1326  0005                     	;# 
  1327  0006                     	;# 
  1328  0007                     	;# 
  1329  0008                     	;# 
  1330  0009                     	;# 
  1331  000A                     	;# 
  1332  000B                     	;# 
  1333  000C                     	;# 
  1334  000D                     	;# 
  1335  000E                     	;# 
  1336  0011                     	;# 
  1337  0012                     	;# 
  1338  0013                     	;# 
  1339  0014                     	;# 
  1340  0015                     	;# 
  1341  0016                     	;# 
  1342  0016                     	;# 
  1343  0017                     	;# 
  1344  0018                     	;# 
  1345  0019                     	;# 
  1346  001A                     	;# 
  1347  001B                     	;# 
  1348  001C                     	;# 
  1349  001E                     	;# 
  1350  001F                     	;# 
  1351  008C                     	;# 
  1352  008D                     	;# 
  1353  008E                     	;# 
  1354  0091                     	;# 
  1355  0092                     	;# 
  1356  0093                     	;# 
  1357  0094                     	;# 
  1358  0095                     	;# 
  1359  0096                     	;# 
  1360  0097                     	;# 
  1361  0098                     	;# 
  1362  0099                     	;# 
  1363  009A                     	;# 
  1364  009B                     	;# 
  1365  009B                     	;# 
  1366  009C                     	;# 
  1367  009D                     	;# 
  1368  009E                     	;# 
  1369  010C                     	;# 
  1370  010D                     	;# 
  1371  010E                     	;# 
  1372  0111                     	;# 
  1373  0112                     	;# 
  1374  0113                     	;# 
  1375  0114                     	;# 
  1376  0115                     	;# 
  1377  0116                     	;# 
  1378  0117                     	;# 
  1379  0118                     	;# 
  1380  0119                     	;# 
  1381  011A                     	;# 
  1382  011B                     	;# 
  1383  011D                     	;# 
  1384  011E                     	;# 
  1385  018C                     	;# 
  1386  018D                     	;# 
  1387  018E                     	;# 
  1388  0191                     	;# 
  1389  0191                     	;# 
  1390  0192                     	;# 
  1391  0193                     	;# 
  1392  0193                     	;# 
  1393  0193                     	;# 
  1394  0194                     	;# 
  1395  0195                     	;# 
  1396  0196                     	;# 
  1397  0199                     	;# 
  1398  019A                     	;# 
  1399  019B                     	;# 
  1400  019B                     	;# 
  1401  019B                     	;# 
  1402  019B                     	;# 
  1403  019C                     	;# 
  1404  019C                     	;# 
  1405  019D                     	;# 
  1406  019E                     	;# 
  1407  019F                     	;# 
  1408  020C                     	;# 
  1409  020D                     	;# 
  1410  020E                     	;# 
  1411  0211                     	;# 
  1412  0211                     	;# 
  1413  0212                     	;# 
  1414  0212                     	;# 
  1415  0213                     	;# 
  1416  0213                     	;# 
  1417  0214                     	;# 
  1418  0214                     	;# 
  1419  0215                     	;# 
  1420  0215                     	;# 
  1421  0215                     	;# 
  1422  0216                     	;# 
  1423  0216                     	;# 
  1424  0217                     	;# 
  1425  0217                     	;# 
  1426  0219                     	;# 
  1427  021A                     	;# 
  1428  021B                     	;# 
  1429  021C                     	;# 
  1430  021D                     	;# 
  1431  021E                     	;# 
  1432  021F                     	;# 
  1433  0291                     	;# 
  1434  0291                     	;# 
  1435  0292                     	;# 
  1436  0293                     	;# 
  1437  0294                     	;# 
  1438  0295                     	;# 
  1439  0295                     	;# 
  1440  0296                     	;# 
  1441  0298                     	;# 
  1442  0298                     	;# 
  1443  0299                     	;# 
  1444  029A                     	;# 
  1445  029B                     	;# 
  1446  029C                     	;# 
  1447  029D                     	;# 
  1448  029E                     	;# 
  1449  0311                     	;# 
  1450  0311                     	;# 
  1451  0312                     	;# 
  1452  0313                     	;# 
  1453  0318                     	;# 
  1454  0318                     	;# 
  1455  0319                     	;# 
  1456  031A                     	;# 
  1457  038C                     	;# 
  1458  038D                     	;# 
  1459  038E                     	;# 
  1460  0391                     	;# 
  1461  0392                     	;# 
  1462  0393                     	;# 
  1463  0394                     	;# 
  1464  0395                     	;# 
  1465  0396                     	;# 
  1466  039A                     	;# 
  1467  039C                     	;# 
  1468  039D                     	;# 
  1469  039E                     	;# 
  1470  039F                     	;# 
  1471  0415                     	;# 
  1472  0416                     	;# 
  1473  0417                     	;# 
  1474  041C                     	;# 
  1475  041D                     	;# 
  1476  041E                     	;# 
  1477  0FE4                     	;# 
  1478  0FE5                     	;# 
  1479  0FE6                     	;# 
  1480  0FE7                     	;# 
  1481  0FE8                     	;# 
  1482  0FE9                     	;# 
  1483  0FEA                     	;# 
  1484  0FEB                     	;# 
  1485  0FED                     	;# 
  1486  0FEE                     	;# 
  1487  0FEF                     	;# 
  1488  0000                     	;# 
  1489  0001                     	;# 
  1490  0002                     	;# 
  1491  0003                     	;# 
  1492  0004                     	;# 
  1493  0005                     	;# 
  1494  0006                     	;# 
  1495  0007                     	;# 
  1496  0008                     	;# 
  1497  0009                     	;# 
  1498  000A                     	;# 
  1499  000B                     	;# 
  1500  000C                     	;# 
  1501  000D                     	;# 
  1502  000E                     	;# 
  1503  0011                     	;# 
  1504  0012                     	;# 
  1505  0013                     	;# 
  1506  0014                     	;# 
  1507  0015                     	;# 
  1508  0016                     	;# 
  1509  0016                     	;# 
  1510  0017                     	;# 
  1511  0018                     	;# 
  1512  0019                     	;# 
  1513  001A                     	;# 
  1514  001B                     	;# 
  1515  001C                     	;# 
  1516  001E                     	;# 
  1517  001F                     	;# 
  1518  008C                     	;# 
  1519  008D                     	;# 
  1520  008E                     	;# 
  1521  0091                     	;# 
  1522  0092                     	;# 
  1523  0093                     	;# 
  1524  0094                     	;# 
  1525  0095                     	;# 
  1526  0096                     	;# 
  1527  0097                     	;# 
  1528  0098                     	;# 
  1529  0099                     	;# 
  1530  009A                     	;# 
  1531  009B                     	;# 
  1532  009B                     	;# 
  1533  009C                     	;# 
  1534  009D                     	;# 
  1535  009E                     	;# 
  1536  010C                     	;# 
  1537  010D                     	;# 
  1538  010E                     	;# 
  1539  0111                     	;# 
  1540  0112                     	;# 
  1541  0113                     	;# 
  1542  0114                     	;# 
  1543  0115                     	;# 
  1544  0116                     	;# 
  1545  0117                     	;# 
  1546  0118                     	;# 
  1547  0119                     	;# 
  1548  011A                     	;# 
  1549  011B                     	;# 
  1550  011D                     	;# 
  1551  011E                     	;# 
  1552  018C                     	;# 
  1553  018D                     	;# 
  1554  018E                     	;# 
  1555  0191                     	;# 
  1556  0191                     	;# 
  1557  0192                     	;# 
  1558  0193                     	;# 
  1559  0193                     	;# 
  1560  0193                     	;# 
  1561  0194                     	;# 
  1562  0195                     	;# 
  1563  0196                     	;# 
  1564  0199                     	;# 
  1565  019A                     	;# 
  1566  019B                     	;# 
  1567  019B                     	;# 
  1568  019B                     	;# 
  1569  019B                     	;# 
  1570  019C                     	;# 
  1571  019C                     	;# 
  1572  019D                     	;# 
  1573  019E                     	;# 
  1574  019F                     	;# 
  1575  020C                     	;# 
  1576  020D                     	;# 
  1577  020E                     	;# 
  1578  0211                     	;# 
  1579  0211                     	;# 
  1580  0212                     	;# 
  1581  0212                     	;# 
  1582  0213                     	;# 
  1583  0213                     	;# 
  1584  0214                     	;# 
  1585  0214                     	;# 
  1586  0215                     	;# 
  1587  0215                     	;# 
  1588  0215                     	;# 
  1589  0216                     	;# 
  1590  0216                     	;# 
  1591  0217                     	;# 
  1592  0217                     	;# 
  1593  0219                     	;# 
  1594  021A                     	;# 
  1595  021B                     	;# 
  1596  021C                     	;# 
  1597  021D                     	;# 
  1598  021E                     	;# 
  1599  021F                     	;# 
  1600  0291                     	;# 
  1601  0291                     	;# 
  1602  0292                     	;# 
  1603  0293                     	;# 
  1604  0294                     	;# 
  1605  0295                     	;# 
  1606  0295                     	;# 
  1607  0296                     	;# 
  1608  0298                     	;# 
  1609  0298                     	;# 
  1610  0299                     	;# 
  1611  029A                     	;# 
  1612  029B                     	;# 
  1613  029C                     	;# 
  1614  029D                     	;# 
  1615  029E                     	;# 
  1616  0311                     	;# 
  1617  0311                     	;# 
  1618  0312                     	;# 
  1619  0313                     	;# 
  1620  0318                     	;# 
  1621  0318                     	;# 
  1622  0319                     	;# 
  1623  031A                     	;# 
  1624  038C                     	;# 
  1625  038D                     	;# 
  1626  038E                     	;# 
  1627  0391                     	;# 
  1628  0392                     	;# 
  1629  0393                     	;# 
  1630  0394                     	;# 
  1631  0395                     	;# 
  1632  0396                     	;# 
  1633  039A                     	;# 
  1634  039C                     	;# 
  1635  039D                     	;# 
  1636  039E                     	;# 
  1637  039F                     	;# 
  1638  0415                     	;# 
  1639  0416                     	;# 
  1640  0417                     	;# 
  1641  041C                     	;# 
  1642  041D                     	;# 
  1643  041E                     	;# 
  1644  0FE4                     	;# 
  1645  0FE5                     	;# 
  1646  0FE6                     	;# 
  1647  0FE7                     	;# 
  1648  0FE8                     	;# 
  1649  0FE9                     	;# 
  1650  0FEA                     	;# 
  1651  0FEB                     	;# 
  1652  0FED                     	;# 
  1653  0FEE                     	;# 
  1654  0FEF                     	;# 
  1655  0000                     	;# 
  1656  0001                     	;# 
  1657  0002                     	;# 
  1658  0003                     	;# 
  1659  0004                     	;# 
  1660  0005                     	;# 
  1661  0006                     	;# 
  1662  0007                     	;# 
  1663  0008                     	;# 
  1664  0009                     	;# 
  1665  000A                     	;# 
  1666  000B                     	;# 
  1667  000C                     	;# 
  1668  000D                     	;# 
  1669  000E                     	;# 
  1670  0011                     	;# 
  1671  0012                     	;# 
  1672  0013                     	;# 
  1673  0014                     	;# 
  1674  0015                     	;# 
  1675  0016                     	;# 
  1676  0016                     	;# 
  1677  0017                     	;# 
  1678  0018                     	;# 
  1679  0019                     	;# 
  1680  001A                     	;# 
  1681  001B                     	;# 
  1682  001C                     	;# 
  1683  001E                     	;# 
  1684  001F                     	;# 
  1685  008C                     	;# 
  1686  008D                     	;# 
  1687  008E                     	;# 
  1688  0091                     	;# 
  1689  0092                     	;# 
  1690  0093                     	;# 
  1691  0094                     	;# 
  1692  0095                     	;# 
  1693  0096                     	;# 
  1694  0097                     	;# 
  1695  0098                     	;# 
  1696  0099                     	;# 
  1697  009A                     	;# 
  1698  009B                     	;# 
  1699  009B                     	;# 
  1700  009C                     	;# 
  1701  009D                     	;# 
  1702  009E                     	;# 
  1703  010C                     	;# 
  1704  010D                     	;# 
  1705  010E                     	;# 
  1706  0111                     	;# 
  1707  0112                     	;# 
  1708  0113                     	;# 
  1709  0114                     	;# 
  1710  0115                     	;# 
  1711  0116                     	;# 
  1712  0117                     	;# 
  1713  0118                     	;# 
  1714  0119                     	;# 
  1715  011A                     	;# 
  1716  011B                     	;# 
  1717  011D                     	;# 
  1718  011E                     	;# 
  1719  018C                     	;# 
  1720  018D                     	;# 
  1721  018E                     	;# 
  1722  0191                     	;# 
  1723  0191                     	;# 
  1724  0192                     	;# 
  1725  0193                     	;# 
  1726  0193                     	;# 
  1727  0193                     	;# 
  1728  0194                     	;# 
  1729  0195                     	;# 
  1730  0196                     	;# 
  1731  0199                     	;# 
  1732  019A                     	;# 
  1733  019B                     	;# 
  1734  019B                     	;# 
  1735  019B                     	;# 
  1736  019B                     	;# 
  1737  019C                     	;# 
  1738  019C                     	;# 
  1739  019D                     	;# 
  1740  019E                     	;# 
  1741  019F                     	;# 
  1742  020C                     	;# 
  1743  020D                     	;# 
  1744  020E                     	;# 
  1745  0211                     	;# 
  1746  0211                     	;# 
  1747  0212                     	;# 
  1748  0212                     	;# 
  1749  0213                     	;# 
  1750  0213                     	;# 
  1751  0214                     	;# 
  1752  0214                     	;# 
  1753  0215                     	;# 
  1754  0215                     	;# 
  1755  0215                     	;# 
  1756  0216                     	;# 
  1757  0216                     	;# 
  1758  0217                     	;# 
  1759  0217                     	;# 
  1760  0219                     	;# 
  1761  021A                     	;# 
  1762  021B                     	;# 
  1763  021C                     	;# 
  1764  021D                     	;# 
  1765  021E                     	;# 
  1766  021F                     	;# 
  1767  0291                     	;# 
  1768  0291                     	;# 
  1769  0292                     	;# 
  1770  0293                     	;# 
  1771  0294                     	;# 
  1772  0295                     	;# 
  1773  0295                     	;# 
  1774  0296                     	;# 
  1775  0298                     	;# 
  1776  0298                     	;# 
  1777  0299                     	;# 
  1778  029A                     	;# 
  1779  029B                     	;# 
  1780  029C                     	;# 
  1781  029D                     	;# 
  1782  029E                     	;# 
  1783  0311                     	;# 
  1784  0311                     	;# 
  1785  0312                     	;# 
  1786  0313                     	;# 
  1787  0318                     	;# 
  1788  0318                     	;# 
  1789  0319                     	;# 
  1790  031A                     	;# 
  1791  038C                     	;# 
  1792  038D                     	;# 
  1793  038E                     	;# 
  1794  0391                     	;# 
  1795  0392                     	;# 
  1796  0393                     	;# 
  1797  0394                     	;# 
  1798  0395                     	;# 
  1799  0396                     	;# 
  1800  039A                     	;# 
  1801  039C                     	;# 
  1802  039D                     	;# 
  1803  039E                     	;# 
  1804  039F                     	;# 
  1805  0415                     	;# 
  1806  0416                     	;# 
  1807  0417                     	;# 
  1808  041C                     	;# 
  1809  041D                     	;# 
  1810  041E                     	;# 
  1811  0FE4                     	;# 
  1812  0FE5                     	;# 
  1813  0FE6                     	;# 
  1814  0FE7                     	;# 
  1815  0FE8                     	;# 
  1816  0FE9                     	;# 
  1817  0FEA                     	;# 
  1818  0FEB                     	;# 
  1819  0FED                     	;# 
  1820  0FEE                     	;# 
  1821  0FEF                     	;# 
  1822  0000                     	;# 
  1823  0001                     	;# 
  1824  0002                     	;# 
  1825  0003                     	;# 
  1826  0004                     	;# 
  1827  0005                     	;# 
  1828  0006                     	;# 
  1829  0007                     	;# 
  1830  0008                     	;# 
  1831  0009                     	;# 
  1832  000A                     	;# 
  1833  000B                     	;# 
  1834  000C                     	;# 
  1835  000D                     	;# 
  1836  000E                     	;# 
  1837  0011                     	;# 
  1838  0012                     	;# 
  1839  0013                     	;# 
  1840  0014                     	;# 
  1841  0015                     	;# 
  1842  0016                     	;# 
  1843  0016                     	;# 
  1844  0017                     	;# 
  1845  0018                     	;# 
  1846  0019                     	;# 
  1847  001A                     	;# 
  1848  001B                     	;# 
  1849  001C                     	;# 
  1850  001E                     	;# 
  1851  001F                     	;# 
  1852  008C                     	;# 
  1853  008D                     	;# 
  1854  008E                     	;# 
  1855  0091                     	;# 
  1856  0092                     	;# 
  1857  0093                     	;# 
  1858  0094                     	;# 
  1859  0095                     	;# 
  1860  0096                     	;# 
  1861  0097                     	;# 
  1862  0098                     	;# 
  1863  0099                     	;# 
  1864  009A                     	;# 
  1865  009B                     	;# 
  1866  009B                     	;# 
  1867  009C                     	;# 
  1868  009D                     	;# 
  1869  009E                     	;# 
  1870  010C                     	;# 
  1871  010D                     	;# 
  1872  010E                     	;# 
  1873  0111                     	;# 
  1874  0112                     	;# 
  1875  0113                     	;# 
  1876  0114                     	;# 
  1877  0115                     	;# 
  1878  0116                     	;# 
  1879  0117                     	;# 
  1880  0118                     	;# 
  1881  0119                     	;# 
  1882  011A                     	;# 
  1883  011B                     	;# 
  1884  011D                     	;# 
  1885  011E                     	;# 
  1886  018C                     	;# 
  1887  018D                     	;# 
  1888  018E                     	;# 
  1889  0191                     	;# 
  1890  0191                     	;# 
  1891  0192                     	;# 
  1892  0193                     	;# 
  1893  0193                     	;# 
  1894  0193                     	;# 
  1895  0194                     	;# 
  1896  0195                     	;# 
  1897  0196                     	;# 
  1898  0199                     	;# 
  1899  019A                     	;# 
  1900  019B                     	;# 
  1901  019B                     	;# 
  1902  019B                     	;# 
  1903  019B                     	;# 
  1904  019C                     	;# 
  1905  019C                     	;# 
  1906  019D                     	;# 
  1907  019E                     	;# 
  1908  019F                     	;# 
  1909  020C                     	;# 
  1910  020D                     	;# 
  1911  020E                     	;# 
  1912  0211                     	;# 
  1913  0211                     	;# 
  1914  0212                     	;# 
  1915  0212                     	;# 
  1916  0213                     	;# 
  1917  0213                     	;# 
  1918  0214                     	;# 
  1919  0214                     	;# 
  1920  0215                     	;# 
  1921  0215                     	;# 
  1922  0215                     	;# 
  1923  0216                     	;# 
  1924  0216                     	;# 
  1925  0217                     	;# 
  1926  0217                     	;# 
  1927  0219                     	;# 
  1928  021A                     	;# 
  1929  021B                     	;# 
  1930  021C                     	;# 
  1931  021D                     	;# 
  1932  021E                     	;# 
  1933  021F                     	;# 
  1934  0291                     	;# 
  1935  0291                     	;# 
  1936  0292                     	;# 
  1937  0293                     	;# 
  1938  0294                     	;# 
  1939  0295                     	;# 
  1940  0295                     	;# 
  1941  0296                     	;# 
  1942  0298                     	;# 
  1943  0298                     	;# 
  1944  0299                     	;# 
  1945  029A                     	;# 
  1946  029B                     	;# 
  1947  029C                     	;# 
  1948  029D                     	;# 
  1949  029E                     	;# 
  1950  0311                     	;# 
  1951  0311                     	;# 
  1952  0312                     	;# 
  1953  0313                     	;# 
  1954  0318                     	;# 
  1955  0318                     	;# 
  1956  0319                     	;# 
  1957  031A                     	;# 
  1958  038C                     	;# 
  1959  038D                     	;# 
  1960  038E                     	;# 
  1961  0391                     	;# 
  1962  0392                     	;# 
  1963  0393                     	;# 
  1964  0394                     	;# 
  1965  0395                     	;# 
  1966  0396                     	;# 
  1967  039A                     	;# 
  1968  039C                     	;# 
  1969  039D                     	;# 
  1970  039E                     	;# 
  1971  039F                     	;# 
  1972  0415                     	;# 
  1973  0416                     	;# 
  1974  0417                     	;# 
  1975  041C                     	;# 
  1976  041D                     	;# 
  1977  041E                     	;# 
  1978  0FE4                     	;# 
  1979  0FE5                     	;# 
  1980  0FE6                     	;# 
  1981  0FE7                     	;# 
  1982  0FE8                     	;# 
  1983  0FE9                     	;# 
  1984  0FEA                     	;# 
  1985  0FEB                     	;# 
  1986  0FED                     	;# 
  1987  0FEE                     	;# 
  1988  0FEF                     	;# 
  1989  0000                     	;# 
  1990  0001                     	;# 
  1991  0002                     	;# 
  1992  0003                     	;# 
  1993  0004                     	;# 
  1994  0005                     	;# 
  1995  0006                     	;# 
  1996  0007                     	;# 
  1997  0008                     	;# 
  1998  0009                     	;# 
  1999  000A                     	;# 
  2000  000B                     	;# 
  2001  000C                     	;# 
  2002  000D                     	;# 
  2003  000E                     	;# 
  2004  0011                     	;# 
  2005  0012                     	;# 
  2006  0013                     	;# 
  2007  0014                     	;# 
  2008  0015                     	;# 
  2009  0016                     	;# 
  2010  0016                     	;# 
  2011  0017                     	;# 
  2012  0018                     	;# 
  2013  0019                     	;# 
  2014  001A                     	;# 
  2015  001B                     	;# 
  2016  001C                     	;# 
  2017  001E                     	;# 
  2018  001F                     	;# 
  2019  008C                     	;# 
  2020  008D                     	;# 
  2021  008E                     	;# 
  2022  0091                     	;# 
  2023  0092                     	;# 
  2024  0093                     	;# 
  2025  0094                     	;# 
  2026  0095                     	;# 
  2027  0096                     	;# 
  2028  0097                     	;# 
  2029  0098                     	;# 
  2030  0099                     	;# 
  2031  009A                     	;# 
  2032  009B                     	;# 
  2033  009B                     	;# 
  2034  009C                     	;# 
  2035  009D                     	;# 
  2036  009E                     	;# 
  2037  010C                     	;# 
  2038  010D                     	;# 
  2039  010E                     	;# 
  2040  0111                     	;# 
  2041  0112                     	;# 
  2042  0113                     	;# 
  2043  0114                     	;# 
  2044  0115                     	;# 
  2045  0116                     	;# 
  2046  0117                     	;# 
  2047  0118                     	;# 
  2048  0119                     	;# 
  2049  011A                     	;# 
  2050  011B                     	;# 
  2051  011D                     	;# 
  2052  011E                     	;# 
  2053  018C                     	;# 
  2054  018D                     	;# 
  2055  018E                     	;# 
  2056  0191                     	;# 
  2057  0191                     	;# 
  2058  0192                     	;# 
  2059  0193                     	;# 
  2060  0193                     	;# 
  2061  0193                     	;# 
  2062  0194                     	;# 
  2063  0195                     	;# 
  2064  0196                     	;# 
  2065  0199                     	;# 
  2066  019A                     	;# 
  2067  019B                     	;# 
  2068  019B                     	;# 
  2069  019B                     	;# 
  2070  019B                     	;# 
  2071  019C                     	;# 
  2072  019C                     	;# 
  2073  019D                     	;# 
  2074  019E                     	;# 
  2075  019F                     	;# 
  2076  020C                     	;# 
  2077  020D                     	;# 
  2078  020E                     	;# 
  2079  0211                     	;# 
  2080  0211                     	;# 
  2081  0212                     	;# 
  2082  0212                     	;# 
  2083  0213                     	;# 
  2084  0213                     	;# 
  2085  0214                     	;# 
  2086  0214                     	;# 
  2087  0215                     	;# 
  2088  0215                     	;# 
  2089  0215                     	;# 
  2090  0216                     	;# 
  2091  0216                     	;# 
  2092  0217                     	;# 
  2093  0217                     	;# 
  2094  0219                     	;# 
  2095  021A                     	;# 
  2096  021B                     	;# 
  2097  021C                     	;# 
  2098  021D                     	;# 
  2099  021E                     	;# 
  2100  021F                     	;# 
  2101  0291                     	;# 
  2102  0291                     	;# 
  2103  0292                     	;# 
  2104  0293                     	;# 
  2105  0294                     	;# 
  2106  0295                     	;# 
  2107  0295                     	;# 
  2108  0296                     	;# 
  2109  0298                     	;# 
  2110  0298                     	;# 
  2111  0299                     	;# 
  2112  029A                     	;# 
  2113  029B                     	;# 
  2114  029C                     	;# 
  2115  029D                     	;# 
  2116  029E                     	;# 
  2117  0311                     	;# 
  2118  0311                     	;# 
  2119  0312                     	;# 
  2120  0313                     	;# 
  2121  0318                     	;# 
  2122  0318                     	;# 
  2123  0319                     	;# 
  2124  031A                     	;# 
  2125  038C                     	;# 
  2126  038D                     	;# 
  2127  038E                     	;# 
  2128  0391                     	;# 
  2129  0392                     	;# 
  2130  0393                     	;# 
  2131  0394                     	;# 
  2132  0395                     	;# 
  2133  0396                     	;# 
  2134  039A                     	;# 
  2135  039C                     	;# 
  2136  039D                     	;# 
  2137  039E                     	;# 
  2138  039F                     	;# 
  2139  0415                     	;# 
  2140  0416                     	;# 
  2141  0417                     	;# 
  2142  041C                     	;# 
  2143  041D                     	;# 
  2144  041E                     	;# 
  2145  0FE4                     	;# 
  2146  0FE5                     	;# 
  2147  0FE6                     	;# 
  2148  0FE7                     	;# 
  2149  0FE8                     	;# 
  2150  0FE9                     	;# 
  2151  0FEA                     	;# 
  2152  0FEB                     	;# 
  2153  0FED                     	;# 
  2154  0FEE                     	;# 
  2155  0FEF                     	;# 
  2156  0000                     	;# 
  2157  0001                     	;# 
  2158  0002                     	;# 
  2159  0003                     	;# 
  2160  0004                     	;# 
  2161  0005                     	;# 
  2162  0006                     	;# 
  2163  0007                     	;# 
  2164  0008                     	;# 
  2165  0009                     	;# 
  2166  000A                     	;# 
  2167  000B                     	;# 
  2168  000C                     	;# 
  2169  000D                     	;# 
  2170  000E                     	;# 
  2171  0011                     	;# 
  2172  0012                     	;# 
  2173  0013                     	;# 
  2174  0014                     	;# 
  2175  0015                     	;# 
  2176  0016                     	;# 
  2177  0016                     	;# 
  2178  0017                     	;# 
  2179  0018                     	;# 
  2180  0019                     	;# 
  2181  001A                     	;# 
  2182  001B                     	;# 
  2183  001C                     	;# 
  2184  001E                     	;# 
  2185  001F                     	;# 
  2186  008C                     	;# 
  2187  008D                     	;# 
  2188  008E                     	;# 
  2189  0091                     	;# 
  2190  0092                     	;# 
  2191  0093                     	;# 
  2192  0094                     	;# 
  2193  0095                     	;# 
  2194  0096                     	;# 
  2195  0097                     	;# 
  2196  0098                     	;# 
  2197  0099                     	;# 
  2198  009A                     	;# 
  2199  009B                     	;# 
  2200  009B                     	;# 
  2201  009C                     	;# 
  2202  009D                     	;# 
  2203  009E                     	;# 
  2204  010C                     	;# 
  2205  010D                     	;# 
  2206  010E                     	;# 
  2207  0111                     	;# 
  2208  0112                     	;# 
  2209  0113                     	;# 
  2210  0114                     	;# 
  2211  0115                     	;# 
  2212  0116                     	;# 
  2213  0117                     	;# 
  2214  0118                     	;# 
  2215  0119                     	;# 
  2216  011A                     	;# 
  2217  011B                     	;# 
  2218  011D                     	;# 
  2219  011E                     	;# 
  2220  018C                     	;# 
  2221  018D                     	;# 
  2222  018E                     	;# 
  2223  0191                     	;# 
  2224  0191                     	;# 
  2225  0192                     	;# 
  2226  0193                     	;# 
  2227  0193                     	;# 
  2228  0193                     	;# 
  2229  0194                     	;# 
  2230  0195                     	;# 
  2231  0196                     	;# 
  2232  0199                     	;# 
  2233  019A                     	;# 
  2234  019B                     	;# 
  2235  019B                     	;# 
  2236  019B                     	;# 
  2237  019B                     	;# 
  2238  019C                     	;# 
  2239  019C                     	;# 
  2240  019D                     	;# 
  2241  019E                     	;# 
  2242  019F                     	;# 
  2243  020C                     	;# 
  2244  020D                     	;# 
  2245  020E                     	;# 
  2246  0211                     	;# 
  2247  0211                     	;# 
  2248  0212                     	;# 
  2249  0212                     	;# 
  2250  0213                     	;# 
  2251  0213                     	;# 
  2252  0214                     	;# 
  2253  0214                     	;# 
  2254  0215                     	;# 
  2255  0215                     	;# 
  2256  0215                     	;# 
  2257  0216                     	;# 
  2258  0216                     	;# 
  2259  0217                     	;# 
  2260  0217                     	;# 
  2261  0219                     	;# 
  2262  021A                     	;# 
  2263  021B                     	;# 
  2264  021C                     	;# 
  2265  021D                     	;# 
  2266  021E                     	;# 
  2267  021F                     	;# 
  2268  0291                     	;# 
  2269  0291                     	;# 
  2270  0292                     	;# 
  2271  0293                     	;# 
  2272  0294                     	;# 
  2273  0295                     	;# 
  2274  0295                     	;# 
  2275  0296                     	;# 
  2276  0298                     	;# 
  2277  0298                     	;# 
  2278  0299                     	;# 
  2279  029A                     	;# 
  2280  029B                     	;# 
  2281  029C                     	;# 
  2282  029D                     	;# 
  2283  029E                     	;# 
  2284  0311                     	;# 
  2285  0311                     	;# 
  2286  0312                     	;# 
  2287  0313                     	;# 
  2288  0318                     	;# 
  2289  0318                     	;# 
  2290  0319                     	;# 
  2291  031A                     	;# 
  2292  038C                     	;# 
  2293  038D                     	;# 
  2294  038E                     	;# 
  2295  0391                     	;# 
  2296  0392                     	;# 
  2297  0393                     	;# 
  2298  0394                     	;# 
  2299  0395                     	;# 
  2300  0396                     	;# 
  2301  039A                     	;# 
  2302  039C                     	;# 
  2303  039D                     	;# 
  2304  039E                     	;# 
  2305  039F                     	;# 
  2306  0415                     	;# 
  2307  0416                     	;# 
  2308  0417                     	;# 
  2309  041C                     	;# 
  2310  041D                     	;# 
  2311  041E                     	;# 
  2312  0FE4                     	;# 
  2313  0FE5                     	;# 
  2314  0FE6                     	;# 
  2315  0FE7                     	;# 
  2316  0FE8                     	;# 
  2317  0FE9                     	;# 
  2318  0FEA                     	;# 
  2319  0FEB                     	;# 
  2320  0FED                     	;# 
  2321  0FEE                     	;# 
  2322  0FEF                     	;# 
  2323  0000                     	;# 
  2324  0001                     	;# 
  2325  0002                     	;# 
  2326  0003                     	;# 
  2327  0004                     	;# 
  2328  0005                     	;# 
  2329  0006                     	;# 
  2330  0007                     	;# 
  2331  0008                     	;# 
  2332  0009                     	;# 
  2333  000A                     	;# 
  2334  000B                     	;# 
  2335  000C                     	;# 
  2336  000D                     	;# 
  2337  000E                     	;# 
  2338  0011                     	;# 
  2339  0012                     	;# 
  2340  0013                     	;# 
  2341  0014                     	;# 
  2342  0015                     	;# 
  2343  0016                     	;# 
  2344  0016                     	;# 
  2345  0017                     	;# 
  2346  0018                     	;# 
  2347  0019                     	;# 
  2348  001A                     	;# 
  2349  001B                     	;# 
  2350  001C                     	;# 
  2351  001E                     	;# 
  2352  001F                     	;# 
  2353  008C                     	;# 
  2354  008D                     	;# 
  2355  008E                     	;# 
  2356  0091                     	;# 
  2357  0092                     	;# 
  2358  0093                     	;# 
  2359  0094                     	;# 
  2360  0095                     	;# 
  2361  0096                     	;# 
  2362  0097                     	;# 
  2363  0098                     	;# 
  2364  0099                     	;# 
  2365  009A                     	;# 
  2366  009B                     	;# 
  2367  009B                     	;# 
  2368  009C                     	;# 
  2369  009D                     	;# 
  2370  009E                     	;# 
  2371  010C                     	;# 
  2372  010D                     	;# 
  2373  010E                     	;# 
  2374  0111                     	;# 
  2375  0112                     	;# 
  2376  0113                     	;# 
  2377  0114                     	;# 
  2378  0115                     	;# 
  2379  0116                     	;# 
  2380  0117                     	;# 
  2381  0118                     	;# 
  2382  0119                     	;# 
  2383  011A                     	;# 
  2384  011B                     	;# 
  2385  011D                     	;# 
  2386  011E                     	;# 
  2387  018C                     	;# 
  2388  018D                     	;# 
  2389  018E                     	;# 
  2390  0191                     	;# 
  2391  0191                     	;# 
  2392  0192                     	;# 
  2393  0193                     	;# 
  2394  0193                     	;# 
  2395  0193                     	;# 
  2396  0194                     	;# 
  2397  0195                     	;# 
  2398  0196                     	;# 
  2399  0199                     	;# 
  2400  019A                     	;# 
  2401  019B                     	;# 
  2402  019B                     	;# 
  2403  019B                     	;# 
  2404  019B                     	;# 
  2405  019C                     	;# 
  2406  019C                     	;# 
  2407  019D                     	;# 
  2408  019E                     	;# 
  2409  019F                     	;# 
  2410  020C                     	;# 
  2411  020D                     	;# 
  2412  020E                     	;# 
  2413  0211                     	;# 
  2414  0211                     	;# 
  2415  0212                     	;# 
  2416  0212                     	;# 
  2417  0213                     	;# 
  2418  0213                     	;# 
  2419  0214                     	;# 
  2420  0214                     	;# 
  2421  0215                     	;# 
  2422  0215                     	;# 
  2423  0215                     	;# 
  2424  0216                     	;# 
  2425  0216                     	;# 
  2426  0217                     	;# 
  2427  0217                     	;# 
  2428  0219                     	;# 
  2429  021A                     	;# 
  2430  021B                     	;# 
  2431  021C                     	;# 
  2432  021D                     	;# 
  2433  021E                     	;# 
  2434  021F                     	;# 
  2435  0291                     	;# 
  2436  0291                     	;# 
  2437  0292                     	;# 
  2438  0293                     	;# 
  2439  0294                     	;# 
  2440  0295                     	;# 
  2441  0295                     	;# 
  2442  0296                     	;# 
  2443  0298                     	;# 
  2444  0298                     	;# 
  2445  0299                     	;# 
  2446  029A                     	;# 
  2447  029B                     	;# 
  2448  029C                     	;# 
  2449  029D                     	;# 
  2450  029E                     	;# 
  2451  0311                     	;# 
  2452  0311                     	;# 
  2453  0312                     	;# 
  2454  0313                     	;# 
  2455  0318                     	;# 
  2456  0318                     	;# 
  2457  0319                     	;# 
  2458  031A                     	;# 
  2459  038C                     	;# 
  2460  038D                     	;# 
  2461  038E                     	;# 
  2462  0391                     	;# 
  2463  0392                     	;# 
  2464  0393                     	;# 
  2465  0394                     	;# 
  2466  0395                     	;# 
  2467  0396                     	;# 
  2468  039A                     	;# 
  2469  039C                     	;# 
  2470  039D                     	;# 
  2471  039E                     	;# 
  2472  039F                     	;# 
  2473  0415                     	;# 
  2474  0416                     	;# 
  2475  0417                     	;# 
  2476  041C                     	;# 
  2477  041D                     	;# 
  2478  041E                     	;# 
  2479  0FE4                     	;# 
  2480  0FE5                     	;# 
  2481  0FE6                     	;# 
  2482  0FE7                     	;# 
  2483  0FE8                     	;# 
  2484  0FE9                     	;# 
  2485  0FEA                     	;# 
  2486  0FEB                     	;# 
  2487  0FED                     	;# 
  2488  0FEE                     	;# 
  2489  0FEF                     	;# 
  2490  0000                     	;# 
  2491  0001                     	;# 
  2492  0002                     	;# 
  2493  0003                     	;# 
  2494  0004                     	;# 
  2495  0005                     	;# 
  2496  0006                     	;# 
  2497  0007                     	;# 
  2498  0008                     	;# 
  2499  0009                     	;# 
  2500  000A                     	;# 
  2501  000B                     	;# 
  2502  000C                     	;# 
  2503  000D                     	;# 
  2504  000E                     	;# 
  2505  0011                     	;# 
  2506  0012                     	;# 
  2507  0013                     	;# 
  2508  0014                     	;# 
  2509  0015                     	;# 
  2510  0016                     	;# 
  2511  0016                     	;# 
  2512  0017                     	;# 
  2513  0018                     	;# 
  2514  0019                     	;# 
  2515  001A                     	;# 
  2516  001B                     	;# 
  2517  001C                     	;# 
  2518  001E                     	;# 
  2519  001F                     	;# 
  2520  008C                     	;# 
  2521  008D                     	;# 
  2522  008E                     	;# 
  2523  0091                     	;# 
  2524  0092                     	;# 
  2525  0093                     	;# 
  2526  0094                     	;# 
  2527  0095                     	;# 
  2528  0096                     	;# 
  2529  0097                     	;# 
  2530  0098                     	;# 
  2531  0099                     	;# 
  2532  009A                     	;# 
  2533  009B                     	;# 
  2534  009B                     	;# 
  2535  009C                     	;# 
  2536  009D                     	;# 
  2537  009E                     	;# 
  2538  010C                     	;# 
  2539  010D                     	;# 
  2540  010E                     	;# 
  2541  0111                     	;# 
  2542  0112                     	;# 
  2543  0113                     	;# 
  2544  0114                     	;# 
  2545  0115                     	;# 
  2546  0116                     	;# 
  2547  0117                     	;# 
  2548  0118                     	;# 
  2549  0119                     	;# 
  2550  011A                     	;# 
  2551  011B                     	;# 
  2552  011D                     	;# 
  2553  011E                     	;# 
  2554  018C                     	;# 
  2555  018D                     	;# 
  2556  018E                     	;# 
  2557  0191                     	;# 
  2558  0191                     	;# 
  2559  0192                     	;# 
  2560  0193                     	;# 
  2561  0193                     	;# 
  2562  0193                     	;# 
  2563  0194                     	;# 
  2564  0195                     	;# 
  2565  0196                     	;# 
  2566  0199                     	;# 
  2567  019A                     	;# 
  2568  019B                     	;# 
  2569  019B                     	;# 
  2570  019B                     	;# 
  2571  019B                     	;# 
  2572  019C                     	;# 
  2573  019C                     	;# 
  2574  019D                     	;# 
  2575  019E                     	;# 
  2576  019F                     	;# 
  2577  020C                     	;# 
  2578  020D                     	;# 
  2579  020E                     	;# 
  2580  0211                     	;# 
  2581  0211                     	;# 
  2582  0212                     	;# 
  2583  0212                     	;# 
  2584  0213                     	;# 
  2585  0213                     	;# 
  2586  0214                     	;# 
  2587  0214                     	;# 
  2588  0215                     	;# 
  2589  0215                     	;# 
  2590  0215                     	;# 
  2591  0216                     	;# 
  2592  0216                     	;# 
  2593  0217                     	;# 
  2594  0217                     	;# 
  2595  0219                     	;# 
  2596  021A                     	;# 
  2597  021B                     	;# 
  2598  021C                     	;# 
  2599  021D                     	;# 
  2600  021E                     	;# 
  2601  021F                     	;# 
  2602  0291                     	;# 
  2603  0291                     	;# 
  2604  0292                     	;# 
  2605  0293                     	;# 
  2606  0294                     	;# 
  2607  0295                     	;# 
  2608  0295                     	;# 
  2609  0296                     	;# 
  2610  0298                     	;# 
  2611  0298                     	;# 
  2612  0299                     	;# 
  2613  029A                     	;# 
  2614  029B                     	;# 
  2615  029C                     	;# 
  2616  029D                     	;# 
  2617  029E                     	;# 
  2618  0311                     	;# 
  2619  0311                     	;# 
  2620  0312                     	;# 
  2621  0313                     	;# 
  2622  0318                     	;# 
  2623  0318                     	;# 
  2624  0319                     	;# 
  2625  031A                     	;# 
  2626  038C                     	;# 
  2627  038D                     	;# 
  2628  038E                     	;# 
  2629  0391                     	;# 
  2630  0392                     	;# 
  2631  0393                     	;# 
  2632  0394                     	;# 
  2633  0395                     	;# 
  2634  0396                     	;# 
  2635  039A                     	;# 
  2636  039C                     	;# 
  2637  039D                     	;# 
  2638  039E                     	;# 
  2639  039F                     	;# 
  2640  0415                     	;# 
  2641  0416                     	;# 
  2642  0417                     	;# 
  2643  041C                     	;# 
  2644  041D                     	;# 
  2645  041E                     	;# 
  2646  0FE4                     	;# 
  2647  0FE5                     	;# 
  2648  0FE6                     	;# 
  2649  0FE7                     	;# 
  2650  0FE8                     	;# 
  2651  0FE9                     	;# 
  2652  0FEA                     	;# 
  2653  0FEB                     	;# 
  2654  0FED                     	;# 
  2655  0FEE                     	;# 
  2656  0FEF                     	;# 
  2657  0000                     	;# 
  2658  0001                     	;# 
  2659  0002                     	;# 
  2660  0003                     	;# 
  2661  0004                     	;# 
  2662  0005                     	;# 
  2663  0006                     	;# 
  2664  0007                     	;# 
  2665  0008                     	;# 
  2666  0009                     	;# 
  2667  000A                     	;# 
  2668  000B                     	;# 
  2669  000C                     	;# 
  2670  000D                     	;# 
  2671  000E                     	;# 
  2672  0011                     	;# 
  2673  0012                     	;# 
  2674  0013                     	;# 
  2675  0014                     	;# 
  2676  0015                     	;# 
  2677  0016                     	;# 
  2678  0016                     	;# 
  2679  0017                     	;# 
  2680  0018                     	;# 
  2681  0019                     	;# 
  2682  001A                     	;# 
  2683  001B                     	;# 
  2684  001C                     	;# 
  2685  001E                     	;# 
  2686  001F                     	;# 
  2687  008C                     	;# 
  2688  008D                     	;# 
  2689  008E                     	;# 
  2690  0091                     	;# 
  2691  0092                     	;# 
  2692  0093                     	;# 
  2693  0094                     	;# 
  2694  0095                     	;# 
  2695  0096                     	;# 
  2696  0097                     	;# 
  2697  0098                     	;# 
  2698  0099                     	;# 
  2699  009A                     	;# 
  2700  009B                     	;# 
  2701  009B                     	;# 
  2702  009C                     	;# 
  2703  009D                     	;# 
  2704  009E                     	;# 
  2705  010C                     	;# 
  2706  010D                     	;# 
  2707  010E                     	;# 
  2708  0111                     	;# 
  2709  0112                     	;# 
  2710  0113                     	;# 
  2711  0114                     	;# 
  2712  0115                     	;# 
  2713  0116                     	;# 
  2714  0117                     	;# 
  2715  0118                     	;# 
  2716  0119                     	;# 
  2717  011A                     	;# 
  2718  011B                     	;# 
  2719  011D                     	;# 
  2720  011E                     	;# 
  2721  018C                     	;# 
  2722  018D                     	;# 
  2723  018E                     	;# 
  2724  0191                     	;# 
  2725  0191                     	;# 
  2726  0192                     	;# 
  2727  0193                     	;# 
  2728  0193                     	;# 
  2729  0193                     	;# 
  2730  0194                     	;# 
  2731  0195                     	;# 
  2732  0196                     	;# 
  2733  0199                     	;# 
  2734  019A                     	;# 
  2735  019B                     	;# 
  2736  019B                     	;# 
  2737  019B                     	;# 
  2738  019B                     	;# 
  2739  019C                     	;# 
  2740  019C                     	;# 
  2741  019D                     	;# 
  2742  019E                     	;# 
  2743  019F                     	;# 
  2744  020C                     	;# 
  2745  020D                     	;# 
  2746  020E                     	;# 
  2747  0211                     	;# 
  2748  0211                     	;# 
  2749  0212                     	;# 
  2750  0212                     	;# 
  2751  0213                     	;# 
  2752  0213                     	;# 
  2753  0214                     	;# 
  2754  0214                     	;# 
  2755  0215                     	;# 
  2756  0215                     	;# 
  2757  0215                     	;# 
  2758  0216                     	;# 
  2759  0216                     	;# 
  2760  0217                     	;# 
  2761  0217                     	;# 
  2762  0219                     	;# 
  2763  021A                     	;# 
  2764  021B                     	;# 
  2765  021C                     	;# 
  2766  021D                     	;# 
  2767  021E                     	;# 
  2768  021F                     	;# 
  2769  0291                     	;# 
  2770  0291                     	;# 
  2771  0292                     	;# 
  2772  0293                     	;# 
  2773  0294                     	;# 
  2774  0295                     	;# 
  2775  0295                     	;# 
  2776  0296                     	;# 
  2777  0298                     	;# 
  2778  0298                     	;# 
  2779  0299                     	;# 
  2780  029A                     	;# 
  2781  029B                     	;# 
  2782  029C                     	;# 
  2783  029D                     	;# 
  2784  029E                     	;# 
  2785  0311                     	;# 
  2786  0311                     	;# 
  2787  0312                     	;# 
  2788  0313                     	;# 
  2789  0318                     	;# 
  2790  0318                     	;# 
  2791  0319                     	;# 
  2792  031A                     	;# 
  2793  038C                     	;# 
  2794  038D                     	;# 
  2795  038E                     	;# 
  2796  0391                     	;# 
  2797  0392                     	;# 
  2798  0393                     	;# 
  2799  0394                     	;# 
  2800  0395                     	;# 
  2801  0396                     	;# 
  2802  039A                     	;# 
  2803  039C                     	;# 
  2804  039D                     	;# 
  2805  039E                     	;# 
  2806  039F                     	;# 
  2807  0415                     	;# 
  2808  0416                     	;# 
  2809  0417                     	;# 
  2810  041C                     	;# 
  2811  041D                     	;# 
  2812  041E                     	;# 
  2813  0FE4                     	;# 
  2814  0FE5                     	;# 
  2815  0FE6                     	;# 
  2816  0FE7                     	;# 
  2817  0FE8                     	;# 
  2818  0FE9                     	;# 
  2819  0FEA                     	;# 
  2820  0FEB                     	;# 
  2821  0FED                     	;# 
  2822  0FEE                     	;# 
  2823  0FEF                     	;# 
  2824  0000                     	;# 
  2825  0001                     	;# 
  2826  0002                     	;# 
  2827  0003                     	;# 
  2828  0004                     	;# 
  2829  0005                     	;# 
  2830  0006                     	;# 
  2831  0007                     	;# 
  2832  0008                     	;# 
  2833  0009                     	;# 
  2834  000A                     	;# 
  2835  000B                     	;# 
  2836  000C                     	;# 
  2837  000D                     	;# 
  2838  000E                     	;# 
  2839  0011                     	;# 
  2840  0012                     	;# 
  2841  0013                     	;# 
  2842  0014                     	;# 
  2843  0015                     	;# 
  2844  0016                     	;# 
  2845  0016                     	;# 
  2846  0017                     	;# 
  2847  0018                     	;# 
  2848  0019                     	;# 
  2849  001A                     	;# 
  2850  001B                     	;# 
  2851  001C                     	;# 
  2852  001E                     	;# 
  2853  001F                     	;# 
  2854  008C                     	;# 
  2855  008D                     	;# 
  2856  008E                     	;# 
  2857  0091                     	;# 
  2858  0092                     	;# 
  2859  0093                     	;# 
  2860  0094                     	;# 
  2861  0095                     	;# 
  2862  0096                     	;# 
  2863  0097                     	;# 
  2864  0098                     	;# 
  2865  0099                     	;# 
  2866  009A                     	;# 
  2867  009B                     	;# 
  2868  009B                     	;# 
  2869  009C                     	;# 
  2870  009D                     	;# 
  2871  009E                     	;# 
  2872  010C                     	;# 
  2873  010D                     	;# 
  2874  010E                     	;# 
  2875  0111                     	;# 
  2876  0112                     	;# 
  2877  0113                     	;# 
  2878  0114                     	;# 
  2879  0115                     	;# 
  2880  0116                     	;# 
  2881  0117                     	;# 
  2882  0118                     	;# 
  2883  0119                     	;# 
  2884  011A                     	;# 
  2885  011B                     	;# 
  2886  011D                     	;# 
  2887  011E                     	;# 
  2888  018C                     	;# 
  2889  018D                     	;# 
  2890  018E                     	;# 
  2891  0191                     	;# 
  2892  0191                     	;# 
  2893  0192                     	;# 
  2894  0193                     	;# 
  2895  0193                     	;# 
  2896  0193                     	;# 
  2897  0194                     	;# 
  2898  0195                     	;# 
  2899  0196                     	;# 
  2900  0199                     	;# 
  2901  019A                     	;# 
  2902  019B                     	;# 
  2903  019B                     	;# 
  2904  019B                     	;# 
  2905  019B                     	;# 
  2906  019C                     	;# 
  2907  019C                     	;# 
  2908  019D                     	;# 
  2909  019E                     	;# 
  2910  019F                     	;# 
  2911  020C                     	;# 
  2912  020D                     	;# 
  2913  020E                     	;# 
  2914  0211                     	;# 
  2915  0211                     	;# 
  2916  0212                     	;# 
  2917  0212                     	;# 
  2918  0213                     	;# 
  2919  0213                     	;# 
  2920  0214                     	;# 
  2921  0214                     	;# 
  2922  0215                     	;# 
  2923  0215                     	;# 
  2924  0215                     	;# 
  2925  0216                     	;# 
  2926  0216                     	;# 
  2927  0217                     	;# 
  2928  0217                     	;# 
  2929  0219                     	;# 
  2930  021A                     	;# 
  2931  021B                     	;# 
  2932  021C                     	;# 
  2933  021D                     	;# 
  2934  021E                     	;# 
  2935  021F                     	;# 
  2936  0291                     	;# 
  2937  0291                     	;# 
  2938  0292                     	;# 
  2939  0293                     	;# 
  2940  0294                     	;# 
  2941  0295                     	;# 
  2942  0295                     	;# 
  2943  0296                     	;# 
  2944  0298                     	;# 
  2945  0298                     	;# 
  2946  0299                     	;# 
  2947  029A                     	;# 
  2948  029B                     	;# 
  2949  029C                     	;# 
  2950  029D                     	;# 
  2951  029E                     	;# 
  2952  0311                     	;# 
  2953  0311                     	;# 
  2954  0312                     	;# 
  2955  0313                     	;# 
  2956  0318                     	;# 
  2957  0318                     	;# 
  2958  0319                     	;# 
  2959  031A                     	;# 
  2960  038C                     	;# 
  2961  038D                     	;# 
  2962  038E                     	;# 
  2963  0391                     	;# 
  2964  0392                     	;# 
  2965  0393                     	;# 
  2966  0394                     	;# 
  2967  0395                     	;# 
  2968  0396                     	;# 
  2969  039A                     	;# 
  2970  039C                     	;# 
  2971  039D                     	;# 
  2972  039E                     	;# 
  2973  039F                     	;# 
  2974  0415                     	;# 
  2975  0416                     	;# 
  2976  0417                     	;# 
  2977  041C                     	;# 
  2978  041D                     	;# 
  2979  041E                     	;# 
  2980  0FE4                     	;# 
  2981  0FE5                     	;# 
  2982  0FE6                     	;# 
  2983  0FE7                     	;# 
  2984  0FE8                     	;# 
  2985  0FE9                     	;# 
  2986  0FEA                     	;# 
  2987  0FEB                     	;# 
  2988  0FED                     	;# 
  2989  0FEE                     	;# 
  2990  0FEF                     	;# 
  2991  0000                     	;# 
  2992  0001                     	;# 
  2993  0002                     	;# 
  2994  0003                     	;# 
  2995  0004                     	;# 
  2996  0005                     	;# 
  2997  0006                     	;# 
  2998  0007                     	;# 
  2999  0008                     	;# 
  3000  0009                     	;# 
  3001  000A                     	;# 
  3002  000B                     	;# 
  3003  000C                     	;# 
  3004  000D                     	;# 
  3005  000E                     	;# 
  3006  0011                     	;# 
  3007  0012                     	;# 
  3008  0013                     	;# 
  3009  0014                     	;# 
  3010  0015                     	;# 
  3011  0016                     	;# 
  3012  0016                     	;# 
  3013  0017                     	;# 
  3014  0018                     	;# 
  3015  0019                     	;# 
  3016  001A                     	;# 
  3017  001B                     	;# 
  3018  001C                     	;# 
  3019  001E                     	;# 
  3020  001F                     	;# 
  3021  008C                     	;# 
  3022  008D                     	;# 
  3023  008E                     	;# 
  3024  0091                     	;# 
  3025  0092                     	;# 
  3026  0093                     	;# 
  3027  0094                     	;# 
  3028  0095                     	;# 
  3029  0096                     	;# 
  3030  0097                     	;# 
  3031  0098                     	;# 
  3032  0099                     	;# 
  3033  009A                     	;# 
  3034  009B                     	;# 
  3035  009B                     	;# 
  3036  009C                     	;# 
  3037  009D                     	;# 
  3038  009E                     	;# 
  3039  010C                     	;# 
  3040  010D                     	;# 
  3041  010E                     	;# 
  3042  0111                     	;# 
  3043  0112                     	;# 
  3044  0113                     	;# 
  3045  0114                     	;# 
  3046  0115                     	;# 
  3047  0116                     	;# 
  3048  0117                     	;# 
  3049  0118                     	;# 
  3050  0119                     	;# 
  3051  011A                     	;# 
  3052  011B                     	;# 
  3053  011D                     	;# 
  3054  011E                     	;# 
  3055  018C                     	;# 
  3056  018D                     	;# 
  3057  018E                     	;# 
  3058  0191                     	;# 
  3059  0191                     	;# 
  3060  0192                     	;# 
  3061  0193                     	;# 
  3062  0193                     	;# 
  3063  0193                     	;# 
  3064  0194                     	;# 
  3065  0195                     	;# 
  3066  0196                     	;# 
  3067  0199                     	;# 
  3068  019A                     	;# 
  3069  019B                     	;# 
  3070  019B                     	;# 
  3071  019B                     	;# 
  3072  019B                     	;# 
  3073  019C                     	;# 
  3074  019C                     	;# 
  3075  019D                     	;# 
  3076  019E                     	;# 
  3077  019F                     	;# 
  3078  020C                     	;# 
  3079  020D                     	;# 
  3080  020E                     	;# 
  3081  0211                     	;# 
  3082  0211                     	;# 
  3083  0212                     	;# 
  3084  0212                     	;# 
  3085  0213                     	;# 
  3086  0213                     	;# 
  3087  0214                     	;# 
  3088  0214                     	;# 
  3089  0215                     	;# 
  3090  0215                     	;# 
  3091  0215                     	;# 
  3092  0216                     	;# 
  3093  0216                     	;# 
  3094  0217                     	;# 
  3095  0217                     	;# 
  3096  0219                     	;# 
  3097  021A                     	;# 
  3098  021B                     	;# 
  3099  021C                     	;# 
  3100  021D                     	;# 
  3101  021E                     	;# 
  3102  021F                     	;# 
  3103  0291                     	;# 
  3104  0291                     	;# 
  3105  0292                     	;# 
  3106  0293                     	;# 
  3107  0294                     	;# 
  3108  0295                     	;# 
  3109  0295                     	;# 
  3110  0296                     	;# 
  3111  0298                     	;# 
  3112  0298                     	;# 
  3113  0299                     	;# 
  3114  029A                     	;# 
  3115  029B                     	;# 
  3116  029C                     	;# 
  3117  029D                     	;# 
  3118  029E                     	;# 
  3119  0311                     	;# 
  3120  0311                     	;# 
  3121  0312                     	;# 
  3122  0313                     	;# 
  3123  0318                     	;# 
  3124  0318                     	;# 
  3125  0319                     	;# 
  3126  031A                     	;# 
  3127  038C                     	;# 
  3128  038D                     	;# 
  3129  038E                     	;# 
  3130  0391                     	;# 
  3131  0392                     	;# 
  3132  0393                     	;# 
  3133  0394                     	;# 
  3134  0395                     	;# 
  3135  0396                     	;# 
  3136  039A                     	;# 
  3137  039C                     	;# 
  3138  039D                     	;# 
  3139  039E                     	;# 
  3140  039F                     	;# 
  3141  0415                     	;# 
  3142  0416                     	;# 
  3143  0417                     	;# 
  3144  041C                     	;# 
  3145  041D                     	;# 
  3146  041E                     	;# 
  3147  0FE4                     	;# 
  3148  0FE5                     	;# 
  3149  0FE6                     	;# 
  3150  0FE7                     	;# 
  3151  0FE8                     	;# 
  3152  0FE9                     	;# 
  3153  0FEA                     	;# 
  3154  0FEB                     	;# 
  3155  0FED                     	;# 
  3156  0FEE                     	;# 
  3157  0FEF                     	;# 
  3158  0000                     	;# 
  3159  0001                     	;# 
  3160  0002                     	;# 
  3161  0003                     	;# 
  3162  0004                     	;# 
  3163  0005                     	;# 
  3164  0006                     	;# 
  3165  0007                     	;# 
  3166  0008                     	;# 
  3167  0009                     	;# 
  3168  000A                     	;# 
  3169  000B                     	;# 
  3170  000C                     	;# 
  3171  000D                     	;# 
  3172  000E                     	;# 
  3173  0011                     	;# 
  3174  0012                     	;# 
  3175  0013                     	;# 
  3176  0014                     	;# 
  3177  0015                     	;# 
  3178  0016                     	;# 
  3179  0016                     	;# 
  3180  0017                     	;# 
  3181  0018                     	;# 
  3182  0019                     	;# 
  3183  001A                     	;# 
  3184  001B                     	;# 
  3185  001C                     	;# 
  3186  001E                     	;# 
  3187  001F                     	;# 
  3188  008C                     	;# 
  3189  008D                     	;# 
  3190  008E                     	;# 
  3191  0091                     	;# 
  3192  0092                     	;# 
  3193  0093                     	;# 
  3194  0094                     	;# 
  3195  0095                     	;# 
  3196  0096                     	;# 
  3197  0097                     	;# 
  3198  0098                     	;# 
  3199  0099                     	;# 
  3200  009A                     	;# 
  3201  009B                     	;# 
  3202  009B                     	;# 
  3203  009C                     	;# 
  3204  009D                     	;# 
  3205  009E                     	;# 
  3206  010C                     	;# 
  3207  010D                     	;# 
  3208  010E                     	;# 
  3209  0111                     	;# 
  3210  0112                     	;# 
  3211  0113                     	;# 
  3212  0114                     	;# 
  3213  0115                     	;# 
  3214  0116                     	;# 
  3215  0117                     	;# 
  3216  0118                     	;# 
  3217  0119                     	;# 
  3218  011A                     	;# 
  3219  011B                     	;# 
  3220  011D                     	;# 
  3221  011E                     	;# 
  3222  018C                     	;# 
  3223  018D                     	;# 
  3224  018E                     	;# 
  3225  0191                     	;# 
  3226  0191                     	;# 
  3227  0192                     	;# 
  3228  0193                     	;# 
  3229  0193                     	;# 
  3230  0193                     	;# 
  3231  0194                     	;# 
  3232  0195                     	;# 
  3233  0196                     	;# 
  3234  0199                     	;# 
  3235  019A                     	;# 
  3236  019B                     	;# 
  3237  019B                     	;# 
  3238  019B                     	;# 
  3239  019B                     	;# 
  3240  019C                     	;# 
  3241  019C                     	;# 
  3242  019D                     	;# 
  3243  019E                     	;# 
  3244  019F                     	;# 
  3245  020C                     	;# 
  3246  020D                     	;# 
  3247  020E                     	;# 
  3248  0211                     	;# 
  3249  0211                     	;# 
  3250  0212                     	;# 
  3251  0212                     	;# 
  3252  0213                     	;# 
  3253  0213                     	;# 
  3254  0214                     	;# 
  3255  0214                     	;# 
  3256  0215                     	;# 
  3257  0215                     	;# 
  3258  0215                     	;# 
  3259  0216                     	;# 
  3260  0216                     	;# 
  3261  0217                     	;# 
  3262  0217                     	;# 
  3263  0219                     	;# 
  3264  021A                     	;# 
  3265  021B                     	;# 
  3266  021C                     	;# 
  3267  021D                     	;# 
  3268  021E                     	;# 
  3269  021F                     	;# 
  3270  0291                     	;# 
  3271  0291                     	;# 
  3272  0292                     	;# 
  3273  0293                     	;# 
  3274  0294                     	;# 
  3275  0295                     	;# 
  3276  0295                     	;# 
  3277  0296                     	;# 
  3278  0298                     	;# 
  3279  0298                     	;# 
  3280  0299                     	;# 
  3281  029A                     	;# 
  3282  029B                     	;# 
  3283  029C                     	;# 
  3284  029D                     	;# 
  3285  029E                     	;# 
  3286  0311                     	;# 
  3287  0311                     	;# 
  3288  0312                     	;# 
  3289  0313                     	;# 
  3290  0318                     	;# 
  3291  0318                     	;# 
  3292  0319                     	;# 
  3293  031A                     	;# 
  3294  038C                     	;# 
  3295  038D                     	;# 
  3296  038E                     	;# 
  3297  0391                     	;# 
  3298  0392                     	;# 
  3299  0393                     	;# 
  3300  0394                     	;# 
  3301  0395                     	;# 
  3302  0396                     	;# 
  3303  039A                     	;# 
  3304  039C                     	;# 
  3305  039D                     	;# 
  3306  039E                     	;# 
  3307  039F                     	;# 
  3308  0415                     	;# 
  3309  0416                     	;# 
  3310  0417                     	;# 
  3311  041C                     	;# 
  3312  041D                     	;# 
  3313  041E                     	;# 
  3314  0FE4                     	;# 
  3315  0FE5                     	;# 
  3316  0FE6                     	;# 
  3317  0FE7                     	;# 
  3318  0FE8                     	;# 
  3319  0FE9                     	;# 
  3320  0FEA                     	;# 
  3321  0FEB                     	;# 
  3322  0FED                     	;# 
  3323  0FEE                     	;# 
  3324  0FEF                     	;# 
  3325  0000                     	;# 
  3326  0001                     	;# 
  3327  0002                     	;# 
  3328  0003                     	;# 
  3329  0004                     	;# 
  3330  0005                     	;# 
  3331  0006                     	;# 
  3332  0007                     	;# 
  3333  0008                     	;# 
  3334  0009                     	;# 
  3335  000A                     	;# 
  3336  000B                     	;# 
  3337  000C                     	;# 
  3338  000D                     	;# 
  3339  000E                     	;# 
  3340  0011                     	;# 
  3341  0012                     	;# 
  3342  0013                     	;# 
  3343  0014                     	;# 
  3344  0015                     	;# 
  3345  0016                     	;# 
  3346  0016                     	;# 
  3347  0017                     	;# 
  3348  0018                     	;# 
  3349  0019                     	;# 
  3350  001A                     	;# 
  3351  001B                     	;# 
  3352  001C                     	;# 
  3353  001E                     	;# 
  3354  001F                     	;# 
  3355  008C                     	;# 
  3356  008D                     	;# 
  3357  008E                     	;# 
  3358  0091                     	;# 
  3359  0092                     	;# 
  3360  0093                     	;# 
  3361  0094                     	;# 
  3362  0095                     	;# 
  3363  0096                     	;# 
  3364  0097                     	;# 
  3365  0098                     	;# 
  3366  0099                     	;# 
  3367  009A                     	;# 
  3368  009B                     	;# 
  3369  009B                     	;# 
  3370  009C                     	;# 
  3371  009D                     	;# 
  3372  009E                     	;# 
  3373  010C                     	;# 
  3374  010D                     	;# 
  3375  010E                     	;# 
  3376  0111                     	;# 
  3377  0112                     	;# 
  3378  0113                     	;# 
  3379  0114                     	;# 
  3380  0115                     	;# 
  3381  0116                     	;# 
  3382  0117                     	;# 
  3383  0118                     	;# 
  3384  0119                     	;# 
  3385  011A                     	;# 
  3386  011B                     	;# 
  3387  011D                     	;# 
  3388  011E                     	;# 
  3389  018C                     	;# 
  3390  018D                     	;# 
  3391  018E                     	;# 
  3392  0191                     	;# 
  3393  0191                     	;# 
  3394  0192                     	;# 
  3395  0193                     	;# 
  3396  0193                     	;# 
  3397  0193                     	;# 
  3398  0194                     	;# 
  3399  0195                     	;# 
  3400  0196                     	;# 
  3401  0199                     	;# 
  3402  019A                     	;# 
  3403  019B                     	;# 
  3404  019B                     	;# 
  3405  019B                     	;# 
  3406  019B                     	;# 
  3407  019C                     	;# 
  3408  019C                     	;# 
  3409  019D                     	;# 
  3410  019E                     	;# 
  3411  019F                     	;# 
  3412  020C                     	;# 
  3413  020D                     	;# 
  3414  020E                     	;# 
  3415  0211                     	;# 
  3416  0211                     	;# 
  3417  0212                     	;# 
  3418  0212                     	;# 
  3419  0213                     	;# 
  3420  0213                     	;# 
  3421  0214                     	;# 
  3422  0214                     	;# 
  3423  0215                     	;# 
  3424  0215                     	;# 
  3425  0215                     	;# 
  3426  0216                     	;# 
  3427  0216                     	;# 
  3428  0217                     	;# 
  3429  0217                     	;# 
  3430  0219                     	;# 
  3431  021A                     	;# 
  3432  021B                     	;# 
  3433  021C                     	;# 
  3434  021D                     	;# 
  3435  021E                     	;# 
  3436  021F                     	;# 
  3437  0291                     	;# 
  3438  0291                     	;# 
  3439  0292                     	;# 
  3440  0293                     	;# 
  3441  0294                     	;# 
  3442  0295                     	;# 
  3443  0295                     	;# 
  3444  0296                     	;# 
  3445  0298                     	;# 
  3446  0298                     	;# 
  3447  0299                     	;# 
  3448  029A                     	;# 
  3449  029B                     	;# 
  3450  029C                     	;# 
  3451  029D                     	;# 
  3452  029E                     	;# 
  3453  0311                     	;# 
  3454  0311                     	;# 
  3455  0312                     	;# 
  3456  0313                     	;# 
  3457  0318                     	;# 
  3458  0318                     	;# 
  3459  0319                     	;# 
  3460  031A                     	;# 
  3461  038C                     	;# 
  3462  038D                     	;# 
  3463  038E                     	;# 
  3464  0391                     	;# 
  3465  0392                     	;# 
  3466  0393                     	;# 
  3467  0394                     	;# 
  3468  0395                     	;# 
  3469  0396                     	;# 
  3470  039A                     	;# 
  3471  039C                     	;# 
  3472  039D                     	;# 
  3473  039E                     	;# 
  3474  039F                     	;# 
  3475  0415                     	;# 
  3476  0416                     	;# 
  3477  0417                     	;# 
  3478  041C                     	;# 
  3479  041D                     	;# 
  3480  041E                     	;# 
  3481  0FE4                     	;# 
  3482  0FE5                     	;# 
  3483  0FE6                     	;# 
  3484  0FE7                     	;# 
  3485  0FE8                     	;# 
  3486  0FE9                     	;# 
  3487  0FEA                     	;# 
  3488  0FEB                     	;# 
  3489  0FED                     	;# 
  3490  0FEE                     	;# 
  3491  0FEF                     	;# 
  3492  0000                     	;# 
  3493  0001                     	;# 
  3494  0002                     	;# 
  3495  0003                     	;# 
  3496  0004                     	;# 
  3497  0005                     	;# 
  3498  0006                     	;# 
  3499  0007                     	;# 
  3500  0008                     	;# 
  3501  0009                     	;# 
  3502  000A                     	;# 
  3503  000B                     	;# 
  3504  000C                     	;# 
  3505  000D                     	;# 
  3506  000E                     	;# 
  3507  0011                     	;# 
  3508  0012                     	;# 
  3509  0013                     	;# 
  3510  0014                     	;# 
  3511  0015                     	;# 
  3512  0016                     	;# 
  3513  0016                     	;# 
  3514  0017                     	;# 
  3515  0018                     	;# 
  3516  0019                     	;# 
  3517  001A                     	;# 
  3518  001B                     	;# 
  3519  001C                     	;# 
  3520  001E                     	;# 
  3521  001F                     	;# 
  3522  008C                     	;# 
  3523  008D                     	;# 
  3524  008E                     	;# 
  3525  0091                     	;# 
  3526  0092                     	;# 
  3527  0093                     	;# 
  3528  0094                     	;# 
  3529  0095                     	;# 
  3530  0096                     	;# 
  3531  0097                     	;# 
  3532  0098                     	;# 
  3533  0099                     	;# 
  3534  009A                     	;# 
  3535  009B                     	;# 
  3536  009B                     	;# 
  3537  009C                     	;# 
  3538  009D                     	;# 
  3539  009E                     	;# 
  3540  010C                     	;# 
  3541  010D                     	;# 
  3542  010E                     	;# 
  3543  0111                     	;# 
  3544  0112                     	;# 
  3545  0113                     	;# 
  3546  0114                     	;# 
  3547  0115                     	;# 
  3548  0116                     	;# 
  3549  0117                     	;# 
  3550  0118                     	;# 
  3551  0119                     	;# 
  3552  011A                     	;# 
  3553  011B                     	;# 
  3554  011D                     	;# 
  3555  011E                     	;# 
  3556  018C                     	;# 
  3557  018D                     	;# 
  3558  018E                     	;# 
  3559  0191                     	;# 
  3560  0191                     	;# 
  3561  0192                     	;# 
  3562  0193                     	;# 
  3563  0193                     	;# 
  3564  0193                     	;# 
  3565  0194                     	;# 
  3566  0195                     	;# 
  3567  0196                     	;# 
  3568  0199                     	;# 
  3569  019A                     	;# 
  3570  019B                     	;# 
  3571  019B                     	;# 
  3572  019B                     	;# 
  3573  019B                     	;# 
  3574  019C                     	;# 
  3575  019C                     	;# 
  3576  019D                     	;# 
  3577  019E                     	;# 
  3578  019F                     	;# 
  3579  020C                     	;# 
  3580  020D                     	;# 
  3581  020E                     	;# 
  3582  0211                     	;# 
  3583  0211                     	;# 
  3584  0212                     	;# 
  3585  0212                     	;# 
  3586  0213                     	;# 
  3587  0213                     	;# 
  3588  0214                     	;# 
  3589  0214                     	;# 
  3590  0215                     	;# 
  3591  0215                     	;# 
  3592  0215                     	;# 
  3593  0216                     	;# 
  3594  0216                     	;# 
  3595  0217                     	;# 
  3596  0217                     	;# 
  3597  0219                     	;# 
  3598  021A                     	;# 
  3599  021B                     	;# 
  3600  021C                     	;# 
  3601  021D                     	;# 
  3602  021E                     	;# 
  3603  021F                     	;# 
  3604  0291                     	;# 
  3605  0291                     	;# 
  3606  0292                     	;# 
  3607  0293                     	;# 
  3608  0294                     	;# 
  3609  0295                     	;# 
  3610  0295                     	;# 
  3611  0296                     	;# 
  3612  0298                     	;# 
  3613  0298                     	;# 
  3614  0299                     	;# 
  3615  029A                     	;# 
  3616  029B                     	;# 
  3617  029C                     	;# 
  3618  029D                     	;# 
  3619  029E                     	;# 
  3620  0311                     	;# 
  3621  0311                     	;# 
  3622  0312                     	;# 
  3623  0313                     	;# 
  3624  0318                     	;# 
  3625  0318                     	;# 
  3626  0319                     	;# 
  3627  031A                     	;# 
  3628  038C                     	;# 
  3629  038D                     	;# 
  3630  038E                     	;# 
  3631  0391                     	;# 
  3632  0392                     	;# 
  3633  0393                     	;# 
  3634  0394                     	;# 
  3635  0395                     	;# 
  3636  0396                     	;# 
  3637  039A                     	;# 
  3638  039C                     	;# 
  3639  039D                     	;# 
  3640  039E                     	;# 
  3641  039F                     	;# 
  3642  0415                     	;# 
  3643  0416                     	;# 
  3644  0417                     	;# 
  3645  041C                     	;# 
  3646  041D                     	;# 
  3647  041E                     	;# 
  3648  0FE4                     	;# 
  3649  0FE5                     	;# 
  3650  0FE6                     	;# 
  3651  0FE7                     	;# 
  3652  0FE8                     	;# 
  3653  0FE9                     	;# 
  3654  0FEA                     	;# 
  3655  0FEB                     	;# 
  3656  0FED                     	;# 
  3657  0FEE                     	;# 
  3658  0FEF                     	;# 
  3659  0000                     	;# 
  3660  0001                     	;# 
  3661  0002                     	;# 
  3662  0003                     	;# 
  3663  0004                     	;# 
  3664  0005                     	;# 
  3665  0006                     	;# 
  3666  0007                     	;# 
  3667  0008                     	;# 
  3668  0009                     	;# 
  3669  000A                     	;# 
  3670  000B                     	;# 
  3671  000C                     	;# 
  3672  000D                     	;# 
  3673  000E                     	;# 
  3674  0011                     	;# 
  3675  0012                     	;# 
  3676  0013                     	;# 
  3677  0014                     	;# 
  3678  0015                     	;# 
  3679  0016                     	;# 
  3680  0016                     	;# 
  3681  0017                     	;# 
  3682  0018                     	;# 
  3683  0019                     	;# 
  3684  001A                     	;# 
  3685  001B                     	;# 
  3686  001C                     	;# 
  3687  001E                     	;# 
  3688  001F                     	;# 
  3689  008C                     	;# 
  3690  008D                     	;# 
  3691  008E                     	;# 
  3692  0091                     	;# 
  3693  0092                     	;# 
  3694  0093                     	;# 
  3695  0094                     	;# 
  3696  0095                     	;# 
  3697  0096                     	;# 
  3698  0097                     	;# 
  3699  0098                     	;# 
  3700  0099                     	;# 
  3701  009A                     	;# 
  3702  009B                     	;# 
  3703  009B                     	;# 
  3704  009C                     	;# 
  3705  009D                     	;# 
  3706  009E                     	;# 
  3707  010C                     	;# 
  3708  010D                     	;# 
  3709  010E                     	;# 
  3710  0111                     	;# 
  3711  0112                     	;# 
  3712  0113                     	;# 
  3713  0114                     	;# 
  3714  0115                     	;# 
  3715  0116                     	;# 
  3716  0117                     	;# 
  3717  0118                     	;# 
  3718  0119                     	;# 
  3719  011A                     	;# 
  3720  011B                     	;# 
  3721  011D                     	;# 
  3722  011E                     	;# 
  3723  018C                     	;# 
  3724  018D                     	;# 
  3725  018E                     	;# 
  3726  0191                     	;# 
  3727  0191                     	;# 
  3728  0192                     	;# 
  3729  0193                     	;# 
  3730  0193                     	;# 
  3731  0193                     	;# 
  3732  0194                     	;# 
  3733  0195                     	;# 
  3734  0196                     	;# 
  3735  0199                     	;# 
  3736  019A                     	;# 
  3737  019B                     	;# 
  3738  019B                     	;# 
  3739  019B                     	;# 
  3740  019B                     	;# 
  3741  019C                     	;# 
  3742  019C                     	;# 
  3743  019D                     	;# 
  3744  019E                     	;# 
  3745  019F                     	;# 
  3746  020C                     	;# 
  3747  020D                     	;# 
  3748  020E                     	;# 
  3749  0211                     	;# 
  3750  0211                     	;# 
  3751  0212                     	;# 
  3752  0212                     	;# 
  3753  0213                     	;# 
  3754  0213                     	;# 
  3755  0214                     	;# 
  3756  0214                     	;# 
  3757  0215                     	;# 
  3758  0215                     	;# 
  3759  0215                     	;# 
  3760  0216                     	;# 
  3761  0216                     	;# 
  3762  0217                     	;# 
  3763  0217                     	;# 
  3764  0219                     	;# 
  3765  021A                     	;# 
  3766  021B                     	;# 
  3767  021C                     	;# 
  3768  021D                     	;# 
  3769  021E                     	;# 
  3770  021F                     	;# 
  3771  0291                     	;# 
  3772  0291                     	;# 
  3773  0292                     	;# 
  3774  0293                     	;# 
  3775  0294                     	;# 
  3776  0295                     	;# 
  3777  0295                     	;# 
  3778  0296                     	;# 
  3779  0298                     	;# 
  3780  0298                     	;# 
  3781  0299                     	;# 
  3782  029A                     	;# 
  3783  029B                     	;# 
  3784  029C                     	;# 
  3785  029D                     	;# 
  3786  029E                     	;# 
  3787  0311                     	;# 
  3788  0311                     	;# 
  3789  0312                     	;# 
  3790  0313                     	;# 
  3791  0318                     	;# 
  3792  0318                     	;# 
  3793  0319                     	;# 
  3794  031A                     	;# 
  3795  038C                     	;# 
  3796  038D                     	;# 
  3797  038E                     	;# 
  3798  0391                     	;# 
  3799  0392                     	;# 
  3800  0393                     	;# 
  3801  0394                     	;# 
  3802  0395                     	;# 
  3803  0396                     	;# 
  3804  039A                     	;# 
  3805  039C                     	;# 
  3806  039D                     	;# 
  3807  039E                     	;# 
  3808  039F                     	;# 
  3809  0415                     	;# 
  3810  0416                     	;# 
  3811  0417                     	;# 
  3812  041C                     	;# 
  3813  041D                     	;# 
  3814  041E                     	;# 
  3815  0FE4                     	;# 
  3816  0FE5                     	;# 
  3817  0FE6                     	;# 
  3818  0FE7                     	;# 
  3819  0FE8                     	;# 
  3820  0FE9                     	;# 
  3821  0FEA                     	;# 
  3822  0FEB                     	;# 
  3823  0FED                     	;# 
  3824  0FEE                     	;# 
  3825  0FEF                     	;# 
  3826  0000                     	;# 
  3827  0001                     	;# 
  3828  0002                     	;# 
  3829  0003                     	;# 
  3830  0004                     	;# 
  3831  0005                     	;# 
  3832  0006                     	;# 
  3833  0007                     	;# 
  3834  0008                     	;# 
  3835  0009                     	;# 
  3836  000A                     	;# 
  3837  000B                     	;# 
  3838  000C                     	;# 
  3839  000D                     	;# 
  3840  000E                     	;# 
  3841  0011                     	;# 
  3842  0012                     	;# 
  3843  0013                     	;# 
  3844  0014                     	;# 
  3845  0015                     	;# 
  3846  0016                     	;# 
  3847  0016                     	;# 
  3848  0017                     	;# 
  3849  0018                     	;# 
  3850  0019                     	;# 
  3851  001A                     	;# 
  3852  001B                     	;# 
  3853  001C                     	;# 
  3854  001E                     	;# 
  3855  001F                     	;# 
  3856  008C                     	;# 
  3857  008D                     	;# 
  3858  008E                     	;# 
  3859  0091                     	;# 
  3860  0092                     	;# 
  3861  0093                     	;# 
  3862  0094                     	;# 
  3863  0095                     	;# 
  3864  0096                     	;# 
  3865  0097                     	;# 
  3866  0098                     	;# 
  3867  0099                     	;# 
  3868  009A                     	;# 
  3869  009B                     	;# 
  3870  009B                     	;# 
  3871  009C                     	;# 
  3872  009D                     	;# 
  3873  009E                     	;# 
  3874  010C                     	;# 
  3875  010D                     	;# 
  3876  010E                     	;# 
  3877  0111                     	;# 
  3878  0112                     	;# 
  3879  0113                     	;# 
  3880  0114                     	;# 
  3881  0115                     	;# 
  3882  0116                     	;# 
  3883  0117                     	;# 
  3884  0118                     	;# 
  3885  0119                     	;# 
  3886  011A                     	;# 
  3887  011B                     	;# 
  3888  011D                     	;# 
  3889  011E                     	;# 
  3890  018C                     	;# 
  3891  018D                     	;# 
  3892  018E                     	;# 
  3893  0191                     	;# 
  3894  0191                     	;# 
  3895  0192                     	;# 
  3896  0193                     	;# 
  3897  0193                     	;# 
  3898  0193                     	;# 
  3899  0194                     	;# 
  3900  0195                     	;# 
  3901  0196                     	;# 
  3902  0199                     	;# 
  3903  019A                     	;# 
  3904  019B                     	;# 
  3905  019B                     	;# 
  3906  019B                     	;# 
  3907  019B                     	;# 
  3908  019C                     	;# 
  3909  019C                     	;# 
  3910  019D                     	;# 
  3911  019E                     	;# 
  3912  019F                     	;# 
  3913  020C                     	;# 
  3914  020D                     	;# 
  3915  020E                     	;# 
  3916  0211                     	;# 
  3917  0211                     	;# 
  3918  0212                     	;# 
  3919  0212                     	;# 
  3920  0213                     	;# 
  3921  0213                     	;# 
  3922  0214                     	;# 
  3923  0214                     	;# 
  3924  0215                     	;# 
  3925  0215                     	;# 
  3926  0215                     	;# 
  3927  0216                     	;# 
  3928  0216                     	;# 
  3929  0217                     	;# 
  3930  0217                     	;# 
  3931  0219                     	;# 
  3932  021A                     	;# 
  3933  021B                     	;# 
  3934  021C                     	;# 
  3935  021D                     	;# 
  3936  021E                     	;# 
  3937  021F                     	;# 
  3938  0291                     	;# 
  3939  0291                     	;# 
  3940  0292                     	;# 
  3941  0293                     	;# 
  3942  0294                     	;# 
  3943  0295                     	;# 
  3944  0295                     	;# 
  3945  0296                     	;# 
  3946  0298                     	;# 
  3947  0298                     	;# 
  3948  0299                     	;# 
  3949  029A                     	;# 
  3950  029B                     	;# 
  3951  029C                     	;# 
  3952  029D                     	;# 
  3953  029E                     	;# 
  3954  0311                     	;# 
  3955  0311                     	;# 
  3956  0312                     	;# 
  3957  0313                     	;# 
  3958  0318                     	;# 
  3959  0318                     	;# 
  3960  0319                     	;# 
  3961  031A                     	;# 
  3962  038C                     	;# 
  3963  038D                     	;# 
  3964  038E                     	;# 
  3965  0391                     	;# 
  3966  0392                     	;# 
  3967  0393                     	;# 
  3968  0394                     	;# 
  3969  0395                     	;# 
  3970  0396                     	;# 
  3971  039A                     	;# 
  3972  039C                     	;# 
  3973  039D                     	;# 
  3974  039E                     	;# 
  3975  039F                     	;# 
  3976  0415                     	;# 
  3977  0416                     	;# 
  3978  0417                     	;# 
  3979  041C                     	;# 
  3980  041D                     	;# 
  3981  041E                     	;# 
  3982  0FE4                     	;# 
  3983  0FE5                     	;# 
  3984  0FE6                     	;# 
  3985  0FE7                     	;# 
  3986  0FE8                     	;# 
  3987  0FE9                     	;# 
  3988  0FEA                     	;# 
  3989  0FEB                     	;# 
  3990  0FED                     	;# 
  3991  0FEE                     	;# 
  3992  0FEF                     	;# 
  3993                           
  3994                           	psect	idataBANK1
  3995  14CB                     __pidataBANK1:	
  3996                           
  3997                           ;initializer for _sensorHealth
  3998  14CB  3401               	retlw	1
  3999  14CC  3401               	retlw	1
  4000                           
  4001                           ;initializer for _addressSize
  4002  14CD  3405               	retlw	5
  4003                           
  4004                           	psect	idataBANK2
  4005  14DE                     __pidataBANK2:	
  4006                           
  4007                           ;initializer for _sensorUpdatePeriod
  4008  14DE  3488               	retlw	136
  4009  14DF  3413               	retlw	19
  4010  14E0  3400               	retlw	0
  4011  14E1  3400               	retlw	0
  4012                           
  4013                           	psect	stringtext1
  4014  1800                     __pstringtext1:	
  4015  1800                     atan@coeff_a:	
  4016  1800  343C               	retlw	60
  4017  1801  3404               	retlw	4
  4018  1802  3442               	retlw	66
  4019  1803  349F               	retlw	159
  4020  1804  346A               	retlw	106
  4021  1805  3442               	retlw	66
  4022  1806  3490               	retlw	144
  4023  1807  3401               	retlw	1
  4024  1808  3442               	retlw	66
  4025  1809  344D               	retlw	77
  4026  180A  34BB               	retlw	187
  4027  180B  3440               	retlw	64
  4028  180C  34EC               	retlw	236
  4029  180D  3447               	retlw	71
  4030  180E  343E               	retlw	62
  4031  180F  348E               	retlw	142
  4032  1810  341F               	retlw	31
  4033  1811  34BB               	retlw	187
  4034  1812                     __end_ofatan@coeff_a:	
  4035                           
  4036                           	psect	stringtext2
  4037  1812                     __pstringtext2:	
  4038  1812                     atan@coeff_b:	
  4039  1812  343C               	retlw	60
  4040  1813  3404               	retlw	4
  4041  1814  3442               	retlw	66
  4042  1815  345A               	retlw	90
  4043  1816  348B               	retlw	139
  4044  1817  3442               	retlw	66
  4045  1818  3404               	retlw	4
  4046  1819  3444               	retlw	68
  4047  181A  3442               	retlw	66
  4048  181B  349C               	retlw	156
  4049  181C  344F               	retlw	79
  4050  181D  3441               	retlw	65
  4051  181E  3400               	retlw	0
  4052  181F  3480               	retlw	128
  4053  1820  343F               	retlw	63
  4054  1821                     __end_ofatan@coeff_b:	
  4055                           
  4056                           	psect	stringtext3
  4057  1821                     __pstringtext3:	
  4058  1821                     Wireless_init@TADDR:	
  4059  1821  3432               	retlw	50
  4060  1822  3430               	retlw	48
  4061  1823  3430               	retlw	48
  4062  1824  3430               	retlw	48
  4063  1825  3431               	retlw	49
  4064  1826                     __end_ofWireless_init@TADDR:	
  4065                           
  4066                           	psect	nvCOMMON
  4067  007C                     __pnvCOMMON:	
  4068  007C                     _timer1ReloadVal:	
  4069  007C                     	ds	2
  4070                           
  4071                           	psect	nvBANK2
  4072  0167                     __pnvBANK2:	
  4073  0167                     _TMR1_InterruptHandler:	
  4074  0167                     	ds	2
  4075  0169                     _IOCAF2_InterruptHandler:	
  4076  0169                     	ds	2
  4077  000E                     _PORTCbits	set	14
  4078  0019                     _T1GCONbits	set	25
  4079  0018                     _T1CONbits	set	24
  4080  0018                     _T1CON	set	24
  4081  0016                     _TMR1L	set	22
  4082  0017                     _TMR1H	set	23
  4083  0019                     _T1GCON	set	25
  4084  0014                     _PIR4bits	set	20
  4085  001C                     _T2CONbits	set	28
  4086  001C                     _T2CON	set	28
  4087  0011                     _PIR1bits	set	17
  4088  001A                     _TMR2	set	26
  4089  001B                     _PR2	set	27
  4090  000B                     _INTCONbits	set	11
  4091  009D                     _ADCON0bits	set	157
  4092  009C                     _ADRESH	set	156
  4093  009B                     _ADRESL	set	155
  4094  009E                     _ADCON1	set	158
  4095  009D                     _ADCON0	set	157
  4096  0091                     _PIE1bits	set	145
  4097  0094                     _PIE4bits	set	148
  4098  0095                     _OPTION_REGbits	set	149
  4099  008E                     _TRISC	set	142
  4100  008D                     _TRISB	set	141
  4101  008C                     _TRISA	set	140
  4102  0097                     _WDTCON	set	151
  4103  0098                     _OSCTUNE	set	152
  4104  0099                     _OSCCON	set	153
  4105  010E                     _LATCbits	set	270
  4106  0117                     _FVRCONbits	set	279
  4107  0117                     _FVRCON	set	279
  4108  011D                     _APFCON0	set	285
  4109  011E                     _APFCON1	set	286
  4110  010E                     _LATC	set	270
  4111  010D                     _LATB	set	269
  4112  010C                     _LATA	set	268
  4113  0116                     _BORCON	set	278
  4114  0196                     _EECON2	set	406
  4115  0193                     _EEDATL	set	403
  4116  0194                     _EEDATH	set	404
  4117  0195                     _EECON1bits	set	405
  4118  0192                     _EEADRH	set	402
  4119  0191                     _EEADRL	set	401
  4120  018C                     _ANSELA	set	396
  4121  018D                     _ANSELB	set	397
  4122  018E                     _ANSELC	set	398
  4123  020E                     _WPUCbits	set	526
  4124  0214                     _SSP1STATbits	set	532
  4125  0211                     _SSP1BUF	set	529
  4126  0215                     _SSP1CON1bits	set	533
  4127  0212                     _SSP1ADD	set	530
  4128  0215                     _SSP1CON1	set	533
  4129  0214                     _SSP1STAT	set	532
  4130  0219                     _SSP2BUF	set	537
  4131  021E                     _SSP2CON2bits	set	542
  4132  021D                     _SSP2CON1bits	set	541
  4133  021A                     _SSP2ADD	set	538
  4134  021F                     _SSP2CON3	set	543
  4135  021D                     _SSP2CON1	set	541
  4136  021C                     _SSP2STAT	set	540
  4137  020E                     _WPUC	set	526
  4138  020C                     _WPUA	set	524
  4139  020D                     _WPUB	set	525
  4140  0391                     _IOCAPbits	set	913
  4141  0392                     _IOCANbits	set	914
  4142  0393                     _IOCAFbits	set	915
  4143                           
  4144                           ; #config settings
  4145  0000                     
  4146                           	psect	cinit
  4147  0039                     start_initialization:	
  4148  0039                     __initialization:	
  4149                           
  4150                           ; Initialize objects allocated to BANK1
  4151  0039  0021               	movlb	1	; select bank1
  4152  003A  3194  24CB  3180   	fcall	__pidataBANK1	;fetch initializer
  4153  003D  00E7               	movwf	__pdataBANK1& (0+127)
  4154  003E  3194  24CC  3180   	fcall	__pidataBANK1+1	;fetch initializer
  4155  0041  00E8               	movwf	(__pdataBANK1+1)& (0+127)
  4156  0042  3194  24CD  3180   	fcall	__pidataBANK1+2	;fetch initializer
  4157  0045  00E9               	movwf	(__pdataBANK1+2)& (0+127)
  4158                           
  4159                           ; Initialize objects allocated to BANK2
  4160  0046  0022               	movlb	2	; select bank2
  4161  0047  3194  24DE  3180   	fcall	__pidataBANK2	;fetch initializer
  4162  004A  00EB               	movwf	__pdataBANK2& (0+127)
  4163  004B  3194  24DF  3180   	fcall	__pidataBANK2+1	;fetch initializer
  4164  004E  00EC               	movwf	(__pdataBANK2+1)& (0+127)
  4165  004F  3194  24E0  3180   	fcall	__pidataBANK2+2	;fetch initializer
  4166  0052  00ED               	movwf	(__pdataBANK2+2)& (0+127)
  4167  0053  3194  24E1  3180   	fcall	__pidataBANK2+3	;fetch initializer
  4168  0056  00EE               	movwf	(__pdataBANK2+3)& (0+127)
  4169                           
  4170                           ; Clear objects allocated to COMMON
  4171  0057  01F7               	clrf	__pbssCOMMON& (0+127)
  4172  0058  01F8               	clrf	(__pbssCOMMON+1)& (0+127)
  4173  0059  01F9               	clrf	(__pbssCOMMON+2)& (0+127)
  4174  005A  01FA               	clrf	(__pbssCOMMON+3)& (0+127)
  4175  005B  01FB               	clrf	(__pbssCOMMON+4)& (0+127)
  4176                           
  4177                           ; Clear objects allocated to BANK1
  4178  005C  30C7               	movlw	low __pbssBANK1
  4179  005D  0084               	movwf	4
  4180  005E  3000               	movlw	high __pbssBANK1
  4181  005F  0085               	movwf	5
  4182  0060  3020               	movlw	32
  4183  0061  3194  24FE  3180   	fcall	clear_ram0
  4184                           
  4185                           ; Clear objects allocated to BANK2
  4186  0064  3020               	movlw	low __pbssBANK2
  4187  0065  0084               	movwf	4
  4188  0066  3001               	movlw	high __pbssBANK2
  4189  0067  0085               	movwf	5
  4190  0068  3047               	movlw	71
  4191  0069  3194  24FE  3180   	fcall	clear_ram0
  4192                           
  4193                           ; Clear objects allocated to BANK3
  4194  006C  30A0               	movlw	low __pbssBANK3
  4195  006D  0084               	movwf	4
  4196  006E  3001               	movlw	high __pbssBANK3
  4197  006F  0085               	movwf	5
  4198  0070  3020               	movlw	32
  4199  0071  3194  24FE         	fcall	clear_ram0
  4200  0073                     end_of_initialization:	
  4201                           ;End of C runtime variable initialization code
  4202                           
  4203  0073                     __end_of__initialization:	
  4204  0073  107E               	bcf	int$flags,0	;clear compiler interrupt flag (level 1)
  4205  0074  0020               	movlb	0
  4206  0075  3183  2B46         	ljmp	_main	;jump to C main() function
  4207                           
  4208                           	psect	bssCOMMON
  4209  0077                     __pbssCOMMON:	
  4210  0077                     _p_i2c2_current:	
  4211  0077                     	ds	1
  4212  0078                     _p_i2c2_trb_current:	
  4213  0078                     	ds	1
  4214  0079                     _i2c2_state:	
  4215  0079                     	ds	1
  4216  007A                     I2C2_ISR@i2c_address:	
  4217  007A                     	ds	2
  4218                           
  4219                           	psect	bssBANK1
  4220  00C7                     __pbssBANK1:	
  4221  00C7                     _i2c2_object:	
  4222  00C7                     	ds	5
  4223  00CC                     _globalCounter:	
  4224  00CC                     	ds	4
  4225  00D0                     _adc_t:	
  4226  00D0                     	ds	4
  4227  00D4                     _var1:	
  4228  00D4                     	ds	3
  4229  00D7                     _dig_T1:	
  4230  00D7                     	ds	2
  4231  00D9                     I2C2_ISR@pi2c_buf_ptr:	
  4232  00D9                     	ds	2
  4233  00DB                     _initialised:	
  4234  00DB                     	ds	1
  4235  00DC                     _doorState:	
  4236  00DC                     	ds	1
  4237  00DD                     _HMC5883Lmode:	
  4238  00DD                     	ds	1
  4239  00DE                     I2C2_ISR@i2c_10bit_address_restart:	
  4240  00DE                     	ds	1
  4241  00DF                     I2C2_ISR@i2c_bytes_left:	
  4242  00DF                     	ds	1
  4243  00E0                     _i2c2_trb_count:	
  4244  00E0                     	ds	1
  4245  00E1                     _i2c2_tr_queue:	
  4246  00E1                     	ds	4
  4247  00E5                     _doorClosedAngle:	
  4248  00E5                     	ds	1
  4249  00E6                     _doorOpenAngle:	
  4250  00E6                     	ds	1
  4251                           
  4252                           	psect	dataBANK1
  4253  00E7                     __pdataBANK1:	
  4254  00E7                     _sensorHealth:	
  4255  00E7                     	ds	2
  4256  00E9                     _addressSize:	
  4257  00E9                     	ds	1
  4258                           
  4259                           	psect	bssBANK2
  4260  0120                     __pbssBANK2:	
  4261  0120                     _curr:	
  4262  0120                     	ds	4
  4263  0124                     _adc_p:	
  4264  0124                     	ds	4
  4265  0128                     _pressure:	
  4266  0128                     	ds	3
  4267  012B                     _cTemp:	
  4268  012B                     	ds	3
  4269  012E                     _t_fine:	
  4270  012E                     	ds	3
  4271  0131                     _var2:	
  4272  0131                     	ds	3
  4273  0134                     HMC5883L_TestConnection@F3560:	
  4274  0134                     	ds	3
  4275  0137                     _errno:	
  4276  0137                     	ds	2
  4277  0139                     _timeOut:	
  4278  0139                     	ds	2
  4279  013B                     _referenceDirection:	
  4280  013B                     	ds	2
  4281  013D                     _dig_P9:	
  4282  013D                     	ds	2
  4283  013F                     _dig_P8:	
  4284  013F                     	ds	2
  4285  0141                     _dig_P7:	
  4286  0141                     	ds	2
  4287  0143                     _dig_P6:	
  4288  0143                     	ds	2
  4289  0145                     _dig_P5:	
  4290  0145                     	ds	2
  4291  0147                     _dig_P4:	
  4292  0147                     	ds	2
  4293  0149                     _dig_P3:	
  4294  0149                     	ds	2
  4295  014B                     _dig_P2:	
  4296  014B                     	ds	2
  4297  014D                     _dig_P1:	
  4298  014D                     	ds	2
  4299  014F                     _dig_T4:	
  4300  014F                     	ds	2
  4301  0151                     _dig_T3:	
  4302  0151                     	ds	2
  4303  0153                     _dig_T2:	
  4304  0153                     	ds	2
  4305  0155                     _heading:	
  4306  0155                     	ds	8
  4307  015D                     I2C2_MasterRead@trBlock:	
  4308  015D                     	ds	5
  4309  0162                     I2C2_MasterWrite@trBlock:	
  4310  0162                     	ds	5
  4311                           
  4312                           	psect	dataBANK2
  4313  016B                     __pdataBANK2:	
  4314  016B                     _sensorUpdatePeriod:	
  4315  016B                     	ds	4
  4316                           
  4317                           	psect	bssBANK3
  4318  01A0                     __pbssBANK3:	
  4319  01A0                     _b1:	
  4320  01A0                     	ds	24
  4321  01B8                     _data:	
  4322  01B8                     	ds	8
  4323                           
  4324                           	psect	clrtext
  4325  14FE                     clear_ram0:	
  4326                           ;	Called with FSR0 containing the base address, and
  4327                           ;	WREG with the size to clear
  4328                           
  4329  14FE  0064               	clrwdt	;clear the watchdog before getting into this loop
  4330  14FF                     clrloop0:	
  4331  14FF  0180               	clrf	0	;clear RAM location pointed to by FSR
  4332  1500  3101               	addfsr 0,1
  4333  1501  0B89               	decfsz	9,f	;Have we reached the end of clearing yet?
  4334  1502  2CFF               	goto	clrloop0	;have we reached the end yet?
  4335  1503  3400               	retlw	0	;all done for this memory range, return
  4336                           
  4337                           	psect	cstackBANK3
  4338  01C0                     __pcstackBANK3:	
  4339  01C0                     main@doorClosedUpdateCounter:	
  4340                           
  4341                           ; 4 bytes @ 0x0
  4342  01C0                     	ds	4
  4343  01C4                     main@prevDoorStatus:	
  4344                           
  4345                           ; 1 bytes @ 0x4
  4346  01C4                     	ds	1
  4347  01C5                     main@doorOpenTime:	
  4348                           
  4349                           ; 4 bytes @ 0x5
  4350  01C5                     	ds	4
  4351  01C9                     main@doorStatus:	
  4352                           
  4353                           ; 1 bytes @ 0x9
  4354  01C9                     	ds	1
  4355                           
  4356                           	psect	cstackBANK1
  4357  00A0                     __pcstackBANK1:	
  4358  00A0                     ?_BMP_readTemperature:	
  4359                           
  4360                           ; 3 bytes @ 0x0
  4361  00A0                     	ds	3
  4362  00A3                     ??_BMP_readTemperature:	
  4363                           
  4364                           ; 1 bytes @ 0x3
  4365  00A3                     	ds	12
  4366  00AF                     _BMP_readTemperature$2605:	
  4367                           
  4368                           ; 3 bytes @ 0xF
  4369  00AF                     	ds	3
  4370  00B2                     BMP_readTemperature@status:	
  4371                           
  4372                           ; 1 bytes @ 0x12
  4373  00B2                     	ds	1
  4374  00B3                     BMP_readTemperature@tmp:	
  4375                           
  4376                           ; 1 bytes @ 0x13
  4377  00B3                     	ds	1
  4378  00B4                     ?_Wireless_packageData:	
  4379  00B4                     Wireless_packageData@openTime:	
  4380                           ; 1 bytes @ 0x14
  4381                           
  4382                           
  4383                           ; 1 bytes @ 0x14
  4384  00B4                     	ds	1
  4385  00B5                     Wireless_packageData@tempC:	
  4386                           
  4387                           ; 3 bytes @ 0x15
  4388  00B5                     	ds	3
  4389  00B8                     ??_Wireless_packageData:	
  4390                           
  4391                           ; 1 bytes @ 0x18
  4392  00B8                     	ds	2
  4393  00BA                     Wireless_packageData@data:	
  4394                           
  4395                           ; 5 bytes @ 0x1A
  4396  00BA                     	ds	5
  4397  00BF                     Wireless_packageData@var:	
  4398                           
  4399                           ; 1 bytes @ 0x1F
  4400  00BF                     	ds	1
  4401  00C0                     Wireless_packageData@status:	
  4402                           
  4403                           ; 1 bytes @ 0x20
  4404  00C0                     	ds	1
  4405  00C1                     Wireless_packageData@t2:	
  4406                           
  4407                           ; 2 bytes @ 0x21
  4408  00C1                     	ds	2
  4409  00C3                     Wireless_packageData@t1:	
  4410                           
  4411                           ; 2 bytes @ 0x23
  4412  00C3                     	ds	2
  4413  00C5                     ??_main:	
  4414                           
  4415                           ; 1 bytes @ 0x25
  4416  00C5                     	ds	2
  4417                           
  4418                           	psect	cstackCOMMON
  4419  0070                     __pcstackCOMMON:	
  4420  0070                     ?_PIN_MANAGER_Initialize:	
  4421  0070                     ?_OSCILLATOR_Initialize:	
  4422                           ; 1 bytes @ 0x0
  4423                           
  4424  0070                     ?_WDT_Initialize:	
  4425                           ; 1 bytes @ 0x0
  4426                           
  4427  0070                     ?_SPI1_Initialize:	
  4428                           ; 1 bytes @ 0x0
  4429                           
  4430  0070                     ?_I2C2_Initialize:	
  4431                           ; 1 bytes @ 0x0
  4432                           
  4433  0070                     ?_FVR_Initialize:	
  4434                           ; 1 bytes @ 0x0
  4435                           
  4436  0070                     ?_ADC_Initialize:	
  4437                           ; 1 bytes @ 0x0
  4438                           
  4439  0070                     ?_TMR2_Initialize:	
  4440                           ; 1 bytes @ 0x0
  4441                           
  4442  0070                     ?_TMR1_Initialize:	
  4443                           ; 1 bytes @ 0x0
  4444                           
  4445  0070                     ?_IOCAF2_DefaultInterruptHandler:	
  4446                           ; 1 bytes @ 0x0
  4447                           
  4448  0070                     ??_IOCAF2_DefaultInterruptHandler:	
  4449                           ; 1 bytes @ 0x0
  4450                           
  4451  0070                     ?_IOCAF2_ISR:	
  4452                           ; 1 bytes @ 0x0
  4453                           
  4454  0070                     ??_IOCAF2_ISR:	
  4455                           ; 1 bytes @ 0x0
  4456                           
  4457  0070                     ?_I2C2_BusCollisionISR:	
  4458                           ; 1 bytes @ 0x0
  4459                           
  4460  0070                     ??_I2C2_BusCollisionISR:	
  4461                           ; 1 bytes @ 0x0
  4462                           
  4463  0070                     ?_I2C2_ISR:	
  4464                           ; 1 bytes @ 0x0
  4465                           
  4466  0070                     ?_TMR1_ISR:	
  4467                           ; 1 bytes @ 0x0
  4468                           
  4469  0070                     ??_TMR1_ISR:	
  4470                           ; 1 bytes @ 0x0
  4471                           
  4472  0070                     ?_TMR1_DefaultInterruptHandler:	
  4473                           ; 1 bytes @ 0x0
  4474                           
  4475  0070                     ??_TMR1_DefaultInterruptHandler:	
  4476                           ; 1 bytes @ 0x0
  4477                           
  4478  0070                     ?_TMR1_CallBack:	
  4479                           ; 1 bytes @ 0x0
  4480                           
  4481  0070                     ??_TMR1_CallBack:	
  4482                           ; 1 bytes @ 0x0
  4483                           
  4484  0070                     ?_Timeout_increment:	
  4485                           ; 1 bytes @ 0x0
  4486                           
  4487  0070                     ??_Timeout_increment:	
  4488                           ; 1 bytes @ 0x0
  4489                           
  4490  0070                     ?_I2C2_Stop:	
  4491                           ; 1 bytes @ 0x0
  4492                           
  4493  0070                     ??_I2C2_Stop:	
  4494                           ; 1 bytes @ 0x0
  4495                           
  4496  0070                     ?_I2C2_FunctionComplete:	
  4497                           ; 1 bytes @ 0x0
  4498                           
  4499  0070                     ??_I2C2_FunctionComplete:	
  4500                           ; 1 bytes @ 0x0
  4501                           
  4502  0070                     ?_Sensor_peripheralWake:	
  4503                           ; 1 bytes @ 0x0
  4504                           
  4505  0070                     ?_Sensor_peripheralSleep:	
  4506                           ; 1 bytes @ 0x0
  4507                           
  4508  0070                     ?_Wireless_init:	
  4509                           ; 1 bytes @ 0x0
  4510                           
  4511  0070                     ?_BMP_init:	
  4512                           ; 1 bytes @ 0x0
  4513                           
  4514  0070                     ?_DOOR_init:	
  4515                           ; 1 bytes @ 0x0
  4516                           
  4517  0070                     ?_DOOR_resetPos:	
  4518                           ; 1 bytes @ 0x0
  4519                           
  4520  0070                     ?_DOOR_run:	
  4521                           ; 1 bytes @ 0x0
  4522                           
  4523  0070                     ?_Wireless_wake:	
  4524                           ; 1 bytes @ 0x0
  4525                           
  4526  0070                     ?_Wireless_sleep:	
  4527                           ; 1 bytes @ 0x0
  4528                           
  4529  0070                     ?_Diag_setTempSensorHealth:	
  4530                           ; 1 bytes @ 0x0
  4531                           
  4532  0070                     ?_Diag_getTempSensorHealth:	
  4533                           ; 1 bytes @ 0x0
  4534                           
  4535  0070                     ?_Diag_getSensorHealth:	
  4536                           ; 1 bytes @ 0x0
  4537                           
  4538  0070                     ?_Wireless_checkDataReceived:	
  4539                           ; 1 bytes @ 0x0
  4540                           
  4541  0070                     ?_SYSTEM_Initialize:	
  4542                           ; 1 bytes @ 0x0
  4543                           
  4544  0070                     ?_PIN_MANAGER_IOC:	
  4545                           ; 1 bytes @ 0x0
  4546                           
  4547  0070                     ??_PIN_MANAGER_IOC:	
  4548                           ; 1 bytes @ 0x0
  4549                           
  4550  0070                     ?_INTERRUPT_InterruptManager:	
  4551                           ; 1 bytes @ 0x0
  4552                           
  4553  0070                     ?_ADC_SelectChannel:	
  4554                           ; 1 bytes @ 0x0
  4555                           
  4556  0070                     ?_ADC_StartConversion:	
  4557                           ; 1 bytes @ 0x0
  4558                           
  4559  0070                     ?_ADC_IsConversionDone:	
  4560                           ; 1 bytes @ 0x0
  4561                           
  4562  0070                     ?_FVR_IsOutputReady:	
  4563                           ; 1 bytes @ 0x0
  4564                           
  4565  0070                     ?_DATAEE_ReadByte:	
  4566                           ; 1 bytes @ 0x0
  4567                           
  4568  0070                     ?_SPI1_Exchange8bit:	
  4569                           ; 1 bytes @ 0x0
  4570                           
  4571  0070                     ?_main:	
  4572                           ; 1 bytes @ 0x0
  4573                           
  4574  0070                     ?_SPI_WriteRead:	
  4575                           ; 1 bytes @ 0x0
  4576                           
  4577  0070                     ?_RF_ReadRegister:	
  4578                           ; 1 bytes @ 0x0
  4579                           
  4580  0070                     ?_RF_Write:	
  4581                           ; 1 bytes @ 0x0
  4582                           
  4583  0070                     ?_RF_ResetStatusIRQ:	
  4584                           ; 1 bytes @ 0x0
  4585                           
  4586  0070                     ?_RF_Init:	
  4587                           ; 1 bytes @ 0x0
  4588                           
  4589  0070                     ?_RF_DataIsReady:	
  4590                           ; 1 bytes @ 0x0
  4591                           
  4592  0070                     ?_Wireless_sendData:	
  4593                           ; 1 bytes @ 0x0
  4594                           
  4595  0070                     ?_Timeout_hasExpired:	
  4596                           ; 1 bytes @ 0x0
  4597                           
  4598                           
  4599                           ; 1 bytes @ 0x0
  4600  0070                     	ds	2
  4601  0072                     I2C2_Stop@completion_code:	
  4602                           
  4603                           ; 1 bytes @ 0x2
  4604  0072                     	ds	1
  4605  0073                     ??_I2C2_ISR:	
  4606                           
  4607                           ; 1 bytes @ 0x3
  4608  0073                     	ds	4
  4609                           
  4610                           	psect	cstackBANK0
  4611  0020                     __pcstackBANK0:	
  4612  0020                     ??_INTERRUPT_InterruptManager:	
  4613                           
  4614                           ; 1 bytes @ 0x0
  4615  0020                     	ds	1
  4616  0021                     ??_OSCILLATOR_Initialize:	
  4617  0021                     ??_WDT_Initialize:	
  4618                           ; 1 bytes @ 0x1
  4619                           
  4620  0021                     ??_SPI1_Initialize:	
  4621                           ; 1 bytes @ 0x1
  4622                           
  4623  0021                     ??_I2C2_Initialize:	
  4624                           ; 1 bytes @ 0x1
  4625                           
  4626  0021                     ??_FVR_Initialize:	
  4627                           ; 1 bytes @ 0x1
  4628                           
  4629  0021                     ??_ADC_Initialize:	
  4630                           ; 1 bytes @ 0x1
  4631                           
  4632  0021                     ??_TMR2_Initialize:	
  4633                           ; 1 bytes @ 0x1
  4634                           
  4635  0021                     ?_IOCAF2_SetInterruptHandler:	
  4636                           ; 1 bytes @ 0x1
  4637                           
  4638  0021                     ?_TMR1_SetInterruptHandler:	
  4639                           ; 1 bytes @ 0x1
  4640                           
  4641  0021                     ?_I2C2_MasterWriteTRBBuild:	
  4642                           ; 1 bytes @ 0x1
  4643                           
  4644  0021                     ?_I2C2_MasterTRBInsert:	
  4645                           ; 1 bytes @ 0x1
  4646                           
  4647  0021                     ?_I2C2_MasterReadTRBBuild:	
  4648                           ; 1 bytes @ 0x1
  4649                           
  4650  0021                     ??_Sensor_peripheralWake:	
  4651                           ; 1 bytes @ 0x1
  4652                           
  4653  0021                     ??_Sensor_peripheralSleep:	
  4654                           ; 1 bytes @ 0x1
  4655                           
  4656  0021                     ?_setSleepTime:	
  4657                           ; 1 bytes @ 0x1
  4658                           
  4659  0021                     ??_DOOR_resetPos:	
  4660                           ; 1 bytes @ 0x1
  4661                           
  4662  0021                     ??_DOOR_run:	
  4663                           ; 1 bytes @ 0x1
  4664                           
  4665  0021                     ??_Diag_setTempSensorHealth:	
  4666                           ; 1 bytes @ 0x1
  4667                           
  4668  0021                     ??_Diag_getTempSensorHealth:	
  4669                           ; 1 bytes @ 0x1
  4670                           
  4671  0021                     ??_Diag_getSensorHealth:	
  4672                           ; 1 bytes @ 0x1
  4673                           
  4674  0021                     ??_ADC_SelectChannel:	
  4675                           ; 1 bytes @ 0x1
  4676                           
  4677  0021                     ??_ADC_StartConversion:	
  4678                           ; 1 bytes @ 0x1
  4679                           
  4680  0021                     ??_ADC_IsConversionDone:	
  4681                           ; 1 bytes @ 0x1
  4682                           
  4683  0021                     ??_FVR_IsOutputReady:	
  4684                           ; 1 bytes @ 0x1
  4685                           
  4686  0021                     ?_DATAEE_WriteByte:	
  4687                           ; 1 bytes @ 0x1
  4688                           
  4689  0021                     ??_DATAEE_ReadByte:	
  4690                           ; 1 bytes @ 0x1
  4691                           
  4692  0021                     ??_SPI1_Exchange8bit:	
  4693                           ; 1 bytes @ 0x1
  4694                           
  4695  0021                     ??_RF_Init:	
  4696                           ; 1 bytes @ 0x1
  4697                           
  4698  0021                     ?_Timeout_setTimeout:	
  4699                           ; 1 bytes @ 0x1
  4700                           
  4701  0021                     ??_Timeout_hasExpired:	
  4702                           ; 1 bytes @ 0x1
  4703                           
  4704  0021                     ?___bmul:	
  4705                           ; 1 bytes @ 0x1
  4706                           
  4707  0021                     ?_abs:	
  4708                           ; 1 bytes @ 0x1
  4709                           
  4710  0021                     ?_ADC_GetConversionResult:	
  4711                           ; 2 bytes @ 0x1
  4712                           
  4713  0021                     ?___ftpack:	
  4714                           ; 2 bytes @ 0x1
  4715                           
  4716  0021                     ?___lmul:	
  4717                           ; 3 bytes @ 0x1
  4718                           
  4719  0021                     ?___aldiv:	
  4720                           ; 4 bytes @ 0x1
  4721                           
  4722  0021                     ?___lldiv:	
  4723                           ; 4 bytes @ 0x1
  4724                           
  4725  0021                     I2C2_MasterTRBInsert@ptrb_list:	
  4726                           ; 4 bytes @ 0x1
  4727                           
  4728  0021                     I2C2_MasterWriteTRBBuild@pdata:	
  4729                           ; 1 bytes @ 0x1
  4730                           
  4731  0021                     DATAEE_WriteByte@bData:	
  4732                           ; 1 bytes @ 0x1
  4733                           
  4734  0021                     DATAEE_ReadByte@bAdd:	
  4735                           ; 1 bytes @ 0x1
  4736                           
  4737  0021                     SPI1_Exchange8bit@data:	
  4738                           ; 1 bytes @ 0x1
  4739                           
  4740  0021                     ___bmul@multiplicand:	
  4741                           ; 1 bytes @ 0x1
  4742                           
  4743  0021                     IOCAF2_SetInterruptHandler@InterruptHandler:	
  4744                           ; 1 bytes @ 0x1
  4745                           
  4746  0021                     TMR1_SetInterruptHandler@InterruptHandler:	
  4747                           ; 2 bytes @ 0x1
  4748                           
  4749  0021                     I2C2_MasterReadTRBBuild@pdata:	
  4750                           ; 2 bytes @ 0x1
  4751                           
  4752  0021                     setSleepTime@timeSec:	
  4753                           ; 2 bytes @ 0x1
  4754                           
  4755  0021                     Timeout_setTimeout@val:	
  4756                           ; 2 bytes @ 0x1
  4757                           
  4758  0021                     abs@a:	
  4759                           ; 2 bytes @ 0x1
  4760                           
  4761  0021                     ___ftpack@arg:	
  4762                           ; 2 bytes @ 0x1
  4763                           
  4764  0021                     ___lmul@multiplier:	
  4765                           ; 3 bytes @ 0x1
  4766                           
  4767  0021                     ___aldiv@divisor:	
  4768                           ; 4 bytes @ 0x1
  4769                           
  4770  0021                     ___lldiv@divisor:	
  4771                           ; 4 bytes @ 0x1
  4772                           
  4773                           
  4774                           ; 4 bytes @ 0x1
  4775  0021                     	ds	1
  4776  0022                     ??_DATAEE_WriteByte:	
  4777  0022                     ??_SPI_WriteRead:	
  4778                           ; 1 bytes @ 0x2
  4779                           
  4780  0022                     ??___bmul:	
  4781                           ; 1 bytes @ 0x2
  4782                           
  4783  0022                     I2C2_MasterTRBInsert@pflag:	
  4784                           ; 1 bytes @ 0x2
  4785                           
  4786  0022                     I2C2_MasterWriteTRBBuild@length:	
  4787                           ; 1 bytes @ 0x2
  4788                           
  4789  0022                     ADC_SelectChannel@channel:	
  4790                           ; 1 bytes @ 0x2
  4791                           
  4792  0022                     DATAEE_WriteByte@bAdd:	
  4793                           ; 1 bytes @ 0x2
  4794                           
  4795  0022                     SPI_WriteRead@val:	
  4796                           ; 1 bytes @ 0x2
  4797                           
  4798  0022                     Diag_setTempSensorHealth@health:	
  4799                           ; 1 bytes @ 0x2
  4800                           
  4801  0022                     Diag_getSensorHealth@var:	
  4802                           ; 1 bytes @ 0x2
  4803                           
  4804                           
  4805                           ; 1 bytes @ 0x2
  4806  0022                     	ds	1
  4807  0023                     ??_PIN_MANAGER_Initialize:	
  4808  0023                     ??_TMR1_Initialize:	
  4809                           ; 1 bytes @ 0x3
  4810                           
  4811  0023                     ??_IOCAF2_SetInterruptHandler:	
  4812                           ; 1 bytes @ 0x3
  4813                           
  4814  0023                     ??_TMR1_SetInterruptHandler:	
  4815                           ; 1 bytes @ 0x3
  4816                           
  4817  0023                     ??_I2C2_MasterTRBInsert:	
  4818                           ; 1 bytes @ 0x3
  4819                           
  4820  0023                     ??_setSleepTime:	
  4821                           ; 1 bytes @ 0x3
  4822                           
  4823  0023                     ??_abs:	
  4824                           ; 1 bytes @ 0x3
  4825                           
  4826  0023                     ??_SYSTEM_Initialize:	
  4827                           ; 1 bytes @ 0x3
  4828                           
  4829  0023                     ??_ADC_GetConversionResult:	
  4830                           ; 1 bytes @ 0x3
  4831                           
  4832  0023                     ?_SPI_WriteReadBuffer:	
  4833                           ; 1 bytes @ 0x3
  4834                           
  4835  0023                     ?_SPI_WriteBuffer:	
  4836                           ; 1 bytes @ 0x3
  4837                           
  4838  0023                     ?_RF_WriteRegister:	
  4839                           ; 1 bytes @ 0x3
  4840                           
  4841  0023                     ??_RF_ReadRegister:	
  4842                           ; 1 bytes @ 0x3
  4843                           
  4844  0023                     ??_RF_Write:	
  4845                           ; 1 bytes @ 0x3
  4846                           
  4847  0023                     ??_Timeout_setTimeout:	
  4848                           ; 1 bytes @ 0x3
  4849                           
  4850  0023                     I2C2_MasterReadTRBBuild@length:	
  4851                           ; 1 bytes @ 0x3
  4852                           
  4853  0023                     DATAEE_WriteByte@GIEBitValue:	
  4854                           ; 1 bytes @ 0x3
  4855                           
  4856  0023                     SPI_WriteReadBuffer@bufIn:	
  4857                           ; 1 bytes @ 0x3
  4858                           
  4859  0023                     RF_WriteRegister@val:	
  4860                           ; 1 bytes @ 0x3
  4861                           
  4862  0023                     RF_Write@val:	
  4863                           ; 1 bytes @ 0x3
  4864                           
  4865  0023                     ___bmul@product:	
  4866                           ; 1 bytes @ 0x3
  4867                           
  4868  0023                     I2C2_MasterWriteTRBBuild@address:	
  4869                           ; 1 bytes @ 0x3
  4870                           
  4871  0023                     SPI_WriteBuffer@bufOut:	
  4872                           ; 2 bytes @ 0x3
  4873                           
  4874                           
  4875                           ; 2 bytes @ 0x3
  4876  0023                     	ds	1
  4877  0024                     ?_Storage_load:	
  4878  0024                     ?_Storage_save:	
  4879                           ; 1 bytes @ 0x4
  4880                           
  4881  0024                     ??_RF_WriteRegister:	
  4882                           ; 1 bytes @ 0x4
  4883                           
  4884  0024                     I2C2_MasterTRBInsert@count:	
  4885                           ; 1 bytes @ 0x4
  4886                           
  4887  0024                     SPI_WriteReadBuffer@bufSize:	
  4888                           ; 1 bytes @ 0x4
  4889                           
  4890  0024                     RF_WriteRegister@reg:	
  4891                           ; 1 bytes @ 0x4
  4892                           
  4893  0024                     RF_ReadRegister@reg:	
  4894                           ; 1 bytes @ 0x4
  4895                           
  4896  0024                     Storage_load@closeAngle:	
  4897                           ; 1 bytes @ 0x4
  4898                           
  4899  0024                     Storage_save@closeAngle:	
  4900                           ; 1 bytes @ 0x4
  4901                           
  4902  0024                     ___bmul@multiplier:	
  4903                           ; 1 bytes @ 0x4
  4904                           
  4905  0024                     ___ftpack@exp:	
  4906                           ; 1 bytes @ 0x4
  4907                           
  4908  0024                     I2C2_MasterReadTRBBuild@address:	
  4909                           ; 1 bytes @ 0x4
  4910                           
  4911                           
  4912                           ; 2 bytes @ 0x4
  4913  0024                     	ds	1
  4914  0025                     ??_I2C2_MasterWriteTRBBuild:	
  4915  0025                     ??_Storage_load:	
  4916                           ; 1 bytes @ 0x5
  4917                           
  4918  0025                     ??_Storage_save:	
  4919                           ; 1 bytes @ 0x5
  4920                           
  4921  0025                     ??_SPI_WriteReadBuffer:	
  4922                           ; 1 bytes @ 0x5
  4923                           
  4924  0025                     ??_RF_ResetStatusIRQ:	
  4925                           ; 1 bytes @ 0x5
  4926                           
  4927  0025                     SPI_WriteBuffer@bufSize:	
  4928                           ; 1 bytes @ 0x5
  4929                           
  4930  0025                     RF_ReadRegister@val:	
  4931                           ; 1 bytes @ 0x5
  4932                           
  4933  0025                     ___ftpack@sign:	
  4934                           ; 1 bytes @ 0x5
  4935                           
  4936  0025                     ___lmul@multiplicand:	
  4937                           ; 1 bytes @ 0x5
  4938                           
  4939  0025                     ___aldiv@dividend:	
  4940                           ; 4 bytes @ 0x5
  4941                           
  4942  0025                     ___lldiv@dividend:	
  4943                           ; 4 bytes @ 0x5
  4944                           
  4945                           
  4946                           ; 4 bytes @ 0x5
  4947  0025                     	ds	1
  4948  0026                     ??_I2C2_MasterReadTRBBuild:	
  4949  0026                     ??___ftpack:	
  4950                           ; 1 bytes @ 0x6
  4951                           
  4952  0026                     ??_SPI_WriteBuffer:	
  4953                           ; 1 bytes @ 0x6
  4954                           
  4955  0026                     ??_RF_DataIsReady:	
  4956                           ; 1 bytes @ 0x6
  4957                           
  4958  0026                     RF_ResetStatusIRQ@flags:	
  4959                           ; 1 bytes @ 0x6
  4960                           
  4961  0026                     Storage_load@byte:	
  4962                           ; 1 bytes @ 0x6
  4963                           
  4964  0026                     Storage_save@openAngle:	
  4965                           ; 1 bytes @ 0x6
  4966                           
  4967                           
  4968                           ; 1 bytes @ 0x6
  4969  0026                     	ds	1
  4970  0027                     ?_DOOR_update:	
  4971  0027                     I2C2_MasterWriteTRBBuild@ptrb:	
  4972                           ; 1 bytes @ 0x7
  4973                           
  4974  0027                     RF_DataIsReady@channel:	
  4975                           ; 1 bytes @ 0x7
  4976                           
  4977  0027                     DOOR_update@closedAngle:	
  4978                           ; 1 bytes @ 0x7
  4979                           
  4980  0027                     Storage_load@openAngle:	
  4981                           ; 1 bytes @ 0x7
  4982                           
  4983                           
  4984                           ; 1 bytes @ 0x7
  4985  0027                     	ds	1
  4986  0028                     ??_DOOR_init:	
  4987  0028                     ??_DOOR_update:	
  4988                           ; 1 bytes @ 0x8
  4989                           
  4990  0028                     ?_I2C2_MasterWrite:	
  4991                           ; 1 bytes @ 0x8
  4992                           
  4993  0028                     I2C2_MasterWrite@length:	
  4994                           ; 1 bytes @ 0x8
  4995                           
  4996  0028                     I2C2_MasterReadTRBBuild@ptrb:	
  4997                           ; 1 bytes @ 0x8
  4998                           
  4999  0028                     SPI_WriteReadBuffer@bufOut:	
  5000                           ; 1 bytes @ 0x8
  5001                           
  5002  0028                     SPI_WriteBuffer@i:	
  5003                           ; 1 bytes @ 0x8
  5004                           
  5005  0028                     RF_DataIsReady@status:	
  5006                           ; 1 bytes @ 0x8
  5007                           
  5008                           
  5009                           ; 1 bytes @ 0x8
  5010  0028                     	ds	1
  5011  0029                     ?_I2C2_MasterRead:	
  5012  0029                     ?_RF_WriteRegisterData:	
  5013                           ; 1 bytes @ 0x9
  5014                           
  5015  0029                     ??___lmul:	
  5016                           ; 1 bytes @ 0x9
  5017                           
  5018  0029                     ??___aldiv:	
  5019                           ; 1 bytes @ 0x9
  5020                           
  5021  0029                     ??___lldiv:	
  5022                           ; 1 bytes @ 0x9
  5023                           
  5024  0029                     ?___altoft:	
  5025                           ; 1 bytes @ 0x9
  5026                           
  5027  0029                     ?___awtoft:	
  5028                           ; 3 bytes @ 0x9
  5029                           
  5030  0029                     ?___lwtoft:	
  5031                           ; 3 bytes @ 0x9
  5032                           
  5033  0029                     SPI_WriteReadBuffer@i:	
  5034                           ; 3 bytes @ 0x9
  5035                           
  5036  0029                     DOOR_update@openAngle:	
  5037                           ; 1 bytes @ 0x9
  5038                           
  5039  0029                     I2C2_MasterWrite@address:	
  5040                           ; 1 bytes @ 0x9
  5041                           
  5042  0029                     I2C2_MasterRead@pdata:	
  5043                           ; 2 bytes @ 0x9
  5044                           
  5045  0029                     RF_WriteRegisterData@buf:	
  5046                           ; 2 bytes @ 0x9
  5047                           
  5048  0029                     ___awtoft@c:	
  5049                           ; 2 bytes @ 0x9
  5050                           
  5051  0029                     ___lwtoft@c:	
  5052                           ; 2 bytes @ 0x9
  5053                           
  5054  0029                     ___lmul@product:	
  5055                           ; 2 bytes @ 0x9
  5056                           
  5057  0029                     ___altoft@c:	
  5058                           ; 4 bytes @ 0x9
  5059                           
  5060                           
  5061                           ; 4 bytes @ 0x9
  5062  0029                     	ds	1
  5063  002A                     ?_RF_ReadRegisterData:	
  5064  002A                     RF_ReadRegisterData@buf:	
  5065                           ; 1 bytes @ 0xA
  5066                           
  5067  002A                     ___aldiv@counter:	
  5068                           ; 1 bytes @ 0xA
  5069                           
  5070  002A                     ___lldiv@quotient:	
  5071                           ; 1 bytes @ 0xA
  5072                           
  5073                           
  5074                           ; 4 bytes @ 0xA
  5075  002A                     	ds	1
  5076  002B                     I2C2_MasterWrite@pflag:	
  5077  002B                     I2C2_MasterRead@length:	
  5078                           ; 1 bytes @ 0xB
  5079                           
  5080  002B                     RF_ReadRegisterData@bufSize:	
  5081                           ; 1 bytes @ 0xB
  5082                           
  5083  002B                     RF_WriteRegisterData@bufSize:	
  5084                           ; 1 bytes @ 0xB
  5085                           
  5086  002B                     ___aldiv@sign:	
  5087                           ; 1 bytes @ 0xB
  5088                           
  5089                           
  5090                           ; 1 bytes @ 0xB
  5091  002B                     	ds	1
  5092  002C                     ??_I2C2_MasterWrite:	
  5093  002C                     ??_RF_ReadRegisterData:	
  5094                           ; 1 bytes @ 0xC
  5095                           
  5096  002C                     ??_RF_WriteRegisterData:	
  5097                           ; 1 bytes @ 0xC
  5098                           
  5099  002C                     ??___awtoft:	
  5100                           ; 1 bytes @ 0xC
  5101                           
  5102  002C                     ??___lwtoft:	
  5103                           ; 1 bytes @ 0xC
  5104                           
  5105  002C                     I2C2_MasterRead@address:	
  5106                           ; 1 bytes @ 0xC
  5107                           
  5108  002C                     ___aldiv@quotient:	
  5109                           ; 2 bytes @ 0xC
  5110                           
  5111                           
  5112                           ; 4 bytes @ 0xC
  5113  002C                     	ds	1
  5114  002D                     ??___altoft:	
  5115  002D                     RF_WriteRegisterData@reg:	
  5116                           ; 1 bytes @ 0xD
  5117                           
  5118                           
  5119                           ; 1 bytes @ 0xD
  5120  002D                     	ds	1
  5121  002E                     ??_Wireless_init:	
  5122  002E                     ?_RF_TxPayload:	
  5123                           ; 1 bytes @ 0xE
  5124                           
  5125  002E                     I2C2_MasterWrite@pdata:	
  5126                           ; 1 bytes @ 0xE
  5127                           
  5128  002E                     I2C2_MasterRead@pflag:	
  5129                           ; 1 bytes @ 0xE
  5130                           
  5131  002E                     RF_ReadRegisterData@reg:	
  5132                           ; 1 bytes @ 0xE
  5133                           
  5134  002E                     RF_TxPayload@payloadSize:	
  5135                           ; 1 bytes @ 0xE
  5136                           
  5137  002E                     ___awtoft@sign:	
  5138                           ; 1 bytes @ 0xE
  5139                           
  5140  002E                     ___lldiv@counter:	
  5141                           ; 1 bytes @ 0xE
  5142                           
  5143                           
  5144                           ; 1 bytes @ 0xE
  5145  002E                     	ds	1
  5146  002F                     ??_Wireless_wake:	
  5147  002F                     ??_Wireless_sleep:	
  5148                           ; 1 bytes @ 0xF
  5149                           
  5150  002F                     ?_I2C_ByteWrite:	
  5151                           ; 1 bytes @ 0xF
  5152                           
  5153  002F                     ??_I2C2_MasterRead:	
  5154                           ; 1 bytes @ 0xF
  5155                           
  5156  002F                     ??_RF_TxPayload:	
  5157                           ; 1 bytes @ 0xF
  5158                           
  5159  002F                     ?_RF_RxPayload:	
  5160                           ; 1 bytes @ 0xF
  5161                           
  5162  002F                     RF_RxPayload@payloadSize:	
  5163                           ; 1 bytes @ 0xF
  5164                           
  5165  002F                     I2C_ByteWrite@pBuffer:	
  5166                           ; 1 bytes @ 0xF
  5167                           
  5168  002F                     ___altoft@exp:	
  5169                           ; 1 bytes @ 0xF
  5170                           
  5171                           
  5172                           ; 1 bytes @ 0xF
  5173  002F                     	ds	1
  5174  0030                     ??_RF_RxPayload:	
  5175  0030                     RF_TxPayload@payload:	
  5176                           ; 1 bytes @ 0x10
  5177                           
  5178  0030                     Wireless_sleep@reg:	
  5179                           ; 1 bytes @ 0x10
  5180                           
  5181  0030                     Wireless_wake@reg:	
  5182                           ; 1 bytes @ 0x10
  5183                           
  5184  0030                     I2C_ByteWrite@WriteAddr:	
  5185                           ; 1 bytes @ 0x10
  5186                           
  5187  0030                     ___altoft@sign:	
  5188                           ; 1 bytes @ 0x10
  5189                           
  5190                           
  5191                           ; 1 bytes @ 0x10
  5192  0030                     	ds	1
  5193  0031                     ??_I2C_ByteWrite:	
  5194  0031                     ?_I2C_BufferRead:	
  5195                           ; 1 bytes @ 0x11
  5196                           
  5197  0031                     ??_Wireless_sendData:	
  5198                           ; 1 bytes @ 0x11
  5199                           
  5200  0031                     ?___ftdiv:	
  5201                           ; 1 bytes @ 0x11
  5202                           
  5203  0031                     I2C_BufferRead@pBuffer:	
  5204                           ; 3 bytes @ 0x11
  5205                           
  5206  0031                     ___ftdiv@f2:	
  5207                           ; 2 bytes @ 0x11
  5208                           
  5209                           
  5210                           ; 3 bytes @ 0x11
  5211  0031                     	ds	1
  5212  0032                     RF_RxPayload@payload:	
  5213  0032                     Wireless_sendData@payload:	
  5214                           ; 1 bytes @ 0x12
  5215                           
  5216                           
  5217                           ; 1 bytes @ 0x12
  5218  0032                     	ds	1
  5219  0033                     ??_Wireless_checkDataReceived:	
  5220  0033                     I2C_BufferRead@ReadAddr:	
  5221                           ; 1 bytes @ 0x13
  5222                           
  5223                           
  5224                           ; 1 bytes @ 0x13
  5225  0033                     	ds	1
  5226  0034                     I2C_BufferRead@NumByteToRead:	
  5227  0034                     ___ftdiv@f1:	
  5228                           ; 2 bytes @ 0x14
  5229                           
  5230                           
  5231                           ; 3 bytes @ 0x14
  5232  0034                     	ds	1
  5233  0035                     I2C_ByteWrite@slaveAddr:	
  5234                           
  5235                           ; 1 bytes @ 0x15
  5236  0035                     	ds	1
  5237  0036                     ??_I2C_BufferRead:	
  5238  0036                     I2C_ByteWrite@data:	
  5239                           ; 1 bytes @ 0x16
  5240                           
  5241                           
  5242                           ; 2 bytes @ 0x16
  5243  0036                     	ds	1
  5244  0037                     ??___ftdiv:	
  5245  0037                     Wireless_checkDataReceived@data:	
  5246                           ; 1 bytes @ 0x17
  5247                           
  5248                           
  5249                           ; 4 bytes @ 0x17
  5250  0037                     	ds	1
  5251  0038                     I2C_ByteWrite@status:	
  5252                           
  5253                           ; 1 bytes @ 0x18
  5254  0038                     	ds	2
  5255  003A                     I2C_BufferRead@slaveAddr:	
  5256                           
  5257                           ; 1 bytes @ 0x1A
  5258  003A                     	ds	1
  5259  003B                     Wireless_checkDataReceived@channel:	
  5260  003B                     I2C_BufferRead@status:	
  5261                           ; 1 bytes @ 0x1B
  5262                           
  5263  003B                     ___ftdiv@cntr:	
  5264                           ; 1 bytes @ 0x1B
  5265                           
  5266                           
  5267                           ; 1 bytes @ 0x1B
  5268  003B                     	ds	1
  5269  003C                     ??_BMP_init:	
  5270  003C                     ?_HMC5883L_I2C_BufferRead:	
  5271                           ; 1 bytes @ 0x1C
  5272                           
  5273  003C                     HMC5883L_I2C_BufferRead@pBuffer:	
  5274                           ; 1 bytes @ 0x1C
  5275                           
  5276  003C                     ___ftdiv@f3:	
  5277                           ; 2 bytes @ 0x1C
  5278                           
  5279                           
  5280                           ; 3 bytes @ 0x1C
  5281  003C                     	ds	2
  5282  003E                     HMC5883L_I2C_BufferRead@ReadAddr:	
  5283                           
  5284                           ; 1 bytes @ 0x1E
  5285  003E                     	ds	1
  5286  003F                     BMP_init@t:	
  5287  003F                     ___ftdiv@exp:	
  5288                           ; 1 bytes @ 0x1F
  5289                           
  5290  003F                     HMC5883L_I2C_BufferRead@NumByteToRead:	
  5291                           ; 1 bytes @ 0x1F
  5292                           
  5293                           
  5294                           ; 2 bytes @ 0x1F
  5295  003F                     	ds	1
  5296  0040                     ___ftdiv@sign:	
  5297                           
  5298                           ; 1 bytes @ 0x20
  5299  0040                     	ds	1
  5300  0041                     ??_HMC5883L_I2C_BufferRead:	
  5301  0041                     ?_Sensor_getSupplyVoltage:	
  5302                           ; 1 bytes @ 0x21
  5303                           
  5304  0041                     ?___ftneg:	
  5305                           ; 3 bytes @ 0x21
  5306                           
  5307  0041                     ___ftneg@f1:	
  5308                           ; 3 bytes @ 0x21
  5309                           
  5310                           
  5311                           ; 3 bytes @ 0x21
  5312  0041                     	ds	1
  5313  0042                     HMC5883L_I2C_BufferRead@slaveAddr:	
  5314                           
  5315                           ; 1 bytes @ 0x22
  5316  0042                     	ds	1
  5317  0043                     ?_HMC5883L_ReadBits:	
  5318  0043                     HMC5883L_ReadBits@regAddr:	
  5319                           ; 1 bytes @ 0x23
  5320                           
  5321                           
  5322                           ; 1 bytes @ 0x23
  5323  0043                     	ds	1
  5324  0044                     ??_Sensor_getSupplyVoltage:	
  5325  0044                     ??___ftneg:	
  5326                           ; 1 bytes @ 0x24
  5327                           
  5328  0044                     ?___ftadd:	
  5329                           ; 1 bytes @ 0x24
  5330                           
  5331  0044                     HMC5883L_ReadBits@bitStart:	
  5332                           ; 3 bytes @ 0x24
  5333                           
  5334  0044                     Sensor_getSupplyVoltage@voltage:	
  5335                           ; 1 bytes @ 0x24
  5336                           
  5337  0044                     ___ftadd@f1:	
  5338                           ; 3 bytes @ 0x24
  5339                           
  5340                           
  5341                           ; 3 bytes @ 0x24
  5342  0044                     	ds	1
  5343  0045                     HMC5883L_ReadBits@length:	
  5344                           
  5345                           ; 1 bytes @ 0x25
  5346  0045                     	ds	1
  5347  0046                     HMC5883L_ReadBits@data:	
  5348                           
  5349                           ; 1 bytes @ 0x26
  5350  0046                     	ds	1
  5351  0047                     ??_HMC5883L_ReadBits:	
  5352  0047                     Sensor_getSupplyVoltage@res:	
  5353                           ; 1 bytes @ 0x27
  5354                           
  5355  0047                     ___ftadd@f2:	
  5356                           ; 2 bytes @ 0x27
  5357                           
  5358                           
  5359                           ; 3 bytes @ 0x27
  5360  0047                     	ds	3
  5361  004A                     ??___ftadd:	
  5362  004A                     HMC5883L_ReadBits@slaveAddr:	
  5363                           ; 1 bytes @ 0x2A
  5364                           
  5365                           
  5366                           ; 1 bytes @ 0x2A
  5367  004A                     	ds	1
  5368  004B                     HMC5883L_ReadBits@mask:	
  5369                           
  5370                           ; 1 bytes @ 0x2B
  5371  004B                     	ds	1
  5372  004C                     HMC5883L_ReadBits@tmp:	
  5373                           
  5374                           ; 1 bytes @ 0x2C
  5375  004C                     	ds	2
  5376  004E                     ___ftadd@sign:	
  5377                           
  5378                           ; 1 bytes @ 0x2E
  5379  004E                     	ds	1
  5380  004F                     ___ftadd@exp2:	
  5381                           
  5382                           ; 1 bytes @ 0x2F
  5383  004F                     	ds	1
  5384  0050                     ___ftadd@exp1:	
  5385                           
  5386                           ; 1 bytes @ 0x30
  5387  0050                     	ds	1
  5388  0051                     ?___ftmul:	
  5389  0051                     ___ftmul@f1:	
  5390                           ; 3 bytes @ 0x31
  5391                           
  5392                           
  5393                           ; 3 bytes @ 0x31
  5394  0051                     	ds	3
  5395  0054                     ___ftmul@f2:	
  5396                           
  5397                           ; 3 bytes @ 0x34
  5398  0054                     	ds	3
  5399  0057                     ??___ftmul:	
  5400                           
  5401                           ; 1 bytes @ 0x37
  5402  0057                     	ds	4
  5403  005B                     ___ftmul@exp:	
  5404                           
  5405                           ; 1 bytes @ 0x3B
  5406  005B                     	ds	1
  5407  005C                     ___ftmul@f3_as_product:	
  5408                           
  5409                           ; 3 bytes @ 0x3C
  5410  005C                     	ds	3
  5411  005F                     ___ftmul@cntr:	
  5412                           
  5413                           ; 1 bytes @ 0x3F
  5414  005F                     	ds	1
  5415  0060                     ___ftmul@sign:	
  5416                           
  5417                           ; 1 bytes @ 0x40
  5418  0060                     	ds	1
  5419  0061                     ?___fttol:	
  5420  0061                     ___fttol@f1:	
  5421                           ; 4 bytes @ 0x41
  5422                           
  5423                           
  5424                           ; 3 bytes @ 0x41
  5425  0061                     	ds	4
  5426  0065                     ??___fttol:	
  5427                           
  5428                           ; 1 bytes @ 0x45
  5429  0065                     	ds	4
  5430  0069                     ___fttol@sign1:	
  5431                           
  5432                           ; 1 bytes @ 0x49
  5433  0069                     	ds	1
  5434  006A                     ___fttol@lval:	
  5435                           
  5436                           ; 4 bytes @ 0x4A
  5437  006A                     	ds	4
  5438  006E                     ___fttol@exp1:	
  5439                           
  5440                           ; 1 bytes @ 0x4E
  5441  006E                     	ds	1
  5442                           
  5443                           	psect	maintext
  5444  0346                     __pmaintext:	
  5445 ;;
  5446 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
  5447 ;;
  5448 ;; *************** function _main *****************
  5449 ;; Defined at:
  5450 ;;		line 58 in file "main.c"
  5451 ;; Parameters:    Size  Location     Type
  5452 ;;		None
  5453 ;; Auto vars:     Size  Location     Type
  5454 ;;  doorOpenTime    4    5[BANK3 ] unsigned long 
  5455 ;;  doorClosedUp    4    0[BANK3 ] unsigned long 
  5456 ;;  doorStatus      1    9[BANK3 ] enum E3332
  5457 ;;  prevDoorStat    1    4[BANK3 ] enum E3332
  5458 ;; Return value:  Size  Location     Type
  5459 ;;                  1    wreg      void 
  5460 ;; Registers used:
  5461 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5462 ;; Tracked objects:
  5463 ;;		On entry : B1F/0
  5464 ;;		On exit  : 0/0
  5465 ;;		Unchanged: 0/0
  5466 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5467 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5468 ;;      Locals:         0       0       0       0      10       0       0       0       0       0       0       0       
      +0       0
  5469 ;;      Temps:          0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
  5470 ;;      Totals:         0       0       2       0      10       0       0       0       0       0       0       0       
      +0       0
  5471 ;;Total ram usage:       12 bytes
  5472 ;; Hardware stack levels required when called:   11
  5473 ;; This function calls:
  5474 ;;		_BMP_init
  5475 ;;		_BMP_readTemperature
  5476 ;;		_DOOR_init
  5477 ;;		_DOOR_resetPos
  5478 ;;		_DOOR_run
  5479 ;;		_SYSTEM_Initialize
  5480 ;;		_Sensor_peripheralSleep
  5481 ;;		_Wireless_init
  5482 ;;		_Wireless_packageData
  5483 ;;		_Wireless_sleep
  5484 ;;		_Wireless_wake
  5485 ;;		___lldiv
  5486 ;;		_setSleepTime
  5487 ;; This function is called by:
  5488 ;;		Startup code after reset
  5489 ;; This function uses a non-reentrant model
  5490 ;;
  5491                           
  5492                           
  5493                           ;psect for function _main
  5494  0346                     _main:	
  5495                           
  5496                           ;main.c: 60: DOOR doorStatus=DOOR_CLOSED,prevDoorStatus=DOOR_CLOSED;
  5497                           
  5498                           ;incstack = 0
  5499                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  5500  0346  0023               	movlb	3	; select bank3
  5501  0347  01C9               	clrf	main@doorStatus^(0+384)
  5502  0348  01C4               	clrf	main@prevDoorStatus^(0+384)
  5503                           
  5504                           ;main.c: 61: unsigned long doorClosedUpdateCounter=0;
  5505  0349  3000               	movlw	0
  5506  034A  00C3               	movwf	(main@doorClosedUpdateCounter+3)^(0+384)
  5507  034B  3000               	movlw	0
  5508  034C  00C2               	movwf	(main@doorClosedUpdateCounter+2)^(0+384)
  5509  034D  3000               	movlw	0
  5510  034E  00C1               	movwf	(main@doorClosedUpdateCounter+1)^(0+384)
  5511  034F  3000               	movlw	0
  5512  0350  00C0               	movwf	main@doorClosedUpdateCounter^(0+384)
  5513                           
  5514                           ;main.c: 62: unsigned long doorOpenTime=0;
  5515  0351  3000               	movlw	0
  5516  0352  00C8               	movwf	(main@doorOpenTime+3)^(0+384)
  5517  0353  3000               	movlw	0
  5518  0354  00C7               	movwf	(main@doorOpenTime+2)^(0+384)
  5519  0355  3000               	movlw	0
  5520  0356  00C6               	movwf	(main@doorOpenTime+1)^(0+384)
  5521  0357  3000               	movlw	0
  5522  0358  00C5               	movwf	main@doorOpenTime^(0+384)
  5523                           
  5524                           ;main.c: 65: SYSTEM_Initialize();
  5525  0359  3197  2739  3183   	fcall	_SYSTEM_Initialize
  5526                           
  5527                           ;main.c: 71: (INTCONbits.GIE = 1);
  5528  035C  178B               	bsf	11,7	;volatile
  5529                           
  5530                           ;main.c: 74: (INTCONbits.PEIE = 1);
  5531  035D  170B               	bsf	11,6	;volatile
  5532                           
  5533                           ;main.c: 81: do { WPUCbits.WPUC5 = 1; } while(0);
  5534  035E  0024               	movlb	4	; select bank4
  5535  035F  168E               	bsf	14,5	;volatile
  5536                           
  5537                           ;main.c: 82: _delay((unsigned long)((1000)*(8000000/4000.0)));
  5538  0360  300B               	movlw	11
  5539  0361  0021               	movlb	1	; select bank1
  5540  0362  00C6               	movwf	(??_main^(0+128)+1)
  5541  0363  3026               	movlw	38
  5542  0364  00C5               	movwf	??_main^(0+128)
  5543  0365  305D               	movlw	93
  5544  0366                     u6507:	
  5545  0366  0B89               	decfsz	9,f
  5546  0367  2B66               	goto	u6507
  5547  0368  0BC5               	decfsz	??_main^(0+128),f
  5548  0369  2B66               	goto	u6507
  5549  036A  0BC6               	decfsz	(??_main^(0+128)+1),f
  5550  036B  2B66               	goto	u6507
  5551  036C  3200               	nop2
  5552                           
  5553                           ;main.c: 83: Sensor_peripheralSleep();
  5554  036D  3194  24E2  3183   	fcall	_Sensor_peripheralSleep
  5555                           
  5556                           ;main.c: 84: Wireless_init();
  5557  0370  318D  251F  3183   	fcall	_Wireless_init
  5558                           
  5559                           ;main.c: 85: BMP_init();
  5560  0373  318C  2431  3183   	fcall	_BMP_init
  5561                           
  5562                           ;main.c: 90: setSleepTime(5000/1000);
  5563  0376  3005               	movlw	5
  5564  0377  0020               	movlb	0	; select bank0
  5565  0378  00A1               	movwf	setSleepTime@timeSec
  5566  0379  3000               	movlw	0
  5567  037A  00A2               	movwf	setSleepTime@timeSec+1
  5568  037B  3196  2633  3183   	fcall	_setSleepTime
  5569                           
  5570                           ;main.c: 92: DOOR_init();
  5571  037E  3195  2543  3183   	fcall	_DOOR_init
  5572                           
  5573                           ;main.c: 93: do { LATCbits.LATC6 = 1; } while(0);
  5574  0381  0022               	movlb	2	; select bank2
  5575  0382  170E               	bsf	14,6	;volatile
  5576                           
  5577                           ;main.c: 94: _delay((unsigned long)((500)*(8000000/4000.0)));
  5578  0383  3006               	movlw	6
  5579  0384  0021               	movlb	1	; select bank1
  5580  0385  00C6               	movwf	(??_main^(0+128)+1)
  5581  0386  3013               	movlw	19
  5582  0387  00C5               	movwf	??_main^(0+128)
  5583  0388  30AD               	movlw	173
  5584  0389                     u6517:	
  5585  0389  0B89               	decfsz	9,f
  5586  038A  2B89               	goto	u6517
  5587  038B  0BC5               	decfsz	??_main^(0+128),f
  5588  038C  2B89               	goto	u6517
  5589  038D  0BC6               	decfsz	(??_main^(0+128)+1),f
  5590  038E  2B89               	goto	u6517
  5591  038F  3200               	nop2
  5592                           
  5593                           ;main.c: 95: do { LATCbits.LATC6 = 0; } while(0);
  5594  0390  0022               	movlb	2	; select bank2
  5595  0391  130E               	bcf	14,6	;volatile
  5596  0392                     l6282:	
  5597                           ;main.c: 97: while (1)
  5598                           
  5599                           
  5600                           ;main.c: 98: {
  5601                           ;main.c: 99: if(PORTCbits.RC5==0)
  5602  0392  0020               	movlb	0	; select bank0
  5603  0393  1A8E               	btfsc	14,5	;volatile
  5604  0394  2BAF               	goto	l6292
  5605                           
  5606                           ;main.c: 100: {
  5607                           ;main.c: 101: doorStatus=DOOR_resetPos();
  5608  0395  3194  24DA  3183   	fcall	_DOOR_resetPos
  5609  0398  0021               	movlb	1	; select bank1
  5610  0399  00C5               	movwf	??_main^(0+128)
  5611  039A  0845               	movf	??_main^(0+128),w
  5612  039B  0023               	movlb	3	; select bank3
  5613  039C  00C9               	movwf	main@doorStatus^(0+384)
  5614                           
  5615                           ;main.c: 102: do { LATCbits.LATC6 = 1; } while(0);
  5616  039D  0022               	movlb	2	; select bank2
  5617  039E  170E               	bsf	14,6	;volatile
  5618                           
  5619                           ;main.c: 103: _delay((unsigned long)((500)*(8000000/4000.0)));
  5620  039F  3006               	movlw	6
  5621  03A0  0021               	movlb	1	; select bank1
  5622  03A1  00C6               	movwf	(??_main^(0+128)+1)
  5623  03A2  3013               	movlw	19
  5624  03A3  00C5               	movwf	??_main^(0+128)
  5625  03A4  30AD               	movlw	173
  5626  03A5                     u6527:	
  5627  03A5  0B89               	decfsz	9,f
  5628  03A6  2BA5               	goto	u6527
  5629  03A7  0BC5               	decfsz	??_main^(0+128),f
  5630  03A8  2BA5               	goto	u6527
  5631  03A9  0BC6               	decfsz	(??_main^(0+128)+1),f
  5632  03AA  2BA5               	goto	u6527
  5633  03AB  3200               	nop2
  5634                           
  5635                           ;main.c: 104: do { LATCbits.LATC6 = 0; } while(0);
  5636  03AC  0022               	movlb	2	; select bank2
  5637  03AD  130E               	bcf	14,6	;volatile
  5638                           
  5639                           ;main.c: 105: }
  5640  03AE  2BB7               	goto	l6294
  5641  03AF                     l6292:	
  5642                           
  5643                           ;main.c: 106: else
  5644                           ;main.c: 107: doorStatus=DOOR_run();
  5645  03AF  3194  24C5  3183   	fcall	_DOOR_run
  5646  03B2  0021               	movlb	1	; select bank1
  5647  03B3  00C5               	movwf	??_main^(0+128)
  5648  03B4  0845               	movf	??_main^(0+128),w
  5649  03B5  0023               	movlb	3	; select bank3
  5650  03B6  00C9               	movwf	main@doorStatus^(0+384)
  5651  03B7                     l6294:	
  5652                           
  5653                           ;main.c: 110: if((doorStatus!=prevDoorStatus && doorStatus!=DOOR_ERROR) || doorClosedUpd
      +                          ateCounter>=sensorUpdatePeriod)
  5654  03B7  0023               	movlb	3	; select bank3
  5655  03B8  0849               	movf	main@doorStatus^(0+384),w
  5656  03B9  0644               	xorwf	main@prevDoorStatus^(0+384),w
  5657  03BA  1903               	skipnz
  5658  03BB  2BC0               	goto	l6298
  5659  03BC  3002               	movlw	2
  5660  03BD  0649               	xorwf	main@doorStatus^(0+384),w
  5661  03BE  1D03               	btfss	3,2
  5662  03BF  2BD8               	goto	l6300
  5663  03C0                     l6298:	
  5664  03C0  0022               	movlb	2	; select bank2
  5665  03C1  086E               	movf	(_sensorUpdatePeriod+3)^(0+256),w
  5666  03C2  0023               	movlb	3	; select bank3
  5667  03C3  0243               	subwf	(main@doorClosedUpdateCounter+3)^(0+384),w
  5668  03C4  1D03               	skipz
  5669  03C5  2BD6               	goto	u6195
  5670  03C6  0022               	movlb	2	; select bank2
  5671  03C7  086D               	movf	(_sensorUpdatePeriod+2)^(0+256),w
  5672  03C8  0023               	movlb	3	; select bank3
  5673  03C9  0242               	subwf	(main@doorClosedUpdateCounter+2)^(0+384),w
  5674  03CA  1D03               	skipz
  5675  03CB  2BD6               	goto	u6195
  5676  03CC  0022               	movlb	2	; select bank2
  5677  03CD  086C               	movf	(_sensorUpdatePeriod+1)^(0+256),w
  5678  03CE  0023               	movlb	3	; select bank3
  5679  03CF  0241               	subwf	(main@doorClosedUpdateCounter+1)^(0+384),w
  5680  03D0  1D03               	skipz
  5681  03D1  2BD6               	goto	u6195
  5682  03D2  0022               	movlb	2	; select bank2
  5683  03D3  086B               	movf	_sensorUpdatePeriod^(0+256),w
  5684  03D4  0023               	movlb	3	; select bank3
  5685  03D5  0240               	subwf	main@doorClosedUpdateCounter^(0+384),w
  5686  03D6                     u6195:	
  5687  03D6  1C03               	skipc
  5688  03D7  2C33               	goto	l6318
  5689  03D8                     l6300:	
  5690                           
  5691                           ;main.c: 111: {
  5692                           ;main.c: 112: Wireless_wake();
  5693  03D8  3197  27E1  3183   	fcall	_Wireless_wake
  5694                           
  5695                           ;main.c: 113: Wireless_packageData(doorStatus,doorOpenTime/1000,BMP_readTemperature());
  5696  03DB  3000               	movlw	0
  5697  03DC  0020               	movlb	0	; select bank0
  5698  03DD  00A4               	movwf	___lldiv@divisor+3
  5699  03DE  3000               	movlw	0
  5700  03DF  00A3               	movwf	___lldiv@divisor+2
  5701  03E0  3003               	movlw	3
  5702  03E1  00A2               	movwf	___lldiv@divisor+1
  5703  03E2  30E8               	movlw	232
  5704  03E3  00A1               	movwf	___lldiv@divisor
  5705  03E4  0023               	movlb	3	; select bank3
  5706  03E5  0848               	movf	(main@doorOpenTime+3)^(0+384),w
  5707  03E6  0020               	movlb	0	; select bank0
  5708  03E7  00A8               	movwf	___lldiv@dividend+3
  5709  03E8  0023               	movlb	3	; select bank3
  5710  03E9  0847               	movf	(main@doorOpenTime+2)^(0+384),w
  5711  03EA  0020               	movlb	0	; select bank0
  5712  03EB  00A7               	movwf	___lldiv@dividend+2
  5713  03EC  0023               	movlb	3	; select bank3
  5714  03ED  0846               	movf	(main@doorOpenTime+1)^(0+384),w
  5715  03EE  0020               	movlb	0	; select bank0
  5716  03EF  00A6               	movwf	___lldiv@dividend+1
  5717  03F0  0023               	movlb	3	; select bank3
  5718  03F1  0845               	movf	main@doorOpenTime^(0+384),w
  5719  03F2  0020               	movlb	0	; select bank0
  5720  03F3  00A5               	movwf	___lldiv@dividend
  5721  03F4  318B  2379  3183   	fcall	___lldiv
  5722  03F7  0020               	movlb	0	; select bank0
  5723  03F8  0821               	movf	?___lldiv,w
  5724  03F9  0021               	movlb	1	; select bank1
  5725  03FA  00C5               	movwf	??_main^(0+128)
  5726  03FB  0845               	movf	??_main^(0+128),w
  5727  03FC  00B4               	movwf	Wireless_packageData@openTime^(0+128)
  5728  03FD  3180  2077  3183   	fcall	_BMP_readTemperature
  5729  0400  0021               	movlb	1	; select bank1
  5730  0401  0820               	movf	?_BMP_readTemperature^(0+128),w
  5731  0402  00B5               	movwf	Wireless_packageData@tempC^(0+128)
  5732  0403  0821               	movf	(?_BMP_readTemperature+1)^(0+128),w
  5733  0404  00B6               	movwf	(Wireless_packageData@tempC+1)^(0+128)
  5734  0405  0822               	movf	(?_BMP_readTemperature+2)^(0+128),w
  5735  0406  00B7               	movwf	(Wireless_packageData@tempC+2)^(0+128)
  5736  0407  0023               	movlb	3	; select bank3
  5737  0408  0849               	movf	main@doorStatus^(0+384),w
  5738  0409  3186  26E0  3183   	fcall	_Wireless_packageData
  5739                           
  5740                           ;main.c: 114: Wireless_sleep();
  5741  040C  3196  269E  3183   	fcall	_Wireless_sleep
  5742                           
  5743                           ;main.c: 115: doorClosedUpdateCounter=0;
  5744  040F  3000               	movlw	0
  5745  0410  0023               	movlb	3	; select bank3
  5746  0411  00C3               	movwf	(main@doorClosedUpdateCounter+3)^(0+384)
  5747  0412  3000               	movlw	0
  5748  0413  00C2               	movwf	(main@doorClosedUpdateCounter+2)^(0+384)
  5749  0414  3000               	movlw	0
  5750  0415  00C1               	movwf	(main@doorClosedUpdateCounter+1)^(0+384)
  5751  0416  3000               	movlw	0
  5752  0417  00C0               	movwf	main@doorClosedUpdateCounter^(0+384)
  5753                           
  5754                           ;main.c: 116: doorOpenTime=0;
  5755  0418  3000               	movlw	0
  5756  0419  00C8               	movwf	(main@doorOpenTime+3)^(0+384)
  5757  041A  3000               	movlw	0
  5758  041B  00C7               	movwf	(main@doorOpenTime+2)^(0+384)
  5759  041C  3000               	movlw	0
  5760  041D  00C6               	movwf	(main@doorOpenTime+1)^(0+384)
  5761  041E  3000               	movlw	0
  5762  041F  00C5               	movwf	main@doorOpenTime^(0+384)
  5763                           
  5764                           ;main.c: 117: if(doorStatus==DOOR_OPEN && prevDoorStatus==DOOR_CLOSED)
  5765  0420  0349               	decf	main@doorStatus^(0+384),w
  5766  0421  1D03               	btfss	3,2
  5767  0422  2C33               	goto	l6318
  5768  0423  0844               	movf	main@prevDoorStatus^(0+384),w
  5769  0424  1D03               	btfss	3,2
  5770  0425  2C33               	goto	l6318
  5771                           
  5772                           ;main.c: 118: {
  5773                           ;main.c: 119: do { LATCbits.LATC6 = 1; } while(0);
  5774  0426  0022               	movlb	2	; select bank2
  5775  0427  170E               	bsf	14,6	;volatile
  5776                           
  5777                           ;main.c: 120: _delay((unsigned long)((50)*(8000000/4000.0)));
  5778  0428  3082               	movlw	130
  5779  0429  0021               	movlb	1	; select bank1
  5780  042A  00C5               	movwf	??_main^(0+128)
  5781  042B  30DD               	movlw	221
  5782  042C                     u6537:	
  5783  042C  0B89               	decfsz	9,f
  5784  042D  2C2C               	goto	u6537
  5785  042E  0BC5               	decfsz	??_main^(0+128),f
  5786  042F  2C2C               	goto	u6537
  5787  0430  3200               	nop2
  5788                           
  5789                           ;main.c: 121: do { LATCbits.LATC6 = 0; } while(0);
  5790  0431  0022               	movlb	2	; select bank2
  5791  0432  130E               	bcf	14,6	;volatile
  5792  0433                     l6318:	
  5793                           
  5794                           ;main.c: 122: }
  5795                           ;main.c: 123: }
  5796                           ;main.c: 125: if(doorStatus==DOOR_OPEN)
  5797  0433  0023               	movlb	3	; select bank3
  5798  0434  0349               	decf	main@doorStatus^(0+384),w
  5799  0435  1D03               	btfss	3,2
  5800  0436  2C8D               	goto	l6334
  5801                           
  5802                           ;main.c: 126: {
  5803                           ;main.c: 127: if(doorOpenTime>=60000)
  5804  0437  0848               	movf	(main@doorOpenTime+3)^(0+384),w
  5805  0438  1D03               	btfss	3,2
  5806  0439  2C43               	goto	l6322
  5807  043A  0847               	movf	(main@doorOpenTime+2)^(0+384),w
  5808  043B  1D03               	btfss	3,2
  5809  043C  2C43               	goto	l6322
  5810  043D  3060               	movlw	96
  5811  043E  0245               	subwf	main@doorOpenTime^(0+384),w
  5812  043F  30EA               	movlw	234
  5813  0440  3B46               	subwfb	(main@doorOpenTime+1)^(0+384),w
  5814  0441  1C03               	btfss	3,0
  5815  0442  2C84               	goto	l6332
  5816  0443                     l6322:	
  5817                           
  5818                           ;main.c: 128: {
  5819                           ;main.c: 129: Wireless_wake();
  5820  0443  3197  27E1  3183   	fcall	_Wireless_wake
  5821                           
  5822                           ;main.c: 130: Wireless_packageData(doorStatus,doorOpenTime/1000,BMP_readTemperature());
  5823  0446  3000               	movlw	0
  5824  0447  0020               	movlb	0	; select bank0
  5825  0448  00A4               	movwf	___lldiv@divisor+3
  5826  0449  3000               	movlw	0
  5827  044A  00A3               	movwf	___lldiv@divisor+2
  5828  044B  3003               	movlw	3
  5829  044C  00A2               	movwf	___lldiv@divisor+1
  5830  044D  30E8               	movlw	232
  5831  044E  00A1               	movwf	___lldiv@divisor
  5832  044F  0023               	movlb	3	; select bank3
  5833  0450  0848               	movf	(main@doorOpenTime+3)^(0+384),w
  5834  0451  0020               	movlb	0	; select bank0
  5835  0452  00A8               	movwf	___lldiv@dividend+3
  5836  0453  0023               	movlb	3	; select bank3
  5837  0454  0847               	movf	(main@doorOpenTime+2)^(0+384),w
  5838  0455  0020               	movlb	0	; select bank0
  5839  0456  00A7               	movwf	___lldiv@dividend+2
  5840  0457  0023               	movlb	3	; select bank3
  5841  0458  0846               	movf	(main@doorOpenTime+1)^(0+384),w
  5842  0459  0020               	movlb	0	; select bank0
  5843  045A  00A6               	movwf	___lldiv@dividend+1
  5844  045B  0023               	movlb	3	; select bank3
  5845  045C  0845               	movf	main@doorOpenTime^(0+384),w
  5846  045D  0020               	movlb	0	; select bank0
  5847  045E  00A5               	movwf	___lldiv@dividend
  5848  045F  318B  2379  3183   	fcall	___lldiv
  5849  0462  0020               	movlb	0	; select bank0
  5850  0463  0821               	movf	?___lldiv,w
  5851  0464  0021               	movlb	1	; select bank1
  5852  0465  00C5               	movwf	??_main^(0+128)
  5853  0466  0845               	movf	??_main^(0+128),w
  5854  0467  00B4               	movwf	Wireless_packageData@openTime^(0+128)
  5855  0468  3180  2077  3183   	fcall	_BMP_readTemperature
  5856  046B  0021               	movlb	1	; select bank1
  5857  046C  0820               	movf	?_BMP_readTemperature^(0+128),w
  5858  046D  00B5               	movwf	Wireless_packageData@tempC^(0+128)
  5859  046E  0821               	movf	(?_BMP_readTemperature+1)^(0+128),w
  5860  046F  00B6               	movwf	(Wireless_packageData@tempC+1)^(0+128)
  5861  0470  0822               	movf	(?_BMP_readTemperature+2)^(0+128),w
  5862  0471  00B7               	movwf	(Wireless_packageData@tempC+2)^(0+128)
  5863  0472  0023               	movlb	3	; select bank3
  5864  0473  0849               	movf	main@doorStatus^(0+384),w
  5865  0474  3186  26E0  3183   	fcall	_Wireless_packageData
  5866                           
  5867                           ;main.c: 131: Wireless_sleep();
  5868  0477  3196  269E  3183   	fcall	_Wireless_sleep
  5869                           
  5870                           ;main.c: 132: doorClosedUpdateCounter=0;
  5871  047A  3000               	movlw	0
  5872  047B  0023               	movlb	3	; select bank3
  5873  047C  00C3               	movwf	(main@doorClosedUpdateCounter+3)^(0+384)
  5874  047D  3000               	movlw	0
  5875  047E  00C2               	movwf	(main@doorClosedUpdateCounter+2)^(0+384)
  5876  047F  3000               	movlw	0
  5877  0480  00C1               	movwf	(main@doorClosedUpdateCounter+1)^(0+384)
  5878  0481  3000               	movlw	0
  5879  0482  00C0               	movwf	main@doorClosedUpdateCounter^(0+384)
  5880  0483  2C8D               	goto	l6334
  5881  0484                     l6332:	
  5882                           ;main.c: 134: }
  5883                           
  5884                           ;main.c: 133: doorOpenTime=0;
  5885                           
  5886                           
  5887                           ;main.c: 135: else
  5888                           ;main.c: 136: doorOpenTime+=5000;
  5889  0484  3088               	movlw	136
  5890  0485  07C5               	addwf	main@doorOpenTime^(0+384),f
  5891  0486  3013               	movlw	19
  5892  0487  3DC6               	addwfc	(main@doorOpenTime+1)^(0+384),f
  5893  0488  3000               	movlw	0
  5894  0489  3DC7               	addwfc	(main@doorOpenTime+2)^(0+384),f
  5895  048A  3000               	movlw	0
  5896  048B  3DC8               	addwfc	(main@doorOpenTime+3)^(0+384),f
  5897                           
  5898                           ;main.c: 138: }
  5899  048C  2C95               	goto	l618
  5900  048D                     l6334:	
  5901                           
  5902                           ;main.c: 139: else
  5903                           ;main.c: 140: {
  5904                           ;main.c: 142: doorOpenTime=0;
  5905  048D  3000               	movlw	0
  5906  048E  00C8               	movwf	(main@doorOpenTime+3)^(0+384)
  5907  048F  3000               	movlw	0
  5908  0490  00C7               	movwf	(main@doorOpenTime+2)^(0+384)
  5909  0491  3000               	movlw	0
  5910  0492  00C6               	movwf	(main@doorOpenTime+1)^(0+384)
  5911  0493  3000               	movlw	0
  5912  0494  00C5               	movwf	main@doorOpenTime^(0+384)
  5913  0495                     l618:	
  5914                           
  5915                           ;main.c: 143: }
  5916                           ;main.c: 145: prevDoorStatus=doorStatus;
  5917  0495  0849               	movf	main@doorStatus^(0+384),w
  5918  0496  0021               	movlb	1	; select bank1
  5919  0497  00C5               	movwf	??_main^(0+128)
  5920  0498  0845               	movf	??_main^(0+128),w
  5921  0499  0023               	movlb	3	; select bank3
  5922  049A  00C4               	movwf	main@prevDoorStatus^(0+384)
  5923                           
  5924                           ;main.c: 146: doorClosedUpdateCounter+=5000;
  5925  049B  3088               	movlw	136
  5926  049C  07C0               	addwf	main@doorClosedUpdateCounter^(0+384),f
  5927  049D  3013               	movlw	19
  5928  049E  3DC1               	addwfc	(main@doorClosedUpdateCounter+1)^(0+384),f
  5929  049F  3000               	movlw	0
  5930  04A0  3DC2               	addwfc	(main@doorClosedUpdateCounter+2)^(0+384),f
  5931  04A1  3000               	movlw	0
  5932  04A2  3DC3               	addwfc	(main@doorClosedUpdateCounter+3)^(0+384),f
  5933  04A3  0063               	sleep	;# 
  5934  04A4  2B92               	goto	l6282
  5935  04A5                     __end_of_main:	
  5936                           
  5937                           	psect	text1
  5938  1633                     __ptext1:	
  5939 ;; *************** function _setSleepTime *****************
  5940 ;; Defined at:
  5941 ;;		line 154 in file "main.c"
  5942 ;; Parameters:    Size  Location     Type
  5943 ;;  timeSec         2    1[BANK0 ] unsigned short 
  5944 ;; Auto vars:     Size  Location     Type
  5945 ;;		None
  5946 ;; Return value:  Size  Location     Type
  5947 ;;                  1    wreg      void 
  5948 ;; Registers used:
  5949 ;;		wreg, status,2, status,0
  5950 ;; Tracked objects:
  5951 ;;		On entry : 0/0
  5952 ;;		On exit  : 0/0
  5953 ;;		Unchanged: 0/0
  5954 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5955 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5956 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5957 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5958 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5959 ;;Total ram usage:        4 bytes
  5960 ;; Hardware stack levels used:    1
  5961 ;; Hardware stack levels required when called:    4
  5962 ;; This function calls:
  5963 ;;		Nothing
  5964 ;; This function is called by:
  5965 ;;		_main
  5966 ;; This function uses a non-reentrant model
  5967 ;;
  5968                           
  5969                           
  5970                           ;psect for function _setSleepTime
  5971  1633                     _setSleepTime:	
  5972                           
  5973                           ;main.c: 156: timer1ReloadVal=65536-(4096*timeSec);
  5974                           
  5975                           ;incstack = 0
  5976                           ; Regs used in _setSleepTime: [wreg+status,2+status,0]
  5977  1633  0020               	movlb	0	; select bank0
  5978  1634  0822               	movf	setSleepTime@timeSec+1,w
  5979  1635  00A4               	movwf	??_setSleepTime+1
  5980  1636  0821               	movf	setSleepTime@timeSec,w
  5981  1637  00A3               	movwf	??_setSleepTime
  5982  1638  0E23               	swapf	??_setSleepTime,w
  5983  1639  39F0               	andlw	240
  5984  163A  00A4               	movwf	??_setSleepTime+1
  5985  163B  01A3               	clrf	??_setSleepTime
  5986  163C  09A3               	comf	??_setSleepTime,f
  5987  163D  09A4               	comf	??_setSleepTime+1,f
  5988  163E  0AA3               	incf	??_setSleepTime,f
  5989  163F  1903               	skipnz
  5990  1640  0AA4               	incf	??_setSleepTime+1,f
  5991  1641  0823               	movf	??_setSleepTime,w
  5992  1642  00FC               	movwf	_timer1ReloadVal	;volatile
  5993  1643  0824               	movf	??_setSleepTime+1,w
  5994  1644  00FD               	movwf	_timer1ReloadVal+1	;volatile
  5995  1645  0008               	return
  5996  1646                     __end_of_setSleepTime:	
  5997                           
  5998                           	psect	text2
  5999  0B79                     __ptext2:	
  6000 ;; *************** function ___lldiv *****************
  6001 ;; Defined at:
  6002 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\lldiv.c"
  6003 ;; Parameters:    Size  Location     Type
  6004 ;;  divisor         4    1[BANK0 ] unsigned long 
  6005 ;;  dividend        4    5[BANK0 ] unsigned long 
  6006 ;; Auto vars:     Size  Location     Type
  6007 ;;  quotient        4   10[BANK0 ] unsigned long 
  6008 ;;  counter         1   14[BANK0 ] unsigned char 
  6009 ;; Return value:  Size  Location     Type
  6010 ;;                  4    1[BANK0 ] unsigned long 
  6011 ;; Registers used:
  6012 ;;		wreg, status,2, status,0
  6013 ;; Tracked objects:
  6014 ;;		On entry : 0/0
  6015 ;;		On exit  : 0/0
  6016 ;;		Unchanged: 0/0
  6017 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6018 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6019 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6020 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6021 ;;      Totals:         0      14       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6022 ;;Total ram usage:       14 bytes
  6023 ;; Hardware stack levels used:    1
  6024 ;; Hardware stack levels required when called:    4
  6025 ;; This function calls:
  6026 ;;		Nothing
  6027 ;; This function is called by:
  6028 ;;		_main
  6029 ;; This function uses a non-reentrant model
  6030 ;;
  6031                           
  6032                           
  6033                           ;psect for function ___lldiv
  6034  0B79                     ___lldiv:	
  6035                           
  6036                           ;incstack = 0
  6037                           ; Regs used in ___lldiv: [wreg+status,2+status,0]
  6038  0B79  3000               	movlw	0
  6039  0B7A  0020               	movlb	0	; select bank0
  6040  0B7B  00AD               	movwf	___lldiv@quotient+3
  6041  0B7C  3000               	movlw	0
  6042  0B7D  00AC               	movwf	___lldiv@quotient+2
  6043  0B7E  3000               	movlw	0
  6044  0B7F  00AB               	movwf	___lldiv@quotient+1
  6045  0B80  3000               	movlw	0
  6046  0B81  00AA               	movwf	___lldiv@quotient
  6047  0B82  0824               	movf	___lldiv@divisor+3,w
  6048  0B83  0423               	iorwf	___lldiv@divisor+2,w
  6049  0B84  0422               	iorwf	___lldiv@divisor+1,w
  6050  0B85  0421               	iorwf	___lldiv@divisor,w
  6051  0B86  1903               	skipnz
  6052  0B87  2BC3               	goto	l6194
  6053  0B88  01AE               	clrf	___lldiv@counter
  6054  0B89  0AAE               	incf	___lldiv@counter,f
  6055  0B8A                     l6180:	
  6056  0B8A  1BA4               	btfsc	___lldiv@divisor+3,7
  6057  0B8B  2B98               	goto	l6182
  6058  0B8C  3001               	movlw	1
  6059  0B8D                     u5935:	
  6060  0B8D  35A1               	lslf	___lldiv@divisor,f
  6061  0B8E  0DA2               	rlf	___lldiv@divisor+1,f
  6062  0B8F  0DA3               	rlf	___lldiv@divisor+2,f
  6063  0B90  0DA4               	rlf	___lldiv@divisor+3,f
  6064  0B91  0B89               	decfsz	9,f
  6065  0B92  2B8D               	goto	u5935
  6066  0B93  3001               	movlw	1
  6067  0B94  00A9               	movwf	??___lldiv
  6068  0B95  0829               	movf	??___lldiv,w
  6069  0B96  07AE               	addwf	___lldiv@counter,f
  6070  0B97  2B8A               	goto	l6180
  6071  0B98                     l6182:	
  6072  0B98  3001               	movlw	1
  6073  0B99                     u5955:	
  6074  0B99  35AA               	lslf	___lldiv@quotient,f
  6075  0B9A  0DAB               	rlf	___lldiv@quotient+1,f
  6076  0B9B  0DAC               	rlf	___lldiv@quotient+2,f
  6077  0B9C  0DAD               	rlf	___lldiv@quotient+3,f
  6078  0B9D  0B89               	decfsz	9,f
  6079  0B9E  2B99               	goto	u5955
  6080  0B9F  0824               	movf	___lldiv@divisor+3,w
  6081  0BA0  0228               	subwf	___lldiv@dividend+3,w
  6082  0BA1  1D03               	skipz
  6083  0BA2  2BAD               	goto	u5965
  6084  0BA3  0823               	movf	___lldiv@divisor+2,w
  6085  0BA4  0227               	subwf	___lldiv@dividend+2,w
  6086  0BA5  1D03               	skipz
  6087  0BA6  2BAD               	goto	u5965
  6088  0BA7  0822               	movf	___lldiv@divisor+1,w
  6089  0BA8  0226               	subwf	___lldiv@dividend+1,w
  6090  0BA9  1D03               	skipz
  6091  0BAA  2BAD               	goto	u5965
  6092  0BAB  0821               	movf	___lldiv@divisor,w
  6093  0BAC  0225               	subwf	___lldiv@dividend,w
  6094  0BAD                     u5965:	
  6095  0BAD  1C03               	skipc
  6096  0BAE  2BB8               	goto	l6190
  6097  0BAF  0821               	movf	___lldiv@divisor,w
  6098  0BB0  02A5               	subwf	___lldiv@dividend,f
  6099  0BB1  0822               	movf	___lldiv@divisor+1,w
  6100  0BB2  3BA6               	subwfb	___lldiv@dividend+1,f
  6101  0BB3  0823               	movf	___lldiv@divisor+2,w
  6102  0BB4  3BA7               	subwfb	___lldiv@dividend+2,f
  6103  0BB5  0824               	movf	___lldiv@divisor+3,w
  6104  0BB6  3BA8               	subwfb	___lldiv@dividend+3,f
  6105  0BB7  142A               	bsf	___lldiv@quotient,0
  6106  0BB8                     l6190:	
  6107  0BB8  3001               	movlw	1
  6108  0BB9                     u5975:	
  6109  0BB9  36A4               	lsrf	___lldiv@divisor+3,f
  6110  0BBA  0CA3               	rrf	___lldiv@divisor+2,f
  6111  0BBB  0CA2               	rrf	___lldiv@divisor+1,f
  6112  0BBC  0CA1               	rrf	___lldiv@divisor,f
  6113  0BBD  0B89               	decfsz	9,f
  6114  0BBE  2BB9               	goto	u5975
  6115  0BBF  3001               	movlw	1
  6116  0BC0  02AE               	subwf	___lldiv@counter,f
  6117  0BC1  1D03               	btfss	3,2
  6118  0BC2  2B98               	goto	l6182
  6119  0BC3                     l6194:	
  6120  0BC3  082D               	movf	___lldiv@quotient+3,w
  6121  0BC4  00A4               	movwf	?___lldiv+3
  6122  0BC5  082C               	movf	___lldiv@quotient+2,w
  6123  0BC6  00A3               	movwf	?___lldiv+2
  6124  0BC7  082B               	movf	___lldiv@quotient+1,w
  6125  0BC8  00A2               	movwf	?___lldiv+1
  6126  0BC9  082A               	movf	___lldiv@quotient,w
  6127  0BCA  00A1               	movwf	?___lldiv
  6128  0BCB  0008               	return
  6129  0BCC                     __end_of___lldiv:	
  6130                           
  6131                           	psect	text3
  6132  17E1                     __ptext3:	
  6133 ;; *************** function _Wireless_wake *****************
  6134 ;; Defined at:
  6135 ;;		line 94 in file "wireless.c"
  6136 ;; Parameters:    Size  Location     Type
  6137 ;;		None
  6138 ;; Auto vars:     Size  Location     Type
  6139 ;;  reg             1   16[BANK0 ] unsigned char 
  6140 ;; Return value:  Size  Location     Type
  6141 ;;                  1    wreg      void 
  6142 ;; Registers used:
  6143 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6144 ;; Tracked objects:
  6145 ;;		On entry : 0/0
  6146 ;;		On exit  : 0/0
  6147 ;;		Unchanged: 0/0
  6148 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6149 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6150 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6151 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6152 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6153 ;;Total ram usage:        2 bytes
  6154 ;; Hardware stack levels used:    1
  6155 ;; Hardware stack levels required when called:    8
  6156 ;; This function calls:
  6157 ;;		_RF_ReadRegisterData
  6158 ;;		_RF_WriteRegister
  6159 ;; This function is called by:
  6160 ;;		_main
  6161 ;; This function uses a non-reentrant model
  6162 ;;
  6163                           
  6164                           
  6165                           ;psect for function _Wireless_wake
  6166  17E1                     _Wireless_wake:	
  6167                           
  6168                           ;wireless.c: 96: u8 reg;
  6169                           ;wireless.c: 98: RF_ReadRegisterData(0x00 , &reg, 1);
  6170                           
  6171                           ;incstack = 0
  6172                           ; Regs used in _Wireless_wake: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  6173  17E1  3030               	movlw	(low (Wireless_wake@reg| 0))& (0+255)
  6174  17E2  0020               	movlb	0	; select bank0
  6175  17E3  00AF               	movwf	??_Wireless_wake
  6176  17E4  082F               	movf	??_Wireless_wake,w
  6177  17E5  00AA               	movwf	RF_ReadRegisterData@buf
  6178  17E6  01AB               	clrf	RF_ReadRegisterData@bufSize
  6179  17E7  0AAB               	incf	RF_ReadRegisterData@bufSize,f
  6180  17E8  3000               	movlw	0
  6181  17E9  3197  27C4  3197   	fcall	_RF_ReadRegisterData
  6182                           
  6183                           ;wireless.c: 99: reg|=0b00000010;
  6184  17EC  0020               	movlb	0	; select bank0
  6185  17ED  14B0               	bsf	Wireless_wake@reg,1
  6186                           
  6187                           ;wireless.c: 100: RF_WriteRegister(0x00,reg);
  6188  17EE  0830               	movf	Wireless_wake@reg,w
  6189  17EF  00AF               	movwf	??_Wireless_wake
  6190  17F0  082F               	movf	??_Wireless_wake,w
  6191  17F1  00A3               	movwf	RF_WriteRegister@val
  6192  17F2  3000               	movlw	0
  6193  17F3  3196  265B  3197   	fcall	_RF_WriteRegister
  6194                           
  6195                           ;wireless.c: 101: _delay((unsigned long)((2)*(8000000/4000.0)));
  6196  17F6  3006               	movlw	6
  6197  17F7  0020               	movlb	0	; select bank0
  6198  17F8  00AF               	movwf	??_Wireless_wake
  6199  17F9  3030               	movlw	48
  6200  17FA                     u6547:	
  6201  17FA  0B89               	decfsz	9,f
  6202  17FB  2FFA               	goto	u6547
  6203  17FC  0BAF               	decfsz	??_Wireless_wake,f
  6204  17FD  2FFA               	goto	u6547
  6205  17FE  0000               	nop
  6206  17FF  0008               	return
  6207  1800                     __end_of_Wireless_wake:	
  6208                           
  6209                           	psect	text4
  6210  169E                     __ptext4:	
  6211 ;; *************** function _Wireless_sleep *****************
  6212 ;; Defined at:
  6213 ;;		line 84 in file "wireless.c"
  6214 ;; Parameters:    Size  Location     Type
  6215 ;;		None
  6216 ;; Auto vars:     Size  Location     Type
  6217 ;;  reg             1   16[BANK0 ] unsigned char 
  6218 ;; Return value:  Size  Location     Type
  6219 ;;                  1    wreg      void 
  6220 ;; Registers used:
  6221 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6222 ;; Tracked objects:
  6223 ;;		On entry : 0/0
  6224 ;;		On exit  : 0/0
  6225 ;;		Unchanged: 0/0
  6226 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6227 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6228 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6229 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6230 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6231 ;;Total ram usage:        2 bytes
  6232 ;; Hardware stack levels used:    1
  6233 ;; Hardware stack levels required when called:    8
  6234 ;; This function calls:
  6235 ;;		_RF_ReadRegisterData
  6236 ;;		_RF_WriteRegister
  6237 ;; This function is called by:
  6238 ;;		_main
  6239 ;; This function uses a non-reentrant model
  6240 ;;
  6241                           
  6242                           
  6243                           ;psect for function _Wireless_sleep
  6244  169E                     _Wireless_sleep:	
  6245                           
  6246                           ;wireless.c: 86: u8 reg;
  6247                           ;wireless.c: 88: RF_ReadRegisterData(0x00 , &reg, 1);
  6248                           
  6249                           ;incstack = 0
  6250                           ; Regs used in _Wireless_sleep: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  6251  169E  3030               	movlw	(low (Wireless_sleep@reg| 0))& (0+255)
  6252  169F  0020               	movlb	0	; select bank0
  6253  16A0  00AF               	movwf	??_Wireless_sleep
  6254  16A1  082F               	movf	??_Wireless_sleep,w
  6255  16A2  00AA               	movwf	RF_ReadRegisterData@buf
  6256  16A3  01AB               	clrf	RF_ReadRegisterData@bufSize
  6257  16A4  0AAB               	incf	RF_ReadRegisterData@bufSize,f
  6258  16A5  3000               	movlw	0
  6259  16A6  3197  27C4  3196   	fcall	_RF_ReadRegisterData
  6260                           
  6261                           ;wireless.c: 89: reg&=0b11111101;
  6262  16A9  30FD               	movlw	253
  6263  16AA  0020               	movlb	0	; select bank0
  6264  16AB  00AF               	movwf	??_Wireless_sleep
  6265  16AC  082F               	movf	??_Wireless_sleep,w
  6266  16AD  05B0               	andwf	Wireless_sleep@reg,f
  6267                           
  6268                           ;wireless.c: 90: RF_WriteRegister(0x00,reg);
  6269  16AE  0830               	movf	Wireless_sleep@reg,w
  6270  16AF  00AF               	movwf	??_Wireless_sleep
  6271  16B0  082F               	movf	??_Wireless_sleep,w
  6272  16B1  00A3               	movwf	RF_WriteRegister@val
  6273  16B2  3000               	movlw	0
  6274  16B3  3196  265B         	fcall	_RF_WriteRegister
  6275  16B5  0008               	return
  6276  16B6                     __end_of_Wireless_sleep:	
  6277                           
  6278                           	psect	text5
  6279  06E0                     __ptext5:	
  6280 ;; *************** function _Wireless_packageData *****************
  6281 ;; Defined at:
  6282 ;;		line 50 in file "wireless.c"
  6283 ;; Parameters:    Size  Location     Type
  6284 ;;  status          1    wreg     enum E3332
  6285 ;;  openTime        1   20[BANK1 ] unsigned char 
  6286 ;;  tempC           3   21[BANK1 ] float 
  6287 ;; Auto vars:     Size  Location     Type
  6288 ;;  status          1   32[BANK1 ] enum E3332
  6289 ;;  data            5   26[BANK1 ] unsigned char [5]
  6290 ;;  t1              2   35[BANK1 ] int 
  6291 ;;  t2              2   33[BANK1 ] int 
  6292 ;;  var             1   31[BANK1 ] unsigned char 
  6293 ;; Return value:  Size  Location     Type
  6294 ;;                  1    wreg      void 
  6295 ;; Registers used:
  6296 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6297 ;; Tracked objects:
  6298 ;;		On entry : 0/0
  6299 ;;		On exit  : 0/0
  6300 ;;		Unchanged: 0/0
  6301 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6302 ;;      Params:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0
  6303 ;;      Locals:         0       0      11       0       0       0       0       0       0       0       0       0       
      +0       0
  6304 ;;      Temps:          0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
  6305 ;;      Totals:         0       0      17       0       0       0       0       0       0       0       0       0       
      +0       0
  6306 ;;Total ram usage:       17 bytes
  6307 ;; Hardware stack levels used:    1
  6308 ;; Hardware stack levels required when called:   10
  6309 ;; This function calls:
  6310 ;;		_Diag_getSensorHealth
  6311 ;;		_Sensor_getSupplyVoltage
  6312 ;;		_Wireless_checkDataReceived
  6313 ;;		_Wireless_sendData
  6314 ;;		___bmul
  6315 ;;		___ftmul
  6316 ;;		___fttol
  6317 ;;		_abs
  6318 ;; This function is called by:
  6319 ;;		_main
  6320 ;; This function uses a non-reentrant model
  6321 ;;
  6322                           
  6323                           
  6324                           ;psect for function _Wireless_packageData
  6325  06E0                     _Wireless_packageData:	
  6326                           
  6327                           ;incstack = 0
  6328                           ; Regs used in _Wireless_packageData: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6329                           ;Wireless_packageData@status stored from wreg
  6330  06E0  0021               	movlb	1	; select bank1
  6331  06E1  00C0               	movwf	Wireless_packageData@status^(0+128)
  6332                           
  6333                           ;wireless.c: 60: int t1=tempC;
  6334  06E2  0835               	movf	Wireless_packageData@tempC^(0+128),w
  6335  06E3  0020               	movlb	0	; select bank0
  6336  06E4  00E1               	movwf	___fttol@f1
  6337  06E5  0021               	movlb	1	; select bank1
  6338  06E6  0836               	movf	(Wireless_packageData@tempC+1)^(0+128),w
  6339  06E7  0020               	movlb	0	; select bank0
  6340  06E8  00E2               	movwf	___fttol@f1+1
  6341  06E9  0021               	movlb	1	; select bank1
  6342  06EA  0837               	movf	(Wireless_packageData@tempC+2)^(0+128),w
  6343  06EB  0020               	movlb	0	; select bank0
  6344  06EC  00E3               	movwf	___fttol@f1+2
  6345  06ED  318E  261C  3186   	fcall	___fttol
  6346  06F0  0020               	movlb	0	; select bank0
  6347  06F1  0862               	movf	?___fttol+1,w
  6348  06F2  0021               	movlb	1	; select bank1
  6349  06F3  00C4               	movwf	(Wireless_packageData@t1+1)^(0+128)
  6350  06F4  0020               	movlb	0	; select bank0
  6351  06F5  0861               	movf	?___fttol,w
  6352  06F6  0021               	movlb	1	; select bank1
  6353  06F7  00C3               	movwf	Wireless_packageData@t1^(0+128)
  6354                           
  6355                           ;wireless.c: 61: int t2= (float)tempC * 10;
  6356  06F8  0835               	movf	Wireless_packageData@tempC^(0+128),w
  6357  06F9  0020               	movlb	0	; select bank0
  6358  06FA  00D4               	movwf	___ftmul@f2
  6359  06FB  0021               	movlb	1	; select bank1
  6360  06FC  0836               	movf	(Wireless_packageData@tempC+1)^(0+128),w
  6361  06FD  0020               	movlb	0	; select bank0
  6362  06FE  00D5               	movwf	___ftmul@f2+1
  6363  06FF  0021               	movlb	1	; select bank1
  6364  0700  0837               	movf	(Wireless_packageData@tempC+2)^(0+128),w
  6365  0701  0020               	movlb	0	; select bank0
  6366  0702  00D6               	movwf	___ftmul@f2+2
  6367  0703  3000               	movlw	0
  6368  0704  00D1               	movwf	___ftmul@f1
  6369  0705  3020               	movlw	32
  6370  0706  00D2               	movwf	___ftmul@f1+1
  6371  0707  3041               	movlw	65
  6372  0708  00D3               	movwf	___ftmul@f1+2
  6373  0709  318F  274C  3186   	fcall	___ftmul
  6374  070C  0020               	movlb	0	; select bank0
  6375  070D  0851               	movf	?___ftmul,w
  6376  070E  00E1               	movwf	___fttol@f1
  6377  070F  0852               	movf	?___ftmul+1,w
  6378  0710  00E2               	movwf	___fttol@f1+1
  6379  0711  0853               	movf	?___ftmul+2,w
  6380  0712  00E3               	movwf	___fttol@f1+2
  6381  0713  318E  261C  3186   	fcall	___fttol
  6382  0716  0020               	movlb	0	; select bank0
  6383  0717  0862               	movf	?___fttol+1,w
  6384  0718  0021               	movlb	1	; select bank1
  6385  0719  00C2               	movwf	(Wireless_packageData@t2+1)^(0+128)
  6386  071A  0020               	movlb	0	; select bank0
  6387  071B  0861               	movf	?___fttol,w
  6388  071C  0021               	movlb	1	; select bank1
  6389  071D  00C1               	movwf	Wireless_packageData@t2^(0+128)
  6390                           
  6391                           ;wireless.c: 62: char var;
  6392                           ;wireless.c: 63: char data[5];
  6393                           ;wireless.c: 65: status<<=4;
  6394  071E  0EC0               	swapf	Wireless_packageData@status^(0+128),f
  6395  071F  30F0               	movlw	240
  6396  0720  05C0               	andwf	Wireless_packageData@status^(0+128),f
  6397                           
  6398                           ;wireless.c: 66: var=Diag_getSensorHealth();
  6399  0721  3195  25FC  3186   	fcall	_Diag_getSensorHealth
  6400  0724  0021               	movlb	1	; select bank1
  6401  0725  00B8               	movwf	??_Wireless_packageData^(0+128)
  6402  0726  0838               	movf	??_Wireless_packageData^(0+128),w
  6403  0727  00BF               	movwf	Wireless_packageData@var^(0+128)
  6404                           
  6405                           ;wireless.c: 67: status|=var;
  6406  0728  083F               	movf	Wireless_packageData@var^(0+128),w
  6407  0729  00B8               	movwf	??_Wireless_packageData^(0+128)
  6408  072A  0838               	movf	??_Wireless_packageData^(0+128),w
  6409  072B  04C0               	iorwf	Wireless_packageData@status^(0+128),f
  6410                           
  6411                           ;wireless.c: 69: data[0]=status;
  6412  072C  0840               	movf	Wireless_packageData@status^(0+128),w
  6413  072D  00B8               	movwf	??_Wireless_packageData^(0+128)
  6414  072E  0838               	movf	??_Wireless_packageData^(0+128),w
  6415  072F  00BA               	movwf	Wireless_packageData@data^(0+128)
  6416                           
  6417                           ;wireless.c: 70: data[1]=openTime;
  6418  0730  0834               	movf	Wireless_packageData@openTime^(0+128),w
  6419  0731  00B8               	movwf	??_Wireless_packageData^(0+128)
  6420  0732  0838               	movf	??_Wireless_packageData^(0+128),w
  6421  0733  00BB               	movwf	(Wireless_packageData@data^(0+128)+1)
  6422                           
  6423                           ;wireless.c: 71: data[2]=t1;
  6424  0734  0843               	movf	Wireless_packageData@t1^(0+128),w
  6425  0735  00B8               	movwf	??_Wireless_packageData^(0+128)
  6426  0736  0838               	movf	??_Wireless_packageData^(0+128),w
  6427  0737  00BC               	movwf	(Wireless_packageData@data^(0+128)+2)
  6428                           
  6429                           ;wireless.c: 72: t1=abs(t1);
  6430  0738  0844               	movf	(Wireless_packageData@t1+1)^(0+128),w
  6431  0739  0020               	movlb	0	; select bank0
  6432  073A  00A2               	movwf	abs@a+1
  6433  073B  0021               	movlb	1	; select bank1
  6434  073C  0843               	movf	Wireless_packageData@t1^(0+128),w
  6435  073D  0020               	movlb	0	; select bank0
  6436  073E  00A1               	movwf	abs@a
  6437  073F  3195  25AA  3186   	fcall	_abs
  6438  0742  0020               	movlb	0	; select bank0
  6439  0743  0822               	movf	?_abs+1,w
  6440  0744  0021               	movlb	1	; select bank1
  6441  0745  00C4               	movwf	(Wireless_packageData@t1+1)^(0+128)
  6442  0746  0020               	movlb	0	; select bank0
  6443  0747  0821               	movf	?_abs,w
  6444  0748  0021               	movlb	1	; select bank1
  6445  0749  00C3               	movwf	Wireless_packageData@t1^(0+128)
  6446                           
  6447                           ;wireless.c: 73: t2=abs(t2);
  6448  074A  0842               	movf	(Wireless_packageData@t2+1)^(0+128),w
  6449  074B  0020               	movlb	0	; select bank0
  6450  074C  00A2               	movwf	abs@a+1
  6451  074D  0021               	movlb	1	; select bank1
  6452  074E  0841               	movf	Wireless_packageData@t2^(0+128),w
  6453  074F  0020               	movlb	0	; select bank0
  6454  0750  00A1               	movwf	abs@a
  6455  0751  3195  25AA  3186   	fcall	_abs
  6456  0754  0020               	movlb	0	; select bank0
  6457  0755  0822               	movf	?_abs+1,w
  6458  0756  0021               	movlb	1	; select bank1
  6459  0757  00C2               	movwf	(Wireless_packageData@t2+1)^(0+128)
  6460  0758  0020               	movlb	0	; select bank0
  6461  0759  0821               	movf	?_abs,w
  6462  075A  0021               	movlb	1	; select bank1
  6463  075B  00C1               	movwf	Wireless_packageData@t2^(0+128)
  6464                           
  6465                           ;wireless.c: 74: data[3]=t2 - t1*10;
  6466  075C  300A               	movlw	10
  6467  075D  00B8               	movwf	??_Wireless_packageData^(0+128)
  6468  075E  0838               	movf	??_Wireless_packageData^(0+128),w
  6469  075F  0020               	movlb	0	; select bank0
  6470  0760  00A1               	movwf	___bmul@multiplicand
  6471  0761  0021               	movlb	1	; select bank1
  6472  0762  0843               	movf	Wireless_packageData@t1^(0+128),w
  6473  0763  3196  260E  3186   	fcall	___bmul
  6474  0766  3AFF               	xorlw	255
  6475  0767  3E01               	addlw	1
  6476  0768  0021               	movlb	1	; select bank1
  6477  0769  0741               	addwf	Wireless_packageData@t2^(0+128),w
  6478  076A  00B9               	movwf	(??_Wireless_packageData+1)^(0+128)
  6479  076B  0839               	movf	(??_Wireless_packageData+1)^(0+128),w
  6480  076C  00BD               	movwf	(Wireless_packageData@data^(0+128)+3)
  6481                           
  6482                           ;wireless.c: 75: t1=(float)Sensor_getSupplyVoltage()*10;
  6483  076D  318A  2205  3186   	fcall	_Sensor_getSupplyVoltage
  6484  0770  0020               	movlb	0	; select bank0
  6485  0771  0841               	movf	?_Sensor_getSupplyVoltage,w
  6486  0772  00D4               	movwf	___ftmul@f2
  6487  0773  0842               	movf	?_Sensor_getSupplyVoltage+1,w
  6488  0774  00D5               	movwf	___ftmul@f2+1
  6489  0775  0843               	movf	?_Sensor_getSupplyVoltage+2,w
  6490  0776  00D6               	movwf	___ftmul@f2+2
  6491  0777  3000               	movlw	0
  6492  0778  00D1               	movwf	___ftmul@f1
  6493  0779  3020               	movlw	32
  6494  077A  00D2               	movwf	___ftmul@f1+1
  6495  077B  3041               	movlw	65
  6496  077C  00D3               	movwf	___ftmul@f1+2
  6497  077D  318F  274C  3186   	fcall	___ftmul
  6498  0780  0020               	movlb	0	; select bank0
  6499  0781  0851               	movf	?___ftmul,w
  6500  0782  00E1               	movwf	___fttol@f1
  6501  0783  0852               	movf	?___ftmul+1,w
  6502  0784  00E2               	movwf	___fttol@f1+1
  6503  0785  0853               	movf	?___ftmul+2,w
  6504  0786  00E3               	movwf	___fttol@f1+2
  6505  0787  318E  261C  3186   	fcall	___fttol
  6506  078A  0020               	movlb	0	; select bank0
  6507  078B  0862               	movf	?___fttol+1,w
  6508  078C  0021               	movlb	1	; select bank1
  6509  078D  00C4               	movwf	(Wireless_packageData@t1+1)^(0+128)
  6510  078E  0020               	movlb	0	; select bank0
  6511  078F  0861               	movf	?___fttol,w
  6512  0790  0021               	movlb	1	; select bank1
  6513  0791  00C3               	movwf	Wireless_packageData@t1^(0+128)
  6514                           
  6515                           ;wireless.c: 76: data[4]=t1;
  6516  0792  0843               	movf	Wireless_packageData@t1^(0+128),w
  6517  0793  00B8               	movwf	??_Wireless_packageData^(0+128)
  6518  0794  0838               	movf	??_Wireless_packageData^(0+128),w
  6519  0795  00BE               	movwf	(Wireless_packageData@data^(0+128)+4)
  6520                           
  6521                           ;wireless.c: 78: Wireless_sendData(data);
  6522  0796  30BA               	movlw	(low (Wireless_packageData@data| 0))& (0+255)
  6523  0797  3195  259B  3186   	fcall	_Wireless_sendData
  6524  079A                     l1082:	
  6525                           ;wireless.c: 79: while(PORTCbits.RC3);
  6526                           
  6527  079A  0020               	movlb	0	; select bank0
  6528  079B  198E               	btfsc	14,3	;volatile
  6529  079C  2F9A               	goto	l1082
  6530                           
  6531                           ;wireless.c: 80: Wireless_checkDataReceived();
  6532  079D  318C  24A5         	fcall	_Wireless_checkDataReceived
  6533  079F  0008               	return
  6534  07A0                     __end_of_Wireless_packageData:	
  6535                           
  6536                           	psect	text6
  6537  15AA                     __ptext6:	
  6538 ;; *************** function _abs *****************
  6539 ;; Defined at:
  6540 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\abs.c"
  6541 ;; Parameters:    Size  Location     Type
  6542 ;;  a               2    1[BANK0 ] int 
  6543 ;; Auto vars:     Size  Location     Type
  6544 ;;		None
  6545 ;; Return value:  Size  Location     Type
  6546 ;;                  2    1[BANK0 ] int 
  6547 ;; Registers used:
  6548 ;;		wreg, status,2, status,0
  6549 ;; Tracked objects:
  6550 ;;		On entry : 0/0
  6551 ;;		On exit  : 0/0
  6552 ;;		Unchanged: 0/0
  6553 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6554 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6555 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6556 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6557 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6558 ;;Total ram usage:        4 bytes
  6559 ;; Hardware stack levels used:    1
  6560 ;; Hardware stack levels required when called:    4
  6561 ;; This function calls:
  6562 ;;		Nothing
  6563 ;; This function is called by:
  6564 ;;		_Wireless_packageData
  6565 ;; This function uses a non-reentrant model
  6566 ;;
  6567                           
  6568                           
  6569                           ;psect for function _abs
  6570  15AA                     _abs:	
  6571                           
  6572                           ;incstack = 0
  6573                           ; Regs used in _abs: [wreg+status,2+status,0]
  6574  15AA  0020               	movlb	0	; select bank0
  6575  15AB  1FA2               	btfss	abs@a+1,7
  6576  15AC  0008               	return
  6577  15AD  0921               	comf	abs@a,w
  6578  15AE  00A3               	movwf	??_abs
  6579  15AF  0922               	comf	abs@a+1,w
  6580  15B0  00A4               	movwf	??_abs+1
  6581  15B1  0AA3               	incf	??_abs,f
  6582  15B2  1903               	skipnz
  6583  15B3  0AA4               	incf	??_abs+1,f
  6584  15B4  0823               	movf	??_abs,w
  6585  15B5  00A1               	movwf	?_abs
  6586  15B6  0824               	movf	??_abs+1,w
  6587  15B7  00A2               	movwf	?_abs+1
  6588  15B8  0008               	return
  6589  15B9                     __end_of_abs:	
  6590                           
  6591                           	psect	text7
  6592  160E                     __ptext7:	
  6593 ;; *************** function ___bmul *****************
  6594 ;; Defined at:
  6595 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\Umul8.c"
  6596 ;; Parameters:    Size  Location     Type
  6597 ;;  multiplier      1    wreg     unsigned char 
  6598 ;;  multiplicand    1    1[BANK0 ] unsigned char 
  6599 ;; Auto vars:     Size  Location     Type
  6600 ;;  multiplier      1    4[BANK0 ] unsigned char 
  6601 ;;  product         1    3[BANK0 ] unsigned char 
  6602 ;; Return value:  Size  Location     Type
  6603 ;;                  1    wreg      unsigned char 
  6604 ;; Registers used:
  6605 ;;		wreg, status,2, status,0
  6606 ;; Tracked objects:
  6607 ;;		On entry : 0/0
  6608 ;;		On exit  : 0/0
  6609 ;;		Unchanged: 0/0
  6610 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6611 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6612 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6613 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6614 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6615 ;;Total ram usage:        4 bytes
  6616 ;; Hardware stack levels used:    1
  6617 ;; Hardware stack levels required when called:    4
  6618 ;; This function calls:
  6619 ;;		Nothing
  6620 ;; This function is called by:
  6621 ;;		_Wireless_packageData
  6622 ;; This function uses a non-reentrant model
  6623 ;;
  6624                           
  6625                           
  6626                           ;psect for function ___bmul
  6627  160E                     ___bmul:	
  6628                           
  6629                           ;incstack = 0
  6630                           ; Regs used in ___bmul: [wreg+status,2+status,0]
  6631                           ;___bmul@multiplier stored from wreg
  6632  160E  0020               	movlb	0	; select bank0
  6633  160F  00A4               	movwf	___bmul@multiplier
  6634  1610  01A3               	clrf	___bmul@product
  6635  1611                     l5776:	
  6636  1611  1C24               	btfss	___bmul@multiplier,0
  6637  1612  2E17               	goto	l5780
  6638  1613  0821               	movf	___bmul@multiplicand,w
  6639  1614  00A2               	movwf	??___bmul
  6640  1615  0822               	movf	??___bmul,w
  6641  1616  07A3               	addwf	___bmul@product,f
  6642  1617                     l5780:	
  6643  1617  1003               	clrc
  6644  1618  0DA1               	rlf	___bmul@multiplicand,f
  6645  1619  1003               	clrc
  6646  161A  0CA4               	rrf	___bmul@multiplier,f
  6647  161B  0824               	movf	___bmul@multiplier,w
  6648  161C  1D03               	btfss	3,2
  6649  161D  2E11               	goto	l5776
  6650  161E  0823               	movf	___bmul@product,w
  6651  161F  0008               	return
  6652  1620                     __end_of___bmul:	
  6653                           
  6654                           	psect	text8
  6655  159B                     __ptext8:	
  6656 ;; *************** function _Wireless_sendData *****************
  6657 ;; Defined at:
  6658 ;;		line 42 in file "wireless.c"
  6659 ;; Parameters:    Size  Location     Type
  6660 ;;  payload         1    wreg     PTR unsigned char 
  6661 ;;		 -> Wireless_packageData@data(5), 
  6662 ;; Auto vars:     Size  Location     Type
  6663 ;;  payload         1   18[BANK0 ] PTR unsigned char 
  6664 ;;		 -> Wireless_packageData@data(5), 
  6665 ;; Return value:  Size  Location     Type
  6666 ;;                  1    wreg      void 
  6667 ;; Registers used:
  6668 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  6669 ;; Tracked objects:
  6670 ;;		On entry : 0/0
  6671 ;;		On exit  : 0/0
  6672 ;;		Unchanged: 0/0
  6673 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6674 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6675 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6676 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6677 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6678 ;;Total ram usage:        2 bytes
  6679 ;; Hardware stack levels used:    1
  6680 ;; Hardware stack levels required when called:    9
  6681 ;; This function calls:
  6682 ;;		_RF_ResetStatusIRQ
  6683 ;;		_RF_TxPayload
  6684 ;; This function is called by:
  6685 ;;		_Wireless_packageData
  6686 ;; This function uses a non-reentrant model
  6687 ;;
  6688                           
  6689                           
  6690                           ;psect for function _Wireless_sendData
  6691  159B                     _Wireless_sendData:	
  6692                           
  6693                           ;incstack = 0
  6694                           ; Regs used in _Wireless_sendData: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  6695                           ;Wireless_sendData@payload stored from wreg
  6696  159B  0020               	movlb	0	; select bank0
  6697  159C  00B2               	movwf	Wireless_sendData@payload
  6698                           
  6699                           ;wireless.c: 45: RF_ResetStatusIRQ(0x40|0x20|0x10);
  6700  159D  3070               	movlw	112
  6701  159E  3188  200B  3195   	fcall	_RF_ResetStatusIRQ
  6702                           
  6703                           ;wireless.c: 46: RF_TxPayload(payload, 5);
  6704  15A1  3005               	movlw	5
  6705  15A2  0020               	movlb	0	; select bank0
  6706  15A3  00B1               	movwf	??_Wireless_sendData
  6707  15A4  0831               	movf	??_Wireless_sendData,w
  6708  15A5  00AE               	movwf	RF_TxPayload@payloadSize
  6709  15A6  0832               	movf	Wireless_sendData@payload,w
  6710  15A7  3197  276F         	fcall	_RF_TxPayload
  6711  15A9  0008               	return
  6712  15AA                     __end_of_Wireless_sendData:	
  6713                           
  6714                           	psect	text9
  6715  176F                     __ptext9:	
  6716 ;; *************** function _RF_TxPayload *****************
  6717 ;; Defined at:
  6718 ;;		line 173 in file "nrf24.c"
  6719 ;; Parameters:    Size  Location     Type
  6720 ;;  payload         1    wreg     PTR unsigned char 
  6721 ;;		 -> Wireless_packageData@data(5), 
  6722 ;;  payloadSize     1   14[BANK0 ] unsigned char 
  6723 ;; Auto vars:     Size  Location     Type
  6724 ;;  payload         1   16[BANK0 ] PTR unsigned char 
  6725 ;;		 -> Wireless_packageData@data(5), 
  6726 ;; Return value:  Size  Location     Type
  6727 ;;                  1    wreg      void 
  6728 ;; Registers used:
  6729 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  6730 ;; Tracked objects:
  6731 ;;		On entry : 0/0
  6732 ;;		On exit  : 0/0
  6733 ;;		Unchanged: 0/0
  6734 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6735 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6736 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6737 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6738 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6739 ;;Total ram usage:        3 bytes
  6740 ;; Hardware stack levels used:    1
  6741 ;; Hardware stack levels required when called:    8
  6742 ;; This function calls:
  6743 ;;		_RF_Write
  6744 ;;		_RF_WriteRegisterData
  6745 ;; This function is called by:
  6746 ;;		_Wireless_sendData
  6747 ;; This function uses a non-reentrant model
  6748 ;;
  6749                           
  6750                           
  6751                           ;psect for function _RF_TxPayload
  6752  176F                     _RF_TxPayload:	
  6753                           
  6754                           ;incstack = 0
  6755                           ; Regs used in _RF_TxPayload: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  6756                           ;RF_TxPayload@payload stored from wreg
  6757  176F  0020               	movlb	0	; select bank0
  6758  1770  00B0               	movwf	RF_TxPayload@payload
  6759                           
  6760                           ;nrf24.c: 174: RF_Write(0xE1);
  6761  1771  30E1               	movlw	225
  6762  1772  3195  25C9  3197   	fcall	_RF_Write
  6763                           
  6764                           ;nrf24.c: 175: RF_WriteRegisterData(0xA0, payload, payloadSize);
  6765  1775  0020               	movlb	0	; select bank0
  6766  1776  0830               	movf	RF_TxPayload@payload,w
  6767  1777  00A9               	movwf	RF_WriteRegisterData@buf
  6768  1778  3000               	movlw	0
  6769  1779  00AA               	movwf	RF_WriteRegisterData@buf+1
  6770  177A  082E               	movf	RF_TxPayload@payloadSize,w
  6771  177B  00AF               	movwf	??_RF_TxPayload
  6772  177C  082F               	movf	??_RF_TxPayload,w
  6773  177D  00AB               	movwf	RF_WriteRegisterData@bufSize
  6774  177E  30A0               	movlw	160
  6775  177F  3197  278A  3197   	fcall	_RF_WriteRegisterData
  6776                           
  6777                           ;nrf24.c: 176: do { LATCbits.LATC2 = 1; } while(0);
  6778  1782  0022               	movlb	2	; select bank2
  6779  1783  150E               	bsf	14,2	;volatile
  6780                           
  6781                           ;nrf24.c: 177: _delay((unsigned long)((15)*(8000000/4000000.0)));
  6782  1784  300A               	movlw	10
  6783  1785                     u6557:	
  6784  1785  0B89               	decfsz	9,f
  6785  1786  2F85               	goto	u6557
  6786                           
  6787                           ;nrf24.c: 178: do { LATCbits.LATC2 = 0; } while(0);
  6788  1787  0022               	movlb	2	; select bank2
  6789  1788  110E               	bcf	14,2	;volatile
  6790  1789  0008               	return
  6791  178A                     __end_of_RF_TxPayload:	
  6792                           
  6793                           	psect	text10
  6794  15C9                     __ptext10:	
  6795 ;; *************** function _RF_Write *****************
  6796 ;; Defined at:
  6797 ;;		line 139 in file "nrf24.c"
  6798 ;; Parameters:    Size  Location     Type
  6799 ;;  val             1    wreg     unsigned char 
  6800 ;; Auto vars:     Size  Location     Type
  6801 ;;  val             1    3[BANK0 ] unsigned char 
  6802 ;; Return value:  Size  Location     Type
  6803 ;;                  1    wreg      void 
  6804 ;; Registers used:
  6805 ;;		wreg, status,2, status,0, pclath, cstack
  6806 ;; Tracked objects:
  6807 ;;		On entry : 0/0
  6808 ;;		On exit  : 0/0
  6809 ;;		Unchanged: 0/0
  6810 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6811 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6812 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6813 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6814 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6815 ;;Total ram usage:        1 bytes
  6816 ;; Hardware stack levels used:    1
  6817 ;; Hardware stack levels required when called:    6
  6818 ;; This function calls:
  6819 ;;		_SPI_WriteRead
  6820 ;; This function is called by:
  6821 ;;		_RF_TxPayload
  6822 ;; This function uses a non-reentrant model
  6823 ;;
  6824                           
  6825                           
  6826                           ;psect for function _RF_Write
  6827  15C9                     _RF_Write:	
  6828                           
  6829                           ;incstack = 0
  6830                           ; Regs used in _RF_Write: [wreg+status,2+status,0+pclath+cstack]
  6831                           ;RF_Write@val stored from wreg
  6832  15C9  0020               	movlb	0	; select bank0
  6833  15CA  00A3               	movwf	RF_Write@val
  6834                           
  6835                           ;nrf24.c: 140: do { LATCbits.LATC1 = 0; } while(0);
  6836  15CB  0022               	movlb	2	; select bank2
  6837  15CC  108E               	bcf	14,1	;volatile
  6838                           
  6839                           ;nrf24.c: 141: (void)SPI_WriteRead(val);
  6840  15CD  0020               	movlb	0	; select bank0
  6841  15CE  0823               	movf	RF_Write@val,w
  6842  15CF  3194  24F2  3195   	fcall	_SPI_WriteRead
  6843                           
  6844                           ;nrf24.c: 142: do { LATCbits.LATC1 = 1; } while(0);
  6845  15D2  0022               	movlb	2	; select bank2
  6846  15D3  148E               	bsf	14,1	;volatile
  6847                           
  6848                           ;nrf24.c: 143: _delay((unsigned long)((10)*(8000000/4000000.0)));
  6849  15D4  3006               	movlw	6
  6850  15D5                     u6567:	
  6851  15D5  0B89               	decfsz	9,f
  6852  15D6  2DD5               	goto	u6567
  6853  15D7  3200               	nop2
  6854  15D8  0008               	return
  6855  15D9                     __end_of_RF_Write:	
  6856                           
  6857                           	psect	text11
  6858  0CA5                     __ptext11:	
  6859 ;; *************** function _Wireless_checkDataReceived *****************
  6860 ;; Defined at:
  6861 ;;		line 104 in file "wireless.c"
  6862 ;; Parameters:    Size  Location     Type
  6863 ;;		None
  6864 ;; Auto vars:     Size  Location     Type
  6865 ;;  data            4   23[BANK0 ] unsigned char [4]
  6866 ;;  channel         1   27[BANK0 ] unsigned char 
  6867 ;; Return value:  Size  Location     Type
  6868 ;;                  1    wreg      void 
  6869 ;; Registers used:
  6870 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6871 ;; Tracked objects:
  6872 ;;		On entry : 0/0
  6873 ;;		On exit  : 0/0
  6874 ;;		Unchanged: 0/0
  6875 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6876 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6877 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6878 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6879 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6880 ;;Total ram usage:        9 bytes
  6881 ;; Hardware stack levels used:    1
  6882 ;; Hardware stack levels required when called:    9
  6883 ;; This function calls:
  6884 ;;		_DOOR_resetPos
  6885 ;;		_DOOR_update
  6886 ;;		_RF_DataIsReady
  6887 ;;		_RF_RxPayload
  6888 ;;		___lmul
  6889 ;; This function is called by:
  6890 ;;		_Wireless_packageData
  6891 ;; This function uses a non-reentrant model
  6892 ;;
  6893                           
  6894                           
  6895                           ;psect for function _Wireless_checkDataReceived
  6896  0CA5                     _Wireless_checkDataReceived:	
  6897  0CA5                     l1094:	
  6898                           ;incstack = 0
  6899                           ; Regs used in _Wireless_checkDataReceived: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+c
      +                          stack]
  6900                           ;wireless.c: 111: char channel;
  6901                           ;wireless.c: 112: char data[4];
  6902                           ;wireless.c: 113: do
  6903                           
  6904                           
  6905                           ;wireless.c: 114: {
  6906                           ;wireless.c: 115: if(RF_DataIsReady(&channel))
  6907  0CA5  303B               	movlw	(low (Wireless_checkDataReceived@channel| 0))& (0+255)
  6908  0CA6  3197  27A7  318C   	fcall	_RF_DataIsReady
  6909  0CA9  3A00               	xorlw	0
  6910  0CAA  1903               	skipnz
  6911  0CAB  2D17               	goto	l5760
  6912                           
  6913                           ;wireless.c: 116: {
  6914                           ;wireless.c: 117: RF_RxPayload(data, 4);
  6915  0CAC  3004               	movlw	4
  6916  0CAD  0020               	movlb	0	; select bank0
  6917  0CAE  00B3               	movwf	??_Wireless_checkDataReceived
  6918  0CAF  0833               	movf	??_Wireless_checkDataReceived,w
  6919  0CB0  00AF               	movwf	RF_RxPayload@payloadSize
  6920  0CB1  3037               	movlw	(low (Wireless_checkDataReceived@data| 0))& (0+255)
  6921  0CB2  3196  2620  318C   	fcall	_RF_RxPayload
  6922                           
  6923                           ;wireless.c: 118: if(data[0] & 0x01)
  6924  0CB5  0020               	movlb	0	; select bank0
  6925  0CB6  1C37               	btfss	Wireless_checkDataReceived@data,0
  6926  0CB7  2CC1               	goto	l5746
  6927                           
  6928                           ;wireless.c: 119: {
  6929                           ;wireless.c: 120: DOOR_update(doorOpenAngle,data[1]);
  6930  0CB8  0838               	movf	Wireless_checkDataReceived@data+1,w
  6931  0CB9  00B3               	movwf	??_Wireless_checkDataReceived
  6932  0CBA  0833               	movf	??_Wireless_checkDataReceived,w
  6933  0CBB  00A7               	movwf	DOOR_update@closedAngle
  6934  0CBC  0021               	movlb	1	; select bank1
  6935  0CBD  0866               	movf	_doorOpenAngle^(0+128),w
  6936  0CBE  3196  2671  318C   	fcall	_DOOR_update
  6937  0CC1                     l5746:	
  6938                           
  6939                           ;wireless.c: 121: }
  6940                           ;wireless.c: 122: if(data[0] & 0x02)
  6941  0CC1  0020               	movlb	0	; select bank0
  6942  0CC2  1CB7               	btfss	Wireless_checkDataReceived@data,1
  6943  0CC3  2CCE               	goto	l5750
  6944                           
  6945                           ;wireless.c: 123: {
  6946                           ;wireless.c: 124: DOOR_update(data[2],doorClosedAngle);
  6947  0CC4  0021               	movlb	1	; select bank1
  6948  0CC5  0865               	movf	_doorClosedAngle^(0+128),w
  6949  0CC6  0020               	movlb	0	; select bank0
  6950  0CC7  00B3               	movwf	??_Wireless_checkDataReceived
  6951  0CC8  0833               	movf	??_Wireless_checkDataReceived,w
  6952  0CC9  00A7               	movwf	DOOR_update@closedAngle
  6953  0CCA  0839               	movf	Wireless_checkDataReceived@data+2,w
  6954  0CCB  3196  2671  318C   	fcall	_DOOR_update
  6955  0CCE                     l5750:	
  6956                           
  6957                           ;wireless.c: 125: }
  6958                           ;wireless.c: 126: if(data[0] & 0x04)
  6959  0CCE  0020               	movlb	0	; select bank0
  6960  0CCF  1D37               	btfss	Wireless_checkDataReceived@data,2
  6961  0CD0  2D11               	goto	l5756
  6962                           
  6963                           ;wireless.c: 127: {
  6964                           ;wireless.c: 128: sensorUpdatePeriod=data[3];
  6965  0CD1  083A               	movf	Wireless_checkDataReceived@data+3,w
  6966  0CD2  00B3               	movwf	??_Wireless_checkDataReceived
  6967  0CD3  01B4               	clrf	??_Wireless_checkDataReceived+1
  6968  0CD4  01B5               	clrf	??_Wireless_checkDataReceived+2
  6969  0CD5  01B6               	clrf	??_Wireless_checkDataReceived+3
  6970  0CD6  0836               	movf	??_Wireless_checkDataReceived+3,w
  6971  0CD7  0022               	movlb	2	; select bank2
  6972  0CD8  00EE               	movwf	(_sensorUpdatePeriod+3)^(0+256)
  6973  0CD9  0020               	movlb	0	; select bank0
  6974  0CDA  0835               	movf	??_Wireless_checkDataReceived+2,w
  6975  0CDB  0022               	movlb	2	; select bank2
  6976  0CDC  00ED               	movwf	(_sensorUpdatePeriod+2)^(0+256)
  6977  0CDD  0020               	movlb	0	; select bank0
  6978  0CDE  0834               	movf	??_Wireless_checkDataReceived+1,w
  6979  0CDF  0022               	movlb	2	; select bank2
  6980  0CE0  00EC               	movwf	(_sensorUpdatePeriod+1)^(0+256)
  6981  0CE1  0020               	movlb	0	; select bank0
  6982  0CE2  0833               	movf	??_Wireless_checkDataReceived,w
  6983  0CE3  0022               	movlb	2	; select bank2
  6984  0CE4  00EB               	movwf	_sensorUpdatePeriod^(0+256)
  6985                           
  6986                           ;wireless.c: 129: sensorUpdatePeriod*=1000;
  6987  0CE5  3000               	movlw	0
  6988  0CE6  0020               	movlb	0	; select bank0
  6989  0CE7  00A4               	movwf	___lmul@multiplier+3
  6990  0CE8  3000               	movlw	0
  6991  0CE9  00A3               	movwf	___lmul@multiplier+2
  6992  0CEA  3003               	movlw	3
  6993  0CEB  00A2               	movwf	___lmul@multiplier+1
  6994  0CEC  30E8               	movlw	232
  6995  0CED  00A1               	movwf	___lmul@multiplier
  6996  0CEE  0022               	movlb	2	; select bank2
  6997  0CEF  086E               	movf	(_sensorUpdatePeriod+3)^(0+256),w
  6998  0CF0  0020               	movlb	0	; select bank0
  6999  0CF1  00A8               	movwf	___lmul@multiplicand+3
  7000  0CF2  0022               	movlb	2	; select bank2
  7001  0CF3  086D               	movf	(_sensorUpdatePeriod+2)^(0+256),w
  7002  0CF4  0020               	movlb	0	; select bank0
  7003  0CF5  00A7               	movwf	___lmul@multiplicand+2
  7004  0CF6  0022               	movlb	2	; select bank2
  7005  0CF7  086C               	movf	(_sensorUpdatePeriod+1)^(0+256),w
  7006  0CF8  0020               	movlb	0	; select bank0
  7007  0CF9  00A6               	movwf	___lmul@multiplicand+1
  7008  0CFA  0022               	movlb	2	; select bank2
  7009  0CFB  086B               	movf	_sensorUpdatePeriod^(0+256),w
  7010  0CFC  0020               	movlb	0	; select bank0
  7011  0CFD  00A5               	movwf	___lmul@multiplicand
  7012  0CFE  3189  215C  318C   	fcall	___lmul
  7013  0D01  0020               	movlb	0	; select bank0
  7014  0D02  0824               	movf	?___lmul+3,w
  7015  0D03  0022               	movlb	2	; select bank2
  7016  0D04  00EE               	movwf	(_sensorUpdatePeriod+3)^(0+256)
  7017  0D05  0020               	movlb	0	; select bank0
  7018  0D06  0823               	movf	?___lmul+2,w
  7019  0D07  0022               	movlb	2	; select bank2
  7020  0D08  00ED               	movwf	(_sensorUpdatePeriod+2)^(0+256)
  7021  0D09  0020               	movlb	0	; select bank0
  7022  0D0A  0822               	movf	?___lmul+1,w
  7023  0D0B  0022               	movlb	2	; select bank2
  7024  0D0C  00EC               	movwf	(_sensorUpdatePeriod+1)^(0+256)
  7025  0D0D  0020               	movlb	0	; select bank0
  7026  0D0E  0821               	movf	?___lmul,w
  7027  0D0F  0022               	movlb	2	; select bank2
  7028  0D10  00EB               	movwf	_sensorUpdatePeriod^(0+256)
  7029  0D11                     l5756:	
  7030                           
  7031                           ;wireless.c: 130: }
  7032                           ;wireless.c: 131: if(data[0] & 0x08)
  7033  0D11  0020               	movlb	0	; select bank0
  7034  0D12  1DB7               	btfss	Wireless_checkDataReceived@data,3
  7035  0D13  2D17               	goto	l5760
  7036                           
  7037                           ;wireless.c: 132: {
  7038                           ;wireless.c: 133: DOOR_resetPos();
  7039  0D14  3194  24DA  318C   	fcall	_DOOR_resetPos
  7040  0D17                     l5760:	
  7041                           
  7042                           ;wireless.c: 134: }
  7043                           ;wireless.c: 138: }
  7044                           ;wireless.c: 139: }while(RF_DataIsReady(&channel));
  7045  0D17  303B               	movlw	(low (Wireless_checkDataReceived@channel| 0))& (0+255)
  7046  0D18  3197  27A7  318C   	fcall	_RF_DataIsReady
  7047  0D1B  3A00               	xorlw	0
  7048  0D1C  1903               	btfsc	3,2
  7049  0D1D  0008               	return
  7050  0D1E  2CA5               	goto	l1094
  7051  0D1F                     __end_of_Wireless_checkDataReceived:	
  7052                           
  7053                           	psect	text12
  7054  095C                     __ptext12:	
  7055 ;; *************** function ___lmul *****************
  7056 ;; Defined at:
  7057 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\Umul32.c"
  7058 ;; Parameters:    Size  Location     Type
  7059 ;;  multiplier      4    1[BANK0 ] unsigned long 
  7060 ;;  multiplicand    4    5[BANK0 ] unsigned long 
  7061 ;; Auto vars:     Size  Location     Type
  7062 ;;  product         4    9[BANK0 ] unsigned long 
  7063 ;; Return value:  Size  Location     Type
  7064 ;;                  4    1[BANK0 ] unsigned long 
  7065 ;; Registers used:
  7066 ;;		wreg, status,2, status,0
  7067 ;; Tracked objects:
  7068 ;;		On entry : 0/0
  7069 ;;		On exit  : 0/0
  7070 ;;		Unchanged: 0/0
  7071 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7072 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7073 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7074 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7075 ;;      Totals:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7076 ;;Total ram usage:       12 bytes
  7077 ;; Hardware stack levels used:    1
  7078 ;; Hardware stack levels required when called:    4
  7079 ;; This function calls:
  7080 ;;		Nothing
  7081 ;; This function is called by:
  7082 ;;		_Wireless_checkDataReceived
  7083 ;; This function uses a non-reentrant model
  7084 ;;
  7085                           
  7086                           
  7087                           ;psect for function ___lmul
  7088  095C                     ___lmul:	
  7089                           
  7090                           ;incstack = 0
  7091                           ; Regs used in ___lmul: [wreg+status,2+status,0]
  7092  095C  3000               	movlw	0
  7093  095D  0020               	movlb	0	; select bank0
  7094  095E  00AC               	movwf	___lmul@product+3
  7095  095F  3000               	movlw	0
  7096  0960  00AB               	movwf	___lmul@product+2
  7097  0961  3000               	movlw	0
  7098  0962  00AA               	movwf	___lmul@product+1
  7099  0963  3000               	movlw	0
  7100  0964  00A9               	movwf	___lmul@product
  7101  0965                     l5494:	
  7102  0965  1C21               	btfss	___lmul@multiplier,0
  7103  0966  296F               	goto	l5498
  7104  0967  0825               	movf	___lmul@multiplicand,w
  7105  0968  07A9               	addwf	___lmul@product,f
  7106  0969  0826               	movf	___lmul@multiplicand+1,w
  7107  096A  3DAA               	addwfc	___lmul@product+1,f
  7108  096B  0827               	movf	___lmul@multiplicand+2,w
  7109  096C  3DAB               	addwfc	___lmul@product+2,f
  7110  096D  0828               	movf	___lmul@multiplicand+3,w
  7111  096E  3DAC               	addwfc	___lmul@product+3,f
  7112  096F                     l5498:	
  7113  096F  3001               	movlw	1
  7114  0970                     u4865:	
  7115  0970  35A5               	lslf	___lmul@multiplicand,f
  7116  0971  0DA6               	rlf	___lmul@multiplicand+1,f
  7117  0972  0DA7               	rlf	___lmul@multiplicand+2,f
  7118  0973  0DA8               	rlf	___lmul@multiplicand+3,f
  7119  0974  0B89               	decfsz	9,f
  7120  0975  2970               	goto	u4865
  7121  0976  3001               	movlw	1
  7122  0977                     u4875:	
  7123  0977  36A4               	lsrf	___lmul@multiplier+3,f
  7124  0978  0CA3               	rrf	___lmul@multiplier+2,f
  7125  0979  0CA2               	rrf	___lmul@multiplier+1,f
  7126  097A  0CA1               	rrf	___lmul@multiplier,f
  7127  097B  0B89               	decfsz	9,f
  7128  097C  2977               	goto	u4875
  7129  097D  0824               	movf	___lmul@multiplier+3,w
  7130  097E  0423               	iorwf	___lmul@multiplier+2,w
  7131  097F  0422               	iorwf	___lmul@multiplier+1,w
  7132  0980  0421               	iorwf	___lmul@multiplier,w
  7133  0981  1D03               	skipz
  7134  0982  2965               	goto	l5494
  7135  0983  082C               	movf	___lmul@product+3,w
  7136  0984  00A4               	movwf	?___lmul+3
  7137  0985  082B               	movf	___lmul@product+2,w
  7138  0986  00A3               	movwf	?___lmul+2
  7139  0987  082A               	movf	___lmul@product+1,w
  7140  0988  00A2               	movwf	?___lmul+1
  7141  0989  0829               	movf	___lmul@product,w
  7142  098A  00A1               	movwf	?___lmul
  7143  098B  0008               	return
  7144  098C                     __end_of___lmul:	
  7145                           
  7146                           	psect	text13
  7147  1620                     __ptext13:	
  7148 ;; *************** function _RF_RxPayload *****************
  7149 ;; Defined at:
  7150 ;;		line 186 in file "nrf24.c"
  7151 ;; Parameters:    Size  Location     Type
  7152 ;;  payload         1    wreg     PTR unsigned char 
  7153 ;;		 -> Wireless_checkDataReceived@data(4), 
  7154 ;;  payloadSize     1   15[BANK0 ] unsigned char 
  7155 ;; Auto vars:     Size  Location     Type
  7156 ;;  payload         1   18[BANK0 ] PTR unsigned char 
  7157 ;;		 -> Wireless_checkDataReceived@data(4), 
  7158 ;; Return value:  Size  Location     Type
  7159 ;;                  1    wreg      void 
  7160 ;; Registers used:
  7161 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7162 ;; Tracked objects:
  7163 ;;		On entry : 0/0
  7164 ;;		On exit  : 0/0
  7165 ;;		Unchanged: 0/0
  7166 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7167 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7168 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7169 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7170 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7171 ;;Total ram usage:        4 bytes
  7172 ;; Hardware stack levels used:    1
  7173 ;; Hardware stack levels required when called:    8
  7174 ;; This function calls:
  7175 ;;		_RF_ReadRegisterData
  7176 ;; This function is called by:
  7177 ;;		_Wireless_checkDataReceived
  7178 ;; This function uses a non-reentrant model
  7179 ;;
  7180                           
  7181                           
  7182                           ;psect for function _RF_RxPayload
  7183  1620                     _RF_RxPayload:	
  7184                           
  7185                           ;incstack = 0
  7186                           ; Regs used in _RF_RxPayload: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  7187                           ;RF_RxPayload@payload stored from wreg
  7188  1620  0020               	movlb	0	; select bank0
  7189  1621  00B2               	movwf	RF_RxPayload@payload
  7190                           
  7191                           ;nrf24.c: 187: do { LATCbits.LATC2 = 0; } while(0);
  7192  1622  0022               	movlb	2	; select bank2
  7193  1623  110E               	bcf	14,2	;volatile
  7194                           
  7195                           ;nrf24.c: 188: RF_ReadRegisterData(0x61, payload, payloadSize);
  7196  1624  0020               	movlb	0	; select bank0
  7197  1625  0832               	movf	RF_RxPayload@payload,w
  7198  1626  00B0               	movwf	??_RF_RxPayload
  7199  1627  0830               	movf	??_RF_RxPayload,w
  7200  1628  00AA               	movwf	RF_ReadRegisterData@buf
  7201  1629  082F               	movf	RF_RxPayload@payloadSize,w
  7202  162A  00B1               	movwf	??_RF_RxPayload+1
  7203  162B  0831               	movf	??_RF_RxPayload+1,w
  7204  162C  00AB               	movwf	RF_ReadRegisterData@bufSize
  7205  162D  3061               	movlw	97
  7206  162E  3197  27C4         	fcall	_RF_ReadRegisterData
  7207                           
  7208                           ;nrf24.c: 189: do { LATCbits.LATC2 = 1; } while(0);
  7209  1630  0022               	movlb	2	; select bank2
  7210  1631  150E               	bsf	14,2	;volatile
  7211  1632  0008               	return
  7212  1633                     __end_of_RF_RxPayload:	
  7213                           
  7214                           	psect	text14
  7215  17C4                     __ptext14:	
  7216 ;; *************** function _RF_ReadRegisterData *****************
  7217 ;; Defined at:
  7218 ;;		line 99 in file "nrf24.c"
  7219 ;; Parameters:    Size  Location     Type
  7220 ;;  reg             1    wreg     unsigned char 
  7221 ;;  buf             1   10[BANK0 ] PTR unsigned char 
  7222 ;;		 -> Wireless_checkDataReceived@data(4), Wireless_wake@reg(1), Wireless_sleep@reg(1), 
  7223 ;;  bufSize         1   11[BANK0 ] unsigned char 
  7224 ;; Auto vars:     Size  Location     Type
  7225 ;;  reg             1   14[BANK0 ] unsigned char 
  7226 ;; Return value:  Size  Location     Type
  7227 ;;                  1    wreg      void 
  7228 ;; Registers used:
  7229 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7230 ;; Tracked objects:
  7231 ;;		On entry : 0/0
  7232 ;;		On exit  : 0/0
  7233 ;;		Unchanged: 0/0
  7234 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7235 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7236 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7237 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7238 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7239 ;;Total ram usage:        5 bytes
  7240 ;; Hardware stack levels used:    1
  7241 ;; Hardware stack levels required when called:    7
  7242 ;; This function calls:
  7243 ;;		_SPI_WriteRead
  7244 ;;		_SPI_WriteReadBuffer
  7245 ;; This function is called by:
  7246 ;;		_RF_RxPayload
  7247 ;;		_Wireless_sleep
  7248 ;;		_Wireless_wake
  7249 ;; This function uses a non-reentrant model
  7250 ;;
  7251                           
  7252                           
  7253                           ;psect for function _RF_ReadRegisterData
  7254  17C4                     _RF_ReadRegisterData:	
  7255                           
  7256                           ;incstack = 0
  7257                           ; Regs used in _RF_ReadRegisterData: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  7258                           ;RF_ReadRegisterData@reg stored from wreg
  7259  17C4  0020               	movlb	0	; select bank0
  7260  17C5  00AE               	movwf	RF_ReadRegisterData@reg
  7261                           
  7262                           ;nrf24.c: 100: do { LATCbits.LATC1 = 0; } while(0);
  7263  17C6  0022               	movlb	2	; select bank2
  7264  17C7  108E               	bcf	14,1	;volatile
  7265                           
  7266                           ;nrf24.c: 101: (void)SPI_WriteRead(0x00|reg);
  7267  17C8  0020               	movlb	0	; select bank0
  7268  17C9  082E               	movf	RF_ReadRegisterData@reg,w
  7269  17CA  3194  24F2  3197   	fcall	_SPI_WriteRead
  7270                           
  7271                           ;nrf24.c: 102: SPI_WriteReadBuffer(buf, buf, bufSize);
  7272  17CD  0020               	movlb	0	; select bank0
  7273  17CE  082A               	movf	RF_ReadRegisterData@buf,w
  7274  17CF  00AC               	movwf	??_RF_ReadRegisterData
  7275  17D0  082C               	movf	??_RF_ReadRegisterData,w
  7276  17D1  00A3               	movwf	SPI_WriteReadBuffer@bufIn
  7277  17D2  082B               	movf	RF_ReadRegisterData@bufSize,w
  7278  17D3  00AD               	movwf	??_RF_ReadRegisterData+1
  7279  17D4  082D               	movf	??_RF_ReadRegisterData+1,w
  7280  17D5  00A4               	movwf	SPI_WriteReadBuffer@bufSize
  7281  17D6  082A               	movf	RF_ReadRegisterData@buf,w
  7282  17D7  3188  202B  3197   	fcall	_SPI_WriteReadBuffer
  7283                           
  7284                           ;nrf24.c: 103: do { LATCbits.LATC1 = 1; } while(0);
  7285  17DA  0022               	movlb	2	; select bank2
  7286  17DB  148E               	bsf	14,1	;volatile
  7287                           
  7288                           ;nrf24.c: 104: _delay((unsigned long)((10)*(8000000/4000000.0)));
  7289  17DC  3006               	movlw	6
  7290  17DD                     u6577:	
  7291  17DD  0B89               	decfsz	9,f
  7292  17DE  2FDD               	goto	u6577
  7293  17DF  3200               	nop2
  7294  17E0  0008               	return
  7295  17E1                     __end_of_RF_ReadRegisterData:	
  7296                           
  7297                           	psect	text15
  7298  082B                     __ptext15:	
  7299 ;; *************** function _SPI_WriteReadBuffer *****************
  7300 ;; Defined at:
  7301 ;;		line 43 in file "nrf24.c"
  7302 ;; Parameters:    Size  Location     Type
  7303 ;;  bufOut          1    wreg     PTR unsigned char 
  7304 ;;		 -> Wireless_checkDataReceived@data(4), Wireless_wake@reg(1), Wireless_sleep@reg(1), 
  7305 ;;  bufIn           1    3[BANK0 ] PTR unsigned char 
  7306 ;;		 -> Wireless_checkDataReceived@data(4), Wireless_wake@reg(1), Wireless_sleep@reg(1), 
  7307 ;;  bufSize         1    4[BANK0 ] unsigned char 
  7308 ;; Auto vars:     Size  Location     Type
  7309 ;;  bufOut          1    8[BANK0 ] PTR unsigned char 
  7310 ;;		 -> Wireless_checkDataReceived@data(4), Wireless_wake@reg(1), Wireless_sleep@reg(1), 
  7311 ;;  i               1    9[BANK0 ] unsigned char 
  7312 ;; Return value:  Size  Location     Type
  7313 ;;                  1    wreg      void 
  7314 ;; Registers used:
  7315 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7316 ;; Tracked objects:
  7317 ;;		On entry : 0/0
  7318 ;;		On exit  : 0/0
  7319 ;;		Unchanged: 0/0
  7320 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7321 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7322 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7323 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7324 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7325 ;;Total ram usage:        7 bytes
  7326 ;; Hardware stack levels used:    1
  7327 ;; Hardware stack levels required when called:    6
  7328 ;; This function calls:
  7329 ;;		_SPI_WriteRead
  7330 ;; This function is called by:
  7331 ;;		_RF_ReadRegisterData
  7332 ;; This function uses a non-reentrant model
  7333 ;;
  7334                           
  7335                           
  7336                           ;psect for function _SPI_WriteReadBuffer
  7337  082B                     _SPI_WriteReadBuffer:	
  7338                           
  7339                           ;incstack = 0
  7340                           ; Regs used in _SPI_WriteReadBuffer: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  7341                           ;SPI_WriteReadBuffer@bufOut stored from wreg
  7342  082B  0020               	movlb	0	; select bank0
  7343  082C  00A8               	movwf	SPI_WriteReadBuffer@bufOut
  7344                           
  7345                           ;nrf24.c: 44: uint8_t i;
  7346                           ;nrf24.c: 46: for(i=0;i<bufSize;i++) {
  7347  082D  01A9               	clrf	SPI_WriteReadBuffer@i
  7348  082E                     l5228:	
  7349  082E  0824               	movf	SPI_WriteReadBuffer@bufSize,w
  7350  082F  0229               	subwf	SPI_WriteReadBuffer@i,w
  7351  0830  1803               	btfsc	3,0
  7352  0831  0008               	return
  7353                           
  7354                           ;nrf24.c: 47: bufIn[i] = SPI_WriteRead(bufOut[i]);
  7355  0832  0829               	movf	SPI_WriteReadBuffer@i,w
  7356  0833  0728               	addwf	SPI_WriteReadBuffer@bufOut,w
  7357  0834  00A5               	movwf	??_SPI_WriteReadBuffer
  7358  0835  0825               	movf	??_SPI_WriteReadBuffer,w
  7359  0836  0086               	movwf	6
  7360  0837  0187               	clrf	7
  7361  0838  0801               	movf	1,w
  7362  0839  3194  24F2  3188   	fcall	_SPI_WriteRead
  7363  083C  0020               	movlb	0	; select bank0
  7364  083D  00A6               	movwf	??_SPI_WriteReadBuffer+1
  7365  083E  0829               	movf	SPI_WriteReadBuffer@i,w
  7366  083F  0723               	addwf	SPI_WriteReadBuffer@bufIn,w
  7367  0840  00A7               	movwf	??_SPI_WriteReadBuffer+2
  7368  0841  0827               	movf	??_SPI_WriteReadBuffer+2,w
  7369  0842  0086               	movwf	6
  7370  0843  0187               	clrf	7
  7371  0844  0826               	movf	??_SPI_WriteReadBuffer+1,w
  7372  0845  0081               	movwf	1
  7373  0846  3001               	movlw	1
  7374  0847  00A5               	movwf	??_SPI_WriteReadBuffer
  7375  0848  0825               	movf	??_SPI_WriteReadBuffer,w
  7376  0849  07A9               	addwf	SPI_WriteReadBuffer@i,f
  7377  084A  282E               	goto	l5228
  7378  084B                     __end_of_SPI_WriteReadBuffer:	
  7379                           
  7380                           	psect	text16
  7381  17A7                     __ptext16:	
  7382 ;; *************** function _RF_DataIsReady *****************
  7383 ;; Defined at:
  7384 ;;		line 202 in file "nrf24.c"
  7385 ;; Parameters:    Size  Location     Type
  7386 ;;  channel         1    wreg     PTR unsigned char 
  7387 ;;		 -> Wireless_checkDataReceived@channel(1), 
  7388 ;; Auto vars:     Size  Location     Type
  7389 ;;  channel         1    7[BANK0 ] PTR unsigned char 
  7390 ;;		 -> Wireless_checkDataReceived@channel(1), 
  7391 ;;  status          1    8[BANK0 ] unsigned char 
  7392 ;; Return value:  Size  Location     Type
  7393 ;;                  1    wreg      unsigned char 
  7394 ;; Registers used:
  7395 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7396 ;; Tracked objects:
  7397 ;;		On entry : 0/0
  7398 ;;		On exit  : 0/0
  7399 ;;		Unchanged: 0/0
  7400 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7401 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7402 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7403 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7404 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7405 ;;Total ram usage:        3 bytes
  7406 ;; Hardware stack levels used:    1
  7407 ;; Hardware stack levels required when called:    7
  7408 ;; This function calls:
  7409 ;;		_RF_ReadRegister
  7410 ;; This function is called by:
  7411 ;;		_Wireless_checkDataReceived
  7412 ;; This function uses a non-reentrant model
  7413 ;;
  7414                           
  7415                           
  7416                           ;psect for function _RF_DataIsReady
  7417  17A7                     _RF_DataIsReady:	
  7418                           
  7419                           ;incstack = 0
  7420                           ; Regs used in _RF_DataIsReady: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  7421                           ;RF_DataIsReady@channel stored from wreg
  7422  17A7  0020               	movlb	0	; select bank0
  7423  17A8  00A7               	movwf	RF_DataIsReady@channel
  7424                           
  7425                           ;nrf24.c: 204: char status;
  7426                           ;nrf24.c: 205: status=RF_ReadRegister(0x07);
  7427  17A9  3007               	movlw	7
  7428  17AA  3196  26E9  3197   	fcall	_RF_ReadRegister
  7429  17AD  0020               	movlb	0	; select bank0
  7430  17AE  00A6               	movwf	??_RF_DataIsReady
  7431  17AF  0826               	movf	??_RF_DataIsReady,w
  7432  17B0  00A8               	movwf	RF_DataIsReady@status
  7433                           
  7434                           ;nrf24.c: 206: status&=0x0E;
  7435  17B1  300E               	movlw	14
  7436  17B2  00A6               	movwf	??_RF_DataIsReady
  7437  17B3  0826               	movf	??_RF_DataIsReady,w
  7438  17B4  05A8               	andwf	RF_DataIsReady@status,f
  7439                           
  7440                           ;nrf24.c: 207: if(status==0x0E)
  7441  17B5  300E               	movlw	14
  7442  17B6  0628               	xorwf	RF_DataIsReady@status,w
  7443  17B7  1D03               	btfss	3,2
  7444  17B8  2FBB               	goto	l5480
  7445                           
  7446                           ;nrf24.c: 208: return 0;
  7447  17B9  3000               	movlw	0
  7448  17BA  0008               	return
  7449  17BB                     l5480:	
  7450                           
  7451                           ;nrf24.c: 209: else
  7452                           ;nrf24.c: 210: *channel=status>>1;
  7453  17BB  3628               	lsrf	RF_DataIsReady@status,w
  7454  17BC  00A6               	movwf	??_RF_DataIsReady
  7455  17BD  0827               	movf	RF_DataIsReady@channel,w
  7456  17BE  0086               	movwf	6
  7457  17BF  0187               	clrf	7
  7458  17C0  0826               	movf	??_RF_DataIsReady,w
  7459  17C1  0081               	movwf	1
  7460                           
  7461                           ;nrf24.c: 211: return 1;
  7462  17C2  3001               	movlw	1
  7463  17C3  0008               	return
  7464  17C4                     __end_of_RF_DataIsReady:	
  7465                           
  7466                           	psect	text17
  7467  16E9                     __ptext17:	
  7468 ;; *************** function _RF_ReadRegister *****************
  7469 ;; Defined at:
  7470 ;;		line 82 in file "nrf24.c"
  7471 ;; Parameters:    Size  Location     Type
  7472 ;;  reg             1    wreg     unsigned char 
  7473 ;; Auto vars:     Size  Location     Type
  7474 ;;  reg             1    4[BANK0 ] unsigned char 
  7475 ;;  val             1    5[BANK0 ] unsigned char 
  7476 ;; Return value:  Size  Location     Type
  7477 ;;                  1    wreg      unsigned char 
  7478 ;; Registers used:
  7479 ;;		wreg, status,2, status,0, pclath, cstack
  7480 ;; Tracked objects:
  7481 ;;		On entry : 0/0
  7482 ;;		On exit  : 0/0
  7483 ;;		Unchanged: 0/0
  7484 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7485 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7486 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7487 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7488 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7489 ;;Total ram usage:        3 bytes
  7490 ;; Hardware stack levels used:    1
  7491 ;; Hardware stack levels required when called:    6
  7492 ;; This function calls:
  7493 ;;		_SPI_WriteRead
  7494 ;; This function is called by:
  7495 ;;		_RF_DataIsReady
  7496 ;; This function uses a non-reentrant model
  7497 ;;
  7498                           
  7499                           
  7500                           ;psect for function _RF_ReadRegister
  7501  16E9                     _RF_ReadRegister:	
  7502                           
  7503                           ;incstack = 0
  7504                           ; Regs used in _RF_ReadRegister: [wreg+status,2+status,0+pclath+cstack]
  7505                           ;RF_ReadRegister@reg stored from wreg
  7506  16E9  0020               	movlb	0	; select bank0
  7507  16EA  00A4               	movwf	RF_ReadRegister@reg
  7508                           
  7509                           ;nrf24.c: 83: uint8_t val;
  7510                           ;nrf24.c: 85: do { LATCbits.LATC1 = 0; } while(0);
  7511  16EB  0022               	movlb	2	; select bank2
  7512  16EC  108E               	bcf	14,1	;volatile
  7513                           
  7514                           ;nrf24.c: 86: (void)SPI_WriteRead(reg);
  7515  16ED  0020               	movlb	0	; select bank0
  7516  16EE  0824               	movf	RF_ReadRegister@reg,w
  7517  16EF  3194  24F2  3196   	fcall	_SPI_WriteRead
  7518                           
  7519                           ;nrf24.c: 87: val = SPI_WriteRead(0);
  7520  16F2  3000               	movlw	0
  7521  16F3  3194  24F2  3196   	fcall	_SPI_WriteRead
  7522  16F6  0020               	movlb	0	; select bank0
  7523  16F7  00A3               	movwf	??_RF_ReadRegister
  7524  16F8  0823               	movf	??_RF_ReadRegister,w
  7525  16F9  00A5               	movwf	RF_ReadRegister@val
  7526                           
  7527                           ;nrf24.c: 88: do { LATCbits.LATC1 = 1; } while(0);
  7528  16FA  0022               	movlb	2	; select bank2
  7529  16FB  148E               	bsf	14,1	;volatile
  7530                           
  7531                           ;nrf24.c: 89: _delay((unsigned long)((10)*(8000000/4000000.0)));
  7532  16FC  3006               	movlw	6
  7533  16FD                     u6587:	
  7534  16FD  0B89               	decfsz	9,f
  7535  16FE  2EFD               	goto	u6587
  7536  16FF  3200               	nop2
  7537                           
  7538                           ;nrf24.c: 90: return val;
  7539  1700  0020               	movlb	0	; select bank0
  7540  1701  0825               	movf	RF_ReadRegister@val,w
  7541  1702  0008               	return
  7542  1703                     __end_of_RF_ReadRegister:	
  7543                           
  7544                           	psect	text18
  7545  1671                     __ptext18:	
  7546 ;; *************** function _DOOR_update *****************
  7547 ;; Defined at:
  7548 ;;		line 16 in file "doorlogic.c"
  7549 ;; Parameters:    Size  Location     Type
  7550 ;;  openAngle       1    wreg     unsigned char 
  7551 ;;  closedAngle     1    7[BANK0 ] unsigned char 
  7552 ;; Auto vars:     Size  Location     Type
  7553 ;;  openAngle       1    9[BANK0 ] unsigned char 
  7554 ;; Return value:  Size  Location     Type
  7555 ;;                  1    wreg      void 
  7556 ;; Registers used:
  7557 ;;		wreg, status,2, status,0, pclath, cstack
  7558 ;; Tracked objects:
  7559 ;;		On entry : 0/0
  7560 ;;		On exit  : 0/0
  7561 ;;		Unchanged: 0/0
  7562 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7563 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7564 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7565 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7566 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7567 ;;Total ram usage:        3 bytes
  7568 ;; Hardware stack levels used:    1
  7569 ;; Hardware stack levels required when called:    6
  7570 ;; This function calls:
  7571 ;;		_Storage_save
  7572 ;; This function is called by:
  7573 ;;		_Wireless_checkDataReceived
  7574 ;; This function uses a non-reentrant model
  7575 ;;
  7576                           
  7577                           
  7578                           ;psect for function _DOOR_update
  7579  1671                     _DOOR_update:	
  7580                           
  7581                           ;incstack = 0
  7582                           ; Regs used in _DOOR_update: [wreg+status,2+status,0+pclath+cstack]
  7583                           ;DOOR_update@openAngle stored from wreg
  7584  1671  0020               	movlb	0	; select bank0
  7585  1672  00A9               	movwf	DOOR_update@openAngle
  7586                           
  7587                           ;doorlogic.c: 18: doorOpenAngle=openAngle;
  7588  1673  0829               	movf	DOOR_update@openAngle,w
  7589  1674  00A8               	movwf	??_DOOR_update
  7590  1675  0828               	movf	??_DOOR_update,w
  7591  1676  0021               	movlb	1	; select bank1
  7592  1677  00E6               	movwf	_doorOpenAngle^(0+128)
  7593                           
  7594                           ;doorlogic.c: 19: doorClosedAngle=closedAngle;
  7595  1678  0020               	movlb	0	; select bank0
  7596  1679  0827               	movf	DOOR_update@closedAngle,w
  7597  167A  00A8               	movwf	??_DOOR_update
  7598  167B  0828               	movf	??_DOOR_update,w
  7599  167C  0021               	movlb	1	; select bank1
  7600  167D  00E5               	movwf	_doorClosedAngle^(0+128)
  7601                           
  7602                           ;doorlogic.c: 20: Storage_save(openAngle,closedAngle);
  7603  167E  0020               	movlb	0	; select bank0
  7604  167F  0827               	movf	DOOR_update@closedAngle,w
  7605  1680  00A8               	movwf	??_DOOR_update
  7606  1681  0828               	movf	??_DOOR_update,w
  7607  1682  00A4               	movwf	Storage_save@closeAngle
  7608  1683  0829               	movf	DOOR_update@openAngle,w
  7609  1684  3196  26CF         	fcall	_Storage_save
  7610  1686  0008               	return
  7611  1687                     __end_of_DOOR_update:	
  7612                           
  7613                           	psect	text19
  7614  16CF                     __ptext19:	
  7615 ;; *************** function _Storage_save *****************
  7616 ;; Defined at:
  7617 ;;		line 30 in file "storage.c"
  7618 ;; Parameters:    Size  Location     Type
  7619 ;;  openAngle       1    wreg     unsigned char 
  7620 ;;  closeAngle      1    4[BANK0 ] unsigned char 
  7621 ;; Auto vars:     Size  Location     Type
  7622 ;;  openAngle       1    6[BANK0 ] unsigned char 
  7623 ;; Return value:  Size  Location     Type
  7624 ;;                  1    wreg      void 
  7625 ;; Registers used:
  7626 ;;		wreg, status,2, status,0, pclath, cstack
  7627 ;; Tracked objects:
  7628 ;;		On entry : 0/0
  7629 ;;		On exit  : 0/0
  7630 ;;		Unchanged: 0/0
  7631 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7632 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7633 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7634 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7635 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7636 ;;Total ram usage:        3 bytes
  7637 ;; Hardware stack levels used:    1
  7638 ;; Hardware stack levels required when called:    5
  7639 ;; This function calls:
  7640 ;;		_DATAEE_WriteByte
  7641 ;; This function is called by:
  7642 ;;		_DOOR_update
  7643 ;; This function uses a non-reentrant model
  7644 ;;
  7645                           
  7646                           
  7647                           ;psect for function _Storage_save
  7648  16CF                     _Storage_save:	
  7649                           
  7650                           ;incstack = 0
  7651                           ; Regs used in _Storage_save: [wreg+status,2+status,0+pclath+cstack]
  7652                           ;Storage_save@openAngle stored from wreg
  7653  16CF  0020               	movlb	0	; select bank0
  7654  16D0  00A6               	movwf	Storage_save@openAngle
  7655                           
  7656                           ;storage.c: 32: DATAEE_WriteByte(1, openAngle);
  7657  16D1  0826               	movf	Storage_save@openAngle,w
  7658  16D2  00A5               	movwf	??_Storage_save
  7659  16D3  0825               	movf	??_Storage_save,w
  7660  16D4  00A1               	movwf	DATAEE_WriteByte@bData
  7661  16D5  3001               	movlw	1
  7662  16D6  3188  2090  3196   	fcall	_DATAEE_WriteByte
  7663                           
  7664                           ;storage.c: 33: DATAEE_WriteByte(2, closeAngle);
  7665  16D9  0020               	movlb	0	; select bank0
  7666  16DA  0824               	movf	Storage_save@closeAngle,w
  7667  16DB  00A5               	movwf	??_Storage_save
  7668  16DC  0825               	movf	??_Storage_save,w
  7669  16DD  00A1               	movwf	DATAEE_WriteByte@bData
  7670  16DE  3002               	movlw	2
  7671  16DF  3188  2090  3196   	fcall	_DATAEE_WriteByte
  7672                           
  7673                           ;storage.c: 34: DATAEE_WriteByte(0 , 1);
  7674  16E2  0020               	movlb	0	; select bank0
  7675  16E3  01A1               	clrf	DATAEE_WriteByte@bData
  7676  16E4  0AA1               	incf	DATAEE_WriteByte@bData,f
  7677  16E5  3000               	movlw	0
  7678  16E6  3188  2090         	fcall	_DATAEE_WriteByte
  7679  16E8  0008               	return
  7680  16E9                     __end_of_Storage_save:	
  7681                           
  7682                           	psect	text20
  7683  14DA                     __ptext20:	
  7684 ;; *************** function _DOOR_resetPos *****************
  7685 ;; Defined at:
  7686 ;;		line 65 in file "doorlogic.c"
  7687 ;; Parameters:    Size  Location     Type
  7688 ;;		None
  7689 ;; Auto vars:     Size  Location     Type
  7690 ;;		None
  7691 ;; Return value:  Size  Location     Type
  7692 ;;                  1    wreg      enum E3332
  7693 ;; Registers used:
  7694 ;;		wreg, status,2
  7695 ;; Tracked objects:
  7696 ;;		On entry : 0/0
  7697 ;;		On exit  : 0/0
  7698 ;;		Unchanged: 0/0
  7699 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7700 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7701 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7702 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7703 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7704 ;;Total ram usage:        0 bytes
  7705 ;; Hardware stack levels used:    1
  7706 ;; Hardware stack levels required when called:    4
  7707 ;; This function calls:
  7708 ;;		Nothing
  7709 ;; This function is called by:
  7710 ;;		_main
  7711 ;;		_Wireless_checkDataReceived
  7712 ;; This function uses a non-reentrant model
  7713 ;;
  7714                           
  7715                           
  7716                           ;psect for function _DOOR_resetPos
  7717  14DA                     _DOOR_resetPos:	
  7718                           
  7719                           ;doorlogic.c: 67: initialised=0;
  7720                           
  7721                           ;incstack = 0
  7722                           ; Regs used in _DOOR_resetPos: [wreg+status,2]
  7723  14DA  0021               	movlb	1	; select bank1
  7724  14DB  01DB               	clrf	_initialised^(0+128)
  7725                           
  7726                           ;doorlogic.c: 68: return(DOOR_CLOSED);
  7727  14DC  3000               	movlw	0
  7728  14DD  0008               	return
  7729  14DE                     __end_of_DOOR_resetPos:	
  7730                           
  7731                           	psect	text21
  7732  0A05                     __ptext21:	
  7733 ;; *************** function _Sensor_getSupplyVoltage *****************
  7734 ;; Defined at:
  7735 ;;		line 6 in file "sensors.c"
  7736 ;; Parameters:    Size  Location     Type
  7737 ;;		None
  7738 ;; Auto vars:     Size  Location     Type
  7739 ;;  voltage         3   36[BANK0 ] float 
  7740 ;;  res             2   39[BANK0 ] unsigned short 
  7741 ;; Return value:  Size  Location     Type
  7742 ;;                  3   33[BANK0 ] float 
  7743 ;; Registers used:
  7744 ;;		wreg, status,2, status,0, pclath, cstack
  7745 ;; Tracked objects:
  7746 ;;		On entry : 0/0
  7747 ;;		On exit  : 0/0
  7748 ;;		Unchanged: 0/0
  7749 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7750 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7751 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7752 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7753 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7754 ;;Total ram usage:        8 bytes
  7755 ;; Hardware stack levels used:    1
  7756 ;; Hardware stack levels required when called:    6
  7757 ;; This function calls:
  7758 ;;		_ADC_GetConversionResult
  7759 ;;		_ADC_IsConversionDone
  7760 ;;		_ADC_SelectChannel
  7761 ;;		_ADC_StartConversion
  7762 ;;		_FVR_IsOutputReady
  7763 ;;		_Sensor_peripheralSleep
  7764 ;;		_Sensor_peripheralWake
  7765 ;;		___ftdiv
  7766 ;;		___lwtoft
  7767 ;; This function is called by:
  7768 ;;		_Wireless_packageData
  7769 ;; This function uses a non-reentrant model
  7770 ;;
  7771                           
  7772                           
  7773                           ;psect for function _Sensor_getSupplyVoltage
  7774  0A05                     _Sensor_getSupplyVoltage:	
  7775                           
  7776                           ;sensors.c: 8: u16 res;
  7777                           ;sensors.c: 9: float voltage;
  7778                           ;sensors.c: 11: Sensor_peripheralWake();
  7779                           
  7780                           ;incstack = 0
  7781                           ; Regs used in _Sensor_getSupplyVoltage: [wreg+status,2+status,0+pclath+cstack]
  7782  0A05  3194  24E7  318A   	fcall	_Sensor_peripheralWake
  7783  0A08                     l5648:	
  7784                           ;sensors.c: 12: while(!FVR_IsOutputReady());
  7785                           
  7786  0A08  3194  24F8  318A   	fcall	_FVR_IsOutputReady
  7787  0A0B  3A00               	xorlw	0
  7788  0A0C  1903               	skipnz
  7789  0A0D  2A08               	goto	l5648
  7790                           
  7791                           ;sensors.c: 13: ADC_SelectChannel(channel_FVR);
  7792  0A0E  301F               	movlw	31
  7793  0A0F  3195  25B9  318A   	fcall	_ADC_SelectChannel
  7794                           
  7795                           ;sensors.c: 14: ADC_StartConversion();
  7796  0A12  3194  24C8  318A   	fcall	_ADC_StartConversion
  7797  0A15                     l5654:	
  7798                           ;sensors.c: 15: while(!ADC_IsConversionDone());
  7799                           
  7800  0A15  3195  2512  318A   	fcall	_ADC_IsConversionDone
  7801  0A18  3A00               	xorlw	0
  7802  0A19  1903               	skipnz
  7803  0A1A  2A15               	goto	l5654
  7804                           
  7805                           ;sensors.c: 16: Sensor_peripheralSleep();
  7806  0A1B  3194  24E2  318A   	fcall	_Sensor_peripheralSleep
  7807                           
  7808                           ;sensors.c: 17: res=ADC_GetConversionResult();
  7809  0A1E  3195  255E  318A   	fcall	_ADC_GetConversionResult
  7810  0A21  0020               	movlb	0	; select bank0
  7811  0A22  0822               	movf	?_ADC_GetConversionResult+1,w
  7812  0A23  00C8               	movwf	Sensor_getSupplyVoltage@res+1
  7813  0A24  0821               	movf	?_ADC_GetConversionResult,w
  7814  0A25  00C7               	movwf	Sensor_getSupplyVoltage@res
  7815                           
  7816                           ;sensors.c: 19: voltage= (float) 1.024 * 1024/(float)res;
  7817  0A26  0848               	movf	Sensor_getSupplyVoltage@res+1,w
  7818  0A27  00AA               	movwf	___lwtoft@c+1
  7819  0A28  0847               	movf	Sensor_getSupplyVoltage@res,w
  7820  0A29  00A9               	movwf	___lwtoft@c
  7821  0A2A  3196  2646  318A   	fcall	___lwtoft
  7822  0A2D  0020               	movlb	0	; select bank0
  7823  0A2E  0829               	movf	?___lwtoft,w
  7824  0A2F  00B1               	movwf	___ftdiv@f2
  7825  0A30  082A               	movf	?___lwtoft+1,w
  7826  0A31  00B2               	movwf	___ftdiv@f2+1
  7827  0A32  082B               	movf	?___lwtoft+2,w
  7828  0A33  00B3               	movwf	___ftdiv@f2+2
  7829  0A34  3012               	movlw	18
  7830  0A35  00B4               	movwf	___ftdiv@f1
  7831  0A36  3083               	movlw	131
  7832  0A37  00B5               	movwf	___ftdiv@f1+1
  7833  0A38  3044               	movlw	68
  7834  0A39  00B6               	movwf	___ftdiv@f1+2
  7835  0A3A  318E  26A3         	fcall	___ftdiv
  7836  0A3C  0020               	movlb	0	; select bank0
  7837  0A3D  0831               	movf	?___ftdiv,w
  7838  0A3E  00C4               	movwf	Sensor_getSupplyVoltage@voltage
  7839  0A3F  0832               	movf	?___ftdiv+1,w
  7840  0A40  00C5               	movwf	Sensor_getSupplyVoltage@voltage+1
  7841  0A41  0833               	movf	?___ftdiv+2,w
  7842  0A42  00C6               	movwf	Sensor_getSupplyVoltage@voltage+2
  7843                           
  7844                           ;sensors.c: 20: return(voltage);
  7845  0A43  0844               	movf	Sensor_getSupplyVoltage@voltage,w
  7846  0A44  00C1               	movwf	?_Sensor_getSupplyVoltage
  7847  0A45  0845               	movf	Sensor_getSupplyVoltage@voltage+1,w
  7848  0A46  00C2               	movwf	?_Sensor_getSupplyVoltage+1
  7849  0A47  0846               	movf	Sensor_getSupplyVoltage@voltage+2,w
  7850  0A48  00C3               	movwf	?_Sensor_getSupplyVoltage+2
  7851  0A49  0008               	return
  7852  0A4A                     __end_of_Sensor_getSupplyVoltage:	
  7853                           
  7854                           	psect	text22
  7855  14E7                     __ptext22:	
  7856 ;; *************** function _Sensor_peripheralWake *****************
  7857 ;; Defined at:
  7858 ;;		line 32 in file "sensors.c"
  7859 ;; Parameters:    Size  Location     Type
  7860 ;;		None
  7861 ;; Auto vars:     Size  Location     Type
  7862 ;;		None
  7863 ;; Return value:  Size  Location     Type
  7864 ;;                  1    wreg      void 
  7865 ;; Registers used:
  7866 ;;		None
  7867 ;; Tracked objects:
  7868 ;;		On entry : 0/0
  7869 ;;		On exit  : 0/0
  7870 ;;		Unchanged: 0/0
  7871 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7872 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7873 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7874 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7875 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7876 ;;Total ram usage:        0 bytes
  7877 ;; Hardware stack levels used:    1
  7878 ;; Hardware stack levels required when called:    4
  7879 ;; This function calls:
  7880 ;;		Nothing
  7881 ;; This function is called by:
  7882 ;;		_Sensor_getSupplyVoltage
  7883 ;; This function uses a non-reentrant model
  7884 ;;
  7885                           
  7886                           
  7887                           ;psect for function _Sensor_peripheralWake
  7888  14E7                     _Sensor_peripheralWake:	
  7889                           
  7890                           ;sensors.c: 34: ADCON0bits.ADON=1;
  7891                           
  7892                           ;incstack = 0
  7893                           ; Regs used in _Sensor_peripheralWake: []
  7894  14E7  0021               	movlb	1	; select bank1
  7895  14E8  141D               	bsf	29,0	;volatile
  7896                           
  7897                           ;sensors.c: 35: FVRCONbits.FVREN=1;
  7898  14E9  0022               	movlb	2	; select bank2
  7899  14EA  1797               	bsf	23,7	;volatile
  7900  14EB  0008               	return
  7901  14EC                     __end_of_Sensor_peripheralWake:	
  7902                           
  7903                           	psect	text23
  7904  14E2                     __ptext23:	
  7905 ;; *************** function _Sensor_peripheralSleep *****************
  7906 ;; Defined at:
  7907 ;;		line 26 in file "sensors.c"
  7908 ;; Parameters:    Size  Location     Type
  7909 ;;		None
  7910 ;; Auto vars:     Size  Location     Type
  7911 ;;		None
  7912 ;; Return value:  Size  Location     Type
  7913 ;;                  1    wreg      void 
  7914 ;; Registers used:
  7915 ;;		None
  7916 ;; Tracked objects:
  7917 ;;		On entry : 0/0
  7918 ;;		On exit  : 0/0
  7919 ;;		Unchanged: 0/0
  7920 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7921 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7922 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7923 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7924 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7925 ;;Total ram usage:        0 bytes
  7926 ;; Hardware stack levels used:    1
  7927 ;; Hardware stack levels required when called:    4
  7928 ;; This function calls:
  7929 ;;		Nothing
  7930 ;; This function is called by:
  7931 ;;		_Sensor_getSupplyVoltage
  7932 ;;		_main
  7933 ;; This function uses a non-reentrant model
  7934 ;;
  7935                           
  7936                           
  7937                           ;psect for function _Sensor_peripheralSleep
  7938  14E2                     _Sensor_peripheralSleep:	
  7939                           
  7940                           ;sensors.c: 28: ADCON0bits.ADON=0;
  7941                           
  7942                           ;incstack = 0
  7943                           ; Regs used in _Sensor_peripheralSleep: []
  7944  14E2  0021               	movlb	1	; select bank1
  7945  14E3  101D               	bcf	29,0	;volatile
  7946                           
  7947                           ;sensors.c: 29: FVRCONbits.FVREN=0;
  7948  14E4  0022               	movlb	2	; select bank2
  7949  14E5  1397               	bcf	23,7	;volatile
  7950  14E6  0008               	return
  7951  14E7                     __end_of_Sensor_peripheralSleep:	
  7952                           
  7953                           	psect	text24
  7954  14F8                     __ptext24:	
  7955 ;; *************** function _FVR_IsOutputReady *****************
  7956 ;; Defined at:
  7957 ;;		line 63 in file "mcc_generated_files/fvr.c"
  7958 ;; Parameters:    Size  Location     Type
  7959 ;;		None
  7960 ;; Auto vars:     Size  Location     Type
  7961 ;;		None
  7962 ;; Return value:  Size  Location     Type
  7963 ;;                  1    wreg      unsigned char 
  7964 ;; Registers used:
  7965 ;;		wreg, status,2, status,0
  7966 ;; Tracked objects:
  7967 ;;		On entry : 0/0
  7968 ;;		On exit  : 0/0
  7969 ;;		Unchanged: 0/0
  7970 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7971 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7972 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7973 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7974 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7975 ;;Total ram usage:        0 bytes
  7976 ;; Hardware stack levels used:    1
  7977 ;; Hardware stack levels required when called:    4
  7978 ;; This function calls:
  7979 ;;		Nothing
  7980 ;; This function is called by:
  7981 ;;		_Sensor_getSupplyVoltage
  7982 ;; This function uses a non-reentrant model
  7983 ;;
  7984                           
  7985                           
  7986                           ;psect for function _FVR_IsOutputReady
  7987  14F8                     _FVR_IsOutputReady:	
  7988                           
  7989                           ;fvr.c: 65: return (FVRCONbits.FVRRDY);
  7990                           
  7991                           ;incstack = 0
  7992                           ; Regs used in _FVR_IsOutputReady: [wreg+status,2+status,0]
  7993  14F8  0022               	movlb	2	; select bank2
  7994  14F9  0E17               	swapf	23,w	;volatile
  7995  14FA  0C89               	rrf	9,f
  7996  14FB  0C89               	rrf	9,f
  7997  14FC  3901               	andlw	1
  7998  14FD  0008               	return
  7999  14FE                     __end_of_FVR_IsOutputReady:	
  8000                           
  8001                           	psect	text25
  8002  14C8                     __ptext25:	
  8003 ;; *************** function _ADC_StartConversion *****************
  8004 ;; Defined at:
  8005 ;;		line 88 in file "mcc_generated_files/adc.c"
  8006 ;; Parameters:    Size  Location     Type
  8007 ;;		None
  8008 ;; Auto vars:     Size  Location     Type
  8009 ;;		None
  8010 ;; Return value:  Size  Location     Type
  8011 ;;                  1    wreg      void 
  8012 ;; Registers used:
  8013 ;;		None
  8014 ;; Tracked objects:
  8015 ;;		On entry : 0/0
  8016 ;;		On exit  : 0/0
  8017 ;;		Unchanged: 0/0
  8018 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8019 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8020 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8021 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8022 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8023 ;;Total ram usage:        0 bytes
  8024 ;; Hardware stack levels used:    1
  8025 ;; Hardware stack levels required when called:    4
  8026 ;; This function calls:
  8027 ;;		Nothing
  8028 ;; This function is called by:
  8029 ;;		_Sensor_getSupplyVoltage
  8030 ;; This function uses a non-reentrant model
  8031 ;;
  8032                           
  8033                           
  8034                           ;psect for function _ADC_StartConversion
  8035  14C8                     _ADC_StartConversion:	
  8036                           
  8037                           ;adc.c: 91: ADCON0bits.GO_nDONE = 1;
  8038                           
  8039                           ;incstack = 0
  8040                           ; Regs used in _ADC_StartConversion: []
  8041  14C8  0021               	movlb	1	; select bank1
  8042  14C9  149D               	bsf	29,1	;volatile
  8043  14CA  0008               	return
  8044  14CB                     __end_of_ADC_StartConversion:	
  8045                           
  8046                           	psect	text26
  8047  15B9                     __ptext26:	
  8048 ;; *************** function _ADC_SelectChannel *****************
  8049 ;; Defined at:
  8050 ;;		line 80 in file "mcc_generated_files/adc.c"
  8051 ;; Parameters:    Size  Location     Type
  8052 ;;  channel         1    wreg     enum E2996
  8053 ;; Auto vars:     Size  Location     Type
  8054 ;;  channel         1    2[BANK0 ] enum E2996
  8055 ;; Return value:  Size  Location     Type
  8056 ;;                  1    wreg      void 
  8057 ;; Registers used:
  8058 ;;		wreg, status,2, status,0
  8059 ;; Tracked objects:
  8060 ;;		On entry : 0/0
  8061 ;;		On exit  : 0/0
  8062 ;;		Unchanged: 0/0
  8063 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8064 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8065 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8066 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8067 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8068 ;;Total ram usage:        2 bytes
  8069 ;; Hardware stack levels used:    1
  8070 ;; Hardware stack levels required when called:    4
  8071 ;; This function calls:
  8072 ;;		Nothing
  8073 ;; This function is called by:
  8074 ;;		_Sensor_getSupplyVoltage
  8075 ;; This function uses a non-reentrant model
  8076 ;;
  8077                           
  8078                           
  8079                           ;psect for function _ADC_SelectChannel
  8080  15B9                     _ADC_SelectChannel:	
  8081                           
  8082                           ;incstack = 0
  8083                           ; Regs used in _ADC_SelectChannel: [wreg+status,2+status,0]
  8084                           ;ADC_SelectChannel@channel stored from wreg
  8085  15B9  0020               	movlb	0	; select bank0
  8086  15BA  00A2               	movwf	ADC_SelectChannel@channel
  8087                           
  8088                           ;adc.c: 83: ADCON0bits.CHS = channel;
  8089  15BB  0822               	movf	ADC_SelectChannel@channel,w
  8090  15BC  00A1               	movwf	??_ADC_SelectChannel
  8091  15BD  0DA1               	rlf	??_ADC_SelectChannel,f
  8092  15BE  0DA1               	rlf	??_ADC_SelectChannel,f
  8093  15BF  0021               	movlb	1	; select bank1
  8094  15C0  081D               	movf	29,w	;volatile
  8095  15C1  0020               	movlb	0	; select bank0
  8096  15C2  0621               	xorwf	??_ADC_SelectChannel,w
  8097  15C3  3983               	andlw	-125
  8098  15C4  0621               	xorwf	??_ADC_SelectChannel,w
  8099  15C5  0021               	movlb	1	; select bank1
  8100  15C6  009D               	movwf	29	;volatile
  8101                           
  8102                           ;adc.c: 85: ADCON0bits.ADON = 1;
  8103  15C7  141D               	bsf	29,0	;volatile
  8104  15C8  0008               	return
  8105  15C9                     __end_of_ADC_SelectChannel:	
  8106                           
  8107                           	psect	text27
  8108  1512                     __ptext27:	
  8109 ;; *************** function _ADC_IsConversionDone *****************
  8110 ;; Defined at:
  8111 ;;		line 95 in file "mcc_generated_files/adc.c"
  8112 ;; Parameters:    Size  Location     Type
  8113 ;;		None
  8114 ;; Auto vars:     Size  Location     Type
  8115 ;;		None
  8116 ;; Return value:  Size  Location     Type
  8117 ;;                  1    wreg      unsigned char 
  8118 ;; Registers used:
  8119 ;;		wreg, status,0
  8120 ;; Tracked objects:
  8121 ;;		On entry : 0/0
  8122 ;;		On exit  : 0/0
  8123 ;;		Unchanged: 0/0
  8124 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8125 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8126 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8127 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8128 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8129 ;;Total ram usage:        0 bytes
  8130 ;; Hardware stack levels used:    1
  8131 ;; Hardware stack levels required when called:    4
  8132 ;; This function calls:
  8133 ;;		Nothing
  8134 ;; This function is called by:
  8135 ;;		_Sensor_getSupplyVoltage
  8136 ;; This function uses a non-reentrant model
  8137 ;;
  8138                           
  8139                           
  8140                           ;psect for function _ADC_IsConversionDone
  8141  1512                     _ADC_IsConversionDone:	
  8142                           
  8143                           ;adc.c: 98: return ((bool)(!ADCON0bits.GO_nDONE));
  8144                           
  8145                           ;incstack = 0
  8146                           ; Regs used in _ADC_IsConversionDone: [wreg+status,0]
  8147  1512  1003               	clrc
  8148  1513  0021               	movlb	1	; select bank1
  8149  1514  1C9D               	btfss	29,1	;volatile
  8150  1515  1403               	setc
  8151  1516  3000               	movlw	0
  8152  1517  3D09               	addwfc	9,w
  8153  1518  0008               	return
  8154  1519                     __end_of_ADC_IsConversionDone:	
  8155                           
  8156                           	psect	text28
  8157  155E                     __ptext28:	
  8158 ;; *************** function _ADC_GetConversionResult *****************
  8159 ;; Defined at:
  8160 ;;		line 101 in file "mcc_generated_files/adc.c"
  8161 ;; Parameters:    Size  Location     Type
  8162 ;;		None
  8163 ;; Auto vars:     Size  Location     Type
  8164 ;;		None
  8165 ;; Return value:  Size  Location     Type
  8166 ;;                  2    1[BANK0 ] unsigned int 
  8167 ;; Registers used:
  8168 ;;		wreg
  8169 ;; Tracked objects:
  8170 ;;		On entry : 0/0
  8171 ;;		On exit  : 0/0
  8172 ;;		Unchanged: 0/0
  8173 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8174 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8175 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8176 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8177 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8178 ;;Total ram usage:        2 bytes
  8179 ;; Hardware stack levels used:    1
  8180 ;; Hardware stack levels required when called:    4
  8181 ;; This function calls:
  8182 ;;		Nothing
  8183 ;; This function is called by:
  8184 ;;		_Sensor_getSupplyVoltage
  8185 ;; This function uses a non-reentrant model
  8186 ;;
  8187                           
  8188                           
  8189                           ;psect for function _ADC_GetConversionResult
  8190  155E                     _ADC_GetConversionResult:	
  8191                           
  8192                           ;adc.c: 104: return ((adc_result_t)((ADRESH << 8) + ADRESL));
  8193                           
  8194                           ;incstack = 0
  8195                           ; Regs used in _ADC_GetConversionResult: [wreg]
  8196  155E  0021               	movlb	1	; select bank1
  8197  155F  081C               	movf	28,w	;volatile
  8198  1560  0020               	movlb	0	; select bank0
  8199  1561  00A2               	movwf	?_ADC_GetConversionResult+1
  8200  1562  0021               	movlb	1	; select bank1
  8201  1563  081B               	movf	27,w	;volatile
  8202  1564  0020               	movlb	0	; select bank0
  8203  1565  00A1               	movwf	?_ADC_GetConversionResult
  8204  1566  0008               	return
  8205  1567                     __end_of_ADC_GetConversionResult:	
  8206                           
  8207                           	psect	text29
  8208  15FC                     __ptext29:	
  8209 ;; *************** function _Diag_getSensorHealth *****************
  8210 ;; Defined at:
  8211 ;;		line 35 in file "diagnostics.c"
  8212 ;; Parameters:    Size  Location     Type
  8213 ;;		None
  8214 ;; Auto vars:     Size  Location     Type
  8215 ;;  var             1    2[BANK0 ] unsigned char 
  8216 ;; Return value:  Size  Location     Type
  8217 ;;                  1    wreg      unsigned char 
  8218 ;; Registers used:
  8219 ;;		wreg, status,2, status,0
  8220 ;; Tracked objects:
  8221 ;;		On entry : 0/0
  8222 ;;		On exit  : 0/0
  8223 ;;		Unchanged: 0/0
  8224 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8225 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8226 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8227 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8228 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8229 ;;Total ram usage:        2 bytes
  8230 ;; Hardware stack levels used:    1
  8231 ;; Hardware stack levels required when called:    4
  8232 ;; This function calls:
  8233 ;;		Nothing
  8234 ;; This function is called by:
  8235 ;;		_Wireless_packageData
  8236 ;; This function uses a non-reentrant model
  8237 ;;
  8238                           
  8239                           
  8240                           ;psect for function _Diag_getSensorHealth
  8241  15FC                     _Diag_getSensorHealth:	
  8242                           
  8243                           ;diagnostics.c: 38: char var=0;
  8244                           
  8245                           ;incstack = 0
  8246                           ; Regs used in _Diag_getSensorHealth: [wreg+status,2+status,0]
  8247  15FC  0020               	movlb	0	; select bank0
  8248  15FD  01A2               	clrf	Diag_getSensorHealth@var
  8249                           
  8250                           ;diagnostics.c: 40: var|=sensorHealth.compassHealth;
  8251  15FE  0021               	movlb	1	; select bank1
  8252  15FF  0868               	movf	(_sensorHealth^(0+128)+1),w
  8253  1600  0020               	movlb	0	; select bank0
  8254  1601  00A1               	movwf	??_Diag_getSensorHealth
  8255  1602  0821               	movf	??_Diag_getSensorHealth,w
  8256  1603  04A2               	iorwf	Diag_getSensorHealth@var,f
  8257                           
  8258                           ;diagnostics.c: 41: var<<=1;
  8259  1604  1003               	clrc
  8260  1605  0DA2               	rlf	Diag_getSensorHealth@var,f
  8261                           
  8262                           ;diagnostics.c: 42: var|=sensorHealth.tempSensorHealth;
  8263  1606  0021               	movlb	1	; select bank1
  8264  1607  0867               	movf	_sensorHealth^(0+128),w
  8265  1608  0020               	movlb	0	; select bank0
  8266  1609  00A1               	movwf	??_Diag_getSensorHealth
  8267  160A  0821               	movf	??_Diag_getSensorHealth,w
  8268  160B  04A2               	iorwf	Diag_getSensorHealth@var,f
  8269                           
  8270                           ;diagnostics.c: 44: return var;
  8271  160C  0822               	movf	Diag_getSensorHealth@var,w
  8272  160D  0008               	return
  8273  160E                     __end_of_Diag_getSensorHealth:	
  8274                           
  8275                           	psect	text30
  8276  0D1F                     __ptext30:	
  8277 ;; *************** function _Wireless_init *****************
  8278 ;; Defined at:
  8279 ;;		line 11 in file "wireless.c"
  8280 ;; Parameters:    Size  Location     Type
  8281 ;;		None
  8282 ;; Auto vars:     Size  Location     Type
  8283 ;;		None
  8284 ;; Return value:  Size  Location     Type
  8285 ;;                  1    wreg      void 
  8286 ;; Registers used:
  8287 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  8288 ;; Tracked objects:
  8289 ;;		On entry : 0/0
  8290 ;;		On exit  : 0/0
  8291 ;;		Unchanged: 0/0
  8292 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8293 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8294 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8295 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8296 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8297 ;;Total ram usage:        2 bytes
  8298 ;; Hardware stack levels used:    1
  8299 ;; Hardware stack levels required when called:    8
  8300 ;; This function calls:
  8301 ;;		_RF_Init
  8302 ;;		_RF_ResetStatusIRQ
  8303 ;;		_RF_WriteRegister
  8304 ;;		_RF_WriteRegisterData
  8305 ;; This function is called by:
  8306 ;;		_main
  8307 ;; This function uses a non-reentrant model
  8308 ;;
  8309                           
  8310                           
  8311                           ;psect for function _Wireless_init
  8312  0D1F                     _Wireless_init:	
  8313                           
  8314                           ;wireless.c: 13: static const uint8_t TADDR[5] = "20001";
  8315                           ;wireless.c: 16: _delay((unsigned long)((100)*(8000000/4000.0)));
  8316                           
  8317                           ;incstack = 0
  8318                           ; Regs used in _Wireless_init: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  8319  0D1F  3002               	movlw	2
  8320  0D20  0020               	movlb	0	; select bank0
  8321  0D21  00AF               	movwf	??_Wireless_init+1
  8322  0D22  3004               	movlw	4
  8323  0D23  00AE               	movwf	??_Wireless_init
  8324  0D24  30BA               	movlw	186
  8325  0D25                     u6597:	
  8326  0D25  0B89               	decfsz	9,f
  8327  0D26  2D25               	goto	u6597
  8328  0D27  0BAE               	decfsz	??_Wireless_init,f
  8329  0D28  2D25               	goto	u6597
  8330  0D29  0BAF               	decfsz	??_Wireless_init+1,f
  8331  0D2A  2D25               	goto	u6597
  8332  0D2B  0000               	nop
  8333                           
  8334                           ;wireless.c: 18: RF_Init();
  8335  0D2C  3194  24D6  318D   	fcall	_RF_Init
  8336                           
  8337                           ;wireless.c: 20: RF_WriteRegister(0x06, 0x06|0x20);
  8338  0D2F  3026               	movlw	38
  8339  0D30  0020               	movlb	0	; select bank0
  8340  0D31  00AE               	movwf	??_Wireless_init
  8341  0D32  082E               	movf	??_Wireless_init,w
  8342  0D33  00A3               	movwf	RF_WriteRegister@val
  8343  0D34  3006               	movlw	6
  8344  0D35  3196  265B  318D   	fcall	_RF_WriteRegister
  8345                           
  8346                           ;wireless.c: 21: RF_WriteRegister(0x11, 5);
  8347  0D38  3005               	movlw	5
  8348  0D39  0020               	movlb	0	; select bank0
  8349  0D3A  00AE               	movwf	??_Wireless_init
  8350  0D3B  082E               	movf	??_Wireless_init,w
  8351  0D3C  00A3               	movwf	RF_WriteRegister@val
  8352  0D3D  3011               	movlw	17
  8353  0D3E  3196  265B  318D   	fcall	_RF_WriteRegister
  8354                           
  8355                           ;wireless.c: 22: RF_WriteRegister(0x05, 2);
  8356  0D41  3002               	movlw	2
  8357  0D42  0020               	movlb	0	; select bank0
  8358  0D43  00AE               	movwf	??_Wireless_init
  8359  0D44  082E               	movf	??_Wireless_init,w
  8360  0D45  00A3               	movwf	RF_WriteRegister@val
  8361  0D46  3005               	movlw	5
  8362  0D47  3196  265B  318D   	fcall	_RF_WriteRegister
  8363                           
  8364                           ;wireless.c: 25: RF_WriteRegisterData(0x0A, (uint8_t*)TADDR, sizeof(TADDR));
  8365  0D4A  3021               	movlw	low (Wireless_init@TADDR| (0+32768))
  8366  0D4B  0020               	movlb	0	; select bank0
  8367  0D4C  00A9               	movwf	RF_WriteRegisterData@buf
  8368  0D4D  3098               	movlw	high (Wireless_init@TADDR| (0+32768))
  8369  0D4E  00AA               	movwf	RF_WriteRegisterData@buf+1
  8370  0D4F  3005               	movlw	5
  8371  0D50  00AE               	movwf	??_Wireless_init
  8372  0D51  082E               	movf	??_Wireless_init,w
  8373  0D52  00AB               	movwf	RF_WriteRegisterData@bufSize
  8374  0D53  300A               	movlw	10
  8375  0D54  3197  278A  318D   	fcall	_RF_WriteRegisterData
  8376                           
  8377                           ;wireless.c: 26: RF_WriteRegisterData(0x10, (uint8_t*)TADDR, sizeof(TADDR));
  8378  0D57  3021               	movlw	low (Wireless_init@TADDR| (0+32768))
  8379  0D58  0020               	movlb	0	; select bank0
  8380  0D59  00A9               	movwf	RF_WriteRegisterData@buf
  8381  0D5A  3098               	movlw	high (Wireless_init@TADDR| (0+32768))
  8382  0D5B  00AA               	movwf	RF_WriteRegisterData@buf+1
  8383  0D5C  3005               	movlw	5
  8384  0D5D  00AE               	movwf	??_Wireless_init
  8385  0D5E  082E               	movf	??_Wireless_init,w
  8386  0D5F  00AB               	movwf	RF_WriteRegisterData@bufSize
  8387  0D60  3010               	movlw	16
  8388  0D61  3197  278A  318D   	fcall	_RF_WriteRegisterData
  8389                           
  8390                           ;wireless.c: 29: RF_WriteRegister(0x02, 0x01);
  8391  0D64  0020               	movlb	0	; select bank0
  8392  0D65  01A3               	clrf	RF_WriteRegister@val
  8393  0D66  0AA3               	incf	RF_WriteRegister@val,f
  8394  0D67  3002               	movlw	2
  8395  0D68  3196  265B  318D   	fcall	_RF_WriteRegister
  8396                           
  8397                           ;wireless.c: 32: RF_ResetStatusIRQ(0x40|0x20|0x10);
  8398  0D6B  3070               	movlw	112
  8399  0D6C  3188  200B  318D   	fcall	_RF_ResetStatusIRQ
  8400                           
  8401                           ;wireless.c: 34: RF_WriteRegister(0x01, 0x01);
  8402  0D6F  0020               	movlb	0	; select bank0
  8403  0D70  01A3               	clrf	RF_WriteRegister@val
  8404  0D71  0AA3               	incf	RF_WriteRegister@val,f
  8405  0D72  3001               	movlw	1
  8406  0D73  3196  265B  318D   	fcall	_RF_WriteRegister
  8407                           
  8408                           ;wireless.c: 35: RF_WriteRegister(0x04, 0xF0|0x01);
  8409  0D76  30F1               	movlw	241
  8410  0D77  0020               	movlb	0	; select bank0
  8411  0D78  00AE               	movwf	??_Wireless_init
  8412  0D79  082E               	movf	??_Wireless_init,w
  8413  0D7A  00A3               	movwf	RF_WriteRegister@val
  8414  0D7B  3004               	movlw	4
  8415  0D7C  3196  265B  318D   	fcall	_RF_WriteRegister
  8416                           
  8417                           ;wireless.c: 36: RF_WriteRegister(0x00, (1<<3)|(1<<2)|(1<<1)|(0));
  8418  0D7F  300E               	movlw	14
  8419  0D80  0020               	movlb	0	; select bank0
  8420  0D81  00AE               	movwf	??_Wireless_init
  8421  0D82  082E               	movf	??_Wireless_init,w
  8422  0D83  00A3               	movwf	RF_WriteRegister@val
  8423  0D84  3000               	movlw	0
  8424  0D85  3196  265B  318D   	fcall	_RF_WriteRegister
  8425                           
  8426                           ;wireless.c: 37: RF_WriteRegister(0x1D, (1<<2) | (1<<1));
  8427  0D88  3006               	movlw	6
  8428  0D89  0020               	movlb	0	; select bank0
  8429  0D8A  00AE               	movwf	??_Wireless_init
  8430  0D8B  082E               	movf	??_Wireless_init,w
  8431  0D8C  00A3               	movwf	RF_WriteRegister@val
  8432  0D8D  301D               	movlw	29
  8433  0D8E  3196  265B  318D   	fcall	_RF_WriteRegister
  8434                           
  8435                           ;wireless.c: 38: RF_WriteRegister(0x1C, (1<<0));
  8436  0D91  0020               	movlb	0	; select bank0
  8437  0D92  01A3               	clrf	RF_WriteRegister@val
  8438  0D93  0AA3               	incf	RF_WriteRegister@val,f
  8439  0D94  301C               	movlw	28
  8440  0D95  3196  265B         	fcall	_RF_WriteRegister
  8441                           
  8442                           ;wireless.c: 39: do { LATCbits.LATC2 = 0; } while(0);
  8443  0D97  0022               	movlb	2	; select bank2
  8444  0D98  110E               	bcf	14,2	;volatile
  8445  0D99  0008               	return
  8446  0D9A                     __end_of_Wireless_init:	
  8447                           
  8448                           	psect	text31
  8449  178A                     __ptext31:	
  8450 ;; *************** function _RF_WriteRegisterData *****************
  8451 ;; Defined at:
  8452 ;;		line 113 in file "nrf24.c"
  8453 ;; Parameters:    Size  Location     Type
  8454 ;;  reg             1    wreg     unsigned char 
  8455 ;;  buf             2    9[BANK0 ] PTR unsigned char 
  8456 ;;		 -> Wireless_packageData@data(5), Wireless_init@TADDR(5), 
  8457 ;;  bufSize         1   11[BANK0 ] unsigned char 
  8458 ;; Auto vars:     Size  Location     Type
  8459 ;;  reg             1   13[BANK0 ] unsigned char 
  8460 ;; Return value:  Size  Location     Type
  8461 ;;                  1    wreg      void 
  8462 ;; Registers used:
  8463 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  8464 ;; Tracked objects:
  8465 ;;		On entry : 0/0
  8466 ;;		On exit  : 0/0
  8467 ;;		Unchanged: 0/0
  8468 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8469 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8470 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8471 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8472 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8473 ;;Total ram usage:        5 bytes
  8474 ;; Hardware stack levels used:    1
  8475 ;; Hardware stack levels required when called:    7
  8476 ;; This function calls:
  8477 ;;		_SPI_WriteBuffer
  8478 ;;		_SPI_WriteRead
  8479 ;; This function is called by:
  8480 ;;		_RF_TxPayload
  8481 ;;		_Wireless_init
  8482 ;;		_RF_openWritingPipe
  8483 ;;		_RF_openReadingPipe
  8484 ;; This function uses a non-reentrant model
  8485 ;;
  8486                           
  8487                           
  8488                           ;psect for function _RF_WriteRegisterData
  8489  178A                     _RF_WriteRegisterData:	
  8490                           
  8491                           ;incstack = 0
  8492                           ; Regs used in _RF_WriteRegisterData: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  8493                           ;RF_WriteRegisterData@reg stored from wreg
  8494  178A  0020               	movlb	0	; select bank0
  8495  178B  00AD               	movwf	RF_WriteRegisterData@reg
  8496                           
  8497                           ;nrf24.c: 114: do { LATCbits.LATC1 = 0; } while(0);
  8498  178C  0022               	movlb	2	; select bank2
  8499  178D  108E               	bcf	14,1	;volatile
  8500                           
  8501                           ;nrf24.c: 115: (void)SPI_WriteRead(0x20|reg);
  8502  178E  0020               	movlb	0	; select bank0
  8503  178F  082D               	movf	RF_WriteRegisterData@reg,w
  8504  1790  3820               	iorlw	32
  8505  1791  3194  24F2  3197   	fcall	_SPI_WriteRead
  8506                           
  8507                           ;nrf24.c: 116: SPI_WriteBuffer(buf, bufSize);
  8508  1794  0020               	movlb	0	; select bank0
  8509  1795  082A               	movf	RF_WriteRegisterData@buf+1,w
  8510  1796  00A4               	movwf	SPI_WriteBuffer@bufOut+1
  8511  1797  0829               	movf	RF_WriteRegisterData@buf,w
  8512  1798  00A3               	movwf	SPI_WriteBuffer@bufOut
  8513  1799  082B               	movf	RF_WriteRegisterData@bufSize,w
  8514  179A  00AC               	movwf	??_RF_WriteRegisterData
  8515  179B  082C               	movf	??_RF_WriteRegisterData,w
  8516  179C  00A5               	movwf	SPI_WriteBuffer@bufSize
  8517  179D  3197  2754  3197   	fcall	_SPI_WriteBuffer
  8518                           
  8519                           ;nrf24.c: 117: do { LATCbits.LATC1 = 1; } while(0);
  8520  17A0  0022               	movlb	2	; select bank2
  8521  17A1  148E               	bsf	14,1	;volatile
  8522                           
  8523                           ;nrf24.c: 118: _delay((unsigned long)((10)*(8000000/4000000.0)));
  8524  17A2  3006               	movlw	6
  8525  17A3                     u6607:	
  8526  17A3  0B89               	decfsz	9,f
  8527  17A4  2FA3               	goto	u6607
  8528  17A5  3200               	nop2
  8529  17A6  0008               	return
  8530  17A7                     __end_of_RF_WriteRegisterData:	
  8531                           
  8532                           	psect	text32
  8533  1754                     __ptext32:	
  8534 ;; *************** function _SPI_WriteBuffer *****************
  8535 ;; Defined at:
  8536 ;;		line 56 in file "nrf24.c"
  8537 ;; Parameters:    Size  Location     Type
  8538 ;;  bufOut          2    3[BANK0 ] PTR unsigned char 
  8539 ;;		 -> Wireless_packageData@data(5), Wireless_init@TADDR(5), 
  8540 ;;  bufSize         1    5[BANK0 ] unsigned char 
  8541 ;; Auto vars:     Size  Location     Type
  8542 ;;  i               1    8[BANK0 ] unsigned char 
  8543 ;; Return value:  Size  Location     Type
  8544 ;;                  1    wreg      void 
  8545 ;; Registers used:
  8546 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  8547 ;; Tracked objects:
  8548 ;;		On entry : 0/0
  8549 ;;		On exit  : 0/0
  8550 ;;		Unchanged: 0/0
  8551 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8552 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8553 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8554 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8555 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8556 ;;Total ram usage:        6 bytes
  8557 ;; Hardware stack levels used:    1
  8558 ;; Hardware stack levels required when called:    6
  8559 ;; This function calls:
  8560 ;;		_SPI_WriteRead
  8561 ;; This function is called by:
  8562 ;;		_RF_WriteRegisterData
  8563 ;; This function uses a non-reentrant model
  8564 ;;
  8565                           
  8566                           
  8567                           ;psect for function _SPI_WriteBuffer
  8568  1754                     _SPI_WriteBuffer:	
  8569                           
  8570                           ;nrf24.c: 57: uint8_t i;
  8571                           ;nrf24.c: 59: for(i=0;i<bufSize;i++) {
  8572                           
  8573                           ;incstack = 0
  8574                           ; Regs used in _SPI_WriteBuffer: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  8575  1754  0020               	movlb	0	; select bank0
  8576  1755  01A8               	clrf	SPI_WriteBuffer@i
  8577  1756                     l5236:	
  8578  1756  0825               	movf	SPI_WriteBuffer@bufSize,w
  8579  1757  0228               	subwf	SPI_WriteBuffer@i,w
  8580  1758  1803               	btfsc	3,0
  8581  1759  0008               	return
  8582                           
  8583                           ;nrf24.c: 60: (void)SPI_WriteRead(bufOut[i]);
  8584  175A  0824               	movf	SPI_WriteBuffer@bufOut+1,w
  8585  175B  00A7               	movwf	??_SPI_WriteBuffer+1
  8586  175C  0823               	movf	SPI_WriteBuffer@bufOut,w
  8587  175D  00A6               	movwf	??_SPI_WriteBuffer
  8588  175E  0828               	movf	SPI_WriteBuffer@i,w
  8589  175F  0726               	addwf	??_SPI_WriteBuffer,w
  8590  1760  0084               	movwf	4
  8591  1761  0827               	movf	??_SPI_WriteBuffer+1,w
  8592  1762  1803               	skipnc
  8593  1763  0A27               	incf	??_SPI_WriteBuffer+1,w
  8594  1764  0085               	movwf	5
  8595  1765  0800               	movf	0,w	;code access
  8596  1766  3194  24F2  3197   	fcall	_SPI_WriteRead
  8597  1769  3001               	movlw	1
  8598  176A  0020               	movlb	0	; select bank0
  8599  176B  00A6               	movwf	??_SPI_WriteBuffer
  8600  176C  0826               	movf	??_SPI_WriteBuffer,w
  8601  176D  07A8               	addwf	SPI_WriteBuffer@i,f
  8602  176E  2F56               	goto	l5236
  8603  176F                     __end_of_SPI_WriteBuffer:	
  8604                           
  8605                           	psect	text33
  8606  080B                     __ptext33:	
  8607 ;; *************** function _RF_ResetStatusIRQ *****************
  8608 ;; Defined at:
  8609 ;;		line 158 in file "nrf24.c"
  8610 ;; Parameters:    Size  Location     Type
  8611 ;;  flags           1    wreg     unsigned char 
  8612 ;; Auto vars:     Size  Location     Type
  8613 ;;  flags           1    6[BANK0 ] unsigned char 
  8614 ;; Return value:  Size  Location     Type
  8615 ;;                  1    wreg      void 
  8616 ;; Registers used:
  8617 ;;		wreg, status,2, status,0, pclath, cstack
  8618 ;; Tracked objects:
  8619 ;;		On entry : 0/0
  8620 ;;		On exit  : 0/0
  8621 ;;		Unchanged: 0/0
  8622 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8623 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8624 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8625 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8626 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8627 ;;Total ram usage:        2 bytes
  8628 ;; Hardware stack levels used:    1
  8629 ;; Hardware stack levels required when called:    7
  8630 ;; This function calls:
  8631 ;;		_RF_WriteRegister
  8632 ;; This function is called by:
  8633 ;;		_Wireless_init
  8634 ;;		_Wireless_sendData
  8635 ;; This function uses a non-reentrant model
  8636 ;;
  8637                           
  8638                           
  8639                           ;psect for function _RF_ResetStatusIRQ
  8640  080B                     _RF_ResetStatusIRQ:	
  8641                           
  8642                           ;incstack = 0
  8643                           ; Regs used in _RF_ResetStatusIRQ: [wreg+status,2+status,0+pclath+cstack]
  8644                           ;RF_ResetStatusIRQ@flags stored from wreg
  8645  080B  0020               	movlb	0	; select bank0
  8646  080C  00A6               	movwf	RF_ResetStatusIRQ@flags
  8647                           
  8648                           ;nrf24.c: 159: _delay((unsigned long)((10)*(8000000/4000000.0)));
  8649  080D  3006               	movlw	6
  8650  080E                     u6617:	
  8651  080E  0B89               	decfsz	9,f
  8652  080F  280E               	goto	u6617
  8653  0810  3200               	nop2
  8654                           
  8655                           ;nrf24.c: 160: do { LATCbits.LATC1 = 0; } while(0);
  8656  0811  0022               	movlb	2	; select bank2
  8657  0812  108E               	bcf	14,1	;volatile
  8658                           
  8659                           ;nrf24.c: 161: _delay((unsigned long)((10)*(8000000/4000000.0)));
  8660  0813  3006               	movlw	6
  8661  0814                     u6627:	
  8662  0814  0B89               	decfsz	9,f
  8663  0815  2814               	goto	u6627
  8664  0816  3200               	nop2
  8665                           
  8666                           ;nrf24.c: 162: RF_WriteRegister(0x07, flags);
  8667  0817  0020               	movlb	0	; select bank0
  8668  0818  0826               	movf	RF_ResetStatusIRQ@flags,w
  8669  0819  00A5               	movwf	??_RF_ResetStatusIRQ
  8670  081A  0825               	movf	??_RF_ResetStatusIRQ,w
  8671  081B  00A3               	movwf	RF_WriteRegister@val
  8672  081C  3007               	movlw	7
  8673  081D  3196  265B  3188   	fcall	_RF_WriteRegister
  8674                           
  8675                           ;nrf24.c: 163: _delay((unsigned long)((10)*(8000000/4000000.0)));
  8676  0820  3006               	movlw	6
  8677  0821                     u6637:	
  8678  0821  0B89               	decfsz	9,f
  8679  0822  2821               	goto	u6637
  8680  0823  3200               	nop2
  8681                           
  8682                           ;nrf24.c: 164: do { LATCbits.LATC1 = 1; } while(0);
  8683  0824  0022               	movlb	2	; select bank2
  8684  0825  148E               	bsf	14,1	;volatile
  8685                           
  8686                           ;nrf24.c: 165: _delay((unsigned long)((10)*(8000000/4000000.0)));
  8687  0826  3006               	movlw	6
  8688  0827                     u6647:	
  8689  0827  0B89               	decfsz	9,f
  8690  0828  2827               	goto	u6647
  8691  0829  3200               	nop2
  8692  082A  0008               	return
  8693  082B                     __end_of_RF_ResetStatusIRQ:	
  8694                           
  8695                           	psect	text34
  8696  165B                     __ptext34:	
  8697 ;; *************** function _RF_WriteRegister *****************
  8698 ;; Defined at:
  8699 ;;		line 69 in file "nrf24.c"
  8700 ;; Parameters:    Size  Location     Type
  8701 ;;  reg             1    wreg     unsigned char 
  8702 ;;  val             1    3[BANK0 ] unsigned char 
  8703 ;; Auto vars:     Size  Location     Type
  8704 ;;  reg             1    4[BANK0 ] unsigned char 
  8705 ;; Return value:  Size  Location     Type
  8706 ;;                  1    wreg      void 
  8707 ;; Registers used:
  8708 ;;		wreg, status,2, status,0, pclath, cstack
  8709 ;; Tracked objects:
  8710 ;;		On entry : 0/0
  8711 ;;		On exit  : 0/0
  8712 ;;		Unchanged: 0/0
  8713 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8714 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8715 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8716 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8717 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8718 ;;Total ram usage:        2 bytes
  8719 ;; Hardware stack levels used:    1
  8720 ;; Hardware stack levels required when called:    6
  8721 ;; This function calls:
  8722 ;;		_SPI_WriteRead
  8723 ;; This function is called by:
  8724 ;;		_RF_ResetStatusIRQ
  8725 ;;		_Wireless_init
  8726 ;;		_Wireless_sleep
  8727 ;;		_Wireless_wake
  8728 ;; This function uses a non-reentrant model
  8729 ;;
  8730                           
  8731                           
  8732                           ;psect for function _RF_WriteRegister
  8733  165B                     _RF_WriteRegister:	
  8734                           
  8735                           ;incstack = 0
  8736                           ; Regs used in _RF_WriteRegister: [wreg+status,2+status,0+pclath+cstack]
  8737                           ;RF_WriteRegister@reg stored from wreg
  8738  165B  0020               	movlb	0	; select bank0
  8739  165C  00A4               	movwf	RF_WriteRegister@reg
  8740                           
  8741                           ;nrf24.c: 70: do { LATCbits.LATC1 = 0; } while(0);
  8742  165D  0022               	movlb	2	; select bank2
  8743  165E  108E               	bcf	14,1	;volatile
  8744                           
  8745                           ;nrf24.c: 71: (void)SPI_WriteRead(0x20|reg);
  8746  165F  0020               	movlb	0	; select bank0
  8747  1660  0824               	movf	RF_WriteRegister@reg,w
  8748  1661  3820               	iorlw	32
  8749  1662  3194  24F2  3196   	fcall	_SPI_WriteRead
  8750                           
  8751                           ;nrf24.c: 72: (void)SPI_WriteRead(val);
  8752  1665  0020               	movlb	0	; select bank0
  8753  1666  0823               	movf	RF_WriteRegister@val,w
  8754  1667  3194  24F2  3196   	fcall	_SPI_WriteRead
  8755                           
  8756                           ;nrf24.c: 73: do { LATCbits.LATC1 = 1; } while(0);
  8757  166A  0022               	movlb	2	; select bank2
  8758  166B  148E               	bsf	14,1	;volatile
  8759                           
  8760                           ;nrf24.c: 74: _delay((unsigned long)((10)*(8000000/4000000.0)));
  8761  166C  3006               	movlw	6
  8762  166D                     u6657:	
  8763  166D  0B89               	decfsz	9,f
  8764  166E  2E6D               	goto	u6657
  8765  166F  3200               	nop2
  8766  1670  0008               	return
  8767  1671                     __end_of_RF_WriteRegister:	
  8768                           
  8769                           	psect	text35
  8770  14F2                     __ptext35:	
  8771 ;; *************** function _SPI_WriteRead *****************
  8772 ;; Defined at:
  8773 ;;		line 26 in file "nrf24.c"
  8774 ;; Parameters:    Size  Location     Type
  8775 ;;  val             1    wreg     unsigned char 
  8776 ;; Auto vars:     Size  Location     Type
  8777 ;;  val             1    2[BANK0 ] unsigned char 
  8778 ;; Return value:  Size  Location     Type
  8779 ;;                  1    wreg      unsigned char 
  8780 ;; Registers used:
  8781 ;;		wreg, pclath, cstack
  8782 ;; Tracked objects:
  8783 ;;		On entry : 0/0
  8784 ;;		On exit  : 0/0
  8785 ;;		Unchanged: 0/0
  8786 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8787 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8788 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8789 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8790 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8791 ;;Total ram usage:        1 bytes
  8792 ;; Hardware stack levels used:    1
  8793 ;; Hardware stack levels required when called:    5
  8794 ;; This function calls:
  8795 ;;		_SPI1_Exchange8bit
  8796 ;; This function is called by:
  8797 ;;		_SPI_WriteReadBuffer
  8798 ;;		_SPI_WriteBuffer
  8799 ;;		_RF_WriteRegister
  8800 ;;		_RF_ReadRegister
  8801 ;;		_RF_ReadRegisterData
  8802 ;;		_RF_WriteRegisterData
  8803 ;;		_RF_Write
  8804 ;;		_RF_WriteRead
  8805 ;; This function uses a non-reentrant model
  8806 ;;
  8807                           
  8808                           
  8809                           ;psect for function _SPI_WriteRead
  8810  14F2                     _SPI_WriteRead:	
  8811                           
  8812                           ;incstack = 0
  8813                           ; Regs used in _SPI_WriteRead: [wreg+pclath+cstack]
  8814                           ;SPI_WriteRead@val stored from wreg
  8815  14F2  0020               	movlb	0	; select bank0
  8816  14F3  00A2               	movwf	SPI_WriteRead@val
  8817                           
  8818                           ;nrf24.c: 34: return SPI1_Exchange8bit(val);
  8819  14F4  0822               	movf	SPI_WriteRead@val,w
  8820  14F5  3195  2567         	fcall	_SPI1_Exchange8bit
  8821  14F7  0008               	return
  8822  14F8                     __end_of_SPI_WriteRead:	
  8823                           
  8824                           	psect	text36
  8825  1567                     __ptext36:	
  8826 ;; *************** function _SPI1_Exchange8bit *****************
  8827 ;; Defined at:
  8828 ;;		line 77 in file "mcc_generated_files/spi1.c"
  8829 ;; Parameters:    Size  Location     Type
  8830 ;;  data            1    wreg     unsigned char 
  8831 ;; Auto vars:     Size  Location     Type
  8832 ;;  data            1    1[BANK0 ] unsigned char 
  8833 ;; Return value:  Size  Location     Type
  8834 ;;                  1    wreg      unsigned char 
  8835 ;; Registers used:
  8836 ;;		wreg
  8837 ;; Tracked objects:
  8838 ;;		On entry : 0/0
  8839 ;;		On exit  : 0/0
  8840 ;;		Unchanged: 0/0
  8841 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8842 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8843 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8844 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8845 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8846 ;;Total ram usage:        1 bytes
  8847 ;; Hardware stack levels used:    1
  8848 ;; Hardware stack levels required when called:    4
  8849 ;; This function calls:
  8850 ;;		Nothing
  8851 ;; This function is called by:
  8852 ;;		_SPI_WriteRead
  8853 ;;		_SPI1_Exchange8bitBuffer
  8854 ;; This function uses a non-reentrant model
  8855 ;;
  8856                           
  8857                           
  8858                           ;psect for function _SPI1_Exchange8bit
  8859  1567                     _SPI1_Exchange8bit:	
  8860                           
  8861                           ;incstack = 0
  8862                           ; Regs used in _SPI1_Exchange8bit: [wreg]
  8863                           ;SPI1_Exchange8bit@data stored from wreg
  8864  1567  0020               	movlb	0	; select bank0
  8865  1568  00A1               	movwf	SPI1_Exchange8bit@data
  8866                           
  8867                           ;spi1.c: 80: SSP1CON1bits.WCOL = 0;
  8868  1569  0024               	movlb	4	; select bank4
  8869  156A  1395               	bcf	21,7	;volatile
  8870                           
  8871                           ;spi1.c: 82: SSP1BUF = data;
  8872  156B  0020               	movlb	0	; select bank0
  8873  156C  0821               	movf	SPI1_Exchange8bit@data,w
  8874  156D  0024               	movlb	4	; select bank4
  8875  156E  0091               	movwf	17	;volatile
  8876  156F                     l522:	
  8877                           ;spi1.c: 85: {
  8878                           
  8879                           ;spi1.c: 84: while(SSP1STATbits.BF == 0x0)
  8880                           
  8881  156F  1C14               	btfss	20,0	;volatile
  8882  1570  2D6F               	goto	l522
  8883                           
  8884                           ;spi1.c: 86: }
  8885                           ;spi1.c: 88: return (SSP1BUF);
  8886  1571  0811               	movf	17,w	;volatile
  8887  1572  0008               	return
  8888  1573                     __end_of_SPI1_Exchange8bit:	
  8889                           
  8890                           	psect	text37
  8891  14D6                     __ptext37:	
  8892 ;; *************** function _RF_Init *****************
  8893 ;; Defined at:
  8894 ;;		line 195 in file "nrf24.c"
  8895 ;; Parameters:    Size  Location     Type
  8896 ;;		None
  8897 ;; Auto vars:     Size  Location     Type
  8898 ;;		None
  8899 ;; Return value:  Size  Location     Type
  8900 ;;                  1    wreg      void 
  8901 ;; Registers used:
  8902 ;;		None
  8903 ;; Tracked objects:
  8904 ;;		On entry : 0/0
  8905 ;;		On exit  : 0/0
  8906 ;;		Unchanged: 0/0
  8907 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8908 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8909 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8910 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8911 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8912 ;;Total ram usage:        0 bytes
  8913 ;; Hardware stack levels used:    1
  8914 ;; Hardware stack levels required when called:    4
  8915 ;; This function calls:
  8916 ;;		Nothing
  8917 ;; This function is called by:
  8918 ;;		_Wireless_init
  8919 ;; This function uses a non-reentrant model
  8920 ;;
  8921                           
  8922                           
  8923                           ;psect for function _RF_Init
  8924  14D6                     _RF_Init:	
  8925                           
  8926                           ;incstack = 0
  8927                           ; Regs used in _RF_Init: []
  8928                           ;nrf24.c: 196: do { LATCbits.LATC2 = 0; } while(0);
  8929  14D6  0022               	movlb	2	; select bank2
  8930  14D7  110E               	bcf	14,2	;volatile
  8931                           
  8932                           ;nrf24.c: 197: do { LATCbits.LATC1 = 1; } while(0);
  8933  14D8  148E               	bsf	14,1	;volatile
  8934  14D9  0008               	return
  8935  14DA                     __end_of_RF_Init:	
  8936                           
  8937                           	psect	text38
  8938  1739                     __ptext38:	
  8939 ;; *************** function _SYSTEM_Initialize *****************
  8940 ;; Defined at:
  8941 ;;		line 70 in file "mcc_generated_files/mcc.c"
  8942 ;; Parameters:    Size  Location     Type
  8943 ;;		None
  8944 ;; Auto vars:     Size  Location     Type
  8945 ;;		None
  8946 ;; Return value:  Size  Location     Type
  8947 ;;                  1    wreg      void 
  8948 ;; Registers used:
  8949 ;;		wreg, status,2, status,0, pclath, cstack
  8950 ;; Tracked objects:
  8951 ;;		On entry : 0/0
  8952 ;;		On exit  : 0/0
  8953 ;;		Unchanged: 0/0
  8954 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8955 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8956 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8957 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8958 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8959 ;;Total ram usage:        0 bytes
  8960 ;; Hardware stack levels used:    1
  8961 ;; Hardware stack levels required when called:    6
  8962 ;; This function calls:
  8963 ;;		_ADC_Initialize
  8964 ;;		_FVR_Initialize
  8965 ;;		_I2C2_Initialize
  8966 ;;		_OSCILLATOR_Initialize
  8967 ;;		_PIN_MANAGER_Initialize
  8968 ;;		_SPI1_Initialize
  8969 ;;		_TMR1_Initialize
  8970 ;;		_TMR2_Initialize
  8971 ;;		_WDT_Initialize
  8972 ;; This function is called by:
  8973 ;;		_main
  8974 ;; This function uses a non-reentrant model
  8975 ;;
  8976                           
  8977                           
  8978                           ;psect for function _SYSTEM_Initialize
  8979  1739                     _SYSTEM_Initialize:	
  8980                           
  8981                           ;mcc.c: 73: PIN_MANAGER_Initialize();
  8982                           
  8983                           ;incstack = 0
  8984                           ; Regs used in _SYSTEM_Initialize: [wreg+status,2+status,0+pclath+cstack]
  8985  1739  3189  2105  3197   	fcall	_PIN_MANAGER_Initialize
  8986                           
  8987                           ;mcc.c: 74: OSCILLATOR_Initialize();
  8988  173C  3195  2504  3197   	fcall	_OSCILLATOR_Initialize
  8989                           
  8990                           ;mcc.c: 75: WDT_Initialize();
  8991  173F  3194  24D2  3197   	fcall	_WDT_Initialize
  8992                           
  8993                           ;mcc.c: 76: SPI1_Initialize();
  8994  1742  3195  250B  3197   	fcall	_SPI1_Initialize
  8995                           
  8996                           ;mcc.c: 77: I2C2_Initialize();
  8997  1745  3197  271E  3197   	fcall	_I2C2_Initialize
  8998                           
  8999                           ;mcc.c: 78: FVR_Initialize();
  9000  1748  3194  24CE  3197   	fcall	_FVR_Initialize
  9001                           
  9002                           ;mcc.c: 79: ADC_Initialize();
  9003  174B  3195  2521  3197   	fcall	_ADC_Initialize
  9004                           
  9005                           ;mcc.c: 80: TMR2_Initialize();
  9006  174E  3195  2529  3197   	fcall	_TMR2_Initialize
  9007                           
  9008                           ;mcc.c: 81: TMR1_Initialize();
  9009  1751  3196  2687         	fcall	_TMR1_Initialize
  9010  1753  0008               	return
  9011  1754                     __end_of_SYSTEM_Initialize:	
  9012                           
  9013                           	psect	text39
  9014  14D2                     __ptext39:	
  9015 ;; *************** function _WDT_Initialize *****************
  9016 ;; Defined at:
  9017 ;;		line 94 in file "mcc_generated_files/mcc.c"
  9018 ;; Parameters:    Size  Location     Type
  9019 ;;		None
  9020 ;; Auto vars:     Size  Location     Type
  9021 ;;		None
  9022 ;; Return value:  Size  Location     Type
  9023 ;;                  1    wreg      void 
  9024 ;; Registers used:
  9025 ;;		wreg
  9026 ;; Tracked objects:
  9027 ;;		On entry : 0/0
  9028 ;;		On exit  : 0/0
  9029 ;;		Unchanged: 0/0
  9030 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9031 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9032 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9033 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9034 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9035 ;;Total ram usage:        0 bytes
  9036 ;; Hardware stack levels used:    1
  9037 ;; Hardware stack levels required when called:    4
  9038 ;; This function calls:
  9039 ;;		Nothing
  9040 ;; This function is called by:
  9041 ;;		_SYSTEM_Initialize
  9042 ;; This function uses a non-reentrant model
  9043 ;;
  9044                           
  9045                           
  9046                           ;psect for function _WDT_Initialize
  9047  14D2                     _WDT_Initialize:	
  9048                           
  9049                           ;mcc.c: 97: WDTCON = 0x1A;
  9050                           
  9051                           ;incstack = 0
  9052                           ; Regs used in _WDT_Initialize: [wreg]
  9053  14D2  301A               	movlw	26
  9054  14D3  0021               	movlb	1	; select bank1
  9055  14D4  0097               	movwf	23	;volatile
  9056  14D5  0008               	return
  9057  14D6                     __end_of_WDT_Initialize:	
  9058                           
  9059                           	psect	text40
  9060  1529                     __ptext40:	
  9061 ;; *************** function _TMR2_Initialize *****************
  9062 ;; Defined at:
  9063 ;;		line 61 in file "mcc_generated_files/tmr2.c"
  9064 ;; Parameters:    Size  Location     Type
  9065 ;;		None
  9066 ;; Auto vars:     Size  Location     Type
  9067 ;;		None
  9068 ;; Return value:  Size  Location     Type
  9069 ;;                  1    wreg      void 
  9070 ;; Registers used:
  9071 ;;		wreg, status,2
  9072 ;; Tracked objects:
  9073 ;;		On entry : 0/0
  9074 ;;		On exit  : 0/0
  9075 ;;		Unchanged: 0/0
  9076 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9077 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9078 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9079 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9080 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9081 ;;Total ram usage:        0 bytes
  9082 ;; Hardware stack levels used:    1
  9083 ;; Hardware stack levels required when called:    4
  9084 ;; This function calls:
  9085 ;;		Nothing
  9086 ;; This function is called by:
  9087 ;;		_SYSTEM_Initialize
  9088 ;; This function uses a non-reentrant model
  9089 ;;
  9090                           
  9091                           
  9092                           ;psect for function _TMR2_Initialize
  9093  1529                     _TMR2_Initialize:	
  9094                           
  9095                           ;tmr2.c: 66: PR2 = 0x44;
  9096                           
  9097                           ;incstack = 0
  9098                           ; Regs used in _TMR2_Initialize: [wreg+status,2]
  9099  1529  3044               	movlw	68
  9100  152A  0020               	movlb	0	; select bank0
  9101  152B  009B               	movwf	27	;volatile
  9102                           
  9103                           ;tmr2.c: 69: TMR2 = 0x00;
  9104  152C  019A               	clrf	26	;volatile
  9105                           
  9106                           ;tmr2.c: 72: PIR1bits.TMR2IF = 0;
  9107  152D  1091               	bcf	17,1	;volatile
  9108                           
  9109                           ;tmr2.c: 75: T2CON = 0x46;
  9110  152E  3046               	movlw	70
  9111  152F  009C               	movwf	28	;volatile
  9112  1530  0008               	return
  9113  1531                     __end_of_TMR2_Initialize:	
  9114                           
  9115                           	psect	text41
  9116  1687                     __ptext41:	
  9117 ;; *************** function _TMR1_Initialize *****************
  9118 ;; Defined at:
  9119 ;;		line 63 in file "mcc_generated_files/tmr1.c"
  9120 ;; Parameters:    Size  Location     Type
  9121 ;;		None
  9122 ;; Auto vars:     Size  Location     Type
  9123 ;;		None
  9124 ;; Return value:  Size  Location     Type
  9125 ;;                  1    wreg      void 
  9126 ;; Registers used:
  9127 ;;		wreg, status,2, status,0, pclath, cstack
  9128 ;; Tracked objects:
  9129 ;;		On entry : 0/0
  9130 ;;		On exit  : 0/0
  9131 ;;		Unchanged: 0/0
  9132 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9133 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9134 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9135 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9136 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9137 ;;Total ram usage:        0 bytes
  9138 ;; Hardware stack levels used:    1
  9139 ;; Hardware stack levels required when called:    5
  9140 ;; This function calls:
  9141 ;;		_TMR1_SetInterruptHandler
  9142 ;; This function is called by:
  9143 ;;		_SYSTEM_Initialize
  9144 ;; This function uses a non-reentrant model
  9145 ;;
  9146                           
  9147                           
  9148                           ;psect for function _TMR1_Initialize
  9149  1687                     _TMR1_Initialize:	
  9150                           
  9151                           ;tmr1.c: 68: T1GCON = 0x00;
  9152                           
  9153                           ;incstack = 0
  9154                           ; Regs used in _TMR1_Initialize: [wreg+status,2+status,0+pclath+cstack]
  9155  1687  0020               	movlb	0	; select bank0
  9156  1688  0199               	clrf	25	;volatile
  9157                           
  9158                           ;tmr1.c: 71: TMR1H = 0xF8;
  9159  1689  30F8               	movlw	248
  9160  168A  0097               	movwf	23	;volatile
  9161                           
  9162                           ;tmr1.c: 74: TMR1L = 0x00;
  9163  168B  0196               	clrf	22	;volatile
  9164                           
  9165                           ;tmr1.c: 77: timer1ReloadVal=(uint16_t)((TMR1H << 8) | TMR1L);
  9166  168C  0817               	movf	23,w	;volatile
  9167  168D  00FD               	movwf	_timer1ReloadVal+1	;volatile
  9168  168E  0816               	movf	22,w	;volatile
  9169  168F  00FC               	movwf	_timer1ReloadVal	;volatile
  9170                           
  9171                           ;tmr1.c: 80: PIR1bits.TMR1IF = 0;
  9172  1690  1011               	bcf	17,0	;volatile
  9173                           
  9174                           ;tmr1.c: 83: PIE1bits.TMR1IE = 1;
  9175  1691  0021               	movlb	1	; select bank1
  9176  1692  1411               	bsf	17,0	;volatile
  9177                           
  9178                           ;tmr1.c: 86: TMR1_SetInterruptHandler(TMR1_DefaultInterruptHandler);
  9179  1693  30FE               	movlw	low _TMR1_DefaultInterruptHandler
  9180  1694  0020               	movlb	0	; select bank0
  9181  1695  00A1               	movwf	TMR1_SetInterruptHandler@InterruptHandler
  9182  1696  3007               	movlw	high _TMR1_DefaultInterruptHandler
  9183  1697  00A2               	movwf	TMR1_SetInterruptHandler@InterruptHandler+1
  9184  1698  3195  2555         	fcall	_TMR1_SetInterruptHandler
  9185                           
  9186                           ;tmr1.c: 89: T1CON = 0xBD;
  9187  169A  30BD               	movlw	189
  9188  169B  0020               	movlb	0	; select bank0
  9189  169C  0098               	movwf	24	;volatile
  9190  169D  0008               	return
  9191  169E                     __end_of_TMR1_Initialize:	
  9192                           
  9193                           	psect	text42
  9194  1555                     __ptext42:	
  9195 ;; *************** function _TMR1_SetInterruptHandler *****************
  9196 ;; Defined at:
  9197 ;;		line 181 in file "mcc_generated_files/tmr1.c"
  9198 ;; Parameters:    Size  Location     Type
  9199 ;;  InterruptHan    2    1[BANK0 ] PTR FTN()void 
  9200 ;;		 -> TMR1_DefaultInterruptHandler(1), 
  9201 ;; Auto vars:     Size  Location     Type
  9202 ;;		None
  9203 ;; Return value:  Size  Location     Type
  9204 ;;                  1    wreg      void 
  9205 ;; Registers used:
  9206 ;;		wreg
  9207 ;; Tracked objects:
  9208 ;;		On entry : 0/0
  9209 ;;		On exit  : 0/0
  9210 ;;		Unchanged: 0/0
  9211 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9212 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9213 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9214 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9215 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9216 ;;Total ram usage:        2 bytes
  9217 ;; Hardware stack levels used:    1
  9218 ;; Hardware stack levels required when called:    4
  9219 ;; This function calls:
  9220 ;;		Nothing
  9221 ;; This function is called by:
  9222 ;;		_TMR1_Initialize
  9223 ;; This function uses a non-reentrant model
  9224 ;;
  9225                           
  9226                           
  9227                           ;psect for function _TMR1_SetInterruptHandler
  9228  1555                     _TMR1_SetInterruptHandler:	
  9229                           
  9230                           ;tmr1.c: 182: TMR1_InterruptHandler = InterruptHandler;
  9231                           
  9232                           ;incstack = 0
  9233                           ; Regs used in _TMR1_SetInterruptHandler: [wreg]
  9234  1555  0020               	movlb	0	; select bank0
  9235  1556  0822               	movf	TMR1_SetInterruptHandler@InterruptHandler+1,w
  9236  1557  0022               	movlb	2	; select bank2
  9237  1558  00E8               	movwf	(_TMR1_InterruptHandler+1)^(0+256)
  9238  1559  0020               	movlb	0	; select bank0
  9239  155A  0821               	movf	TMR1_SetInterruptHandler@InterruptHandler,w
  9240  155B  0022               	movlb	2	; select bank2
  9241  155C  00E7               	movwf	_TMR1_InterruptHandler^(0+256)
  9242  155D  0008               	return
  9243  155E                     __end_of_TMR1_SetInterruptHandler:	
  9244                           
  9245                           	psect	text43
  9246  150B                     __ptext43:	
  9247 ;; *************** function _SPI1_Initialize *****************
  9248 ;; Defined at:
  9249 ;;		line 63 in file "mcc_generated_files/spi1.c"
  9250 ;; Parameters:    Size  Location     Type
  9251 ;;		None
  9252 ;; Auto vars:     Size  Location     Type
  9253 ;;		None
  9254 ;; Return value:  Size  Location     Type
  9255 ;;                  1    wreg      void 
  9256 ;; Registers used:
  9257 ;;		wreg, status,2
  9258 ;; Tracked objects:
  9259 ;;		On entry : 0/0
  9260 ;;		On exit  : 0/0
  9261 ;;		Unchanged: 0/0
  9262 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9263 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9264 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9265 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9266 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9267 ;;Total ram usage:        0 bytes
  9268 ;; Hardware stack levels used:    1
  9269 ;; Hardware stack levels required when called:    4
  9270 ;; This function calls:
  9271 ;;		Nothing
  9272 ;; This function is called by:
  9273 ;;		_SYSTEM_Initialize
  9274 ;; This function uses a non-reentrant model
  9275 ;;
  9276                           
  9277                           
  9278                           ;psect for function _SPI1_Initialize
  9279  150B                     _SPI1_Initialize:	
  9280                           
  9281                           ;spi1.c: 68: SSP1STAT = 0x40;
  9282                           
  9283                           ;incstack = 0
  9284                           ; Regs used in _SPI1_Initialize: [wreg+status,2]
  9285  150B  3040               	movlw	64
  9286  150C  0024               	movlb	4	; select bank4
  9287  150D  0094               	movwf	20	;volatile
  9288                           
  9289                           ;spi1.c: 71: SSP1CON1 = 0x20;
  9290  150E  3020               	movlw	32
  9291  150F  0095               	movwf	21	;volatile
  9292                           
  9293                           ;spi1.c: 74: SSP1ADD = 0x00;
  9294  1510  0192               	clrf	18	;volatile
  9295  1511  0008               	return
  9296  1512                     __end_of_SPI1_Initialize:	
  9297                           
  9298                           	psect	text44
  9299  0905                     __ptext44:	
  9300 ;; *************** function _PIN_MANAGER_Initialize *****************
  9301 ;; Defined at:
  9302 ;;		line 54 in file "mcc_generated_files/pin_manager.c"
  9303 ;; Parameters:    Size  Location     Type
  9304 ;;		None
  9305 ;; Auto vars:     Size  Location     Type
  9306 ;;		None
  9307 ;; Return value:  Size  Location     Type
  9308 ;;                  1    wreg      void 
  9309 ;; Registers used:
  9310 ;;		wreg, status,2, status,0, pclath, cstack
  9311 ;; Tracked objects:
  9312 ;;		On entry : 0/0
  9313 ;;		On exit  : 0/0
  9314 ;;		Unchanged: 0/0
  9315 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9316 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9317 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9318 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9319 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9320 ;;Total ram usage:        0 bytes
  9321 ;; Hardware stack levels used:    1
  9322 ;; Hardware stack levels required when called:    5
  9323 ;; This function calls:
  9324 ;;		_IOCAF2_SetInterruptHandler
  9325 ;; This function is called by:
  9326 ;;		_SYSTEM_Initialize
  9327 ;; This function uses a non-reentrant model
  9328 ;;
  9329                           
  9330                           
  9331                           ;psect for function _PIN_MANAGER_Initialize
  9332  0905                     _PIN_MANAGER_Initialize:	
  9333                           
  9334                           ;pin_manager.c: 59: LATA = 0x00;
  9335                           
  9336                           ;incstack = 0
  9337                           ; Regs used in _PIN_MANAGER_Initialize: [wreg+status,2+status,0+pclath+cstack]
  9338  0905  0022               	movlb	2	; select bank2
  9339  0906  018C               	clrf	12	;volatile
  9340                           
  9341                           ;pin_manager.c: 60: LATB = 0x00;
  9342  0907  018D               	clrf	13	;volatile
  9343                           
  9344                           ;pin_manager.c: 61: LATC = 0x00;
  9345  0908  018E               	clrf	14	;volatile
  9346                           
  9347                           ;pin_manager.c: 66: TRISA = 0x3F;
  9348  0909  303F               	movlw	63
  9349  090A  0021               	movlb	1	; select bank1
  9350  090B  008C               	movwf	12	;volatile
  9351                           
  9352                           ;pin_manager.c: 67: TRISB = 0xB0;
  9353  090C  30B0               	movlw	176
  9354  090D  008D               	movwf	13	;volatile
  9355                           
  9356                           ;pin_manager.c: 68: TRISC = 0x39;
  9357  090E  3039               	movlw	57
  9358  090F  008E               	movwf	14	;volatile
  9359                           
  9360                           ;pin_manager.c: 73: ANSELC = 0x01;
  9361  0910  3001               	movlw	1
  9362  0911  0023               	movlb	3	; select bank3
  9363  0912  008E               	movwf	14	;volatile
  9364                           
  9365                           ;pin_manager.c: 74: ANSELB = 0x00;
  9366  0913  018D               	clrf	13	;volatile
  9367                           
  9368                           ;pin_manager.c: 75: ANSELA = 0x03;
  9369  0914  3003               	movlw	3
  9370  0915  008C               	movwf	12	;volatile
  9371                           
  9372                           ;pin_manager.c: 80: WPUB = 0x10;
  9373  0916  3010               	movlw	16
  9374  0917  0024               	movlb	4	; select bank4
  9375  0918  008D               	movwf	13	;volatile
  9376                           
  9377                           ;pin_manager.c: 81: WPUA = 0x3B;
  9378  0919  303B               	movlw	59
  9379  091A  008C               	movwf	12	;volatile
  9380                           
  9381                           ;pin_manager.c: 82: WPUC = 0xD1;
  9382  091B  30D1               	movlw	209
  9383  091C  008E               	movwf	14	;volatile
  9384                           
  9385                           ;pin_manager.c: 83: OPTION_REGbits.nWPUEN = 0;
  9386  091D  0021               	movlb	1	; select bank1
  9387  091E  1395               	bcf	21,7	;volatile
  9388                           
  9389                           ;pin_manager.c: 89: APFCON1 = 0x2A;
  9390  091F  302A               	movlw	42
  9391  0920  0022               	movlb	2	; select bank2
  9392  0921  009E               	movwf	30	;volatile
  9393                           
  9394                           ;pin_manager.c: 90: APFCON0 = 0x00;
  9395  0922  019D               	clrf	29	;volatile
  9396                           
  9397                           ;pin_manager.c: 96: IOCAFbits.IOCAF2 = 0;
  9398  0923  0027               	movlb	7	; select bank7
  9399  0924  1113               	bcf	19,2	;volatile
  9400                           
  9401                           ;pin_manager.c: 98: IOCANbits.IOCAN2 = 0;
  9402  0925  1112               	bcf	18,2	;volatile
  9403                           
  9404                           ;pin_manager.c: 100: IOCAPbits.IOCAP2 = 1;
  9405  0926  1511               	bsf	17,2	;volatile
  9406                           
  9407                           ;pin_manager.c: 103: IOCAF2_SetInterruptHandler(IOCAF2_DefaultInterruptHandler);
  9408  0927  30FF               	movlw	low _IOCAF2_DefaultInterruptHandler
  9409  0928  0020               	movlb	0	; select bank0
  9410  0929  00A1               	movwf	IOCAF2_SetInterruptHandler@InterruptHandler
  9411  092A  3007               	movlw	high _IOCAF2_DefaultInterruptHandler
  9412  092B  00A2               	movwf	IOCAF2_SetInterruptHandler@InterruptHandler+1
  9413  092C  3195  254C         	fcall	_IOCAF2_SetInterruptHandler
  9414                           
  9415                           ;pin_manager.c: 106: INTCONbits.IOCIE = 1;
  9416  092E  158B               	bsf	11,3	;volatile
  9417  092F  0008               	return
  9418  0930                     __end_of_PIN_MANAGER_Initialize:	
  9419                           
  9420                           	psect	text45
  9421  154C                     __ptext45:	
  9422 ;; *************** function _IOCAF2_SetInterruptHandler *****************
  9423 ;; Defined at:
  9424 ;;		line 139 in file "mcc_generated_files/pin_manager.c"
  9425 ;; Parameters:    Size  Location     Type
  9426 ;;  InterruptHan    2    1[BANK0 ] PTR FTN()void 
  9427 ;;		 -> IOCAF2_DefaultInterruptHandler(1), 
  9428 ;; Auto vars:     Size  Location     Type
  9429 ;;		None
  9430 ;; Return value:  Size  Location     Type
  9431 ;;                  1    wreg      void 
  9432 ;; Registers used:
  9433 ;;		wreg
  9434 ;; Tracked objects:
  9435 ;;		On entry : 0/0
  9436 ;;		On exit  : 0/0
  9437 ;;		Unchanged: 0/0
  9438 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9439 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9440 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9441 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9442 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9443 ;;Total ram usage:        2 bytes
  9444 ;; Hardware stack levels used:    1
  9445 ;; Hardware stack levels required when called:    4
  9446 ;; This function calls:
  9447 ;;		Nothing
  9448 ;; This function is called by:
  9449 ;;		_PIN_MANAGER_Initialize
  9450 ;; This function uses a non-reentrant model
  9451 ;;
  9452                           
  9453                           
  9454                           ;psect for function _IOCAF2_SetInterruptHandler
  9455  154C                     _IOCAF2_SetInterruptHandler:	
  9456                           
  9457                           ;pin_manager.c: 140: IOCAF2_InterruptHandler = InterruptHandler;
  9458                           
  9459                           ;incstack = 0
  9460                           ; Regs used in _IOCAF2_SetInterruptHandler: [wreg]
  9461  154C  0020               	movlb	0	; select bank0
  9462  154D  0822               	movf	IOCAF2_SetInterruptHandler@InterruptHandler+1,w
  9463  154E  0022               	movlb	2	; select bank2
  9464  154F  00EA               	movwf	(_IOCAF2_InterruptHandler+1)^(0+256)
  9465  1550  0020               	movlb	0	; select bank0
  9466  1551  0821               	movf	IOCAF2_SetInterruptHandler@InterruptHandler,w
  9467  1552  0022               	movlb	2	; select bank2
  9468  1553  00E9               	movwf	_IOCAF2_InterruptHandler^(0+256)
  9469  1554  0008               	return
  9470  1555                     __end_of_IOCAF2_SetInterruptHandler:	
  9471                           
  9472                           	psect	text46
  9473  1504                     __ptext46:	
  9474 ;; *************** function _OSCILLATOR_Initialize *****************
  9475 ;; Defined at:
  9476 ;;		line 84 in file "mcc_generated_files/mcc.c"
  9477 ;; Parameters:    Size  Location     Type
  9478 ;;		None
  9479 ;; Auto vars:     Size  Location     Type
  9480 ;;		None
  9481 ;; Return value:  Size  Location     Type
  9482 ;;                  1    wreg      void 
  9483 ;; Registers used:
  9484 ;;		wreg, status,2
  9485 ;; Tracked objects:
  9486 ;;		On entry : 0/0
  9487 ;;		On exit  : 0/0
  9488 ;;		Unchanged: 0/0
  9489 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9490 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9491 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9492 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9493 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9494 ;;Total ram usage:        0 bytes
  9495 ;; Hardware stack levels used:    1
  9496 ;; Hardware stack levels required when called:    4
  9497 ;; This function calls:
  9498 ;;		Nothing
  9499 ;; This function is called by:
  9500 ;;		_SYSTEM_Initialize
  9501 ;; This function uses a non-reentrant model
  9502 ;;
  9503                           
  9504                           
  9505                           ;psect for function _OSCILLATOR_Initialize
  9506  1504                     _OSCILLATOR_Initialize:	
  9507                           
  9508                           ;mcc.c: 87: OSCCON = 0x72;
  9509                           
  9510                           ;incstack = 0
  9511                           ; Regs used in _OSCILLATOR_Initialize: [wreg+status,2]
  9512  1504  3072               	movlw	114
  9513  1505  0021               	movlb	1	; select bank1
  9514  1506  0099               	movwf	25	;volatile
  9515                           
  9516                           ;mcc.c: 89: OSCTUNE = 0x00;
  9517  1507  0198               	clrf	24	;volatile
  9518                           
  9519                           ;mcc.c: 91: BORCON = 0x00;
  9520  1508  0022               	movlb	2	; select bank2
  9521  1509  0196               	clrf	22	;volatile
  9522  150A  0008               	return
  9523  150B                     __end_of_OSCILLATOR_Initialize:	
  9524                           
  9525                           	psect	text47
  9526  171E                     __ptext47:	
  9527 ;; *************** function _I2C2_Initialize *****************
  9528 ;; Defined at:
  9529 ;;		line 198 in file "mcc_generated_files/i2c2.c"
  9530 ;; Parameters:    Size  Location     Type
  9531 ;;		None
  9532 ;; Auto vars:     Size  Location     Type
  9533 ;;		None
  9534 ;; Return value:  Size  Location     Type
  9535 ;;                  1    wreg      void 
  9536 ;; Registers used:
  9537 ;;		wreg, status,2
  9538 ;; Tracked objects:
  9539 ;;		On entry : 0/0
  9540 ;;		On exit  : 0/0
  9541 ;;		Unchanged: 0/0
  9542 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9543 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9544 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9545 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9546 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9547 ;;Total ram usage:        1 bytes
  9548 ;; Hardware stack levels used:    1
  9549 ;; Hardware stack levels required when called:    4
  9550 ;; This function calls:
  9551 ;;		Nothing
  9552 ;; This function is called by:
  9553 ;;		_SYSTEM_Initialize
  9554 ;; This function uses a non-reentrant model
  9555 ;;
  9556                           
  9557                           
  9558                           ;psect for function _I2C2_Initialize
  9559  171E                     _I2C2_Initialize:	
  9560                           
  9561                           ;i2c2.c: 200: i2c2_object.pTrHead = i2c2_tr_queue;
  9562                           
  9563                           ;incstack = 0
  9564                           ; Regs used in _I2C2_Initialize: [wreg+status,2]
  9565  171E  30E1               	movlw	(low (_i2c2_tr_queue| 0))& (0+255)
  9566  171F  0020               	movlb	0	; select bank0
  9567  1720  00A1               	movwf	??_I2C2_Initialize
  9568  1721  0821               	movf	??_I2C2_Initialize,w
  9569  1722  0021               	movlb	1	; select bank1
  9570  1723  00C8               	movwf	(low ((_i2c2_object| 0+1)))^(0+128)
  9571                           
  9572                           ;i2c2.c: 201: i2c2_object.pTrTail = i2c2_tr_queue;
  9573  1724  30E1               	movlw	(low (_i2c2_tr_queue| 0))& (0+255)
  9574  1725  0020               	movlb	0	; select bank0
  9575  1726  00A1               	movwf	??_I2C2_Initialize
  9576  1727  0821               	movf	??_I2C2_Initialize,w
  9577  1728  0021               	movlb	1	; select bank1
  9578  1729  00C7               	movwf	_i2c2_object^(0+128)
  9579                           
  9580                           ;i2c2.c: 202: i2c2_object.trStatus.s.empty = 1;
  9581  172A  14C9               	bsf	(_i2c2_object^(0+128)+2),1
  9582                           
  9583                           ;i2c2.c: 203: i2c2_object.trStatus.s.full = 0;
  9584  172B  1049               	bcf	(_i2c2_object^(0+128)+2),0
  9585                           
  9586                           ;i2c2.c: 205: i2c2_object.i2cErrors = 0;
  9587  172C  01CB               	clrf	(_i2c2_object^(0+128)+4)
  9588                           
  9589                           ;i2c2.c: 208: SSP2STAT = 0x00;
  9590  172D  0024               	movlb	4	; select bank4
  9591  172E  019C               	clrf	28	;volatile
  9592                           
  9593                           ;i2c2.c: 210: SSP2CON1 = 0x28;
  9594  172F  3028               	movlw	40
  9595  1730  009D               	movwf	29	;volatile
  9596                           
  9597                           ;i2c2.c: 212: SSP2CON3 = 0x00;
  9598  1731  019F               	clrf	31	;volatile
  9599                           
  9600                           ;i2c2.c: 214: SSP2ADD = 0x03;
  9601  1732  3003               	movlw	3
  9602  1733  009A               	movwf	26	;volatile
  9603                           
  9604                           ;i2c2.c: 218: PIR4bits.SSP2IF = 0;
  9605  1734  0020               	movlb	0	; select bank0
  9606  1735  1014               	bcf	20,0	;volatile
  9607                           
  9608                           ;i2c2.c: 220: PIE4bits.SSP2IE = 1;
  9609  1736  0021               	movlb	1	; select bank1
  9610  1737  1414               	bsf	20,0	;volatile
  9611  1738  0008               	return
  9612  1739                     __end_of_I2C2_Initialize:	
  9613                           
  9614                           	psect	text48
  9615  14CE                     __ptext48:	
  9616 ;; *************** function _FVR_Initialize *****************
  9617 ;; Defined at:
  9618 ;;		line 57 in file "mcc_generated_files/fvr.c"
  9619 ;; Parameters:    Size  Location     Type
  9620 ;;		None
  9621 ;; Auto vars:     Size  Location     Type
  9622 ;;		None
  9623 ;; Return value:  Size  Location     Type
  9624 ;;                  1    wreg      void 
  9625 ;; Registers used:
  9626 ;;		wreg
  9627 ;; Tracked objects:
  9628 ;;		On entry : 0/0
  9629 ;;		On exit  : 0/0
  9630 ;;		Unchanged: 0/0
  9631 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9632 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9633 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9634 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9635 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9636 ;;Total ram usage:        0 bytes
  9637 ;; Hardware stack levels used:    1
  9638 ;; Hardware stack levels required when called:    4
  9639 ;; This function calls:
  9640 ;;		Nothing
  9641 ;; This function is called by:
  9642 ;;		_SYSTEM_Initialize
  9643 ;; This function uses a non-reentrant model
  9644 ;;
  9645                           
  9646                           
  9647                           ;psect for function _FVR_Initialize
  9648  14CE                     _FVR_Initialize:	
  9649                           
  9650                           ;fvr.c: 60: FVRCON = 0x01;
  9651                           
  9652                           ;incstack = 0
  9653                           ; Regs used in _FVR_Initialize: [wreg]
  9654  14CE  3001               	movlw	1
  9655  14CF  0022               	movlb	2	; select bank2
  9656  14D0  0097               	movwf	23	;volatile
  9657  14D1  0008               	return
  9658  14D2                     __end_of_FVR_Initialize:	
  9659                           
  9660                           	psect	text49
  9661  1521                     __ptext49:	
  9662 ;; *************** function _ADC_Initialize *****************
  9663 ;; Defined at:
  9664 ;;		line 62 in file "mcc_generated_files/adc.c"
  9665 ;; Parameters:    Size  Location     Type
  9666 ;;		None
  9667 ;; Auto vars:     Size  Location     Type
  9668 ;;		None
  9669 ;; Return value:  Size  Location     Type
  9670 ;;                  1    wreg      void 
  9671 ;; Registers used:
  9672 ;;		wreg, status,2
  9673 ;; Tracked objects:
  9674 ;;		On entry : 0/0
  9675 ;;		On exit  : 0/0
  9676 ;;		Unchanged: 0/0
  9677 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9678 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9679 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9680 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9681 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9682 ;;Total ram usage:        0 bytes
  9683 ;; Hardware stack levels used:    1
  9684 ;; Hardware stack levels required when called:    4
  9685 ;; This function calls:
  9686 ;;		Nothing
  9687 ;; This function is called by:
  9688 ;;		_SYSTEM_Initialize
  9689 ;; This function uses a non-reentrant model
  9690 ;;
  9691                           
  9692                           
  9693                           ;psect for function _ADC_Initialize
  9694  1521                     _ADC_Initialize:	
  9695                           
  9696                           ;adc.c: 67: ADCON0 = 0x01;
  9697                           
  9698                           ;incstack = 0
  9699                           ; Regs used in _ADC_Initialize: [wreg+status,2]
  9700  1521  3001               	movlw	1
  9701  1522  0021               	movlb	1	; select bank1
  9702  1523  009D               	movwf	29	;volatile
  9703                           
  9704                           ;adc.c: 70: ADCON1 = 0x90;
  9705  1524  3090               	movlw	144
  9706  1525  009E               	movwf	30	;volatile
  9707                           
  9708                           ;adc.c: 73: ADRESL = 0x00;
  9709  1526  019B               	clrf	27	;volatile
  9710                           
  9711                           ;adc.c: 76: ADRESH = 0x00;
  9712  1527  019C               	clrf	28	;volatile
  9713  1528  0008               	return
  9714  1529                     __end_of_ADC_Initialize:	
  9715                           
  9716                           	psect	text50
  9717  14C5                     __ptext50:	
  9718 ;; *************** function _DOOR_run *****************
  9719 ;; Defined at:
  9720 ;;		line 24 in file "doorlogic.c"
  9721 ;; Parameters:    Size  Location     Type
  9722 ;;		None
  9723 ;; Auto vars:     Size  Location     Type
  9724 ;;		None
  9725 ;; Return value:  Size  Location     Type
  9726 ;;                  1    wreg      enum E3332
  9727 ;; Registers used:
  9728 ;;		wreg
  9729 ;; Tracked objects:
  9730 ;;		On entry : 0/0
  9731 ;;		On exit  : 0/0
  9732 ;;		Unchanged: 0/0
  9733 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9734 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9735 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9736 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9737 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9738 ;;Total ram usage:        0 bytes
  9739 ;; Hardware stack levels used:    1
  9740 ;; Hardware stack levels required when called:    4
  9741 ;; This function calls:
  9742 ;;		Nothing
  9743 ;; This function is called by:
  9744 ;;		_main
  9745 ;; This function uses a non-reentrant model
  9746 ;;
  9747                           
  9748                           
  9749                           ;psect for function _DOOR_run
  9750  14C5                     _DOOR_run:	
  9751                           
  9752                           ;doorlogic.c: 62: return(doorState);
  9753                           
  9754                           ;incstack = 0
  9755                           ; Regs used in _DOOR_run: [wreg]
  9756  14C5  0021               	movlb	1	; select bank1
  9757  14C6  085C               	movf	_doorState^(0+128),w
  9758  14C7  0008               	return
  9759  14C8                     __end_of_DOOR_run:	
  9760                           
  9761                           	psect	text51
  9762  1543                     __ptext51:	
  9763 ;; *************** function _DOOR_init *****************
  9764 ;; Defined at:
  9765 ;;		line 10 in file "doorlogic.c"
  9766 ;; Parameters:    Size  Location     Type
  9767 ;;		None
  9768 ;; Auto vars:     Size  Location     Type
  9769 ;;		None
  9770 ;; Return value:  Size  Location     Type
  9771 ;;                  1    wreg      void 
  9772 ;; Registers used:
  9773 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9774 ;; Tracked objects:
  9775 ;;		On entry : 0/0
  9776 ;;		On exit  : 0/0
  9777 ;;		Unchanged: 0/0
  9778 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9779 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9780 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9781 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9782 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9783 ;;Total ram usage:        1 bytes
  9784 ;; Hardware stack levels used:    1
  9785 ;; Hardware stack levels required when called:    6
  9786 ;; This function calls:
  9787 ;;		_Storage_load
  9788 ;; This function is called by:
  9789 ;;		_main
  9790 ;; This function uses a non-reentrant model
  9791 ;;
  9792                           
  9793                           
  9794                           ;psect for function _DOOR_init
  9795  1543                     _DOOR_init:	
  9796                           
  9797                           ;doorlogic.c: 13: Storage_load(&doorOpenAngle, &doorClosedAngle);
  9798                           
  9799                           ;incstack = 0
  9800                           ; Regs used in _DOOR_init: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9801  1543  30E5               	movlw	(low (_doorClosedAngle| 0))& (0+255)
  9802  1544  0020               	movlb	0	; select bank0
  9803  1545  00A8               	movwf	??_DOOR_init
  9804  1546  0828               	movf	??_DOOR_init,w
  9805  1547  00A4               	movwf	Storage_load@closeAngle
  9806  1548  30E6               	movlw	(low (_doorOpenAngle| 0))& (0+255)
  9807  1549  318A  2290         	fcall	_Storage_load
  9808  154B  0008               	return
  9809  154C                     __end_of_DOOR_init:	
  9810                           
  9811                           	psect	text52
  9812  0A90                     __ptext52:	
  9813 ;; *************** function _Storage_load *****************
  9814 ;; Defined at:
  9815 ;;		line 8 in file "storage.c"
  9816 ;; Parameters:    Size  Location     Type
  9817 ;;  openAngle       1    wreg     PTR unsigned char 
  9818 ;;		 -> doorOpenAngle(1), 
  9819 ;;  closeAngle      1    4[BANK0 ] PTR unsigned char 
  9820 ;;		 -> doorClosedAngle(1), 
  9821 ;; Auto vars:     Size  Location     Type
  9822 ;;  openAngle       1    7[BANK0 ] PTR unsigned char 
  9823 ;;		 -> doorOpenAngle(1), 
  9824 ;;  byte            1    6[BANK0 ] unsigned char 
  9825 ;; Return value:  Size  Location     Type
  9826 ;;                  1    wreg      void 
  9827 ;; Registers used:
  9828 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9829 ;; Tracked objects:
  9830 ;;		On entry : 0/0
  9831 ;;		On exit  : 0/0
  9832 ;;		Unchanged: 0/0
  9833 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9834 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9835 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9836 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9837 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9838 ;;Total ram usage:        4 bytes
  9839 ;; Hardware stack levels used:    1
  9840 ;; Hardware stack levels required when called:    5
  9841 ;; This function calls:
  9842 ;;		_DATAEE_ReadByte
  9843 ;;		_DATAEE_WriteByte
  9844 ;; This function is called by:
  9845 ;;		_DOOR_init
  9846 ;; This function uses a non-reentrant model
  9847 ;;
  9848                           
  9849                           
  9850                           ;psect for function _Storage_load
  9851  0A90                     _Storage_load:	
  9852                           
  9853                           ;incstack = 0
  9854                           ; Regs used in _Storage_load: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9855                           ;Storage_load@openAngle stored from wreg
  9856  0A90  0020               	movlb	0	; select bank0
  9857  0A91  00A7               	movwf	Storage_load@openAngle
  9858                           
  9859                           ;storage.c: 10: char byte;
  9860                           ;storage.c: 12: byte=DATAEE_ReadByte(0 );
  9861  0A92  3000               	movlw	0
  9862  0A93  3195  2580  318A   	fcall	_DATAEE_ReadByte
  9863  0A96  0020               	movlb	0	; select bank0
  9864  0A97  00A5               	movwf	??_Storage_load
  9865  0A98  0825               	movf	??_Storage_load,w
  9866  0A99  00A6               	movwf	Storage_load@byte
  9867                           
  9868                           ;storage.c: 13: if(byte==1)
  9869  0A9A  0326               	decf	Storage_load@byte,w
  9870  0A9B  1D03               	btfss	3,2
  9871  0A9C  2AB3               	goto	l5768
  9872                           
  9873                           ;storage.c: 14: {
  9874                           ;storage.c: 15: *openAngle=DATAEE_ReadByte(1);
  9875  0A9D  3001               	movlw	1
  9876  0A9E  3195  2580  318A   	fcall	_DATAEE_ReadByte
  9877  0AA1  0020               	movlb	0	; select bank0
  9878  0AA2  00A5               	movwf	??_Storage_load
  9879  0AA3  0827               	movf	Storage_load@openAngle,w
  9880  0AA4  0086               	movwf	6
  9881  0AA5  0187               	clrf	7
  9882  0AA6  0825               	movf	??_Storage_load,w
  9883  0AA7  0081               	movwf	1
  9884                           
  9885                           ;storage.c: 16: *closeAngle=DATAEE_ReadByte(2);
  9886  0AA8  3002               	movlw	2
  9887  0AA9  3195  2580         	fcall	_DATAEE_ReadByte
  9888  0AAB  0020               	movlb	0	; select bank0
  9889  0AAC  00A5               	movwf	??_Storage_load
  9890  0AAD  0824               	movf	Storage_load@closeAngle,w
  9891  0AAE  0086               	movwf	6
  9892  0AAF  0187               	clrf	7
  9893  0AB0  0825               	movf	??_Storage_load,w
  9894  0AB1  0081               	movwf	1
  9895                           
  9896                           ;storage.c: 17: }
  9897  0AB2  0008               	return
  9898  0AB3                     l5768:	
  9899                           
  9900                           ;storage.c: 18: else
  9901                           ;storage.c: 19: {
  9902                           ;storage.c: 20: DATAEE_WriteByte(1, 15);
  9903  0AB3  300F               	movlw	15
  9904  0AB4  00A5               	movwf	??_Storage_load
  9905  0AB5  0825               	movf	??_Storage_load,w
  9906  0AB6  00A1               	movwf	DATAEE_WriteByte@bData
  9907  0AB7  3001               	movlw	1
  9908  0AB8  3188  2090  318A   	fcall	_DATAEE_WriteByte
  9909                           
  9910                           ;storage.c: 21: DATAEE_WriteByte(2, 5);
  9911  0ABB  3005               	movlw	5
  9912  0ABC  0020               	movlb	0	; select bank0
  9913  0ABD  00A5               	movwf	??_Storage_load
  9914  0ABE  0825               	movf	??_Storage_load,w
  9915  0ABF  00A1               	movwf	DATAEE_WriteByte@bData
  9916  0AC0  3002               	movlw	2
  9917  0AC1  3188  2090  318A   	fcall	_DATAEE_WriteByte
  9918                           
  9919                           ;storage.c: 22: DATAEE_WriteByte(0 , 1);
  9920  0AC4  0020               	movlb	0	; select bank0
  9921  0AC5  01A1               	clrf	DATAEE_WriteByte@bData
  9922  0AC6  0AA1               	incf	DATAEE_WriteByte@bData,f
  9923  0AC7  3000               	movlw	0
  9924  0AC8  3188  2090         	fcall	_DATAEE_WriteByte
  9925                           
  9926                           ;storage.c: 23: *openAngle=15;
  9927  0ACA  300F               	movlw	15
  9928  0ACB  0020               	movlb	0	; select bank0
  9929  0ACC  00A5               	movwf	??_Storage_load
  9930  0ACD  0827               	movf	Storage_load@openAngle,w
  9931  0ACE  0086               	movwf	6
  9932  0ACF  0187               	clrf	7
  9933  0AD0  0825               	movf	??_Storage_load,w
  9934  0AD1  0081               	movwf	1
  9935                           
  9936                           ;storage.c: 24: *closeAngle=5;
  9937  0AD2  3005               	movlw	5
  9938  0AD3  00A5               	movwf	??_Storage_load
  9939  0AD4  0824               	movf	Storage_load@closeAngle,w
  9940  0AD5  0086               	movwf	6
  9941  0AD6  0187               	clrf	7
  9942  0AD7  0825               	movf	??_Storage_load,w
  9943  0AD8  0081               	movwf	1
  9944  0AD9  0008               	return
  9945  0ADA                     __end_of_Storage_load:	
  9946                           
  9947                           	psect	text53
  9948  0890                     __ptext53:	
  9949 ;; *************** function _DATAEE_WriteByte *****************
  9950 ;; Defined at:
  9951 ;;		line 186 in file "mcc_generated_files/memory.c"
  9952 ;; Parameters:    Size  Location     Type
  9953 ;;  bAdd            1    wreg     unsigned char 
  9954 ;;  bData           1    1[BANK0 ] unsigned char 
  9955 ;; Auto vars:     Size  Location     Type
  9956 ;;  bAdd            1    2[BANK0 ] unsigned char 
  9957 ;;  GIEBitValue     1    3[BANK0 ] unsigned char 
  9958 ;; Return value:  Size  Location     Type
  9959 ;;                  1    wreg      void 
  9960 ;; Registers used:
  9961 ;;		wreg, status,2, status,0
  9962 ;; Tracked objects:
  9963 ;;		On entry : 0/0
  9964 ;;		On exit  : 0/0
  9965 ;;		Unchanged: 0/0
  9966 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9967 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9968 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9969 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9970 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9971 ;;Total ram usage:        3 bytes
  9972 ;; Hardware stack levels used:    1
  9973 ;; Hardware stack levels required when called:    4
  9974 ;; This function calls:
  9975 ;;		Nothing
  9976 ;; This function is called by:
  9977 ;;		_Storage_load
  9978 ;;		_Storage_save
  9979 ;; This function uses a non-reentrant model
  9980 ;;
  9981                           
  9982                           
  9983                           ;psect for function _DATAEE_WriteByte
  9984  0890                     _DATAEE_WriteByte:	
  9985                           
  9986                           ;incstack = 0
  9987                           ; Regs used in _DATAEE_WriteByte: [wreg+status,2+status,0]
  9988                           ;DATAEE_WriteByte@bAdd stored from wreg
  9989  0890  0020               	movlb	0	; select bank0
  9990  0891  00A2               	movwf	DATAEE_WriteByte@bAdd
  9991                           
  9992                           ;memory.c: 188: uint8_t GIEBitValue = 0;
  9993  0892  01A3               	clrf	DATAEE_WriteByte@GIEBitValue
  9994                           
  9995                           ;memory.c: 190: EEADRL = (uint8_t)(bAdd & 0x0ff);
  9996  0893  0822               	movf	DATAEE_WriteByte@bAdd,w
  9997  0894  0023               	movlb	3	; select bank3
  9998  0895  0091               	movwf	17	;volatile
  9999                           
 10000                           ;memory.c: 191: EEDATL = bData;
 10001  0896  0020               	movlb	0	; select bank0
 10002  0897  0821               	movf	DATAEE_WriteByte@bData,w
 10003  0898  0023               	movlb	3	; select bank3
 10004  0899  0093               	movwf	19	;volatile
 10005                           
 10006                           ;memory.c: 192: EECON1bits.EEPGD = 0;
 10007  089A  1395               	bcf	21,7	;volsfr
 10008                           
 10009                           ;memory.c: 193: EECON1bits.CFGS = 0;
 10010  089B  1315               	bcf	21,6	;volsfr
 10011                           
 10012                           ;memory.c: 194: EECON1bits.WREN = 1;
 10013  089C  1515               	bsf	21,2	;volsfr
 10014                           
 10015                           ;memory.c: 196: GIEBitValue = INTCONbits.GIE;
 10016  089D  3000               	movlw	0
 10017  089E  1B8B               	btfsc	11,7	;volatile
 10018  089F  3001               	movlw	1
 10019  08A0  0020               	movlb	0	; select bank0
 10020  08A1  00A3               	movwf	DATAEE_WriteByte@GIEBitValue
 10021                           
 10022                           ;memory.c: 197: INTCONbits.GIE = 0;
 10023  08A2  138B               	bcf	11,7	;volatile
 10024                           
 10025                           ;memory.c: 198: EECON2 = 0x55;
 10026  08A3  3055               	movlw	85
 10027  08A4  0023               	movlb	3	; select bank3
 10028  08A5  0096               	movwf	22	;volsfr
 10029                           
 10030                           ;memory.c: 199: EECON2 = 0xAA;
 10031  08A6  30AA               	movlw	170
 10032  08A7  0096               	movwf	22	;volsfr
 10033                           
 10034                           ;memory.c: 200: EECON1bits.WR = 1;
 10035  08A8  1495               	bsf	21,1	;volsfr
 10036  08A9                     l498:	
 10037                           ;memory.c: 203: {
 10038                           
 10039                           ;memory.c: 202: while (EECON1bits.WR)
 10040                           
 10041  08A9  1895               	btfsc	21,1	;volsfr
 10042  08AA  28A9               	goto	l498
 10043                           
 10044                           ;memory.c: 204: }
 10045                           ;memory.c: 206: EECON1bits.WREN = 0;
 10046  08AB  1115               	bcf	21,2	;volsfr
 10047                           
 10048                           ;memory.c: 207: INTCONbits.GIE = GIEBitValue;
 10049  08AC  0020               	movlb	0	; select bank0
 10050  08AD  0C23               	rrf	DATAEE_WriteByte@GIEBitValue,w
 10051  08AE  1C03               	skipc
 10052  08AF  138B               	bcf	11,7	;volatile
 10053  08B0  1803               	skipnc
 10054  08B1  178B               	bsf	11,7	;volatile
 10055  08B2  0008               	return
 10056  08B3                     __end_of_DATAEE_WriteByte:	
 10057                           
 10058                           	psect	text54
 10059  1580                     __ptext54:	
 10060 ;; *************** function _DATAEE_ReadByte *****************
 10061 ;; Defined at:
 10062 ;;		line 210 in file "mcc_generated_files/memory.c"
 10063 ;; Parameters:    Size  Location     Type
 10064 ;;  bAdd            1    wreg     unsigned char 
 10065 ;; Auto vars:     Size  Location     Type
 10066 ;;  bAdd            1    1[BANK0 ] unsigned char 
 10067 ;; Return value:  Size  Location     Type
 10068 ;;                  1    wreg      unsigned char 
 10069 ;; Registers used:
 10070 ;;		wreg
 10071 ;; Tracked objects:
 10072 ;;		On entry : 0/0
 10073 ;;		On exit  : 0/0
 10074 ;;		Unchanged: 0/0
 10075 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10076 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10077 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10078 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10079 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10080 ;;Total ram usage:        1 bytes
 10081 ;; Hardware stack levels used:    1
 10082 ;; Hardware stack levels required when called:    4
 10083 ;; This function calls:
 10084 ;;		Nothing
 10085 ;; This function is called by:
 10086 ;;		_Storage_load
 10087 ;; This function uses a non-reentrant model
 10088 ;;
 10089                           
 10090                           
 10091                           ;psect for function _DATAEE_ReadByte
 10092  1580                     _DATAEE_ReadByte:	
 10093                           
 10094                           ;incstack = 0
 10095                           ; Regs used in _DATAEE_ReadByte: [wreg]
 10096                           ;DATAEE_ReadByte@bAdd stored from wreg
 10097  1580  0020               	movlb	0	; select bank0
 10098  1581  00A1               	movwf	DATAEE_ReadByte@bAdd
 10099                           
 10100                           ;memory.c: 212: EEADRL = (uint8_t)(bAdd & 0x0ff);
 10101  1582  0821               	movf	DATAEE_ReadByte@bAdd,w
 10102  1583  0023               	movlb	3	; select bank3
 10103  1584  0091               	movwf	17	;volatile
 10104                           
 10105                           ;memory.c: 213: EECON1bits.CFGS = 0;
 10106  1585  1315               	bcf	21,6	;volsfr
 10107                           
 10108                           ;memory.c: 214: EECON1bits.EEPGD = 0;
 10109  1586  1395               	bcf	21,7	;volsfr
 10110                           
 10111                           ;memory.c: 215: EECON1bits.RD = 1;
 10112  1587  1415               	bsf	21,0	;volsfr
 10113                           
 10114                           ;memory.c: 216: __nop();
 10115  1588  0000               	nop
 10116                           
 10117                           ;memory.c: 217: __nop();
 10118  1589  0000               	nop
 10119                           
 10120                           ;memory.c: 219: return (EEDATL);
 10121  158A  0023               	movlb	3	; select bank3
 10122  158B  0813               	movf	19,w	;volatile
 10123  158C  0008               	return
 10124  158D                     __end_of_DATAEE_ReadByte:	
 10125                           
 10126                           	psect	text55
 10127  0077                     __ptext55:	
 10128 ;; *************** function _BMP_readTemperature *****************
 10129 ;; Defined at:
 10130 ;;		line 72 in file "bmp280.c"
 10131 ;; Parameters:    Size  Location     Type
 10132 ;;		None
 10133 ;; Auto vars:     Size  Location     Type
 10134 ;;  tmp             1   19[BANK1 ] unsigned char 
 10135 ;;  status          1   18[BANK1 ] unsigned char 
 10136 ;; Return value:  Size  Location     Type
 10137 ;;                  3    0[BANK1 ] float 
 10138 ;; Registers used:
 10139 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10140 ;; Tracked objects:
 10141 ;;		On entry : 0/0
 10142 ;;		On exit  : 0/0
 10143 ;;		Unchanged: 0/0
 10144 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10145 ;;      Params:         0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0
 10146 ;;      Locals:         0       0       5       0       0       0       0       0       0       0       0       0       
      +0       0
 10147 ;;      Temps:          0       0      12       0       0       0       0       0       0       0       0       0       
      +0       0
 10148 ;;      Totals:         0       0      20       0       0       0       0       0       0       0       0       0       
      +0       0
 10149 ;;Total ram usage:       20 bytes
 10150 ;; Hardware stack levels used:    1
 10151 ;; Hardware stack levels required when called:    9
 10152 ;; This function calls:
 10153 ;;		_BMP_init
 10154 ;;		_Diag_getTempSensorHealth
 10155 ;;		_Diag_setTempSensorHealth
 10156 ;;		_HMC5883L_ReadBits
 10157 ;;		_I2C_BufferRead
 10158 ;;		_I2C_ByteWrite
 10159 ;;		___aldiv
 10160 ;;		___altoft
 10161 ;;		___awtoft
 10162 ;;		___ftadd
 10163 ;;		___ftdiv
 10164 ;;		___ftmul
 10165 ;;		___ftneg
 10166 ;;		___fttol
 10167 ;;		___lwtoft
 10168 ;; This function is called by:
 10169 ;;		_main
 10170 ;; This function uses a non-reentrant model
 10171 ;;
 10172                           
 10173                           
 10174                           ;psect for function _BMP_readTemperature
 10175  0077                     _BMP_readTemperature:	
 10176                           
 10177                           ;bmp280.c: 74: char tmp=0;
 10178                           
 10179                           ;incstack = 0
 10180                           ; Regs used in _BMP_readTemperature: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 10181  0077  0021               	movlb	1	; select bank1
 10182  0078  01B3               	clrf	BMP_readTemperature@tmp^(0+128)
 10183                           
 10184                           ;bmp280.c: 75: bool status;
 10185                           ;bmp280.c: 77: tmp=0x41;
 10186  0079  3041               	movlw	65
 10187  007A  00A3               	movwf	??_BMP_readTemperature^(0+128)
 10188  007B  0823               	movf	??_BMP_readTemperature^(0+128),w
 10189  007C  00B3               	movwf	BMP_readTemperature@tmp^(0+128)
 10190                           
 10191                           ;bmp280.c: 78: if(Diag_getTempSensorHealth()==0)
 10192  007D  3194  24C2  3180   	fcall	_Diag_getTempSensorHealth
 10193  0080  3A00               	xorlw	0
 10194  0081  1D03               	skipz
 10195  0082  2886               	goto	l1022
 10196                           
 10197                           ;bmp280.c: 79: {
 10198                           ;bmp280.c: 80: BMP_init();
 10199  0083  318C  2431  3180   	fcall	_BMP_init
 10200  0086                     l1022:	
 10201                           
 10202                           ;bmp280.c: 81: }
 10203                           ;bmp280.c: 82: I2C_ByteWrite(0x76, &tmp, 0xF4);
 10204  0086  30B3               	movlw	(low (BMP_readTemperature@tmp| 0))& (0+255)
 10205  0087  0021               	movlb	1	; select bank1
 10206  0088  00A3               	movwf	??_BMP_readTemperature^(0+128)
 10207  0089  0823               	movf	??_BMP_readTemperature^(0+128),w
 10208  008A  0020               	movlb	0	; select bank0
 10209  008B  00AF               	movwf	I2C_ByteWrite@pBuffer
 10210  008C  30F4               	movlw	244
 10211  008D  0021               	movlb	1	; select bank1
 10212  008E  00A4               	movwf	(??_BMP_readTemperature+1)^(0+128)
 10213  008F  0824               	movf	(??_BMP_readTemperature+1)^(0+128),w
 10214  0090  0020               	movlb	0	; select bank0
 10215  0091  00B0               	movwf	I2C_ByteWrite@WriteAddr
 10216  0092  3076               	movlw	118
 10217  0093  3189  218C  3180   	fcall	_I2C_ByteWrite
 10218  0096                     l1023:	
 10219                           ;bmp280.c: 83: do
 10220                           
 10221                           
 10222                           ;bmp280.c: 84: {
 10223                           ;bmp280.c: 85: status=HMC5883L_ReadBits(0x76, 0xF3 , 3, 1, &tmp);
 10224  0096  30F3               	movlw	243
 10225  0097  0021               	movlb	1	; select bank1
 10226  0098  00A3               	movwf	??_BMP_readTemperature^(0+128)
 10227  0099  0823               	movf	??_BMP_readTemperature^(0+128),w
 10228  009A  0020               	movlb	0	; select bank0
 10229  009B  00C3               	movwf	HMC5883L_ReadBits@regAddr
 10230  009C  3003               	movlw	3
 10231  009D  0021               	movlb	1	; select bank1
 10232  009E  00A4               	movwf	(??_BMP_readTemperature+1)^(0+128)
 10233  009F  0824               	movf	(??_BMP_readTemperature+1)^(0+128),w
 10234  00A0  0020               	movlb	0	; select bank0
 10235  00A1  00C4               	movwf	HMC5883L_ReadBits@bitStart
 10236  00A2  01C5               	clrf	HMC5883L_ReadBits@length
 10237  00A3  0AC5               	incf	HMC5883L_ReadBits@length,f
 10238  00A4  30B3               	movlw	(low (BMP_readTemperature@tmp| 0))& (0+255)
 10239  00A5  0021               	movlb	1	; select bank1
 10240  00A6  00A5               	movwf	(??_BMP_readTemperature+2)^(0+128)
 10241  00A7  0825               	movf	(??_BMP_readTemperature+2)^(0+128),w
 10242  00A8  0020               	movlb	0	; select bank0
 10243  00A9  00C6               	movwf	HMC5883L_ReadBits@data
 10244  00AA  3076               	movlw	118
 10245  00AB  318A  224A  3180   	fcall	_HMC5883L_ReadBits
 10246  00AE  0021               	movlb	1	; select bank1
 10247  00AF  00A6               	movwf	(??_BMP_readTemperature+3)^(0+128)
 10248  00B0  0826               	movf	(??_BMP_readTemperature+3)^(0+128),w
 10249  00B1  00B2               	movwf	BMP_readTemperature@status^(0+128)
 10250                           
 10251                           ;bmp280.c: 86: } while(tmp==0 && status==1);
 10252  00B2  0833               	movf	BMP_readTemperature@tmp^(0+128),w
 10253  00B3  1903               	btfsc	3,2
 10254  00B4  0332               	decf	BMP_readTemperature@status^(0+128),w
 10255  00B5  1903               	btfsc	3,2
 10256  00B6  2896               	goto	l1023
 10257                           
 10258                           ;bmp280.c: 87: if(status==0)
 10259  00B7  0832               	movf	BMP_readTemperature@status^(0+128),w
 10260  00B8  1D03               	btfss	3,2
 10261  00B9  28C5               	goto	l6074
 10262                           
 10263                           ;bmp280.c: 88: {
 10264                           ;bmp280.c: 89: Diag_setTempSensorHealth(0);
 10265  00BA  3000               	movlw	0
 10266  00BB  3195  2519         	fcall	_Diag_setTempSensorHealth
 10267                           
 10268                           ;bmp280.c: 90: return -55;
 10269  00BD  3000               	movlw	0
 10270  00BE  0021               	movlb	1	; select bank1
 10271  00BF  00A0               	movwf	?_BMP_readTemperature^(0+128)
 10272  00C0  305C               	movlw	92
 10273  00C1  00A1               	movwf	(?_BMP_readTemperature+1)^(0+128)
 10274  00C2  30C2               	movlw	194
 10275  00C3  00A2               	movwf	(?_BMP_readTemperature+2)^(0+128)
 10276  00C4  0008               	return
 10277  00C5                     l6074:	
 10278                           
 10279                           ;bmp280.c: 91: }
 10280                           ;bmp280.c: 93: if(I2C_BufferRead(0x76, data, 0xF7, 8)==0)
 10281  00C5  30B8               	movlw	low _data
 10282  00C6  0020               	movlb	0	; select bank0
 10283  00C7  00B1               	movwf	I2C_BufferRead@pBuffer
 10284  00C8  3001               	movlw	high _data
 10285  00C9  00B2               	movwf	I2C_BufferRead@pBuffer+1
 10286  00CA  30F7               	movlw	247
 10287  00CB  0021               	movlb	1	; select bank1
 10288  00CC  00A3               	movwf	??_BMP_readTemperature^(0+128)
 10289  00CD  0823               	movf	??_BMP_readTemperature^(0+128),w
 10290  00CE  0020               	movlb	0	; select bank0
 10291  00CF  00B3               	movwf	I2C_BufferRead@ReadAddr
 10292  00D0  3008               	movlw	8
 10293  00D1  00B4               	movwf	I2C_BufferRead@NumByteToRead
 10294  00D2  3000               	movlw	0
 10295  00D3  00B5               	movwf	I2C_BufferRead@NumByteToRead+1
 10296  00D4  3076               	movlw	118
 10297  00D5  3187  27A0  3180   	fcall	_I2C_BufferRead
 10298  00D8  3A00               	xorlw	0
 10299  00D9  1D03               	skipz
 10300  00DA  28E6               	goto	l6082
 10301                           
 10302                           ;bmp280.c: 94: {
 10303                           ;bmp280.c: 95: Diag_setTempSensorHealth(0);
 10304  00DB  3000               	movlw	0
 10305  00DC  3195  2519         	fcall	_Diag_setTempSensorHealth
 10306                           
 10307                           ;bmp280.c: 96: return -55;
 10308  00DE  3000               	movlw	0
 10309  00DF  0021               	movlb	1	; select bank1
 10310  00E0  00A0               	movwf	?_BMP_readTemperature^(0+128)
 10311  00E1  305C               	movlw	92
 10312  00E2  00A1               	movwf	(?_BMP_readTemperature+1)^(0+128)
 10313  00E3  30C2               	movlw	194
 10314  00E4  00A2               	movwf	(?_BMP_readTemperature+2)^(0+128)
 10315  00E5  0008               	return
 10316  00E6                     l6082:	
 10317                           
 10318                           ;bmp280.c: 97: }
 10319                           ;bmp280.c: 101: adc_t = (((long)(data[3] & 0xFF) * 65536) + ((long)(data[4] & 0xFF) * 25
      +                          6) + (long)(data[5] & 0xF0)) / 16;
 10320  00E6  3000               	movlw	0
 10321  00E7  0020               	movlb	0	; select bank0
 10322  00E8  00A4               	movwf	___aldiv@divisor+3
 10323  00E9  3000               	movlw	0
 10324  00EA  00A3               	movwf	___aldiv@divisor+2
 10325  00EB  3000               	movlw	0
 10326  00EC  00A2               	movwf	___aldiv@divisor+1
 10327  00ED  3010               	movlw	16
 10328  00EE  00A1               	movwf	___aldiv@divisor
 10329  00EF  0023               	movlb	3	; select bank3
 10330  00F0  083D               	movf	(_data^(0+384)+5),w
 10331  00F1  39F0               	andlw	240
 10332  00F2  0021               	movlb	1	; select bank1
 10333  00F3  00A3               	movwf	??_BMP_readTemperature^(0+128)
 10334  00F4  01A4               	clrf	(??_BMP_readTemperature^(0+128)+1)
 10335  00F5  01A5               	clrf	(??_BMP_readTemperature^(0+128)+2)
 10336  00F6  01A6               	clrf	(??_BMP_readTemperature^(0+128)+3)
 10337  00F7  0023               	movlb	3	; select bank3
 10338  00F8  083C               	movf	(_data^(0+384)+4),w
 10339  00F9  0021               	movlb	1	; select bank1
 10340  00FA  00A7               	movwf	(??_BMP_readTemperature+4)^(0+128)
 10341  00FB  01A8               	clrf	((??_BMP_readTemperature+4)^(0+128)+1)
 10342  00FC  01A9               	clrf	((??_BMP_readTemperature+4)^(0+128)+2)
 10343  00FD  01AA               	clrf	((??_BMP_readTemperature+4)^(0+128)+3)
 10344  00FE  3008               	movlw	8
 10345  00FF                     u5835:	
 10346  00FF  35A7               	lslf	(??_BMP_readTemperature+4)^(0+128),f
 10347  0100  0DA8               	rlf	((??_BMP_readTemperature+4)^(0+128)+1),f
 10348  0101  0DA9               	rlf	((??_BMP_readTemperature+4)^(0+128)+2),f
 10349  0102  0DAA               	rlf	((??_BMP_readTemperature+4)^(0+128)+3),f
 10350  0103  0B89               	decfsz	9,f
 10351  0104  28FF               	goto	u5835
 10352  0105  0023               	movlb	3	; select bank3
 10353  0106  083B               	movf	(_data^(0+384)+3),w
 10354  0107  0021               	movlb	1	; select bank1
 10355  0108  00AB               	movwf	(??_BMP_readTemperature+8)^(0+128)
 10356  0109  01AC               	clrf	((??_BMP_readTemperature+8)^(0+128)+1)
 10357  010A  01AD               	clrf	((??_BMP_readTemperature+8)^(0+128)+2)
 10358  010B  01AE               	clrf	((??_BMP_readTemperature+8)^(0+128)+3)
 10359  010C  3010               	movlw	16
 10360  010D                     u5845:	
 10361  010D  35AB               	lslf	(??_BMP_readTemperature+8)^(0+128),f
 10362  010E  0DAC               	rlf	((??_BMP_readTemperature+8)^(0+128)+1),f
 10363  010F  0DAD               	rlf	((??_BMP_readTemperature+8)^(0+128)+2),f
 10364  0110  0DAE               	rlf	((??_BMP_readTemperature+8)^(0+128)+3),f
 10365  0111  0B89               	decfsz	9,f
 10366  0112  290D               	goto	u5845
 10367  0113  082B               	movf	(??_BMP_readTemperature+8)^(0+128),w
 10368  0114  07A7               	addwf	(??_BMP_readTemperature+4)^(0+128),f
 10369  0115  082C               	movf	(??_BMP_readTemperature+9)^(0+128),w
 10370  0116  3DA8               	addwfc	((??_BMP_readTemperature+4)^(0+128)+1),f
 10371  0117  082D               	movf	(??_BMP_readTemperature+10)^(0+128),w
 10372  0118  3DA9               	addwfc	((??_BMP_readTemperature+4)^(0+128)+2),f
 10373  0119  082E               	movf	(??_BMP_readTemperature+11)^(0+128),w
 10374  011A  3DAA               	addwfc	((??_BMP_readTemperature+4)^(0+128)+3),f
 10375  011B  0827               	movf	(??_BMP_readTemperature+4)^(0+128),w
 10376  011C  07A3               	addwf	??_BMP_readTemperature^(0+128),f
 10377  011D  0828               	movf	(??_BMP_readTemperature+5)^(0+128),w
 10378  011E  3DA4               	addwfc	(??_BMP_readTemperature^(0+128)+1),f
 10379  011F  0829               	movf	(??_BMP_readTemperature+6)^(0+128),w
 10380  0120  3DA5               	addwfc	(??_BMP_readTemperature^(0+128)+2),f
 10381  0121  082A               	movf	(??_BMP_readTemperature+7)^(0+128),w
 10382  0122  3DA6               	addwfc	(??_BMP_readTemperature^(0+128)+3),f
 10383  0123  0826               	movf	(??_BMP_readTemperature+3)^(0+128),w
 10384  0124  0020               	movlb	0	; select bank0
 10385  0125  00A8               	movwf	___aldiv@dividend+3
 10386  0126  0021               	movlb	1	; select bank1
 10387  0127  0825               	movf	(??_BMP_readTemperature+2)^(0+128),w
 10388  0128  0020               	movlb	0	; select bank0
 10389  0129  00A7               	movwf	___aldiv@dividend+2
 10390  012A  0021               	movlb	1	; select bank1
 10391  012B  0824               	movf	(??_BMP_readTemperature+1)^(0+128),w
 10392  012C  0020               	movlb	0	; select bank0
 10393  012D  00A6               	movwf	___aldiv@dividend+1
 10394  012E  0021               	movlb	1	; select bank1
 10395  012F  0823               	movf	??_BMP_readTemperature^(0+128),w
 10396  0130  0020               	movlb	0	; select bank0
 10397  0131  00A5               	movwf	___aldiv@dividend
 10398  0132  318D  259A  3180   	fcall	___aldiv
 10399  0135  0020               	movlb	0	; select bank0
 10400  0136  0824               	movf	?___aldiv+3,w
 10401  0137  0021               	movlb	1	; select bank1
 10402  0138  00D3               	movwf	(_adc_t+3)^(0+128)
 10403  0139  0020               	movlb	0	; select bank0
 10404  013A  0823               	movf	?___aldiv+2,w
 10405  013B  0021               	movlb	1	; select bank1
 10406  013C  00D2               	movwf	(_adc_t+2)^(0+128)
 10407  013D  0020               	movlb	0	; select bank0
 10408  013E  0822               	movf	?___aldiv+1,w
 10409  013F  0021               	movlb	1	; select bank1
 10410  0140  00D1               	movwf	(_adc_t+1)^(0+128)
 10411  0141  0020               	movlb	0	; select bank0
 10412  0142  0821               	movf	?___aldiv,w
 10413  0143  0021               	movlb	1	; select bank1
 10414  0144  00D0               	movwf	_adc_t^(0+128)
 10415                           
 10416                           ;bmp280.c: 104: var1 = (((double)adc_t) / 16384.0 - ((double)dig_T1) / 1024.0) * ((doubl
      +                          e)dig_T2);
 10417  0145  0022               	movlb	2	; select bank2
 10418  0146  0854               	movf	(_dig_T2+1)^(0+256),w
 10419  0147  0020               	movlb	0	; select bank0
 10420  0148  00AA               	movwf	___awtoft@c+1
 10421  0149  0022               	movlb	2	; select bank2
 10422  014A  0853               	movf	_dig_T2^(0+256),w
 10423  014B  0020               	movlb	0	; select bank0
 10424  014C  00A9               	movwf	___awtoft@c
 10425  014D  3188  204B  3180   	fcall	___awtoft
 10426  0150  0020               	movlb	0	; select bank0
 10427  0151  0829               	movf	?___awtoft,w
 10428  0152  00D1               	movwf	___ftmul@f1
 10429  0153  082A               	movf	?___awtoft+1,w
 10430  0154  00D2               	movwf	___ftmul@f1+1
 10431  0155  082B               	movf	?___awtoft+2,w
 10432  0156  00D3               	movwf	___ftmul@f1+2
 10433  0157  0021               	movlb	1	; select bank1
 10434  0158  0858               	movf	(_dig_T1+1)^(0+128),w
 10435  0159  0020               	movlb	0	; select bank0
 10436  015A  00AA               	movwf	___lwtoft@c+1
 10437  015B  0021               	movlb	1	; select bank1
 10438  015C  0857               	movf	_dig_T1^(0+128),w
 10439  015D  0020               	movlb	0	; select bank0
 10440  015E  00A9               	movwf	___lwtoft@c
 10441  015F  3196  2646  3180   	fcall	___lwtoft
 10442  0162  0020               	movlb	0	; select bank0
 10443  0163  0829               	movf	?___lwtoft,w
 10444  0164  00B4               	movwf	___ftdiv@f1
 10445  0165  082A               	movf	?___lwtoft+1,w
 10446  0166  00B5               	movwf	___ftdiv@f1+1
 10447  0167  082B               	movf	?___lwtoft+2,w
 10448  0168  00B6               	movwf	___ftdiv@f1+2
 10449  0169  3000               	movlw	0
 10450  016A  00B1               	movwf	___ftdiv@f2
 10451  016B  3080               	movlw	128
 10452  016C  00B2               	movwf	___ftdiv@f2+1
 10453  016D  3044               	movlw	68
 10454  016E  00B3               	movwf	___ftdiv@f2+2
 10455  016F  318E  26A3  3180   	fcall	___ftdiv
 10456  0172  0020               	movlb	0	; select bank0
 10457  0173  0831               	movf	?___ftdiv,w
 10458  0174  00C1               	movwf	___ftneg@f1
 10459  0175  0832               	movf	?___ftdiv+1,w
 10460  0176  00C2               	movwf	___ftneg@f1+1
 10461  0177  0833               	movf	?___ftdiv+2,w
 10462  0178  00C3               	movwf	___ftneg@f1+2
 10463  0179  3195  253A  3180   	fcall	___ftneg
 10464  017C  0020               	movlb	0	; select bank0
 10465  017D  0841               	movf	?___ftneg,w
 10466  017E  00C4               	movwf	___ftadd@f1
 10467  017F  0842               	movf	?___ftneg+1,w
 10468  0180  00C5               	movwf	___ftadd@f1+1
 10469  0181  0843               	movf	?___ftneg+2,w
 10470  0182  00C6               	movwf	___ftadd@f1+2
 10471  0183  3000               	movlw	0
 10472  0184  00B1               	movwf	___ftdiv@f2
 10473  0185  3080               	movlw	128
 10474  0186  00B2               	movwf	___ftdiv@f2+1
 10475  0187  3046               	movlw	70
 10476  0188  00B3               	movwf	___ftdiv@f2+2
 10477  0189  0021               	movlb	1	; select bank1
 10478  018A  0853               	movf	(_adc_t+3)^(0+128),w
 10479  018B  0020               	movlb	0	; select bank0
 10480  018C  00AC               	movwf	___altoft@c+3
 10481  018D  0021               	movlb	1	; select bank1
 10482  018E  0852               	movf	(_adc_t+2)^(0+128),w
 10483  018F  0020               	movlb	0	; select bank0
 10484  0190  00AB               	movwf	___altoft@c+2
 10485  0191  0021               	movlb	1	; select bank1
 10486  0192  0851               	movf	(_adc_t+1)^(0+128),w
 10487  0193  0020               	movlb	0	; select bank0
 10488  0194  00AA               	movwf	___altoft@c+1
 10489  0195  0021               	movlb	1	; select bank1
 10490  0196  0850               	movf	_adc_t^(0+128),w
 10491  0197  0020               	movlb	0	; select bank0
 10492  0198  00A9               	movwf	___altoft@c
 10493  0199  3189  21C8  3180   	fcall	___altoft
 10494  019C  0020               	movlb	0	; select bank0
 10495  019D  0829               	movf	?___altoft,w
 10496  019E  00B4               	movwf	___ftdiv@f1
 10497  019F  082A               	movf	?___altoft+1,w
 10498  01A0  00B5               	movwf	___ftdiv@f1+1
 10499  01A1  082B               	movf	?___altoft+2,w
 10500  01A2  00B6               	movwf	___ftdiv@f1+2
 10501  01A3  318E  26A3  3180   	fcall	___ftdiv
 10502  01A6  0020               	movlb	0	; select bank0
 10503  01A7  0831               	movf	?___ftdiv,w
 10504  01A8  00C7               	movwf	___ftadd@f2
 10505  01A9  0832               	movf	?___ftdiv+1,w
 10506  01AA  00C8               	movwf	___ftadd@f2+1
 10507  01AB  0833               	movf	?___ftdiv+2,w
 10508  01AC  00C9               	movwf	___ftadd@f2+2
 10509  01AD  3185  25EA  3180   	fcall	___ftadd
 10510  01B0  0020               	movlb	0	; select bank0
 10511  01B1  0844               	movf	?___ftadd,w
 10512  01B2  00D4               	movwf	___ftmul@f2
 10513  01B3  0845               	movf	?___ftadd+1,w
 10514  01B4  00D5               	movwf	___ftmul@f2+1
 10515  01B5  0846               	movf	?___ftadd+2,w
 10516  01B6  00D6               	movwf	___ftmul@f2+2
 10517  01B7  318F  274C  3180   	fcall	___ftmul
 10518  01BA  0020               	movlb	0	; select bank0
 10519  01BB  0851               	movf	?___ftmul,w
 10520  01BC  0021               	movlb	1	; select bank1
 10521  01BD  00D4               	movwf	_var1^(0+128)
 10522  01BE  0020               	movlb	0	; select bank0
 10523  01BF  0852               	movf	?___ftmul+1,w
 10524  01C0  0021               	movlb	1	; select bank1
 10525  01C1  00D5               	movwf	(_var1+1)^(0+128)
 10526  01C2  0020               	movlb	0	; select bank0
 10527  01C3  0853               	movf	?___ftmul+2,w
 10528  01C4  0021               	movlb	1	; select bank1
 10529  01C5  00D6               	movwf	(_var1+2)^(0+128)
 10530                           
 10531                           ;bmp280.c: 105: var2 = ((((double)adc_t) / 131072.0 - ((double)dig_T1) / 8192.0) *
 10532                           ;bmp280.c: 106: (((double)adc_t) / 131072.0 - ((double)dig_T1) / 8192.0)) * ((double)dig
      +                          _T3);
 10533  01C6  0858               	movf	(_dig_T1+1)^(0+128),w
 10534  01C7  0020               	movlb	0	; select bank0
 10535  01C8  00AA               	movwf	___lwtoft@c+1
 10536  01C9  0021               	movlb	1	; select bank1
 10537  01CA  0857               	movf	_dig_T1^(0+128),w
 10538  01CB  0020               	movlb	0	; select bank0
 10539  01CC  00A9               	movwf	___lwtoft@c
 10540  01CD  3196  2646  3180   	fcall	___lwtoft
 10541  01D0  0020               	movlb	0	; select bank0
 10542  01D1  0829               	movf	?___lwtoft,w
 10543  01D2  00B4               	movwf	___ftdiv@f1
 10544  01D3  082A               	movf	?___lwtoft+1,w
 10545  01D4  00B5               	movwf	___ftdiv@f1+1
 10546  01D5  082B               	movf	?___lwtoft+2,w
 10547  01D6  00B6               	movwf	___ftdiv@f1+2
 10548  01D7  3000               	movlw	0
 10549  01D8  00B1               	movwf	___ftdiv@f2
 10550  01D9  3000               	movlw	0
 10551  01DA  00B2               	movwf	___ftdiv@f2+1
 10552  01DB  3046               	movlw	70
 10553  01DC  00B3               	movwf	___ftdiv@f2+2
 10554  01DD  318E  26A3  3180   	fcall	___ftdiv
 10555  01E0  0020               	movlb	0	; select bank0
 10556  01E1  0831               	movf	?___ftdiv,w
 10557  01E2  00C1               	movwf	___ftneg@f1
 10558  01E3  0832               	movf	?___ftdiv+1,w
 10559  01E4  00C2               	movwf	___ftneg@f1+1
 10560  01E5  0833               	movf	?___ftdiv+2,w
 10561  01E6  00C3               	movwf	___ftneg@f1+2
 10562  01E7  3195  253A  3180   	fcall	___ftneg
 10563  01EA  0020               	movlb	0	; select bank0
 10564  01EB  0841               	movf	?___ftneg,w
 10565  01EC  00C4               	movwf	___ftadd@f1
 10566  01ED  0842               	movf	?___ftneg+1,w
 10567  01EE  00C5               	movwf	___ftadd@f1+1
 10568  01EF  0843               	movf	?___ftneg+2,w
 10569  01F0  00C6               	movwf	___ftadd@f1+2
 10570  01F1  3000               	movlw	0
 10571  01F2  00B1               	movwf	___ftdiv@f2
 10572  01F3  3000               	movlw	0
 10573  01F4  00B2               	movwf	___ftdiv@f2+1
 10574  01F5  3048               	movlw	72
 10575  01F6  00B3               	movwf	___ftdiv@f2+2
 10576  01F7  0021               	movlb	1	; select bank1
 10577  01F8  0853               	movf	(_adc_t+3)^(0+128),w
 10578  01F9  0020               	movlb	0	; select bank0
 10579  01FA  00AC               	movwf	___altoft@c+3
 10580  01FB  0021               	movlb	1	; select bank1
 10581  01FC  0852               	movf	(_adc_t+2)^(0+128),w
 10582  01FD  0020               	movlb	0	; select bank0
 10583  01FE  00AB               	movwf	___altoft@c+2
 10584  01FF  0021               	movlb	1	; select bank1
 10585  0200  0851               	movf	(_adc_t+1)^(0+128),w
 10586  0201  0020               	movlb	0	; select bank0
 10587  0202  00AA               	movwf	___altoft@c+1
 10588  0203  0021               	movlb	1	; select bank1
 10589  0204  0850               	movf	_adc_t^(0+128),w
 10590  0205  0020               	movlb	0	; select bank0
 10591  0206  00A9               	movwf	___altoft@c
 10592  0207  3189  21C8  3180   	fcall	___altoft
 10593  020A  0020               	movlb	0	; select bank0
 10594  020B  0829               	movf	?___altoft,w
 10595  020C  00B4               	movwf	___ftdiv@f1
 10596  020D  082A               	movf	?___altoft+1,w
 10597  020E  00B5               	movwf	___ftdiv@f1+1
 10598  020F  082B               	movf	?___altoft+2,w
 10599  0210  00B6               	movwf	___ftdiv@f1+2
 10600  0211  318E  26A3  3180   	fcall	___ftdiv
 10601  0214  0020               	movlb	0	; select bank0
 10602  0215  0831               	movf	?___ftdiv,w
 10603  0216  00C7               	movwf	___ftadd@f2
 10604  0217  0832               	movf	?___ftdiv+1,w
 10605  0218  00C8               	movwf	___ftadd@f2+1
 10606  0219  0833               	movf	?___ftdiv+2,w
 10607  021A  00C9               	movwf	___ftadd@f2+2
 10608  021B  3185  25EA  3180   	fcall	___ftadd
 10609  021E  0020               	movlb	0	; select bank0
 10610  021F  0844               	movf	?___ftadd,w
 10611  0220  00D1               	movwf	___ftmul@f1
 10612  0221  0845               	movf	?___ftadd+1,w
 10613  0222  00D2               	movwf	___ftmul@f1+1
 10614  0223  0846               	movf	?___ftadd+2,w
 10615  0224  00D3               	movwf	___ftmul@f1+2
 10616  0225  0021               	movlb	1	; select bank1
 10617  0226  0858               	movf	(_dig_T1+1)^(0+128),w
 10618  0227  0020               	movlb	0	; select bank0
 10619  0228  00AA               	movwf	___lwtoft@c+1
 10620  0229  0021               	movlb	1	; select bank1
 10621  022A  0857               	movf	_dig_T1^(0+128),w
 10622  022B  0020               	movlb	0	; select bank0
 10623  022C  00A9               	movwf	___lwtoft@c
 10624  022D  3196  2646  3180   	fcall	___lwtoft
 10625  0230  0020               	movlb	0	; select bank0
 10626  0231  0829               	movf	?___lwtoft,w
 10627  0232  00B4               	movwf	___ftdiv@f1
 10628  0233  082A               	movf	?___lwtoft+1,w
 10629  0234  00B5               	movwf	___ftdiv@f1+1
 10630  0235  082B               	movf	?___lwtoft+2,w
 10631  0236  00B6               	movwf	___ftdiv@f1+2
 10632  0237  3000               	movlw	0
 10633  0238  00B1               	movwf	___ftdiv@f2
 10634  0239  3000               	movlw	0
 10635  023A  00B2               	movwf	___ftdiv@f2+1
 10636  023B  3046               	movlw	70
 10637  023C  00B3               	movwf	___ftdiv@f2+2
 10638  023D  318E  26A3  3180   	fcall	___ftdiv
 10639  0240  0020               	movlb	0	; select bank0
 10640  0241  0831               	movf	?___ftdiv,w
 10641  0242  00C1               	movwf	___ftneg@f1
 10642  0243  0832               	movf	?___ftdiv+1,w
 10643  0244  00C2               	movwf	___ftneg@f1+1
 10644  0245  0833               	movf	?___ftdiv+2,w
 10645  0246  00C3               	movwf	___ftneg@f1+2
 10646  0247  3195  253A  3180   	fcall	___ftneg
 10647  024A  0020               	movlb	0	; select bank0
 10648  024B  0841               	movf	?___ftneg,w
 10649  024C  00C4               	movwf	___ftadd@f1
 10650  024D  0842               	movf	?___ftneg+1,w
 10651  024E  00C5               	movwf	___ftadd@f1+1
 10652  024F  0843               	movf	?___ftneg+2,w
 10653  0250  00C6               	movwf	___ftadd@f1+2
 10654  0251  3000               	movlw	0
 10655  0252  00B1               	movwf	___ftdiv@f2
 10656  0253  3000               	movlw	0
 10657  0254  00B2               	movwf	___ftdiv@f2+1
 10658  0255  3048               	movlw	72
 10659  0256  00B3               	movwf	___ftdiv@f2+2
 10660  0257  0021               	movlb	1	; select bank1
 10661  0258  0853               	movf	(_adc_t+3)^(0+128),w
 10662  0259  0020               	movlb	0	; select bank0
 10663  025A  00AC               	movwf	___altoft@c+3
 10664  025B  0021               	movlb	1	; select bank1
 10665  025C  0852               	movf	(_adc_t+2)^(0+128),w
 10666  025D  0020               	movlb	0	; select bank0
 10667  025E  00AB               	movwf	___altoft@c+2
 10668  025F  0021               	movlb	1	; select bank1
 10669  0260  0851               	movf	(_adc_t+1)^(0+128),w
 10670  0261  0020               	movlb	0	; select bank0
 10671  0262  00AA               	movwf	___altoft@c+1
 10672  0263  0021               	movlb	1	; select bank1
 10673  0264  0850               	movf	_adc_t^(0+128),w
 10674  0265  0020               	movlb	0	; select bank0
 10675  0266  00A9               	movwf	___altoft@c
 10676  0267  3189  21C8  3180   	fcall	___altoft
 10677  026A  0020               	movlb	0	; select bank0
 10678  026B  0829               	movf	?___altoft,w
 10679  026C  00B4               	movwf	___ftdiv@f1
 10680  026D  082A               	movf	?___altoft+1,w
 10681  026E  00B5               	movwf	___ftdiv@f1+1
 10682  026F  082B               	movf	?___altoft+2,w
 10683  0270  00B6               	movwf	___ftdiv@f1+2
 10684  0271  318E  26A3  3180   	fcall	___ftdiv
 10685  0274  0020               	movlb	0	; select bank0
 10686  0275  0831               	movf	?___ftdiv,w
 10687  0276  00C7               	movwf	___ftadd@f2
 10688  0277  0832               	movf	?___ftdiv+1,w
 10689  0278  00C8               	movwf	___ftadd@f2+1
 10690  0279  0833               	movf	?___ftdiv+2,w
 10691  027A  00C9               	movwf	___ftadd@f2+2
 10692  027B  3185  25EA  3180   	fcall	___ftadd
 10693  027E  0020               	movlb	0	; select bank0
 10694  027F  0844               	movf	?___ftadd,w
 10695  0280  00D4               	movwf	___ftmul@f2
 10696  0281  0845               	movf	?___ftadd+1,w
 10697  0282  00D5               	movwf	___ftmul@f2+1
 10698  0283  0846               	movf	?___ftadd+2,w
 10699  0284  00D6               	movwf	___ftmul@f2+2
 10700  0285  318F  274C  3180   	fcall	___ftmul
 10701  0288  0020               	movlb	0	; select bank0
 10702  0289  0851               	movf	?___ftmul,w
 10703  028A  0021               	movlb	1	; select bank1
 10704  028B  00AF               	movwf	_BMP_readTemperature$2605^(0+128)
 10705  028C  0020               	movlb	0	; select bank0
 10706  028D  0852               	movf	?___ftmul+1,w
 10707  028E  0021               	movlb	1	; select bank1
 10708  028F  00B0               	movwf	(_BMP_readTemperature$2605+1)^(0+128)
 10709  0290  0020               	movlb	0	; select bank0
 10710  0291  0853               	movf	?___ftmul+2,w
 10711  0292  0021               	movlb	1	; select bank1
 10712  0293  00B1               	movwf	(_BMP_readTemperature$2605+2)^(0+128)
 10713                           
 10714                           ;bmp280.c: 105: var2 = ((((double)adc_t) / 131072.0 - ((double)dig_T1) / 8192.0) *
 10715                           ;bmp280.c: 106: (((double)adc_t) / 131072.0 - ((double)dig_T1) / 8192.0)) * ((double)dig
      +                          _T3);
 10716  0294  0022               	movlb	2	; select bank2
 10717  0295  0852               	movf	(_dig_T3+1)^(0+256),w
 10718  0296  0020               	movlb	0	; select bank0
 10719  0297  00AA               	movwf	___awtoft@c+1
 10720  0298  0022               	movlb	2	; select bank2
 10721  0299  0851               	movf	_dig_T3^(0+256),w
 10722  029A  0020               	movlb	0	; select bank0
 10723  029B  00A9               	movwf	___awtoft@c
 10724  029C  3188  204B  3180   	fcall	___awtoft
 10725  029F  0020               	movlb	0	; select bank0
 10726  02A0  0829               	movf	?___awtoft,w
 10727  02A1  00D1               	movwf	___ftmul@f1
 10728  02A2  082A               	movf	?___awtoft+1,w
 10729  02A3  00D2               	movwf	___ftmul@f1+1
 10730  02A4  082B               	movf	?___awtoft+2,w
 10731  02A5  00D3               	movwf	___ftmul@f1+2
 10732  02A6  0021               	movlb	1	; select bank1
 10733  02A7  082F               	movf	_BMP_readTemperature$2605^(0+128),w
 10734  02A8  0020               	movlb	0	; select bank0
 10735  02A9  00D4               	movwf	___ftmul@f2
 10736  02AA  0021               	movlb	1	; select bank1
 10737  02AB  0830               	movf	(_BMP_readTemperature$2605+1)^(0+128),w
 10738  02AC  0020               	movlb	0	; select bank0
 10739  02AD  00D5               	movwf	___ftmul@f2+1
 10740  02AE  0021               	movlb	1	; select bank1
 10741  02AF  0831               	movf	(_BMP_readTemperature$2605+2)^(0+128),w
 10742  02B0  0020               	movlb	0	; select bank0
 10743  02B1  00D6               	movwf	___ftmul@f2+2
 10744  02B2  318F  274C  3180   	fcall	___ftmul
 10745  02B5  0020               	movlb	0	; select bank0
 10746  02B6  0851               	movf	?___ftmul,w
 10747  02B7  0022               	movlb	2	; select bank2
 10748  02B8  00B1               	movwf	_var2^(0+256)
 10749  02B9  0020               	movlb	0	; select bank0
 10750  02BA  0852               	movf	?___ftmul+1,w
 10751  02BB  0022               	movlb	2	; select bank2
 10752  02BC  00B2               	movwf	(_var2+1)^(0+256)
 10753  02BD  0020               	movlb	0	; select bank0
 10754  02BE  0853               	movf	?___ftmul+2,w
 10755  02BF  0022               	movlb	2	; select bank2
 10756  02C0  00B3               	movwf	(_var2+2)^(0+256)
 10757                           
 10758                           ;bmp280.c: 107: t_fine = (long)(var1 + var2);
 10759  02C1  0021               	movlb	1	; select bank1
 10760  02C2  0854               	movf	_var1^(0+128),w
 10761  02C3  0020               	movlb	0	; select bank0
 10762  02C4  00C7               	movwf	___ftadd@f2
 10763  02C5  0021               	movlb	1	; select bank1
 10764  02C6  0855               	movf	(_var1+1)^(0+128),w
 10765  02C7  0020               	movlb	0	; select bank0
 10766  02C8  00C8               	movwf	___ftadd@f2+1
 10767  02C9  0021               	movlb	1	; select bank1
 10768  02CA  0856               	movf	(_var1+2)^(0+128),w
 10769  02CB  0020               	movlb	0	; select bank0
 10770  02CC  00C9               	movwf	___ftadd@f2+2
 10771  02CD  0022               	movlb	2	; select bank2
 10772  02CE  0831               	movf	_var2^(0+256),w
 10773  02CF  0020               	movlb	0	; select bank0
 10774  02D0  00C4               	movwf	___ftadd@f1
 10775  02D1  0022               	movlb	2	; select bank2
 10776  02D2  0832               	movf	(_var2+1)^(0+256),w
 10777  02D3  0020               	movlb	0	; select bank0
 10778  02D4  00C5               	movwf	___ftadd@f1+1
 10779  02D5  0022               	movlb	2	; select bank2
 10780  02D6  0833               	movf	(_var2+2)^(0+256),w
 10781  02D7  0020               	movlb	0	; select bank0
 10782  02D8  00C6               	movwf	___ftadd@f1+2
 10783  02D9  3185  25EA  3180   	fcall	___ftadd
 10784  02DC  0020               	movlb	0	; select bank0
 10785  02DD  0844               	movf	?___ftadd,w
 10786  02DE  00E1               	movwf	___fttol@f1
 10787  02DF  0845               	movf	?___ftadd+1,w
 10788  02E0  00E2               	movwf	___fttol@f1+1
 10789  02E1  0846               	movf	?___ftadd+2,w
 10790  02E2  00E3               	movwf	___fttol@f1+2
 10791  02E3  318E  261C  3180   	fcall	___fttol
 10792  02E6  0020               	movlb	0	; select bank0
 10793  02E7  0864               	movf	?___fttol+3,w
 10794  02E8  00AC               	movwf	___altoft@c+3
 10795  02E9  0863               	movf	?___fttol+2,w
 10796  02EA  00AB               	movwf	___altoft@c+2
 10797  02EB  0862               	movf	?___fttol+1,w
 10798  02EC  00AA               	movwf	___altoft@c+1
 10799  02ED  0861               	movf	?___fttol,w
 10800  02EE  00A9               	movwf	___altoft@c
 10801  02EF  3189  21C8  3180   	fcall	___altoft
 10802  02F2  0020               	movlb	0	; select bank0
 10803  02F3  0829               	movf	?___altoft,w
 10804  02F4  0022               	movlb	2	; select bank2
 10805  02F5  00AE               	movwf	_t_fine^(0+256)
 10806  02F6  0020               	movlb	0	; select bank0
 10807  02F7  082A               	movf	?___altoft+1,w
 10808  02F8  0022               	movlb	2	; select bank2
 10809  02F9  00AF               	movwf	(_t_fine+1)^(0+256)
 10810  02FA  0020               	movlb	0	; select bank0
 10811  02FB  082B               	movf	?___altoft+2,w
 10812  02FC  0022               	movlb	2	; select bank2
 10813  02FD  00B0               	movwf	(_t_fine+2)^(0+256)
 10814                           
 10815                           ;bmp280.c: 108: cTemp = (var1 + var2) / 5120.0;
 10816  02FE  3000               	movlw	0
 10817  02FF  0020               	movlb	0	; select bank0
 10818  0300  00B1               	movwf	___ftdiv@f2
 10819  0301  30A0               	movlw	160
 10820  0302  00B2               	movwf	___ftdiv@f2+1
 10821  0303  3045               	movlw	69
 10822  0304  00B3               	movwf	___ftdiv@f2+2
 10823  0305  0022               	movlb	2	; select bank2
 10824  0306  0831               	movf	_var2^(0+256),w
 10825  0307  0020               	movlb	0	; select bank0
 10826  0308  00C4               	movwf	___ftadd@f1
 10827  0309  0022               	movlb	2	; select bank2
 10828  030A  0832               	movf	(_var2+1)^(0+256),w
 10829  030B  0020               	movlb	0	; select bank0
 10830  030C  00C5               	movwf	___ftadd@f1+1
 10831  030D  0022               	movlb	2	; select bank2
 10832  030E  0833               	movf	(_var2+2)^(0+256),w
 10833  030F  0020               	movlb	0	; select bank0
 10834  0310  00C6               	movwf	___ftadd@f1+2
 10835  0311  0021               	movlb	1	; select bank1
 10836  0312  0854               	movf	_var1^(0+128),w
 10837  0313  0020               	movlb	0	; select bank0
 10838  0314  00C7               	movwf	___ftadd@f2
 10839  0315  0021               	movlb	1	; select bank1
 10840  0316  0855               	movf	(_var1+1)^(0+128),w
 10841  0317  0020               	movlb	0	; select bank0
 10842  0318  00C8               	movwf	___ftadd@f2+1
 10843  0319  0021               	movlb	1	; select bank1
 10844  031A  0856               	movf	(_var1+2)^(0+128),w
 10845  031B  0020               	movlb	0	; select bank0
 10846  031C  00C9               	movwf	___ftadd@f2+2
 10847  031D  3185  25EA  3180   	fcall	___ftadd
 10848  0320  0020               	movlb	0	; select bank0
 10849  0321  0844               	movf	?___ftadd,w
 10850  0322  00B4               	movwf	___ftdiv@f1
 10851  0323  0845               	movf	?___ftadd+1,w
 10852  0324  00B5               	movwf	___ftdiv@f1+1
 10853  0325  0846               	movf	?___ftadd+2,w
 10854  0326  00B6               	movwf	___ftdiv@f1+2
 10855  0327  318E  26A3  3180   	fcall	___ftdiv
 10856  032A  0020               	movlb	0	; select bank0
 10857  032B  0831               	movf	?___ftdiv,w
 10858  032C  0022               	movlb	2	; select bank2
 10859  032D  00AB               	movwf	_cTemp^(0+256)
 10860  032E  0020               	movlb	0	; select bank0
 10861  032F  0832               	movf	?___ftdiv+1,w
 10862  0330  0022               	movlb	2	; select bank2
 10863  0331  00AC               	movwf	(_cTemp+1)^(0+256)
 10864  0332  0020               	movlb	0	; select bank0
 10865  0333  0833               	movf	?___ftdiv+2,w
 10866  0334  0022               	movlb	2	; select bank2
 10867  0335  00AD               	movwf	(_cTemp+2)^(0+256)
 10868                           
 10869                           ;bmp280.c: 123: Diag_setTempSensorHealth(1);
 10870  0336  3001               	movlw	1
 10871  0337  3195  2519         	fcall	_Diag_setTempSensorHealth
 10872                           
 10873                           ;bmp280.c: 124: return(cTemp);
 10874  0339  0022               	movlb	2	; select bank2
 10875  033A  082B               	movf	_cTemp^(0+256),w
 10876  033B  0021               	movlb	1	; select bank1
 10877  033C  00A0               	movwf	?_BMP_readTemperature^(0+128)
 10878  033D  0022               	movlb	2	; select bank2
 10879  033E  082C               	movf	(_cTemp+1)^(0+256),w
 10880  033F  0021               	movlb	1	; select bank1
 10881  0340  00A1               	movwf	(?_BMP_readTemperature+1)^(0+128)
 10882  0341  0022               	movlb	2	; select bank2
 10883  0342  082D               	movf	(_cTemp+2)^(0+256),w
 10884  0343  0021               	movlb	1	; select bank1
 10885  0344  00A2               	movwf	(?_BMP_readTemperature+2)^(0+128)
 10886  0345  0008               	return
 10887  0346                     __end_of_BMP_readTemperature:	
 10888                           
 10889                           	psect	text56
 10890  1646                     __ptext56:	
 10891 ;; *************** function ___lwtoft *****************
 10892 ;; Defined at:
 10893 ;;		line 28 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\lwtoft.c"
 10894 ;; Parameters:    Size  Location     Type
 10895 ;;  c               2    9[BANK0 ] unsigned int 
 10896 ;; Auto vars:     Size  Location     Type
 10897 ;;		None
 10898 ;; Return value:  Size  Location     Type
 10899 ;;                  3    9[BANK0 ] float 
 10900 ;; Registers used:
 10901 ;;		wreg, status,2, status,0, pclath, cstack
 10902 ;; Tracked objects:
 10903 ;;		On entry : 0/0
 10904 ;;		On exit  : 0/0
 10905 ;;		Unchanged: 0/0
 10906 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10907 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10908 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10909 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10910 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10911 ;;Total ram usage:        4 bytes
 10912 ;; Hardware stack levels used:    1
 10913 ;; Hardware stack levels required when called:    5
 10914 ;; This function calls:
 10915 ;;		___ftpack
 10916 ;; This function is called by:
 10917 ;;		_Sensor_getSupplyVoltage
 10918 ;;		_BMP_readTemperature
 10919 ;; This function uses a non-reentrant model
 10920 ;;
 10921                           
 10922                           
 10923                           ;psect for function ___lwtoft
 10924  1646                     ___lwtoft:	
 10925                           
 10926                           ;incstack = 0
 10927                           ; Regs used in ___lwtoft: [wreg+status,2+status,0+pclath+cstack]
 10928  1646  0020               	movlb	0	; select bank0
 10929  1647  0829               	movf	___lwtoft@c,w
 10930  1648  00A1               	movwf	___ftpack@arg
 10931  1649  082A               	movf	___lwtoft@c+1,w
 10932  164A  00A2               	movwf	___ftpack@arg+1
 10933  164B  01A3               	clrf	___ftpack@arg+2
 10934  164C  308E               	movlw	142
 10935  164D  00AC               	movwf	??___lwtoft
 10936  164E  082C               	movf	??___lwtoft,w
 10937  164F  00A4               	movwf	___ftpack@exp
 10938  1650  01A5               	clrf	___ftpack@sign
 10939  1651  318B  23CC         	fcall	___ftpack
 10940  1653  0020               	movlb	0	; select bank0
 10941  1654  0821               	movf	?___ftpack,w
 10942  1655  00A9               	movwf	?___lwtoft
 10943  1656  0822               	movf	?___ftpack+1,w
 10944  1657  00AA               	movwf	?___lwtoft+1
 10945  1658  0823               	movf	?___ftpack+2,w
 10946  1659  00AB               	movwf	?___lwtoft+2
 10947  165A  0008               	return
 10948  165B                     __end_of___lwtoft:	
 10949                           
 10950                           	psect	text57
 10951  0E1C                     __ptext57:	
 10952 ;; *************** function ___fttol *****************
 10953 ;; Defined at:
 10954 ;;		line 44 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\fttol.c"
 10955 ;; Parameters:    Size  Location     Type
 10956 ;;  f1              3   65[BANK0 ] float 
 10957 ;; Auto vars:     Size  Location     Type
 10958 ;;  lval            4   74[BANK0 ] unsigned long 
 10959 ;;  exp1            1   78[BANK0 ] unsigned char 
 10960 ;;  sign1           1   73[BANK0 ] unsigned char 
 10961 ;; Return value:  Size  Location     Type
 10962 ;;                  4   65[BANK0 ] long 
 10963 ;; Registers used:
 10964 ;;		wreg, status,2, status,0
 10965 ;; Tracked objects:
 10966 ;;		On entry : 0/0
 10967 ;;		On exit  : 0/0
 10968 ;;		Unchanged: 0/0
 10969 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10970 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10971 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10972 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10973 ;;      Totals:         0      14       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10974 ;;Total ram usage:       14 bytes
 10975 ;; Hardware stack levels used:    1
 10976 ;; Hardware stack levels required when called:    4
 10977 ;; This function calls:
 10978 ;;		Nothing
 10979 ;; This function is called by:
 10980 ;;		_BMP_readTemperature
 10981 ;;		_Wireless_packageData
 10982 ;;		_HMC5883L_GetCompassDirection
 10983 ;; This function uses a non-reentrant model
 10984 ;;
 10985                           
 10986                           
 10987                           ;psect for function ___fttol
 10988  0E1C                     ___fttol:	
 10989                           
 10990                           ;incstack = 0
 10991                           ; Regs used in ___fttol: [wreg+status,2+status,0]
 10992  0E1C  0020               	movlb	0	; select bank0
 10993  0E1D  0861               	movf	___fttol@f1,w
 10994  0E1E  00E5               	movwf	??___fttol
 10995  0E1F  0862               	movf	___fttol@f1+1,w
 10996  0E20  00E6               	movwf	??___fttol+1
 10997  0E21  0863               	movf	___fttol@f1+2,w
 10998  0E22  00E7               	movwf	??___fttol+2
 10999  0E23  1003               	clrc
 11000  0E24  0D66               	rlf	??___fttol+1,w
 11001  0E25  0D67               	rlf	??___fttol+2,w
 11002  0E26  00E8               	movwf	??___fttol+3
 11003  0E27  0868               	movf	??___fttol+3,w
 11004  0E28  00EE               	movwf	___fttol@exp1
 11005  0E29  086E               	movf	___fttol@exp1,w
 11006  0E2A  1D03               	btfss	3,2
 11007  0E2B  2E35               	goto	l5990
 11008  0E2C  3000               	movlw	0
 11009  0E2D  00E4               	movwf	?___fttol+3
 11010  0E2E  3000               	movlw	0
 11011  0E2F  00E3               	movwf	?___fttol+2
 11012  0E30  3000               	movlw	0
 11013  0E31  00E2               	movwf	?___fttol+1
 11014  0E32  3000               	movlw	0
 11015  0E33  00E1               	movwf	?___fttol
 11016  0E34  0008               	return
 11017  0E35                     l5990:	
 11018  0E35  0861               	movf	___fttol@f1,w
 11019  0E36  00E5               	movwf	??___fttol
 11020  0E37  0862               	movf	___fttol@f1+1,w
 11021  0E38  00E6               	movwf	??___fttol+1
 11022  0E39  0863               	movf	___fttol@f1+2,w
 11023  0E3A  00E7               	movwf	??___fttol+2
 11024  0E3B  3017               	movlw	23
 11025  0E3C                     u5695:	
 11026  0E3C  36E7               	lsrf	??___fttol+2,f
 11027  0E3D  0CE6               	rrf	??___fttol+1,f
 11028  0E3E  0CE5               	rrf	??___fttol,f
 11029  0E3F  0B89               	decfsz	9,f
 11030  0E40  2E3C               	goto	u5695
 11031  0E41  0865               	movf	??___fttol,w
 11032  0E42  00E8               	movwf	??___fttol+3
 11033  0E43  0868               	movf	??___fttol+3,w
 11034  0E44  00E9               	movwf	___fttol@sign1
 11035  0E45  17E2               	bsf	___fttol@f1+1,7
 11036  0E46  30FF               	movlw	255
 11037  0E47  05E1               	andwf	___fttol@f1,f
 11038  0E48  30FF               	movlw	255
 11039  0E49  05E2               	andwf	___fttol@f1+1,f
 11040  0E4A  3000               	movlw	0
 11041  0E4B  05E3               	andwf	___fttol@f1+2,f
 11042  0E4C  0861               	movf	___fttol@f1,w
 11043  0E4D  00EA               	movwf	___fttol@lval
 11044  0E4E  0862               	movf	___fttol@f1+1,w
 11045  0E4F  00EB               	movwf	___fttol@lval+1
 11046  0E50  0863               	movf	___fttol@f1+2,w
 11047  0E51  00EC               	movwf	___fttol@lval+2
 11048  0E52  01ED               	clrf	___fttol@lval+3
 11049  0E53  308E               	movlw	142
 11050  0E54  02EE               	subwf	___fttol@exp1,f
 11051  0E55  1FEE               	btfss	___fttol@exp1,7
 11052  0E56  2E73               	goto	l6010
 11053  0E57  086E               	movf	___fttol@exp1,w
 11054  0E58  3A80               	xorlw	128
 11055  0E59  3E8F               	addlw	143
 11056  0E5A  1803               	skipnc
 11057  0E5B  2E65               	goto	l6008
 11058  0E5C  3000               	movlw	0
 11059  0E5D  00E4               	movwf	?___fttol+3
 11060  0E5E  3000               	movlw	0
 11061  0E5F  00E3               	movwf	?___fttol+2
 11062  0E60  3000               	movlw	0
 11063  0E61  00E2               	movwf	?___fttol+1
 11064  0E62  3000               	movlw	0
 11065  0E63  00E1               	movwf	?___fttol
 11066  0E64  0008               	return
 11067  0E65                     l6008:	
 11068  0E65  3001               	movlw	1
 11069  0E66                     u5725:	
 11070  0E66  36ED               	lsrf	___fttol@lval+3,f
 11071  0E67  0CEC               	rrf	___fttol@lval+2,f
 11072  0E68  0CEB               	rrf	___fttol@lval+1,f
 11073  0E69  0CEA               	rrf	___fttol@lval,f
 11074  0E6A  0B89               	decfsz	9,f
 11075  0E6B  2E66               	goto	u5725
 11076  0E6C  3001               	movlw	1
 11077  0E6D  00E5               	movwf	??___fttol
 11078  0E6E  0865               	movf	??___fttol,w
 11079  0E6F  07EE               	addwf	___fttol@exp1,f
 11080  0E70  1903               	btfsc	3,2
 11081  0E71  2E8C               	goto	l6018
 11082  0E72  2E65               	goto	l6008
 11083  0E73                     l6010:	
 11084  0E73  3018               	movlw	24
 11085  0E74  026E               	subwf	___fttol@exp1,w
 11086  0E75  1C03               	skipc
 11087  0E76  2E89               	goto	l1578
 11088  0E77  3000               	movlw	0
 11089  0E78  00E4               	movwf	?___fttol+3
 11090  0E79  3000               	movlw	0
 11091  0E7A  00E3               	movwf	?___fttol+2
 11092  0E7B  3000               	movlw	0
 11093  0E7C  00E2               	movwf	?___fttol+1
 11094  0E7D  3000               	movlw	0
 11095  0E7E  00E1               	movwf	?___fttol
 11096  0E7F  0008               	return
 11097  0E80                     l6016:	
 11098  0E80  3001               	movlw	1
 11099  0E81                     u5755:	
 11100  0E81  35EA               	lslf	___fttol@lval,f
 11101  0E82  0DEB               	rlf	___fttol@lval+1,f
 11102  0E83  0DEC               	rlf	___fttol@lval+2,f
 11103  0E84  0DED               	rlf	___fttol@lval+3,f
 11104  0E85  0B89               	decfsz	9,f
 11105  0E86  2E81               	goto	u5755
 11106  0E87  3001               	movlw	1
 11107  0E88  02EE               	subwf	___fttol@exp1,f
 11108  0E89                     l1578:	
 11109  0E89  086E               	movf	___fttol@exp1,w
 11110  0E8A  1D03               	btfss	3,2
 11111  0E8B  2E80               	goto	l6016
 11112  0E8C                     l6018:	
 11113  0E8C  0869               	movf	___fttol@sign1,w
 11114  0E8D  1903               	btfsc	3,2
 11115  0E8E  2E9A               	goto	l6022
 11116  0E8F  09EA               	comf	___fttol@lval,f
 11117  0E90  09EB               	comf	___fttol@lval+1,f
 11118  0E91  09EC               	comf	___fttol@lval+2,f
 11119  0E92  09ED               	comf	___fttol@lval+3,f
 11120  0E93  0AEA               	incf	___fttol@lval,f
 11121  0E94  1903               	skipnz
 11122  0E95  0AEB               	incf	___fttol@lval+1,f
 11123  0E96  1903               	skipnz
 11124  0E97  0AEC               	incf	___fttol@lval+2,f
 11125  0E98  1903               	skipnz
 11126  0E99  0AED               	incf	___fttol@lval+3,f
 11127  0E9A                     l6022:	
 11128  0E9A  086D               	movf	___fttol@lval+3,w
 11129  0E9B  00E4               	movwf	?___fttol+3
 11130  0E9C  086C               	movf	___fttol@lval+2,w
 11131  0E9D  00E3               	movwf	?___fttol+2
 11132  0E9E  086B               	movf	___fttol@lval+1,w
 11133  0E9F  00E2               	movwf	?___fttol+1
 11134  0EA0  086A               	movf	___fttol@lval,w
 11135  0EA1  00E1               	movwf	?___fttol
 11136  0EA2  0008               	return
 11137  0EA3                     __end_of___fttol:	
 11138                           
 11139                           	psect	text58
 11140  153A                     __ptext58:	
 11141 ;; *************** function ___ftneg *****************
 11142 ;; Defined at:
 11143 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\ftneg.c"
 11144 ;; Parameters:    Size  Location     Type
 11145 ;;  f1              3   33[BANK0 ] float 
 11146 ;; Auto vars:     Size  Location     Type
 11147 ;;		None
 11148 ;; Return value:  Size  Location     Type
 11149 ;;                  3   33[BANK0 ] float 
 11150 ;; Registers used:
 11151 ;;		wreg
 11152 ;; Tracked objects:
 11153 ;;		On entry : 0/0
 11154 ;;		On exit  : 0/0
 11155 ;;		Unchanged: 0/0
 11156 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11157 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11158 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11159 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11160 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11161 ;;Total ram usage:        3 bytes
 11162 ;; Hardware stack levels used:    1
 11163 ;; Hardware stack levels required when called:    4
 11164 ;; This function calls:
 11165 ;;		Nothing
 11166 ;; This function is called by:
 11167 ;;		_BMP_readTemperature
 11168 ;; This function uses a non-reentrant model
 11169 ;;
 11170                           
 11171                           
 11172                           ;psect for function ___ftneg
 11173  153A                     ___ftneg:	
 11174                           
 11175                           ;incstack = 0
 11176                           ; Regs used in ___ftneg: [wreg]
 11177  153A  0020               	movlb	0	; select bank0
 11178  153B  0843               	movf	___ftneg@f1+2,w
 11179  153C  0442               	iorwf	___ftneg@f1+1,w
 11180  153D  0441               	iorwf	___ftneg@f1,w
 11181  153E  1903               	skipnz
 11182  153F  0008               	return
 11183  1540  3080               	movlw	128
 11184  1541  06C3               	xorwf	___ftneg@f1+2,f
 11185  1542  0008               	return
 11186  1543                     __end_of___ftneg:	
 11187                           
 11188                           	psect	text59
 11189  0F4C                     __ptext59:	
 11190 ;; *************** function ___ftmul *****************
 11191 ;; Defined at:
 11192 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\ftmul.c"
 11193 ;; Parameters:    Size  Location     Type
 11194 ;;  f1              3   49[BANK0 ] float 
 11195 ;;  f2              3   52[BANK0 ] float 
 11196 ;; Auto vars:     Size  Location     Type
 11197 ;;  f3_as_produc    3   60[BANK0 ] unsigned um
 11198 ;;  sign            1   64[BANK0 ] unsigned char 
 11199 ;;  cntr            1   63[BANK0 ] unsigned char 
 11200 ;;  exp             1   59[BANK0 ] unsigned char 
 11201 ;; Return value:  Size  Location     Type
 11202 ;;                  3   49[BANK0 ] float 
 11203 ;; Registers used:
 11204 ;;		wreg, status,2, status,0, pclath, cstack
 11205 ;; Tracked objects:
 11206 ;;		On entry : 0/0
 11207 ;;		On exit  : 0/0
 11208 ;;		Unchanged: 0/0
 11209 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11210 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11211 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11212 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11213 ;;      Totals:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11214 ;;Total ram usage:       16 bytes
 11215 ;; Hardware stack levels used:    1
 11216 ;; Hardware stack levels required when called:    5
 11217 ;; This function calls:
 11218 ;;		___ftpack
 11219 ;; This function is called by:
 11220 ;;		_BMP_readTemperature
 11221 ;;		_Wireless_packageData
 11222 ;;		_HMC5883L_GetCompassDirection
 11223 ;; This function uses a non-reentrant model
 11224 ;;
 11225                           
 11226                           
 11227                           ;psect for function ___ftmul
 11228  0F4C                     ___ftmul:	
 11229                           
 11230                           ;incstack = 0
 11231                           ; Regs used in ___ftmul: [wreg+status,2+status,0+pclath+cstack]
 11232  0F4C  0020               	movlb	0	; select bank0
 11233  0F4D  0851               	movf	___ftmul@f1,w
 11234  0F4E  00D7               	movwf	??___ftmul
 11235  0F4F  0852               	movf	___ftmul@f1+1,w
 11236  0F50  00D8               	movwf	??___ftmul+1
 11237  0F51  0853               	movf	___ftmul@f1+2,w
 11238  0F52  00D9               	movwf	??___ftmul+2
 11239  0F53  1003               	clrc
 11240  0F54  0D58               	rlf	??___ftmul+1,w
 11241  0F55  0D59               	rlf	??___ftmul+2,w
 11242  0F56  00DA               	movwf	??___ftmul+3
 11243  0F57  085A               	movf	??___ftmul+3,w
 11244  0F58  00DB               	movwf	___ftmul@exp
 11245  0F59  085B               	movf	___ftmul@exp,w
 11246  0F5A  1D03               	btfss	3,2
 11247  0F5B  2F63               	goto	l5932
 11248  0F5C  3000               	movlw	0
 11249  0F5D  00D1               	movwf	?___ftmul
 11250  0F5E  3000               	movlw	0
 11251  0F5F  00D2               	movwf	?___ftmul+1
 11252  0F60  3000               	movlw	0
 11253  0F61  00D3               	movwf	?___ftmul+2
 11254  0F62  0008               	return
 11255  0F63                     l5932:	
 11256  0F63  0854               	movf	___ftmul@f2,w
 11257  0F64  00D7               	movwf	??___ftmul
 11258  0F65  0855               	movf	___ftmul@f2+1,w
 11259  0F66  00D8               	movwf	??___ftmul+1
 11260  0F67  0856               	movf	___ftmul@f2+2,w
 11261  0F68  00D9               	movwf	??___ftmul+2
 11262  0F69  1003               	clrc
 11263  0F6A  0D58               	rlf	??___ftmul+1,w
 11264  0F6B  0D59               	rlf	??___ftmul+2,w
 11265  0F6C  00DA               	movwf	??___ftmul+3
 11266  0F6D  085A               	movf	??___ftmul+3,w
 11267  0F6E  00E0               	movwf	___ftmul@sign
 11268  0F6F  0860               	movf	___ftmul@sign,w
 11269  0F70  1D03               	btfss	3,2
 11270  0F71  2F79               	goto	l5938
 11271  0F72  3000               	movlw	0
 11272  0F73  00D1               	movwf	?___ftmul
 11273  0F74  3000               	movlw	0
 11274  0F75  00D2               	movwf	?___ftmul+1
 11275  0F76  3000               	movlw	0
 11276  0F77  00D3               	movwf	?___ftmul+2
 11277  0F78  0008               	return
 11278  0F79                     l5938:	
 11279  0F79  0860               	movf	___ftmul@sign,w
 11280  0F7A  3E7B               	addlw	123
 11281  0F7B  00D7               	movwf	??___ftmul
 11282  0F7C  0857               	movf	??___ftmul,w
 11283  0F7D  07DB               	addwf	___ftmul@exp,f
 11284  0F7E  0851               	movf	___ftmul@f1,w
 11285  0F7F  00D7               	movwf	??___ftmul
 11286  0F80  0852               	movf	___ftmul@f1+1,w
 11287  0F81  00D8               	movwf	??___ftmul+1
 11288  0F82  0853               	movf	___ftmul@f1+2,w
 11289  0F83  00D9               	movwf	??___ftmul+2
 11290  0F84  3010               	movlw	16
 11291  0F85                     u5575:	
 11292  0F85  36D9               	lsrf	??___ftmul+2,f
 11293  0F86  0CD8               	rrf	??___ftmul+1,f
 11294  0F87  0CD7               	rrf	??___ftmul,f
 11295  0F88  0B89               	decfsz	9,f
 11296  0F89  2F85               	goto	u5575
 11297  0F8A  0857               	movf	??___ftmul,w
 11298  0F8B  00DA               	movwf	??___ftmul+3
 11299  0F8C  085A               	movf	??___ftmul+3,w
 11300  0F8D  00E0               	movwf	___ftmul@sign
 11301  0F8E  0854               	movf	___ftmul@f2,w
 11302  0F8F  00D7               	movwf	??___ftmul
 11303  0F90  0855               	movf	___ftmul@f2+1,w
 11304  0F91  00D8               	movwf	??___ftmul+1
 11305  0F92  0856               	movf	___ftmul@f2+2,w
 11306  0F93  00D9               	movwf	??___ftmul+2
 11307  0F94  3010               	movlw	16
 11308  0F95                     u5585:	
 11309  0F95  36D9               	lsrf	??___ftmul+2,f
 11310  0F96  0CD8               	rrf	??___ftmul+1,f
 11311  0F97  0CD7               	rrf	??___ftmul,f
 11312  0F98  0B89               	decfsz	9,f
 11313  0F99  2F95               	goto	u5585
 11314  0F9A  0857               	movf	??___ftmul,w
 11315  0F9B  00DA               	movwf	??___ftmul+3
 11316  0F9C  085A               	movf	??___ftmul+3,w
 11317  0F9D  06E0               	xorwf	___ftmul@sign,f
 11318  0F9E  3080               	movlw	128
 11319  0F9F  00D7               	movwf	??___ftmul
 11320  0FA0  0857               	movf	??___ftmul,w
 11321  0FA1  05E0               	andwf	___ftmul@sign,f
 11322  0FA2  17D2               	bsf	___ftmul@f1+1,7
 11323  0FA3  17D5               	bsf	___ftmul@f2+1,7
 11324  0FA4  30FF               	movlw	255
 11325  0FA5  05D4               	andwf	___ftmul@f2,f
 11326  0FA6  30FF               	movlw	255
 11327  0FA7  05D5               	andwf	___ftmul@f2+1,f
 11328  0FA8  3000               	movlw	0
 11329  0FA9  05D6               	andwf	___ftmul@f2+2,f
 11330  0FAA  3000               	movlw	0
 11331  0FAB  00DC               	movwf	___ftmul@f3_as_product
 11332  0FAC  3000               	movlw	0
 11333  0FAD  00DD               	movwf	___ftmul@f3_as_product+1
 11334  0FAE  3000               	movlw	0
 11335  0FAF  00DE               	movwf	___ftmul@f3_as_product+2
 11336  0FB0  3007               	movlw	7
 11337  0FB1  00D7               	movwf	??___ftmul
 11338  0FB2  0857               	movf	??___ftmul,w
 11339  0FB3  00DF               	movwf	___ftmul@cntr
 11340  0FB4                     l5950:	
 11341  0FB4  1C51               	btfss	___ftmul@f1,0
 11342  0FB5  2FBC               	goto	l5954
 11343  0FB6  0854               	movf	___ftmul@f2,w
 11344  0FB7  07DC               	addwf	___ftmul@f3_as_product,f
 11345  0FB8  0855               	movf	___ftmul@f2+1,w
 11346  0FB9  3DDD               	addwfc	___ftmul@f3_as_product+1,f
 11347  0FBA  0856               	movf	___ftmul@f2+2,w
 11348  0FBB  3DDE               	addwfc	___ftmul@f3_as_product+2,f
 11349  0FBC                     l5954:	
 11350  0FBC  3001               	movlw	1
 11351  0FBD                     u5605:	
 11352  0FBD  36D3               	lsrf	___ftmul@f1+2,f
 11353  0FBE  0CD2               	rrf	___ftmul@f1+1,f
 11354  0FBF  0CD1               	rrf	___ftmul@f1,f
 11355  0FC0  0B89               	decfsz	9,f
 11356  0FC1  2FBD               	goto	u5605
 11357  0FC2  3001               	movlw	1
 11358  0FC3                     u5615:	
 11359  0FC3  35D4               	lslf	___ftmul@f2,f
 11360  0FC4  0DD5               	rlf	___ftmul@f2+1,f
 11361  0FC5  0DD6               	rlf	___ftmul@f2+2,f
 11362  0FC6  0B89               	decfsz	9,f
 11363  0FC7  2FC3               	goto	u5615
 11364  0FC8  3001               	movlw	1
 11365  0FC9  02DF               	subwf	___ftmul@cntr,f
 11366  0FCA  1D03               	btfss	3,2
 11367  0FCB  2FB4               	goto	l5950
 11368  0FCC  3009               	movlw	9
 11369  0FCD  00D7               	movwf	??___ftmul
 11370  0FCE  0857               	movf	??___ftmul,w
 11371  0FCF  00DF               	movwf	___ftmul@cntr
 11372  0FD0                     l5962:	
 11373  0FD0  1C51               	btfss	___ftmul@f1,0
 11374  0FD1  2FD8               	goto	l5966
 11375  0FD2  0854               	movf	___ftmul@f2,w
 11376  0FD3  07DC               	addwf	___ftmul@f3_as_product,f
 11377  0FD4  0855               	movf	___ftmul@f2+1,w
 11378  0FD5  3DDD               	addwfc	___ftmul@f3_as_product+1,f
 11379  0FD6  0856               	movf	___ftmul@f2+2,w
 11380  0FD7  3DDE               	addwfc	___ftmul@f3_as_product+2,f
 11381  0FD8                     l5966:	
 11382  0FD8  3001               	movlw	1
 11383  0FD9                     u5645:	
 11384  0FD9  36D3               	lsrf	___ftmul@f1+2,f
 11385  0FDA  0CD2               	rrf	___ftmul@f1+1,f
 11386  0FDB  0CD1               	rrf	___ftmul@f1,f
 11387  0FDC  0B89               	decfsz	9,f
 11388  0FDD  2FD9               	goto	u5645
 11389  0FDE  3001               	movlw	1
 11390  0FDF                     u5655:	
 11391  0FDF  36DE               	lsrf	___ftmul@f3_as_product+2,f
 11392  0FE0  0CDD               	rrf	___ftmul@f3_as_product+1,f
 11393  0FE1  0CDC               	rrf	___ftmul@f3_as_product,f
 11394  0FE2  0B89               	decfsz	9,f
 11395  0FE3  2FDF               	goto	u5655
 11396  0FE4  3001               	movlw	1
 11397  0FE5  02DF               	subwf	___ftmul@cntr,f
 11398  0FE6  1D03               	btfss	3,2
 11399  0FE7  2FD0               	goto	l5962
 11400  0FE8  085C               	movf	___ftmul@f3_as_product,w
 11401  0FE9  00A1               	movwf	___ftpack@arg
 11402  0FEA  085D               	movf	___ftmul@f3_as_product+1,w
 11403  0FEB  00A2               	movwf	___ftpack@arg+1
 11404  0FEC  085E               	movf	___ftmul@f3_as_product+2,w
 11405  0FED  00A3               	movwf	___ftpack@arg+2
 11406  0FEE  085B               	movf	___ftmul@exp,w
 11407  0FEF  00D7               	movwf	??___ftmul
 11408  0FF0  0857               	movf	??___ftmul,w
 11409  0FF1  00A4               	movwf	___ftpack@exp
 11410  0FF2  0860               	movf	___ftmul@sign,w
 11411  0FF3  00D8               	movwf	??___ftmul+1
 11412  0FF4  0858               	movf	??___ftmul+1,w
 11413  0FF5  00A5               	movwf	___ftpack@sign
 11414  0FF6  318B  23CC         	fcall	___ftpack
 11415  0FF8  0020               	movlb	0	; select bank0
 11416  0FF9  0821               	movf	?___ftpack,w
 11417  0FFA  00D1               	movwf	?___ftmul
 11418  0FFB  0822               	movf	?___ftpack+1,w
 11419  0FFC  00D2               	movwf	?___ftmul+1
 11420  0FFD  0823               	movf	?___ftpack+2,w
 11421  0FFE  00D3               	movwf	?___ftmul+2
 11422  0FFF  0008               	return
 11423  1000                     __end_of___ftmul:	
 11424                           
 11425                           	psect	text60
 11426  0EA3                     __ptext60:	
 11427 ;; *************** function ___ftdiv *****************
 11428 ;; Defined at:
 11429 ;;		line 56 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\ftdiv.c"
 11430 ;; Parameters:    Size  Location     Type
 11431 ;;  f2              3   17[BANK0 ] float 
 11432 ;;  f1              3   20[BANK0 ] float 
 11433 ;; Auto vars:     Size  Location     Type
 11434 ;;  f3              3   28[BANK0 ] float 
 11435 ;;  sign            1   32[BANK0 ] unsigned char 
 11436 ;;  exp             1   31[BANK0 ] unsigned char 
 11437 ;;  cntr            1   27[BANK0 ] unsigned char 
 11438 ;; Return value:  Size  Location     Type
 11439 ;;                  3   17[BANK0 ] float 
 11440 ;; Registers used:
 11441 ;;		wreg, status,2, status,0, pclath, cstack
 11442 ;; Tracked objects:
 11443 ;;		On entry : 0/0
 11444 ;;		On exit  : 0/0
 11445 ;;		Unchanged: 0/0
 11446 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11447 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11448 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11449 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11450 ;;      Totals:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11451 ;;Total ram usage:       16 bytes
 11452 ;; Hardware stack levels used:    1
 11453 ;; Hardware stack levels required when called:    5
 11454 ;; This function calls:
 11455 ;;		___ftpack
 11456 ;; This function is called by:
 11457 ;;		_Sensor_getSupplyVoltage
 11458 ;;		_BMP_readTemperature
 11459 ;;		_HMC5883L_GetCompassDirection
 11460 ;; This function uses a non-reentrant model
 11461 ;;
 11462                           
 11463                           
 11464                           ;psect for function ___ftdiv
 11465  0EA3                     ___ftdiv:	
 11466                           
 11467                           ;incstack = 0
 11468                           ; Regs used in ___ftdiv: [wreg+status,2+status,0+pclath+cstack]
 11469  0EA3  0020               	movlb	0	; select bank0
 11470  0EA4  0834               	movf	___ftdiv@f1,w
 11471  0EA5  00B7               	movwf	??___ftdiv
 11472  0EA6  0835               	movf	___ftdiv@f1+1,w
 11473  0EA7  00B8               	movwf	??___ftdiv+1
 11474  0EA8  0836               	movf	___ftdiv@f1+2,w
 11475  0EA9  00B9               	movwf	??___ftdiv+2
 11476  0EAA  1003               	clrc
 11477  0EAB  0D38               	rlf	??___ftdiv+1,w
 11478  0EAC  0D39               	rlf	??___ftdiv+2,w
 11479  0EAD  00BA               	movwf	??___ftdiv+3
 11480  0EAE  083A               	movf	??___ftdiv+3,w
 11481  0EAF  00BF               	movwf	___ftdiv@exp
 11482  0EB0  083F               	movf	___ftdiv@exp,w
 11483  0EB1  1D03               	btfss	3,2
 11484  0EB2  2EBA               	goto	l5512
 11485  0EB3  3000               	movlw	0
 11486  0EB4  00B1               	movwf	?___ftdiv
 11487  0EB5  3000               	movlw	0
 11488  0EB6  00B2               	movwf	?___ftdiv+1
 11489  0EB7  3000               	movlw	0
 11490  0EB8  00B3               	movwf	?___ftdiv+2
 11491  0EB9  0008               	return
 11492  0EBA                     l5512:	
 11493  0EBA  0831               	movf	___ftdiv@f2,w
 11494  0EBB  00B7               	movwf	??___ftdiv
 11495  0EBC  0832               	movf	___ftdiv@f2+1,w
 11496  0EBD  00B8               	movwf	??___ftdiv+1
 11497  0EBE  0833               	movf	___ftdiv@f2+2,w
 11498  0EBF  00B9               	movwf	??___ftdiv+2
 11499  0EC0  1003               	clrc
 11500  0EC1  0D38               	rlf	??___ftdiv+1,w
 11501  0EC2  0D39               	rlf	??___ftdiv+2,w
 11502  0EC3  00BA               	movwf	??___ftdiv+3
 11503  0EC4  083A               	movf	??___ftdiv+3,w
 11504  0EC5  00C0               	movwf	___ftdiv@sign
 11505  0EC6  0840               	movf	___ftdiv@sign,w
 11506  0EC7  1D03               	btfss	3,2
 11507  0EC8  2ED0               	goto	l5518
 11508  0EC9  3000               	movlw	0
 11509  0ECA  00B1               	movwf	?___ftdiv
 11510  0ECB  3000               	movlw	0
 11511  0ECC  00B2               	movwf	?___ftdiv+1
 11512  0ECD  3000               	movlw	0
 11513  0ECE  00B3               	movwf	?___ftdiv+2
 11514  0ECF  0008               	return
 11515  0ED0                     l5518:	
 11516  0ED0  3000               	movlw	0
 11517  0ED1  00BC               	movwf	___ftdiv@f3
 11518  0ED2  3000               	movlw	0
 11519  0ED3  00BD               	movwf	___ftdiv@f3+1
 11520  0ED4  3000               	movlw	0
 11521  0ED5  00BE               	movwf	___ftdiv@f3+2
 11522  0ED6  3089               	movlw	137
 11523  0ED7  0740               	addwf	___ftdiv@sign,w
 11524  0ED8  00B7               	movwf	??___ftdiv
 11525  0ED9  0837               	movf	??___ftdiv,w
 11526  0EDA  02BF               	subwf	___ftdiv@exp,f
 11527  0EDB  0834               	movf	___ftdiv@f1,w
 11528  0EDC  00B7               	movwf	??___ftdiv
 11529  0EDD  0835               	movf	___ftdiv@f1+1,w
 11530  0EDE  00B8               	movwf	??___ftdiv+1
 11531  0EDF  0836               	movf	___ftdiv@f1+2,w
 11532  0EE0  00B9               	movwf	??___ftdiv+2
 11533  0EE1  3010               	movlw	16
 11534  0EE2                     u4915:	
 11535  0EE2  36B9               	lsrf	??___ftdiv+2,f
 11536  0EE3  0CB8               	rrf	??___ftdiv+1,f
 11537  0EE4  0CB7               	rrf	??___ftdiv,f
 11538  0EE5  0B89               	decfsz	9,f
 11539  0EE6  2EE2               	goto	u4915
 11540  0EE7  0837               	movf	??___ftdiv,w
 11541  0EE8  00BA               	movwf	??___ftdiv+3
 11542  0EE9  083A               	movf	??___ftdiv+3,w
 11543  0EEA  00C0               	movwf	___ftdiv@sign
 11544  0EEB  0831               	movf	___ftdiv@f2,w
 11545  0EEC  00B7               	movwf	??___ftdiv
 11546  0EED  0832               	movf	___ftdiv@f2+1,w
 11547  0EEE  00B8               	movwf	??___ftdiv+1
 11548  0EEF  0833               	movf	___ftdiv@f2+2,w
 11549  0EF0  00B9               	movwf	??___ftdiv+2
 11550  0EF1  3010               	movlw	16
 11551  0EF2                     u4925:	
 11552  0EF2  36B9               	lsrf	??___ftdiv+2,f
 11553  0EF3  0CB8               	rrf	??___ftdiv+1,f
 11554  0EF4  0CB7               	rrf	??___ftdiv,f
 11555  0EF5  0B89               	decfsz	9,f
 11556  0EF6  2EF2               	goto	u4925
 11557  0EF7  0837               	movf	??___ftdiv,w
 11558  0EF8  00BA               	movwf	??___ftdiv+3
 11559  0EF9  083A               	movf	??___ftdiv+3,w
 11560  0EFA  06C0               	xorwf	___ftdiv@sign,f
 11561  0EFB  3080               	movlw	128
 11562  0EFC  00B7               	movwf	??___ftdiv
 11563  0EFD  0837               	movf	??___ftdiv,w
 11564  0EFE  05C0               	andwf	___ftdiv@sign,f
 11565  0EFF  17B5               	bsf	___ftdiv@f1+1,7
 11566  0F00  30FF               	movlw	255
 11567  0F01  05B4               	andwf	___ftdiv@f1,f
 11568  0F02  30FF               	movlw	255
 11569  0F03  05B5               	andwf	___ftdiv@f1+1,f
 11570  0F04  3000               	movlw	0
 11571  0F05  05B6               	andwf	___ftdiv@f1+2,f
 11572  0F06  17B2               	bsf	___ftdiv@f2+1,7
 11573  0F07  30FF               	movlw	255
 11574  0F08  05B1               	andwf	___ftdiv@f2,f
 11575  0F09  30FF               	movlw	255
 11576  0F0A  05B2               	andwf	___ftdiv@f2+1,f
 11577  0F0B  3000               	movlw	0
 11578  0F0C  05B3               	andwf	___ftdiv@f2+2,f
 11579  0F0D  3018               	movlw	24
 11580  0F0E  00B7               	movwf	??___ftdiv
 11581  0F0F  0837               	movf	??___ftdiv,w
 11582  0F10  00BB               	movwf	___ftdiv@cntr
 11583  0F11                     l5532:	
 11584  0F11  3001               	movlw	1
 11585  0F12                     u4935:	
 11586  0F12  35BC               	lslf	___ftdiv@f3,f
 11587  0F13  0DBD               	rlf	___ftdiv@f3+1,f
 11588  0F14  0DBE               	rlf	___ftdiv@f3+2,f
 11589  0F15  0B89               	decfsz	9,f
 11590  0F16  2F12               	goto	u4935
 11591  0F17  0833               	movf	___ftdiv@f2+2,w
 11592  0F18  0236               	subwf	___ftdiv@f1+2,w
 11593  0F19  1D03               	skipz
 11594  0F1A  2F21               	goto	u4945
 11595  0F1B  0832               	movf	___ftdiv@f2+1,w
 11596  0F1C  0235               	subwf	___ftdiv@f1+1,w
 11597  0F1D  1D03               	skipz
 11598  0F1E  2F21               	goto	u4945
 11599  0F1F  0831               	movf	___ftdiv@f2,w
 11600  0F20  0234               	subwf	___ftdiv@f1,w
 11601  0F21                     u4945:	
 11602  0F21  1C03               	skipc
 11603  0F22  2F2A               	goto	l5540
 11604  0F23  0831               	movf	___ftdiv@f2,w
 11605  0F24  02B4               	subwf	___ftdiv@f1,f
 11606  0F25  0832               	movf	___ftdiv@f2+1,w
 11607  0F26  3BB5               	subwfb	___ftdiv@f1+1,f
 11608  0F27  0833               	movf	___ftdiv@f2+2,w
 11609  0F28  3BB6               	subwfb	___ftdiv@f1+2,f
 11610  0F29  143C               	bsf	___ftdiv@f3,0
 11611  0F2A                     l5540:	
 11612  0F2A  3001               	movlw	1
 11613  0F2B                     u4955:	
 11614  0F2B  35B4               	lslf	___ftdiv@f1,f
 11615  0F2C  0DB5               	rlf	___ftdiv@f1+1,f
 11616  0F2D  0DB6               	rlf	___ftdiv@f1+2,f
 11617  0F2E  0B89               	decfsz	9,f
 11618  0F2F  2F2B               	goto	u4955
 11619  0F30  3001               	movlw	1
 11620  0F31  02BB               	subwf	___ftdiv@cntr,f
 11621  0F32  1D03               	btfss	3,2
 11622  0F33  2F11               	goto	l5532
 11623  0F34  083C               	movf	___ftdiv@f3,w
 11624  0F35  00A1               	movwf	___ftpack@arg
 11625  0F36  083D               	movf	___ftdiv@f3+1,w
 11626  0F37  00A2               	movwf	___ftpack@arg+1
 11627  0F38  083E               	movf	___ftdiv@f3+2,w
 11628  0F39  00A3               	movwf	___ftpack@arg+2
 11629  0F3A  083F               	movf	___ftdiv@exp,w
 11630  0F3B  00B7               	movwf	??___ftdiv
 11631  0F3C  0837               	movf	??___ftdiv,w
 11632  0F3D  00A4               	movwf	___ftpack@exp
 11633  0F3E  0840               	movf	___ftdiv@sign,w
 11634  0F3F  00B8               	movwf	??___ftdiv+1
 11635  0F40  0838               	movf	??___ftdiv+1,w
 11636  0F41  00A5               	movwf	___ftpack@sign
 11637  0F42  318B  23CC         	fcall	___ftpack
 11638  0F44  0020               	movlb	0	; select bank0
 11639  0F45  0821               	movf	?___ftpack,w
 11640  0F46  00B1               	movwf	?___ftdiv
 11641  0F47  0822               	movf	?___ftpack+1,w
 11642  0F48  00B2               	movwf	?___ftdiv+1
 11643  0F49  0823               	movf	?___ftpack+2,w
 11644  0F4A  00B3               	movwf	?___ftdiv+2
 11645  0F4B  0008               	return
 11646  0F4C                     __end_of___ftdiv:	
 11647                           
 11648                           	psect	text61
 11649  05EA                     __ptext61:	
 11650 ;; *************** function ___ftadd *****************
 11651 ;; Defined at:
 11652 ;;		line 86 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\ftadd.c"
 11653 ;; Parameters:    Size  Location     Type
 11654 ;;  f1              3   36[BANK0 ] float 
 11655 ;;  f2              3   39[BANK0 ] float 
 11656 ;; Auto vars:     Size  Location     Type
 11657 ;;  exp1            1   48[BANK0 ] unsigned char 
 11658 ;;  exp2            1   47[BANK0 ] unsigned char 
 11659 ;;  sign            1   46[BANK0 ] unsigned char 
 11660 ;; Return value:  Size  Location     Type
 11661 ;;                  3   36[BANK0 ] float 
 11662 ;; Registers used:
 11663 ;;		wreg, status,2, status,0, pclath, cstack
 11664 ;; Tracked objects:
 11665 ;;		On entry : 0/0
 11666 ;;		On exit  : 0/0
 11667 ;;		Unchanged: 0/0
 11668 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11669 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11670 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11671 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11672 ;;      Totals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11673 ;;Total ram usage:       13 bytes
 11674 ;; Hardware stack levels used:    1
 11675 ;; Hardware stack levels required when called:    5
 11676 ;; This function calls:
 11677 ;;		___ftpack
 11678 ;; This function is called by:
 11679 ;;		_BMP_readTemperature
 11680 ;;		_HMC5883L_GetCompassDirection
 11681 ;; This function uses a non-reentrant model
 11682 ;;
 11683                           
 11684                           
 11685                           ;psect for function ___ftadd
 11686  05EA                     ___ftadd:	
 11687                           
 11688                           ;incstack = 0
 11689                           ; Regs used in ___ftadd: [wreg+status,2+status,0+pclath+cstack]
 11690  05EA  0020               	movlb	0	; select bank0
 11691  05EB  0844               	movf	___ftadd@f1,w
 11692  05EC  00CA               	movwf	??___ftadd
 11693  05ED  0845               	movf	___ftadd@f1+1,w
 11694  05EE  00CB               	movwf	??___ftadd+1
 11695  05EF  0846               	movf	___ftadd@f1+2,w
 11696  05F0  00CC               	movwf	??___ftadd+2
 11697  05F1  1003               	clrc
 11698  05F2  0D4B               	rlf	??___ftadd+1,w
 11699  05F3  0D4C               	rlf	??___ftadd+2,w
 11700  05F4  00CD               	movwf	??___ftadd+3
 11701  05F5  084D               	movf	??___ftadd+3,w
 11702  05F6  00D0               	movwf	___ftadd@exp1
 11703  05F7  0847               	movf	___ftadd@f2,w
 11704  05F8  00CA               	movwf	??___ftadd
 11705  05F9  0848               	movf	___ftadd@f2+1,w
 11706  05FA  00CB               	movwf	??___ftadd+1
 11707  05FB  0849               	movf	___ftadd@f2+2,w
 11708  05FC  00CC               	movwf	??___ftadd+2
 11709  05FD  1003               	clrc
 11710  05FE  0D4B               	rlf	??___ftadd+1,w
 11711  05FF  0D4C               	rlf	??___ftadd+2,w
 11712  0600  00CD               	movwf	??___ftadd+3
 11713  0601  084D               	movf	??___ftadd+3,w
 11714  0602  00CF               	movwf	___ftadd@exp2
 11715  0603  0850               	movf	___ftadd@exp1,w
 11716  0604  1903               	btfsc	3,2
 11717  0605  2E12               	goto	l5862
 11718  0606  084F               	movf	___ftadd@exp2,w
 11719  0607  0250               	subwf	___ftadd@exp1,w
 11720  0608  1803               	skipnc
 11721  0609  2E19               	goto	l5866
 11722  060A  0350               	decf	___ftadd@exp1,w
 11723  060B  3AFF               	xorlw	255
 11724  060C  074F               	addwf	___ftadd@exp2,w
 11725  060D  00CA               	movwf	??___ftadd
 11726  060E  3019               	movlw	25
 11727  060F  024A               	subwf	??___ftadd,w
 11728  0610  1C03               	skipc
 11729  0611  2E19               	goto	l5866
 11730  0612                     l5862:	
 11731  0612  0847               	movf	___ftadd@f2,w
 11732  0613  00C4               	movwf	?___ftadd
 11733  0614  0848               	movf	___ftadd@f2+1,w
 11734  0615  00C5               	movwf	?___ftadd+1
 11735  0616  0849               	movf	___ftadd@f2+2,w
 11736  0617  00C6               	movwf	?___ftadd+2
 11737  0618  0008               	return
 11738  0619                     l5866:	
 11739  0619  084F               	movf	___ftadd@exp2,w
 11740  061A  1903               	btfsc	3,2
 11741  061B  0008               	return
 11742  061C  0850               	movf	___ftadd@exp1,w
 11743  061D  024F               	subwf	___ftadd@exp2,w
 11744  061E  1803               	skipnc
 11745  061F  2E28               	goto	l5872
 11746  0620  034F               	decf	___ftadd@exp2,w
 11747  0621  3AFF               	xorlw	255
 11748  0622  0750               	addwf	___ftadd@exp1,w
 11749  0623  00CA               	movwf	??___ftadd
 11750  0624  3019               	movlw	25
 11751  0625  024A               	subwf	??___ftadd,w
 11752  0626  1803               	btfsc	3,0
 11753  0627  0008               	return
 11754  0628                     l5872:	
 11755  0628  3006               	movlw	6
 11756  0629  00CA               	movwf	??___ftadd
 11757  062A  084A               	movf	??___ftadd,w
 11758  062B  00CE               	movwf	___ftadd@sign
 11759  062C  1BC6               	btfsc	___ftadd@f1+2,7
 11760  062D  17CE               	bsf	___ftadd@sign,7
 11761  062E  1BC9               	btfsc	___ftadd@f2+2,7
 11762  062F  174E               	bsf	___ftadd@sign,6
 11763  0630  17C5               	bsf	___ftadd@f1+1,7
 11764  0631  30FF               	movlw	255
 11765  0632  05C4               	andwf	___ftadd@f1,f
 11766  0633  30FF               	movlw	255
 11767  0634  05C5               	andwf	___ftadd@f1+1,f
 11768  0635  3000               	movlw	0
 11769  0636  05C6               	andwf	___ftadd@f1+2,f
 11770  0637  17C8               	bsf	___ftadd@f2+1,7
 11771  0638  30FF               	movlw	255
 11772  0639  05C7               	andwf	___ftadd@f2,f
 11773  063A  30FF               	movlw	255
 11774  063B  05C8               	andwf	___ftadd@f2+1,f
 11775  063C  3000               	movlw	0
 11776  063D  05C9               	andwf	___ftadd@f2+2,f
 11777  063E  084F               	movf	___ftadd@exp2,w
 11778  063F  0250               	subwf	___ftadd@exp1,w
 11779  0640  1803               	skipnc
 11780  0641  2E64               	goto	l5894
 11781  0642                     l5884:	
 11782  0642  3001               	movlw	1
 11783  0643                     u5415:	
 11784  0643  35C7               	lslf	___ftadd@f2,f
 11785  0644  0DC8               	rlf	___ftadd@f2+1,f
 11786  0645  0DC9               	rlf	___ftadd@f2+2,f
 11787  0646  0B89               	decfsz	9,f
 11788  0647  2E43               	goto	u5415
 11789  0648  3001               	movlw	1
 11790  0649  02CF               	subwf	___ftadd@exp2,f
 11791  064A  084F               	movf	___ftadd@exp2,w
 11792  064B  0650               	xorwf	___ftadd@exp1,w
 11793  064C  1903               	skipnz
 11794  064D  2E5F               	goto	l5892
 11795  064E  3001               	movlw	1
 11796  064F  02CE               	subwf	___ftadd@sign,f
 11797  0650  084E               	movf	___ftadd@sign,w
 11798  0651  3907               	andlw	7
 11799  0652  1903               	btfsc	3,2
 11800  0653  2E5F               	goto	l5892
 11801  0654  2E42               	goto	l5884
 11802  0655                     l5890:	
 11803  0655  3001               	movlw	1
 11804  0656                     u5445:	
 11805  0656  36C6               	lsrf	___ftadd@f1+2,f
 11806  0657  0CC5               	rrf	___ftadd@f1+1,f
 11807  0658  0CC4               	rrf	___ftadd@f1,f
 11808  0659  0B89               	decfsz	9,f
 11809  065A  2E56               	goto	u5445
 11810  065B  3001               	movlw	1
 11811  065C  00CA               	movwf	??___ftadd
 11812  065D  084A               	movf	??___ftadd,w
 11813  065E  07D0               	addwf	___ftadd@exp1,f
 11814  065F                     l5892:	
 11815  065F  0850               	movf	___ftadd@exp1,w
 11816  0660  064F               	xorwf	___ftadd@exp2,w
 11817  0661  1903               	btfsc	3,2
 11818  0662  2E89               	goto	l1518
 11819  0663  2E55               	goto	l5890
 11820  0664                     l5894:	
 11821  0664  0850               	movf	___ftadd@exp1,w
 11822  0665  024F               	subwf	___ftadd@exp2,w
 11823  0666  1803               	skipnc
 11824  0667  2E89               	goto	l1518
 11825  0668                     l5896:	
 11826  0668  3001               	movlw	1
 11827  0669                     u5475:	
 11828  0669  35C4               	lslf	___ftadd@f1,f
 11829  066A  0DC5               	rlf	___ftadd@f1+1,f
 11830  066B  0DC6               	rlf	___ftadd@f1+2,f
 11831  066C  0B89               	decfsz	9,f
 11832  066D  2E69               	goto	u5475
 11833  066E  3001               	movlw	1
 11834  066F  02D0               	subwf	___ftadd@exp1,f
 11835  0670  084F               	movf	___ftadd@exp2,w
 11836  0671  0650               	xorwf	___ftadd@exp1,w
 11837  0672  1903               	skipnz
 11838  0673  2E85               	goto	l5904
 11839  0674  3001               	movlw	1
 11840  0675  02CE               	subwf	___ftadd@sign,f
 11841  0676  084E               	movf	___ftadd@sign,w
 11842  0677  3907               	andlw	7
 11843  0678  1903               	btfsc	3,2
 11844  0679  2E85               	goto	l5904
 11845  067A  2E68               	goto	l5896
 11846  067B                     l5902:	
 11847  067B  3001               	movlw	1
 11848  067C                     u5505:	
 11849  067C  36C9               	lsrf	___ftadd@f2+2,f
 11850  067D  0CC8               	rrf	___ftadd@f2+1,f
 11851  067E  0CC7               	rrf	___ftadd@f2,f
 11852  067F  0B89               	decfsz	9,f
 11853  0680  2E7C               	goto	u5505
 11854  0681  3001               	movlw	1
 11855  0682  00CA               	movwf	??___ftadd
 11856  0683  084A               	movf	??___ftadd,w
 11857  0684  07CF               	addwf	___ftadd@exp2,f
 11858  0685                     l5904:	
 11859  0685  0850               	movf	___ftadd@exp1,w
 11860  0686  064F               	xorwf	___ftadd@exp2,w
 11861  0687  1D03               	skipz
 11862  0688  2E7B               	goto	l5902
 11863  0689                     l1518:	
 11864  0689  1FCE               	btfss	___ftadd@sign,7
 11865  068A  2E9B               	goto	l5908
 11866  068B  30FF               	movlw	255
 11867  068C  06C4               	xorwf	___ftadd@f1,f
 11868  068D  30FF               	movlw	255
 11869  068E  06C5               	xorwf	___ftadd@f1+1,f
 11870  068F  30FF               	movlw	255
 11871  0690  06C6               	xorwf	___ftadd@f1+2,f
 11872  0691  3001               	movlw	1
 11873  0692  07C4               	addwf	___ftadd@f1,f
 11874  0693  3000               	movlw	0
 11875  0694  1803               	skipnc
 11876  0695  3001               	movlw	1
 11877  0696  07C5               	addwf	___ftadd@f1+1,f
 11878  0697  3000               	movlw	0
 11879  0698  1803               	skipnc
 11880  0699  3001               	movlw	1
 11881  069A  07C6               	addwf	___ftadd@f1+2,f
 11882  069B                     l5908:	
 11883  069B  1F4E               	btfss	___ftadd@sign,6
 11884  069C  2EAD               	goto	l5912
 11885  069D  30FF               	movlw	255
 11886  069E  06C7               	xorwf	___ftadd@f2,f
 11887  069F  30FF               	movlw	255
 11888  06A0  06C8               	xorwf	___ftadd@f2+1,f
 11889  06A1  30FF               	movlw	255
 11890  06A2  06C9               	xorwf	___ftadd@f2+2,f
 11891  06A3  3001               	movlw	1
 11892  06A4  07C7               	addwf	___ftadd@f2,f
 11893  06A5  3000               	movlw	0
 11894  06A6  1803               	skipnc
 11895  06A7  3001               	movlw	1
 11896  06A8  07C8               	addwf	___ftadd@f2+1,f
 11897  06A9  3000               	movlw	0
 11898  06AA  1803               	skipnc
 11899  06AB  3001               	movlw	1
 11900  06AC  07C9               	addwf	___ftadd@f2+2,f
 11901  06AD                     l5912:	
 11902  06AD  01CE               	clrf	___ftadd@sign
 11903  06AE  0844               	movf	___ftadd@f1,w
 11904  06AF  07C7               	addwf	___ftadd@f2,f
 11905  06B0  0845               	movf	___ftadd@f1+1,w
 11906  06B1  3DC8               	addwfc	___ftadd@f2+1,f
 11907  06B2  0846               	movf	___ftadd@f1+2,w
 11908  06B3  3DC9               	addwfc	___ftadd@f2+2,f
 11909  06B4  1FC9               	btfss	___ftadd@f2+2,7
 11910  06B5  2EC8               	goto	l5922
 11911  06B6  30FF               	movlw	255
 11912  06B7  06C7               	xorwf	___ftadd@f2,f
 11913  06B8  30FF               	movlw	255
 11914  06B9  06C8               	xorwf	___ftadd@f2+1,f
 11915  06BA  30FF               	movlw	255
 11916  06BB  06C9               	xorwf	___ftadd@f2+2,f
 11917  06BC  3001               	movlw	1
 11918  06BD  07C7               	addwf	___ftadd@f2,f
 11919  06BE  3000               	movlw	0
 11920  06BF  1803               	skipnc
 11921  06C0  3001               	movlw	1
 11922  06C1  07C8               	addwf	___ftadd@f2+1,f
 11923  06C2  3000               	movlw	0
 11924  06C3  1803               	skipnc
 11925  06C4  3001               	movlw	1
 11926  06C5  07C9               	addwf	___ftadd@f2+2,f
 11927  06C6  01CE               	clrf	___ftadd@sign
 11928  06C7  0ACE               	incf	___ftadd@sign,f
 11929  06C8                     l5922:	
 11930  06C8  0847               	movf	___ftadd@f2,w
 11931  06C9  00A1               	movwf	___ftpack@arg
 11932  06CA  0848               	movf	___ftadd@f2+1,w
 11933  06CB  00A2               	movwf	___ftpack@arg+1
 11934  06CC  0849               	movf	___ftadd@f2+2,w
 11935  06CD  00A3               	movwf	___ftpack@arg+2
 11936  06CE  0850               	movf	___ftadd@exp1,w
 11937  06CF  00CA               	movwf	??___ftadd
 11938  06D0  084A               	movf	??___ftadd,w
 11939  06D1  00A4               	movwf	___ftpack@exp
 11940  06D2  084E               	movf	___ftadd@sign,w
 11941  06D3  00CB               	movwf	??___ftadd+1
 11942  06D4  084B               	movf	??___ftadd+1,w
 11943  06D5  00A5               	movwf	___ftpack@sign
 11944  06D6  318B  23CC         	fcall	___ftpack
 11945  06D8  0020               	movlb	0	; select bank0
 11946  06D9  0821               	movf	?___ftpack,w
 11947  06DA  00C4               	movwf	?___ftadd
 11948  06DB  0822               	movf	?___ftpack+1,w
 11949  06DC  00C5               	movwf	?___ftadd+1
 11950  06DD  0823               	movf	?___ftpack+2,w
 11951  06DE  00C6               	movwf	?___ftadd+2
 11952  06DF  0008               	return
 11953  06E0                     __end_of___ftadd:	
 11954                           
 11955                           	psect	text62
 11956  084B                     __ptext62:	
 11957 ;; *************** function ___awtoft *****************
 11958 ;; Defined at:
 11959 ;;		line 32 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\awtoft.c"
 11960 ;; Parameters:    Size  Location     Type
 11961 ;;  c               2    9[BANK0 ] int 
 11962 ;; Auto vars:     Size  Location     Type
 11963 ;;  sign            1   14[BANK0 ] unsigned char 
 11964 ;; Return value:  Size  Location     Type
 11965 ;;                  3    9[BANK0 ] float 
 11966 ;; Registers used:
 11967 ;;		wreg, status,2, status,0, pclath, cstack
 11968 ;; Tracked objects:
 11969 ;;		On entry : 0/0
 11970 ;;		On exit  : 0/0
 11971 ;;		Unchanged: 0/0
 11972 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11973 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11974 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11975 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11976 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11977 ;;Total ram usage:        6 bytes
 11978 ;; Hardware stack levels used:    1
 11979 ;; Hardware stack levels required when called:    5
 11980 ;; This function calls:
 11981 ;;		___ftpack
 11982 ;; This function is called by:
 11983 ;;		_BMP_readTemperature
 11984 ;;		_HMC5883L_GetCompassDirection
 11985 ;; This function uses a non-reentrant model
 11986 ;;
 11987                           
 11988                           
 11989                           ;psect for function ___awtoft
 11990  084B                     ___awtoft:	
 11991                           
 11992                           ;incstack = 0
 11993                           ; Regs used in ___awtoft: [wreg+status,2+status,0+pclath+cstack]
 11994  084B  0020               	movlb	0	; select bank0
 11995  084C  01AE               	clrf	___awtoft@sign
 11996  084D  1FAA               	btfss	___awtoft@c+1,7
 11997  084E  2856               	goto	l5852
 11998  084F  09A9               	comf	___awtoft@c,f
 11999  0850  09AA               	comf	___awtoft@c+1,f
 12000  0851  0AA9               	incf	___awtoft@c,f
 12001  0852  1903               	skipnz
 12002  0853  0AAA               	incf	___awtoft@c+1,f
 12003  0854  01AE               	clrf	___awtoft@sign
 12004  0855  0AAE               	incf	___awtoft@sign,f
 12005  0856                     l5852:	
 12006  0856  0829               	movf	___awtoft@c,w
 12007  0857  00A1               	movwf	___ftpack@arg
 12008  0858  082A               	movf	___awtoft@c+1,w
 12009  0859  00A2               	movwf	___ftpack@arg+1
 12010  085A  01A3               	clrf	___ftpack@arg+2
 12011  085B  308E               	movlw	142
 12012  085C  00AC               	movwf	??___awtoft
 12013  085D  082C               	movf	??___awtoft,w
 12014  085E  00A4               	movwf	___ftpack@exp
 12015  085F  082E               	movf	___awtoft@sign,w
 12016  0860  00AD               	movwf	??___awtoft+1
 12017  0861  082D               	movf	??___awtoft+1,w
 12018  0862  00A5               	movwf	___ftpack@sign
 12019  0863  318B  23CC         	fcall	___ftpack
 12020  0865  0020               	movlb	0	; select bank0
 12021  0866  0821               	movf	?___ftpack,w
 12022  0867  00A9               	movwf	?___awtoft
 12023  0868  0822               	movf	?___ftpack+1,w
 12024  0869  00AA               	movwf	?___awtoft+1
 12025  086A  0823               	movf	?___ftpack+2,w
 12026  086B  00AB               	movwf	?___awtoft+2
 12027  086C  0008               	return
 12028  086D                     __end_of___awtoft:	
 12029                           
 12030                           	psect	text63
 12031  09C8                     __ptext63:	
 12032 ;; *************** function ___altoft *****************
 12033 ;; Defined at:
 12034 ;;		line 42 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\altoft.c"
 12035 ;; Parameters:    Size  Location     Type
 12036 ;;  c               4    9[BANK0 ] long 
 12037 ;; Auto vars:     Size  Location     Type
 12038 ;;  sign            1   16[BANK0 ] unsigned char 
 12039 ;;  exp             1   15[BANK0 ] unsigned char 
 12040 ;; Return value:  Size  Location     Type
 12041 ;;                  3    9[BANK0 ] float 
 12042 ;; Registers used:
 12043 ;;		wreg, status,2, status,0, pclath, cstack
 12044 ;; Tracked objects:
 12045 ;;		On entry : 0/0
 12046 ;;		On exit  : 0/0
 12047 ;;		Unchanged: 0/0
 12048 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12049 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12050 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12051 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12052 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12053 ;;Total ram usage:        8 bytes
 12054 ;; Hardware stack levels used:    1
 12055 ;; Hardware stack levels required when called:    5
 12056 ;; This function calls:
 12057 ;;		___ftpack
 12058 ;; This function is called by:
 12059 ;;		_BMP_readTemperature
 12060 ;; This function uses a non-reentrant model
 12061 ;;
 12062                           
 12063                           
 12064                           ;psect for function ___altoft
 12065  09C8                     ___altoft:	
 12066                           
 12067                           ;incstack = 0
 12068                           ; Regs used in ___altoft: [wreg+status,2+status,0+pclath+cstack]
 12069  09C8  0020               	movlb	0	; select bank0
 12070  09C9  01B0               	clrf	___altoft@sign
 12071  09CA  308E               	movlw	142
 12072  09CB  00AD               	movwf	??___altoft
 12073  09CC  082D               	movf	??___altoft,w
 12074  09CD  00AF               	movwf	___altoft@exp
 12075  09CE  1FAC               	btfss	___altoft@c+3,7
 12076  09CF  29DD               	goto	l5838
 12077  09D0  09A9               	comf	___altoft@c,f
 12078  09D1  09AA               	comf	___altoft@c+1,f
 12079  09D2  09AB               	comf	___altoft@c+2,f
 12080  09D3  09AC               	comf	___altoft@c+3,f
 12081  09D4  0AA9               	incf	___altoft@c,f
 12082  09D5  1903               	skipnz
 12083  09D6  0AAA               	incf	___altoft@c+1,f
 12084  09D7  1903               	skipnz
 12085  09D8  0AAB               	incf	___altoft@c+2,f
 12086  09D9  1903               	skipnz
 12087  09DA  0AAC               	incf	___altoft@c+3,f
 12088  09DB  01B0               	clrf	___altoft@sign
 12089  09DC  0AB0               	incf	___altoft@sign,f
 12090  09DD                     l5838:	
 12091  09DD  30FF               	movlw	255
 12092  09DE  052C               	andwf	___altoft@c+3,w
 12093  09DF  1903               	btfsc	3,2
 12094  09E0  29ED               	goto	l5840
 12095  09E1  3001               	movlw	1
 12096  09E2                     u5295:	
 12097  09E2  36AC               	lsrf	___altoft@c+3,f
 12098  09E3  0CAB               	rrf	___altoft@c+2,f
 12099  09E4  0CAA               	rrf	___altoft@c+1,f
 12100  09E5  0CA9               	rrf	___altoft@c,f
 12101  09E6  0B89               	decfsz	9,f
 12102  09E7  29E2               	goto	u5295
 12103  09E8  3001               	movlw	1
 12104  09E9  00AD               	movwf	??___altoft
 12105  09EA  082D               	movf	??___altoft,w
 12106  09EB  07AF               	addwf	___altoft@exp,f
 12107  09EC  29DD               	goto	l5838
 12108  09ED                     l5840:	
 12109  09ED  0829               	movf	___altoft@c,w
 12110  09EE  00A1               	movwf	___ftpack@arg
 12111  09EF  082A               	movf	___altoft@c+1,w
 12112  09F0  00A2               	movwf	___ftpack@arg+1
 12113  09F1  082B               	movf	___altoft@c+2,w
 12114  09F2  00A3               	movwf	___ftpack@arg+2
 12115  09F3  082F               	movf	___altoft@exp,w
 12116  09F4  00AD               	movwf	??___altoft
 12117  09F5  082D               	movf	??___altoft,w
 12118  09F6  00A4               	movwf	___ftpack@exp
 12119  09F7  0830               	movf	___altoft@sign,w
 12120  09F8  00AE               	movwf	??___altoft+1
 12121  09F9  082E               	movf	??___altoft+1,w
 12122  09FA  00A5               	movwf	___ftpack@sign
 12123  09FB  318B  23CC         	fcall	___ftpack
 12124  09FD  0020               	movlb	0	; select bank0
 12125  09FE  0821               	movf	?___ftpack,w
 12126  09FF  00A9               	movwf	?___altoft
 12127  0A00  0822               	movf	?___ftpack+1,w
 12128  0A01  00AA               	movwf	?___altoft+1
 12129  0A02  0823               	movf	?___ftpack+2,w
 12130  0A03  00AB               	movwf	?___altoft+2
 12131  0A04  0008               	return
 12132  0A05                     __end_of___altoft:	
 12133                           
 12134                           	psect	text64
 12135  0BCC                     __ptext64:	
 12136 ;; *************** function ___ftpack *****************
 12137 ;; Defined at:
 12138 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\float.c"
 12139 ;; Parameters:    Size  Location     Type
 12140 ;;  arg             3    1[BANK0 ] unsigned um
 12141 ;;  exp             1    4[BANK0 ] unsigned char 
 12142 ;;  sign            1    5[BANK0 ] unsigned char 
 12143 ;; Auto vars:     Size  Location     Type
 12144 ;;		None
 12145 ;; Return value:  Size  Location     Type
 12146 ;;                  3    1[BANK0 ] float 
 12147 ;; Registers used:
 12148 ;;		wreg, status,2, status,0
 12149 ;; Tracked objects:
 12150 ;;		On entry : 0/0
 12151 ;;		On exit  : 0/0
 12152 ;;		Unchanged: 0/0
 12153 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12154 ;;      Params:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12155 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12156 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12157 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12158 ;;Total ram usage:        8 bytes
 12159 ;; Hardware stack levels used:    1
 12160 ;; Hardware stack levels required when called:    4
 12161 ;; This function calls:
 12162 ;;		Nothing
 12163 ;; This function is called by:
 12164 ;;		___altoft
 12165 ;;		___awtoft
 12166 ;;		___ftadd
 12167 ;;		___ftdiv
 12168 ;;		___ftmul
 12169 ;;		___lwtoft
 12170 ;; This function uses a non-reentrant model
 12171 ;;
 12172                           
 12173                           
 12174                           ;psect for function ___ftpack
 12175  0BCC                     ___ftpack:	
 12176                           
 12177                           ;incstack = 0
 12178                           ; Regs used in ___ftpack: [wreg+status,2+status,0]
 12179  0BCC  0020               	movlb	0	; select bank0
 12180  0BCD  0824               	movf	___ftpack@exp,w
 12181  0BCE  1903               	btfsc	3,2
 12182  0BCF  2BD5               	goto	l5334
 12183  0BD0  0823               	movf	___ftpack@arg+2,w
 12184  0BD1  0422               	iorwf	___ftpack@arg+1,w
 12185  0BD2  0421               	iorwf	___ftpack@arg,w
 12186  0BD3  1D03               	skipz
 12187  0BD4  2BE6               	goto	l5340
 12188  0BD5                     l5334:	
 12189  0BD5  3000               	movlw	0
 12190  0BD6  00A1               	movwf	?___ftpack
 12191  0BD7  3000               	movlw	0
 12192  0BD8  00A2               	movwf	?___ftpack+1
 12193  0BD9  3000               	movlw	0
 12194  0BDA  00A3               	movwf	?___ftpack+2
 12195  0BDB  0008               	return
 12196  0BDC                     l5338:	
 12197  0BDC  3001               	movlw	1
 12198  0BDD  00A6               	movwf	??___ftpack
 12199  0BDE  0826               	movf	??___ftpack,w
 12200  0BDF  07A4               	addwf	___ftpack@exp,f
 12201  0BE0  3001               	movlw	1
 12202  0BE1                     u4715:	
 12203  0BE1  36A3               	lsrf	___ftpack@arg+2,f
 12204  0BE2  0CA2               	rrf	___ftpack@arg+1,f
 12205  0BE3  0CA1               	rrf	___ftpack@arg,f
 12206  0BE4  0B89               	decfsz	9,f
 12207  0BE5  2BE1               	goto	u4715
 12208  0BE6                     l5340:	
 12209  0BE6  30FE               	movlw	254
 12210  0BE7  0523               	andwf	___ftpack@arg+2,w
 12211  0BE8  1903               	btfsc	3,2
 12212  0BE9  2BFF               	goto	l1487
 12213  0BEA  2BDC               	goto	l5338
 12214  0BEB                     l5342:	
 12215  0BEB  3001               	movlw	1
 12216  0BEC  00A6               	movwf	??___ftpack
 12217  0BED  0826               	movf	??___ftpack,w
 12218  0BEE  07A4               	addwf	___ftpack@exp,f
 12219  0BEF  3001               	movlw	1
 12220  0BF0  07A1               	addwf	___ftpack@arg,f
 12221  0BF1  3000               	movlw	0
 12222  0BF2  1803               	skipnc
 12223  0BF3  3001               	movlw	1
 12224  0BF4  07A2               	addwf	___ftpack@arg+1,f
 12225  0BF5  3000               	movlw	0
 12226  0BF6  1803               	skipnc
 12227  0BF7  3001               	movlw	1
 12228  0BF8  07A3               	addwf	___ftpack@arg+2,f
 12229  0BF9  3001               	movlw	1
 12230  0BFA                     u4735:	
 12231  0BFA  36A3               	lsrf	___ftpack@arg+2,f
 12232  0BFB  0CA2               	rrf	___ftpack@arg+1,f
 12233  0BFC  0CA1               	rrf	___ftpack@arg,f
 12234  0BFD  0B89               	decfsz	9,f
 12235  0BFE  2BFA               	goto	u4735
 12236  0BFF                     l1487:	
 12237  0BFF  30FF               	movlw	255
 12238  0C00  0523               	andwf	___ftpack@arg+2,w
 12239  0C01  1903               	btfsc	3,2
 12240  0C02  2C0C               	goto	l5350
 12241  0C03  2BEB               	goto	l5342
 12242  0C04                     l5348:	
 12243  0C04  3001               	movlw	1
 12244  0C05  02A4               	subwf	___ftpack@exp,f
 12245  0C06  3001               	movlw	1
 12246  0C07                     u4755:	
 12247  0C07  35A1               	lslf	___ftpack@arg,f
 12248  0C08  0DA2               	rlf	___ftpack@arg+1,f
 12249  0C09  0DA3               	rlf	___ftpack@arg+2,f
 12250  0C0A  0B89               	decfsz	9,f
 12251  0C0B  2C07               	goto	u4755
 12252  0C0C                     l5350:	
 12253  0C0C  1BA2               	btfsc	___ftpack@arg+1,7
 12254  0C0D  2C12               	goto	l1494
 12255  0C0E  3002               	movlw	2
 12256  0C0F  0224               	subwf	___ftpack@exp,w
 12257  0C10  1803               	skipnc
 12258  0C11  2C04               	goto	l5348
 12259  0C12                     l1494:	
 12260  0C12  1824               	btfsc	___ftpack@exp,0
 12261  0C13  2C1A               	goto	l1495
 12262  0C14  30FF               	movlw	255
 12263  0C15  05A1               	andwf	___ftpack@arg,f
 12264  0C16  307F               	movlw	127
 12265  0C17  05A2               	andwf	___ftpack@arg+1,f
 12266  0C18  30FF               	movlw	255
 12267  0C19  05A3               	andwf	___ftpack@arg+2,f
 12268  0C1A                     l1495:	
 12269  0C1A  1003               	clrc
 12270  0C1B  0CA4               	rrf	___ftpack@exp,f
 12271  0C1C  0824               	movf	___ftpack@exp,w
 12272  0C1D  00A6               	movwf	??___ftpack
 12273  0C1E  01A7               	clrf	??___ftpack+1
 12274  0C1F  01A8               	clrf	??___ftpack+2
 12275  0C20  3010               	movlw	16
 12276  0C21                     u4795:	
 12277  0C21  35A6               	lslf	??___ftpack,f
 12278  0C22  0DA7               	rlf	??___ftpack+1,f
 12279  0C23  0DA8               	rlf	??___ftpack+2,f
 12280  0C24  0B89               	decfsz	9,f
 12281  0C25  2C21               	goto	u4795
 12282  0C26  0826               	movf	??___ftpack,w
 12283  0C27  04A1               	iorwf	___ftpack@arg,f
 12284  0C28  0827               	movf	??___ftpack+1,w
 12285  0C29  04A2               	iorwf	___ftpack@arg+1,f
 12286  0C2A  0828               	movf	??___ftpack+2,w
 12287  0C2B  04A3               	iorwf	___ftpack@arg+2,f
 12288  0C2C  0825               	movf	___ftpack@sign,w
 12289  0C2D  1903               	btfsc	3,2
 12290  0C2E  0008               	return
 12291  0C2F  17A3               	bsf	___ftpack@arg+2,7
 12292  0C30  0008               	return
 12293  0C31                     __end_of___ftpack:	
 12294                           
 12295                           	psect	text65
 12296  0D9A                     __ptext65:	
 12297 ;; *************** function ___aldiv *****************
 12298 ;; Defined at:
 12299 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\aldiv.c"
 12300 ;; Parameters:    Size  Location     Type
 12301 ;;  divisor         4    1[BANK0 ] long 
 12302 ;;  dividend        4    5[BANK0 ] long 
 12303 ;; Auto vars:     Size  Location     Type
 12304 ;;  quotient        4   12[BANK0 ] long 
 12305 ;;  sign            1   11[BANK0 ] unsigned char 
 12306 ;;  counter         1   10[BANK0 ] unsigned char 
 12307 ;; Return value:  Size  Location     Type
 12308 ;;                  4    1[BANK0 ] long 
 12309 ;; Registers used:
 12310 ;;		wreg, status,2, status,0
 12311 ;; Tracked objects:
 12312 ;;		On entry : 0/0
 12313 ;;		On exit  : 0/0
 12314 ;;		Unchanged: 0/0
 12315 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12316 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12317 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12318 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12319 ;;      Totals:         0      15       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12320 ;;Total ram usage:       15 bytes
 12321 ;; Hardware stack levels used:    1
 12322 ;; Hardware stack levels required when called:    4
 12323 ;; This function calls:
 12324 ;;		Nothing
 12325 ;; This function is called by:
 12326 ;;		_BMP_readTemperature
 12327 ;; This function uses a non-reentrant model
 12328 ;;
 12329                           
 12330                           
 12331                           ;psect for function ___aldiv
 12332  0D9A                     ___aldiv:	
 12333                           
 12334                           ;incstack = 0
 12335                           ; Regs used in ___aldiv: [wreg+status,2+status,0]
 12336  0D9A  0020               	movlb	0	; select bank0
 12337  0D9B  01AB               	clrf	___aldiv@sign
 12338  0D9C  1FA4               	btfss	___aldiv@divisor+3,7
 12339  0D9D  2DAB               	goto	l1353
 12340  0D9E  09A1               	comf	___aldiv@divisor,f
 12341  0D9F  09A2               	comf	___aldiv@divisor+1,f
 12342  0DA0  09A3               	comf	___aldiv@divisor+2,f
 12343  0DA1  09A4               	comf	___aldiv@divisor+3,f
 12344  0DA2  0AA1               	incf	___aldiv@divisor,f
 12345  0DA3  1903               	skipnz
 12346  0DA4  0AA2               	incf	___aldiv@divisor+1,f
 12347  0DA5  1903               	skipnz
 12348  0DA6  0AA3               	incf	___aldiv@divisor+2,f
 12349  0DA7  1903               	skipnz
 12350  0DA8  0AA4               	incf	___aldiv@divisor+3,f
 12351  0DA9  01AB               	clrf	___aldiv@sign
 12352  0DAA  0AAB               	incf	___aldiv@sign,f
 12353  0DAB                     l1353:	
 12354  0DAB  1FA8               	btfss	___aldiv@dividend+3,7
 12355  0DAC  2DBC               	goto	l5798
 12356  0DAD  09A5               	comf	___aldiv@dividend,f
 12357  0DAE  09A6               	comf	___aldiv@dividend+1,f
 12358  0DAF  09A7               	comf	___aldiv@dividend+2,f
 12359  0DB0  09A8               	comf	___aldiv@dividend+3,f
 12360  0DB1  0AA5               	incf	___aldiv@dividend,f
 12361  0DB2  1903               	skipnz
 12362  0DB3  0AA6               	incf	___aldiv@dividend+1,f
 12363  0DB4  1903               	skipnz
 12364  0DB5  0AA7               	incf	___aldiv@dividend+2,f
 12365  0DB6  1903               	skipnz
 12366  0DB7  0AA8               	incf	___aldiv@dividend+3,f
 12367  0DB8  3001               	movlw	1
 12368  0DB9  00A9               	movwf	??___aldiv
 12369  0DBA  0829               	movf	??___aldiv,w
 12370  0DBB  06AB               	xorwf	___aldiv@sign,f
 12371  0DBC                     l5798:	
 12372  0DBC  3000               	movlw	0
 12373  0DBD  00AF               	movwf	___aldiv@quotient+3
 12374  0DBE  3000               	movlw	0
 12375  0DBF  00AE               	movwf	___aldiv@quotient+2
 12376  0DC0  3000               	movlw	0
 12377  0DC1  00AD               	movwf	___aldiv@quotient+1
 12378  0DC2  3000               	movlw	0
 12379  0DC3  00AC               	movwf	___aldiv@quotient
 12380  0DC4  0824               	movf	___aldiv@divisor+3,w
 12381  0DC5  0423               	iorwf	___aldiv@divisor+2,w
 12382  0DC6  0422               	iorwf	___aldiv@divisor+1,w
 12383  0DC7  0421               	iorwf	___aldiv@divisor,w
 12384  0DC8  1903               	skipnz
 12385  0DC9  2E05               	goto	l5820
 12386  0DCA  01AA               	clrf	___aldiv@counter
 12387  0DCB  0AAA               	incf	___aldiv@counter,f
 12388  0DCC                     l5806:	
 12389  0DCC  1BA4               	btfsc	___aldiv@divisor+3,7
 12390  0DCD  2DDA               	goto	l5808
 12391  0DCE  3001               	movlw	1
 12392  0DCF                     u5215:	
 12393  0DCF  35A1               	lslf	___aldiv@divisor,f
 12394  0DD0  0DA2               	rlf	___aldiv@divisor+1,f
 12395  0DD1  0DA3               	rlf	___aldiv@divisor+2,f
 12396  0DD2  0DA4               	rlf	___aldiv@divisor+3,f
 12397  0DD3  0B89               	decfsz	9,f
 12398  0DD4  2DCF               	goto	u5215
 12399  0DD5  3001               	movlw	1
 12400  0DD6  00A9               	movwf	??___aldiv
 12401  0DD7  0829               	movf	??___aldiv,w
 12402  0DD8  07AA               	addwf	___aldiv@counter,f
 12403  0DD9  2DCC               	goto	l5806
 12404  0DDA                     l5808:	
 12405  0DDA  3001               	movlw	1
 12406  0DDB                     u5235:	
 12407  0DDB  35AC               	lslf	___aldiv@quotient,f
 12408  0DDC  0DAD               	rlf	___aldiv@quotient+1,f
 12409  0DDD  0DAE               	rlf	___aldiv@quotient+2,f
 12410  0DDE  0DAF               	rlf	___aldiv@quotient+3,f
 12411  0DDF  0B89               	decfsz	9,f
 12412  0DE0  2DDB               	goto	u5235
 12413  0DE1  0824               	movf	___aldiv@divisor+3,w
 12414  0DE2  0228               	subwf	___aldiv@dividend+3,w
 12415  0DE3  1D03               	skipz
 12416  0DE4  2DEF               	goto	u5245
 12417  0DE5  0823               	movf	___aldiv@divisor+2,w
 12418  0DE6  0227               	subwf	___aldiv@dividend+2,w
 12419  0DE7  1D03               	skipz
 12420  0DE8  2DEF               	goto	u5245
 12421  0DE9  0822               	movf	___aldiv@divisor+1,w
 12422  0DEA  0226               	subwf	___aldiv@dividend+1,w
 12423  0DEB  1D03               	skipz
 12424  0DEC  2DEF               	goto	u5245
 12425  0DED  0821               	movf	___aldiv@divisor,w
 12426  0DEE  0225               	subwf	___aldiv@dividend,w
 12427  0DEF                     u5245:	
 12428  0DEF  1C03               	skipc
 12429  0DF0  2DFA               	goto	l5816
 12430  0DF1  0821               	movf	___aldiv@divisor,w
 12431  0DF2  02A5               	subwf	___aldiv@dividend,f
 12432  0DF3  0822               	movf	___aldiv@divisor+1,w
 12433  0DF4  3BA6               	subwfb	___aldiv@dividend+1,f
 12434  0DF5  0823               	movf	___aldiv@divisor+2,w
 12435  0DF6  3BA7               	subwfb	___aldiv@dividend+2,f
 12436  0DF7  0824               	movf	___aldiv@divisor+3,w
 12437  0DF8  3BA8               	subwfb	___aldiv@dividend+3,f
 12438  0DF9  142C               	bsf	___aldiv@quotient,0
 12439  0DFA                     l5816:	
 12440  0DFA  3001               	movlw	1
 12441  0DFB                     u5255:	
 12442  0DFB  36A4               	lsrf	___aldiv@divisor+3,f
 12443  0DFC  0CA3               	rrf	___aldiv@divisor+2,f
 12444  0DFD  0CA2               	rrf	___aldiv@divisor+1,f
 12445  0DFE  0CA1               	rrf	___aldiv@divisor,f
 12446  0DFF  0B89               	decfsz	9,f
 12447  0E00  2DFB               	goto	u5255
 12448  0E01  3001               	movlw	1
 12449  0E02  02AA               	subwf	___aldiv@counter,f
 12450  0E03  1D03               	btfss	3,2
 12451  0E04  2DDA               	goto	l5808
 12452  0E05                     l5820:	
 12453  0E05  082B               	movf	___aldiv@sign,w
 12454  0E06  1903               	btfsc	3,2
 12455  0E07  2E13               	goto	l5824
 12456  0E08  09AC               	comf	___aldiv@quotient,f
 12457  0E09  09AD               	comf	___aldiv@quotient+1,f
 12458  0E0A  09AE               	comf	___aldiv@quotient+2,f
 12459  0E0B  09AF               	comf	___aldiv@quotient+3,f
 12460  0E0C  0AAC               	incf	___aldiv@quotient,f
 12461  0E0D  1903               	skipnz
 12462  0E0E  0AAD               	incf	___aldiv@quotient+1,f
 12463  0E0F  1903               	skipnz
 12464  0E10  0AAE               	incf	___aldiv@quotient+2,f
 12465  0E11  1903               	skipnz
 12466  0E12  0AAF               	incf	___aldiv@quotient+3,f
 12467  0E13                     l5824:	
 12468  0E13  082F               	movf	___aldiv@quotient+3,w
 12469  0E14  00A4               	movwf	?___aldiv+3
 12470  0E15  082E               	movf	___aldiv@quotient+2,w
 12471  0E16  00A3               	movwf	?___aldiv+2
 12472  0E17  082D               	movf	___aldiv@quotient+1,w
 12473  0E18  00A2               	movwf	?___aldiv+1
 12474  0E19  082C               	movf	___aldiv@quotient,w
 12475  0E1A  00A1               	movwf	?___aldiv
 12476  0E1B  0008               	return
 12477  0E1C                     __end_of___aldiv:	
 12478                           
 12479                           	psect	text66
 12480  0A4A                     __ptext66:	
 12481 ;; *************** function _HMC5883L_ReadBits *****************
 12482 ;; Defined at:
 12483 ;;		line 418 in file "hmc5883l.c"
 12484 ;; Parameters:    Size  Location     Type
 12485 ;;  slaveAddr       1    wreg     unsigned char 
 12486 ;;  regAddr         1   35[BANK0 ] unsigned char 
 12487 ;;  bitStart        1   36[BANK0 ] unsigned char 
 12488 ;;  length          1   37[BANK0 ] unsigned char 
 12489 ;;  data            1   38[BANK0 ] PTR unsigned char 
 12490 ;;		 -> BMP_readTemperature@tmp(1), HMC5883L_GetHeading@tmp(1), HMC5883L_GetMode@tmp(1), HMC5883L_GetGain@tmp(1), 
 12491 ;;		 -> HMC5883L_GetMeasurementBias@tmp(1), HMC5883L_GetDataRate@tmp(1), HMC5883L_GetSampleAveraging@tmp(1), 
 12492 ;; Auto vars:     Size  Location     Type
 12493 ;;  slaveAddr       1   42[BANK0 ] unsigned char 
 12494 ;;  mask            1   43[BANK0 ] unsigned char 
 12495 ;;  tmp             1   44[BANK0 ] unsigned char 
 12496 ;; Return value:  Size  Location     Type
 12497 ;;                  1    wreg      unsigned char 
 12498 ;; Registers used:
 12499 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12500 ;; Tracked objects:
 12501 ;;		On entry : 0/0
 12502 ;;		On exit  : 0/0
 12503 ;;		Unchanged: 0/0
 12504 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12505 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12506 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12507 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12508 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12509 ;;Total ram usage:       10 bytes
 12510 ;; Hardware stack levels used:    1
 12511 ;; Hardware stack levels required when called:    8
 12512 ;; This function calls:
 12513 ;;		_HMC5883L_I2C_BufferRead
 12514 ;; This function is called by:
 12515 ;;		_BMP_readTemperature
 12516 ;;		_HMC5883L_GetSampleAveraging
 12517 ;;		_HMC5883L_GetDataRate
 12518 ;;		_HMC5883L_GetMeasurementBias
 12519 ;;		_HMC5883L_GetGain
 12520 ;;		_HMC5883L_GetMode
 12521 ;;		_HMC5883L_GetHeading
 12522 ;; This function uses a non-reentrant model
 12523 ;;
 12524                           
 12525                           
 12526                           ;psect for function _HMC5883L_ReadBits
 12527  0A4A                     _HMC5883L_ReadBits:	
 12528                           
 12529                           ;incstack = 0
 12530                           ; Regs used in _HMC5883L_ReadBits: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 12531                           ;HMC5883L_ReadBits@slaveAddr stored from wreg
 12532  0A4A  0020               	movlb	0	; select bank0
 12533  0A4B  00CA               	movwf	HMC5883L_ReadBits@slaveAddr
 12534                           
 12535                           ;hmc5883l.c: 420: uint8_t tmp;
 12536                           ;hmc5883l.c: 422: if(HMC5883L_I2C_BufferRead(slaveAddr, &tmp, regAddr, 1))
 12537  0A4C  304C               	movlw	low HMC5883L_ReadBits@tmp
 12538  0A4D  00BC               	movwf	HMC5883L_I2C_BufferRead@pBuffer
 12539  0A4E  3000               	movlw	high HMC5883L_ReadBits@tmp
 12540  0A4F  00BD               	movwf	HMC5883L_I2C_BufferRead@pBuffer+1
 12541  0A50  0843               	movf	HMC5883L_ReadBits@regAddr,w
 12542  0A51  00C7               	movwf	??_HMC5883L_ReadBits
 12543  0A52  0847               	movf	??_HMC5883L_ReadBits,w
 12544  0A53  00BE               	movwf	HMC5883L_I2C_BufferRead@ReadAddr
 12545  0A54  3001               	movlw	1
 12546  0A55  00BF               	movwf	HMC5883L_I2C_BufferRead@NumByteToRead
 12547  0A56  3000               	movlw	0
 12548  0A57  00C0               	movwf	HMC5883L_I2C_BufferRead@NumByteToRead+1
 12549  0A58  084A               	movf	HMC5883L_ReadBits@slaveAddr,w
 12550  0A59  3195  25EA  318A   	fcall	_HMC5883L_I2C_BufferRead
 12551  0A5C  3A00               	xorlw	0
 12552  0A5D  1903               	skipnz
 12553  0A5E  2A8E               	goto	l5708
 12554                           
 12555                           ;hmc5883l.c: 423: {
 12556                           ;hmc5883l.c: 424: uint8_t mask = ((1 << length) - 1) << (bitStart - length + 1);
 12557  0A5F  3001               	movlw	1
 12558  0A60  0020               	movlb	0	; select bank0
 12559  0A61  00C7               	movwf	??_HMC5883L_ReadBits
 12560  0A62  0A45               	incf	HMC5883L_ReadBits@length,w
 12561  0A63  2A65               	goto	u5054
 12562  0A64                     u5055:	
 12563  0A64  35C7               	lslf	??_HMC5883L_ReadBits,f
 12564  0A65                     u5054:	
 12565  0A65  0B89               	decfsz	9,f
 12566  0A66  2A64               	goto	u5055
 12567  0A67  0847               	movf	??_HMC5883L_ReadBits,w
 12568  0A68  3EFF               	addlw	255
 12569  0A69  00C8               	movwf	??_HMC5883L_ReadBits+1
 12570  0A6A  0345               	decf	HMC5883L_ReadBits@length,w
 12571  0A6B  3AFF               	xorlw	255
 12572  0A6C  0744               	addwf	HMC5883L_ReadBits@bitStart,w
 12573  0A6D  3E01               	addlw	1
 12574  0A6E  0A89               	incf	9,f
 12575  0A6F  2A71               	goto	u5064
 12576  0A70                     u5065:	
 12577  0A70  35C8               	lslf	??_HMC5883L_ReadBits+1,f
 12578  0A71                     u5064:	
 12579  0A71  0B89               	decfsz	9,f
 12580  0A72  2A70               	goto	u5065
 12581  0A73  0848               	movf	??_HMC5883L_ReadBits+1,w
 12582  0A74  00C9               	movwf	??_HMC5883L_ReadBits+2
 12583  0A75  0849               	movf	??_HMC5883L_ReadBits+2,w
 12584  0A76  00CB               	movwf	HMC5883L_ReadBits@mask
 12585                           
 12586                           ;hmc5883l.c: 425: tmp &= mask;
 12587  0A77  084B               	movf	HMC5883L_ReadBits@mask,w
 12588  0A78  00C7               	movwf	??_HMC5883L_ReadBits
 12589  0A79  0847               	movf	??_HMC5883L_ReadBits,w
 12590  0A7A  05CC               	andwf	HMC5883L_ReadBits@tmp,f
 12591                           
 12592                           ;hmc5883l.c: 426: tmp >>= (bitStart - length + 1);
 12593  0A7B  0345               	decf	HMC5883L_ReadBits@length,w
 12594  0A7C  3AFF               	xorlw	255
 12595  0A7D  0744               	addwf	HMC5883L_ReadBits@bitStart,w
 12596  0A7E  3E01               	addlw	1
 12597  0A7F  0A89               	incf	9,f
 12598  0A80  2A83               	goto	u5070
 12599  0A81                     u5075:	
 12600  0A81  1003               	clrc
 12601  0A82  0CCC               	rrf	HMC5883L_ReadBits@tmp,f
 12602  0A83                     u5070:	
 12603  0A83  3EFF               	addlw	-1
 12604  0A84  1D03               	skipz
 12605  0A85  2A81               	goto	u5075
 12606                           
 12607                           ;hmc5883l.c: 427: *data = tmp;
 12608  0A86  084C               	movf	HMC5883L_ReadBits@tmp,w
 12609  0A87  00C7               	movwf	??_HMC5883L_ReadBits
 12610  0A88  0846               	movf	HMC5883L_ReadBits@data,w
 12611  0A89  0086               	movwf	6
 12612  0A8A  0187               	clrf	7
 12613  0A8B  0847               	movf	??_HMC5883L_ReadBits,w
 12614  0A8C  0081               	movwf	1
 12615                           
 12616                           ;hmc5883l.c: 428: }
 12617  0A8D  0008               	return
 12618  0A8E                     l5708:	
 12619                           
 12620                           ;hmc5883l.c: 429: else return 0;
 12621  0A8E  3000               	movlw	0
 12622  0A8F  0008               	return
 12623  0A90                     __end_of_HMC5883L_ReadBits:	
 12624                           
 12625                           	psect	text67
 12626  15EA                     __ptext67:	
 12627 ;; *************** function _HMC5883L_I2C_BufferRead *****************
 12628 ;; Defined at:
 12629 ;;		line 471 in file "hmc5883l.c"
 12630 ;; Parameters:    Size  Location     Type
 12631 ;;  slaveAddr       1    wreg     unsigned char 
 12632 ;;  pBuffer         2   28[BANK0 ] PTR unsigned char 
 12633 ;;		 -> HMC5883L_ReadBit@tmp(1), HMC5883L_ReadBits@tmp(1), HMC5883L_WriteBit@tmp(1), HMC5883L_WriteBits@tmp(1), 
 12634 ;;		 -> heading(8), HMC5883L_TestConnection@tmp(3), MPU6050_ReadBit@tmp(1), MPU6050_ReadBits@tmp(1), 
 12635 ;;		 -> MPU6050_WriteBit@tmp(1), MPU6050_WriteBits@tmp(1), MPU6050_GetRawAccel@tempBuffer(6), MPU6050_GetRawAccelGyro@tm
      +pBuffer(14), 
 12636 ;;  ReadAddr        1   30[BANK0 ] unsigned char 
 12637 ;;  NumByteToRea    2   31[BANK0 ] unsigned short 
 12638 ;; Auto vars:     Size  Location     Type
 12639 ;;  slaveAddr       1   34[BANK0 ] unsigned char 
 12640 ;; Return value:  Size  Location     Type
 12641 ;;                  1    wreg      unsigned char 
 12642 ;; Registers used:
 12643 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12644 ;; Tracked objects:
 12645 ;;		On entry : 0/0
 12646 ;;		On exit  : 0/0
 12647 ;;		Unchanged: 0/0
 12648 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12649 ;;      Params:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12650 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12651 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12652 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12653 ;;Total ram usage:        7 bytes
 12654 ;; Hardware stack levels used:    1
 12655 ;; Hardware stack levels required when called:    7
 12656 ;; This function calls:
 12657 ;;		_I2C_BufferRead
 12658 ;; This function is called by:
 12659 ;;		_HMC5883L_ReadBits
 12660 ;;		_MPU6050_I2C_BufferRead
 12661 ;;		_HMC5883L_TestConnection
 12662 ;;		_HMC5883L_GetHeading
 12663 ;;		_HMC5883L_WriteBits
 12664 ;;		_HMC5883L_WriteBit
 12665 ;;		_HMC5883L_ReadBit
 12666 ;; This function uses a non-reentrant model
 12667 ;;
 12668                           
 12669                           
 12670                           ;psect for function _HMC5883L_I2C_BufferRead
 12671  15EA                     _HMC5883L_I2C_BufferRead:	
 12672                           
 12673                           ;incstack = 0
 12674                           ; Regs used in _HMC5883L_I2C_BufferRead: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+csta
      +                          ck]
 12675                           ;HMC5883L_I2C_BufferRead@slaveAddr stored from wreg
 12676  15EA  0020               	movlb	0	; select bank0
 12677  15EB  00C2               	movwf	HMC5883L_I2C_BufferRead@slaveAddr
 12678                           
 12679                           ;hmc5883l.c: 473: return(I2C_BufferRead(slaveAddr,pBuffer,ReadAddr,NumByteToRead));
 12680  15EC  083D               	movf	HMC5883L_I2C_BufferRead@pBuffer+1,w
 12681  15ED  00B2               	movwf	I2C_BufferRead@pBuffer+1
 12682  15EE  083C               	movf	HMC5883L_I2C_BufferRead@pBuffer,w
 12683  15EF  00B1               	movwf	I2C_BufferRead@pBuffer
 12684  15F0  083E               	movf	HMC5883L_I2C_BufferRead@ReadAddr,w
 12685  15F1  00C1               	movwf	??_HMC5883L_I2C_BufferRead
 12686  15F2  0841               	movf	??_HMC5883L_I2C_BufferRead,w
 12687  15F3  00B3               	movwf	I2C_BufferRead@ReadAddr
 12688  15F4  0840               	movf	HMC5883L_I2C_BufferRead@NumByteToRead+1,w
 12689  15F5  00B5               	movwf	I2C_BufferRead@NumByteToRead+1
 12690  15F6  083F               	movf	HMC5883L_I2C_BufferRead@NumByteToRead,w
 12691  15F7  00B4               	movwf	I2C_BufferRead@NumByteToRead
 12692  15F8  0842               	movf	HMC5883L_I2C_BufferRead@slaveAddr,w
 12693  15F9  3187  27A0         	fcall	_I2C_BufferRead
 12694  15FB  0008               	return
 12695  15FC                     __end_of_HMC5883L_I2C_BufferRead:	
 12696                           
 12697                           	psect	text68
 12698  14C2                     __ptext68:	
 12699 ;; *************** function _Diag_getTempSensorHealth *****************
 12700 ;; Defined at:
 12701 ;;		line 25 in file "diagnostics.c"
 12702 ;; Parameters:    Size  Location     Type
 12703 ;;		None
 12704 ;; Auto vars:     Size  Location     Type
 12705 ;;		None
 12706 ;; Return value:  Size  Location     Type
 12707 ;;                  1    wreg      unsigned char 
 12708 ;; Registers used:
 12709 ;;		wreg
 12710 ;; Tracked objects:
 12711 ;;		On entry : 0/0
 12712 ;;		On exit  : 0/0
 12713 ;;		Unchanged: 0/0
 12714 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12715 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12716 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12717 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12718 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12719 ;;Total ram usage:        0 bytes
 12720 ;; Hardware stack levels used:    1
 12721 ;; Hardware stack levels required when called:    4
 12722 ;; This function calls:
 12723 ;;		Nothing
 12724 ;; This function is called by:
 12725 ;;		_BMP_readTemperature
 12726 ;; This function uses a non-reentrant model
 12727 ;;
 12728                           
 12729                           
 12730                           ;psect for function _Diag_getTempSensorHealth
 12731  14C2                     _Diag_getTempSensorHealth:	
 12732                           
 12733                           ;diagnostics.c: 27: return (sensorHealth.tempSensorHealth);
 12734                           
 12735                           ;incstack = 0
 12736                           ; Regs used in _Diag_getTempSensorHealth: [wreg]
 12737  14C2  0021               	movlb	1	; select bank1
 12738  14C3  0867               	movf	_sensorHealth^(0+128),w
 12739  14C4  0008               	return
 12740  14C5                     __end_of_Diag_getTempSensorHealth:	
 12741                           
 12742                           	psect	text69
 12743  0C31                     __ptext69:	
 12744 ;; *************** function _BMP_init *****************
 12745 ;; Defined at:
 12746 ;;		line 39 in file "bmp280.c"
 12747 ;; Parameters:    Size  Location     Type
 12748 ;;		None
 12749 ;; Auto vars:     Size  Location     Type
 12750 ;;  t               1   31[BANK0 ] unsigned char 
 12751 ;; Return value:  Size  Location     Type
 12752 ;;                  1    wreg      void 
 12753 ;; Registers used:
 12754 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12755 ;; Tracked objects:
 12756 ;;		On entry : 0/0
 12757 ;;		On exit  : 0/0
 12758 ;;		Unchanged: 0/0
 12759 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12760 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12761 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12762 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12763 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12764 ;;Total ram usage:        4 bytes
 12765 ;; Hardware stack levels used:    1
 12766 ;; Hardware stack levels required when called:    7
 12767 ;; This function calls:
 12768 ;;		_Diag_setTempSensorHealth
 12769 ;;		_I2C_BufferRead
 12770 ;;		_I2C_ByteWrite
 12771 ;; This function is called by:
 12772 ;;		_main
 12773 ;;		_BMP_readTemperature
 12774 ;; This function uses a non-reentrant model
 12775 ;;
 12776                           
 12777                           
 12778                           ;psect for function _BMP_init
 12779  0C31                     _BMP_init:	
 12780                           
 12781                           ;bmp280.c: 41: char t;
 12782                           ;bmp280.c: 42: t=0x40;
 12783                           
 12784                           ;incstack = 0
 12785                           ; Regs used in _BMP_init: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 12786  0C31  3040               	movlw	64
 12787  0C32  0020               	movlb	0	; select bank0
 12788  0C33  00BC               	movwf	??_BMP_init
 12789  0C34  083C               	movf	??_BMP_init,w
 12790  0C35  00BF               	movwf	BMP_init@t
 12791                           
 12792                           ;bmp280.c: 43: if(I2C_ByteWrite(0x76, &t, 0xF4)==0)
 12793  0C36  303F               	movlw	(low (BMP_init@t| 0))& (0+255)
 12794  0C37  00BC               	movwf	??_BMP_init
 12795  0C38  083C               	movf	??_BMP_init,w
 12796  0C39  00AF               	movwf	I2C_ByteWrite@pBuffer
 12797  0C3A  30F4               	movlw	244
 12798  0C3B  00BD               	movwf	??_BMP_init+1
 12799  0C3C  083D               	movf	??_BMP_init+1,w
 12800  0C3D  00B0               	movwf	I2C_ByteWrite@WriteAddr
 12801  0C3E  3076               	movlw	118
 12802  0C3F  3189  218C  318C   	fcall	_I2C_ByteWrite
 12803  0C42  3A00               	xorlw	0
 12804  0C43  1D03               	skipz
 12805  0C44  2C49               	goto	l5674
 12806                           
 12807                           ;bmp280.c: 44: {
 12808                           ;bmp280.c: 45: Diag_setTempSensorHealth(0);
 12809  0C45  3000               	movlw	0
 12810  0C46  3195  2519         	fcall	_Diag_setTempSensorHealth
 12811                           
 12812                           ;bmp280.c: 46: return;
 12813  0C48  0008               	return
 12814  0C49                     l5674:	
 12815                           
 12816                           ;bmp280.c: 47: }
 12817                           ;bmp280.c: 48: t=0xE0;
 12818  0C49  30E0               	movlw	224
 12819  0C4A  0020               	movlb	0	; select bank0
 12820  0C4B  00BC               	movwf	??_BMP_init
 12821  0C4C  083C               	movf	??_BMP_init,w
 12822  0C4D  00BF               	movwf	BMP_init@t
 12823                           
 12824                           ;bmp280.c: 50: if(I2C_BufferRead(0x76, b1, 0x88, 24)==0)
 12825  0C4E  30A0               	movlw	low _b1
 12826  0C4F  00B1               	movwf	I2C_BufferRead@pBuffer
 12827  0C50  3001               	movlw	high _b1
 12828  0C51  00B2               	movwf	I2C_BufferRead@pBuffer+1
 12829  0C52  3088               	movlw	136
 12830  0C53  00BC               	movwf	??_BMP_init
 12831  0C54  083C               	movf	??_BMP_init,w
 12832  0C55  00B3               	movwf	I2C_BufferRead@ReadAddr
 12833  0C56  3018               	movlw	24
 12834  0C57  00B4               	movwf	I2C_BufferRead@NumByteToRead
 12835  0C58  3000               	movlw	0
 12836  0C59  00B5               	movwf	I2C_BufferRead@NumByteToRead+1
 12837  0C5A  3076               	movlw	118
 12838  0C5B  3187  27A0  318C   	fcall	_I2C_BufferRead
 12839  0C5E  3A00               	xorlw	0
 12840  0C5F  1D03               	skipz
 12841  0C60  2C65               	goto	l5682
 12842                           
 12843                           ;bmp280.c: 51: {
 12844                           ;bmp280.c: 52: Diag_setTempSensorHealth(0);
 12845  0C61  3000               	movlw	0
 12846  0C62  3195  2519         	fcall	_Diag_setTempSensorHealth
 12847                           
 12848                           ;bmp280.c: 53: return;
 12849  0C64  0008               	return
 12850  0C65                     l5682:	
 12851                           
 12852                           ;bmp280.c: 54: }
 12853                           ;bmp280.c: 55: dig_T1 = ((u16)b1[0] & 0xFF) + (((u16)b1[1] & 0xFF) * 256);
 12854  0C65  0023               	movlb	3	; select bank3
 12855  0C66  0821               	movf	(_b1^(0+384)+1),w
 12856  0C67  0020               	movlb	0	; select bank0
 12857  0C68  00BC               	movwf	??_BMP_init
 12858  0C69  01BD               	clrf	??_BMP_init+1
 12859  0C6A  083C               	movf	??_BMP_init,w
 12860  0C6B  00BD               	movwf	??_BMP_init+1
 12861  0C6C  01BC               	clrf	??_BMP_init
 12862  0C6D  0023               	movlb	3	; select bank3
 12863  0C6E  0820               	movf	_b1^(0+384),w
 12864  0C6F  0020               	movlb	0	; select bank0
 12865  0C70  073C               	addwf	??_BMP_init,w
 12866  0C71  0021               	movlb	1	; select bank1
 12867  0C72  00D7               	movwf	_dig_T1^(0+128)
 12868  0C73  0020               	movlb	0	; select bank0
 12869  0C74  083D               	movf	??_BMP_init+1,w
 12870  0C75  1803               	skipnc
 12871  0C76  0A3D               	incf	??_BMP_init+1,w
 12872  0C77  0021               	movlb	1	; select bank1
 12873  0C78  00D8               	movwf	(_dig_T1^(0+128)+1)
 12874                           
 12875                           ;bmp280.c: 56: dig_T2 = (int)b1[2] + ((int)b1[3] * 256);
 12876  0C79  0023               	movlb	3	; select bank3
 12877  0C7A  0823               	movf	(_b1^(0+384)+3),w
 12878  0C7B  0020               	movlb	0	; select bank0
 12879  0C7C  00BC               	movwf	??_BMP_init
 12880  0C7D  01BD               	clrf	??_BMP_init+1
 12881  0C7E  083C               	movf	??_BMP_init,w
 12882  0C7F  00BD               	movwf	??_BMP_init+1
 12883  0C80  01BC               	clrf	??_BMP_init
 12884  0C81  0023               	movlb	3	; select bank3
 12885  0C82  0822               	movf	(_b1^(0+384)+2),w
 12886  0C83  0020               	movlb	0	; select bank0
 12887  0C84  073C               	addwf	??_BMP_init,w
 12888  0C85  0022               	movlb	2	; select bank2
 12889  0C86  00D3               	movwf	_dig_T2^(0+256)
 12890  0C87  0020               	movlb	0	; select bank0
 12891  0C88  083D               	movf	??_BMP_init+1,w
 12892  0C89  1803               	skipnc
 12893  0C8A  0A3D               	incf	??_BMP_init+1,w
 12894  0C8B  0022               	movlb	2	; select bank2
 12895  0C8C  00D4               	movwf	(_dig_T2^(0+256)+1)
 12896                           
 12897                           ;bmp280.c: 57: dig_T3 = (int)b1[4] + ((int)b1[5] * 256);
 12898  0C8D  0023               	movlb	3	; select bank3
 12899  0C8E  0825               	movf	(_b1^(0+384)+5),w
 12900  0C8F  0020               	movlb	0	; select bank0
 12901  0C90  00BC               	movwf	??_BMP_init
 12902  0C91  01BD               	clrf	??_BMP_init+1
 12903  0C92  083C               	movf	??_BMP_init,w
 12904  0C93  00BD               	movwf	??_BMP_init+1
 12905  0C94  01BC               	clrf	??_BMP_init
 12906  0C95  0023               	movlb	3	; select bank3
 12907  0C96  0824               	movf	(_b1^(0+384)+4),w
 12908  0C97  0020               	movlb	0	; select bank0
 12909  0C98  073C               	addwf	??_BMP_init,w
 12910  0C99  0022               	movlb	2	; select bank2
 12911  0C9A  00D1               	movwf	_dig_T3^(0+256)
 12912  0C9B  0020               	movlb	0	; select bank0
 12913  0C9C  083D               	movf	??_BMP_init+1,w
 12914  0C9D  1803               	skipnc
 12915  0C9E  0A3D               	incf	??_BMP_init+1,w
 12916  0C9F  0022               	movlb	2	; select bank2
 12917  0CA0  00D2               	movwf	(_dig_T3^(0+256)+1)
 12918                           
 12919                           ;bmp280.c: 69: Diag_setTempSensorHealth(1);
 12920  0CA1  3001               	movlw	1
 12921  0CA2  3195  2519         	fcall	_Diag_setTempSensorHealth
 12922  0CA4  0008               	return
 12923  0CA5                     __end_of_BMP_init:	
 12924                           
 12925                           	psect	text70
 12926  098C                     __ptext70:	
 12927 ;; *************** function _I2C_ByteWrite *****************
 12928 ;; Defined at:
 12929 ;;		line 3 in file "i2c_wrapper.c"
 12930 ;; Parameters:    Size  Location     Type
 12931 ;;  slaveAddr       1    wreg     unsigned char 
 12932 ;;  pBuffer         1   15[BANK0 ] PTR unsigned char 
 12933 ;;		 -> BMP_readTemperature@tmp(1), BMP_init@t(1), HMC5883L_WriteBit@tmp(1), HMC5883L_WriteBits@tmp(1), 
 12934 ;;		 -> HMC5883L_SetMode@tmp(1), HMC5883L_SetGain@tmp(1), HMC5883L_Initialize@tmp(1), MPU6050_WriteBit@tmp(1), 
 12935 ;;		 -> MPU6050_WriteBits@tmp(1), 
 12936 ;;  WriteAddr       1   16[BANK0 ] unsigned char 
 12937 ;; Auto vars:     Size  Location     Type
 12938 ;;  slaveAddr       1   21[BANK0 ] unsigned char 
 12939 ;;  data            2   22[BANK0 ] unsigned char [2]
 12940 ;;  status          1   24[BANK0 ] enum E3025
 12941 ;; Return value:  Size  Location     Type
 12942 ;;                  1    wreg      unsigned char 
 12943 ;; Registers used:
 12944 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12945 ;; Tracked objects:
 12946 ;;		On entry : 0/0
 12947 ;;		On exit  : 0/0
 12948 ;;		Unchanged: 0/0
 12949 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12950 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12951 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12952 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12953 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12954 ;;Total ram usage:       10 bytes
 12955 ;; Hardware stack levels used:    1
 12956 ;; Hardware stack levels required when called:    6
 12957 ;; This function calls:
 12958 ;;		_I2C2_MasterWrite
 12959 ;;		_Timeout_hasExpired
 12960 ;;		_Timeout_setTimeout
 12961 ;; This function is called by:
 12962 ;;		_BMP_init
 12963 ;;		_BMP_readTemperature
 12964 ;;		_HMC5883L_I2C_ByteWrite
 12965 ;; This function uses a non-reentrant model
 12966 ;;
 12967                           
 12968                           
 12969                           ;psect for function _I2C_ByteWrite
 12970  098C                     _I2C_ByteWrite:	
 12971                           
 12972                           ;incstack = 0
 12973                           ; Regs used in _I2C_ByteWrite: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 12974                           ;I2C_ByteWrite@slaveAddr stored from wreg
 12975  098C  0020               	movlb	0	; select bank0
 12976  098D  00B5               	movwf	I2C_ByteWrite@slaveAddr
 12977                           
 12978                           ;i2c_wrapper.c: 5: u8 data[2];
 12979                           ;i2c_wrapper.c: 6: I2C2_MESSAGE_STATUS status=I2C2_MESSAGE_COMPLETE;
 12980  098E  01B8               	clrf	I2C_ByteWrite@status
 12981                           
 12982                           ;i2c_wrapper.c: 8: data[0]= WriteAddr;
 12983  098F  0830               	movf	I2C_ByteWrite@WriteAddr,w
 12984  0990  00B1               	movwf	??_I2C_ByteWrite
 12985  0991  0831               	movf	??_I2C_ByteWrite,w
 12986  0992  00B6               	movwf	I2C_ByteWrite@data
 12987                           
 12988                           ;i2c_wrapper.c: 9: data[1]= *pBuffer;
 12989  0993  082F               	movf	I2C_ByteWrite@pBuffer,w
 12990  0994  0086               	movwf	6
 12991  0995  0187               	clrf	7
 12992  0996  0801               	movf	1,w
 12993  0997  00B1               	movwf	??_I2C_ByteWrite
 12994  0998  0831               	movf	??_I2C_ByteWrite,w
 12995  0999  00B7               	movwf	I2C_ByteWrite@data+1
 12996                           
 12997                           ;i2c_wrapper.c: 12: I2C2_MasterWrite(data,2,slaveAddr, &status);
 12998  099A  3002               	movlw	2
 12999  099B  00B1               	movwf	??_I2C_ByteWrite
 13000  099C  0831               	movf	??_I2C_ByteWrite,w
 13001  099D  00A8               	movwf	I2C2_MasterWrite@length
 13002  099E  0835               	movf	I2C_ByteWrite@slaveAddr,w
 13003  099F  00B2               	movwf	??_I2C_ByteWrite+1
 13004  09A0  01B3               	clrf	??_I2C_ByteWrite+2
 13005  09A1  0832               	movf	??_I2C_ByteWrite+1,w
 13006  09A2  00A9               	movwf	I2C2_MasterWrite@address
 13007  09A3  0833               	movf	??_I2C_ByteWrite+2,w
 13008  09A4  00AA               	movwf	I2C2_MasterWrite@address+1
 13009  09A5  3038               	movlw	(low (I2C_ByteWrite@status| 0))& (0+255)
 13010  09A6  00B4               	movwf	??_I2C_ByteWrite+3
 13011  09A7  0834               	movf	??_I2C_ByteWrite+3,w
 13012  09A8  00AB               	movwf	I2C2_MasterWrite@pflag
 13013  09A9  3036               	movlw	(low (I2C_ByteWrite@data| 0))& (0+255)
 13014  09AA  3188  20DB  3189   	fcall	_I2C2_MasterWrite
 13015                           
 13016                           ;i2c_wrapper.c: 13: Timeout_setTimeout(200);
 13017  09AD  30C8               	movlw	200
 13018  09AE  0020               	movlb	0	; select bank0
 13019  09AF  00A1               	movwf	Timeout_setTimeout@val
 13020  09B0  3000               	movlw	0
 13021  09B1  00A2               	movwf	Timeout_setTimeout@val+1
 13022  09B2  3196  26B6  3189   	fcall	_Timeout_setTimeout
 13023  09B5                     l5426:	
 13024                           ;i2c_wrapper.c: 15: while(status == I2C2_MESSAGE_PENDING && Timeout_hasExpired()==0);
 13025                           
 13026  09B5  3002               	movlw	2
 13027  09B6  0020               	movlb	0	; select bank0
 13028  09B7  0638               	xorwf	I2C_ByteWrite@status,w
 13029  09B8  1D03               	btfss	3,2
 13030  09B9  29C0               	goto	l5430
 13031  09BA  318A  22DA  3189   	fcall	_Timeout_hasExpired
 13032  09BD  3A00               	xorlw	0
 13033  09BE  1903               	skipnz
 13034  09BF  29B5               	goto	l5426
 13035  09C0                     l5430:	
 13036                           
 13037                           ;i2c_wrapper.c: 17: if (status == I2C2_MESSAGE_COMPLETE)
 13038  09C0  0020               	movlb	0	; select bank0
 13039  09C1  0838               	movf	I2C_ByteWrite@status,w
 13040  09C2  1D03               	btfss	3,2
 13041  09C3  29C6               	goto	l5438
 13042                           
 13043                           ;i2c_wrapper.c: 18: {
 13044                           ;i2c_wrapper.c: 19: return 1;
 13045  09C4  3001               	movlw	1
 13046                           
 13047                           ;i2c_wrapper.c: 20: }
 13048  09C5  0008               	return
 13049  09C6                     l5438:	
 13050                           
 13051                           ;i2c_wrapper.c: 21: else
 13052                           ;i2c_wrapper.c: 22: {
 13053                           ;i2c_wrapper.c: 23: return 0;
 13054  09C6  3000               	movlw	0
 13055  09C7  0008               	return
 13056  09C8                     __end_of_I2C_ByteWrite:	
 13057                           
 13058                           	psect	text71
 13059  07A0                     __ptext71:	
 13060 ;; *************** function _I2C_BufferRead *****************
 13061 ;; Defined at:
 13062 ;;		line 30 in file "i2c_wrapper.c"
 13063 ;; Parameters:    Size  Location     Type
 13064 ;;  slaveAddr       1    wreg     unsigned char 
 13065 ;;  pBuffer         2   17[BANK0 ] PTR unsigned char 
 13066 ;;		 -> data(8), b1(24), HMC5883L_ReadBit@tmp(1), HMC5883L_ReadBits@tmp(1), 
 13067 ;;		 -> HMC5883L_WriteBit@tmp(1), HMC5883L_WriteBits@tmp(1), heading(8), HMC5883L_TestConnection@tmp(3), 
 13068 ;;		 -> MPU6050_ReadBit@tmp(1), MPU6050_ReadBits@tmp(1), MPU6050_WriteBit@tmp(1), MPU6050_WriteBits@tmp(1), 
 13069 ;;		 -> MPU6050_GetRawAccel@tempBuffer(6), MPU6050_GetRawAccelGyro@tmpBuffer(14), 
 13070 ;;  ReadAddr        1   19[BANK0 ] unsigned char 
 13071 ;;  NumByteToRea    2   20[BANK0 ] unsigned short 
 13072 ;; Auto vars:     Size  Location     Type
 13073 ;;  slaveAddr       1   26[BANK0 ] unsigned char 
 13074 ;;  status          1   27[BANK0 ] enum E3025
 13075 ;; Return value:  Size  Location     Type
 13076 ;;                  1    wreg      unsigned char 
 13077 ;; Registers used:
 13078 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13079 ;; Tracked objects:
 13080 ;;		On entry : 0/0
 13081 ;;		On exit  : 0/0
 13082 ;;		Unchanged: 0/0
 13083 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13084 ;;      Params:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13085 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13086 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13087 ;;      Totals:         0      11       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13088 ;;Total ram usage:       11 bytes
 13089 ;; Hardware stack levels used:    1
 13090 ;; Hardware stack levels required when called:    6
 13091 ;; This function calls:
 13092 ;;		_I2C2_MasterRead
 13093 ;;		_I2C2_MasterWrite
 13094 ;;		_Timeout_hasExpired
 13095 ;;		_Timeout_setTimeout
 13096 ;; This function is called by:
 13097 ;;		_HMC5883L_I2C_BufferRead
 13098 ;;		_BMP_init
 13099 ;;		_BMP_readTemperature
 13100 ;; This function uses a non-reentrant model
 13101 ;;
 13102                           
 13103                           
 13104                           ;psect for function _I2C_BufferRead
 13105  07A0                     _I2C_BufferRead:	
 13106                           
 13107                           ;incstack = 0
 13108                           ; Regs used in _I2C_BufferRead: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 13109                           ;I2C_BufferRead@slaveAddr stored from wreg
 13110  07A0  0020               	movlb	0	; select bank0
 13111  07A1  00BA               	movwf	I2C_BufferRead@slaveAddr
 13112                           
 13113                           ;i2c_wrapper.c: 32: I2C2_MESSAGE_STATUS status=I2C2_MESSAGE_COMPLETE;
 13114  07A2  01BB               	clrf	I2C_BufferRead@status
 13115                           
 13116                           ;i2c_wrapper.c: 34: I2C2_MasterWrite(&ReadAddr, 1,slaveAddr, &status);
 13117  07A3  01A8               	clrf	I2C2_MasterWrite@length
 13118  07A4  0AA8               	incf	I2C2_MasterWrite@length,f
 13119  07A5  083A               	movf	I2C_BufferRead@slaveAddr,w
 13120  07A6  00B6               	movwf	??_I2C_BufferRead
 13121  07A7  01B7               	clrf	??_I2C_BufferRead+1
 13122  07A8  0836               	movf	??_I2C_BufferRead,w
 13123  07A9  00A9               	movwf	I2C2_MasterWrite@address
 13124  07AA  0837               	movf	??_I2C_BufferRead+1,w
 13125  07AB  00AA               	movwf	I2C2_MasterWrite@address+1
 13126  07AC  303B               	movlw	(low (I2C_BufferRead@status| 0))& (0+255)
 13127  07AD  00B8               	movwf	??_I2C_BufferRead+2
 13128  07AE  0838               	movf	??_I2C_BufferRead+2,w
 13129  07AF  00AB               	movwf	I2C2_MasterWrite@pflag
 13130  07B0  3033               	movlw	(low (I2C_BufferRead@ReadAddr| 0))& (0+255)
 13131  07B1  3188  20DB  3187   	fcall	_I2C2_MasterWrite
 13132                           
 13133                           ;i2c_wrapper.c: 35: Timeout_setTimeout(200);
 13134  07B4  30C8               	movlw	200
 13135  07B5  0020               	movlb	0	; select bank0
 13136  07B6  00A1               	movwf	Timeout_setTimeout@val
 13137  07B7  3000               	movlw	0
 13138  07B8  00A2               	movwf	Timeout_setTimeout@val+1
 13139  07B9  3196  26B6  3187   	fcall	_Timeout_setTimeout
 13140  07BC                     l5258:	
 13141                           ;i2c_wrapper.c: 38: while(status == I2C2_MESSAGE_PENDING && Timeout_hasExpired()==0);
 13142                           
 13143  07BC  3002               	movlw	2
 13144  07BD  0020               	movlb	0	; select bank0
 13145  07BE  063B               	xorwf	I2C_BufferRead@status,w
 13146  07BF  1D03               	btfss	3,2
 13147  07C0  2FC7               	goto	l5262
 13148  07C1  318A  22DA  3187   	fcall	_Timeout_hasExpired
 13149  07C4  3A00               	xorlw	0
 13150  07C5  1903               	skipnz
 13151  07C6  2FBC               	goto	l5258
 13152  07C7                     l5262:	
 13153                           
 13154                           ;i2c_wrapper.c: 40: if (status != I2C2_MESSAGE_COMPLETE)
 13155  07C7  0020               	movlb	0	; select bank0
 13156  07C8  083B               	movf	I2C_BufferRead@status,w
 13157  07C9  1903               	btfsc	3,2
 13158  07CA  2FCD               	goto	l5268
 13159                           
 13160                           ;i2c_wrapper.c: 41: {
 13161                           ;i2c_wrapper.c: 42: return 0;
 13162  07CB  3000               	movlw	0
 13163  07CC  0008               	return
 13164  07CD                     l5268:	
 13165                           
 13166                           ;i2c_wrapper.c: 43: }
 13167                           ;i2c_wrapper.c: 46: I2C2_MasterRead( pBuffer,NumByteToRead,slaveAddr,&status);
 13168  07CD  0832               	movf	I2C_BufferRead@pBuffer+1,w
 13169  07CE  00AA               	movwf	I2C2_MasterRead@pdata+1
 13170  07CF  0831               	movf	I2C_BufferRead@pBuffer,w
 13171  07D0  00A9               	movwf	I2C2_MasterRead@pdata
 13172  07D1  0834               	movf	I2C_BufferRead@NumByteToRead,w
 13173  07D2  00B6               	movwf	??_I2C_BufferRead
 13174  07D3  0836               	movf	??_I2C_BufferRead,w
 13175  07D4  00AB               	movwf	I2C2_MasterRead@length
 13176  07D5  083A               	movf	I2C_BufferRead@slaveAddr,w
 13177  07D6  00B7               	movwf	??_I2C_BufferRead+1
 13178  07D7  01B8               	clrf	??_I2C_BufferRead+2
 13179  07D8  0837               	movf	??_I2C_BufferRead+1,w
 13180  07D9  00AC               	movwf	I2C2_MasterRead@address
 13181  07DA  0838               	movf	??_I2C_BufferRead+2,w
 13182  07DB  00AD               	movwf	I2C2_MasterRead@address+1
 13183  07DC  303B               	movlw	(low (I2C_BufferRead@status| 0))& (0+255)
 13184  07DD  00B9               	movwf	??_I2C_BufferRead+3
 13185  07DE  0839               	movf	??_I2C_BufferRead+3,w
 13186  07DF  00AE               	movwf	I2C2_MasterRead@pflag
 13187  07E0  3188  20B3  3187   	fcall	_I2C2_MasterRead
 13188                           
 13189                           ;i2c_wrapper.c: 47: Timeout_setTimeout(200);
 13190  07E3  30C8               	movlw	200
 13191  07E4  0020               	movlb	0	; select bank0
 13192  07E5  00A1               	movwf	Timeout_setTimeout@val
 13193  07E6  3000               	movlw	0
 13194  07E7  00A2               	movwf	Timeout_setTimeout@val+1
 13195  07E8  3196  26B6  3187   	fcall	_Timeout_setTimeout
 13196  07EB                     l5272:	
 13197                           ;i2c_wrapper.c: 49: while(status == I2C2_MESSAGE_PENDING && Timeout_hasExpired()==0);
 13198                           
 13199  07EB  3002               	movlw	2
 13200  07EC  0020               	movlb	0	; select bank0
 13201  07ED  063B               	xorwf	I2C_BufferRead@status,w
 13202  07EE  1D03               	btfss	3,2
 13203  07EF  2FF6               	goto	l5276
 13204  07F0  318A  22DA  3187   	fcall	_Timeout_hasExpired
 13205  07F3  3A00               	xorlw	0
 13206  07F4  1903               	skipnz
 13207  07F5  2FEB               	goto	l5272
 13208  07F6                     l5276:	
 13209                           
 13210                           ;i2c_wrapper.c: 51: if (status == I2C2_MESSAGE_COMPLETE)
 13211  07F6  0020               	movlb	0	; select bank0
 13212  07F7  083B               	movf	I2C_BufferRead@status,w
 13213  07F8  1D03               	btfss	3,2
 13214  07F9  2FFC               	goto	l5284
 13215                           
 13216                           ;i2c_wrapper.c: 52: return 1;
 13217  07FA  3001               	movlw	1
 13218  07FB  0008               	return
 13219  07FC                     l5284:	
 13220                           
 13221                           ;i2c_wrapper.c: 53: else
 13222                           ;i2c_wrapper.c: 54: return 0;
 13223  07FC  3000               	movlw	0
 13224  07FD  0008               	return
 13225  07FE                     __end_of_I2C_BufferRead:	
 13226                           
 13227                           	psect	text72
 13228  16B6                     __ptext72:	
 13229 ;; *************** function _Timeout_setTimeout *****************
 13230 ;; Defined at:
 13231 ;;		line 12 in file "timeout.c"
 13232 ;; Parameters:    Size  Location     Type
 13233 ;;  val             2    1[BANK0 ] unsigned short 
 13234 ;; Auto vars:     Size  Location     Type
 13235 ;;		None
 13236 ;; Return value:  Size  Location     Type
 13237 ;;                  1    wreg      void 
 13238 ;; Registers used:
 13239 ;;		wreg
 13240 ;; Tracked objects:
 13241 ;;		On entry : 0/0
 13242 ;;		On exit  : 0/0
 13243 ;;		Unchanged: 0/0
 13244 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13245 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13246 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13247 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13248 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13249 ;;Total ram usage:        2 bytes
 13250 ;; Hardware stack levels used:    1
 13251 ;; Hardware stack levels required when called:    4
 13252 ;; This function calls:
 13253 ;;		Nothing
 13254 ;; This function is called by:
 13255 ;;		_I2C_ByteWrite
 13256 ;;		_I2C_BufferRead
 13257 ;; This function uses a non-reentrant model
 13258 ;;
 13259                           
 13260                           
 13261                           ;psect for function _Timeout_setTimeout
 13262  16B6                     _Timeout_setTimeout:	
 13263                           
 13264                           ;timeout.c: 14: timeOut=val;
 13265                           
 13266                           ;incstack = 0
 13267                           ; Regs used in _Timeout_setTimeout: [wreg]
 13268  16B6  0020               	movlb	0	; select bank0
 13269  16B7  0822               	movf	Timeout_setTimeout@val+1,w
 13270  16B8  0022               	movlb	2	; select bank2
 13271  16B9  00BA               	movwf	(_timeOut+1)^(0+256)
 13272  16BA  0020               	movlb	0	; select bank0
 13273  16BB  0821               	movf	Timeout_setTimeout@val,w
 13274  16BC  0022               	movlb	2	; select bank2
 13275  16BD  00B9               	movwf	_timeOut^(0+256)
 13276                           
 13277                           ;timeout.c: 15: curr=globalCounter;
 13278  16BE  0021               	movlb	1	; select bank1
 13279  16BF  084F               	movf	(_globalCounter+3)^(0+128),w	;volatile
 13280  16C0  0022               	movlb	2	; select bank2
 13281  16C1  00A3               	movwf	(_curr+3)^(0+256)
 13282  16C2  0021               	movlb	1	; select bank1
 13283  16C3  084E               	movf	(_globalCounter+2)^(0+128),w	;volatile
 13284  16C4  0022               	movlb	2	; select bank2
 13285  16C5  00A2               	movwf	(_curr+2)^(0+256)
 13286  16C6  0021               	movlb	1	; select bank1
 13287  16C7  084D               	movf	(_globalCounter+1)^(0+128),w	;volatile
 13288  16C8  0022               	movlb	2	; select bank2
 13289  16C9  00A1               	movwf	(_curr+1)^(0+256)
 13290  16CA  0021               	movlb	1	; select bank1
 13291  16CB  084C               	movf	_globalCounter^(0+128),w	;volatile
 13292  16CC  0022               	movlb	2	; select bank2
 13293  16CD  00A0               	movwf	_curr^(0+256)
 13294  16CE  0008               	return
 13295  16CF                     __end_of_Timeout_setTimeout:	
 13296                           
 13297                           	psect	text73
 13298  0ADA                     __ptext73:	
 13299 ;; *************** function _Timeout_hasExpired *****************
 13300 ;; Defined at:
 13301 ;;		line 18 in file "timeout.c"
 13302 ;; Parameters:    Size  Location     Type
 13303 ;;		None
 13304 ;; Auto vars:     Size  Location     Type
 13305 ;;		None
 13306 ;; Return value:  Size  Location     Type
 13307 ;;                  1    wreg      unsigned char 
 13308 ;; Registers used:
 13309 ;;		wreg, status,2, status,0
 13310 ;; Tracked objects:
 13311 ;;		On entry : 0/0
 13312 ;;		On exit  : 0/0
 13313 ;;		Unchanged: 0/0
 13314 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13315 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13316 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13317 ;;      Temps:          0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13318 ;;      Totals:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13319 ;;Total ram usage:       12 bytes
 13320 ;; Hardware stack levels used:    1
 13321 ;; Hardware stack levels required when called:    4
 13322 ;; This function calls:
 13323 ;;		Nothing
 13324 ;; This function is called by:
 13325 ;;		_I2C_ByteWrite
 13326 ;;		_I2C_BufferRead
 13327 ;; This function uses a non-reentrant model
 13328 ;;
 13329                           
 13330                           
 13331                           ;psect for function _Timeout_hasExpired
 13332  0ADA                     _Timeout_hasExpired:	
 13333                           
 13334                           ;timeout.c: 20: if(globalCounter-curr>timeOut)
 13335                           
 13336                           ;incstack = 0
 13337                           ; Regs used in _Timeout_hasExpired: [wreg+status,2+status,0]
 13338  0ADA  0021               	movlb	1	; select bank1
 13339  0ADB  084C               	movf	_globalCounter^(0+128),w	;volatile
 13340  0ADC  0020               	movlb	0	; select bank0
 13341  0ADD  00A1               	movwf	??_Timeout_hasExpired
 13342  0ADE  0021               	movlb	1	; select bank1
 13343  0ADF  084D               	movf	(_globalCounter+1)^(0+128),w	;volatile
 13344  0AE0  0020               	movlb	0	; select bank0
 13345  0AE1  00A2               	movwf	??_Timeout_hasExpired+1
 13346  0AE2  0021               	movlb	1	; select bank1
 13347  0AE3  084E               	movf	(_globalCounter+2)^(0+128),w	;volatile
 13348  0AE4  0020               	movlb	0	; select bank0
 13349  0AE5  00A3               	movwf	??_Timeout_hasExpired+2
 13350  0AE6  0021               	movlb	1	; select bank1
 13351  0AE7  084F               	movf	(_globalCounter+3)^(0+128),w	;volatile
 13352  0AE8  0020               	movlb	0	; select bank0
 13353  0AE9  00A4               	movwf	??_Timeout_hasExpired+3
 13354  0AEA  0022               	movlb	2	; select bank2
 13355  0AEB  0920               	comf	_curr^(0+256),w
 13356  0AEC  0020               	movlb	0	; select bank0
 13357  0AED  00A5               	movwf	??_Timeout_hasExpired+4
 13358  0AEE  0022               	movlb	2	; select bank2
 13359  0AEF  0921               	comf	(_curr+1)^(0+256),w
 13360  0AF0  0020               	movlb	0	; select bank0
 13361  0AF1  00A6               	movwf	??_Timeout_hasExpired+5
 13362  0AF2  0022               	movlb	2	; select bank2
 13363  0AF3  0922               	comf	(_curr+2)^(0+256),w
 13364  0AF4  0020               	movlb	0	; select bank0
 13365  0AF5  00A7               	movwf	??_Timeout_hasExpired+6
 13366  0AF6  0022               	movlb	2	; select bank2
 13367  0AF7  0923               	comf	(_curr+3)^(0+256),w
 13368  0AF8  0020               	movlb	0	; select bank0
 13369  0AF9  00A8               	movwf	??_Timeout_hasExpired+7
 13370  0AFA  0AA5               	incf	??_Timeout_hasExpired+4,f
 13371  0AFB  1903               	skipnz
 13372  0AFC  0AA6               	incf	??_Timeout_hasExpired+5,f
 13373  0AFD  1903               	skipnz
 13374  0AFE  0AA7               	incf	??_Timeout_hasExpired+6,f
 13375  0AFF  1903               	skipnz
 13376  0B00  0AA8               	incf	??_Timeout_hasExpired+7,f
 13377  0B01  0825               	movf	??_Timeout_hasExpired+4,w
 13378  0B02  07A1               	addwf	??_Timeout_hasExpired,f
 13379  0B03  0826               	movf	??_Timeout_hasExpired+5,w
 13380  0B04  3DA2               	addwfc	??_Timeout_hasExpired+1,f
 13381  0B05  0827               	movf	??_Timeout_hasExpired+6,w
 13382  0B06  3DA3               	addwfc	??_Timeout_hasExpired+2,f
 13383  0B07  0828               	movf	??_Timeout_hasExpired+7,w
 13384  0B08  3DA4               	addwfc	??_Timeout_hasExpired+3,f
 13385  0B09  0022               	movlb	2	; select bank2
 13386  0B0A  0839               	movf	_timeOut^(0+256),w
 13387  0B0B  0020               	movlb	0	; select bank0
 13388  0B0C  00A9               	movwf	??_Timeout_hasExpired+8
 13389  0B0D  0022               	movlb	2	; select bank2
 13390  0B0E  083A               	movf	(_timeOut+1)^(0+256),w
 13391  0B0F  0020               	movlb	0	; select bank0
 13392  0B10  00AA               	movwf	??_Timeout_hasExpired+9
 13393  0B11  01AB               	clrf	??_Timeout_hasExpired+10
 13394  0B12  01AC               	clrf	??_Timeout_hasExpired+11
 13395  0B13  0824               	movf	??_Timeout_hasExpired+3,w
 13396  0B14  022C               	subwf	??_Timeout_hasExpired+11,w
 13397  0B15  1D03               	skipz
 13398  0B16  2B21               	goto	u4625
 13399  0B17  0823               	movf	??_Timeout_hasExpired+2,w
 13400  0B18  022B               	subwf	??_Timeout_hasExpired+10,w
 13401  0B19  1D03               	skipz
 13402  0B1A  2B21               	goto	u4625
 13403  0B1B  0822               	movf	??_Timeout_hasExpired+1,w
 13404  0B1C  022A               	subwf	??_Timeout_hasExpired+9,w
 13405  0B1D  1D03               	skipz
 13406  0B1E  2B21               	goto	u4625
 13407  0B1F  0821               	movf	??_Timeout_hasExpired,w
 13408  0B20  0229               	subwf	??_Timeout_hasExpired+8,w
 13409  0B21                     u4625:	
 13410  0B21  1803               	skipnc
 13411  0B22  2B25               	goto	l5248
 13412                           
 13413                           ;timeout.c: 21: return 1;
 13414  0B23  3001               	movlw	1
 13415  0B24  0008               	return
 13416  0B25                     l5248:	
 13417                           
 13418                           ;timeout.c: 22: else
 13419                           ;timeout.c: 23: return 0;
 13420  0B25  3000               	movlw	0
 13421  0B26  0008               	return
 13422  0B27                     __end_of_Timeout_hasExpired:	
 13423                           
 13424                           	psect	text74
 13425  08DB                     __ptext74:	
 13426 ;; *************** function _I2C2_MasterWrite *****************
 13427 ;; Defined at:
 13428 ;;		line 598 in file "mcc_generated_files/i2c2.c"
 13429 ;; Parameters:    Size  Location     Type
 13430 ;;  pdata           1    wreg     PTR unsigned char 
 13431 ;;		 -> I2C_BufferRead@ReadAddr(1), I2C_ByteWrite@data(2), 
 13432 ;;  length          1    8[BANK0 ] unsigned char 
 13433 ;;  address         2    9[BANK0 ] unsigned int 
 13434 ;;  pflag           1   11[BANK0 ] PTR enum E2993
 13435 ;;		 -> I2C_BufferRead@status(1), I2C_ByteWrite@status(1), 
 13436 ;; Auto vars:     Size  Location     Type
 13437 ;;  pdata           1   14[BANK0 ] PTR unsigned char 
 13438 ;;		 -> I2C_BufferRead@ReadAddr(1), I2C_ByteWrite@data(2), 
 13439 ;; Return value:  Size  Location     Type
 13440 ;;                  1    wreg      void 
 13441 ;; Registers used:
 13442 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13443 ;; Tracked objects:
 13444 ;;		On entry : 0/0
 13445 ;;		On exit  : 0/0
 13446 ;;		Unchanged: 0/0
 13447 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13448 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13449 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13450 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13451 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13452 ;;Total ram usage:        7 bytes
 13453 ;; Hardware stack levels used:    1
 13454 ;; Hardware stack levels required when called:    5
 13455 ;; This function calls:
 13456 ;;		_I2C2_MasterTRBInsert
 13457 ;;		_I2C2_MasterWriteTRBBuild
 13458 ;; This function is called by:
 13459 ;;		_I2C_ByteWrite
 13460 ;;		_I2C_BufferRead
 13461 ;; This function uses a non-reentrant model
 13462 ;;
 13463                           
 13464                           
 13465                           ;psect for function _I2C2_MasterWrite
 13466  08DB                     _I2C2_MasterWrite:	
 13467                           
 13468                           ;incstack = 0
 13469                           ; Regs used in _I2C2_MasterWrite: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 13470                           ;I2C2_MasterWrite@pdata stored from wreg
 13471  08DB  0020               	movlb	0	; select bank0
 13472  08DC  00AE               	movwf	I2C2_MasterWrite@pdata
 13473                           
 13474                           ;i2c2.c: 604: static I2C2_TRANSACTION_REQUEST_BLOCK trBlock;
 13475                           ;i2c2.c: 607: if (i2c2_object.trStatus.s.full != 1)
 13476  08DD  0021               	movlb	1	; select bank1
 13477  08DE  1849               	btfsc	(_i2c2_object^(0+128)+2),0
 13478  08DF  28FE               	goto	l5194
 13479                           
 13480                           ;i2c2.c: 608: {
 13481                           ;i2c2.c: 609: I2C2_MasterWriteTRBBuild(&trBlock, pdata, length, address);
 13482  08E0  0020               	movlb	0	; select bank0
 13483  08E1  082E               	movf	I2C2_MasterWrite@pdata,w
 13484  08E2  00AC               	movwf	??_I2C2_MasterWrite
 13485  08E3  082C               	movf	??_I2C2_MasterWrite,w
 13486  08E4  00A1               	movwf	I2C2_MasterWriteTRBBuild@pdata
 13487  08E5  0828               	movf	I2C2_MasterWrite@length,w
 13488  08E6  00AD               	movwf	??_I2C2_MasterWrite+1
 13489  08E7  082D               	movf	??_I2C2_MasterWrite+1,w
 13490  08E8  00A2               	movwf	I2C2_MasterWriteTRBBuild@length
 13491  08E9  082A               	movf	I2C2_MasterWrite@address+1,w
 13492  08EA  00A4               	movwf	I2C2_MasterWriteTRBBuild@address+1
 13493  08EB  0829               	movf	I2C2_MasterWrite@address,w
 13494  08EC  00A3               	movwf	I2C2_MasterWriteTRBBuild@address
 13495  08ED  3062               	movlw	(low (I2C2_MasterWrite@trBlock| (0+256)))& (0+255)
 13496  08EE  3188  206D  3188   	fcall	_I2C2_MasterWriteTRBBuild
 13497                           
 13498                           ;i2c2.c: 610: I2C2_MasterTRBInsert(1, &trBlock, pflag);
 13499  08F1  3062               	movlw	(low (I2C2_MasterWrite@trBlock| (0+256)))& (0+255)
 13500  08F2  0020               	movlb	0	; select bank0
 13501  08F3  00AC               	movwf	??_I2C2_MasterWrite
 13502  08F4  082C               	movf	??_I2C2_MasterWrite,w
 13503  08F5  00A1               	movwf	I2C2_MasterTRBInsert@ptrb_list
 13504  08F6  082B               	movf	I2C2_MasterWrite@pflag,w
 13505  08F7  00AD               	movwf	??_I2C2_MasterWrite+1
 13506  08F8  082D               	movf	??_I2C2_MasterWrite+1,w
 13507  08F9  00A2               	movwf	I2C2_MasterTRBInsert@pflag
 13508  08FA  3001               	movlw	1
 13509  08FB  318B  2327         	fcall	_I2C2_MasterTRBInsert
 13510                           
 13511                           ;i2c2.c: 611: }
 13512  08FD  0008               	return
 13513  08FE                     l5194:	
 13514                           
 13515                           ;i2c2.c: 612: else
 13516                           ;i2c2.c: 613: {
 13517                           ;i2c2.c: 614: *pflag = I2C2_MESSAGE_FAIL;
 13518  08FE  0020               	movlb	0	; select bank0
 13519  08FF  082B               	movf	I2C2_MasterWrite@pflag,w
 13520  0900  0086               	movwf	6
 13521  0901  0187               	clrf	7
 13522  0902  0181               	clrf	1
 13523  0903  0A81               	incf	1,f
 13524  0904  0008               	return
 13525  0905                     __end_of_I2C2_MasterWrite:	
 13526                           
 13527                           	psect	text75
 13528  086D                     __ptext75:	
 13529 ;; *************** function _I2C2_MasterWriteTRBBuild *****************
 13530 ;; Defined at:
 13531 ;;		line 708 in file "mcc_generated_files/i2c2.c"
 13532 ;; Parameters:    Size  Location     Type
 13533 ;;  ptrb            1    wreg     PTR struct .
 13534 ;;		 -> I2C2_MasterWrite@trBlock(5), 
 13535 ;;  pdata           1    1[BANK0 ] PTR unsigned char 
 13536 ;;		 -> I2C_BufferRead@ReadAddr(1), I2C_ByteWrite@data(2), 
 13537 ;;  length          1    2[BANK0 ] unsigned char 
 13538 ;;  address         2    3[BANK0 ] unsigned int 
 13539 ;; Auto vars:     Size  Location     Type
 13540 ;;  ptrb            1    7[BANK0 ] PTR struct .
 13541 ;;		 -> I2C2_MasterWrite@trBlock(5), 
 13542 ;; Return value:  Size  Location     Type
 13543 ;;                  1    wreg      void 
 13544 ;; Registers used:
 13545 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 13546 ;; Tracked objects:
 13547 ;;		On entry : 0/0
 13548 ;;		On exit  : 0/0
 13549 ;;		Unchanged: 0/0
 13550 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13551 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13552 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13553 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13554 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13555 ;;Total ram usage:        7 bytes
 13556 ;; Hardware stack levels used:    1
 13557 ;; Hardware stack levels required when called:    4
 13558 ;; This function calls:
 13559 ;;		Nothing
 13560 ;; This function is called by:
 13561 ;;		_I2C2_MasterWrite
 13562 ;; This function uses a non-reentrant model
 13563 ;;
 13564                           
 13565                           
 13566                           ;psect for function _I2C2_MasterWriteTRBBuild
 13567  086D                     _I2C2_MasterWriteTRBBuild:	
 13568                           
 13569                           ;incstack = 0
 13570                           ; Regs used in _I2C2_MasterWriteTRBBuild: [wreg+fsr1l+fsr1h+status,2+status,0]
 13571                           ;I2C2_MasterWriteTRBBuild@ptrb stored from wreg
 13572  086D  0020               	movlb	0	; select bank0
 13573  086E  00A7               	movwf	I2C2_MasterWriteTRBBuild@ptrb
 13574                           
 13575                           ;i2c2.c: 714: ptrb->address = address << 1;
 13576  086F  0824               	movf	I2C2_MasterWriteTRBBuild@address+1,w
 13577  0870  00A6               	movwf	??_I2C2_MasterWriteTRBBuild+1
 13578  0871  0823               	movf	I2C2_MasterWriteTRBBuild@address,w
 13579  0872  00A5               	movwf	??_I2C2_MasterWriteTRBBuild
 13580  0873  35A5               	lslf	??_I2C2_MasterWriteTRBBuild,f
 13581  0874  0DA6               	rlf	??_I2C2_MasterWriteTRBBuild+1,f
 13582  0875  0827               	movf	I2C2_MasterWriteTRBBuild@ptrb,w
 13583  0876  0086               	movwf	6
 13584  0877  3001               	movlw	1	; select bank2/3
 13585  0878  0087               	movwf	7
 13586  0879  0825               	movf	??_I2C2_MasterWriteTRBBuild,w
 13587  087A  3FC0               	movwi [0]fsr1
 13588  087B  0826               	movf	??_I2C2_MasterWriteTRBBuild+1,w
 13589  087C  3FC1               	movwi [1]fsr1
 13590                           
 13591                           ;i2c2.c: 715: ptrb->length = length;
 13592  087D  0822               	movf	I2C2_MasterWriteTRBBuild@length,w
 13593  087E  00A5               	movwf	??_I2C2_MasterWriteTRBBuild
 13594  087F  0827               	movf	I2C2_MasterWriteTRBBuild@ptrb,w
 13595  0880  3E02               	addlw	2
 13596  0881  0086               	movwf	6
 13597  0882  3001               	movlw	1	; select bank2/3
 13598  0883  0087               	movwf	7
 13599  0884  0825               	movf	??_I2C2_MasterWriteTRBBuild,w
 13600  0885  0081               	movwf	1
 13601                           
 13602                           ;i2c2.c: 716: ptrb->pbuffer = pdata;
 13603  0886  0827               	movf	I2C2_MasterWriteTRBBuild@ptrb,w
 13604  0887  3E03               	addlw	3
 13605  0888  0086               	movwf	6
 13606  0889  3001               	movlw	1	; select bank2/3
 13607  088A  0087               	movwf	7
 13608  088B  0821               	movf	I2C2_MasterWriteTRBBuild@pdata,w
 13609  088C  3FC0               	movwi [0]fsr1
 13610  088D  3000               	movlw	0
 13611  088E  3FC1               	movwi [1]fsr1
 13612  088F  0008               	return
 13613  0890                     __end_of_I2C2_MasterWriteTRBBuild:	
 13614                           
 13615                           	psect	text76
 13616  08B3                     __ptext76:	
 13617 ;; *************** function _I2C2_MasterRead *****************
 13618 ;; Defined at:
 13619 ;;		line 619 in file "mcc_generated_files/i2c2.c"
 13620 ;; Parameters:    Size  Location     Type
 13621 ;;  pdata           2    9[BANK0 ] PTR unsigned char 
 13622 ;;		 -> data(8), b1(24), HMC5883L_ReadBit@tmp(1), HMC5883L_ReadBits@tmp(1), 
 13623 ;;		 -> HMC5883L_WriteBit@tmp(1), HMC5883L_WriteBits@tmp(1), heading(8), HMC5883L_TestConnection@tmp(3), 
 13624 ;;		 -> MPU6050_ReadBit@tmp(1), MPU6050_ReadBits@tmp(1), MPU6050_WriteBit@tmp(1), MPU6050_WriteBits@tmp(1), 
 13625 ;;		 -> MPU6050_GetRawAccel@tempBuffer(6), MPU6050_GetRawAccelGyro@tmpBuffer(14), 
 13626 ;;  length          1   11[BANK0 ] unsigned char 
 13627 ;;  address         2   12[BANK0 ] unsigned int 
 13628 ;;  pflag           1   14[BANK0 ] PTR enum E2993
 13629 ;;		 -> I2C_BufferRead@status(1), 
 13630 ;; Auto vars:     Size  Location     Type
 13631 ;;		None
 13632 ;; Return value:  Size  Location     Type
 13633 ;;                  1    wreg      void 
 13634 ;; Registers used:
 13635 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13636 ;; Tracked objects:
 13637 ;;		On entry : 0/0
 13638 ;;		On exit  : 0/0
 13639 ;;		Unchanged: 0/0
 13640 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13641 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13642 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13643 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13644 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13645 ;;Total ram usage:        8 bytes
 13646 ;; Hardware stack levels used:    1
 13647 ;; Hardware stack levels required when called:    5
 13648 ;; This function calls:
 13649 ;;		_I2C2_MasterReadTRBBuild
 13650 ;;		_I2C2_MasterTRBInsert
 13651 ;; This function is called by:
 13652 ;;		_I2C_BufferRead
 13653 ;; This function uses a non-reentrant model
 13654 ;;
 13655                           
 13656                           
 13657                           ;psect for function _I2C2_MasterRead
 13658  08B3                     _I2C2_MasterRead:	
 13659                           
 13660                           ;i2c2.c: 625: static I2C2_TRANSACTION_REQUEST_BLOCK trBlock;
 13661                           ;i2c2.c: 629: if (i2c2_object.trStatus.s.full != 1)
 13662                           
 13663                           ;incstack = 0
 13664                           ; Regs used in _I2C2_MasterRead: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 13665  08B3  0021               	movlb	1	; select bank1
 13666  08B4  1849               	btfsc	(_i2c2_object^(0+128)+2),0
 13667  08B5  28D4               	goto	l5200
 13668                           
 13669                           ;i2c2.c: 630: {
 13670                           ;i2c2.c: 631: I2C2_MasterReadTRBBuild(&trBlock, pdata, length, address);
 13671  08B6  0020               	movlb	0	; select bank0
 13672  08B7  082A               	movf	I2C2_MasterRead@pdata+1,w
 13673  08B8  00A2               	movwf	I2C2_MasterReadTRBBuild@pdata+1
 13674  08B9  0829               	movf	I2C2_MasterRead@pdata,w
 13675  08BA  00A1               	movwf	I2C2_MasterReadTRBBuild@pdata
 13676  08BB  082B               	movf	I2C2_MasterRead@length,w
 13677  08BC  00AF               	movwf	??_I2C2_MasterRead
 13678  08BD  082F               	movf	??_I2C2_MasterRead,w
 13679  08BE  00A3               	movwf	I2C2_MasterReadTRBBuild@length
 13680  08BF  082D               	movf	I2C2_MasterRead@address+1,w
 13681  08C0  00A5               	movwf	I2C2_MasterReadTRBBuild@address+1
 13682  08C1  082C               	movf	I2C2_MasterRead@address,w
 13683  08C2  00A4               	movwf	I2C2_MasterReadTRBBuild@address
 13684  08C3  305D               	movlw	(low (I2C2_MasterRead@trBlock| (0+256)))& (0+255)
 13685  08C4  3189  2130  3188   	fcall	_I2C2_MasterReadTRBBuild
 13686                           
 13687                           ;i2c2.c: 632: I2C2_MasterTRBInsert(1, &trBlock, pflag);
 13688  08C7  305D               	movlw	(low (I2C2_MasterRead@trBlock| (0+256)))& (0+255)
 13689  08C8  0020               	movlb	0	; select bank0
 13690  08C9  00AF               	movwf	??_I2C2_MasterRead
 13691  08CA  082F               	movf	??_I2C2_MasterRead,w
 13692  08CB  00A1               	movwf	I2C2_MasterTRBInsert@ptrb_list
 13693  08CC  082E               	movf	I2C2_MasterRead@pflag,w
 13694  08CD  00B0               	movwf	??_I2C2_MasterRead+1
 13695  08CE  0830               	movf	??_I2C2_MasterRead+1,w
 13696  08CF  00A2               	movwf	I2C2_MasterTRBInsert@pflag
 13697  08D0  3001               	movlw	1
 13698  08D1  318B  2327         	fcall	_I2C2_MasterTRBInsert
 13699                           
 13700                           ;i2c2.c: 633: }
 13701  08D3  0008               	return
 13702  08D4                     l5200:	
 13703                           
 13704                           ;i2c2.c: 634: else
 13705                           ;i2c2.c: 635: {
 13706                           ;i2c2.c: 636: *pflag = I2C2_MESSAGE_FAIL;
 13707  08D4  0020               	movlb	0	; select bank0
 13708  08D5  082E               	movf	I2C2_MasterRead@pflag,w
 13709  08D6  0086               	movwf	6
 13710  08D7  0187               	clrf	7
 13711  08D8  0181               	clrf	1
 13712  08D9  0A81               	incf	1,f
 13713  08DA  0008               	return
 13714  08DB                     __end_of_I2C2_MasterRead:	
 13715                           
 13716                           	psect	text77
 13717  0B27                     __ptext77:	
 13718 ;; *************** function _I2C2_MasterTRBInsert *****************
 13719 ;; Defined at:
 13720 ;;		line 641 in file "mcc_generated_files/i2c2.c"
 13721 ;; Parameters:    Size  Location     Type
 13722 ;;  count           1    wreg     unsigned char 
 13723 ;;  ptrb_list       1    1[BANK0 ] PTR struct .
 13724 ;;		 -> I2C2_MasterRead@trBlock(5), I2C2_MasterWrite@trBlock(5), 
 13725 ;;  pflag           1    2[BANK0 ] PTR enum E2993
 13726 ;;		 -> I2C_BufferRead@status(1), I2C_ByteWrite@status(1), 
 13727 ;; Auto vars:     Size  Location     Type
 13728 ;;  count           1    4[BANK0 ] unsigned char 
 13729 ;; Return value:  Size  Location     Type
 13730 ;;                  1    wreg      void 
 13731 ;; Registers used:
 13732 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 13733 ;; Tracked objects:
 13734 ;;		On entry : 0/0
 13735 ;;		On exit  : 0/0
 13736 ;;		Unchanged: 0/0
 13737 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13738 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13739 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13740 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13741 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13742 ;;Total ram usage:        4 bytes
 13743 ;; Hardware stack levels used:    1
 13744 ;; Hardware stack levels required when called:    4
 13745 ;; This function calls:
 13746 ;;		Nothing
 13747 ;; This function is called by:
 13748 ;;		_I2C2_MasterWrite
 13749 ;;		_I2C2_MasterRead
 13750 ;; This function uses a non-reentrant model
 13751 ;;
 13752                           
 13753                           
 13754                           ;psect for function _I2C2_MasterTRBInsert
 13755  0B27                     _I2C2_MasterTRBInsert:	
 13756                           
 13757                           ;incstack = 0
 13758                           ; Regs used in _I2C2_MasterTRBInsert: [wreg+fsr1l+fsr1h+status,2+status,0]
 13759                           ;I2C2_MasterTRBInsert@count stored from wreg
 13760  0B27  0020               	movlb	0	; select bank0
 13761  0B28  00A4               	movwf	I2C2_MasterTRBInsert@count
 13762                           
 13763                           ;i2c2.c: 648: if (i2c2_object.trStatus.s.full != 1)
 13764  0B29  0021               	movlb	1	; select bank1
 13765  0B2A  1849               	btfsc	(_i2c2_object^(0+128)+2),0
 13766  0B2B  2B66               	goto	l5176
 13767                           
 13768                           ;i2c2.c: 649: {
 13769                           ;i2c2.c: 650: *pflag = I2C2_MESSAGE_PENDING;
 13770  0B2C  3002               	movlw	2
 13771  0B2D  0020               	movlb	0	; select bank0
 13772  0B2E  00A3               	movwf	??_I2C2_MasterTRBInsert
 13773  0B2F  0822               	movf	I2C2_MasterTRBInsert@pflag,w
 13774  0B30  0086               	movwf	6
 13775  0B31  0187               	clrf	7
 13776  0B32  0823               	movf	??_I2C2_MasterTRBInsert,w
 13777  0B33  0081               	movwf	1
 13778                           
 13779                           ;i2c2.c: 652: i2c2_object.pTrTail->ptrb_list = ptrb_list;
 13780  0B34  0821               	movf	I2C2_MasterTRBInsert@ptrb_list,w
 13781  0B35  00A3               	movwf	??_I2C2_MasterTRBInsert
 13782  0B36  0021               	movlb	1	; select bank1
 13783  0B37  0A47               	incf	_i2c2_object^(0+128),w
 13784  0B38  0086               	movwf	6
 13785  0B39  0187               	clrf	7
 13786  0B3A  0020               	movlb	0	; select bank0
 13787  0B3B  0823               	movf	??_I2C2_MasterTRBInsert,w
 13788  0B3C  0081               	movwf	1
 13789                           
 13790                           ;i2c2.c: 653: i2c2_object.pTrTail->count = count;
 13791  0B3D  0824               	movf	I2C2_MasterTRBInsert@count,w
 13792  0B3E  00A3               	movwf	??_I2C2_MasterTRBInsert
 13793  0B3F  0021               	movlb	1	; select bank1
 13794  0B40  0847               	movf	_i2c2_object^(0+128),w
 13795  0B41  0086               	movwf	6
 13796  0B42  0187               	clrf	7
 13797  0B43  0020               	movlb	0	; select bank0
 13798  0B44  0823               	movf	??_I2C2_MasterTRBInsert,w
 13799  0B45  0081               	movwf	1
 13800                           
 13801                           ;i2c2.c: 654: i2c2_object.pTrTail->pTrFlag = pflag;
 13802  0B46  0021               	movlb	1	; select bank1
 13803  0B47  0847               	movf	_i2c2_object^(0+128),w
 13804  0B48  3E02               	addlw	2
 13805  0B49  0086               	movwf	6
 13806  0B4A  0187               	clrf	7
 13807  0B4B  0020               	movlb	0	; select bank0
 13808  0B4C  0822               	movf	I2C2_MasterTRBInsert@pflag,w
 13809  0B4D  3FC0               	movwi [0]fsr1
 13810  0B4E  3000               	movlw	0
 13811  0B4F  3FC1               	movwi [1]fsr1
 13812                           
 13813                           ;i2c2.c: 655: i2c2_object.pTrTail++;
 13814  0B50  3004               	movlw	4
 13815  0B51  00A3               	movwf	??_I2C2_MasterTRBInsert
 13816  0B52  0823               	movf	??_I2C2_MasterTRBInsert,w
 13817  0B53  0021               	movlb	1	; select bank1
 13818  0B54  07C7               	addwf	_i2c2_object^(0+128),f
 13819                           
 13820                           ;i2c2.c: 658: if (i2c2_object.pTrTail == (i2c2_tr_queue + 1))
 13821  0B55  0847               	movf	_i2c2_object^(0+128),w
 13822  0B56  3AE5               	xorlw	(low ((_i2c2_tr_queue| 0+4)))& (0+255)
 13823  0B57  1D03               	skipz
 13824  0B58  2B5F               	goto	l5172
 13825                           
 13826                           ;i2c2.c: 659: {
 13827                           ;i2c2.c: 661: i2c2_object.pTrTail = i2c2_tr_queue;
 13828  0B59  30E1               	movlw	(low (_i2c2_tr_queue| 0))& (0+255)
 13829  0B5A  0020               	movlb	0	; select bank0
 13830  0B5B  00A3               	movwf	??_I2C2_MasterTRBInsert
 13831  0B5C  0823               	movf	??_I2C2_MasterTRBInsert,w
 13832  0B5D  0021               	movlb	1	; select bank1
 13833  0B5E  00C7               	movwf	_i2c2_object^(0+128)
 13834  0B5F                     l5172:	
 13835                           
 13836                           ;i2c2.c: 662: }
 13837                           ;i2c2.c: 666: i2c2_object.trStatus.s.empty = 0;
 13838  0B5F  10C9               	bcf	(_i2c2_object^(0+128)+2),1
 13839                           
 13840                           ;i2c2.c: 669: if (i2c2_object.pTrHead == i2c2_object.pTrTail)
 13841  0B60  0848               	movf	(low ((_i2c2_object| 0+1)))^(0+128),w
 13842  0B61  0647               	xorwf	_i2c2_object^(0+128),w
 13843  0B62  1D03               	skipz
 13844  0B63  2B6C               	goto	l5178
 13845                           
 13846                           ;i2c2.c: 670: {
 13847                           ;i2c2.c: 672: i2c2_object.trStatus.s.full = 1;
 13848  0B64  1449               	bsf	(_i2c2_object^(0+128)+2),0
 13849                           
 13850                           ;i2c2.c: 673: }
 13851                           ;i2c2.c: 675: }
 13852  0B65  2B6C               	goto	l5178
 13853  0B66                     l5176:	
 13854                           
 13855                           ;i2c2.c: 676: else
 13856                           ;i2c2.c: 677: {
 13857                           ;i2c2.c: 678: *pflag = I2C2_MESSAGE_FAIL;
 13858  0B66  0020               	movlb	0	; select bank0
 13859  0B67  0822               	movf	I2C2_MasterTRBInsert@pflag,w
 13860  0B68  0086               	movwf	6
 13861  0B69  0187               	clrf	7
 13862  0B6A  0181               	clrf	1
 13863  0B6B  0A81               	incf	1,f
 13864  0B6C                     l5178:	
 13865                           
 13866                           ;i2c2.c: 679: }
 13867                           ;i2c2.c: 682: if (*pflag == I2C2_MESSAGE_PENDING)
 13868  0B6C  0020               	movlb	0	; select bank0
 13869  0B6D  0822               	movf	I2C2_MasterTRBInsert@pflag,w
 13870  0B6E  0086               	movwf	6
 13871  0B6F  0187               	clrf	7
 13872  0B70  3002               	movlw	2
 13873  0B71  0601               	xorwf	1,w
 13874  0B72  1D03               	btfss	3,2
 13875  0B73  0008               	return
 13876  0B74                     l358:	
 13877                           ;i2c2.c: 685: while(i2c2_state != S_MASTER_IDLE)
 13878                           
 13879                           ;i2c2.c: 683: {
 13880                           ;i2c2.c: 684: PIR4bits.SSP2IF = 1;
 13881                           
 13882                           
 13883                           ;i2c2.c: 686: {
 13884                           ;i2c2.c: 689: PIR4bits.SSP2IF = 1;
 13885  0B74  1414               	bsf	20,0	;volatile
 13886  0B75  0879               	movf	_i2c2_state,w
 13887  0B76  1903               	btfsc	3,2
 13888  0B77  0008               	return
 13889  0B78  2B74               	goto	l358
 13890  0B79                     __end_of_I2C2_MasterTRBInsert:	
 13891                           
 13892                           	psect	text78
 13893  0930                     __ptext78:	
 13894 ;; *************** function _I2C2_MasterReadTRBBuild *****************
 13895 ;; Defined at:
 13896 ;;		line 695 in file "mcc_generated_files/i2c2.c"
 13897 ;; Parameters:    Size  Location     Type
 13898 ;;  ptrb            1    wreg     PTR struct .
 13899 ;;		 -> I2C2_MasterRead@trBlock(5), 
 13900 ;;  pdata           2    1[BANK0 ] PTR unsigned char 
 13901 ;;		 -> data(8), b1(24), HMC5883L_ReadBit@tmp(1), HMC5883L_ReadBits@tmp(1), 
 13902 ;;		 -> HMC5883L_WriteBit@tmp(1), HMC5883L_WriteBits@tmp(1), heading(8), HMC5883L_TestConnection@tmp(3), 
 13903 ;;		 -> MPU6050_ReadBit@tmp(1), MPU6050_ReadBits@tmp(1), MPU6050_WriteBit@tmp(1), MPU6050_WriteBits@tmp(1), 
 13904 ;;		 -> MPU6050_GetRawAccel@tempBuffer(6), MPU6050_GetRawAccelGyro@tmpBuffer(14), 
 13905 ;;  length          1    3[BANK0 ] unsigned char 
 13906 ;;  address         2    4[BANK0 ] unsigned int 
 13907 ;; Auto vars:     Size  Location     Type
 13908 ;;  ptrb            1    8[BANK0 ] PTR struct .
 13909 ;;		 -> I2C2_MasterRead@trBlock(5), 
 13910 ;; Return value:  Size  Location     Type
 13911 ;;                  1    wreg      void 
 13912 ;; Registers used:
 13913 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 13914 ;; Tracked objects:
 13915 ;;		On entry : 0/0
 13916 ;;		On exit  : 0/0
 13917 ;;		Unchanged: 0/0
 13918 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13919 ;;      Params:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13920 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13921 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13922 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13923 ;;Total ram usage:        8 bytes
 13924 ;; Hardware stack levels used:    1
 13925 ;; Hardware stack levels required when called:    4
 13926 ;; This function calls:
 13927 ;;		Nothing
 13928 ;; This function is called by:
 13929 ;;		_I2C2_MasterRead
 13930 ;; This function uses a non-reentrant model
 13931 ;;
 13932                           
 13933                           
 13934                           ;psect for function _I2C2_MasterReadTRBBuild
 13935  0930                     _I2C2_MasterReadTRBBuild:	
 13936                           
 13937                           ;incstack = 0
 13938                           ; Regs used in _I2C2_MasterReadTRBBuild: [wreg+fsr1l+fsr1h+status,2+status,0]
 13939                           ;I2C2_MasterReadTRBBuild@ptrb stored from wreg
 13940  0930  0020               	movlb	0	; select bank0
 13941  0931  00A8               	movwf	I2C2_MasterReadTRBBuild@ptrb
 13942                           
 13943                           ;i2c2.c: 701: ptrb->address = address << 1;
 13944  0932  0825               	movf	I2C2_MasterReadTRBBuild@address+1,w
 13945  0933  00A7               	movwf	??_I2C2_MasterReadTRBBuild+1
 13946  0934  0824               	movf	I2C2_MasterReadTRBBuild@address,w
 13947  0935  00A6               	movwf	??_I2C2_MasterReadTRBBuild
 13948  0936  35A6               	lslf	??_I2C2_MasterReadTRBBuild,f
 13949  0937  0DA7               	rlf	??_I2C2_MasterReadTRBBuild+1,f
 13950  0938  0828               	movf	I2C2_MasterReadTRBBuild@ptrb,w
 13951  0939  0086               	movwf	6
 13952  093A  3001               	movlw	1	; select bank2/3
 13953  093B  0087               	movwf	7
 13954  093C  0826               	movf	??_I2C2_MasterReadTRBBuild,w
 13955  093D  3FC0               	movwi [0]fsr1
 13956  093E  0827               	movf	??_I2C2_MasterReadTRBBuild+1,w
 13957  093F  3FC1               	movwi [1]fsr1
 13958                           
 13959                           ;i2c2.c: 703: ptrb->address |= 0x01;
 13960  0940  0828               	movf	I2C2_MasterReadTRBBuild@ptrb,w
 13961  0941  0086               	movwf	6
 13962  0942  3001               	movlw	1	; select bank2/3
 13963  0943  0087               	movwf	7
 13964  0944  3001               	movlw	1
 13965  0945  0481               	iorwf	1,f
 13966  0946  3141               	addfsr 1,1
 13967  0947  3000               	movlw	0
 13968  0948  0481               	iorwf	1,f
 13969                           
 13970                           ;i2c2.c: 704: ptrb->length = length;
 13971  0949  0823               	movf	I2C2_MasterReadTRBBuild@length,w
 13972  094A  00A6               	movwf	??_I2C2_MasterReadTRBBuild
 13973  094B  0828               	movf	I2C2_MasterReadTRBBuild@ptrb,w
 13974  094C  3E02               	addlw	2
 13975  094D  0086               	movwf	6
 13976  094E  3001               	movlw	1	; select bank2/3
 13977  094F  0087               	movwf	7
 13978  0950  0826               	movf	??_I2C2_MasterReadTRBBuild,w
 13979  0951  0081               	movwf	1
 13980                           
 13981                           ;i2c2.c: 705: ptrb->pbuffer = pdata;
 13982  0952  0828               	movf	I2C2_MasterReadTRBBuild@ptrb,w
 13983  0953  3E03               	addlw	3
 13984  0954  0086               	movwf	6
 13985  0955  3001               	movlw	1	; select bank2/3
 13986  0956  0087               	movwf	7
 13987  0957  0821               	movf	I2C2_MasterReadTRBBuild@pdata,w
 13988  0958  3FC0               	movwi [0]fsr1
 13989  0959  0822               	movf	I2C2_MasterReadTRBBuild@pdata+1,w
 13990  095A  3FC1               	movwi [1]fsr1
 13991  095B  0008               	return
 13992  095C                     __end_of_I2C2_MasterReadTRBBuild:	
 13993                           
 13994                           	psect	text79
 13995  1519                     __ptext79:	
 13996 ;; *************** function _Diag_setTempSensorHealth *****************
 13997 ;; Defined at:
 13998 ;;		line 15 in file "diagnostics.c"
 13999 ;; Parameters:    Size  Location     Type
 14000 ;;  health          1    wreg     unsigned char 
 14001 ;; Auto vars:     Size  Location     Type
 14002 ;;  health          1    2[BANK0 ] unsigned char 
 14003 ;; Return value:  Size  Location     Type
 14004 ;;                  1    wreg      void 
 14005 ;; Registers used:
 14006 ;;		wreg
 14007 ;; Tracked objects:
 14008 ;;		On entry : 0/0
 14009 ;;		On exit  : 0/0
 14010 ;;		Unchanged: 0/0
 14011 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14012 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14013 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14014 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14015 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14016 ;;Total ram usage:        2 bytes
 14017 ;; Hardware stack levels used:    1
 14018 ;; Hardware stack levels required when called:    4
 14019 ;; This function calls:
 14020 ;;		Nothing
 14021 ;; This function is called by:
 14022 ;;		_BMP_init
 14023 ;;		_BMP_readTemperature
 14024 ;; This function uses a non-reentrant model
 14025 ;;
 14026                           
 14027                           
 14028                           ;psect for function _Diag_setTempSensorHealth
 14029  1519                     _Diag_setTempSensorHealth:	
 14030                           
 14031                           ;incstack = 0
 14032                           ; Regs used in _Diag_setTempSensorHealth: [wreg]
 14033                           ;Diag_setTempSensorHealth@health stored from wreg
 14034  1519  0020               	movlb	0	; select bank0
 14035  151A  00A2               	movwf	Diag_setTempSensorHealth@health
 14036                           
 14037                           ;diagnostics.c: 17: sensorHealth.tempSensorHealth=health;
 14038  151B  0822               	movf	Diag_setTempSensorHealth@health,w
 14039  151C  00A1               	movwf	??_Diag_setTempSensorHealth
 14040  151D  0821               	movf	??_Diag_setTempSensorHealth,w
 14041  151E  0021               	movlb	1	; select bank1
 14042  151F  00E7               	movwf	_sensorHealth^(0+128)
 14043  1520  0008               	return
 14044  1521                     __end_of_Diag_setTempSensorHealth:	
 14045                           
 14046                           	psect	intentry
 14047  0004                     __pintentry:	
 14048 ;; *************** function _INTERRUPT_InterruptManager *****************
 14049 ;; Defined at:
 14050 ;;		line 51 in file "mcc_generated_files/interrupt_manager.c"
 14051 ;; Parameters:    Size  Location     Type
 14052 ;;		None
 14053 ;; Auto vars:     Size  Location     Type
 14054 ;;		None
 14055 ;; Return value:  Size  Location     Type
 14056 ;;                  1    wreg      void 
 14057 ;; Registers used:
 14058 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14059 ;; Tracked objects:
 14060 ;;		On entry : 0/0
 14061 ;;		On exit  : 0/0
 14062 ;;		Unchanged: 0/0
 14063 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14064 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14065 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14066 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14067 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14068 ;;Total ram usage:        1 bytes
 14069 ;; Hardware stack levels used:    1
 14070 ;; Hardware stack levels required when called:    3
 14071 ;; This function calls:
 14072 ;;		_I2C2_BusCollisionISR
 14073 ;;		_I2C2_ISR
 14074 ;;		_PIN_MANAGER_IOC
 14075 ;;		_TMR1_ISR
 14076 ;; This function is called by:
 14077 ;;		Interrupt level 1
 14078 ;; This function uses a non-reentrant model
 14079 ;;
 14080                           
 14081  0004                     _INTERRUPT_InterruptManager:	
 14082                           
 14083                           ;incstack = 0
 14084  0004  147E               	bsf	126,0	;set compiler interrupt flag (level 1)
 14085                           
 14086                           ; Regs used in _INTERRUPT_InterruptManager: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 14087  0005  3180               	pagesel	$
 14088  0006  0020               	movlb	0	; select bank0
 14089  0007  087F               	movf	127,w
 14090  0008  00A0               	movwf	??_INTERRUPT_InterruptManager
 14091                           
 14092                           ;interrupt_manager.c: 54: if(INTCONbits.PEIE == 1 && PIE4bits.BCL2IE == 1 && PIR4bits.BC
      +                          L2IF == 1)
 14093  0009  1F0B               	btfss	11,6	;volatile
 14094  000A  2815               	goto	i1l153
 14095  000B  0021               	movlb	1	; select bank1
 14096  000C  1C94               	btfss	20,1	;volatile
 14097  000D  2815               	goto	i1l153
 14098  000E  0020               	movlb	0	; select bank0
 14099  000F  1C94               	btfss	20,1	;volatile
 14100  0010  2815               	goto	i1l153
 14101                           
 14102                           ;interrupt_manager.c: 55: {
 14103                           ;interrupt_manager.c: 56: I2C2_BusCollisionISR();
 14104  0011  3180  2003  3180   	fcall	_I2C2_BusCollisionISR
 14105                           
 14106                           ;interrupt_manager.c: 57: }
 14107  0014  2832               	goto	i1l161
 14108  0015                     i1l153:	
 14109                           
 14110                           ;interrupt_manager.c: 58: else if(INTCONbits.PEIE == 1 && PIE4bits.SSP2IE == 1 && PIR4bi
      +                          ts.SSP2IF == 1)
 14111  0015  1F0B               	btfss	11,6	;volatile
 14112  0016  2821               	goto	i1l155
 14113  0017  0021               	movlb	1	; select bank1
 14114  0018  1C14               	btfss	20,0	;volatile
 14115  0019  2821               	goto	i1l155
 14116  001A  0020               	movlb	0	; select bank0
 14117  001B  1C14               	btfss	20,0	;volatile
 14118  001C  2821               	goto	i1l155
 14119                           
 14120                           ;interrupt_manager.c: 59: {
 14121                           ;interrupt_manager.c: 60: I2C2_ISR();
 14122  001D  3184  24A5  3180   	fcall	_I2C2_ISR
 14123                           
 14124                           ;interrupt_manager.c: 61: }
 14125  0020  2832               	goto	i1l161
 14126  0021                     i1l155:	
 14127                           
 14128                           ;interrupt_manager.c: 62: else if(INTCONbits.PEIE == 1 && PIE1bits.TMR1IE == 1 && PIR1bi
      +                          ts.TMR1IF == 1)
 14129  0021  1F0B               	btfss	11,6	;volatile
 14130  0022  282D               	goto	i1l157
 14131  0023  0021               	movlb	1	; select bank1
 14132  0024  1C11               	btfss	17,0	;volatile
 14133  0025  282D               	goto	i1l157
 14134  0026  0020               	movlb	0	; select bank0
 14135  0027  1C11               	btfss	17,0	;volatile
 14136  0028  282D               	goto	i1l157
 14137                           
 14138                           ;interrupt_manager.c: 63: {
 14139                           ;interrupt_manager.c: 64: TMR1_ISR();
 14140  0029  3195  2531  3180   	fcall	_TMR1_ISR
 14141                           
 14142                           ;interrupt_manager.c: 65: }
 14143  002C  2832               	goto	i1l161
 14144  002D                     i1l157:	
 14145                           
 14146                           ;interrupt_manager.c: 66: else if(INTCONbits.IOCIE == 1 && INTCONbits.IOCIF == 1)
 14147  002D  198B               	btfsc	11,3	;volatile
 14148  002E  1C0B               	btfss	11,0	;volatile
 14149  002F  2832               	goto	i1l161
 14150                           
 14151                           ;interrupt_manager.c: 67: {
 14152                           ;interrupt_manager.c: 68: PIN_MANAGER_IOC();
 14153  0030  3194  24EC         	fcall	_PIN_MANAGER_IOC
 14154  0032                     i1l161:	
 14155                           ;interrupt_manager.c: 70: else
 14156                           ;interrupt_manager.c: 71: {
 14157                           
 14158                           ;interrupt_manager.c: 69: }
 14159                           
 14160  0032  0020               	movlb	0	; select bank0
 14161  0033  0820               	movf	??_INTERRUPT_InterruptManager,w
 14162  0034  00FF               	movwf	127
 14163  0035  107E               	bcf	126,0	;clear compiler interrupt flag (level 1)
 14164  0036  0009               	retfie
 14165  0037                     __end_of_INTERRUPT_InterruptManager:	
 14166                           
 14167                           	psect	text81
 14168  1531                     __ptext81:	
 14169 ;; *************** function _TMR1_ISR *****************
 14170 ;; Defined at:
 14171 ;;		line 157 in file "mcc_generated_files/tmr1.c"
 14172 ;; Parameters:    Size  Location     Type
 14173 ;;		None
 14174 ;; Auto vars:     Size  Location     Type
 14175 ;;		None
 14176 ;; Return value:  Size  Location     Type
 14177 ;;                  1    wreg      void 
 14178 ;; Registers used:
 14179 ;;		wreg, status,2, status,0, pclath, cstack
 14180 ;; Tracked objects:
 14181 ;;		On entry : 0/0
 14182 ;;		On exit  : 0/0
 14183 ;;		Unchanged: 0/0
 14184 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14185 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14186 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14187 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14188 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14189 ;;Total ram usage:        0 bytes
 14190 ;; Hardware stack levels used:    1
 14191 ;; Hardware stack levels required when called:    2
 14192 ;; This function calls:
 14193 ;;		_TMR1_CallBack
 14194 ;; This function is called by:
 14195 ;;		_INTERRUPT_InterruptManager
 14196 ;; This function uses a non-reentrant model
 14197 ;;
 14198                           
 14199                           
 14200                           ;psect for function _TMR1_ISR
 14201  1531                     _TMR1_ISR:	
 14202                           
 14203                           ;tmr1.c: 161: PIR1bits.TMR1IF = 0;
 14204                           
 14205                           ;incstack = 0
 14206                           ; Regs used in _TMR1_ISR: [wreg+status,2+status,0+pclath+cstack]
 14207  1531  0020               	movlb	0	; select bank0
 14208  1532  1011               	bcf	17,0	;volatile
 14209                           
 14210                           ;tmr1.c: 163: TMR1H = (timer1ReloadVal >> 8);
 14211  1533  087D               	movf	_timer1ReloadVal+1,w	;volatile
 14212  1534  0097               	movwf	23	;volatile
 14213                           
 14214                           ;tmr1.c: 164: TMR1L = timer1ReloadVal;
 14215  1535  087C               	movf	_timer1ReloadVal,w	;volatile
 14216  1536  0096               	movwf	22	;volatile
 14217                           
 14218                           ;tmr1.c: 168: TMR1_CallBack();
 14219  1537  3195  258D         	fcall	_TMR1_CallBack
 14220  1539  0008               	return
 14221  153A                     __end_of_TMR1_ISR:	
 14222                           
 14223                           	psect	text82
 14224  158D                     __ptext82:	
 14225 ;; *************** function _TMR1_CallBack *****************
 14226 ;; Defined at:
 14227 ;;		line 171 in file "mcc_generated_files/tmr1.c"
 14228 ;; Parameters:    Size  Location     Type
 14229 ;;		None
 14230 ;; Auto vars:     Size  Location     Type
 14231 ;;		None
 14232 ;; Return value:  Size  Location     Type
 14233 ;;                  1    wreg      void 
 14234 ;; Registers used:
 14235 ;;		wreg, status,2, status,0, pclath, cstack
 14236 ;; Tracked objects:
 14237 ;;		On entry : 0/0
 14238 ;;		On exit  : 0/0
 14239 ;;		Unchanged: 0/0
 14240 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14241 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14242 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14243 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14244 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14245 ;;Total ram usage:        0 bytes
 14246 ;; Hardware stack levels used:    1
 14247 ;; Hardware stack levels required when called:    1
 14248 ;; This function calls:
 14249 ;;		Absolute function
 14250 ;;		_TMR1_DefaultInterruptHandler
 14251 ;;		_Timeout_increment
 14252 ;; This function is called by:
 14253 ;;		_TMR1_ISR
 14254 ;; This function uses a non-reentrant model
 14255 ;;
 14256                           
 14257                           
 14258                           ;psect for function _TMR1_CallBack
 14259  158D                     _TMR1_CallBack:	
 14260                           
 14261                           ;tmr1.c: 174: Timeout_increment();
 14262                           
 14263                           ;incstack = 0
 14264                           ; Regs used in _TMR1_CallBack: [wreg+status,2+status,0+pclath+cstack]
 14265  158D  3188  2001  3195   	fcall	_Timeout_increment
 14266                           
 14267                           ;tmr1.c: 175: if(TMR1_InterruptHandler)
 14268  1590  0022               	movlb	2	; select bank2
 14269  1591  0867               	movf	_TMR1_InterruptHandler^(0+256),w
 14270  1592  0468               	iorwf	(_TMR1_InterruptHandler+1)^(0+256),w
 14271  1593  1903               	btfsc	3,2
 14272  1594  0008               	return
 14273                           
 14274                           ;tmr1.c: 176: {
 14275                           ;tmr1.c: 177: TMR1_InterruptHandler();
 14276  1595  0868               	movf	(_TMR1_InterruptHandler+1)^(0+256),w
 14277  1596  008A               	movwf	10
 14278  1597  0867               	movf	_TMR1_InterruptHandler^(0+256),w
 14279  1598  000A               	callw
 14280  1599  3195               	pagesel	$
 14281  159A  0008               	return
 14282  159B                     __end_of_TMR1_CallBack:	
 14283                           
 14284                           	psect	text83
 14285  0801                     __ptext83:	
 14286 ;; *************** function _Timeout_increment *****************
 14287 ;; Defined at:
 14288 ;;		line 7 in file "timeout.c"
 14289 ;; Parameters:    Size  Location     Type
 14290 ;;		None
 14291 ;; Auto vars:     Size  Location     Type
 14292 ;;		None
 14293 ;; Return value:  Size  Location     Type
 14294 ;;                  1    wreg      void 
 14295 ;; Registers used:
 14296 ;;		wreg
 14297 ;; Tracked objects:
 14298 ;;		On entry : 0/0
 14299 ;;		On exit  : 0/0
 14300 ;;		Unchanged: 0/0
 14301 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14302 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14303 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14304 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14305 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14306 ;;Total ram usage:        0 bytes
 14307 ;; Hardware stack levels used:    1
 14308 ;; This function calls:
 14309 ;;		Nothing
 14310 ;; This function is called by:
 14311 ;;		_TMR1_CallBack
 14312 ;; This function uses a non-reentrant model
 14313 ;;
 14314                           
 14315                           
 14316                           ;psect for function _Timeout_increment
 14317  0801                     _Timeout_increment:	
 14318                           
 14319                           ;timeout.c: 9: globalCounter+=5000;
 14320                           
 14321                           ;incstack = 0
 14322                           ; Regs used in _Timeout_increment: [wreg]
 14323  0801  3088               	movlw	136
 14324  0802  0021               	movlb	1	; select bank1
 14325  0803  07CC               	addwf	_globalCounter^(0+128),f	;volatile
 14326  0804  3013               	movlw	19
 14327  0805  3DCD               	addwfc	(_globalCounter+1)^(0+128),f	;volatile
 14328  0806  3000               	movlw	0
 14329  0807  3DCE               	addwfc	(_globalCounter+2)^(0+128),f	;volatile
 14330  0808  3000               	movlw	0
 14331  0809  3DCF               	addwfc	(_globalCounter+3)^(0+128),f	;volatile
 14332  080A  0008               	return
 14333  080B                     __end_of_Timeout_increment:	
 14334                           
 14335                           	psect	text84
 14336  07FE                     __ptext84:	
 14337 ;; *************** function _TMR1_DefaultInterruptHandler *****************
 14338 ;; Defined at:
 14339 ;;		line 185 in file "mcc_generated_files/tmr1.c"
 14340 ;; Parameters:    Size  Location     Type
 14341 ;;		None
 14342 ;; Auto vars:     Size  Location     Type
 14343 ;;		None
 14344 ;; Return value:  Size  Location     Type
 14345 ;;                  1    wreg      void 
 14346 ;; Registers used:
 14347 ;;		None
 14348 ;; Tracked objects:
 14349 ;;		On entry : 0/0
 14350 ;;		On exit  : 0/0
 14351 ;;		Unchanged: 0/0
 14352 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14353 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14354 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14355 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14356 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14357 ;;Total ram usage:        0 bytes
 14358 ;; Hardware stack levels used:    1
 14359 ;; This function calls:
 14360 ;;		Nothing
 14361 ;; This function is called by:
 14362 ;;		_TMR1_Initialize
 14363 ;;		_TMR1_CallBack
 14364 ;; This function uses a non-reentrant model
 14365 ;;
 14366                           
 14367                           
 14368                           ;psect for function _TMR1_DefaultInterruptHandler
 14369  07FE                     _TMR1_DefaultInterruptHandler:	
 14370                           
 14371                           ;incstack = 0
 14372                           ; Regs used in _TMR1_DefaultInterruptHandler: []
 14373  07FE  0008               	return
 14374  07FF                     __end_of_TMR1_DefaultInterruptHandler:	
 14375                           
 14376                           	psect	text85
 14377  14EC                     __ptext85:	
 14378 ;; *************** function _PIN_MANAGER_IOC *****************
 14379 ;; Defined at:
 14380 ;;		line 110 in file "mcc_generated_files/pin_manager.c"
 14381 ;; Parameters:    Size  Location     Type
 14382 ;;		None
 14383 ;; Auto vars:     Size  Location     Type
 14384 ;;		None
 14385 ;; Return value:  Size  Location     Type
 14386 ;;                  1    wreg      void 
 14387 ;; Registers used:
 14388 ;;		wreg, status,2, status,0, pclath, cstack
 14389 ;; Tracked objects:
 14390 ;;		On entry : 0/0
 14391 ;;		On exit  : 0/0
 14392 ;;		Unchanged: 0/0
 14393 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14394 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14395 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14396 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14397 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14398 ;;Total ram usage:        0 bytes
 14399 ;; Hardware stack levels used:    1
 14400 ;; Hardware stack levels required when called:    2
 14401 ;; This function calls:
 14402 ;;		_IOCAF2_ISR
 14403 ;; This function is called by:
 14404 ;;		_INTERRUPT_InterruptManager
 14405 ;; This function uses a non-reentrant model
 14406 ;;
 14407                           
 14408                           
 14409                           ;psect for function _PIN_MANAGER_IOC
 14410  14EC                     _PIN_MANAGER_IOC:	
 14411                           
 14412                           ;pin_manager.c: 113: if(IOCAFbits.IOCAF2 == 1)
 14413                           
 14414                           ;incstack = 0
 14415                           ; Regs used in _PIN_MANAGER_IOC: [wreg+status,2+status,0+pclath+cstack]
 14416  14EC  0027               	movlb	7	; select bank7
 14417  14ED  1D13               	btfss	19,2	;volatile
 14418  14EE  0008               	return
 14419                           
 14420                           ;pin_manager.c: 114: {
 14421                           ;pin_manager.c: 115: IOCAF2_ISR();
 14422  14EF  3195  2573         	fcall	_IOCAF2_ISR
 14423  14F1  0008               	return
 14424  14F2                     __end_of_PIN_MANAGER_IOC:	
 14425                           
 14426                           	psect	text86
 14427  1573                     __ptext86:	
 14428 ;; *************** function _IOCAF2_ISR *****************
 14429 ;; Defined at:
 14430 ;;		line 124 in file "mcc_generated_files/pin_manager.c"
 14431 ;; Parameters:    Size  Location     Type
 14432 ;;		None
 14433 ;; Auto vars:     Size  Location     Type
 14434 ;;		None
 14435 ;; Return value:  Size  Location     Type
 14436 ;;                  1    wreg      void 
 14437 ;; Registers used:
 14438 ;;		wreg, status,2, status,0, pclath, cstack
 14439 ;; Tracked objects:
 14440 ;;		On entry : 0/0
 14441 ;;		On exit  : 0/0
 14442 ;;		Unchanged: 0/0
 14443 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14444 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14445 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14446 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14447 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14448 ;;Total ram usage:        0 bytes
 14449 ;; Hardware stack levels used:    1
 14450 ;; Hardware stack levels required when called:    1
 14451 ;; This function calls:
 14452 ;;		Absolute function
 14453 ;;		_IOCAF2_DefaultInterruptHandler
 14454 ;; This function is called by:
 14455 ;;		_PIN_MANAGER_IOC
 14456 ;; This function uses a non-reentrant model
 14457 ;;
 14458                           
 14459                           
 14460                           ;psect for function _IOCAF2_ISR
 14461  1573                     _IOCAF2_ISR:	
 14462                           
 14463                           ;pin_manager.c: 129: if(IOCAF2_InterruptHandler)
 14464                           
 14465                           ;incstack = 0
 14466                           ; Regs used in _IOCAF2_ISR: [wreg+status,2+status,0+pclath+cstack]
 14467  1573  0022               	movlb	2	; select bank2
 14468  1574  0869               	movf	_IOCAF2_InterruptHandler^(0+256),w
 14469  1575  046A               	iorwf	(_IOCAF2_InterruptHandler+1)^(0+256),w
 14470  1576  1903               	btfsc	3,2
 14471  1577  2D7D               	goto	i1l4048
 14472                           
 14473                           ;pin_manager.c: 130: {
 14474                           ;pin_manager.c: 131: IOCAF2_InterruptHandler();
 14475  1578  086A               	movf	(_IOCAF2_InterruptHandler+1)^(0+256),w
 14476  1579  008A               	movwf	10
 14477  157A  0869               	movf	_IOCAF2_InterruptHandler^(0+256),w
 14478  157B  000A               	callw
 14479  157C  3195               	pagesel	$
 14480  157D                     i1l4048:	
 14481                           
 14482                           ;pin_manager.c: 132: }
 14483                           ;pin_manager.c: 133: IOCAFbits.IOCAF2 = 0;
 14484  157D  0027               	movlb	7	; select bank7
 14485  157E  1113               	bcf	19,2	;volatile
 14486  157F  0008               	return
 14487  1580                     __end_of_IOCAF2_ISR:	
 14488                           
 14489                           	psect	text87
 14490  07FF                     __ptext87:	
 14491 ;; *************** function _IOCAF2_DefaultInterruptHandler *****************
 14492 ;; Defined at:
 14493 ;;		line 146 in file "mcc_generated_files/pin_manager.c"
 14494 ;; Parameters:    Size  Location     Type
 14495 ;;		None
 14496 ;; Auto vars:     Size  Location     Type
 14497 ;;		None
 14498 ;; Return value:  Size  Location     Type
 14499 ;;                  1    wreg      void 
 14500 ;; Registers used:
 14501 ;;		None
 14502 ;; Tracked objects:
 14503 ;;		On entry : 0/0
 14504 ;;		On exit  : 0/0
 14505 ;;		Unchanged: 0/0
 14506 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14507 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14508 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14509 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14510 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14511 ;;Total ram usage:        0 bytes
 14512 ;; Hardware stack levels used:    1
 14513 ;; This function calls:
 14514 ;;		Nothing
 14515 ;; This function is called by:
 14516 ;;		_PIN_MANAGER_Initialize
 14517 ;;		_IOCAF2_ISR
 14518 ;; This function uses a non-reentrant model
 14519 ;;
 14520                           
 14521                           
 14522                           ;psect for function _IOCAF2_DefaultInterruptHandler
 14523  07FF                     _IOCAF2_DefaultInterruptHandler:	
 14524                           
 14525                           ;incstack = 0
 14526                           ; Regs used in _IOCAF2_DefaultInterruptHandler: []
 14527  07FF  0008               	return
 14528  0800                     __end_of_IOCAF2_DefaultInterruptHandler:	
 14529                           
 14530                           	psect	text88
 14531  04A5                     __ptext88:	
 14532 ;; *************** function _I2C2_ISR *****************
 14533 ;; Defined at:
 14534 ;;		line 233 in file "mcc_generated_files/i2c2.c"
 14535 ;; Parameters:    Size  Location     Type
 14536 ;;		None
 14537 ;; Auto vars:     Size  Location     Type
 14538 ;;		None
 14539 ;; Return value:  Size  Location     Type
 14540 ;;                  1    wreg      void 
 14541 ;; Registers used:
 14542 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14543 ;; Tracked objects:
 14544 ;;		On entry : 0/0
 14545 ;;		On exit  : 0/0
 14546 ;;		Unchanged: 0/0
 14547 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14548 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14549 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14550 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14551 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14552 ;;Total ram usage:        4 bytes
 14553 ;; Hardware stack levels used:    1
 14554 ;; Hardware stack levels required when called:    1
 14555 ;; This function calls:
 14556 ;;		_I2C2_FunctionComplete
 14557 ;;		_I2C2_Stop
 14558 ;; This function is called by:
 14559 ;;		_INTERRUPT_InterruptManager
 14560 ;; This function uses a non-reentrant model
 14561 ;;
 14562                           
 14563                           
 14564                           ;psect for function _I2C2_ISR
 14565  04A5                     _I2C2_ISR:	
 14566                           
 14567                           ;i2c2.c: 236: static uint8_t *pi2c_buf_ptr;
 14568                           ;i2c2.c: 237: static uint16_t i2c_address = 0;
 14569                           ;i2c2.c: 238: static uint8_t i2c_bytes_left = 0;
 14570                           ;i2c2.c: 239: static uint8_t i2c_10bit_address_restart = 0;
 14571                           ;i2c2.c: 241: PIR4bits.SSP2IF = 0;
 14572                           
 14573                           ;incstack = 0
 14574                           ; Regs used in _I2C2_ISR: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 14575  04A5  0020               	movlb	0	; select bank0
 14576  04A6  1014               	bcf	20,0	;volatile
 14577                           
 14578                           ;i2c2.c: 245: if(SSP2CON1bits.WCOL)
 14579  04A7  0024               	movlb	4	; select bank4
 14580  04A8  1F9D               	btfss	29,7	;volatile
 14581  04A9  2DDF               	goto	i1l4588
 14582                           
 14583                           ;i2c2.c: 246: {
 14584                           ;i2c2.c: 248: SSP2CON1bits.WCOL = 0;
 14585  04AA  139D               	bcf	29,7	;volatile
 14586                           
 14587                           ;i2c2.c: 249: i2c2_state = S_MASTER_IDLE;
 14588  04AB  01F9               	clrf	_i2c2_state
 14589                           
 14590                           ;i2c2.c: 250: *(p_i2c2_current->pTrFlag) = I2C2_MESSAGE_FAIL;
 14591  04AC  0877               	movf	_p_i2c2_current,w
 14592  04AD  3E02               	addlw	2
 14593  04AE  0086               	movwf	6
 14594  04AF  0187               	clrf	7
 14595  04B0  3F40               	moviw [0]fsr1
 14596  04B1  00F3               	movwf	??_I2C2_ISR
 14597  04B2  3F41               	moviw [1]fsr1
 14598  04B3  00F4               	movwf	??_I2C2_ISR+1
 14599  04B4  0873               	movf	??_I2C2_ISR,w
 14600  04B5  0086               	movwf	6
 14601  04B6  0874               	movf	??_I2C2_ISR+1,w
 14602  04B7  0087               	movwf	7
 14603  04B8  3001               	movlw	1
 14604  04B9  0081               	movwf	1
 14605                           
 14606                           ;i2c2.c: 253: p_i2c2_current = (0);
 14607  04BA  01F7               	clrf	_p_i2c2_current
 14608                           
 14609                           ;i2c2.c: 255: return;
 14610  04BB  0008               	return
 14611  04BC                     i1l288:	
 14612                           ;i2c2.c: 260: {
 14613                           ;i2c2.c: 261: case S_MASTER_IDLE:
 14614                           
 14615                           ;i2c2.c: 256: }
 14616                           ;i2c2.c: 259: switch(i2c2_state)
 14617                           
 14618                           
 14619                           ;i2c2.c: 263: if(i2c2_object.trStatus.s.empty != 1)
 14620  04BC  0021               	movlb	1	; select bank1
 14621  04BD  18C9               	btfsc	(_i2c2_object^(0+128)+2),1
 14622  04BE  0008               	return
 14623                           
 14624                           ;i2c2.c: 264: {
 14625                           ;i2c2.c: 266: p_i2c2_current = i2c2_object.pTrHead;
 14626  04BF  0848               	movf	(low ((_i2c2_object| 0+1)))^(0+128),w
 14627  04C0  00F3               	movwf	??_I2C2_ISR
 14628  04C1  0873               	movf	??_I2C2_ISR,w
 14629  04C2  00F7               	movwf	_p_i2c2_current
 14630                           
 14631                           ;i2c2.c: 267: i2c2_trb_count = i2c2_object.pTrHead->count;
 14632  04C3  0848               	movf	(low ((_i2c2_object| 0+1)))^(0+128),w
 14633  04C4  0086               	movwf	6
 14634  04C5  0187               	clrf	7
 14635  04C6  0801               	movf	1,w
 14636  04C7  00F3               	movwf	??_I2C2_ISR
 14637  04C8  0873               	movf	??_I2C2_ISR,w
 14638  04C9  00E0               	movwf	_i2c2_trb_count^(0+128)
 14639                           
 14640                           ;i2c2.c: 268: p_i2c2_trb_current = i2c2_object.pTrHead->ptrb_list;
 14641  04CA  0848               	movf	(low ((_i2c2_object| 0+1)))^(0+128),w
 14642  04CB  0086               	movwf	6
 14643  04CC  0187               	clrf	7
 14644  04CD  3F41               	moviw [1]fsr1
 14645  04CE  00F8               	movwf	_p_i2c2_trb_current
 14646                           
 14647                           ;i2c2.c: 270: i2c2_object.pTrHead++;
 14648  04CF  3004               	movlw	4
 14649  04D0  00F3               	movwf	??_I2C2_ISR
 14650  04D1  0873               	movf	??_I2C2_ISR,w
 14651  04D2  07C8               	addwf	(low ((_i2c2_object| 0+1)))^(0+128),f
 14652                           
 14653                           ;i2c2.c: 273: if(i2c2_object.pTrHead == (i2c2_tr_queue + 1))
 14654  04D3  0848               	movf	(low ((_i2c2_object| 0+1)))^(0+128),w
 14655  04D4  3AE5               	xorlw	(low ((_i2c2_tr_queue| 0+4)))& (0+255)
 14656  04D5  1D03               	skipz
 14657  04D6  2CDB               	goto	i1l4478
 14658                           
 14659                           ;i2c2.c: 274: {
 14660                           ;i2c2.c: 276: i2c2_object.pTrHead = i2c2_tr_queue;
 14661  04D7  30E1               	movlw	(low (_i2c2_tr_queue| 0))& (0+255)
 14662  04D8  00F3               	movwf	??_I2C2_ISR
 14663  04D9  0873               	movf	??_I2C2_ISR,w
 14664  04DA  00C8               	movwf	(low ((_i2c2_object| 0+1)))^(0+128)
 14665  04DB                     i1l4478:	
 14666                           
 14667                           ;i2c2.c: 277: }
 14668                           ;i2c2.c: 281: i2c2_object.trStatus.s.full = 0;
 14669  04DB  1049               	bcf	(_i2c2_object^(0+128)+2),0
 14670                           
 14671                           ;i2c2.c: 284: if(i2c2_object.pTrHead == i2c2_object.pTrTail)
 14672  04DC  0848               	movf	(low ((_i2c2_object| 0+1)))^(0+128),w
 14673  04DD  0647               	xorwf	_i2c2_object^(0+128),w
 14674  04DE  1903               	btfsc	3,2
 14675                           
 14676                           ;i2c2.c: 285: {
 14677                           ;i2c2.c: 287: i2c2_object.trStatus.s.empty = 1;
 14678  04DF  14C9               	bsf	(_i2c2_object^(0+128)+2),1
 14679                           
 14680                           ;i2c2.c: 288: }
 14681                           ;i2c2.c: 291: SSP2CON2bits.SEN = 1;
 14682  04E0  0024               	movlb	4	; select bank4
 14683  04E1  141E               	bsf	30,0	;volatile
 14684                           
 14685                           ;i2c2.c: 294: i2c2_state = S_MASTER_SEND_ADDR;
 14686  04E2  3002               	movlw	2
 14687  04E3  00F3               	movwf	??_I2C2_ISR
 14688  04E4  0873               	movf	??_I2C2_ISR,w
 14689  04E5  00F9               	movwf	_i2c2_state
 14690                           
 14691                           ;i2c2.c: 295: }
 14692                           ;i2c2.c: 297: break;
 14693  04E6  0008               	return
 14694  04E7                     i1l293:	
 14695                           ;i2c2.c: 299: case S_MASTER_RESTART:
 14696                           
 14697                           
 14698                           ;i2c2.c: 304: SSP2CON2bits.RSEN = 1;
 14699  04E7  0024               	movlb	4	; select bank4
 14700  04E8  149E               	bsf	30,1	;volatile
 14701                           
 14702                           ;i2c2.c: 307: i2c2_state = S_MASTER_SEND_ADDR;
 14703  04E9  3002               	movlw	2
 14704  04EA  00F3               	movwf	??_I2C2_ISR
 14705  04EB  0873               	movf	??_I2C2_ISR,w
 14706  04EC  00F9               	movwf	_i2c2_state
 14707                           
 14708                           ;i2c2.c: 309: break;
 14709  04ED  0008               	return
 14710  04EE                     i1l294:	
 14711                           ;i2c2.c: 311: case S_MASTER_SEND_ADDR_10BIT_LSB:
 14712                           
 14713                           
 14714                           ;i2c2.c: 313: if(SSP2CON2bits.ACKSTAT)
 14715  04EE  0024               	movlb	4	; select bank4
 14716  04EF  1F1E               	btfss	30,6	;volatile
 14717  04F0  2CFA               	goto	i1l4490
 14718                           
 14719                           ;i2c2.c: 314: {
 14720                           ;i2c2.c: 315: i2c2_object.i2cErrors++;
 14721  04F1  3001               	movlw	1
 14722  04F2  00F3               	movwf	??_I2C2_ISR
 14723  04F3  0873               	movf	??_I2C2_ISR,w
 14724  04F4  0021               	movlb	1	; select bank1
 14725  04F5  07CB               	addwf	(_i2c2_object^(0+128)+4),f
 14726                           
 14727                           ;i2c2.c: 316: I2C2_Stop(I2C2_MESSAGE_ADDRESS_NO_ACK);
 14728  04F6  3004               	movlw	4
 14729  04F7  3197  2703         	fcall	_I2C2_Stop
 14730                           
 14731                           ;i2c2.c: 317: }
 14732  04F9  0008               	return
 14733  04FA                     i1l4490:	
 14734                           
 14735                           ;i2c2.c: 318: else
 14736                           ;i2c2.c: 319: {
 14737                           ;i2c2.c: 321: SSP2BUF = (i2c_address >> 1) & 0x00FF;
 14738  04FA  087B               	movf	I2C2_ISR@i2c_address+1,w
 14739  04FB  00F4               	movwf	??_I2C2_ISR+1
 14740  04FC  087A               	movf	I2C2_ISR@i2c_address,w
 14741  04FD  00F3               	movwf	??_I2C2_ISR
 14742  04FE  36F4               	lsrf	??_I2C2_ISR+1,f
 14743  04FF  0CF3               	rrf	??_I2C2_ISR,f
 14744  0500  0873               	movf	??_I2C2_ISR,w
 14745  0501  0024               	movlb	4	; select bank4
 14746  0502  0099               	movwf	25	;volatile
 14747                           
 14748                           ;i2c2.c: 324: if(i2c_address & 0x01)
 14749  0503  1C7A               	btfss	I2C2_ISR@i2c_address,0
 14750  0504  2D0A               	goto	i1l4496
 14751                           
 14752                           ;i2c2.c: 325: {
 14753                           ;i2c2.c: 328: i2c2_state = S_MASTER_10BIT_RESTART;
 14754  0505  300B               	movlw	11
 14755  0506  00F3               	movwf	??_I2C2_ISR
 14756  0507  0873               	movf	??_I2C2_ISR,w
 14757  0508  00F9               	movwf	_i2c2_state
 14758                           
 14759                           ;i2c2.c: 329: }
 14760  0509  0008               	return
 14761  050A                     i1l4496:	
 14762                           
 14763                           ;i2c2.c: 330: else
 14764                           ;i2c2.c: 331: {
 14765                           ;i2c2.c: 333: i2c2_state = S_MASTER_SEND_DATA;
 14766  050A  3003               	movlw	3
 14767  050B  00F3               	movwf	??_I2C2_ISR
 14768  050C  0873               	movf	??_I2C2_ISR,w
 14769  050D  00F9               	movwf	_i2c2_state
 14770                           
 14771                           ;i2c2.c: 334: }
 14772                           ;i2c2.c: 335: }
 14773                           ;i2c2.c: 337: break;
 14774  050E  0008               	return
 14775  050F                     i1l299:	
 14776                           ;i2c2.c: 339: case S_MASTER_10BIT_RESTART:
 14777                           
 14778                           
 14779                           ;i2c2.c: 341: if(SSP2CON2bits.ACKSTAT)
 14780  050F  0024               	movlb	4	; select bank4
 14781  0510  1F1E               	btfss	30,6	;volatile
 14782  0511  2D1B               	goto	i1l300
 14783                           
 14784                           ;i2c2.c: 342: {
 14785                           ;i2c2.c: 343: i2c2_object.i2cErrors++;
 14786  0512  3001               	movlw	1
 14787  0513  00F3               	movwf	??_I2C2_ISR
 14788  0514  0873               	movf	??_I2C2_ISR,w
 14789  0515  0021               	movlb	1	; select bank1
 14790  0516  07CB               	addwf	(_i2c2_object^(0+128)+4),f
 14791                           
 14792                           ;i2c2.c: 344: I2C2_Stop(I2C2_MESSAGE_ADDRESS_NO_ACK);
 14793  0517  3004               	movlw	4
 14794  0518  3197  2703         	fcall	_I2C2_Stop
 14795                           
 14796                           ;i2c2.c: 345: }
 14797  051A  0008               	return
 14798  051B                     i1l300:	
 14799                           
 14800                           ;i2c2.c: 346: else
 14801                           ;i2c2.c: 347: {
 14802                           ;i2c2.c: 350: SSP2CON2bits.RSEN = 1;
 14803  051B  149E               	bsf	30,1	;volatile
 14804                           
 14805                           ;i2c2.c: 354: i2c_address = 0x00F0 | ((i2c_address >> 8) & 0x0006);
 14806  051C  087B               	movf	I2C2_ISR@i2c_address+1,w
 14807  051D  00F4               	movwf	??_I2C2_ISR+1
 14808  051E  087A               	movf	I2C2_ISR@i2c_address,w
 14809  051F  00F3               	movwf	??_I2C2_ISR
 14810  0520  0874               	movf	??_I2C2_ISR+1,w
 14811  0521  00F3               	movwf	??_I2C2_ISR
 14812  0522  01F4               	clrf	??_I2C2_ISR+1
 14813  0523  3006               	movlw	6
 14814  0524  0573               	andwf	??_I2C2_ISR,w
 14815  0525  00F5               	movwf	??_I2C2_ISR+2
 14816  0526  3000               	movlw	0
 14817  0527  0574               	andwf	??_I2C2_ISR+1,w
 14818  0528  00F6               	movwf	??_I2C2_ISR+3
 14819  0529  30F0               	movlw	240
 14820  052A  0475               	iorwf	??_I2C2_ISR+2,w
 14821  052B  00FA               	movwf	I2C2_ISR@i2c_address
 14822  052C  3000               	movlw	0
 14823  052D  0476               	iorwf	??_I2C2_ISR+3,w
 14824  052E  00FB               	movwf	I2C2_ISR@i2c_address+1
 14825                           
 14826                           ;i2c2.c: 357: i2c_address |= 0x0001;
 14827  052F  147A               	bsf	I2C2_ISR@i2c_address,0
 14828                           
 14829                           ;i2c2.c: 360: i2c_10bit_address_restart = 1;
 14830  0530  0021               	movlb	1	; select bank1
 14831  0531  01DE               	clrf	I2C2_ISR@i2c_10bit_address_restart^(0+128)
 14832  0532  0ADE               	incf	I2C2_ISR@i2c_10bit_address_restart^(0+128),f
 14833                           
 14834                           ;i2c2.c: 363: i2c2_state = S_MASTER_SEND_ADDR;
 14835  0533  3002               	movlw	2
 14836  0534  00F3               	movwf	??_I2C2_ISR
 14837  0535  0873               	movf	??_I2C2_ISR,w
 14838  0536  00F9               	movwf	_i2c2_state
 14839                           
 14840                           ;i2c2.c: 364: }
 14841                           ;i2c2.c: 366: break;
 14842  0537  0008               	return
 14843  0538                     i1l4510:	
 14844                           ;i2c2.c: 368: case S_MASTER_SEND_ADDR:
 14845                           
 14846                           
 14847                           ;i2c2.c: 381: if(i2c_10bit_address_restart != 1)
 14848  0538  0021               	movlb	1	; select bank1
 14849  0539  035E               	decf	I2C2_ISR@i2c_10bit_address_restart^(0+128),w
 14850  053A  1903               	btfsc	3,2
 14851  053B  2D54               	goto	i1l4528
 14852                           
 14853                           ;i2c2.c: 382: {
 14854                           ;i2c2.c: 384: i2c_address = p_i2c2_trb_current->address;
 14855  053C  0878               	movf	_p_i2c2_trb_current,w
 14856  053D  0086               	movwf	6
 14857  053E  3001               	movlw	1	; select bank2/3
 14858  053F  0087               	movwf	7
 14859  0540  3F40               	moviw [0]fsr1
 14860  0541  00FA               	movwf	I2C2_ISR@i2c_address
 14861  0542  3F41               	moviw [1]fsr1
 14862  0543  00FB               	movwf	I2C2_ISR@i2c_address+1
 14863                           
 14864                           ;i2c2.c: 385: pi2c_buf_ptr = p_i2c2_trb_current->pbuffer;
 14865  0544  0878               	movf	_p_i2c2_trb_current,w
 14866  0545  3E03               	addlw	3
 14867  0546  0086               	movwf	6
 14868  0547  3001               	movlw	1	; select bank2/3
 14869  0548  0087               	movwf	7
 14870  0549  3F40               	moviw [0]fsr1
 14871  054A  00D9               	movwf	I2C2_ISR@pi2c_buf_ptr^(0+128)
 14872  054B  3F41               	moviw [1]fsr1
 14873  054C  00DA               	movwf	(I2C2_ISR@pi2c_buf_ptr+1)^(0+128)
 14874                           
 14875                           ;i2c2.c: 386: i2c_bytes_left = p_i2c2_trb_current->length;
 14876  054D  0878               	movf	_p_i2c2_trb_current,w
 14877  054E  0086               	movwf	6
 14878  054F  3001               	movlw	1	; select bank2/3
 14879  0550  0087               	movwf	7
 14880  0551  3001               	movlw	1	; select bank2/3
 14881  0552  3F42               	moviw [2]fsr1
 14882  0553  00DF               	movwf	I2C2_ISR@i2c_bytes_left^(0+128)
 14883  0554                     i1l4528:	
 14884                           ;i2c2.c: 407: }
 14885                           ;i2c2.c: 408: }
 14886                           
 14887                           ;i2c2.c: 406: i2c_10bit_address_restart = 0;
 14888                           
 14889                           ;i2c2.c: 404: i2c2_state = S_MASTER_ACK_ADDR;
 14890                           
 14891                           ;i2c2.c: 400: else
 14892                           ;i2c2.c: 401: {
 14893                           ;i2c2.c: 403: SSP2BUF = i2c_address;
 14894                           
 14895                           ;i2c2.c: 399: }
 14896                           
 14897                           ;i2c2.c: 398: i2c2_state = S_MASTER_SEND_ADDR_10BIT_LSB;
 14898                           
 14899                           ;i2c2.c: 393: {
 14900                           ;i2c2.c: 397: SSP2BUF = 0xF0 | ((i2c_address >> 8) & 0x0006);
 14901                           
 14902                           ;i2c2.c: 391: {
 14903                           ;i2c2.c: 392: if (0 == i2c_10bit_address_restart)
 14904                           
 14905                           ;i2c2.c: 387: }
 14906                           ;i2c2.c: 390: if(!1 && (0x0 != i2c_address))
 14907                           
 14908                           
 14909                           ;i2c2.c: 409: else
 14910                           ;i2c2.c: 410: {
 14911                           ;i2c2.c: 412: SSP2BUF = i2c_address;
 14912  0554  087A               	movf	I2C2_ISR@i2c_address,w
 14913  0555  0024               	movlb	4	; select bank4
 14914  0556  0099               	movwf	25	;volatile
 14915                           
 14916                           ;i2c2.c: 413: if(i2c_address & 0x01)
 14917  0557  1C7A               	btfss	I2C2_ISR@i2c_address,0
 14918  0558  2D5E               	goto	i1l4534
 14919                           
 14920                           ;i2c2.c: 414: {
 14921                           ;i2c2.c: 416: i2c2_state = S_MASTER_ACK_ADDR;
 14922  0559  3005               	movlw	5
 14923  055A  00F3               	movwf	??_I2C2_ISR
 14924  055B  0873               	movf	??_I2C2_ISR,w
 14925  055C  00F9               	movwf	_i2c2_state
 14926                           
 14927                           ;i2c2.c: 417: }
 14928  055D  0008               	return
 14929  055E                     i1l4534:	
 14930                           
 14931                           ;i2c2.c: 418: else
 14932                           ;i2c2.c: 419: {
 14933                           ;i2c2.c: 421: i2c2_state = S_MASTER_SEND_DATA;
 14934  055E  3003               	movlw	3
 14935  055F  00F3               	movwf	??_I2C2_ISR
 14936  0560  0873               	movf	??_I2C2_ISR,w
 14937  0561  00F9               	movwf	_i2c2_state
 14938                           
 14939                           ;i2c2.c: 422: }
 14940                           ;i2c2.c: 423: }
 14941                           ;i2c2.c: 424: break;
 14942  0562  0008               	return
 14943  0563                     i1l310:	
 14944                           ;i2c2.c: 426: case S_MASTER_SEND_DATA:
 14945                           
 14946                           
 14947                           ;i2c2.c: 429: if(SSP2CON2bits.ACKSTAT)
 14948  0563  0024               	movlb	4	; select bank4
 14949  0564  1F1E               	btfss	30,6	;volatile
 14950  0565  2D71               	goto	i1l4542
 14951                           
 14952                           ;i2c2.c: 430: {
 14953                           ;i2c2.c: 432: i2c2_object.i2cErrors++;
 14954  0566  3001               	movlw	1
 14955  0567  00F3               	movwf	??_I2C2_ISR
 14956  0568  0873               	movf	??_I2C2_ISR,w
 14957  0569  0021               	movlb	1	; select bank1
 14958  056A  07CB               	addwf	(_i2c2_object^(0+128)+4),f
 14959                           
 14960                           ;i2c2.c: 435: SSP2CON2bits.ACKSTAT = 0;
 14961  056B  0024               	movlb	4	; select bank4
 14962  056C  131E               	bcf	30,6	;volatile
 14963                           
 14964                           ;i2c2.c: 438: I2C2_Stop(I2C2_DATA_NO_ACK);
 14965  056D  3005               	movlw	5
 14966  056E  3197  2703         	fcall	_I2C2_Stop
 14967                           
 14968                           ;i2c2.c: 440: }
 14969  0570  0008               	return
 14970  0571                     i1l4542:	
 14971                           
 14972                           ;i2c2.c: 441: else
 14973                           ;i2c2.c: 442: {
 14974                           ;i2c2.c: 444: if(i2c_bytes_left-- == 0U)
 14975  0571  3001               	movlw	1
 14976  0572  0021               	movlb	1	; select bank1
 14977  0573  02DF               	subwf	I2C2_ISR@i2c_bytes_left^(0+128),f
 14978  0574  0A5F               	incf	I2C2_ISR@i2c_bytes_left^(0+128),w
 14979  0575  1D03               	btfss	3,2
 14980  0576  2D8A               	goto	i1l4550
 14981                           
 14982                           ;i2c2.c: 445: {
 14983                           ;i2c2.c: 449: p_i2c2_trb_current++;
 14984  0577  3005               	movlw	5
 14985  0578  00F3               	movwf	??_I2C2_ISR
 14986  0579  0873               	movf	??_I2C2_ISR,w
 14987  057A  07F8               	addwf	_p_i2c2_trb_current,f
 14988                           
 14989                           ;i2c2.c: 452: if(--i2c2_trb_count == 0)
 14990  057B  3001               	movlw	1
 14991  057C  02E0               	subwf	_i2c2_trb_count^(0+128),f
 14992  057D  1D03               	btfss	3,2
 14993  057E  2D83               	goto	i1l314
 14994                           
 14995                           ;i2c2.c: 453: {
 14996                           ;i2c2.c: 454: I2C2_Stop(I2C2_MESSAGE_COMPLETE);
 14997  057F  3000               	movlw	0
 14998  0580  3197  2703         	fcall	_I2C2_Stop
 14999                           
 15000                           ;i2c2.c: 455: }
 15001  0582  0008               	return
 15002  0583                     i1l314:	
 15003                           
 15004                           ;i2c2.c: 456: else
 15005                           ;i2c2.c: 457: {
 15006                           ;i2c2.c: 464: SSP2CON2bits.RSEN = 1;
 15007  0583  0024               	movlb	4	; select bank4
 15008  0584  149E               	bsf	30,1	;volatile
 15009                           
 15010                           ;i2c2.c: 467: i2c2_state = S_MASTER_SEND_ADDR;
 15011  0585  3002               	movlw	2
 15012  0586  00F3               	movwf	??_I2C2_ISR
 15013  0587  0873               	movf	??_I2C2_ISR,w
 15014  0588  00F9               	movwf	_i2c2_state
 15015                           
 15016                           ;i2c2.c: 469: }
 15017                           ;i2c2.c: 470: }
 15018  0589  0008               	return
 15019  058A                     i1l4550:	
 15020                           
 15021                           ;i2c2.c: 471: else
 15022                           ;i2c2.c: 472: {
 15023                           ;i2c2.c: 474: SSP2BUF = *pi2c_buf_ptr++;
 15024  058A  0021               	movlb	1	; select bank1
 15025  058B  0859               	movf	I2C2_ISR@pi2c_buf_ptr^(0+128),w
 15026  058C  0086               	movwf	6
 15027  058D  085A               	movf	(I2C2_ISR@pi2c_buf_ptr+1)^(0+128),w
 15028  058E  0087               	movwf	7
 15029  058F  0801               	movf	1,w
 15030  0590  0024               	movlb	4	; select bank4
 15031  0591  0099               	movwf	25	;volatile
 15032  0592  3001               	movlw	1
 15033  0593  0021               	movlb	1	; select bank1
 15034  0594  07D9               	addwf	I2C2_ISR@pi2c_buf_ptr^(0+128),f
 15035  0595  3000               	movlw	0
 15036  0596  3DDA               	addwfc	(I2C2_ISR@pi2c_buf_ptr+1)^(0+128),f
 15037                           
 15038                           ;i2c2.c: 475: }
 15039                           ;i2c2.c: 476: }
 15040                           ;i2c2.c: 477: break;
 15041  0597  0008               	return
 15042  0598                     i1l317:	
 15043                           ;i2c2.c: 479: case S_MASTER_ACK_ADDR:
 15044                           
 15045                           
 15046                           ;i2c2.c: 482: if(SSP2CON2bits.ACKSTAT)
 15047  0598  0024               	movlb	4	; select bank4
 15048  0599  1F1E               	btfss	30,6	;volatile
 15049  059A  2DA6               	goto	i1l318
 15050                           
 15051                           ;i2c2.c: 483: {
 15052                           ;i2c2.c: 486: i2c2_object.i2cErrors++;
 15053  059B  3001               	movlw	1
 15054  059C  00F3               	movwf	??_I2C2_ISR
 15055  059D  0873               	movf	??_I2C2_ISR,w
 15056  059E  0021               	movlb	1	; select bank1
 15057  059F  07CB               	addwf	(_i2c2_object^(0+128)+4),f
 15058                           
 15059                           ;i2c2.c: 489: I2C2_Stop(I2C2_MESSAGE_ADDRESS_NO_ACK);
 15060  05A0  3004               	movlw	4
 15061  05A1  3197  2703         	fcall	_I2C2_Stop
 15062                           
 15063                           ;i2c2.c: 492: SSP2CON2bits.ACKSTAT = 0;
 15064  05A3  0024               	movlb	4	; select bank4
 15065  05A4  131E               	bcf	30,6	;volatile
 15066                           
 15067                           ;i2c2.c: 493: }
 15068  05A5  0008               	return
 15069  05A6                     i1l318:	
 15070                           
 15071                           ;i2c2.c: 494: else
 15072                           ;i2c2.c: 495: {
 15073                           ;i2c2.c: 496: SSP2CON2bits.RCEN = 1;
 15074  05A6  159E               	bsf	30,3	;volatile
 15075                           
 15076                           ;i2c2.c: 497: i2c2_state = S_MASTER_ACK_RCV_DATA;
 15077  05A7  3008               	movlw	8
 15078  05A8  00F3               	movwf	??_I2C2_ISR
 15079  05A9  0873               	movf	??_I2C2_ISR,w
 15080  05AA  00F9               	movwf	_i2c2_state
 15081                           
 15082                           ;i2c2.c: 498: }
 15083                           ;i2c2.c: 499: break;
 15084  05AB  0008               	return
 15085  05AC                     i1l4562:	
 15086                           ;i2c2.c: 501: case S_MASTER_RCV_DATA:
 15087                           
 15088                           
 15089                           ;i2c2.c: 506: i2c2_state = S_MASTER_ACK_RCV_DATA;
 15090  05AC  3008               	movlw	8
 15091  05AD  00F3               	movwf	??_I2C2_ISR
 15092  05AE  0873               	movf	??_I2C2_ISR,w
 15093  05AF  00F9               	movwf	_i2c2_state
 15094                           
 15095                           ;i2c2.c: 509: SSP2CON2bits.RCEN = 1;
 15096  05B0  0024               	movlb	4	; select bank4
 15097  05B1  159E               	bsf	30,3	;volatile
 15098                           
 15099                           ;i2c2.c: 511: break;
 15100  05B2  0008               	return
 15101  05B3                     i1l4566:	
 15102                           ;i2c2.c: 513: case S_MASTER_ACK_RCV_DATA:
 15103                           
 15104                           
 15105                           ;i2c2.c: 516: *pi2c_buf_ptr++ = SSP2BUF;
 15106  05B3  0021               	movlb	1	; select bank1
 15107  05B4  0859               	movf	I2C2_ISR@pi2c_buf_ptr^(0+128),w
 15108  05B5  0086               	movwf	6
 15109  05B6  085A               	movf	(I2C2_ISR@pi2c_buf_ptr+1)^(0+128),w
 15110  05B7  0087               	movwf	7
 15111  05B8  0024               	movlb	4	; select bank4
 15112  05B9  0819               	movf	25,w	;volatile
 15113  05BA  0081               	movwf	1
 15114  05BB  3001               	movlw	1
 15115  05BC  0021               	movlb	1	; select bank1
 15116  05BD  07D9               	addwf	I2C2_ISR@pi2c_buf_ptr^(0+128),f
 15117  05BE  3000               	movlw	0
 15118  05BF  3DDA               	addwfc	(I2C2_ISR@pi2c_buf_ptr+1)^(0+128),f
 15119                           
 15120                           ;i2c2.c: 519: if(--i2c_bytes_left)
 15121  05C0  3001               	movlw	1
 15122  05C1  02DF               	subwf	I2C2_ISR@i2c_bytes_left^(0+128),f
 15123  05C2  1903               	btfsc	3,2
 15124  05C3  2DCB               	goto	i1l322
 15125                           
 15126                           ;i2c2.c: 520: {
 15127                           ;i2c2.c: 526: SSP2CON2bits.ACKDT = 0;
 15128  05C4  0024               	movlb	4	; select bank4
 15129  05C5  129E               	bcf	30,5	;volatile
 15130                           
 15131                           ;i2c2.c: 529: i2c2_state = S_MASTER_RCV_DATA;
 15132  05C6  3006               	movlw	6
 15133  05C7  00F3               	movwf	??_I2C2_ISR
 15134  05C8  0873               	movf	??_I2C2_ISR,w
 15135  05C9  00F9               	movwf	_i2c2_state
 15136                           
 15137                           ;i2c2.c: 530: }
 15138  05CA  2DCF               	goto	i1l4578
 15139  05CB                     i1l322:	
 15140                           
 15141                           ;i2c2.c: 531: else
 15142                           ;i2c2.c: 532: {
 15143                           ;i2c2.c: 536: SSP2CON2bits.ACKDT = 1;
 15144  05CB  0024               	movlb	4	; select bank4
 15145  05CC  169E               	bsf	30,5	;volatile
 15146                           
 15147                           ;i2c2.c: 538: I2C2_FunctionComplete();
 15148  05CD  3195  25D9         	fcall	_I2C2_FunctionComplete
 15149  05CF                     i1l4578:	
 15150                           
 15151                           ;i2c2.c: 539: }
 15152                           ;i2c2.c: 542: SSP2CON2bits.ACKEN = 1;
 15153  05CF  0024               	movlb	4	; select bank4
 15154  05D0  161E               	bsf	30,4	;volatile
 15155                           
 15156                           ;i2c2.c: 543: break;
 15157  05D1  0008               	return
 15158  05D2                     i1l4580:	
 15159                           ;i2c2.c: 545: case S_MASTER_RCV_STOP:
 15160                           
 15161                           
 15162                           ;i2c2.c: 546: case S_MASTER_SEND_STOP:
 15163                           ;i2c2.c: 549: I2C2_Stop(I2C2_MESSAGE_COMPLETE);
 15164  05D2  3000               	movlw	0
 15165  05D3  3197  2703         	fcall	_I2C2_Stop
 15166                           
 15167                           ;i2c2.c: 550: break;
 15168  05D5  0008               	return
 15169  05D6                     i1l4582:	
 15170                           ;i2c2.c: 552: default:
 15171                           
 15172                           
 15173                           ;i2c2.c: 556: i2c2_object.i2cErrors++;
 15174  05D6  3001               	movlw	1
 15175  05D7  00F3               	movwf	??_I2C2_ISR
 15176  05D8  0873               	movf	??_I2C2_ISR,w
 15177  05D9  0021               	movlb	1	; select bank1
 15178  05DA  07CB               	addwf	(_i2c2_object^(0+128)+4),f
 15179                           
 15180                           ;i2c2.c: 557: I2C2_Stop(I2C2_LOST_STATE);
 15181  05DB  3006               	movlw	6
 15182  05DC  3197  2703         	fcall	_I2C2_Stop
 15183                           
 15184                           ;i2c2.c: 560: }
 15185                           
 15186                           ;i2c2.c: 558: break;
 15187  05DE  0008               	return
 15188  05DF                     i1l4588:	
 15189  05DF  0879               	movf	_i2c2_state,w
 15190                           
 15191                           ; Switch size 1, requested type "space"
 15192                           ; Number of cases is 11, Range of values is 0 to 11
 15193                           ; switch strategies available:
 15194                           ; Name         Instructions Cycles
 15195                           ; direct_byte           30     6 (fixed)
 15196                           ; simple_byte           34    18 (average)
 15197                           ; jumptable            260     6 (fixed)
 15198                           ;	Chosen strategy is direct_byte
 15199  05E0  0084               	movwf	4
 15200  05E1  300C               	movlw	12
 15201  05E2  0204               	subwf	4,w
 15202  05E3  1803               	skipnc
 15203  05E4  2DD6               	goto	i1l4582
 15204  05E5  3190               	movlp	high i1S6574
 15205  05E6  3504               	lslf	4,w
 15206  05E7  3E00               	addlw	low i1S6574
 15207  05E8  0082               	movwf	2
 15208  05E9  0008               	return
 15209  05EA                     __end_of_I2C2_ISR:	
 15210                           
 15211                           	psect	swtext1
 15212  1000                     __pswtext1:	
 15213  1000                     i1S6574:	
 15214  1000  3184  2CBC         	ljmp	i1l288
 15215  1002  3184  2CE7         	ljmp	i1l293
 15216  1004  3185  2D38         	ljmp	i1l4510
 15217  1006  3185  2D63         	ljmp	i1l310
 15218  1008  3185  2DD2         	ljmp	i1l4580
 15219  100A  3185  2D98         	ljmp	i1l317
 15220  100C  3185  2DAC         	ljmp	i1l4562
 15221  100E  3185  2DD2         	ljmp	i1l4580
 15222  1010  3185  2DB3         	ljmp	i1l4566
 15223  1012  3185  2DD6         	ljmp	i1l4582
 15224  1014  3184  2CEE         	ljmp	i1l294
 15225  1016  3185  2D0F         	ljmp	i1l299
 15226                           
 15227                           	psect	text89
 15228  1703                     __ptext89:	
 15229 ;; *************** function _I2C2_Stop *****************
 15230 ;; Defined at:
 15231 ;;		line 581 in file "mcc_generated_files/i2c2.c"
 15232 ;; Parameters:    Size  Location     Type
 15233 ;;  completion_c    1    wreg     enum E2993
 15234 ;; Auto vars:     Size  Location     Type
 15235 ;;  completion_c    1    2[COMMON] enum E2993
 15236 ;; Return value:  Size  Location     Type
 15237 ;;                  1    wreg      void 
 15238 ;; Registers used:
 15239 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 15240 ;; Tracked objects:
 15241 ;;		On entry : 0/0
 15242 ;;		On exit  : 0/0
 15243 ;;		Unchanged: 0/0
 15244 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15245 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15246 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15247 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15248 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15249 ;;Total ram usage:        3 bytes
 15250 ;; Hardware stack levels used:    1
 15251 ;; This function calls:
 15252 ;;		Nothing
 15253 ;; This function is called by:
 15254 ;;		_I2C2_ISR
 15255 ;; This function uses a non-reentrant model
 15256 ;;
 15257                           
 15258                           
 15259                           ;psect for function _I2C2_Stop
 15260  1703                     _I2C2_Stop:	
 15261                           
 15262                           ;incstack = 0
 15263                           ; Regs used in _I2C2_Stop: [wreg+fsr1l+fsr1h+status,2+status,0]
 15264                           ;I2C2_Stop@completion_code stored from wreg
 15265  1703  00F2               	movwf	I2C2_Stop@completion_code
 15266                           
 15267                           ;i2c2.c: 584: SSP2CON2bits.PEN = 1;
 15268  1704  0024               	movlb	4	; select bank4
 15269  1705  151E               	bsf	30,2	;volatile
 15270                           
 15271                           ;i2c2.c: 587: if (p_i2c2_current->pTrFlag != (0))
 15272  1706  0877               	movf	_p_i2c2_current,w
 15273  1707  3E02               	addlw	2
 15274  1708  0086               	movwf	6
 15275  1709  0187               	clrf	7
 15276  170A  0016               	moviw fsr1++
 15277  170B  0401               	iorwf	1,w
 15278  170C  1903               	btfsc	3,2
 15279  170D  2F1C               	goto	i1l4062
 15280                           
 15281                           ;i2c2.c: 588: {
 15282                           ;i2c2.c: 590: *(p_i2c2_current->pTrFlag) = completion_code;
 15283  170E  0877               	movf	_p_i2c2_current,w
 15284  170F  3E02               	addlw	2
 15285  1710  0086               	movwf	6
 15286  1711  0187               	clrf	7
 15287  1712  3F40               	moviw [0]fsr1
 15288  1713  00F0               	movwf	??_I2C2_Stop
 15289  1714  3F41               	moviw [1]fsr1
 15290  1715  00F1               	movwf	??_I2C2_Stop+1
 15291  1716  0870               	movf	??_I2C2_Stop,w
 15292  1717  0086               	movwf	6
 15293  1718  0871               	movf	??_I2C2_Stop+1,w
 15294  1719  0087               	movwf	7
 15295  171A  0872               	movf	I2C2_Stop@completion_code,w
 15296  171B  0081               	movwf	1
 15297  171C                     i1l4062:	
 15298                           
 15299                           ;i2c2.c: 591: }
 15300                           ;i2c2.c: 594: i2c2_state = S_MASTER_IDLE;
 15301  171C  01F9               	clrf	_i2c2_state
 15302  171D  0008               	return
 15303  171E                     __end_of_I2C2_Stop:	
 15304                           
 15305                           	psect	text90
 15306  15D9                     __ptext90:	
 15307 ;; *************** function _I2C2_FunctionComplete *****************
 15308 ;; Defined at:
 15309 ;;		line 563 in file "mcc_generated_files/i2c2.c"
 15310 ;; Parameters:    Size  Location     Type
 15311 ;;		None
 15312 ;; Auto vars:     Size  Location     Type
 15313 ;;		None
 15314 ;; Return value:  Size  Location     Type
 15315 ;;                  1    wreg      void 
 15316 ;; Registers used:
 15317 ;;		wreg, status,2, status,0
 15318 ;; Tracked objects:
 15319 ;;		On entry : 0/0
 15320 ;;		On exit  : 0/0
 15321 ;;		Unchanged: 0/0
 15322 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15323 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15324 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15325 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15326 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15327 ;;Total ram usage:        1 bytes
 15328 ;; Hardware stack levels used:    1
 15329 ;; This function calls:
 15330 ;;		Nothing
 15331 ;; This function is called by:
 15332 ;;		_I2C2_ISR
 15333 ;; This function uses a non-reentrant model
 15334 ;;
 15335                           
 15336                           
 15337                           ;psect for function _I2C2_FunctionComplete
 15338  15D9                     _I2C2_FunctionComplete:	
 15339                           
 15340                           ;i2c2.c: 567: p_i2c2_trb_current++;
 15341                           
 15342                           ;incstack = 0
 15343                           ; Regs used in _I2C2_FunctionComplete: [wreg+status,2+status,0]
 15344  15D9  3005               	movlw	5
 15345  15DA  00F0               	movwf	??_I2C2_FunctionComplete
 15346  15DB  0870               	movf	??_I2C2_FunctionComplete,w
 15347  15DC  07F8               	addwf	_p_i2c2_trb_current,f
 15348                           
 15349                           ;i2c2.c: 570: if(--i2c2_trb_count == 0)
 15350  15DD  3001               	movlw	1
 15351  15DE  0021               	movlb	1	; select bank1
 15352  15DF  02E0               	subwf	_i2c2_trb_count^(0+128),f
 15353  15E0  1D03               	btfss	3,2
 15354  15E1  2DE7               	goto	i1l329
 15355                           
 15356                           ;i2c2.c: 571: {
 15357                           ;i2c2.c: 572: i2c2_state = S_MASTER_SEND_STOP;
 15358  15E2  3004               	movlw	4
 15359  15E3  00F0               	movwf	??_I2C2_FunctionComplete
 15360  15E4  0870               	movf	??_I2C2_FunctionComplete,w
 15361  15E5  00F9               	movwf	_i2c2_state
 15362                           
 15363                           ;i2c2.c: 573: }
 15364  15E6  0008               	return
 15365  15E7                     i1l329:	
 15366                           
 15367                           ;i2c2.c: 574: else
 15368                           ;i2c2.c: 575: {
 15369                           ;i2c2.c: 576: i2c2_state = S_MASTER_RESTART;
 15370  15E7  01F9               	clrf	_i2c2_state
 15371  15E8  0AF9               	incf	_i2c2_state,f
 15372  15E9  0008               	return
 15373  15EA                     __end_of_I2C2_FunctionComplete:	
 15374                           
 15375                           	psect	text91
 15376  0003                     __ptext91:	
 15377 ;; *************** function _I2C2_BusCollisionISR *****************
 15378 ;; Defined at:
 15379 ;;		line 729 in file "mcc_generated_files/i2c2.c"
 15380 ;; Parameters:    Size  Location     Type
 15381 ;;		None
 15382 ;; Auto vars:     Size  Location     Type
 15383 ;;		None
 15384 ;; Return value:  Size  Location     Type
 15385 ;;                  1    wreg      void 
 15386 ;; Registers used:
 15387 ;;		None
 15388 ;; Tracked objects:
 15389 ;;		On entry : 0/0
 15390 ;;		On exit  : 0/0
 15391 ;;		Unchanged: 0/0
 15392 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15393 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15394 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15395 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15396 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15397 ;;Total ram usage:        0 bytes
 15398 ;; Hardware stack levels used:    1
 15399 ;; This function calls:
 15400 ;;		Nothing
 15401 ;; This function is called by:
 15402 ;;		_INTERRUPT_InterruptManager
 15403 ;; This function uses a non-reentrant model
 15404 ;;
 15405                           
 15406                           
 15407                           ;psect for function _I2C2_BusCollisionISR
 15408  0003                     _I2C2_BusCollisionISR:	
 15409                           
 15410                           ;incstack = 0
 15411                           ; Regs used in _I2C2_BusCollisionISR: []
 15412  0003  0008               	return
 15413  0004                     __end_of_I2C2_BusCollisionISR:	
 15414  007E                     btemp	set	126	;btemp
 15415  007E                     int$flags	set	126
 15416  007E                     wtemp0	set	126


Data Sizes:
    Strings     0
    Constant    38
    Data        7
    BSS         140
    Persistent  6
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      7      14
    BANK0            80     79      79
    BANK1            80     39      74
    BANK2            80      0      79
    BANK3            80     10      42
    BANK4            80      0       0
    BANK5            80      0       0
    BANK6            80      0       0
    BANK7            80      0       0
    BANK8            80      0       0
    BANK9            80      0       0
    BANK10           80      0       0
    BANK11           80      0       0
    BANK12           48      0       0

Pointer List with Targets:

    i2c2_tr_queue.ptrb_list.pbuffer	PTR unsigned char  size(2) Largest target is 24
		 -> I2C_BufferRead@ReadAddr(BANK0[1]), I2C_BufferRead@status(BANK0[1]), I2C_ByteWrite@data(BANK0[2]), I2C_ByteWrite@status(BANK0[1]), 
		 -> data(BANK3[8]), b1(BANK3[24]), HMC5883L_ReadBit@tmp(COMMON[1]), HMC5883L_ReadBits@tmp(BANK0[1]), 
		 -> HMC5883L_WriteBit@tmp(COMMON[1]), HMC5883L_WriteBits@tmp(COMMON[1]), heading(BANK2[8]), HMC5883L_TestConnection@tmp(COMMON[3]), 
		 -> MPU6050_ReadBit@tmp(COMMON[1]), MPU6050_ReadBits@tmp(COMMON[1]), MPU6050_WriteBit@tmp(COMMON[1]), MPU6050_WriteBits@tmp(COMMON[1]), 
		 -> MPU6050_GetRawAccel@tempBuffer(COMMON[6]), MPU6050_GetRawAccelGyro@tmpBuffer(COMMON[14]), 

    i2c2_tr_queue.pTrFlag	PTR enum E2993 size(2) Largest target is 24
		 -> I2C_BufferRead@ReadAddr(BANK0[1]), I2C_BufferRead@status(BANK0[1]), I2C_ByteWrite@data(BANK0[2]), I2C_ByteWrite@status(BANK0[1]), 
		 -> data(BANK3[8]), b1(BANK3[24]), HMC5883L_ReadBit@tmp(COMMON[1]), HMC5883L_ReadBits@tmp(BANK0[1]), 
		 -> HMC5883L_WriteBit@tmp(COMMON[1]), HMC5883L_WriteBits@tmp(COMMON[1]), heading(BANK2[8]), HMC5883L_TestConnection@tmp(COMMON[3]), 
		 -> MPU6050_ReadBit@tmp(COMMON[1]), MPU6050_ReadBits@tmp(COMMON[1]), MPU6050_WriteBit@tmp(COMMON[1]), MPU6050_WriteBits@tmp(COMMON[1]), 
		 -> MPU6050_GetRawAccel@tempBuffer(COMMON[6]), MPU6050_GetRawAccelGyro@tmpBuffer(COMMON[14]), 

    i2c2_tr_queue.ptrb_list	PTR struct . size(1) Largest target is 5
		 -> I2C2_MasterRead@trBlock(BANK2[5]), I2C2_MasterWrite@trBlock(BANK2[5]), 

    Storage_load@closeAngle	PTR unsigned char  size(1) Largest target is 1
		 -> doorClosedAngle(BANK1[1]), 

    Storage_load@openAngle	PTR unsigned char  size(1) Largest target is 1
		 -> doorOpenAngle(BANK1[1]), 

    I2C_BufferRead@pBuffer	PTR unsigned char  size(2) Largest target is 24
		 -> data(BANK3[8]), b1(BANK3[24]), HMC5883L_ReadBit@tmp(COMMON[1]), HMC5883L_ReadBits@tmp(BANK0[1]), 
		 -> HMC5883L_WriteBit@tmp(COMMON[1]), HMC5883L_WriteBits@tmp(COMMON[1]), heading(BANK2[8]), HMC5883L_TestConnection@tmp(COMMON[3]), 
		 -> MPU6050_ReadBit@tmp(COMMON[1]), MPU6050_ReadBits@tmp(COMMON[1]), MPU6050_WriteBit@tmp(COMMON[1]), MPU6050_WriteBits@tmp(COMMON[1]), 
		 -> MPU6050_GetRawAccel@tempBuffer(COMMON[6]), MPU6050_GetRawAccelGyro@tmpBuffer(COMMON[14]), 

    I2C_ByteWrite@pBuffer	PTR unsigned char  size(1) Largest target is 1
		 -> BMP_readTemperature@tmp(BANK1[1]), BMP_init@t(BANK0[1]), HMC5883L_WriteBit@tmp(COMMON[1]), HMC5883L_WriteBits@tmp(COMMON[1]), 
		 -> HMC5883L_SetMode@tmp(COMMON[1]), HMC5883L_SetGain@tmp(COMMON[1]), HMC5883L_Initialize@tmp(COMMON[1]), MPU6050_WriteBit@tmp(COMMON[1]), 
		 -> MPU6050_WriteBits@tmp(COMMON[1]), 

    Wireless_sendData@payload	PTR unsigned char  size(1) Largest target is 5
		 -> Wireless_packageData@data(BANK1[5]), 

    RF_DataIsReady@channel	PTR unsigned char  size(1) Largest target is 1
		 -> Wireless_checkDataReceived@channel(BANK0[1]), 

    RF_RxPayload@payload	PTR unsigned char  size(1) Largest target is 4
		 -> Wireless_checkDataReceived@data(BANK0[4]), 

    RF_TxPayload@payload	PTR unsigned char  size(1) Largest target is 5
		 -> Wireless_packageData@data(BANK1[5]), 

    RF_WriteRegisterData@buf	PTR unsigned char  size(2) Largest target is 5
		 -> Wireless_packageData@data(BANK1[5]), Wireless_init@TADDR(CODE[5]), 

    RF_ReadRegisterData@buf	PTR unsigned char  size(1) Largest target is 4
		 -> Wireless_checkDataReceived@data(BANK0[4]), Wireless_wake@reg(BANK0[1]), Wireless_sleep@reg(BANK0[1]), 

    SPI_WriteBuffer@bufOut	PTR unsigned char  size(2) Largest target is 5
		 -> Wireless_packageData@data(BANK1[5]), Wireless_init@TADDR(CODE[5]), 

    SPI_WriteReadBuffer@bufOut	PTR unsigned char  size(1) Largest target is 4
		 -> Wireless_checkDataReceived@data(BANK0[4]), Wireless_wake@reg(BANK0[1]), Wireless_sleep@reg(BANK0[1]), 

    SPI_WriteReadBuffer@bufIn	PTR unsigned char  size(1) Largest target is 4
		 -> Wireless_checkDataReceived@data(BANK0[4]), Wireless_wake@reg(BANK0[1]), Wireless_sleep@reg(BANK0[1]), 

    HMC5883L_I2C_BufferRead@pBuffer	PTR unsigned char  size(2) Largest target is 14
		 -> HMC5883L_ReadBit@tmp(COMMON[1]), HMC5883L_ReadBits@tmp(BANK0[1]), HMC5883L_WriteBit@tmp(COMMON[1]), HMC5883L_WriteBits@tmp(COMMON[1]), 
		 -> heading(BANK2[8]), HMC5883L_TestConnection@tmp(COMMON[3]), MPU6050_ReadBit@tmp(COMMON[1]), MPU6050_ReadBits@tmp(COMMON[1]), 
		 -> MPU6050_WriteBit@tmp(COMMON[1]), MPU6050_WriteBits@tmp(COMMON[1]), MPU6050_GetRawAccel@tempBuffer(COMMON[6]), MPU6050_GetRawAccelGyro@tmpBuffer(COMMON[14]), 

    HMC5883L_ReadBits@data	PTR unsigned char  size(1) Largest target is 1
		 -> BMP_readTemperature@tmp(BANK1[1]), HMC5883L_GetHeading@tmp(COMMON[1]), HMC5883L_GetMode@tmp(COMMON[1]), HMC5883L_GetGain@tmp(COMMON[1]), 
		 -> HMC5883L_GetMeasurementBias@tmp(COMMON[1]), HMC5883L_GetDataRate@tmp(COMMON[1]), HMC5883L_GetSampleAveraging@tmp(COMMON[1]), 

    I2C2_MasterWriteTRBBuild@pdata	PTR unsigned char  size(1) Largest target is 2
		 -> I2C_BufferRead@ReadAddr(BANK0[1]), I2C_ByteWrite@data(BANK0[2]), 

    I2C2_MasterWriteTRBBuild@ptrb.pbuffer	PTR unsigned char  size(2) Largest target is 24
		 -> I2C_BufferRead@ReadAddr(BANK0[1]), I2C_BufferRead@status(BANK0[1]), I2C_ByteWrite@data(BANK0[2]), I2C_ByteWrite@status(BANK0[1]), 
		 -> data(BANK3[8]), b1(BANK3[24]), HMC5883L_ReadBit@tmp(COMMON[1]), HMC5883L_ReadBits@tmp(BANK0[1]), 
		 -> HMC5883L_WriteBit@tmp(COMMON[1]), HMC5883L_WriteBits@tmp(COMMON[1]), heading(BANK2[8]), HMC5883L_TestConnection@tmp(COMMON[3]), 
		 -> MPU6050_ReadBit@tmp(COMMON[1]), MPU6050_ReadBits@tmp(COMMON[1]), MPU6050_WriteBit@tmp(COMMON[1]), MPU6050_WriteBits@tmp(COMMON[1]), 
		 -> MPU6050_GetRawAccel@tempBuffer(COMMON[6]), MPU6050_GetRawAccelGyro@tmpBuffer(COMMON[14]), 

    I2C2_MasterWriteTRBBuild@ptrb	PTR struct . size(1) Largest target is 5
		 -> I2C2_MasterWrite@trBlock(BANK2[5]), 

    I2C2_MasterReadTRBBuild@pdata	PTR unsigned char  size(2) Largest target is 24
		 -> data(BANK3[8]), b1(BANK3[24]), HMC5883L_ReadBit@tmp(COMMON[1]), HMC5883L_ReadBits@tmp(BANK0[1]), 
		 -> HMC5883L_WriteBit@tmp(COMMON[1]), HMC5883L_WriteBits@tmp(COMMON[1]), heading(BANK2[8]), HMC5883L_TestConnection@tmp(COMMON[3]), 
		 -> MPU6050_ReadBit@tmp(COMMON[1]), MPU6050_ReadBits@tmp(COMMON[1]), MPU6050_WriteBit@tmp(COMMON[1]), MPU6050_WriteBits@tmp(COMMON[1]), 
		 -> MPU6050_GetRawAccel@tempBuffer(COMMON[6]), MPU6050_GetRawAccelGyro@tmpBuffer(COMMON[14]), 

    I2C2_MasterReadTRBBuild@ptrb.pbuffer	PTR unsigned char  size(2) Largest target is 24
		 -> I2C_BufferRead@ReadAddr(BANK0[1]), I2C_BufferRead@status(BANK0[1]), I2C_ByteWrite@data(BANK0[2]), I2C_ByteWrite@status(BANK0[1]), 
		 -> data(BANK3[8]), b1(BANK3[24]), HMC5883L_ReadBit@tmp(COMMON[1]), HMC5883L_ReadBits@tmp(BANK0[1]), 
		 -> HMC5883L_WriteBit@tmp(COMMON[1]), HMC5883L_WriteBits@tmp(COMMON[1]), heading(BANK2[8]), HMC5883L_TestConnection@tmp(COMMON[3]), 
		 -> MPU6050_ReadBit@tmp(COMMON[1]), MPU6050_ReadBits@tmp(COMMON[1]), MPU6050_WriteBit@tmp(COMMON[1]), MPU6050_WriteBits@tmp(COMMON[1]), 
		 -> MPU6050_GetRawAccel@tempBuffer(COMMON[6]), MPU6050_GetRawAccelGyro@tmpBuffer(COMMON[14]), 

    I2C2_MasterReadTRBBuild@ptrb	PTR struct . size(1) Largest target is 5
		 -> I2C2_MasterRead@trBlock(BANK2[5]), 

    i2c2_object.pTrTail.ptrb_list.pbuffer	PTR unsigned char  size(2) Largest target is 24
		 -> I2C_BufferRead@ReadAddr(BANK0[1]), I2C_BufferRead@status(BANK0[1]), I2C_ByteWrite@data(BANK0[2]), I2C_ByteWrite@status(BANK0[1]), 
		 -> data(BANK3[8]), b1(BANK3[24]), HMC5883L_ReadBit@tmp(COMMON[1]), HMC5883L_ReadBits@tmp(BANK0[1]), 
		 -> HMC5883L_WriteBit@tmp(COMMON[1]), HMC5883L_WriteBits@tmp(COMMON[1]), heading(BANK2[8]), HMC5883L_TestConnection@tmp(COMMON[3]), 
		 -> MPU6050_ReadBit@tmp(COMMON[1]), MPU6050_ReadBits@tmp(COMMON[1]), MPU6050_WriteBit@tmp(COMMON[1]), MPU6050_WriteBits@tmp(COMMON[1]), 
		 -> MPU6050_GetRawAccel@tempBuffer(COMMON[6]), MPU6050_GetRawAccelGyro@tmpBuffer(COMMON[14]), 

    i2c2_object.pTrTail.pTrFlag	PTR enum E2993 size(2) Largest target is 24
		 -> I2C_BufferRead@ReadAddr(BANK0[1]), I2C_BufferRead@status(BANK0[1]), I2C_ByteWrite@data(BANK0[2]), I2C_ByteWrite@status(BANK0[1]), 
		 -> data(BANK3[8]), b1(BANK3[24]), HMC5883L_ReadBit@tmp(COMMON[1]), HMC5883L_ReadBits@tmp(BANK0[1]), 
		 -> HMC5883L_WriteBit@tmp(COMMON[1]), HMC5883L_WriteBits@tmp(COMMON[1]), heading(BANK2[8]), HMC5883L_TestConnection@tmp(COMMON[3]), 
		 -> MPU6050_ReadBit@tmp(COMMON[1]), MPU6050_ReadBits@tmp(COMMON[1]), MPU6050_WriteBit@tmp(COMMON[1]), MPU6050_WriteBits@tmp(COMMON[1]), 
		 -> MPU6050_GetRawAccel@tempBuffer(COMMON[6]), MPU6050_GetRawAccelGyro@tmpBuffer(COMMON[14]), 

    i2c2_object.pTrTail.ptrb_list	PTR struct . size(1) Largest target is 5
		 -> I2C2_MasterRead@trBlock(BANK2[5]), I2C2_MasterWrite@trBlock(BANK2[5]), 

    I2C2_MasterTRBInsert@ptrb_list	PTR struct . size(1) Largest target is 5
		 -> I2C2_MasterRead@trBlock(BANK2[5]), I2C2_MasterWrite@trBlock(BANK2[5]), 

    I2C2_MasterTRBInsert@pflag	PTR enum E2993 size(1) Largest target is 1
		 -> I2C_BufferRead@status(BANK0[1]), I2C_ByteWrite@status(BANK0[1]), 

    I2C2_MasterRead@pflag	PTR enum E2993 size(1) Largest target is 1
		 -> I2C_BufferRead@status(BANK0[1]), 

    I2C2_MasterRead@pdata	PTR unsigned char  size(2) Largest target is 24
		 -> data(BANK3[8]), b1(BANK3[24]), HMC5883L_ReadBit@tmp(COMMON[1]), HMC5883L_ReadBits@tmp(BANK0[1]), 
		 -> HMC5883L_WriteBit@tmp(COMMON[1]), HMC5883L_WriteBits@tmp(COMMON[1]), heading(BANK2[8]), HMC5883L_TestConnection@tmp(COMMON[3]), 
		 -> MPU6050_ReadBit@tmp(COMMON[1]), MPU6050_ReadBits@tmp(COMMON[1]), MPU6050_WriteBit@tmp(COMMON[1]), MPU6050_WriteBits@tmp(COMMON[1]), 
		 -> MPU6050_GetRawAccel@tempBuffer(COMMON[6]), MPU6050_GetRawAccelGyro@tmpBuffer(COMMON[14]), 

    F3105.pbuffer	PTR unsigned char  size(2) Largest target is 24
		 -> I2C_BufferRead@ReadAddr(BANK0[1]), I2C_BufferRead@status(BANK0[1]), I2C_ByteWrite@data(BANK0[2]), I2C_ByteWrite@status(BANK0[1]), 
		 -> data(BANK3[8]), b1(BANK3[24]), HMC5883L_ReadBit@tmp(COMMON[1]), HMC5883L_ReadBits@tmp(BANK0[1]), 
		 -> HMC5883L_WriteBit@tmp(COMMON[1]), HMC5883L_WriteBits@tmp(COMMON[1]), heading(BANK2[8]), HMC5883L_TestConnection@tmp(COMMON[3]), 
		 -> MPU6050_ReadBit@tmp(COMMON[1]), MPU6050_ReadBits@tmp(COMMON[1]), MPU6050_WriteBit@tmp(COMMON[1]), MPU6050_WriteBits@tmp(COMMON[1]), 
		 -> MPU6050_GetRawAccel@tempBuffer(COMMON[6]), MPU6050_GetRawAccelGyro@tmpBuffer(COMMON[14]), 

    I2C2_MasterWrite@pflag	PTR enum E2993 size(1) Largest target is 1
		 -> I2C_BufferRead@status(BANK0[1]), I2C_ByteWrite@status(BANK0[1]), 

    I2C2_MasterWrite@pdata	PTR unsigned char  size(1) Largest target is 2
		 -> I2C_BufferRead@ReadAddr(BANK0[1]), I2C_ByteWrite@data(BANK0[2]), 

    F3100.pbuffer	PTR unsigned char  size(2) Largest target is 24
		 -> I2C_BufferRead@ReadAddr(BANK0[1]), I2C_BufferRead@status(BANK0[1]), I2C_ByteWrite@data(BANK0[2]), I2C_ByteWrite@status(BANK0[1]), 
		 -> data(BANK3[8]), b1(BANK3[24]), HMC5883L_ReadBit@tmp(COMMON[1]), HMC5883L_ReadBits@tmp(BANK0[1]), 
		 -> HMC5883L_WriteBit@tmp(COMMON[1]), HMC5883L_WriteBits@tmp(COMMON[1]), heading(BANK2[8]), HMC5883L_TestConnection@tmp(COMMON[3]), 
		 -> MPU6050_ReadBit@tmp(COMMON[1]), MPU6050_ReadBits@tmp(COMMON[1]), MPU6050_WriteBit@tmp(COMMON[1]), MPU6050_WriteBits@tmp(COMMON[1]), 
		 -> MPU6050_GetRawAccel@tempBuffer(COMMON[6]), MPU6050_GetRawAccelGyro@tmpBuffer(COMMON[14]), 

    I2C2_ISR@pi2c_buf_ptr	PTR unsigned char  size(2) Largest target is 24
		 -> I2C_BufferRead@ReadAddr(BANK0[1]), I2C_BufferRead@status(BANK0[1]), I2C_ByteWrite@data(BANK0[2]), I2C_ByteWrite@status(BANK0[1]), 
		 -> data(BANK3[8]), b1(BANK3[24]), HMC5883L_ReadBit@tmp(COMMON[1]), HMC5883L_ReadBits@tmp(BANK0[1]), 
		 -> HMC5883L_WriteBit@tmp(COMMON[1]), HMC5883L_WriteBits@tmp(COMMON[1]), heading(BANK2[8]), HMC5883L_TestConnection@tmp(COMMON[3]), 
		 -> MPU6050_ReadBit@tmp(COMMON[1]), MPU6050_ReadBits@tmp(COMMON[1]), MPU6050_WriteBit@tmp(COMMON[1]), MPU6050_WriteBits@tmp(COMMON[1]), 
		 -> MPU6050_GetRawAccel@tempBuffer(COMMON[6]), MPU6050_GetRawAccelGyro@tmpBuffer(COMMON[14]), NULL(NULL[0]), 

    p_i2c2_trb_current.pbuffer	PTR unsigned char  size(2) Largest target is 24
		 -> I2C_BufferRead@ReadAddr(BANK0[1]), I2C_BufferRead@status(BANK0[1]), I2C_ByteWrite@data(BANK0[2]), I2C_ByteWrite@status(BANK0[1]), 
		 -> data(BANK3[8]), b1(BANK3[24]), HMC5883L_ReadBit@tmp(COMMON[1]), HMC5883L_ReadBits@tmp(BANK0[1]), 
		 -> HMC5883L_WriteBit@tmp(COMMON[1]), HMC5883L_WriteBits@tmp(COMMON[1]), heading(BANK2[8]), HMC5883L_TestConnection@tmp(COMMON[3]), 
		 -> MPU6050_ReadBit@tmp(COMMON[1]), MPU6050_ReadBits@tmp(COMMON[1]), MPU6050_WriteBit@tmp(COMMON[1]), MPU6050_WriteBits@tmp(COMMON[1]), 
		 -> MPU6050_GetRawAccel@tempBuffer(COMMON[6]), MPU6050_GetRawAccelGyro@tmpBuffer(COMMON[14]), 

    p_i2c2_trb_current	PTR struct . size(1) Largest target is 5
		 -> I2C2_MasterRead@trBlock(BANK2[5]), I2C2_MasterWrite@trBlock(BANK2[5]), NULL(NULL[0]), 

    i2c2_object.pTrHead.pTrFlag	PTR enum E2993 size(2) Largest target is 24
		 -> I2C_BufferRead@ReadAddr(BANK0[1]), I2C_BufferRead@status(BANK0[1]), I2C_ByteWrite@data(BANK0[2]), I2C_ByteWrite@status(BANK0[1]), 
		 -> data(BANK3[8]), b1(BANK3[24]), HMC5883L_ReadBit@tmp(COMMON[1]), HMC5883L_ReadBits@tmp(BANK0[1]), 
		 -> HMC5883L_WriteBit@tmp(COMMON[1]), HMC5883L_WriteBits@tmp(COMMON[1]), heading(BANK2[8]), HMC5883L_TestConnection@tmp(COMMON[3]), 
		 -> MPU6050_ReadBit@tmp(COMMON[1]), MPU6050_ReadBits@tmp(COMMON[1]), MPU6050_WriteBit@tmp(COMMON[1]), MPU6050_WriteBits@tmp(COMMON[1]), 
		 -> MPU6050_GetRawAccel@tempBuffer(COMMON[6]), MPU6050_GetRawAccelGyro@tmpBuffer(COMMON[14]), 

    i2c2_object.pTrHead.ptrb_list	PTR struct . size(1) Largest target is 5
		 -> I2C2_MasterRead@trBlock(BANK2[5]), I2C2_MasterWrite@trBlock(BANK2[5]), 

    S587$pbuffer	PTR unsigned char  size(2) Largest target is 24
		 -> I2C_BufferRead@ReadAddr(BANK0[1]), I2C_BufferRead@status(BANK0[1]), I2C_ByteWrite@data(BANK0[2]), I2C_ByteWrite@status(BANK0[1]), 
		 -> data(BANK3[8]), b1(BANK3[24]), HMC5883L_ReadBit@tmp(COMMON[1]), HMC5883L_ReadBits@tmp(BANK0[1]), 
		 -> HMC5883L_WriteBit@tmp(COMMON[1]), HMC5883L_WriteBits@tmp(COMMON[1]), heading(BANK2[8]), HMC5883L_TestConnection@tmp(COMMON[3]), 
		 -> MPU6050_ReadBit@tmp(COMMON[1]), MPU6050_ReadBits@tmp(COMMON[1]), MPU6050_WriteBit@tmp(COMMON[1]), MPU6050_WriteBits@tmp(COMMON[1]), 
		 -> MPU6050_GetRawAccel@tempBuffer(COMMON[6]), MPU6050_GetRawAccelGyro@tmpBuffer(COMMON[14]), 

    p_i2c2_current.pbuffer	PTR unsigned char  size(2) Largest target is 24
		 -> I2C_BufferRead@ReadAddr(BANK0[1]), I2C_BufferRead@status(BANK0[1]), I2C_ByteWrite@data(BANK0[2]), I2C_ByteWrite@status(BANK0[1]), 
		 -> data(BANK3[8]), b1(BANK3[24]), HMC5883L_ReadBit@tmp(COMMON[1]), HMC5883L_ReadBits@tmp(BANK0[1]), 
		 -> HMC5883L_WriteBit@tmp(COMMON[1]), HMC5883L_WriteBits@tmp(COMMON[1]), heading(BANK2[8]), HMC5883L_TestConnection@tmp(COMMON[3]), 
		 -> MPU6050_ReadBit@tmp(COMMON[1]), MPU6050_ReadBits@tmp(COMMON[1]), MPU6050_WriteBit@tmp(COMMON[1]), MPU6050_WriteBits@tmp(COMMON[1]), 
		 -> MPU6050_GetRawAccel@tempBuffer(COMMON[6]), MPU6050_GetRawAccelGyro@tmpBuffer(COMMON[14]), 

    S599$pTrFlag	PTR enum E2993 size(2) Largest target is 24
		 -> I2C_BufferRead@ReadAddr(BANK0[1]), I2C_BufferRead@status(BANK0[1]), I2C_ByteWrite@data(BANK0[2]), I2C_ByteWrite@status(BANK0[1]), 
		 -> data(BANK3[8]), b1(BANK3[24]), HMC5883L_ReadBit@tmp(COMMON[1]), HMC5883L_ReadBits@tmp(BANK0[1]), 
		 -> HMC5883L_WriteBit@tmp(COMMON[1]), HMC5883L_WriteBits@tmp(COMMON[1]), heading(BANK2[8]), HMC5883L_TestConnection@tmp(COMMON[3]), 
		 -> MPU6050_ReadBit@tmp(COMMON[1]), MPU6050_ReadBits@tmp(COMMON[1]), MPU6050_WriteBit@tmp(COMMON[1]), MPU6050_WriteBits@tmp(COMMON[1]), 
		 -> MPU6050_GetRawAccel@tempBuffer(COMMON[6]), MPU6050_GetRawAccelGyro@tmpBuffer(COMMON[14]), 

    p_i2c2_current.pTrFlag	PTR enum E2993 size(2) Largest target is 24
		 -> I2C_BufferRead@ReadAddr(BANK0[1]), I2C_BufferRead@status(BANK0[1]), I2C_ByteWrite@data(BANK0[2]), I2C_ByteWrite@status(BANK0[1]), 
		 -> data(BANK3[8]), b1(BANK3[24]), HMC5883L_ReadBit@tmp(COMMON[1]), HMC5883L_ReadBits@tmp(BANK0[1]), 
		 -> HMC5883L_WriteBit@tmp(COMMON[1]), HMC5883L_WriteBits@tmp(COMMON[1]), heading(BANK2[8]), HMC5883L_TestConnection@tmp(COMMON[3]), 
		 -> MPU6050_ReadBit@tmp(COMMON[1]), MPU6050_ReadBits@tmp(COMMON[1]), MPU6050_WriteBit@tmp(COMMON[1]), MPU6050_WriteBits@tmp(COMMON[1]), 
		 -> MPU6050_GetRawAccel@tempBuffer(COMMON[6]), MPU6050_GetRawAccelGyro@tmpBuffer(COMMON[14]), 

    S599$ptrb_list	PTR struct . size(1) Largest target is 5
		 -> I2C2_MasterRead@trBlock(BANK2[5]), I2C2_MasterWrite@trBlock(BANK2[5]), 

    p_i2c2_current.ptrb_list	PTR struct . size(1) Largest target is 5
		 -> I2C2_MasterRead@trBlock(BANK2[5]), I2C2_MasterWrite@trBlock(BANK2[5]), 

    p_i2c2_current	PTR struct . size(1) Largest target is 5
		 -> i2c2_tr_queue(BANK1[4]), NULL(NULL[0]), 

    S610$pTrHead	PTR struct . size(1) Largest target is 5
		 -> i2c2_tr_queue(BANK1[4]), 

    i2c2_object.pTrHead	PTR struct . size(1) Largest target is 5
		 -> i2c2_tr_queue(BANK1[4]), 

    S610$pTrTail	PTR struct . size(1) Largest target is 5
		 -> i2c2_tr_queue(BANK1[4]), 

    i2c2_object.pTrTail	PTR struct . size(1) Largest target is 5
		 -> i2c2_tr_queue(BANK1[4]), 

    TMR1_SetInterruptHandler@InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> TMR1_DefaultInterruptHandler(), 

    TMR1_InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> TMR1_DefaultInterruptHandler(), Absolute function(), 

    IOCAF2_SetInterruptHandler@InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> IOCAF2_DefaultInterruptHandler(), 

    IOCAF2_InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), IOCAF2_DefaultInterruptHandler(), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _INTERRUPT_InterruptManager in COMMON

    _INTERRUPT_InterruptManager->_I2C2_ISR
    _I2C2_ISR->_I2C2_Stop

Critical Paths under _main in BANK0

    _Wireless_wake->_RF_ReadRegisterData
    _Wireless_sleep->_RF_ReadRegisterData
    _Wireless_packageData->___fttol
    _Wireless_sendData->_RF_TxPayload
    _RF_TxPayload->_RF_WriteRegisterData
    _RF_Write->_SPI_WriteRead
    _Wireless_checkDataReceived->_RF_RxPayload
    _RF_RxPayload->_RF_ReadRegisterData
    _RF_ReadRegisterData->_SPI_WriteReadBuffer
    _SPI_WriteReadBuffer->_SPI_WriteRead
    _RF_DataIsReady->_RF_ReadRegister
    _RF_ReadRegister->_SPI_WriteRead
    _DOOR_update->_Storage_save
    _Storage_save->_DATAEE_WriteByte
    _Sensor_getSupplyVoltage->___ftdiv
    _Wireless_init->_RF_WriteRegisterData
    _RF_WriteRegisterData->_SPI_WriteBuffer
    _SPI_WriteBuffer->_SPI_WriteRead
    _RF_ResetStatusIRQ->_RF_WriteRegister
    _RF_WriteRegister->_SPI_WriteRead
    _SPI_WriteRead->_SPI1_Exchange8bit
    _TMR1_Initialize->_TMR1_SetInterruptHandler
    _PIN_MANAGER_Initialize->_IOCAF2_SetInterruptHandler
    _DOOR_init->_Storage_load
    _Storage_load->_DATAEE_WriteByte
    _BMP_readTemperature->___fttol
    ___lwtoft->___ftpack
    ___fttol->___ftmul
    ___ftneg->___ftdiv
    ___ftmul->___ftadd
    ___ftdiv->___altoft
    ___ftadd->___ftneg
    ___awtoft->___ftpack
    ___altoft->___ftpack
    ___altoft->___ftpack
    _HMC5883L_ReadBits->_HMC5883L_I2C_BufferRead
    _HMC5883L_I2C_BufferRead->_I2C_BufferRead
    _BMP_init->_I2C_BufferRead
    _I2C_ByteWrite->_I2C2_MasterWrite
    _I2C_BufferRead->_I2C2_MasterRead
    _I2C2_MasterWrite->_I2C2_MasterWriteTRBBuild
    _I2C2_MasterRead->_I2C2_MasterReadTRBBuild

Critical Paths under _INTERRUPT_InterruptManager in BANK0

    None.

Critical Paths under _main in BANK1

    _main->_Wireless_packageData
    _Wireless_packageData->_BMP_readTemperature

Critical Paths under _INTERRUPT_InterruptManager in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK12

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                12    12      0   85847
                                             37 BANK1      2     2      0
                                              0 BANK3     10    10      0
                           _BMP_init
                _BMP_readTemperature
                          _DOOR_init
                      _DOOR_resetPos
                           _DOOR_run
                  _SYSTEM_Initialize
             _Sensor_peripheralSleep
                      _Wireless_init
               _Wireless_packageData
                     _Wireless_sleep
                      _Wireless_wake
                            ___lldiv
                       _setSleepTime
 ---------------------------------------------------------------------------------
 (1) _setSleepTime                                         4     2      2     108
                                              1 BANK0      4     2      2
 ---------------------------------------------------------------------------------
 (1) ___lldiv                                             14     6      8     549
                                              1 BANK0     14     6      8
 ---------------------------------------------------------------------------------
 (1) _Wireless_wake                                        2     2      0    2211
                                             15 BANK0      2     2      0
                _RF_ReadRegisterData
                   _RF_WriteRegister
 ---------------------------------------------------------------------------------
 (1) _Wireless_sleep                                       2     2      0    2211
                                             15 BANK0      2     2      0
                _RF_ReadRegisterData
                   _RF_WriteRegister
 ---------------------------------------------------------------------------------
 (1) _Wireless_packageData                                17    13      4   20157
                                             20 BANK1     17    13      4
                _BMP_readTemperature (ARG)
               _Diag_getSensorHealth
            _Sensor_getSupplyVoltage
         _Wireless_checkDataReceived
                  _Wireless_sendData
                             ___bmul
                            ___ftmul
                            ___fttol
                            ___lldiv (ARG)
                                _abs
 ---------------------------------------------------------------------------------
 (2) _abs                                                  4     2      2     247
                                              1 BANK0      4     2      2
 ---------------------------------------------------------------------------------
 (2) ___bmul                                               4     3      1     213
                                              1 BANK0      4     3      1
 ---------------------------------------------------------------------------------
 (2) _Wireless_sendData                                    2     2      0    2679
                                             17 BANK0      2     2      0
                  _RF_ResetStatusIRQ
                       _RF_TxPayload
 ---------------------------------------------------------------------------------
 (3) _RF_TxPayload                                         3     2      1    1536
                                             14 BANK0      3     2      1
                           _RF_Write
               _RF_WriteRegisterData
 ---------------------------------------------------------------------------------
 (4) _RF_Write                                             1     1      0      93
                                              3 BANK0      1     1      0
                      _SPI_WriteRead
 ---------------------------------------------------------------------------------
 (2) _Wireless_checkDataReceived                           9     9      0    3155
                                             19 BANK0      9     9      0
                      _DOOR_resetPos
                        _DOOR_update
                     _RF_DataIsReady
                       _RF_RxPayload
                             ___lmul
 ---------------------------------------------------------------------------------
 (3) ___lmul                                              12     4      8     290
                                              1 BANK0     12     4      8
 ---------------------------------------------------------------------------------
 (3) _RF_RxPayload                                         4     3      1    1261
                                             15 BANK0      4     3      1
                _RF_ReadRegisterData
 ---------------------------------------------------------------------------------
 (2) _RF_ReadRegisterData                                  5     3      2    1089
                                             10 BANK0      5     3      2
                      _SPI_WriteRead
                _SPI_WriteReadBuffer
 ---------------------------------------------------------------------------------
 (3) _SPI_WriteReadBuffer                                  7     5      2     441
                                              3 BANK0      7     5      2
                      _SPI_WriteRead
 ---------------------------------------------------------------------------------
 (3) _RF_DataIsReady                                       3     3      0     292
                                              6 BANK0      3     3      0
                    _RF_ReadRegister
 ---------------------------------------------------------------------------------
 (4) _RF_ReadRegister                                      3     3      0     127
                                              3 BANK0      3     3      0
                      _SPI_WriteRead
 ---------------------------------------------------------------------------------
 (3) _DOOR_update                                          3     2      1     978
                                              7 BANK0      3     2      1
                       _Storage_save
 ---------------------------------------------------------------------------------
 (4) _Storage_save                                         3     2      1     700
                                              4 BANK0      3     2      1
                   _DATAEE_WriteByte
 ---------------------------------------------------------------------------------
 (3) _DOOR_resetPos                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _Sensor_getSupplyVoltage                              8     5      3    7868
                                             33 BANK0      8     5      3
            _ADC_GetConversionResult
               _ADC_IsConversionDone
                  _ADC_SelectChannel
                _ADC_StartConversion
                  _FVR_IsOutputReady
             _Sensor_peripheralSleep
              _Sensor_peripheralWake
                            ___ftdiv
                           ___lwtoft
 ---------------------------------------------------------------------------------
 (3) _Sensor_peripheralWake                                0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _Sensor_peripheralSleep                               0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _FVR_IsOutputReady                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _ADC_StartConversion                                  0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _ADC_SelectChannel                                    2     2      0      31
                                              1 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (3) _ADC_IsConversionDone                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _ADC_GetConversionResult                              2     0      2       0
                                              1 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (2) _Diag_getSensorHealth                                 2     2      0      43
                                              1 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _Wireless_init                                        2     2      0    3398
                                             14 BANK0      2     2      0
                            _RF_Init
                  _RF_ResetStatusIRQ
                   _RF_WriteRegister
               _RF_WriteRegisterData
 ---------------------------------------------------------------------------------
 (4) _RF_WriteRegisterData                                 5     2      3    1271
                                              9 BANK0      5     2      3
                    _SPI_WriteBuffer
                      _SPI_WriteRead
 ---------------------------------------------------------------------------------
 (5) _SPI_WriteBuffer                                      6     3      3     346
                                              3 BANK0      6     3      3
                      _SPI_WriteRead
 ---------------------------------------------------------------------------------
 (3) _RF_ResetStatusIRQ                                    2     2      0    1079
                                              5 BANK0      2     2      0
                   _RF_WriteRegister
 ---------------------------------------------------------------------------------
 (2) _RF_WriteRegister                                     2     1      1    1048
                                              3 BANK0      2     1      1
                      _SPI_WriteRead
 ---------------------------------------------------------------------------------
 (3) _SPI_WriteRead                                        1     1      0      62
                                              2 BANK0      1     1      0
                  _SPI1_Exchange8bit
 ---------------------------------------------------------------------------------
 (4) _SPI1_Exchange8bit                                    1     1      0      31
                                              1 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _RF_Init                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _SYSTEM_Initialize                                    0     0      0     216
                     _ADC_Initialize
                     _FVR_Initialize
                    _I2C2_Initialize
              _OSCILLATOR_Initialize
             _PIN_MANAGER_Initialize
                    _SPI1_Initialize
                    _TMR1_Initialize
                    _TMR2_Initialize
                     _WDT_Initialize
 ---------------------------------------------------------------------------------
 (2) _WDT_Initialize                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _TMR2_Initialize                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _TMR1_Initialize                                      0     0      0     108
           _TMR1_SetInterruptHandler
 ---------------------------------------------------------------------------------
 (3) _TMR1_SetInterruptHandler                             2     0      2     108
                                              1 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (2) _SPI1_Initialize                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _PIN_MANAGER_Initialize                               0     0      0     108
         _IOCAF2_SetInterruptHandler
 ---------------------------------------------------------------------------------
 (3) _IOCAF2_SetInterruptHandler                           2     0      2     108
                                              1 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (2) _OSCILLATOR_Initialize                                0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _I2C2_Initialize                                      1     1      0       0
                                              1 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _FVR_Initialize                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _ADC_Initialize                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _DOOR_run                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _DOOR_init                                            1     1      0     900
                                              8 BANK0      1     1      0
                       _Storage_load
 ---------------------------------------------------------------------------------
 (2) _Storage_load                                         4     3      1     900
                                              4 BANK0      4     3      1
                    _DATAEE_ReadByte
                   _DATAEE_WriteByte
 ---------------------------------------------------------------------------------
 (5) _DATAEE_WriteByte                                     3     2      1     561
                                              1 BANK0      3     2      1
 ---------------------------------------------------------------------------------
 (3) _DATAEE_ReadByte                                      1     1      0      31
                                              1 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _BMP_readTemperature                                 20    17      3   48514
                                              0 BANK1     20    17      3
                           _BMP_init
           _Diag_getTempSensorHealth
           _Diag_setTempSensorHealth
                  _HMC5883L_ReadBits
                     _I2C_BufferRead
                      _I2C_ByteWrite
                            ___aldiv
                           ___altoft
                           ___awtoft
                            ___ftadd
                            ___ftdiv
                            ___ftmul
                            ___ftneg
                            ___fttol
                           ___lwtoft
 ---------------------------------------------------------------------------------
 (3) ___lwtoft                                             4     1      3    2923
                                              9 BANK0      4     1      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (2) ___fttol                                             14    10      4     756
                                             65 BANK0     14    10      4
            _Sensor_getSupplyVoltage (ARG)
                           ___altoft (ARG)
                            ___ftadd (ARG)
                            ___ftmul (ARG)
 ---------------------------------------------------------------------------------
 (2) ___ftneg                                              3     0      3     524
                                             33 BANK0      3     0      3
                            ___ftdiv (ARG)
                           ___lwtoft (ARG)
 ---------------------------------------------------------------------------------
 (2) ___ftmul                                             16    10      6    4338
                                             49 BANK0     16    10      6
            _Sensor_getSupplyVoltage (ARG)
                           ___altoft (ARG)
                           ___awtoft (ARG)
                            ___ftadd (ARG)
                            ___ftdiv (ARG)
                            ___ftneg (ARG)
                           ___ftpack
                           ___lwtoft (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftdiv                                             16    10      6    4846
                                             17 BANK0     16    10      6
                           ___altoft (ARG)
                           ___ftpack
                           ___ftpack (ARG)
                           ___lwtoft (ARG)
 ---------------------------------------------------------------------------------
 (2) ___ftadd                                             13     7      6    5303
                                             36 BANK0     13     7      6
                           ___altoft (ARG)
                            ___ftdiv (ARG)
                            ___ftneg (ARG)
                           ___ftpack
                           ___lwtoft (ARG)
 ---------------------------------------------------------------------------------
 (2) ___awtoft                                             6     3      3    3025
                                              9 BANK0      6     3      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (2) ___altoft                                             8     4      4    3096
                                              9 BANK0      8     4      4
                           ___ftpack
                           ___ftpack (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftpack                                             8     3      5    2584
                                              1 BANK0      8     3      5
 ---------------------------------------------------------------------------------
 (2) ___aldiv                                             15     7      8     599
                                              1 BANK0     15     7      8
 ---------------------------------------------------------------------------------
 (2) _HMC5883L_ReadBits                                   10     6      4    8661
                                             35 BANK0     10     6      4
            _HMC5883L_I2C_BufferRead
 ---------------------------------------------------------------------------------
 (3) _HMC5883L_I2C_BufferRead                              7     2      5    6134
                                             28 BANK0      7     2      5
                     _I2C_BufferRead
 ---------------------------------------------------------------------------------
 (2) _Diag_getTempSensorHealth                             0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _BMP_init                                             4     4      0    7138
                                             28 BANK0      4     4      0
           _Diag_setTempSensorHealth
                     _I2C_BufferRead
                      _I2C_ByteWrite
 ---------------------------------------------------------------------------------
 (2) _I2C_ByteWrite                                       10     8      2    2674
                                             15 BANK0     10     8      2
                   _I2C2_MasterWrite
                 _Timeout_hasExpired
                 _Timeout_setTimeout
 ---------------------------------------------------------------------------------
 (2) _I2C_BufferRead                                      11     6      5    4393
                                             17 BANK0     11     6      5
                    _I2C2_MasterRead
                   _I2C2_MasterWrite
                 _Timeout_hasExpired
                 _Timeout_setTimeout
 ---------------------------------------------------------------------------------
 (3) _Timeout_setTimeout                                   2     0      2     262
                                              1 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (3) _Timeout_hasExpired                                  12    12      0       0
                                              1 BANK0     12    12      0
 ---------------------------------------------------------------------------------
 (3) _I2C2_MasterWrite                                     7     3      4    1627
                                              8 BANK0      7     3      4
               _I2C2_MasterTRBInsert
           _I2C2_MasterWriteTRBBuild
 ---------------------------------------------------------------------------------
 (4) _I2C2_MasterWriteTRBBuild                             7     3      4     450
                                              1 BANK0      7     3      4
 ---------------------------------------------------------------------------------
 (3) _I2C2_MasterRead                                      8     2      6    1398
                                              9 BANK0      8     2      6
            _I2C2_MasterReadTRBBuild
               _I2C2_MasterTRBInsert
 ---------------------------------------------------------------------------------
 (4) _I2C2_MasterTRBInsert                                 4     2      2     494
                                              1 BANK0      4     2      2
 ---------------------------------------------------------------------------------
 (4) _I2C2_MasterReadTRBBuild                              8     3      5     481
                                              1 BANK0      8     3      5
 ---------------------------------------------------------------------------------
 (2) _Diag_setTempSensorHealth                             2     2      0      31
                                              1 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (8) _INTERRUPT_InterruptManager                           1     1      0      22
                                              0 BANK0      1     1      0
               _I2C2_BusCollisionISR
                           _I2C2_ISR
                    _PIN_MANAGER_IOC
                           _TMR1_ISR
 ---------------------------------------------------------------------------------
 (9) _TMR1_ISR                                             0     0      0       0
                      _TMR1_CallBack
 ---------------------------------------------------------------------------------
 (10) _TMR1_CallBack                                       0     0      0       0
                   Absolute function *
       _TMR1_DefaultInterruptHandler *
                  _Timeout_increment
 ---------------------------------------------------------------------------------
 (11) _Timeout_increment                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (11) _TMR1_DefaultInterruptHandler                        0     0      0       0
 ---------------------------------------------------------------------------------
 (9) _PIN_MANAGER_IOC                                      0     0      0       0
                         _IOCAF2_ISR
 ---------------------------------------------------------------------------------
 (10) _IOCAF2_ISR                                          0     0      0       0
                   Absolute function *
     _IOCAF2_DefaultInterruptHandler *
 ---------------------------------------------------------------------------------
 (11) _IOCAF2_DefaultInterruptHandler                      0     0      0       0
 ---------------------------------------------------------------------------------
 (11) Absolute function(Fake)                              0     0      0       0
 ---------------------------------------------------------------------------------
 (9) _I2C2_ISR                                             4     4      0      22
                                              3 COMMON     4     4      0
              _I2C2_FunctionComplete
                          _I2C2_Stop
 ---------------------------------------------------------------------------------
 (10) _I2C2_Stop                                           3     3      0      22
                                              0 COMMON     3     3      0
 ---------------------------------------------------------------------------------
 (10) _I2C2_FunctionComplete                               1     1      0       0
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (9) _I2C2_BusCollisionISR                                 0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 11
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _BMP_init
     _Diag_setTempSensorHealth
     _I2C_BufferRead
       _I2C2_MasterRead
         _I2C2_MasterReadTRBBuild
         _I2C2_MasterTRBInsert
       _I2C2_MasterWrite
         _I2C2_MasterTRBInsert
         _I2C2_MasterWriteTRBBuild
       _Timeout_hasExpired
       _Timeout_setTimeout
     _I2C_ByteWrite
       _I2C2_MasterWrite
         _I2C2_MasterTRBInsert
         _I2C2_MasterWriteTRBBuild
       _Timeout_hasExpired
       _Timeout_setTimeout
   _BMP_readTemperature
     _BMP_init
       _Diag_setTempSensorHealth
       _I2C_BufferRead
         _I2C2_MasterRead
           _I2C2_MasterReadTRBBuild
           _I2C2_MasterTRBInsert
         _I2C2_MasterWrite
           _I2C2_MasterTRBInsert
           _I2C2_MasterWriteTRBBuild
         _Timeout_hasExpired
         _Timeout_setTimeout
       _I2C_ByteWrite
         _I2C2_MasterWrite
           _I2C2_MasterTRBInsert
           _I2C2_MasterWriteTRBBuild
         _Timeout_hasExpired
         _Timeout_setTimeout
     _Diag_getTempSensorHealth
     _Diag_setTempSensorHealth
     _HMC5883L_ReadBits
       _HMC5883L_I2C_BufferRead
         _I2C_BufferRead
           _I2C2_MasterRead
             _I2C2_MasterReadTRBBuild
             _I2C2_MasterTRBInsert
           _I2C2_MasterWrite
             _I2C2_MasterTRBInsert
             _I2C2_MasterWriteTRBBuild
           _Timeout_hasExpired
           _Timeout_setTimeout
     _I2C_BufferRead
       _I2C2_MasterRead
         _I2C2_MasterReadTRBBuild
         _I2C2_MasterTRBInsert
       _I2C2_MasterWrite
         _I2C2_MasterTRBInsert
         _I2C2_MasterWriteTRBBuild
       _Timeout_hasExpired
       _Timeout_setTimeout
     _I2C_ByteWrite
       _I2C2_MasterWrite
         _I2C2_MasterTRBInsert
         _I2C2_MasterWriteTRBBuild
       _Timeout_hasExpired
       _Timeout_setTimeout
     ___aldiv
     ___altoft
       ___ftpack
       ___ftpack (ARG)
     ___awtoft
       ___ftpack
     ___ftadd
       ___altoft (ARG)
         ___ftpack
         ___ftpack (ARG)
       ___ftdiv (ARG)
         ___altoft (ARG)
           ___ftpack
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
       ___ftneg (ARG)
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
         ___lwtoft (ARG)
           ___ftpack
       ___ftpack (ARG)
       ___lwtoft (ARG)
         ___ftpack
     ___ftdiv
       ___altoft (ARG)
         ___ftpack
         ___ftpack (ARG)
       ___ftpack (ARG)
       ___ftpack (ARG)
       ___lwtoft (ARG)
         ___ftpack
     ___ftmul
       _Sensor_getSupplyVoltage (ARG)
         _ADC_GetConversionResult
         _ADC_IsConversionDone
         _ADC_SelectChannel
         _ADC_StartConversion
         _FVR_IsOutputReady
         _Sensor_peripheralSleep
         _Sensor_peripheralWake
         ___ftdiv
           ___altoft (ARG)
             ___ftpack
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
         ___lwtoft
           ___ftpack
       ___altoft (ARG)
         ___ftpack
         ___ftpack (ARG)
       ___awtoft (ARG)
         ___ftpack
       ___ftadd (ARG)
         ___altoft (ARG)
           ___ftpack
           ___ftpack (ARG)
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
         ___ftneg (ARG)
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
           ___lwtoft (ARG)
             ___ftpack
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
       ___ftdiv (ARG)
         ___altoft (ARG)
           ___ftpack
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
       ___ftneg (ARG)
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
         ___lwtoft (ARG)
           ___ftpack
       ___ftpack (ARG)
       ___lwtoft (ARG)
         ___ftpack
     ___ftneg
       ___ftdiv (ARG)
         ___altoft (ARG)
           ___ftpack
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
       ___lwtoft (ARG)
         ___ftpack
     ___fttol
       _Sensor_getSupplyVoltage (ARG)
         _ADC_GetConversionResult
         _ADC_IsConversionDone
         _ADC_SelectChannel
         _ADC_StartConversion
         _FVR_IsOutputReady
         _Sensor_peripheralSleep
         _Sensor_peripheralWake
         ___ftdiv
           ___altoft (ARG)
             ___ftpack
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
         ___lwtoft
           ___ftpack
       ___altoft (ARG)
         ___ftpack
         ___ftpack (ARG)
       ___ftadd (ARG)
         ___altoft (ARG)
           ___ftpack
           ___ftpack (ARG)
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
         ___ftneg (ARG)
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
           ___lwtoft (ARG)
             ___ftpack
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
       ___ftmul (ARG)
         _Sensor_getSupplyVoltage (ARG)
           _ADC_GetConversionResult
           _ADC_IsConversionDone
           _ADC_SelectChannel
           _ADC_StartConversion
           _FVR_IsOutputReady
           _Sensor_peripheralSleep
           _Sensor_peripheralWake
           ___ftdiv
             ___altoft (ARG)
               ___ftpack
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
           ___lwtoft
             ___ftpack
         ___altoft (ARG)
           ___ftpack
           ___ftpack (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___altoft (ARG)
             ___ftpack
             ___ftpack (ARG)
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
           ___ftneg (ARG)
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
             ___lwtoft (ARG)
               ___ftpack
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
         ___ftneg (ARG)
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
           ___lwtoft (ARG)
             ___ftpack
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
     ___lwtoft
       ___ftpack
   _DOOR_init
     _Storage_load
       _DATAEE_ReadByte
       _DATAEE_WriteByte
   _DOOR_resetPos
   _DOOR_run
   _SYSTEM_Initialize
     _ADC_Initialize
     _FVR_Initialize
     _I2C2_Initialize
     _OSCILLATOR_Initialize
     _PIN_MANAGER_Initialize
       _IOCAF2_SetInterruptHandler
     _SPI1_Initialize
     _TMR1_Initialize
       _TMR1_SetInterruptHandler
     _TMR2_Initialize
     _WDT_Initialize
   _Sensor_peripheralSleep
   _Wireless_init
     _RF_Init
     _RF_ResetStatusIRQ
       _RF_WriteRegister
         _SPI_WriteRead
           _SPI1_Exchange8bit
     _RF_WriteRegister
       _SPI_WriteRead
         _SPI1_Exchange8bit
     _RF_WriteRegisterData
       _SPI_WriteBuffer
         _SPI_WriteRead
           _SPI1_Exchange8bit
       _SPI_WriteRead
         _SPI1_Exchange8bit
   _Wireless_packageData
     _BMP_readTemperature (ARG)
       _BMP_init
         _Diag_setTempSensorHealth
         _I2C_BufferRead
           _I2C2_MasterRead
             _I2C2_MasterReadTRBBuild
             _I2C2_MasterTRBInsert
           _I2C2_MasterWrite
             _I2C2_MasterTRBInsert
             _I2C2_MasterWriteTRBBuild
           _Timeout_hasExpired
           _Timeout_setTimeout
         _I2C_ByteWrite
           _I2C2_MasterWrite
             _I2C2_MasterTRBInsert
             _I2C2_MasterWriteTRBBuild
           _Timeout_hasExpired
           _Timeout_setTimeout
       _Diag_getTempSensorHealth
       _Diag_setTempSensorHealth
       _HMC5883L_ReadBits
         _HMC5883L_I2C_BufferRead
           _I2C_BufferRead
             _I2C2_MasterRead
               _I2C2_MasterReadTRBBuild
               _I2C2_MasterTRBInsert
             _I2C2_MasterWrite
               _I2C2_MasterTRBInsert
               _I2C2_MasterWriteTRBBuild
             _Timeout_hasExpired
             _Timeout_setTimeout
       _I2C_BufferRead
         _I2C2_MasterRead
           _I2C2_MasterReadTRBBuild
           _I2C2_MasterTRBInsert
         _I2C2_MasterWrite
           _I2C2_MasterTRBInsert
           _I2C2_MasterWriteTRBBuild
         _Timeout_hasExpired
         _Timeout_setTimeout
       _I2C_ByteWrite
         _I2C2_MasterWrite
           _I2C2_MasterTRBInsert
           _I2C2_MasterWriteTRBBuild
         _Timeout_hasExpired
         _Timeout_setTimeout
       ___aldiv
       ___altoft
         ___ftpack
         ___ftpack (ARG)
       ___awtoft
         ___ftpack
       ___ftadd
         ___altoft (ARG)
           ___ftpack
           ___ftpack (ARG)
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
         ___ftneg (ARG)
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
           ___lwtoft (ARG)
             ___ftpack
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
       ___ftdiv
         ___altoft (ARG)
           ___ftpack
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
       ___ftmul
         _Sensor_getSupplyVoltage (ARG)
           _ADC_GetConversionResult
           _ADC_IsConversionDone
           _ADC_SelectChannel
           _ADC_StartConversion
           _FVR_IsOutputReady
           _Sensor_peripheralSleep
           _Sensor_peripheralWake
           ___ftdiv
             ___altoft (ARG)
               ___ftpack
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
           ___lwtoft
             ___ftpack
         ___altoft (ARG)
           ___ftpack
           ___ftpack (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___altoft (ARG)
             ___ftpack
             ___ftpack (ARG)
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
           ___ftneg (ARG)
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
             ___lwtoft (ARG)
               ___ftpack
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
         ___ftneg (ARG)
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
           ___lwtoft (ARG)
             ___ftpack
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
       ___ftneg
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
         ___lwtoft (ARG)
           ___ftpack
       ___fttol
         _Sensor_getSupplyVoltage (ARG)
           _ADC_GetConversionResult
           _ADC_IsConversionDone
           _ADC_SelectChannel
           _ADC_StartConversion
           _FVR_IsOutputReady
           _Sensor_peripheralSleep
           _Sensor_peripheralWake
           ___ftdiv
             ___altoft (ARG)
               ___ftpack
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
           ___lwtoft
             ___ftpack
         ___altoft (ARG)
           ___ftpack
           ___ftpack (ARG)
         ___ftadd (ARG)
           ___altoft (ARG)
             ___ftpack
             ___ftpack (ARG)
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
           ___ftneg (ARG)
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
             ___lwtoft (ARG)
               ___ftpack
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
         ___ftmul (ARG)
           _Sensor_getSupplyVoltage (ARG)
             _ADC_GetConversionResult
             _ADC_IsConversionDone
             _ADC_SelectChannel
             _ADC_StartConversion
             _FVR_IsOutputReady
             _Sensor_peripheralSleep
             _Sensor_peripheralWake
             ___ftdiv
               ___altoft (ARG)
                 ___ftpack
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
             ___lwtoft
               ___ftpack
           ___altoft (ARG)
             ___ftpack
             ___ftpack (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___altoft (ARG)
               ___ftpack
               ___ftpack (ARG)
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
             ___ftneg (ARG)
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
           ___ftneg (ARG)
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
             ___lwtoft (ARG)
               ___ftpack
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
       ___lwtoft
         ___ftpack
     _Diag_getSensorHealth (ARG)
     _Sensor_getSupplyVoltage (ARG)
       _ADC_GetConversionResult
       _ADC_IsConversionDone
       _ADC_SelectChannel
       _ADC_StartConversion
       _FVR_IsOutputReady
       _Sensor_peripheralSleep
       _Sensor_peripheralWake
       ___ftdiv
         ___altoft (ARG)
           ___ftpack
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
       ___lwtoft
         ___ftpack
     _Wireless_checkDataReceived (ARG)
       _DOOR_resetPos
       _DOOR_update
         _Storage_save
           _DATAEE_WriteByte
       _RF_DataIsReady
         _RF_ReadRegister
           _SPI_WriteRead
             _SPI1_Exchange8bit
       _RF_RxPayload
         _RF_ReadRegisterData
           _SPI_WriteRead
             _SPI1_Exchange8bit
           _SPI_WriteReadBuffer
             _SPI_WriteRead
               _SPI1_Exchange8bit
       ___lmul
     _Wireless_sendData (ARG)
       _RF_ResetStatusIRQ
         _RF_WriteRegister
           _SPI_WriteRead
             _SPI1_Exchange8bit
       _RF_TxPayload
         _RF_Write
           _SPI_WriteRead
             _SPI1_Exchange8bit
         _RF_WriteRegisterData
           _SPI_WriteBuffer
             _SPI_WriteRead
               _SPI1_Exchange8bit
           _SPI_WriteRead
             _SPI1_Exchange8bit
     ___bmul (ARG)
     ___ftmul (ARG)
       _Sensor_getSupplyVoltage (ARG)
         _ADC_GetConversionResult
         _ADC_IsConversionDone
         _ADC_SelectChannel
         _ADC_StartConversion
         _FVR_IsOutputReady
         _Sensor_peripheralSleep
         _Sensor_peripheralWake
         ___ftdiv
           ___altoft (ARG)
             ___ftpack
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
         ___lwtoft
           ___ftpack
       ___altoft (ARG)
         ___ftpack
         ___ftpack (ARG)
       ___awtoft (ARG)
         ___ftpack
       ___ftadd (ARG)
         ___altoft (ARG)
           ___ftpack
           ___ftpack (ARG)
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
         ___ftneg (ARG)
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
           ___lwtoft (ARG)
             ___ftpack
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
       ___ftdiv (ARG)
         ___altoft (ARG)
           ___ftpack
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
       ___ftneg (ARG)
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
         ___lwtoft (ARG)
           ___ftpack
       ___ftpack (ARG)
       ___lwtoft (ARG)
         ___ftpack
     ___fttol (ARG)
       _Sensor_getSupplyVoltage (ARG)
         _ADC_GetConversionResult
         _ADC_IsConversionDone
         _ADC_SelectChannel
         _ADC_StartConversion
         _FVR_IsOutputReady
         _Sensor_peripheralSleep
         _Sensor_peripheralWake
         ___ftdiv
           ___altoft (ARG)
             ___ftpack
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
         ___lwtoft
           ___ftpack
       ___altoft (ARG)
         ___ftpack
         ___ftpack (ARG)
       ___ftadd (ARG)
         ___altoft (ARG)
           ___ftpack
           ___ftpack (ARG)
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
         ___ftneg (ARG)
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
           ___lwtoft (ARG)
             ___ftpack
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
       ___ftmul (ARG)
         _Sensor_getSupplyVoltage (ARG)
           _ADC_GetConversionResult
           _ADC_IsConversionDone
           _ADC_SelectChannel
           _ADC_StartConversion
           _FVR_IsOutputReady
           _Sensor_peripheralSleep
           _Sensor_peripheralWake
           ___ftdiv
             ___altoft (ARG)
               ___ftpack
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
           ___lwtoft
             ___ftpack
         ___altoft (ARG)
           ___ftpack
           ___ftpack (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___altoft (ARG)
             ___ftpack
             ___ftpack (ARG)
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
           ___ftneg (ARG)
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
             ___lwtoft (ARG)
               ___ftpack
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
         ___ftneg (ARG)
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
           ___lwtoft (ARG)
             ___ftpack
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
     ___lldiv (ARG)
     _abs (ARG)
   _Wireless_sleep
     _RF_ReadRegisterData
       _SPI_WriteRead
         _SPI1_Exchange8bit
       _SPI_WriteReadBuffer
         _SPI_WriteRead
           _SPI1_Exchange8bit
     _RF_WriteRegister
       _SPI_WriteRead
         _SPI1_Exchange8bit
   _Wireless_wake
     _RF_ReadRegisterData
       _SPI_WriteRead
         _SPI1_Exchange8bit
       _SPI_WriteReadBuffer
         _SPI_WriteRead
           _SPI1_Exchange8bit
     _RF_WriteRegister
       _SPI_WriteRead
         _SPI1_Exchange8bit
   ___lldiv
   _setSleepTime

 _INTERRUPT_InterruptManager (ROOT)
   _I2C2_BusCollisionISR
   _I2C2_ISR
     _I2C2_FunctionComplete
     _I2C2_Stop
   _PIN_MANAGER_IOC
     _IOCAF2_ISR
       Absolute function(Fake) *
       _IOCAF2_DefaultInterruptHandler *
   _TMR1_ISR
     _TMR1_CallBack
       Absolute function(Fake) *
       _TMR1_DefaultInterruptHandler *
       _Timeout_increment *

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             3F0      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      7       E       2      100.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50     4F      4F       5       98.8%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BANK1               50     27      4A       7       92.5%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BITBANK2            50      0       0       8        0.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BANK2               50      0      4F       9       98.8%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BITBANK3            50      0       0      10        0.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BANK3               50      A      2A      11       52.5%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BITBANK4            50      0       0      12        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BANK4               50      0       0      13        0.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BITBANK5            50      0       0      14        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BANK5               50      0       0      15        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BITBANK6            50      0       0      16        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BANK6               50      0       0      17        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BITBANK7            50      0       0      18        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BANK7               50      0       0      19        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
ABS                  0      0     120      20        0.0%
BITBANK8            50      0       0      21        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BANK8               50      0       0      22        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITBANK9            50      0       0      23        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BANK9               50      0       0      24        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITBANK10           50      0       0      25        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BANK10              50      0       0      26        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITBANK11           50      0       0      27        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BANK11              50      0       0      28        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITBANK12           30      0       0      29        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BANK12              30      0       0      30        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
DATA                 0      0     120      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V1.45 build -152302408 
Symbol Table                                                                                   Sat Jan 13 00:28:50 2018

                             _Wireless_init 0D1F                           _SPI1_Exchange8bit 1567  
                             _Wireless_wake 17E1                          ??_RF_WriteRegister 0024  
                              _RF_TxPayload 176F                                ___altoft@exp 002F  
                            _Wireless_sleep 169E                                           pc 0002  
              __end_of_Wireless_packageData 07A0                              ___bmul@product 0023  
                        ?_SPI1_Exchange8bit 0070                                 __CFG_CP$OFF 0000  
                     ?_I2C2_MasterTRBInsert 0021                               ___altoft@sign 0030  
                                        _b1 01A0                __size_of_RF_ReadRegisterData 001D  
                    __end_of_FVR_Initialize 14D2                         RF_TxPayload@payload 0030  
                         ??_SPI_WriteBuffer 0026             __size_of_Sensor_peripheralSleep 0005  
            I2C2_MasterReadTRBBuild@address 0024             HMC5883L_I2C_BufferRead@ReadAddr 003E  
                              ___ftadd@exp1 0050                                ___ftadd@exp2 004F  
                             _doorOpenAngle 00E6                                 __CFG_LVP$ON 0000  
                              ___ftadd@sign 004E                                         l522 156F  
                                       l358 0B74                                         l618 0495  
                                       l498 08A9                                         _PR2 001B  
                          ??_RF_DataIsReady 0026                                __CFG_CPD$OFF 0000  
                           _timer1ReloadVal 007C                                         _abs 15AA  
                       ??_SPI1_Exchange8bit 0021                                ?_DOOR_update 0027  
                           _TMR2_Initialize 1529                                __CFG_BORV$LO 0000  
                                       wreg 0009              HMC5883L_I2C_BufferRead@pBuffer 003C  
                              __CFG_IESO$ON 0000          __end_of_IOCAF2_SetInterruptHandler 1555  
                _IOCAF2_SetInterruptHandler 154C                               _globalCounter 00CC  
                         _Wireless_sendData 159B                         _BMP_readTemperature 0077  
                    ??_RF_WriteRegisterData 002C                               _DOOR_resetPos 14DA  
                              ___ftdiv@cntr 003B                            __end_of_I2C2_ISR 05EA  
                        ?_Wireless_sendData 0070                                ___ftdiv@sign 0040  
                    RF_ResetStatusIRQ@flags 0026                                        l1022 0086  
                                      l1023 0096                                        ?_abs 0021  
                                      l1082 079A                                        l1094 0CA5  
                                      l1353 0DAB                                        l1518 0689  
                                      l1494 0C12                                        l1495 0C1A  
                                      l1487 0BFF                                        l5200 08D4  
                                      l1578 0E89                                        l6010 0E73  
                                      l6022 0E9A                                        l6016 0E80  
                                      l6008 0E65                                        l6018 0E8C  
                                      l5172 0B5F                                        l5340 0BE6  
                                      l5236 1756                                        l5228 082E  
                                      l6300 03D8                                        l5262 07C7  
                                      l5430 09C0                                        l5350 0C0C  
                                      l5342 0BEB                                        l5334 0BD5  
                                      l5176 0B66                                        l5248 0B25  
                                      l5272 07EB                                        l5512 0EBA  
                                      l5178 0B6C                                        l5194 08FE  
                                      l5258 07BC                                        l5426 09B5  
                                      l5338 0BDC                                        l6082 00E6  
                                      l6074 00C5                                        l6322 0443  
                                      l5284 07FC                                        l5276 07F6  
                                      l5268 07CD                                        l5348 0C04  
                                      l5540 0F2A                                        l5532 0F11  
                                      l6180 0B8A                                        l6332 0484  
                                      l5438 09C6                                        l5518 0ED0  
                                      l6190 0BB8                                        l6182 0B98  
                                      l6334 048D                                        l6318 0433  
                                      l5480 17BB                                        l6194 0BC3  
                                      l6282 0392                                        l5708 0A8E  
                                      l5820 0E05                                        l6292 03AF  
                                      l5806 0DCC                                        l5902 067B  
                                      l5654 0A15                                        l5494 0965  
                                      l5750 0CCE                                        l6294 03B7  
                                      l5824 0E13                                        l5816 0DFA  
                                      l5808 0DDA                                        l5840 09ED  
                                      l5912 06AD                                        l5904 0685  
                                      l5648 0A08                                        l5760 0D17  
                                      l5682 0C65                                        l5674 0C49  
                                      l5922 06C8                                        l5498 096F  
                                      l5746 0CC1                                        l6298 03C0  
                                      l5852 0856                                        l5908 069B  
                                      l5932 0F63                                        l5756 0D11  
                                      l5780 1617                                        l5838 09DD  
                                      l5862 0612                                        l5950 0FB4  
                                      l5872 0628                                        l5768 0AB3  
                                      l5776 1611                                        l5890 0655  
                                      l5866 0619                                        l5962 0FD0  
                                      l5954 0FBC                                        l5938 0F79  
                                      l5892 065F                                        l5884 0642  
                                      l5798 0DBC                                        l5894 0664  
                                      l5966 0FD8                                        l5990 0E35  
                                      l5896 0668                  __size_of_HMC5883L_ReadBits 0046  
                                      _LATA 010C                                        _LATB 010D  
                                      _LATC 010E                                        u5070 0A83  
                                      u5054 0A65                                        u5055 0A64  
                                      u5215 0DCF                                        u5064 0A71  
                                      u5065 0A70                                        u5075 0A81  
                                      u5235 0DDB                                        u5245 0DEF  
                                      u5255 0DFB                                        u5415 0643  
                                      u4625 0B21                                        u5505 067C  
                                      u4715 0BE1                                        u5445 0656  
                                      u5605 0FBD                                        u4735 0BFA  
                                      u5295 09E2                                        u5615 0FC3  
                                      u4755 0C07                                        u5475 0669  
                                      u4915 0EE2                                        u6195 03D6  
                                      u6507 0366                                        u4925 0EF2  
                                      u5645 0FD9                                        u5725 0E66  
                                      u6517 0389                                        u4935 0F12  
                                      u5655 0FDF                                        u5575 0F85  
                                      u6607 17A3                                        u6527 03A5  
                                      u4945 0F21                                        u5585 0F95  
                                      u6617 080E                                        u4865 0970  
                                      u6537 042C                                        u4795 0C21  
                                      u4955 0F2B                                        u5755 0E81  
                                      u5835 00FF                                        u6627 0814  
                                      u4875 0977                                        u6547 17FA  
                                      u5845 010D                                        u6637 0821  
                                      u6557 1785                                        u5695 0E3C  
                                      u6647 0827                                        u6567 15D5  
                                      u5935 0B8D                                        u6657 166D  
                                      u6577 17DD                                        u6587 16FD  
                                      u5955 0B99                                        u6597 0D25  
                                      u5965 0BAD                                        u5975 0BB9  
                                      _TMR2 001A                                        _WPUA 020C  
                                      _WPUB 020D                                        _WPUC 020E  
                              _Storage_load 0A90                                __CFG_WRT$OFF 0000  
                              _Storage_save 16CF                               __CFG_FCMEN$ON 0000  
                                      abs@a 0021                                        _data 01B8  
                                      _main 0346                          _Timeout_hasExpired 0ADA  
                                      _curr 0120                                ___ftpack@arg 0021  
                                      _var1 00D4                                        _var2 0131  
                              ___ftpack@exp 0024                             __end_of_RF_Init 14DA  
                                      fsr0h 0005                                        fsr1h 0007  
                                      indf0 0000                                        fsr0l 0004  
                                      indf1 0001                                        fsr1l 0006  
                                      btemp 007E                 I2C2_MasterReadTRBBuild@ptrb 0028  
                             __CFG_BOREN$ON 0000                         ??_Wireless_sendData 0031  
               RF_WriteRegisterData@bufSize 002B                          __size_of_DOOR_init 0009  
                                      start 0037                           _Timeout_increment 0801  
                 __end_of_SPI1_Exchange8bit 1573                    ?_Sensor_getSupplyVoltage 0041  
          __end_of_Diag_getTempSensorHealth 14C5            __end_of_Diag_setTempSensorHealth 1521  
                    __end_of_Wireless_sleep 16B6                   HMC5883L_ReadBits@bitStart 0044  
                            ?_Wireless_init 0070                  ??_TMR1_SetInterruptHandler 0023  
                            ?_Wireless_wake 0070                               _SPI_WriteRead 14F2  
                         ___bmul@multiplier 0024                               __CFG_MCLRE$ON 0000  
                              ___ftmul@cntr 005F                          ?_Timeout_increment 0070  
                              ___ftmul@sign 0060                         ?_Timeout_hasExpired 0070  
                      ?_BMP_readTemperature 00A0                                ___fttol@exp1 006E  
                                     ??_abs 0023                   __size_of_DATAEE_WriteByte 0023  
                              ___fttol@lval 006A                            __end_of_BMP_init 0CA5  
                                _i2c2_state 0079                            __end_of_DOOR_run 14C8  
                           ?_FVR_Initialize 0070              __size_of_OSCILLATOR_Initialize 0007  
                       __size_of_IOCAF2_ISR 000D               __end_of_OSCILLATOR_Initialize 150B  
                       ??_Timeout_increment 0070                     _I2C2_MasterReadTRBBuild 0930  
                           __end_of___aldiv 0E1C                                       ?_main 0070  
                           __end_of___ftadd 06E0                           __end_of_I2C2_Stop 171E  
                           __end_of___ftdiv 0F4C                             __end_of___ftneg 1543  
                           __end_of___lldiv 0BCC                             __end_of___ftmul 1000  
                                     _T1CON 0018                             __end_of___fttol 0EA3  
                                     _T2CON 001C                                       i1l300 051B  
            __size_of_I2C2_FunctionComplete 0011                                       i1l310 0563  
                                     i1l161 0032                                       i1l153 0015  
                                     i1l322 05CB                                       i1l314 0583  
                                     i1l155 0021                                       i1l317 0598  
                                     i1l157 002D                                       i1l318 05A6  
                                     i1l329 15E7                                       i1l293 04E7  
                                     i1l294 04EE                                       i1l288 04BC  
                                     i1l299 050F               __end_of_I2C2_FunctionComplete 15EA  
                 __end_of_Wireless_sendData 15AA                         setSleepTime@timeSec 0021  
                                     _TMR1H 0017                                       _TMR1L 0016  
                                     _TRISA 008C                                       _TRISB 008D  
                                     _TRISC 008E            __size_of_ADC_GetConversionResult 0009  
                       ___lmul@multiplicand 0025                        ??_Timeout_hasExpired 0021  
                          __end_of_TMR1_ISR 153A                                       _cTemp 012B  
                                     _adc_p 0124                                       _adc_t 00D0  
                            ?_DOOR_resetPos 0070                             _DATAEE_ReadByte 1580  
                    __size_of_I2C_ByteWrite 003C                               ___awtoft@sign 002E  
                   __end_of_PIN_MANAGER_IOC 14F2                              _WDT_Initialize 14D2  
                                     _errno 0137                               ___ftpack@sign 0025  
              I2C2_MasterReadTRBBuild@pdata 0021                        _Diag_getSensorHealth 15FC  
                   __end_of_TMR1_Initialize 169E                            __end_of_RF_Write 15D9  
                                     pclath 000A                      _Sensor_peripheralSleep 14E2  
                      RF_DataIsReady@status 0028                   __end_of_Timeout_increment 080B  
                                     status 0003                                       wtemp0 007E  
                  __size_of_SPI1_Initialize 0007                              ?_SPI_WriteRead 0070  
                           ?_Wireless_sleep 0070                           ??_I2C2_MasterRead 002F  
                   RF_WriteRegisterData@buf 0029                     RF_WriteRegisterData@reg 002D  
                     ??_BMP_readTemperature 00A3                         RF_WriteRegister@reg 0024  
                         ??_I2C2_Initialize 0021                             __initialization 0039  
                       RF_WriteRegister@val 0023                  Wireless_packageData@status 00C0  
                              __end_of_main 04A5                      ??_I2C2_MasterTRBInsert 0023  
                   __end_of_TMR2_Initialize 1531                 ?_INTERRUPT_InterruptManager 0070  
          __end_of_I2C2_MasterWriteTRBBuild 0890                                      ??_main 00C5  
                             ___fttol@sign1 0069                                 _i2c2_object 00C7  
                            __CFG_PLLEN$OFF 0000                           __end_of_DOOR_init 154C  
                    __end_of_WDT_Initialize 14D6                     __size_of_I2C_BufferRead 005E  
             __size_of_ADC_IsConversionDone 0007                                      _ADCON0 009D  
                                    _ADCON1 009E                          _Timeout_setTimeout 16B6  
                          __end_of___altoft 0A05                                   ??_RF_Init 0021  
                                    _ADRESH 009C                                      _EEADRH 0192  
                                    i1S6574 1000                                      _ADRESL 009B  
                                    _EEADRL 0191                                      _EEDATH 0194  
                                    _EEDATL 0193                                      _EECON2 0196  
                       I2C_ByteWrite@status 0038                       ?_Diag_getSensorHealth 0070  
                          __end_of___awtoft 086D                                      _ANSELA 018C  
                                    _ANSELB 018D                                      _ANSELC 018E  
                          __end_of___ftpack 0C31                                      _BORCON 0116  
                                    _T1GCON 0019                        _Wireless_packageData 06E0  
              __end_of_I2C2_BusCollisionISR 0004                                      i1l4062 171C  
                                    i1l4048 157D                                      i1l4510 0538  
                                    i1l4550 058A                                      i1l4542 0571  
                                    i1l4534 055E                                      i1l4528 0554  
                                    i1l4562 05AC                                      i1l4490 04FA  
                                    i1l4580 05D2                                      i1l4582 05D6  
                                    i1l4566 05B3                                      i1l4478 04DB  
                                    i1l4496 050A                                      i1l4578 05CF  
                                    i1l4588 05DF                                      _FVRCON 0117  
           __end_of_Sensor_getSupplyVoltage 0A4A                    _BMP_readTemperature$2605 00AF  
                          __end_of___lwtoft 165B                                      _OSCCON 0099  
                                    _WDTCON 0097                         ?_Timeout_setTimeout 0021  
                     I2C2_MasterRead@length 002B                       SPI1_Exchange8bit@data 0021  
                           ??_Wireless_init 002E                             ??_Wireless_wake 002F  
                       _SPI_WriteReadBuffer 082B                  __size_of_SPI1_Exchange8bit 000C  
                            __CFG_PWRTE$OFF 0000                  HMC5883L_ReadBits@slaveAddr 004A  
                          Wireless_wake@reg 0030                            SPI_WriteBuffer@i 0028  
      __end_of_TMR1_DefaultInterruptHandler 07FF       __size_of_TMR1_DefaultInterruptHandler 0001  
              _TMR1_DefaultInterruptHandler 07FE                               _I2C_ByteWrite 098C  
                                    ___bmul 160E                        HMC5883L_ReadBits@tmp 004C  
                     RF_DataIsReady@channel 0027                                      ___lmul 095C  
                                 ??___aldiv 0029                                      _dig_P1 014D  
                                    _dig_P2 014B                                      _dig_P3 0149  
                                    _dig_P4 0147                                      _dig_P5 0145  
                                    _dig_P6 0143                                      _dig_P7 0141  
                                    _dig_P8 013F                                      _dig_P9 013D  
                                    _dig_T1 00D7                                      _dig_T2 0153  
                                    _dig_T3 0151                                      _dig_T4 014F  
                                 ??___ftadd 004A                              _p_i2c2_current 0077  
                            __CFG_STVREN$ON 0000                   ??_I2C2_MasterReadTRBBuild 0026  
                                 ??___ftdiv 0037                                   ??___ftneg 0044  
                                 ??___lldiv 0029                            SPI_WriteRead@val 0022  
                                 ??___ftmul 0057                                   ??___fttol 0065  
                    RF_ReadRegisterData@buf 002A                    _Diag_getTempSensorHealth 14C2  
                    RF_ReadRegisterData@reg 002E                    _Diag_setTempSensorHealth 1519  
            __size_of_Sensor_peripheralWake 0005                                      _t_fine 012E  
                                 ?_I2C2_ISR 0070               __end_of_Sensor_peripheralWake 14EC  
                  I2C2_Stop@completion_code 0072                                _HMC5883Lmode 00DD  
                      ??_Timeout_setTimeout 0023                     __end_of_DATAEE_ReadByte 158D  
             I2C2_MasterReadTRBBuild@length 0023                       ___ftmul@f3_as_product 005C  
                      ?_SPI_WriteReadBuffer 0023                  __size_of_Wireless_sendData 000F  
                           ??_DOOR_resetPos 0021                     RF_TxPayload@payloadSize 002E  
                           ?_WDT_Initialize 0070                          _sensorUpdatePeriod 016B  
                      __size_of_DOOR_update 0016    TMR1_SetInterruptHandler@InterruptHandler 0021  
IOCAF2_SetInterruptHandler@InterruptHandler 0021                        DOOR_update@openAngle 0029  
                          ?_PIN_MANAGER_IOC 0070                       ?_Wireless_packageData 00B4  
                              ??_IOCAF2_ISR 0070                    HMC5883L_ReadBits@regAddr 0043  
                     __end_of_TMR1_CallBack 159B                         _RF_ReadRegisterData 17C4  
                          ?_TMR1_Initialize 0070                           _SYSTEM_Initialize 1739  
                   __end_of__initialization 0073                                  ___altoft@c 0029  
                __size_of_Timeout_increment 000A                                   ?_BMP_init 0070  
                                 ?_DOOR_run 0070                                  ___ftadd@f1 0044  
                                ___ftadd@f2 0047                             ??_SPI_WriteRead 0022  
                        ?_SYSTEM_Initialize 0070                                  ___ftdiv@f1 0034  
                                ___ftdiv@f2 0031                                  ___ftdiv@f3 003C  
                         ?_I2C2_MasterWrite 0028                             _SPI_WriteBuffer 1754  
                                ___ftneg@f1 0041                                  ___awtoft@c 0029  
                       ___bmul@multiplicand 0021                              ?_I2C_ByteWrite 002F  
                                ___ftmul@f1 0051                                  ___ftmul@f2 0054  
                                 BMP_init@t 003F                          ??_I2C2_MasterWrite 002C  
                                ___fttol@f1 0061                __size_of_ADC_StartConversion 0003  
                            __pcstackCOMMON 0070                   Wireless_packageData@tempC 00B5  
               I2C_BufferRead@NumByteToRead 0034                                __pidataBANK1 14CB  
                              __pidataBANK2 14DE                         ??_SYSTEM_Initialize 0023  
                    I2C_ByteWrite@WriteAddr 0030                                   ?_TMR1_ISR 0070  
             ?_TMR1_DefaultInterruptHandler 0070                            _DATAEE_WriteByte 0890  
                         ??_SPI1_Initialize 0021                        ?_RF_ReadRegisterData 002A  
                            _i2c2_trb_count 00E0                                  ??_I2C2_ISR 0073  
                          ?_TMR2_Initialize 0070                                   ?_RF_Write 0070  
                        __end_of_IOCAF2_ISR 1580                                  ___lwtoft@c 0029  
                     ??_SPI_WriteReadBuffer 0025                     _ADC_GetConversionResult 155E  
                 __size_of_RF_WriteRegister 0016                              _OPTION_REGbits 0095  
                  ?_HMC5883L_I2C_BufferRead 003C                      Storage_save@closeAngle 0024  
                  _I2C2_MasterWriteTRBBuild 086D                 ?_IOCAF2_SetInterruptHandler 0021  
          ??_IOCAF2_DefaultInterruptHandler 0070             ?_IOCAF2_DefaultInterruptHandler 0070  
                    ??_Diag_getSensorHealth 0021                I2C2_MasterWriteTRBBuild@ptrb 0027  
                 __end_of_SYSTEM_Initialize 1754                    __size_of_RF_ReadRegister 001A  
                                __pbssBANK1 00C7                                  __pbssBANK2 0120  
                                __pbssBANK3 01A0                                  ??_BMP_init 003C  
                                ??_DOOR_run 0021                                  __pnvCOMMON 007C  
                      I2C_ByteWrite@pBuffer 002F                   SPI_WriteReadBuffer@bufOut 0028  
                          ??_FVR_Initialize 0021                                  __pmaintext 0346  
                     SPI_WriteBuffer@bufOut 0023                        SPI_WriteReadBuffer@i 0029  
                                   ?___bmul 0021                                     ?___lmul 0021  
                   Diag_getSensorHealth@var 0022                                  ??_TMR1_ISR 0070  
                     ??_RF_ReadRegisterData 002C                                  __pintentry 0004  
                             ?_setSleepTime 0021                                   ?___altoft 0029  
                            ___lmul@product 0029                              main@doorStatus 01C9  
                                 ?___awtoft 0029                                   ?___ftpack 0021  
                                   _APFCON0 011D                                     _APFCON1 011E  
                      _I2C2_BusCollisionISR 0003                                  ??_RF_Write 0023  
                   __size_of_ADC_Initialize 0008                                   ?___lwtoft 0029  
          __size_of_Sensor_getSupplyVoltage 0045                            ?_DATAEE_ReadByte 0070  
            Wireless_checkDataReceived@data 0037                ??_Wireless_checkDataReceived 0033  
                            _I2C_BufferRead 07A0           I2C2_ISR@i2c_10bit_address_restart 00DE  
                    I2C2_MasterRead@address 002C                                   _I2C2_Stop 1703  
                  SPI_WriteReadBuffer@bufIn 0023                                     _OSCTUNE 0098  
                   ?_Sensor_peripheralSleep 0070                                     _SSP1ADD 0212  
                                   _SSP2ADD 021A                                     _SSP1BUF 0211  
                    ??_Wireless_packageData 00B8                                     _SSP2BUF 0219  
                    I2C_ByteWrite@slaveAddr 0035                                     _RF_Init 14D6  
                           _I2C2_MasterRead 08B3                     __end_of_SPI_WriteBuffer 176F  
                          main@doorOpenTime 01C5                             _I2C2_Initialize 171E  
             __size_of_RF_WriteRegisterData 001D                            ??_Wireless_sleep 002F  
                      DATAEE_WriteByte@bAdd 0022                      I2C2_MasterRead@trBlock 015D  
                           ??_I2C_ByteWrite 0031                           Wireless_sleep@reg 0030  
                     HMC5883L_ReadBits@data 0046                                     ___aldiv 0D9A  
                           __size_of___bmul 0012                       HMC5883L_ReadBits@mask 004B  
                            ??_setSleepTime 0023                             __size_of___lmul 0030  
                                   ___ftadd 05EA                                     ___ftdiv 0EA3  
                                   ___ftneg 153A                                     ___lldiv 0B79  
                                   ___ftmul 0F4C                                     ___fttol 0E1C  
                                ??___altoft 002D                   ??_ADC_GetConversionResult 0023  
           __end_of_HMC5883L_I2C_BufferRead 15FC                       ?_I2C2_BusCollisionISR 0070  
                                ??___awtoft 002C                                  ??___ftpack 0026  
                                   _heading 0155                   I2C2_MasterTRBInsert@count 0024  
                                   __ptext1 1633                                     __ptext2 0B79  
                                   __ptext3 17E1                                     __ptext4 169E  
                                   __ptext5 06E0                                     __ptext6 15AA  
                                   __ptext7 160E                                     __ptext8 159B  
                                   __ptext9 176F                   I2C2_MasterTRBInsert@pflag 0022  
                   Wireless_packageData@var 00BF                      __end_of_I2C_BufferRead 07FE  
                                ??___lwtoft 002C              ??_TMR1_DefaultInterruptHandler 0070  
                                 _T1CONbits 0018                       _OSCILLATOR_Initialize 1504  
                                 _T2CONbits 001C                                __size_of_abs 000F  
                __end_ofWireless_init@TADDR 1826              __end_of_Sensor_peripheralSleep 14E7  
         __size_of_TMR1_SetInterruptHandler 0009                            ___aldiv@dividend 0025  
                  ??_PIN_MANAGER_Initialize 0023                   ?_TMR1_SetInterruptHandler 0021  
                                 _IOCAFbits 0393                 main@doorClosedUpdateCounter 01C0  
                                 _IOCANbits 0392                                  ?_I2C2_Stop 0070  
                                 _IOCAPbits 0391                       _I2C2_FunctionComplete 15D9  
                                   _timeOut 0139                 __size_of_Timeout_hasExpired 004D  
                                 _DOOR_init 1543                  __size_of_SYSTEM_Initialize 001B  
                                   clrloop0 14FF                        end_of_initialization 0073  
                   __size_of_RF_DataIsReady 001D                 __end_of_BMP_readTemperature 0346  
                ??_Diag_getTempSensorHealth 0021                  ??_Diag_setTempSensorHealth 0021  
                         _FVR_IsOutputReady 14F8                           ??_RF_ReadRegister 0023  
                           ___lldiv@divisor 0021                __end_of_ADC_IsConversionDone 1519  
                           ___lldiv@counter 002E                          ?_FVR_IsOutputReady 0070  
                     I2C2_MasterWrite@pdata 002E                          _p_i2c2_trb_current 0078  
                     I2C2_MasterWrite@pflag 002B                            ___aldiv@quotient 002C  
                    I2C2_ISR@i2c_bytes_left 00DF               __size_of_I2C2_MasterTRBInsert 0052  
                       ??_FVR_IsOutputReady 0021                  Sensor_getSupplyVoltage@res 0047  
                          ??_WDT_Initialize 0021                                   _PORTCbits 000E  
                           ?_I2C_BufferRead 0031                           __size_of_I2C2_ISR 0145  
                          _RF_WriteRegister 165B                     __end_of_I2C2_MasterRead 08DB  
                          __CFG_FOSC$INTOSC 0000                     __end_of_I2C2_Initialize 1739  
                       _ADC_StartConversion 14C8                                  ?_DOOR_init 0070  
                  __end_of_DATAEE_WriteByte 08B3                            ?_SPI_WriteBuffer 0023  
                 __end_of_FVR_IsOutputReady 14FE                                 ___ftdiv@exp 003F  
                           _SPI1_Initialize 150B                  RF_ReadRegisterData@bufSize 002B  
              HMC5883L_TestConnection@F3560 0134                               ?_RF_RxPayload 002F  
                         __size_of_BMP_init 0074                Wireless_packageData@openTime 00B4  
                         __size_of_DOOR_run 0003                       __end_of_Wireless_init 0D9A  
                     __end_of_Wireless_wake 1800                                 ___ftmul@exp 005B  
                      ?_ADC_StartConversion 0070                               ?_RF_TxPayload 002E  
                    ??_I2C2_BusCollisionISR 0070                              __end_of___bmul 1620  
                            __end_of___lmul 098C                  ??_I2C2_MasterWriteTRBBuild 0025  
                         __size_of_TMR1_ISR 0009                     _Sensor_getSupplyVoltage 0A05  
                            _ADC_Initialize 1521                      ?_OSCILLATOR_Initialize 0070  
        __end_of_Wireless_checkDataReceived 0D1F                  _Wireless_checkDataReceived 0CA5  
               __size_of_Timeout_setTimeout 0019                   __size_of_I2C2_MasterWrite 002A  
                     _Sensor_peripheralWake 14E7                               ??_DOOR_update 0028  
                         __size_of_RF_Write 0010                      ?_I2C2_FunctionComplete 0070  
                       start_initialization 0039                     RF_RxPayload@payloadSize 002F  
                               ??_I2C2_Stop 0070             __size_of_PIN_MANAGER_Initialize 002B  
                               __end_of_abs 15B9                       __end_of_DOOR_resetPos 14DE  
                      __end_of_setSleepTime 1646                               ?_Storage_load 0024  
                             ?_Storage_save 0024            __size_of_HMC5883L_I2C_BufferRead 0012  
                            ??_RF_RxPayload 0030                         DATAEE_ReadByte@bAdd 0021  
           I2C2_MasterWriteTRBBuild@address 0023                                 _addressSize 00E9  
                  __size_of_PIN_MANAGER_IOC 0006                       __end_of_SPI_WriteRead 14F8  
                      I2C2_MasterRead@pdata 0029      __end_of_IOCAF2_DefaultInterruptHandler 0800  
   __size_of_IOCAF2_DefaultInterruptHandler 0001              _IOCAF2_DefaultInterruptHandler 07FF  
                  ?_I2C2_MasterReadTRBBuild 0021              Sensor_getSupplyVoltage@voltage 0044  
                      I2C2_MasterRead@pflag 002E                                 RF_Write@val 0023  
                            ??_RF_TxPayload 002F                       ??_ADC_StartConversion 0021  
                  __size_of_TMR1_Initialize 0017                                    ??___bmul 0022  
                                  ??___lmul 0029                 __end_of_SPI_WriteReadBuffer 084B  
             I2C2_MasterWriteTRBBuild@pdata 0021                        I2C2_ISR@pi2c_buf_ptr 00D9  
                    __end_of_ADC_Initialize 1529                                 __pdataBANK1 00E7  
                               __pdataBANK2 016B                      __size_of_TMR1_CallBack 000E  
                         __size_of___altoft 003D                     HMC5883L_ReadBits@length 0045  
                         __size_of___awtoft 0022                           __size_of___ftpack 0065  
                          ?_I2C2_MasterRead 0029                                 __pbssCOMMON 0077  
                          ?_I2C2_Initialize 0070                                   ___latbits 0002  
                         __size_of___lwtoft 0015                               __pcstackBANK0 0020  
                             __pcstackBANK1 00A0                               __pcstackBANK3 01C0  
                      _ADC_IsConversionDone 1512                    __size_of_TMR2_Initialize 0008  
                   __end_of_SPI1_Initialize 1512                                 ??_DOOR_init 0028  
                                  ?_RF_Init 0070                              ??_Storage_load 0025  
                             _i2c2_tr_queue 00E1                              ??_Storage_save 0025  
             __size_of_Diag_getSensorHealth 0012           Wireless_checkDataReceived@channel 003B  
                       __end_of_DOOR_update 1687                              _RF_DataIsReady 17A7  
                __size_of_FVR_IsOutputReady 0006                  SPI_WriteReadBuffer@bufSize 0024  
                                 __pnvBANK2 0167                 __end_of_RF_ReadRegisterData 17E1  
                 BMP_readTemperature@status 00B2        HMC5883L_I2C_BufferRead@NumByteToRead 003F  
                    _PIN_MANAGER_Initialize 0905                           _RF_ResetStatusIRQ 080B  
                    SPI_WriteBuffer@bufSize 0025                           _ADC_SelectChannel 15B9  
                  Wireless_sendData@payload 0032            __end_of_TMR1_SetInterruptHandler 155E  
                                  ?___aldiv 0021                   ??_Sensor_getSupplyVoltage 0044  
                                  ?___ftadd 0044                                    ?___ftdiv 0031  
                                  ?___ftneg 0041                                    ?___lldiv 0021  
                                  ?___ftmul 0051                                    ?___fttol 0061  
                        ?_RF_ResetStatusIRQ 0070                             ?_ADC_Initialize 0070  
              __end_of_RF_WriteRegisterData 17A7                          ?_ADC_SelectChannel 0070  
                                  _I2C2_ISR 04A5                ??_INTERRUPT_InterruptManager 0020  
                    ?_Sensor_peripheralWake 0070                                   __pswtext1 1000  
                     Storage_save@openAngle 0026                                   _doorState 00DC  
                       ??_RF_ResetStatusIRQ 0025                         ??_ADC_SelectChannel 0021  
                     ?_ADC_IsConversionDone 0070                     I2C_BufferRead@slaveAddr 003A  
                          __CFG_WDTE$NSLEEP 0000                             _RF_ReadRegister 16E9  
                    __end_of_RF_DataIsReady 17C4                    __size_of_DATAEE_ReadByte 000D  
                    Wireless_packageData@t1 00C3                      Wireless_packageData@t2 00C1  
             __size_of_Wireless_packageData 00C0             __end_of_I2C2_MasterReadTRBBuild 095C  
                             _TMR1_CallBack 158D                             ___aldiv@divisor 0021  
                          Storage_load@byte 0026                             ___aldiv@counter 002A  
                                  _BMP_init 0C31                                    _DOOR_run 14C5  
                                  _LATCbits 010E                          Wireless_init@TADDR 1821  
                                 clear_ram0 14FE                    __end_of_RF_WriteRegister 1671  
                                  _PIE1bits 0091                                    _PIE4bits 0094  
                 __end_of_RF_ResetStatusIRQ 082B                   __end_of_ADC_SelectChannel 15C9  
       __size_of_INTERRUPT_InterruptManager 0033                       __end_of_I2C_ByteWrite 09C8  
                                  _PIR1bits 0011                                    _PIR4bits 0014  
                                  _SSP1CON1 0215                                    _SSP2CON1 021D  
                                  _SSP2CON3 021F                            ??_I2C_BufferRead 0036  
                                  _TMR1_ISR 1531                                    _SSP1STAT 0214  
                                  _SSP2STAT 021C                           ??_PIN_MANAGER_IOC 0070  
             I2C2_MasterTRBInsert@ptrb_list 0021                           ??_TMR1_Initialize 0023  
                                  _RF_Write 15C9                                  _ADCON0bits 009D  
                          _I2C2_MasterWrite 08DB                    ADC_SelectChannel@channel 0022  
                   __size_of_FVR_Initialize 0004                        __end_of_RF_RxPayload 1633  
                __end_of_Timeout_hasExpired 0B27                                    _WPUCbits 020E  
            Diag_setTempSensorHealth@health 0022                                 _DOOR_update 1671  
                     __size_of_setSleepTime 0013                      I2C_BufferRead@ReadAddr 0033  
                     DATAEE_WriteByte@bData 0021                        __end_of_RF_TxPayload 178A  
                       __end_ofatan@coeff_a 1812                         __end_ofatan@coeff_b 1821  
                           ?_RF_DataIsReady 0070                            ?_SPI1_Initialize 0070  
                         ___lmul@multiplier 0021                __end_of_I2C2_MasterTRBInsert 0B79  
                          __size_of_RF_Init 0004                              ?_TMR1_CallBack 0070  
                         ?_DATAEE_WriteByte 0021                     _HMC5883L_I2C_BufferRead 15EA  
                         ??_TMR2_Initialize 0021                          ??_DATAEE_WriteByte 0022  
                         I2C_ByteWrite@data 0036                                  _EECON1bits 0195  
          HMC5883L_I2C_BufferRead@slaveAddr 0042                      DOOR_update@closedAngle 0027  
                  ?_ADC_GetConversionResult 0021              I2C2_MasterWriteTRBBuild@length 0022  
              __size_of_BMP_readTemperature 02CF                     __size_of_Wireless_sleep 0018  
                   ??_OSCILLATOR_Initialize 0021                            __size_of___aldiv 0082  
                          __size_of___ftadd 00F6                                _setSleepTime 1633  
                          __size_of___ftdiv 00A9                            __size_of___ftneg 0009  
                          __size_of___lldiv 0053                                    ___altoft 09C8  
                          __size_of___ftmul 00B4                        __end_of_Storage_load 0ADA  
                          __size_of___fttol 0087                        __end_of_Storage_save 16E9  
                                  ___awtoft 084B                                    ___ftpack 0BCC  
                   ??_I2C2_FunctionComplete 0070                    _TMR1_SetInterruptHandler 1555  
         __size_of_Diag_getTempSensorHealth 0003                     __end_of_RF_ReadRegister 1703  
         __size_of_Diag_setTempSensorHealth 0008                   ?_Diag_getTempSensorHealth 0070  
                                  ___lwtoft 1646                   ?_Diag_setTempSensorHealth 0070  
                     _TMR1_InterruptHandler 0167                 ?_Wireless_checkDataReceived 0070  
                    ??_ADC_IsConversionDone 0021                     _IOCAF2_InterruptHandler 0169  
                               _initialised 00DB                ??_IOCAF2_SetInterruptHandler 0023  
                                  __ptext10 15C9                                    __ptext11 0CA5  
                                  __ptext20 14DA                                    __ptext12 095C  
                                  __ptext21 0A05                                    __ptext13 1620  
                                _T1GCONbits 0019                                    __ptext30 0D1F  
                                  __ptext22 14E7                                    __ptext14 17C4  
                                  __ptext31 178A                                    __ptext23 14E2  
                                  __ptext15 082B                                    __ptext40 1529  
                                  __ptext32 1754                                    __ptext24 14F8  
                                  __ptext16 17A7                                    __ptext41 1687  
                                  __ptext33 080B                                    __ptext25 14C8  
                                  __ptext17 16E9                                    __ptext50 14C5  
                                  __ptext42 1555                                    __ptext34 165B  
                                  __ptext26 15B9                                    __ptext18 1671  
                                  __ptext51 1543                                    __ptext43 150B  
                                  __ptext35 14F2                                    __ptext27 1512  
                                  __ptext19 16CF                                    __ptext60 0EA3  
                                  __ptext52 0A90                                    __ptext44 0905  
                                  __ptext36 1567                                    __ptext28 155E  
                                  __ptext61 05EA                                    __ptext53 0890  
                                  __ptext45 154C                                    __ptext37 14D6  
                                  __ptext29 15FC                                    __ptext70 098C  
                                  __ptext62 084B                                    __ptext54 1580  
                                  __ptext46 1504                                    __ptext38 1739  
                                  __ptext71 07A0                                    __ptext63 09C8  
                                  __ptext55 0077                                    __ptext47 171E  
                                  __ptext39 14D2                                    __ptext72 16B6  
                                  __ptext64 0BCC                                    __ptext56 1646  
                                  __ptext48 14CE                                    __ptext81 1531  
                                  __ptext73 0ADA                                    __ptext65 0D9A  
                                  __ptext57 0E1C                                    __ptext49 1521  
                                  __ptext90 15D9                                    __ptext82 158D  
                                  __ptext74 08DB                                    __ptext66 0A4A  
                                  __ptext58 153A                                    __ptext91 0003  
                                  __ptext83 0801                                    __ptext75 086D  
                                  __ptext67 15EA                                    __ptext59 0F4C  
                                  __ptext84 07FE                                    __ptext76 08B3  
                                  __ptext68 14C2                                    __ptext85 14EC  
                                  __ptext77 0B27                                    __ptext69 0C31  
                                  __ptext86 1573                                    __ptext78 0930  
                                  __ptext87 07FF                                    __ptext79 1519  
                                  __ptext88 04A5                                    __ptext89 1703  
                  Wireless_packageData@data 00BA                                _SSP1CON1bits 0215  
                    Storage_load@closeAngle 0024                                _SSP2CON1bits 021D  
                              _SSP2CON2bits 021E                                  _IOCAF2_ISR 1573  
               DATAEE_WriteByte@GIEBitValue 0023                         RF_RxPayload@payload 0032  
                      _RF_WriteRegisterData 178A                           _HMC5883L_ReadBits 0A4A  
                             __size_of_main 015F                           ??_DATAEE_ReadByte 0021  
                __size_of_RF_ResetStatusIRQ 0020                          ?_HMC5883L_ReadBits 0043  
                __size_of_ADC_SelectChannel 0010                     I2C2_MasterWrite@address 0029  
                  __size_of_SPI_WriteBuffer 001B                                    int$flags 007E  
                                  _pressure 0128                         ??_HMC5883L_ReadBits 0047  
        __end_of_INTERRUPT_InterruptManager 0037                  _INTERRUPT_InterruptManager 0004  
                __end_of_Timeout_setTimeout 16CF                     I2C2_MasterWrite@trBlock 0162  
                              _SSP1STATbits 0214                    ??_Sensor_peripheralSleep 0021  
       __size_of_IOCAF2_SetInterruptHandler 0009                      BMP_readTemperature@tmp 00B3  
             __size_of_I2C2_BusCollisionISR 0001                                 atan@coeff_a 1800  
                               atan@coeff_b 1812                          RF_ReadRegister@reg 0024  
                        RF_ReadRegister@val 0025            __size_of_I2C2_MasterReadTRBBuild 002C  
                                _INTCONbits 000B                       Timeout_setTimeout@val 0021  
                                _FVRCONbits 0117                                _sensorHealth 00E7  
                    __size_of_Wireless_init 007B                       I2C_BufferRead@pBuffer 0031  
                    __size_of_Wireless_wake 001F                             ??_TMR1_CallBack 0070  
                 ??_HMC5883L_I2C_BufferRead 0041                     __size_of_WDT_Initialize 0004  
         __size_of_I2C2_MasterWriteTRBBuild 0023                   __end_of_HMC5883L_ReadBits 0A90  
                 ?_I2C2_MasterWriteTRBBuild 0021                                    intlevel1 0000  
                     ?_RF_WriteRegisterData 0029                 __end_of_ADC_StartConversion 14CB  
                           _doorClosedAngle 00E5                         I2C2_ISR@i2c_address 007A  
                          ___lldiv@dividend 0025                     ?_PIN_MANAGER_Initialize 0070  
           __end_of_ADC_GetConversionResult 1567                           __CFG_CLKOUTEN$OFF 0000  
                          ??_ADC_Initialize 0021                      I2C2_MasterWrite@length 0028  
                   ??_Sensor_peripheralWake 0021                __end_of_Diag_getSensorHealth 160E  
                    __size_of_DOOR_resetPos 0004                       __size_of_RF_RxPayload 0013  
                      _I2C2_MasterTRBInsert 0B27                               __pstringtext1 1800  
                             __pstringtext2 1812                               __pstringtext3 1821  
                     __size_of_RF_TxPayload 001B                              _FVR_Initialize 14CE  
                          ?_RF_ReadRegister 0070                __size_of_SPI_WriteReadBuffer 0020  
                          ___lldiv@quotient 002A                       Storage_load@openAngle 0027  
                      I2C_BufferRead@status 003B                                ___aldiv@sign 002B  
                    __size_of_SPI_WriteRead 0006                                 ?_IOCAF2_ISR 0070  
            __end_of_PIN_MANAGER_Initialize 0930                    __size_of_I2C2_MasterRead 0028  
                  __size_of_I2C2_Initialize 001B                          _referenceDirection 013B  
                        __size_of_I2C2_Stop 001B                             _PIN_MANAGER_IOC 14EC  
                  __end_of_I2C2_MasterWrite 0905                                _RF_RxPayload 1620  
                         ?_RF_WriteRegister 0023                             _TMR1_Initialize 1687  
       __size_of_Wireless_checkDataReceived 007A                          main@prevDoorStatus 01C4  
                     __size_of_Storage_load 004A                       __size_of_Storage_save 001A  
