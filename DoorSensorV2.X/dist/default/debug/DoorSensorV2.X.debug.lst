

Microchip Technology PIC LITE Macro Assembler V1.45 build -152302408 
                                                                                               Mon Oct 07 21:47:51 2019

Microchip Technology Omniscient Code Generator v1.45 (Free mode) build 201711160504
     1                           	processor	16LF1829
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataBANK1,global,class=CODE,delta=2
     5                           	psect	idataBANK2,global,class=CODE,delta=2
     6                           	psect	stringtext1,global,class=STRCODE,delta=2
     7                           	psect	stringtext2,global,class=STRCODE,delta=2
     8                           	psect	stringtext3,global,class=STRCODE,delta=2
     9                           	psect	nvCOMMON,global,class=COMMON,space=1,delta=1
    10                           	psect	nvBANK2,global,class=BANK2,space=1,delta=1
    11                           	psect	cinit,global,class=CODE,merge=1,delta=2
    12                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
    13                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    14                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1
    15                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1
    16                           	psect	dataBANK2,global,class=BANK2,space=1,delta=1
    17                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1
    18                           	psect	clrtext,global,class=CODE,delta=2
    19                           	psect	cstackBANK3,global,class=BANK3,space=1,delta=1
    20                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    21                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    22                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    23                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    24                           	psect	text1,local,class=CODE,merge=1,delta=2
    25                           	psect	text2,local,class=CODE,merge=1,delta=2,group=2
    26                           	psect	text3,local,class=CODE,merge=1,delta=2,group=2
    27                           	psect	text4,local,class=CODE,merge=1,delta=2
    28                           	psect	text5,local,class=CODE,merge=1,delta=2
    29                           	psect	text6,local,class=CODE,merge=1,delta=2
    30                           	psect	text7,local,class=CODE,merge=1,delta=2
    31                           	psect	text8,local,class=CODE,merge=1,delta=2
    32                           	psect	text9,local,class=CODE,merge=1,delta=2
    33                           	psect	text10,local,class=CODE,merge=1,delta=2
    34                           	psect	text11,local,class=CODE,merge=1,delta=2
    35                           	psect	text12,local,class=CODE,merge=1,delta=2
    36                           	psect	text13,local,class=CODE,merge=1,delta=2
    37                           	psect	text14,local,class=CODE,merge=1,delta=2
    38                           	psect	text15,local,class=CODE,merge=1,delta=2
    39                           	psect	text16,local,class=CODE,merge=1,delta=2
    40                           	psect	text17,local,class=CODE,merge=1,delta=2
    41                           	psect	text18,local,class=CODE,merge=1,delta=2
    42                           	psect	text19,local,class=CODE,merge=1,delta=2
    43                           	psect	text20,local,class=CODE,merge=1,delta=2
    44                           	psect	text21,local,class=CODE,merge=1,delta=2
    45                           	psect	text22,local,class=CODE,merge=1,delta=2
    46                           	psect	text23,local,class=CODE,merge=1,delta=2
    47                           	psect	text24,local,class=CODE,merge=1,delta=2
    48                           	psect	text25,local,class=CODE,merge=1,delta=2
    49                           	psect	text26,local,class=CODE,merge=1,delta=2
    50                           	psect	text27,local,class=CODE,merge=1,delta=2
    51                           	psect	text28,local,class=CODE,merge=1,delta=2
    52                           	psect	text29,local,class=CODE,merge=1,delta=2
    53                           	psect	text30,local,class=CODE,merge=1,delta=2
    54                           	psect	text31,local,class=CODE,merge=1,delta=2
    55                           	psect	text32,local,class=CODE,merge=1,delta=2
    56                           	psect	text33,local,class=CODE,merge=1,delta=2
    57                           	psect	text34,local,class=CODE,merge=1,delta=2
    58                           	psect	text35,local,class=CODE,merge=1,delta=2
    59                           	psect	text36,local,class=CODE,merge=1,delta=2
    60                           	psect	text37,local,class=CODE,merge=1,delta=2
    61                           	psect	text38,local,class=CODE,merge=1,delta=2
    62                           	psect	text39,local,class=CODE,merge=1,delta=2
    63                           	psect	text40,local,class=CODE,merge=1,delta=2
    64                           	psect	text41,local,class=CODE,merge=1,delta=2
    65                           	psect	text42,local,class=CODE,merge=1,delta=2
    66                           	psect	text43,local,class=CODE,merge=1,delta=2
    67                           	psect	text44,local,class=CODE,merge=1,delta=2,group=2
    68                           	psect	text45,local,class=CODE,merge=1,delta=2
    69                           	psect	text46,local,class=CODE,merge=1,delta=2
    70                           	psect	text47,local,class=CODE,merge=1,delta=2
    71                           	psect	text48,local,class=CODE,merge=1,delta=2
    72                           	psect	text49,local,class=CODE,merge=1,delta=2
    73                           	psect	text50,local,class=CODE,merge=1,delta=2
    74                           	psect	text51,local,class=CODE,merge=1,delta=2
    75                           	psect	text52,local,class=CODE,merge=1,delta=2
    76                           	psect	text53,local,class=CODE,merge=1,delta=2
    77                           	psect	text54,local,class=CODE,merge=1,delta=2
    78                           	psect	text55,local,class=CODE,merge=1,delta=2
    79                           	psect	text56,local,class=CODE,merge=1,delta=2
    80                           	psect	text57,local,class=CODE,merge=1,delta=2
    81                           	psect	text58,local,class=CODE,merge=1,delta=2
    82                           	psect	text59,local,class=CODE,merge=1,delta=2
    83                           	psect	text60,local,class=CODE,merge=1,delta=2
    84                           	psect	text61,local,class=CODE,merge=1,delta=2
    85                           	psect	text62,local,class=CODE,merge=1,delta=2,group=2
    86                           	psect	text63,local,class=CODE,merge=1,delta=2,group=2
    87                           	psect	text64,local,class=CODE,merge=1,delta=2,group=2
    88                           	psect	text65,local,class=CODE,merge=1,delta=2,group=2
    89                           	psect	text66,local,class=CODE,merge=1,delta=2,group=2
    90                           	psect	text67,local,class=CODE,merge=1,delta=2,group=2
    91                           	psect	text68,local,class=CODE,merge=1,delta=2,group=2
    92                           	psect	text69,local,class=CODE,merge=1,delta=2,group=2
    93                           	psect	text70,local,class=CODE,merge=1,delta=2,group=2
    94                           	psect	text71,local,class=CODE,merge=1,delta=2,group=2
    95                           	psect	text72,local,class=CODE,merge=1,delta=2
    96                           	psect	text73,local,class=CODE,merge=1,delta=2
    97                           	psect	text74,local,class=CODE,merge=1,delta=2
    98                           	psect	text75,local,class=CODE,merge=1,delta=2
    99                           	psect	text76,local,class=CODE,merge=1,delta=2
   100                           	psect	text77,local,class=CODE,merge=1,delta=2
   101                           	psect	text78,local,class=CODE,merge=1,delta=2
   102                           	psect	text79,local,class=CODE,merge=1,delta=2
   103                           	psect	text80,local,class=CODE,merge=1,delta=2
   104                           	psect	text81,local,class=CODE,merge=1,delta=2
   105                           	psect	text82,local,class=CODE,merge=1,delta=2
   106                           	psect	text83,local,class=CODE,merge=1,delta=2
   107                           	psect	text84,local,class=CODE,merge=1,delta=2
   108                           	psect	text85,local,class=CODE,merge=1,delta=2
   109                           	psect	intentry,global,class=CODE,delta=2
   110                           	psect	text87,local,class=CODE,merge=1,delta=2
   111                           	psect	text88,local,class=CODE,merge=1,delta=2
   112                           	psect	text89,local,class=CODE,merge=1,delta=2
   113                           	psect	text90,local,class=CODE,merge=1,delta=2
   114                           	psect	text91,local,class=CODE,merge=1,delta=2
   115                           	psect	text92,local,class=CODE,merge=1,delta=2
   116                           	psect	text93,local,class=CODE,merge=1,delta=2
   117                           	psect	text94,local,class=CODE,merge=1,delta=2
   118                           	psect	swtext1,local,class=CONST,delta=2
   119                           	psect	text95,local,class=CODE,merge=1,delta=2
   120                           	psect	text96,local,class=CODE,merge=1,delta=2
   121                           	psect	text97,local,class=CODE,merge=1,delta=2
   122                           	dabs	1,0x7E,2
   123  0000                     
   124                           ; Version 1.45
   125                           ; Generated 16/11/2017 GMT
   126                           ; 
   127                           ; Copyright © 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
   128                           ; All rights reserved.
   129                           ; 
   130                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
   131                           ; 
   132                           ; Redistribution and use in source and binary forms, with or without modification, are
   133                           ; permitted provided that the following conditions are met:
   134                           ; 
   135                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
   136                           ;        conditions and the following disclaimer.
   137                           ; 
   138                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
   139                           ;        of conditions and the following disclaimer in the documentation and/or other
   140                           ;        materials provided with the distribution.
   141                           ; 
   142                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
   143                           ;        software without specific prior written permission.
   144                           ; 
   145                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   146                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   147                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   148                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   149                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   150                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   151                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   152                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   153                           ; 
   154                           ; 
   155                           ; Code-generator required, PIC16LF1829 Definitions
   156                           ; 
   157                           ; SFR Addresses
   158  0000                     	;# 
   159  0001                     	;# 
   160  0002                     	;# 
   161  0003                     	;# 
   162  0004                     	;# 
   163  0005                     	;# 
   164  0006                     	;# 
   165  0007                     	;# 
   166  0008                     	;# 
   167  0009                     	;# 
   168  000A                     	;# 
   169  000B                     	;# 
   170  000C                     	;# 
   171  000D                     	;# 
   172  000E                     	;# 
   173  0011                     	;# 
   174  0012                     	;# 
   175  0013                     	;# 
   176  0014                     	;# 
   177  0015                     	;# 
   178  0016                     	;# 
   179  0016                     	;# 
   180  0017                     	;# 
   181  0018                     	;# 
   182  0019                     	;# 
   183  001A                     	;# 
   184  001B                     	;# 
   185  001C                     	;# 
   186  001E                     	;# 
   187  001F                     	;# 
   188  008C                     	;# 
   189  008D                     	;# 
   190  008E                     	;# 
   191  0091                     	;# 
   192  0092                     	;# 
   193  0093                     	;# 
   194  0094                     	;# 
   195  0095                     	;# 
   196  0096                     	;# 
   197  0097                     	;# 
   198  0098                     	;# 
   199  0099                     	;# 
   200  009A                     	;# 
   201  009B                     	;# 
   202  009B                     	;# 
   203  009C                     	;# 
   204  009D                     	;# 
   205  009E                     	;# 
   206  010C                     	;# 
   207  010D                     	;# 
   208  010E                     	;# 
   209  0111                     	;# 
   210  0112                     	;# 
   211  0113                     	;# 
   212  0114                     	;# 
   213  0115                     	;# 
   214  0116                     	;# 
   215  0117                     	;# 
   216  0118                     	;# 
   217  0119                     	;# 
   218  011A                     	;# 
   219  011B                     	;# 
   220  011D                     	;# 
   221  011E                     	;# 
   222  018C                     	;# 
   223  018D                     	;# 
   224  018E                     	;# 
   225  0191                     	;# 
   226  0191                     	;# 
   227  0192                     	;# 
   228  0193                     	;# 
   229  0193                     	;# 
   230  0193                     	;# 
   231  0194                     	;# 
   232  0195                     	;# 
   233  0196                     	;# 
   234  0199                     	;# 
   235  019A                     	;# 
   236  019B                     	;# 
   237  019B                     	;# 
   238  019B                     	;# 
   239  019B                     	;# 
   240  019C                     	;# 
   241  019C                     	;# 
   242  019D                     	;# 
   243  019E                     	;# 
   244  019F                     	;# 
   245  020C                     	;# 
   246  020D                     	;# 
   247  020E                     	;# 
   248  0211                     	;# 
   249  0211                     	;# 
   250  0212                     	;# 
   251  0212                     	;# 
   252  0213                     	;# 
   253  0213                     	;# 
   254  0214                     	;# 
   255  0214                     	;# 
   256  0215                     	;# 
   257  0215                     	;# 
   258  0215                     	;# 
   259  0216                     	;# 
   260  0216                     	;# 
   261  0217                     	;# 
   262  0217                     	;# 
   263  0219                     	;# 
   264  021A                     	;# 
   265  021B                     	;# 
   266  021C                     	;# 
   267  021D                     	;# 
   268  021E                     	;# 
   269  021F                     	;# 
   270  0291                     	;# 
   271  0291                     	;# 
   272  0292                     	;# 
   273  0293                     	;# 
   274  0294                     	;# 
   275  0295                     	;# 
   276  0295                     	;# 
   277  0296                     	;# 
   278  0298                     	;# 
   279  0298                     	;# 
   280  0299                     	;# 
   281  029A                     	;# 
   282  029B                     	;# 
   283  029C                     	;# 
   284  029D                     	;# 
   285  029E                     	;# 
   286  0311                     	;# 
   287  0311                     	;# 
   288  0312                     	;# 
   289  0313                     	;# 
   290  0318                     	;# 
   291  0318                     	;# 
   292  0319                     	;# 
   293  031A                     	;# 
   294  038C                     	;# 
   295  038D                     	;# 
   296  038E                     	;# 
   297  0391                     	;# 
   298  0392                     	;# 
   299  0393                     	;# 
   300  0394                     	;# 
   301  0395                     	;# 
   302  0396                     	;# 
   303  039A                     	;# 
   304  039C                     	;# 
   305  039D                     	;# 
   306  039E                     	;# 
   307  039F                     	;# 
   308  0415                     	;# 
   309  0416                     	;# 
   310  0417                     	;# 
   311  041C                     	;# 
   312  041D                     	;# 
   313  041E                     	;# 
   314  0FE4                     	;# 
   315  0FE5                     	;# 
   316  0FE6                     	;# 
   317  0FE7                     	;# 
   318  0FE8                     	;# 
   319  0FE9                     	;# 
   320  0FEA                     	;# 
   321  0FEB                     	;# 
   322  0FED                     	;# 
   323  0FEE                     	;# 
   324  0FEF                     	;# 
   325  0000                     	;# 
   326  0001                     	;# 
   327  0002                     	;# 
   328  0003                     	;# 
   329  0004                     	;# 
   330  0005                     	;# 
   331  0006                     	;# 
   332  0007                     	;# 
   333  0008                     	;# 
   334  0009                     	;# 
   335  000A                     	;# 
   336  000B                     	;# 
   337  000C                     	;# 
   338  000D                     	;# 
   339  000E                     	;# 
   340  0011                     	;# 
   341  0012                     	;# 
   342  0013                     	;# 
   343  0014                     	;# 
   344  0015                     	;# 
   345  0016                     	;# 
   346  0016                     	;# 
   347  0017                     	;# 
   348  0018                     	;# 
   349  0019                     	;# 
   350  001A                     	;# 
   351  001B                     	;# 
   352  001C                     	;# 
   353  001E                     	;# 
   354  001F                     	;# 
   355  008C                     	;# 
   356  008D                     	;# 
   357  008E                     	;# 
   358  0091                     	;# 
   359  0092                     	;# 
   360  0093                     	;# 
   361  0094                     	;# 
   362  0095                     	;# 
   363  0096                     	;# 
   364  0097                     	;# 
   365  0098                     	;# 
   366  0099                     	;# 
   367  009A                     	;# 
   368  009B                     	;# 
   369  009B                     	;# 
   370  009C                     	;# 
   371  009D                     	;# 
   372  009E                     	;# 
   373  010C                     	;# 
   374  010D                     	;# 
   375  010E                     	;# 
   376  0111                     	;# 
   377  0112                     	;# 
   378  0113                     	;# 
   379  0114                     	;# 
   380  0115                     	;# 
   381  0116                     	;# 
   382  0117                     	;# 
   383  0118                     	;# 
   384  0119                     	;# 
   385  011A                     	;# 
   386  011B                     	;# 
   387  011D                     	;# 
   388  011E                     	;# 
   389  018C                     	;# 
   390  018D                     	;# 
   391  018E                     	;# 
   392  0191                     	;# 
   393  0191                     	;# 
   394  0192                     	;# 
   395  0193                     	;# 
   396  0193                     	;# 
   397  0193                     	;# 
   398  0194                     	;# 
   399  0195                     	;# 
   400  0196                     	;# 
   401  0199                     	;# 
   402  019A                     	;# 
   403  019B                     	;# 
   404  019B                     	;# 
   405  019B                     	;# 
   406  019B                     	;# 
   407  019C                     	;# 
   408  019C                     	;# 
   409  019D                     	;# 
   410  019E                     	;# 
   411  019F                     	;# 
   412  020C                     	;# 
   413  020D                     	;# 
   414  020E                     	;# 
   415  0211                     	;# 
   416  0211                     	;# 
   417  0212                     	;# 
   418  0212                     	;# 
   419  0213                     	;# 
   420  0213                     	;# 
   421  0214                     	;# 
   422  0214                     	;# 
   423  0215                     	;# 
   424  0215                     	;# 
   425  0215                     	;# 
   426  0216                     	;# 
   427  0216                     	;# 
   428  0217                     	;# 
   429  0217                     	;# 
   430  0219                     	;# 
   431  021A                     	;# 
   432  021B                     	;# 
   433  021C                     	;# 
   434  021D                     	;# 
   435  021E                     	;# 
   436  021F                     	;# 
   437  0291                     	;# 
   438  0291                     	;# 
   439  0292                     	;# 
   440  0293                     	;# 
   441  0294                     	;# 
   442  0295                     	;# 
   443  0295                     	;# 
   444  0296                     	;# 
   445  0298                     	;# 
   446  0298                     	;# 
   447  0299                     	;# 
   448  029A                     	;# 
   449  029B                     	;# 
   450  029C                     	;# 
   451  029D                     	;# 
   452  029E                     	;# 
   453  0311                     	;# 
   454  0311                     	;# 
   455  0312                     	;# 
   456  0313                     	;# 
   457  0318                     	;# 
   458  0318                     	;# 
   459  0319                     	;# 
   460  031A                     	;# 
   461  038C                     	;# 
   462  038D                     	;# 
   463  038E                     	;# 
   464  0391                     	;# 
   465  0392                     	;# 
   466  0393                     	;# 
   467  0394                     	;# 
   468  0395                     	;# 
   469  0396                     	;# 
   470  039A                     	;# 
   471  039C                     	;# 
   472  039D                     	;# 
   473  039E                     	;# 
   474  039F                     	;# 
   475  0415                     	;# 
   476  0416                     	;# 
   477  0417                     	;# 
   478  041C                     	;# 
   479  041D                     	;# 
   480  041E                     	;# 
   481  0FE4                     	;# 
   482  0FE5                     	;# 
   483  0FE6                     	;# 
   484  0FE7                     	;# 
   485  0FE8                     	;# 
   486  0FE9                     	;# 
   487  0FEA                     	;# 
   488  0FEB                     	;# 
   489  0FED                     	;# 
   490  0FEE                     	;# 
   491  0FEF                     	;# 
   492  0000                     	;# 
   493  0001                     	;# 
   494  0002                     	;# 
   495  0003                     	;# 
   496  0004                     	;# 
   497  0005                     	;# 
   498  0006                     	;# 
   499  0007                     	;# 
   500  0008                     	;# 
   501  0009                     	;# 
   502  000A                     	;# 
   503  000B                     	;# 
   504  000C                     	;# 
   505  000D                     	;# 
   506  000E                     	;# 
   507  0011                     	;# 
   508  0012                     	;# 
   509  0013                     	;# 
   510  0014                     	;# 
   511  0015                     	;# 
   512  0016                     	;# 
   513  0016                     	;# 
   514  0017                     	;# 
   515  0018                     	;# 
   516  0019                     	;# 
   517  001A                     	;# 
   518  001B                     	;# 
   519  001C                     	;# 
   520  001E                     	;# 
   521  001F                     	;# 
   522  008C                     	;# 
   523  008D                     	;# 
   524  008E                     	;# 
   525  0091                     	;# 
   526  0092                     	;# 
   527  0093                     	;# 
   528  0094                     	;# 
   529  0095                     	;# 
   530  0096                     	;# 
   531  0097                     	;# 
   532  0098                     	;# 
   533  0099                     	;# 
   534  009A                     	;# 
   535  009B                     	;# 
   536  009B                     	;# 
   537  009C                     	;# 
   538  009D                     	;# 
   539  009E                     	;# 
   540  010C                     	;# 
   541  010D                     	;# 
   542  010E                     	;# 
   543  0111                     	;# 
   544  0112                     	;# 
   545  0113                     	;# 
   546  0114                     	;# 
   547  0115                     	;# 
   548  0116                     	;# 
   549  0117                     	;# 
   550  0118                     	;# 
   551  0119                     	;# 
   552  011A                     	;# 
   553  011B                     	;# 
   554  011D                     	;# 
   555  011E                     	;# 
   556  018C                     	;# 
   557  018D                     	;# 
   558  018E                     	;# 
   559  0191                     	;# 
   560  0191                     	;# 
   561  0192                     	;# 
   562  0193                     	;# 
   563  0193                     	;# 
   564  0193                     	;# 
   565  0194                     	;# 
   566  0195                     	;# 
   567  0196                     	;# 
   568  0199                     	;# 
   569  019A                     	;# 
   570  019B                     	;# 
   571  019B                     	;# 
   572  019B                     	;# 
   573  019B                     	;# 
   574  019C                     	;# 
   575  019C                     	;# 
   576  019D                     	;# 
   577  019E                     	;# 
   578  019F                     	;# 
   579  020C                     	;# 
   580  020D                     	;# 
   581  020E                     	;# 
   582  0211                     	;# 
   583  0211                     	;# 
   584  0212                     	;# 
   585  0212                     	;# 
   586  0213                     	;# 
   587  0213                     	;# 
   588  0214                     	;# 
   589  0214                     	;# 
   590  0215                     	;# 
   591  0215                     	;# 
   592  0215                     	;# 
   593  0216                     	;# 
   594  0216                     	;# 
   595  0217                     	;# 
   596  0217                     	;# 
   597  0219                     	;# 
   598  021A                     	;# 
   599  021B                     	;# 
   600  021C                     	;# 
   601  021D                     	;# 
   602  021E                     	;# 
   603  021F                     	;# 
   604  0291                     	;# 
   605  0291                     	;# 
   606  0292                     	;# 
   607  0293                     	;# 
   608  0294                     	;# 
   609  0295                     	;# 
   610  0295                     	;# 
   611  0296                     	;# 
   612  0298                     	;# 
   613  0298                     	;# 
   614  0299                     	;# 
   615  029A                     	;# 
   616  029B                     	;# 
   617  029C                     	;# 
   618  029D                     	;# 
   619  029E                     	;# 
   620  0311                     	;# 
   621  0311                     	;# 
   622  0312                     	;# 
   623  0313                     	;# 
   624  0318                     	;# 
   625  0318                     	;# 
   626  0319                     	;# 
   627  031A                     	;# 
   628  038C                     	;# 
   629  038D                     	;# 
   630  038E                     	;# 
   631  0391                     	;# 
   632  0392                     	;# 
   633  0393                     	;# 
   634  0394                     	;# 
   635  0395                     	;# 
   636  0396                     	;# 
   637  039A                     	;# 
   638  039C                     	;# 
   639  039D                     	;# 
   640  039E                     	;# 
   641  039F                     	;# 
   642  0415                     	;# 
   643  0416                     	;# 
   644  0417                     	;# 
   645  041C                     	;# 
   646  041D                     	;# 
   647  041E                     	;# 
   648  0FE4                     	;# 
   649  0FE5                     	;# 
   650  0FE6                     	;# 
   651  0FE7                     	;# 
   652  0FE8                     	;# 
   653  0FE9                     	;# 
   654  0FEA                     	;# 
   655  0FEB                     	;# 
   656  0FED                     	;# 
   657  0FEE                     	;# 
   658  0FEF                     	;# 
   659  0000                     	;# 
   660  0001                     	;# 
   661  0002                     	;# 
   662  0003                     	;# 
   663  0004                     	;# 
   664  0005                     	;# 
   665  0006                     	;# 
   666  0007                     	;# 
   667  0008                     	;# 
   668  0009                     	;# 
   669  000A                     	;# 
   670  000B                     	;# 
   671  000C                     	;# 
   672  000D                     	;# 
   673  000E                     	;# 
   674  0011                     	;# 
   675  0012                     	;# 
   676  0013                     	;# 
   677  0014                     	;# 
   678  0015                     	;# 
   679  0016                     	;# 
   680  0016                     	;# 
   681  0017                     	;# 
   682  0018                     	;# 
   683  0019                     	;# 
   684  001A                     	;# 
   685  001B                     	;# 
   686  001C                     	;# 
   687  001E                     	;# 
   688  001F                     	;# 
   689  008C                     	;# 
   690  008D                     	;# 
   691  008E                     	;# 
   692  0091                     	;# 
   693  0092                     	;# 
   694  0093                     	;# 
   695  0094                     	;# 
   696  0095                     	;# 
   697  0096                     	;# 
   698  0097                     	;# 
   699  0098                     	;# 
   700  0099                     	;# 
   701  009A                     	;# 
   702  009B                     	;# 
   703  009B                     	;# 
   704  009C                     	;# 
   705  009D                     	;# 
   706  009E                     	;# 
   707  010C                     	;# 
   708  010D                     	;# 
   709  010E                     	;# 
   710  0111                     	;# 
   711  0112                     	;# 
   712  0113                     	;# 
   713  0114                     	;# 
   714  0115                     	;# 
   715  0116                     	;# 
   716  0117                     	;# 
   717  0118                     	;# 
   718  0119                     	;# 
   719  011A                     	;# 
   720  011B                     	;# 
   721  011D                     	;# 
   722  011E                     	;# 
   723  018C                     	;# 
   724  018D                     	;# 
   725  018E                     	;# 
   726  0191                     	;# 
   727  0191                     	;# 
   728  0192                     	;# 
   729  0193                     	;# 
   730  0193                     	;# 
   731  0193                     	;# 
   732  0194                     	;# 
   733  0195                     	;# 
   734  0196                     	;# 
   735  0199                     	;# 
   736  019A                     	;# 
   737  019B                     	;# 
   738  019B                     	;# 
   739  019B                     	;# 
   740  019B                     	;# 
   741  019C                     	;# 
   742  019C                     	;# 
   743  019D                     	;# 
   744  019E                     	;# 
   745  019F                     	;# 
   746  020C                     	;# 
   747  020D                     	;# 
   748  020E                     	;# 
   749  0211                     	;# 
   750  0211                     	;# 
   751  0212                     	;# 
   752  0212                     	;# 
   753  0213                     	;# 
   754  0213                     	;# 
   755  0214                     	;# 
   756  0214                     	;# 
   757  0215                     	;# 
   758  0215                     	;# 
   759  0215                     	;# 
   760  0216                     	;# 
   761  0216                     	;# 
   762  0217                     	;# 
   763  0217                     	;# 
   764  0219                     	;# 
   765  021A                     	;# 
   766  021B                     	;# 
   767  021C                     	;# 
   768  021D                     	;# 
   769  021E                     	;# 
   770  021F                     	;# 
   771  0291                     	;# 
   772  0291                     	;# 
   773  0292                     	;# 
   774  0293                     	;# 
   775  0294                     	;# 
   776  0295                     	;# 
   777  0295                     	;# 
   778  0296                     	;# 
   779  0298                     	;# 
   780  0298                     	;# 
   781  0299                     	;# 
   782  029A                     	;# 
   783  029B                     	;# 
   784  029C                     	;# 
   785  029D                     	;# 
   786  029E                     	;# 
   787  0311                     	;# 
   788  0311                     	;# 
   789  0312                     	;# 
   790  0313                     	;# 
   791  0318                     	;# 
   792  0318                     	;# 
   793  0319                     	;# 
   794  031A                     	;# 
   795  038C                     	;# 
   796  038D                     	;# 
   797  038E                     	;# 
   798  0391                     	;# 
   799  0392                     	;# 
   800  0393                     	;# 
   801  0394                     	;# 
   802  0395                     	;# 
   803  0396                     	;# 
   804  039A                     	;# 
   805  039C                     	;# 
   806  039D                     	;# 
   807  039E                     	;# 
   808  039F                     	;# 
   809  0415                     	;# 
   810  0416                     	;# 
   811  0417                     	;# 
   812  041C                     	;# 
   813  041D                     	;# 
   814  041E                     	;# 
   815  0FE4                     	;# 
   816  0FE5                     	;# 
   817  0FE6                     	;# 
   818  0FE7                     	;# 
   819  0FE8                     	;# 
   820  0FE9                     	;# 
   821  0FEA                     	;# 
   822  0FEB                     	;# 
   823  0FED                     	;# 
   824  0FEE                     	;# 
   825  0FEF                     	;# 
   826  0000                     	;# 
   827  0001                     	;# 
   828  0002                     	;# 
   829  0003                     	;# 
   830  0004                     	;# 
   831  0005                     	;# 
   832  0006                     	;# 
   833  0007                     	;# 
   834  0008                     	;# 
   835  0009                     	;# 
   836  000A                     	;# 
   837  000B                     	;# 
   838  000C                     	;# 
   839  000D                     	;# 
   840  000E                     	;# 
   841  0011                     	;# 
   842  0012                     	;# 
   843  0013                     	;# 
   844  0014                     	;# 
   845  0015                     	;# 
   846  0016                     	;# 
   847  0016                     	;# 
   848  0017                     	;# 
   849  0018                     	;# 
   850  0019                     	;# 
   851  001A                     	;# 
   852  001B                     	;# 
   853  001C                     	;# 
   854  001E                     	;# 
   855  001F                     	;# 
   856  008C                     	;# 
   857  008D                     	;# 
   858  008E                     	;# 
   859  0091                     	;# 
   860  0092                     	;# 
   861  0093                     	;# 
   862  0094                     	;# 
   863  0095                     	;# 
   864  0096                     	;# 
   865  0097                     	;# 
   866  0098                     	;# 
   867  0099                     	;# 
   868  009A                     	;# 
   869  009B                     	;# 
   870  009B                     	;# 
   871  009C                     	;# 
   872  009D                     	;# 
   873  009E                     	;# 
   874  010C                     	;# 
   875  010D                     	;# 
   876  010E                     	;# 
   877  0111                     	;# 
   878  0112                     	;# 
   879  0113                     	;# 
   880  0114                     	;# 
   881  0115                     	;# 
   882  0116                     	;# 
   883  0117                     	;# 
   884  0118                     	;# 
   885  0119                     	;# 
   886  011A                     	;# 
   887  011B                     	;# 
   888  011D                     	;# 
   889  011E                     	;# 
   890  018C                     	;# 
   891  018D                     	;# 
   892  018E                     	;# 
   893  0191                     	;# 
   894  0191                     	;# 
   895  0192                     	;# 
   896  0193                     	;# 
   897  0193                     	;# 
   898  0193                     	;# 
   899  0194                     	;# 
   900  0195                     	;# 
   901  0196                     	;# 
   902  0199                     	;# 
   903  019A                     	;# 
   904  019B                     	;# 
   905  019B                     	;# 
   906  019B                     	;# 
   907  019B                     	;# 
   908  019C                     	;# 
   909  019C                     	;# 
   910  019D                     	;# 
   911  019E                     	;# 
   912  019F                     	;# 
   913  020C                     	;# 
   914  020D                     	;# 
   915  020E                     	;# 
   916  0211                     	;# 
   917  0211                     	;# 
   918  0212                     	;# 
   919  0212                     	;# 
   920  0213                     	;# 
   921  0213                     	;# 
   922  0214                     	;# 
   923  0214                     	;# 
   924  0215                     	;# 
   925  0215                     	;# 
   926  0215                     	;# 
   927  0216                     	;# 
   928  0216                     	;# 
   929  0217                     	;# 
   930  0217                     	;# 
   931  0219                     	;# 
   932  021A                     	;# 
   933  021B                     	;# 
   934  021C                     	;# 
   935  021D                     	;# 
   936  021E                     	;# 
   937  021F                     	;# 
   938  0291                     	;# 
   939  0291                     	;# 
   940  0292                     	;# 
   941  0293                     	;# 
   942  0294                     	;# 
   943  0295                     	;# 
   944  0295                     	;# 
   945  0296                     	;# 
   946  0298                     	;# 
   947  0298                     	;# 
   948  0299                     	;# 
   949  029A                     	;# 
   950  029B                     	;# 
   951  029C                     	;# 
   952  029D                     	;# 
   953  029E                     	;# 
   954  0311                     	;# 
   955  0311                     	;# 
   956  0312                     	;# 
   957  0313                     	;# 
   958  0318                     	;# 
   959  0318                     	;# 
   960  0319                     	;# 
   961  031A                     	;# 
   962  038C                     	;# 
   963  038D                     	;# 
   964  038E                     	;# 
   965  0391                     	;# 
   966  0392                     	;# 
   967  0393                     	;# 
   968  0394                     	;# 
   969  0395                     	;# 
   970  0396                     	;# 
   971  039A                     	;# 
   972  039C                     	;# 
   973  039D                     	;# 
   974  039E                     	;# 
   975  039F                     	;# 
   976  0415                     	;# 
   977  0416                     	;# 
   978  0417                     	;# 
   979  041C                     	;# 
   980  041D                     	;# 
   981  041E                     	;# 
   982  0FE4                     	;# 
   983  0FE5                     	;# 
   984  0FE6                     	;# 
   985  0FE7                     	;# 
   986  0FE8                     	;# 
   987  0FE9                     	;# 
   988  0FEA                     	;# 
   989  0FEB                     	;# 
   990  0FED                     	;# 
   991  0FEE                     	;# 
   992  0FEF                     	;# 
   993  0000                     	;# 
   994  0001                     	;# 
   995  0002                     	;# 
   996  0003                     	;# 
   997  0004                     	;# 
   998  0005                     	;# 
   999  0006                     	;# 
  1000  0007                     	;# 
  1001  0008                     	;# 
  1002  0009                     	;# 
  1003  000A                     	;# 
  1004  000B                     	;# 
  1005  000C                     	;# 
  1006  000D                     	;# 
  1007  000E                     	;# 
  1008  0011                     	;# 
  1009  0012                     	;# 
  1010  0013                     	;# 
  1011  0014                     	;# 
  1012  0015                     	;# 
  1013  0016                     	;# 
  1014  0016                     	;# 
  1015  0017                     	;# 
  1016  0018                     	;# 
  1017  0019                     	;# 
  1018  001A                     	;# 
  1019  001B                     	;# 
  1020  001C                     	;# 
  1021  001E                     	;# 
  1022  001F                     	;# 
  1023  008C                     	;# 
  1024  008D                     	;# 
  1025  008E                     	;# 
  1026  0091                     	;# 
  1027  0092                     	;# 
  1028  0093                     	;# 
  1029  0094                     	;# 
  1030  0095                     	;# 
  1031  0096                     	;# 
  1032  0097                     	;# 
  1033  0098                     	;# 
  1034  0099                     	;# 
  1035  009A                     	;# 
  1036  009B                     	;# 
  1037  009B                     	;# 
  1038  009C                     	;# 
  1039  009D                     	;# 
  1040  009E                     	;# 
  1041  010C                     	;# 
  1042  010D                     	;# 
  1043  010E                     	;# 
  1044  0111                     	;# 
  1045  0112                     	;# 
  1046  0113                     	;# 
  1047  0114                     	;# 
  1048  0115                     	;# 
  1049  0116                     	;# 
  1050  0117                     	;# 
  1051  0118                     	;# 
  1052  0119                     	;# 
  1053  011A                     	;# 
  1054  011B                     	;# 
  1055  011D                     	;# 
  1056  011E                     	;# 
  1057  018C                     	;# 
  1058  018D                     	;# 
  1059  018E                     	;# 
  1060  0191                     	;# 
  1061  0191                     	;# 
  1062  0192                     	;# 
  1063  0193                     	;# 
  1064  0193                     	;# 
  1065  0193                     	;# 
  1066  0194                     	;# 
  1067  0195                     	;# 
  1068  0196                     	;# 
  1069  0199                     	;# 
  1070  019A                     	;# 
  1071  019B                     	;# 
  1072  019B                     	;# 
  1073  019B                     	;# 
  1074  019B                     	;# 
  1075  019C                     	;# 
  1076  019C                     	;# 
  1077  019D                     	;# 
  1078  019E                     	;# 
  1079  019F                     	;# 
  1080  020C                     	;# 
  1081  020D                     	;# 
  1082  020E                     	;# 
  1083  0211                     	;# 
  1084  0211                     	;# 
  1085  0212                     	;# 
  1086  0212                     	;# 
  1087  0213                     	;# 
  1088  0213                     	;# 
  1089  0214                     	;# 
  1090  0214                     	;# 
  1091  0215                     	;# 
  1092  0215                     	;# 
  1093  0215                     	;# 
  1094  0216                     	;# 
  1095  0216                     	;# 
  1096  0217                     	;# 
  1097  0217                     	;# 
  1098  0219                     	;# 
  1099  021A                     	;# 
  1100  021B                     	;# 
  1101  021C                     	;# 
  1102  021D                     	;# 
  1103  021E                     	;# 
  1104  021F                     	;# 
  1105  0291                     	;# 
  1106  0291                     	;# 
  1107  0292                     	;# 
  1108  0293                     	;# 
  1109  0294                     	;# 
  1110  0295                     	;# 
  1111  0295                     	;# 
  1112  0296                     	;# 
  1113  0298                     	;# 
  1114  0298                     	;# 
  1115  0299                     	;# 
  1116  029A                     	;# 
  1117  029B                     	;# 
  1118  029C                     	;# 
  1119  029D                     	;# 
  1120  029E                     	;# 
  1121  0311                     	;# 
  1122  0311                     	;# 
  1123  0312                     	;# 
  1124  0313                     	;# 
  1125  0318                     	;# 
  1126  0318                     	;# 
  1127  0319                     	;# 
  1128  031A                     	;# 
  1129  038C                     	;# 
  1130  038D                     	;# 
  1131  038E                     	;# 
  1132  0391                     	;# 
  1133  0392                     	;# 
  1134  0393                     	;# 
  1135  0394                     	;# 
  1136  0395                     	;# 
  1137  0396                     	;# 
  1138  039A                     	;# 
  1139  039C                     	;# 
  1140  039D                     	;# 
  1141  039E                     	;# 
  1142  039F                     	;# 
  1143  0415                     	;# 
  1144  0416                     	;# 
  1145  0417                     	;# 
  1146  041C                     	;# 
  1147  041D                     	;# 
  1148  041E                     	;# 
  1149  0FE4                     	;# 
  1150  0FE5                     	;# 
  1151  0FE6                     	;# 
  1152  0FE7                     	;# 
  1153  0FE8                     	;# 
  1154  0FE9                     	;# 
  1155  0FEA                     	;# 
  1156  0FEB                     	;# 
  1157  0FED                     	;# 
  1158  0FEE                     	;# 
  1159  0FEF                     	;# 
  1160  0000                     	;# 
  1161  0001                     	;# 
  1162  0002                     	;# 
  1163  0003                     	;# 
  1164  0004                     	;# 
  1165  0005                     	;# 
  1166  0006                     	;# 
  1167  0007                     	;# 
  1168  0008                     	;# 
  1169  0009                     	;# 
  1170  000A                     	;# 
  1171  000B                     	;# 
  1172  000C                     	;# 
  1173  000D                     	;# 
  1174  000E                     	;# 
  1175  0011                     	;# 
  1176  0012                     	;# 
  1177  0013                     	;# 
  1178  0014                     	;# 
  1179  0015                     	;# 
  1180  0016                     	;# 
  1181  0016                     	;# 
  1182  0017                     	;# 
  1183  0018                     	;# 
  1184  0019                     	;# 
  1185  001A                     	;# 
  1186  001B                     	;# 
  1187  001C                     	;# 
  1188  001E                     	;# 
  1189  001F                     	;# 
  1190  008C                     	;# 
  1191  008D                     	;# 
  1192  008E                     	;# 
  1193  0091                     	;# 
  1194  0092                     	;# 
  1195  0093                     	;# 
  1196  0094                     	;# 
  1197  0095                     	;# 
  1198  0096                     	;# 
  1199  0097                     	;# 
  1200  0098                     	;# 
  1201  0099                     	;# 
  1202  009A                     	;# 
  1203  009B                     	;# 
  1204  009B                     	;# 
  1205  009C                     	;# 
  1206  009D                     	;# 
  1207  009E                     	;# 
  1208  010C                     	;# 
  1209  010D                     	;# 
  1210  010E                     	;# 
  1211  0111                     	;# 
  1212  0112                     	;# 
  1213  0113                     	;# 
  1214  0114                     	;# 
  1215  0115                     	;# 
  1216  0116                     	;# 
  1217  0117                     	;# 
  1218  0118                     	;# 
  1219  0119                     	;# 
  1220  011A                     	;# 
  1221  011B                     	;# 
  1222  011D                     	;# 
  1223  011E                     	;# 
  1224  018C                     	;# 
  1225  018D                     	;# 
  1226  018E                     	;# 
  1227  0191                     	;# 
  1228  0191                     	;# 
  1229  0192                     	;# 
  1230  0193                     	;# 
  1231  0193                     	;# 
  1232  0193                     	;# 
  1233  0194                     	;# 
  1234  0195                     	;# 
  1235  0196                     	;# 
  1236  0199                     	;# 
  1237  019A                     	;# 
  1238  019B                     	;# 
  1239  019B                     	;# 
  1240  019B                     	;# 
  1241  019B                     	;# 
  1242  019C                     	;# 
  1243  019C                     	;# 
  1244  019D                     	;# 
  1245  019E                     	;# 
  1246  019F                     	;# 
  1247  020C                     	;# 
  1248  020D                     	;# 
  1249  020E                     	;# 
  1250  0211                     	;# 
  1251  0211                     	;# 
  1252  0212                     	;# 
  1253  0212                     	;# 
  1254  0213                     	;# 
  1255  0213                     	;# 
  1256  0214                     	;# 
  1257  0214                     	;# 
  1258  0215                     	;# 
  1259  0215                     	;# 
  1260  0215                     	;# 
  1261  0216                     	;# 
  1262  0216                     	;# 
  1263  0217                     	;# 
  1264  0217                     	;# 
  1265  0219                     	;# 
  1266  021A                     	;# 
  1267  021B                     	;# 
  1268  021C                     	;# 
  1269  021D                     	;# 
  1270  021E                     	;# 
  1271  021F                     	;# 
  1272  0291                     	;# 
  1273  0291                     	;# 
  1274  0292                     	;# 
  1275  0293                     	;# 
  1276  0294                     	;# 
  1277  0295                     	;# 
  1278  0295                     	;# 
  1279  0296                     	;# 
  1280  0298                     	;# 
  1281  0298                     	;# 
  1282  0299                     	;# 
  1283  029A                     	;# 
  1284  029B                     	;# 
  1285  029C                     	;# 
  1286  029D                     	;# 
  1287  029E                     	;# 
  1288  0311                     	;# 
  1289  0311                     	;# 
  1290  0312                     	;# 
  1291  0313                     	;# 
  1292  0318                     	;# 
  1293  0318                     	;# 
  1294  0319                     	;# 
  1295  031A                     	;# 
  1296  038C                     	;# 
  1297  038D                     	;# 
  1298  038E                     	;# 
  1299  0391                     	;# 
  1300  0392                     	;# 
  1301  0393                     	;# 
  1302  0394                     	;# 
  1303  0395                     	;# 
  1304  0396                     	;# 
  1305  039A                     	;# 
  1306  039C                     	;# 
  1307  039D                     	;# 
  1308  039E                     	;# 
  1309  039F                     	;# 
  1310  0415                     	;# 
  1311  0416                     	;# 
  1312  0417                     	;# 
  1313  041C                     	;# 
  1314  041D                     	;# 
  1315  041E                     	;# 
  1316  0FE4                     	;# 
  1317  0FE5                     	;# 
  1318  0FE6                     	;# 
  1319  0FE7                     	;# 
  1320  0FE8                     	;# 
  1321  0FE9                     	;# 
  1322  0FEA                     	;# 
  1323  0FEB                     	;# 
  1324  0FED                     	;# 
  1325  0FEE                     	;# 
  1326  0FEF                     	;# 
  1327  0000                     	;# 
  1328  0001                     	;# 
  1329  0002                     	;# 
  1330  0003                     	;# 
  1331  0004                     	;# 
  1332  0005                     	;# 
  1333  0006                     	;# 
  1334  0007                     	;# 
  1335  0008                     	;# 
  1336  0009                     	;# 
  1337  000A                     	;# 
  1338  000B                     	;# 
  1339  000C                     	;# 
  1340  000D                     	;# 
  1341  000E                     	;# 
  1342  0011                     	;# 
  1343  0012                     	;# 
  1344  0013                     	;# 
  1345  0014                     	;# 
  1346  0015                     	;# 
  1347  0016                     	;# 
  1348  0016                     	;# 
  1349  0017                     	;# 
  1350  0018                     	;# 
  1351  0019                     	;# 
  1352  001A                     	;# 
  1353  001B                     	;# 
  1354  001C                     	;# 
  1355  001E                     	;# 
  1356  001F                     	;# 
  1357  008C                     	;# 
  1358  008D                     	;# 
  1359  008E                     	;# 
  1360  0091                     	;# 
  1361  0092                     	;# 
  1362  0093                     	;# 
  1363  0094                     	;# 
  1364  0095                     	;# 
  1365  0096                     	;# 
  1366  0097                     	;# 
  1367  0098                     	;# 
  1368  0099                     	;# 
  1369  009A                     	;# 
  1370  009B                     	;# 
  1371  009B                     	;# 
  1372  009C                     	;# 
  1373  009D                     	;# 
  1374  009E                     	;# 
  1375  010C                     	;# 
  1376  010D                     	;# 
  1377  010E                     	;# 
  1378  0111                     	;# 
  1379  0112                     	;# 
  1380  0113                     	;# 
  1381  0114                     	;# 
  1382  0115                     	;# 
  1383  0116                     	;# 
  1384  0117                     	;# 
  1385  0118                     	;# 
  1386  0119                     	;# 
  1387  011A                     	;# 
  1388  011B                     	;# 
  1389  011D                     	;# 
  1390  011E                     	;# 
  1391  018C                     	;# 
  1392  018D                     	;# 
  1393  018E                     	;# 
  1394  0191                     	;# 
  1395  0191                     	;# 
  1396  0192                     	;# 
  1397  0193                     	;# 
  1398  0193                     	;# 
  1399  0193                     	;# 
  1400  0194                     	;# 
  1401  0195                     	;# 
  1402  0196                     	;# 
  1403  0199                     	;# 
  1404  019A                     	;# 
  1405  019B                     	;# 
  1406  019B                     	;# 
  1407  019B                     	;# 
  1408  019B                     	;# 
  1409  019C                     	;# 
  1410  019C                     	;# 
  1411  019D                     	;# 
  1412  019E                     	;# 
  1413  019F                     	;# 
  1414  020C                     	;# 
  1415  020D                     	;# 
  1416  020E                     	;# 
  1417  0211                     	;# 
  1418  0211                     	;# 
  1419  0212                     	;# 
  1420  0212                     	;# 
  1421  0213                     	;# 
  1422  0213                     	;# 
  1423  0214                     	;# 
  1424  0214                     	;# 
  1425  0215                     	;# 
  1426  0215                     	;# 
  1427  0215                     	;# 
  1428  0216                     	;# 
  1429  0216                     	;# 
  1430  0217                     	;# 
  1431  0217                     	;# 
  1432  0219                     	;# 
  1433  021A                     	;# 
  1434  021B                     	;# 
  1435  021C                     	;# 
  1436  021D                     	;# 
  1437  021E                     	;# 
  1438  021F                     	;# 
  1439  0291                     	;# 
  1440  0291                     	;# 
  1441  0292                     	;# 
  1442  0293                     	;# 
  1443  0294                     	;# 
  1444  0295                     	;# 
  1445  0295                     	;# 
  1446  0296                     	;# 
  1447  0298                     	;# 
  1448  0298                     	;# 
  1449  0299                     	;# 
  1450  029A                     	;# 
  1451  029B                     	;# 
  1452  029C                     	;# 
  1453  029D                     	;# 
  1454  029E                     	;# 
  1455  0311                     	;# 
  1456  0311                     	;# 
  1457  0312                     	;# 
  1458  0313                     	;# 
  1459  0318                     	;# 
  1460  0318                     	;# 
  1461  0319                     	;# 
  1462  031A                     	;# 
  1463  038C                     	;# 
  1464  038D                     	;# 
  1465  038E                     	;# 
  1466  0391                     	;# 
  1467  0392                     	;# 
  1468  0393                     	;# 
  1469  0394                     	;# 
  1470  0395                     	;# 
  1471  0396                     	;# 
  1472  039A                     	;# 
  1473  039C                     	;# 
  1474  039D                     	;# 
  1475  039E                     	;# 
  1476  039F                     	;# 
  1477  0415                     	;# 
  1478  0416                     	;# 
  1479  0417                     	;# 
  1480  041C                     	;# 
  1481  041D                     	;# 
  1482  041E                     	;# 
  1483  0FE4                     	;# 
  1484  0FE5                     	;# 
  1485  0FE6                     	;# 
  1486  0FE7                     	;# 
  1487  0FE8                     	;# 
  1488  0FE9                     	;# 
  1489  0FEA                     	;# 
  1490  0FEB                     	;# 
  1491  0FED                     	;# 
  1492  0FEE                     	;# 
  1493  0FEF                     	;# 
  1494  0000                     	;# 
  1495  0001                     	;# 
  1496  0002                     	;# 
  1497  0003                     	;# 
  1498  0004                     	;# 
  1499  0005                     	;# 
  1500  0006                     	;# 
  1501  0007                     	;# 
  1502  0008                     	;# 
  1503  0009                     	;# 
  1504  000A                     	;# 
  1505  000B                     	;# 
  1506  000C                     	;# 
  1507  000D                     	;# 
  1508  000E                     	;# 
  1509  0011                     	;# 
  1510  0012                     	;# 
  1511  0013                     	;# 
  1512  0014                     	;# 
  1513  0015                     	;# 
  1514  0016                     	;# 
  1515  0016                     	;# 
  1516  0017                     	;# 
  1517  0018                     	;# 
  1518  0019                     	;# 
  1519  001A                     	;# 
  1520  001B                     	;# 
  1521  001C                     	;# 
  1522  001E                     	;# 
  1523  001F                     	;# 
  1524  008C                     	;# 
  1525  008D                     	;# 
  1526  008E                     	;# 
  1527  0091                     	;# 
  1528  0092                     	;# 
  1529  0093                     	;# 
  1530  0094                     	;# 
  1531  0095                     	;# 
  1532  0096                     	;# 
  1533  0097                     	;# 
  1534  0098                     	;# 
  1535  0099                     	;# 
  1536  009A                     	;# 
  1537  009B                     	;# 
  1538  009B                     	;# 
  1539  009C                     	;# 
  1540  009D                     	;# 
  1541  009E                     	;# 
  1542  010C                     	;# 
  1543  010D                     	;# 
  1544  010E                     	;# 
  1545  0111                     	;# 
  1546  0112                     	;# 
  1547  0113                     	;# 
  1548  0114                     	;# 
  1549  0115                     	;# 
  1550  0116                     	;# 
  1551  0117                     	;# 
  1552  0118                     	;# 
  1553  0119                     	;# 
  1554  011A                     	;# 
  1555  011B                     	;# 
  1556  011D                     	;# 
  1557  011E                     	;# 
  1558  018C                     	;# 
  1559  018D                     	;# 
  1560  018E                     	;# 
  1561  0191                     	;# 
  1562  0191                     	;# 
  1563  0192                     	;# 
  1564  0193                     	;# 
  1565  0193                     	;# 
  1566  0193                     	;# 
  1567  0194                     	;# 
  1568  0195                     	;# 
  1569  0196                     	;# 
  1570  0199                     	;# 
  1571  019A                     	;# 
  1572  019B                     	;# 
  1573  019B                     	;# 
  1574  019B                     	;# 
  1575  019B                     	;# 
  1576  019C                     	;# 
  1577  019C                     	;# 
  1578  019D                     	;# 
  1579  019E                     	;# 
  1580  019F                     	;# 
  1581  020C                     	;# 
  1582  020D                     	;# 
  1583  020E                     	;# 
  1584  0211                     	;# 
  1585  0211                     	;# 
  1586  0212                     	;# 
  1587  0212                     	;# 
  1588  0213                     	;# 
  1589  0213                     	;# 
  1590  0214                     	;# 
  1591  0214                     	;# 
  1592  0215                     	;# 
  1593  0215                     	;# 
  1594  0215                     	;# 
  1595  0216                     	;# 
  1596  0216                     	;# 
  1597  0217                     	;# 
  1598  0217                     	;# 
  1599  0219                     	;# 
  1600  021A                     	;# 
  1601  021B                     	;# 
  1602  021C                     	;# 
  1603  021D                     	;# 
  1604  021E                     	;# 
  1605  021F                     	;# 
  1606  0291                     	;# 
  1607  0291                     	;# 
  1608  0292                     	;# 
  1609  0293                     	;# 
  1610  0294                     	;# 
  1611  0295                     	;# 
  1612  0295                     	;# 
  1613  0296                     	;# 
  1614  0298                     	;# 
  1615  0298                     	;# 
  1616  0299                     	;# 
  1617  029A                     	;# 
  1618  029B                     	;# 
  1619  029C                     	;# 
  1620  029D                     	;# 
  1621  029E                     	;# 
  1622  0311                     	;# 
  1623  0311                     	;# 
  1624  0312                     	;# 
  1625  0313                     	;# 
  1626  0318                     	;# 
  1627  0318                     	;# 
  1628  0319                     	;# 
  1629  031A                     	;# 
  1630  038C                     	;# 
  1631  038D                     	;# 
  1632  038E                     	;# 
  1633  0391                     	;# 
  1634  0392                     	;# 
  1635  0393                     	;# 
  1636  0394                     	;# 
  1637  0395                     	;# 
  1638  0396                     	;# 
  1639  039A                     	;# 
  1640  039C                     	;# 
  1641  039D                     	;# 
  1642  039E                     	;# 
  1643  039F                     	;# 
  1644  0415                     	;# 
  1645  0416                     	;# 
  1646  0417                     	;# 
  1647  041C                     	;# 
  1648  041D                     	;# 
  1649  041E                     	;# 
  1650  0FE4                     	;# 
  1651  0FE5                     	;# 
  1652  0FE6                     	;# 
  1653  0FE7                     	;# 
  1654  0FE8                     	;# 
  1655  0FE9                     	;# 
  1656  0FEA                     	;# 
  1657  0FEB                     	;# 
  1658  0FED                     	;# 
  1659  0FEE                     	;# 
  1660  0FEF                     	;# 
  1661  0000                     	;# 
  1662  0001                     	;# 
  1663  0002                     	;# 
  1664  0003                     	;# 
  1665  0004                     	;# 
  1666  0005                     	;# 
  1667  0006                     	;# 
  1668  0007                     	;# 
  1669  0008                     	;# 
  1670  0009                     	;# 
  1671  000A                     	;# 
  1672  000B                     	;# 
  1673  000C                     	;# 
  1674  000D                     	;# 
  1675  000E                     	;# 
  1676  0011                     	;# 
  1677  0012                     	;# 
  1678  0013                     	;# 
  1679  0014                     	;# 
  1680  0015                     	;# 
  1681  0016                     	;# 
  1682  0016                     	;# 
  1683  0017                     	;# 
  1684  0018                     	;# 
  1685  0019                     	;# 
  1686  001A                     	;# 
  1687  001B                     	;# 
  1688  001C                     	;# 
  1689  001E                     	;# 
  1690  001F                     	;# 
  1691  008C                     	;# 
  1692  008D                     	;# 
  1693  008E                     	;# 
  1694  0091                     	;# 
  1695  0092                     	;# 
  1696  0093                     	;# 
  1697  0094                     	;# 
  1698  0095                     	;# 
  1699  0096                     	;# 
  1700  0097                     	;# 
  1701  0098                     	;# 
  1702  0099                     	;# 
  1703  009A                     	;# 
  1704  009B                     	;# 
  1705  009B                     	;# 
  1706  009C                     	;# 
  1707  009D                     	;# 
  1708  009E                     	;# 
  1709  010C                     	;# 
  1710  010D                     	;# 
  1711  010E                     	;# 
  1712  0111                     	;# 
  1713  0112                     	;# 
  1714  0113                     	;# 
  1715  0114                     	;# 
  1716  0115                     	;# 
  1717  0116                     	;# 
  1718  0117                     	;# 
  1719  0118                     	;# 
  1720  0119                     	;# 
  1721  011A                     	;# 
  1722  011B                     	;# 
  1723  011D                     	;# 
  1724  011E                     	;# 
  1725  018C                     	;# 
  1726  018D                     	;# 
  1727  018E                     	;# 
  1728  0191                     	;# 
  1729  0191                     	;# 
  1730  0192                     	;# 
  1731  0193                     	;# 
  1732  0193                     	;# 
  1733  0193                     	;# 
  1734  0194                     	;# 
  1735  0195                     	;# 
  1736  0196                     	;# 
  1737  0199                     	;# 
  1738  019A                     	;# 
  1739  019B                     	;# 
  1740  019B                     	;# 
  1741  019B                     	;# 
  1742  019B                     	;# 
  1743  019C                     	;# 
  1744  019C                     	;# 
  1745  019D                     	;# 
  1746  019E                     	;# 
  1747  019F                     	;# 
  1748  020C                     	;# 
  1749  020D                     	;# 
  1750  020E                     	;# 
  1751  0211                     	;# 
  1752  0211                     	;# 
  1753  0212                     	;# 
  1754  0212                     	;# 
  1755  0213                     	;# 
  1756  0213                     	;# 
  1757  0214                     	;# 
  1758  0214                     	;# 
  1759  0215                     	;# 
  1760  0215                     	;# 
  1761  0215                     	;# 
  1762  0216                     	;# 
  1763  0216                     	;# 
  1764  0217                     	;# 
  1765  0217                     	;# 
  1766  0219                     	;# 
  1767  021A                     	;# 
  1768  021B                     	;# 
  1769  021C                     	;# 
  1770  021D                     	;# 
  1771  021E                     	;# 
  1772  021F                     	;# 
  1773  0291                     	;# 
  1774  0291                     	;# 
  1775  0292                     	;# 
  1776  0293                     	;# 
  1777  0294                     	;# 
  1778  0295                     	;# 
  1779  0295                     	;# 
  1780  0296                     	;# 
  1781  0298                     	;# 
  1782  0298                     	;# 
  1783  0299                     	;# 
  1784  029A                     	;# 
  1785  029B                     	;# 
  1786  029C                     	;# 
  1787  029D                     	;# 
  1788  029E                     	;# 
  1789  0311                     	;# 
  1790  0311                     	;# 
  1791  0312                     	;# 
  1792  0313                     	;# 
  1793  0318                     	;# 
  1794  0318                     	;# 
  1795  0319                     	;# 
  1796  031A                     	;# 
  1797  038C                     	;# 
  1798  038D                     	;# 
  1799  038E                     	;# 
  1800  0391                     	;# 
  1801  0392                     	;# 
  1802  0393                     	;# 
  1803  0394                     	;# 
  1804  0395                     	;# 
  1805  0396                     	;# 
  1806  039A                     	;# 
  1807  039C                     	;# 
  1808  039D                     	;# 
  1809  039E                     	;# 
  1810  039F                     	;# 
  1811  0415                     	;# 
  1812  0416                     	;# 
  1813  0417                     	;# 
  1814  041C                     	;# 
  1815  041D                     	;# 
  1816  041E                     	;# 
  1817  0FE4                     	;# 
  1818  0FE5                     	;# 
  1819  0FE6                     	;# 
  1820  0FE7                     	;# 
  1821  0FE8                     	;# 
  1822  0FE9                     	;# 
  1823  0FEA                     	;# 
  1824  0FEB                     	;# 
  1825  0FED                     	;# 
  1826  0FEE                     	;# 
  1827  0FEF                     	;# 
  1828  0000                     	;# 
  1829  0001                     	;# 
  1830  0002                     	;# 
  1831  0003                     	;# 
  1832  0004                     	;# 
  1833  0005                     	;# 
  1834  0006                     	;# 
  1835  0007                     	;# 
  1836  0008                     	;# 
  1837  0009                     	;# 
  1838  000A                     	;# 
  1839  000B                     	;# 
  1840  000C                     	;# 
  1841  000D                     	;# 
  1842  000E                     	;# 
  1843  0011                     	;# 
  1844  0012                     	;# 
  1845  0013                     	;# 
  1846  0014                     	;# 
  1847  0015                     	;# 
  1848  0016                     	;# 
  1849  0016                     	;# 
  1850  0017                     	;# 
  1851  0018                     	;# 
  1852  0019                     	;# 
  1853  001A                     	;# 
  1854  001B                     	;# 
  1855  001C                     	;# 
  1856  001E                     	;# 
  1857  001F                     	;# 
  1858  008C                     	;# 
  1859  008D                     	;# 
  1860  008E                     	;# 
  1861  0091                     	;# 
  1862  0092                     	;# 
  1863  0093                     	;# 
  1864  0094                     	;# 
  1865  0095                     	;# 
  1866  0096                     	;# 
  1867  0097                     	;# 
  1868  0098                     	;# 
  1869  0099                     	;# 
  1870  009A                     	;# 
  1871  009B                     	;# 
  1872  009B                     	;# 
  1873  009C                     	;# 
  1874  009D                     	;# 
  1875  009E                     	;# 
  1876  010C                     	;# 
  1877  010D                     	;# 
  1878  010E                     	;# 
  1879  0111                     	;# 
  1880  0112                     	;# 
  1881  0113                     	;# 
  1882  0114                     	;# 
  1883  0115                     	;# 
  1884  0116                     	;# 
  1885  0117                     	;# 
  1886  0118                     	;# 
  1887  0119                     	;# 
  1888  011A                     	;# 
  1889  011B                     	;# 
  1890  011D                     	;# 
  1891  011E                     	;# 
  1892  018C                     	;# 
  1893  018D                     	;# 
  1894  018E                     	;# 
  1895  0191                     	;# 
  1896  0191                     	;# 
  1897  0192                     	;# 
  1898  0193                     	;# 
  1899  0193                     	;# 
  1900  0193                     	;# 
  1901  0194                     	;# 
  1902  0195                     	;# 
  1903  0196                     	;# 
  1904  0199                     	;# 
  1905  019A                     	;# 
  1906  019B                     	;# 
  1907  019B                     	;# 
  1908  019B                     	;# 
  1909  019B                     	;# 
  1910  019C                     	;# 
  1911  019C                     	;# 
  1912  019D                     	;# 
  1913  019E                     	;# 
  1914  019F                     	;# 
  1915  020C                     	;# 
  1916  020D                     	;# 
  1917  020E                     	;# 
  1918  0211                     	;# 
  1919  0211                     	;# 
  1920  0212                     	;# 
  1921  0212                     	;# 
  1922  0213                     	;# 
  1923  0213                     	;# 
  1924  0214                     	;# 
  1925  0214                     	;# 
  1926  0215                     	;# 
  1927  0215                     	;# 
  1928  0215                     	;# 
  1929  0216                     	;# 
  1930  0216                     	;# 
  1931  0217                     	;# 
  1932  0217                     	;# 
  1933  0219                     	;# 
  1934  021A                     	;# 
  1935  021B                     	;# 
  1936  021C                     	;# 
  1937  021D                     	;# 
  1938  021E                     	;# 
  1939  021F                     	;# 
  1940  0291                     	;# 
  1941  0291                     	;# 
  1942  0292                     	;# 
  1943  0293                     	;# 
  1944  0294                     	;# 
  1945  0295                     	;# 
  1946  0295                     	;# 
  1947  0296                     	;# 
  1948  0298                     	;# 
  1949  0298                     	;# 
  1950  0299                     	;# 
  1951  029A                     	;# 
  1952  029B                     	;# 
  1953  029C                     	;# 
  1954  029D                     	;# 
  1955  029E                     	;# 
  1956  0311                     	;# 
  1957  0311                     	;# 
  1958  0312                     	;# 
  1959  0313                     	;# 
  1960  0318                     	;# 
  1961  0318                     	;# 
  1962  0319                     	;# 
  1963  031A                     	;# 
  1964  038C                     	;# 
  1965  038D                     	;# 
  1966  038E                     	;# 
  1967  0391                     	;# 
  1968  0392                     	;# 
  1969  0393                     	;# 
  1970  0394                     	;# 
  1971  0395                     	;# 
  1972  0396                     	;# 
  1973  039A                     	;# 
  1974  039C                     	;# 
  1975  039D                     	;# 
  1976  039E                     	;# 
  1977  039F                     	;# 
  1978  0415                     	;# 
  1979  0416                     	;# 
  1980  0417                     	;# 
  1981  041C                     	;# 
  1982  041D                     	;# 
  1983  041E                     	;# 
  1984  0FE4                     	;# 
  1985  0FE5                     	;# 
  1986  0FE6                     	;# 
  1987  0FE7                     	;# 
  1988  0FE8                     	;# 
  1989  0FE9                     	;# 
  1990  0FEA                     	;# 
  1991  0FEB                     	;# 
  1992  0FED                     	;# 
  1993  0FEE                     	;# 
  1994  0FEF                     	;# 
  1995  0000                     	;# 
  1996  0001                     	;# 
  1997  0002                     	;# 
  1998  0003                     	;# 
  1999  0004                     	;# 
  2000  0005                     	;# 
  2001  0006                     	;# 
  2002  0007                     	;# 
  2003  0008                     	;# 
  2004  0009                     	;# 
  2005  000A                     	;# 
  2006  000B                     	;# 
  2007  000C                     	;# 
  2008  000D                     	;# 
  2009  000E                     	;# 
  2010  0011                     	;# 
  2011  0012                     	;# 
  2012  0013                     	;# 
  2013  0014                     	;# 
  2014  0015                     	;# 
  2015  0016                     	;# 
  2016  0016                     	;# 
  2017  0017                     	;# 
  2018  0018                     	;# 
  2019  0019                     	;# 
  2020  001A                     	;# 
  2021  001B                     	;# 
  2022  001C                     	;# 
  2023  001E                     	;# 
  2024  001F                     	;# 
  2025  008C                     	;# 
  2026  008D                     	;# 
  2027  008E                     	;# 
  2028  0091                     	;# 
  2029  0092                     	;# 
  2030  0093                     	;# 
  2031  0094                     	;# 
  2032  0095                     	;# 
  2033  0096                     	;# 
  2034  0097                     	;# 
  2035  0098                     	;# 
  2036  0099                     	;# 
  2037  009A                     	;# 
  2038  009B                     	;# 
  2039  009B                     	;# 
  2040  009C                     	;# 
  2041  009D                     	;# 
  2042  009E                     	;# 
  2043  010C                     	;# 
  2044  010D                     	;# 
  2045  010E                     	;# 
  2046  0111                     	;# 
  2047  0112                     	;# 
  2048  0113                     	;# 
  2049  0114                     	;# 
  2050  0115                     	;# 
  2051  0116                     	;# 
  2052  0117                     	;# 
  2053  0118                     	;# 
  2054  0119                     	;# 
  2055  011A                     	;# 
  2056  011B                     	;# 
  2057  011D                     	;# 
  2058  011E                     	;# 
  2059  018C                     	;# 
  2060  018D                     	;# 
  2061  018E                     	;# 
  2062  0191                     	;# 
  2063  0191                     	;# 
  2064  0192                     	;# 
  2065  0193                     	;# 
  2066  0193                     	;# 
  2067  0193                     	;# 
  2068  0194                     	;# 
  2069  0195                     	;# 
  2070  0196                     	;# 
  2071  0199                     	;# 
  2072  019A                     	;# 
  2073  019B                     	;# 
  2074  019B                     	;# 
  2075  019B                     	;# 
  2076  019B                     	;# 
  2077  019C                     	;# 
  2078  019C                     	;# 
  2079  019D                     	;# 
  2080  019E                     	;# 
  2081  019F                     	;# 
  2082  020C                     	;# 
  2083  020D                     	;# 
  2084  020E                     	;# 
  2085  0211                     	;# 
  2086  0211                     	;# 
  2087  0212                     	;# 
  2088  0212                     	;# 
  2089  0213                     	;# 
  2090  0213                     	;# 
  2091  0214                     	;# 
  2092  0214                     	;# 
  2093  0215                     	;# 
  2094  0215                     	;# 
  2095  0215                     	;# 
  2096  0216                     	;# 
  2097  0216                     	;# 
  2098  0217                     	;# 
  2099  0217                     	;# 
  2100  0219                     	;# 
  2101  021A                     	;# 
  2102  021B                     	;# 
  2103  021C                     	;# 
  2104  021D                     	;# 
  2105  021E                     	;# 
  2106  021F                     	;# 
  2107  0291                     	;# 
  2108  0291                     	;# 
  2109  0292                     	;# 
  2110  0293                     	;# 
  2111  0294                     	;# 
  2112  0295                     	;# 
  2113  0295                     	;# 
  2114  0296                     	;# 
  2115  0298                     	;# 
  2116  0298                     	;# 
  2117  0299                     	;# 
  2118  029A                     	;# 
  2119  029B                     	;# 
  2120  029C                     	;# 
  2121  029D                     	;# 
  2122  029E                     	;# 
  2123  0311                     	;# 
  2124  0311                     	;# 
  2125  0312                     	;# 
  2126  0313                     	;# 
  2127  0318                     	;# 
  2128  0318                     	;# 
  2129  0319                     	;# 
  2130  031A                     	;# 
  2131  038C                     	;# 
  2132  038D                     	;# 
  2133  038E                     	;# 
  2134  0391                     	;# 
  2135  0392                     	;# 
  2136  0393                     	;# 
  2137  0394                     	;# 
  2138  0395                     	;# 
  2139  0396                     	;# 
  2140  039A                     	;# 
  2141  039C                     	;# 
  2142  039D                     	;# 
  2143  039E                     	;# 
  2144  039F                     	;# 
  2145  0415                     	;# 
  2146  0416                     	;# 
  2147  0417                     	;# 
  2148  041C                     	;# 
  2149  041D                     	;# 
  2150  041E                     	;# 
  2151  0FE4                     	;# 
  2152  0FE5                     	;# 
  2153  0FE6                     	;# 
  2154  0FE7                     	;# 
  2155  0FE8                     	;# 
  2156  0FE9                     	;# 
  2157  0FEA                     	;# 
  2158  0FEB                     	;# 
  2159  0FED                     	;# 
  2160  0FEE                     	;# 
  2161  0FEF                     	;# 
  2162  0000                     	;# 
  2163  0001                     	;# 
  2164  0002                     	;# 
  2165  0003                     	;# 
  2166  0004                     	;# 
  2167  0005                     	;# 
  2168  0006                     	;# 
  2169  0007                     	;# 
  2170  0008                     	;# 
  2171  0009                     	;# 
  2172  000A                     	;# 
  2173  000B                     	;# 
  2174  000C                     	;# 
  2175  000D                     	;# 
  2176  000E                     	;# 
  2177  0011                     	;# 
  2178  0012                     	;# 
  2179  0013                     	;# 
  2180  0014                     	;# 
  2181  0015                     	;# 
  2182  0016                     	;# 
  2183  0016                     	;# 
  2184  0017                     	;# 
  2185  0018                     	;# 
  2186  0019                     	;# 
  2187  001A                     	;# 
  2188  001B                     	;# 
  2189  001C                     	;# 
  2190  001E                     	;# 
  2191  001F                     	;# 
  2192  008C                     	;# 
  2193  008D                     	;# 
  2194  008E                     	;# 
  2195  0091                     	;# 
  2196  0092                     	;# 
  2197  0093                     	;# 
  2198  0094                     	;# 
  2199  0095                     	;# 
  2200  0096                     	;# 
  2201  0097                     	;# 
  2202  0098                     	;# 
  2203  0099                     	;# 
  2204  009A                     	;# 
  2205  009B                     	;# 
  2206  009B                     	;# 
  2207  009C                     	;# 
  2208  009D                     	;# 
  2209  009E                     	;# 
  2210  010C                     	;# 
  2211  010D                     	;# 
  2212  010E                     	;# 
  2213  0111                     	;# 
  2214  0112                     	;# 
  2215  0113                     	;# 
  2216  0114                     	;# 
  2217  0115                     	;# 
  2218  0116                     	;# 
  2219  0117                     	;# 
  2220  0118                     	;# 
  2221  0119                     	;# 
  2222  011A                     	;# 
  2223  011B                     	;# 
  2224  011D                     	;# 
  2225  011E                     	;# 
  2226  018C                     	;# 
  2227  018D                     	;# 
  2228  018E                     	;# 
  2229  0191                     	;# 
  2230  0191                     	;# 
  2231  0192                     	;# 
  2232  0193                     	;# 
  2233  0193                     	;# 
  2234  0193                     	;# 
  2235  0194                     	;# 
  2236  0195                     	;# 
  2237  0196                     	;# 
  2238  0199                     	;# 
  2239  019A                     	;# 
  2240  019B                     	;# 
  2241  019B                     	;# 
  2242  019B                     	;# 
  2243  019B                     	;# 
  2244  019C                     	;# 
  2245  019C                     	;# 
  2246  019D                     	;# 
  2247  019E                     	;# 
  2248  019F                     	;# 
  2249  020C                     	;# 
  2250  020D                     	;# 
  2251  020E                     	;# 
  2252  0211                     	;# 
  2253  0211                     	;# 
  2254  0212                     	;# 
  2255  0212                     	;# 
  2256  0213                     	;# 
  2257  0213                     	;# 
  2258  0214                     	;# 
  2259  0214                     	;# 
  2260  0215                     	;# 
  2261  0215                     	;# 
  2262  0215                     	;# 
  2263  0216                     	;# 
  2264  0216                     	;# 
  2265  0217                     	;# 
  2266  0217                     	;# 
  2267  0219                     	;# 
  2268  021A                     	;# 
  2269  021B                     	;# 
  2270  021C                     	;# 
  2271  021D                     	;# 
  2272  021E                     	;# 
  2273  021F                     	;# 
  2274  0291                     	;# 
  2275  0291                     	;# 
  2276  0292                     	;# 
  2277  0293                     	;# 
  2278  0294                     	;# 
  2279  0295                     	;# 
  2280  0295                     	;# 
  2281  0296                     	;# 
  2282  0298                     	;# 
  2283  0298                     	;# 
  2284  0299                     	;# 
  2285  029A                     	;# 
  2286  029B                     	;# 
  2287  029C                     	;# 
  2288  029D                     	;# 
  2289  029E                     	;# 
  2290  0311                     	;# 
  2291  0311                     	;# 
  2292  0312                     	;# 
  2293  0313                     	;# 
  2294  0318                     	;# 
  2295  0318                     	;# 
  2296  0319                     	;# 
  2297  031A                     	;# 
  2298  038C                     	;# 
  2299  038D                     	;# 
  2300  038E                     	;# 
  2301  0391                     	;# 
  2302  0392                     	;# 
  2303  0393                     	;# 
  2304  0394                     	;# 
  2305  0395                     	;# 
  2306  0396                     	;# 
  2307  039A                     	;# 
  2308  039C                     	;# 
  2309  039D                     	;# 
  2310  039E                     	;# 
  2311  039F                     	;# 
  2312  0415                     	;# 
  2313  0416                     	;# 
  2314  0417                     	;# 
  2315  041C                     	;# 
  2316  041D                     	;# 
  2317  041E                     	;# 
  2318  0FE4                     	;# 
  2319  0FE5                     	;# 
  2320  0FE6                     	;# 
  2321  0FE7                     	;# 
  2322  0FE8                     	;# 
  2323  0FE9                     	;# 
  2324  0FEA                     	;# 
  2325  0FEB                     	;# 
  2326  0FED                     	;# 
  2327  0FEE                     	;# 
  2328  0FEF                     	;# 
  2329  0000                     	;# 
  2330  0001                     	;# 
  2331  0002                     	;# 
  2332  0003                     	;# 
  2333  0004                     	;# 
  2334  0005                     	;# 
  2335  0006                     	;# 
  2336  0007                     	;# 
  2337  0008                     	;# 
  2338  0009                     	;# 
  2339  000A                     	;# 
  2340  000B                     	;# 
  2341  000C                     	;# 
  2342  000D                     	;# 
  2343  000E                     	;# 
  2344  0011                     	;# 
  2345  0012                     	;# 
  2346  0013                     	;# 
  2347  0014                     	;# 
  2348  0015                     	;# 
  2349  0016                     	;# 
  2350  0016                     	;# 
  2351  0017                     	;# 
  2352  0018                     	;# 
  2353  0019                     	;# 
  2354  001A                     	;# 
  2355  001B                     	;# 
  2356  001C                     	;# 
  2357  001E                     	;# 
  2358  001F                     	;# 
  2359  008C                     	;# 
  2360  008D                     	;# 
  2361  008E                     	;# 
  2362  0091                     	;# 
  2363  0092                     	;# 
  2364  0093                     	;# 
  2365  0094                     	;# 
  2366  0095                     	;# 
  2367  0096                     	;# 
  2368  0097                     	;# 
  2369  0098                     	;# 
  2370  0099                     	;# 
  2371  009A                     	;# 
  2372  009B                     	;# 
  2373  009B                     	;# 
  2374  009C                     	;# 
  2375  009D                     	;# 
  2376  009E                     	;# 
  2377  010C                     	;# 
  2378  010D                     	;# 
  2379  010E                     	;# 
  2380  0111                     	;# 
  2381  0112                     	;# 
  2382  0113                     	;# 
  2383  0114                     	;# 
  2384  0115                     	;# 
  2385  0116                     	;# 
  2386  0117                     	;# 
  2387  0118                     	;# 
  2388  0119                     	;# 
  2389  011A                     	;# 
  2390  011B                     	;# 
  2391  011D                     	;# 
  2392  011E                     	;# 
  2393  018C                     	;# 
  2394  018D                     	;# 
  2395  018E                     	;# 
  2396  0191                     	;# 
  2397  0191                     	;# 
  2398  0192                     	;# 
  2399  0193                     	;# 
  2400  0193                     	;# 
  2401  0193                     	;# 
  2402  0194                     	;# 
  2403  0195                     	;# 
  2404  0196                     	;# 
  2405  0199                     	;# 
  2406  019A                     	;# 
  2407  019B                     	;# 
  2408  019B                     	;# 
  2409  019B                     	;# 
  2410  019B                     	;# 
  2411  019C                     	;# 
  2412  019C                     	;# 
  2413  019D                     	;# 
  2414  019E                     	;# 
  2415  019F                     	;# 
  2416  020C                     	;# 
  2417  020D                     	;# 
  2418  020E                     	;# 
  2419  0211                     	;# 
  2420  0211                     	;# 
  2421  0212                     	;# 
  2422  0212                     	;# 
  2423  0213                     	;# 
  2424  0213                     	;# 
  2425  0214                     	;# 
  2426  0214                     	;# 
  2427  0215                     	;# 
  2428  0215                     	;# 
  2429  0215                     	;# 
  2430  0216                     	;# 
  2431  0216                     	;# 
  2432  0217                     	;# 
  2433  0217                     	;# 
  2434  0219                     	;# 
  2435  021A                     	;# 
  2436  021B                     	;# 
  2437  021C                     	;# 
  2438  021D                     	;# 
  2439  021E                     	;# 
  2440  021F                     	;# 
  2441  0291                     	;# 
  2442  0291                     	;# 
  2443  0292                     	;# 
  2444  0293                     	;# 
  2445  0294                     	;# 
  2446  0295                     	;# 
  2447  0295                     	;# 
  2448  0296                     	;# 
  2449  0298                     	;# 
  2450  0298                     	;# 
  2451  0299                     	;# 
  2452  029A                     	;# 
  2453  029B                     	;# 
  2454  029C                     	;# 
  2455  029D                     	;# 
  2456  029E                     	;# 
  2457  0311                     	;# 
  2458  0311                     	;# 
  2459  0312                     	;# 
  2460  0313                     	;# 
  2461  0318                     	;# 
  2462  0318                     	;# 
  2463  0319                     	;# 
  2464  031A                     	;# 
  2465  038C                     	;# 
  2466  038D                     	;# 
  2467  038E                     	;# 
  2468  0391                     	;# 
  2469  0392                     	;# 
  2470  0393                     	;# 
  2471  0394                     	;# 
  2472  0395                     	;# 
  2473  0396                     	;# 
  2474  039A                     	;# 
  2475  039C                     	;# 
  2476  039D                     	;# 
  2477  039E                     	;# 
  2478  039F                     	;# 
  2479  0415                     	;# 
  2480  0416                     	;# 
  2481  0417                     	;# 
  2482  041C                     	;# 
  2483  041D                     	;# 
  2484  041E                     	;# 
  2485  0FE4                     	;# 
  2486  0FE5                     	;# 
  2487  0FE6                     	;# 
  2488  0FE7                     	;# 
  2489  0FE8                     	;# 
  2490  0FE9                     	;# 
  2491  0FEA                     	;# 
  2492  0FEB                     	;# 
  2493  0FED                     	;# 
  2494  0FEE                     	;# 
  2495  0FEF                     	;# 
  2496  0000                     	;# 
  2497  0001                     	;# 
  2498  0002                     	;# 
  2499  0003                     	;# 
  2500  0004                     	;# 
  2501  0005                     	;# 
  2502  0006                     	;# 
  2503  0007                     	;# 
  2504  0008                     	;# 
  2505  0009                     	;# 
  2506  000A                     	;# 
  2507  000B                     	;# 
  2508  000C                     	;# 
  2509  000D                     	;# 
  2510  000E                     	;# 
  2511  0011                     	;# 
  2512  0012                     	;# 
  2513  0013                     	;# 
  2514  0014                     	;# 
  2515  0015                     	;# 
  2516  0016                     	;# 
  2517  0016                     	;# 
  2518  0017                     	;# 
  2519  0018                     	;# 
  2520  0019                     	;# 
  2521  001A                     	;# 
  2522  001B                     	;# 
  2523  001C                     	;# 
  2524  001E                     	;# 
  2525  001F                     	;# 
  2526  008C                     	;# 
  2527  008D                     	;# 
  2528  008E                     	;# 
  2529  0091                     	;# 
  2530  0092                     	;# 
  2531  0093                     	;# 
  2532  0094                     	;# 
  2533  0095                     	;# 
  2534  0096                     	;# 
  2535  0097                     	;# 
  2536  0098                     	;# 
  2537  0099                     	;# 
  2538  009A                     	;# 
  2539  009B                     	;# 
  2540  009B                     	;# 
  2541  009C                     	;# 
  2542  009D                     	;# 
  2543  009E                     	;# 
  2544  010C                     	;# 
  2545  010D                     	;# 
  2546  010E                     	;# 
  2547  0111                     	;# 
  2548  0112                     	;# 
  2549  0113                     	;# 
  2550  0114                     	;# 
  2551  0115                     	;# 
  2552  0116                     	;# 
  2553  0117                     	;# 
  2554  0118                     	;# 
  2555  0119                     	;# 
  2556  011A                     	;# 
  2557  011B                     	;# 
  2558  011D                     	;# 
  2559  011E                     	;# 
  2560  018C                     	;# 
  2561  018D                     	;# 
  2562  018E                     	;# 
  2563  0191                     	;# 
  2564  0191                     	;# 
  2565  0192                     	;# 
  2566  0193                     	;# 
  2567  0193                     	;# 
  2568  0193                     	;# 
  2569  0194                     	;# 
  2570  0195                     	;# 
  2571  0196                     	;# 
  2572  0199                     	;# 
  2573  019A                     	;# 
  2574  019B                     	;# 
  2575  019B                     	;# 
  2576  019B                     	;# 
  2577  019B                     	;# 
  2578  019C                     	;# 
  2579  019C                     	;# 
  2580  019D                     	;# 
  2581  019E                     	;# 
  2582  019F                     	;# 
  2583  020C                     	;# 
  2584  020D                     	;# 
  2585  020E                     	;# 
  2586  0211                     	;# 
  2587  0211                     	;# 
  2588  0212                     	;# 
  2589  0212                     	;# 
  2590  0213                     	;# 
  2591  0213                     	;# 
  2592  0214                     	;# 
  2593  0214                     	;# 
  2594  0215                     	;# 
  2595  0215                     	;# 
  2596  0215                     	;# 
  2597  0216                     	;# 
  2598  0216                     	;# 
  2599  0217                     	;# 
  2600  0217                     	;# 
  2601  0219                     	;# 
  2602  021A                     	;# 
  2603  021B                     	;# 
  2604  021C                     	;# 
  2605  021D                     	;# 
  2606  021E                     	;# 
  2607  021F                     	;# 
  2608  0291                     	;# 
  2609  0291                     	;# 
  2610  0292                     	;# 
  2611  0293                     	;# 
  2612  0294                     	;# 
  2613  0295                     	;# 
  2614  0295                     	;# 
  2615  0296                     	;# 
  2616  0298                     	;# 
  2617  0298                     	;# 
  2618  0299                     	;# 
  2619  029A                     	;# 
  2620  029B                     	;# 
  2621  029C                     	;# 
  2622  029D                     	;# 
  2623  029E                     	;# 
  2624  0311                     	;# 
  2625  0311                     	;# 
  2626  0312                     	;# 
  2627  0313                     	;# 
  2628  0318                     	;# 
  2629  0318                     	;# 
  2630  0319                     	;# 
  2631  031A                     	;# 
  2632  038C                     	;# 
  2633  038D                     	;# 
  2634  038E                     	;# 
  2635  0391                     	;# 
  2636  0392                     	;# 
  2637  0393                     	;# 
  2638  0394                     	;# 
  2639  0395                     	;# 
  2640  0396                     	;# 
  2641  039A                     	;# 
  2642  039C                     	;# 
  2643  039D                     	;# 
  2644  039E                     	;# 
  2645  039F                     	;# 
  2646  0415                     	;# 
  2647  0416                     	;# 
  2648  0417                     	;# 
  2649  041C                     	;# 
  2650  041D                     	;# 
  2651  041E                     	;# 
  2652  0FE4                     	;# 
  2653  0FE5                     	;# 
  2654  0FE6                     	;# 
  2655  0FE7                     	;# 
  2656  0FE8                     	;# 
  2657  0FE9                     	;# 
  2658  0FEA                     	;# 
  2659  0FEB                     	;# 
  2660  0FED                     	;# 
  2661  0FEE                     	;# 
  2662  0FEF                     	;# 
  2663  0000                     	;# 
  2664  0001                     	;# 
  2665  0002                     	;# 
  2666  0003                     	;# 
  2667  0004                     	;# 
  2668  0005                     	;# 
  2669  0006                     	;# 
  2670  0007                     	;# 
  2671  0008                     	;# 
  2672  0009                     	;# 
  2673  000A                     	;# 
  2674  000B                     	;# 
  2675  000C                     	;# 
  2676  000D                     	;# 
  2677  000E                     	;# 
  2678  0011                     	;# 
  2679  0012                     	;# 
  2680  0013                     	;# 
  2681  0014                     	;# 
  2682  0015                     	;# 
  2683  0016                     	;# 
  2684  0016                     	;# 
  2685  0017                     	;# 
  2686  0018                     	;# 
  2687  0019                     	;# 
  2688  001A                     	;# 
  2689  001B                     	;# 
  2690  001C                     	;# 
  2691  001E                     	;# 
  2692  001F                     	;# 
  2693  008C                     	;# 
  2694  008D                     	;# 
  2695  008E                     	;# 
  2696  0091                     	;# 
  2697  0092                     	;# 
  2698  0093                     	;# 
  2699  0094                     	;# 
  2700  0095                     	;# 
  2701  0096                     	;# 
  2702  0097                     	;# 
  2703  0098                     	;# 
  2704  0099                     	;# 
  2705  009A                     	;# 
  2706  009B                     	;# 
  2707  009B                     	;# 
  2708  009C                     	;# 
  2709  009D                     	;# 
  2710  009E                     	;# 
  2711  010C                     	;# 
  2712  010D                     	;# 
  2713  010E                     	;# 
  2714  0111                     	;# 
  2715  0112                     	;# 
  2716  0113                     	;# 
  2717  0114                     	;# 
  2718  0115                     	;# 
  2719  0116                     	;# 
  2720  0117                     	;# 
  2721  0118                     	;# 
  2722  0119                     	;# 
  2723  011A                     	;# 
  2724  011B                     	;# 
  2725  011D                     	;# 
  2726  011E                     	;# 
  2727  018C                     	;# 
  2728  018D                     	;# 
  2729  018E                     	;# 
  2730  0191                     	;# 
  2731  0191                     	;# 
  2732  0192                     	;# 
  2733  0193                     	;# 
  2734  0193                     	;# 
  2735  0193                     	;# 
  2736  0194                     	;# 
  2737  0195                     	;# 
  2738  0196                     	;# 
  2739  0199                     	;# 
  2740  019A                     	;# 
  2741  019B                     	;# 
  2742  019B                     	;# 
  2743  019B                     	;# 
  2744  019B                     	;# 
  2745  019C                     	;# 
  2746  019C                     	;# 
  2747  019D                     	;# 
  2748  019E                     	;# 
  2749  019F                     	;# 
  2750  020C                     	;# 
  2751  020D                     	;# 
  2752  020E                     	;# 
  2753  0211                     	;# 
  2754  0211                     	;# 
  2755  0212                     	;# 
  2756  0212                     	;# 
  2757  0213                     	;# 
  2758  0213                     	;# 
  2759  0214                     	;# 
  2760  0214                     	;# 
  2761  0215                     	;# 
  2762  0215                     	;# 
  2763  0215                     	;# 
  2764  0216                     	;# 
  2765  0216                     	;# 
  2766  0217                     	;# 
  2767  0217                     	;# 
  2768  0219                     	;# 
  2769  021A                     	;# 
  2770  021B                     	;# 
  2771  021C                     	;# 
  2772  021D                     	;# 
  2773  021E                     	;# 
  2774  021F                     	;# 
  2775  0291                     	;# 
  2776  0291                     	;# 
  2777  0292                     	;# 
  2778  0293                     	;# 
  2779  0294                     	;# 
  2780  0295                     	;# 
  2781  0295                     	;# 
  2782  0296                     	;# 
  2783  0298                     	;# 
  2784  0298                     	;# 
  2785  0299                     	;# 
  2786  029A                     	;# 
  2787  029B                     	;# 
  2788  029C                     	;# 
  2789  029D                     	;# 
  2790  029E                     	;# 
  2791  0311                     	;# 
  2792  0311                     	;# 
  2793  0312                     	;# 
  2794  0313                     	;# 
  2795  0318                     	;# 
  2796  0318                     	;# 
  2797  0319                     	;# 
  2798  031A                     	;# 
  2799  038C                     	;# 
  2800  038D                     	;# 
  2801  038E                     	;# 
  2802  0391                     	;# 
  2803  0392                     	;# 
  2804  0393                     	;# 
  2805  0394                     	;# 
  2806  0395                     	;# 
  2807  0396                     	;# 
  2808  039A                     	;# 
  2809  039C                     	;# 
  2810  039D                     	;# 
  2811  039E                     	;# 
  2812  039F                     	;# 
  2813  0415                     	;# 
  2814  0416                     	;# 
  2815  0417                     	;# 
  2816  041C                     	;# 
  2817  041D                     	;# 
  2818  041E                     	;# 
  2819  0FE4                     	;# 
  2820  0FE5                     	;# 
  2821  0FE6                     	;# 
  2822  0FE7                     	;# 
  2823  0FE8                     	;# 
  2824  0FE9                     	;# 
  2825  0FEA                     	;# 
  2826  0FEB                     	;# 
  2827  0FED                     	;# 
  2828  0FEE                     	;# 
  2829  0FEF                     	;# 
  2830  0000                     	;# 
  2831  0001                     	;# 
  2832  0002                     	;# 
  2833  0003                     	;# 
  2834  0004                     	;# 
  2835  0005                     	;# 
  2836  0006                     	;# 
  2837  0007                     	;# 
  2838  0008                     	;# 
  2839  0009                     	;# 
  2840  000A                     	;# 
  2841  000B                     	;# 
  2842  000C                     	;# 
  2843  000D                     	;# 
  2844  000E                     	;# 
  2845  0011                     	;# 
  2846  0012                     	;# 
  2847  0013                     	;# 
  2848  0014                     	;# 
  2849  0015                     	;# 
  2850  0016                     	;# 
  2851  0016                     	;# 
  2852  0017                     	;# 
  2853  0018                     	;# 
  2854  0019                     	;# 
  2855  001A                     	;# 
  2856  001B                     	;# 
  2857  001C                     	;# 
  2858  001E                     	;# 
  2859  001F                     	;# 
  2860  008C                     	;# 
  2861  008D                     	;# 
  2862  008E                     	;# 
  2863  0091                     	;# 
  2864  0092                     	;# 
  2865  0093                     	;# 
  2866  0094                     	;# 
  2867  0095                     	;# 
  2868  0096                     	;# 
  2869  0097                     	;# 
  2870  0098                     	;# 
  2871  0099                     	;# 
  2872  009A                     	;# 
  2873  009B                     	;# 
  2874  009B                     	;# 
  2875  009C                     	;# 
  2876  009D                     	;# 
  2877  009E                     	;# 
  2878  010C                     	;# 
  2879  010D                     	;# 
  2880  010E                     	;# 
  2881  0111                     	;# 
  2882  0112                     	;# 
  2883  0113                     	;# 
  2884  0114                     	;# 
  2885  0115                     	;# 
  2886  0116                     	;# 
  2887  0117                     	;# 
  2888  0118                     	;# 
  2889  0119                     	;# 
  2890  011A                     	;# 
  2891  011B                     	;# 
  2892  011D                     	;# 
  2893  011E                     	;# 
  2894  018C                     	;# 
  2895  018D                     	;# 
  2896  018E                     	;# 
  2897  0191                     	;# 
  2898  0191                     	;# 
  2899  0192                     	;# 
  2900  0193                     	;# 
  2901  0193                     	;# 
  2902  0193                     	;# 
  2903  0194                     	;# 
  2904  0195                     	;# 
  2905  0196                     	;# 
  2906  0199                     	;# 
  2907  019A                     	;# 
  2908  019B                     	;# 
  2909  019B                     	;# 
  2910  019B                     	;# 
  2911  019B                     	;# 
  2912  019C                     	;# 
  2913  019C                     	;# 
  2914  019D                     	;# 
  2915  019E                     	;# 
  2916  019F                     	;# 
  2917  020C                     	;# 
  2918  020D                     	;# 
  2919  020E                     	;# 
  2920  0211                     	;# 
  2921  0211                     	;# 
  2922  0212                     	;# 
  2923  0212                     	;# 
  2924  0213                     	;# 
  2925  0213                     	;# 
  2926  0214                     	;# 
  2927  0214                     	;# 
  2928  0215                     	;# 
  2929  0215                     	;# 
  2930  0215                     	;# 
  2931  0216                     	;# 
  2932  0216                     	;# 
  2933  0217                     	;# 
  2934  0217                     	;# 
  2935  0219                     	;# 
  2936  021A                     	;# 
  2937  021B                     	;# 
  2938  021C                     	;# 
  2939  021D                     	;# 
  2940  021E                     	;# 
  2941  021F                     	;# 
  2942  0291                     	;# 
  2943  0291                     	;# 
  2944  0292                     	;# 
  2945  0293                     	;# 
  2946  0294                     	;# 
  2947  0295                     	;# 
  2948  0295                     	;# 
  2949  0296                     	;# 
  2950  0298                     	;# 
  2951  0298                     	;# 
  2952  0299                     	;# 
  2953  029A                     	;# 
  2954  029B                     	;# 
  2955  029C                     	;# 
  2956  029D                     	;# 
  2957  029E                     	;# 
  2958  0311                     	;# 
  2959  0311                     	;# 
  2960  0312                     	;# 
  2961  0313                     	;# 
  2962  0318                     	;# 
  2963  0318                     	;# 
  2964  0319                     	;# 
  2965  031A                     	;# 
  2966  038C                     	;# 
  2967  038D                     	;# 
  2968  038E                     	;# 
  2969  0391                     	;# 
  2970  0392                     	;# 
  2971  0393                     	;# 
  2972  0394                     	;# 
  2973  0395                     	;# 
  2974  0396                     	;# 
  2975  039A                     	;# 
  2976  039C                     	;# 
  2977  039D                     	;# 
  2978  039E                     	;# 
  2979  039F                     	;# 
  2980  0415                     	;# 
  2981  0416                     	;# 
  2982  0417                     	;# 
  2983  041C                     	;# 
  2984  041D                     	;# 
  2985  041E                     	;# 
  2986  0FE4                     	;# 
  2987  0FE5                     	;# 
  2988  0FE6                     	;# 
  2989  0FE7                     	;# 
  2990  0FE8                     	;# 
  2991  0FE9                     	;# 
  2992  0FEA                     	;# 
  2993  0FEB                     	;# 
  2994  0FED                     	;# 
  2995  0FEE                     	;# 
  2996  0FEF                     	;# 
  2997  0000                     	;# 
  2998  0001                     	;# 
  2999  0002                     	;# 
  3000  0003                     	;# 
  3001  0004                     	;# 
  3002  0005                     	;# 
  3003  0006                     	;# 
  3004  0007                     	;# 
  3005  0008                     	;# 
  3006  0009                     	;# 
  3007  000A                     	;# 
  3008  000B                     	;# 
  3009  000C                     	;# 
  3010  000D                     	;# 
  3011  000E                     	;# 
  3012  0011                     	;# 
  3013  0012                     	;# 
  3014  0013                     	;# 
  3015  0014                     	;# 
  3016  0015                     	;# 
  3017  0016                     	;# 
  3018  0016                     	;# 
  3019  0017                     	;# 
  3020  0018                     	;# 
  3021  0019                     	;# 
  3022  001A                     	;# 
  3023  001B                     	;# 
  3024  001C                     	;# 
  3025  001E                     	;# 
  3026  001F                     	;# 
  3027  008C                     	;# 
  3028  008D                     	;# 
  3029  008E                     	;# 
  3030  0091                     	;# 
  3031  0092                     	;# 
  3032  0093                     	;# 
  3033  0094                     	;# 
  3034  0095                     	;# 
  3035  0096                     	;# 
  3036  0097                     	;# 
  3037  0098                     	;# 
  3038  0099                     	;# 
  3039  009A                     	;# 
  3040  009B                     	;# 
  3041  009B                     	;# 
  3042  009C                     	;# 
  3043  009D                     	;# 
  3044  009E                     	;# 
  3045  010C                     	;# 
  3046  010D                     	;# 
  3047  010E                     	;# 
  3048  0111                     	;# 
  3049  0112                     	;# 
  3050  0113                     	;# 
  3051  0114                     	;# 
  3052  0115                     	;# 
  3053  0116                     	;# 
  3054  0117                     	;# 
  3055  0118                     	;# 
  3056  0119                     	;# 
  3057  011A                     	;# 
  3058  011B                     	;# 
  3059  011D                     	;# 
  3060  011E                     	;# 
  3061  018C                     	;# 
  3062  018D                     	;# 
  3063  018E                     	;# 
  3064  0191                     	;# 
  3065  0191                     	;# 
  3066  0192                     	;# 
  3067  0193                     	;# 
  3068  0193                     	;# 
  3069  0193                     	;# 
  3070  0194                     	;# 
  3071  0195                     	;# 
  3072  0196                     	;# 
  3073  0199                     	;# 
  3074  019A                     	;# 
  3075  019B                     	;# 
  3076  019B                     	;# 
  3077  019B                     	;# 
  3078  019B                     	;# 
  3079  019C                     	;# 
  3080  019C                     	;# 
  3081  019D                     	;# 
  3082  019E                     	;# 
  3083  019F                     	;# 
  3084  020C                     	;# 
  3085  020D                     	;# 
  3086  020E                     	;# 
  3087  0211                     	;# 
  3088  0211                     	;# 
  3089  0212                     	;# 
  3090  0212                     	;# 
  3091  0213                     	;# 
  3092  0213                     	;# 
  3093  0214                     	;# 
  3094  0214                     	;# 
  3095  0215                     	;# 
  3096  0215                     	;# 
  3097  0215                     	;# 
  3098  0216                     	;# 
  3099  0216                     	;# 
  3100  0217                     	;# 
  3101  0217                     	;# 
  3102  0219                     	;# 
  3103  021A                     	;# 
  3104  021B                     	;# 
  3105  021C                     	;# 
  3106  021D                     	;# 
  3107  021E                     	;# 
  3108  021F                     	;# 
  3109  0291                     	;# 
  3110  0291                     	;# 
  3111  0292                     	;# 
  3112  0293                     	;# 
  3113  0294                     	;# 
  3114  0295                     	;# 
  3115  0295                     	;# 
  3116  0296                     	;# 
  3117  0298                     	;# 
  3118  0298                     	;# 
  3119  0299                     	;# 
  3120  029A                     	;# 
  3121  029B                     	;# 
  3122  029C                     	;# 
  3123  029D                     	;# 
  3124  029E                     	;# 
  3125  0311                     	;# 
  3126  0311                     	;# 
  3127  0312                     	;# 
  3128  0313                     	;# 
  3129  0318                     	;# 
  3130  0318                     	;# 
  3131  0319                     	;# 
  3132  031A                     	;# 
  3133  038C                     	;# 
  3134  038D                     	;# 
  3135  038E                     	;# 
  3136  0391                     	;# 
  3137  0392                     	;# 
  3138  0393                     	;# 
  3139  0394                     	;# 
  3140  0395                     	;# 
  3141  0396                     	;# 
  3142  039A                     	;# 
  3143  039C                     	;# 
  3144  039D                     	;# 
  3145  039E                     	;# 
  3146  039F                     	;# 
  3147  0415                     	;# 
  3148  0416                     	;# 
  3149  0417                     	;# 
  3150  041C                     	;# 
  3151  041D                     	;# 
  3152  041E                     	;# 
  3153  0FE4                     	;# 
  3154  0FE5                     	;# 
  3155  0FE6                     	;# 
  3156  0FE7                     	;# 
  3157  0FE8                     	;# 
  3158  0FE9                     	;# 
  3159  0FEA                     	;# 
  3160  0FEB                     	;# 
  3161  0FED                     	;# 
  3162  0FEE                     	;# 
  3163  0FEF                     	;# 
  3164  0000                     	;# 
  3165  0001                     	;# 
  3166  0002                     	;# 
  3167  0003                     	;# 
  3168  0004                     	;# 
  3169  0005                     	;# 
  3170  0006                     	;# 
  3171  0007                     	;# 
  3172  0008                     	;# 
  3173  0009                     	;# 
  3174  000A                     	;# 
  3175  000B                     	;# 
  3176  000C                     	;# 
  3177  000D                     	;# 
  3178  000E                     	;# 
  3179  0011                     	;# 
  3180  0012                     	;# 
  3181  0013                     	;# 
  3182  0014                     	;# 
  3183  0015                     	;# 
  3184  0016                     	;# 
  3185  0016                     	;# 
  3186  0017                     	;# 
  3187  0018                     	;# 
  3188  0019                     	;# 
  3189  001A                     	;# 
  3190  001B                     	;# 
  3191  001C                     	;# 
  3192  001E                     	;# 
  3193  001F                     	;# 
  3194  008C                     	;# 
  3195  008D                     	;# 
  3196  008E                     	;# 
  3197  0091                     	;# 
  3198  0092                     	;# 
  3199  0093                     	;# 
  3200  0094                     	;# 
  3201  0095                     	;# 
  3202  0096                     	;# 
  3203  0097                     	;# 
  3204  0098                     	;# 
  3205  0099                     	;# 
  3206  009A                     	;# 
  3207  009B                     	;# 
  3208  009B                     	;# 
  3209  009C                     	;# 
  3210  009D                     	;# 
  3211  009E                     	;# 
  3212  010C                     	;# 
  3213  010D                     	;# 
  3214  010E                     	;# 
  3215  0111                     	;# 
  3216  0112                     	;# 
  3217  0113                     	;# 
  3218  0114                     	;# 
  3219  0115                     	;# 
  3220  0116                     	;# 
  3221  0117                     	;# 
  3222  0118                     	;# 
  3223  0119                     	;# 
  3224  011A                     	;# 
  3225  011B                     	;# 
  3226  011D                     	;# 
  3227  011E                     	;# 
  3228  018C                     	;# 
  3229  018D                     	;# 
  3230  018E                     	;# 
  3231  0191                     	;# 
  3232  0191                     	;# 
  3233  0192                     	;# 
  3234  0193                     	;# 
  3235  0193                     	;# 
  3236  0193                     	;# 
  3237  0194                     	;# 
  3238  0195                     	;# 
  3239  0196                     	;# 
  3240  0199                     	;# 
  3241  019A                     	;# 
  3242  019B                     	;# 
  3243  019B                     	;# 
  3244  019B                     	;# 
  3245  019B                     	;# 
  3246  019C                     	;# 
  3247  019C                     	;# 
  3248  019D                     	;# 
  3249  019E                     	;# 
  3250  019F                     	;# 
  3251  020C                     	;# 
  3252  020D                     	;# 
  3253  020E                     	;# 
  3254  0211                     	;# 
  3255  0211                     	;# 
  3256  0212                     	;# 
  3257  0212                     	;# 
  3258  0213                     	;# 
  3259  0213                     	;# 
  3260  0214                     	;# 
  3261  0214                     	;# 
  3262  0215                     	;# 
  3263  0215                     	;# 
  3264  0215                     	;# 
  3265  0216                     	;# 
  3266  0216                     	;# 
  3267  0217                     	;# 
  3268  0217                     	;# 
  3269  0219                     	;# 
  3270  021A                     	;# 
  3271  021B                     	;# 
  3272  021C                     	;# 
  3273  021D                     	;# 
  3274  021E                     	;# 
  3275  021F                     	;# 
  3276  0291                     	;# 
  3277  0291                     	;# 
  3278  0292                     	;# 
  3279  0293                     	;# 
  3280  0294                     	;# 
  3281  0295                     	;# 
  3282  0295                     	;# 
  3283  0296                     	;# 
  3284  0298                     	;# 
  3285  0298                     	;# 
  3286  0299                     	;# 
  3287  029A                     	;# 
  3288  029B                     	;# 
  3289  029C                     	;# 
  3290  029D                     	;# 
  3291  029E                     	;# 
  3292  0311                     	;# 
  3293  0311                     	;# 
  3294  0312                     	;# 
  3295  0313                     	;# 
  3296  0318                     	;# 
  3297  0318                     	;# 
  3298  0319                     	;# 
  3299  031A                     	;# 
  3300  038C                     	;# 
  3301  038D                     	;# 
  3302  038E                     	;# 
  3303  0391                     	;# 
  3304  0392                     	;# 
  3305  0393                     	;# 
  3306  0394                     	;# 
  3307  0395                     	;# 
  3308  0396                     	;# 
  3309  039A                     	;# 
  3310  039C                     	;# 
  3311  039D                     	;# 
  3312  039E                     	;# 
  3313  039F                     	;# 
  3314  0415                     	;# 
  3315  0416                     	;# 
  3316  0417                     	;# 
  3317  041C                     	;# 
  3318  041D                     	;# 
  3319  041E                     	;# 
  3320  0FE4                     	;# 
  3321  0FE5                     	;# 
  3322  0FE6                     	;# 
  3323  0FE7                     	;# 
  3324  0FE8                     	;# 
  3325  0FE9                     	;# 
  3326  0FEA                     	;# 
  3327  0FEB                     	;# 
  3328  0FED                     	;# 
  3329  0FEE                     	;# 
  3330  0FEF                     	;# 
  3331  0000                     	;# 
  3332  0001                     	;# 
  3333  0002                     	;# 
  3334  0003                     	;# 
  3335  0004                     	;# 
  3336  0005                     	;# 
  3337  0006                     	;# 
  3338  0007                     	;# 
  3339  0008                     	;# 
  3340  0009                     	;# 
  3341  000A                     	;# 
  3342  000B                     	;# 
  3343  000C                     	;# 
  3344  000D                     	;# 
  3345  000E                     	;# 
  3346  0011                     	;# 
  3347  0012                     	;# 
  3348  0013                     	;# 
  3349  0014                     	;# 
  3350  0015                     	;# 
  3351  0016                     	;# 
  3352  0016                     	;# 
  3353  0017                     	;# 
  3354  0018                     	;# 
  3355  0019                     	;# 
  3356  001A                     	;# 
  3357  001B                     	;# 
  3358  001C                     	;# 
  3359  001E                     	;# 
  3360  001F                     	;# 
  3361  008C                     	;# 
  3362  008D                     	;# 
  3363  008E                     	;# 
  3364  0091                     	;# 
  3365  0092                     	;# 
  3366  0093                     	;# 
  3367  0094                     	;# 
  3368  0095                     	;# 
  3369  0096                     	;# 
  3370  0097                     	;# 
  3371  0098                     	;# 
  3372  0099                     	;# 
  3373  009A                     	;# 
  3374  009B                     	;# 
  3375  009B                     	;# 
  3376  009C                     	;# 
  3377  009D                     	;# 
  3378  009E                     	;# 
  3379  010C                     	;# 
  3380  010D                     	;# 
  3381  010E                     	;# 
  3382  0111                     	;# 
  3383  0112                     	;# 
  3384  0113                     	;# 
  3385  0114                     	;# 
  3386  0115                     	;# 
  3387  0116                     	;# 
  3388  0117                     	;# 
  3389  0118                     	;# 
  3390  0119                     	;# 
  3391  011A                     	;# 
  3392  011B                     	;# 
  3393  011D                     	;# 
  3394  011E                     	;# 
  3395  018C                     	;# 
  3396  018D                     	;# 
  3397  018E                     	;# 
  3398  0191                     	;# 
  3399  0191                     	;# 
  3400  0192                     	;# 
  3401  0193                     	;# 
  3402  0193                     	;# 
  3403  0193                     	;# 
  3404  0194                     	;# 
  3405  0195                     	;# 
  3406  0196                     	;# 
  3407  0199                     	;# 
  3408  019A                     	;# 
  3409  019B                     	;# 
  3410  019B                     	;# 
  3411  019B                     	;# 
  3412  019B                     	;# 
  3413  019C                     	;# 
  3414  019C                     	;# 
  3415  019D                     	;# 
  3416  019E                     	;# 
  3417  019F                     	;# 
  3418  020C                     	;# 
  3419  020D                     	;# 
  3420  020E                     	;# 
  3421  0211                     	;# 
  3422  0211                     	;# 
  3423  0212                     	;# 
  3424  0212                     	;# 
  3425  0213                     	;# 
  3426  0213                     	;# 
  3427  0214                     	;# 
  3428  0214                     	;# 
  3429  0215                     	;# 
  3430  0215                     	;# 
  3431  0215                     	;# 
  3432  0216                     	;# 
  3433  0216                     	;# 
  3434  0217                     	;# 
  3435  0217                     	;# 
  3436  0219                     	;# 
  3437  021A                     	;# 
  3438  021B                     	;# 
  3439  021C                     	;# 
  3440  021D                     	;# 
  3441  021E                     	;# 
  3442  021F                     	;# 
  3443  0291                     	;# 
  3444  0291                     	;# 
  3445  0292                     	;# 
  3446  0293                     	;# 
  3447  0294                     	;# 
  3448  0295                     	;# 
  3449  0295                     	;# 
  3450  0296                     	;# 
  3451  0298                     	;# 
  3452  0298                     	;# 
  3453  0299                     	;# 
  3454  029A                     	;# 
  3455  029B                     	;# 
  3456  029C                     	;# 
  3457  029D                     	;# 
  3458  029E                     	;# 
  3459  0311                     	;# 
  3460  0311                     	;# 
  3461  0312                     	;# 
  3462  0313                     	;# 
  3463  0318                     	;# 
  3464  0318                     	;# 
  3465  0319                     	;# 
  3466  031A                     	;# 
  3467  038C                     	;# 
  3468  038D                     	;# 
  3469  038E                     	;# 
  3470  0391                     	;# 
  3471  0392                     	;# 
  3472  0393                     	;# 
  3473  0394                     	;# 
  3474  0395                     	;# 
  3475  0396                     	;# 
  3476  039A                     	;# 
  3477  039C                     	;# 
  3478  039D                     	;# 
  3479  039E                     	;# 
  3480  039F                     	;# 
  3481  0415                     	;# 
  3482  0416                     	;# 
  3483  0417                     	;# 
  3484  041C                     	;# 
  3485  041D                     	;# 
  3486  041E                     	;# 
  3487  0FE4                     	;# 
  3488  0FE5                     	;# 
  3489  0FE6                     	;# 
  3490  0FE7                     	;# 
  3491  0FE8                     	;# 
  3492  0FE9                     	;# 
  3493  0FEA                     	;# 
  3494  0FEB                     	;# 
  3495  0FED                     	;# 
  3496  0FEE                     	;# 
  3497  0FEF                     	;# 
  3498  0000                     	;# 
  3499  0001                     	;# 
  3500  0002                     	;# 
  3501  0003                     	;# 
  3502  0004                     	;# 
  3503  0005                     	;# 
  3504  0006                     	;# 
  3505  0007                     	;# 
  3506  0008                     	;# 
  3507  0009                     	;# 
  3508  000A                     	;# 
  3509  000B                     	;# 
  3510  000C                     	;# 
  3511  000D                     	;# 
  3512  000E                     	;# 
  3513  0011                     	;# 
  3514  0012                     	;# 
  3515  0013                     	;# 
  3516  0014                     	;# 
  3517  0015                     	;# 
  3518  0016                     	;# 
  3519  0016                     	;# 
  3520  0017                     	;# 
  3521  0018                     	;# 
  3522  0019                     	;# 
  3523  001A                     	;# 
  3524  001B                     	;# 
  3525  001C                     	;# 
  3526  001E                     	;# 
  3527  001F                     	;# 
  3528  008C                     	;# 
  3529  008D                     	;# 
  3530  008E                     	;# 
  3531  0091                     	;# 
  3532  0092                     	;# 
  3533  0093                     	;# 
  3534  0094                     	;# 
  3535  0095                     	;# 
  3536  0096                     	;# 
  3537  0097                     	;# 
  3538  0098                     	;# 
  3539  0099                     	;# 
  3540  009A                     	;# 
  3541  009B                     	;# 
  3542  009B                     	;# 
  3543  009C                     	;# 
  3544  009D                     	;# 
  3545  009E                     	;# 
  3546  010C                     	;# 
  3547  010D                     	;# 
  3548  010E                     	;# 
  3549  0111                     	;# 
  3550  0112                     	;# 
  3551  0113                     	;# 
  3552  0114                     	;# 
  3553  0115                     	;# 
  3554  0116                     	;# 
  3555  0117                     	;# 
  3556  0118                     	;# 
  3557  0119                     	;# 
  3558  011A                     	;# 
  3559  011B                     	;# 
  3560  011D                     	;# 
  3561  011E                     	;# 
  3562  018C                     	;# 
  3563  018D                     	;# 
  3564  018E                     	;# 
  3565  0191                     	;# 
  3566  0191                     	;# 
  3567  0192                     	;# 
  3568  0193                     	;# 
  3569  0193                     	;# 
  3570  0193                     	;# 
  3571  0194                     	;# 
  3572  0195                     	;# 
  3573  0196                     	;# 
  3574  0199                     	;# 
  3575  019A                     	;# 
  3576  019B                     	;# 
  3577  019B                     	;# 
  3578  019B                     	;# 
  3579  019B                     	;# 
  3580  019C                     	;# 
  3581  019C                     	;# 
  3582  019D                     	;# 
  3583  019E                     	;# 
  3584  019F                     	;# 
  3585  020C                     	;# 
  3586  020D                     	;# 
  3587  020E                     	;# 
  3588  0211                     	;# 
  3589  0211                     	;# 
  3590  0212                     	;# 
  3591  0212                     	;# 
  3592  0213                     	;# 
  3593  0213                     	;# 
  3594  0214                     	;# 
  3595  0214                     	;# 
  3596  0215                     	;# 
  3597  0215                     	;# 
  3598  0215                     	;# 
  3599  0216                     	;# 
  3600  0216                     	;# 
  3601  0217                     	;# 
  3602  0217                     	;# 
  3603  0219                     	;# 
  3604  021A                     	;# 
  3605  021B                     	;# 
  3606  021C                     	;# 
  3607  021D                     	;# 
  3608  021E                     	;# 
  3609  021F                     	;# 
  3610  0291                     	;# 
  3611  0291                     	;# 
  3612  0292                     	;# 
  3613  0293                     	;# 
  3614  0294                     	;# 
  3615  0295                     	;# 
  3616  0295                     	;# 
  3617  0296                     	;# 
  3618  0298                     	;# 
  3619  0298                     	;# 
  3620  0299                     	;# 
  3621  029A                     	;# 
  3622  029B                     	;# 
  3623  029C                     	;# 
  3624  029D                     	;# 
  3625  029E                     	;# 
  3626  0311                     	;# 
  3627  0311                     	;# 
  3628  0312                     	;# 
  3629  0313                     	;# 
  3630  0318                     	;# 
  3631  0318                     	;# 
  3632  0319                     	;# 
  3633  031A                     	;# 
  3634  038C                     	;# 
  3635  038D                     	;# 
  3636  038E                     	;# 
  3637  0391                     	;# 
  3638  0392                     	;# 
  3639  0393                     	;# 
  3640  0394                     	;# 
  3641  0395                     	;# 
  3642  0396                     	;# 
  3643  039A                     	;# 
  3644  039C                     	;# 
  3645  039D                     	;# 
  3646  039E                     	;# 
  3647  039F                     	;# 
  3648  0415                     	;# 
  3649  0416                     	;# 
  3650  0417                     	;# 
  3651  041C                     	;# 
  3652  041D                     	;# 
  3653  041E                     	;# 
  3654  0FE4                     	;# 
  3655  0FE5                     	;# 
  3656  0FE6                     	;# 
  3657  0FE7                     	;# 
  3658  0FE8                     	;# 
  3659  0FE9                     	;# 
  3660  0FEA                     	;# 
  3661  0FEB                     	;# 
  3662  0FED                     	;# 
  3663  0FEE                     	;# 
  3664  0FEF                     	;# 
  3665  0000                     	;# 
  3666  0001                     	;# 
  3667  0002                     	;# 
  3668  0003                     	;# 
  3669  0004                     	;# 
  3670  0005                     	;# 
  3671  0006                     	;# 
  3672  0007                     	;# 
  3673  0008                     	;# 
  3674  0009                     	;# 
  3675  000A                     	;# 
  3676  000B                     	;# 
  3677  000C                     	;# 
  3678  000D                     	;# 
  3679  000E                     	;# 
  3680  0011                     	;# 
  3681  0012                     	;# 
  3682  0013                     	;# 
  3683  0014                     	;# 
  3684  0015                     	;# 
  3685  0016                     	;# 
  3686  0016                     	;# 
  3687  0017                     	;# 
  3688  0018                     	;# 
  3689  0019                     	;# 
  3690  001A                     	;# 
  3691  001B                     	;# 
  3692  001C                     	;# 
  3693  001E                     	;# 
  3694  001F                     	;# 
  3695  008C                     	;# 
  3696  008D                     	;# 
  3697  008E                     	;# 
  3698  0091                     	;# 
  3699  0092                     	;# 
  3700  0093                     	;# 
  3701  0094                     	;# 
  3702  0095                     	;# 
  3703  0096                     	;# 
  3704  0097                     	;# 
  3705  0098                     	;# 
  3706  0099                     	;# 
  3707  009A                     	;# 
  3708  009B                     	;# 
  3709  009B                     	;# 
  3710  009C                     	;# 
  3711  009D                     	;# 
  3712  009E                     	;# 
  3713  010C                     	;# 
  3714  010D                     	;# 
  3715  010E                     	;# 
  3716  0111                     	;# 
  3717  0112                     	;# 
  3718  0113                     	;# 
  3719  0114                     	;# 
  3720  0115                     	;# 
  3721  0116                     	;# 
  3722  0117                     	;# 
  3723  0118                     	;# 
  3724  0119                     	;# 
  3725  011A                     	;# 
  3726  011B                     	;# 
  3727  011D                     	;# 
  3728  011E                     	;# 
  3729  018C                     	;# 
  3730  018D                     	;# 
  3731  018E                     	;# 
  3732  0191                     	;# 
  3733  0191                     	;# 
  3734  0192                     	;# 
  3735  0193                     	;# 
  3736  0193                     	;# 
  3737  0193                     	;# 
  3738  0194                     	;# 
  3739  0195                     	;# 
  3740  0196                     	;# 
  3741  0199                     	;# 
  3742  019A                     	;# 
  3743  019B                     	;# 
  3744  019B                     	;# 
  3745  019B                     	;# 
  3746  019B                     	;# 
  3747  019C                     	;# 
  3748  019C                     	;# 
  3749  019D                     	;# 
  3750  019E                     	;# 
  3751  019F                     	;# 
  3752  020C                     	;# 
  3753  020D                     	;# 
  3754  020E                     	;# 
  3755  0211                     	;# 
  3756  0211                     	;# 
  3757  0212                     	;# 
  3758  0212                     	;# 
  3759  0213                     	;# 
  3760  0213                     	;# 
  3761  0214                     	;# 
  3762  0214                     	;# 
  3763  0215                     	;# 
  3764  0215                     	;# 
  3765  0215                     	;# 
  3766  0216                     	;# 
  3767  0216                     	;# 
  3768  0217                     	;# 
  3769  0217                     	;# 
  3770  0219                     	;# 
  3771  021A                     	;# 
  3772  021B                     	;# 
  3773  021C                     	;# 
  3774  021D                     	;# 
  3775  021E                     	;# 
  3776  021F                     	;# 
  3777  0291                     	;# 
  3778  0291                     	;# 
  3779  0292                     	;# 
  3780  0293                     	;# 
  3781  0294                     	;# 
  3782  0295                     	;# 
  3783  0295                     	;# 
  3784  0296                     	;# 
  3785  0298                     	;# 
  3786  0298                     	;# 
  3787  0299                     	;# 
  3788  029A                     	;# 
  3789  029B                     	;# 
  3790  029C                     	;# 
  3791  029D                     	;# 
  3792  029E                     	;# 
  3793  0311                     	;# 
  3794  0311                     	;# 
  3795  0312                     	;# 
  3796  0313                     	;# 
  3797  0318                     	;# 
  3798  0318                     	;# 
  3799  0319                     	;# 
  3800  031A                     	;# 
  3801  038C                     	;# 
  3802  038D                     	;# 
  3803  038E                     	;# 
  3804  0391                     	;# 
  3805  0392                     	;# 
  3806  0393                     	;# 
  3807  0394                     	;# 
  3808  0395                     	;# 
  3809  0396                     	;# 
  3810  039A                     	;# 
  3811  039C                     	;# 
  3812  039D                     	;# 
  3813  039E                     	;# 
  3814  039F                     	;# 
  3815  0415                     	;# 
  3816  0416                     	;# 
  3817  0417                     	;# 
  3818  041C                     	;# 
  3819  041D                     	;# 
  3820  041E                     	;# 
  3821  0FE4                     	;# 
  3822  0FE5                     	;# 
  3823  0FE6                     	;# 
  3824  0FE7                     	;# 
  3825  0FE8                     	;# 
  3826  0FE9                     	;# 
  3827  0FEA                     	;# 
  3828  0FEB                     	;# 
  3829  0FED                     	;# 
  3830  0FEE                     	;# 
  3831  0FEF                     	;# 
  3832  0000                     	;# 
  3833  0001                     	;# 
  3834  0002                     	;# 
  3835  0003                     	;# 
  3836  0004                     	;# 
  3837  0005                     	;# 
  3838  0006                     	;# 
  3839  0007                     	;# 
  3840  0008                     	;# 
  3841  0009                     	;# 
  3842  000A                     	;# 
  3843  000B                     	;# 
  3844  000C                     	;# 
  3845  000D                     	;# 
  3846  000E                     	;# 
  3847  0011                     	;# 
  3848  0012                     	;# 
  3849  0013                     	;# 
  3850  0014                     	;# 
  3851  0015                     	;# 
  3852  0016                     	;# 
  3853  0016                     	;# 
  3854  0017                     	;# 
  3855  0018                     	;# 
  3856  0019                     	;# 
  3857  001A                     	;# 
  3858  001B                     	;# 
  3859  001C                     	;# 
  3860  001E                     	;# 
  3861  001F                     	;# 
  3862  008C                     	;# 
  3863  008D                     	;# 
  3864  008E                     	;# 
  3865  0091                     	;# 
  3866  0092                     	;# 
  3867  0093                     	;# 
  3868  0094                     	;# 
  3869  0095                     	;# 
  3870  0096                     	;# 
  3871  0097                     	;# 
  3872  0098                     	;# 
  3873  0099                     	;# 
  3874  009A                     	;# 
  3875  009B                     	;# 
  3876  009B                     	;# 
  3877  009C                     	;# 
  3878  009D                     	;# 
  3879  009E                     	;# 
  3880  010C                     	;# 
  3881  010D                     	;# 
  3882  010E                     	;# 
  3883  0111                     	;# 
  3884  0112                     	;# 
  3885  0113                     	;# 
  3886  0114                     	;# 
  3887  0115                     	;# 
  3888  0116                     	;# 
  3889  0117                     	;# 
  3890  0118                     	;# 
  3891  0119                     	;# 
  3892  011A                     	;# 
  3893  011B                     	;# 
  3894  011D                     	;# 
  3895  011E                     	;# 
  3896  018C                     	;# 
  3897  018D                     	;# 
  3898  018E                     	;# 
  3899  0191                     	;# 
  3900  0191                     	;# 
  3901  0192                     	;# 
  3902  0193                     	;# 
  3903  0193                     	;# 
  3904  0193                     	;# 
  3905  0194                     	;# 
  3906  0195                     	;# 
  3907  0196                     	;# 
  3908  0199                     	;# 
  3909  019A                     	;# 
  3910  019B                     	;# 
  3911  019B                     	;# 
  3912  019B                     	;# 
  3913  019B                     	;# 
  3914  019C                     	;# 
  3915  019C                     	;# 
  3916  019D                     	;# 
  3917  019E                     	;# 
  3918  019F                     	;# 
  3919  020C                     	;# 
  3920  020D                     	;# 
  3921  020E                     	;# 
  3922  0211                     	;# 
  3923  0211                     	;# 
  3924  0212                     	;# 
  3925  0212                     	;# 
  3926  0213                     	;# 
  3927  0213                     	;# 
  3928  0214                     	;# 
  3929  0214                     	;# 
  3930  0215                     	;# 
  3931  0215                     	;# 
  3932  0215                     	;# 
  3933  0216                     	;# 
  3934  0216                     	;# 
  3935  0217                     	;# 
  3936  0217                     	;# 
  3937  0219                     	;# 
  3938  021A                     	;# 
  3939  021B                     	;# 
  3940  021C                     	;# 
  3941  021D                     	;# 
  3942  021E                     	;# 
  3943  021F                     	;# 
  3944  0291                     	;# 
  3945  0291                     	;# 
  3946  0292                     	;# 
  3947  0293                     	;# 
  3948  0294                     	;# 
  3949  0295                     	;# 
  3950  0295                     	;# 
  3951  0296                     	;# 
  3952  0298                     	;# 
  3953  0298                     	;# 
  3954  0299                     	;# 
  3955  029A                     	;# 
  3956  029B                     	;# 
  3957  029C                     	;# 
  3958  029D                     	;# 
  3959  029E                     	;# 
  3960  0311                     	;# 
  3961  0311                     	;# 
  3962  0312                     	;# 
  3963  0313                     	;# 
  3964  0318                     	;# 
  3965  0318                     	;# 
  3966  0319                     	;# 
  3967  031A                     	;# 
  3968  038C                     	;# 
  3969  038D                     	;# 
  3970  038E                     	;# 
  3971  0391                     	;# 
  3972  0392                     	;# 
  3973  0393                     	;# 
  3974  0394                     	;# 
  3975  0395                     	;# 
  3976  0396                     	;# 
  3977  039A                     	;# 
  3978  039C                     	;# 
  3979  039D                     	;# 
  3980  039E                     	;# 
  3981  039F                     	;# 
  3982  0415                     	;# 
  3983  0416                     	;# 
  3984  0417                     	;# 
  3985  041C                     	;# 
  3986  041D                     	;# 
  3987  041E                     	;# 
  3988  0FE4                     	;# 
  3989  0FE5                     	;# 
  3990  0FE6                     	;# 
  3991  0FE7                     	;# 
  3992  0FE8                     	;# 
  3993  0FE9                     	;# 
  3994  0FEA                     	;# 
  3995  0FEB                     	;# 
  3996  0FED                     	;# 
  3997  0FEE                     	;# 
  3998  0FEF                     	;# 
  3999                           
  4000                           	psect	idataBANK1
  4001  12AD                     __pidataBANK1:	
  4002                           
  4003                           ;initializer for _sensorHealth
  4004  12AD  3401               	retlw	1
  4005  12AE  3401               	retlw	1
  4006                           
  4007                           ;initializer for _addressSize
  4008  12AF  3405               	retlw	5
  4009                           
  4010                           	psect	idataBANK2
  4011  12C0                     __pidataBANK2:	
  4012                           
  4013                           ;initializer for _sensorUpdatePeriod
  4014  12C0  34C0               	retlw	192
  4015  12C1  3427               	retlw	39
  4016  12C2  3409               	retlw	9
  4017  12C3  3400               	retlw	0
  4018                           
  4019                           	psect	stringtext1
  4020  1800                     __pstringtext1:	
  4021  1800                     atan@coeff_a:	
  4022  1800  343C               	retlw	60
  4023  1801  3404               	retlw	4
  4024  1802  3442               	retlw	66
  4025  1803  349F               	retlw	159
  4026  1804  346A               	retlw	106
  4027  1805  3442               	retlw	66
  4028  1806  3490               	retlw	144
  4029  1807  3401               	retlw	1
  4030  1808  3442               	retlw	66
  4031  1809  344D               	retlw	77
  4032  180A  34BB               	retlw	187
  4033  180B  3440               	retlw	64
  4034  180C  34EC               	retlw	236
  4035  180D  3447               	retlw	71
  4036  180E  343E               	retlw	62
  4037  180F  348E               	retlw	142
  4038  1810  341F               	retlw	31
  4039  1811  34BB               	retlw	187
  4040  1812                     __end_ofatan@coeff_a:	
  4041                           
  4042                           	psect	stringtext2
  4043  1812                     __pstringtext2:	
  4044  1812                     atan@coeff_b:	
  4045  1812  343C               	retlw	60
  4046  1813  3404               	retlw	4
  4047  1814  3442               	retlw	66
  4048  1815  345A               	retlw	90
  4049  1816  348B               	retlw	139
  4050  1817  3442               	retlw	66
  4051  1818  3404               	retlw	4
  4052  1819  3444               	retlw	68
  4053  181A  3442               	retlw	66
  4054  181B  349C               	retlw	156
  4055  181C  344F               	retlw	79
  4056  181D  3441               	retlw	65
  4057  181E  3400               	retlw	0
  4058  181F  3480               	retlw	128
  4059  1820  343F               	retlw	63
  4060  1821                     __end_ofatan@coeff_b:	
  4061                           
  4062                           	psect	stringtext3
  4063  1821                     __pstringtext3:	
  4064  1821                     Wireless_init@TADDR:	
  4065  1821  3431               	retlw	49
  4066  1822  3430               	retlw	48
  4067  1823  3430               	retlw	48
  4068  1824  3430               	retlw	48
  4069  1825  3431               	retlw	49
  4070  1826                     __end_ofWireless_init@TADDR:	
  4071                           
  4072                           	psect	nvCOMMON
  4073  007C                     __pnvCOMMON:	
  4074  007C                     _timer1ReloadVal:	
  4075  007C                     	ds	2
  4076                           
  4077                           	psect	nvBANK2
  4078  0166                     __pnvBANK2:	
  4079  0166                     _TMR1_InterruptHandler:	
  4080  0166                     	ds	2
  4081  0168                     _IOCAF2_InterruptHandler:	
  4082  0168                     	ds	2
  4083  000E                     _PORTCbits	set	14
  4084  0019                     _T1GCONbits	set	25
  4085  0018                     _T1CONbits	set	24
  4086  0018                     _T1CON	set	24
  4087  0016                     _TMR1L	set	22
  4088  0017                     _TMR1H	set	23
  4089  0019                     _T1GCON	set	25
  4090  0014                     _PIR4bits	set	20
  4091  001C                     _T2CONbits	set	28
  4092  001C                     _T2CON	set	28
  4093  0011                     _PIR1bits	set	17
  4094  001A                     _TMR2	set	26
  4095  001B                     _PR2	set	27
  4096  000B                     _INTCONbits	set	11
  4097  009D                     _ADCON0bits	set	157
  4098  009C                     _ADRESH	set	156
  4099  009B                     _ADRESL	set	155
  4100  009E                     _ADCON1	set	158
  4101  009D                     _ADCON0	set	157
  4102  0091                     _PIE1bits	set	145
  4103  0094                     _PIE4bits	set	148
  4104  0095                     _OPTION_REGbits	set	149
  4105  008E                     _TRISC	set	142
  4106  008D                     _TRISB	set	141
  4107  008C                     _TRISA	set	140
  4108  0097                     _WDTCON	set	151
  4109  0098                     _OSCTUNE	set	152
  4110  0099                     _OSCCON	set	153
  4111  010E                     _LATCbits	set	270
  4112  0117                     _FVRCONbits	set	279
  4113  0117                     _FVRCON	set	279
  4114  011D                     _APFCON0	set	285
  4115  011E                     _APFCON1	set	286
  4116  010E                     _LATC	set	270
  4117  010D                     _LATB	set	269
  4118  010C                     _LATA	set	268
  4119  0116                     _BORCON	set	278
  4120  0196                     _EECON2	set	406
  4121  0193                     _EEDATL	set	403
  4122  0194                     _EEDATH	set	404
  4123  0195                     _EECON1bits	set	405
  4124  0192                     _EEADRH	set	402
  4125  0191                     _EEADRL	set	401
  4126  018C                     _ANSELA	set	396
  4127  018D                     _ANSELB	set	397
  4128  018E                     _ANSELC	set	398
  4129  020E                     _WPUCbits	set	526
  4130  0214                     _SSP1STATbits	set	532
  4131  0211                     _SSP1BUF	set	529
  4132  0215                     _SSP1CON1bits	set	533
  4133  0212                     _SSP1ADD	set	530
  4134  0215                     _SSP1CON1	set	533
  4135  0214                     _SSP1STAT	set	532
  4136  0219                     _SSP2BUF	set	537
  4137  021E                     _SSP2CON2bits	set	542
  4138  021D                     _SSP2CON1bits	set	541
  4139  021A                     _SSP2ADD	set	538
  4140  021F                     _SSP2CON3	set	543
  4141  021D                     _SSP2CON1	set	541
  4142  021C                     _SSP2STAT	set	540
  4143  020E                     _WPUC	set	526
  4144  020C                     _WPUA	set	524
  4145  020D                     _WPUB	set	525
  4146  0391                     _IOCAPbits	set	913
  4147  0392                     _IOCANbits	set	914
  4148  0393                     _IOCAFbits	set	915
  4149                           
  4150                           ; #config settings
  4151  0000                     
  4152                           	psect	cinit
  4153  0039                     start_initialization:	
  4154  0039                     __initialization:	
  4155                           
  4156                           ; Initialize objects allocated to BANK1
  4157  0039  0021               	movlb	1	; select bank1
  4158  003A  3192  22AD  3180   	fcall	__pidataBANK1	;fetch initializer
  4159  003D  00E3               	movwf	__pdataBANK1& (0+127)
  4160  003E  3192  22AE  3180   	fcall	__pidataBANK1+1	;fetch initializer
  4161  0041  00E4               	movwf	(__pdataBANK1+1)& (0+127)
  4162  0042  3192  22AF  3180   	fcall	__pidataBANK1+2	;fetch initializer
  4163  0045  00E5               	movwf	(__pdataBANK1+2)& (0+127)
  4164                           
  4165                           ; Initialize objects allocated to BANK2
  4166  0046  0022               	movlb	2	; select bank2
  4167  0047  3192  22C0  3180   	fcall	__pidataBANK2	;fetch initializer
  4168  004A  00EA               	movwf	__pdataBANK2& (0+127)
  4169  004B  3192  22C1  3180   	fcall	__pidataBANK2+1	;fetch initializer
  4170  004E  00EB               	movwf	(__pdataBANK2+1)& (0+127)
  4171  004F  3192  22C2  3180   	fcall	__pidataBANK2+2	;fetch initializer
  4172  0052  00EC               	movwf	(__pdataBANK2+2)& (0+127)
  4173  0053  3192  22C3  3180   	fcall	__pidataBANK2+3	;fetch initializer
  4174  0056  00ED               	movwf	(__pdataBANK2+3)& (0+127)
  4175                           
  4176                           ; Clear objects allocated to COMMON
  4177  0057  01F7               	clrf	__pbssCOMMON& (0+127)
  4178  0058  01F8               	clrf	(__pbssCOMMON+1)& (0+127)
  4179  0059  01F9               	clrf	(__pbssCOMMON+2)& (0+127)
  4180  005A  01FA               	clrf	(__pbssCOMMON+3)& (0+127)
  4181  005B  01FB               	clrf	(__pbssCOMMON+4)& (0+127)
  4182                           
  4183                           ; Clear objects allocated to BANK1
  4184  005C  30CA               	movlw	low __pbssBANK1
  4185  005D  0084               	movwf	4
  4186  005E  3000               	movlw	high __pbssBANK1
  4187  005F  0085               	movwf	5
  4188  0060  3019               	movlw	25
  4189  0061  3192  22E5  3180   	fcall	clear_ram0
  4190                           
  4191                           ; Clear objects allocated to BANK2
  4192  0064  3020               	movlw	low __pbssBANK2
  4193  0065  0084               	movwf	4
  4194  0066  3001               	movlw	high __pbssBANK2
  4195  0067  0085               	movwf	5
  4196  0068  3046               	movlw	70
  4197  0069  3192  22E5  3180   	fcall	clear_ram0
  4198                           
  4199                           ; Clear objects allocated to BANK3
  4200  006C  30A0               	movlw	low __pbssBANK3
  4201  006D  0084               	movwf	4
  4202  006E  3001               	movlw	high __pbssBANK3
  4203  006F  0085               	movwf	5
  4204  0070  3030               	movlw	48
  4205  0071  3192  22E5         	fcall	clear_ram0
  4206  0073                     end_of_initialization:	
  4207                           ;End of C runtime variable initialization code
  4208                           
  4209  0073                     __end_of__initialization:	
  4210  0073  107E               	bcf	int$flags,0	;clear compiler interrupt flag (level 1)
  4211  0074  0020               	movlb	0
  4212  0075  3183  2B45         	ljmp	_main	;jump to C main() function
  4213                           
  4214                           	psect	bssCOMMON
  4215  0077                     __pbssCOMMON:	
  4216  0077                     _p_i2c2_current:	
  4217  0077                     	ds	1
  4218  0078                     _p_i2c2_trb_current:	
  4219  0078                     	ds	1
  4220  0079                     _i2c2_state:	
  4221  0079                     	ds	1
  4222  007A                     I2C2_ISR@i2c_address:	
  4223  007A                     	ds	2
  4224                           
  4225                           	psect	bssBANK1
  4226  00CA                     __pbssBANK1:	
  4227  00CA                     _i2c2_object:	
  4228  00CA                     	ds	5
  4229  00CF                     _globalCounter:	
  4230  00CF                     	ds	4
  4231  00D3                     _dig_T1:	
  4232  00D3                     	ds	2
  4233  00D5                     I2C2_ISR@pi2c_buf_ptr:	
  4234  00D5                     	ds	2
  4235  00D7                     DOOR_run@previousDoorState:	
  4236  00D7                     	ds	1
  4237  00D8                     _initialised:	
  4238  00D8                     	ds	1
  4239  00D9                     _doorState:	
  4240  00D9                     	ds	1
  4241  00DA                     Wireless_determineTransmitPower@numOfSuccessfulTransmits:	
  4242  00DA                     	ds	1
  4243  00DB                     Wireless_determineTransmitPower@numOfTransmits:	
  4244  00DB                     	ds	1
  4245  00DC                     _currentTransmitPower:	
  4246  00DC                     	ds	1
  4247  00DD                     _doorClosedAngle:	
  4248  00DD                     	ds	1
  4249  00DE                     _doorOpenAngle:	
  4250  00DE                     	ds	1
  4251  00DF                     _HMC5883Lmode:	
  4252  00DF                     	ds	1
  4253  00E0                     I2C2_ISR@i2c_10bit_address_restart:	
  4254  00E0                     	ds	1
  4255  00E1                     I2C2_ISR@i2c_bytes_left:	
  4256  00E1                     	ds	1
  4257  00E2                     _i2c2_trb_count:	
  4258  00E2                     	ds	1
  4259                           
  4260                           	psect	dataBANK1
  4261  00E3                     __pdataBANK1:	
  4262  00E3                     _sensorHealth:	
  4263  00E3                     	ds	2
  4264  00E5                     _addressSize:	
  4265  00E5                     	ds	1
  4266                           
  4267                           	psect	bssBANK2
  4268  0120                     __pbssBANK2:	
  4269  0120                     _curr:	
  4270  0120                     	ds	4
  4271  0124                     _adc_t:	
  4272  0124                     	ds	4
  4273  0128                     _pressure:	
  4274  0128                     	ds	3
  4275  012B                     _cTemp:	
  4276  012B                     	ds	3
  4277  012E                     _t_fine:	
  4278  012E                     	ds	3
  4279  0131                     _var2:	
  4280  0131                     	ds	3
  4281  0134                     _var1:	
  4282  0134                     	ds	3
  4283  0137                     HMC5883L_TestConnection@F3572:	
  4284  0137                     	ds	3
  4285  013A                     _errno:	
  4286  013A                     	ds	2
  4287  013C                     _timeOut:	
  4288  013C                     	ds	2
  4289  013E                     _referenceDirection:	
  4290  013E                     	ds	2
  4291  0140                     _dig_P9:	
  4292  0140                     	ds	2
  4293  0142                     _dig_P8:	
  4294  0142                     	ds	2
  4295  0144                     _dig_P7:	
  4296  0144                     	ds	2
  4297  0146                     _dig_P6:	
  4298  0146                     	ds	2
  4299  0148                     _dig_P5:	
  4300  0148                     	ds	2
  4301  014A                     _dig_P4:	
  4302  014A                     	ds	2
  4303  014C                     _dig_P3:	
  4304  014C                     	ds	2
  4305  014E                     _dig_P2:	
  4306  014E                     	ds	2
  4307  0150                     _dig_P1:	
  4308  0150                     	ds	2
  4309  0152                     _dig_T4:	
  4310  0152                     	ds	2
  4311  0154                     _dig_T3:	
  4312  0154                     	ds	2
  4313  0156                     _dig_T2:	
  4314  0156                     	ds	2
  4315  0158                     I2C2_MasterRead@trBlock:	
  4316  0158                     	ds	5
  4317  015D                     I2C2_MasterWrite@trBlock:	
  4318  015D                     	ds	5
  4319  0162                     _i2c2_tr_queue:	
  4320  0162                     	ds	4
  4321                           
  4322                           	psect	dataBANK2
  4323  016A                     __pdataBANK2:	
  4324  016A                     _sensorUpdatePeriod:	
  4325  016A                     	ds	4
  4326                           
  4327                           	psect	bssBANK3
  4328  01A0                     __pbssBANK3:	
  4329  01A0                     DOOR_run@doorStateDuration:	
  4330  01A0                     	ds	4
  4331  01A4                     _adc_p:	
  4332  01A4                     	ds	4
  4333  01A8                     _b1:	
  4334  01A8                     	ds	24
  4335  01C0                     _data:	
  4336  01C0                     	ds	8
  4337  01C8                     _heading:	
  4338  01C8                     	ds	8
  4339                           
  4340                           	psect	clrtext
  4341  12E5                     clear_ram0:	
  4342                           ;	Called with FSR0 containing the base address, and
  4343                           ;	WREG with the size to clear
  4344                           
  4345  12E5  0064               	clrwdt	;clear the watchdog before getting into this loop
  4346  12E6                     clrloop0:	
  4347  12E6  0180               	clrf	0	;clear RAM location pointed to by FSR
  4348  12E7  3101               	addfsr 0,1
  4349  12E8  0B89               	decfsz	9,f	;Have we reached the end of clearing yet?
  4350  12E9  2AE6               	goto	clrloop0	;have we reached the end yet?
  4351  12EA  3400               	retlw	0	;all done for this memory range, return
  4352                           
  4353                           	psect	cstackBANK3
  4354  01D0                     __pcstackBANK3:	
  4355  01D0                     main@prevDoorStatus:	
  4356                           
  4357                           ; 1 bytes @ 0x0
  4358  01D0                     	ds	1
  4359  01D1                     main@doorClosedUpdateCounter:	
  4360                           
  4361                           ; 4 bytes @ 0x1
  4362  01D1                     	ds	4
  4363  01D5                     main@dur:	
  4364                           
  4365                           ; 2 bytes @ 0x5
  4366  01D5                     	ds	2
  4367  01D7                     main@doorOpenTime:	
  4368                           
  4369                           ; 4 bytes @ 0x7
  4370  01D7                     	ds	4
  4371  01DB                     main@doorStatus:	
  4372                           
  4373                           ; 1 bytes @ 0xB
  4374  01DB                     	ds	1
  4375                           
  4376                           	psect	cstackBANK1
  4377  00A0                     __pcstackBANK1:	
  4378  00A0                     ___fttol@sign1:	
  4379                           
  4380                           ; 1 bytes @ 0x0
  4381  00A0                     	ds	1
  4382  00A1                     ___fttol@lval:	
  4383                           
  4384                           ; 4 bytes @ 0x1
  4385  00A1                     	ds	4
  4386  00A5                     ___fttol@exp1:	
  4387                           
  4388                           ; 1 bytes @ 0x5
  4389  00A5                     	ds	1
  4390  00A6                     ?_BMP_readTemperature:	
  4391                           
  4392                           ; 3 bytes @ 0x6
  4393  00A6                     	ds	3
  4394  00A9                     ??_BMP_readTemperature:	
  4395                           
  4396                           ; 1 bytes @ 0x9
  4397  00A9                     	ds	12
  4398  00B5                     _BMP_readTemperature$2648:	
  4399                           
  4400                           ; 3 bytes @ 0x15
  4401  00B5                     	ds	3
  4402  00B8                     BMP_readTemperature@status:	
  4403                           
  4404                           ; 1 bytes @ 0x18
  4405  00B8                     	ds	1
  4406  00B9                     BMP_readTemperature@tmp:	
  4407                           
  4408                           ; 1 bytes @ 0x19
  4409  00B9                     	ds	1
  4410  00BA                     ?_Wireless_packageData:	
  4411  00BA                     Wireless_packageData@openTime:	
  4412                           ; 1 bytes @ 0x1A
  4413                           
  4414                           
  4415                           ; 1 bytes @ 0x1A
  4416  00BA                     	ds	1
  4417  00BB                     Wireless_packageData@tempC:	
  4418                           
  4419                           ; 3 bytes @ 0x1B
  4420  00BB                     	ds	3
  4421  00BE                     Wireless_packageData@data:	
  4422                           
  4423                           ; 6 bytes @ 0x1E
  4424  00BE                     	ds	6
  4425  00C4                     Wireless_packageData@var:	
  4426                           
  4427                           ; 1 bytes @ 0x24
  4428  00C4                     	ds	1
  4429  00C5                     Wireless_packageData@status:	
  4430                           
  4431                           ; 1 bytes @ 0x25
  4432  00C5                     	ds	1
  4433  00C6                     Wireless_packageData@t1:	
  4434                           
  4435                           ; 2 bytes @ 0x26
  4436  00C6                     	ds	2
  4437  00C8                     ??_main:	
  4438                           
  4439                           ; 1 bytes @ 0x28
  4440  00C8                     	ds	2
  4441                           
  4442                           	psect	cstackCOMMON
  4443  0070                     __pcstackCOMMON:	
  4444  0070                     ?_PIN_MANAGER_Initialize:	
  4445  0070                     ?_OSCILLATOR_Initialize:	
  4446                           ; 1 bytes @ 0x0
  4447                           
  4448  0070                     ?_WDT_Initialize:	
  4449                           ; 1 bytes @ 0x0
  4450                           
  4451  0070                     ?_SPI1_Initialize:	
  4452                           ; 1 bytes @ 0x0
  4453                           
  4454  0070                     ?_I2C2_Initialize:	
  4455                           ; 1 bytes @ 0x0
  4456                           
  4457  0070                     ?_FVR_Initialize:	
  4458                           ; 1 bytes @ 0x0
  4459                           
  4460  0070                     ?_ADC_Initialize:	
  4461                           ; 1 bytes @ 0x0
  4462                           
  4463  0070                     ?_TMR2_Initialize:	
  4464                           ; 1 bytes @ 0x0
  4465                           
  4466  0070                     ?_TMR1_Initialize:	
  4467                           ; 1 bytes @ 0x0
  4468                           
  4469  0070                     ?_IOCAF2_DefaultInterruptHandler:	
  4470                           ; 1 bytes @ 0x0
  4471                           
  4472  0070                     ??_IOCAF2_DefaultInterruptHandler:	
  4473                           ; 1 bytes @ 0x0
  4474                           
  4475  0070                     ?_IOCAF2_ISR:	
  4476                           ; 1 bytes @ 0x0
  4477                           
  4478  0070                     ??_IOCAF2_ISR:	
  4479                           ; 1 bytes @ 0x0
  4480                           
  4481  0070                     ?_I2C2_BusCollisionISR:	
  4482                           ; 1 bytes @ 0x0
  4483                           
  4484  0070                     ??_I2C2_BusCollisionISR:	
  4485                           ; 1 bytes @ 0x0
  4486                           
  4487  0070                     ?_I2C2_ISR:	
  4488                           ; 1 bytes @ 0x0
  4489                           
  4490  0070                     ?_TMR1_ISR:	
  4491                           ; 1 bytes @ 0x0
  4492                           
  4493  0070                     ??_TMR1_ISR:	
  4494                           ; 1 bytes @ 0x0
  4495                           
  4496  0070                     ?_TMR1_DefaultInterruptHandler:	
  4497                           ; 1 bytes @ 0x0
  4498                           
  4499  0070                     ??_TMR1_DefaultInterruptHandler:	
  4500                           ; 1 bytes @ 0x0
  4501                           
  4502  0070                     ?_TMR1_CallBack:	
  4503                           ; 1 bytes @ 0x0
  4504                           
  4505  0070                     ??_TMR1_CallBack:	
  4506                           ; 1 bytes @ 0x0
  4507                           
  4508  0070                     ?_Timeout_increment:	
  4509                           ; 1 bytes @ 0x0
  4510                           
  4511  0070                     ??_Timeout_increment:	
  4512                           ; 1 bytes @ 0x0
  4513                           
  4514  0070                     ?_I2C2_Stop:	
  4515                           ; 1 bytes @ 0x0
  4516                           
  4517  0070                     ??_I2C2_Stop:	
  4518                           ; 1 bytes @ 0x0
  4519                           
  4520  0070                     ?_I2C2_FunctionComplete:	
  4521                           ; 1 bytes @ 0x0
  4522                           
  4523  0070                     ??_I2C2_FunctionComplete:	
  4524                           ; 1 bytes @ 0x0
  4525                           
  4526  0070                     ?_Sensor_peripheralWake:	
  4527                           ; 1 bytes @ 0x0
  4528                           
  4529  0070                     ?_Sensor_peripheralSleep:	
  4530                           ; 1 bytes @ 0x0
  4531                           
  4532  0070                     ?_Wireless_init:	
  4533                           ; 1 bytes @ 0x0
  4534                           
  4535  0070                     ?_BMP_init:	
  4536                           ; 1 bytes @ 0x0
  4537                           
  4538  0070                     ?_DOOR_init:	
  4539                           ; 1 bytes @ 0x0
  4540                           
  4541  0070                     ?_Wireless_wake:	
  4542                           ; 1 bytes @ 0x0
  4543                           
  4544  0070                     ?_Wireless_determineTransmitPower:	
  4545                           ; 1 bytes @ 0x0
  4546                           
  4547  0070                     ?_Wireless_sleep:	
  4548                           ; 1 bytes @ 0x0
  4549                           
  4550  0070                     ?_Timeout_updateCurrentTime:	
  4551                           ; 1 bytes @ 0x0
  4552                           
  4553  0070                     ?_DOOR_run:	
  4554                           ; 1 bytes @ 0x0
  4555                           
  4556  0070                     ?_Diag_setTempSensorHealth:	
  4557                           ; 1 bytes @ 0x0
  4558                           
  4559  0070                     ?_Diag_getTempSensorHealth:	
  4560                           ; 1 bytes @ 0x0
  4561                           
  4562  0070                     ?_Wireless_changeTransmitPower:	
  4563                           ; 1 bytes @ 0x0
  4564                           
  4565  0070                     ?_Wireless_isDataTransmitSuccessful:	
  4566                           ; 1 bytes @ 0x0
  4567                           
  4568  0070                     ?_Diag_getSensorHealth:	
  4569                           ; 1 bytes @ 0x0
  4570                           
  4571  0070                     ?_Wireless_checkDataReceived:	
  4572                           ; 1 bytes @ 0x0
  4573                           
  4574  0070                     ?_DOOR_resetPos:	
  4575                           ; 1 bytes @ 0x0
  4576                           
  4577  0070                     ?_SYSTEM_Initialize:	
  4578                           ; 1 bytes @ 0x0
  4579                           
  4580  0070                     ?_PIN_MANAGER_IOC:	
  4581                           ; 1 bytes @ 0x0
  4582                           
  4583  0070                     ??_PIN_MANAGER_IOC:	
  4584                           ; 1 bytes @ 0x0
  4585                           
  4586  0070                     ?_INTERRUPT_InterruptManager:	
  4587                           ; 1 bytes @ 0x0
  4588                           
  4589  0070                     ?_ADC_SelectChannel:	
  4590                           ; 1 bytes @ 0x0
  4591                           
  4592  0070                     ?_ADC_StartConversion:	
  4593                           ; 1 bytes @ 0x0
  4594                           
  4595  0070                     ?_ADC_IsConversionDone:	
  4596                           ; 1 bytes @ 0x0
  4597                           
  4598  0070                     ?_FVR_IsOutputReady:	
  4599                           ; 1 bytes @ 0x0
  4600                           
  4601  0070                     ?_SPI1_Exchange8bit:	
  4602                           ; 1 bytes @ 0x0
  4603                           
  4604  0070                     ?_main:	
  4605                           ; 1 bytes @ 0x0
  4606                           
  4607  0070                     ?_SPI_WriteRead:	
  4608                           ; 1 bytes @ 0x0
  4609                           
  4610  0070                     ?_RF_ReadRegister:	
  4611                           ; 1 bytes @ 0x0
  4612                           
  4613  0070                     ?_RF_WriteRead:	
  4614                           ; 1 bytes @ 0x0
  4615                           
  4616  0070                     ?_RF_Write:	
  4617                           ; 1 bytes @ 0x0
  4618                           
  4619  0070                     ?_RF_GetStatus:	
  4620                           ; 1 bytes @ 0x0
  4621                           
  4622  0070                     ?_RF_ResetStatusIRQ:	
  4623                           ; 1 bytes @ 0x0
  4624                           
  4625  0070                     ?_RF_Init:	
  4626                           ; 1 bytes @ 0x0
  4627                           
  4628  0070                     ?_RF_DataIsReady:	
  4629                           ; 1 bytes @ 0x0
  4630                           
  4631  0070                     ?_Timeout_hasExpired:	
  4632                           ; 1 bytes @ 0x0
  4633                           
  4634                           
  4635                           ; 1 bytes @ 0x0
  4636  0070                     	ds	2
  4637  0072                     I2C2_Stop@completion_code:	
  4638                           
  4639                           ; 1 bytes @ 0x2
  4640  0072                     	ds	1
  4641  0073                     ??_I2C2_ISR:	
  4642                           
  4643                           ; 1 bytes @ 0x3
  4644  0073                     	ds	4
  4645                           
  4646                           	psect	cstackBANK0
  4647  0020                     __pcstackBANK0:	
  4648  0020                     ??_INTERRUPT_InterruptManager:	
  4649                           
  4650                           ; 1 bytes @ 0x0
  4651  0020                     	ds	1
  4652  0021                     ??_OSCILLATOR_Initialize:	
  4653  0021                     ??_WDT_Initialize:	
  4654                           ; 1 bytes @ 0x1
  4655                           
  4656  0021                     ??_SPI1_Initialize:	
  4657                           ; 1 bytes @ 0x1
  4658                           
  4659  0021                     ??_I2C2_Initialize:	
  4660                           ; 1 bytes @ 0x1
  4661                           
  4662  0021                     ??_FVR_Initialize:	
  4663                           ; 1 bytes @ 0x1
  4664                           
  4665  0021                     ??_ADC_Initialize:	
  4666                           ; 1 bytes @ 0x1
  4667                           
  4668  0021                     ??_TMR2_Initialize:	
  4669                           ; 1 bytes @ 0x1
  4670                           
  4671  0021                     ?_IOCAF2_SetInterruptHandler:	
  4672                           ; 1 bytes @ 0x1
  4673                           
  4674  0021                     ?_TMR1_SetInterruptHandler:	
  4675                           ; 1 bytes @ 0x1
  4676                           
  4677  0021                     ?_I2C2_MasterWriteTRBBuild:	
  4678                           ; 1 bytes @ 0x1
  4679                           
  4680  0021                     ?_I2C2_MasterTRBInsert:	
  4681                           ; 1 bytes @ 0x1
  4682                           
  4683  0021                     ?_I2C2_MasterReadTRBBuild:	
  4684                           ; 1 bytes @ 0x1
  4685                           
  4686  0021                     ??_Sensor_peripheralWake:	
  4687                           ; 1 bytes @ 0x1
  4688                           
  4689  0021                     ??_Sensor_peripheralSleep:	
  4690                           ; 1 bytes @ 0x1
  4691                           
  4692  0021                     ?_setSleepTime:	
  4693                           ; 1 bytes @ 0x1
  4694                           
  4695  0021                     ??_DOOR_init:	
  4696                           ; 1 bytes @ 0x1
  4697                           
  4698  0021                     ??_DOOR_run:	
  4699                           ; 1 bytes @ 0x1
  4700                           
  4701  0021                     ??_Diag_setTempSensorHealth:	
  4702                           ; 1 bytes @ 0x1
  4703                           
  4704  0021                     ??_Diag_getTempSensorHealth:	
  4705                           ; 1 bytes @ 0x1
  4706                           
  4707  0021                     ??_Diag_getSensorHealth:	
  4708                           ; 1 bytes @ 0x1
  4709                           
  4710  0021                     ??_DOOR_resetPos:	
  4711                           ; 1 bytes @ 0x1
  4712                           
  4713  0021                     ??_ADC_SelectChannel:	
  4714                           ; 1 bytes @ 0x1
  4715                           
  4716  0021                     ??_ADC_StartConversion:	
  4717                           ; 1 bytes @ 0x1
  4718                           
  4719  0021                     ??_ADC_IsConversionDone:	
  4720                           ; 1 bytes @ 0x1
  4721                           
  4722  0021                     ??_FVR_IsOutputReady:	
  4723                           ; 1 bytes @ 0x1
  4724                           
  4725  0021                     ?_DATAEE_WriteByte:	
  4726                           ; 1 bytes @ 0x1
  4727                           
  4728  0021                     ??_SPI1_Exchange8bit:	
  4729                           ; 1 bytes @ 0x1
  4730                           
  4731  0021                     ??_RF_Init:	
  4732                           ; 1 bytes @ 0x1
  4733                           
  4734  0021                     ?_Timeout_setTimeout:	
  4735                           ; 1 bytes @ 0x1
  4736                           
  4737  0021                     ??_Timeout_hasExpired:	
  4738                           ; 1 bytes @ 0x1
  4739                           
  4740  0021                     ?_TMR1_ReadTimer:	
  4741                           ; 1 bytes @ 0x1
  4742                           
  4743  0021                     ?_ADC_GetConversionResult:	
  4744                           ; 2 bytes @ 0x1
  4745                           
  4746  0021                     ?_limit:	
  4747                           ; 2 bytes @ 0x1
  4748                           
  4749  0021                     ?___lwdiv:	
  4750                           ; 2 bytes @ 0x1
  4751                           
  4752  0021                     ?___ftpack:	
  4753                           ; 2 bytes @ 0x1
  4754                           
  4755  0021                     ?_Timeout_getGlobalCounter:	
  4756                           ; 3 bytes @ 0x1
  4757                           
  4758  0021                     ?___lmul:	
  4759                           ; 4 bytes @ 0x1
  4760                           
  4761  0021                     ?___aldiv:	
  4762                           ; 4 bytes @ 0x1
  4763                           
  4764  0021                     ?___lldiv:	
  4765                           ; 4 bytes @ 0x1
  4766                           
  4767  0021                     I2C2_MasterTRBInsert@ptrb_list:	
  4768                           ; 4 bytes @ 0x1
  4769                           
  4770  0021                     I2C2_MasterWriteTRBBuild@pdata:	
  4771                           ; 1 bytes @ 0x1
  4772                           
  4773  0021                     DATAEE_WriteByte@bData:	
  4774                           ; 1 bytes @ 0x1
  4775                           
  4776  0021                     SPI1_Exchange8bit@data:	
  4777                           ; 1 bytes @ 0x1
  4778                           
  4779  0021                     IOCAF2_SetInterruptHandler@InterruptHandler:	
  4780                           ; 1 bytes @ 0x1
  4781                           
  4782  0021                     TMR1_SetInterruptHandler@InterruptHandler:	
  4783                           ; 2 bytes @ 0x1
  4784                           
  4785  0021                     I2C2_MasterReadTRBBuild@pdata:	
  4786                           ; 2 bytes @ 0x1
  4787                           
  4788  0021                     setSleepTime@timeSec:	
  4789                           ; 2 bytes @ 0x1
  4790                           
  4791  0021                     limit@val:	
  4792                           ; 2 bytes @ 0x1
  4793                           
  4794  0021                     Timeout_setTimeout@val:	
  4795                           ; 2 bytes @ 0x1
  4796                           
  4797  0021                     ___lwdiv@divisor:	
  4798                           ; 2 bytes @ 0x1
  4799                           
  4800  0021                     ___ftpack@arg:	
  4801                           ; 2 bytes @ 0x1
  4802                           
  4803  0021                     ___lmul@multiplier:	
  4804                           ; 3 bytes @ 0x1
  4805                           
  4806  0021                     ___aldiv@divisor:	
  4807                           ; 4 bytes @ 0x1
  4808                           
  4809  0021                     ___lldiv@divisor:	
  4810                           ; 4 bytes @ 0x1
  4811                           
  4812                           
  4813                           ; 4 bytes @ 0x1
  4814  0021                     	ds	1
  4815  0022                     ??_DATAEE_WriteByte:	
  4816  0022                     ??_SPI_WriteRead:	
  4817                           ; 1 bytes @ 0x2
  4818                           
  4819  0022                     I2C2_MasterTRBInsert@pflag:	
  4820                           ; 1 bytes @ 0x2
  4821                           
  4822  0022                     I2C2_MasterWriteTRBBuild@length:	
  4823                           ; 1 bytes @ 0x2
  4824                           
  4825  0022                     ADC_SelectChannel@channel:	
  4826                           ; 1 bytes @ 0x2
  4827                           
  4828  0022                     DATAEE_WriteByte@bAdd:	
  4829                           ; 1 bytes @ 0x2
  4830                           
  4831  0022                     SPI_WriteRead@val:	
  4832                           ; 1 bytes @ 0x2
  4833                           
  4834  0022                     Diag_setTempSensorHealth@health:	
  4835                           ; 1 bytes @ 0x2
  4836                           
  4837  0022                     Diag_getSensorHealth@var:	
  4838                           ; 1 bytes @ 0x2
  4839                           
  4840                           
  4841                           ; 1 bytes @ 0x2
  4842  0022                     	ds	1
  4843  0023                     ??_PIN_MANAGER_Initialize:	
  4844  0023                     ??_TMR1_Initialize:	
  4845                           ; 1 bytes @ 0x3
  4846                           
  4847  0023                     ??_IOCAF2_SetInterruptHandler:	
  4848                           ; 1 bytes @ 0x3
  4849                           
  4850  0023                     ??_TMR1_SetInterruptHandler:	
  4851                           ; 1 bytes @ 0x3
  4852                           
  4853  0023                     ??_I2C2_MasterTRBInsert:	
  4854                           ; 1 bytes @ 0x3
  4855                           
  4856  0023                     ??_setSleepTime:	
  4857                           ; 1 bytes @ 0x3
  4858                           
  4859  0023                     ??_SYSTEM_Initialize:	
  4860                           ; 1 bytes @ 0x3
  4861                           
  4862  0023                     ??_TMR1_ReadTimer:	
  4863                           ; 1 bytes @ 0x3
  4864                           
  4865  0023                     ??_ADC_GetConversionResult:	
  4866                           ; 1 bytes @ 0x3
  4867                           
  4868  0023                     ?_SPI_WriteReadBuffer:	
  4869                           ; 1 bytes @ 0x3
  4870                           
  4871  0023                     ?_SPI_WriteBuffer:	
  4872                           ; 1 bytes @ 0x3
  4873                           
  4874  0023                     ?_RF_WriteRegister:	
  4875                           ; 1 bytes @ 0x3
  4876                           
  4877  0023                     ??_RF_ReadRegister:	
  4878                           ; 1 bytes @ 0x3
  4879                           
  4880  0023                     ??_RF_WriteRead:	
  4881                           ; 1 bytes @ 0x3
  4882                           
  4883  0023                     ??_RF_Write:	
  4884                           ; 1 bytes @ 0x3
  4885                           
  4886  0023                     ??_Timeout_setTimeout:	
  4887                           ; 1 bytes @ 0x3
  4888                           
  4889  0023                     I2C2_MasterReadTRBBuild@length:	
  4890                           ; 1 bytes @ 0x3
  4891                           
  4892  0023                     DATAEE_WriteByte@GIEBitValue:	
  4893                           ; 1 bytes @ 0x3
  4894                           
  4895  0023                     SPI_WriteReadBuffer@bufIn:	
  4896                           ; 1 bytes @ 0x3
  4897                           
  4898  0023                     RF_WriteRegister@val:	
  4899                           ; 1 bytes @ 0x3
  4900                           
  4901  0023                     RF_Write@val:	
  4902                           ; 1 bytes @ 0x3
  4903                           
  4904  0023                     I2C2_MasterWriteTRBBuild@address:	
  4905                           ; 1 bytes @ 0x3
  4906                           
  4907  0023                     limit@min:	
  4908                           ; 2 bytes @ 0x3
  4909                           
  4910  0023                     SPI_WriteBuffer@bufOut:	
  4911                           ; 2 bytes @ 0x3
  4912                           
  4913  0023                     ___lwdiv@dividend:	
  4914                           ; 2 bytes @ 0x3
  4915                           
  4916                           
  4917                           ; 2 bytes @ 0x3
  4918  0023                     	ds	1
  4919  0024                     ?_Storage_save:	
  4920  0024                     ??_RF_WriteRegister:	
  4921                           ; 1 bytes @ 0x4
  4922                           
  4923  0024                     I2C2_MasterTRBInsert@count:	
  4924                           ; 1 bytes @ 0x4
  4925                           
  4926  0024                     SPI_WriteReadBuffer@bufSize:	
  4927                           ; 1 bytes @ 0x4
  4928                           
  4929  0024                     RF_WriteRegister@reg:	
  4930                           ; 1 bytes @ 0x4
  4931                           
  4932  0024                     RF_ReadRegister@reg:	
  4933                           ; 1 bytes @ 0x4
  4934                           
  4935  0024                     RF_WriteRead@val:	
  4936                           ; 1 bytes @ 0x4
  4937                           
  4938  0024                     Storage_save@closeAngle:	
  4939                           ; 1 bytes @ 0x4
  4940                           
  4941  0024                     ___ftpack@exp:	
  4942                           ; 1 bytes @ 0x4
  4943                           
  4944  0024                     I2C2_MasterReadTRBBuild@address:	
  4945                           ; 1 bytes @ 0x4
  4946                           
  4947                           
  4948                           ; 2 bytes @ 0x4
  4949  0024                     	ds	1
  4950  0025                     ??_I2C2_MasterWriteTRBBuild:	
  4951  0025                     ??_Timeout_getGlobalCounter:	
  4952                           ; 1 bytes @ 0x5
  4953                           
  4954  0025                     ??_Wireless_isDataTransmitSuccessful:	
  4955                           ; 1 bytes @ 0x5
  4956                           
  4957  0025                     ??_Storage_save:	
  4958                           ; 1 bytes @ 0x5
  4959                           
  4960  0025                     ??_SPI_WriteReadBuffer:	
  4961                           ; 1 bytes @ 0x5
  4962                           
  4963  0025                     ??_RF_GetStatus:	
  4964                           ; 1 bytes @ 0x5
  4965                           
  4966  0025                     ??_RF_ResetStatusIRQ:	
  4967                           ; 1 bytes @ 0x5
  4968                           
  4969  0025                     ??___lwdiv:	
  4970                           ; 1 bytes @ 0x5
  4971                           
  4972  0025                     SPI_WriteBuffer@bufSize:	
  4973                           ; 1 bytes @ 0x5
  4974                           
  4975  0025                     RF_ReadRegister@val:	
  4976                           ; 1 bytes @ 0x5
  4977                           
  4978  0025                     ___ftpack@sign:	
  4979                           ; 1 bytes @ 0x5
  4980                           
  4981  0025                     limit@max:	
  4982                           ; 1 bytes @ 0x5
  4983                           
  4984  0025                     ___lmul@multiplicand:	
  4985                           ; 2 bytes @ 0x5
  4986                           
  4987  0025                     ___aldiv@dividend:	
  4988                           ; 4 bytes @ 0x5
  4989                           
  4990  0025                     ___lldiv@dividend:	
  4991                           ; 4 bytes @ 0x5
  4992                           
  4993                           
  4994                           ; 4 bytes @ 0x5
  4995  0025                     	ds	1
  4996  0026                     ??_I2C2_MasterReadTRBBuild:	
  4997  0026                     ??___ftpack:	
  4998                           ; 1 bytes @ 0x6
  4999                           
  5000  0026                     ??_SPI_WriteBuffer:	
  5001                           ; 1 bytes @ 0x6
  5002                           
  5003  0026                     ??_RF_DataIsReady:	
  5004                           ; 1 bytes @ 0x6
  5005                           
  5006  0026                     RF_ResetStatusIRQ@flags:	
  5007                           ; 1 bytes @ 0x6
  5008                           
  5009  0026                     Wireless_isDataTransmitSuccessful@status:	
  5010                           ; 1 bytes @ 0x6
  5011                           
  5012  0026                     Storage_save@openAngle:	
  5013                           ; 1 bytes @ 0x6
  5014                           
  5015  0026                     ___lwdiv@counter:	
  5016                           ; 1 bytes @ 0x6
  5017                           
  5018                           
  5019                           ; 1 bytes @ 0x6
  5020  0026                     	ds	1
  5021  0027                     ?_DOOR_update:	
  5022  0027                     ??_limit:	
  5023                           ; 1 bytes @ 0x7
  5024                           
  5025  0027                     I2C2_MasterWriteTRBBuild@ptrb:	
  5026                           ; 1 bytes @ 0x7
  5027                           
  5028  0027                     RF_DataIsReady@channel:	
  5029                           ; 1 bytes @ 0x7
  5030                           
  5031  0027                     DOOR_update@closedAngle:	
  5032                           ; 1 bytes @ 0x7
  5033                           
  5034  0027                     ___lwdiv@quotient:	
  5035                           ; 1 bytes @ 0x7
  5036                           
  5037                           
  5038                           ; 2 bytes @ 0x7
  5039  0027                     	ds	1
  5040  0028                     ??_DOOR_update:	
  5041  0028                     ?_I2C2_MasterWrite:	
  5042                           ; 1 bytes @ 0x8
  5043                           
  5044  0028                     I2C2_MasterWrite@length:	
  5045                           ; 1 bytes @ 0x8
  5046                           
  5047  0028                     I2C2_MasterReadTRBBuild@ptrb:	
  5048                           ; 1 bytes @ 0x8
  5049                           
  5050  0028                     SPI_WriteReadBuffer@bufOut:	
  5051                           ; 1 bytes @ 0x8
  5052                           
  5053  0028                     SPI_WriteBuffer@i:	
  5054                           ; 1 bytes @ 0x8
  5055                           
  5056  0028                     RF_DataIsReady@status:	
  5057                           ; 1 bytes @ 0x8
  5058                           
  5059  0028                     TMR1_ReadTimer@readVal:	
  5060                           ; 1 bytes @ 0x8
  5061                           
  5062                           
  5063                           ; 2 bytes @ 0x8
  5064  0028                     	ds	1
  5065  0029                     ?_I2C2_MasterRead:	
  5066  0029                     ?_RF_WriteRegisterData:	
  5067                           ; 1 bytes @ 0x9
  5068                           
  5069  0029                     ??___lmul:	
  5070                           ; 1 bytes @ 0x9
  5071                           
  5072  0029                     ??___aldiv:	
  5073                           ; 1 bytes @ 0x9
  5074                           
  5075  0029                     ??___lldiv:	
  5076                           ; 1 bytes @ 0x9
  5077                           
  5078  0029                     ?___altoft:	
  5079                           ; 1 bytes @ 0x9
  5080                           
  5081  0029                     ?___awtoft:	
  5082                           ; 3 bytes @ 0x9
  5083                           
  5084  0029                     ?___lwtoft:	
  5085                           ; 3 bytes @ 0x9
  5086                           
  5087  0029                     SPI_WriteReadBuffer@i:	
  5088                           ; 3 bytes @ 0x9
  5089                           
  5090  0029                     DOOR_update@openAngle:	
  5091                           ; 1 bytes @ 0x9
  5092                           
  5093  0029                     I2C2_MasterWrite@address:	
  5094                           ; 1 bytes @ 0x9
  5095                           
  5096  0029                     I2C2_MasterRead@pdata:	
  5097                           ; 2 bytes @ 0x9
  5098                           
  5099  0029                     RF_WriteRegisterData@buf:	
  5100                           ; 2 bytes @ 0x9
  5101                           
  5102  0029                     ___awtoft@c:	
  5103                           ; 2 bytes @ 0x9
  5104                           
  5105  0029                     ___lwtoft@c:	
  5106                           ; 2 bytes @ 0x9
  5107                           
  5108  0029                     ___lmul@product:	
  5109                           ; 2 bytes @ 0x9
  5110                           
  5111  0029                     ___altoft@c:	
  5112                           ; 4 bytes @ 0x9
  5113                           
  5114                           
  5115                           ; 4 bytes @ 0x9
  5116  0029                     	ds	1
  5117  002A                     ?_RF_ReadRegisterData:	
  5118  002A                     TMR1_ReadTimer@readValHigh:	
  5119                           ; 1 bytes @ 0xA
  5120                           
  5121  002A                     RF_ReadRegisterData@buf:	
  5122                           ; 1 bytes @ 0xA
  5123                           
  5124  002A                     ___aldiv@counter:	
  5125                           ; 1 bytes @ 0xA
  5126                           
  5127  002A                     ___lldiv@quotient:	
  5128                           ; 1 bytes @ 0xA
  5129                           
  5130                           
  5131                           ; 4 bytes @ 0xA
  5132  002A                     	ds	1
  5133  002B                     TMR1_ReadTimer@readValLow:	
  5134  002B                     I2C2_MasterWrite@pflag:	
  5135                           ; 1 bytes @ 0xB
  5136                           
  5137  002B                     I2C2_MasterRead@length:	
  5138                           ; 1 bytes @ 0xB
  5139                           
  5140  002B                     RF_ReadRegisterData@bufSize:	
  5141                           ; 1 bytes @ 0xB
  5142                           
  5143  002B                     RF_WriteRegisterData@bufSize:	
  5144                           ; 1 bytes @ 0xB
  5145                           
  5146  002B                     ___aldiv@sign:	
  5147                           ; 1 bytes @ 0xB
  5148                           
  5149                           
  5150                           ; 1 bytes @ 0xB
  5151  002B                     	ds	1
  5152  002C                     ??_I2C2_MasterWrite:	
  5153  002C                     ??_RF_ReadRegisterData:	
  5154                           ; 1 bytes @ 0xC
  5155                           
  5156  002C                     ??_RF_WriteRegisterData:	
  5157                           ; 1 bytes @ 0xC
  5158                           
  5159  002C                     ??___awtoft:	
  5160                           ; 1 bytes @ 0xC
  5161                           
  5162  002C                     ??___lwtoft:	
  5163                           ; 1 bytes @ 0xC
  5164                           
  5165  002C                     I2C2_MasterRead@address:	
  5166                           ; 1 bytes @ 0xC
  5167                           
  5168  002C                     ___aldiv@quotient:	
  5169                           ; 2 bytes @ 0xC
  5170                           
  5171                           
  5172                           ; 4 bytes @ 0xC
  5173  002C                     	ds	1
  5174  002D                     ??_Timeout_updateCurrentTime:	
  5175  002D                     ??___altoft:	
  5176                           ; 1 bytes @ 0xD
  5177                           
  5178  002D                     RF_WriteRegisterData@reg:	
  5179                           ; 1 bytes @ 0xD
  5180                           
  5181                           
  5182                           ; 1 bytes @ 0xD
  5183  002D                     	ds	1
  5184  002E                     ??_Wireless_init:	
  5185  002E                     ?_RF_TxPayload:	
  5186                           ; 1 bytes @ 0xE
  5187                           
  5188  002E                     I2C2_MasterWrite@pdata:	
  5189                           ; 1 bytes @ 0xE
  5190                           
  5191  002E                     I2C2_MasterRead@pflag:	
  5192                           ; 1 bytes @ 0xE
  5193                           
  5194  002E                     RF_ReadRegisterData@reg:	
  5195                           ; 1 bytes @ 0xE
  5196                           
  5197  002E                     RF_TxPayload@payloadSize:	
  5198                           ; 1 bytes @ 0xE
  5199                           
  5200  002E                     ___awtoft@sign:	
  5201                           ; 1 bytes @ 0xE
  5202                           
  5203  002E                     ___lldiv@counter:	
  5204                           ; 1 bytes @ 0xE
  5205                           
  5206                           
  5207                           ; 1 bytes @ 0xE
  5208  002E                     	ds	1
  5209  002F                     ??_Wireless_wake:	
  5210  002F                     ??_Wireless_sleep:	
  5211                           ; 1 bytes @ 0xF
  5212                           
  5213  002F                     ?_I2C_ByteWrite:	
  5214                           ; 1 bytes @ 0xF
  5215                           
  5216  002F                     ??_Wireless_changeTransmitPower:	
  5217                           ; 1 bytes @ 0xF
  5218                           
  5219  002F                     ??_I2C2_MasterRead:	
  5220                           ; 1 bytes @ 0xF
  5221                           
  5222  002F                     ??_RF_TxPayload:	
  5223                           ; 1 bytes @ 0xF
  5224                           
  5225  002F                     ?_RF_RxPayload:	
  5226                           ; 1 bytes @ 0xF
  5227                           
  5228  002F                     RF_RxPayload@payloadSize:	
  5229                           ; 1 bytes @ 0xF
  5230                           
  5231  002F                     I2C_ByteWrite@pBuffer:	
  5232                           ; 1 bytes @ 0xF
  5233                           
  5234  002F                     ___altoft@exp:	
  5235                           ; 1 bytes @ 0xF
  5236                           
  5237                           
  5238                           ; 1 bytes @ 0xF
  5239  002F                     	ds	1
  5240  0030                     ??_RF_RxPayload:	
  5241  0030                     RF_TxPayload@payload:	
  5242                           ; 1 bytes @ 0x10
  5243                           
  5244  0030                     Wireless_changeTransmitPower@power:	
  5245                           ; 1 bytes @ 0x10
  5246                           
  5247  0030                     Wireless_sleep@reg:	
  5248                           ; 1 bytes @ 0x10
  5249                           
  5250  0030                     Wireless_wake@reg:	
  5251                           ; 1 bytes @ 0x10
  5252                           
  5253  0030                     I2C_ByteWrite@WriteAddr:	
  5254                           ; 1 bytes @ 0x10
  5255                           
  5256  0030                     ___altoft@sign:	
  5257                           ; 1 bytes @ 0x10
  5258                           
  5259                           
  5260                           ; 1 bytes @ 0x10
  5261  0030                     	ds	1
  5262  0031                     ??_I2C_ByteWrite:	
  5263  0031                     ?_I2C_BufferRead:	
  5264                           ; 1 bytes @ 0x11
  5265                           
  5266  0031                     ?_Wireless_sendData:	
  5267                           ; 1 bytes @ 0x11
  5268                           
  5269  0031                     ?___ftdiv:	
  5270                           ; 1 bytes @ 0x11
  5271                           
  5272  0031                     Wireless_changeTransmitPower@val:	
  5273                           ; 3 bytes @ 0x11
  5274                           
  5275  0031                     Wireless_sendData@length:	
  5276                           ; 1 bytes @ 0x11
  5277                           
  5278  0031                     I2C_BufferRead@pBuffer:	
  5279                           ; 1 bytes @ 0x11
  5280                           
  5281  0031                     ___ftdiv@f2:	
  5282                           ; 2 bytes @ 0x11
  5283                           
  5284  0031                     Timeout_updateCurrentTime@var:	
  5285                           ; 3 bytes @ 0x11
  5286                           
  5287                           
  5288                           ; 4 bytes @ 0x11
  5289  0031                     	ds	1
  5290  0032                     ??_Wireless_sendData:	
  5291  0032                     RF_RxPayload@payload:	
  5292                           ; 1 bytes @ 0x12
  5293                           
  5294                           
  5295                           ; 1 bytes @ 0x12
  5296  0032                     	ds	1
  5297  0033                     ??_Wireless_checkDataReceived:	
  5298  0033                     Wireless_sendData@status:	
  5299                           ; 1 bytes @ 0x13
  5300                           
  5301  0033                     I2C_BufferRead@ReadAddr:	
  5302                           ; 1 bytes @ 0x13
  5303                           
  5304                           
  5305                           ; 1 bytes @ 0x13
  5306  0033                     	ds	1
  5307  0034                     Wireless_sendData@payload:	
  5308  0034                     I2C_BufferRead@NumByteToRead:	
  5309                           ; 1 bytes @ 0x14
  5310                           
  5311  0034                     ___ftdiv@f1:	
  5312                           ; 2 bytes @ 0x14
  5313                           
  5314                           
  5315                           ; 3 bytes @ 0x14
  5316  0034                     	ds	1
  5317  0035                     ??_Wireless_determineTransmitPower:	
  5318  0035                     I2C_ByteWrite@slaveAddr:	
  5319                           ; 1 bytes @ 0x15
  5320                           
  5321                           
  5322                           ; 1 bytes @ 0x15
  5323  0035                     	ds	1
  5324  0036                     ??_I2C_BufferRead:	
  5325  0036                     I2C_ByteWrite@data:	
  5326                           ; 1 bytes @ 0x16
  5327                           
  5328                           
  5329                           ; 2 bytes @ 0x16
  5330  0036                     	ds	1
  5331  0037                     ??___ftdiv:	
  5332  0037                     Wireless_checkDataReceived@data:	
  5333                           ; 1 bytes @ 0x17
  5334                           
  5335                           
  5336                           ; 4 bytes @ 0x17
  5337  0037                     	ds	1
  5338  0038                     Wireless_determineTransmitPower@initialise:	
  5339  0038                     I2C_ByteWrite@status:	
  5340                           ; 1 bytes @ 0x18
  5341                           
  5342                           
  5343                           ; 1 bytes @ 0x18
  5344  0038                     	ds	1
  5345  0039                     Wireless_determineTransmitPower@testPayload:	
  5346                           
  5347                           ; 1 bytes @ 0x19
  5348  0039                     	ds	1
  5349  003A                     Wireless_determineTransmitPower@latestResult:	
  5350  003A                     I2C_BufferRead@slaveAddr:	
  5351                           ; 1 bytes @ 0x1A
  5352                           
  5353                           
  5354                           ; 1 bytes @ 0x1A
  5355  003A                     	ds	1
  5356  003B                     Wireless_checkDataReceived@channel:	
  5357  003B                     I2C_BufferRead@status:	
  5358                           ; 1 bytes @ 0x1B
  5359                           
  5360  003B                     ___ftdiv@cntr:	
  5361                           ; 1 bytes @ 0x1B
  5362                           
  5363                           
  5364                           ; 1 bytes @ 0x1B
  5365  003B                     	ds	1
  5366  003C                     ??_BMP_init:	
  5367  003C                     ?_HMC5883L_I2C_BufferRead:	
  5368                           ; 1 bytes @ 0x1C
  5369                           
  5370  003C                     HMC5883L_I2C_BufferRead@pBuffer:	
  5371                           ; 1 bytes @ 0x1C
  5372                           
  5373  003C                     ___ftdiv@f3:	
  5374                           ; 2 bytes @ 0x1C
  5375                           
  5376                           
  5377                           ; 3 bytes @ 0x1C
  5378  003C                     	ds	2
  5379  003E                     HMC5883L_I2C_BufferRead@ReadAddr:	
  5380                           
  5381                           ; 1 bytes @ 0x1E
  5382  003E                     	ds	1
  5383  003F                     BMP_init@t:	
  5384  003F                     ___ftdiv@exp:	
  5385                           ; 1 bytes @ 0x1F
  5386                           
  5387  003F                     HMC5883L_I2C_BufferRead@NumByteToRead:	
  5388                           ; 1 bytes @ 0x1F
  5389                           
  5390                           
  5391                           ; 2 bytes @ 0x1F
  5392  003F                     	ds	1
  5393  0040                     ___ftdiv@sign:	
  5394                           
  5395                           ; 1 bytes @ 0x20
  5396  0040                     	ds	1
  5397  0041                     ??_HMC5883L_I2C_BufferRead:	
  5398  0041                     ?_Sensor_getSupplyVoltage:	
  5399                           ; 1 bytes @ 0x21
  5400                           
  5401  0041                     ?___ftneg:	
  5402                           ; 3 bytes @ 0x21
  5403                           
  5404  0041                     ___ftneg@f1:	
  5405                           ; 3 bytes @ 0x21
  5406                           
  5407                           
  5408                           ; 3 bytes @ 0x21
  5409  0041                     	ds	1
  5410  0042                     HMC5883L_I2C_BufferRead@slaveAddr:	
  5411                           
  5412                           ; 1 bytes @ 0x22
  5413  0042                     	ds	1
  5414  0043                     ?_HMC5883L_ReadBits:	
  5415  0043                     HMC5883L_ReadBits@regAddr:	
  5416                           ; 1 bytes @ 0x23
  5417                           
  5418                           
  5419                           ; 1 bytes @ 0x23
  5420  0043                     	ds	1
  5421  0044                     ??_Sensor_getSupplyVoltage:	
  5422  0044                     ??___ftneg:	
  5423                           ; 1 bytes @ 0x24
  5424                           
  5425  0044                     HMC5883L_ReadBits@bitStart:	
  5426                           ; 1 bytes @ 0x24
  5427                           
  5428  0044                     Sensor_getSupplyVoltage@voltage:	
  5429                           ; 1 bytes @ 0x24
  5430                           
  5431                           
  5432                           ; 3 bytes @ 0x24
  5433  0044                     	ds	1
  5434  0045                     HMC5883L_ReadBits@length:	
  5435                           
  5436                           ; 1 bytes @ 0x25
  5437  0045                     	ds	1
  5438  0046                     HMC5883L_ReadBits@data:	
  5439                           
  5440                           ; 1 bytes @ 0x26
  5441  0046                     	ds	1
  5442  0047                     ??_HMC5883L_ReadBits:	
  5443  0047                     Sensor_getSupplyVoltage@res:	
  5444                           ; 1 bytes @ 0x27
  5445                           
  5446                           
  5447                           ; 2 bytes @ 0x27
  5448  0047                     	ds	2
  5449  0049                     ?___ftadd:	
  5450  0049                     ___ftadd@f1:	
  5451                           ; 3 bytes @ 0x29
  5452                           
  5453                           
  5454                           ; 3 bytes @ 0x29
  5455  0049                     	ds	1
  5456  004A                     HMC5883L_ReadBits@slaveAddr:	
  5457                           
  5458                           ; 1 bytes @ 0x2A
  5459  004A                     	ds	1
  5460  004B                     HMC5883L_ReadBits@mask:	
  5461                           
  5462                           ; 1 bytes @ 0x2B
  5463  004B                     	ds	1
  5464  004C                     HMC5883L_ReadBits@tmp:	
  5465  004C                     ___ftadd@f2:	
  5466                           ; 1 bytes @ 0x2C
  5467                           
  5468                           
  5469                           ; 3 bytes @ 0x2C
  5470  004C                     	ds	3
  5471  004F                     ??___ftadd:	
  5472                           
  5473                           ; 1 bytes @ 0x2F
  5474  004F                     	ds	4
  5475  0053                     ___ftadd@sign:	
  5476                           
  5477                           ; 1 bytes @ 0x33
  5478  0053                     	ds	1
  5479  0054                     ___ftadd@exp2:	
  5480                           
  5481                           ; 1 bytes @ 0x34
  5482  0054                     	ds	1
  5483  0055                     ___ftadd@exp1:	
  5484                           
  5485                           ; 1 bytes @ 0x35
  5486  0055                     	ds	1
  5487  0056                     ?___ftmul:	
  5488  0056                     ___ftmul@f1:	
  5489                           ; 3 bytes @ 0x36
  5490                           
  5491                           
  5492                           ; 3 bytes @ 0x36
  5493  0056                     	ds	3
  5494  0059                     ___ftmul@f2:	
  5495                           
  5496                           ; 3 bytes @ 0x39
  5497  0059                     	ds	3
  5498  005C                     ??___ftmul:	
  5499                           
  5500                           ; 1 bytes @ 0x3C
  5501  005C                     	ds	4
  5502  0060                     ___ftmul@exp:	
  5503                           
  5504                           ; 1 bytes @ 0x40
  5505  0060                     	ds	1
  5506  0061                     ___ftmul@f3_as_product:	
  5507                           
  5508                           ; 3 bytes @ 0x41
  5509  0061                     	ds	3
  5510  0064                     ___ftmul@cntr:	
  5511                           
  5512                           ; 1 bytes @ 0x44
  5513  0064                     	ds	1
  5514  0065                     ___ftmul@sign:	
  5515                           
  5516                           ; 1 bytes @ 0x45
  5517  0065                     	ds	1
  5518  0066                     ?___fttol:	
  5519  0066                     ___fttol@f1:	
  5520                           ; 4 bytes @ 0x46
  5521                           
  5522                           
  5523                           ; 3 bytes @ 0x46
  5524  0066                     	ds	4
  5525  006A                     ??___fttol:	
  5526                           
  5527                           ; 1 bytes @ 0x4A
  5528  006A                     	ds	4
  5529  006E                     ??_Wireless_packageData:	
  5530                           
  5531                           ; 1 bytes @ 0x4E
  5532  006E                     	ds	1
  5533                           
  5534                           	psect	maintext
  5535  0345                     __pmaintext:	
  5536 ;;
  5537 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
  5538 ;;
  5539 ;; *************** function _main *****************
  5540 ;; Defined at:
  5541 ;;		line 58 in file "main.c"
  5542 ;; Parameters:    Size  Location     Type
  5543 ;;		None
  5544 ;; Auto vars:     Size  Location     Type
  5545 ;;  doorOpenTime    4    7[BANK3 ] unsigned long 
  5546 ;;  doorClosedUp    4    1[BANK3 ] unsigned long 
  5547 ;;  dur             2    5[BANK3 ] unsigned int 
  5548 ;;  doorStatus      1   11[BANK3 ] enum E3332
  5549 ;;  prevDoorStat    1    0[BANK3 ] enum E3332
  5550 ;; Return value:  Size  Location     Type
  5551 ;;                  1    wreg      void 
  5552 ;; Registers used:
  5553 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5554 ;; Tracked objects:
  5555 ;;		On entry : B1F/0
  5556 ;;		On exit  : 0/0
  5557 ;;		Unchanged: 0/0
  5558 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5559 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5560 ;;      Locals:         0       0       0       0      12       0       0       0       0       0       0       0       
      +0       0
  5561 ;;      Temps:          0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
  5562 ;;      Totals:         0       0       2       0      12       0       0       0       0       0       0       0       
      +0       0
  5563 ;;Total ram usage:       14 bytes
  5564 ;; Hardware stack levels required when called:   12
  5565 ;; This function calls:
  5566 ;;		_BMP_init
  5567 ;;		_BMP_readTemperature
  5568 ;;		_DOOR_init
  5569 ;;		_DOOR_run
  5570 ;;		_SYSTEM_Initialize
  5571 ;;		_Sensor_peripheralSleep
  5572 ;;		_Timeout_getGlobalCounter
  5573 ;;		_Timeout_updateCurrentTime
  5574 ;;		_Wireless_determineTransmitPower
  5575 ;;		_Wireless_init
  5576 ;;		_Wireless_packageData
  5577 ;;		_Wireless_sleep
  5578 ;;		_Wireless_wake
  5579 ;;		___lldiv
  5580 ;;		___lwdiv
  5581 ;;		_setSleepTime
  5582 ;; This function is called by:
  5583 ;;		Startup code after reset
  5584 ;; This function uses a non-reentrant model
  5585 ;;
  5586                           
  5587                           
  5588                           ;psect for function _main
  5589  0345                     _main:	
  5590                           
  5591                           ;main.c: 60: DOOR doorStatus=DOOR_CLOSED,prevDoorStatus=DOOR_CLOSED;
  5592                           
  5593                           ;incstack = 0
  5594                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  5595  0345  0023               	movlb	3	; select bank3
  5596  0346  01DB               	clrf	main@doorStatus^(0+384)
  5597  0347  01D0               	clrf	main@prevDoorStatus^(0+384)
  5598                           
  5599                           ;main.c: 61: unsigned long doorClosedUpdateCounter=0;
  5600  0348  3000               	movlw	0
  5601  0349  00D4               	movwf	(main@doorClosedUpdateCounter+3)^(0+384)
  5602  034A  3000               	movlw	0
  5603  034B  00D3               	movwf	(main@doorClosedUpdateCounter+2)^(0+384)
  5604  034C  3000               	movlw	0
  5605  034D  00D2               	movwf	(main@doorClosedUpdateCounter+1)^(0+384)
  5606  034E  3000               	movlw	0
  5607  034F  00D1               	movwf	main@doorClosedUpdateCounter^(0+384)
  5608                           
  5609                           ;main.c: 62: unsigned long doorOpenTime=0;
  5610  0350  3000               	movlw	0
  5611  0351  00DA               	movwf	(main@doorOpenTime+3)^(0+384)
  5612  0352  3000               	movlw	0
  5613  0353  00D9               	movwf	(main@doorOpenTime+2)^(0+384)
  5614  0354  3000               	movlw	0
  5615  0355  00D8               	movwf	(main@doorOpenTime+1)^(0+384)
  5616  0356  3000               	movlw	0
  5617  0357  00D7               	movwf	main@doorOpenTime^(0+384)
  5618                           
  5619                           ;main.c: 63: unsigned int dur=0;
  5620  0358  01D5               	clrf	main@dur^(0+384)
  5621  0359  01D6               	clrf	(main@dur+1)^(0+384)
  5622                           
  5623                           ;main.c: 66: SYSTEM_Initialize();
  5624  035A  3194  24FF  3183   	fcall	_SYSTEM_Initialize
  5625                           
  5626                           ;main.c: 72: (INTCONbits.GIE = 1);
  5627  035D  178B               	bsf	11,7	;volatile
  5628                           
  5629                           ;main.c: 75: (INTCONbits.PEIE = 1);
  5630  035E  170B               	bsf	11,6	;volatile
  5631                           
  5632                           ;main.c: 82: do { WPUCbits.WPUC5 = 1; } while(0);
  5633  035F  0024               	movlb	4	; select bank4
  5634  0360  168E               	bsf	14,5	;volatile
  5635                           
  5636                           ;main.c: 83: _delay((unsigned long)((1000)*(8000000/4000.0)));
  5637  0361  300B               	movlw	11
  5638  0362  0021               	movlb	1	; select bank1
  5639  0363  00C9               	movwf	(??_main^(0+128)+1)
  5640  0364  3026               	movlw	38
  5641  0365  00C8               	movwf	??_main^(0+128)
  5642  0366  305D               	movlw	93
  5643  0367                     u7167:	
  5644  0367  0B89               	decfsz	9,f
  5645  0368  2B67               	goto	u7167
  5646  0369  0BC8               	decfsz	??_main^(0+128),f
  5647  036A  2B67               	goto	u7167
  5648  036B  0BC9               	decfsz	(??_main^(0+128)+1),f
  5649  036C  2B67               	goto	u7167
  5650  036D  3200               	nop2
  5651                           
  5652                           ;main.c: 84: Sensor_peripheralSleep();
  5653  036E  3192  22C4  3183   	fcall	_Sensor_peripheralSleep
  5654                           
  5655                           ;main.c: 85: Wireless_init();
  5656  0371  3187  2783  3183   	fcall	_Wireless_init
  5657                           
  5658                           ;main.c: 86: BMP_init();
  5659  0374  318B  2313  3183   	fcall	_BMP_init
  5660                           
  5661                           ;main.c: 91: setSleepTime(10000/1000);
  5662  0377  300A               	movlw	10
  5663  0378  0020               	movlb	0	; select bank0
  5664  0379  00A1               	movwf	setSleepTime@timeSec
  5665  037A  3000               	movlw	0
  5666  037B  00A2               	movwf	setSleepTime@timeSec+1
  5667  037C  3192  22CE  3183   	fcall	_setSleepTime
  5668                           
  5669                           ;main.c: 93: setSleepTime(10000/1000);
  5670  037F  300A               	movlw	10
  5671  0380  0020               	movlb	0	; select bank0
  5672  0381  00A1               	movwf	setSleepTime@timeSec
  5673  0382  3000               	movlw	0
  5674  0383  00A2               	movwf	setSleepTime@timeSec+1
  5675  0384  3192  22CE  3183   	fcall	_setSleepTime
  5676                           
  5677                           ;main.c: 94: DOOR_init();
  5678  0387  3187  27FE  3183   	fcall	_DOOR_init
  5679                           
  5680                           ;main.c: 95: do { LATCbits.LATC6 = 1; } while(0);
  5681  038A  0022               	movlb	2	; select bank2
  5682  038B  170E               	bsf	14,6	;volatile
  5683                           
  5684                           ;main.c: 96: _delay((unsigned long)((500)*(8000000/4000.0)));
  5685  038C  3006               	movlw	6
  5686  038D  0021               	movlb	1	; select bank1
  5687  038E  00C9               	movwf	(??_main^(0+128)+1)
  5688  038F  3013               	movlw	19
  5689  0390  00C8               	movwf	??_main^(0+128)
  5690  0391  30AD               	movlw	173
  5691  0392                     u7177:	
  5692  0392  0B89               	decfsz	9,f
  5693  0393  2B92               	goto	u7177
  5694  0394  0BC8               	decfsz	??_main^(0+128),f
  5695  0395  2B92               	goto	u7177
  5696  0396  0BC9               	decfsz	(??_main^(0+128)+1),f
  5697  0397  2B92               	goto	u7177
  5698  0398  3200               	nop2
  5699                           
  5700                           ;main.c: 97: do { LATCbits.LATC6 = 0; } while(0);
  5701  0399  0022               	movlb	2	; select bank2
  5702  039A  130E               	bcf	14,6	;volatile
  5703                           
  5704                           ;main.c: 98: Wireless_wake();
  5705  039B  3195  25FE  3183   	fcall	_Wireless_wake
  5706                           
  5707                           ;main.c: 99: Wireless_determineTransmitPower(1);
  5708  039E  3001               	movlw	1
  5709  039F  318D  2522  3183   	fcall	_Wireless_determineTransmitPower
  5710                           
  5711                           ;main.c: 100: Wireless_packageData(doorStatus,doorOpenTime/1000,BMP_readTemperature());
  5712  03A2  3000               	movlw	0
  5713  03A3  0020               	movlb	0	; select bank0
  5714  03A4  00A4               	movwf	___lldiv@divisor+3
  5715  03A5  3000               	movlw	0
  5716  03A6  00A3               	movwf	___lldiv@divisor+2
  5717  03A7  3003               	movlw	3
  5718  03A8  00A2               	movwf	___lldiv@divisor+1
  5719  03A9  30E8               	movlw	232
  5720  03AA  00A1               	movwf	___lldiv@divisor
  5721  03AB  0023               	movlb	3	; select bank3
  5722  03AC  085A               	movf	(main@doorOpenTime+3)^(0+384),w
  5723  03AD  0020               	movlb	0	; select bank0
  5724  03AE  00A8               	movwf	___lldiv@dividend+3
  5725  03AF  0023               	movlb	3	; select bank3
  5726  03B0  0859               	movf	(main@doorOpenTime+2)^(0+384),w
  5727  03B1  0020               	movlb	0	; select bank0
  5728  03B2  00A7               	movwf	___lldiv@dividend+2
  5729  03B3  0023               	movlb	3	; select bank3
  5730  03B4  0858               	movf	(main@doorOpenTime+1)^(0+384),w
  5731  03B5  0020               	movlb	0	; select bank0
  5732  03B6  00A6               	movwf	___lldiv@dividend+1
  5733  03B7  0023               	movlb	3	; select bank3
  5734  03B8  0857               	movf	main@doorOpenTime^(0+384),w
  5735  03B9  0020               	movlb	0	; select bank0
  5736  03BA  00A5               	movwf	___lldiv@dividend
  5737  03BB  3189  214A  3183   	fcall	___lldiv
  5738  03BE  0020               	movlb	0	; select bank0
  5739  03BF  0821               	movf	?___lldiv,w
  5740  03C0  0021               	movlb	1	; select bank1
  5741  03C1  00C8               	movwf	??_main^(0+128)
  5742  03C2  0848               	movf	??_main^(0+128),w
  5743  03C3  00BA               	movwf	Wireless_packageData@openTime^(0+128)
  5744  03C4  3180  2077  3183   	fcall	_BMP_readTemperature
  5745  03C7  0021               	movlb	1	; select bank1
  5746  03C8  0826               	movf	?_BMP_readTemperature^(0+128),w
  5747  03C9  00BB               	movwf	Wireless_packageData@tempC^(0+128)
  5748  03CA  0827               	movf	(?_BMP_readTemperature+1)^(0+128),w
  5749  03CB  00BC               	movwf	(Wireless_packageData@tempC+1)^(0+128)
  5750  03CC  0828               	movf	(?_BMP_readTemperature+2)^(0+128),w
  5751  03CD  00BD               	movwf	(Wireless_packageData@tempC+2)^(0+128)
  5752  03CE  0023               	movlb	3	; select bank3
  5753  03CF  085B               	movf	main@doorStatus^(0+384),w
  5754  03D0  318F  2724  3183   	fcall	_Wireless_packageData
  5755                           
  5756                           ;main.c: 101: Wireless_sleep();
  5757  03D3  3194  247F  3183   	fcall	_Wireless_sleep
  5758  03D6                     l6743:	
  5759                           ;main.c: 103: while (1)
  5760                           
  5761                           
  5762                           ;main.c: 104: {
  5763                           ;main.c: 105: Timeout_updateCurrentTime();
  5764  03D6  318A  2250  3183   	fcall	_Timeout_updateCurrentTime
  5765                           
  5766                           ;main.c: 106: if(PORTCbits.RC5==0)
  5767  03D9  0020               	movlb	0	; select bank0
  5768  03DA  1A8E               	btfsc	14,5	;volatile
  5769  03DB  2C33               	goto	l6759
  5770                           
  5771                           ;main.c: 107: {
  5772                           ;main.c: 109: do { LATCbits.LATC6 = 1; } while(0);
  5773  03DC  0022               	movlb	2	; select bank2
  5774  03DD  170E               	bsf	14,6	;volatile
  5775                           
  5776                           ;main.c: 110: _delay((unsigned long)((500)*(8000000/4000.0)));
  5777  03DE  3006               	movlw	6
  5778  03DF  0021               	movlb	1	; select bank1
  5779  03E0  00C9               	movwf	(??_main^(0+128)+1)
  5780  03E1  3013               	movlw	19
  5781  03E2  00C8               	movwf	??_main^(0+128)
  5782  03E3  30AD               	movlw	173
  5783  03E4                     u7187:	
  5784  03E4  0B89               	decfsz	9,f
  5785  03E5  2BE4               	goto	u7187
  5786  03E6  0BC8               	decfsz	??_main^(0+128),f
  5787  03E7  2BE4               	goto	u7187
  5788  03E8  0BC9               	decfsz	(??_main^(0+128)+1),f
  5789  03E9  2BE4               	goto	u7187
  5790  03EA  3200               	nop2
  5791                           
  5792                           ;main.c: 111: do { LATCbits.LATC6 = 0; } while(0);
  5793  03EB  0022               	movlb	2	; select bank2
  5794  03EC  130E               	bcf	14,6	;volatile
  5795                           
  5796                           ;main.c: 112: Wireless_wake();
  5797  03ED  3195  25FE  3183   	fcall	_Wireless_wake
  5798                           
  5799                           ;main.c: 113: dur = Timeout_getGlobalCounter() - doorOpenTime;
  5800  03F0  0023               	movlb	3	; select bank3
  5801  03F1  0957               	comf	main@doorOpenTime^(0+384),w
  5802  03F2  0021               	movlb	1	; select bank1
  5803  03F3  00C8               	movwf	??_main^(0+128)
  5804  03F4  0023               	movlb	3	; select bank3
  5805  03F5  0958               	comf	(main@doorOpenTime+1)^(0+384),w
  5806  03F6  0021               	movlb	1	; select bank1
  5807  03F7  00C9               	movwf	(??_main^(0+128)+1)
  5808  03F8  0AC8               	incf	??_main^(0+128),f
  5809  03F9  1903               	skipnz
  5810  03FA  0AC9               	incf	(??_main^(0+128)+1),f
  5811  03FB  3193  23B4  3183   	fcall	_Timeout_getGlobalCounter
  5812  03FE  0021               	movlb	1	; select bank1
  5813  03FF  0848               	movf	??_main^(0+128),w
  5814  0400  0020               	movlb	0	; select bank0
  5815  0401  0721               	addwf	?_Timeout_getGlobalCounter,w
  5816  0402  0023               	movlb	3	; select bank3
  5817  0403  00D5               	movwf	main@dur^(0+384)
  5818  0404  0021               	movlb	1	; select bank1
  5819  0405  0849               	movf	(??_main+1)^(0+128),w
  5820  0406  0020               	movlb	0	; select bank0
  5821  0407  3D22               	addwfc	?_Timeout_getGlobalCounter+1,w
  5822  0408  0023               	movlb	3	; select bank3
  5823  0409  00D6               	movwf	(main@dur+1)^(0+384)
  5824                           
  5825                           ;main.c: 114: Wireless_packageData(doorStatus,dur/1000,BMP_readTemperature());
  5826  040A  30E8               	movlw	232
  5827  040B  0020               	movlb	0	; select bank0
  5828  040C  00A1               	movwf	___lwdiv@divisor
  5829  040D  3003               	movlw	3
  5830  040E  00A2               	movwf	___lwdiv@divisor+1
  5831  040F  0023               	movlb	3	; select bank3
  5832  0410  0856               	movf	(main@dur+1)^(0+384),w
  5833  0411  0020               	movlb	0	; select bank0
  5834  0412  00A4               	movwf	___lwdiv@dividend+1
  5835  0413  0023               	movlb	3	; select bank3
  5836  0414  0855               	movf	main@dur^(0+384),w
  5837  0415  0020               	movlb	0	; select bank0
  5838  0416  00A3               	movwf	___lwdiv@dividend
  5839  0417  3188  2000  3183   	fcall	___lwdiv
  5840  041A  0020               	movlb	0	; select bank0
  5841  041B  0821               	movf	?___lwdiv,w
  5842  041C  0021               	movlb	1	; select bank1
  5843  041D  00C8               	movwf	??_main^(0+128)
  5844  041E  0848               	movf	??_main^(0+128),w
  5845  041F  00BA               	movwf	Wireless_packageData@openTime^(0+128)
  5846  0420  3180  2077  3183   	fcall	_BMP_readTemperature
  5847  0423  0021               	movlb	1	; select bank1
  5848  0424  0826               	movf	?_BMP_readTemperature^(0+128),w
  5849  0425  00BB               	movwf	Wireless_packageData@tempC^(0+128)
  5850  0426  0827               	movf	(?_BMP_readTemperature+1)^(0+128),w
  5851  0427  00BC               	movwf	(Wireless_packageData@tempC+1)^(0+128)
  5852  0428  0828               	movf	(?_BMP_readTemperature+2)^(0+128),w
  5853  0429  00BD               	movwf	(Wireless_packageData@tempC+2)^(0+128)
  5854  042A  0023               	movlb	3	; select bank3
  5855  042B  085B               	movf	main@doorStatus^(0+384),w
  5856  042C  318F  2724  3183   	fcall	_Wireless_packageData
  5857                           
  5858                           ;main.c: 115: Wireless_sleep();
  5859  042F  3194  247F  3183   	fcall	_Wireless_sleep
  5860                           
  5861                           ;main.c: 116: }
  5862  0432  2C3B               	goto	l6761
  5863  0433                     l6759:	
  5864                           
  5865                           ;main.c: 117: else
  5866                           ;main.c: 118: doorStatus=DOOR_run();
  5867  0433  3192  22A4  3183   	fcall	_DOOR_run
  5868  0436  0021               	movlb	1	; select bank1
  5869  0437  00C8               	movwf	??_main^(0+128)
  5870  0438  0848               	movf	??_main^(0+128),w
  5871  0439  0023               	movlb	3	; select bank3
  5872  043A  00DB               	movwf	main@doorStatus^(0+384)
  5873  043B                     l6761:	
  5874                           
  5875                           ;main.c: 121: if((doorStatus!=prevDoorStatus && doorStatus!=DOOR_ERROR))
  5876  043B  0023               	movlb	3	; select bank3
  5877  043C  085B               	movf	main@doorStatus^(0+384),w
  5878  043D  0650               	xorwf	main@prevDoorStatus^(0+384),w
  5879  043E  1903               	skipnz
  5880  043F  2CAC               	goto	l6783
  5881  0440  3002               	movlw	2
  5882  0441  065B               	xorwf	main@doorStatus^(0+384),w
  5883  0442  1903               	btfsc	3,2
  5884  0443  2CAC               	goto	l6783
  5885                           
  5886                           ;main.c: 122: {
  5887                           ;main.c: 123: Wireless_wake();
  5888  0444  3195  25FE  3183   	fcall	_Wireless_wake
  5889                           
  5890                           ;main.c: 124: if(doorStatus==DOOR_OPEN)
  5891  0447  0023               	movlb	3	; select bank3
  5892  0448  035B               	decf	main@doorStatus^(0+384),w
  5893  0449  1D03               	btfss	3,2
  5894  044A  2C4E               	goto	l6773
  5895                           
  5896                           ;main.c: 125: {
  5897                           ;main.c: 126: Wireless_packageData(doorStatus,0,BMP_readTemperature());
  5898  044B  0021               	movlb	1	; select bank1
  5899  044C  01BA               	clrf	Wireless_packageData@openTime^(0+128)
  5900  044D  2C7D               	goto	L4
  5901  044E                     l6773:	
  5902                           ;main.c: 131: }
  5903                           
  5904                           ;main.c: 127: doorOpenTime= Timeout_getGlobalCounter();
  5905                           
  5906                           
  5907                           ;main.c: 132: else
  5908                           ;main.c: 133: {
  5909                           ;main.c: 134: dur = Timeout_getGlobalCounter() - doorOpenTime;
  5910  044E  0957               	comf	main@doorOpenTime^(0+384),w
  5911  044F  0021               	movlb	1	; select bank1
  5912  0450  00C8               	movwf	??_main^(0+128)
  5913  0451  0023               	movlb	3	; select bank3
  5914  0452  0958               	comf	(main@doorOpenTime+1)^(0+384),w
  5915  0453  0021               	movlb	1	; select bank1
  5916  0454  00C9               	movwf	(??_main^(0+128)+1)
  5917  0455  0AC8               	incf	??_main^(0+128),f
  5918  0456  1903               	skipnz
  5919  0457  0AC9               	incf	(??_main^(0+128)+1),f
  5920  0458  3193  23B4  3183   	fcall	_Timeout_getGlobalCounter
  5921  045B  0021               	movlb	1	; select bank1
  5922  045C  0848               	movf	??_main^(0+128),w
  5923  045D  0020               	movlb	0	; select bank0
  5924  045E  0721               	addwf	?_Timeout_getGlobalCounter,w
  5925  045F  0023               	movlb	3	; select bank3
  5926  0460  00D5               	movwf	main@dur^(0+384)
  5927  0461  0021               	movlb	1	; select bank1
  5928  0462  0849               	movf	(??_main+1)^(0+128),w
  5929  0463  0020               	movlb	0	; select bank0
  5930  0464  3D22               	addwfc	?_Timeout_getGlobalCounter+1,w
  5931  0465  0023               	movlb	3	; select bank3
  5932  0466  00D6               	movwf	(main@dur+1)^(0+384)
  5933                           
  5934                           ;main.c: 135: Wireless_packageData(doorStatus,dur/1000,BMP_readTemperature());
  5935  0467  30E8               	movlw	232
  5936  0468  0020               	movlb	0	; select bank0
  5937  0469  00A1               	movwf	___lwdiv@divisor
  5938  046A  3003               	movlw	3
  5939  046B  00A2               	movwf	___lwdiv@divisor+1
  5940  046C  0023               	movlb	3	; select bank3
  5941  046D  0856               	movf	(main@dur+1)^(0+384),w
  5942  046E  0020               	movlb	0	; select bank0
  5943  046F  00A4               	movwf	___lwdiv@dividend+1
  5944  0470  0023               	movlb	3	; select bank3
  5945  0471  0855               	movf	main@dur^(0+384),w
  5946  0472  0020               	movlb	0	; select bank0
  5947  0473  00A3               	movwf	___lwdiv@dividend
  5948  0474  3188  2000  3183   	fcall	___lwdiv
  5949  0477  0020               	movlb	0	; select bank0
  5950  0478  0821               	movf	?___lwdiv,w
  5951  0479  0021               	movlb	1	; select bank1
  5952  047A  00C8               	movwf	??_main^(0+128)
  5953  047B  0848               	movf	??_main^(0+128),w
  5954  047C  00BA               	movwf	Wireless_packageData@openTime^(0+128)
  5955  047D                     L4:	
  5956  047D  3180  2077  3183   	fcall	_BMP_readTemperature
  5957  0480  0021               	movlb	1	; select bank1
  5958  0481  0826               	movf	?_BMP_readTemperature^(0+128),w
  5959  0482  00BB               	movwf	Wireless_packageData@tempC^(0+128)
  5960  0483  0827               	movf	(?_BMP_readTemperature+1)^(0+128),w
  5961  0484  00BC               	movwf	(Wireless_packageData@tempC+1)^(0+128)
  5962  0485  0828               	movf	(?_BMP_readTemperature+2)^(0+128),w
  5963  0486  00BD               	movwf	(Wireless_packageData@tempC+2)^(0+128)
  5964  0487  0023               	movlb	3	; select bank3
  5965  0488  085B               	movf	main@doorStatus^(0+384),w
  5966  0489  318F  2724  3183   	fcall	_Wireless_packageData
  5967                           
  5968                           ;main.c: 136: doorOpenTime = Timeout_getGlobalCounter();
  5969  048C  3193  23B4  3183   	fcall	_Timeout_getGlobalCounter
  5970  048F  0020               	movlb	0	; select bank0
  5971  0490  0824               	movf	?_Timeout_getGlobalCounter+3,w
  5972  0491  0023               	movlb	3	; select bank3
  5973  0492  00DA               	movwf	(main@doorOpenTime+3)^(0+384)
  5974  0493  0020               	movlb	0	; select bank0
  5975  0494  0823               	movf	?_Timeout_getGlobalCounter+2,w
  5976  0495  0023               	movlb	3	; select bank3
  5977  0496  00D9               	movwf	(main@doorOpenTime+2)^(0+384)
  5978  0497  0020               	movlb	0	; select bank0
  5979  0498  0822               	movf	?_Timeout_getGlobalCounter+1,w
  5980  0499  0023               	movlb	3	; select bank3
  5981  049A  00D8               	movwf	(main@doorOpenTime+1)^(0+384)
  5982  049B  0020               	movlb	0	; select bank0
  5983  049C  0821               	movf	?_Timeout_getGlobalCounter,w
  5984  049D  0023               	movlb	3	; select bank3
  5985  049E  00D7               	movwf	main@doorOpenTime^(0+384)
  5986                           
  5987                           ;main.c: 137: }
  5988                           ;main.c: 138: Wireless_sleep();
  5989  049F  3194  247F  3183   	fcall	_Wireless_sleep
  5990                           
  5991                           ;main.c: 139: doorClosedUpdateCounter=0;
  5992  04A2  3000               	movlw	0
  5993  04A3  0023               	movlb	3	; select bank3
  5994  04A4  00D4               	movwf	(main@doorClosedUpdateCounter+3)^(0+384)
  5995  04A5  3000               	movlw	0
  5996  04A6  00D3               	movwf	(main@doorClosedUpdateCounter+2)^(0+384)
  5997  04A7  3000               	movlw	0
  5998  04A8  00D2               	movwf	(main@doorClosedUpdateCounter+1)^(0+384)
  5999  04A9  3000               	movlw	0
  6000  04AA  00D1               	movwf	main@doorClosedUpdateCounter^(0+384)
  6001                           
  6002                           ;main.c: 140: }
  6003  04AB  2D34               	goto	l6813
  6004  04AC                     l6783:	
  6005                           
  6006                           ;main.c: 141: else if(doorStatus==DOOR_OPEN)
  6007  04AC  035B               	decf	main@doorStatus^(0+384),w
  6008  04AD  1D03               	btfss	3,2
  6009  04AE  2CE9               	goto	l6799
  6010                           
  6011                           ;main.c: 142: {
  6012                           ;main.c: 143: dur = Timeout_getGlobalCounter()-doorOpenTime;
  6013  04AF  0957               	comf	main@doorOpenTime^(0+384),w
  6014  04B0  0021               	movlb	1	; select bank1
  6015  04B1  00C8               	movwf	??_main^(0+128)
  6016  04B2  0023               	movlb	3	; select bank3
  6017  04B3  0958               	comf	(main@doorOpenTime+1)^(0+384),w
  6018  04B4  0021               	movlb	1	; select bank1
  6019  04B5  00C9               	movwf	(??_main^(0+128)+1)
  6020  04B6  0AC8               	incf	??_main^(0+128),f
  6021  04B7  1903               	skipnz
  6022  04B8  0AC9               	incf	(??_main^(0+128)+1),f
  6023  04B9  3193  23B4  3183   	fcall	_Timeout_getGlobalCounter
  6024  04BC  0021               	movlb	1	; select bank1
  6025  04BD  0848               	movf	??_main^(0+128),w
  6026  04BE  0020               	movlb	0	; select bank0
  6027  04BF  0721               	addwf	?_Timeout_getGlobalCounter,w
  6028  04C0  0023               	movlb	3	; select bank3
  6029  04C1  00D5               	movwf	main@dur^(0+384)
  6030  04C2  0021               	movlb	1	; select bank1
  6031  04C3  0849               	movf	(??_main+1)^(0+128),w
  6032  04C4  0020               	movlb	0	; select bank0
  6033  04C5  3D22               	addwfc	?_Timeout_getGlobalCounter+1,w
  6034  04C6  0023               	movlb	3	; select bank3
  6035  04C7  00D6               	movwf	(main@dur+1)^(0+384)
  6036                           
  6037                           ;main.c: 144: if(dur>=60000)
  6038  04C8  30EA               	movlw	234
  6039  04C9  0256               	subwf	(main@dur+1)^(0+384),w
  6040  04CA  3060               	movlw	96
  6041  04CB  1903               	skipnz
  6042  04CC  0255               	subwf	main@dur^(0+384),w
  6043  04CD  1C03               	skipc
  6044  04CE  2D34               	goto	l6813
  6045                           
  6046                           ;main.c: 145: {
  6047                           ;main.c: 146: Wireless_wake();
  6048  04CF  3195  25FE  3183   	fcall	_Wireless_wake
  6049                           
  6050                           ;main.c: 147: Wireless_packageData(doorStatus,dur/1000,BMP_readTemperature());
  6051  04D2  30E8               	movlw	232
  6052  04D3  0020               	movlb	0	; select bank0
  6053  04D4  00A1               	movwf	___lwdiv@divisor
  6054  04D5  3003               	movlw	3
  6055  04D6  00A2               	movwf	___lwdiv@divisor+1
  6056  04D7  0023               	movlb	3	; select bank3
  6057  04D8  0856               	movf	(main@dur+1)^(0+384),w
  6058  04D9  0020               	movlb	0	; select bank0
  6059  04DA  00A4               	movwf	___lwdiv@dividend+1
  6060  04DB  0023               	movlb	3	; select bank3
  6061  04DC  0855               	movf	main@dur^(0+384),w
  6062  04DD  0020               	movlb	0	; select bank0
  6063  04DE  00A3               	movwf	___lwdiv@dividend
  6064  04DF  3188  2000  3183   	fcall	___lwdiv
  6065  04E2  0020               	movlb	0	; select bank0
  6066  04E3  0821               	movf	?___lwdiv,w
  6067  04E4  0021               	movlb	1	; select bank1
  6068  04E5  00C8               	movwf	??_main^(0+128)
  6069  04E6  0848               	movf	??_main^(0+128),w
  6070  04E7  00BA               	movwf	Wireless_packageData@openTime^(0+128)
  6071  04E8  2D06               	goto	L5
  6072  04E9                     l6799:	
  6073                           ;main.c: 151: }
  6074                           ;main.c: 153: }
  6075                           
  6076                           ;main.c: 150: doorOpenTime=Timeout_getGlobalCounter();
  6077                           
  6078                           ;main.c: 149: doorClosedUpdateCounter=0;
  6079                           
  6080                           ;main.c: 148: Wireless_sleep();
  6081                           
  6082                           
  6083                           ;main.c: 154: else if(doorClosedUpdateCounter>=sensorUpdatePeriod)
  6084  04E9  0022               	movlb	2	; select bank2
  6085  04EA  086D               	movf	(_sensorUpdatePeriod+3)^(0+256),w
  6086  04EB  0023               	movlb	3	; select bank3
  6087  04EC  0254               	subwf	(main@doorClosedUpdateCounter+3)^(0+384),w
  6088  04ED  1D03               	skipz
  6089  04EE  2CFF               	goto	u6885
  6090  04EF  0022               	movlb	2	; select bank2
  6091  04F0  086C               	movf	(_sensorUpdatePeriod+2)^(0+256),w
  6092  04F1  0023               	movlb	3	; select bank3
  6093  04F2  0253               	subwf	(main@doorClosedUpdateCounter+2)^(0+384),w
  6094  04F3  1D03               	skipz
  6095  04F4  2CFF               	goto	u6885
  6096  04F5  0022               	movlb	2	; select bank2
  6097  04F6  086B               	movf	(_sensorUpdatePeriod+1)^(0+256),w
  6098  04F7  0023               	movlb	3	; select bank3
  6099  04F8  0252               	subwf	(main@doorClosedUpdateCounter+1)^(0+384),w
  6100  04F9  1D03               	skipz
  6101  04FA  2CFF               	goto	u6885
  6102  04FB  0022               	movlb	2	; select bank2
  6103  04FC  086A               	movf	_sensorUpdatePeriod^(0+256),w
  6104  04FD  0023               	movlb	3	; select bank3
  6105  04FE  0251               	subwf	main@doorClosedUpdateCounter^(0+384),w
  6106  04FF                     u6885:	
  6107  04FF  1C03               	skipc
  6108  0500  2D21               	goto	l6811
  6109                           
  6110                           ;main.c: 155: {
  6111                           ;main.c: 156: Wireless_wake();
  6112  0501  3195  25FE  3183   	fcall	_Wireless_wake
  6113                           
  6114                           ;main.c: 157: Wireless_packageData(doorStatus,0,BMP_readTemperature());
  6115  0504  0021               	movlb	1	; select bank1
  6116  0505  01BA               	clrf	Wireless_packageData@openTime^(0+128)
  6117  0506                     L5:	
  6118  0506  3180  2077  3183   	fcall	_BMP_readTemperature
  6119  0509  0021               	movlb	1	; select bank1
  6120  050A  0826               	movf	?_BMP_readTemperature^(0+128),w
  6121  050B  00BB               	movwf	Wireless_packageData@tempC^(0+128)
  6122  050C  0827               	movf	(?_BMP_readTemperature+1)^(0+128),w
  6123  050D  00BC               	movwf	(Wireless_packageData@tempC+1)^(0+128)
  6124  050E  0828               	movf	(?_BMP_readTemperature+2)^(0+128),w
  6125  050F  00BD               	movwf	(Wireless_packageData@tempC+2)^(0+128)
  6126  0510  0023               	movlb	3	; select bank3
  6127  0511  085B               	movf	main@doorStatus^(0+384),w
  6128  0512  318F  2724  3183   	fcall	_Wireless_packageData
  6129                           
  6130                           ;main.c: 158: Wireless_sleep();
  6131  0515  3194  247F  3183   	fcall	_Wireless_sleep
  6132                           
  6133                           ;main.c: 159: doorClosedUpdateCounter=0;
  6134  0518  3000               	movlw	0
  6135  0519  0023               	movlb	3	; select bank3
  6136  051A  00D4               	movwf	(main@doorClosedUpdateCounter+3)^(0+384)
  6137  051B  3000               	movlw	0
  6138  051C  00D3               	movwf	(main@doorClosedUpdateCounter+2)^(0+384)
  6139  051D  3000               	movlw	0
  6140  051E  00D2               	movwf	(main@doorClosedUpdateCounter+1)^(0+384)
  6141  051F  3000               	movlw	0
  6142  0520  00D1               	movwf	main@doorClosedUpdateCounter^(0+384)
  6143  0521                     l6811:	
  6144                           ;main.c: 161: }
  6145                           
  6146                           ;main.c: 160: doorOpenTime = Timeout_getGlobalCounter();
  6147                           
  6148                           
  6149                           ;main.c: 162: else
  6150                           ;main.c: 163: {
  6151                           ;main.c: 165: doorOpenTime=Timeout_getGlobalCounter();
  6152  0521  3193  23B4  3183   	fcall	_Timeout_getGlobalCounter
  6153  0524  0020               	movlb	0	; select bank0
  6154  0525  0824               	movf	?_Timeout_getGlobalCounter+3,w
  6155  0526  0023               	movlb	3	; select bank3
  6156  0527  00DA               	movwf	(main@doorOpenTime+3)^(0+384)
  6157  0528  0020               	movlb	0	; select bank0
  6158  0529  0823               	movf	?_Timeout_getGlobalCounter+2,w
  6159  052A  0023               	movlb	3	; select bank3
  6160  052B  00D9               	movwf	(main@doorOpenTime+2)^(0+384)
  6161  052C  0020               	movlb	0	; select bank0
  6162  052D  0822               	movf	?_Timeout_getGlobalCounter+1,w
  6163  052E  0023               	movlb	3	; select bank3
  6164  052F  00D8               	movwf	(main@doorOpenTime+1)^(0+384)
  6165  0530  0020               	movlb	0	; select bank0
  6166  0531  0821               	movf	?_Timeout_getGlobalCounter,w
  6167  0532  0023               	movlb	3	; select bank3
  6168  0533  00D7               	movwf	main@doorOpenTime^(0+384)
  6169  0534                     l6813:	
  6170                           
  6171                           ;main.c: 166: }
  6172                           ;main.c: 168: prevDoorStatus=doorStatus;
  6173  0534  085B               	movf	main@doorStatus^(0+384),w
  6174  0535  0021               	movlb	1	; select bank1
  6175  0536  00C8               	movwf	??_main^(0+128)
  6176  0537  0848               	movf	??_main^(0+128),w
  6177  0538  0023               	movlb	3	; select bank3
  6178  0539  00D0               	movwf	main@prevDoorStatus^(0+384)
  6179                           
  6180                           ;main.c: 169: doorClosedUpdateCounter+=10000;
  6181  053A  3010               	movlw	16
  6182  053B  07D1               	addwf	main@doorClosedUpdateCounter^(0+384),f
  6183  053C  3027               	movlw	39
  6184  053D  3DD2               	addwfc	(main@doorClosedUpdateCounter+1)^(0+384),f
  6185  053E  3000               	movlw	0
  6186  053F  3DD3               	addwfc	(main@doorClosedUpdateCounter+2)^(0+384),f
  6187  0540  3000               	movlw	0
  6188  0541  3DD4               	addwfc	(main@doorClosedUpdateCounter+3)^(0+384),f
  6189  0542  0063               	sleep	;# 
  6190  0543  2BD6               	goto	l6743
  6191  0544                     __end_of_main:	
  6192                           
  6193                           	psect	text1
  6194  12CE                     __ptext1:	
  6195 ;; *************** function _setSleepTime *****************
  6196 ;; Defined at:
  6197 ;;		line 7 in file "common.c"
  6198 ;; Parameters:    Size  Location     Type
  6199 ;;  timeSec         2    1[BANK0 ] unsigned short 
  6200 ;; Auto vars:     Size  Location     Type
  6201 ;;		None
  6202 ;; Return value:  Size  Location     Type
  6203 ;;                  1    wreg      void 
  6204 ;; Registers used:
  6205 ;;		wreg
  6206 ;; Tracked objects:
  6207 ;;		On entry : 0/0
  6208 ;;		On exit  : 0/0
  6209 ;;		Unchanged: 0/0
  6210 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6211 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6212 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6213 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6214 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6215 ;;Total ram usage:        2 bytes
  6216 ;; Hardware stack levels used:    1
  6217 ;; Hardware stack levels required when called:    4
  6218 ;; This function calls:
  6219 ;;		Nothing
  6220 ;; This function is called by:
  6221 ;;		_main
  6222 ;; This function uses a non-reentrant model
  6223 ;;
  6224                           
  6225                           
  6226                           ;psect for function _setSleepTime
  6227  12CE                     _setSleepTime:	
  6228                           
  6229                           ;common.c: 9: timer1ReloadVal=0x6000;
  6230                           
  6231                           ;incstack = 0
  6232                           ; Regs used in _setSleepTime: [wreg]
  6233  12CE  3000               	movlw	0
  6234  12CF  00FC               	movwf	_timer1ReloadVal	;volatile
  6235  12D0  3060               	movlw	96
  6236  12D1  00FD               	movwf	_timer1ReloadVal+1	;volatile
  6237  12D2  0008               	return
  6238  12D3                     __end_of_setSleepTime:	
  6239                           
  6240                           	psect	text2
  6241  0800                     __ptext2:	
  6242 ;; *************** function ___lwdiv *****************
  6243 ;; Defined at:
  6244 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\lwdiv.c"
  6245 ;; Parameters:    Size  Location     Type
  6246 ;;  divisor         2    1[BANK0 ] unsigned int 
  6247 ;;  dividend        2    3[BANK0 ] unsigned int 
  6248 ;; Auto vars:     Size  Location     Type
  6249 ;;  quotient        2    7[BANK0 ] unsigned int 
  6250 ;;  counter         1    6[BANK0 ] unsigned char 
  6251 ;; Return value:  Size  Location     Type
  6252 ;;                  2    1[BANK0 ] unsigned int 
  6253 ;; Registers used:
  6254 ;;		wreg, status,2, status,0
  6255 ;; Tracked objects:
  6256 ;;		On entry : 0/0
  6257 ;;		On exit  : 0/0
  6258 ;;		Unchanged: 0/0
  6259 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6260 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6261 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6262 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6263 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6264 ;;Total ram usage:        8 bytes
  6265 ;; Hardware stack levels used:    1
  6266 ;; Hardware stack levels required when called:    4
  6267 ;; This function calls:
  6268 ;;		Nothing
  6269 ;; This function is called by:
  6270 ;;		_main
  6271 ;; This function uses a non-reentrant model
  6272 ;;
  6273                           
  6274                           
  6275                           ;psect for function ___lwdiv
  6276  0800                     ___lwdiv:	
  6277                           
  6278                           ;incstack = 0
  6279                           ; Regs used in ___lwdiv: [wreg+status,2+status,0]
  6280  0800  0020               	movlb	0	; select bank0
  6281  0801  01A7               	clrf	___lwdiv@quotient
  6282  0802  01A8               	clrf	___lwdiv@quotient+1
  6283  0803  0821               	movf	___lwdiv@divisor,w
  6284  0804  0422               	iorwf	___lwdiv@divisor+1,w
  6285  0805  1903               	btfsc	3,2
  6286  0806  2830               	goto	l6645
  6287  0807  01A6               	clrf	___lwdiv@counter
  6288  0808  0AA6               	incf	___lwdiv@counter,f
  6289  0809                     l6633:	
  6290  0809  1BA2               	btfsc	___lwdiv@divisor+1,7
  6291  080A  2815               	goto	l6635
  6292  080B  3001               	movlw	1
  6293  080C                     u6595:	
  6294  080C  35A1               	lslf	___lwdiv@divisor,f
  6295  080D  0DA2               	rlf	___lwdiv@divisor+1,f
  6296  080E  0B89               	decfsz	9,f
  6297  080F  280C               	goto	u6595
  6298  0810  3001               	movlw	1
  6299  0811  00A5               	movwf	??___lwdiv
  6300  0812  0825               	movf	??___lwdiv,w
  6301  0813  07A6               	addwf	___lwdiv@counter,f
  6302  0814  2809               	goto	l6633
  6303  0815                     l6635:	
  6304  0815  3001               	movlw	1
  6305  0816                     u6615:	
  6306  0816  35A7               	lslf	___lwdiv@quotient,f
  6307  0817  0DA8               	rlf	___lwdiv@quotient+1,f
  6308  0818  0B89               	decfsz	9,f
  6309  0819  2816               	goto	u6615
  6310  081A  0822               	movf	___lwdiv@divisor+1,w
  6311  081B  0224               	subwf	___lwdiv@dividend+1,w
  6312  081C  1D03               	skipz
  6313  081D  2820               	goto	u6625
  6314  081E  0821               	movf	___lwdiv@divisor,w
  6315  081F  0223               	subwf	___lwdiv@dividend,w
  6316  0820                     u6625:	
  6317  0820  1C03               	skipc
  6318  0821  2827               	goto	l6641
  6319  0822  0821               	movf	___lwdiv@divisor,w
  6320  0823  02A3               	subwf	___lwdiv@dividend,f
  6321  0824  0822               	movf	___lwdiv@divisor+1,w
  6322  0825  3BA4               	subwfb	___lwdiv@dividend+1,f
  6323  0826  1427               	bsf	___lwdiv@quotient,0
  6324  0827                     l6641:	
  6325  0827  3001               	movlw	1
  6326  0828                     u6635:	
  6327  0828  36A2               	lsrf	___lwdiv@divisor+1,f
  6328  0829  0CA1               	rrf	___lwdiv@divisor,f
  6329  082A  0B89               	decfsz	9,f
  6330  082B  2828               	goto	u6635
  6331  082C  3001               	movlw	1
  6332  082D  02A6               	subwf	___lwdiv@counter,f
  6333  082E  1D03               	btfss	3,2
  6334  082F  2815               	goto	l6635
  6335  0830                     l6645:	
  6336  0830  0828               	movf	___lwdiv@quotient+1,w
  6337  0831  00A2               	movwf	?___lwdiv+1
  6338  0832  0827               	movf	___lwdiv@quotient,w
  6339  0833  00A1               	movwf	?___lwdiv
  6340  0834  0008               	return
  6341  0835                     __end_of___lwdiv:	
  6342                           
  6343                           	psect	text3
  6344  094A                     __ptext3:	
  6345 ;; *************** function ___lldiv *****************
  6346 ;; Defined at:
  6347 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\lldiv.c"
  6348 ;; Parameters:    Size  Location     Type
  6349 ;;  divisor         4    1[BANK0 ] unsigned long 
  6350 ;;  dividend        4    5[BANK0 ] unsigned long 
  6351 ;; Auto vars:     Size  Location     Type
  6352 ;;  quotient        4   10[BANK0 ] unsigned long 
  6353 ;;  counter         1   14[BANK0 ] unsigned char 
  6354 ;; Return value:  Size  Location     Type
  6355 ;;                  4    1[BANK0 ] unsigned long 
  6356 ;; Registers used:
  6357 ;;		wreg, status,2, status,0
  6358 ;; Tracked objects:
  6359 ;;		On entry : 0/0
  6360 ;;		On exit  : 0/0
  6361 ;;		Unchanged: 0/0
  6362 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6363 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6364 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6365 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6366 ;;      Totals:         0      14       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6367 ;;Total ram usage:       14 bytes
  6368 ;; Hardware stack levels used:    1
  6369 ;; Hardware stack levels required when called:    4
  6370 ;; This function calls:
  6371 ;;		Nothing
  6372 ;; This function is called by:
  6373 ;;		_main
  6374 ;; This function uses a non-reentrant model
  6375 ;;
  6376                           
  6377                           
  6378                           ;psect for function ___lldiv
  6379  094A                     ___lldiv:	
  6380                           
  6381                           ;incstack = 0
  6382                           ; Regs used in ___lldiv: [wreg+status,2+status,0]
  6383  094A  3000               	movlw	0
  6384  094B  0020               	movlb	0	; select bank0
  6385  094C  00AD               	movwf	___lldiv@quotient+3
  6386  094D  3000               	movlw	0
  6387  094E  00AC               	movwf	___lldiv@quotient+2
  6388  094F  3000               	movlw	0
  6389  0950  00AB               	movwf	___lldiv@quotient+1
  6390  0951  3000               	movlw	0
  6391  0952  00AA               	movwf	___lldiv@quotient
  6392  0953  0824               	movf	___lldiv@divisor+3,w
  6393  0954  0423               	iorwf	___lldiv@divisor+2,w
  6394  0955  0422               	iorwf	___lldiv@divisor+1,w
  6395  0956  0421               	iorwf	___lldiv@divisor,w
  6396  0957  1903               	skipnz
  6397  0958  2994               	goto	l6619
  6398  0959  01AE               	clrf	___lldiv@counter
  6399  095A  0AAE               	incf	___lldiv@counter,f
  6400  095B                     l6605:	
  6401  095B  1BA4               	btfsc	___lldiv@divisor+3,7
  6402  095C  2969               	goto	l6607
  6403  095D  3001               	movlw	1
  6404  095E                     u6525:	
  6405  095E  35A1               	lslf	___lldiv@divisor,f
  6406  095F  0DA2               	rlf	___lldiv@divisor+1,f
  6407  0960  0DA3               	rlf	___lldiv@divisor+2,f
  6408  0961  0DA4               	rlf	___lldiv@divisor+3,f
  6409  0962  0B89               	decfsz	9,f
  6410  0963  295E               	goto	u6525
  6411  0964  3001               	movlw	1
  6412  0965  00A9               	movwf	??___lldiv
  6413  0966  0829               	movf	??___lldiv,w
  6414  0967  07AE               	addwf	___lldiv@counter,f
  6415  0968  295B               	goto	l6605
  6416  0969                     l6607:	
  6417  0969  3001               	movlw	1
  6418  096A                     u6545:	
  6419  096A  35AA               	lslf	___lldiv@quotient,f
  6420  096B  0DAB               	rlf	___lldiv@quotient+1,f
  6421  096C  0DAC               	rlf	___lldiv@quotient+2,f
  6422  096D  0DAD               	rlf	___lldiv@quotient+3,f
  6423  096E  0B89               	decfsz	9,f
  6424  096F  296A               	goto	u6545
  6425  0970  0824               	movf	___lldiv@divisor+3,w
  6426  0971  0228               	subwf	___lldiv@dividend+3,w
  6427  0972  1D03               	skipz
  6428  0973  297E               	goto	u6555
  6429  0974  0823               	movf	___lldiv@divisor+2,w
  6430  0975  0227               	subwf	___lldiv@dividend+2,w
  6431  0976  1D03               	skipz
  6432  0977  297E               	goto	u6555
  6433  0978  0822               	movf	___lldiv@divisor+1,w
  6434  0979  0226               	subwf	___lldiv@dividend+1,w
  6435  097A  1D03               	skipz
  6436  097B  297E               	goto	u6555
  6437  097C  0821               	movf	___lldiv@divisor,w
  6438  097D  0225               	subwf	___lldiv@dividend,w
  6439  097E                     u6555:	
  6440  097E  1C03               	skipc
  6441  097F  2989               	goto	l6615
  6442  0980  0821               	movf	___lldiv@divisor,w
  6443  0981  02A5               	subwf	___lldiv@dividend,f
  6444  0982  0822               	movf	___lldiv@divisor+1,w
  6445  0983  3BA6               	subwfb	___lldiv@dividend+1,f
  6446  0984  0823               	movf	___lldiv@divisor+2,w
  6447  0985  3BA7               	subwfb	___lldiv@dividend+2,f
  6448  0986  0824               	movf	___lldiv@divisor+3,w
  6449  0987  3BA8               	subwfb	___lldiv@dividend+3,f
  6450  0988  142A               	bsf	___lldiv@quotient,0
  6451  0989                     l6615:	
  6452  0989  3001               	movlw	1
  6453  098A                     u6565:	
  6454  098A  36A4               	lsrf	___lldiv@divisor+3,f
  6455  098B  0CA3               	rrf	___lldiv@divisor+2,f
  6456  098C  0CA2               	rrf	___lldiv@divisor+1,f
  6457  098D  0CA1               	rrf	___lldiv@divisor,f
  6458  098E  0B89               	decfsz	9,f
  6459  098F  298A               	goto	u6565
  6460  0990  3001               	movlw	1
  6461  0991  02AE               	subwf	___lldiv@counter,f
  6462  0992  1D03               	btfss	3,2
  6463  0993  2969               	goto	l6607
  6464  0994                     l6619:	
  6465  0994  082D               	movf	___lldiv@quotient+3,w
  6466  0995  00A4               	movwf	?___lldiv+3
  6467  0996  082C               	movf	___lldiv@quotient+2,w
  6468  0997  00A3               	movwf	?___lldiv+2
  6469  0998  082B               	movf	___lldiv@quotient+1,w
  6470  0999  00A2               	movwf	?___lldiv+1
  6471  099A  082A               	movf	___lldiv@quotient,w
  6472  099B  00A1               	movwf	?___lldiv
  6473  099C  0008               	return
  6474  099D                     __end_of___lldiv:	
  6475                           
  6476                           	psect	text4
  6477  15FE                     __ptext4:	
  6478 ;; *************** function _Wireless_wake *****************
  6479 ;; Defined at:
  6480 ;;		line 184 in file "wireless.c"
  6481 ;; Parameters:    Size  Location     Type
  6482 ;;		None
  6483 ;; Auto vars:     Size  Location     Type
  6484 ;;  reg             1   16[BANK0 ] unsigned char 
  6485 ;; Return value:  Size  Location     Type
  6486 ;;                  1    wreg      void 
  6487 ;; Registers used:
  6488 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6489 ;; Tracked objects:
  6490 ;;		On entry : 0/0
  6491 ;;		On exit  : 0/0
  6492 ;;		Unchanged: 0/0
  6493 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6494 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6495 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6496 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6497 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6498 ;;Total ram usage:        2 bytes
  6499 ;; Hardware stack levels used:    1
  6500 ;; Hardware stack levels required when called:    8
  6501 ;; This function calls:
  6502 ;;		_RF_ReadRegisterData
  6503 ;;		_RF_WriteRegister
  6504 ;; This function is called by:
  6505 ;;		_main
  6506 ;; This function uses a non-reentrant model
  6507 ;;
  6508                           
  6509                           
  6510                           ;psect for function _Wireless_wake
  6511  15FE                     _Wireless_wake:	
  6512                           
  6513                           ;wireless.c: 186: u8 reg;
  6514                           ;wireless.c: 188: RF_ReadRegisterData(0x00 , &reg, 1);
  6515                           
  6516                           ;incstack = 0
  6517                           ; Regs used in _Wireless_wake: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  6518  15FE  3030               	movlw	(low (Wireless_wake@reg| 0))& (0+255)
  6519  15FF  0020               	movlb	0	; select bank0
  6520  1600  00AF               	movwf	??_Wireless_wake
  6521  1601  082F               	movf	??_Wireless_wake,w
  6522  1602  00AA               	movwf	RF_ReadRegisterData@buf
  6523  1603  01AB               	clrf	RF_ReadRegisterData@bufSize
  6524  1604  0AAB               	incf	RF_ReadRegisterData@bufSize,f
  6525  1605  3000               	movlw	0
  6526  1606  3195  25C4  3195   	fcall	_RF_ReadRegisterData
  6527                           
  6528                           ;wireless.c: 189: reg|=0b00000010;
  6529  1609  0020               	movlb	0	; select bank0
  6530  160A  14B0               	bsf	Wireless_wake@reg,1
  6531                           
  6532                           ;wireless.c: 190: RF_WriteRegister(0x00,reg);
  6533  160B  0830               	movf	Wireless_wake@reg,w
  6534  160C  00AF               	movwf	??_Wireless_wake
  6535  160D  082F               	movf	??_Wireless_wake,w
  6536  160E  00A3               	movwf	RF_WriteRegister@val
  6537  160F  3000               	movlw	0
  6538  1610  3194  2426  3195   	fcall	_RF_WriteRegister
  6539                           
  6540                           ;wireless.c: 191: _delay((unsigned long)((2)*(8000000/4000.0)));
  6541  1613  3006               	movlw	6
  6542  1614  0020               	movlb	0	; select bank0
  6543  1615  00AF               	movwf	??_Wireless_wake
  6544  1616  3030               	movlw	48
  6545  1617                     u7197:	
  6546  1617  0B89               	decfsz	9,f
  6547  1618  2E17               	goto	u7197
  6548  1619  0BAF               	decfsz	??_Wireless_wake,f
  6549  161A  2E17               	goto	u7197
  6550  161B  0000               	nop
  6551  161C  0008               	return
  6552  161D                     __end_of_Wireless_wake:	
  6553                           
  6554                           	psect	text5
  6555  147F                     __ptext5:	
  6556 ;; *************** function _Wireless_sleep *****************
  6557 ;; Defined at:
  6558 ;;		line 174 in file "wireless.c"
  6559 ;; Parameters:    Size  Location     Type
  6560 ;;		None
  6561 ;; Auto vars:     Size  Location     Type
  6562 ;;  reg             1   16[BANK0 ] unsigned char 
  6563 ;; Return value:  Size  Location     Type
  6564 ;;                  1    wreg      void 
  6565 ;; Registers used:
  6566 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6567 ;; Tracked objects:
  6568 ;;		On entry : 0/0
  6569 ;;		On exit  : 0/0
  6570 ;;		Unchanged: 0/0
  6571 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6572 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6573 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6574 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6575 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6576 ;;Total ram usage:        2 bytes
  6577 ;; Hardware stack levels used:    1
  6578 ;; Hardware stack levels required when called:    8
  6579 ;; This function calls:
  6580 ;;		_RF_ReadRegisterData
  6581 ;;		_RF_WriteRegister
  6582 ;; This function is called by:
  6583 ;;		_main
  6584 ;; This function uses a non-reentrant model
  6585 ;;
  6586                           
  6587                           
  6588                           ;psect for function _Wireless_sleep
  6589  147F                     _Wireless_sleep:	
  6590                           
  6591                           ;wireless.c: 176: u8 reg;
  6592                           ;wireless.c: 178: RF_ReadRegisterData(0x00 , &reg, 1);
  6593                           
  6594                           ;incstack = 0
  6595                           ; Regs used in _Wireless_sleep: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  6596  147F  3030               	movlw	(low (Wireless_sleep@reg| 0))& (0+255)
  6597  1480  0020               	movlb	0	; select bank0
  6598  1481  00AF               	movwf	??_Wireless_sleep
  6599  1482  082F               	movf	??_Wireless_sleep,w
  6600  1483  00AA               	movwf	RF_ReadRegisterData@buf
  6601  1484  01AB               	clrf	RF_ReadRegisterData@bufSize
  6602  1485  0AAB               	incf	RF_ReadRegisterData@bufSize,f
  6603  1486  3000               	movlw	0
  6604  1487  3195  25C4  3194   	fcall	_RF_ReadRegisterData
  6605                           
  6606                           ;wireless.c: 179: reg&=0b11111101;
  6607  148A  30FD               	movlw	253
  6608  148B  0020               	movlb	0	; select bank0
  6609  148C  00AF               	movwf	??_Wireless_sleep
  6610  148D  082F               	movf	??_Wireless_sleep,w
  6611  148E  05B0               	andwf	Wireless_sleep@reg,f
  6612                           
  6613                           ;wireless.c: 180: RF_WriteRegister(0x00,reg);
  6614  148F  0830               	movf	Wireless_sleep@reg,w
  6615  1490  00AF               	movwf	??_Wireless_sleep
  6616  1491  082F               	movf	??_Wireless_sleep,w
  6617  1492  00A3               	movwf	RF_WriteRegister@val
  6618  1493  3000               	movlw	0
  6619  1494  3194  2426         	fcall	_RF_WriteRegister
  6620  1496  0008               	return
  6621  1497                     __end_of_Wireless_sleep:	
  6622                           
  6623                           	psect	text6
  6624  0F24                     __ptext6:	
  6625 ;; *************** function _Wireless_packageData *****************
  6626 ;; Defined at:
  6627 ;;		line 136 in file "wireless.c"
  6628 ;; Parameters:    Size  Location     Type
  6629 ;;  status          1    wreg     enum E3332
  6630 ;;  openTime        1   26[BANK1 ] unsigned char 
  6631 ;;  tempC           3   27[BANK1 ] float 
  6632 ;; Auto vars:     Size  Location     Type
  6633 ;;  status          1   37[BANK1 ] enum E3332
  6634 ;;  data            6   30[BANK1 ] unsigned char [6]
  6635 ;;  t1              2   38[BANK1 ] unsigned int 
  6636 ;;  var             1   36[BANK1 ] unsigned char 
  6637 ;; Return value:  Size  Location     Type
  6638 ;;                  1    wreg      void 
  6639 ;; Registers used:
  6640 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6641 ;; Tracked objects:
  6642 ;;		On entry : 0/0
  6643 ;;		On exit  : 0/0
  6644 ;;		Unchanged: 0/0
  6645 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6646 ;;      Params:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0
  6647 ;;      Locals:         0       0      10       0       0       0       0       0       0       0       0       0       
      +0       0
  6648 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6649 ;;      Totals:         0       1      14       0       0       0       0       0       0       0       0       0       
      +0       0
  6650 ;;Total ram usage:       15 bytes
  6651 ;; Hardware stack levels used:    1
  6652 ;; Hardware stack levels required when called:   11
  6653 ;; This function calls:
  6654 ;;		_Diag_getSensorHealth
  6655 ;;		_Sensor_getSupplyVoltage
  6656 ;;		_Wireless_checkDataReceived
  6657 ;;		_Wireless_determineTransmitPower
  6658 ;;		_Wireless_sendData
  6659 ;;		___ftadd
  6660 ;;		___ftmul
  6661 ;;		___fttol
  6662 ;; This function is called by:
  6663 ;;		_main
  6664 ;; This function uses a non-reentrant model
  6665 ;;
  6666                           
  6667                           
  6668                           ;psect for function _Wireless_packageData
  6669  0F24                     _Wireless_packageData:	
  6670                           
  6671                           ;incstack = 0
  6672                           ; Regs used in _Wireless_packageData: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6673                           ;Wireless_packageData@status stored from wreg
  6674  0F24  0021               	movlb	1	; select bank1
  6675  0F25  00C5               	movwf	Wireless_packageData@status^(0+128)
  6676                           
  6677                           ;wireless.c: 146: tempC+=50;
  6678  0F26  3000               	movlw	0
  6679  0F27  0020               	movlb	0	; select bank0
  6680  0F28  00C9               	movwf	___ftadd@f1
  6681  0F29  3048               	movlw	72
  6682  0F2A  00CA               	movwf	___ftadd@f1+1
  6683  0F2B  3042               	movlw	66
  6684  0F2C  00CB               	movwf	___ftadd@f1+2
  6685  0F2D  0021               	movlb	1	; select bank1
  6686  0F2E  083B               	movf	Wireless_packageData@tempC^(0+128),w
  6687  0F2F  0020               	movlb	0	; select bank0
  6688  0F30  00CC               	movwf	___ftadd@f2
  6689  0F31  0021               	movlb	1	; select bank1
  6690  0F32  083C               	movf	(Wireless_packageData@tempC+1)^(0+128),w
  6691  0F33  0020               	movlb	0	; select bank0
  6692  0F34  00CD               	movwf	___ftadd@f2+1
  6693  0F35  0021               	movlb	1	; select bank1
  6694  0F36  083D               	movf	(Wireless_packageData@tempC+2)^(0+128),w
  6695  0F37  0020               	movlb	0	; select bank0
  6696  0F38  00CE               	movwf	___ftadd@f2+2
  6697  0F39  3186  268D  318F   	fcall	___ftadd
  6698  0F3C  0020               	movlb	0	; select bank0
  6699  0F3D  0849               	movf	?___ftadd,w
  6700  0F3E  0021               	movlb	1	; select bank1
  6701  0F3F  00BB               	movwf	Wireless_packageData@tempC^(0+128)
  6702  0F40  0020               	movlb	0	; select bank0
  6703  0F41  084A               	movf	?___ftadd+1,w
  6704  0F42  0021               	movlb	1	; select bank1
  6705  0F43  00BC               	movwf	(Wireless_packageData@tempC+1)^(0+128)
  6706  0F44  0020               	movlb	0	; select bank0
  6707  0F45  084B               	movf	?___ftadd+2,w
  6708  0F46  0021               	movlb	1	; select bank1
  6709  0F47  00BD               	movwf	(Wireless_packageData@tempC+2)^(0+128)
  6710                           
  6711                           ;wireless.c: 147: tempC*=10;
  6712  0F48  3000               	movlw	0
  6713  0F49  0020               	movlb	0	; select bank0
  6714  0F4A  00D6               	movwf	___ftmul@f1
  6715  0F4B  3020               	movlw	32
  6716  0F4C  00D7               	movwf	___ftmul@f1+1
  6717  0F4D  3041               	movlw	65
  6718  0F4E  00D8               	movwf	___ftmul@f1+2
  6719  0F4F  0021               	movlb	1	; select bank1
  6720  0F50  083B               	movf	Wireless_packageData@tempC^(0+128),w
  6721  0F51  0020               	movlb	0	; select bank0
  6722  0F52  00D9               	movwf	___ftmul@f2
  6723  0F53  0021               	movlb	1	; select bank1
  6724  0F54  083C               	movf	(Wireless_packageData@tempC+1)^(0+128),w
  6725  0F55  0020               	movlb	0	; select bank0
  6726  0F56  00DA               	movwf	___ftmul@f2+1
  6727  0F57  0021               	movlb	1	; select bank1
  6728  0F58  083D               	movf	(Wireless_packageData@tempC+2)^(0+128),w
  6729  0F59  0020               	movlb	0	; select bank0
  6730  0F5A  00DB               	movwf	___ftmul@f2+2
  6731  0F5B  318E  2670  318F   	fcall	___ftmul
  6732  0F5E  0020               	movlb	0	; select bank0
  6733  0F5F  0856               	movf	?___ftmul,w
  6734  0F60  0021               	movlb	1	; select bank1
  6735  0F61  00BB               	movwf	Wireless_packageData@tempC^(0+128)
  6736  0F62  0020               	movlb	0	; select bank0
  6737  0F63  0857               	movf	?___ftmul+1,w
  6738  0F64  0021               	movlb	1	; select bank1
  6739  0F65  00BC               	movwf	(Wireless_packageData@tempC+1)^(0+128)
  6740  0F66  0020               	movlb	0	; select bank0
  6741  0F67  0858               	movf	?___ftmul+2,w
  6742  0F68  0021               	movlb	1	; select bank1
  6743  0F69  00BD               	movwf	(Wireless_packageData@tempC+2)^(0+128)
  6744                           
  6745                           ;wireless.c: 149: unsigned int t1 = tempC;
  6746  0F6A  083B               	movf	Wireless_packageData@tempC^(0+128),w
  6747  0F6B  0020               	movlb	0	; select bank0
  6748  0F6C  00E6               	movwf	___fttol@f1
  6749  0F6D  0021               	movlb	1	; select bank1
  6750  0F6E  083C               	movf	(Wireless_packageData@tempC+1)^(0+128),w
  6751  0F6F  0020               	movlb	0	; select bank0
  6752  0F70  00E7               	movwf	___fttol@f1+1
  6753  0F71  0021               	movlb	1	; select bank1
  6754  0F72  083D               	movf	(Wireless_packageData@tempC+2)^(0+128),w
  6755  0F73  0020               	movlb	0	; select bank0
  6756  0F74  00E8               	movwf	___fttol@f1+2
  6757  0F75  318C  2483  318F   	fcall	___fttol
  6758  0F78  0020               	movlb	0	; select bank0
  6759  0F79  0867               	movf	?___fttol+1,w
  6760  0F7A  0021               	movlb	1	; select bank1
  6761  0F7B  00C7               	movwf	(Wireless_packageData@t1+1)^(0+128)
  6762  0F7C  0020               	movlb	0	; select bank0
  6763  0F7D  0866               	movf	?___fttol,w
  6764  0F7E  0021               	movlb	1	; select bank1
  6765  0F7F  00C6               	movwf	Wireless_packageData@t1^(0+128)
  6766                           
  6767                           ;wireless.c: 150: char var;
  6768                           ;wireless.c: 151: char data[6];
  6769                           ;wireless.c: 153: status<<=4;
  6770  0F80  0EC5               	swapf	Wireless_packageData@status^(0+128),f
  6771  0F81  30F0               	movlw	240
  6772  0F82  05C5               	andwf	Wireless_packageData@status^(0+128),f
  6773                           
  6774                           ;wireless.c: 154: var=Diag_getSensorHealth();
  6775  0F83  3193  23D7  318F   	fcall	_Diag_getSensorHealth
  6776  0F86  0020               	movlb	0	; select bank0
  6777  0F87  00EE               	movwf	??_Wireless_packageData
  6778  0F88  086E               	movf	??_Wireless_packageData,w
  6779  0F89  0021               	movlb	1	; select bank1
  6780  0F8A  00C4               	movwf	Wireless_packageData@var^(0+128)
  6781                           
  6782                           ;wireless.c: 155: status|=var;
  6783  0F8B  0844               	movf	Wireless_packageData@var^(0+128),w
  6784  0F8C  0020               	movlb	0	; select bank0
  6785  0F8D  00EE               	movwf	??_Wireless_packageData
  6786  0F8E  086E               	movf	??_Wireless_packageData,w
  6787  0F8F  0021               	movlb	1	; select bank1
  6788  0F90  04C5               	iorwf	Wireless_packageData@status^(0+128),f
  6789                           
  6790                           ;wireless.c: 158: data[0]=status;
  6791  0F91  0845               	movf	Wireless_packageData@status^(0+128),w
  6792  0F92  0020               	movlb	0	; select bank0
  6793  0F93  00EE               	movwf	??_Wireless_packageData
  6794  0F94  086E               	movf	??_Wireless_packageData,w
  6795  0F95  0021               	movlb	1	; select bank1
  6796  0F96  00BE               	movwf	Wireless_packageData@data^(0+128)
  6797                           
  6798                           ;wireless.c: 159: data[1]=openTime;
  6799  0F97  083A               	movf	Wireless_packageData@openTime^(0+128),w
  6800  0F98  0020               	movlb	0	; select bank0
  6801  0F99  00EE               	movwf	??_Wireless_packageData
  6802  0F9A  086E               	movf	??_Wireless_packageData,w
  6803  0F9B  0021               	movlb	1	; select bank1
  6804  0F9C  00BF               	movwf	(Wireless_packageData@data^(0+128)+1)
  6805                           
  6806                           ;wireless.c: 160: data[2]=t1>>8;
  6807  0F9D  0847               	movf	(Wireless_packageData@t1+1)^(0+128),w
  6808  0F9E  0020               	movlb	0	; select bank0
  6809  0F9F  00EE               	movwf	??_Wireless_packageData
  6810  0FA0  086E               	movf	??_Wireless_packageData,w
  6811  0FA1  0021               	movlb	1	; select bank1
  6812  0FA2  00C0               	movwf	(Wireless_packageData@data^(0+128)+2)
  6813                           
  6814                           ;wireless.c: 161: data[3]= t1 & 0xFF;
  6815  0FA3  0846               	movf	Wireless_packageData@t1^(0+128),w
  6816  0FA4  0020               	movlb	0	; select bank0
  6817  0FA5  00EE               	movwf	??_Wireless_packageData
  6818  0FA6  086E               	movf	??_Wireless_packageData,w
  6819  0FA7  0021               	movlb	1	; select bank1
  6820  0FA8  00C1               	movwf	(Wireless_packageData@data^(0+128)+3)
  6821                           
  6822                           ;wireless.c: 162: t1=(float)(Sensor_getSupplyVoltage()-1)*100;
  6823  0FA9  3188  2072  318F   	fcall	_Sensor_getSupplyVoltage
  6824  0FAC  0020               	movlb	0	; select bank0
  6825  0FAD  0841               	movf	?_Sensor_getSupplyVoltage,w
  6826  0FAE  00CC               	movwf	___ftadd@f2
  6827  0FAF  0842               	movf	?_Sensor_getSupplyVoltage+1,w
  6828  0FB0  00CD               	movwf	___ftadd@f2+1
  6829  0FB1  0843               	movf	?_Sensor_getSupplyVoltage+2,w
  6830  0FB2  00CE               	movwf	___ftadd@f2+2
  6831  0FB3  3000               	movlw	0
  6832  0FB4  00C9               	movwf	___ftadd@f1
  6833  0FB5  3080               	movlw	128
  6834  0FB6  00CA               	movwf	___ftadd@f1+1
  6835  0FB7  30BF               	movlw	191
  6836  0FB8  00CB               	movwf	___ftadd@f1+2
  6837  0FB9  3186  268D  318F   	fcall	___ftadd
  6838  0FBC  0020               	movlb	0	; select bank0
  6839  0FBD  0849               	movf	?___ftadd,w
  6840  0FBE  00D9               	movwf	___ftmul@f2
  6841  0FBF  084A               	movf	?___ftadd+1,w
  6842  0FC0  00DA               	movwf	___ftmul@f2+1
  6843  0FC1  084B               	movf	?___ftadd+2,w
  6844  0FC2  00DB               	movwf	___ftmul@f2+2
  6845  0FC3  3000               	movlw	0
  6846  0FC4  00D6               	movwf	___ftmul@f1
  6847  0FC5  30C8               	movlw	200
  6848  0FC6  00D7               	movwf	___ftmul@f1+1
  6849  0FC7  3042               	movlw	66
  6850  0FC8  00D8               	movwf	___ftmul@f1+2
  6851  0FC9  318E  2670  318F   	fcall	___ftmul
  6852  0FCC  0020               	movlb	0	; select bank0
  6853  0FCD  0856               	movf	?___ftmul,w
  6854  0FCE  00E6               	movwf	___fttol@f1
  6855  0FCF  0857               	movf	?___ftmul+1,w
  6856  0FD0  00E7               	movwf	___fttol@f1+1
  6857  0FD1  0858               	movf	?___ftmul+2,w
  6858  0FD2  00E8               	movwf	___fttol@f1+2
  6859  0FD3  318C  2483  318F   	fcall	___fttol
  6860  0FD6  0020               	movlb	0	; select bank0
  6861  0FD7  0867               	movf	?___fttol+1,w
  6862  0FD8  0021               	movlb	1	; select bank1
  6863  0FD9  00C7               	movwf	(Wireless_packageData@t1+1)^(0+128)
  6864  0FDA  0020               	movlb	0	; select bank0
  6865  0FDB  0866               	movf	?___fttol,w
  6866  0FDC  0021               	movlb	1	; select bank1
  6867  0FDD  00C6               	movwf	Wireless_packageData@t1^(0+128)
  6868                           
  6869                           ;wireless.c: 163: data[4]=t1;
  6870  0FDE  0846               	movf	Wireless_packageData@t1^(0+128),w
  6871  0FDF  0020               	movlb	0	; select bank0
  6872  0FE0  00EE               	movwf	??_Wireless_packageData
  6873  0FE1  086E               	movf	??_Wireless_packageData,w
  6874  0FE2  0021               	movlb	1	; select bank1
  6875  0FE3  00C2               	movwf	(Wireless_packageData@data^(0+128)+4)
  6876                           
  6877                           ;wireless.c: 164: data[5] = currentTransmitPower;
  6878  0FE4  085C               	movf	_currentTransmitPower^(0+128),w
  6879  0FE5  0020               	movlb	0	; select bank0
  6880  0FE6  00EE               	movwf	??_Wireless_packageData
  6881  0FE7  086E               	movf	??_Wireless_packageData,w
  6882  0FE8  0021               	movlb	1	; select bank1
  6883  0FE9  00C3               	movwf	(Wireless_packageData@data^(0+128)+5)
  6884  0FEA                     l6529:	
  6885                           ;wireless.c: 165: do{
  6886                           
  6887                           
  6888                           ;wireless.c: 166: Wireless_sendData(data, 6);
  6889  0FEA  3006               	movlw	6
  6890  0FEB  0020               	movlb	0	; select bank0
  6891  0FEC  00EE               	movwf	??_Wireless_packageData
  6892  0FED  086E               	movf	??_Wireless_packageData,w
  6893  0FEE  00B1               	movwf	Wireless_sendData@length
  6894  0FEF  30BE               	movlw	(low (Wireless_packageData@data| 0))& (0+255)
  6895  0FF0  3194  2411  318F   	fcall	_Wireless_sendData
  6896  0FF3                     l1125:	
  6897                           ;wireless.c: 167: while(PORTCbits.RC3);
  6898                           
  6899  0FF3  0020               	movlb	0	; select bank0
  6900  0FF4  198E               	btfsc	14,3	;volatile
  6901  0FF5  2FF3               	goto	l1125
  6902                           
  6903                           ;wireless.c: 168: }
  6904                           ;wireless.c: 169: while(Wireless_determineTransmitPower(0));
  6905  0FF6  3000               	movlw	0
  6906  0FF7  318D  2522  318F   	fcall	_Wireless_determineTransmitPower
  6907  0FFA  3A00               	xorlw	0
  6908  0FFB  1D03               	skipz
  6909  0FFC  2FEA               	goto	l6529
  6910                           
  6911                           ;wireless.c: 170: Wireless_checkDataReceived();
  6912  0FFD  318B  2387         	fcall	_Wireless_checkDataReceived
  6913  0FFF  0008               	return
  6914  1000                     __end_of_Wireless_packageData:	
  6915                           
  6916                           	psect	text7
  6917  0D22                     __ptext7:	
  6918 ;; *************** function _Wireless_determineTransmitPower *****************
  6919 ;; Defined at:
  6920 ;;		line 60 in file "wireless.c"
  6921 ;; Parameters:    Size  Location     Type
  6922 ;;  initialise      1    wreg     unsigned char 
  6923 ;; Auto vars:     Size  Location     Type
  6924 ;;  initialise      1   24[BANK0 ] unsigned char 
  6925 ;;  latestResult    1   26[BANK0 ] unsigned char 
  6926 ;;  testPayload     1   25[BANK0 ] unsigned char 
  6927 ;; Return value:  Size  Location     Type
  6928 ;;                  1    wreg      unsigned char 
  6929 ;; Registers used:
  6930 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6931 ;; Tracked objects:
  6932 ;;		On entry : 0/0
  6933 ;;		On exit  : 0/0
  6934 ;;		Unchanged: 0/0
  6935 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6936 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6937 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6938 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6939 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6940 ;;Total ram usage:        6 bytes
  6941 ;; Hardware stack levels used:    1
  6942 ;; Hardware stack levels required when called:   10
  6943 ;; This function calls:
  6944 ;;		_Wireless_changeTransmitPower
  6945 ;;		_Wireless_isDataTransmitSuccessful
  6946 ;;		_Wireless_sendData
  6947 ;;		_limit
  6948 ;; This function is called by:
  6949 ;;		_main
  6950 ;;		_Wireless_packageData
  6951 ;; This function uses a non-reentrant model
  6952 ;;
  6953                           
  6954                           
  6955                           ;psect for function _Wireless_determineTransmitPower
  6956  0D22                     _Wireless_determineTransmitPower:	
  6957                           
  6958                           ;incstack = 0
  6959                           ; Regs used in _Wireless_determineTransmitPower: [wreg-fsr1h+status,2+status,0+pclath+cs
      +                          tack]
  6960                           ;Wireless_determineTransmitPower@initialise stored from wreg
  6961  0D22  0020               	movlb	0	; select bank0
  6962  0D23  00B8               	movwf	Wireless_determineTransmitPower@initialise
  6963                           
  6964                           ;wireless.c: 62: char testPayload = 0xFF;
  6965  0D24  30FF               	movlw	255
  6966  0D25  00B5               	movwf	??_Wireless_determineTransmitPower
  6967  0D26  0835               	movf	??_Wireless_determineTransmitPower,w
  6968  0D27  00B9               	movwf	Wireless_determineTransmitPower@testPayload
  6969                           
  6970                           ;wireless.c: 63: char latestResult;
  6971                           ;wireless.c: 64: static char numOfTransmits =0;
  6972                           ;wireless.c: 65: static char numOfSuccessfulTransmits = 0;
  6973                           ;wireless.c: 67: if(initialise){
  6974  0D28  0838               	movf	Wireless_determineTransmitPower@initialise,w
  6975  0D29  1903               	btfsc	3,2
  6976  0D2A  2D66               	goto	l6093
  6977                           
  6978                           ;wireless.c: 68: currentTransmitPower = 0;
  6979  0D2B  0021               	movlb	1	; select bank1
  6980  0D2C  01DC               	clrf	_currentTransmitPower^(0+128)
  6981  0D2D                     l6089:	
  6982                           ;wireless.c: 71: for(;currentTransmitPower <= 3; currentTransmitPower++){
  6983                           
  6984  0D2D  3004               	movlw	4
  6985  0D2E  025C               	subwf	_currentTransmitPower^(0+128),w
  6986  0D2F  1803               	btfsc	3,0
  6987  0D30  2D4C               	goto	l6091
  6988                           
  6989                           ;wireless.c: 72: Wireless_changeTransmitPower(currentTransmitPower);
  6990  0D31  085C               	movf	_currentTransmitPower^(0+128),w
  6991  0D32  3195  25E1  318D   	fcall	_Wireless_changeTransmitPower
  6992                           
  6993                           ;wireless.c: 73: Wireless_sendData(&testPayload, 1);
  6994  0D35  0020               	movlb	0	; select bank0
  6995  0D36  01B1               	clrf	Wireless_sendData@length
  6996  0D37  0AB1               	incf	Wireless_sendData@length,f
  6997  0D38  3039               	movlw	(low (Wireless_determineTransmitPower@testPayload| 0))& (0+255)
  6998  0D39  3194  2411  318D   	fcall	_Wireless_sendData
  6999  0D3C                     l1100:	
  7000                           ;wireless.c: 74: while(PORTCbits.RC3);
  7001                           
  7002  0D3C  0020               	movlb	0	; select bank0
  7003  0D3D  198E               	btfsc	14,3	;volatile
  7004  0D3E  2D3C               	goto	l1100
  7005                           
  7006                           ;wireless.c: 76: if(Wireless_isDataTransmitSuccessful())
  7007  0D3F  3193  2368  318D   	fcall	_Wireless_isDataTransmitSuccessful
  7008  0D42  3A00               	xorlw	0
  7009  0D43  1D03               	btfss	3,2
  7010  0D44  2D4C               	goto	l6091
  7011                           
  7012                           ;wireless.c: 77: break;
  7013  0D45  3001               	movlw	1
  7014  0D46  0020               	movlb	0	; select bank0
  7015  0D47  00B5               	movwf	??_Wireless_determineTransmitPower
  7016  0D48  0835               	movf	??_Wireless_determineTransmitPower,w
  7017  0D49  0021               	movlb	1	; select bank1
  7018  0D4A  07DC               	addwf	_currentTransmitPower^(0+128),f
  7019  0D4B  2D2D               	goto	l6089
  7020  0D4C                     l6091:	
  7021                           
  7022                           ;wireless.c: 78: }
  7023                           ;wireless.c: 79: currentTransmitPower = limit( currentTransmitPower, 0, 3);
  7024  0D4C  0021               	movlb	1	; select bank1
  7025  0D4D  085C               	movf	_currentTransmitPower^(0+128),w
  7026  0D4E  0020               	movlb	0	; select bank0
  7027  0D4F  00B5               	movwf	??_Wireless_determineTransmitPower
  7028  0D50  01B6               	clrf	??_Wireless_determineTransmitPower+1
  7029  0D51  0835               	movf	??_Wireless_determineTransmitPower,w
  7030  0D52  00A1               	movwf	limit@val
  7031  0D53  0836               	movf	??_Wireless_determineTransmitPower+1,w
  7032  0D54  00A2               	movwf	limit@val+1
  7033  0D55  3000               	movlw	0
  7034  0D56  00A3               	movwf	limit@min
  7035  0D57  00A4               	movwf	limit@min+1
  7036  0D58  3003               	movlw	3
  7037  0D59  00A5               	movwf	limit@max
  7038  0D5A  3000               	movlw	0
  7039  0D5B  00A6               	movwf	limit@max+1
  7040  0D5C  3196  26C5  318D   	fcall	_limit
  7041  0D5F  0020               	movlb	0	; select bank0
  7042  0D60  0821               	movf	?_limit,w
  7043  0D61  00B7               	movwf	??_Wireless_determineTransmitPower+2
  7044  0D62  0837               	movf	??_Wireless_determineTransmitPower+2,w
  7045  0D63  0021               	movlb	1	; select bank1
  7046  0D64  00DC               	movwf	_currentTransmitPower^(0+128)
  7047                           
  7048                           ;wireless.c: 80: }else{
  7049  0D65  2DBF               	goto	l6143
  7050  0D66                     l6093:	
  7051                           
  7052                           ;wireless.c: 82: latestResult = Wireless_isDataTransmitSuccessful();
  7053  0D66  3193  2368  318D   	fcall	_Wireless_isDataTransmitSuccessful
  7054  0D69  0020               	movlb	0	; select bank0
  7055  0D6A  00B5               	movwf	??_Wireless_determineTransmitPower
  7056  0D6B  0835               	movf	??_Wireless_determineTransmitPower,w
  7057  0D6C  00BA               	movwf	Wireless_determineTransmitPower@latestResult
  7058                           
  7059                           ;wireless.c: 84: if(numOfTransmits>=5){
  7060  0D6D  3005               	movlw	5
  7061  0D6E  0021               	movlb	1	; select bank1
  7062  0D6F  025B               	subwf	Wireless_determineTransmitPower@numOfTransmits^(0+128),w
  7063  0D70  1C03               	skipc
  7064  0D71  2D9D               	goto	l6125
  7065                           
  7066                           ;wireless.c: 85: if(currentTransmitPower > 0 && latestResult && numOfSuccessfulTransmits
      +                           >=4){
  7067  0D72  085C               	movf	_currentTransmitPower^(0+128),w
  7068  0D73  1903               	btfsc	3,2
  7069  0D74  2D84               	goto	l6105
  7070  0D75  0020               	movlb	0	; select bank0
  7071  0D76  083A               	movf	Wireless_determineTransmitPower@latestResult,w
  7072  0D77  1903               	btfsc	3,2
  7073  0D78  2D84               	goto	l6105
  7074  0D79  3004               	movlw	4
  7075  0D7A  0021               	movlb	1	; select bank1
  7076  0D7B  025A               	subwf	Wireless_determineTransmitPower@numOfSuccessfulTransmits^(0+128),w
  7077  0D7C  1C03               	skipc
  7078  0D7D  2D84               	goto	l6105
  7079                           
  7080                           ;wireless.c: 86: Wireless_changeTransmitPower(--currentTransmitPower);
  7081  0D7E  3001               	movlw	1
  7082  0D7F  02DC               	subwf	_currentTransmitPower^(0+128),f
  7083  0D80  085C               	movf	_currentTransmitPower^(0+128),w
  7084  0D81  3195  25E1  318D   	fcall	_Wireless_changeTransmitPower
  7085  0D84                     l6105:	
  7086                           
  7087                           ;wireless.c: 87: }
  7088                           ;wireless.c: 89: numOfTransmits = 0;
  7089  0D84  0021               	movlb	1	; select bank1
  7090  0D85  01DB               	clrf	Wireless_determineTransmitPower@numOfTransmits^(0+128)
  7091                           
  7092                           ;wireless.c: 90: numOfSuccessfulTransmits = 0;
  7093  0D86  01DA               	clrf	Wireless_determineTransmitPower@numOfSuccessfulTransmits^(0+128)
  7094                           
  7095                           ;wireless.c: 91: if(!latestResult && currentTransmitPower<3){
  7096  0D87  0020               	movlb	0	; select bank0
  7097  0D88  083A               	movf	Wireless_determineTransmitPower@latestResult,w
  7098  0D89  1D03               	btfss	3,2
  7099  0D8A  2D9B               	goto	l6121
  7100  0D8B  3003               	movlw	3
  7101  0D8C  0021               	movlb	1	; select bank1
  7102  0D8D  025C               	subwf	_currentTransmitPower^(0+128),w
  7103  0D8E  1803               	skipnc
  7104  0D8F  2D9B               	goto	l6121
  7105                           
  7106                           ;wireless.c: 94: Wireless_changeTransmitPower(++currentTransmitPower);
  7107  0D90  3001               	movlw	1
  7108  0D91  0020               	movlb	0	; select bank0
  7109  0D92  00B5               	movwf	??_Wireless_determineTransmitPower
  7110  0D93  0835               	movf	??_Wireless_determineTransmitPower,w
  7111  0D94  0021               	movlb	1	; select bank1
  7112  0D95  07DC               	addwf	_currentTransmitPower^(0+128),f
  7113  0D96  085C               	movf	_currentTransmitPower^(0+128),w
  7114  0D97  3195  25E1         	fcall	_Wireless_changeTransmitPower
  7115                           
  7116                           ;wireless.c: 95: return 1;
  7117  0D99  3001               	movlw	1
  7118  0D9A  0008               	return
  7119  0D9B                     l6121:	
  7120                           ;wireless.c: 96: } else
  7121                           
  7122                           
  7123                           ;wireless.c: 97: return 0;
  7124  0D9B  3000               	movlw	0
  7125  0D9C  0008               	return
  7126  0D9D                     l6125:	
  7127                           ;wireless.c: 99: }else{
  7128                           
  7129                           
  7130                           ;wireless.c: 101: if(latestResult){
  7131  0D9D  0020               	movlb	0	; select bank0
  7132  0D9E  083A               	movf	Wireless_determineTransmitPower@latestResult,w
  7133  0D9F  1903               	btfsc	3,2
  7134  0DA0  2DAD               	goto	l6129
  7135                           
  7136                           ;wireless.c: 102: numOfTransmits++;
  7137  0DA1  3001               	movlw	1
  7138  0DA2  00B5               	movwf	??_Wireless_determineTransmitPower
  7139  0DA3  0835               	movf	??_Wireless_determineTransmitPower,w
  7140  0DA4  0021               	movlb	1	; select bank1
  7141  0DA5  07DB               	addwf	Wireless_determineTransmitPower@numOfTransmits^(0+128),f
  7142                           
  7143                           ;wireless.c: 103: numOfSuccessfulTransmits++;
  7144  0DA6  3001               	movlw	1
  7145  0DA7  0020               	movlb	0	; select bank0
  7146  0DA8  00B5               	movwf	??_Wireless_determineTransmitPower
  7147  0DA9  0835               	movf	??_Wireless_determineTransmitPower,w
  7148  0DAA  0021               	movlb	1	; select bank1
  7149  0DAB  07DA               	addwf	Wireless_determineTransmitPower@numOfSuccessfulTransmits^(0+128),f
  7150                           
  7151                           ;wireless.c: 104: }else if(currentTransmitPower<3){
  7152  0DAC  2DBF               	goto	l6143
  7153  0DAD                     l6129:	
  7154  0DAD  3003               	movlw	3
  7155  0DAE  0021               	movlb	1	; select bank1
  7156  0DAF  025C               	subwf	_currentTransmitPower^(0+128),w
  7157  0DB0  1803               	skipnc
  7158  0DB1  2DBD               	goto	l6139
  7159                           
  7160                           ;wireless.c: 105: Wireless_changeTransmitPower(++currentTransmitPower);
  7161  0DB2  3001               	movlw	1
  7162  0DB3  0020               	movlb	0	; select bank0
  7163  0DB4  00B5               	movwf	??_Wireless_determineTransmitPower
  7164  0DB5  0835               	movf	??_Wireless_determineTransmitPower,w
  7165  0DB6  0021               	movlb	1	; select bank1
  7166  0DB7  07DC               	addwf	_currentTransmitPower^(0+128),f
  7167  0DB8  085C               	movf	_currentTransmitPower^(0+128),w
  7168  0DB9  3195  25E1         	fcall	_Wireless_changeTransmitPower
  7169                           
  7170                           ;wireless.c: 106: return 1;
  7171  0DBB  3001               	movlw	1
  7172  0DBC  0008               	return
  7173  0DBD                     l6139:	
  7174                           ;wireless.c: 107: } else
  7175                           
  7176                           
  7177                           ;wireless.c: 108: return 0;
  7178  0DBD  3000               	movlw	0
  7179  0DBE  0008               	return
  7180  0DBF                     l6143:	
  7181                           
  7182                           ;wireless.c: 110: }
  7183                           ;wireless.c: 111: }
  7184                           ;wireless.c: 114: return !latestResult;
  7185  0DBF  0020               	movlb	0	; select bank0
  7186  0DC0  083A               	movf	Wireless_determineTransmitPower@latestResult,w
  7187  0DC1  1D03               	btfss	3,2
  7188  0DC2  2DC5               	goto	u5600
  7189  0DC3  3001               	movlw	1
  7190  0DC4  0008               	return
  7191  0DC5                     u5600:	
  7192  0DC5  3000               	movlw	0
  7193  0DC6  0008               	return
  7194  0DC7                     __end_of_Wireless_determineTransmitPower:	
  7195                           
  7196                           	psect	text8
  7197  16C5                     __ptext8:	
  7198 ;; *************** function _limit *****************
  7199 ;; Defined at:
  7200 ;;		line 12 in file "common.c"
  7201 ;; Parameters:    Size  Location     Type
  7202 ;;  val             2    1[BANK0 ] int 
  7203 ;;  min             2    3[BANK0 ] int 
  7204 ;;  max             2    5[BANK0 ] int 
  7205 ;; Auto vars:     Size  Location     Type
  7206 ;;		None
  7207 ;; Return value:  Size  Location     Type
  7208 ;;                  2    1[BANK0 ] int 
  7209 ;; Registers used:
  7210 ;;		wreg
  7211 ;; Tracked objects:
  7212 ;;		On entry : 0/0
  7213 ;;		On exit  : 0/0
  7214 ;;		Unchanged: 0/0
  7215 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7216 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7217 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7218 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7219 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7220 ;;Total ram usage:        7 bytes
  7221 ;; Hardware stack levels used:    1
  7222 ;; Hardware stack levels required when called:    4
  7223 ;; This function calls:
  7224 ;;		Nothing
  7225 ;; This function is called by:
  7226 ;;		_Wireless_determineTransmitPower
  7227 ;; This function uses a non-reentrant model
  7228 ;;
  7229                           
  7230                           
  7231                           ;psect for function _limit
  7232  16C5                     _limit:	
  7233                           
  7234                           ;common.c: 13: if(val<min)
  7235                           
  7236                           ;incstack = 0
  7237                           ; Regs used in _limit: [wreg]
  7238  16C5  0020               	movlb	0	; select bank0
  7239  16C6  0822               	movf	limit@val+1,w
  7240  16C7  3A80               	xorlw	128
  7241  16C8  00A7               	movwf	??_limit
  7242  16C9  0824               	movf	limit@min+1,w
  7243  16CA  3A80               	xorlw	128
  7244  16CB  0227               	subwf	??_limit,w
  7245  16CC  1D03               	skipz
  7246  16CD  2ED0               	goto	u5285
  7247  16CE  0823               	movf	limit@min,w
  7248  16CF  0221               	subwf	limit@val,w
  7249  16D0                     u5285:	
  7250  16D0  1803               	skipnc
  7251  16D1  2ED8               	goto	l5809
  7252                           
  7253                           ;common.c: 14: return min;
  7254  16D2  0020               	movlb	0	; select bank0
  7255  16D3  0824               	movf	limit@min+1,w
  7256  16D4  00A2               	movwf	?_limit+1
  7257  16D5  0823               	movf	limit@min,w
  7258  16D6  00A1               	movwf	?_limit
  7259  16D7  0008               	return
  7260  16D8                     l5809:	
  7261                           
  7262                           ;common.c: 15: if(val>max)
  7263  16D8  0020               	movlb	0	; select bank0
  7264  16D9  0826               	movf	limit@max+1,w
  7265  16DA  3A80               	xorlw	128
  7266  16DB  00A7               	movwf	??_limit
  7267  16DC  0822               	movf	limit@val+1,w
  7268  16DD  3A80               	xorlw	128
  7269  16DE  0227               	subwf	??_limit,w
  7270  16DF  1D03               	skipz
  7271  16E0  2EE3               	goto	u5295
  7272  16E1  0821               	movf	limit@val,w
  7273  16E2  0225               	subwf	limit@max,w
  7274  16E3                     u5295:	
  7275  16E3  1803               	skipnc
  7276  16E4  0008               	return
  7277                           
  7278                           ;common.c: 16: return max;
  7279  16E5  0020               	movlb	0	; select bank0
  7280  16E6  0826               	movf	limit@max+1,w
  7281  16E7  00A2               	movwf	?_limit+1
  7282  16E8  0825               	movf	limit@max,w
  7283  16E9  00A1               	movwf	?_limit
  7284  16EA  0008               	return
  7285  16EB                     __end_of_limit:	
  7286                           ;common.c: 17: return val;
  7287                           
  7288                           
  7289                           	psect	text9
  7290  1411                     __ptext9:	
  7291 ;; *************** function _Wireless_sendData *****************
  7292 ;; Defined at:
  7293 ;;		line 126 in file "wireless.c"
  7294 ;; Parameters:    Size  Location     Type
  7295 ;;  payload         1    wreg     PTR unsigned char 
  7296 ;;		 -> Wireless_packageData@data(6), Wireless_determineTransmitPower@testPayload(1), 
  7297 ;;  length          1   17[BANK0 ] unsigned char 
  7298 ;; Auto vars:     Size  Location     Type
  7299 ;;  payload         1   20[BANK0 ] PTR unsigned char 
  7300 ;;		 -> Wireless_packageData@data(6), Wireless_determineTransmitPower@testPayload(1), 
  7301 ;;  status          1   19[BANK0 ] unsigned char 
  7302 ;; Return value:  Size  Location     Type
  7303 ;;                  1    wreg      void 
  7304 ;; Registers used:
  7305 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  7306 ;; Tracked objects:
  7307 ;;		On entry : 0/0
  7308 ;;		On exit  : 0/0
  7309 ;;		Unchanged: 0/0
  7310 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7311 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7312 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7313 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7314 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7315 ;;Total ram usage:        4 bytes
  7316 ;; Hardware stack levels used:    1
  7317 ;; Hardware stack levels required when called:    9
  7318 ;; This function calls:
  7319 ;;		_RF_GetStatus
  7320 ;;		_RF_ResetStatusIRQ
  7321 ;;		_RF_TxPayload
  7322 ;; This function is called by:
  7323 ;;		_Wireless_determineTransmitPower
  7324 ;;		_Wireless_packageData
  7325 ;; This function uses a non-reentrant model
  7326 ;;
  7327                           
  7328                           
  7329                           ;psect for function _Wireless_sendData
  7330  1411                     _Wireless_sendData:	
  7331                           
  7332                           ;incstack = 0
  7333                           ; Regs used in _Wireless_sendData: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  7334                           ;Wireless_sendData@payload stored from wreg
  7335  1411  0020               	movlb	0	; select bank0
  7336  1412  00B4               	movwf	Wireless_sendData@payload
  7337                           
  7338                           ;wireless.c: 128: char status;
  7339                           ;wireless.c: 130: RF_ResetStatusIRQ(0x40|0x20|0x10);
  7340  1413  3070               	movlw	112
  7341  1414  3196  261D  3194   	fcall	_RF_ResetStatusIRQ
  7342                           
  7343                           ;wireless.c: 131: status = RF_GetStatus();
  7344  1417  3192  22BC  3194   	fcall	_RF_GetStatus
  7345  141A  0020               	movlb	0	; select bank0
  7346  141B  00B2               	movwf	??_Wireless_sendData
  7347  141C  0832               	movf	??_Wireless_sendData,w
  7348  141D  00B3               	movwf	Wireless_sendData@status
  7349                           
  7350                           ;wireless.c: 132: RF_TxPayload(payload, length);
  7351  141E  0831               	movf	Wireless_sendData@length,w
  7352  141F  00B2               	movwf	??_Wireless_sendData
  7353  1420  0832               	movf	??_Wireless_sendData,w
  7354  1421  00AE               	movwf	RF_TxPayload@payloadSize
  7355  1422  0834               	movf	Wireless_sendData@payload,w
  7356  1423  3195  2535         	fcall	_RF_TxPayload
  7357  1425  0008               	return
  7358  1426                     __end_of_Wireless_sendData:	
  7359                           
  7360                           	psect	text10
  7361  1535                     __ptext10:	
  7362 ;; *************** function _RF_TxPayload *****************
  7363 ;; Defined at:
  7364 ;;		line 173 in file "nrf24.c"
  7365 ;; Parameters:    Size  Location     Type
  7366 ;;  payload         1    wreg     PTR unsigned char 
  7367 ;;		 -> Wireless_packageData@data(6), Wireless_determineTransmitPower@testPayload(1), 
  7368 ;;  payloadSize     1   14[BANK0 ] unsigned char 
  7369 ;; Auto vars:     Size  Location     Type
  7370 ;;  payload         1   16[BANK0 ] PTR unsigned char 
  7371 ;;		 -> Wireless_packageData@data(6), Wireless_determineTransmitPower@testPayload(1), 
  7372 ;; Return value:  Size  Location     Type
  7373 ;;                  1    wreg      void 
  7374 ;; Registers used:
  7375 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  7376 ;; Tracked objects:
  7377 ;;		On entry : 0/0
  7378 ;;		On exit  : 0/0
  7379 ;;		Unchanged: 0/0
  7380 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7381 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7382 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7383 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7384 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7385 ;;Total ram usage:        3 bytes
  7386 ;; Hardware stack levels used:    1
  7387 ;; Hardware stack levels required when called:    8
  7388 ;; This function calls:
  7389 ;;		_RF_Write
  7390 ;;		_RF_WriteRegisterData
  7391 ;; This function is called by:
  7392 ;;		_Wireless_sendData
  7393 ;; This function uses a non-reentrant model
  7394 ;;
  7395                           
  7396                           
  7397                           ;psect for function _RF_TxPayload
  7398  1535                     _RF_TxPayload:	
  7399                           
  7400                           ;incstack = 0
  7401                           ; Regs used in _RF_TxPayload: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  7402                           ;RF_TxPayload@payload stored from wreg
  7403  1535  0020               	movlb	0	; select bank0
  7404  1536  00B0               	movwf	RF_TxPayload@payload
  7405                           
  7406                           ;nrf24.c: 174: RF_Write(0xE1);
  7407  1537  30E1               	movlw	225
  7408  1538  3193  2393  3195   	fcall	_RF_Write
  7409                           
  7410                           ;nrf24.c: 175: RF_WriteRegisterData(0xA0, payload, payloadSize);
  7411  153B  0020               	movlb	0	; select bank0
  7412  153C  0830               	movf	RF_TxPayload@payload,w
  7413  153D  00A9               	movwf	RF_WriteRegisterData@buf
  7414  153E  3000               	movlw	0
  7415  153F  00AA               	movwf	RF_WriteRegisterData@buf+1
  7416  1540  082E               	movf	RF_TxPayload@payloadSize,w
  7417  1541  00AF               	movwf	??_RF_TxPayload
  7418  1542  082F               	movf	??_RF_TxPayload,w
  7419  1543  00AB               	movwf	RF_WriteRegisterData@bufSize
  7420  1544  30A0               	movlw	160
  7421  1545  3195  258A  3195   	fcall	_RF_WriteRegisterData
  7422                           
  7423                           ;nrf24.c: 176: do { LATCbits.LATC2 = 1; } while(0);
  7424  1548  0022               	movlb	2	; select bank2
  7425  1549  150E               	bsf	14,2	;volatile
  7426                           
  7427                           ;nrf24.c: 177: _delay((unsigned long)((15)*(8000000/4000000.0)));
  7428  154A  300A               	movlw	10
  7429  154B                     u7207:	
  7430  154B  0B89               	decfsz	9,f
  7431  154C  2D4B               	goto	u7207
  7432                           
  7433                           ;nrf24.c: 178: do { LATCbits.LATC2 = 0; } while(0);
  7434  154D  0022               	movlb	2	; select bank2
  7435  154E  110E               	bcf	14,2	;volatile
  7436  154F  0008               	return
  7437  1550                     __end_of_RF_TxPayload:	
  7438                           
  7439                           	psect	text11
  7440  1393                     __ptext11:	
  7441 ;; *************** function _RF_Write *****************
  7442 ;; Defined at:
  7443 ;;		line 139 in file "nrf24.c"
  7444 ;; Parameters:    Size  Location     Type
  7445 ;;  val             1    wreg     unsigned char 
  7446 ;; Auto vars:     Size  Location     Type
  7447 ;;  val             1    3[BANK0 ] unsigned char 
  7448 ;; Return value:  Size  Location     Type
  7449 ;;                  1    wreg      void 
  7450 ;; Registers used:
  7451 ;;		wreg, status,2, status,0, pclath, cstack
  7452 ;; Tracked objects:
  7453 ;;		On entry : 0/0
  7454 ;;		On exit  : 0/0
  7455 ;;		Unchanged: 0/0
  7456 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7457 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7458 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7459 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7460 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7461 ;;Total ram usage:        1 bytes
  7462 ;; Hardware stack levels used:    1
  7463 ;; Hardware stack levels required when called:    6
  7464 ;; This function calls:
  7465 ;;		_SPI_WriteRead
  7466 ;; This function is called by:
  7467 ;;		_RF_TxPayload
  7468 ;; This function uses a non-reentrant model
  7469 ;;
  7470                           
  7471                           
  7472                           ;psect for function _RF_Write
  7473  1393                     _RF_Write:	
  7474                           
  7475                           ;incstack = 0
  7476                           ; Regs used in _RF_Write: [wreg+status,2+status,0+pclath+cstack]
  7477                           ;RF_Write@val stored from wreg
  7478  1393  0020               	movlb	0	; select bank0
  7479  1394  00A3               	movwf	RF_Write@val
  7480                           
  7481                           ;nrf24.c: 140: do { LATCbits.LATC1 = 0; } while(0);
  7482  1395  0022               	movlb	2	; select bank2
  7483  1396  108E               	bcf	14,1	;volatile
  7484                           
  7485                           ;nrf24.c: 141: (void)SPI_WriteRead(val);
  7486  1397  0020               	movlb	0	; select bank0
  7487  1398  0823               	movf	RF_Write@val,w
  7488  1399  3192  22D9  3193   	fcall	_SPI_WriteRead
  7489                           
  7490                           ;nrf24.c: 142: do { LATCbits.LATC1 = 1; } while(0);
  7491  139C  0022               	movlb	2	; select bank2
  7492  139D  148E               	bsf	14,1	;volatile
  7493                           
  7494                           ;nrf24.c: 143: _delay((unsigned long)((10)*(8000000/4000000.0)));
  7495  139E  3006               	movlw	6
  7496  139F                     u7217:	
  7497  139F  0B89               	decfsz	9,f
  7498  13A0  2B9F               	goto	u7217
  7499  13A1  3200               	nop2
  7500  13A2  0008               	return
  7501  13A3                     __end_of_RF_Write:	
  7502                           
  7503                           	psect	text12
  7504  1368                     __ptext12:	
  7505 ;; *************** function _Wireless_isDataTransmitSuccessful *****************
  7506 ;; Defined at:
  7507 ;;		line 195 in file "wireless.c"
  7508 ;; Parameters:    Size  Location     Type
  7509 ;;		None
  7510 ;; Auto vars:     Size  Location     Type
  7511 ;;  status          1    6[BANK0 ] unsigned char 
  7512 ;; Return value:  Size  Location     Type
  7513 ;;                  1    wreg      unsigned char 
  7514 ;; Registers used:
  7515 ;;		wreg, pclath, cstack
  7516 ;; Tracked objects:
  7517 ;;		On entry : 0/0
  7518 ;;		On exit  : 0/0
  7519 ;;		Unchanged: 0/0
  7520 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7521 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7522 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7523 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7524 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7525 ;;Total ram usage:        2 bytes
  7526 ;; Hardware stack levels used:    1
  7527 ;; Hardware stack levels required when called:    8
  7528 ;; This function calls:
  7529 ;;		_RF_GetStatus
  7530 ;; This function is called by:
  7531 ;;		_Wireless_determineTransmitPower
  7532 ;; This function uses a non-reentrant model
  7533 ;;
  7534                           
  7535                           
  7536                           ;psect for function _Wireless_isDataTransmitSuccessful
  7537  1368                     _Wireless_isDataTransmitSuccessful:	
  7538                           
  7539                           ;wireless.c: 196: char status = RF_GetStatus();
  7540                           
  7541                           ;incstack = 0
  7542                           ; Regs used in _Wireless_isDataTransmitSuccessful: [wreg+pclath+cstack]
  7543  1368  3192  22BC  3193   	fcall	_RF_GetStatus
  7544  136B  0020               	movlb	0	; select bank0
  7545  136C  00A5               	movwf	??_Wireless_isDataTransmitSuccessful
  7546  136D  0825               	movf	??_Wireless_isDataTransmitSuccessful,w
  7547  136E  00A6               	movwf	Wireless_isDataTransmitSuccessful@status
  7548                           
  7549                           ;wireless.c: 197: if(status & 0x20)
  7550  136F  1EA6               	btfss	Wireless_isDataTransmitSuccessful@status,5
  7551  1370  2B73               	goto	l5863
  7552                           
  7553                           ;wireless.c: 198: return 1;
  7554  1371  3001               	movlw	1
  7555  1372  0008               	return
  7556  1373                     l5863:	
  7557                           
  7558                           ;wireless.c: 199: else
  7559                           ;wireless.c: 200: return 0;
  7560  1373  3000               	movlw	0
  7561  1374  0008               	return
  7562  1375                     __end_of_Wireless_isDataTransmitSuccessful:	
  7563                           
  7564                           	psect	text13
  7565  12BC                     __ptext13:	
  7566 ;; *************** function _RF_GetStatus *****************
  7567 ;; Defined at:
  7568 ;;		line 150 in file "nrf24.c"
  7569 ;; Parameters:    Size  Location     Type
  7570 ;;		None
  7571 ;; Auto vars:     Size  Location     Type
  7572 ;;		None
  7573 ;; Return value:  Size  Location     Type
  7574 ;;                  1    wreg      unsigned char 
  7575 ;; Registers used:
  7576 ;;		wreg, pclath, cstack
  7577 ;; Tracked objects:
  7578 ;;		On entry : 0/0
  7579 ;;		On exit  : 0/0
  7580 ;;		Unchanged: 0/0
  7581 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7582 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7583 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7584 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7585 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7586 ;;Total ram usage:        0 bytes
  7587 ;; Hardware stack levels used:    1
  7588 ;; Hardware stack levels required when called:    7
  7589 ;; This function calls:
  7590 ;;		_RF_WriteRead
  7591 ;; This function is called by:
  7592 ;;		_Wireless_sendData
  7593 ;;		_Wireless_isDataTransmitSuccessful
  7594 ;; This function uses a non-reentrant model
  7595 ;;
  7596                           
  7597                           
  7598                           ;psect for function _RF_GetStatus
  7599  12BC                     _RF_GetStatus:	
  7600                           
  7601                           ;nrf24.c: 151: return RF_WriteRead(0xFF);
  7602                           
  7603                           ;incstack = 0
  7604                           ; Regs used in _RF_GetStatus: [wreg+pclath+cstack]
  7605  12BC  30FF               	movlw	255
  7606  12BD  3194  2452         	fcall	_RF_WriteRead
  7607  12BF  0008               	return
  7608  12C0                     __end_of_RF_GetStatus:	
  7609                           
  7610                           	psect	text14
  7611  1452                     __ptext14:	
  7612 ;; *************** function _RF_WriteRead *****************
  7613 ;; Defined at:
  7614 ;;		line 126 in file "nrf24.c"
  7615 ;; Parameters:    Size  Location     Type
  7616 ;;  val             1    wreg     unsigned char 
  7617 ;; Auto vars:     Size  Location     Type
  7618 ;;  val             1    4[BANK0 ] unsigned char 
  7619 ;; Return value:  Size  Location     Type
  7620 ;;                  1    wreg      unsigned char 
  7621 ;; Registers used:
  7622 ;;		wreg, pclath, cstack
  7623 ;; Tracked objects:
  7624 ;;		On entry : 0/0
  7625 ;;		On exit  : 0/0
  7626 ;;		Unchanged: 0/0
  7627 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7628 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7629 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7630 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7631 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7632 ;;Total ram usage:        2 bytes
  7633 ;; Hardware stack levels used:    1
  7634 ;; Hardware stack levels required when called:    6
  7635 ;; This function calls:
  7636 ;;		_SPI_WriteRead
  7637 ;; This function is called by:
  7638 ;;		_RF_GetStatus
  7639 ;; This function uses a non-reentrant model
  7640 ;;
  7641                           
  7642                           
  7643                           ;psect for function _RF_WriteRead
  7644  1452                     _RF_WriteRead:	
  7645                           
  7646                           ;incstack = 0
  7647                           ; Regs used in _RF_WriteRead: [wreg+pclath+cstack]
  7648                           ;RF_WriteRead@val stored from wreg
  7649  1452  0020               	movlb	0	; select bank0
  7650  1453  00A4               	movwf	RF_WriteRead@val
  7651                           
  7652                           ;nrf24.c: 127: do { LATCbits.LATC1 = 0; } while(0);
  7653  1454  0022               	movlb	2	; select bank2
  7654  1455  108E               	bcf	14,1	;volatile
  7655                           
  7656                           ;nrf24.c: 128: val = SPI_WriteRead(val);
  7657  1456  0020               	movlb	0	; select bank0
  7658  1457  0824               	movf	RF_WriteRead@val,w
  7659  1458  3192  22D9  3194   	fcall	_SPI_WriteRead
  7660  145B  0020               	movlb	0	; select bank0
  7661  145C  00A3               	movwf	??_RF_WriteRead
  7662  145D  0823               	movf	??_RF_WriteRead,w
  7663  145E  00A4               	movwf	RF_WriteRead@val
  7664                           
  7665                           ;nrf24.c: 129: do { LATCbits.LATC1 = 1; } while(0);
  7666  145F  0022               	movlb	2	; select bank2
  7667  1460  148E               	bsf	14,1	;volatile
  7668                           
  7669                           ;nrf24.c: 130: _delay((unsigned long)((10)*(8000000/4000000.0)));
  7670  1461  3006               	movlw	6
  7671  1462                     u7227:	
  7672  1462  0B89               	decfsz	9,f
  7673  1463  2C62               	goto	u7227
  7674  1464  3200               	nop2
  7675                           
  7676                           ;nrf24.c: 131: return val;
  7677  1465  0020               	movlb	0	; select bank0
  7678  1466  0824               	movf	RF_WriteRead@val,w
  7679  1467  0008               	return
  7680  1468                     __end_of_RF_WriteRead:	
  7681                           
  7682                           	psect	text15
  7683  15E1                     __ptext15:	
  7684 ;; *************** function _Wireless_changeTransmitPower *****************
  7685 ;; Defined at:
  7686 ;;		line 116 in file "wireless.c"
  7687 ;; Parameters:    Size  Location     Type
  7688 ;;  power           1    wreg     unsigned char 
  7689 ;; Auto vars:     Size  Location     Type
  7690 ;;  power           1   16[BANK0 ] unsigned char 
  7691 ;;  val             1   17[BANK0 ] unsigned char 
  7692 ;; Return value:  Size  Location     Type
  7693 ;;                  1    wreg      void 
  7694 ;; Registers used:
  7695 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7696 ;; Tracked objects:
  7697 ;;		On entry : 0/0
  7698 ;;		On exit  : 0/0
  7699 ;;		Unchanged: 0/0
  7700 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7701 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7702 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7703 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7704 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7705 ;;Total ram usage:        3 bytes
  7706 ;; Hardware stack levels used:    1
  7707 ;; Hardware stack levels required when called:    8
  7708 ;; This function calls:
  7709 ;;		_RF_ReadRegisterData
  7710 ;;		_RF_WriteRegister
  7711 ;; This function is called by:
  7712 ;;		_Wireless_determineTransmitPower
  7713 ;; This function uses a non-reentrant model
  7714 ;;
  7715                           
  7716                           
  7717                           ;psect for function _Wireless_changeTransmitPower
  7718  15E1                     _Wireless_changeTransmitPower:	
  7719                           
  7720                           ;incstack = 0
  7721                           ; Regs used in _Wireless_changeTransmitPower: [wreg+fsr1l+fsr1h+status,2+status,0+pclath
      +                          +cstack]
  7722                           ;Wireless_changeTransmitPower@power stored from wreg
  7723  15E1  0020               	movlb	0	; select bank0
  7724  15E2  00B0               	movwf	Wireless_changeTransmitPower@power
  7725                           
  7726                           ;wireless.c: 119: u8 val;
  7727                           ;wireless.c: 121: RF_ReadRegisterData(0x06, &val, 1);
  7728  15E3  3031               	movlw	(low (Wireless_changeTransmitPower@val| 0))& (0+255)
  7729  15E4  00AF               	movwf	??_Wireless_changeTransmitPower
  7730  15E5  082F               	movf	??_Wireless_changeTransmitPower,w
  7731  15E6  00AA               	movwf	RF_ReadRegisterData@buf
  7732  15E7  01AB               	clrf	RF_ReadRegisterData@bufSize
  7733  15E8  0AAB               	incf	RF_ReadRegisterData@bufSize,f
  7734  15E9  3006               	movlw	6
  7735  15EA  3195  25C4  3195   	fcall	_RF_ReadRegisterData
  7736                           
  7737                           ;wireless.c: 122: val &= 0b11111001;
  7738  15ED  30F9               	movlw	249
  7739  15EE  0020               	movlb	0	; select bank0
  7740  15EF  00AF               	movwf	??_Wireless_changeTransmitPower
  7741  15F0  082F               	movf	??_Wireless_changeTransmitPower,w
  7742  15F1  05B1               	andwf	Wireless_changeTransmitPower@val,f
  7743                           
  7744                           ;wireless.c: 123: val |= (power <<1);
  7745  15F2  3530               	lslf	Wireless_changeTransmitPower@power,w
  7746  15F3  00AF               	movwf	??_Wireless_changeTransmitPower
  7747  15F4  082F               	movf	??_Wireless_changeTransmitPower,w
  7748  15F5  04B1               	iorwf	Wireless_changeTransmitPower@val,f
  7749                           
  7750                           ;wireless.c: 124: RF_WriteRegister(0x06, val);
  7751  15F6  0831               	movf	Wireless_changeTransmitPower@val,w
  7752  15F7  00AF               	movwf	??_Wireless_changeTransmitPower
  7753  15F8  082F               	movf	??_Wireless_changeTransmitPower,w
  7754  15F9  00A3               	movwf	RF_WriteRegister@val
  7755  15FA  3006               	movlw	6
  7756  15FB  3194  2426         	fcall	_RF_WriteRegister
  7757  15FD  0008               	return
  7758  15FE                     __end_of_Wireless_changeTransmitPower:	
  7759                           
  7760                           	psect	text16
  7761  0B87                     __ptext16:	
  7762 ;; *************** function _Wireless_checkDataReceived *****************
  7763 ;; Defined at:
  7764 ;;		line 203 in file "wireless.c"
  7765 ;; Parameters:    Size  Location     Type
  7766 ;;		None
  7767 ;; Auto vars:     Size  Location     Type
  7768 ;;  data            4   23[BANK0 ] unsigned char [4]
  7769 ;;  channel         1   27[BANK0 ] unsigned char 
  7770 ;; Return value:  Size  Location     Type
  7771 ;;                  1    wreg      void 
  7772 ;; Registers used:
  7773 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7774 ;; Tracked objects:
  7775 ;;		On entry : 0/0
  7776 ;;		On exit  : 0/0
  7777 ;;		Unchanged: 0/0
  7778 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7779 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7780 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7781 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7782 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7783 ;;Total ram usage:        9 bytes
  7784 ;; Hardware stack levels used:    1
  7785 ;; Hardware stack levels required when called:    9
  7786 ;; This function calls:
  7787 ;;		_DOOR_resetPos
  7788 ;;		_DOOR_update
  7789 ;;		_RF_DataIsReady
  7790 ;;		_RF_RxPayload
  7791 ;;		___lmul
  7792 ;; This function is called by:
  7793 ;;		_Wireless_packageData
  7794 ;; This function uses a non-reentrant model
  7795 ;;
  7796                           
  7797                           
  7798                           ;psect for function _Wireless_checkDataReceived
  7799  0B87                     _Wireless_checkDataReceived:	
  7800  0B87                     l1143:	
  7801                           ;incstack = 0
  7802                           ; Regs used in _Wireless_checkDataReceived: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+c
      +                          stack]
  7803                           ;wireless.c: 210: char channel;
  7804                           ;wireless.c: 211: char data[4];
  7805                           ;wireless.c: 212: do
  7806                           
  7807                           
  7808                           ;wireless.c: 213: {
  7809                           ;wireless.c: 214: if(RF_DataIsReady(&channel))
  7810  0B87  303B               	movlw	(low (Wireless_checkDataReceived@channel| 0))& (0+255)
  7811  0B88  3195  25A7  318B   	fcall	_RF_DataIsReady
  7812  0B8B  3A00               	xorlw	0
  7813  0B8C  1903               	skipnz
  7814  0B8D  2BF9               	goto	l6211
  7815                           
  7816                           ;wireless.c: 215: {
  7817                           ;wireless.c: 216: RF_RxPayload(data, 4);
  7818  0B8E  3004               	movlw	4
  7819  0B8F  0020               	movlb	0	; select bank0
  7820  0B90  00B3               	movwf	??_Wireless_checkDataReceived
  7821  0B91  0833               	movf	??_Wireless_checkDataReceived,w
  7822  0B92  00AF               	movwf	RF_RxPayload@payloadSize
  7823  0B93  3037               	movlw	(low (Wireless_checkDataReceived@data| 0))& (0+255)
  7824  0B94  3193  23E9  318B   	fcall	_RF_RxPayload
  7825                           
  7826                           ;wireless.c: 217: if(data[0] & 0x01)
  7827  0B97  0020               	movlb	0	; select bank0
  7828  0B98  1C37               	btfss	Wireless_checkDataReceived@data,0
  7829  0B99  2BA3               	goto	l6197
  7830                           
  7831                           ;wireless.c: 218: {
  7832                           ;wireless.c: 219: DOOR_update(doorOpenAngle,data[1]);
  7833  0B9A  0838               	movf	Wireless_checkDataReceived@data+1,w
  7834  0B9B  00B3               	movwf	??_Wireless_checkDataReceived
  7835  0B9C  0833               	movf	??_Wireless_checkDataReceived,w
  7836  0B9D  00A7               	movwf	DOOR_update@closedAngle
  7837  0B9E  0021               	movlb	1	; select bank1
  7838  0B9F  085E               	movf	_doorOpenAngle^(0+128),w
  7839  0BA0  3194  243C  318B   	fcall	_DOOR_update
  7840  0BA3                     l6197:	
  7841                           
  7842                           ;wireless.c: 220: }
  7843                           ;wireless.c: 221: if(data[0] & 0x02)
  7844  0BA3  0020               	movlb	0	; select bank0
  7845  0BA4  1CB7               	btfss	Wireless_checkDataReceived@data,1
  7846  0BA5  2BB0               	goto	l6201
  7847                           
  7848                           ;wireless.c: 222: {
  7849                           ;wireless.c: 223: DOOR_update(data[2],doorClosedAngle);
  7850  0BA6  0021               	movlb	1	; select bank1
  7851  0BA7  085D               	movf	_doorClosedAngle^(0+128),w
  7852  0BA8  0020               	movlb	0	; select bank0
  7853  0BA9  00B3               	movwf	??_Wireless_checkDataReceived
  7854  0BAA  0833               	movf	??_Wireless_checkDataReceived,w
  7855  0BAB  00A7               	movwf	DOOR_update@closedAngle
  7856  0BAC  0839               	movf	Wireless_checkDataReceived@data+2,w
  7857  0BAD  3194  243C  318B   	fcall	_DOOR_update
  7858  0BB0                     l6201:	
  7859                           
  7860                           ;wireless.c: 224: }
  7861                           ;wireless.c: 225: if(data[0] & 0x04)
  7862  0BB0  0020               	movlb	0	; select bank0
  7863  0BB1  1D37               	btfss	Wireless_checkDataReceived@data,2
  7864  0BB2  2BF3               	goto	l6207
  7865                           
  7866                           ;wireless.c: 226: {
  7867                           ;wireless.c: 227: sensorUpdatePeriod=data[3];
  7868  0BB3  083A               	movf	Wireless_checkDataReceived@data+3,w
  7869  0BB4  00B3               	movwf	??_Wireless_checkDataReceived
  7870  0BB5  01B4               	clrf	??_Wireless_checkDataReceived+1
  7871  0BB6  01B5               	clrf	??_Wireless_checkDataReceived+2
  7872  0BB7  01B6               	clrf	??_Wireless_checkDataReceived+3
  7873  0BB8  0836               	movf	??_Wireless_checkDataReceived+3,w
  7874  0BB9  0022               	movlb	2	; select bank2
  7875  0BBA  00ED               	movwf	(_sensorUpdatePeriod+3)^(0+256)
  7876  0BBB  0020               	movlb	0	; select bank0
  7877  0BBC  0835               	movf	??_Wireless_checkDataReceived+2,w
  7878  0BBD  0022               	movlb	2	; select bank2
  7879  0BBE  00EC               	movwf	(_sensorUpdatePeriod+2)^(0+256)
  7880  0BBF  0020               	movlb	0	; select bank0
  7881  0BC0  0834               	movf	??_Wireless_checkDataReceived+1,w
  7882  0BC1  0022               	movlb	2	; select bank2
  7883  0BC2  00EB               	movwf	(_sensorUpdatePeriod+1)^(0+256)
  7884  0BC3  0020               	movlb	0	; select bank0
  7885  0BC4  0833               	movf	??_Wireless_checkDataReceived,w
  7886  0BC5  0022               	movlb	2	; select bank2
  7887  0BC6  00EA               	movwf	_sensorUpdatePeriod^(0+256)
  7888                           
  7889                           ;wireless.c: 228: sensorUpdatePeriod*=1000;
  7890  0BC7  3000               	movlw	0
  7891  0BC8  0020               	movlb	0	; select bank0
  7892  0BC9  00A4               	movwf	___lmul@multiplier+3
  7893  0BCA  3000               	movlw	0
  7894  0BCB  00A3               	movwf	___lmul@multiplier+2
  7895  0BCC  3003               	movlw	3
  7896  0BCD  00A2               	movwf	___lmul@multiplier+1
  7897  0BCE  30E8               	movlw	232
  7898  0BCF  00A1               	movwf	___lmul@multiplier
  7899  0BD0  0022               	movlb	2	; select bank2
  7900  0BD1  086D               	movf	(_sensorUpdatePeriod+3)^(0+256),w
  7901  0BD2  0020               	movlb	0	; select bank0
  7902  0BD3  00A8               	movwf	___lmul@multiplicand+3
  7903  0BD4  0022               	movlb	2	; select bank2
  7904  0BD5  086C               	movf	(_sensorUpdatePeriod+2)^(0+256),w
  7905  0BD6  0020               	movlb	0	; select bank0
  7906  0BD7  00A7               	movwf	___lmul@multiplicand+2
  7907  0BD8  0022               	movlb	2	; select bank2
  7908  0BD9  086B               	movf	(_sensorUpdatePeriod+1)^(0+256),w
  7909  0BDA  0020               	movlb	0	; select bank0
  7910  0BDB  00A6               	movwf	___lmul@multiplicand+1
  7911  0BDC  0022               	movlb	2	; select bank2
  7912  0BDD  086A               	movf	_sensorUpdatePeriod^(0+256),w
  7913  0BDE  0020               	movlb	0	; select bank0
  7914  0BDF  00A5               	movwf	___lmul@multiplicand
  7915  0BE0  3197  2794  318B   	fcall	___lmul
  7916  0BE3  0020               	movlb	0	; select bank0
  7917  0BE4  0824               	movf	?___lmul+3,w
  7918  0BE5  0022               	movlb	2	; select bank2
  7919  0BE6  00ED               	movwf	(_sensorUpdatePeriod+3)^(0+256)
  7920  0BE7  0020               	movlb	0	; select bank0
  7921  0BE8  0823               	movf	?___lmul+2,w
  7922  0BE9  0022               	movlb	2	; select bank2
  7923  0BEA  00EC               	movwf	(_sensorUpdatePeriod+2)^(0+256)
  7924  0BEB  0020               	movlb	0	; select bank0
  7925  0BEC  0822               	movf	?___lmul+1,w
  7926  0BED  0022               	movlb	2	; select bank2
  7927  0BEE  00EB               	movwf	(_sensorUpdatePeriod+1)^(0+256)
  7928  0BEF  0020               	movlb	0	; select bank0
  7929  0BF0  0821               	movf	?___lmul,w
  7930  0BF1  0022               	movlb	2	; select bank2
  7931  0BF2  00EA               	movwf	_sensorUpdatePeriod^(0+256)
  7932  0BF3                     l6207:	
  7933                           
  7934                           ;wireless.c: 229: }
  7935                           ;wireless.c: 230: if(data[0] & 0x08)
  7936  0BF3  0020               	movlb	0	; select bank0
  7937  0BF4  1DB7               	btfss	Wireless_checkDataReceived@data,3
  7938  0BF5  2BF9               	goto	l6211
  7939                           
  7940                           ;wireless.c: 231: {
  7941                           ;wireless.c: 232: DOOR_resetPos();
  7942  0BF6  3192  22AA  318B   	fcall	_DOOR_resetPos
  7943  0BF9                     l6211:	
  7944                           
  7945                           ;wireless.c: 233: }
  7946                           ;wireless.c: 237: }
  7947                           ;wireless.c: 238: }while(RF_DataIsReady(&channel));
  7948  0BF9  303B               	movlw	(low (Wireless_checkDataReceived@channel| 0))& (0+255)
  7949  0BFA  3195  25A7  318B   	fcall	_RF_DataIsReady
  7950  0BFD  3A00               	xorlw	0
  7951  0BFE  1903               	btfsc	3,2
  7952  0BFF  0008               	return
  7953  0C00  2B87               	goto	l1143
  7954  0C01                     __end_of_Wireless_checkDataReceived:	
  7955                           
  7956                           	psect	text17
  7957  13E9                     __ptext17:	
  7958 ;; *************** function _RF_RxPayload *****************
  7959 ;; Defined at:
  7960 ;;		line 186 in file "nrf24.c"
  7961 ;; Parameters:    Size  Location     Type
  7962 ;;  payload         1    wreg     PTR unsigned char 
  7963 ;;		 -> Wireless_checkDataReceived@data(4), 
  7964 ;;  payloadSize     1   15[BANK0 ] unsigned char 
  7965 ;; Auto vars:     Size  Location     Type
  7966 ;;  payload         1   18[BANK0 ] PTR unsigned char 
  7967 ;;		 -> Wireless_checkDataReceived@data(4), 
  7968 ;; Return value:  Size  Location     Type
  7969 ;;                  1    wreg      void 
  7970 ;; Registers used:
  7971 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7972 ;; Tracked objects:
  7973 ;;		On entry : 0/0
  7974 ;;		On exit  : 0/0
  7975 ;;		Unchanged: 0/0
  7976 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7977 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7978 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7979 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7980 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7981 ;;Total ram usage:        4 bytes
  7982 ;; Hardware stack levels used:    1
  7983 ;; Hardware stack levels required when called:    8
  7984 ;; This function calls:
  7985 ;;		_RF_ReadRegisterData
  7986 ;; This function is called by:
  7987 ;;		_Wireless_checkDataReceived
  7988 ;; This function uses a non-reentrant model
  7989 ;;
  7990                           
  7991                           
  7992                           ;psect for function _RF_RxPayload
  7993  13E9                     _RF_RxPayload:	
  7994                           
  7995                           ;incstack = 0
  7996                           ; Regs used in _RF_RxPayload: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  7997                           ;RF_RxPayload@payload stored from wreg
  7998  13E9  0020               	movlb	0	; select bank0
  7999  13EA  00B2               	movwf	RF_RxPayload@payload
  8000                           
  8001                           ;nrf24.c: 187: do { LATCbits.LATC2 = 0; } while(0);
  8002  13EB  0022               	movlb	2	; select bank2
  8003  13EC  110E               	bcf	14,2	;volatile
  8004                           
  8005                           ;nrf24.c: 188: RF_ReadRegisterData(0x61, payload, payloadSize);
  8006  13ED  0020               	movlb	0	; select bank0
  8007  13EE  0832               	movf	RF_RxPayload@payload,w
  8008  13EF  00B0               	movwf	??_RF_RxPayload
  8009  13F0  0830               	movf	??_RF_RxPayload,w
  8010  13F1  00AA               	movwf	RF_ReadRegisterData@buf
  8011  13F2  082F               	movf	RF_RxPayload@payloadSize,w
  8012  13F3  00B1               	movwf	??_RF_RxPayload+1
  8013  13F4  0831               	movf	??_RF_RxPayload+1,w
  8014  13F5  00AB               	movwf	RF_ReadRegisterData@bufSize
  8015  13F6  3061               	movlw	97
  8016  13F7  3195  25C4         	fcall	_RF_ReadRegisterData
  8017                           
  8018                           ;nrf24.c: 189: do { LATCbits.LATC2 = 1; } while(0);
  8019  13F9  0022               	movlb	2	; select bank2
  8020  13FA  150E               	bsf	14,2	;volatile
  8021  13FB  0008               	return
  8022  13FC                     __end_of_RF_RxPayload:	
  8023                           
  8024                           	psect	text18
  8025  15C4                     __ptext18:	
  8026 ;; *************** function _RF_ReadRegisterData *****************
  8027 ;; Defined at:
  8028 ;;		line 99 in file "nrf24.c"
  8029 ;; Parameters:    Size  Location     Type
  8030 ;;  reg             1    wreg     unsigned char 
  8031 ;;  buf             1   10[BANK0 ] PTR unsigned char 
  8032 ;;		 -> Wireless_checkDataReceived@data(4), Wireless_wake@reg(1), Wireless_sleep@reg(1), Wireless_changeTransmitPower@va
      +l(1), 
  8033 ;;  bufSize         1   11[BANK0 ] unsigned char 
  8034 ;; Auto vars:     Size  Location     Type
  8035 ;;  reg             1   14[BANK0 ] unsigned char 
  8036 ;; Return value:  Size  Location     Type
  8037 ;;                  1    wreg      void 
  8038 ;; Registers used:
  8039 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8040 ;; Tracked objects:
  8041 ;;		On entry : 0/0
  8042 ;;		On exit  : 0/0
  8043 ;;		Unchanged: 0/0
  8044 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8045 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8046 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8047 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8048 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8049 ;;Total ram usage:        5 bytes
  8050 ;; Hardware stack levels used:    1
  8051 ;; Hardware stack levels required when called:    7
  8052 ;; This function calls:
  8053 ;;		_SPI_WriteRead
  8054 ;;		_SPI_WriteReadBuffer
  8055 ;; This function is called by:
  8056 ;;		_RF_RxPayload
  8057 ;;		_Wireless_changeTransmitPower
  8058 ;;		_Wireless_sleep
  8059 ;;		_Wireless_wake
  8060 ;; This function uses a non-reentrant model
  8061 ;;
  8062                           
  8063                           
  8064                           ;psect for function _RF_ReadRegisterData
  8065  15C4                     _RF_ReadRegisterData:	
  8066                           
  8067                           ;incstack = 0
  8068                           ; Regs used in _RF_ReadRegisterData: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8069                           ;RF_ReadRegisterData@reg stored from wreg
  8070  15C4  0020               	movlb	0	; select bank0
  8071  15C5  00AE               	movwf	RF_ReadRegisterData@reg
  8072                           
  8073                           ;nrf24.c: 100: do { LATCbits.LATC1 = 0; } while(0);
  8074  15C6  0022               	movlb	2	; select bank2
  8075  15C7  108E               	bcf	14,1	;volatile
  8076                           
  8077                           ;nrf24.c: 101: (void)SPI_WriteRead(0x00|reg);
  8078  15C8  0020               	movlb	0	; select bank0
  8079  15C9  082E               	movf	RF_ReadRegisterData@reg,w
  8080  15CA  3192  22D9  3195   	fcall	_SPI_WriteRead
  8081                           
  8082                           ;nrf24.c: 102: SPI_WriteReadBuffer(buf, buf, bufSize);
  8083  15CD  0020               	movlb	0	; select bank0
  8084  15CE  082A               	movf	RF_ReadRegisterData@buf,w
  8085  15CF  00AC               	movwf	??_RF_ReadRegisterData
  8086  15D0  082C               	movf	??_RF_ReadRegisterData,w
  8087  15D1  00A3               	movwf	SPI_WriteReadBuffer@bufIn
  8088  15D2  082B               	movf	RF_ReadRegisterData@bufSize,w
  8089  15D3  00AD               	movwf	??_RF_ReadRegisterData+1
  8090  15D4  082D               	movf	??_RF_ReadRegisterData+1,w
  8091  15D5  00A4               	movwf	SPI_WriteReadBuffer@bufSize
  8092  15D6  082A               	movf	RF_ReadRegisterData@buf,w
  8093  15D7  3196  263D  3195   	fcall	_SPI_WriteReadBuffer
  8094                           
  8095                           ;nrf24.c: 103: do { LATCbits.LATC1 = 1; } while(0);
  8096  15DA  0022               	movlb	2	; select bank2
  8097  15DB  148E               	bsf	14,1	;volatile
  8098                           
  8099                           ;nrf24.c: 104: _delay((unsigned long)((10)*(8000000/4000000.0)));
  8100  15DC  3006               	movlw	6
  8101  15DD                     u7237:	
  8102  15DD  0B89               	decfsz	9,f
  8103  15DE  2DDD               	goto	u7237
  8104  15DF  3200               	nop2
  8105  15E0  0008               	return
  8106  15E1                     __end_of_RF_ReadRegisterData:	
  8107                           
  8108                           	psect	text19
  8109  163D                     __ptext19:	
  8110 ;; *************** function _SPI_WriteReadBuffer *****************
  8111 ;; Defined at:
  8112 ;;		line 43 in file "nrf24.c"
  8113 ;; Parameters:    Size  Location     Type
  8114 ;;  bufOut          1    wreg     PTR unsigned char 
  8115 ;;		 -> Wireless_checkDataReceived@data(4), Wireless_wake@reg(1), Wireless_sleep@reg(1), Wireless_changeTransmitPower@va
      +l(1), 
  8116 ;;  bufIn           1    3[BANK0 ] PTR unsigned char 
  8117 ;;		 -> Wireless_checkDataReceived@data(4), Wireless_wake@reg(1), Wireless_sleep@reg(1), Wireless_changeTransmitPower@va
      +l(1), 
  8118 ;;  bufSize         1    4[BANK0 ] unsigned char 
  8119 ;; Auto vars:     Size  Location     Type
  8120 ;;  bufOut          1    8[BANK0 ] PTR unsigned char 
  8121 ;;		 -> Wireless_checkDataReceived@data(4), Wireless_wake@reg(1), Wireless_sleep@reg(1), Wireless_changeTransmitPower@va
      +l(1), 
  8122 ;;  i               1    9[BANK0 ] unsigned char 
  8123 ;; Return value:  Size  Location     Type
  8124 ;;                  1    wreg      void 
  8125 ;; Registers used:
  8126 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8127 ;; Tracked objects:
  8128 ;;		On entry : 0/0
  8129 ;;		On exit  : 0/0
  8130 ;;		Unchanged: 0/0
  8131 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8132 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8133 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8134 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8135 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8136 ;;Total ram usage:        7 bytes
  8137 ;; Hardware stack levels used:    1
  8138 ;; Hardware stack levels required when called:    6
  8139 ;; This function calls:
  8140 ;;		_SPI_WriteRead
  8141 ;; This function is called by:
  8142 ;;		_RF_ReadRegisterData
  8143 ;; This function uses a non-reentrant model
  8144 ;;
  8145                           
  8146                           
  8147                           ;psect for function _SPI_WriteReadBuffer
  8148  163D                     _SPI_WriteReadBuffer:	
  8149                           
  8150                           ;incstack = 0
  8151                           ; Regs used in _SPI_WriteReadBuffer: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8152                           ;SPI_WriteReadBuffer@bufOut stored from wreg
  8153  163D  0020               	movlb	0	; select bank0
  8154  163E  00A8               	movwf	SPI_WriteReadBuffer@bufOut
  8155                           
  8156                           ;nrf24.c: 44: uint8_t i;
  8157                           ;nrf24.c: 46: for(i=0;i<bufSize;i++) {
  8158  163F  01A9               	clrf	SPI_WriteReadBuffer@i
  8159  1640                     l5581:	
  8160  1640  0824               	movf	SPI_WriteReadBuffer@bufSize,w
  8161  1641  0229               	subwf	SPI_WriteReadBuffer@i,w
  8162  1642  1803               	btfsc	3,0
  8163  1643  0008               	return
  8164                           
  8165                           ;nrf24.c: 47: bufIn[i] = SPI_WriteRead(bufOut[i]);
  8166  1644  0829               	movf	SPI_WriteReadBuffer@i,w
  8167  1645  0728               	addwf	SPI_WriteReadBuffer@bufOut,w
  8168  1646  00A5               	movwf	??_SPI_WriteReadBuffer
  8169  1647  0825               	movf	??_SPI_WriteReadBuffer,w
  8170  1648  0086               	movwf	6
  8171  1649  0187               	clrf	7
  8172  164A  0801               	movf	1,w
  8173  164B  3192  22D9  3196   	fcall	_SPI_WriteRead
  8174  164E  0020               	movlb	0	; select bank0
  8175  164F  00A6               	movwf	??_SPI_WriteReadBuffer+1
  8176  1650  0829               	movf	SPI_WriteReadBuffer@i,w
  8177  1651  0723               	addwf	SPI_WriteReadBuffer@bufIn,w
  8178  1652  00A7               	movwf	??_SPI_WriteReadBuffer+2
  8179  1653  0827               	movf	??_SPI_WriteReadBuffer+2,w
  8180  1654  0086               	movwf	6
  8181  1655  0187               	clrf	7
  8182  1656  0826               	movf	??_SPI_WriteReadBuffer+1,w
  8183  1657  0081               	movwf	1
  8184  1658  3001               	movlw	1
  8185  1659  00A5               	movwf	??_SPI_WriteReadBuffer
  8186  165A  0825               	movf	??_SPI_WriteReadBuffer,w
  8187  165B  07A9               	addwf	SPI_WriteReadBuffer@i,f
  8188  165C  2E40               	goto	l5581
  8189  165D                     __end_of_SPI_WriteReadBuffer:	
  8190                           
  8191                           	psect	text20
  8192  15A7                     __ptext20:	
  8193 ;; *************** function _RF_DataIsReady *****************
  8194 ;; Defined at:
  8195 ;;		line 202 in file "nrf24.c"
  8196 ;; Parameters:    Size  Location     Type
  8197 ;;  channel         1    wreg     PTR unsigned char 
  8198 ;;		 -> Wireless_checkDataReceived@channel(1), 
  8199 ;; Auto vars:     Size  Location     Type
  8200 ;;  channel         1    7[BANK0 ] PTR unsigned char 
  8201 ;;		 -> Wireless_checkDataReceived@channel(1), 
  8202 ;;  status          1    8[BANK0 ] unsigned char 
  8203 ;; Return value:  Size  Location     Type
  8204 ;;                  1    wreg      unsigned char 
  8205 ;; Registers used:
  8206 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8207 ;; Tracked objects:
  8208 ;;		On entry : 0/0
  8209 ;;		On exit  : 0/0
  8210 ;;		Unchanged: 0/0
  8211 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8212 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8213 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8214 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8215 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8216 ;;Total ram usage:        3 bytes
  8217 ;; Hardware stack levels used:    1
  8218 ;; Hardware stack levels required when called:    7
  8219 ;; This function calls:
  8220 ;;		_RF_ReadRegister
  8221 ;; This function is called by:
  8222 ;;		_Wireless_checkDataReceived
  8223 ;; This function uses a non-reentrant model
  8224 ;;
  8225                           
  8226                           
  8227                           ;psect for function _RF_DataIsReady
  8228  15A7                     _RF_DataIsReady:	
  8229                           
  8230                           ;incstack = 0
  8231                           ; Regs used in _RF_DataIsReady: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8232                           ;RF_DataIsReady@channel stored from wreg
  8233  15A7  0020               	movlb	0	; select bank0
  8234  15A8  00A7               	movwf	RF_DataIsReady@channel
  8235                           
  8236                           ;nrf24.c: 204: char status;
  8237                           ;nrf24.c: 205: status=RF_ReadRegister(0x07);
  8238  15A9  3007               	movlw	7
  8239  15AA  3194  24CA  3195   	fcall	_RF_ReadRegister
  8240  15AD  0020               	movlb	0	; select bank0
  8241  15AE  00A6               	movwf	??_RF_DataIsReady
  8242  15AF  0826               	movf	??_RF_DataIsReady,w
  8243  15B0  00A8               	movwf	RF_DataIsReady@status
  8244                           
  8245                           ;nrf24.c: 206: status&=0x0E;
  8246  15B1  300E               	movlw	14
  8247  15B2  00A6               	movwf	??_RF_DataIsReady
  8248  15B3  0826               	movf	??_RF_DataIsReady,w
  8249  15B4  05A8               	andwf	RF_DataIsReady@status,f
  8250                           
  8251                           ;nrf24.c: 207: if(status==0x0E)
  8252  15B5  300E               	movlw	14
  8253  15B6  0628               	xorwf	RF_DataIsReady@status,w
  8254  15B7  1D03               	btfss	3,2
  8255  15B8  2DBB               	goto	l5831
  8256                           
  8257                           ;nrf24.c: 208: return 0;
  8258  15B9  3000               	movlw	0
  8259  15BA  0008               	return
  8260  15BB                     l5831:	
  8261                           
  8262                           ;nrf24.c: 209: else
  8263                           ;nrf24.c: 210: *channel=status>>1;
  8264  15BB  3628               	lsrf	RF_DataIsReady@status,w
  8265  15BC  00A6               	movwf	??_RF_DataIsReady
  8266  15BD  0827               	movf	RF_DataIsReady@channel,w
  8267  15BE  0086               	movwf	6
  8268  15BF  0187               	clrf	7
  8269  15C0  0826               	movf	??_RF_DataIsReady,w
  8270  15C1  0081               	movwf	1
  8271                           
  8272                           ;nrf24.c: 211: return 1;
  8273  15C2  3001               	movlw	1
  8274  15C3  0008               	return
  8275  15C4                     __end_of_RF_DataIsReady:	
  8276                           
  8277                           	psect	text21
  8278  14CA                     __ptext21:	
  8279 ;; *************** function _RF_ReadRegister *****************
  8280 ;; Defined at:
  8281 ;;		line 82 in file "nrf24.c"
  8282 ;; Parameters:    Size  Location     Type
  8283 ;;  reg             1    wreg     unsigned char 
  8284 ;; Auto vars:     Size  Location     Type
  8285 ;;  reg             1    4[BANK0 ] unsigned char 
  8286 ;;  val             1    5[BANK0 ] unsigned char 
  8287 ;; Return value:  Size  Location     Type
  8288 ;;                  1    wreg      unsigned char 
  8289 ;; Registers used:
  8290 ;;		wreg, status,2, status,0, pclath, cstack
  8291 ;; Tracked objects:
  8292 ;;		On entry : 0/0
  8293 ;;		On exit  : 0/0
  8294 ;;		Unchanged: 0/0
  8295 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8296 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8297 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8298 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8299 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8300 ;;Total ram usage:        3 bytes
  8301 ;; Hardware stack levels used:    1
  8302 ;; Hardware stack levels required when called:    6
  8303 ;; This function calls:
  8304 ;;		_SPI_WriteRead
  8305 ;; This function is called by:
  8306 ;;		_RF_DataIsReady
  8307 ;; This function uses a non-reentrant model
  8308 ;;
  8309                           
  8310                           
  8311                           ;psect for function _RF_ReadRegister
  8312  14CA                     _RF_ReadRegister:	
  8313                           
  8314                           ;incstack = 0
  8315                           ; Regs used in _RF_ReadRegister: [wreg+status,2+status,0+pclath+cstack]
  8316                           ;RF_ReadRegister@reg stored from wreg
  8317  14CA  0020               	movlb	0	; select bank0
  8318  14CB  00A4               	movwf	RF_ReadRegister@reg
  8319                           
  8320                           ;nrf24.c: 83: uint8_t val;
  8321                           ;nrf24.c: 85: do { LATCbits.LATC1 = 0; } while(0);
  8322  14CC  0022               	movlb	2	; select bank2
  8323  14CD  108E               	bcf	14,1	;volatile
  8324                           
  8325                           ;nrf24.c: 86: (void)SPI_WriteRead(reg);
  8326  14CE  0020               	movlb	0	; select bank0
  8327  14CF  0824               	movf	RF_ReadRegister@reg,w
  8328  14D0  3192  22D9  3194   	fcall	_SPI_WriteRead
  8329                           
  8330                           ;nrf24.c: 87: val = SPI_WriteRead(0);
  8331  14D3  3000               	movlw	0
  8332  14D4  3192  22D9  3194   	fcall	_SPI_WriteRead
  8333  14D7  0020               	movlb	0	; select bank0
  8334  14D8  00A3               	movwf	??_RF_ReadRegister
  8335  14D9  0823               	movf	??_RF_ReadRegister,w
  8336  14DA  00A5               	movwf	RF_ReadRegister@val
  8337                           
  8338                           ;nrf24.c: 88: do { LATCbits.LATC1 = 1; } while(0);
  8339  14DB  0022               	movlb	2	; select bank2
  8340  14DC  148E               	bsf	14,1	;volatile
  8341                           
  8342                           ;nrf24.c: 89: _delay((unsigned long)((10)*(8000000/4000000.0)));
  8343  14DD  3006               	movlw	6
  8344  14DE                     u7247:	
  8345  14DE  0B89               	decfsz	9,f
  8346  14DF  2CDE               	goto	u7247
  8347  14E0  3200               	nop2
  8348                           
  8349                           ;nrf24.c: 90: return val;
  8350  14E1  0020               	movlb	0	; select bank0
  8351  14E2  0825               	movf	RF_ReadRegister@val,w
  8352  14E3  0008               	return
  8353  14E4                     __end_of_RF_ReadRegister:	
  8354                           
  8355                           	psect	text22
  8356  143C                     __ptext22:	
  8357 ;; *************** function _DOOR_update *****************
  8358 ;; Defined at:
  8359 ;;		line 16 in file "doorlogic.c"
  8360 ;; Parameters:    Size  Location     Type
  8361 ;;  openAngle       1    wreg     unsigned char 
  8362 ;;  closedAngle     1    7[BANK0 ] unsigned char 
  8363 ;; Auto vars:     Size  Location     Type
  8364 ;;  openAngle       1    9[BANK0 ] unsigned char 
  8365 ;; Return value:  Size  Location     Type
  8366 ;;                  1    wreg      void 
  8367 ;; Registers used:
  8368 ;;		wreg, status,2, status,0, pclath, cstack
  8369 ;; Tracked objects:
  8370 ;;		On entry : 0/0
  8371 ;;		On exit  : 0/0
  8372 ;;		Unchanged: 0/0
  8373 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8374 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8375 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8376 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8377 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8378 ;;Total ram usage:        3 bytes
  8379 ;; Hardware stack levels used:    1
  8380 ;; Hardware stack levels required when called:    6
  8381 ;; This function calls:
  8382 ;;		_Storage_save
  8383 ;; This function is called by:
  8384 ;;		_Wireless_checkDataReceived
  8385 ;; This function uses a non-reentrant model
  8386 ;;
  8387                           
  8388                           
  8389                           ;psect for function _DOOR_update
  8390  143C                     _DOOR_update:	
  8391                           
  8392                           ;incstack = 0
  8393                           ; Regs used in _DOOR_update: [wreg+status,2+status,0+pclath+cstack]
  8394                           ;DOOR_update@openAngle stored from wreg
  8395  143C  0020               	movlb	0	; select bank0
  8396  143D  00A9               	movwf	DOOR_update@openAngle
  8397                           
  8398                           ;doorlogic.c: 18: doorOpenAngle=openAngle;
  8399  143E  0829               	movf	DOOR_update@openAngle,w
  8400  143F  00A8               	movwf	??_DOOR_update
  8401  1440  0828               	movf	??_DOOR_update,w
  8402  1441  0021               	movlb	1	; select bank1
  8403  1442  00DE               	movwf	_doorOpenAngle^(0+128)
  8404                           
  8405                           ;doorlogic.c: 19: doorClosedAngle=closedAngle;
  8406  1443  0020               	movlb	0	; select bank0
  8407  1444  0827               	movf	DOOR_update@closedAngle,w
  8408  1445  00A8               	movwf	??_DOOR_update
  8409  1446  0828               	movf	??_DOOR_update,w
  8410  1447  0021               	movlb	1	; select bank1
  8411  1448  00DD               	movwf	_doorClosedAngle^(0+128)
  8412                           
  8413                           ;doorlogic.c: 20: Storage_save(openAngle,closedAngle);
  8414  1449  0020               	movlb	0	; select bank0
  8415  144A  0827               	movf	DOOR_update@closedAngle,w
  8416  144B  00A8               	movwf	??_DOOR_update
  8417  144C  0828               	movf	??_DOOR_update,w
  8418  144D  00A4               	movwf	Storage_save@closeAngle
  8419  144E  0829               	movf	DOOR_update@openAngle,w
  8420  144F  3194  24B0         	fcall	_Storage_save
  8421  1451  0008               	return
  8422  1452                     __end_of_DOOR_update:	
  8423                           
  8424                           	psect	text23
  8425  14B0                     __ptext23:	
  8426 ;; *************** function _Storage_save *****************
  8427 ;; Defined at:
  8428 ;;		line 30 in file "storage.c"
  8429 ;; Parameters:    Size  Location     Type
  8430 ;;  openAngle       1    wreg     unsigned char 
  8431 ;;  closeAngle      1    4[BANK0 ] unsigned char 
  8432 ;; Auto vars:     Size  Location     Type
  8433 ;;  openAngle       1    6[BANK0 ] unsigned char 
  8434 ;; Return value:  Size  Location     Type
  8435 ;;                  1    wreg      void 
  8436 ;; Registers used:
  8437 ;;		wreg, status,2, status,0, pclath, cstack
  8438 ;; Tracked objects:
  8439 ;;		On entry : 0/0
  8440 ;;		On exit  : 0/0
  8441 ;;		Unchanged: 0/0
  8442 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8443 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8444 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8445 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8446 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8447 ;;Total ram usage:        3 bytes
  8448 ;; Hardware stack levels used:    1
  8449 ;; Hardware stack levels required when called:    5
  8450 ;; This function calls:
  8451 ;;		_DATAEE_WriteByte
  8452 ;; This function is called by:
  8453 ;;		_DOOR_update
  8454 ;; This function uses a non-reentrant model
  8455 ;;
  8456                           
  8457                           
  8458                           ;psect for function _Storage_save
  8459  14B0                     _Storage_save:	
  8460                           
  8461                           ;incstack = 0
  8462                           ; Regs used in _Storage_save: [wreg+status,2+status,0+pclath+cstack]
  8463                           ;Storage_save@openAngle stored from wreg
  8464  14B0  0020               	movlb	0	; select bank0
  8465  14B1  00A6               	movwf	Storage_save@openAngle
  8466                           
  8467                           ;storage.c: 32: DATAEE_WriteByte(1, openAngle);
  8468  14B2  0826               	movf	Storage_save@openAngle,w
  8469  14B3  00A5               	movwf	??_Storage_save
  8470  14B4  0825               	movf	??_Storage_save,w
  8471  14B5  00A1               	movwf	DATAEE_WriteByte@bData
  8472  14B6  3001               	movlw	1
  8473  14B7  3196  26A2  3194   	fcall	_DATAEE_WriteByte
  8474                           
  8475                           ;storage.c: 33: DATAEE_WriteByte(2, closeAngle);
  8476  14BA  0020               	movlb	0	; select bank0
  8477  14BB  0824               	movf	Storage_save@closeAngle,w
  8478  14BC  00A5               	movwf	??_Storage_save
  8479  14BD  0825               	movf	??_Storage_save,w
  8480  14BE  00A1               	movwf	DATAEE_WriteByte@bData
  8481  14BF  3002               	movlw	2
  8482  14C0  3196  26A2  3194   	fcall	_DATAEE_WriteByte
  8483                           
  8484                           ;storage.c: 34: DATAEE_WriteByte(0 , 1);
  8485  14C3  0020               	movlb	0	; select bank0
  8486  14C4  01A1               	clrf	DATAEE_WriteByte@bData
  8487  14C5  0AA1               	incf	DATAEE_WriteByte@bData,f
  8488  14C6  3000               	movlw	0
  8489  14C7  3196  26A2         	fcall	_DATAEE_WriteByte
  8490  14C9  0008               	return
  8491  14CA                     __end_of_Storage_save:	
  8492                           
  8493                           	psect	text24
  8494  16A2                     __ptext24:	
  8495 ;; *************** function _DATAEE_WriteByte *****************
  8496 ;; Defined at:
  8497 ;;		line 186 in file "mcc_generated_files/memory.c"
  8498 ;; Parameters:    Size  Location     Type
  8499 ;;  bAdd            1    wreg     unsigned char 
  8500 ;;  bData           1    1[BANK0 ] unsigned char 
  8501 ;; Auto vars:     Size  Location     Type
  8502 ;;  bAdd            1    2[BANK0 ] unsigned char 
  8503 ;;  GIEBitValue     1    3[BANK0 ] unsigned char 
  8504 ;; Return value:  Size  Location     Type
  8505 ;;                  1    wreg      void 
  8506 ;; Registers used:
  8507 ;;		wreg, status,2, status,0
  8508 ;; Tracked objects:
  8509 ;;		On entry : 0/0
  8510 ;;		On exit  : 0/0
  8511 ;;		Unchanged: 0/0
  8512 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8513 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8514 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8515 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8516 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8517 ;;Total ram usage:        3 bytes
  8518 ;; Hardware stack levels used:    1
  8519 ;; Hardware stack levels required when called:    4
  8520 ;; This function calls:
  8521 ;;		Nothing
  8522 ;; This function is called by:
  8523 ;;		_Storage_save
  8524 ;;		_Storage_load
  8525 ;; This function uses a non-reentrant model
  8526 ;;
  8527                           
  8528                           
  8529                           ;psect for function _DATAEE_WriteByte
  8530  16A2                     _DATAEE_WriteByte:	
  8531                           
  8532                           ;incstack = 0
  8533                           ; Regs used in _DATAEE_WriteByte: [wreg+status,2+status,0]
  8534                           ;DATAEE_WriteByte@bAdd stored from wreg
  8535  16A2  0020               	movlb	0	; select bank0
  8536  16A3  00A2               	movwf	DATAEE_WriteByte@bAdd
  8537                           
  8538                           ;memory.c: 188: uint8_t GIEBitValue = 0;
  8539  16A4  01A3               	clrf	DATAEE_WriteByte@GIEBitValue
  8540                           
  8541                           ;memory.c: 190: EEADRL = (uint8_t)(bAdd & 0x0ff);
  8542  16A5  0822               	movf	DATAEE_WriteByte@bAdd,w
  8543  16A6  0023               	movlb	3	; select bank3
  8544  16A7  0091               	movwf	17	;volatile
  8545                           
  8546                           ;memory.c: 191: EEDATL = bData;
  8547  16A8  0020               	movlb	0	; select bank0
  8548  16A9  0821               	movf	DATAEE_WriteByte@bData,w
  8549  16AA  0023               	movlb	3	; select bank3
  8550  16AB  0093               	movwf	19	;volatile
  8551                           
  8552                           ;memory.c: 192: EECON1bits.EEPGD = 0;
  8553  16AC  1395               	bcf	21,7	;volsfr
  8554                           
  8555                           ;memory.c: 193: EECON1bits.CFGS = 0;
  8556  16AD  1315               	bcf	21,6	;volsfr
  8557                           
  8558                           ;memory.c: 194: EECON1bits.WREN = 1;
  8559  16AE  1515               	bsf	21,2	;volsfr
  8560                           
  8561                           ;memory.c: 196: GIEBitValue = INTCONbits.GIE;
  8562  16AF  3000               	movlw	0
  8563  16B0  1B8B               	btfsc	11,7	;volatile
  8564  16B1  3001               	movlw	1
  8565  16B2  0020               	movlb	0	; select bank0
  8566  16B3  00A3               	movwf	DATAEE_WriteByte@GIEBitValue
  8567                           
  8568                           ;memory.c: 197: INTCONbits.GIE = 0;
  8569  16B4  138B               	bcf	11,7	;volatile
  8570                           
  8571                           ;memory.c: 198: EECON2 = 0x55;
  8572  16B5  3055               	movlw	85
  8573  16B6  0023               	movlb	3	; select bank3
  8574  16B7  0096               	movwf	22	;volsfr
  8575                           
  8576                           ;memory.c: 199: EECON2 = 0xAA;
  8577  16B8  30AA               	movlw	170
  8578  16B9  0096               	movwf	22	;volsfr
  8579                           
  8580                           ;memory.c: 200: EECON1bits.WR = 1;
  8581  16BA  1495               	bsf	21,1	;volsfr
  8582  16BB                     l498:	
  8583                           ;memory.c: 203: {
  8584                           
  8585                           ;memory.c: 202: while (EECON1bits.WR)
  8586                           
  8587  16BB  1895               	btfsc	21,1	;volsfr
  8588  16BC  2EBB               	goto	l498
  8589                           
  8590                           ;memory.c: 204: }
  8591                           ;memory.c: 206: EECON1bits.WREN = 0;
  8592  16BD  1115               	bcf	21,2	;volsfr
  8593                           
  8594                           ;memory.c: 207: INTCONbits.GIE = GIEBitValue;
  8595  16BE  0020               	movlb	0	; select bank0
  8596  16BF  0C23               	rrf	DATAEE_WriteByte@GIEBitValue,w
  8597  16C0  1C03               	skipc
  8598  16C1  138B               	bcf	11,7	;volatile
  8599  16C2  1803               	skipnc
  8600  16C3  178B               	bsf	11,7	;volatile
  8601  16C4  0008               	return
  8602  16C5                     __end_of_DATAEE_WriteByte:	
  8603                           
  8604                           	psect	text25
  8605  12AA                     __ptext25:	
  8606 ;; *************** function _DOOR_resetPos *****************
  8607 ;; Defined at:
  8608 ;;		line 94 in file "doorlogic.c"
  8609 ;; Parameters:    Size  Location     Type
  8610 ;;		None
  8611 ;; Auto vars:     Size  Location     Type
  8612 ;;		None
  8613 ;; Return value:  Size  Location     Type
  8614 ;;                  1    wreg      enum E3332
  8615 ;; Registers used:
  8616 ;;		status,2
  8617 ;; Tracked objects:
  8618 ;;		On entry : 0/0
  8619 ;;		On exit  : 0/0
  8620 ;;		Unchanged: 0/0
  8621 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8622 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8623 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8624 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8625 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8626 ;;Total ram usage:        0 bytes
  8627 ;; Hardware stack levels used:    1
  8628 ;; Hardware stack levels required when called:    4
  8629 ;; This function calls:
  8630 ;;		Nothing
  8631 ;; This function is called by:
  8632 ;;		_Wireless_checkDataReceived
  8633 ;; This function uses a non-reentrant model
  8634 ;;
  8635                           
  8636                           
  8637                           ;psect for function _DOOR_resetPos
  8638  12AA                     _DOOR_resetPos:	
  8639                           
  8640                           ;doorlogic.c: 96: initialised=0;
  8641                           
  8642                           ;incstack = 0
  8643                           ; Regs used in _DOOR_resetPos: [status,2]
  8644  12AA  0021               	movlb	1	; select bank1
  8645  12AB  01D8               	clrf	_initialised^(0+128)
  8646  12AC  0008               	return
  8647  12AD                     __end_of_DOOR_resetPos:	
  8648                           ;doorlogic.c: 97: return(DOOR_CLOSED);
  8649                           ;	Return value of _DOOR_resetPos is never used
  8650                           
  8651                           
  8652                           	psect	text26
  8653  0872                     __ptext26:	
  8654 ;; *************** function _Sensor_getSupplyVoltage *****************
  8655 ;; Defined at:
  8656 ;;		line 6 in file "sensors.c"
  8657 ;; Parameters:    Size  Location     Type
  8658 ;;		None
  8659 ;; Auto vars:     Size  Location     Type
  8660 ;;  voltage         3   36[BANK0 ] float 
  8661 ;;  res             2   39[BANK0 ] unsigned short 
  8662 ;; Return value:  Size  Location     Type
  8663 ;;                  3   33[BANK0 ] float 
  8664 ;; Registers used:
  8665 ;;		wreg, status,2, status,0, pclath, cstack
  8666 ;; Tracked objects:
  8667 ;;		On entry : 0/0
  8668 ;;		On exit  : 0/0
  8669 ;;		Unchanged: 0/0
  8670 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8671 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8672 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8673 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8674 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8675 ;;Total ram usage:        8 bytes
  8676 ;; Hardware stack levels used:    1
  8677 ;; Hardware stack levels required when called:    6
  8678 ;; This function calls:
  8679 ;;		_ADC_GetConversionResult
  8680 ;;		_ADC_IsConversionDone
  8681 ;;		_ADC_SelectChannel
  8682 ;;		_ADC_StartConversion
  8683 ;;		_FVR_IsOutputReady
  8684 ;;		_Sensor_peripheralSleep
  8685 ;;		_Sensor_peripheralWake
  8686 ;;		___ftdiv
  8687 ;;		___lwtoft
  8688 ;; This function is called by:
  8689 ;;		_Wireless_packageData
  8690 ;; This function uses a non-reentrant model
  8691 ;;
  8692                           
  8693                           
  8694                           ;psect for function _Sensor_getSupplyVoltage
  8695  0872                     _Sensor_getSupplyVoltage:	
  8696                           
  8697                           ;sensors.c: 8: u16 res;
  8698                           ;sensors.c: 9: float voltage;
  8699                           ;sensors.c: 11: Sensor_peripheralWake();
  8700                           
  8701                           ;incstack = 0
  8702                           ; Regs used in _Sensor_getSupplyVoltage: [wreg+status,2+status,0+pclath+cstack]
  8703  0872  3192  22C9  3188   	fcall	_Sensor_peripheralWake
  8704  0875                     l6035:	
  8705                           ;sensors.c: 12: while(!FVR_IsOutputReady());
  8706                           
  8707  0875  3192  22DF  3188   	fcall	_FVR_IsOutputReady
  8708  0878  3A00               	xorlw	0
  8709  0879  1903               	skipnz
  8710  087A  2875               	goto	l6035
  8711                           
  8712                           ;sensors.c: 13: ADC_SelectChannel(channel_FVR);
  8713  087B  301F               	movlw	31
  8714  087C  3193  2383  3188   	fcall	_ADC_SelectChannel
  8715                           
  8716                           ;sensors.c: 14: ADC_StartConversion();
  8717  087F  3192  22A7  3188   	fcall	_ADC_StartConversion
  8718  0882                     l6041:	
  8719                           ;sensors.c: 15: while(!ADC_IsConversionDone());
  8720                           
  8721  0882  3192  22F9  3188   	fcall	_ADC_IsConversionDone
  8722  0885  3A00               	xorlw	0
  8723  0886  1903               	skipnz
  8724  0887  2882               	goto	l6041
  8725                           
  8726                           ;sensors.c: 16: Sensor_peripheralSleep();
  8727  0888  3192  22C4  3188   	fcall	_Sensor_peripheralSleep
  8728                           
  8729                           ;sensors.c: 17: res=ADC_GetConversionResult();
  8730  088B  3193  233C  3188   	fcall	_ADC_GetConversionResult
  8731  088E  0020               	movlb	0	; select bank0
  8732  088F  0822               	movf	?_ADC_GetConversionResult+1,w
  8733  0890  00C8               	movwf	Sensor_getSupplyVoltage@res+1
  8734  0891  0821               	movf	?_ADC_GetConversionResult,w
  8735  0892  00C7               	movwf	Sensor_getSupplyVoltage@res
  8736                           
  8737                           ;sensors.c: 19: voltage= (float) 1.024 * 1024/(float)res;
  8738  0893  0848               	movf	Sensor_getSupplyVoltage@res+1,w
  8739  0894  00AA               	movwf	___lwtoft@c+1
  8740  0895  0847               	movf	Sensor_getSupplyVoltage@res,w
  8741  0896  00A9               	movwf	___lwtoft@c
  8742  0897  3193  23FC  3188   	fcall	___lwtoft
  8743  089A  0020               	movlb	0	; select bank0
  8744  089B  0829               	movf	?___lwtoft,w
  8745  089C  00B1               	movwf	___ftdiv@f2
  8746  089D  082A               	movf	?___lwtoft+1,w
  8747  089E  00B2               	movwf	___ftdiv@f2+1
  8748  089F  082B               	movf	?___lwtoft+2,w
  8749  08A0  00B3               	movwf	___ftdiv@f2+2
  8750  08A1  3012               	movlw	18
  8751  08A2  00B4               	movwf	___ftdiv@f1
  8752  08A3  3083               	movlw	131
  8753  08A4  00B5               	movwf	___ftdiv@f1+1
  8754  08A5  3044               	movlw	68
  8755  08A6  00B6               	movwf	___ftdiv@f1+2
  8756  08A7  318D  25C7         	fcall	___ftdiv
  8757  08A9  0020               	movlb	0	; select bank0
  8758  08AA  0831               	movf	?___ftdiv,w
  8759  08AB  00C4               	movwf	Sensor_getSupplyVoltage@voltage
  8760  08AC  0832               	movf	?___ftdiv+1,w
  8761  08AD  00C5               	movwf	Sensor_getSupplyVoltage@voltage+1
  8762  08AE  0833               	movf	?___ftdiv+2,w
  8763  08AF  00C6               	movwf	Sensor_getSupplyVoltage@voltage+2
  8764                           
  8765                           ;sensors.c: 20: return(voltage);
  8766  08B0  0844               	movf	Sensor_getSupplyVoltage@voltage,w
  8767  08B1  00C1               	movwf	?_Sensor_getSupplyVoltage
  8768  08B2  0845               	movf	Sensor_getSupplyVoltage@voltage+1,w
  8769  08B3  00C2               	movwf	?_Sensor_getSupplyVoltage+1
  8770  08B4  0846               	movf	Sensor_getSupplyVoltage@voltage+2,w
  8771  08B5  00C3               	movwf	?_Sensor_getSupplyVoltage+2
  8772  08B6  0008               	return
  8773  08B7                     __end_of_Sensor_getSupplyVoltage:	
  8774                           
  8775                           	psect	text27
  8776  12C9                     __ptext27:	
  8777 ;; *************** function _Sensor_peripheralWake *****************
  8778 ;; Defined at:
  8779 ;;		line 32 in file "sensors.c"
  8780 ;; Parameters:    Size  Location     Type
  8781 ;;		None
  8782 ;; Auto vars:     Size  Location     Type
  8783 ;;		None
  8784 ;; Return value:  Size  Location     Type
  8785 ;;                  1    wreg      void 
  8786 ;; Registers used:
  8787 ;;		None
  8788 ;; Tracked objects:
  8789 ;;		On entry : 0/0
  8790 ;;		On exit  : 0/0
  8791 ;;		Unchanged: 0/0
  8792 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8793 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8794 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8795 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8796 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8797 ;;Total ram usage:        0 bytes
  8798 ;; Hardware stack levels used:    1
  8799 ;; Hardware stack levels required when called:    4
  8800 ;; This function calls:
  8801 ;;		Nothing
  8802 ;; This function is called by:
  8803 ;;		_Sensor_getSupplyVoltage
  8804 ;; This function uses a non-reentrant model
  8805 ;;
  8806                           
  8807                           
  8808                           ;psect for function _Sensor_peripheralWake
  8809  12C9                     _Sensor_peripheralWake:	
  8810                           
  8811                           ;sensors.c: 34: ADCON0bits.ADON=1;
  8812                           
  8813                           ;incstack = 0
  8814                           ; Regs used in _Sensor_peripheralWake: []
  8815  12C9  0021               	movlb	1	; select bank1
  8816  12CA  141D               	bsf	29,0	;volatile
  8817                           
  8818                           ;sensors.c: 35: FVRCONbits.FVREN=1;
  8819  12CB  0022               	movlb	2	; select bank2
  8820  12CC  1797               	bsf	23,7	;volatile
  8821  12CD  0008               	return
  8822  12CE                     __end_of_Sensor_peripheralWake:	
  8823                           
  8824                           	psect	text28
  8825  12C4                     __ptext28:	
  8826 ;; *************** function _Sensor_peripheralSleep *****************
  8827 ;; Defined at:
  8828 ;;		line 26 in file "sensors.c"
  8829 ;; Parameters:    Size  Location     Type
  8830 ;;		None
  8831 ;; Auto vars:     Size  Location     Type
  8832 ;;		None
  8833 ;; Return value:  Size  Location     Type
  8834 ;;                  1    wreg      void 
  8835 ;; Registers used:
  8836 ;;		None
  8837 ;; Tracked objects:
  8838 ;;		On entry : 0/0
  8839 ;;		On exit  : 0/0
  8840 ;;		Unchanged: 0/0
  8841 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8842 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8843 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8844 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8845 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8846 ;;Total ram usage:        0 bytes
  8847 ;; Hardware stack levels used:    1
  8848 ;; Hardware stack levels required when called:    4
  8849 ;; This function calls:
  8850 ;;		Nothing
  8851 ;; This function is called by:
  8852 ;;		_Sensor_getSupplyVoltage
  8853 ;;		_main
  8854 ;; This function uses a non-reentrant model
  8855 ;;
  8856                           
  8857                           
  8858                           ;psect for function _Sensor_peripheralSleep
  8859  12C4                     _Sensor_peripheralSleep:	
  8860                           
  8861                           ;sensors.c: 28: ADCON0bits.ADON=0;
  8862                           
  8863                           ;incstack = 0
  8864                           ; Regs used in _Sensor_peripheralSleep: []
  8865  12C4  0021               	movlb	1	; select bank1
  8866  12C5  101D               	bcf	29,0	;volatile
  8867                           
  8868                           ;sensors.c: 29: FVRCONbits.FVREN=0;
  8869  12C6  0022               	movlb	2	; select bank2
  8870  12C7  1397               	bcf	23,7	;volatile
  8871  12C8  0008               	return
  8872  12C9                     __end_of_Sensor_peripheralSleep:	
  8873                           
  8874                           	psect	text29
  8875  12DF                     __ptext29:	
  8876 ;; *************** function _FVR_IsOutputReady *****************
  8877 ;; Defined at:
  8878 ;;		line 63 in file "mcc_generated_files/fvr.c"
  8879 ;; Parameters:    Size  Location     Type
  8880 ;;		None
  8881 ;; Auto vars:     Size  Location     Type
  8882 ;;		None
  8883 ;; Return value:  Size  Location     Type
  8884 ;;                  1    wreg      unsigned char 
  8885 ;; Registers used:
  8886 ;;		wreg, status,2, status,0
  8887 ;; Tracked objects:
  8888 ;;		On entry : 0/0
  8889 ;;		On exit  : 0/0
  8890 ;;		Unchanged: 0/0
  8891 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8892 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8893 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8894 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8895 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8896 ;;Total ram usage:        0 bytes
  8897 ;; Hardware stack levels used:    1
  8898 ;; Hardware stack levels required when called:    4
  8899 ;; This function calls:
  8900 ;;		Nothing
  8901 ;; This function is called by:
  8902 ;;		_Sensor_getSupplyVoltage
  8903 ;; This function uses a non-reentrant model
  8904 ;;
  8905                           
  8906                           
  8907                           ;psect for function _FVR_IsOutputReady
  8908  12DF                     _FVR_IsOutputReady:	
  8909                           
  8910                           ;fvr.c: 65: return (FVRCONbits.FVRRDY);
  8911                           
  8912                           ;incstack = 0
  8913                           ; Regs used in _FVR_IsOutputReady: [wreg+status,2+status,0]
  8914  12DF  0022               	movlb	2	; select bank2
  8915  12E0  0E17               	swapf	23,w	;volatile
  8916  12E1  0C89               	rrf	9,f
  8917  12E2  0C89               	rrf	9,f
  8918  12E3  3901               	andlw	1
  8919  12E4  0008               	return
  8920  12E5                     __end_of_FVR_IsOutputReady:	
  8921                           
  8922                           	psect	text30
  8923  12A7                     __ptext30:	
  8924 ;; *************** function _ADC_StartConversion *****************
  8925 ;; Defined at:
  8926 ;;		line 88 in file "mcc_generated_files/adc.c"
  8927 ;; Parameters:    Size  Location     Type
  8928 ;;		None
  8929 ;; Auto vars:     Size  Location     Type
  8930 ;;		None
  8931 ;; Return value:  Size  Location     Type
  8932 ;;                  1    wreg      void 
  8933 ;; Registers used:
  8934 ;;		None
  8935 ;; Tracked objects:
  8936 ;;		On entry : 0/0
  8937 ;;		On exit  : 0/0
  8938 ;;		Unchanged: 0/0
  8939 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8940 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8941 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8942 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8943 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8944 ;;Total ram usage:        0 bytes
  8945 ;; Hardware stack levels used:    1
  8946 ;; Hardware stack levels required when called:    4
  8947 ;; This function calls:
  8948 ;;		Nothing
  8949 ;; This function is called by:
  8950 ;;		_Sensor_getSupplyVoltage
  8951 ;; This function uses a non-reentrant model
  8952 ;;
  8953                           
  8954                           
  8955                           ;psect for function _ADC_StartConversion
  8956  12A7                     _ADC_StartConversion:	
  8957                           
  8958                           ;adc.c: 91: ADCON0bits.GO_nDONE = 1;
  8959                           
  8960                           ;incstack = 0
  8961                           ; Regs used in _ADC_StartConversion: []
  8962  12A7  0021               	movlb	1	; select bank1
  8963  12A8  149D               	bsf	29,1	;volatile
  8964  12A9  0008               	return
  8965  12AA                     __end_of_ADC_StartConversion:	
  8966                           
  8967                           	psect	text31
  8968  1383                     __ptext31:	
  8969 ;; *************** function _ADC_SelectChannel *****************
  8970 ;; Defined at:
  8971 ;;		line 80 in file "mcc_generated_files/adc.c"
  8972 ;; Parameters:    Size  Location     Type
  8973 ;;  channel         1    wreg     enum E2996
  8974 ;; Auto vars:     Size  Location     Type
  8975 ;;  channel         1    2[BANK0 ] enum E2996
  8976 ;; Return value:  Size  Location     Type
  8977 ;;                  1    wreg      void 
  8978 ;; Registers used:
  8979 ;;		wreg, status,2, status,0
  8980 ;; Tracked objects:
  8981 ;;		On entry : 0/0
  8982 ;;		On exit  : 0/0
  8983 ;;		Unchanged: 0/0
  8984 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8985 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8986 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8987 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8988 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8989 ;;Total ram usage:        2 bytes
  8990 ;; Hardware stack levels used:    1
  8991 ;; Hardware stack levels required when called:    4
  8992 ;; This function calls:
  8993 ;;		Nothing
  8994 ;; This function is called by:
  8995 ;;		_Sensor_getSupplyVoltage
  8996 ;; This function uses a non-reentrant model
  8997 ;;
  8998                           
  8999                           
  9000                           ;psect for function _ADC_SelectChannel
  9001  1383                     _ADC_SelectChannel:	
  9002                           
  9003                           ;incstack = 0
  9004                           ; Regs used in _ADC_SelectChannel: [wreg+status,2+status,0]
  9005                           ;ADC_SelectChannel@channel stored from wreg
  9006  1383  0020               	movlb	0	; select bank0
  9007  1384  00A2               	movwf	ADC_SelectChannel@channel
  9008                           
  9009                           ;adc.c: 83: ADCON0bits.CHS = channel;
  9010  1385  0822               	movf	ADC_SelectChannel@channel,w
  9011  1386  00A1               	movwf	??_ADC_SelectChannel
  9012  1387  0DA1               	rlf	??_ADC_SelectChannel,f
  9013  1388  0DA1               	rlf	??_ADC_SelectChannel,f
  9014  1389  0021               	movlb	1	; select bank1
  9015  138A  081D               	movf	29,w	;volatile
  9016  138B  0020               	movlb	0	; select bank0
  9017  138C  0621               	xorwf	??_ADC_SelectChannel,w
  9018  138D  3983               	andlw	-125
  9019  138E  0621               	xorwf	??_ADC_SelectChannel,w
  9020  138F  0021               	movlb	1	; select bank1
  9021  1390  009D               	movwf	29	;volatile
  9022                           
  9023                           ;adc.c: 85: ADCON0bits.ADON = 1;
  9024  1391  141D               	bsf	29,0	;volatile
  9025  1392  0008               	return
  9026  1393                     __end_of_ADC_SelectChannel:	
  9027                           
  9028                           	psect	text32
  9029  12F9                     __ptext32:	
  9030 ;; *************** function _ADC_IsConversionDone *****************
  9031 ;; Defined at:
  9032 ;;		line 95 in file "mcc_generated_files/adc.c"
  9033 ;; Parameters:    Size  Location     Type
  9034 ;;		None
  9035 ;; Auto vars:     Size  Location     Type
  9036 ;;		None
  9037 ;; Return value:  Size  Location     Type
  9038 ;;                  1    wreg      unsigned char 
  9039 ;; Registers used:
  9040 ;;		wreg, status,0
  9041 ;; Tracked objects:
  9042 ;;		On entry : 0/0
  9043 ;;		On exit  : 0/0
  9044 ;;		Unchanged: 0/0
  9045 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9046 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9047 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9048 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9049 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9050 ;;Total ram usage:        0 bytes
  9051 ;; Hardware stack levels used:    1
  9052 ;; Hardware stack levels required when called:    4
  9053 ;; This function calls:
  9054 ;;		Nothing
  9055 ;; This function is called by:
  9056 ;;		_Sensor_getSupplyVoltage
  9057 ;; This function uses a non-reentrant model
  9058 ;;
  9059                           
  9060                           
  9061                           ;psect for function _ADC_IsConversionDone
  9062  12F9                     _ADC_IsConversionDone:	
  9063                           
  9064                           ;adc.c: 98: return ((bool)(!ADCON0bits.GO_nDONE));
  9065                           
  9066                           ;incstack = 0
  9067                           ; Regs used in _ADC_IsConversionDone: [wreg+status,0]
  9068  12F9  1003               	clrc
  9069  12FA  0021               	movlb	1	; select bank1
  9070  12FB  1C9D               	btfss	29,1	;volatile
  9071  12FC  1403               	setc
  9072  12FD  3000               	movlw	0
  9073  12FE  3D09               	addwfc	9,w
  9074  12FF  0008               	return
  9075  1300                     __end_of_ADC_IsConversionDone:	
  9076                           
  9077                           	psect	text33
  9078  133C                     __ptext33:	
  9079 ;; *************** function _ADC_GetConversionResult *****************
  9080 ;; Defined at:
  9081 ;;		line 101 in file "mcc_generated_files/adc.c"
  9082 ;; Parameters:    Size  Location     Type
  9083 ;;		None
  9084 ;; Auto vars:     Size  Location     Type
  9085 ;;		None
  9086 ;; Return value:  Size  Location     Type
  9087 ;;                  2    1[BANK0 ] unsigned int 
  9088 ;; Registers used:
  9089 ;;		wreg
  9090 ;; Tracked objects:
  9091 ;;		On entry : 0/0
  9092 ;;		On exit  : 0/0
  9093 ;;		Unchanged: 0/0
  9094 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9095 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9096 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9097 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9098 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9099 ;;Total ram usage:        2 bytes
  9100 ;; Hardware stack levels used:    1
  9101 ;; Hardware stack levels required when called:    4
  9102 ;; This function calls:
  9103 ;;		Nothing
  9104 ;; This function is called by:
  9105 ;;		_Sensor_getSupplyVoltage
  9106 ;; This function uses a non-reentrant model
  9107 ;;
  9108                           
  9109                           
  9110                           ;psect for function _ADC_GetConversionResult
  9111  133C                     _ADC_GetConversionResult:	
  9112                           
  9113                           ;adc.c: 104: return ((adc_result_t)((ADRESH << 8) + ADRESL));
  9114                           
  9115                           ;incstack = 0
  9116                           ; Regs used in _ADC_GetConversionResult: [wreg]
  9117  133C  0021               	movlb	1	; select bank1
  9118  133D  081C               	movf	28,w	;volatile
  9119  133E  0020               	movlb	0	; select bank0
  9120  133F  00A2               	movwf	?_ADC_GetConversionResult+1
  9121  1340  0021               	movlb	1	; select bank1
  9122  1341  081B               	movf	27,w	;volatile
  9123  1342  0020               	movlb	0	; select bank0
  9124  1343  00A1               	movwf	?_ADC_GetConversionResult
  9125  1344  0008               	return
  9126  1345                     __end_of_ADC_GetConversionResult:	
  9127                           
  9128                           	psect	text34
  9129  13D7                     __ptext34:	
  9130 ;; *************** function _Diag_getSensorHealth *****************
  9131 ;; Defined at:
  9132 ;;		line 35 in file "diagnostics.c"
  9133 ;; Parameters:    Size  Location     Type
  9134 ;;		None
  9135 ;; Auto vars:     Size  Location     Type
  9136 ;;  var             1    2[BANK0 ] unsigned char 
  9137 ;; Return value:  Size  Location     Type
  9138 ;;                  1    wreg      unsigned char 
  9139 ;; Registers used:
  9140 ;;		wreg, status,2, status,0
  9141 ;; Tracked objects:
  9142 ;;		On entry : 0/0
  9143 ;;		On exit  : 0/0
  9144 ;;		Unchanged: 0/0
  9145 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9146 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9147 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9148 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9149 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9150 ;;Total ram usage:        2 bytes
  9151 ;; Hardware stack levels used:    1
  9152 ;; Hardware stack levels required when called:    4
  9153 ;; This function calls:
  9154 ;;		Nothing
  9155 ;; This function is called by:
  9156 ;;		_Wireless_packageData
  9157 ;; This function uses a non-reentrant model
  9158 ;;
  9159                           
  9160                           
  9161                           ;psect for function _Diag_getSensorHealth
  9162  13D7                     _Diag_getSensorHealth:	
  9163                           
  9164                           ;diagnostics.c: 38: char var=0;
  9165                           
  9166                           ;incstack = 0
  9167                           ; Regs used in _Diag_getSensorHealth: [wreg+status,2+status,0]
  9168  13D7  0020               	movlb	0	; select bank0
  9169  13D8  01A2               	clrf	Diag_getSensorHealth@var
  9170                           
  9171                           ;diagnostics.c: 40: var|=sensorHealth.compassHealth;
  9172  13D9  0021               	movlb	1	; select bank1
  9173  13DA  0864               	movf	(_sensorHealth^(0+128)+1),w
  9174  13DB  0020               	movlb	0	; select bank0
  9175  13DC  00A1               	movwf	??_Diag_getSensorHealth
  9176  13DD  0821               	movf	??_Diag_getSensorHealth,w
  9177  13DE  04A2               	iorwf	Diag_getSensorHealth@var,f
  9178                           
  9179                           ;diagnostics.c: 41: var<<=1;
  9180  13DF  1003               	clrc
  9181  13E0  0DA2               	rlf	Diag_getSensorHealth@var,f
  9182                           
  9183                           ;diagnostics.c: 42: var|=sensorHealth.tempSensorHealth;
  9184  13E1  0021               	movlb	1	; select bank1
  9185  13E2  0863               	movf	_sensorHealth^(0+128),w
  9186  13E3  0020               	movlb	0	; select bank0
  9187  13E4  00A1               	movwf	??_Diag_getSensorHealth
  9188  13E5  0821               	movf	??_Diag_getSensorHealth,w
  9189  13E6  04A2               	iorwf	Diag_getSensorHealth@var,f
  9190                           
  9191                           ;diagnostics.c: 44: return var;
  9192  13E7  0822               	movf	Diag_getSensorHealth@var,w
  9193  13E8  0008               	return
  9194  13E9                     __end_of_Diag_getSensorHealth:	
  9195                           
  9196                           	psect	text35
  9197  0783                     __ptext35:	
  9198 ;; *************** function _Wireless_init *****************
  9199 ;; Defined at:
  9200 ;;		line 18 in file "wireless.c"
  9201 ;; Parameters:    Size  Location     Type
  9202 ;;		None
  9203 ;; Auto vars:     Size  Location     Type
  9204 ;;		None
  9205 ;; Return value:  Size  Location     Type
  9206 ;;                  1    wreg      void 
  9207 ;; Registers used:
  9208 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  9209 ;; Tracked objects:
  9210 ;;		On entry : 0/0
  9211 ;;		On exit  : 0/0
  9212 ;;		Unchanged: 0/0
  9213 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9214 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9215 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9216 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9217 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9218 ;;Total ram usage:        2 bytes
  9219 ;; Hardware stack levels used:    1
  9220 ;; Hardware stack levels required when called:    8
  9221 ;; This function calls:
  9222 ;;		_RF_Init
  9223 ;;		_RF_ResetStatusIRQ
  9224 ;;		_RF_WriteRegister
  9225 ;;		_RF_WriteRegisterData
  9226 ;; This function is called by:
  9227 ;;		_main
  9228 ;; This function uses a non-reentrant model
  9229 ;;
  9230                           
  9231                           
  9232                           ;psect for function _Wireless_init
  9233  0783                     _Wireless_init:	
  9234                           
  9235                           ;wireless.c: 24: static const uint8_t TADDR[5] = "10001";
  9236                           ;wireless.c: 32: _delay((unsigned long)((100)*(8000000/4000.0)));
  9237                           
  9238                           ;incstack = 0
  9239                           ; Regs used in _Wireless_init: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  9240  0783  3002               	movlw	2
  9241  0784  0020               	movlb	0	; select bank0
  9242  0785  00AF               	movwf	??_Wireless_init+1
  9243  0786  3004               	movlw	4
  9244  0787  00AE               	movwf	??_Wireless_init
  9245  0788  30BA               	movlw	186
  9246  0789                     u7257:	
  9247  0789  0B89               	decfsz	9,f
  9248  078A  2F89               	goto	u7257
  9249  078B  0BAE               	decfsz	??_Wireless_init,f
  9250  078C  2F89               	goto	u7257
  9251  078D  0BAF               	decfsz	??_Wireless_init+1,f
  9252  078E  2F89               	goto	u7257
  9253  078F  0000               	nop
  9254                           
  9255                           ;wireless.c: 34: RF_Init();
  9256  0790  3192  22B8  3187   	fcall	_RF_Init
  9257                           
  9258                           ;wireless.c: 36: RF_WriteRegister(0x06, 0x06|0x20);
  9259  0793  3026               	movlw	38
  9260  0794  0020               	movlb	0	; select bank0
  9261  0795  00AE               	movwf	??_Wireless_init
  9262  0796  082E               	movf	??_Wireless_init,w
  9263  0797  00A3               	movwf	RF_WriteRegister@val
  9264  0798  3006               	movlw	6
  9265  0799  3194  2426  3187   	fcall	_RF_WriteRegister
  9266                           
  9267                           ;wireless.c: 37: RF_WriteRegister(0x11, 6);
  9268  079C  3006               	movlw	6
  9269  079D  0020               	movlb	0	; select bank0
  9270  079E  00AE               	movwf	??_Wireless_init
  9271  079F  082E               	movf	??_Wireless_init,w
  9272  07A0  00A3               	movwf	RF_WriteRegister@val
  9273  07A1  3011               	movlw	17
  9274  07A2  3194  2426  3187   	fcall	_RF_WriteRegister
  9275                           
  9276                           ;wireless.c: 38: RF_WriteRegister(0x05, 2);
  9277  07A5  3002               	movlw	2
  9278  07A6  0020               	movlb	0	; select bank0
  9279  07A7  00AE               	movwf	??_Wireless_init
  9280  07A8  082E               	movf	??_Wireless_init,w
  9281  07A9  00A3               	movwf	RF_WriteRegister@val
  9282  07AA  3005               	movlw	5
  9283  07AB  3194  2426  3187   	fcall	_RF_WriteRegister
  9284                           
  9285                           ;wireless.c: 41: RF_WriteRegisterData(0x0A, (uint8_t*)TADDR, sizeof(TADDR));
  9286  07AE  3021               	movlw	low (Wireless_init@TADDR| (0+32768))
  9287  07AF  0020               	movlb	0	; select bank0
  9288  07B0  00A9               	movwf	RF_WriteRegisterData@buf
  9289  07B1  3098               	movlw	high (Wireless_init@TADDR| (0+32768))
  9290  07B2  00AA               	movwf	RF_WriteRegisterData@buf+1
  9291  07B3  3005               	movlw	5
  9292  07B4  00AE               	movwf	??_Wireless_init
  9293  07B5  082E               	movf	??_Wireless_init,w
  9294  07B6  00AB               	movwf	RF_WriteRegisterData@bufSize
  9295  07B7  300A               	movlw	10
  9296  07B8  3195  258A  3187   	fcall	_RF_WriteRegisterData
  9297                           
  9298                           ;wireless.c: 42: RF_WriteRegisterData(0x10, (uint8_t*)TADDR, sizeof(TADDR));
  9299  07BB  3021               	movlw	low (Wireless_init@TADDR| (0+32768))
  9300  07BC  0020               	movlb	0	; select bank0
  9301  07BD  00A9               	movwf	RF_WriteRegisterData@buf
  9302  07BE  3098               	movlw	high (Wireless_init@TADDR| (0+32768))
  9303  07BF  00AA               	movwf	RF_WriteRegisterData@buf+1
  9304  07C0  3005               	movlw	5
  9305  07C1  00AE               	movwf	??_Wireless_init
  9306  07C2  082E               	movf	??_Wireless_init,w
  9307  07C3  00AB               	movwf	RF_WriteRegisterData@bufSize
  9308  07C4  3010               	movlw	16
  9309  07C5  3195  258A  3187   	fcall	_RF_WriteRegisterData
  9310                           
  9311                           ;wireless.c: 45: RF_WriteRegister(0x02, 0x01);
  9312  07C8  0020               	movlb	0	; select bank0
  9313  07C9  01A3               	clrf	RF_WriteRegister@val
  9314  07CA  0AA3               	incf	RF_WriteRegister@val,f
  9315  07CB  3002               	movlw	2
  9316  07CC  3194  2426  3187   	fcall	_RF_WriteRegister
  9317                           
  9318                           ;wireless.c: 48: RF_ResetStatusIRQ(0x40|0x20|0x10);
  9319  07CF  3070               	movlw	112
  9320  07D0  3196  261D  3187   	fcall	_RF_ResetStatusIRQ
  9321                           
  9322                           ;wireless.c: 50: RF_WriteRegister(0x01, 0x01);
  9323  07D3  0020               	movlb	0	; select bank0
  9324  07D4  01A3               	clrf	RF_WriteRegister@val
  9325  07D5  0AA3               	incf	RF_WriteRegister@val,f
  9326  07D6  3001               	movlw	1
  9327  07D7  3194  2426  3187   	fcall	_RF_WriteRegister
  9328                           
  9329                           ;wireless.c: 51: RF_WriteRegister(0x04, 0xF0|0x01);
  9330  07DA  30F1               	movlw	241
  9331  07DB  0020               	movlb	0	; select bank0
  9332  07DC  00AE               	movwf	??_Wireless_init
  9333  07DD  082E               	movf	??_Wireless_init,w
  9334  07DE  00A3               	movwf	RF_WriteRegister@val
  9335  07DF  3004               	movlw	4
  9336  07E0  3194  2426  3187   	fcall	_RF_WriteRegister
  9337                           
  9338                           ;wireless.c: 52: RF_WriteRegister(0x00, (1<<3)|(1<<2)|(1<<1)|(0));
  9339  07E3  300E               	movlw	14
  9340  07E4  0020               	movlb	0	; select bank0
  9341  07E5  00AE               	movwf	??_Wireless_init
  9342  07E6  082E               	movf	??_Wireless_init,w
  9343  07E7  00A3               	movwf	RF_WriteRegister@val
  9344  07E8  3000               	movlw	0
  9345  07E9  3194  2426  3187   	fcall	_RF_WriteRegister
  9346                           
  9347                           ;wireless.c: 53: RF_WriteRegister(0x1D, (1<<2) | (1<<1));
  9348  07EC  3006               	movlw	6
  9349  07ED  0020               	movlb	0	; select bank0
  9350  07EE  00AE               	movwf	??_Wireless_init
  9351  07EF  082E               	movf	??_Wireless_init,w
  9352  07F0  00A3               	movwf	RF_WriteRegister@val
  9353  07F1  301D               	movlw	29
  9354  07F2  3194  2426  3187   	fcall	_RF_WriteRegister
  9355                           
  9356                           ;wireless.c: 54: RF_WriteRegister(0x1C, (1<<0));
  9357  07F5  0020               	movlb	0	; select bank0
  9358  07F6  01A3               	clrf	RF_WriteRegister@val
  9359  07F7  0AA3               	incf	RF_WriteRegister@val,f
  9360  07F8  301C               	movlw	28
  9361  07F9  3194  2426         	fcall	_RF_WriteRegister
  9362                           
  9363                           ;wireless.c: 55: do { LATCbits.LATC2 = 0; } while(0);
  9364  07FB  0022               	movlb	2	; select bank2
  9365  07FC  110E               	bcf	14,2	;volatile
  9366  07FD  0008               	return
  9367  07FE                     __end_of_Wireless_init:	
  9368                           
  9369                           	psect	text36
  9370  158A                     __ptext36:	
  9371 ;; *************** function _RF_WriteRegisterData *****************
  9372 ;; Defined at:
  9373 ;;		line 113 in file "nrf24.c"
  9374 ;; Parameters:    Size  Location     Type
  9375 ;;  reg             1    wreg     unsigned char 
  9376 ;;  buf             2    9[BANK0 ] PTR unsigned char 
  9377 ;;		 -> Wireless_packageData@data(6), Wireless_determineTransmitPower@testPayload(1), Wireless_init@TADDR(5), 
  9378 ;;  bufSize         1   11[BANK0 ] unsigned char 
  9379 ;; Auto vars:     Size  Location     Type
  9380 ;;  reg             1   13[BANK0 ] unsigned char 
  9381 ;; Return value:  Size  Location     Type
  9382 ;;                  1    wreg      void 
  9383 ;; Registers used:
  9384 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  9385 ;; Tracked objects:
  9386 ;;		On entry : 0/0
  9387 ;;		On exit  : 0/0
  9388 ;;		Unchanged: 0/0
  9389 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9390 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9391 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9392 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9393 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9394 ;;Total ram usage:        5 bytes
  9395 ;; Hardware stack levels used:    1
  9396 ;; Hardware stack levels required when called:    7
  9397 ;; This function calls:
  9398 ;;		_SPI_WriteBuffer
  9399 ;;		_SPI_WriteRead
  9400 ;; This function is called by:
  9401 ;;		_RF_TxPayload
  9402 ;;		_Wireless_init
  9403 ;;		_RF_openWritingPipe
  9404 ;;		_RF_openReadingPipe
  9405 ;; This function uses a non-reentrant model
  9406 ;;
  9407                           
  9408                           
  9409                           ;psect for function _RF_WriteRegisterData
  9410  158A                     _RF_WriteRegisterData:	
  9411                           
  9412                           ;incstack = 0
  9413                           ; Regs used in _RF_WriteRegisterData: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  9414                           ;RF_WriteRegisterData@reg stored from wreg
  9415  158A  0020               	movlb	0	; select bank0
  9416  158B  00AD               	movwf	RF_WriteRegisterData@reg
  9417                           
  9418                           ;nrf24.c: 114: do { LATCbits.LATC1 = 0; } while(0);
  9419  158C  0022               	movlb	2	; select bank2
  9420  158D  108E               	bcf	14,1	;volatile
  9421                           
  9422                           ;nrf24.c: 115: (void)SPI_WriteRead(0x20|reg);
  9423  158E  0020               	movlb	0	; select bank0
  9424  158F  082D               	movf	RF_WriteRegisterData@reg,w
  9425  1590  3820               	iorlw	32
  9426  1591  3192  22D9  3195   	fcall	_SPI_WriteRead
  9427                           
  9428                           ;nrf24.c: 116: SPI_WriteBuffer(buf, bufSize);
  9429  1594  0020               	movlb	0	; select bank0
  9430  1595  082A               	movf	RF_WriteRegisterData@buf+1,w
  9431  1596  00A4               	movwf	SPI_WriteBuffer@bufOut+1
  9432  1597  0829               	movf	RF_WriteRegisterData@buf,w
  9433  1598  00A3               	movwf	SPI_WriteBuffer@bufOut
  9434  1599  082B               	movf	RF_WriteRegisterData@bufSize,w
  9435  159A  00AC               	movwf	??_RF_WriteRegisterData
  9436  159B  082C               	movf	??_RF_WriteRegisterData,w
  9437  159C  00A5               	movwf	SPI_WriteBuffer@bufSize
  9438  159D  3195  251A  3195   	fcall	_SPI_WriteBuffer
  9439                           
  9440                           ;nrf24.c: 117: do { LATCbits.LATC1 = 1; } while(0);
  9441  15A0  0022               	movlb	2	; select bank2
  9442  15A1  148E               	bsf	14,1	;volatile
  9443                           
  9444                           ;nrf24.c: 118: _delay((unsigned long)((10)*(8000000/4000000.0)));
  9445  15A2  3006               	movlw	6
  9446  15A3                     u7267:	
  9447  15A3  0B89               	decfsz	9,f
  9448  15A4  2DA3               	goto	u7267
  9449  15A5  3200               	nop2
  9450  15A6  0008               	return
  9451  15A7                     __end_of_RF_WriteRegisterData:	
  9452                           
  9453                           	psect	text37
  9454  151A                     __ptext37:	
  9455 ;; *************** function _SPI_WriteBuffer *****************
  9456 ;; Defined at:
  9457 ;;		line 56 in file "nrf24.c"
  9458 ;; Parameters:    Size  Location     Type
  9459 ;;  bufOut          2    3[BANK0 ] PTR unsigned char 
  9460 ;;		 -> Wireless_packageData@data(6), Wireless_determineTransmitPower@testPayload(1), Wireless_init@TADDR(5), 
  9461 ;;  bufSize         1    5[BANK0 ] unsigned char 
  9462 ;; Auto vars:     Size  Location     Type
  9463 ;;  i               1    8[BANK0 ] unsigned char 
  9464 ;; Return value:  Size  Location     Type
  9465 ;;                  1    wreg      void 
  9466 ;; Registers used:
  9467 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  9468 ;; Tracked objects:
  9469 ;;		On entry : 0/0
  9470 ;;		On exit  : 0/0
  9471 ;;		Unchanged: 0/0
  9472 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9473 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9474 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9475 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9476 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9477 ;;Total ram usage:        6 bytes
  9478 ;; Hardware stack levels used:    1
  9479 ;; Hardware stack levels required when called:    6
  9480 ;; This function calls:
  9481 ;;		_SPI_WriteRead
  9482 ;; This function is called by:
  9483 ;;		_RF_WriteRegisterData
  9484 ;; This function uses a non-reentrant model
  9485 ;;
  9486                           
  9487                           
  9488                           ;psect for function _SPI_WriteBuffer
  9489  151A                     _SPI_WriteBuffer:	
  9490                           
  9491                           ;nrf24.c: 57: uint8_t i;
  9492                           ;nrf24.c: 59: for(i=0;i<bufSize;i++) {
  9493                           
  9494                           ;incstack = 0
  9495                           ; Regs used in _SPI_WriteBuffer: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  9496  151A  0020               	movlb	0	; select bank0
  9497  151B  01A8               	clrf	SPI_WriteBuffer@i
  9498  151C                     l5541:	
  9499  151C  0825               	movf	SPI_WriteBuffer@bufSize,w
  9500  151D  0228               	subwf	SPI_WriteBuffer@i,w
  9501  151E  1803               	btfsc	3,0
  9502  151F  0008               	return
  9503                           
  9504                           ;nrf24.c: 60: (void)SPI_WriteRead(bufOut[i]);
  9505  1520  0824               	movf	SPI_WriteBuffer@bufOut+1,w
  9506  1521  00A7               	movwf	??_SPI_WriteBuffer+1
  9507  1522  0823               	movf	SPI_WriteBuffer@bufOut,w
  9508  1523  00A6               	movwf	??_SPI_WriteBuffer
  9509  1524  0828               	movf	SPI_WriteBuffer@i,w
  9510  1525  0726               	addwf	??_SPI_WriteBuffer,w
  9511  1526  0084               	movwf	4
  9512  1527  0827               	movf	??_SPI_WriteBuffer+1,w
  9513  1528  1803               	skipnc
  9514  1529  0A27               	incf	??_SPI_WriteBuffer+1,w
  9515  152A  0085               	movwf	5
  9516  152B  0800               	movf	0,w	;code access
  9517  152C  3192  22D9  3195   	fcall	_SPI_WriteRead
  9518  152F  3001               	movlw	1
  9519  1530  0020               	movlb	0	; select bank0
  9520  1531  00A6               	movwf	??_SPI_WriteBuffer
  9521  1532  0826               	movf	??_SPI_WriteBuffer,w
  9522  1533  07A8               	addwf	SPI_WriteBuffer@i,f
  9523  1534  2D1C               	goto	l5541
  9524  1535                     __end_of_SPI_WriteBuffer:	
  9525                           
  9526                           	psect	text38
  9527  161D                     __ptext38:	
  9528 ;; *************** function _RF_ResetStatusIRQ *****************
  9529 ;; Defined at:
  9530 ;;		line 158 in file "nrf24.c"
  9531 ;; Parameters:    Size  Location     Type
  9532 ;;  flags           1    wreg     unsigned char 
  9533 ;; Auto vars:     Size  Location     Type
  9534 ;;  flags           1    6[BANK0 ] unsigned char 
  9535 ;; Return value:  Size  Location     Type
  9536 ;;                  1    wreg      void 
  9537 ;; Registers used:
  9538 ;;		wreg, status,2, status,0, pclath, cstack
  9539 ;; Tracked objects:
  9540 ;;		On entry : 0/0
  9541 ;;		On exit  : 0/0
  9542 ;;		Unchanged: 0/0
  9543 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9544 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9545 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9546 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9547 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9548 ;;Total ram usage:        2 bytes
  9549 ;; Hardware stack levels used:    1
  9550 ;; Hardware stack levels required when called:    7
  9551 ;; This function calls:
  9552 ;;		_RF_WriteRegister
  9553 ;; This function is called by:
  9554 ;;		_Wireless_init
  9555 ;;		_Wireless_sendData
  9556 ;; This function uses a non-reentrant model
  9557 ;;
  9558                           
  9559                           
  9560                           ;psect for function _RF_ResetStatusIRQ
  9561  161D                     _RF_ResetStatusIRQ:	
  9562                           
  9563                           ;incstack = 0
  9564                           ; Regs used in _RF_ResetStatusIRQ: [wreg+status,2+status,0+pclath+cstack]
  9565                           ;RF_ResetStatusIRQ@flags stored from wreg
  9566  161D  0020               	movlb	0	; select bank0
  9567  161E  00A6               	movwf	RF_ResetStatusIRQ@flags
  9568                           
  9569                           ;nrf24.c: 159: _delay((unsigned long)((10)*(8000000/4000000.0)));
  9570  161F  3006               	movlw	6
  9571  1620                     u7277:	
  9572  1620  0B89               	decfsz	9,f
  9573  1621  2E20               	goto	u7277
  9574  1622  3200               	nop2
  9575                           
  9576                           ;nrf24.c: 160: do { LATCbits.LATC1 = 0; } while(0);
  9577  1623  0022               	movlb	2	; select bank2
  9578  1624  108E               	bcf	14,1	;volatile
  9579                           
  9580                           ;nrf24.c: 161: _delay((unsigned long)((10)*(8000000/4000000.0)));
  9581  1625  3006               	movlw	6
  9582  1626                     u7287:	
  9583  1626  0B89               	decfsz	9,f
  9584  1627  2E26               	goto	u7287
  9585  1628  3200               	nop2
  9586                           
  9587                           ;nrf24.c: 162: RF_WriteRegister(0x07, flags);
  9588  1629  0020               	movlb	0	; select bank0
  9589  162A  0826               	movf	RF_ResetStatusIRQ@flags,w
  9590  162B  00A5               	movwf	??_RF_ResetStatusIRQ
  9591  162C  0825               	movf	??_RF_ResetStatusIRQ,w
  9592  162D  00A3               	movwf	RF_WriteRegister@val
  9593  162E  3007               	movlw	7
  9594  162F  3194  2426  3196   	fcall	_RF_WriteRegister
  9595                           
  9596                           ;nrf24.c: 163: _delay((unsigned long)((10)*(8000000/4000000.0)));
  9597  1632  3006               	movlw	6
  9598  1633                     u7297:	
  9599  1633  0B89               	decfsz	9,f
  9600  1634  2E33               	goto	u7297
  9601  1635  3200               	nop2
  9602                           
  9603                           ;nrf24.c: 164: do { LATCbits.LATC1 = 1; } while(0);
  9604  1636  0022               	movlb	2	; select bank2
  9605  1637  148E               	bsf	14,1	;volatile
  9606                           
  9607                           ;nrf24.c: 165: _delay((unsigned long)((10)*(8000000/4000000.0)));
  9608  1638  3006               	movlw	6
  9609  1639                     u7307:	
  9610  1639  0B89               	decfsz	9,f
  9611  163A  2E39               	goto	u7307
  9612  163B  3200               	nop2
  9613  163C  0008               	return
  9614  163D                     __end_of_RF_ResetStatusIRQ:	
  9615                           
  9616                           	psect	text39
  9617  1426                     __ptext39:	
  9618 ;; *************** function _RF_WriteRegister *****************
  9619 ;; Defined at:
  9620 ;;		line 69 in file "nrf24.c"
  9621 ;; Parameters:    Size  Location     Type
  9622 ;;  reg             1    wreg     unsigned char 
  9623 ;;  val             1    3[BANK0 ] unsigned char 
  9624 ;; Auto vars:     Size  Location     Type
  9625 ;;  reg             1    4[BANK0 ] unsigned char 
  9626 ;; Return value:  Size  Location     Type
  9627 ;;                  1    wreg      void 
  9628 ;; Registers used:
  9629 ;;		wreg, status,2, status,0, pclath, cstack
  9630 ;; Tracked objects:
  9631 ;;		On entry : 0/0
  9632 ;;		On exit  : 0/0
  9633 ;;		Unchanged: 0/0
  9634 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9635 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9636 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9637 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9638 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9639 ;;Total ram usage:        2 bytes
  9640 ;; Hardware stack levels used:    1
  9641 ;; Hardware stack levels required when called:    6
  9642 ;; This function calls:
  9643 ;;		_SPI_WriteRead
  9644 ;; This function is called by:
  9645 ;;		_RF_ResetStatusIRQ
  9646 ;;		_Wireless_init
  9647 ;;		_Wireless_changeTransmitPower
  9648 ;;		_Wireless_sleep
  9649 ;;		_Wireless_wake
  9650 ;; This function uses a non-reentrant model
  9651 ;;
  9652                           
  9653                           
  9654                           ;psect for function _RF_WriteRegister
  9655  1426                     _RF_WriteRegister:	
  9656                           
  9657                           ;incstack = 0
  9658                           ; Regs used in _RF_WriteRegister: [wreg+status,2+status,0+pclath+cstack]
  9659                           ;RF_WriteRegister@reg stored from wreg
  9660  1426  0020               	movlb	0	; select bank0
  9661  1427  00A4               	movwf	RF_WriteRegister@reg
  9662                           
  9663                           ;nrf24.c: 70: do { LATCbits.LATC1 = 0; } while(0);
  9664  1428  0022               	movlb	2	; select bank2
  9665  1429  108E               	bcf	14,1	;volatile
  9666                           
  9667                           ;nrf24.c: 71: (void)SPI_WriteRead(0x20|reg);
  9668  142A  0020               	movlb	0	; select bank0
  9669  142B  0824               	movf	RF_WriteRegister@reg,w
  9670  142C  3820               	iorlw	32
  9671  142D  3192  22D9  3194   	fcall	_SPI_WriteRead
  9672                           
  9673                           ;nrf24.c: 72: (void)SPI_WriteRead(val);
  9674  1430  0020               	movlb	0	; select bank0
  9675  1431  0823               	movf	RF_WriteRegister@val,w
  9676  1432  3192  22D9  3194   	fcall	_SPI_WriteRead
  9677                           
  9678                           ;nrf24.c: 73: do { LATCbits.LATC1 = 1; } while(0);
  9679  1435  0022               	movlb	2	; select bank2
  9680  1436  148E               	bsf	14,1	;volatile
  9681                           
  9682                           ;nrf24.c: 74: _delay((unsigned long)((10)*(8000000/4000000.0)));
  9683  1437  3006               	movlw	6
  9684  1438                     u7317:	
  9685  1438  0B89               	decfsz	9,f
  9686  1439  2C38               	goto	u7317
  9687  143A  3200               	nop2
  9688  143B  0008               	return
  9689  143C                     __end_of_RF_WriteRegister:	
  9690                           
  9691                           	psect	text40
  9692  12D9                     __ptext40:	
  9693 ;; *************** function _SPI_WriteRead *****************
  9694 ;; Defined at:
  9695 ;;		line 26 in file "nrf24.c"
  9696 ;; Parameters:    Size  Location     Type
  9697 ;;  val             1    wreg     unsigned char 
  9698 ;; Auto vars:     Size  Location     Type
  9699 ;;  val             1    2[BANK0 ] unsigned char 
  9700 ;; Return value:  Size  Location     Type
  9701 ;;                  1    wreg      unsigned char 
  9702 ;; Registers used:
  9703 ;;		wreg, pclath, cstack
  9704 ;; Tracked objects:
  9705 ;;		On entry : 0/0
  9706 ;;		On exit  : 0/0
  9707 ;;		Unchanged: 0/0
  9708 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9709 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9710 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9711 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9712 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9713 ;;Total ram usage:        1 bytes
  9714 ;; Hardware stack levels used:    1
  9715 ;; Hardware stack levels required when called:    5
  9716 ;; This function calls:
  9717 ;;		_SPI1_Exchange8bit
  9718 ;; This function is called by:
  9719 ;;		_SPI_WriteReadBuffer
  9720 ;;		_SPI_WriteBuffer
  9721 ;;		_RF_WriteRegister
  9722 ;;		_RF_ReadRegister
  9723 ;;		_RF_ReadRegisterData
  9724 ;;		_RF_WriteRegisterData
  9725 ;;		_RF_WriteRead
  9726 ;;		_RF_Write
  9727 ;; This function uses a non-reentrant model
  9728 ;;
  9729                           
  9730                           
  9731                           ;psect for function _SPI_WriteRead
  9732  12D9                     _SPI_WriteRead:	
  9733                           
  9734                           ;incstack = 0
  9735                           ; Regs used in _SPI_WriteRead: [wreg+pclath+cstack]
  9736                           ;SPI_WriteRead@val stored from wreg
  9737  12D9  0020               	movlb	0	; select bank0
  9738  12DA  00A2               	movwf	SPI_WriteRead@val
  9739                           
  9740                           ;nrf24.c: 34: return SPI1_Exchange8bit(val);
  9741  12DB  0822               	movf	SPI_WriteRead@val,w
  9742  12DC  3193  234F         	fcall	_SPI1_Exchange8bit
  9743  12DE  0008               	return
  9744  12DF                     __end_of_SPI_WriteRead:	
  9745                           
  9746                           	psect	text41
  9747  134F                     __ptext41:	
  9748 ;; *************** function _SPI1_Exchange8bit *****************
  9749 ;; Defined at:
  9750 ;;		line 77 in file "mcc_generated_files/spi1.c"
  9751 ;; Parameters:    Size  Location     Type
  9752 ;;  data            1    wreg     unsigned char 
  9753 ;; Auto vars:     Size  Location     Type
  9754 ;;  data            1    1[BANK0 ] unsigned char 
  9755 ;; Return value:  Size  Location     Type
  9756 ;;                  1    wreg      unsigned char 
  9757 ;; Registers used:
  9758 ;;		wreg
  9759 ;; Tracked objects:
  9760 ;;		On entry : 0/0
  9761 ;;		On exit  : 0/0
  9762 ;;		Unchanged: 0/0
  9763 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9764 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9765 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9766 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9767 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9768 ;;Total ram usage:        1 bytes
  9769 ;; Hardware stack levels used:    1
  9770 ;; Hardware stack levels required when called:    4
  9771 ;; This function calls:
  9772 ;;		Nothing
  9773 ;; This function is called by:
  9774 ;;		_SPI_WriteRead
  9775 ;;		_SPI1_Exchange8bitBuffer
  9776 ;; This function uses a non-reentrant model
  9777 ;;
  9778                           
  9779                           
  9780                           ;psect for function _SPI1_Exchange8bit
  9781  134F                     _SPI1_Exchange8bit:	
  9782                           
  9783                           ;incstack = 0
  9784                           ; Regs used in _SPI1_Exchange8bit: [wreg]
  9785                           ;SPI1_Exchange8bit@data stored from wreg
  9786  134F  0020               	movlb	0	; select bank0
  9787  1350  00A1               	movwf	SPI1_Exchange8bit@data
  9788                           
  9789                           ;spi1.c: 80: SSP1CON1bits.WCOL = 0;
  9790  1351  0024               	movlb	4	; select bank4
  9791  1352  1395               	bcf	21,7	;volatile
  9792                           
  9793                           ;spi1.c: 82: SSP1BUF = data;
  9794  1353  0020               	movlb	0	; select bank0
  9795  1354  0821               	movf	SPI1_Exchange8bit@data,w
  9796  1355  0024               	movlb	4	; select bank4
  9797  1356  0091               	movwf	17	;volatile
  9798  1357                     l522:	
  9799                           ;spi1.c: 85: {
  9800                           
  9801                           ;spi1.c: 84: while(SSP1STATbits.BF == 0x0)
  9802                           
  9803  1357  1C14               	btfss	20,0	;volatile
  9804  1358  2B57               	goto	l522
  9805                           
  9806                           ;spi1.c: 86: }
  9807                           ;spi1.c: 88: return (SSP1BUF);
  9808  1359  0811               	movf	17,w	;volatile
  9809  135A  0008               	return
  9810  135B                     __end_of_SPI1_Exchange8bit:	
  9811                           
  9812                           	psect	text42
  9813  12B8                     __ptext42:	
  9814 ;; *************** function _RF_Init *****************
  9815 ;; Defined at:
  9816 ;;		line 195 in file "nrf24.c"
  9817 ;; Parameters:    Size  Location     Type
  9818 ;;		None
  9819 ;; Auto vars:     Size  Location     Type
  9820 ;;		None
  9821 ;; Return value:  Size  Location     Type
  9822 ;;                  1    wreg      void 
  9823 ;; Registers used:
  9824 ;;		None
  9825 ;; Tracked objects:
  9826 ;;		On entry : 0/0
  9827 ;;		On exit  : 0/0
  9828 ;;		Unchanged: 0/0
  9829 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9830 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9831 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9832 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9833 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9834 ;;Total ram usage:        0 bytes
  9835 ;; Hardware stack levels used:    1
  9836 ;; Hardware stack levels required when called:    4
  9837 ;; This function calls:
  9838 ;;		Nothing
  9839 ;; This function is called by:
  9840 ;;		_Wireless_init
  9841 ;; This function uses a non-reentrant model
  9842 ;;
  9843                           
  9844                           
  9845                           ;psect for function _RF_Init
  9846  12B8                     _RF_Init:	
  9847                           
  9848                           ;incstack = 0
  9849                           ; Regs used in _RF_Init: []
  9850                           ;nrf24.c: 196: do { LATCbits.LATC2 = 0; } while(0);
  9851  12B8  0022               	movlb	2	; select bank2
  9852  12B9  110E               	bcf	14,2	;volatile
  9853                           
  9854                           ;nrf24.c: 197: do { LATCbits.LATC1 = 1; } while(0);
  9855  12BA  148E               	bsf	14,1	;volatile
  9856  12BB  0008               	return
  9857  12BC                     __end_of_RF_Init:	
  9858                           
  9859                           	psect	text43
  9860  0A50                     __ptext43:	
  9861 ;; *************** function _Timeout_updateCurrentTime *****************
  9862 ;; Defined at:
  9863 ;;		line 13 in file "timeout.c"
  9864 ;; Parameters:    Size  Location     Type
  9865 ;;		None
  9866 ;; Auto vars:     Size  Location     Type
  9867 ;;  var             4   17[BANK0 ] unsigned long 
  9868 ;; Return value:  Size  Location     Type
  9869 ;;                  1    wreg      void 
  9870 ;; Registers used:
  9871 ;;		wreg, status,2, status,0, pclath, cstack
  9872 ;; Tracked objects:
  9873 ;;		On entry : 0/0
  9874 ;;		On exit  : 0/0
  9875 ;;		Unchanged: 0/0
  9876 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9877 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9878 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9879 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9880 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9881 ;;Total ram usage:        8 bytes
  9882 ;; Hardware stack levels used:    1
  9883 ;; Hardware stack levels required when called:    5
  9884 ;; This function calls:
  9885 ;;		_TMR1_ReadTimer
  9886 ;;		___lmul
  9887 ;; This function is called by:
  9888 ;;		_main
  9889 ;; This function uses a non-reentrant model
  9890 ;;
  9891                           
  9892                           
  9893                           ;psect for function _Timeout_updateCurrentTime
  9894  0A50                     _Timeout_updateCurrentTime:	
  9895                           
  9896                           ;timeout.c: 15: unsigned long var = 10;
  9897                           
  9898                           ;incstack = 0
  9899                           ; Regs used in _Timeout_updateCurrentTime: [wreg+status,2+status,0+pclath+cstack]
  9900  0A50  3000               	movlw	0
  9901  0A51  0020               	movlb	0	; select bank0
  9902  0A52  00B4               	movwf	Timeout_updateCurrentTime@var+3
  9903  0A53  3000               	movlw	0
  9904  0A54  00B3               	movwf	Timeout_updateCurrentTime@var+2
  9905  0A55  3000               	movlw	0
  9906  0A56  00B2               	movwf	Timeout_updateCurrentTime@var+1
  9907  0A57  300A               	movlw	10
  9908  0A58  00B1               	movwf	Timeout_updateCurrentTime@var
  9909                           
  9910                           ;timeout.c: 16: var = TMR1_ReadTimer();
  9911  0A59  3195  256D  318A   	fcall	_TMR1_ReadTimer
  9912  0A5C  0020               	movlb	0	; select bank0
  9913  0A5D  0821               	movf	?_TMR1_ReadTimer,w
  9914  0A5E  00B1               	movwf	Timeout_updateCurrentTime@var
  9915  0A5F  0822               	movf	?_TMR1_ReadTimer+1,w
  9916  0A60  00B2               	movwf	Timeout_updateCurrentTime@var+1
  9917  0A61  01B3               	clrf	Timeout_updateCurrentTime@var+2
  9918  0A62  01B4               	clrf	Timeout_updateCurrentTime@var+3
  9919                           
  9920                           ;timeout.c: 17: var= var - 0x6000;
  9921  0A63  3000               	movlw	0
  9922  0A64  00AD               	movwf	??_Timeout_updateCurrentTime
  9923  0A65  30A0               	movlw	160
  9924  0A66  00AE               	movwf	??_Timeout_updateCurrentTime+1
  9925  0A67  30FF               	movlw	255
  9926  0A68  00AF               	movwf	??_Timeout_updateCurrentTime+2
  9927  0A69  30FF               	movlw	255
  9928  0A6A  00B0               	movwf	??_Timeout_updateCurrentTime+3
  9929  0A6B  0831               	movf	Timeout_updateCurrentTime@var,w
  9930  0A6C  07AD               	addwf	??_Timeout_updateCurrentTime,f
  9931  0A6D  0832               	movf	Timeout_updateCurrentTime@var+1,w
  9932  0A6E  3DAE               	addwfc	??_Timeout_updateCurrentTime+1,f
  9933  0A6F  0833               	movf	Timeout_updateCurrentTime@var+2,w
  9934  0A70  3DAF               	addwfc	??_Timeout_updateCurrentTime+2,f
  9935  0A71  0834               	movf	Timeout_updateCurrentTime@var+3,w
  9936  0A72  3DB0               	addwfc	??_Timeout_updateCurrentTime+3,f
  9937  0A73  0830               	movf	??_Timeout_updateCurrentTime+3,w
  9938  0A74  00B4               	movwf	Timeout_updateCurrentTime@var+3
  9939  0A75  082F               	movf	??_Timeout_updateCurrentTime+2,w
  9940  0A76  00B3               	movwf	Timeout_updateCurrentTime@var+2
  9941  0A77  082E               	movf	??_Timeout_updateCurrentTime+1,w
  9942  0A78  00B2               	movwf	Timeout_updateCurrentTime@var+1
  9943  0A79  082D               	movf	??_Timeout_updateCurrentTime,w
  9944  0A7A  00B1               	movwf	Timeout_updateCurrentTime@var
  9945                           
  9946                           ;timeout.c: 18: globalCounter += ((var*1000)/4096);
  9947  0A7B  0834               	movf	Timeout_updateCurrentTime@var+3,w
  9948  0A7C  00A4               	movwf	___lmul@multiplier+3
  9949  0A7D  0833               	movf	Timeout_updateCurrentTime@var+2,w
  9950  0A7E  00A3               	movwf	___lmul@multiplier+2
  9951  0A7F  0832               	movf	Timeout_updateCurrentTime@var+1,w
  9952  0A80  00A2               	movwf	___lmul@multiplier+1
  9953  0A81  0831               	movf	Timeout_updateCurrentTime@var,w
  9954  0A82  00A1               	movwf	___lmul@multiplier
  9955  0A83  3000               	movlw	0
  9956  0A84  00A8               	movwf	___lmul@multiplicand+3
  9957  0A85  3000               	movlw	0
  9958  0A86  00A7               	movwf	___lmul@multiplicand+2
  9959  0A87  3003               	movlw	3
  9960  0A88  00A6               	movwf	___lmul@multiplicand+1
  9961  0A89  30E8               	movlw	232
  9962  0A8A  00A5               	movwf	___lmul@multiplicand
  9963  0A8B  3197  2794  318A   	fcall	___lmul
  9964  0A8E  0020               	movlb	0	; select bank0
  9965  0A8F  0821               	movf	?___lmul,w
  9966  0A90  00AD               	movwf	??_Timeout_updateCurrentTime
  9967  0A91  0822               	movf	?___lmul+1,w
  9968  0A92  00AE               	movwf	??_Timeout_updateCurrentTime+1
  9969  0A93  0823               	movf	?___lmul+2,w
  9970  0A94  00AF               	movwf	??_Timeout_updateCurrentTime+2
  9971  0A95  0824               	movf	?___lmul+3,w
  9972  0A96  00B0               	movwf	??_Timeout_updateCurrentTime+3
  9973  0A97  300C               	movlw	12
  9974  0A98                     u6445:	
  9975  0A98  36B0               	lsrf	??_Timeout_updateCurrentTime+3,f
  9976  0A99  0CAF               	rrf	??_Timeout_updateCurrentTime+2,f
  9977  0A9A  0CAE               	rrf	??_Timeout_updateCurrentTime+1,f
  9978  0A9B  0CAD               	rrf	??_Timeout_updateCurrentTime,f
  9979  0A9C  0B89               	decfsz	9,f
  9980  0A9D  2A98               	goto	u6445
  9981  0A9E  082D               	movf	??_Timeout_updateCurrentTime,w
  9982  0A9F  0021               	movlb	1	; select bank1
  9983  0AA0  07CF               	addwf	_globalCounter^(0+128),f	;volatile
  9984  0AA1  0020               	movlb	0	; select bank0
  9985  0AA2  082E               	movf	??_Timeout_updateCurrentTime+1,w
  9986  0AA3  0021               	movlb	1	; select bank1
  9987  0AA4  3DD0               	addwfc	(_globalCounter+1)^(0+128),f	;volatile
  9988  0AA5  0020               	movlb	0	; select bank0
  9989  0AA6  082F               	movf	??_Timeout_updateCurrentTime+2,w
  9990  0AA7  0021               	movlb	1	; select bank1
  9991  0AA8  3DD1               	addwfc	(_globalCounter+2)^(0+128),f	;volatile
  9992  0AA9  0020               	movlb	0	; select bank0
  9993  0AAA  0830               	movf	??_Timeout_updateCurrentTime+3,w
  9994  0AAB  0021               	movlb	1	; select bank1
  9995  0AAC  3DD2               	addwfc	(_globalCounter+3)^(0+128),f	;volatile
  9996  0AAD  0008               	return
  9997  0AAE                     __end_of_Timeout_updateCurrentTime:	
  9998                           
  9999                           	psect	text44
 10000  1794                     __ptext44:	
 10001 ;; *************** function ___lmul *****************
 10002 ;; Defined at:
 10003 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\Umul32.c"
 10004 ;; Parameters:    Size  Location     Type
 10005 ;;  multiplier      4    1[BANK0 ] unsigned long 
 10006 ;;  multiplicand    4    5[BANK0 ] unsigned long 
 10007 ;; Auto vars:     Size  Location     Type
 10008 ;;  product         4    9[BANK0 ] unsigned long 
 10009 ;; Return value:  Size  Location     Type
 10010 ;;                  4    1[BANK0 ] unsigned long 
 10011 ;; Registers used:
 10012 ;;		wreg, status,2, status,0
 10013 ;; Tracked objects:
 10014 ;;		On entry : 0/0
 10015 ;;		On exit  : 0/0
 10016 ;;		Unchanged: 0/0
 10017 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10018 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10019 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10020 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10021 ;;      Totals:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10022 ;;Total ram usage:       12 bytes
 10023 ;; Hardware stack levels used:    1
 10024 ;; Hardware stack levels required when called:    4
 10025 ;; This function calls:
 10026 ;;		Nothing
 10027 ;; This function is called by:
 10028 ;;		_Wireless_checkDataReceived
 10029 ;;		_Timeout_updateCurrentTime
 10030 ;; This function uses a non-reentrant model
 10031 ;;
 10032                           
 10033                           
 10034                           ;psect for function ___lmul
 10035  1794                     ___lmul:	
 10036                           
 10037                           ;incstack = 0
 10038                           ; Regs used in ___lmul: [wreg+status,2+status,0]
 10039  1794  3000               	movlw	0
 10040  1795  0020               	movlb	0	; select bank0
 10041  1796  00AC               	movwf	___lmul@product+3
 10042  1797  3000               	movlw	0
 10043  1798  00AB               	movwf	___lmul@product+2
 10044  1799  3000               	movlw	0
 10045  179A  00AA               	movwf	___lmul@product+1
 10046  179B  3000               	movlw	0
 10047  179C  00A9               	movwf	___lmul@product
 10048  179D                     l5877:	
 10049  179D  1C21               	btfss	___lmul@multiplier,0
 10050  179E  2FA7               	goto	l5881
 10051  179F  0825               	movf	___lmul@multiplicand,w
 10052  17A0  07A9               	addwf	___lmul@product,f
 10053  17A1  0826               	movf	___lmul@multiplicand+1,w
 10054  17A2  3DAA               	addwfc	___lmul@product+1,f
 10055  17A3  0827               	movf	___lmul@multiplicand+2,w
 10056  17A4  3DAB               	addwfc	___lmul@product+2,f
 10057  17A5  0828               	movf	___lmul@multiplicand+3,w
 10058  17A6  3DAC               	addwfc	___lmul@product+3,f
 10059  17A7                     l5881:	
 10060  17A7  3001               	movlw	1
 10061  17A8                     u5335:	
 10062  17A8  35A5               	lslf	___lmul@multiplicand,f
 10063  17A9  0DA6               	rlf	___lmul@multiplicand+1,f
 10064  17AA  0DA7               	rlf	___lmul@multiplicand+2,f
 10065  17AB  0DA8               	rlf	___lmul@multiplicand+3,f
 10066  17AC  0B89               	decfsz	9,f
 10067  17AD  2FA8               	goto	u5335
 10068  17AE  3001               	movlw	1
 10069  17AF                     u5345:	
 10070  17AF  36A4               	lsrf	___lmul@multiplier+3,f
 10071  17B0  0CA3               	rrf	___lmul@multiplier+2,f
 10072  17B1  0CA2               	rrf	___lmul@multiplier+1,f
 10073  17B2  0CA1               	rrf	___lmul@multiplier,f
 10074  17B3  0B89               	decfsz	9,f
 10075  17B4  2FAF               	goto	u5345
 10076  17B5  0824               	movf	___lmul@multiplier+3,w
 10077  17B6  0423               	iorwf	___lmul@multiplier+2,w
 10078  17B7  0422               	iorwf	___lmul@multiplier+1,w
 10079  17B8  0421               	iorwf	___lmul@multiplier,w
 10080  17B9  1D03               	skipz
 10081  17BA  2F9D               	goto	l5877
 10082  17BB  082C               	movf	___lmul@product+3,w
 10083  17BC  00A4               	movwf	?___lmul+3
 10084  17BD  082B               	movf	___lmul@product+2,w
 10085  17BE  00A3               	movwf	?___lmul+2
 10086  17BF  082A               	movf	___lmul@product+1,w
 10087  17C0  00A2               	movwf	?___lmul+1
 10088  17C1  0829               	movf	___lmul@product,w
 10089  17C2  00A1               	movwf	?___lmul
 10090  17C3  0008               	return
 10091  17C4                     __end_of___lmul:	
 10092                           
 10093                           	psect	text45
 10094  156D                     __ptext45:	
 10095 ;; *************** function _TMR1_ReadTimer *****************
 10096 ;; Defined at:
 10097 ;;		line 104 in file "mcc_generated_files/tmr1.c"
 10098 ;; Parameters:    Size  Location     Type
 10099 ;;		None
 10100 ;; Auto vars:     Size  Location     Type
 10101 ;;  readVal         2    8[BANK0 ] unsigned int 
 10102 ;;  readValLow      1   11[BANK0 ] unsigned char 
 10103 ;;  readValHigh     1   10[BANK0 ] unsigned char 
 10104 ;; Return value:  Size  Location     Type
 10105 ;;                  2    1[BANK0 ] unsigned int 
 10106 ;; Registers used:
 10107 ;;		wreg
 10108 ;; Tracked objects:
 10109 ;;		On entry : 0/0
 10110 ;;		On exit  : 0/0
 10111 ;;		Unchanged: 0/0
 10112 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10113 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10114 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10115 ;;      Temps:          0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10116 ;;      Totals:         0      11       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10117 ;;Total ram usage:       11 bytes
 10118 ;; Hardware stack levels used:    1
 10119 ;; Hardware stack levels required when called:    4
 10120 ;; This function calls:
 10121 ;;		Nothing
 10122 ;; This function is called by:
 10123 ;;		_Timeout_updateCurrentTime
 10124 ;; This function uses a non-reentrant model
 10125 ;;
 10126                           
 10127                           
 10128                           ;psect for function _TMR1_ReadTimer
 10129  156D                     _TMR1_ReadTimer:	
 10130                           
 10131                           ;tmr1.c: 106: uint16_t readVal;
 10132                           ;tmr1.c: 107: uint8_t readValHigh;
 10133                           ;tmr1.c: 108: uint8_t readValLow;
 10134                           ;tmr1.c: 110: readValLow = TMR1L;
 10135                           
 10136                           ;incstack = 0
 10137                           ; Regs used in _TMR1_ReadTimer: [wreg]
 10138  156D  0020               	movlb	0	; select bank0
 10139  156E  0816               	movf	22,w	;volatile
 10140  156F  00A3               	movwf	??_TMR1_ReadTimer
 10141  1570  0823               	movf	??_TMR1_ReadTimer,w
 10142  1571  00AB               	movwf	TMR1_ReadTimer@readValLow
 10143                           
 10144                           ;tmr1.c: 111: readValHigh = TMR1H;
 10145  1572  0817               	movf	23,w	;volatile
 10146  1573  00A3               	movwf	??_TMR1_ReadTimer
 10147  1574  0823               	movf	??_TMR1_ReadTimer,w
 10148  1575  00AA               	movwf	TMR1_ReadTimer@readValHigh
 10149                           
 10150                           ;tmr1.c: 113: readVal = ((uint16_t)readValHigh << 8) | readValLow;
 10151  1576  082B               	movf	TMR1_ReadTimer@readValLow,w
 10152  1577  00A3               	movwf	??_TMR1_ReadTimer
 10153  1578  01A4               	clrf	??_TMR1_ReadTimer+1
 10154  1579  082A               	movf	TMR1_ReadTimer@readValHigh,w
 10155  157A  00A5               	movwf	??_TMR1_ReadTimer+2
 10156  157B  01A6               	clrf	??_TMR1_ReadTimer+3
 10157  157C  0825               	movf	??_TMR1_ReadTimer+2,w
 10158  157D  00A6               	movwf	??_TMR1_ReadTimer+3
 10159  157E  01A5               	clrf	??_TMR1_ReadTimer+2
 10160  157F  0823               	movf	??_TMR1_ReadTimer,w
 10161  1580  0425               	iorwf	??_TMR1_ReadTimer+2,w
 10162  1581  00A8               	movwf	TMR1_ReadTimer@readVal
 10163  1582  0824               	movf	??_TMR1_ReadTimer+1,w
 10164  1583  0426               	iorwf	??_TMR1_ReadTimer+3,w
 10165  1584  00A9               	movwf	TMR1_ReadTimer@readVal+1
 10166                           
 10167                           ;tmr1.c: 115: return readVal;
 10168  1585  0829               	movf	TMR1_ReadTimer@readVal+1,w
 10169  1586  00A2               	movwf	?_TMR1_ReadTimer+1
 10170  1587  0828               	movf	TMR1_ReadTimer@readVal,w
 10171  1588  00A1               	movwf	?_TMR1_ReadTimer
 10172  1589  0008               	return
 10173  158A                     __end_of_TMR1_ReadTimer:	
 10174                           
 10175                           	psect	text46
 10176  13B4                     __ptext46:	
 10177 ;; *************** function _Timeout_getGlobalCounter *****************
 10178 ;; Defined at:
 10179 ;;		line 21 in file "timeout.c"
 10180 ;; Parameters:    Size  Location     Type
 10181 ;;		None
 10182 ;; Auto vars:     Size  Location     Type
 10183 ;;		None
 10184 ;; Return value:  Size  Location     Type
 10185 ;;                  4    1[BANK0 ] unsigned long 
 10186 ;; Registers used:
 10187 ;;		wreg
 10188 ;; Tracked objects:
 10189 ;;		On entry : 0/0
 10190 ;;		On exit  : 0/0
 10191 ;;		Unchanged: 0/0
 10192 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10193 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10194 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10195 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10196 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10197 ;;Total ram usage:        4 bytes
 10198 ;; Hardware stack levels used:    1
 10199 ;; Hardware stack levels required when called:    4
 10200 ;; This function calls:
 10201 ;;		Nothing
 10202 ;; This function is called by:
 10203 ;;		_main
 10204 ;; This function uses a non-reentrant model
 10205 ;;
 10206                           
 10207                           
 10208                           ;psect for function _Timeout_getGlobalCounter
 10209  13B4                     _Timeout_getGlobalCounter:	
 10210                           
 10211                           ;timeout.c: 23: return globalCounter;
 10212                           
 10213                           ;incstack = 0
 10214                           ; Regs used in _Timeout_getGlobalCounter: [wreg]
 10215  13B4  0021               	movlb	1	; select bank1
 10216  13B5  0852               	movf	(_globalCounter+3)^(0+128),w	;volatile
 10217  13B6  0020               	movlb	0	; select bank0
 10218  13B7  00A4               	movwf	?_Timeout_getGlobalCounter+3
 10219  13B8  0021               	movlb	1	; select bank1
 10220  13B9  0851               	movf	(_globalCounter+2)^(0+128),w	;volatile
 10221  13BA  0020               	movlb	0	; select bank0
 10222  13BB  00A3               	movwf	?_Timeout_getGlobalCounter+2
 10223  13BC  0021               	movlb	1	; select bank1
 10224  13BD  0850               	movf	(_globalCounter+1)^(0+128),w	;volatile
 10225  13BE  0020               	movlb	0	; select bank0
 10226  13BF  00A2               	movwf	?_Timeout_getGlobalCounter+1
 10227  13C0  0021               	movlb	1	; select bank1
 10228  13C1  084F               	movf	_globalCounter^(0+128),w	;volatile
 10229  13C2  0020               	movlb	0	; select bank0
 10230  13C3  00A1               	movwf	?_Timeout_getGlobalCounter
 10231  13C4  0008               	return
 10232  13C5                     __end_of_Timeout_getGlobalCounter:	
 10233                           
 10234                           	psect	text47
 10235  14FF                     __ptext47:	
 10236 ;; *************** function _SYSTEM_Initialize *****************
 10237 ;; Defined at:
 10238 ;;		line 70 in file "mcc_generated_files/mcc.c"
 10239 ;; Parameters:    Size  Location     Type
 10240 ;;		None
 10241 ;; Auto vars:     Size  Location     Type
 10242 ;;		None
 10243 ;; Return value:  Size  Location     Type
 10244 ;;                  1    wreg      void 
 10245 ;; Registers used:
 10246 ;;		wreg, status,2, status,0, pclath, cstack
 10247 ;; Tracked objects:
 10248 ;;		On entry : 0/0
 10249 ;;		On exit  : 0/0
 10250 ;;		Unchanged: 0/0
 10251 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10252 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10253 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10254 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10255 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10256 ;;Total ram usage:        0 bytes
 10257 ;; Hardware stack levels used:    1
 10258 ;; Hardware stack levels required when called:    6
 10259 ;; This function calls:
 10260 ;;		_ADC_Initialize
 10261 ;;		_FVR_Initialize
 10262 ;;		_I2C2_Initialize
 10263 ;;		_OSCILLATOR_Initialize
 10264 ;;		_PIN_MANAGER_Initialize
 10265 ;;		_SPI1_Initialize
 10266 ;;		_TMR1_Initialize
 10267 ;;		_TMR2_Initialize
 10268 ;;		_WDT_Initialize
 10269 ;; This function is called by:
 10270 ;;		_main
 10271 ;; This function uses a non-reentrant model
 10272 ;;
 10273                           
 10274                           
 10275                           ;psect for function _SYSTEM_Initialize
 10276  14FF                     _SYSTEM_Initialize:	
 10277                           
 10278                           ;mcc.c: 73: PIN_MANAGER_Initialize();
 10279                           
 10280                           ;incstack = 0
 10281                           ; Regs used in _SYSTEM_Initialize: [wreg+status,2+status,0+pclath+cstack]
 10282  14FF  3197  273D  3194   	fcall	_PIN_MANAGER_Initialize
 10283                           
 10284                           ;mcc.c: 74: OSCILLATOR_Initialize();
 10285  1502  3192  22EB  3194   	fcall	_OSCILLATOR_Initialize
 10286                           
 10287                           ;mcc.c: 75: WDT_Initialize();
 10288  1505  3192  22B4  3194   	fcall	_WDT_Initialize
 10289                           
 10290                           ;mcc.c: 76: SPI1_Initialize();
 10291  1508  3192  22F2  3194   	fcall	_SPI1_Initialize
 10292                           
 10293                           ;mcc.c: 77: I2C2_Initialize();
 10294  150B  3194  24E4  3194   	fcall	_I2C2_Initialize
 10295                           
 10296                           ;mcc.c: 78: FVR_Initialize();
 10297  150E  3192  22B0  3194   	fcall	_FVR_Initialize
 10298                           
 10299                           ;mcc.c: 79: ADC_Initialize();
 10300  1511  3193  2308  3194   	fcall	_ADC_Initialize
 10301                           
 10302                           ;mcc.c: 80: TMR2_Initialize();
 10303  1514  3193  2310  3194   	fcall	_TMR2_Initialize
 10304                           
 10305                           ;mcc.c: 81: TMR1_Initialize();
 10306  1517  3194  2468         	fcall	_TMR1_Initialize
 10307  1519  0008               	return
 10308  151A                     __end_of_SYSTEM_Initialize:	
 10309                           
 10310                           	psect	text48
 10311  12B4                     __ptext48:	
 10312 ;; *************** function _WDT_Initialize *****************
 10313 ;; Defined at:
 10314 ;;		line 94 in file "mcc_generated_files/mcc.c"
 10315 ;; Parameters:    Size  Location     Type
 10316 ;;		None
 10317 ;; Auto vars:     Size  Location     Type
 10318 ;;		None
 10319 ;; Return value:  Size  Location     Type
 10320 ;;                  1    wreg      void 
 10321 ;; Registers used:
 10322 ;;		wreg
 10323 ;; Tracked objects:
 10324 ;;		On entry : 0/0
 10325 ;;		On exit  : 0/0
 10326 ;;		Unchanged: 0/0
 10327 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10328 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10329 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10330 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10331 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10332 ;;Total ram usage:        0 bytes
 10333 ;; Hardware stack levels used:    1
 10334 ;; Hardware stack levels required when called:    4
 10335 ;; This function calls:
 10336 ;;		Nothing
 10337 ;; This function is called by:
 10338 ;;		_SYSTEM_Initialize
 10339 ;; This function uses a non-reentrant model
 10340 ;;
 10341                           
 10342                           
 10343                           ;psect for function _WDT_Initialize
 10344  12B4                     _WDT_Initialize:	
 10345                           
 10346                           ;mcc.c: 97: WDTCON = 0x1A;
 10347                           
 10348                           ;incstack = 0
 10349                           ; Regs used in _WDT_Initialize: [wreg]
 10350  12B4  301A               	movlw	26
 10351  12B5  0021               	movlb	1	; select bank1
 10352  12B6  0097               	movwf	23	;volatile
 10353  12B7  0008               	return
 10354  12B8                     __end_of_WDT_Initialize:	
 10355                           
 10356                           	psect	text49
 10357  1310                     __ptext49:	
 10358 ;; *************** function _TMR2_Initialize *****************
 10359 ;; Defined at:
 10360 ;;		line 61 in file "mcc_generated_files/tmr2.c"
 10361 ;; Parameters:    Size  Location     Type
 10362 ;;		None
 10363 ;; Auto vars:     Size  Location     Type
 10364 ;;		None
 10365 ;; Return value:  Size  Location     Type
 10366 ;;                  1    wreg      void 
 10367 ;; Registers used:
 10368 ;;		wreg, status,2
 10369 ;; Tracked objects:
 10370 ;;		On entry : 0/0
 10371 ;;		On exit  : 0/0
 10372 ;;		Unchanged: 0/0
 10373 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10374 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10375 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10376 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10377 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10378 ;;Total ram usage:        0 bytes
 10379 ;; Hardware stack levels used:    1
 10380 ;; Hardware stack levels required when called:    4
 10381 ;; This function calls:
 10382 ;;		Nothing
 10383 ;; This function is called by:
 10384 ;;		_SYSTEM_Initialize
 10385 ;; This function uses a non-reentrant model
 10386 ;;
 10387                           
 10388                           
 10389                           ;psect for function _TMR2_Initialize
 10390  1310                     _TMR2_Initialize:	
 10391                           
 10392                           ;tmr2.c: 66: PR2 = 0x44;
 10393                           
 10394                           ;incstack = 0
 10395                           ; Regs used in _TMR2_Initialize: [wreg+status,2]
 10396  1310  3044               	movlw	68
 10397  1311  0020               	movlb	0	; select bank0
 10398  1312  009B               	movwf	27	;volatile
 10399                           
 10400                           ;tmr2.c: 69: TMR2 = 0x00;
 10401  1313  019A               	clrf	26	;volatile
 10402                           
 10403                           ;tmr2.c: 72: PIR1bits.TMR2IF = 0;
 10404  1314  1091               	bcf	17,1	;volatile
 10405                           
 10406                           ;tmr2.c: 75: T2CON = 0x46;
 10407  1315  3046               	movlw	70
 10408  1316  009C               	movwf	28	;volatile
 10409  1317  0008               	return
 10410  1318                     __end_of_TMR2_Initialize:	
 10411                           
 10412                           	psect	text50
 10413  1468                     __ptext50:	
 10414 ;; *************** function _TMR1_Initialize *****************
 10415 ;; Defined at:
 10416 ;;		line 63 in file "mcc_generated_files/tmr1.c"
 10417 ;; Parameters:    Size  Location     Type
 10418 ;;		None
 10419 ;; Auto vars:     Size  Location     Type
 10420 ;;		None
 10421 ;; Return value:  Size  Location     Type
 10422 ;;                  1    wreg      void 
 10423 ;; Registers used:
 10424 ;;		wreg, status,2, status,0, pclath, cstack
 10425 ;; Tracked objects:
 10426 ;;		On entry : 0/0
 10427 ;;		On exit  : 0/0
 10428 ;;		Unchanged: 0/0
 10429 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10430 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10431 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10432 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10433 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10434 ;;Total ram usage:        0 bytes
 10435 ;; Hardware stack levels used:    1
 10436 ;; Hardware stack levels required when called:    5
 10437 ;; This function calls:
 10438 ;;		_TMR1_SetInterruptHandler
 10439 ;; This function is called by:
 10440 ;;		_SYSTEM_Initialize
 10441 ;; This function uses a non-reentrant model
 10442 ;;
 10443                           
 10444                           
 10445                           ;psect for function _TMR1_Initialize
 10446  1468                     _TMR1_Initialize:	
 10447                           
 10448                           ;tmr1.c: 68: T1GCON = 0x00;
 10449                           
 10450                           ;incstack = 0
 10451                           ; Regs used in _TMR1_Initialize: [wreg+status,2+status,0+pclath+cstack]
 10452  1468  0020               	movlb	0	; select bank0
 10453  1469  0199               	clrf	25	;volatile
 10454                           
 10455                           ;tmr1.c: 71: TMR1H = 0x60;
 10456  146A  3060               	movlw	96
 10457  146B  0097               	movwf	23	;volatile
 10458                           
 10459                           ;tmr1.c: 74: TMR1L = 0x00;
 10460  146C  0196               	clrf	22	;volatile
 10461                           
 10462                           ;tmr1.c: 77: timer1ReloadVal=(uint16_t)((TMR1H << 8) | TMR1L);
 10463  146D  0817               	movf	23,w	;volatile
 10464  146E  00FD               	movwf	_timer1ReloadVal+1	;volatile
 10465  146F  0816               	movf	22,w	;volatile
 10466  1470  00FC               	movwf	_timer1ReloadVal	;volatile
 10467                           
 10468                           ;tmr1.c: 80: PIR1bits.TMR1IF = 0;
 10469  1471  1011               	bcf	17,0	;volatile
 10470                           
 10471                           ;tmr1.c: 83: PIE1bits.TMR1IE = 1;
 10472  1472  0021               	movlb	1	; select bank1
 10473  1473  1411               	bsf	17,0	;volatile
 10474                           
 10475                           ;tmr1.c: 86: TMR1_SetInterruptHandler(TMR1_DefaultInterruptHandler);
 10476  1474  30FF               	movlw	low _TMR1_DefaultInterruptHandler
 10477  1475  0020               	movlb	0	; select bank0
 10478  1476  00A1               	movwf	TMR1_SetInterruptHandler@InterruptHandler
 10479  1477  3007               	movlw	high _TMR1_DefaultInterruptHandler
 10480  1478  00A2               	movwf	TMR1_SetInterruptHandler@InterruptHandler+1
 10481  1479  3193  2333         	fcall	_TMR1_SetInterruptHandler
 10482                           
 10483                           ;tmr1.c: 89: T1CON = 0xBD;
 10484  147B  30BD               	movlw	189
 10485  147C  0020               	movlb	0	; select bank0
 10486  147D  0098               	movwf	24	;volatile
 10487  147E  0008               	return
 10488  147F                     __end_of_TMR1_Initialize:	
 10489                           
 10490                           	psect	text51
 10491  1333                     __ptext51:	
 10492 ;; *************** function _TMR1_SetInterruptHandler *****************
 10493 ;; Defined at:
 10494 ;;		line 181 in file "mcc_generated_files/tmr1.c"
 10495 ;; Parameters:    Size  Location     Type
 10496 ;;  InterruptHan    2    1[BANK0 ] PTR FTN()void 
 10497 ;;		 -> TMR1_DefaultInterruptHandler(1), 
 10498 ;; Auto vars:     Size  Location     Type
 10499 ;;		None
 10500 ;; Return value:  Size  Location     Type
 10501 ;;                  1    wreg      void 
 10502 ;; Registers used:
 10503 ;;		wreg
 10504 ;; Tracked objects:
 10505 ;;		On entry : 0/0
 10506 ;;		On exit  : 0/0
 10507 ;;		Unchanged: 0/0
 10508 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10509 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10510 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10511 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10512 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10513 ;;Total ram usage:        2 bytes
 10514 ;; Hardware stack levels used:    1
 10515 ;; Hardware stack levels required when called:    4
 10516 ;; This function calls:
 10517 ;;		Nothing
 10518 ;; This function is called by:
 10519 ;;		_TMR1_Initialize
 10520 ;; This function uses a non-reentrant model
 10521 ;;
 10522                           
 10523                           
 10524                           ;psect for function _TMR1_SetInterruptHandler
 10525  1333                     _TMR1_SetInterruptHandler:	
 10526                           
 10527                           ;tmr1.c: 182: TMR1_InterruptHandler = InterruptHandler;
 10528                           
 10529                           ;incstack = 0
 10530                           ; Regs used in _TMR1_SetInterruptHandler: [wreg]
 10531  1333  0020               	movlb	0	; select bank0
 10532  1334  0822               	movf	TMR1_SetInterruptHandler@InterruptHandler+1,w
 10533  1335  0022               	movlb	2	; select bank2
 10534  1336  00E7               	movwf	(_TMR1_InterruptHandler+1)^(0+256)
 10535  1337  0020               	movlb	0	; select bank0
 10536  1338  0821               	movf	TMR1_SetInterruptHandler@InterruptHandler,w
 10537  1339  0022               	movlb	2	; select bank2
 10538  133A  00E6               	movwf	_TMR1_InterruptHandler^(0+256)
 10539  133B  0008               	return
 10540  133C                     __end_of_TMR1_SetInterruptHandler:	
 10541                           
 10542                           	psect	text52
 10543  12F2                     __ptext52:	
 10544 ;; *************** function _SPI1_Initialize *****************
 10545 ;; Defined at:
 10546 ;;		line 63 in file "mcc_generated_files/spi1.c"
 10547 ;; Parameters:    Size  Location     Type
 10548 ;;		None
 10549 ;; Auto vars:     Size  Location     Type
 10550 ;;		None
 10551 ;; Return value:  Size  Location     Type
 10552 ;;                  1    wreg      void 
 10553 ;; Registers used:
 10554 ;;		wreg, status,2
 10555 ;; Tracked objects:
 10556 ;;		On entry : 0/0
 10557 ;;		On exit  : 0/0
 10558 ;;		Unchanged: 0/0
 10559 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10560 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10561 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10562 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10563 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10564 ;;Total ram usage:        0 bytes
 10565 ;; Hardware stack levels used:    1
 10566 ;; Hardware stack levels required when called:    4
 10567 ;; This function calls:
 10568 ;;		Nothing
 10569 ;; This function is called by:
 10570 ;;		_SYSTEM_Initialize
 10571 ;; This function uses a non-reentrant model
 10572 ;;
 10573                           
 10574                           
 10575                           ;psect for function _SPI1_Initialize
 10576  12F2                     _SPI1_Initialize:	
 10577                           
 10578                           ;spi1.c: 68: SSP1STAT = 0x40;
 10579                           
 10580                           ;incstack = 0
 10581                           ; Regs used in _SPI1_Initialize: [wreg+status,2]
 10582  12F2  3040               	movlw	64
 10583  12F3  0024               	movlb	4	; select bank4
 10584  12F4  0094               	movwf	20	;volatile
 10585                           
 10586                           ;spi1.c: 71: SSP1CON1 = 0x20;
 10587  12F5  3020               	movlw	32
 10588  12F6  0095               	movwf	21	;volatile
 10589                           
 10590                           ;spi1.c: 74: SSP1ADD = 0x00;
 10591  12F7  0192               	clrf	18	;volatile
 10592  12F8  0008               	return
 10593  12F9                     __end_of_SPI1_Initialize:	
 10594                           
 10595                           	psect	text53
 10596  173D                     __ptext53:	
 10597 ;; *************** function _PIN_MANAGER_Initialize *****************
 10598 ;; Defined at:
 10599 ;;		line 54 in file "mcc_generated_files/pin_manager.c"
 10600 ;; Parameters:    Size  Location     Type
 10601 ;;		None
 10602 ;; Auto vars:     Size  Location     Type
 10603 ;;		None
 10604 ;; Return value:  Size  Location     Type
 10605 ;;                  1    wreg      void 
 10606 ;; Registers used:
 10607 ;;		wreg, status,2, status,0, pclath, cstack
 10608 ;; Tracked objects:
 10609 ;;		On entry : 0/0
 10610 ;;		On exit  : 0/0
 10611 ;;		Unchanged: 0/0
 10612 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10613 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10614 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10615 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10616 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10617 ;;Total ram usage:        0 bytes
 10618 ;; Hardware stack levels used:    1
 10619 ;; Hardware stack levels required when called:    5
 10620 ;; This function calls:
 10621 ;;		_IOCAF2_SetInterruptHandler
 10622 ;; This function is called by:
 10623 ;;		_SYSTEM_Initialize
 10624 ;; This function uses a non-reentrant model
 10625 ;;
 10626                           
 10627                           
 10628                           ;psect for function _PIN_MANAGER_Initialize
 10629  173D                     _PIN_MANAGER_Initialize:	
 10630                           
 10631                           ;pin_manager.c: 59: LATA = 0x00;
 10632                           
 10633                           ;incstack = 0
 10634                           ; Regs used in _PIN_MANAGER_Initialize: [wreg+status,2+status,0+pclath+cstack]
 10635  173D  0022               	movlb	2	; select bank2
 10636  173E  018C               	clrf	12	;volatile
 10637                           
 10638                           ;pin_manager.c: 60: LATB = 0x00;
 10639  173F  018D               	clrf	13	;volatile
 10640                           
 10641                           ;pin_manager.c: 61: LATC = 0x00;
 10642  1740  018E               	clrf	14	;volatile
 10643                           
 10644                           ;pin_manager.c: 66: TRISA = 0x3F;
 10645  1741  303F               	movlw	63
 10646  1742  0021               	movlb	1	; select bank1
 10647  1743  008C               	movwf	12	;volatile
 10648                           
 10649                           ;pin_manager.c: 67: TRISB = 0xB0;
 10650  1744  30B0               	movlw	176
 10651  1745  008D               	movwf	13	;volatile
 10652                           
 10653                           ;pin_manager.c: 68: TRISC = 0x39;
 10654  1746  3039               	movlw	57
 10655  1747  008E               	movwf	14	;volatile
 10656                           
 10657                           ;pin_manager.c: 73: ANSELC = 0x01;
 10658  1748  3001               	movlw	1
 10659  1749  0023               	movlb	3	; select bank3
 10660  174A  008E               	movwf	14	;volatile
 10661                           
 10662                           ;pin_manager.c: 74: ANSELB = 0x00;
 10663  174B  018D               	clrf	13	;volatile
 10664                           
 10665                           ;pin_manager.c: 75: ANSELA = 0x03;
 10666  174C  3003               	movlw	3
 10667  174D  008C               	movwf	12	;volatile
 10668                           
 10669                           ;pin_manager.c: 80: WPUB = 0x10;
 10670  174E  3010               	movlw	16
 10671  174F  0024               	movlb	4	; select bank4
 10672  1750  008D               	movwf	13	;volatile
 10673                           
 10674                           ;pin_manager.c: 81: WPUA = 0x3F;
 10675  1751  303F               	movlw	63
 10676  1752  008C               	movwf	12	;volatile
 10677                           
 10678                           ;pin_manager.c: 82: WPUC = 0xD1;
 10679  1753  30D1               	movlw	209
 10680  1754  008E               	movwf	14	;volatile
 10681                           
 10682                           ;pin_manager.c: 83: OPTION_REGbits.nWPUEN = 0;
 10683  1755  0021               	movlb	1	; select bank1
 10684  1756  1395               	bcf	21,7	;volatile
 10685                           
 10686                           ;pin_manager.c: 89: APFCON1 = 0x2A;
 10687  1757  302A               	movlw	42
 10688  1758  0022               	movlb	2	; select bank2
 10689  1759  009E               	movwf	30	;volatile
 10690                           
 10691                           ;pin_manager.c: 90: APFCON0 = 0x00;
 10692  175A  019D               	clrf	29	;volatile
 10693                           
 10694                           ;pin_manager.c: 96: IOCAFbits.IOCAF2 = 0;
 10695  175B  0027               	movlb	7	; select bank7
 10696  175C  1113               	bcf	19,2	;volatile
 10697                           
 10698                           ;pin_manager.c: 98: IOCANbits.IOCAN2 = 1;
 10699  175D  1512               	bsf	18,2	;volatile
 10700                           
 10701                           ;pin_manager.c: 100: IOCAPbits.IOCAP2 = 1;
 10702  175E  1511               	bsf	17,2	;volatile
 10703                           
 10704                           ;pin_manager.c: 103: IOCAF2_SetInterruptHandler(IOCAF2_DefaultInterruptHandler);
 10705  175F  3003               	movlw	low _IOCAF2_DefaultInterruptHandler
 10706  1760  0020               	movlb	0	; select bank0
 10707  1761  00A1               	movwf	IOCAF2_SetInterruptHandler@InterruptHandler
 10708  1762  3000               	movlw	high _IOCAF2_DefaultInterruptHandler
 10709  1763  00A2               	movwf	IOCAF2_SetInterruptHandler@InterruptHandler+1
 10710  1764  3193  232A         	fcall	_IOCAF2_SetInterruptHandler
 10711                           
 10712                           ;pin_manager.c: 106: INTCONbits.IOCIE = 1;
 10713  1766  158B               	bsf	11,3	;volatile
 10714  1767  0008               	return
 10715  1768                     __end_of_PIN_MANAGER_Initialize:	
 10716                           
 10717                           	psect	text54
 10718  132A                     __ptext54:	
 10719 ;; *************** function _IOCAF2_SetInterruptHandler *****************
 10720 ;; Defined at:
 10721 ;;		line 139 in file "mcc_generated_files/pin_manager.c"
 10722 ;; Parameters:    Size  Location     Type
 10723 ;;  InterruptHan    2    1[BANK0 ] PTR FTN()void 
 10724 ;;		 -> IOCAF2_DefaultInterruptHandler(1), 
 10725 ;; Auto vars:     Size  Location     Type
 10726 ;;		None
 10727 ;; Return value:  Size  Location     Type
 10728 ;;                  1    wreg      void 
 10729 ;; Registers used:
 10730 ;;		wreg
 10731 ;; Tracked objects:
 10732 ;;		On entry : 0/0
 10733 ;;		On exit  : 0/0
 10734 ;;		Unchanged: 0/0
 10735 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10736 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10737 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10738 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10739 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10740 ;;Total ram usage:        2 bytes
 10741 ;; Hardware stack levels used:    1
 10742 ;; Hardware stack levels required when called:    4
 10743 ;; This function calls:
 10744 ;;		Nothing
 10745 ;; This function is called by:
 10746 ;;		_PIN_MANAGER_Initialize
 10747 ;; This function uses a non-reentrant model
 10748 ;;
 10749                           
 10750                           
 10751                           ;psect for function _IOCAF2_SetInterruptHandler
 10752  132A                     _IOCAF2_SetInterruptHandler:	
 10753                           
 10754                           ;pin_manager.c: 140: IOCAF2_InterruptHandler = InterruptHandler;
 10755                           
 10756                           ;incstack = 0
 10757                           ; Regs used in _IOCAF2_SetInterruptHandler: [wreg]
 10758  132A  0020               	movlb	0	; select bank0
 10759  132B  0822               	movf	IOCAF2_SetInterruptHandler@InterruptHandler+1,w
 10760  132C  0022               	movlb	2	; select bank2
 10761  132D  00E9               	movwf	(_IOCAF2_InterruptHandler+1)^(0+256)
 10762  132E  0020               	movlb	0	; select bank0
 10763  132F  0821               	movf	IOCAF2_SetInterruptHandler@InterruptHandler,w
 10764  1330  0022               	movlb	2	; select bank2
 10765  1331  00E8               	movwf	_IOCAF2_InterruptHandler^(0+256)
 10766  1332  0008               	return
 10767  1333                     __end_of_IOCAF2_SetInterruptHandler:	
 10768                           
 10769                           	psect	text55
 10770  12EB                     __ptext55:	
 10771 ;; *************** function _OSCILLATOR_Initialize *****************
 10772 ;; Defined at:
 10773 ;;		line 84 in file "mcc_generated_files/mcc.c"
 10774 ;; Parameters:    Size  Location     Type
 10775 ;;		None
 10776 ;; Auto vars:     Size  Location     Type
 10777 ;;		None
 10778 ;; Return value:  Size  Location     Type
 10779 ;;                  1    wreg      void 
 10780 ;; Registers used:
 10781 ;;		wreg, status,2
 10782 ;; Tracked objects:
 10783 ;;		On entry : 0/0
 10784 ;;		On exit  : 0/0
 10785 ;;		Unchanged: 0/0
 10786 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10787 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10788 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10789 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10790 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10791 ;;Total ram usage:        0 bytes
 10792 ;; Hardware stack levels used:    1
 10793 ;; Hardware stack levels required when called:    4
 10794 ;; This function calls:
 10795 ;;		Nothing
 10796 ;; This function is called by:
 10797 ;;		_SYSTEM_Initialize
 10798 ;; This function uses a non-reentrant model
 10799 ;;
 10800                           
 10801                           
 10802                           ;psect for function _OSCILLATOR_Initialize
 10803  12EB                     _OSCILLATOR_Initialize:	
 10804                           
 10805                           ;mcc.c: 87: OSCCON = 0x72;
 10806                           
 10807                           ;incstack = 0
 10808                           ; Regs used in _OSCILLATOR_Initialize: [wreg+status,2]
 10809  12EB  3072               	movlw	114
 10810  12EC  0021               	movlb	1	; select bank1
 10811  12ED  0099               	movwf	25	;volatile
 10812                           
 10813                           ;mcc.c: 89: OSCTUNE = 0x00;
 10814  12EE  0198               	clrf	24	;volatile
 10815                           
 10816                           ;mcc.c: 91: BORCON = 0x00;
 10817  12EF  0022               	movlb	2	; select bank2
 10818  12F0  0196               	clrf	22	;volatile
 10819  12F1  0008               	return
 10820  12F2                     __end_of_OSCILLATOR_Initialize:	
 10821                           
 10822                           	psect	text56
 10823  14E4                     __ptext56:	
 10824 ;; *************** function _I2C2_Initialize *****************
 10825 ;; Defined at:
 10826 ;;		line 198 in file "mcc_generated_files/i2c2.c"
 10827 ;; Parameters:    Size  Location     Type
 10828 ;;		None
 10829 ;; Auto vars:     Size  Location     Type
 10830 ;;		None
 10831 ;; Return value:  Size  Location     Type
 10832 ;;                  1    wreg      void 
 10833 ;; Registers used:
 10834 ;;		wreg, status,2
 10835 ;; Tracked objects:
 10836 ;;		On entry : 0/0
 10837 ;;		On exit  : 0/0
 10838 ;;		Unchanged: 0/0
 10839 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10840 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10841 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10842 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10843 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10844 ;;Total ram usage:        1 bytes
 10845 ;; Hardware stack levels used:    1
 10846 ;; Hardware stack levels required when called:    4
 10847 ;; This function calls:
 10848 ;;		Nothing
 10849 ;; This function is called by:
 10850 ;;		_SYSTEM_Initialize
 10851 ;; This function uses a non-reentrant model
 10852 ;;
 10853                           
 10854                           
 10855                           ;psect for function _I2C2_Initialize
 10856  14E4                     _I2C2_Initialize:	
 10857                           
 10858                           ;i2c2.c: 200: i2c2_object.pTrHead = i2c2_tr_queue;
 10859                           
 10860                           ;incstack = 0
 10861                           ; Regs used in _I2C2_Initialize: [wreg+status,2]
 10862  14E4  3062               	movlw	(low (_i2c2_tr_queue| (0+256)))& (0+255)
 10863  14E5  0020               	movlb	0	; select bank0
 10864  14E6  00A1               	movwf	??_I2C2_Initialize
 10865  14E7  0821               	movf	??_I2C2_Initialize,w
 10866  14E8  0021               	movlb	1	; select bank1
 10867  14E9  00CB               	movwf	(low ((_i2c2_object| 0+1)))^(0+128)
 10868                           
 10869                           ;i2c2.c: 201: i2c2_object.pTrTail = i2c2_tr_queue;
 10870  14EA  3062               	movlw	(low (_i2c2_tr_queue| (0+256)))& (0+255)
 10871  14EB  0020               	movlb	0	; select bank0
 10872  14EC  00A1               	movwf	??_I2C2_Initialize
 10873  14ED  0821               	movf	??_I2C2_Initialize,w
 10874  14EE  0021               	movlb	1	; select bank1
 10875  14EF  00CA               	movwf	_i2c2_object^(0+128)
 10876                           
 10877                           ;i2c2.c: 202: i2c2_object.trStatus.s.empty = 1;
 10878  14F0  14CC               	bsf	(_i2c2_object^(0+128)+2),1
 10879                           
 10880                           ;i2c2.c: 203: i2c2_object.trStatus.s.full = 0;
 10881  14F1  104C               	bcf	(_i2c2_object^(0+128)+2),0
 10882                           
 10883                           ;i2c2.c: 205: i2c2_object.i2cErrors = 0;
 10884  14F2  01CE               	clrf	(_i2c2_object^(0+128)+4)
 10885                           
 10886                           ;i2c2.c: 208: SSP2STAT = 0x00;
 10887  14F3  0024               	movlb	4	; select bank4
 10888  14F4  019C               	clrf	28	;volatile
 10889                           
 10890                           ;i2c2.c: 210: SSP2CON1 = 0x28;
 10891  14F5  3028               	movlw	40
 10892  14F6  009D               	movwf	29	;volatile
 10893                           
 10894                           ;i2c2.c: 212: SSP2CON3 = 0x00;
 10895  14F7  019F               	clrf	31	;volatile
 10896                           
 10897                           ;i2c2.c: 214: SSP2ADD = 0x03;
 10898  14F8  3003               	movlw	3
 10899  14F9  009A               	movwf	26	;volatile
 10900                           
 10901                           ;i2c2.c: 218: PIR4bits.SSP2IF = 0;
 10902  14FA  0020               	movlb	0	; select bank0
 10903  14FB  1014               	bcf	20,0	;volatile
 10904                           
 10905                           ;i2c2.c: 220: PIE4bits.SSP2IE = 1;
 10906  14FC  0021               	movlb	1	; select bank1
 10907  14FD  1414               	bsf	20,0	;volatile
 10908  14FE  0008               	return
 10909  14FF                     __end_of_I2C2_Initialize:	
 10910                           
 10911                           	psect	text57
 10912  12B0                     __ptext57:	
 10913 ;; *************** function _FVR_Initialize *****************
 10914 ;; Defined at:
 10915 ;;		line 57 in file "mcc_generated_files/fvr.c"
 10916 ;; Parameters:    Size  Location     Type
 10917 ;;		None
 10918 ;; Auto vars:     Size  Location     Type
 10919 ;;		None
 10920 ;; Return value:  Size  Location     Type
 10921 ;;                  1    wreg      void 
 10922 ;; Registers used:
 10923 ;;		wreg
 10924 ;; Tracked objects:
 10925 ;;		On entry : 0/0
 10926 ;;		On exit  : 0/0
 10927 ;;		Unchanged: 0/0
 10928 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10929 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10930 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10931 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10932 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10933 ;;Total ram usage:        0 bytes
 10934 ;; Hardware stack levels used:    1
 10935 ;; Hardware stack levels required when called:    4
 10936 ;; This function calls:
 10937 ;;		Nothing
 10938 ;; This function is called by:
 10939 ;;		_SYSTEM_Initialize
 10940 ;; This function uses a non-reentrant model
 10941 ;;
 10942                           
 10943                           
 10944                           ;psect for function _FVR_Initialize
 10945  12B0                     _FVR_Initialize:	
 10946                           
 10947                           ;fvr.c: 60: FVRCON = 0x01;
 10948                           
 10949                           ;incstack = 0
 10950                           ; Regs used in _FVR_Initialize: [wreg]
 10951  12B0  3001               	movlw	1
 10952  12B1  0022               	movlb	2	; select bank2
 10953  12B2  0097               	movwf	23	;volatile
 10954  12B3  0008               	return
 10955  12B4                     __end_of_FVR_Initialize:	
 10956                           
 10957                           	psect	text58
 10958  1308                     __ptext58:	
 10959 ;; *************** function _ADC_Initialize *****************
 10960 ;; Defined at:
 10961 ;;		line 62 in file "mcc_generated_files/adc.c"
 10962 ;; Parameters:    Size  Location     Type
 10963 ;;		None
 10964 ;; Auto vars:     Size  Location     Type
 10965 ;;		None
 10966 ;; Return value:  Size  Location     Type
 10967 ;;                  1    wreg      void 
 10968 ;; Registers used:
 10969 ;;		wreg, status,2
 10970 ;; Tracked objects:
 10971 ;;		On entry : 0/0
 10972 ;;		On exit  : 0/0
 10973 ;;		Unchanged: 0/0
 10974 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10975 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10976 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10977 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10978 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10979 ;;Total ram usage:        0 bytes
 10980 ;; Hardware stack levels used:    1
 10981 ;; Hardware stack levels required when called:    4
 10982 ;; This function calls:
 10983 ;;		Nothing
 10984 ;; This function is called by:
 10985 ;;		_SYSTEM_Initialize
 10986 ;; This function uses a non-reentrant model
 10987 ;;
 10988                           
 10989                           
 10990                           ;psect for function _ADC_Initialize
 10991  1308                     _ADC_Initialize:	
 10992                           
 10993                           ;adc.c: 67: ADCON0 = 0x01;
 10994                           
 10995                           ;incstack = 0
 10996                           ; Regs used in _ADC_Initialize: [wreg+status,2]
 10997  1308  3001               	movlw	1
 10998  1309  0021               	movlb	1	; select bank1
 10999  130A  009D               	movwf	29	;volatile
 11000                           
 11001                           ;adc.c: 70: ADCON1 = 0x90;
 11002  130B  3090               	movlw	144
 11003  130C  009E               	movwf	30	;volatile
 11004                           
 11005                           ;adc.c: 73: ADRESL = 0x00;
 11006  130D  019B               	clrf	27	;volatile
 11007                           
 11008                           ;adc.c: 76: ADRESH = 0x00;
 11009  130E  019C               	clrf	28	;volatile
 11010  130F  0008               	return
 11011  1310                     __end_of_ADC_Initialize:	
 11012                           
 11013                           	psect	text59
 11014  12A4                     __ptext59:	
 11015 ;; *************** function _DOOR_run *****************
 11016 ;; Defined at:
 11017 ;;		line 23 in file "doorlogic.c"
 11018 ;; Parameters:    Size  Location     Type
 11019 ;;		None
 11020 ;; Auto vars:     Size  Location     Type
 11021 ;;		None
 11022 ;; Return value:  Size  Location     Type
 11023 ;;                  1    wreg      enum E3332
 11024 ;; Registers used:
 11025 ;;		wreg
 11026 ;; Tracked objects:
 11027 ;;		On entry : 0/0
 11028 ;;		On exit  : 0/0
 11029 ;;		Unchanged: 0/0
 11030 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11031 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11032 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11033 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11034 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11035 ;;Total ram usage:        0 bytes
 11036 ;; Hardware stack levels used:    1
 11037 ;; Hardware stack levels required when called:    4
 11038 ;; This function calls:
 11039 ;;		Nothing
 11040 ;; This function is called by:
 11041 ;;		_main
 11042 ;; This function uses a non-reentrant model
 11043 ;;
 11044                           
 11045                           
 11046                           ;psect for function _DOOR_run
 11047  12A4                     _DOOR_run:	
 11048                           
 11049                           ;doorlogic.c: 24: static DOOR previousDoorState = DOOR_CLOSED;
 11050                           ;doorlogic.c: 25: static unsigned long doorStateDuration = 0;
 11051                           ;doorlogic.c: 50: return(doorState);
 11052                           
 11053                           ;incstack = 0
 11054                           ; Regs used in _DOOR_run: [wreg]
 11055  12A4  0021               	movlb	1	; select bank1
 11056  12A5  0859               	movf	_doorState^(0+128),w
 11057  12A6  0008               	return
 11058  12A7                     __end_of_DOOR_run:	
 11059                           
 11060                           	psect	text60
 11061  07FE                     __ptext60:	
 11062 ;; *************** function _DOOR_init *****************
 11063 ;; Defined at:
 11064 ;;		line 10 in file "doorlogic.c"
 11065 ;; Parameters:    Size  Location     Type
 11066 ;;		None
 11067 ;; Auto vars:     Size  Location     Type
 11068 ;;		None
 11069 ;; Return value:  Size  Location     Type
 11070 ;;                  1    wreg      void 
 11071 ;; Registers used:
 11072 ;;		None
 11073 ;; Tracked objects:
 11074 ;;		On entry : 0/0
 11075 ;;		On exit  : 0/0
 11076 ;;		Unchanged: 0/0
 11077 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11078 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11079 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11080 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11081 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11082 ;;Total ram usage:        0 bytes
 11083 ;; Hardware stack levels used:    1
 11084 ;; Hardware stack levels required when called:    4
 11085 ;; This function calls:
 11086 ;;		Nothing
 11087 ;; This function is called by:
 11088 ;;		_main
 11089 ;; This function uses a non-reentrant model
 11090 ;;
 11091                           
 11092                           
 11093                           ;psect for function _DOOR_init
 11094  07FE                     _DOOR_init:	
 11095                           
 11096                           ;incstack = 0
 11097                           ; Regs used in _DOOR_init: []
 11098  07FE  0008               	return
 11099  07FF                     __end_of_DOOR_init:	
 11100                           
 11101                           	psect	text61
 11102  0077                     __ptext61:	
 11103 ;; *************** function _BMP_readTemperature *****************
 11104 ;; Defined at:
 11105 ;;		line 72 in file "bmp280.c"
 11106 ;; Parameters:    Size  Location     Type
 11107 ;;		None
 11108 ;; Auto vars:     Size  Location     Type
 11109 ;;  tmp             1   25[BANK1 ] unsigned char 
 11110 ;;  status          1   24[BANK1 ] unsigned char 
 11111 ;; Return value:  Size  Location     Type
 11112 ;;                  3    6[BANK1 ] float 
 11113 ;; Registers used:
 11114 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11115 ;; Tracked objects:
 11116 ;;		On entry : 0/0
 11117 ;;		On exit  : 0/0
 11118 ;;		Unchanged: 0/0
 11119 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11120 ;;      Params:         0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0
 11121 ;;      Locals:         0       0       5       0       0       0       0       0       0       0       0       0       
      +0       0
 11122 ;;      Temps:          0       0      12       0       0       0       0       0       0       0       0       0       
      +0       0
 11123 ;;      Totals:         0       0      20       0       0       0       0       0       0       0       0       0       
      +0       0
 11124 ;;Total ram usage:       20 bytes
 11125 ;; Hardware stack levels used:    1
 11126 ;; Hardware stack levels required when called:    9
 11127 ;; This function calls:
 11128 ;;		_BMP_init
 11129 ;;		_Diag_getTempSensorHealth
 11130 ;;		_Diag_setTempSensorHealth
 11131 ;;		_HMC5883L_ReadBits
 11132 ;;		_I2C_BufferRead
 11133 ;;		_I2C_ByteWrite
 11134 ;;		___aldiv
 11135 ;;		___altoft
 11136 ;;		___awtoft
 11137 ;;		___ftadd
 11138 ;;		___ftdiv
 11139 ;;		___ftmul
 11140 ;;		___ftneg
 11141 ;;		___fttol
 11142 ;;		___lwtoft
 11143 ;; This function is called by:
 11144 ;;		_main
 11145 ;; This function uses a non-reentrant model
 11146 ;;
 11147                           
 11148                           
 11149                           ;psect for function _BMP_readTemperature
 11150  0077                     _BMP_readTemperature:	
 11151                           
 11152                           ;bmp280.c: 74: char tmp=0;
 11153                           
 11154                           ;incstack = 0
 11155                           ; Regs used in _BMP_readTemperature: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 11156  0077  0021               	movlb	1	; select bank1
 11157  0078  01B9               	clrf	BMP_readTemperature@tmp^(0+128)
 11158                           
 11159                           ;bmp280.c: 75: bool status;
 11160                           ;bmp280.c: 77: tmp=0x41;
 11161  0079  3041               	movlw	65
 11162  007A  00A9               	movwf	??_BMP_readTemperature^(0+128)
 11163  007B  0829               	movf	??_BMP_readTemperature^(0+128),w
 11164  007C  00B9               	movwf	BMP_readTemperature@tmp^(0+128)
 11165                           
 11166                           ;bmp280.c: 78: if(Diag_getTempSensorHealth()==0)
 11167  007D  3192  22A1  3180   	fcall	_Diag_getTempSensorHealth
 11168  0080  3A00               	xorlw	0
 11169  0081  1D03               	skipz
 11170  0082  2886               	goto	l1026
 11171                           
 11172                           ;bmp280.c: 79: {
 11173                           ;bmp280.c: 80: BMP_init();
 11174  0083  318B  2313  3180   	fcall	_BMP_init
 11175  0086                     l1026:	
 11176                           
 11177                           ;bmp280.c: 81: }
 11178                           ;bmp280.c: 82: I2C_ByteWrite(0x76, &tmp, 0xF4);
 11179  0086  30B9               	movlw	(low (BMP_readTemperature@tmp| 0))& (0+255)
 11180  0087  0021               	movlb	1	; select bank1
 11181  0088  00A9               	movwf	??_BMP_readTemperature^(0+128)
 11182  0089  0829               	movf	??_BMP_readTemperature^(0+128),w
 11183  008A  0020               	movlb	0	; select bank0
 11184  008B  00AF               	movwf	I2C_ByteWrite@pBuffer
 11185  008C  30F4               	movlw	244
 11186  008D  0021               	movlb	1	; select bank1
 11187  008E  00AA               	movwf	(??_BMP_readTemperature+1)^(0+128)
 11188  008F  082A               	movf	(??_BMP_readTemperature+1)^(0+128),w
 11189  0090  0020               	movlb	0	; select bank0
 11190  0091  00B0               	movwf	I2C_ByteWrite@WriteAddr
 11191  0092  3076               	movlw	118
 11192  0093  3197  27C4  3180   	fcall	_I2C_ByteWrite
 11193  0096                     l1027:	
 11194                           ;bmp280.c: 83: do
 11195                           
 11196                           
 11197                           ;bmp280.c: 84: {
 11198                           ;bmp280.c: 85: status=HMC5883L_ReadBits(0x76, 0xF3 , 3, 1, &tmp);
 11199  0096  30F3               	movlw	243
 11200  0097  0021               	movlb	1	; select bank1
 11201  0098  00A9               	movwf	??_BMP_readTemperature^(0+128)
 11202  0099  0829               	movf	??_BMP_readTemperature^(0+128),w
 11203  009A  0020               	movlb	0	; select bank0
 11204  009B  00C3               	movwf	HMC5883L_ReadBits@regAddr
 11205  009C  3003               	movlw	3
 11206  009D  0021               	movlb	1	; select bank1
 11207  009E  00AA               	movwf	(??_BMP_readTemperature+1)^(0+128)
 11208  009F  082A               	movf	(??_BMP_readTemperature+1)^(0+128),w
 11209  00A0  0020               	movlb	0	; select bank0
 11210  00A1  00C4               	movwf	HMC5883L_ReadBits@bitStart
 11211  00A2  01C5               	clrf	HMC5883L_ReadBits@length
 11212  00A3  0AC5               	incf	HMC5883L_ReadBits@length,f
 11213  00A4  30B9               	movlw	(low (BMP_readTemperature@tmp| 0))& (0+255)
 11214  00A5  0021               	movlb	1	; select bank1
 11215  00A6  00AB               	movwf	(??_BMP_readTemperature+2)^(0+128)
 11216  00A7  082B               	movf	(??_BMP_readTemperature+2)^(0+128),w
 11217  00A8  0020               	movlb	0	; select bank0
 11218  00A9  00C6               	movwf	HMC5883L_ReadBits@data
 11219  00AA  3076               	movlw	118
 11220  00AB  3188  20B7  3180   	fcall	_HMC5883L_ReadBits
 11221  00AE  0021               	movlb	1	; select bank1
 11222  00AF  00AC               	movwf	(??_BMP_readTemperature+3)^(0+128)
 11223  00B0  082C               	movf	(??_BMP_readTemperature+3)^(0+128),w
 11224  00B1  00B8               	movwf	BMP_readTemperature@status^(0+128)
 11225                           
 11226                           ;bmp280.c: 86: } while(tmp==0 && status==1);
 11227  00B2  0839               	movf	BMP_readTemperature@tmp^(0+128),w
 11228  00B3  1903               	btfsc	3,2
 11229  00B4  0338               	decf	BMP_readTemperature@status^(0+128),w
 11230  00B5  1903               	btfsc	3,2
 11231  00B6  2896               	goto	l1027
 11232                           
 11233                           ;bmp280.c: 87: if(status==0)
 11234  00B7  0838               	movf	BMP_readTemperature@status^(0+128),w
 11235  00B8  1D03               	btfss	3,2
 11236  00B9  28C5               	goto	l6493
 11237                           
 11238                           ;bmp280.c: 88: {
 11239                           ;bmp280.c: 89: Diag_setTempSensorHealth(0);
 11240  00BA  3000               	movlw	0
 11241  00BB  3193  2300         	fcall	_Diag_setTempSensorHealth
 11242                           
 11243                           ;bmp280.c: 90: return -55;
 11244  00BD  3000               	movlw	0
 11245  00BE  0021               	movlb	1	; select bank1
 11246  00BF  00A6               	movwf	?_BMP_readTemperature^(0+128)
 11247  00C0  305C               	movlw	92
 11248  00C1  00A7               	movwf	(?_BMP_readTemperature+1)^(0+128)
 11249  00C2  30C2               	movlw	194
 11250  00C3  00A8               	movwf	(?_BMP_readTemperature+2)^(0+128)
 11251  00C4  0008               	return
 11252  00C5                     l6493:	
 11253                           
 11254                           ;bmp280.c: 91: }
 11255                           ;bmp280.c: 93: if(I2C_BufferRead(0x76, data, 0xF7, 8)==0)
 11256  00C5  30C0               	movlw	low _data
 11257  00C6  0020               	movlb	0	; select bank0
 11258  00C7  00B1               	movwf	I2C_BufferRead@pBuffer
 11259  00C8  3001               	movlw	high _data
 11260  00C9  00B2               	movwf	I2C_BufferRead@pBuffer+1
 11261  00CA  30F7               	movlw	247
 11262  00CB  0021               	movlb	1	; select bank1
 11263  00CC  00A9               	movwf	??_BMP_readTemperature^(0+128)
 11264  00CD  0829               	movf	??_BMP_readTemperature^(0+128),w
 11265  00CE  0020               	movlb	0	; select bank0
 11266  00CF  00B3               	movwf	I2C_BufferRead@ReadAddr
 11267  00D0  3008               	movlw	8
 11268  00D1  00B4               	movwf	I2C_BufferRead@NumByteToRead
 11269  00D2  3000               	movlw	0
 11270  00D3  00B5               	movwf	I2C_BufferRead@NumByteToRead+1
 11271  00D4  3076               	movlw	118
 11272  00D5  3189  21F2  3180   	fcall	_I2C_BufferRead
 11273  00D8  3A00               	xorlw	0
 11274  00D9  1D03               	skipz
 11275  00DA  28E6               	goto	l6501
 11276                           
 11277                           ;bmp280.c: 94: {
 11278                           ;bmp280.c: 95: Diag_setTempSensorHealth(0);
 11279  00DB  3000               	movlw	0
 11280  00DC  3193  2300         	fcall	_Diag_setTempSensorHealth
 11281                           
 11282                           ;bmp280.c: 96: return -55;
 11283  00DE  3000               	movlw	0
 11284  00DF  0021               	movlb	1	; select bank1
 11285  00E0  00A6               	movwf	?_BMP_readTemperature^(0+128)
 11286  00E1  305C               	movlw	92
 11287  00E2  00A7               	movwf	(?_BMP_readTemperature+1)^(0+128)
 11288  00E3  30C2               	movlw	194
 11289  00E4  00A8               	movwf	(?_BMP_readTemperature+2)^(0+128)
 11290  00E5  0008               	return
 11291  00E6                     l6501:	
 11292                           
 11293                           ;bmp280.c: 97: }
 11294                           ;bmp280.c: 101: adc_t = (((long)(data[3] & 0xFF) * 65536) + ((long)(data[4] & 0xFF) * 25
      +                          6) + (long)(data[5] & 0xF0)) / 16;
 11295  00E6  3000               	movlw	0
 11296  00E7  0020               	movlb	0	; select bank0
 11297  00E8  00A4               	movwf	___aldiv@divisor+3
 11298  00E9  3000               	movlw	0
 11299  00EA  00A3               	movwf	___aldiv@divisor+2
 11300  00EB  3000               	movlw	0
 11301  00EC  00A2               	movwf	___aldiv@divisor+1
 11302  00ED  3010               	movlw	16
 11303  00EE  00A1               	movwf	___aldiv@divisor
 11304  00EF  0023               	movlb	3	; select bank3
 11305  00F0  0845               	movf	(_data^(0+384)+5),w
 11306  00F1  39F0               	andlw	240
 11307  00F2  0021               	movlb	1	; select bank1
 11308  00F3  00A9               	movwf	??_BMP_readTemperature^(0+128)
 11309  00F4  01AA               	clrf	(??_BMP_readTemperature^(0+128)+1)
 11310  00F5  01AB               	clrf	(??_BMP_readTemperature^(0+128)+2)
 11311  00F6  01AC               	clrf	(??_BMP_readTemperature^(0+128)+3)
 11312  00F7  0023               	movlb	3	; select bank3
 11313  00F8  0844               	movf	(_data^(0+384)+4),w
 11314  00F9  0021               	movlb	1	; select bank1
 11315  00FA  00AD               	movwf	(??_BMP_readTemperature+4)^(0+128)
 11316  00FB  01AE               	clrf	((??_BMP_readTemperature+4)^(0+128)+1)
 11317  00FC  01AF               	clrf	((??_BMP_readTemperature+4)^(0+128)+2)
 11318  00FD  01B0               	clrf	((??_BMP_readTemperature+4)^(0+128)+3)
 11319  00FE  3008               	movlw	8
 11320  00FF                     u6405:	
 11321  00FF  35AD               	lslf	(??_BMP_readTemperature+4)^(0+128),f
 11322  0100  0DAE               	rlf	((??_BMP_readTemperature+4)^(0+128)+1),f
 11323  0101  0DAF               	rlf	((??_BMP_readTemperature+4)^(0+128)+2),f
 11324  0102  0DB0               	rlf	((??_BMP_readTemperature+4)^(0+128)+3),f
 11325  0103  0B89               	decfsz	9,f
 11326  0104  28FF               	goto	u6405
 11327  0105  0023               	movlb	3	; select bank3
 11328  0106  0843               	movf	(_data^(0+384)+3),w
 11329  0107  0021               	movlb	1	; select bank1
 11330  0108  00B1               	movwf	(??_BMP_readTemperature+8)^(0+128)
 11331  0109  01B2               	clrf	((??_BMP_readTemperature+8)^(0+128)+1)
 11332  010A  01B3               	clrf	((??_BMP_readTemperature+8)^(0+128)+2)
 11333  010B  01B4               	clrf	((??_BMP_readTemperature+8)^(0+128)+3)
 11334  010C  3010               	movlw	16
 11335  010D                     u6415:	
 11336  010D  35B1               	lslf	(??_BMP_readTemperature+8)^(0+128),f
 11337  010E  0DB2               	rlf	((??_BMP_readTemperature+8)^(0+128)+1),f
 11338  010F  0DB3               	rlf	((??_BMP_readTemperature+8)^(0+128)+2),f
 11339  0110  0DB4               	rlf	((??_BMP_readTemperature+8)^(0+128)+3),f
 11340  0111  0B89               	decfsz	9,f
 11341  0112  290D               	goto	u6415
 11342  0113  0831               	movf	(??_BMP_readTemperature+8)^(0+128),w
 11343  0114  07AD               	addwf	(??_BMP_readTemperature+4)^(0+128),f
 11344  0115  0832               	movf	(??_BMP_readTemperature+9)^(0+128),w
 11345  0116  3DAE               	addwfc	((??_BMP_readTemperature+4)^(0+128)+1),f
 11346  0117  0833               	movf	(??_BMP_readTemperature+10)^(0+128),w
 11347  0118  3DAF               	addwfc	((??_BMP_readTemperature+4)^(0+128)+2),f
 11348  0119  0834               	movf	(??_BMP_readTemperature+11)^(0+128),w
 11349  011A  3DB0               	addwfc	((??_BMP_readTemperature+4)^(0+128)+3),f
 11350  011B  082D               	movf	(??_BMP_readTemperature+4)^(0+128),w
 11351  011C  07A9               	addwf	??_BMP_readTemperature^(0+128),f
 11352  011D  082E               	movf	(??_BMP_readTemperature+5)^(0+128),w
 11353  011E  3DAA               	addwfc	(??_BMP_readTemperature^(0+128)+1),f
 11354  011F  082F               	movf	(??_BMP_readTemperature+6)^(0+128),w
 11355  0120  3DAB               	addwfc	(??_BMP_readTemperature^(0+128)+2),f
 11356  0121  0830               	movf	(??_BMP_readTemperature+7)^(0+128),w
 11357  0122  3DAC               	addwfc	(??_BMP_readTemperature^(0+128)+3),f
 11358  0123  082C               	movf	(??_BMP_readTemperature+3)^(0+128),w
 11359  0124  0020               	movlb	0	; select bank0
 11360  0125  00A8               	movwf	___aldiv@dividend+3
 11361  0126  0021               	movlb	1	; select bank1
 11362  0127  082B               	movf	(??_BMP_readTemperature+2)^(0+128),w
 11363  0128  0020               	movlb	0	; select bank0
 11364  0129  00A7               	movwf	___aldiv@dividend+2
 11365  012A  0021               	movlb	1	; select bank1
 11366  012B  082A               	movf	(??_BMP_readTemperature+1)^(0+128),w
 11367  012C  0020               	movlb	0	; select bank0
 11368  012D  00A6               	movwf	___aldiv@dividend+1
 11369  012E  0021               	movlb	1	; select bank1
 11370  012F  0829               	movf	??_BMP_readTemperature^(0+128),w
 11371  0130  0020               	movlb	0	; select bank0
 11372  0131  00A5               	movwf	___aldiv@dividend
 11373  0132  318C  2401  3180   	fcall	___aldiv
 11374  0135  0020               	movlb	0	; select bank0
 11375  0136  0824               	movf	?___aldiv+3,w
 11376  0137  0022               	movlb	2	; select bank2
 11377  0138  00A7               	movwf	(_adc_t+3)^(0+256)
 11378  0139  0020               	movlb	0	; select bank0
 11379  013A  0823               	movf	?___aldiv+2,w
 11380  013B  0022               	movlb	2	; select bank2
 11381  013C  00A6               	movwf	(_adc_t+2)^(0+256)
 11382  013D  0020               	movlb	0	; select bank0
 11383  013E  0822               	movf	?___aldiv+1,w
 11384  013F  0022               	movlb	2	; select bank2
 11385  0140  00A5               	movwf	(_adc_t+1)^(0+256)
 11386  0141  0020               	movlb	0	; select bank0
 11387  0142  0821               	movf	?___aldiv,w
 11388  0143  0022               	movlb	2	; select bank2
 11389  0144  00A4               	movwf	_adc_t^(0+256)
 11390                           
 11391                           ;bmp280.c: 104: var1 = (((double)adc_t) / 16384.0 - ((double)dig_T1) / 1024.0) * ((doubl
      +                          e)dig_T2);
 11392  0145  0857               	movf	(_dig_T2+1)^(0+256),w
 11393  0146  0020               	movlb	0	; select bank0
 11394  0147  00AA               	movwf	___awtoft@c+1
 11395  0148  0022               	movlb	2	; select bank2
 11396  0149  0856               	movf	_dig_T2^(0+256),w
 11397  014A  0020               	movlb	0	; select bank0
 11398  014B  00A9               	movwf	___awtoft@c
 11399  014C  3196  265D  3180   	fcall	___awtoft
 11400  014F  0020               	movlb	0	; select bank0
 11401  0150  0829               	movf	?___awtoft,w
 11402  0151  00D6               	movwf	___ftmul@f1
 11403  0152  082A               	movf	?___awtoft+1,w
 11404  0153  00D7               	movwf	___ftmul@f1+1
 11405  0154  082B               	movf	?___awtoft+2,w
 11406  0155  00D8               	movwf	___ftmul@f1+2
 11407  0156  0021               	movlb	1	; select bank1
 11408  0157  0854               	movf	(_dig_T1+1)^(0+128),w
 11409  0158  0020               	movlb	0	; select bank0
 11410  0159  00AA               	movwf	___lwtoft@c+1
 11411  015A  0021               	movlb	1	; select bank1
 11412  015B  0853               	movf	_dig_T1^(0+128),w
 11413  015C  0020               	movlb	0	; select bank0
 11414  015D  00A9               	movwf	___lwtoft@c
 11415  015E  3193  23FC  3180   	fcall	___lwtoft
 11416  0161  0020               	movlb	0	; select bank0
 11417  0162  0829               	movf	?___lwtoft,w
 11418  0163  00B4               	movwf	___ftdiv@f1
 11419  0164  082A               	movf	?___lwtoft+1,w
 11420  0165  00B5               	movwf	___ftdiv@f1+1
 11421  0166  082B               	movf	?___lwtoft+2,w
 11422  0167  00B6               	movwf	___ftdiv@f1+2
 11423  0168  3000               	movlw	0
 11424  0169  00B1               	movwf	___ftdiv@f2
 11425  016A  3080               	movlw	128
 11426  016B  00B2               	movwf	___ftdiv@f2+1
 11427  016C  3044               	movlw	68
 11428  016D  00B3               	movwf	___ftdiv@f2+2
 11429  016E  318D  25C7  3180   	fcall	___ftdiv
 11430  0171  0020               	movlb	0	; select bank0
 11431  0172  0831               	movf	?___ftdiv,w
 11432  0173  00C1               	movwf	___ftneg@f1
 11433  0174  0832               	movf	?___ftdiv+1,w
 11434  0175  00C2               	movwf	___ftneg@f1+1
 11435  0176  0833               	movf	?___ftdiv+2,w
 11436  0177  00C3               	movwf	___ftneg@f1+2
 11437  0178  3193  2321  3180   	fcall	___ftneg
 11438  017B  0020               	movlb	0	; select bank0
 11439  017C  0841               	movf	?___ftneg,w
 11440  017D  00C9               	movwf	___ftadd@f1
 11441  017E  0842               	movf	?___ftneg+1,w
 11442  017F  00CA               	movwf	___ftadd@f1+1
 11443  0180  0843               	movf	?___ftneg+2,w
 11444  0181  00CB               	movwf	___ftadd@f1+2
 11445  0182  3000               	movlw	0
 11446  0183  00B1               	movwf	___ftdiv@f2
 11447  0184  3080               	movlw	128
 11448  0185  00B2               	movwf	___ftdiv@f2+1
 11449  0186  3046               	movlw	70
 11450  0187  00B3               	movwf	___ftdiv@f2+2
 11451  0188  0022               	movlb	2	; select bank2
 11452  0189  0827               	movf	(_adc_t+3)^(0+256),w
 11453  018A  0020               	movlb	0	; select bank0
 11454  018B  00AC               	movwf	___altoft@c+3
 11455  018C  0022               	movlb	2	; select bank2
 11456  018D  0826               	movf	(_adc_t+2)^(0+256),w
 11457  018E  0020               	movlb	0	; select bank0
 11458  018F  00AB               	movwf	___altoft@c+2
 11459  0190  0022               	movlb	2	; select bank2
 11460  0191  0825               	movf	(_adc_t+1)^(0+256),w
 11461  0192  0020               	movlb	0	; select bank0
 11462  0193  00AA               	movwf	___altoft@c+1
 11463  0194  0022               	movlb	2	; select bank2
 11464  0195  0824               	movf	_adc_t^(0+256),w
 11465  0196  0020               	movlb	0	; select bank0
 11466  0197  00A9               	movwf	___altoft@c
 11467  0198  3188  2035  3180   	fcall	___altoft
 11468  019B  0020               	movlb	0	; select bank0
 11469  019C  0829               	movf	?___altoft,w
 11470  019D  00B4               	movwf	___ftdiv@f1
 11471  019E  082A               	movf	?___altoft+1,w
 11472  019F  00B5               	movwf	___ftdiv@f1+1
 11473  01A0  082B               	movf	?___altoft+2,w
 11474  01A1  00B6               	movwf	___ftdiv@f1+2
 11475  01A2  318D  25C7  3180   	fcall	___ftdiv
 11476  01A5  0020               	movlb	0	; select bank0
 11477  01A6  0831               	movf	?___ftdiv,w
 11478  01A7  00CC               	movwf	___ftadd@f2
 11479  01A8  0832               	movf	?___ftdiv+1,w
 11480  01A9  00CD               	movwf	___ftadd@f2+1
 11481  01AA  0833               	movf	?___ftdiv+2,w
 11482  01AB  00CE               	movwf	___ftadd@f2+2
 11483  01AC  3186  268D  3180   	fcall	___ftadd
 11484  01AF  0020               	movlb	0	; select bank0
 11485  01B0  0849               	movf	?___ftadd,w
 11486  01B1  00D9               	movwf	___ftmul@f2
 11487  01B2  084A               	movf	?___ftadd+1,w
 11488  01B3  00DA               	movwf	___ftmul@f2+1
 11489  01B4  084B               	movf	?___ftadd+2,w
 11490  01B5  00DB               	movwf	___ftmul@f2+2
 11491  01B6  318E  2670  3180   	fcall	___ftmul
 11492  01B9  0020               	movlb	0	; select bank0
 11493  01BA  0856               	movf	?___ftmul,w
 11494  01BB  0022               	movlb	2	; select bank2
 11495  01BC  00B4               	movwf	_var1^(0+256)
 11496  01BD  0020               	movlb	0	; select bank0
 11497  01BE  0857               	movf	?___ftmul+1,w
 11498  01BF  0022               	movlb	2	; select bank2
 11499  01C0  00B5               	movwf	(_var1+1)^(0+256)
 11500  01C1  0020               	movlb	0	; select bank0
 11501  01C2  0858               	movf	?___ftmul+2,w
 11502  01C3  0022               	movlb	2	; select bank2
 11503  01C4  00B6               	movwf	(_var1+2)^(0+256)
 11504                           
 11505                           ;bmp280.c: 105: var2 = ((((double)adc_t) / 131072.0 - ((double)dig_T1) / 8192.0) *
 11506                           ;bmp280.c: 106: (((double)adc_t) / 131072.0 - ((double)dig_T1) / 8192.0)) * ((double)dig
      +                          _T3);
 11507  01C5  0021               	movlb	1	; select bank1
 11508  01C6  0854               	movf	(_dig_T1+1)^(0+128),w
 11509  01C7  0020               	movlb	0	; select bank0
 11510  01C8  00AA               	movwf	___lwtoft@c+1
 11511  01C9  0021               	movlb	1	; select bank1
 11512  01CA  0853               	movf	_dig_T1^(0+128),w
 11513  01CB  0020               	movlb	0	; select bank0
 11514  01CC  00A9               	movwf	___lwtoft@c
 11515  01CD  3193  23FC  3180   	fcall	___lwtoft
 11516  01D0  0020               	movlb	0	; select bank0
 11517  01D1  0829               	movf	?___lwtoft,w
 11518  01D2  00B4               	movwf	___ftdiv@f1
 11519  01D3  082A               	movf	?___lwtoft+1,w
 11520  01D4  00B5               	movwf	___ftdiv@f1+1
 11521  01D5  082B               	movf	?___lwtoft+2,w
 11522  01D6  00B6               	movwf	___ftdiv@f1+2
 11523  01D7  3000               	movlw	0
 11524  01D8  00B1               	movwf	___ftdiv@f2
 11525  01D9  3000               	movlw	0
 11526  01DA  00B2               	movwf	___ftdiv@f2+1
 11527  01DB  3046               	movlw	70
 11528  01DC  00B3               	movwf	___ftdiv@f2+2
 11529  01DD  318D  25C7  3180   	fcall	___ftdiv
 11530  01E0  0020               	movlb	0	; select bank0
 11531  01E1  0831               	movf	?___ftdiv,w
 11532  01E2  00C1               	movwf	___ftneg@f1
 11533  01E3  0832               	movf	?___ftdiv+1,w
 11534  01E4  00C2               	movwf	___ftneg@f1+1
 11535  01E5  0833               	movf	?___ftdiv+2,w
 11536  01E6  00C3               	movwf	___ftneg@f1+2
 11537  01E7  3193  2321  3180   	fcall	___ftneg
 11538  01EA  0020               	movlb	0	; select bank0
 11539  01EB  0841               	movf	?___ftneg,w
 11540  01EC  00C9               	movwf	___ftadd@f1
 11541  01ED  0842               	movf	?___ftneg+1,w
 11542  01EE  00CA               	movwf	___ftadd@f1+1
 11543  01EF  0843               	movf	?___ftneg+2,w
 11544  01F0  00CB               	movwf	___ftadd@f1+2
 11545  01F1  3000               	movlw	0
 11546  01F2  00B1               	movwf	___ftdiv@f2
 11547  01F3  3000               	movlw	0
 11548  01F4  00B2               	movwf	___ftdiv@f2+1
 11549  01F5  3048               	movlw	72
 11550  01F6  00B3               	movwf	___ftdiv@f2+2
 11551  01F7  0022               	movlb	2	; select bank2
 11552  01F8  0827               	movf	(_adc_t+3)^(0+256),w
 11553  01F9  0020               	movlb	0	; select bank0
 11554  01FA  00AC               	movwf	___altoft@c+3
 11555  01FB  0022               	movlb	2	; select bank2
 11556  01FC  0826               	movf	(_adc_t+2)^(0+256),w
 11557  01FD  0020               	movlb	0	; select bank0
 11558  01FE  00AB               	movwf	___altoft@c+2
 11559  01FF  0022               	movlb	2	; select bank2
 11560  0200  0825               	movf	(_adc_t+1)^(0+256),w
 11561  0201  0020               	movlb	0	; select bank0
 11562  0202  00AA               	movwf	___altoft@c+1
 11563  0203  0022               	movlb	2	; select bank2
 11564  0204  0824               	movf	_adc_t^(0+256),w
 11565  0205  0020               	movlb	0	; select bank0
 11566  0206  00A9               	movwf	___altoft@c
 11567  0207  3188  2035  3180   	fcall	___altoft
 11568  020A  0020               	movlb	0	; select bank0
 11569  020B  0829               	movf	?___altoft,w
 11570  020C  00B4               	movwf	___ftdiv@f1
 11571  020D  082A               	movf	?___altoft+1,w
 11572  020E  00B5               	movwf	___ftdiv@f1+1
 11573  020F  082B               	movf	?___altoft+2,w
 11574  0210  00B6               	movwf	___ftdiv@f1+2
 11575  0211  318D  25C7  3180   	fcall	___ftdiv
 11576  0214  0020               	movlb	0	; select bank0
 11577  0215  0831               	movf	?___ftdiv,w
 11578  0216  00CC               	movwf	___ftadd@f2
 11579  0217  0832               	movf	?___ftdiv+1,w
 11580  0218  00CD               	movwf	___ftadd@f2+1
 11581  0219  0833               	movf	?___ftdiv+2,w
 11582  021A  00CE               	movwf	___ftadd@f2+2
 11583  021B  3186  268D  3180   	fcall	___ftadd
 11584  021E  0020               	movlb	0	; select bank0
 11585  021F  0849               	movf	?___ftadd,w
 11586  0220  00D6               	movwf	___ftmul@f1
 11587  0221  084A               	movf	?___ftadd+1,w
 11588  0222  00D7               	movwf	___ftmul@f1+1
 11589  0223  084B               	movf	?___ftadd+2,w
 11590  0224  00D8               	movwf	___ftmul@f1+2
 11591  0225  0021               	movlb	1	; select bank1
 11592  0226  0854               	movf	(_dig_T1+1)^(0+128),w
 11593  0227  0020               	movlb	0	; select bank0
 11594  0228  00AA               	movwf	___lwtoft@c+1
 11595  0229  0021               	movlb	1	; select bank1
 11596  022A  0853               	movf	_dig_T1^(0+128),w
 11597  022B  0020               	movlb	0	; select bank0
 11598  022C  00A9               	movwf	___lwtoft@c
 11599  022D  3193  23FC  3180   	fcall	___lwtoft
 11600  0230  0020               	movlb	0	; select bank0
 11601  0231  0829               	movf	?___lwtoft,w
 11602  0232  00B4               	movwf	___ftdiv@f1
 11603  0233  082A               	movf	?___lwtoft+1,w
 11604  0234  00B5               	movwf	___ftdiv@f1+1
 11605  0235  082B               	movf	?___lwtoft+2,w
 11606  0236  00B6               	movwf	___ftdiv@f1+2
 11607  0237  3000               	movlw	0
 11608  0238  00B1               	movwf	___ftdiv@f2
 11609  0239  3000               	movlw	0
 11610  023A  00B2               	movwf	___ftdiv@f2+1
 11611  023B  3046               	movlw	70
 11612  023C  00B3               	movwf	___ftdiv@f2+2
 11613  023D  318D  25C7  3180   	fcall	___ftdiv
 11614  0240  0020               	movlb	0	; select bank0
 11615  0241  0831               	movf	?___ftdiv,w
 11616  0242  00C1               	movwf	___ftneg@f1
 11617  0243  0832               	movf	?___ftdiv+1,w
 11618  0244  00C2               	movwf	___ftneg@f1+1
 11619  0245  0833               	movf	?___ftdiv+2,w
 11620  0246  00C3               	movwf	___ftneg@f1+2
 11621  0247  3193  2321  3180   	fcall	___ftneg
 11622  024A  0020               	movlb	0	; select bank0
 11623  024B  0841               	movf	?___ftneg,w
 11624  024C  00C9               	movwf	___ftadd@f1
 11625  024D  0842               	movf	?___ftneg+1,w
 11626  024E  00CA               	movwf	___ftadd@f1+1
 11627  024F  0843               	movf	?___ftneg+2,w
 11628  0250  00CB               	movwf	___ftadd@f1+2
 11629  0251  3000               	movlw	0
 11630  0252  00B1               	movwf	___ftdiv@f2
 11631  0253  3000               	movlw	0
 11632  0254  00B2               	movwf	___ftdiv@f2+1
 11633  0255  3048               	movlw	72
 11634  0256  00B3               	movwf	___ftdiv@f2+2
 11635  0257  0022               	movlb	2	; select bank2
 11636  0258  0827               	movf	(_adc_t+3)^(0+256),w
 11637  0259  0020               	movlb	0	; select bank0
 11638  025A  00AC               	movwf	___altoft@c+3
 11639  025B  0022               	movlb	2	; select bank2
 11640  025C  0826               	movf	(_adc_t+2)^(0+256),w
 11641  025D  0020               	movlb	0	; select bank0
 11642  025E  00AB               	movwf	___altoft@c+2
 11643  025F  0022               	movlb	2	; select bank2
 11644  0260  0825               	movf	(_adc_t+1)^(0+256),w
 11645  0261  0020               	movlb	0	; select bank0
 11646  0262  00AA               	movwf	___altoft@c+1
 11647  0263  0022               	movlb	2	; select bank2
 11648  0264  0824               	movf	_adc_t^(0+256),w
 11649  0265  0020               	movlb	0	; select bank0
 11650  0266  00A9               	movwf	___altoft@c
 11651  0267  3188  2035  3180   	fcall	___altoft
 11652  026A  0020               	movlb	0	; select bank0
 11653  026B  0829               	movf	?___altoft,w
 11654  026C  00B4               	movwf	___ftdiv@f1
 11655  026D  082A               	movf	?___altoft+1,w
 11656  026E  00B5               	movwf	___ftdiv@f1+1
 11657  026F  082B               	movf	?___altoft+2,w
 11658  0270  00B6               	movwf	___ftdiv@f1+2
 11659  0271  318D  25C7  3180   	fcall	___ftdiv
 11660  0274  0020               	movlb	0	; select bank0
 11661  0275  0831               	movf	?___ftdiv,w
 11662  0276  00CC               	movwf	___ftadd@f2
 11663  0277  0832               	movf	?___ftdiv+1,w
 11664  0278  00CD               	movwf	___ftadd@f2+1
 11665  0279  0833               	movf	?___ftdiv+2,w
 11666  027A  00CE               	movwf	___ftadd@f2+2
 11667  027B  3186  268D  3180   	fcall	___ftadd
 11668  027E  0020               	movlb	0	; select bank0
 11669  027F  0849               	movf	?___ftadd,w
 11670  0280  00D9               	movwf	___ftmul@f2
 11671  0281  084A               	movf	?___ftadd+1,w
 11672  0282  00DA               	movwf	___ftmul@f2+1
 11673  0283  084B               	movf	?___ftadd+2,w
 11674  0284  00DB               	movwf	___ftmul@f2+2
 11675  0285  318E  2670  3180   	fcall	___ftmul
 11676  0288  0020               	movlb	0	; select bank0
 11677  0289  0856               	movf	?___ftmul,w
 11678  028A  0021               	movlb	1	; select bank1
 11679  028B  00B5               	movwf	_BMP_readTemperature$2648^(0+128)
 11680  028C  0020               	movlb	0	; select bank0
 11681  028D  0857               	movf	?___ftmul+1,w
 11682  028E  0021               	movlb	1	; select bank1
 11683  028F  00B6               	movwf	(_BMP_readTemperature$2648+1)^(0+128)
 11684  0290  0020               	movlb	0	; select bank0
 11685  0291  0858               	movf	?___ftmul+2,w
 11686  0292  0021               	movlb	1	; select bank1
 11687  0293  00B7               	movwf	(_BMP_readTemperature$2648+2)^(0+128)
 11688                           
 11689                           ;bmp280.c: 105: var2 = ((((double)adc_t) / 131072.0 - ((double)dig_T1) / 8192.0) *
 11690                           ;bmp280.c: 106: (((double)adc_t) / 131072.0 - ((double)dig_T1) / 8192.0)) * ((double)dig
      +                          _T3);
 11691  0294  0022               	movlb	2	; select bank2
 11692  0295  0855               	movf	(_dig_T3+1)^(0+256),w
 11693  0296  0020               	movlb	0	; select bank0
 11694  0297  00AA               	movwf	___awtoft@c+1
 11695  0298  0022               	movlb	2	; select bank2
 11696  0299  0854               	movf	_dig_T3^(0+256),w
 11697  029A  0020               	movlb	0	; select bank0
 11698  029B  00A9               	movwf	___awtoft@c
 11699  029C  3196  265D  3180   	fcall	___awtoft
 11700  029F  0020               	movlb	0	; select bank0
 11701  02A0  0829               	movf	?___awtoft,w
 11702  02A1  00D6               	movwf	___ftmul@f1
 11703  02A2  082A               	movf	?___awtoft+1,w
 11704  02A3  00D7               	movwf	___ftmul@f1+1
 11705  02A4  082B               	movf	?___awtoft+2,w
 11706  02A5  00D8               	movwf	___ftmul@f1+2
 11707  02A6  0021               	movlb	1	; select bank1
 11708  02A7  0835               	movf	_BMP_readTemperature$2648^(0+128),w
 11709  02A8  0020               	movlb	0	; select bank0
 11710  02A9  00D9               	movwf	___ftmul@f2
 11711  02AA  0021               	movlb	1	; select bank1
 11712  02AB  0836               	movf	(_BMP_readTemperature$2648+1)^(0+128),w
 11713  02AC  0020               	movlb	0	; select bank0
 11714  02AD  00DA               	movwf	___ftmul@f2+1
 11715  02AE  0021               	movlb	1	; select bank1
 11716  02AF  0837               	movf	(_BMP_readTemperature$2648+2)^(0+128),w
 11717  02B0  0020               	movlb	0	; select bank0
 11718  02B1  00DB               	movwf	___ftmul@f2+2
 11719  02B2  318E  2670  3180   	fcall	___ftmul
 11720  02B5  0020               	movlb	0	; select bank0
 11721  02B6  0856               	movf	?___ftmul,w
 11722  02B7  0022               	movlb	2	; select bank2
 11723  02B8  00B1               	movwf	_var2^(0+256)
 11724  02B9  0020               	movlb	0	; select bank0
 11725  02BA  0857               	movf	?___ftmul+1,w
 11726  02BB  0022               	movlb	2	; select bank2
 11727  02BC  00B2               	movwf	(_var2+1)^(0+256)
 11728  02BD  0020               	movlb	0	; select bank0
 11729  02BE  0858               	movf	?___ftmul+2,w
 11730  02BF  0022               	movlb	2	; select bank2
 11731  02C0  00B3               	movwf	(_var2+2)^(0+256)
 11732                           
 11733                           ;bmp280.c: 107: t_fine = (long)(var1 + var2);
 11734  02C1  0834               	movf	_var1^(0+256),w
 11735  02C2  0020               	movlb	0	; select bank0
 11736  02C3  00CC               	movwf	___ftadd@f2
 11737  02C4  0022               	movlb	2	; select bank2
 11738  02C5  0835               	movf	(_var1+1)^(0+256),w
 11739  02C6  0020               	movlb	0	; select bank0
 11740  02C7  00CD               	movwf	___ftadd@f2+1
 11741  02C8  0022               	movlb	2	; select bank2
 11742  02C9  0836               	movf	(_var1+2)^(0+256),w
 11743  02CA  0020               	movlb	0	; select bank0
 11744  02CB  00CE               	movwf	___ftadd@f2+2
 11745  02CC  0022               	movlb	2	; select bank2
 11746  02CD  0831               	movf	_var2^(0+256),w
 11747  02CE  0020               	movlb	0	; select bank0
 11748  02CF  00C9               	movwf	___ftadd@f1
 11749  02D0  0022               	movlb	2	; select bank2
 11750  02D1  0832               	movf	(_var2+1)^(0+256),w
 11751  02D2  0020               	movlb	0	; select bank0
 11752  02D3  00CA               	movwf	___ftadd@f1+1
 11753  02D4  0022               	movlb	2	; select bank2
 11754  02D5  0833               	movf	(_var2+2)^(0+256),w
 11755  02D6  0020               	movlb	0	; select bank0
 11756  02D7  00CB               	movwf	___ftadd@f1+2
 11757  02D8  3186  268D  3180   	fcall	___ftadd
 11758  02DB  0020               	movlb	0	; select bank0
 11759  02DC  0849               	movf	?___ftadd,w
 11760  02DD  00E6               	movwf	___fttol@f1
 11761  02DE  084A               	movf	?___ftadd+1,w
 11762  02DF  00E7               	movwf	___fttol@f1+1
 11763  02E0  084B               	movf	?___ftadd+2,w
 11764  02E1  00E8               	movwf	___fttol@f1+2
 11765  02E2  318C  2483  3180   	fcall	___fttol
 11766  02E5  0020               	movlb	0	; select bank0
 11767  02E6  0869               	movf	?___fttol+3,w
 11768  02E7  00AC               	movwf	___altoft@c+3
 11769  02E8  0868               	movf	?___fttol+2,w
 11770  02E9  00AB               	movwf	___altoft@c+2
 11771  02EA  0867               	movf	?___fttol+1,w
 11772  02EB  00AA               	movwf	___altoft@c+1
 11773  02EC  0866               	movf	?___fttol,w
 11774  02ED  00A9               	movwf	___altoft@c
 11775  02EE  3188  2035  3180   	fcall	___altoft
 11776  02F1  0020               	movlb	0	; select bank0
 11777  02F2  0829               	movf	?___altoft,w
 11778  02F3  0022               	movlb	2	; select bank2
 11779  02F4  00AE               	movwf	_t_fine^(0+256)
 11780  02F5  0020               	movlb	0	; select bank0
 11781  02F6  082A               	movf	?___altoft+1,w
 11782  02F7  0022               	movlb	2	; select bank2
 11783  02F8  00AF               	movwf	(_t_fine+1)^(0+256)
 11784  02F9  0020               	movlb	0	; select bank0
 11785  02FA  082B               	movf	?___altoft+2,w
 11786  02FB  0022               	movlb	2	; select bank2
 11787  02FC  00B0               	movwf	(_t_fine+2)^(0+256)
 11788                           
 11789                           ;bmp280.c: 108: cTemp = (var1 + var2) / 5120.0;
 11790  02FD  3000               	movlw	0
 11791  02FE  0020               	movlb	0	; select bank0
 11792  02FF  00B1               	movwf	___ftdiv@f2
 11793  0300  30A0               	movlw	160
 11794  0301  00B2               	movwf	___ftdiv@f2+1
 11795  0302  3045               	movlw	69
 11796  0303  00B3               	movwf	___ftdiv@f2+2
 11797  0304  0022               	movlb	2	; select bank2
 11798  0305  0831               	movf	_var2^(0+256),w
 11799  0306  0020               	movlb	0	; select bank0
 11800  0307  00C9               	movwf	___ftadd@f1
 11801  0308  0022               	movlb	2	; select bank2
 11802  0309  0832               	movf	(_var2+1)^(0+256),w
 11803  030A  0020               	movlb	0	; select bank0
 11804  030B  00CA               	movwf	___ftadd@f1+1
 11805  030C  0022               	movlb	2	; select bank2
 11806  030D  0833               	movf	(_var2+2)^(0+256),w
 11807  030E  0020               	movlb	0	; select bank0
 11808  030F  00CB               	movwf	___ftadd@f1+2
 11809  0310  0022               	movlb	2	; select bank2
 11810  0311  0834               	movf	_var1^(0+256),w
 11811  0312  0020               	movlb	0	; select bank0
 11812  0313  00CC               	movwf	___ftadd@f2
 11813  0314  0022               	movlb	2	; select bank2
 11814  0315  0835               	movf	(_var1+1)^(0+256),w
 11815  0316  0020               	movlb	0	; select bank0
 11816  0317  00CD               	movwf	___ftadd@f2+1
 11817  0318  0022               	movlb	2	; select bank2
 11818  0319  0836               	movf	(_var1+2)^(0+256),w
 11819  031A  0020               	movlb	0	; select bank0
 11820  031B  00CE               	movwf	___ftadd@f2+2
 11821  031C  3186  268D  3180   	fcall	___ftadd
 11822  031F  0020               	movlb	0	; select bank0
 11823  0320  0849               	movf	?___ftadd,w
 11824  0321  00B4               	movwf	___ftdiv@f1
 11825  0322  084A               	movf	?___ftadd+1,w
 11826  0323  00B5               	movwf	___ftdiv@f1+1
 11827  0324  084B               	movf	?___ftadd+2,w
 11828  0325  00B6               	movwf	___ftdiv@f1+2
 11829  0326  318D  25C7  3180   	fcall	___ftdiv
 11830  0329  0020               	movlb	0	; select bank0
 11831  032A  0831               	movf	?___ftdiv,w
 11832  032B  0022               	movlb	2	; select bank2
 11833  032C  00AB               	movwf	_cTemp^(0+256)
 11834  032D  0020               	movlb	0	; select bank0
 11835  032E  0832               	movf	?___ftdiv+1,w
 11836  032F  0022               	movlb	2	; select bank2
 11837  0330  00AC               	movwf	(_cTemp+1)^(0+256)
 11838  0331  0020               	movlb	0	; select bank0
 11839  0332  0833               	movf	?___ftdiv+2,w
 11840  0333  0022               	movlb	2	; select bank2
 11841  0334  00AD               	movwf	(_cTemp+2)^(0+256)
 11842                           
 11843                           ;bmp280.c: 123: Diag_setTempSensorHealth(1);
 11844  0335  3001               	movlw	1
 11845  0336  3193  2300         	fcall	_Diag_setTempSensorHealth
 11846                           
 11847                           ;bmp280.c: 124: return(cTemp);
 11848  0338  0022               	movlb	2	; select bank2
 11849  0339  082B               	movf	_cTemp^(0+256),w
 11850  033A  0021               	movlb	1	; select bank1
 11851  033B  00A6               	movwf	?_BMP_readTemperature^(0+128)
 11852  033C  0022               	movlb	2	; select bank2
 11853  033D  082C               	movf	(_cTemp+1)^(0+256),w
 11854  033E  0021               	movlb	1	; select bank1
 11855  033F  00A7               	movwf	(?_BMP_readTemperature+1)^(0+128)
 11856  0340  0022               	movlb	2	; select bank2
 11857  0341  082D               	movf	(_cTemp+2)^(0+256),w
 11858  0342  0021               	movlb	1	; select bank1
 11859  0343  00A8               	movwf	(?_BMP_readTemperature+2)^(0+128)
 11860  0344  0008               	return
 11861  0345                     __end_of_BMP_readTemperature:	
 11862                           
 11863                           	psect	text62
 11864  13FC                     __ptext62:	
 11865 ;; *************** function ___lwtoft *****************
 11866 ;; Defined at:
 11867 ;;		line 28 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\lwtoft.c"
 11868 ;; Parameters:    Size  Location     Type
 11869 ;;  c               2    9[BANK0 ] unsigned int 
 11870 ;; Auto vars:     Size  Location     Type
 11871 ;;		None
 11872 ;; Return value:  Size  Location     Type
 11873 ;;                  3    9[BANK0 ] float 
 11874 ;; Registers used:
 11875 ;;		wreg, status,2, status,0, pclath, cstack
 11876 ;; Tracked objects:
 11877 ;;		On entry : 0/0
 11878 ;;		On exit  : 0/0
 11879 ;;		Unchanged: 0/0
 11880 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11881 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11882 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11883 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11884 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11885 ;;Total ram usage:        4 bytes
 11886 ;; Hardware stack levels used:    1
 11887 ;; Hardware stack levels required when called:    5
 11888 ;; This function calls:
 11889 ;;		___ftpack
 11890 ;; This function is called by:
 11891 ;;		_Sensor_getSupplyVoltage
 11892 ;;		_BMP_readTemperature
 11893 ;; This function uses a non-reentrant model
 11894 ;;
 11895                           
 11896                           
 11897                           ;psect for function ___lwtoft
 11898  13FC                     ___lwtoft:	
 11899                           
 11900                           ;incstack = 0
 11901                           ; Regs used in ___lwtoft: [wreg+status,2+status,0+pclath+cstack]
 11902  13FC  0020               	movlb	0	; select bank0
 11903  13FD  0829               	movf	___lwtoft@c,w
 11904  13FE  00A1               	movwf	___ftpack@arg
 11905  13FF  082A               	movf	___lwtoft@c+1,w
 11906  1400  00A2               	movwf	___ftpack@arg+1
 11907  1401  01A3               	clrf	___ftpack@arg+2
 11908  1402  308E               	movlw	142
 11909  1403  00AC               	movwf	??___lwtoft
 11910  1404  082C               	movf	??___lwtoft,w
 11911  1405  00A4               	movwf	___ftpack@exp
 11912  1406  01A5               	clrf	___ftpack@sign
 11913  1407  318A  22AE         	fcall	___ftpack
 11914  1409  0020               	movlb	0	; select bank0
 11915  140A  0821               	movf	?___ftpack,w
 11916  140B  00A9               	movwf	?___lwtoft
 11917  140C  0822               	movf	?___ftpack+1,w
 11918  140D  00AA               	movwf	?___lwtoft+1
 11919  140E  0823               	movf	?___ftpack+2,w
 11920  140F  00AB               	movwf	?___lwtoft+2
 11921  1410  0008               	return
 11922  1411                     __end_of___lwtoft:	
 11923                           
 11924                           	psect	text63
 11925  0C83                     __ptext63:	
 11926 ;; *************** function ___fttol *****************
 11927 ;; Defined at:
 11928 ;;		line 44 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\fttol.c"
 11929 ;; Parameters:    Size  Location     Type
 11930 ;;  f1              3   70[BANK0 ] float 
 11931 ;; Auto vars:     Size  Location     Type
 11932 ;;  lval            4    1[BANK1 ] unsigned long 
 11933 ;;  exp1            1    5[BANK1 ] unsigned char 
 11934 ;;  sign1           1    0[BANK1 ] unsigned char 
 11935 ;; Return value:  Size  Location     Type
 11936 ;;                  4   70[BANK0 ] long 
 11937 ;; Registers used:
 11938 ;;		wreg, status,2, status,0
 11939 ;; Tracked objects:
 11940 ;;		On entry : 0/0
 11941 ;;		On exit  : 0/0
 11942 ;;		Unchanged: 0/0
 11943 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11944 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11945 ;;      Locals:         0       0       6       0       0       0       0       0       0       0       0       0       
      +0       0
 11946 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11947 ;;      Totals:         0       8       6       0       0       0       0       0       0       0       0       0       
      +0       0
 11948 ;;Total ram usage:       14 bytes
 11949 ;; Hardware stack levels used:    1
 11950 ;; Hardware stack levels required when called:    4
 11951 ;; This function calls:
 11952 ;;		Nothing
 11953 ;; This function is called by:
 11954 ;;		_BMP_readTemperature
 11955 ;;		_Wireless_packageData
 11956 ;;		_HMC5883L_GetCompassDirection
 11957 ;; This function uses a non-reentrant model
 11958 ;;
 11959                           
 11960                           
 11961                           ;psect for function ___fttol
 11962  0C83                     ___fttol:	
 11963                           
 11964                           ;incstack = 0
 11965                           ; Regs used in ___fttol: [wreg+status,2+status,0]
 11966  0C83  0020               	movlb	0	; select bank0
 11967  0C84  0866               	movf	___fttol@f1,w
 11968  0C85  00EA               	movwf	??___fttol
 11969  0C86  0867               	movf	___fttol@f1+1,w
 11970  0C87  00EB               	movwf	??___fttol+1
 11971  0C88  0868               	movf	___fttol@f1+2,w
 11972  0C89  00EC               	movwf	??___fttol+2
 11973  0C8A  1003               	clrc
 11974  0C8B  0D6B               	rlf	??___fttol+1,w
 11975  0C8C  0D6C               	rlf	??___fttol+2,w
 11976  0C8D  00ED               	movwf	??___fttol+3
 11977  0C8E  086D               	movf	??___fttol+3,w
 11978  0C8F  0021               	movlb	1	; select bank1
 11979  0C90  00A5               	movwf	___fttol@exp1^(0+128)
 11980  0C91  0825               	movf	___fttol@exp1^(0+128),w
 11981  0C92  1D03               	btfss	3,2
 11982  0C93  2C9E               	goto	l6415
 11983  0C94  3000               	movlw	0
 11984  0C95  0020               	movlb	0	; select bank0
 11985  0C96  00E9               	movwf	?___fttol+3
 11986  0C97  3000               	movlw	0
 11987  0C98  00E8               	movwf	?___fttol+2
 11988  0C99  3000               	movlw	0
 11989  0C9A  00E7               	movwf	?___fttol+1
 11990  0C9B  3000               	movlw	0
 11991  0C9C  00E6               	movwf	?___fttol
 11992  0C9D  0008               	return
 11993  0C9E                     l6415:	
 11994  0C9E  0020               	movlb	0	; select bank0
 11995  0C9F  0866               	movf	___fttol@f1,w
 11996  0CA0  00EA               	movwf	??___fttol
 11997  0CA1  0867               	movf	___fttol@f1+1,w
 11998  0CA2  00EB               	movwf	??___fttol+1
 11999  0CA3  0868               	movf	___fttol@f1+2,w
 12000  0CA4  00EC               	movwf	??___fttol+2
 12001  0CA5  3017               	movlw	23
 12002  0CA6                     u6265:	
 12003  0CA6  36EC               	lsrf	??___fttol+2,f
 12004  0CA7  0CEB               	rrf	??___fttol+1,f
 12005  0CA8  0CEA               	rrf	??___fttol,f
 12006  0CA9  0B89               	decfsz	9,f
 12007  0CAA  2CA6               	goto	u6265
 12008  0CAB  086A               	movf	??___fttol,w
 12009  0CAC  00ED               	movwf	??___fttol+3
 12010  0CAD  086D               	movf	??___fttol+3,w
 12011  0CAE  0021               	movlb	1	; select bank1
 12012  0CAF  00A0               	movwf	___fttol@sign1^(0+128)
 12013  0CB0  0020               	movlb	0	; select bank0
 12014  0CB1  17E7               	bsf	___fttol@f1+1,7
 12015  0CB2  30FF               	movlw	255
 12016  0CB3  05E6               	andwf	___fttol@f1,f
 12017  0CB4  30FF               	movlw	255
 12018  0CB5  05E7               	andwf	___fttol@f1+1,f
 12019  0CB6  3000               	movlw	0
 12020  0CB7  05E8               	andwf	___fttol@f1+2,f
 12021  0CB8  0866               	movf	___fttol@f1,w
 12022  0CB9  0021               	movlb	1	; select bank1
 12023  0CBA  00A1               	movwf	___fttol@lval^(0+128)
 12024  0CBB  0020               	movlb	0	; select bank0
 12025  0CBC  0867               	movf	___fttol@f1+1,w
 12026  0CBD  0021               	movlb	1	; select bank1
 12027  0CBE  00A2               	movwf	(___fttol@lval^(0+128)+1)
 12028  0CBF  0020               	movlb	0	; select bank0
 12029  0CC0  0868               	movf	___fttol@f1+2,w
 12030  0CC1  0021               	movlb	1	; select bank1
 12031  0CC2  00A3               	movwf	(___fttol@lval^(0+128)+2)
 12032  0CC3  01A4               	clrf	(___fttol@lval^(0+128)+3)
 12033  0CC4  308E               	movlw	142
 12034  0CC5  02A5               	subwf	___fttol@exp1^(0+128),f
 12035  0CC6  1FA5               	btfss	___fttol@exp1^(0+128),7
 12036  0CC7  2CE8               	goto	l6435
 12037  0CC8  0825               	movf	___fttol@exp1^(0+128),w
 12038  0CC9  3A80               	xorlw	128
 12039  0CCA  3E8F               	addlw	143
 12040  0CCB  1803               	skipnc
 12041  0CCC  2CD7               	goto	l6433
 12042  0CCD  3000               	movlw	0
 12043  0CCE  0020               	movlb	0	; select bank0
 12044  0CCF  00E9               	movwf	?___fttol+3
 12045  0CD0  3000               	movlw	0
 12046  0CD1  00E8               	movwf	?___fttol+2
 12047  0CD2  3000               	movlw	0
 12048  0CD3  00E7               	movwf	?___fttol+1
 12049  0CD4  3000               	movlw	0
 12050  0CD5  00E6               	movwf	?___fttol
 12051  0CD6  0008               	return
 12052  0CD7                     l6433:	
 12053  0CD7  3001               	movlw	1
 12054  0CD8                     u6295:	
 12055  0CD8  0021               	movlb	1	; select bank1
 12056  0CD9  36A4               	lsrf	(___fttol@lval+3)^(0+128),f
 12057  0CDA  0CA3               	rrf	(___fttol@lval+2)^(0+128),f
 12058  0CDB  0CA2               	rrf	(___fttol@lval+1)^(0+128),f
 12059  0CDC  0CA1               	rrf	___fttol@lval^(0+128),f
 12060  0CDD  0B89               	decfsz	9,f
 12061  0CDE  2CD8               	goto	u6295
 12062  0CDF  3001               	movlw	1
 12063  0CE0  0020               	movlb	0	; select bank0
 12064  0CE1  00EA               	movwf	??___fttol
 12065  0CE2  086A               	movf	??___fttol,w
 12066  0CE3  0021               	movlb	1	; select bank1
 12067  0CE4  07A5               	addwf	___fttol@exp1^(0+128),f
 12068  0CE5  1903               	btfsc	3,2
 12069  0CE6  2D04               	goto	l6443
 12070  0CE7  2CD7               	goto	l6433
 12071  0CE8                     l6435:	
 12072  0CE8  3018               	movlw	24
 12073  0CE9  0225               	subwf	___fttol@exp1^(0+128),w
 12074  0CEA  1C03               	skipc
 12075  0CEB  2D00               	goto	l1633
 12076  0CEC  3000               	movlw	0
 12077  0CED  0020               	movlb	0	; select bank0
 12078  0CEE  00E9               	movwf	?___fttol+3
 12079  0CEF  3000               	movlw	0
 12080  0CF0  00E8               	movwf	?___fttol+2
 12081  0CF1  3000               	movlw	0
 12082  0CF2  00E7               	movwf	?___fttol+1
 12083  0CF3  3000               	movlw	0
 12084  0CF4  00E6               	movwf	?___fttol
 12085  0CF5  0008               	return
 12086  0CF6                     l6441:	
 12087  0CF6  3001               	movlw	1
 12088  0CF7                     u6325:	
 12089  0CF7  0021               	movlb	1	; select bank1
 12090  0CF8  35A1               	lslf	___fttol@lval^(0+128),f
 12091  0CF9  0DA2               	rlf	(___fttol@lval+1)^(0+128),f
 12092  0CFA  0DA3               	rlf	(___fttol@lval+2)^(0+128),f
 12093  0CFB  0DA4               	rlf	(___fttol@lval+3)^(0+128),f
 12094  0CFC  0B89               	decfsz	9,f
 12095  0CFD  2CF7               	goto	u6325
 12096  0CFE  3001               	movlw	1
 12097  0CFF  02A5               	subwf	___fttol@exp1^(0+128),f
 12098  0D00                     l1633:	
 12099  0D00  0021               	movlb	1	; select bank1
 12100  0D01  0825               	movf	___fttol@exp1^(0+128),w
 12101  0D02  1D03               	btfss	3,2
 12102  0D03  2CF6               	goto	l6441
 12103  0D04                     l6443:	
 12104  0D04  0820               	movf	___fttol@sign1^(0+128),w
 12105  0D05  1903               	btfsc	3,2
 12106  0D06  2D12               	goto	l6447
 12107  0D07  09A1               	comf	___fttol@lval^(0+128),f
 12108  0D08  09A2               	comf	(___fttol@lval+1)^(0+128),f
 12109  0D09  09A3               	comf	(___fttol@lval+2)^(0+128),f
 12110  0D0A  09A4               	comf	(___fttol@lval+3)^(0+128),f
 12111  0D0B  0AA1               	incf	___fttol@lval^(0+128),f
 12112  0D0C  1903               	skipnz
 12113  0D0D  0AA2               	incf	(___fttol@lval+1)^(0+128),f
 12114  0D0E  1903               	skipnz
 12115  0D0F  0AA3               	incf	(___fttol@lval+2)^(0+128),f
 12116  0D10  1903               	skipnz
 12117  0D11  0AA4               	incf	(___fttol@lval+3)^(0+128),f
 12118  0D12                     l6447:	
 12119  0D12  0824               	movf	(___fttol@lval+3)^(0+128),w
 12120  0D13  0020               	movlb	0	; select bank0
 12121  0D14  00E9               	movwf	?___fttol+3
 12122  0D15  0021               	movlb	1	; select bank1
 12123  0D16  0823               	movf	(___fttol@lval+2)^(0+128),w
 12124  0D17  0020               	movlb	0	; select bank0
 12125  0D18  00E8               	movwf	?___fttol+2
 12126  0D19  0021               	movlb	1	; select bank1
 12127  0D1A  0822               	movf	(___fttol@lval+1)^(0+128),w
 12128  0D1B  0020               	movlb	0	; select bank0
 12129  0D1C  00E7               	movwf	?___fttol+1
 12130  0D1D  0021               	movlb	1	; select bank1
 12131  0D1E  0821               	movf	___fttol@lval^(0+128),w
 12132  0D1F  0020               	movlb	0	; select bank0
 12133  0D20  00E6               	movwf	?___fttol
 12134  0D21  0008               	return
 12135  0D22                     __end_of___fttol:	
 12136                           
 12137                           	psect	text64
 12138  1321                     __ptext64:	
 12139 ;; *************** function ___ftneg *****************
 12140 ;; Defined at:
 12141 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\ftneg.c"
 12142 ;; Parameters:    Size  Location     Type
 12143 ;;  f1              3   33[BANK0 ] float 
 12144 ;; Auto vars:     Size  Location     Type
 12145 ;;		None
 12146 ;; Return value:  Size  Location     Type
 12147 ;;                  3   33[BANK0 ] float 
 12148 ;; Registers used:
 12149 ;;		wreg
 12150 ;; Tracked objects:
 12151 ;;		On entry : 0/0
 12152 ;;		On exit  : 0/0
 12153 ;;		Unchanged: 0/0
 12154 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12155 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12156 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12157 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12158 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12159 ;;Total ram usage:        3 bytes
 12160 ;; Hardware stack levels used:    1
 12161 ;; Hardware stack levels required when called:    4
 12162 ;; This function calls:
 12163 ;;		Nothing
 12164 ;; This function is called by:
 12165 ;;		_BMP_readTemperature
 12166 ;; This function uses a non-reentrant model
 12167 ;;
 12168                           
 12169                           
 12170                           ;psect for function ___ftneg
 12171  1321                     ___ftneg:	
 12172                           
 12173                           ;incstack = 0
 12174                           ; Regs used in ___ftneg: [wreg]
 12175  1321  0020               	movlb	0	; select bank0
 12176  1322  0843               	movf	___ftneg@f1+2,w
 12177  1323  0442               	iorwf	___ftneg@f1+1,w
 12178  1324  0441               	iorwf	___ftneg@f1,w
 12179  1325  1903               	skipnz
 12180  1326  0008               	return
 12181  1327  3080               	movlw	128
 12182  1328  06C3               	xorwf	___ftneg@f1+2,f
 12183  1329  0008               	return
 12184  132A                     __end_of___ftneg:	
 12185                           
 12186                           	psect	text65
 12187  0E70                     __ptext65:	
 12188 ;; *************** function ___ftmul *****************
 12189 ;; Defined at:
 12190 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\ftmul.c"
 12191 ;; Parameters:    Size  Location     Type
 12192 ;;  f1              3   54[BANK0 ] float 
 12193 ;;  f2              3   57[BANK0 ] float 
 12194 ;; Auto vars:     Size  Location     Type
 12195 ;;  f3_as_produc    3   65[BANK0 ] unsigned um
 12196 ;;  sign            1   69[BANK0 ] unsigned char 
 12197 ;;  cntr            1   68[BANK0 ] unsigned char 
 12198 ;;  exp             1   64[BANK0 ] unsigned char 
 12199 ;; Return value:  Size  Location     Type
 12200 ;;                  3   54[BANK0 ] float 
 12201 ;; Registers used:
 12202 ;;		wreg, status,2, status,0, pclath, cstack
 12203 ;; Tracked objects:
 12204 ;;		On entry : 0/0
 12205 ;;		On exit  : 0/0
 12206 ;;		Unchanged: 0/0
 12207 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12208 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12209 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12210 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12211 ;;      Totals:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12212 ;;Total ram usage:       16 bytes
 12213 ;; Hardware stack levels used:    1
 12214 ;; Hardware stack levels required when called:    5
 12215 ;; This function calls:
 12216 ;;		___ftpack
 12217 ;; This function is called by:
 12218 ;;		_BMP_readTemperature
 12219 ;;		_Wireless_packageData
 12220 ;;		_HMC5883L_GetCompassDirection
 12221 ;; This function uses a non-reentrant model
 12222 ;;
 12223                           
 12224                           
 12225                           ;psect for function ___ftmul
 12226  0E70                     ___ftmul:	
 12227                           
 12228                           ;incstack = 0
 12229                           ; Regs used in ___ftmul: [wreg+status,2+status,0+pclath+cstack]
 12230  0E70  0020               	movlb	0	; select bank0
 12231  0E71  0856               	movf	___ftmul@f1,w
 12232  0E72  00DC               	movwf	??___ftmul
 12233  0E73  0857               	movf	___ftmul@f1+1,w
 12234  0E74  00DD               	movwf	??___ftmul+1
 12235  0E75  0858               	movf	___ftmul@f1+2,w
 12236  0E76  00DE               	movwf	??___ftmul+2
 12237  0E77  1003               	clrc
 12238  0E78  0D5D               	rlf	??___ftmul+1,w
 12239  0E79  0D5E               	rlf	??___ftmul+2,w
 12240  0E7A  00DF               	movwf	??___ftmul+3
 12241  0E7B  085F               	movf	??___ftmul+3,w
 12242  0E7C  00E0               	movwf	___ftmul@exp
 12243  0E7D  0860               	movf	___ftmul@exp,w
 12244  0E7E  1D03               	btfss	3,2
 12245  0E7F  2E87               	goto	l6357
 12246  0E80  3000               	movlw	0
 12247  0E81  00D6               	movwf	?___ftmul
 12248  0E82  3000               	movlw	0
 12249  0E83  00D7               	movwf	?___ftmul+1
 12250  0E84  3000               	movlw	0
 12251  0E85  00D8               	movwf	?___ftmul+2
 12252  0E86  0008               	return
 12253  0E87                     l6357:	
 12254  0E87  0859               	movf	___ftmul@f2,w
 12255  0E88  00DC               	movwf	??___ftmul
 12256  0E89  085A               	movf	___ftmul@f2+1,w
 12257  0E8A  00DD               	movwf	??___ftmul+1
 12258  0E8B  085B               	movf	___ftmul@f2+2,w
 12259  0E8C  00DE               	movwf	??___ftmul+2
 12260  0E8D  1003               	clrc
 12261  0E8E  0D5D               	rlf	??___ftmul+1,w
 12262  0E8F  0D5E               	rlf	??___ftmul+2,w
 12263  0E90  00DF               	movwf	??___ftmul+3
 12264  0E91  085F               	movf	??___ftmul+3,w
 12265  0E92  00E5               	movwf	___ftmul@sign
 12266  0E93  0865               	movf	___ftmul@sign,w
 12267  0E94  1D03               	btfss	3,2
 12268  0E95  2E9D               	goto	l6363
 12269  0E96  3000               	movlw	0
 12270  0E97  00D6               	movwf	?___ftmul
 12271  0E98  3000               	movlw	0
 12272  0E99  00D7               	movwf	?___ftmul+1
 12273  0E9A  3000               	movlw	0
 12274  0E9B  00D8               	movwf	?___ftmul+2
 12275  0E9C  0008               	return
 12276  0E9D                     l6363:	
 12277  0E9D  0865               	movf	___ftmul@sign,w
 12278  0E9E  3E7B               	addlw	123
 12279  0E9F  00DC               	movwf	??___ftmul
 12280  0EA0  085C               	movf	??___ftmul,w
 12281  0EA1  07E0               	addwf	___ftmul@exp,f
 12282  0EA2  0856               	movf	___ftmul@f1,w
 12283  0EA3  00DC               	movwf	??___ftmul
 12284  0EA4  0857               	movf	___ftmul@f1+1,w
 12285  0EA5  00DD               	movwf	??___ftmul+1
 12286  0EA6  0858               	movf	___ftmul@f1+2,w
 12287  0EA7  00DE               	movwf	??___ftmul+2
 12288  0EA8  3010               	movlw	16
 12289  0EA9                     u6145:	
 12290  0EA9  36DE               	lsrf	??___ftmul+2,f
 12291  0EAA  0CDD               	rrf	??___ftmul+1,f
 12292  0EAB  0CDC               	rrf	??___ftmul,f
 12293  0EAC  0B89               	decfsz	9,f
 12294  0EAD  2EA9               	goto	u6145
 12295  0EAE  085C               	movf	??___ftmul,w
 12296  0EAF  00DF               	movwf	??___ftmul+3
 12297  0EB0  085F               	movf	??___ftmul+3,w
 12298  0EB1  00E5               	movwf	___ftmul@sign
 12299  0EB2  0859               	movf	___ftmul@f2,w
 12300  0EB3  00DC               	movwf	??___ftmul
 12301  0EB4  085A               	movf	___ftmul@f2+1,w
 12302  0EB5  00DD               	movwf	??___ftmul+1
 12303  0EB6  085B               	movf	___ftmul@f2+2,w
 12304  0EB7  00DE               	movwf	??___ftmul+2
 12305  0EB8  3010               	movlw	16
 12306  0EB9                     u6155:	
 12307  0EB9  36DE               	lsrf	??___ftmul+2,f
 12308  0EBA  0CDD               	rrf	??___ftmul+1,f
 12309  0EBB  0CDC               	rrf	??___ftmul,f
 12310  0EBC  0B89               	decfsz	9,f
 12311  0EBD  2EB9               	goto	u6155
 12312  0EBE  085C               	movf	??___ftmul,w
 12313  0EBF  00DF               	movwf	??___ftmul+3
 12314  0EC0  085F               	movf	??___ftmul+3,w
 12315  0EC1  06E5               	xorwf	___ftmul@sign,f
 12316  0EC2  3080               	movlw	128
 12317  0EC3  00DC               	movwf	??___ftmul
 12318  0EC4  085C               	movf	??___ftmul,w
 12319  0EC5  05E5               	andwf	___ftmul@sign,f
 12320  0EC6  17D7               	bsf	___ftmul@f1+1,7
 12321  0EC7  17DA               	bsf	___ftmul@f2+1,7
 12322  0EC8  30FF               	movlw	255
 12323  0EC9  05D9               	andwf	___ftmul@f2,f
 12324  0ECA  30FF               	movlw	255
 12325  0ECB  05DA               	andwf	___ftmul@f2+1,f
 12326  0ECC  3000               	movlw	0
 12327  0ECD  05DB               	andwf	___ftmul@f2+2,f
 12328  0ECE  3000               	movlw	0
 12329  0ECF  00E1               	movwf	___ftmul@f3_as_product
 12330  0ED0  3000               	movlw	0
 12331  0ED1  00E2               	movwf	___ftmul@f3_as_product+1
 12332  0ED2  3000               	movlw	0
 12333  0ED3  00E3               	movwf	___ftmul@f3_as_product+2
 12334  0ED4  3007               	movlw	7
 12335  0ED5  00DC               	movwf	??___ftmul
 12336  0ED6  085C               	movf	??___ftmul,w
 12337  0ED7  00E4               	movwf	___ftmul@cntr
 12338  0ED8                     l6375:	
 12339  0ED8  1C56               	btfss	___ftmul@f1,0
 12340  0ED9  2EE0               	goto	l6379
 12341  0EDA  0859               	movf	___ftmul@f2,w
 12342  0EDB  07E1               	addwf	___ftmul@f3_as_product,f
 12343  0EDC  085A               	movf	___ftmul@f2+1,w
 12344  0EDD  3DE2               	addwfc	___ftmul@f3_as_product+1,f
 12345  0EDE  085B               	movf	___ftmul@f2+2,w
 12346  0EDF  3DE3               	addwfc	___ftmul@f3_as_product+2,f
 12347  0EE0                     l6379:	
 12348  0EE0  3001               	movlw	1
 12349  0EE1                     u6175:	
 12350  0EE1  36D8               	lsrf	___ftmul@f1+2,f
 12351  0EE2  0CD7               	rrf	___ftmul@f1+1,f
 12352  0EE3  0CD6               	rrf	___ftmul@f1,f
 12353  0EE4  0B89               	decfsz	9,f
 12354  0EE5  2EE1               	goto	u6175
 12355  0EE6  3001               	movlw	1
 12356  0EE7                     u6185:	
 12357  0EE7  35D9               	lslf	___ftmul@f2,f
 12358  0EE8  0DDA               	rlf	___ftmul@f2+1,f
 12359  0EE9  0DDB               	rlf	___ftmul@f2+2,f
 12360  0EEA  0B89               	decfsz	9,f
 12361  0EEB  2EE7               	goto	u6185
 12362  0EEC  3001               	movlw	1
 12363  0EED  02E4               	subwf	___ftmul@cntr,f
 12364  0EEE  1D03               	btfss	3,2
 12365  0EEF  2ED8               	goto	l6375
 12366  0EF0  3009               	movlw	9
 12367  0EF1  00DC               	movwf	??___ftmul
 12368  0EF2  085C               	movf	??___ftmul,w
 12369  0EF3  00E4               	movwf	___ftmul@cntr
 12370  0EF4                     l6387:	
 12371  0EF4  1C56               	btfss	___ftmul@f1,0
 12372  0EF5  2EFC               	goto	l6391
 12373  0EF6  0859               	movf	___ftmul@f2,w
 12374  0EF7  07E1               	addwf	___ftmul@f3_as_product,f
 12375  0EF8  085A               	movf	___ftmul@f2+1,w
 12376  0EF9  3DE2               	addwfc	___ftmul@f3_as_product+1,f
 12377  0EFA  085B               	movf	___ftmul@f2+2,w
 12378  0EFB  3DE3               	addwfc	___ftmul@f3_as_product+2,f
 12379  0EFC                     l6391:	
 12380  0EFC  3001               	movlw	1
 12381  0EFD                     u6215:	
 12382  0EFD  36D8               	lsrf	___ftmul@f1+2,f
 12383  0EFE  0CD7               	rrf	___ftmul@f1+1,f
 12384  0EFF  0CD6               	rrf	___ftmul@f1,f
 12385  0F00  0B89               	decfsz	9,f
 12386  0F01  2EFD               	goto	u6215
 12387  0F02  3001               	movlw	1
 12388  0F03                     u6225:	
 12389  0F03  36E3               	lsrf	___ftmul@f3_as_product+2,f
 12390  0F04  0CE2               	rrf	___ftmul@f3_as_product+1,f
 12391  0F05  0CE1               	rrf	___ftmul@f3_as_product,f
 12392  0F06  0B89               	decfsz	9,f
 12393  0F07  2F03               	goto	u6225
 12394  0F08  3001               	movlw	1
 12395  0F09  02E4               	subwf	___ftmul@cntr,f
 12396  0F0A  1D03               	btfss	3,2
 12397  0F0B  2EF4               	goto	l6387
 12398  0F0C  0861               	movf	___ftmul@f3_as_product,w
 12399  0F0D  00A1               	movwf	___ftpack@arg
 12400  0F0E  0862               	movf	___ftmul@f3_as_product+1,w
 12401  0F0F  00A2               	movwf	___ftpack@arg+1
 12402  0F10  0863               	movf	___ftmul@f3_as_product+2,w
 12403  0F11  00A3               	movwf	___ftpack@arg+2
 12404  0F12  0860               	movf	___ftmul@exp,w
 12405  0F13  00DC               	movwf	??___ftmul
 12406  0F14  085C               	movf	??___ftmul,w
 12407  0F15  00A4               	movwf	___ftpack@exp
 12408  0F16  0865               	movf	___ftmul@sign,w
 12409  0F17  00DD               	movwf	??___ftmul+1
 12410  0F18  085D               	movf	??___ftmul+1,w
 12411  0F19  00A5               	movwf	___ftpack@sign
 12412  0F1A  318A  22AE         	fcall	___ftpack
 12413  0F1C  0020               	movlb	0	; select bank0
 12414  0F1D  0821               	movf	?___ftpack,w
 12415  0F1E  00D6               	movwf	?___ftmul
 12416  0F1F  0822               	movf	?___ftpack+1,w
 12417  0F20  00D7               	movwf	?___ftmul+1
 12418  0F21  0823               	movf	?___ftpack+2,w
 12419  0F22  00D8               	movwf	?___ftmul+2
 12420  0F23  0008               	return
 12421  0F24                     __end_of___ftmul:	
 12422                           
 12423                           	psect	text66
 12424  0DC7                     __ptext66:	
 12425 ;; *************** function ___ftdiv *****************
 12426 ;; Defined at:
 12427 ;;		line 56 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\ftdiv.c"
 12428 ;; Parameters:    Size  Location     Type
 12429 ;;  f2              3   17[BANK0 ] float 
 12430 ;;  f1              3   20[BANK0 ] float 
 12431 ;; Auto vars:     Size  Location     Type
 12432 ;;  f3              3   28[BANK0 ] float 
 12433 ;;  sign            1   32[BANK0 ] unsigned char 
 12434 ;;  exp             1   31[BANK0 ] unsigned char 
 12435 ;;  cntr            1   27[BANK0 ] unsigned char 
 12436 ;; Return value:  Size  Location     Type
 12437 ;;                  3   17[BANK0 ] float 
 12438 ;; Registers used:
 12439 ;;		wreg, status,2, status,0, pclath, cstack
 12440 ;; Tracked objects:
 12441 ;;		On entry : 0/0
 12442 ;;		On exit  : 0/0
 12443 ;;		Unchanged: 0/0
 12444 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12445 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12446 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12447 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12448 ;;      Totals:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12449 ;;Total ram usage:       16 bytes
 12450 ;; Hardware stack levels used:    1
 12451 ;; Hardware stack levels required when called:    5
 12452 ;; This function calls:
 12453 ;;		___ftpack
 12454 ;; This function is called by:
 12455 ;;		_Sensor_getSupplyVoltage
 12456 ;;		_BMP_readTemperature
 12457 ;;		_HMC5883L_GetCompassDirection
 12458 ;; This function uses a non-reentrant model
 12459 ;;
 12460                           
 12461                           
 12462                           ;psect for function ___ftdiv
 12463  0DC7                     ___ftdiv:	
 12464                           
 12465                           ;incstack = 0
 12466                           ; Regs used in ___ftdiv: [wreg+status,2+status,0+pclath+cstack]
 12467  0DC7  0020               	movlb	0	; select bank0
 12468  0DC8  0834               	movf	___ftdiv@f1,w
 12469  0DC9  00B7               	movwf	??___ftdiv
 12470  0DCA  0835               	movf	___ftdiv@f1+1,w
 12471  0DCB  00B8               	movwf	??___ftdiv+1
 12472  0DCC  0836               	movf	___ftdiv@f1+2,w
 12473  0DCD  00B9               	movwf	??___ftdiv+2
 12474  0DCE  1003               	clrc
 12475  0DCF  0D38               	rlf	??___ftdiv+1,w
 12476  0DD0  0D39               	rlf	??___ftdiv+2,w
 12477  0DD1  00BA               	movwf	??___ftdiv+3
 12478  0DD2  083A               	movf	??___ftdiv+3,w
 12479  0DD3  00BF               	movwf	___ftdiv@exp
 12480  0DD4  083F               	movf	___ftdiv@exp,w
 12481  0DD5  1D03               	btfss	3,2
 12482  0DD6  2DDE               	goto	l5895
 12483  0DD7  3000               	movlw	0
 12484  0DD8  00B1               	movwf	?___ftdiv
 12485  0DD9  3000               	movlw	0
 12486  0DDA  00B2               	movwf	?___ftdiv+1
 12487  0DDB  3000               	movlw	0
 12488  0DDC  00B3               	movwf	?___ftdiv+2
 12489  0DDD  0008               	return
 12490  0DDE                     l5895:	
 12491  0DDE  0831               	movf	___ftdiv@f2,w
 12492  0DDF  00B7               	movwf	??___ftdiv
 12493  0DE0  0832               	movf	___ftdiv@f2+1,w
 12494  0DE1  00B8               	movwf	??___ftdiv+1
 12495  0DE2  0833               	movf	___ftdiv@f2+2,w
 12496  0DE3  00B9               	movwf	??___ftdiv+2
 12497  0DE4  1003               	clrc
 12498  0DE5  0D38               	rlf	??___ftdiv+1,w
 12499  0DE6  0D39               	rlf	??___ftdiv+2,w
 12500  0DE7  00BA               	movwf	??___ftdiv+3
 12501  0DE8  083A               	movf	??___ftdiv+3,w
 12502  0DE9  00C0               	movwf	___ftdiv@sign
 12503  0DEA  0840               	movf	___ftdiv@sign,w
 12504  0DEB  1D03               	btfss	3,2
 12505  0DEC  2DF4               	goto	l5901
 12506  0DED  3000               	movlw	0
 12507  0DEE  00B1               	movwf	?___ftdiv
 12508  0DEF  3000               	movlw	0
 12509  0DF0  00B2               	movwf	?___ftdiv+1
 12510  0DF1  3000               	movlw	0
 12511  0DF2  00B3               	movwf	?___ftdiv+2
 12512  0DF3  0008               	return
 12513  0DF4                     l5901:	
 12514  0DF4  3000               	movlw	0
 12515  0DF5  00BC               	movwf	___ftdiv@f3
 12516  0DF6  3000               	movlw	0
 12517  0DF7  00BD               	movwf	___ftdiv@f3+1
 12518  0DF8  3000               	movlw	0
 12519  0DF9  00BE               	movwf	___ftdiv@f3+2
 12520  0DFA  3089               	movlw	137
 12521  0DFB  0740               	addwf	___ftdiv@sign,w
 12522  0DFC  00B7               	movwf	??___ftdiv
 12523  0DFD  0837               	movf	??___ftdiv,w
 12524  0DFE  02BF               	subwf	___ftdiv@exp,f
 12525  0DFF  0834               	movf	___ftdiv@f1,w
 12526  0E00  00B7               	movwf	??___ftdiv
 12527  0E01  0835               	movf	___ftdiv@f1+1,w
 12528  0E02  00B8               	movwf	??___ftdiv+1
 12529  0E03  0836               	movf	___ftdiv@f1+2,w
 12530  0E04  00B9               	movwf	??___ftdiv+2
 12531  0E05  3010               	movlw	16
 12532  0E06                     u5385:	
 12533  0E06  36B9               	lsrf	??___ftdiv+2,f
 12534  0E07  0CB8               	rrf	??___ftdiv+1,f
 12535  0E08  0CB7               	rrf	??___ftdiv,f
 12536  0E09  0B89               	decfsz	9,f
 12537  0E0A  2E06               	goto	u5385
 12538  0E0B  0837               	movf	??___ftdiv,w
 12539  0E0C  00BA               	movwf	??___ftdiv+3
 12540  0E0D  083A               	movf	??___ftdiv+3,w
 12541  0E0E  00C0               	movwf	___ftdiv@sign
 12542  0E0F  0831               	movf	___ftdiv@f2,w
 12543  0E10  00B7               	movwf	??___ftdiv
 12544  0E11  0832               	movf	___ftdiv@f2+1,w
 12545  0E12  00B8               	movwf	??___ftdiv+1
 12546  0E13  0833               	movf	___ftdiv@f2+2,w
 12547  0E14  00B9               	movwf	??___ftdiv+2
 12548  0E15  3010               	movlw	16
 12549  0E16                     u5395:	
 12550  0E16  36B9               	lsrf	??___ftdiv+2,f
 12551  0E17  0CB8               	rrf	??___ftdiv+1,f
 12552  0E18  0CB7               	rrf	??___ftdiv,f
 12553  0E19  0B89               	decfsz	9,f
 12554  0E1A  2E16               	goto	u5395
 12555  0E1B  0837               	movf	??___ftdiv,w
 12556  0E1C  00BA               	movwf	??___ftdiv+3
 12557  0E1D  083A               	movf	??___ftdiv+3,w
 12558  0E1E  06C0               	xorwf	___ftdiv@sign,f
 12559  0E1F  3080               	movlw	128
 12560  0E20  00B7               	movwf	??___ftdiv
 12561  0E21  0837               	movf	??___ftdiv,w
 12562  0E22  05C0               	andwf	___ftdiv@sign,f
 12563  0E23  17B5               	bsf	___ftdiv@f1+1,7
 12564  0E24  30FF               	movlw	255
 12565  0E25  05B4               	andwf	___ftdiv@f1,f
 12566  0E26  30FF               	movlw	255
 12567  0E27  05B5               	andwf	___ftdiv@f1+1,f
 12568  0E28  3000               	movlw	0
 12569  0E29  05B6               	andwf	___ftdiv@f1+2,f
 12570  0E2A  17B2               	bsf	___ftdiv@f2+1,7
 12571  0E2B  30FF               	movlw	255
 12572  0E2C  05B1               	andwf	___ftdiv@f2,f
 12573  0E2D  30FF               	movlw	255
 12574  0E2E  05B2               	andwf	___ftdiv@f2+1,f
 12575  0E2F  3000               	movlw	0
 12576  0E30  05B3               	andwf	___ftdiv@f2+2,f
 12577  0E31  3018               	movlw	24
 12578  0E32  00B7               	movwf	??___ftdiv
 12579  0E33  0837               	movf	??___ftdiv,w
 12580  0E34  00BB               	movwf	___ftdiv@cntr
 12581  0E35                     l5915:	
 12582  0E35  3001               	movlw	1
 12583  0E36                     u5405:	
 12584  0E36  35BC               	lslf	___ftdiv@f3,f
 12585  0E37  0DBD               	rlf	___ftdiv@f3+1,f
 12586  0E38  0DBE               	rlf	___ftdiv@f3+2,f
 12587  0E39  0B89               	decfsz	9,f
 12588  0E3A  2E36               	goto	u5405
 12589  0E3B  0833               	movf	___ftdiv@f2+2,w
 12590  0E3C  0236               	subwf	___ftdiv@f1+2,w
 12591  0E3D  1D03               	skipz
 12592  0E3E  2E45               	goto	u5415
 12593  0E3F  0832               	movf	___ftdiv@f2+1,w
 12594  0E40  0235               	subwf	___ftdiv@f1+1,w
 12595  0E41  1D03               	skipz
 12596  0E42  2E45               	goto	u5415
 12597  0E43  0831               	movf	___ftdiv@f2,w
 12598  0E44  0234               	subwf	___ftdiv@f1,w
 12599  0E45                     u5415:	
 12600  0E45  1C03               	skipc
 12601  0E46  2E4E               	goto	l5923
 12602  0E47  0831               	movf	___ftdiv@f2,w
 12603  0E48  02B4               	subwf	___ftdiv@f1,f
 12604  0E49  0832               	movf	___ftdiv@f2+1,w
 12605  0E4A  3BB5               	subwfb	___ftdiv@f1+1,f
 12606  0E4B  0833               	movf	___ftdiv@f2+2,w
 12607  0E4C  3BB6               	subwfb	___ftdiv@f1+2,f
 12608  0E4D  143C               	bsf	___ftdiv@f3,0
 12609  0E4E                     l5923:	
 12610  0E4E  3001               	movlw	1
 12611  0E4F                     u5425:	
 12612  0E4F  35B4               	lslf	___ftdiv@f1,f
 12613  0E50  0DB5               	rlf	___ftdiv@f1+1,f
 12614  0E51  0DB6               	rlf	___ftdiv@f1+2,f
 12615  0E52  0B89               	decfsz	9,f
 12616  0E53  2E4F               	goto	u5425
 12617  0E54  3001               	movlw	1
 12618  0E55  02BB               	subwf	___ftdiv@cntr,f
 12619  0E56  1D03               	btfss	3,2
 12620  0E57  2E35               	goto	l5915
 12621  0E58  083C               	movf	___ftdiv@f3,w
 12622  0E59  00A1               	movwf	___ftpack@arg
 12623  0E5A  083D               	movf	___ftdiv@f3+1,w
 12624  0E5B  00A2               	movwf	___ftpack@arg+1
 12625  0E5C  083E               	movf	___ftdiv@f3+2,w
 12626  0E5D  00A3               	movwf	___ftpack@arg+2
 12627  0E5E  083F               	movf	___ftdiv@exp,w
 12628  0E5F  00B7               	movwf	??___ftdiv
 12629  0E60  0837               	movf	??___ftdiv,w
 12630  0E61  00A4               	movwf	___ftpack@exp
 12631  0E62  0840               	movf	___ftdiv@sign,w
 12632  0E63  00B8               	movwf	??___ftdiv+1
 12633  0E64  0838               	movf	??___ftdiv+1,w
 12634  0E65  00A5               	movwf	___ftpack@sign
 12635  0E66  318A  22AE         	fcall	___ftpack
 12636  0E68  0020               	movlb	0	; select bank0
 12637  0E69  0821               	movf	?___ftpack,w
 12638  0E6A  00B1               	movwf	?___ftdiv
 12639  0E6B  0822               	movf	?___ftpack+1,w
 12640  0E6C  00B2               	movwf	?___ftdiv+1
 12641  0E6D  0823               	movf	?___ftpack+2,w
 12642  0E6E  00B3               	movwf	?___ftdiv+2
 12643  0E6F  0008               	return
 12644  0E70                     __end_of___ftdiv:	
 12645                           
 12646                           	psect	text67
 12647  068D                     __ptext67:	
 12648 ;; *************** function ___ftadd *****************
 12649 ;; Defined at:
 12650 ;;		line 86 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\ftadd.c"
 12651 ;; Parameters:    Size  Location     Type
 12652 ;;  f1              3   41[BANK0 ] float 
 12653 ;;  f2              3   44[BANK0 ] float 
 12654 ;; Auto vars:     Size  Location     Type
 12655 ;;  exp1            1   53[BANK0 ] unsigned char 
 12656 ;;  exp2            1   52[BANK0 ] unsigned char 
 12657 ;;  sign            1   51[BANK0 ] unsigned char 
 12658 ;; Return value:  Size  Location     Type
 12659 ;;                  3   41[BANK0 ] float 
 12660 ;; Registers used:
 12661 ;;		wreg, status,2, status,0, pclath, cstack
 12662 ;; Tracked objects:
 12663 ;;		On entry : 0/0
 12664 ;;		On exit  : 0/0
 12665 ;;		Unchanged: 0/0
 12666 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12667 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12668 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12669 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12670 ;;      Totals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12671 ;;Total ram usage:       13 bytes
 12672 ;; Hardware stack levels used:    1
 12673 ;; Hardware stack levels required when called:    5
 12674 ;; This function calls:
 12675 ;;		___ftpack
 12676 ;; This function is called by:
 12677 ;;		_BMP_readTemperature
 12678 ;;		_Wireless_packageData
 12679 ;;		_HMC5883L_GetCompassDirection
 12680 ;; This function uses a non-reentrant model
 12681 ;;
 12682                           
 12683                           
 12684                           ;psect for function ___ftadd
 12685  068D                     ___ftadd:	
 12686                           
 12687                           ;incstack = 0
 12688                           ; Regs used in ___ftadd: [wreg+status,2+status,0+pclath+cstack]
 12689  068D  0020               	movlb	0	; select bank0
 12690  068E  0849               	movf	___ftadd@f1,w
 12691  068F  00CF               	movwf	??___ftadd
 12692  0690  084A               	movf	___ftadd@f1+1,w
 12693  0691  00D0               	movwf	??___ftadd+1
 12694  0692  084B               	movf	___ftadd@f1+2,w
 12695  0693  00D1               	movwf	??___ftadd+2
 12696  0694  1003               	clrc
 12697  0695  0D50               	rlf	??___ftadd+1,w
 12698  0696  0D51               	rlf	??___ftadd+2,w
 12699  0697  00D2               	movwf	??___ftadd+3
 12700  0698  0852               	movf	??___ftadd+3,w
 12701  0699  00D5               	movwf	___ftadd@exp1
 12702  069A  084C               	movf	___ftadd@f2,w
 12703  069B  00CF               	movwf	??___ftadd
 12704  069C  084D               	movf	___ftadd@f2+1,w
 12705  069D  00D0               	movwf	??___ftadd+1
 12706  069E  084E               	movf	___ftadd@f2+2,w
 12707  069F  00D1               	movwf	??___ftadd+2
 12708  06A0  1003               	clrc
 12709  06A1  0D50               	rlf	??___ftadd+1,w
 12710  06A2  0D51               	rlf	??___ftadd+2,w
 12711  06A3  00D2               	movwf	??___ftadd+3
 12712  06A4  0852               	movf	??___ftadd+3,w
 12713  06A5  00D4               	movwf	___ftadd@exp2
 12714  06A6  0855               	movf	___ftadd@exp1,w
 12715  06A7  1903               	btfsc	3,2
 12716  06A8  2EB5               	goto	l6287
 12717  06A9  0854               	movf	___ftadd@exp2,w
 12718  06AA  0255               	subwf	___ftadd@exp1,w
 12719  06AB  1803               	skipnc
 12720  06AC  2EBC               	goto	l6291
 12721  06AD  0355               	decf	___ftadd@exp1,w
 12722  06AE  3AFF               	xorlw	255
 12723  06AF  0754               	addwf	___ftadd@exp2,w
 12724  06B0  00CF               	movwf	??___ftadd
 12725  06B1  3019               	movlw	25
 12726  06B2  024F               	subwf	??___ftadd,w
 12727  06B3  1C03               	skipc
 12728  06B4  2EBC               	goto	l6291
 12729  06B5                     l6287:	
 12730  06B5  084C               	movf	___ftadd@f2,w
 12731  06B6  00C9               	movwf	?___ftadd
 12732  06B7  084D               	movf	___ftadd@f2+1,w
 12733  06B8  00CA               	movwf	?___ftadd+1
 12734  06B9  084E               	movf	___ftadd@f2+2,w
 12735  06BA  00CB               	movwf	?___ftadd+2
 12736  06BB  0008               	return
 12737  06BC                     l6291:	
 12738  06BC  0854               	movf	___ftadd@exp2,w
 12739  06BD  1903               	btfsc	3,2
 12740  06BE  0008               	return
 12741  06BF  0855               	movf	___ftadd@exp1,w
 12742  06C0  0254               	subwf	___ftadd@exp2,w
 12743  06C1  1803               	skipnc
 12744  06C2  2ECB               	goto	l6297
 12745  06C3  0354               	decf	___ftadd@exp2,w
 12746  06C4  3AFF               	xorlw	255
 12747  06C5  0755               	addwf	___ftadd@exp1,w
 12748  06C6  00CF               	movwf	??___ftadd
 12749  06C7  3019               	movlw	25
 12750  06C8  024F               	subwf	??___ftadd,w
 12751  06C9  1803               	btfsc	3,0
 12752  06CA  0008               	return
 12753  06CB                     l6297:	
 12754  06CB  3006               	movlw	6
 12755  06CC  00CF               	movwf	??___ftadd
 12756  06CD  084F               	movf	??___ftadd,w
 12757  06CE  00D3               	movwf	___ftadd@sign
 12758  06CF  1BCB               	btfsc	___ftadd@f1+2,7
 12759  06D0  17D3               	bsf	___ftadd@sign,7
 12760  06D1  1BCE               	btfsc	___ftadd@f2+2,7
 12761  06D2  1753               	bsf	___ftadd@sign,6
 12762  06D3  17CA               	bsf	___ftadd@f1+1,7
 12763  06D4  30FF               	movlw	255
 12764  06D5  05C9               	andwf	___ftadd@f1,f
 12765  06D6  30FF               	movlw	255
 12766  06D7  05CA               	andwf	___ftadd@f1+1,f
 12767  06D8  3000               	movlw	0
 12768  06D9  05CB               	andwf	___ftadd@f1+2,f
 12769  06DA  17CD               	bsf	___ftadd@f2+1,7
 12770  06DB  30FF               	movlw	255
 12771  06DC  05CC               	andwf	___ftadd@f2,f
 12772  06DD  30FF               	movlw	255
 12773  06DE  05CD               	andwf	___ftadd@f2+1,f
 12774  06DF  3000               	movlw	0
 12775  06E0  05CE               	andwf	___ftadd@f2+2,f
 12776  06E1  0854               	movf	___ftadd@exp2,w
 12777  06E2  0255               	subwf	___ftadd@exp1,w
 12778  06E3  1803               	skipnc
 12779  06E4  2F07               	goto	l6319
 12780  06E5                     l6309:	
 12781  06E5  3001               	movlw	1
 12782  06E6                     u5985:	
 12783  06E6  35CC               	lslf	___ftadd@f2,f
 12784  06E7  0DCD               	rlf	___ftadd@f2+1,f
 12785  06E8  0DCE               	rlf	___ftadd@f2+2,f
 12786  06E9  0B89               	decfsz	9,f
 12787  06EA  2EE6               	goto	u5985
 12788  06EB  3001               	movlw	1
 12789  06EC  02D4               	subwf	___ftadd@exp2,f
 12790  06ED  0854               	movf	___ftadd@exp2,w
 12791  06EE  0655               	xorwf	___ftadd@exp1,w
 12792  06EF  1903               	skipnz
 12793  06F0  2F02               	goto	l6317
 12794  06F1  3001               	movlw	1
 12795  06F2  02D3               	subwf	___ftadd@sign,f
 12796  06F3  0853               	movf	___ftadd@sign,w
 12797  06F4  3907               	andlw	7
 12798  06F5  1903               	btfsc	3,2
 12799  06F6  2F02               	goto	l6317
 12800  06F7  2EE5               	goto	l6309
 12801  06F8                     l6315:	
 12802  06F8  3001               	movlw	1
 12803  06F9                     u6015:	
 12804  06F9  36CB               	lsrf	___ftadd@f1+2,f
 12805  06FA  0CCA               	rrf	___ftadd@f1+1,f
 12806  06FB  0CC9               	rrf	___ftadd@f1,f
 12807  06FC  0B89               	decfsz	9,f
 12808  06FD  2EF9               	goto	u6015
 12809  06FE  3001               	movlw	1
 12810  06FF  00CF               	movwf	??___ftadd
 12811  0700  084F               	movf	??___ftadd,w
 12812  0701  07D5               	addwf	___ftadd@exp1,f
 12813  0702                     l6317:	
 12814  0702  0855               	movf	___ftadd@exp1,w
 12815  0703  0654               	xorwf	___ftadd@exp2,w
 12816  0704  1903               	btfsc	3,2
 12817  0705  2F2C               	goto	l1573
 12818  0706  2EF8               	goto	l6315
 12819  0707                     l6319:	
 12820  0707  0855               	movf	___ftadd@exp1,w
 12821  0708  0254               	subwf	___ftadd@exp2,w
 12822  0709  1803               	skipnc
 12823  070A  2F2C               	goto	l1573
 12824  070B                     l6321:	
 12825  070B  3001               	movlw	1
 12826  070C                     u6045:	
 12827  070C  35C9               	lslf	___ftadd@f1,f
 12828  070D  0DCA               	rlf	___ftadd@f1+1,f
 12829  070E  0DCB               	rlf	___ftadd@f1+2,f
 12830  070F  0B89               	decfsz	9,f
 12831  0710  2F0C               	goto	u6045
 12832  0711  3001               	movlw	1
 12833  0712  02D5               	subwf	___ftadd@exp1,f
 12834  0713  0854               	movf	___ftadd@exp2,w
 12835  0714  0655               	xorwf	___ftadd@exp1,w
 12836  0715  1903               	skipnz
 12837  0716  2F28               	goto	l6329
 12838  0717  3001               	movlw	1
 12839  0718  02D3               	subwf	___ftadd@sign,f
 12840  0719  0853               	movf	___ftadd@sign,w
 12841  071A  3907               	andlw	7
 12842  071B  1903               	btfsc	3,2
 12843  071C  2F28               	goto	l6329
 12844  071D  2F0B               	goto	l6321
 12845  071E                     l6327:	
 12846  071E  3001               	movlw	1
 12847  071F                     u6075:	
 12848  071F  36CE               	lsrf	___ftadd@f2+2,f
 12849  0720  0CCD               	rrf	___ftadd@f2+1,f
 12850  0721  0CCC               	rrf	___ftadd@f2,f
 12851  0722  0B89               	decfsz	9,f
 12852  0723  2F1F               	goto	u6075
 12853  0724  3001               	movlw	1
 12854  0725  00CF               	movwf	??___ftadd
 12855  0726  084F               	movf	??___ftadd,w
 12856  0727  07D4               	addwf	___ftadd@exp2,f
 12857  0728                     l6329:	
 12858  0728  0855               	movf	___ftadd@exp1,w
 12859  0729  0654               	xorwf	___ftadd@exp2,w
 12860  072A  1D03               	skipz
 12861  072B  2F1E               	goto	l6327
 12862  072C                     l1573:	
 12863  072C  1FD3               	btfss	___ftadd@sign,7
 12864  072D  2F3E               	goto	l6333
 12865  072E  30FF               	movlw	255
 12866  072F  06C9               	xorwf	___ftadd@f1,f
 12867  0730  30FF               	movlw	255
 12868  0731  06CA               	xorwf	___ftadd@f1+1,f
 12869  0732  30FF               	movlw	255
 12870  0733  06CB               	xorwf	___ftadd@f1+2,f
 12871  0734  3001               	movlw	1
 12872  0735  07C9               	addwf	___ftadd@f1,f
 12873  0736  3000               	movlw	0
 12874  0737  1803               	skipnc
 12875  0738  3001               	movlw	1
 12876  0739  07CA               	addwf	___ftadd@f1+1,f
 12877  073A  3000               	movlw	0
 12878  073B  1803               	skipnc
 12879  073C  3001               	movlw	1
 12880  073D  07CB               	addwf	___ftadd@f1+2,f
 12881  073E                     l6333:	
 12882  073E  1F53               	btfss	___ftadd@sign,6
 12883  073F  2F50               	goto	l6337
 12884  0740  30FF               	movlw	255
 12885  0741  06CC               	xorwf	___ftadd@f2,f
 12886  0742  30FF               	movlw	255
 12887  0743  06CD               	xorwf	___ftadd@f2+1,f
 12888  0744  30FF               	movlw	255
 12889  0745  06CE               	xorwf	___ftadd@f2+2,f
 12890  0746  3001               	movlw	1
 12891  0747  07CC               	addwf	___ftadd@f2,f
 12892  0748  3000               	movlw	0
 12893  0749  1803               	skipnc
 12894  074A  3001               	movlw	1
 12895  074B  07CD               	addwf	___ftadd@f2+1,f
 12896  074C  3000               	movlw	0
 12897  074D  1803               	skipnc
 12898  074E  3001               	movlw	1
 12899  074F  07CE               	addwf	___ftadd@f2+2,f
 12900  0750                     l6337:	
 12901  0750  01D3               	clrf	___ftadd@sign
 12902  0751  0849               	movf	___ftadd@f1,w
 12903  0752  07CC               	addwf	___ftadd@f2,f
 12904  0753  084A               	movf	___ftadd@f1+1,w
 12905  0754  3DCD               	addwfc	___ftadd@f2+1,f
 12906  0755  084B               	movf	___ftadd@f1+2,w
 12907  0756  3DCE               	addwfc	___ftadd@f2+2,f
 12908  0757  1FCE               	btfss	___ftadd@f2+2,7
 12909  0758  2F6B               	goto	l6347
 12910  0759  30FF               	movlw	255
 12911  075A  06CC               	xorwf	___ftadd@f2,f
 12912  075B  30FF               	movlw	255
 12913  075C  06CD               	xorwf	___ftadd@f2+1,f
 12914  075D  30FF               	movlw	255
 12915  075E  06CE               	xorwf	___ftadd@f2+2,f
 12916  075F  3001               	movlw	1
 12917  0760  07CC               	addwf	___ftadd@f2,f
 12918  0761  3000               	movlw	0
 12919  0762  1803               	skipnc
 12920  0763  3001               	movlw	1
 12921  0764  07CD               	addwf	___ftadd@f2+1,f
 12922  0765  3000               	movlw	0
 12923  0766  1803               	skipnc
 12924  0767  3001               	movlw	1
 12925  0768  07CE               	addwf	___ftadd@f2+2,f
 12926  0769  01D3               	clrf	___ftadd@sign
 12927  076A  0AD3               	incf	___ftadd@sign,f
 12928  076B                     l6347:	
 12929  076B  084C               	movf	___ftadd@f2,w
 12930  076C  00A1               	movwf	___ftpack@arg
 12931  076D  084D               	movf	___ftadd@f2+1,w
 12932  076E  00A2               	movwf	___ftpack@arg+1
 12933  076F  084E               	movf	___ftadd@f2+2,w
 12934  0770  00A3               	movwf	___ftpack@arg+2
 12935  0771  0855               	movf	___ftadd@exp1,w
 12936  0772  00CF               	movwf	??___ftadd
 12937  0773  084F               	movf	??___ftadd,w
 12938  0774  00A4               	movwf	___ftpack@exp
 12939  0775  0853               	movf	___ftadd@sign,w
 12940  0776  00D0               	movwf	??___ftadd+1
 12941  0777  0850               	movf	??___ftadd+1,w
 12942  0778  00A5               	movwf	___ftpack@sign
 12943  0779  318A  22AE         	fcall	___ftpack
 12944  077B  0020               	movlb	0	; select bank0
 12945  077C  0821               	movf	?___ftpack,w
 12946  077D  00C9               	movwf	?___ftadd
 12947  077E  0822               	movf	?___ftpack+1,w
 12948  077F  00CA               	movwf	?___ftadd+1
 12949  0780  0823               	movf	?___ftpack+2,w
 12950  0781  00CB               	movwf	?___ftadd+2
 12951  0782  0008               	return
 12952  0783                     __end_of___ftadd:	
 12953                           
 12954                           	psect	text68
 12955  165D                     __ptext68:	
 12956 ;; *************** function ___awtoft *****************
 12957 ;; Defined at:
 12958 ;;		line 32 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\awtoft.c"
 12959 ;; Parameters:    Size  Location     Type
 12960 ;;  c               2    9[BANK0 ] int 
 12961 ;; Auto vars:     Size  Location     Type
 12962 ;;  sign            1   14[BANK0 ] unsigned char 
 12963 ;; Return value:  Size  Location     Type
 12964 ;;                  3    9[BANK0 ] float 
 12965 ;; Registers used:
 12966 ;;		wreg, status,2, status,0, pclath, cstack
 12967 ;; Tracked objects:
 12968 ;;		On entry : 0/0
 12969 ;;		On exit  : 0/0
 12970 ;;		Unchanged: 0/0
 12971 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12972 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12973 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12974 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12975 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12976 ;;Total ram usage:        6 bytes
 12977 ;; Hardware stack levels used:    1
 12978 ;; Hardware stack levels required when called:    5
 12979 ;; This function calls:
 12980 ;;		___ftpack
 12981 ;; This function is called by:
 12982 ;;		_BMP_readTemperature
 12983 ;;		_HMC5883L_GetCompassDirection
 12984 ;; This function uses a non-reentrant model
 12985 ;;
 12986                           
 12987                           
 12988                           ;psect for function ___awtoft
 12989  165D                     ___awtoft:	
 12990                           
 12991                           ;incstack = 0
 12992                           ; Regs used in ___awtoft: [wreg+status,2+status,0+pclath+cstack]
 12993  165D  0020               	movlb	0	; select bank0
 12994  165E  01AE               	clrf	___awtoft@sign
 12995  165F  1FAA               	btfss	___awtoft@c+1,7
 12996  1660  2E68               	goto	l6277
 12997  1661  09A9               	comf	___awtoft@c,f
 12998  1662  09AA               	comf	___awtoft@c+1,f
 12999  1663  0AA9               	incf	___awtoft@c,f
 13000  1664  1903               	skipnz
 13001  1665  0AAA               	incf	___awtoft@c+1,f
 13002  1666  01AE               	clrf	___awtoft@sign
 13003  1667  0AAE               	incf	___awtoft@sign,f
 13004  1668                     l6277:	
 13005  1668  0829               	movf	___awtoft@c,w
 13006  1669  00A1               	movwf	___ftpack@arg
 13007  166A  082A               	movf	___awtoft@c+1,w
 13008  166B  00A2               	movwf	___ftpack@arg+1
 13009  166C  01A3               	clrf	___ftpack@arg+2
 13010  166D  308E               	movlw	142
 13011  166E  00AC               	movwf	??___awtoft
 13012  166F  082C               	movf	??___awtoft,w
 13013  1670  00A4               	movwf	___ftpack@exp
 13014  1671  082E               	movf	___awtoft@sign,w
 13015  1672  00AD               	movwf	??___awtoft+1
 13016  1673  082D               	movf	??___awtoft+1,w
 13017  1674  00A5               	movwf	___ftpack@sign
 13018  1675  318A  22AE         	fcall	___ftpack
 13019  1677  0020               	movlb	0	; select bank0
 13020  1678  0821               	movf	?___ftpack,w
 13021  1679  00A9               	movwf	?___awtoft
 13022  167A  0822               	movf	?___ftpack+1,w
 13023  167B  00AA               	movwf	?___awtoft+1
 13024  167C  0823               	movf	?___ftpack+2,w
 13025  167D  00AB               	movwf	?___awtoft+2
 13026  167E  0008               	return
 13027  167F                     __end_of___awtoft:	
 13028                           
 13029                           	psect	text69
 13030  0835                     __ptext69:	
 13031 ;; *************** function ___altoft *****************
 13032 ;; Defined at:
 13033 ;;		line 42 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\altoft.c"
 13034 ;; Parameters:    Size  Location     Type
 13035 ;;  c               4    9[BANK0 ] long 
 13036 ;; Auto vars:     Size  Location     Type
 13037 ;;  sign            1   16[BANK0 ] unsigned char 
 13038 ;;  exp             1   15[BANK0 ] unsigned char 
 13039 ;; Return value:  Size  Location     Type
 13040 ;;                  3    9[BANK0 ] float 
 13041 ;; Registers used:
 13042 ;;		wreg, status,2, status,0, pclath, cstack
 13043 ;; Tracked objects:
 13044 ;;		On entry : 0/0
 13045 ;;		On exit  : 0/0
 13046 ;;		Unchanged: 0/0
 13047 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13048 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13049 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13050 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13051 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13052 ;;Total ram usage:        8 bytes
 13053 ;; Hardware stack levels used:    1
 13054 ;; Hardware stack levels required when called:    5
 13055 ;; This function calls:
 13056 ;;		___ftpack
 13057 ;; This function is called by:
 13058 ;;		_BMP_readTemperature
 13059 ;; This function uses a non-reentrant model
 13060 ;;
 13061                           
 13062                           
 13063                           ;psect for function ___altoft
 13064  0835                     ___altoft:	
 13065                           
 13066                           ;incstack = 0
 13067                           ; Regs used in ___altoft: [wreg+status,2+status,0+pclath+cstack]
 13068  0835  0020               	movlb	0	; select bank0
 13069  0836  01B0               	clrf	___altoft@sign
 13070  0837  308E               	movlw	142
 13071  0838  00AD               	movwf	??___altoft
 13072  0839  082D               	movf	??___altoft,w
 13073  083A  00AF               	movwf	___altoft@exp
 13074  083B  1FAC               	btfss	___altoft@c+3,7
 13075  083C  284A               	goto	l6263
 13076  083D  09A9               	comf	___altoft@c,f
 13077  083E  09AA               	comf	___altoft@c+1,f
 13078  083F  09AB               	comf	___altoft@c+2,f
 13079  0840  09AC               	comf	___altoft@c+3,f
 13080  0841  0AA9               	incf	___altoft@c,f
 13081  0842  1903               	skipnz
 13082  0843  0AAA               	incf	___altoft@c+1,f
 13083  0844  1903               	skipnz
 13084  0845  0AAB               	incf	___altoft@c+2,f
 13085  0846  1903               	skipnz
 13086  0847  0AAC               	incf	___altoft@c+3,f
 13087  0848  01B0               	clrf	___altoft@sign
 13088  0849  0AB0               	incf	___altoft@sign,f
 13089  084A                     l6263:	
 13090  084A  30FF               	movlw	255
 13091  084B  052C               	andwf	___altoft@c+3,w
 13092  084C  1903               	btfsc	3,2
 13093  084D  285A               	goto	l6265
 13094  084E  3001               	movlw	1
 13095  084F                     u5865:	
 13096  084F  36AC               	lsrf	___altoft@c+3,f
 13097  0850  0CAB               	rrf	___altoft@c+2,f
 13098  0851  0CAA               	rrf	___altoft@c+1,f
 13099  0852  0CA9               	rrf	___altoft@c,f
 13100  0853  0B89               	decfsz	9,f
 13101  0854  284F               	goto	u5865
 13102  0855  3001               	movlw	1
 13103  0856  00AD               	movwf	??___altoft
 13104  0857  082D               	movf	??___altoft,w
 13105  0858  07AF               	addwf	___altoft@exp,f
 13106  0859  284A               	goto	l6263
 13107  085A                     l6265:	
 13108  085A  0829               	movf	___altoft@c,w
 13109  085B  00A1               	movwf	___ftpack@arg
 13110  085C  082A               	movf	___altoft@c+1,w
 13111  085D  00A2               	movwf	___ftpack@arg+1
 13112  085E  082B               	movf	___altoft@c+2,w
 13113  085F  00A3               	movwf	___ftpack@arg+2
 13114  0860  082F               	movf	___altoft@exp,w
 13115  0861  00AD               	movwf	??___altoft
 13116  0862  082D               	movf	??___altoft,w
 13117  0863  00A4               	movwf	___ftpack@exp
 13118  0864  0830               	movf	___altoft@sign,w
 13119  0865  00AE               	movwf	??___altoft+1
 13120  0866  082E               	movf	??___altoft+1,w
 13121  0867  00A5               	movwf	___ftpack@sign
 13122  0868  318A  22AE         	fcall	___ftpack
 13123  086A  0020               	movlb	0	; select bank0
 13124  086B  0821               	movf	?___ftpack,w
 13125  086C  00A9               	movwf	?___altoft
 13126  086D  0822               	movf	?___ftpack+1,w
 13127  086E  00AA               	movwf	?___altoft+1
 13128  086F  0823               	movf	?___ftpack+2,w
 13129  0870  00AB               	movwf	?___altoft+2
 13130  0871  0008               	return
 13131  0872                     __end_of___altoft:	
 13132                           
 13133                           	psect	text70
 13134  0AAE                     __ptext70:	
 13135 ;; *************** function ___ftpack *****************
 13136 ;; Defined at:
 13137 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\float.c"
 13138 ;; Parameters:    Size  Location     Type
 13139 ;;  arg             3    1[BANK0 ] unsigned um
 13140 ;;  exp             1    4[BANK0 ] unsigned char 
 13141 ;;  sign            1    5[BANK0 ] unsigned char 
 13142 ;; Auto vars:     Size  Location     Type
 13143 ;;		None
 13144 ;; Return value:  Size  Location     Type
 13145 ;;                  3    1[BANK0 ] float 
 13146 ;; Registers used:
 13147 ;;		wreg, status,2, status,0
 13148 ;; Tracked objects:
 13149 ;;		On entry : 0/0
 13150 ;;		On exit  : 0/0
 13151 ;;		Unchanged: 0/0
 13152 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13153 ;;      Params:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13154 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13155 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13156 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13157 ;;Total ram usage:        8 bytes
 13158 ;; Hardware stack levels used:    1
 13159 ;; Hardware stack levels required when called:    4
 13160 ;; This function calls:
 13161 ;;		Nothing
 13162 ;; This function is called by:
 13163 ;;		___altoft
 13164 ;;		___awtoft
 13165 ;;		___ftadd
 13166 ;;		___ftdiv
 13167 ;;		___ftmul
 13168 ;;		___lwtoft
 13169 ;; This function uses a non-reentrant model
 13170 ;;
 13171                           
 13172                           
 13173                           ;psect for function ___ftpack
 13174  0AAE                     ___ftpack:	
 13175                           
 13176                           ;incstack = 0
 13177                           ; Regs used in ___ftpack: [wreg+status,2+status,0]
 13178  0AAE  0020               	movlb	0	; select bank0
 13179  0AAF  0824               	movf	___ftpack@exp,w
 13180  0AB0  1903               	btfsc	3,2
 13181  0AB1  2AB7               	goto	l5715
 13182  0AB2  0823               	movf	___ftpack@arg+2,w
 13183  0AB3  0422               	iorwf	___ftpack@arg+1,w
 13184  0AB4  0421               	iorwf	___ftpack@arg,w
 13185  0AB5  1D03               	skipz
 13186  0AB6  2AC8               	goto	l5721
 13187  0AB7                     l5715:	
 13188  0AB7  3000               	movlw	0
 13189  0AB8  00A1               	movwf	?___ftpack
 13190  0AB9  3000               	movlw	0
 13191  0ABA  00A2               	movwf	?___ftpack+1
 13192  0ABB  3000               	movlw	0
 13193  0ABC  00A3               	movwf	?___ftpack+2
 13194  0ABD  0008               	return
 13195  0ABE                     l5719:	
 13196  0ABE  3001               	movlw	1
 13197  0ABF  00A6               	movwf	??___ftpack
 13198  0AC0  0826               	movf	??___ftpack,w
 13199  0AC1  07A4               	addwf	___ftpack@exp,f
 13200  0AC2  3001               	movlw	1
 13201  0AC3                     u5155:	
 13202  0AC3  36A3               	lsrf	___ftpack@arg+2,f
 13203  0AC4  0CA2               	rrf	___ftpack@arg+1,f
 13204  0AC5  0CA1               	rrf	___ftpack@arg,f
 13205  0AC6  0B89               	decfsz	9,f
 13206  0AC7  2AC3               	goto	u5155
 13207  0AC8                     l5721:	
 13208  0AC8  30FE               	movlw	254
 13209  0AC9  0523               	andwf	___ftpack@arg+2,w
 13210  0ACA  1903               	btfsc	3,2
 13211  0ACB  2AE1               	goto	l1542
 13212  0ACC  2ABE               	goto	l5719
 13213  0ACD                     l5723:	
 13214  0ACD  3001               	movlw	1
 13215  0ACE  00A6               	movwf	??___ftpack
 13216  0ACF  0826               	movf	??___ftpack,w
 13217  0AD0  07A4               	addwf	___ftpack@exp,f
 13218  0AD1  3001               	movlw	1
 13219  0AD2  07A1               	addwf	___ftpack@arg,f
 13220  0AD3  3000               	movlw	0
 13221  0AD4  1803               	skipnc
 13222  0AD5  3001               	movlw	1
 13223  0AD6  07A2               	addwf	___ftpack@arg+1,f
 13224  0AD7  3000               	movlw	0
 13225  0AD8  1803               	skipnc
 13226  0AD9  3001               	movlw	1
 13227  0ADA  07A3               	addwf	___ftpack@arg+2,f
 13228  0ADB  3001               	movlw	1
 13229  0ADC                     u5175:	
 13230  0ADC  36A3               	lsrf	___ftpack@arg+2,f
 13231  0ADD  0CA2               	rrf	___ftpack@arg+1,f
 13232  0ADE  0CA1               	rrf	___ftpack@arg,f
 13233  0ADF  0B89               	decfsz	9,f
 13234  0AE0  2ADC               	goto	u5175
 13235  0AE1                     l1542:	
 13236  0AE1  30FF               	movlw	255
 13237  0AE2  0523               	andwf	___ftpack@arg+2,w
 13238  0AE3  1903               	btfsc	3,2
 13239  0AE4  2AEE               	goto	l5731
 13240  0AE5  2ACD               	goto	l5723
 13241  0AE6                     l5729:	
 13242  0AE6  3001               	movlw	1
 13243  0AE7  02A4               	subwf	___ftpack@exp,f
 13244  0AE8  3001               	movlw	1
 13245  0AE9                     u5195:	
 13246  0AE9  35A1               	lslf	___ftpack@arg,f
 13247  0AEA  0DA2               	rlf	___ftpack@arg+1,f
 13248  0AEB  0DA3               	rlf	___ftpack@arg+2,f
 13249  0AEC  0B89               	decfsz	9,f
 13250  0AED  2AE9               	goto	u5195
 13251  0AEE                     l5731:	
 13252  0AEE  1BA2               	btfsc	___ftpack@arg+1,7
 13253  0AEF  2AF4               	goto	l1549
 13254  0AF0  3002               	movlw	2
 13255  0AF1  0224               	subwf	___ftpack@exp,w
 13256  0AF2  1803               	skipnc
 13257  0AF3  2AE6               	goto	l5729
 13258  0AF4                     l1549:	
 13259  0AF4  1824               	btfsc	___ftpack@exp,0
 13260  0AF5  2AFC               	goto	l1550
 13261  0AF6  30FF               	movlw	255
 13262  0AF7  05A1               	andwf	___ftpack@arg,f
 13263  0AF8  307F               	movlw	127
 13264  0AF9  05A2               	andwf	___ftpack@arg+1,f
 13265  0AFA  30FF               	movlw	255
 13266  0AFB  05A3               	andwf	___ftpack@arg+2,f
 13267  0AFC                     l1550:	
 13268  0AFC  1003               	clrc
 13269  0AFD  0CA4               	rrf	___ftpack@exp,f
 13270  0AFE  0824               	movf	___ftpack@exp,w
 13271  0AFF  00A6               	movwf	??___ftpack
 13272  0B00  01A7               	clrf	??___ftpack+1
 13273  0B01  01A8               	clrf	??___ftpack+2
 13274  0B02  3010               	movlw	16
 13275  0B03                     u5235:	
 13276  0B03  35A6               	lslf	??___ftpack,f
 13277  0B04  0DA7               	rlf	??___ftpack+1,f
 13278  0B05  0DA8               	rlf	??___ftpack+2,f
 13279  0B06  0B89               	decfsz	9,f
 13280  0B07  2B03               	goto	u5235
 13281  0B08  0826               	movf	??___ftpack,w
 13282  0B09  04A1               	iorwf	___ftpack@arg,f
 13283  0B0A  0827               	movf	??___ftpack+1,w
 13284  0B0B  04A2               	iorwf	___ftpack@arg+1,f
 13285  0B0C  0828               	movf	??___ftpack+2,w
 13286  0B0D  04A3               	iorwf	___ftpack@arg+2,f
 13287  0B0E  0825               	movf	___ftpack@sign,w
 13288  0B0F  1903               	btfsc	3,2
 13289  0B10  0008               	return
 13290  0B11  17A3               	bsf	___ftpack@arg+2,7
 13291  0B12  0008               	return
 13292  0B13                     __end_of___ftpack:	
 13293                           
 13294                           	psect	text71
 13295  0C01                     __ptext71:	
 13296 ;; *************** function ___aldiv *****************
 13297 ;; Defined at:
 13298 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\aldiv.c"
 13299 ;; Parameters:    Size  Location     Type
 13300 ;;  divisor         4    1[BANK0 ] long 
 13301 ;;  dividend        4    5[BANK0 ] long 
 13302 ;; Auto vars:     Size  Location     Type
 13303 ;;  quotient        4   12[BANK0 ] long 
 13304 ;;  sign            1   11[BANK0 ] unsigned char 
 13305 ;;  counter         1   10[BANK0 ] unsigned char 
 13306 ;; Return value:  Size  Location     Type
 13307 ;;                  4    1[BANK0 ] long 
 13308 ;; Registers used:
 13309 ;;		wreg, status,2, status,0
 13310 ;; Tracked objects:
 13311 ;;		On entry : 0/0
 13312 ;;		On exit  : 0/0
 13313 ;;		Unchanged: 0/0
 13314 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13315 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13316 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13317 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13318 ;;      Totals:         0      15       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13319 ;;Total ram usage:       15 bytes
 13320 ;; Hardware stack levels used:    1
 13321 ;; Hardware stack levels required when called:    4
 13322 ;; This function calls:
 13323 ;;		Nothing
 13324 ;; This function is called by:
 13325 ;;		_BMP_readTemperature
 13326 ;; This function uses a non-reentrant model
 13327 ;;
 13328                           
 13329                           
 13330                           ;psect for function ___aldiv
 13331  0C01                     ___aldiv:	
 13332                           
 13333                           ;incstack = 0
 13334                           ; Regs used in ___aldiv: [wreg+status,2+status,0]
 13335  0C01  0020               	movlb	0	; select bank0
 13336  0C02  01AB               	clrf	___aldiv@sign
 13337  0C03  1FA4               	btfss	___aldiv@divisor+3,7
 13338  0C04  2C12               	goto	l1408
 13339  0C05  09A1               	comf	___aldiv@divisor,f
 13340  0C06  09A2               	comf	___aldiv@divisor+1,f
 13341  0C07  09A3               	comf	___aldiv@divisor+2,f
 13342  0C08  09A4               	comf	___aldiv@divisor+3,f
 13343  0C09  0AA1               	incf	___aldiv@divisor,f
 13344  0C0A  1903               	skipnz
 13345  0C0B  0AA2               	incf	___aldiv@divisor+1,f
 13346  0C0C  1903               	skipnz
 13347  0C0D  0AA3               	incf	___aldiv@divisor+2,f
 13348  0C0E  1903               	skipnz
 13349  0C0F  0AA4               	incf	___aldiv@divisor+3,f
 13350  0C10  01AB               	clrf	___aldiv@sign
 13351  0C11  0AAB               	incf	___aldiv@sign,f
 13352  0C12                     l1408:	
 13353  0C12  1FA8               	btfss	___aldiv@dividend+3,7
 13354  0C13  2C23               	goto	l6223
 13355  0C14  09A5               	comf	___aldiv@dividend,f
 13356  0C15  09A6               	comf	___aldiv@dividend+1,f
 13357  0C16  09A7               	comf	___aldiv@dividend+2,f
 13358  0C17  09A8               	comf	___aldiv@dividend+3,f
 13359  0C18  0AA5               	incf	___aldiv@dividend,f
 13360  0C19  1903               	skipnz
 13361  0C1A  0AA6               	incf	___aldiv@dividend+1,f
 13362  0C1B  1903               	skipnz
 13363  0C1C  0AA7               	incf	___aldiv@dividend+2,f
 13364  0C1D  1903               	skipnz
 13365  0C1E  0AA8               	incf	___aldiv@dividend+3,f
 13366  0C1F  3001               	movlw	1
 13367  0C20  00A9               	movwf	??___aldiv
 13368  0C21  0829               	movf	??___aldiv,w
 13369  0C22  06AB               	xorwf	___aldiv@sign,f
 13370  0C23                     l6223:	
 13371  0C23  3000               	movlw	0
 13372  0C24  00AF               	movwf	___aldiv@quotient+3
 13373  0C25  3000               	movlw	0
 13374  0C26  00AE               	movwf	___aldiv@quotient+2
 13375  0C27  3000               	movlw	0
 13376  0C28  00AD               	movwf	___aldiv@quotient+1
 13377  0C29  3000               	movlw	0
 13378  0C2A  00AC               	movwf	___aldiv@quotient
 13379  0C2B  0824               	movf	___aldiv@divisor+3,w
 13380  0C2C  0423               	iorwf	___aldiv@divisor+2,w
 13381  0C2D  0422               	iorwf	___aldiv@divisor+1,w
 13382  0C2E  0421               	iorwf	___aldiv@divisor,w
 13383  0C2F  1903               	skipnz
 13384  0C30  2C6C               	goto	l6245
 13385  0C31  01AA               	clrf	___aldiv@counter
 13386  0C32  0AAA               	incf	___aldiv@counter,f
 13387  0C33                     l6231:	
 13388  0C33  1BA4               	btfsc	___aldiv@divisor+3,7
 13389  0C34  2C41               	goto	l6233
 13390  0C35  3001               	movlw	1
 13391  0C36                     u5785:	
 13392  0C36  35A1               	lslf	___aldiv@divisor,f
 13393  0C37  0DA2               	rlf	___aldiv@divisor+1,f
 13394  0C38  0DA3               	rlf	___aldiv@divisor+2,f
 13395  0C39  0DA4               	rlf	___aldiv@divisor+3,f
 13396  0C3A  0B89               	decfsz	9,f
 13397  0C3B  2C36               	goto	u5785
 13398  0C3C  3001               	movlw	1
 13399  0C3D  00A9               	movwf	??___aldiv
 13400  0C3E  0829               	movf	??___aldiv,w
 13401  0C3F  07AA               	addwf	___aldiv@counter,f
 13402  0C40  2C33               	goto	l6231
 13403  0C41                     l6233:	
 13404  0C41  3001               	movlw	1
 13405  0C42                     u5805:	
 13406  0C42  35AC               	lslf	___aldiv@quotient,f
 13407  0C43  0DAD               	rlf	___aldiv@quotient+1,f
 13408  0C44  0DAE               	rlf	___aldiv@quotient+2,f
 13409  0C45  0DAF               	rlf	___aldiv@quotient+3,f
 13410  0C46  0B89               	decfsz	9,f
 13411  0C47  2C42               	goto	u5805
 13412  0C48  0824               	movf	___aldiv@divisor+3,w
 13413  0C49  0228               	subwf	___aldiv@dividend+3,w
 13414  0C4A  1D03               	skipz
 13415  0C4B  2C56               	goto	u5815
 13416  0C4C  0823               	movf	___aldiv@divisor+2,w
 13417  0C4D  0227               	subwf	___aldiv@dividend+2,w
 13418  0C4E  1D03               	skipz
 13419  0C4F  2C56               	goto	u5815
 13420  0C50  0822               	movf	___aldiv@divisor+1,w
 13421  0C51  0226               	subwf	___aldiv@dividend+1,w
 13422  0C52  1D03               	skipz
 13423  0C53  2C56               	goto	u5815
 13424  0C54  0821               	movf	___aldiv@divisor,w
 13425  0C55  0225               	subwf	___aldiv@dividend,w
 13426  0C56                     u5815:	
 13427  0C56  1C03               	skipc
 13428  0C57  2C61               	goto	l6241
 13429  0C58  0821               	movf	___aldiv@divisor,w
 13430  0C59  02A5               	subwf	___aldiv@dividend,f
 13431  0C5A  0822               	movf	___aldiv@divisor+1,w
 13432  0C5B  3BA6               	subwfb	___aldiv@dividend+1,f
 13433  0C5C  0823               	movf	___aldiv@divisor+2,w
 13434  0C5D  3BA7               	subwfb	___aldiv@dividend+2,f
 13435  0C5E  0824               	movf	___aldiv@divisor+3,w
 13436  0C5F  3BA8               	subwfb	___aldiv@dividend+3,f
 13437  0C60  142C               	bsf	___aldiv@quotient,0
 13438  0C61                     l6241:	
 13439  0C61  3001               	movlw	1
 13440  0C62                     u5825:	
 13441  0C62  36A4               	lsrf	___aldiv@divisor+3,f
 13442  0C63  0CA3               	rrf	___aldiv@divisor+2,f
 13443  0C64  0CA2               	rrf	___aldiv@divisor+1,f
 13444  0C65  0CA1               	rrf	___aldiv@divisor,f
 13445  0C66  0B89               	decfsz	9,f
 13446  0C67  2C62               	goto	u5825
 13447  0C68  3001               	movlw	1
 13448  0C69  02AA               	subwf	___aldiv@counter,f
 13449  0C6A  1D03               	btfss	3,2
 13450  0C6B  2C41               	goto	l6233
 13451  0C6C                     l6245:	
 13452  0C6C  082B               	movf	___aldiv@sign,w
 13453  0C6D  1903               	btfsc	3,2
 13454  0C6E  2C7A               	goto	l6249
 13455  0C6F  09AC               	comf	___aldiv@quotient,f
 13456  0C70  09AD               	comf	___aldiv@quotient+1,f
 13457  0C71  09AE               	comf	___aldiv@quotient+2,f
 13458  0C72  09AF               	comf	___aldiv@quotient+3,f
 13459  0C73  0AAC               	incf	___aldiv@quotient,f
 13460  0C74  1903               	skipnz
 13461  0C75  0AAD               	incf	___aldiv@quotient+1,f
 13462  0C76  1903               	skipnz
 13463  0C77  0AAE               	incf	___aldiv@quotient+2,f
 13464  0C78  1903               	skipnz
 13465  0C79  0AAF               	incf	___aldiv@quotient+3,f
 13466  0C7A                     l6249:	
 13467  0C7A  082F               	movf	___aldiv@quotient+3,w
 13468  0C7B  00A4               	movwf	?___aldiv+3
 13469  0C7C  082E               	movf	___aldiv@quotient+2,w
 13470  0C7D  00A3               	movwf	?___aldiv+2
 13471  0C7E  082D               	movf	___aldiv@quotient+1,w
 13472  0C7F  00A2               	movwf	?___aldiv+1
 13473  0C80  082C               	movf	___aldiv@quotient,w
 13474  0C81  00A1               	movwf	?___aldiv
 13475  0C82  0008               	return
 13476  0C83                     __end_of___aldiv:	
 13477                           
 13478                           	psect	text72
 13479  08B7                     __ptext72:	
 13480 ;; *************** function _HMC5883L_ReadBits *****************
 13481 ;; Defined at:
 13482 ;;		line 418 in file "hmc5883l.c"
 13483 ;; Parameters:    Size  Location     Type
 13484 ;;  slaveAddr       1    wreg     unsigned char 
 13485 ;;  regAddr         1   35[BANK0 ] unsigned char 
 13486 ;;  bitStart        1   36[BANK0 ] unsigned char 
 13487 ;;  length          1   37[BANK0 ] unsigned char 
 13488 ;;  data            1   38[BANK0 ] PTR unsigned char 
 13489 ;;		 -> BMP_readTemperature@tmp(1), HMC5883L_GetHeading@tmp(1), HMC5883L_GetMode@tmp(1), HMC5883L_GetGain@tmp(1), 
 13490 ;;		 -> HMC5883L_GetMeasurementBias@tmp(1), HMC5883L_GetDataRate@tmp(1), HMC5883L_GetSampleAveraging@tmp(1), 
 13491 ;; Auto vars:     Size  Location     Type
 13492 ;;  slaveAddr       1   42[BANK0 ] unsigned char 
 13493 ;;  mask            1   43[BANK0 ] unsigned char 
 13494 ;;  tmp             1   44[BANK0 ] unsigned char 
 13495 ;; Return value:  Size  Location     Type
 13496 ;;                  1    wreg      unsigned char 
 13497 ;; Registers used:
 13498 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13499 ;; Tracked objects:
 13500 ;;		On entry : 0/0
 13501 ;;		On exit  : 0/0
 13502 ;;		Unchanged: 0/0
 13503 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13504 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13505 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13506 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13507 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13508 ;;Total ram usage:       10 bytes
 13509 ;; Hardware stack levels used:    1
 13510 ;; Hardware stack levels required when called:    8
 13511 ;; This function calls:
 13512 ;;		_HMC5883L_I2C_BufferRead
 13513 ;; This function is called by:
 13514 ;;		_BMP_readTemperature
 13515 ;;		_HMC5883L_GetSampleAveraging
 13516 ;;		_HMC5883L_GetDataRate
 13517 ;;		_HMC5883L_GetMeasurementBias
 13518 ;;		_HMC5883L_GetGain
 13519 ;;		_HMC5883L_GetMode
 13520 ;;		_HMC5883L_GetHeading
 13521 ;; This function uses a non-reentrant model
 13522 ;;
 13523                           
 13524                           
 13525                           ;psect for function _HMC5883L_ReadBits
 13526  08B7                     _HMC5883L_ReadBits:	
 13527                           
 13528                           ;incstack = 0
 13529                           ; Regs used in _HMC5883L_ReadBits: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 13530                           ;HMC5883L_ReadBits@slaveAddr stored from wreg
 13531  08B7  0020               	movlb	0	; select bank0
 13532  08B8  00CA               	movwf	HMC5883L_ReadBits@slaveAddr
 13533                           
 13534                           ;hmc5883l.c: 420: uint8_t tmp;
 13535                           ;hmc5883l.c: 422: if(HMC5883L_I2C_BufferRead(slaveAddr, &tmp, regAddr, 1))
 13536  08B9  304C               	movlw	low HMC5883L_ReadBits@tmp
 13537  08BA  00BC               	movwf	HMC5883L_I2C_BufferRead@pBuffer
 13538  08BB  3000               	movlw	high HMC5883L_ReadBits@tmp
 13539  08BC  00BD               	movwf	HMC5883L_I2C_BufferRead@pBuffer+1
 13540  08BD  0843               	movf	HMC5883L_ReadBits@regAddr,w
 13541  08BE  00C7               	movwf	??_HMC5883L_ReadBits
 13542  08BF  0847               	movf	??_HMC5883L_ReadBits,w
 13543  08C0  00BE               	movwf	HMC5883L_I2C_BufferRead@ReadAddr
 13544  08C1  3001               	movlw	1
 13545  08C2  00BF               	movwf	HMC5883L_I2C_BufferRead@NumByteToRead
 13546  08C3  3000               	movlw	0
 13547  08C4  00C0               	movwf	HMC5883L_I2C_BufferRead@NumByteToRead+1
 13548  08C5  084A               	movf	HMC5883L_ReadBits@slaveAddr,w
 13549  08C6  3193  23C5  3188   	fcall	_HMC5883L_I2C_BufferRead
 13550  08C9  3A00               	xorlw	0
 13551  08CA  1903               	skipnz
 13552  08CB  28FB               	goto	l6169
 13553                           
 13554                           ;hmc5883l.c: 423: {
 13555                           ;hmc5883l.c: 424: uint8_t mask = ((1 << length) - 1) << (bitStart - length + 1);
 13556  08CC  3001               	movlw	1
 13557  08CD  0020               	movlb	0	; select bank0
 13558  08CE  00C7               	movwf	??_HMC5883L_ReadBits
 13559  08CF  0A45               	incf	HMC5883L_ReadBits@length,w
 13560  08D0  28D2               	goto	u5664
 13561  08D1                     u5665:	
 13562  08D1  35C7               	lslf	??_HMC5883L_ReadBits,f
 13563  08D2                     u5664:	
 13564  08D2  0B89               	decfsz	9,f
 13565  08D3  28D1               	goto	u5665
 13566  08D4  0847               	movf	??_HMC5883L_ReadBits,w
 13567  08D5  3EFF               	addlw	255
 13568  08D6  00C8               	movwf	??_HMC5883L_ReadBits+1
 13569  08D7  0345               	decf	HMC5883L_ReadBits@length,w
 13570  08D8  3AFF               	xorlw	255
 13571  08D9  0744               	addwf	HMC5883L_ReadBits@bitStart,w
 13572  08DA  3E01               	addlw	1
 13573  08DB  0A89               	incf	9,f
 13574  08DC  28DE               	goto	u5674
 13575  08DD                     u5675:	
 13576  08DD  35C8               	lslf	??_HMC5883L_ReadBits+1,f
 13577  08DE                     u5674:	
 13578  08DE  0B89               	decfsz	9,f
 13579  08DF  28DD               	goto	u5675
 13580  08E0  0848               	movf	??_HMC5883L_ReadBits+1,w
 13581  08E1  00C9               	movwf	??_HMC5883L_ReadBits+2
 13582  08E2  0849               	movf	??_HMC5883L_ReadBits+2,w
 13583  08E3  00CB               	movwf	HMC5883L_ReadBits@mask
 13584                           
 13585                           ;hmc5883l.c: 425: tmp &= mask;
 13586  08E4  084B               	movf	HMC5883L_ReadBits@mask,w
 13587  08E5  00C7               	movwf	??_HMC5883L_ReadBits
 13588  08E6  0847               	movf	??_HMC5883L_ReadBits,w
 13589  08E7  05CC               	andwf	HMC5883L_ReadBits@tmp,f
 13590                           
 13591                           ;hmc5883l.c: 426: tmp >>= (bitStart - length + 1);
 13592  08E8  0345               	decf	HMC5883L_ReadBits@length,w
 13593  08E9  3AFF               	xorlw	255
 13594  08EA  0744               	addwf	HMC5883L_ReadBits@bitStart,w
 13595  08EB  3E01               	addlw	1
 13596  08EC  0A89               	incf	9,f
 13597  08ED  28F0               	goto	u5680
 13598  08EE                     u5685:	
 13599  08EE  1003               	clrc
 13600  08EF  0CCC               	rrf	HMC5883L_ReadBits@tmp,f
 13601  08F0                     u5680:	
 13602  08F0  3EFF               	addlw	-1
 13603  08F1  1D03               	skipz
 13604  08F2  28EE               	goto	u5685
 13605                           
 13606                           ;hmc5883l.c: 427: *data = tmp;
 13607  08F3  084C               	movf	HMC5883L_ReadBits@tmp,w
 13608  08F4  00C7               	movwf	??_HMC5883L_ReadBits
 13609  08F5  0846               	movf	HMC5883L_ReadBits@data,w
 13610  08F6  0086               	movwf	6
 13611  08F7  0187               	clrf	7
 13612  08F8  0847               	movf	??_HMC5883L_ReadBits,w
 13613  08F9  0081               	movwf	1
 13614                           
 13615                           ;hmc5883l.c: 428: }
 13616  08FA  0008               	return
 13617  08FB                     l6169:	
 13618                           
 13619                           ;hmc5883l.c: 429: else return 0;
 13620  08FB  3000               	movlw	0
 13621  08FC  0008               	return
 13622  08FD                     __end_of_HMC5883L_ReadBits:	
 13623                           
 13624                           	psect	text73
 13625  13C5                     __ptext73:	
 13626 ;; *************** function _HMC5883L_I2C_BufferRead *****************
 13627 ;; Defined at:
 13628 ;;		line 471 in file "hmc5883l.c"
 13629 ;; Parameters:    Size  Location     Type
 13630 ;;  slaveAddr       1    wreg     unsigned char 
 13631 ;;  pBuffer         2   28[BANK0 ] PTR unsigned char 
 13632 ;;		 -> HMC5883L_ReadBit@tmp(1), HMC5883L_ReadBits@tmp(1), HMC5883L_WriteBit@tmp(1), HMC5883L_WriteBits@tmp(1), 
 13633 ;;		 -> heading(8), HMC5883L_TestConnection@tmp(3), MPU6050_ReadBit@tmp(1), MPU6050_ReadBits@tmp(1), 
 13634 ;;		 -> MPU6050_WriteBit@tmp(1), MPU6050_WriteBits@tmp(1), MPU6050_GetRawAccel@tempBuffer(6), MPU6050_GetRawAccelGyro@tm
      +pBuffer(14), 
 13635 ;;  ReadAddr        1   30[BANK0 ] unsigned char 
 13636 ;;  NumByteToRea    2   31[BANK0 ] unsigned short 
 13637 ;; Auto vars:     Size  Location     Type
 13638 ;;  slaveAddr       1   34[BANK0 ] unsigned char 
 13639 ;; Return value:  Size  Location     Type
 13640 ;;                  1    wreg      unsigned char 
 13641 ;; Registers used:
 13642 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13643 ;; Tracked objects:
 13644 ;;		On entry : 0/0
 13645 ;;		On exit  : 0/0
 13646 ;;		Unchanged: 0/0
 13647 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13648 ;;      Params:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13649 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13650 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13651 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13652 ;;Total ram usage:        7 bytes
 13653 ;; Hardware stack levels used:    1
 13654 ;; Hardware stack levels required when called:    7
 13655 ;; This function calls:
 13656 ;;		_I2C_BufferRead
 13657 ;; This function is called by:
 13658 ;;		_HMC5883L_ReadBits
 13659 ;;		_MPU6050_I2C_BufferRead
 13660 ;;		_HMC5883L_TestConnection
 13661 ;;		_HMC5883L_GetHeading
 13662 ;;		_HMC5883L_WriteBits
 13663 ;;		_HMC5883L_WriteBit
 13664 ;;		_HMC5883L_ReadBit
 13665 ;; This function uses a non-reentrant model
 13666 ;;
 13667                           
 13668                           
 13669                           ;psect for function _HMC5883L_I2C_BufferRead
 13670  13C5                     _HMC5883L_I2C_BufferRead:	
 13671                           
 13672                           ;incstack = 0
 13673                           ; Regs used in _HMC5883L_I2C_BufferRead: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+csta
      +                          ck]
 13674                           ;HMC5883L_I2C_BufferRead@slaveAddr stored from wreg
 13675  13C5  0020               	movlb	0	; select bank0
 13676  13C6  00C2               	movwf	HMC5883L_I2C_BufferRead@slaveAddr
 13677                           
 13678                           ;hmc5883l.c: 473: return(I2C_BufferRead(slaveAddr,pBuffer,ReadAddr,NumByteToRead));
 13679  13C7  083D               	movf	HMC5883L_I2C_BufferRead@pBuffer+1,w
 13680  13C8  00B2               	movwf	I2C_BufferRead@pBuffer+1
 13681  13C9  083C               	movf	HMC5883L_I2C_BufferRead@pBuffer,w
 13682  13CA  00B1               	movwf	I2C_BufferRead@pBuffer
 13683  13CB  083E               	movf	HMC5883L_I2C_BufferRead@ReadAddr,w
 13684  13CC  00C1               	movwf	??_HMC5883L_I2C_BufferRead
 13685  13CD  0841               	movf	??_HMC5883L_I2C_BufferRead,w
 13686  13CE  00B3               	movwf	I2C_BufferRead@ReadAddr
 13687  13CF  0840               	movf	HMC5883L_I2C_BufferRead@NumByteToRead+1,w
 13688  13D0  00B5               	movwf	I2C_BufferRead@NumByteToRead+1
 13689  13D1  083F               	movf	HMC5883L_I2C_BufferRead@NumByteToRead,w
 13690  13D2  00B4               	movwf	I2C_BufferRead@NumByteToRead
 13691  13D3  0842               	movf	HMC5883L_I2C_BufferRead@slaveAddr,w
 13692  13D4  3189  21F2         	fcall	_I2C_BufferRead
 13693  13D6  0008               	return
 13694  13D7                     __end_of_HMC5883L_I2C_BufferRead:	
 13695                           
 13696                           	psect	text74
 13697  12A1                     __ptext74:	
 13698 ;; *************** function _Diag_getTempSensorHealth *****************
 13699 ;; Defined at:
 13700 ;;		line 25 in file "diagnostics.c"
 13701 ;; Parameters:    Size  Location     Type
 13702 ;;		None
 13703 ;; Auto vars:     Size  Location     Type
 13704 ;;		None
 13705 ;; Return value:  Size  Location     Type
 13706 ;;                  1    wreg      unsigned char 
 13707 ;; Registers used:
 13708 ;;		wreg
 13709 ;; Tracked objects:
 13710 ;;		On entry : 0/0
 13711 ;;		On exit  : 0/0
 13712 ;;		Unchanged: 0/0
 13713 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13714 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13715 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13716 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13717 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13718 ;;Total ram usage:        0 bytes
 13719 ;; Hardware stack levels used:    1
 13720 ;; Hardware stack levels required when called:    4
 13721 ;; This function calls:
 13722 ;;		Nothing
 13723 ;; This function is called by:
 13724 ;;		_BMP_readTemperature
 13725 ;; This function uses a non-reentrant model
 13726 ;;
 13727                           
 13728                           
 13729                           ;psect for function _Diag_getTempSensorHealth
 13730  12A1                     _Diag_getTempSensorHealth:	
 13731                           
 13732                           ;diagnostics.c: 27: return (sensorHealth.tempSensorHealth);
 13733                           
 13734                           ;incstack = 0
 13735                           ; Regs used in _Diag_getTempSensorHealth: [wreg]
 13736  12A1  0021               	movlb	1	; select bank1
 13737  12A2  0863               	movf	_sensorHealth^(0+128),w
 13738  12A3  0008               	return
 13739  12A4                     __end_of_Diag_getTempSensorHealth:	
 13740                           
 13741                           	psect	text75
 13742  0B13                     __ptext75:	
 13743 ;; *************** function _BMP_init *****************
 13744 ;; Defined at:
 13745 ;;		line 39 in file "bmp280.c"
 13746 ;; Parameters:    Size  Location     Type
 13747 ;;		None
 13748 ;; Auto vars:     Size  Location     Type
 13749 ;;  t               1   31[BANK0 ] unsigned char 
 13750 ;; Return value:  Size  Location     Type
 13751 ;;                  1    wreg      void 
 13752 ;; Registers used:
 13753 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13754 ;; Tracked objects:
 13755 ;;		On entry : 0/0
 13756 ;;		On exit  : 0/0
 13757 ;;		Unchanged: 0/0
 13758 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13759 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13760 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13761 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13762 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13763 ;;Total ram usage:        4 bytes
 13764 ;; Hardware stack levels used:    1
 13765 ;; Hardware stack levels required when called:    7
 13766 ;; This function calls:
 13767 ;;		_Diag_setTempSensorHealth
 13768 ;;		_I2C_BufferRead
 13769 ;;		_I2C_ByteWrite
 13770 ;; This function is called by:
 13771 ;;		_main
 13772 ;;		_BMP_readTemperature
 13773 ;; This function uses a non-reentrant model
 13774 ;;
 13775                           
 13776                           
 13777                           ;psect for function _BMP_init
 13778  0B13                     _BMP_init:	
 13779                           
 13780                           ;bmp280.c: 41: char t;
 13781                           ;bmp280.c: 42: t=0x40;
 13782                           
 13783                           ;incstack = 0
 13784                           ; Regs used in _BMP_init: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 13785  0B13  3040               	movlw	64
 13786  0B14  0020               	movlb	0	; select bank0
 13787  0B15  00BC               	movwf	??_BMP_init
 13788  0B16  083C               	movf	??_BMP_init,w
 13789  0B17  00BF               	movwf	BMP_init@t
 13790                           
 13791                           ;bmp280.c: 43: if(I2C_ByteWrite(0x76, &t, 0xF4)==0)
 13792  0B18  303F               	movlw	(low (BMP_init@t| 0))& (0+255)
 13793  0B19  00BC               	movwf	??_BMP_init
 13794  0B1A  083C               	movf	??_BMP_init,w
 13795  0B1B  00AF               	movwf	I2C_ByteWrite@pBuffer
 13796  0B1C  30F4               	movlw	244
 13797  0B1D  00BD               	movwf	??_BMP_init+1
 13798  0B1E  083D               	movf	??_BMP_init+1,w
 13799  0B1F  00B0               	movwf	I2C_ByteWrite@WriteAddr
 13800  0B20  3076               	movlw	118
 13801  0B21  3197  27C4  318B   	fcall	_I2C_ByteWrite
 13802  0B24  3A00               	xorlw	0
 13803  0B25  1D03               	skipz
 13804  0B26  2B2B               	goto	l6061
 13805                           
 13806                           ;bmp280.c: 44: {
 13807                           ;bmp280.c: 45: Diag_setTempSensorHealth(0);
 13808  0B27  3000               	movlw	0
 13809  0B28  3193  2300         	fcall	_Diag_setTempSensorHealth
 13810                           
 13811                           ;bmp280.c: 46: return;
 13812  0B2A  0008               	return
 13813  0B2B                     l6061:	
 13814                           
 13815                           ;bmp280.c: 47: }
 13816                           ;bmp280.c: 48: t=0xE0;
 13817  0B2B  30E0               	movlw	224
 13818  0B2C  0020               	movlb	0	; select bank0
 13819  0B2D  00BC               	movwf	??_BMP_init
 13820  0B2E  083C               	movf	??_BMP_init,w
 13821  0B2F  00BF               	movwf	BMP_init@t
 13822                           
 13823                           ;bmp280.c: 50: if(I2C_BufferRead(0x76, b1, 0x88, 24)==0)
 13824  0B30  30A8               	movlw	low _b1
 13825  0B31  00B1               	movwf	I2C_BufferRead@pBuffer
 13826  0B32  3001               	movlw	high _b1
 13827  0B33  00B2               	movwf	I2C_BufferRead@pBuffer+1
 13828  0B34  3088               	movlw	136
 13829  0B35  00BC               	movwf	??_BMP_init
 13830  0B36  083C               	movf	??_BMP_init,w
 13831  0B37  00B3               	movwf	I2C_BufferRead@ReadAddr
 13832  0B38  3018               	movlw	24
 13833  0B39  00B4               	movwf	I2C_BufferRead@NumByteToRead
 13834  0B3A  3000               	movlw	0
 13835  0B3B  00B5               	movwf	I2C_BufferRead@NumByteToRead+1
 13836  0B3C  3076               	movlw	118
 13837  0B3D  3189  21F2  318B   	fcall	_I2C_BufferRead
 13838  0B40  3A00               	xorlw	0
 13839  0B41  1D03               	skipz
 13840  0B42  2B47               	goto	l6069
 13841                           
 13842                           ;bmp280.c: 51: {
 13843                           ;bmp280.c: 52: Diag_setTempSensorHealth(0);
 13844  0B43  3000               	movlw	0
 13845  0B44  3193  2300         	fcall	_Diag_setTempSensorHealth
 13846                           
 13847                           ;bmp280.c: 53: return;
 13848  0B46  0008               	return
 13849  0B47                     l6069:	
 13850                           
 13851                           ;bmp280.c: 54: }
 13852                           ;bmp280.c: 55: dig_T1 = ((u16)b1[0] & 0xFF) + (((u16)b1[1] & 0xFF) * 256);
 13853  0B47  0023               	movlb	3	; select bank3
 13854  0B48  0829               	movf	(_b1^(0+384)+1),w
 13855  0B49  0020               	movlb	0	; select bank0
 13856  0B4A  00BC               	movwf	??_BMP_init
 13857  0B4B  01BD               	clrf	??_BMP_init+1
 13858  0B4C  083C               	movf	??_BMP_init,w
 13859  0B4D  00BD               	movwf	??_BMP_init+1
 13860  0B4E  01BC               	clrf	??_BMP_init
 13861  0B4F  0023               	movlb	3	; select bank3
 13862  0B50  0828               	movf	_b1^(0+384),w
 13863  0B51  0020               	movlb	0	; select bank0
 13864  0B52  073C               	addwf	??_BMP_init,w
 13865  0B53  0021               	movlb	1	; select bank1
 13866  0B54  00D3               	movwf	_dig_T1^(0+128)
 13867  0B55  0020               	movlb	0	; select bank0
 13868  0B56  083D               	movf	??_BMP_init+1,w
 13869  0B57  1803               	skipnc
 13870  0B58  0A3D               	incf	??_BMP_init+1,w
 13871  0B59  0021               	movlb	1	; select bank1
 13872  0B5A  00D4               	movwf	(_dig_T1^(0+128)+1)
 13873                           
 13874                           ;bmp280.c: 56: dig_T2 = (int)b1[2] + ((int)b1[3] * 256);
 13875  0B5B  0023               	movlb	3	; select bank3
 13876  0B5C  082B               	movf	(_b1^(0+384)+3),w
 13877  0B5D  0020               	movlb	0	; select bank0
 13878  0B5E  00BC               	movwf	??_BMP_init
 13879  0B5F  01BD               	clrf	??_BMP_init+1
 13880  0B60  083C               	movf	??_BMP_init,w
 13881  0B61  00BD               	movwf	??_BMP_init+1
 13882  0B62  01BC               	clrf	??_BMP_init
 13883  0B63  0023               	movlb	3	; select bank3
 13884  0B64  082A               	movf	(_b1^(0+384)+2),w
 13885  0B65  0020               	movlb	0	; select bank0
 13886  0B66  073C               	addwf	??_BMP_init,w
 13887  0B67  0022               	movlb	2	; select bank2
 13888  0B68  00D6               	movwf	_dig_T2^(0+256)
 13889  0B69  0020               	movlb	0	; select bank0
 13890  0B6A  083D               	movf	??_BMP_init+1,w
 13891  0B6B  1803               	skipnc
 13892  0B6C  0A3D               	incf	??_BMP_init+1,w
 13893  0B6D  0022               	movlb	2	; select bank2
 13894  0B6E  00D7               	movwf	(_dig_T2^(0+256)+1)
 13895                           
 13896                           ;bmp280.c: 57: dig_T3 = (int)b1[4] + ((int)b1[5] * 256);
 13897  0B6F  0023               	movlb	3	; select bank3
 13898  0B70  082D               	movf	(_b1^(0+384)+5),w
 13899  0B71  0020               	movlb	0	; select bank0
 13900  0B72  00BC               	movwf	??_BMP_init
 13901  0B73  01BD               	clrf	??_BMP_init+1
 13902  0B74  083C               	movf	??_BMP_init,w
 13903  0B75  00BD               	movwf	??_BMP_init+1
 13904  0B76  01BC               	clrf	??_BMP_init
 13905  0B77  0023               	movlb	3	; select bank3
 13906  0B78  082C               	movf	(_b1^(0+384)+4),w
 13907  0B79  0020               	movlb	0	; select bank0
 13908  0B7A  073C               	addwf	??_BMP_init,w
 13909  0B7B  0022               	movlb	2	; select bank2
 13910  0B7C  00D4               	movwf	_dig_T3^(0+256)
 13911  0B7D  0020               	movlb	0	; select bank0
 13912  0B7E  083D               	movf	??_BMP_init+1,w
 13913  0B7F  1803               	skipnc
 13914  0B80  0A3D               	incf	??_BMP_init+1,w
 13915  0B81  0022               	movlb	2	; select bank2
 13916  0B82  00D5               	movwf	(_dig_T3^(0+256)+1)
 13917                           
 13918                           ;bmp280.c: 69: Diag_setTempSensorHealth(1);
 13919  0B83  3001               	movlw	1
 13920  0B84  3193  2300         	fcall	_Diag_setTempSensorHealth
 13921  0B86  0008               	return
 13922  0B87                     __end_of_BMP_init:	
 13923                           
 13924                           	psect	text76
 13925  17C4                     __ptext76:	
 13926 ;; *************** function _I2C_ByteWrite *****************
 13927 ;; Defined at:
 13928 ;;		line 3 in file "i2c_wrapper.c"
 13929 ;; Parameters:    Size  Location     Type
 13930 ;;  slaveAddr       1    wreg     unsigned char 
 13931 ;;  pBuffer         1   15[BANK0 ] PTR unsigned char 
 13932 ;;		 -> BMP_readTemperature@tmp(1), BMP_init@t(1), HMC5883L_WriteBit@tmp(1), HMC5883L_WriteBits@tmp(1), 
 13933 ;;		 -> HMC5883L_SetMode@tmp(1), HMC5883L_SetGain@tmp(1), HMC5883L_Initialize@tmp(1), MPU6050_WriteBit@tmp(1), 
 13934 ;;		 -> MPU6050_WriteBits@tmp(1), 
 13935 ;;  WriteAddr       1   16[BANK0 ] unsigned char 
 13936 ;; Auto vars:     Size  Location     Type
 13937 ;;  slaveAddr       1   21[BANK0 ] unsigned char 
 13938 ;;  data            2   22[BANK0 ] unsigned char [2]
 13939 ;;  status          1   24[BANK0 ] enum E3025
 13940 ;; Return value:  Size  Location     Type
 13941 ;;                  1    wreg      unsigned char 
 13942 ;; Registers used:
 13943 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13944 ;; Tracked objects:
 13945 ;;		On entry : 0/0
 13946 ;;		On exit  : 0/0
 13947 ;;		Unchanged: 0/0
 13948 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13949 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13950 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13951 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13952 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13953 ;;Total ram usage:       10 bytes
 13954 ;; Hardware stack levels used:    1
 13955 ;; Hardware stack levels required when called:    6
 13956 ;; This function calls:
 13957 ;;		_I2C2_MasterWrite
 13958 ;;		_Timeout_hasExpired
 13959 ;;		_Timeout_setTimeout
 13960 ;; This function is called by:
 13961 ;;		_BMP_init
 13962 ;;		_BMP_readTemperature
 13963 ;;		_HMC5883L_I2C_ByteWrite
 13964 ;; This function uses a non-reentrant model
 13965 ;;
 13966                           
 13967                           
 13968                           ;psect for function _I2C_ByteWrite
 13969  17C4                     _I2C_ByteWrite:	
 13970                           
 13971                           ;incstack = 0
 13972                           ; Regs used in _I2C_ByteWrite: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 13973                           ;I2C_ByteWrite@slaveAddr stored from wreg
 13974  17C4  0020               	movlb	0	; select bank0
 13975  17C5  00B5               	movwf	I2C_ByteWrite@slaveAddr
 13976                           
 13977                           ;i2c_wrapper.c: 5: u8 data[2];
 13978                           ;i2c_wrapper.c: 6: I2C2_MESSAGE_STATUS status=I2C2_MESSAGE_COMPLETE;
 13979  17C6  01B8               	clrf	I2C_ByteWrite@status
 13980                           
 13981                           ;i2c_wrapper.c: 8: data[0]= WriteAddr;
 13982  17C7  0830               	movf	I2C_ByteWrite@WriteAddr,w
 13983  17C8  00B1               	movwf	??_I2C_ByteWrite
 13984  17C9  0831               	movf	??_I2C_ByteWrite,w
 13985  17CA  00B6               	movwf	I2C_ByteWrite@data
 13986                           
 13987                           ;i2c_wrapper.c: 9: data[1]= *pBuffer;
 13988  17CB  082F               	movf	I2C_ByteWrite@pBuffer,w
 13989  17CC  0086               	movwf	6
 13990  17CD  0187               	clrf	7
 13991  17CE  0801               	movf	1,w
 13992  17CF  00B1               	movwf	??_I2C_ByteWrite
 13993  17D0  0831               	movf	??_I2C_ByteWrite,w
 13994  17D1  00B7               	movwf	I2C_ByteWrite@data+1
 13995                           
 13996                           ;i2c_wrapper.c: 12: I2C2_MasterWrite(data,2,slaveAddr, &status);
 13997  17D2  3002               	movlw	2
 13998  17D3  00B1               	movwf	??_I2C_ByteWrite
 13999  17D4  0831               	movf	??_I2C_ByteWrite,w
 14000  17D5  00A8               	movwf	I2C2_MasterWrite@length
 14001  17D6  0835               	movf	I2C_ByteWrite@slaveAddr,w
 14002  17D7  00B2               	movwf	??_I2C_ByteWrite+1
 14003  17D8  01B3               	clrf	??_I2C_ByteWrite+2
 14004  17D9  0832               	movf	??_I2C_ByteWrite+1,w
 14005  17DA  00A9               	movwf	I2C2_MasterWrite@address
 14006  17DB  0833               	movf	??_I2C_ByteWrite+2,w
 14007  17DC  00AA               	movwf	I2C2_MasterWrite@address+1
 14008  17DD  3038               	movlw	(low (I2C_ByteWrite@status| 0))& (0+255)
 14009  17DE  00B4               	movwf	??_I2C_ByteWrite+3
 14010  17DF  0834               	movf	??_I2C_ByteWrite+3,w
 14011  17E0  00AB               	movwf	I2C2_MasterWrite@pflag
 14012  17E1  3036               	movlw	(low (I2C_ByteWrite@data| 0))& (0+255)
 14013  17E2  3197  2713  3197   	fcall	_I2C2_MasterWrite
 14014                           
 14015                           ;i2c_wrapper.c: 13: Timeout_setTimeout(200);
 14016  17E5  30C8               	movlw	200
 14017  17E6  0020               	movlb	0	; select bank0
 14018  17E7  00A1               	movwf	Timeout_setTimeout@val
 14019  17E8  3000               	movlw	0
 14020  17E9  00A2               	movwf	Timeout_setTimeout@val+1
 14021  17EA  3194  2497  3197   	fcall	_Timeout_setTimeout
 14022  17ED                     l5787:	
 14023                           ;i2c_wrapper.c: 15: while(status == I2C2_MESSAGE_PENDING && Timeout_hasExpired()==0);
 14024                           
 14025  17ED  3002               	movlw	2
 14026  17EE  0020               	movlb	0	; select bank0
 14027  17EF  0638               	xorwf	I2C_ByteWrite@status,w
 14028  17F0  1D03               	btfss	3,2
 14029  17F1  2FF8               	goto	l5791
 14030  17F2  3188  20FD  3197   	fcall	_Timeout_hasExpired
 14031  17F5  3A00               	xorlw	0
 14032  17F6  1903               	skipnz
 14033  17F7  2FED               	goto	l5787
 14034  17F8                     l5791:	
 14035                           
 14036                           ;i2c_wrapper.c: 17: if (status == I2C2_MESSAGE_COMPLETE)
 14037  17F8  0020               	movlb	0	; select bank0
 14038  17F9  0838               	movf	I2C_ByteWrite@status,w
 14039  17FA  1D03               	btfss	3,2
 14040  17FB  2FFE               	goto	l5799
 14041                           
 14042                           ;i2c_wrapper.c: 18: {
 14043                           ;i2c_wrapper.c: 19: return 1;
 14044  17FC  3001               	movlw	1
 14045                           
 14046                           ;i2c_wrapper.c: 20: }
 14047  17FD  0008               	return
 14048  17FE                     l5799:	
 14049                           
 14050                           ;i2c_wrapper.c: 21: else
 14051                           ;i2c_wrapper.c: 22: {
 14052                           ;i2c_wrapper.c: 23: return 0;
 14053  17FE  3000               	movlw	0
 14054  17FF  0008               	return
 14055  1800                     __end_of_I2C_ByteWrite:	
 14056                           
 14057                           	psect	text77
 14058  09F2                     __ptext77:	
 14059 ;; *************** function _I2C_BufferRead *****************
 14060 ;; Defined at:
 14061 ;;		line 30 in file "i2c_wrapper.c"
 14062 ;; Parameters:    Size  Location     Type
 14063 ;;  slaveAddr       1    wreg     unsigned char 
 14064 ;;  pBuffer         2   17[BANK0 ] PTR unsigned char 
 14065 ;;		 -> data(8), b1(24), HMC5883L_ReadBit@tmp(1), HMC5883L_ReadBits@tmp(1), 
 14066 ;;		 -> HMC5883L_WriteBit@tmp(1), HMC5883L_WriteBits@tmp(1), heading(8), HMC5883L_TestConnection@tmp(3), 
 14067 ;;		 -> MPU6050_ReadBit@tmp(1), MPU6050_ReadBits@tmp(1), MPU6050_WriteBit@tmp(1), MPU6050_WriteBits@tmp(1), 
 14068 ;;		 -> MPU6050_GetRawAccel@tempBuffer(6), MPU6050_GetRawAccelGyro@tmpBuffer(14), 
 14069 ;;  ReadAddr        1   19[BANK0 ] unsigned char 
 14070 ;;  NumByteToRea    2   20[BANK0 ] unsigned short 
 14071 ;; Auto vars:     Size  Location     Type
 14072 ;;  slaveAddr       1   26[BANK0 ] unsigned char 
 14073 ;;  status          1   27[BANK0 ] enum E3025
 14074 ;; Return value:  Size  Location     Type
 14075 ;;                  1    wreg      unsigned char 
 14076 ;; Registers used:
 14077 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14078 ;; Tracked objects:
 14079 ;;		On entry : 0/0
 14080 ;;		On exit  : 0/0
 14081 ;;		Unchanged: 0/0
 14082 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14083 ;;      Params:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14084 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14085 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14086 ;;      Totals:         0      11       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14087 ;;Total ram usage:       11 bytes
 14088 ;; Hardware stack levels used:    1
 14089 ;; Hardware stack levels required when called:    6
 14090 ;; This function calls:
 14091 ;;		_I2C2_MasterRead
 14092 ;;		_I2C2_MasterWrite
 14093 ;;		_Timeout_hasExpired
 14094 ;;		_Timeout_setTimeout
 14095 ;; This function is called by:
 14096 ;;		_HMC5883L_I2C_BufferRead
 14097 ;;		_BMP_init
 14098 ;;		_BMP_readTemperature
 14099 ;; This function uses a non-reentrant model
 14100 ;;
 14101                           
 14102                           
 14103                           ;psect for function _I2C_BufferRead
 14104  09F2                     _I2C_BufferRead:	
 14105                           
 14106                           ;incstack = 0
 14107                           ; Regs used in _I2C_BufferRead: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 14108                           ;I2C_BufferRead@slaveAddr stored from wreg
 14109  09F2  0020               	movlb	0	; select bank0
 14110  09F3  00BA               	movwf	I2C_BufferRead@slaveAddr
 14111                           
 14112                           ;i2c_wrapper.c: 32: I2C2_MESSAGE_STATUS status=I2C2_MESSAGE_COMPLETE;
 14113  09F4  01BB               	clrf	I2C_BufferRead@status
 14114                           
 14115                           ;i2c_wrapper.c: 34: I2C2_MasterWrite(&ReadAddr, 1,slaveAddr, &status);
 14116  09F5  01A8               	clrf	I2C2_MasterWrite@length
 14117  09F6  0AA8               	incf	I2C2_MasterWrite@length,f
 14118  09F7  083A               	movf	I2C_BufferRead@slaveAddr,w
 14119  09F8  00B6               	movwf	??_I2C_BufferRead
 14120  09F9  01B7               	clrf	??_I2C_BufferRead+1
 14121  09FA  0836               	movf	??_I2C_BufferRead,w
 14122  09FB  00A9               	movwf	I2C2_MasterWrite@address
 14123  09FC  0837               	movf	??_I2C_BufferRead+1,w
 14124  09FD  00AA               	movwf	I2C2_MasterWrite@address+1
 14125  09FE  303B               	movlw	(low (I2C_BufferRead@status| 0))& (0+255)
 14126  09FF  00B8               	movwf	??_I2C_BufferRead+2
 14127  0A00  0838               	movf	??_I2C_BufferRead+2,w
 14128  0A01  00AB               	movwf	I2C2_MasterWrite@pflag
 14129  0A02  3033               	movlw	(low (I2C_BufferRead@ReadAddr| 0))& (0+255)
 14130  0A03  3197  2713  3189   	fcall	_I2C2_MasterWrite
 14131                           
 14132                           ;i2c_wrapper.c: 35: Timeout_setTimeout(200);
 14133  0A06  30C8               	movlw	200
 14134  0A07  0020               	movlb	0	; select bank0
 14135  0A08  00A1               	movwf	Timeout_setTimeout@val
 14136  0A09  3000               	movlw	0
 14137  0A0A  00A2               	movwf	Timeout_setTimeout@val+1
 14138  0A0B  3194  2497  3189   	fcall	_Timeout_setTimeout
 14139  0A0E                     l5633:	
 14140                           ;i2c_wrapper.c: 38: while(status == I2C2_MESSAGE_PENDING && Timeout_hasExpired()==0);
 14141                           
 14142  0A0E  3002               	movlw	2
 14143  0A0F  0020               	movlb	0	; select bank0
 14144  0A10  063B               	xorwf	I2C_BufferRead@status,w
 14145  0A11  1D03               	btfss	3,2
 14146  0A12  2A19               	goto	l5637
 14147  0A13  3188  20FD  3189   	fcall	_Timeout_hasExpired
 14148  0A16  3A00               	xorlw	0
 14149  0A17  1903               	skipnz
 14150  0A18  2A0E               	goto	l5633
 14151  0A19                     l5637:	
 14152                           
 14153                           ;i2c_wrapper.c: 40: if (status != I2C2_MESSAGE_COMPLETE)
 14154  0A19  0020               	movlb	0	; select bank0
 14155  0A1A  083B               	movf	I2C_BufferRead@status,w
 14156  0A1B  1903               	btfsc	3,2
 14157  0A1C  2A1F               	goto	l5643
 14158                           
 14159                           ;i2c_wrapper.c: 41: {
 14160                           ;i2c_wrapper.c: 42: return 0;
 14161  0A1D  3000               	movlw	0
 14162  0A1E  0008               	return
 14163  0A1F                     l5643:	
 14164                           
 14165                           ;i2c_wrapper.c: 43: }
 14166                           ;i2c_wrapper.c: 46: I2C2_MasterRead( pBuffer,NumByteToRead,slaveAddr,&status);
 14167  0A1F  0832               	movf	I2C_BufferRead@pBuffer+1,w
 14168  0A20  00AA               	movwf	I2C2_MasterRead@pdata+1
 14169  0A21  0831               	movf	I2C_BufferRead@pBuffer,w
 14170  0A22  00A9               	movwf	I2C2_MasterRead@pdata
 14171  0A23  0834               	movf	I2C_BufferRead@NumByteToRead,w
 14172  0A24  00B6               	movwf	??_I2C_BufferRead
 14173  0A25  0836               	movf	??_I2C_BufferRead,w
 14174  0A26  00AB               	movwf	I2C2_MasterRead@length
 14175  0A27  083A               	movf	I2C_BufferRead@slaveAddr,w
 14176  0A28  00B7               	movwf	??_I2C_BufferRead+1
 14177  0A29  01B8               	clrf	??_I2C_BufferRead+2
 14178  0A2A  0837               	movf	??_I2C_BufferRead+1,w
 14179  0A2B  00AC               	movwf	I2C2_MasterRead@address
 14180  0A2C  0838               	movf	??_I2C_BufferRead+2,w
 14181  0A2D  00AD               	movwf	I2C2_MasterRead@address+1
 14182  0A2E  303B               	movlw	(low (I2C_BufferRead@status| 0))& (0+255)
 14183  0A2F  00B9               	movwf	??_I2C_BufferRead+3
 14184  0A30  0839               	movf	??_I2C_BufferRead+3,w
 14185  0A31  00AE               	movwf	I2C2_MasterRead@pflag
 14186  0A32  3196  26EB  3189   	fcall	_I2C2_MasterRead
 14187                           
 14188                           ;i2c_wrapper.c: 47: Timeout_setTimeout(200);
 14189  0A35  30C8               	movlw	200
 14190  0A36  0020               	movlb	0	; select bank0
 14191  0A37  00A1               	movwf	Timeout_setTimeout@val
 14192  0A38  3000               	movlw	0
 14193  0A39  00A2               	movwf	Timeout_setTimeout@val+1
 14194  0A3A  3194  2497  3189   	fcall	_Timeout_setTimeout
 14195  0A3D                     l5647:	
 14196                           ;i2c_wrapper.c: 49: while(status == I2C2_MESSAGE_PENDING && Timeout_hasExpired()==0);
 14197                           
 14198  0A3D  3002               	movlw	2
 14199  0A3E  0020               	movlb	0	; select bank0
 14200  0A3F  063B               	xorwf	I2C_BufferRead@status,w
 14201  0A40  1D03               	btfss	3,2
 14202  0A41  2A48               	goto	l5651
 14203  0A42  3188  20FD  3189   	fcall	_Timeout_hasExpired
 14204  0A45  3A00               	xorlw	0
 14205  0A46  1903               	skipnz
 14206  0A47  2A3D               	goto	l5647
 14207  0A48                     l5651:	
 14208                           
 14209                           ;i2c_wrapper.c: 51: if (status == I2C2_MESSAGE_COMPLETE)
 14210  0A48  0020               	movlb	0	; select bank0
 14211  0A49  083B               	movf	I2C_BufferRead@status,w
 14212  0A4A  1D03               	btfss	3,2
 14213  0A4B  2A4E               	goto	l5659
 14214                           
 14215                           ;i2c_wrapper.c: 52: return 1;
 14216  0A4C  3001               	movlw	1
 14217  0A4D  0008               	return
 14218  0A4E                     l5659:	
 14219                           
 14220                           ;i2c_wrapper.c: 53: else
 14221                           ;i2c_wrapper.c: 54: return 0;
 14222  0A4E  3000               	movlw	0
 14223  0A4F  0008               	return
 14224  0A50                     __end_of_I2C_BufferRead:	
 14225                           
 14226                           	psect	text78
 14227  1497                     __ptext78:	
 14228 ;; *************** function _Timeout_setTimeout *****************
 14229 ;; Defined at:
 14230 ;;		line 26 in file "timeout.c"
 14231 ;; Parameters:    Size  Location     Type
 14232 ;;  val             2    1[BANK0 ] unsigned short 
 14233 ;; Auto vars:     Size  Location     Type
 14234 ;;		None
 14235 ;; Return value:  Size  Location     Type
 14236 ;;                  1    wreg      void 
 14237 ;; Registers used:
 14238 ;;		wreg
 14239 ;; Tracked objects:
 14240 ;;		On entry : 0/0
 14241 ;;		On exit  : 0/0
 14242 ;;		Unchanged: 0/0
 14243 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14244 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14245 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14246 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14247 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14248 ;;Total ram usage:        2 bytes
 14249 ;; Hardware stack levels used:    1
 14250 ;; Hardware stack levels required when called:    4
 14251 ;; This function calls:
 14252 ;;		Nothing
 14253 ;; This function is called by:
 14254 ;;		_I2C_ByteWrite
 14255 ;;		_I2C_BufferRead
 14256 ;; This function uses a non-reentrant model
 14257 ;;
 14258                           
 14259                           
 14260                           ;psect for function _Timeout_setTimeout
 14261  1497                     _Timeout_setTimeout:	
 14262                           
 14263                           ;timeout.c: 28: timeOut=val;
 14264                           
 14265                           ;incstack = 0
 14266                           ; Regs used in _Timeout_setTimeout: [wreg]
 14267  1497  0020               	movlb	0	; select bank0
 14268  1498  0822               	movf	Timeout_setTimeout@val+1,w
 14269  1499  0022               	movlb	2	; select bank2
 14270  149A  00BD               	movwf	(_timeOut+1)^(0+256)
 14271  149B  0020               	movlb	0	; select bank0
 14272  149C  0821               	movf	Timeout_setTimeout@val,w
 14273  149D  0022               	movlb	2	; select bank2
 14274  149E  00BC               	movwf	_timeOut^(0+256)
 14275                           
 14276                           ;timeout.c: 29: curr=globalCounter;
 14277  149F  0021               	movlb	1	; select bank1
 14278  14A0  0852               	movf	(_globalCounter+3)^(0+128),w	;volatile
 14279  14A1  0022               	movlb	2	; select bank2
 14280  14A2  00A3               	movwf	(_curr+3)^(0+256)
 14281  14A3  0021               	movlb	1	; select bank1
 14282  14A4  0851               	movf	(_globalCounter+2)^(0+128),w	;volatile
 14283  14A5  0022               	movlb	2	; select bank2
 14284  14A6  00A2               	movwf	(_curr+2)^(0+256)
 14285  14A7  0021               	movlb	1	; select bank1
 14286  14A8  0850               	movf	(_globalCounter+1)^(0+128),w	;volatile
 14287  14A9  0022               	movlb	2	; select bank2
 14288  14AA  00A1               	movwf	(_curr+1)^(0+256)
 14289  14AB  0021               	movlb	1	; select bank1
 14290  14AC  084F               	movf	_globalCounter^(0+128),w	;volatile
 14291  14AD  0022               	movlb	2	; select bank2
 14292  14AE  00A0               	movwf	_curr^(0+256)
 14293  14AF  0008               	return
 14294  14B0                     __end_of_Timeout_setTimeout:	
 14295                           
 14296                           	psect	text79
 14297  08FD                     __ptext79:	
 14298 ;; *************** function _Timeout_hasExpired *****************
 14299 ;; Defined at:
 14300 ;;		line 32 in file "timeout.c"
 14301 ;; Parameters:    Size  Location     Type
 14302 ;;		None
 14303 ;; Auto vars:     Size  Location     Type
 14304 ;;		None
 14305 ;; Return value:  Size  Location     Type
 14306 ;;                  1    wreg      unsigned char 
 14307 ;; Registers used:
 14308 ;;		wreg, status,2, status,0
 14309 ;; Tracked objects:
 14310 ;;		On entry : 0/0
 14311 ;;		On exit  : 0/0
 14312 ;;		Unchanged: 0/0
 14313 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14314 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14315 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14316 ;;      Temps:          0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14317 ;;      Totals:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14318 ;;Total ram usage:       12 bytes
 14319 ;; Hardware stack levels used:    1
 14320 ;; Hardware stack levels required when called:    4
 14321 ;; This function calls:
 14322 ;;		Nothing
 14323 ;; This function is called by:
 14324 ;;		_I2C_ByteWrite
 14325 ;;		_I2C_BufferRead
 14326 ;; This function uses a non-reentrant model
 14327 ;;
 14328                           
 14329                           
 14330                           ;psect for function _Timeout_hasExpired
 14331  08FD                     _Timeout_hasExpired:	
 14332                           
 14333                           ;timeout.c: 34: if(globalCounter-curr>timeOut)
 14334                           
 14335                           ;incstack = 0
 14336                           ; Regs used in _Timeout_hasExpired: [wreg+status,2+status,0]
 14337  08FD  0021               	movlb	1	; select bank1
 14338  08FE  084F               	movf	_globalCounter^(0+128),w	;volatile
 14339  08FF  0020               	movlb	0	; select bank0
 14340  0900  00A1               	movwf	??_Timeout_hasExpired
 14341  0901  0021               	movlb	1	; select bank1
 14342  0902  0850               	movf	(_globalCounter+1)^(0+128),w	;volatile
 14343  0903  0020               	movlb	0	; select bank0
 14344  0904  00A2               	movwf	??_Timeout_hasExpired+1
 14345  0905  0021               	movlb	1	; select bank1
 14346  0906  0851               	movf	(_globalCounter+2)^(0+128),w	;volatile
 14347  0907  0020               	movlb	0	; select bank0
 14348  0908  00A3               	movwf	??_Timeout_hasExpired+2
 14349  0909  0021               	movlb	1	; select bank1
 14350  090A  0852               	movf	(_globalCounter+3)^(0+128),w	;volatile
 14351  090B  0020               	movlb	0	; select bank0
 14352  090C  00A4               	movwf	??_Timeout_hasExpired+3
 14353  090D  0022               	movlb	2	; select bank2
 14354  090E  0920               	comf	_curr^(0+256),w
 14355  090F  0020               	movlb	0	; select bank0
 14356  0910  00A5               	movwf	??_Timeout_hasExpired+4
 14357  0911  0022               	movlb	2	; select bank2
 14358  0912  0921               	comf	(_curr+1)^(0+256),w
 14359  0913  0020               	movlb	0	; select bank0
 14360  0914  00A6               	movwf	??_Timeout_hasExpired+5
 14361  0915  0022               	movlb	2	; select bank2
 14362  0916  0922               	comf	(_curr+2)^(0+256),w
 14363  0917  0020               	movlb	0	; select bank0
 14364  0918  00A7               	movwf	??_Timeout_hasExpired+6
 14365  0919  0022               	movlb	2	; select bank2
 14366  091A  0923               	comf	(_curr+3)^(0+256),w
 14367  091B  0020               	movlb	0	; select bank0
 14368  091C  00A8               	movwf	??_Timeout_hasExpired+7
 14369  091D  0AA5               	incf	??_Timeout_hasExpired+4,f
 14370  091E  1903               	skipnz
 14371  091F  0AA6               	incf	??_Timeout_hasExpired+5,f
 14372  0920  1903               	skipnz
 14373  0921  0AA7               	incf	??_Timeout_hasExpired+6,f
 14374  0922  1903               	skipnz
 14375  0923  0AA8               	incf	??_Timeout_hasExpired+7,f
 14376  0924  0825               	movf	??_Timeout_hasExpired+4,w
 14377  0925  07A1               	addwf	??_Timeout_hasExpired,f
 14378  0926  0826               	movf	??_Timeout_hasExpired+5,w
 14379  0927  3DA2               	addwfc	??_Timeout_hasExpired+1,f
 14380  0928  0827               	movf	??_Timeout_hasExpired+6,w
 14381  0929  3DA3               	addwfc	??_Timeout_hasExpired+2,f
 14382  092A  0828               	movf	??_Timeout_hasExpired+7,w
 14383  092B  3DA4               	addwfc	??_Timeout_hasExpired+3,f
 14384  092C  0022               	movlb	2	; select bank2
 14385  092D  083C               	movf	_timeOut^(0+256),w
 14386  092E  0020               	movlb	0	; select bank0
 14387  092F  00A9               	movwf	??_Timeout_hasExpired+8
 14388  0930  0022               	movlb	2	; select bank2
 14389  0931  083D               	movf	(_timeOut+1)^(0+256),w
 14390  0932  0020               	movlb	0	; select bank0
 14391  0933  00AA               	movwf	??_Timeout_hasExpired+9
 14392  0934  01AB               	clrf	??_Timeout_hasExpired+10
 14393  0935  01AC               	clrf	??_Timeout_hasExpired+11
 14394  0936  0824               	movf	??_Timeout_hasExpired+3,w
 14395  0937  022C               	subwf	??_Timeout_hasExpired+11,w
 14396  0938  1D03               	skipz
 14397  0939  2944               	goto	u5065
 14398  093A  0823               	movf	??_Timeout_hasExpired+2,w
 14399  093B  022B               	subwf	??_Timeout_hasExpired+10,w
 14400  093C  1D03               	skipz
 14401  093D  2944               	goto	u5065
 14402  093E  0822               	movf	??_Timeout_hasExpired+1,w
 14403  093F  022A               	subwf	??_Timeout_hasExpired+9,w
 14404  0940  1D03               	skipz
 14405  0941  2944               	goto	u5065
 14406  0942  0821               	movf	??_Timeout_hasExpired,w
 14407  0943  0229               	subwf	??_Timeout_hasExpired+8,w
 14408  0944                     u5065:	
 14409  0944  1803               	skipnc
 14410  0945  2948               	goto	l5623
 14411                           
 14412                           ;timeout.c: 35: return 1;
 14413  0946  3001               	movlw	1
 14414  0947  0008               	return
 14415  0948                     l5623:	
 14416                           
 14417                           ;timeout.c: 36: else
 14418                           ;timeout.c: 37: return 0;
 14419  0948  3000               	movlw	0
 14420  0949  0008               	return
 14421  094A                     __end_of_Timeout_hasExpired:	
 14422                           
 14423                           	psect	text80
 14424  1713                     __ptext80:	
 14425 ;; *************** function _I2C2_MasterWrite *****************
 14426 ;; Defined at:
 14427 ;;		line 598 in file "mcc_generated_files/i2c2.c"
 14428 ;; Parameters:    Size  Location     Type
 14429 ;;  pdata           1    wreg     PTR unsigned char 
 14430 ;;		 -> I2C_BufferRead@ReadAddr(1), I2C_ByteWrite@data(2), 
 14431 ;;  length          1    8[BANK0 ] unsigned char 
 14432 ;;  address         2    9[BANK0 ] unsigned int 
 14433 ;;  pflag           1   11[BANK0 ] PTR enum E2993
 14434 ;;		 -> I2C_BufferRead@status(1), I2C_ByteWrite@status(1), 
 14435 ;; Auto vars:     Size  Location     Type
 14436 ;;  pdata           1   14[BANK0 ] PTR unsigned char 
 14437 ;;		 -> I2C_BufferRead@ReadAddr(1), I2C_ByteWrite@data(2), 
 14438 ;; Return value:  Size  Location     Type
 14439 ;;                  1    wreg      void 
 14440 ;; Registers used:
 14441 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14442 ;; Tracked objects:
 14443 ;;		On entry : 0/0
 14444 ;;		On exit  : 0/0
 14445 ;;		Unchanged: 0/0
 14446 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14447 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14448 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14449 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14450 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14451 ;;Total ram usage:        7 bytes
 14452 ;; Hardware stack levels used:    1
 14453 ;; Hardware stack levels required when called:    5
 14454 ;; This function calls:
 14455 ;;		_I2C2_MasterTRBInsert
 14456 ;;		_I2C2_MasterWriteTRBBuild
 14457 ;; This function is called by:
 14458 ;;		_I2C_ByteWrite
 14459 ;;		_I2C_BufferRead
 14460 ;; This function uses a non-reentrant model
 14461 ;;
 14462                           
 14463                           
 14464                           ;psect for function _I2C2_MasterWrite
 14465  1713                     _I2C2_MasterWrite:	
 14466                           
 14467                           ;incstack = 0
 14468                           ; Regs used in _I2C2_MasterWrite: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 14469                           ;I2C2_MasterWrite@pdata stored from wreg
 14470  1713  0020               	movlb	0	; select bank0
 14471  1714  00AE               	movwf	I2C2_MasterWrite@pdata
 14472                           
 14473                           ;i2c2.c: 604: static I2C2_TRANSACTION_REQUEST_BLOCK trBlock;
 14474                           ;i2c2.c: 607: if (i2c2_object.trStatus.s.full != 1)
 14475  1715  0021               	movlb	1	; select bank1
 14476  1716  184C               	btfsc	(_i2c2_object^(0+128)+2),0
 14477  1717  2F36               	goto	l5547
 14478                           
 14479                           ;i2c2.c: 608: {
 14480                           ;i2c2.c: 609: I2C2_MasterWriteTRBBuild(&trBlock, pdata, length, address);
 14481  1718  0020               	movlb	0	; select bank0
 14482  1719  082E               	movf	I2C2_MasterWrite@pdata,w
 14483  171A  00AC               	movwf	??_I2C2_MasterWrite
 14484  171B  082C               	movf	??_I2C2_MasterWrite,w
 14485  171C  00A1               	movwf	I2C2_MasterWriteTRBBuild@pdata
 14486  171D  0828               	movf	I2C2_MasterWrite@length,w
 14487  171E  00AD               	movwf	??_I2C2_MasterWrite+1
 14488  171F  082D               	movf	??_I2C2_MasterWrite+1,w
 14489  1720  00A2               	movwf	I2C2_MasterWriteTRBBuild@length
 14490  1721  082A               	movf	I2C2_MasterWrite@address+1,w
 14491  1722  00A4               	movwf	I2C2_MasterWriteTRBBuild@address+1
 14492  1723  0829               	movf	I2C2_MasterWrite@address,w
 14493  1724  00A3               	movwf	I2C2_MasterWriteTRBBuild@address
 14494  1725  305D               	movlw	(low (I2C2_MasterWrite@trBlock| (0+256)))& (0+255)
 14495  1726  3196  267F  3197   	fcall	_I2C2_MasterWriteTRBBuild
 14496                           
 14497                           ;i2c2.c: 610: I2C2_MasterTRBInsert(1, &trBlock, pflag);
 14498  1729  305D               	movlw	(low (I2C2_MasterWrite@trBlock| (0+256)))& (0+255)
 14499  172A  0020               	movlb	0	; select bank0
 14500  172B  00AC               	movwf	??_I2C2_MasterWrite
 14501  172C  082C               	movf	??_I2C2_MasterWrite,w
 14502  172D  00A1               	movwf	I2C2_MasterTRBInsert@ptrb_list
 14503  172E  082B               	movf	I2C2_MasterWrite@pflag,w
 14504  172F  00AD               	movwf	??_I2C2_MasterWrite+1
 14505  1730  082D               	movf	??_I2C2_MasterWrite+1,w
 14506  1731  00A2               	movwf	I2C2_MasterTRBInsert@pflag
 14507  1732  3001               	movlw	1
 14508  1733  3189  219D         	fcall	_I2C2_MasterTRBInsert
 14509                           
 14510                           ;i2c2.c: 611: }
 14511  1735  0008               	return
 14512  1736                     l5547:	
 14513                           
 14514                           ;i2c2.c: 612: else
 14515                           ;i2c2.c: 613: {
 14516                           ;i2c2.c: 614: *pflag = I2C2_MESSAGE_FAIL;
 14517  1736  0020               	movlb	0	; select bank0
 14518  1737  082B               	movf	I2C2_MasterWrite@pflag,w
 14519  1738  0086               	movwf	6
 14520  1739  0187               	clrf	7
 14521  173A  0181               	clrf	1
 14522  173B  0A81               	incf	1,f
 14523  173C  0008               	return
 14524  173D                     __end_of_I2C2_MasterWrite:	
 14525                           
 14526                           	psect	text81
 14527  167F                     __ptext81:	
 14528 ;; *************** function _I2C2_MasterWriteTRBBuild *****************
 14529 ;; Defined at:
 14530 ;;		line 708 in file "mcc_generated_files/i2c2.c"
 14531 ;; Parameters:    Size  Location     Type
 14532 ;;  ptrb            1    wreg     PTR struct .
 14533 ;;		 -> I2C2_MasterWrite@trBlock(5), 
 14534 ;;  pdata           1    1[BANK0 ] PTR unsigned char 
 14535 ;;		 -> I2C_BufferRead@ReadAddr(1), I2C_ByteWrite@data(2), 
 14536 ;;  length          1    2[BANK0 ] unsigned char 
 14537 ;;  address         2    3[BANK0 ] unsigned int 
 14538 ;; Auto vars:     Size  Location     Type
 14539 ;;  ptrb            1    7[BANK0 ] PTR struct .
 14540 ;;		 -> I2C2_MasterWrite@trBlock(5), 
 14541 ;; Return value:  Size  Location     Type
 14542 ;;                  1    wreg      void 
 14543 ;; Registers used:
 14544 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 14545 ;; Tracked objects:
 14546 ;;		On entry : 0/0
 14547 ;;		On exit  : 0/0
 14548 ;;		Unchanged: 0/0
 14549 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14550 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14551 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14552 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14553 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14554 ;;Total ram usage:        7 bytes
 14555 ;; Hardware stack levels used:    1
 14556 ;; Hardware stack levels required when called:    4
 14557 ;; This function calls:
 14558 ;;		Nothing
 14559 ;; This function is called by:
 14560 ;;		_I2C2_MasterWrite
 14561 ;; This function uses a non-reentrant model
 14562 ;;
 14563                           
 14564                           
 14565                           ;psect for function _I2C2_MasterWriteTRBBuild
 14566  167F                     _I2C2_MasterWriteTRBBuild:	
 14567                           
 14568                           ;incstack = 0
 14569                           ; Regs used in _I2C2_MasterWriteTRBBuild: [wreg+fsr1l+fsr1h+status,2+status,0]
 14570                           ;I2C2_MasterWriteTRBBuild@ptrb stored from wreg
 14571  167F  0020               	movlb	0	; select bank0
 14572  1680  00A7               	movwf	I2C2_MasterWriteTRBBuild@ptrb
 14573                           
 14574                           ;i2c2.c: 714: ptrb->address = address << 1;
 14575  1681  0824               	movf	I2C2_MasterWriteTRBBuild@address+1,w
 14576  1682  00A6               	movwf	??_I2C2_MasterWriteTRBBuild+1
 14577  1683  0823               	movf	I2C2_MasterWriteTRBBuild@address,w
 14578  1684  00A5               	movwf	??_I2C2_MasterWriteTRBBuild
 14579  1685  35A5               	lslf	??_I2C2_MasterWriteTRBBuild,f
 14580  1686  0DA6               	rlf	??_I2C2_MasterWriteTRBBuild+1,f
 14581  1687  0827               	movf	I2C2_MasterWriteTRBBuild@ptrb,w
 14582  1688  0086               	movwf	6
 14583  1689  3001               	movlw	1	; select bank2/3
 14584  168A  0087               	movwf	7
 14585  168B  0825               	movf	??_I2C2_MasterWriteTRBBuild,w
 14586  168C  3FC0               	movwi [0]fsr1
 14587  168D  0826               	movf	??_I2C2_MasterWriteTRBBuild+1,w
 14588  168E  3FC1               	movwi [1]fsr1
 14589                           
 14590                           ;i2c2.c: 715: ptrb->length = length;
 14591  168F  0822               	movf	I2C2_MasterWriteTRBBuild@length,w
 14592  1690  00A5               	movwf	??_I2C2_MasterWriteTRBBuild
 14593  1691  0827               	movf	I2C2_MasterWriteTRBBuild@ptrb,w
 14594  1692  3E02               	addlw	2
 14595  1693  0086               	movwf	6
 14596  1694  3001               	movlw	1	; select bank2/3
 14597  1695  0087               	movwf	7
 14598  1696  0825               	movf	??_I2C2_MasterWriteTRBBuild,w
 14599  1697  0081               	movwf	1
 14600                           
 14601                           ;i2c2.c: 716: ptrb->pbuffer = pdata;
 14602  1698  0827               	movf	I2C2_MasterWriteTRBBuild@ptrb,w
 14603  1699  3E03               	addlw	3
 14604  169A  0086               	movwf	6
 14605  169B  3001               	movlw	1	; select bank2/3
 14606  169C  0087               	movwf	7
 14607  169D  0821               	movf	I2C2_MasterWriteTRBBuild@pdata,w
 14608  169E  3FC0               	movwi [0]fsr1
 14609  169F  3000               	movlw	0
 14610  16A0  3FC1               	movwi [1]fsr1
 14611  16A1  0008               	return
 14612  16A2                     __end_of_I2C2_MasterWriteTRBBuild:	
 14613                           
 14614                           	psect	text82
 14615  16EB                     __ptext82:	
 14616 ;; *************** function _I2C2_MasterRead *****************
 14617 ;; Defined at:
 14618 ;;		line 619 in file "mcc_generated_files/i2c2.c"
 14619 ;; Parameters:    Size  Location     Type
 14620 ;;  pdata           2    9[BANK0 ] PTR unsigned char 
 14621 ;;		 -> data(8), b1(24), HMC5883L_ReadBit@tmp(1), HMC5883L_ReadBits@tmp(1), 
 14622 ;;		 -> HMC5883L_WriteBit@tmp(1), HMC5883L_WriteBits@tmp(1), heading(8), HMC5883L_TestConnection@tmp(3), 
 14623 ;;		 -> MPU6050_ReadBit@tmp(1), MPU6050_ReadBits@tmp(1), MPU6050_WriteBit@tmp(1), MPU6050_WriteBits@tmp(1), 
 14624 ;;		 -> MPU6050_GetRawAccel@tempBuffer(6), MPU6050_GetRawAccelGyro@tmpBuffer(14), 
 14625 ;;  length          1   11[BANK0 ] unsigned char 
 14626 ;;  address         2   12[BANK0 ] unsigned int 
 14627 ;;  pflag           1   14[BANK0 ] PTR enum E2993
 14628 ;;		 -> I2C_BufferRead@status(1), 
 14629 ;; Auto vars:     Size  Location     Type
 14630 ;;		None
 14631 ;; Return value:  Size  Location     Type
 14632 ;;                  1    wreg      void 
 14633 ;; Registers used:
 14634 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14635 ;; Tracked objects:
 14636 ;;		On entry : 0/0
 14637 ;;		On exit  : 0/0
 14638 ;;		Unchanged: 0/0
 14639 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14640 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14641 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14642 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14643 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14644 ;;Total ram usage:        8 bytes
 14645 ;; Hardware stack levels used:    1
 14646 ;; Hardware stack levels required when called:    5
 14647 ;; This function calls:
 14648 ;;		_I2C2_MasterReadTRBBuild
 14649 ;;		_I2C2_MasterTRBInsert
 14650 ;; This function is called by:
 14651 ;;		_I2C_BufferRead
 14652 ;; This function uses a non-reentrant model
 14653 ;;
 14654                           
 14655                           
 14656                           ;psect for function _I2C2_MasterRead
 14657  16EB                     _I2C2_MasterRead:	
 14658                           
 14659                           ;i2c2.c: 625: static I2C2_TRANSACTION_REQUEST_BLOCK trBlock;
 14660                           ;i2c2.c: 629: if (i2c2_object.trStatus.s.full != 1)
 14661                           
 14662                           ;incstack = 0
 14663                           ; Regs used in _I2C2_MasterRead: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 14664  16EB  0021               	movlb	1	; select bank1
 14665  16EC  184C               	btfsc	(_i2c2_object^(0+128)+2),0
 14666  16ED  2F0C               	goto	l5553
 14667                           
 14668                           ;i2c2.c: 630: {
 14669                           ;i2c2.c: 631: I2C2_MasterReadTRBBuild(&trBlock, pdata, length, address);
 14670  16EE  0020               	movlb	0	; select bank0
 14671  16EF  082A               	movf	I2C2_MasterRead@pdata+1,w
 14672  16F0  00A2               	movwf	I2C2_MasterReadTRBBuild@pdata+1
 14673  16F1  0829               	movf	I2C2_MasterRead@pdata,w
 14674  16F2  00A1               	movwf	I2C2_MasterReadTRBBuild@pdata
 14675  16F3  082B               	movf	I2C2_MasterRead@length,w
 14676  16F4  00AF               	movwf	??_I2C2_MasterRead
 14677  16F5  082F               	movf	??_I2C2_MasterRead,w
 14678  16F6  00A3               	movwf	I2C2_MasterReadTRBBuild@length
 14679  16F7  082D               	movf	I2C2_MasterRead@address+1,w
 14680  16F8  00A5               	movwf	I2C2_MasterReadTRBBuild@address+1
 14681  16F9  082C               	movf	I2C2_MasterRead@address,w
 14682  16FA  00A4               	movwf	I2C2_MasterReadTRBBuild@address
 14683  16FB  3058               	movlw	(low (I2C2_MasterRead@trBlock| (0+256)))& (0+255)
 14684  16FC  3197  2768  3196   	fcall	_I2C2_MasterReadTRBBuild
 14685                           
 14686                           ;i2c2.c: 632: I2C2_MasterTRBInsert(1, &trBlock, pflag);
 14687  16FF  3058               	movlw	(low (I2C2_MasterRead@trBlock| (0+256)))& (0+255)
 14688  1700  0020               	movlb	0	; select bank0
 14689  1701  00AF               	movwf	??_I2C2_MasterRead
 14690  1702  082F               	movf	??_I2C2_MasterRead,w
 14691  1703  00A1               	movwf	I2C2_MasterTRBInsert@ptrb_list
 14692  1704  082E               	movf	I2C2_MasterRead@pflag,w
 14693  1705  00B0               	movwf	??_I2C2_MasterRead+1
 14694  1706  0830               	movf	??_I2C2_MasterRead+1,w
 14695  1707  00A2               	movwf	I2C2_MasterTRBInsert@pflag
 14696  1708  3001               	movlw	1
 14697  1709  3189  219D         	fcall	_I2C2_MasterTRBInsert
 14698                           
 14699                           ;i2c2.c: 633: }
 14700  170B  0008               	return
 14701  170C                     l5553:	
 14702                           
 14703                           ;i2c2.c: 634: else
 14704                           ;i2c2.c: 635: {
 14705                           ;i2c2.c: 636: *pflag = I2C2_MESSAGE_FAIL;
 14706  170C  0020               	movlb	0	; select bank0
 14707  170D  082E               	movf	I2C2_MasterRead@pflag,w
 14708  170E  0086               	movwf	6
 14709  170F  0187               	clrf	7
 14710  1710  0181               	clrf	1
 14711  1711  0A81               	incf	1,f
 14712  1712  0008               	return
 14713  1713                     __end_of_I2C2_MasterRead:	
 14714                           
 14715                           	psect	text83
 14716  099D                     __ptext83:	
 14717 ;; *************** function _I2C2_MasterTRBInsert *****************
 14718 ;; Defined at:
 14719 ;;		line 641 in file "mcc_generated_files/i2c2.c"
 14720 ;; Parameters:    Size  Location     Type
 14721 ;;  count           1    wreg     unsigned char 
 14722 ;;  ptrb_list       1    1[BANK0 ] PTR struct .
 14723 ;;		 -> I2C2_MasterRead@trBlock(5), I2C2_MasterWrite@trBlock(5), 
 14724 ;;  pflag           1    2[BANK0 ] PTR enum E2993
 14725 ;;		 -> I2C_BufferRead@status(1), I2C_ByteWrite@status(1), 
 14726 ;; Auto vars:     Size  Location     Type
 14727 ;;  count           1    4[BANK0 ] unsigned char 
 14728 ;; Return value:  Size  Location     Type
 14729 ;;                  1    wreg      void 
 14730 ;; Registers used:
 14731 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 14732 ;; Tracked objects:
 14733 ;;		On entry : 0/0
 14734 ;;		On exit  : 0/0
 14735 ;;		Unchanged: 0/0
 14736 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14737 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14738 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14739 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14740 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14741 ;;Total ram usage:        4 bytes
 14742 ;; Hardware stack levels used:    1
 14743 ;; Hardware stack levels required when called:    4
 14744 ;; This function calls:
 14745 ;;		Nothing
 14746 ;; This function is called by:
 14747 ;;		_I2C2_MasterWrite
 14748 ;;		_I2C2_MasterRead
 14749 ;; This function uses a non-reentrant model
 14750 ;;
 14751                           
 14752                           
 14753                           ;psect for function _I2C2_MasterTRBInsert
 14754  099D                     _I2C2_MasterTRBInsert:	
 14755                           
 14756                           ;incstack = 0
 14757                           ; Regs used in _I2C2_MasterTRBInsert: [wreg+fsr1l+fsr1h+status,2+status,0]
 14758                           ;I2C2_MasterTRBInsert@count stored from wreg
 14759  099D  0020               	movlb	0	; select bank0
 14760  099E  00A4               	movwf	I2C2_MasterTRBInsert@count
 14761                           
 14762                           ;i2c2.c: 648: if (i2c2_object.trStatus.s.full != 1)
 14763  099F  0021               	movlb	1	; select bank1
 14764  09A0  184C               	btfsc	(_i2c2_object^(0+128)+2),0
 14765  09A1  29DF               	goto	l5525
 14766                           
 14767                           ;i2c2.c: 649: {
 14768                           ;i2c2.c: 650: *pflag = I2C2_MESSAGE_PENDING;
 14769  09A2  3002               	movlw	2
 14770  09A3  0020               	movlb	0	; select bank0
 14771  09A4  00A3               	movwf	??_I2C2_MasterTRBInsert
 14772  09A5  0822               	movf	I2C2_MasterTRBInsert@pflag,w
 14773  09A6  0086               	movwf	6
 14774  09A7  0187               	clrf	7
 14775  09A8  0823               	movf	??_I2C2_MasterTRBInsert,w
 14776  09A9  0081               	movwf	1
 14777                           
 14778                           ;i2c2.c: 652: i2c2_object.pTrTail->ptrb_list = ptrb_list;
 14779  09AA  0821               	movf	I2C2_MasterTRBInsert@ptrb_list,w
 14780  09AB  00A3               	movwf	??_I2C2_MasterTRBInsert
 14781  09AC  0021               	movlb	1	; select bank1
 14782  09AD  0A4A               	incf	_i2c2_object^(0+128),w
 14783  09AE  0086               	movwf	6
 14784  09AF  3001               	movlw	1	; select bank2/3
 14785  09B0  0087               	movwf	7
 14786  09B1  0020               	movlb	0	; select bank0
 14787  09B2  0823               	movf	??_I2C2_MasterTRBInsert,w
 14788  09B3  0081               	movwf	1
 14789                           
 14790                           ;i2c2.c: 653: i2c2_object.pTrTail->count = count;
 14791  09B4  0824               	movf	I2C2_MasterTRBInsert@count,w
 14792  09B5  00A3               	movwf	??_I2C2_MasterTRBInsert
 14793  09B6  0021               	movlb	1	; select bank1
 14794  09B7  084A               	movf	_i2c2_object^(0+128),w
 14795  09B8  0086               	movwf	6
 14796  09B9  3001               	movlw	1	; select bank2/3
 14797  09BA  0087               	movwf	7
 14798  09BB  0020               	movlb	0	; select bank0
 14799  09BC  0823               	movf	??_I2C2_MasterTRBInsert,w
 14800  09BD  0081               	movwf	1
 14801                           
 14802                           ;i2c2.c: 654: i2c2_object.pTrTail->pTrFlag = pflag;
 14803  09BE  0021               	movlb	1	; select bank1
 14804  09BF  084A               	movf	_i2c2_object^(0+128),w
 14805  09C0  3E02               	addlw	2
 14806  09C1  0086               	movwf	6
 14807  09C2  3001               	movlw	1	; select bank2/3
 14808  09C3  0087               	movwf	7
 14809  09C4  0020               	movlb	0	; select bank0
 14810  09C5  0822               	movf	I2C2_MasterTRBInsert@pflag,w
 14811  09C6  3FC0               	movwi [0]fsr1
 14812  09C7  3000               	movlw	0
 14813  09C8  3FC1               	movwi [1]fsr1
 14814                           
 14815                           ;i2c2.c: 655: i2c2_object.pTrTail++;
 14816  09C9  3004               	movlw	4
 14817  09CA  00A3               	movwf	??_I2C2_MasterTRBInsert
 14818  09CB  0823               	movf	??_I2C2_MasterTRBInsert,w
 14819  09CC  0021               	movlb	1	; select bank1
 14820  09CD  07CA               	addwf	_i2c2_object^(0+128),f
 14821                           
 14822                           ;i2c2.c: 658: if (i2c2_object.pTrTail == (i2c2_tr_queue + 1))
 14823  09CE  084A               	movf	_i2c2_object^(0+128),w
 14824  09CF  3A66               	xorlw	(low ((_i2c2_tr_queue| (0+256)+4)))& (0+255)
 14825  09D0  1D03               	skipz
 14826  09D1  29D8               	goto	l5521
 14827                           
 14828                           ;i2c2.c: 659: {
 14829                           ;i2c2.c: 661: i2c2_object.pTrTail = i2c2_tr_queue;
 14830  09D2  3062               	movlw	(low (_i2c2_tr_queue| (0+256)))& (0+255)
 14831  09D3  0020               	movlb	0	; select bank0
 14832  09D4  00A3               	movwf	??_I2C2_MasterTRBInsert
 14833  09D5  0823               	movf	??_I2C2_MasterTRBInsert,w
 14834  09D6  0021               	movlb	1	; select bank1
 14835  09D7  00CA               	movwf	_i2c2_object^(0+128)
 14836  09D8                     l5521:	
 14837                           
 14838                           ;i2c2.c: 662: }
 14839                           ;i2c2.c: 666: i2c2_object.trStatus.s.empty = 0;
 14840  09D8  10CC               	bcf	(_i2c2_object^(0+128)+2),1
 14841                           
 14842                           ;i2c2.c: 669: if (i2c2_object.pTrHead == i2c2_object.pTrTail)
 14843  09D9  084B               	movf	(low ((_i2c2_object| 0+1)))^(0+128),w
 14844  09DA  064A               	xorwf	_i2c2_object^(0+128),w
 14845  09DB  1D03               	skipz
 14846  09DC  29E5               	goto	l5527
 14847                           
 14848                           ;i2c2.c: 670: {
 14849                           ;i2c2.c: 672: i2c2_object.trStatus.s.full = 1;
 14850  09DD  144C               	bsf	(_i2c2_object^(0+128)+2),0
 14851                           
 14852                           ;i2c2.c: 673: }
 14853                           ;i2c2.c: 675: }
 14854  09DE  29E5               	goto	l5527
 14855  09DF                     l5525:	
 14856                           
 14857                           ;i2c2.c: 676: else
 14858                           ;i2c2.c: 677: {
 14859                           ;i2c2.c: 678: *pflag = I2C2_MESSAGE_FAIL;
 14860  09DF  0020               	movlb	0	; select bank0
 14861  09E0  0822               	movf	I2C2_MasterTRBInsert@pflag,w
 14862  09E1  0086               	movwf	6
 14863  09E2  0187               	clrf	7
 14864  09E3  0181               	clrf	1
 14865  09E4  0A81               	incf	1,f
 14866  09E5                     l5527:	
 14867                           
 14868                           ;i2c2.c: 679: }
 14869                           ;i2c2.c: 682: if (*pflag == I2C2_MESSAGE_PENDING)
 14870  09E5  0020               	movlb	0	; select bank0
 14871  09E6  0822               	movf	I2C2_MasterTRBInsert@pflag,w
 14872  09E7  0086               	movwf	6
 14873  09E8  0187               	clrf	7
 14874  09E9  3002               	movlw	2
 14875  09EA  0601               	xorwf	1,w
 14876  09EB  1D03               	btfss	3,2
 14877  09EC  0008               	return
 14878  09ED                     l358:	
 14879                           ;i2c2.c: 685: while(i2c2_state != S_MASTER_IDLE)
 14880                           
 14881                           ;i2c2.c: 683: {
 14882                           ;i2c2.c: 684: PIR4bits.SSP2IF = 1;
 14883                           
 14884                           
 14885                           ;i2c2.c: 686: {
 14886                           ;i2c2.c: 689: PIR4bits.SSP2IF = 1;
 14887  09ED  1414               	bsf	20,0	;volatile
 14888  09EE  0879               	movf	_i2c2_state,w
 14889  09EF  1903               	btfsc	3,2
 14890  09F0  0008               	return
 14891  09F1  29ED               	goto	l358
 14892  09F2                     __end_of_I2C2_MasterTRBInsert:	
 14893                           
 14894                           	psect	text84
 14895  1768                     __ptext84:	
 14896 ;; *************** function _I2C2_MasterReadTRBBuild *****************
 14897 ;; Defined at:
 14898 ;;		line 695 in file "mcc_generated_files/i2c2.c"
 14899 ;; Parameters:    Size  Location     Type
 14900 ;;  ptrb            1    wreg     PTR struct .
 14901 ;;		 -> I2C2_MasterRead@trBlock(5), 
 14902 ;;  pdata           2    1[BANK0 ] PTR unsigned char 
 14903 ;;		 -> data(8), b1(24), HMC5883L_ReadBit@tmp(1), HMC5883L_ReadBits@tmp(1), 
 14904 ;;		 -> HMC5883L_WriteBit@tmp(1), HMC5883L_WriteBits@tmp(1), heading(8), HMC5883L_TestConnection@tmp(3), 
 14905 ;;		 -> MPU6050_ReadBit@tmp(1), MPU6050_ReadBits@tmp(1), MPU6050_WriteBit@tmp(1), MPU6050_WriteBits@tmp(1), 
 14906 ;;		 -> MPU6050_GetRawAccel@tempBuffer(6), MPU6050_GetRawAccelGyro@tmpBuffer(14), 
 14907 ;;  length          1    3[BANK0 ] unsigned char 
 14908 ;;  address         2    4[BANK0 ] unsigned int 
 14909 ;; Auto vars:     Size  Location     Type
 14910 ;;  ptrb            1    8[BANK0 ] PTR struct .
 14911 ;;		 -> I2C2_MasterRead@trBlock(5), 
 14912 ;; Return value:  Size  Location     Type
 14913 ;;                  1    wreg      void 
 14914 ;; Registers used:
 14915 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 14916 ;; Tracked objects:
 14917 ;;		On entry : 0/0
 14918 ;;		On exit  : 0/0
 14919 ;;		Unchanged: 0/0
 14920 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14921 ;;      Params:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14922 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14923 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14924 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14925 ;;Total ram usage:        8 bytes
 14926 ;; Hardware stack levels used:    1
 14927 ;; Hardware stack levels required when called:    4
 14928 ;; This function calls:
 14929 ;;		Nothing
 14930 ;; This function is called by:
 14931 ;;		_I2C2_MasterRead
 14932 ;; This function uses a non-reentrant model
 14933 ;;
 14934                           
 14935                           
 14936                           ;psect for function _I2C2_MasterReadTRBBuild
 14937  1768                     _I2C2_MasterReadTRBBuild:	
 14938                           
 14939                           ;incstack = 0
 14940                           ; Regs used in _I2C2_MasterReadTRBBuild: [wreg+fsr1l+fsr1h+status,2+status,0]
 14941                           ;I2C2_MasterReadTRBBuild@ptrb stored from wreg
 14942  1768  0020               	movlb	0	; select bank0
 14943  1769  00A8               	movwf	I2C2_MasterReadTRBBuild@ptrb
 14944                           
 14945                           ;i2c2.c: 701: ptrb->address = address << 1;
 14946  176A  0825               	movf	I2C2_MasterReadTRBBuild@address+1,w
 14947  176B  00A7               	movwf	??_I2C2_MasterReadTRBBuild+1
 14948  176C  0824               	movf	I2C2_MasterReadTRBBuild@address,w
 14949  176D  00A6               	movwf	??_I2C2_MasterReadTRBBuild
 14950  176E  35A6               	lslf	??_I2C2_MasterReadTRBBuild,f
 14951  176F  0DA7               	rlf	??_I2C2_MasterReadTRBBuild+1,f
 14952  1770  0828               	movf	I2C2_MasterReadTRBBuild@ptrb,w
 14953  1771  0086               	movwf	6
 14954  1772  3001               	movlw	1	; select bank2/3
 14955  1773  0087               	movwf	7
 14956  1774  0826               	movf	??_I2C2_MasterReadTRBBuild,w
 14957  1775  3FC0               	movwi [0]fsr1
 14958  1776  0827               	movf	??_I2C2_MasterReadTRBBuild+1,w
 14959  1777  3FC1               	movwi [1]fsr1
 14960                           
 14961                           ;i2c2.c: 703: ptrb->address |= 0x01;
 14962  1778  0828               	movf	I2C2_MasterReadTRBBuild@ptrb,w
 14963  1779  0086               	movwf	6
 14964  177A  3001               	movlw	1	; select bank2/3
 14965  177B  0087               	movwf	7
 14966  177C  3001               	movlw	1
 14967  177D  0481               	iorwf	1,f
 14968  177E  3141               	addfsr 1,1
 14969  177F  3000               	movlw	0
 14970  1780  0481               	iorwf	1,f
 14971                           
 14972                           ;i2c2.c: 704: ptrb->length = length;
 14973  1781  0823               	movf	I2C2_MasterReadTRBBuild@length,w
 14974  1782  00A6               	movwf	??_I2C2_MasterReadTRBBuild
 14975  1783  0828               	movf	I2C2_MasterReadTRBBuild@ptrb,w
 14976  1784  3E02               	addlw	2
 14977  1785  0086               	movwf	6
 14978  1786  3001               	movlw	1	; select bank2/3
 14979  1787  0087               	movwf	7
 14980  1788  0826               	movf	??_I2C2_MasterReadTRBBuild,w
 14981  1789  0081               	movwf	1
 14982                           
 14983                           ;i2c2.c: 705: ptrb->pbuffer = pdata;
 14984  178A  0828               	movf	I2C2_MasterReadTRBBuild@ptrb,w
 14985  178B  3E03               	addlw	3
 14986  178C  0086               	movwf	6
 14987  178D  3001               	movlw	1	; select bank2/3
 14988  178E  0087               	movwf	7
 14989  178F  0821               	movf	I2C2_MasterReadTRBBuild@pdata,w
 14990  1790  3FC0               	movwi [0]fsr1
 14991  1791  0822               	movf	I2C2_MasterReadTRBBuild@pdata+1,w
 14992  1792  3FC1               	movwi [1]fsr1
 14993  1793  0008               	return
 14994  1794                     __end_of_I2C2_MasterReadTRBBuild:	
 14995                           
 14996                           	psect	text85
 14997  1300                     __ptext85:	
 14998 ;; *************** function _Diag_setTempSensorHealth *****************
 14999 ;; Defined at:
 15000 ;;		line 15 in file "diagnostics.c"
 15001 ;; Parameters:    Size  Location     Type
 15002 ;;  health          1    wreg     unsigned char 
 15003 ;; Auto vars:     Size  Location     Type
 15004 ;;  health          1    2[BANK0 ] unsigned char 
 15005 ;; Return value:  Size  Location     Type
 15006 ;;                  1    wreg      void 
 15007 ;; Registers used:
 15008 ;;		wreg
 15009 ;; Tracked objects:
 15010 ;;		On entry : 0/0
 15011 ;;		On exit  : 0/0
 15012 ;;		Unchanged: 0/0
 15013 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15014 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15015 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15016 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15017 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15018 ;;Total ram usage:        2 bytes
 15019 ;; Hardware stack levels used:    1
 15020 ;; Hardware stack levels required when called:    4
 15021 ;; This function calls:
 15022 ;;		Nothing
 15023 ;; This function is called by:
 15024 ;;		_BMP_init
 15025 ;;		_BMP_readTemperature
 15026 ;; This function uses a non-reentrant model
 15027 ;;
 15028                           
 15029                           
 15030                           ;psect for function _Diag_setTempSensorHealth
 15031  1300                     _Diag_setTempSensorHealth:	
 15032                           
 15033                           ;incstack = 0
 15034                           ; Regs used in _Diag_setTempSensorHealth: [wreg]
 15035                           ;Diag_setTempSensorHealth@health stored from wreg
 15036  1300  0020               	movlb	0	; select bank0
 15037  1301  00A2               	movwf	Diag_setTempSensorHealth@health
 15038                           
 15039                           ;diagnostics.c: 17: sensorHealth.tempSensorHealth=health;
 15040  1302  0822               	movf	Diag_setTempSensorHealth@health,w
 15041  1303  00A1               	movwf	??_Diag_setTempSensorHealth
 15042  1304  0821               	movf	??_Diag_setTempSensorHealth,w
 15043  1305  0021               	movlb	1	; select bank1
 15044  1306  00E3               	movwf	_sensorHealth^(0+128)
 15045  1307  0008               	return
 15046  1308                     __end_of_Diag_setTempSensorHealth:	
 15047                           
 15048                           	psect	intentry
 15049  0004                     __pintentry:	
 15050 ;; *************** function _INTERRUPT_InterruptManager *****************
 15051 ;; Defined at:
 15052 ;;		line 51 in file "mcc_generated_files/interrupt_manager.c"
 15053 ;; Parameters:    Size  Location     Type
 15054 ;;		None
 15055 ;; Auto vars:     Size  Location     Type
 15056 ;;		None
 15057 ;; Return value:  Size  Location     Type
 15058 ;;                  1    wreg      void 
 15059 ;; Registers used:
 15060 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15061 ;; Tracked objects:
 15062 ;;		On entry : 0/0
 15063 ;;		On exit  : 0/0
 15064 ;;		Unchanged: 0/0
 15065 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15066 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15067 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15068 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15069 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15070 ;;Total ram usage:        1 bytes
 15071 ;; Hardware stack levels used:    1
 15072 ;; Hardware stack levels required when called:    3
 15073 ;; This function calls:
 15074 ;;		_I2C2_BusCollisionISR
 15075 ;;		_I2C2_ISR
 15076 ;;		_PIN_MANAGER_IOC
 15077 ;;		_TMR1_ISR
 15078 ;; This function is called by:
 15079 ;;		Interrupt level 1
 15080 ;; This function uses a non-reentrant model
 15081 ;;
 15082                           
 15083  0004                     _INTERRUPT_InterruptManager:	
 15084                           
 15085                           ;incstack = 0
 15086  0004  147E               	bsf	126,0	;set compiler interrupt flag (level 1)
 15087                           
 15088                           ; Regs used in _INTERRUPT_InterruptManager: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 15089  0005  3180               	pagesel	$
 15090  0006  0020               	movlb	0	; select bank0
 15091  0007  087F               	movf	127,w
 15092  0008  00A0               	movwf	??_INTERRUPT_InterruptManager
 15093                           
 15094                           ;interrupt_manager.c: 54: if(INTCONbits.PEIE == 1 && PIE4bits.BCL2IE == 1 && PIR4bits.BC
      +                          L2IF == 1)
 15095  0009  1F0B               	btfss	11,6	;volatile
 15096  000A  2815               	goto	i1l153
 15097  000B  0021               	movlb	1	; select bank1
 15098  000C  1C94               	btfss	20,1	;volatile
 15099  000D  2815               	goto	i1l153
 15100  000E  0020               	movlb	0	; select bank0
 15101  000F  1C94               	btfss	20,1	;volatile
 15102  0010  2815               	goto	i1l153
 15103                           
 15104                           ;interrupt_manager.c: 55: {
 15105                           ;interrupt_manager.c: 56: I2C2_BusCollisionISR();
 15106  0011  3192  22A0  3180   	fcall	_I2C2_BusCollisionISR
 15107                           
 15108                           ;interrupt_manager.c: 57: }
 15109  0014  2832               	goto	i1l161
 15110  0015                     i1l153:	
 15111                           
 15112                           ;interrupt_manager.c: 58: else if(INTCONbits.PEIE == 1 && PIE4bits.SSP2IE == 1 && PIR4bi
      +                          ts.SSP2IF == 1)
 15113  0015  1F0B               	btfss	11,6	;volatile
 15114  0016  2821               	goto	i1l155
 15115  0017  0021               	movlb	1	; select bank1
 15116  0018  1C14               	btfss	20,0	;volatile
 15117  0019  2821               	goto	i1l155
 15118  001A  0020               	movlb	0	; select bank0
 15119  001B  1C14               	btfss	20,0	;volatile
 15120  001C  2821               	goto	i1l155
 15121                           
 15122                           ;interrupt_manager.c: 59: {
 15123                           ;interrupt_manager.c: 60: I2C2_ISR();
 15124  001D  3185  2544  3180   	fcall	_I2C2_ISR
 15125                           
 15126                           ;interrupt_manager.c: 61: }
 15127  0020  2832               	goto	i1l161
 15128  0021                     i1l155:	
 15129                           
 15130                           ;interrupt_manager.c: 62: else if(INTCONbits.PEIE == 1 && PIE1bits.TMR1IE == 1 && PIR1bi
      +                          ts.TMR1IF == 1)
 15131  0021  1F0B               	btfss	11,6	;volatile
 15132  0022  282D               	goto	i1l157
 15133  0023  0021               	movlb	1	; select bank1
 15134  0024  1C11               	btfss	17,0	;volatile
 15135  0025  282D               	goto	i1l157
 15136  0026  0020               	movlb	0	; select bank0
 15137  0027  1C11               	btfss	17,0	;volatile
 15138  0028  282D               	goto	i1l157
 15139                           
 15140                           ;interrupt_manager.c: 63: {
 15141                           ;interrupt_manager.c: 64: TMR1_ISR();
 15142  0029  3193  2318  3180   	fcall	_TMR1_ISR
 15143                           
 15144                           ;interrupt_manager.c: 65: }
 15145  002C  2832               	goto	i1l161
 15146  002D                     i1l157:	
 15147                           
 15148                           ;interrupt_manager.c: 66: else if(INTCONbits.IOCIE == 1 && INTCONbits.IOCIF == 1)
 15149  002D  198B               	btfsc	11,3	;volatile
 15150  002E  1C0B               	btfss	11,0	;volatile
 15151  002F  2832               	goto	i1l161
 15152                           
 15153                           ;interrupt_manager.c: 67: {
 15154                           ;interrupt_manager.c: 68: PIN_MANAGER_IOC();
 15155  0030  3192  22D3         	fcall	_PIN_MANAGER_IOC
 15156  0032                     i1l161:	
 15157                           ;interrupt_manager.c: 70: else
 15158                           ;interrupt_manager.c: 71: {
 15159                           
 15160                           ;interrupt_manager.c: 69: }
 15161                           
 15162  0032  0020               	movlb	0	; select bank0
 15163  0033  0820               	movf	??_INTERRUPT_InterruptManager,w
 15164  0034  00FF               	movwf	127
 15165  0035  107E               	bcf	126,0	;clear compiler interrupt flag (level 1)
 15166  0036  0009               	retfie
 15167  0037                     __end_of_INTERRUPT_InterruptManager:	
 15168                           
 15169                           	psect	text87
 15170  1318                     __ptext87:	
 15171 ;; *************** function _TMR1_ISR *****************
 15172 ;; Defined at:
 15173 ;;		line 157 in file "mcc_generated_files/tmr1.c"
 15174 ;; Parameters:    Size  Location     Type
 15175 ;;		None
 15176 ;; Auto vars:     Size  Location     Type
 15177 ;;		None
 15178 ;; Return value:  Size  Location     Type
 15179 ;;                  1    wreg      void 
 15180 ;; Registers used:
 15181 ;;		wreg, status,2, status,0, pclath, cstack
 15182 ;; Tracked objects:
 15183 ;;		On entry : 0/0
 15184 ;;		On exit  : 0/0
 15185 ;;		Unchanged: 0/0
 15186 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15187 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15188 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15189 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15190 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15191 ;;Total ram usage:        0 bytes
 15192 ;; Hardware stack levels used:    1
 15193 ;; Hardware stack levels required when called:    2
 15194 ;; This function calls:
 15195 ;;		_TMR1_CallBack
 15196 ;; This function is called by:
 15197 ;;		_INTERRUPT_InterruptManager
 15198 ;; This function uses a non-reentrant model
 15199 ;;
 15200                           
 15201                           
 15202                           ;psect for function _TMR1_ISR
 15203  1318                     _TMR1_ISR:	
 15204                           
 15205                           ;tmr1.c: 161: PIR1bits.TMR1IF = 0;
 15206                           
 15207                           ;incstack = 0
 15208                           ; Regs used in _TMR1_ISR: [wreg+status,2+status,0+pclath+cstack]
 15209  1318  0020               	movlb	0	; select bank0
 15210  1319  1011               	bcf	17,0	;volatile
 15211                           
 15212                           ;tmr1.c: 163: TMR1H = (timer1ReloadVal >> 8);
 15213  131A  087D               	movf	_timer1ReloadVal+1,w	;volatile
 15214  131B  0097               	movwf	23	;volatile
 15215                           
 15216                           ;tmr1.c: 164: TMR1L = timer1ReloadVal;
 15217  131C  087C               	movf	_timer1ReloadVal,w	;volatile
 15218  131D  0096               	movwf	22	;volatile
 15219                           
 15220                           ;tmr1.c: 168: TMR1_CallBack();
 15221  131E  3193  2375         	fcall	_TMR1_CallBack
 15222  1320  0008               	return
 15223  1321                     __end_of_TMR1_ISR:	
 15224                           
 15225                           	psect	text88
 15226  1375                     __ptext88:	
 15227 ;; *************** function _TMR1_CallBack *****************
 15228 ;; Defined at:
 15229 ;;		line 171 in file "mcc_generated_files/tmr1.c"
 15230 ;; Parameters:    Size  Location     Type
 15231 ;;		None
 15232 ;; Auto vars:     Size  Location     Type
 15233 ;;		None
 15234 ;; Return value:  Size  Location     Type
 15235 ;;                  1    wreg      void 
 15236 ;; Registers used:
 15237 ;;		wreg, status,2, status,0, pclath, cstack
 15238 ;; Tracked objects:
 15239 ;;		On entry : 0/0
 15240 ;;		On exit  : 0/0
 15241 ;;		Unchanged: 0/0
 15242 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15243 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15244 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15245 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15246 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15247 ;;Total ram usage:        0 bytes
 15248 ;; Hardware stack levels used:    1
 15249 ;; Hardware stack levels required when called:    1
 15250 ;; This function calls:
 15251 ;;		Absolute function
 15252 ;;		_TMR1_DefaultInterruptHandler
 15253 ;;		_Timeout_increment
 15254 ;; This function is called by:
 15255 ;;		_TMR1_ISR
 15256 ;; This function uses a non-reentrant model
 15257 ;;
 15258                           
 15259                           
 15260                           ;psect for function _TMR1_CallBack
 15261  1375                     _TMR1_CallBack:	
 15262                           
 15263                           ;tmr1.c: 174: Timeout_increment();
 15264                           
 15265                           ;incstack = 0
 15266                           ; Regs used in _TMR1_CallBack: [wreg+status,2+status,0+pclath+cstack]
 15267  1375  3193  2345  3193   	fcall	_Timeout_increment
 15268                           
 15269                           ;tmr1.c: 175: if(TMR1_InterruptHandler)
 15270  1378  0022               	movlb	2	; select bank2
 15271  1379  0866               	movf	_TMR1_InterruptHandler^(0+256),w
 15272  137A  0467               	iorwf	(_TMR1_InterruptHandler+1)^(0+256),w
 15273  137B  1903               	btfsc	3,2
 15274  137C  0008               	return
 15275                           
 15276                           ;tmr1.c: 176: {
 15277                           ;tmr1.c: 177: TMR1_InterruptHandler();
 15278  137D  0867               	movf	(_TMR1_InterruptHandler+1)^(0+256),w
 15279  137E  008A               	movwf	10
 15280  137F  0866               	movf	_TMR1_InterruptHandler^(0+256),w
 15281  1380  000A               	callw
 15282  1381  3193               	pagesel	$
 15283  1382  0008               	return
 15284  1383                     __end_of_TMR1_CallBack:	
 15285                           
 15286                           	psect	text89
 15287  1345                     __ptext89:	
 15288 ;; *************** function _Timeout_increment *****************
 15289 ;; Defined at:
 15290 ;;		line 8 in file "timeout.c"
 15291 ;; Parameters:    Size  Location     Type
 15292 ;;		None
 15293 ;; Auto vars:     Size  Location     Type
 15294 ;;		None
 15295 ;; Return value:  Size  Location     Type
 15296 ;;                  1    wreg      void 
 15297 ;; Registers used:
 15298 ;;		wreg
 15299 ;; Tracked objects:
 15300 ;;		On entry : 0/0
 15301 ;;		On exit  : 0/0
 15302 ;;		Unchanged: 0/0
 15303 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15304 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15305 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15306 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15307 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15308 ;;Total ram usage:        0 bytes
 15309 ;; Hardware stack levels used:    1
 15310 ;; This function calls:
 15311 ;;		Nothing
 15312 ;; This function is called by:
 15313 ;;		_TMR1_CallBack
 15314 ;; This function uses a non-reentrant model
 15315 ;;
 15316                           
 15317                           
 15318                           ;psect for function _Timeout_increment
 15319  1345                     _Timeout_increment:	
 15320                           
 15321                           ;timeout.c: 10: globalCounter+=10000;
 15322                           
 15323                           ;incstack = 0
 15324                           ; Regs used in _Timeout_increment: [wreg]
 15325  1345  3010               	movlw	16
 15326  1346  0021               	movlb	1	; select bank1
 15327  1347  07CF               	addwf	_globalCounter^(0+128),f	;volatile
 15328  1348  3027               	movlw	39
 15329  1349  3DD0               	addwfc	(_globalCounter+1)^(0+128),f	;volatile
 15330  134A  3000               	movlw	0
 15331  134B  3DD1               	addwfc	(_globalCounter+2)^(0+128),f	;volatile
 15332  134C  3000               	movlw	0
 15333  134D  3DD2               	addwfc	(_globalCounter+3)^(0+128),f	;volatile
 15334  134E  0008               	return
 15335  134F                     __end_of_Timeout_increment:	
 15336                           
 15337                           	psect	text90
 15338  07FF                     __ptext90:	
 15339 ;; *************** function _TMR1_DefaultInterruptHandler *****************
 15340 ;; Defined at:
 15341 ;;		line 185 in file "mcc_generated_files/tmr1.c"
 15342 ;; Parameters:    Size  Location     Type
 15343 ;;		None
 15344 ;; Auto vars:     Size  Location     Type
 15345 ;;		None
 15346 ;; Return value:  Size  Location     Type
 15347 ;;                  1    wreg      void 
 15348 ;; Registers used:
 15349 ;;		None
 15350 ;; Tracked objects:
 15351 ;;		On entry : 0/0
 15352 ;;		On exit  : 0/0
 15353 ;;		Unchanged: 0/0
 15354 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15355 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15356 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15357 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15358 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15359 ;;Total ram usage:        0 bytes
 15360 ;; Hardware stack levels used:    1
 15361 ;; This function calls:
 15362 ;;		Nothing
 15363 ;; This function is called by:
 15364 ;;		_TMR1_Initialize
 15365 ;;		_TMR1_CallBack
 15366 ;; This function uses a non-reentrant model
 15367 ;;
 15368                           
 15369                           
 15370                           ;psect for function _TMR1_DefaultInterruptHandler
 15371  07FF                     _TMR1_DefaultInterruptHandler:	
 15372                           
 15373                           ;incstack = 0
 15374                           ; Regs used in _TMR1_DefaultInterruptHandler: []
 15375  07FF  0008               	return
 15376  0800                     __end_of_TMR1_DefaultInterruptHandler:	
 15377                           
 15378                           	psect	text91
 15379  12D3                     __ptext91:	
 15380 ;; *************** function _PIN_MANAGER_IOC *****************
 15381 ;; Defined at:
 15382 ;;		line 110 in file "mcc_generated_files/pin_manager.c"
 15383 ;; Parameters:    Size  Location     Type
 15384 ;;		None
 15385 ;; Auto vars:     Size  Location     Type
 15386 ;;		None
 15387 ;; Return value:  Size  Location     Type
 15388 ;;                  1    wreg      void 
 15389 ;; Registers used:
 15390 ;;		wreg, status,2, status,0, pclath, cstack
 15391 ;; Tracked objects:
 15392 ;;		On entry : 0/0
 15393 ;;		On exit  : 0/0
 15394 ;;		Unchanged: 0/0
 15395 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15396 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15397 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15398 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15399 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15400 ;;Total ram usage:        0 bytes
 15401 ;; Hardware stack levels used:    1
 15402 ;; Hardware stack levels required when called:    2
 15403 ;; This function calls:
 15404 ;;		_IOCAF2_ISR
 15405 ;; This function is called by:
 15406 ;;		_INTERRUPT_InterruptManager
 15407 ;; This function uses a non-reentrant model
 15408 ;;
 15409                           
 15410                           
 15411                           ;psect for function _PIN_MANAGER_IOC
 15412  12D3                     _PIN_MANAGER_IOC:	
 15413                           
 15414                           ;pin_manager.c: 113: if(IOCAFbits.IOCAF2 == 1)
 15415                           
 15416                           ;incstack = 0
 15417                           ; Regs used in _PIN_MANAGER_IOC: [wreg+status,2+status,0+pclath+cstack]
 15418  12D3  0027               	movlb	7	; select bank7
 15419  12D4  1D13               	btfss	19,2	;volatile
 15420  12D5  0008               	return
 15421                           
 15422                           ;pin_manager.c: 114: {
 15423                           ;pin_manager.c: 115: IOCAF2_ISR();
 15424  12D6  3193  235B         	fcall	_IOCAF2_ISR
 15425  12D8  0008               	return
 15426  12D9                     __end_of_PIN_MANAGER_IOC:	
 15427                           
 15428                           	psect	text92
 15429  135B                     __ptext92:	
 15430 ;; *************** function _IOCAF2_ISR *****************
 15431 ;; Defined at:
 15432 ;;		line 124 in file "mcc_generated_files/pin_manager.c"
 15433 ;; Parameters:    Size  Location     Type
 15434 ;;		None
 15435 ;; Auto vars:     Size  Location     Type
 15436 ;;		None
 15437 ;; Return value:  Size  Location     Type
 15438 ;;                  1    wreg      void 
 15439 ;; Registers used:
 15440 ;;		wreg, status,2, status,0, pclath, cstack
 15441 ;; Tracked objects:
 15442 ;;		On entry : 0/0
 15443 ;;		On exit  : 0/0
 15444 ;;		Unchanged: 0/0
 15445 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15446 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15447 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15448 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15449 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15450 ;;Total ram usage:        0 bytes
 15451 ;; Hardware stack levels used:    1
 15452 ;; Hardware stack levels required when called:    1
 15453 ;; This function calls:
 15454 ;;		Absolute function
 15455 ;;		_IOCAF2_DefaultInterruptHandler
 15456 ;; This function is called by:
 15457 ;;		_PIN_MANAGER_IOC
 15458 ;; This function uses a non-reentrant model
 15459 ;;
 15460                           
 15461                           
 15462                           ;psect for function _IOCAF2_ISR
 15463  135B                     _IOCAF2_ISR:	
 15464                           
 15465                           ;pin_manager.c: 129: if(IOCAF2_InterruptHandler)
 15466                           
 15467                           ;incstack = 0
 15468                           ; Regs used in _IOCAF2_ISR: [wreg+status,2+status,0+pclath+cstack]
 15469  135B  0022               	movlb	2	; select bank2
 15470  135C  0868               	movf	_IOCAF2_InterruptHandler^(0+256),w
 15471  135D  0469               	iorwf	(_IOCAF2_InterruptHandler+1)^(0+256),w
 15472  135E  1903               	btfsc	3,2
 15473  135F  2B65               	goto	i1l4291
 15474                           
 15475                           ;pin_manager.c: 130: {
 15476                           ;pin_manager.c: 131: IOCAF2_InterruptHandler();
 15477  1360  0869               	movf	(_IOCAF2_InterruptHandler+1)^(0+256),w
 15478  1361  008A               	movwf	10
 15479  1362  0868               	movf	_IOCAF2_InterruptHandler^(0+256),w
 15480  1363  000A               	callw
 15481  1364  3193               	pagesel	$
 15482  1365                     i1l4291:	
 15483                           
 15484                           ;pin_manager.c: 132: }
 15485                           ;pin_manager.c: 133: IOCAFbits.IOCAF2 = 0;
 15486  1365  0027               	movlb	7	; select bank7
 15487  1366  1113               	bcf	19,2	;volatile
 15488  1367  0008               	return
 15489  1368                     __end_of_IOCAF2_ISR:	
 15490                           
 15491                           	psect	text93
 15492  0003                     __ptext93:	
 15493 ;; *************** function _IOCAF2_DefaultInterruptHandler *****************
 15494 ;; Defined at:
 15495 ;;		line 146 in file "mcc_generated_files/pin_manager.c"
 15496 ;; Parameters:    Size  Location     Type
 15497 ;;		None
 15498 ;; Auto vars:     Size  Location     Type
 15499 ;;		None
 15500 ;; Return value:  Size  Location     Type
 15501 ;;                  1    wreg      void 
 15502 ;; Registers used:
 15503 ;;		None
 15504 ;; Tracked objects:
 15505 ;;		On entry : 0/0
 15506 ;;		On exit  : 0/0
 15507 ;;		Unchanged: 0/0
 15508 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15509 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15510 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15511 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15512 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15513 ;;Total ram usage:        0 bytes
 15514 ;; Hardware stack levels used:    1
 15515 ;; This function calls:
 15516 ;;		Nothing
 15517 ;; This function is called by:
 15518 ;;		_PIN_MANAGER_Initialize
 15519 ;;		_IOCAF2_ISR
 15520 ;; This function uses a non-reentrant model
 15521 ;;
 15522                           
 15523                           
 15524                           ;psect for function _IOCAF2_DefaultInterruptHandler
 15525  0003                     _IOCAF2_DefaultInterruptHandler:	
 15526                           
 15527                           ;incstack = 0
 15528                           ; Regs used in _IOCAF2_DefaultInterruptHandler: []
 15529  0003  0008               	return
 15530  0004                     __end_of_IOCAF2_DefaultInterruptHandler:	
 15531                           
 15532                           	psect	text94
 15533  0544                     __ptext94:	
 15534 ;; *************** function _I2C2_ISR *****************
 15535 ;; Defined at:
 15536 ;;		line 233 in file "mcc_generated_files/i2c2.c"
 15537 ;; Parameters:    Size  Location     Type
 15538 ;;		None
 15539 ;; Auto vars:     Size  Location     Type
 15540 ;;		None
 15541 ;; Return value:  Size  Location     Type
 15542 ;;                  1    wreg      void 
 15543 ;; Registers used:
 15544 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15545 ;; Tracked objects:
 15546 ;;		On entry : 0/0
 15547 ;;		On exit  : 0/0
 15548 ;;		Unchanged: 0/0
 15549 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15550 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15551 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15552 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15553 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15554 ;;Total ram usage:        4 bytes
 15555 ;; Hardware stack levels used:    1
 15556 ;; Hardware stack levels required when called:    1
 15557 ;; This function calls:
 15558 ;;		_I2C2_FunctionComplete
 15559 ;;		_I2C2_Stop
 15560 ;; This function is called by:
 15561 ;;		_INTERRUPT_InterruptManager
 15562 ;; This function uses a non-reentrant model
 15563 ;;
 15564                           
 15565                           
 15566                           ;psect for function _I2C2_ISR
 15567  0544                     _I2C2_ISR:	
 15568                           
 15569                           ;i2c2.c: 236: static uint8_t *pi2c_buf_ptr;
 15570                           ;i2c2.c: 237: static uint16_t i2c_address = 0;
 15571                           ;i2c2.c: 238: static uint8_t i2c_bytes_left = 0;
 15572                           ;i2c2.c: 239: static uint8_t i2c_10bit_address_restart = 0;
 15573                           ;i2c2.c: 241: PIR4bits.SSP2IF = 0;
 15574                           
 15575                           ;incstack = 0
 15576                           ; Regs used in _I2C2_ISR: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 15577  0544  0020               	movlb	0	; select bank0
 15578  0545  1014               	bcf	20,0	;volatile
 15579                           
 15580                           ;i2c2.c: 245: if(SSP2CON1bits.WCOL)
 15581  0546  0024               	movlb	4	; select bank4
 15582  0547  1F9D               	btfss	29,7	;volatile
 15583  0548  2E82               	goto	i1l4873
 15584                           
 15585                           ;i2c2.c: 246: {
 15586                           ;i2c2.c: 248: SSP2CON1bits.WCOL = 0;
 15587  0549  139D               	bcf	29,7	;volatile
 15588                           
 15589                           ;i2c2.c: 249: i2c2_state = S_MASTER_IDLE;
 15590  054A  01F9               	clrf	_i2c2_state
 15591                           
 15592                           ;i2c2.c: 250: *(p_i2c2_current->pTrFlag) = I2C2_MESSAGE_FAIL;
 15593  054B  0877               	movf	_p_i2c2_current,w
 15594  054C  3E02               	addlw	2
 15595  054D  0086               	movwf	6
 15596  054E  3001               	movlw	1	; select bank2/3
 15597  054F  0087               	movwf	7
 15598  0550  3F40               	moviw [0]fsr1
 15599  0551  00F3               	movwf	??_I2C2_ISR
 15600  0552  3F41               	moviw [1]fsr1
 15601  0553  00F4               	movwf	??_I2C2_ISR+1
 15602  0554  0873               	movf	??_I2C2_ISR,w
 15603  0555  0086               	movwf	6
 15604  0556  0874               	movf	??_I2C2_ISR+1,w
 15605  0557  0087               	movwf	7
 15606  0558  3001               	movlw	1
 15607  0559  0081               	movwf	1
 15608                           
 15609                           ;i2c2.c: 253: p_i2c2_current = (0);
 15610  055A  01F7               	clrf	_p_i2c2_current
 15611                           
 15612                           ;i2c2.c: 255: return;
 15613  055B  0008               	return
 15614  055C                     i1l288:	
 15615                           ;i2c2.c: 260: {
 15616                           ;i2c2.c: 261: case S_MASTER_IDLE:
 15617                           
 15618                           ;i2c2.c: 256: }
 15619                           ;i2c2.c: 259: switch(i2c2_state)
 15620                           
 15621                           
 15622                           ;i2c2.c: 263: if(i2c2_object.trStatus.s.empty != 1)
 15623  055C  0021               	movlb	1	; select bank1
 15624  055D  18CC               	btfsc	(_i2c2_object^(0+128)+2),1
 15625  055E  0008               	return
 15626                           
 15627                           ;i2c2.c: 264: {
 15628                           ;i2c2.c: 266: p_i2c2_current = i2c2_object.pTrHead;
 15629  055F  084B               	movf	(low ((_i2c2_object| 0+1)))^(0+128),w
 15630  0560  00F3               	movwf	??_I2C2_ISR
 15631  0561  0873               	movf	??_I2C2_ISR,w
 15632  0562  00F7               	movwf	_p_i2c2_current
 15633                           
 15634                           ;i2c2.c: 267: i2c2_trb_count = i2c2_object.pTrHead->count;
 15635  0563  084B               	movf	(low ((_i2c2_object| 0+1)))^(0+128),w
 15636  0564  0086               	movwf	6
 15637  0565  3001               	movlw	1	; select bank2/3
 15638  0566  0087               	movwf	7
 15639  0567  0801               	movf	1,w
 15640  0568  00F3               	movwf	??_I2C2_ISR
 15641  0569  0873               	movf	??_I2C2_ISR,w
 15642  056A  00E2               	movwf	_i2c2_trb_count^(0+128)
 15643                           
 15644                           ;i2c2.c: 268: p_i2c2_trb_current = i2c2_object.pTrHead->ptrb_list;
 15645  056B  084B               	movf	(low ((_i2c2_object| 0+1)))^(0+128),w
 15646  056C  0086               	movwf	6
 15647  056D  3001               	movlw	1	; select bank2/3
 15648  056E  0087               	movwf	7
 15649  056F  3001               	movlw	1	; select bank2/3
 15650  0570  3F41               	moviw [1]fsr1
 15651  0571  00F8               	movwf	_p_i2c2_trb_current
 15652                           
 15653                           ;i2c2.c: 270: i2c2_object.pTrHead++;
 15654  0572  3004               	movlw	4
 15655  0573  00F3               	movwf	??_I2C2_ISR
 15656  0574  0873               	movf	??_I2C2_ISR,w
 15657  0575  07CB               	addwf	(low ((_i2c2_object| 0+1)))^(0+128),f
 15658                           
 15659                           ;i2c2.c: 273: if(i2c2_object.pTrHead == (i2c2_tr_queue + 1))
 15660  0576  084B               	movf	(low ((_i2c2_object| 0+1)))^(0+128),w
 15661  0577  3A66               	xorlw	(low ((_i2c2_tr_queue| (0+256)+4)))& (0+255)
 15662  0578  1D03               	skipz
 15663  0579  2D7E               	goto	i1l4763
 15664                           
 15665                           ;i2c2.c: 274: {
 15666                           ;i2c2.c: 276: i2c2_object.pTrHead = i2c2_tr_queue;
 15667  057A  3062               	movlw	(low (_i2c2_tr_queue| (0+256)))& (0+255)
 15668  057B  00F3               	movwf	??_I2C2_ISR
 15669  057C  0873               	movf	??_I2C2_ISR,w
 15670  057D  00CB               	movwf	(low ((_i2c2_object| 0+1)))^(0+128)
 15671  057E                     i1l4763:	
 15672                           
 15673                           ;i2c2.c: 277: }
 15674                           ;i2c2.c: 281: i2c2_object.trStatus.s.full = 0;
 15675  057E  104C               	bcf	(_i2c2_object^(0+128)+2),0
 15676                           
 15677                           ;i2c2.c: 284: if(i2c2_object.pTrHead == i2c2_object.pTrTail)
 15678  057F  084B               	movf	(low ((_i2c2_object| 0+1)))^(0+128),w
 15679  0580  064A               	xorwf	_i2c2_object^(0+128),w
 15680  0581  1903               	btfsc	3,2
 15681                           
 15682                           ;i2c2.c: 285: {
 15683                           ;i2c2.c: 287: i2c2_object.trStatus.s.empty = 1;
 15684  0582  14CC               	bsf	(_i2c2_object^(0+128)+2),1
 15685                           
 15686                           ;i2c2.c: 288: }
 15687                           ;i2c2.c: 291: SSP2CON2bits.SEN = 1;
 15688  0583  0024               	movlb	4	; select bank4
 15689  0584  141E               	bsf	30,0	;volatile
 15690                           
 15691                           ;i2c2.c: 294: i2c2_state = S_MASTER_SEND_ADDR;
 15692  0585  3002               	movlw	2
 15693  0586  00F3               	movwf	??_I2C2_ISR
 15694  0587  0873               	movf	??_I2C2_ISR,w
 15695  0588  00F9               	movwf	_i2c2_state
 15696                           
 15697                           ;i2c2.c: 295: }
 15698                           ;i2c2.c: 297: break;
 15699  0589  0008               	return
 15700  058A                     i1l293:	
 15701                           ;i2c2.c: 299: case S_MASTER_RESTART:
 15702                           
 15703                           
 15704                           ;i2c2.c: 304: SSP2CON2bits.RSEN = 1;
 15705  058A  0024               	movlb	4	; select bank4
 15706  058B  149E               	bsf	30,1	;volatile
 15707                           
 15708                           ;i2c2.c: 307: i2c2_state = S_MASTER_SEND_ADDR;
 15709  058C  3002               	movlw	2
 15710  058D  00F3               	movwf	??_I2C2_ISR
 15711  058E  0873               	movf	??_I2C2_ISR,w
 15712  058F  00F9               	movwf	_i2c2_state
 15713                           
 15714                           ;i2c2.c: 309: break;
 15715  0590  0008               	return
 15716  0591                     i1l294:	
 15717                           ;i2c2.c: 311: case S_MASTER_SEND_ADDR_10BIT_LSB:
 15718                           
 15719                           
 15720                           ;i2c2.c: 313: if(SSP2CON2bits.ACKSTAT)
 15721  0591  0024               	movlb	4	; select bank4
 15722  0592  1F1E               	btfss	30,6	;volatile
 15723  0593  2D9D               	goto	i1l4775
 15724                           
 15725                           ;i2c2.c: 314: {
 15726                           ;i2c2.c: 315: i2c2_object.i2cErrors++;
 15727  0594  3001               	movlw	1
 15728  0595  00F3               	movwf	??_I2C2_ISR
 15729  0596  0873               	movf	??_I2C2_ISR,w
 15730  0597  0021               	movlb	1	; select bank1
 15731  0598  07CE               	addwf	(_i2c2_object^(0+128)+4),f
 15732                           
 15733                           ;i2c2.c: 316: I2C2_Stop(I2C2_MESSAGE_ADDRESS_NO_ACK);
 15734  0599  3004               	movlw	4
 15735  059A  3195  2550         	fcall	_I2C2_Stop
 15736                           
 15737                           ;i2c2.c: 317: }
 15738  059C  0008               	return
 15739  059D                     i1l4775:	
 15740                           
 15741                           ;i2c2.c: 318: else
 15742                           ;i2c2.c: 319: {
 15743                           ;i2c2.c: 321: SSP2BUF = (i2c_address >> 1) & 0x00FF;
 15744  059D  087B               	movf	I2C2_ISR@i2c_address+1,w
 15745  059E  00F4               	movwf	??_I2C2_ISR+1
 15746  059F  087A               	movf	I2C2_ISR@i2c_address,w
 15747  05A0  00F3               	movwf	??_I2C2_ISR
 15748  05A1  36F4               	lsrf	??_I2C2_ISR+1,f
 15749  05A2  0CF3               	rrf	??_I2C2_ISR,f
 15750  05A3  0873               	movf	??_I2C2_ISR,w
 15751  05A4  0024               	movlb	4	; select bank4
 15752  05A5  0099               	movwf	25	;volatile
 15753                           
 15754                           ;i2c2.c: 324: if(i2c_address & 0x01)
 15755  05A6  1C7A               	btfss	I2C2_ISR@i2c_address,0
 15756  05A7  2DAD               	goto	i1l4781
 15757                           
 15758                           ;i2c2.c: 325: {
 15759                           ;i2c2.c: 328: i2c2_state = S_MASTER_10BIT_RESTART;
 15760  05A8  300B               	movlw	11
 15761  05A9  00F3               	movwf	??_I2C2_ISR
 15762  05AA  0873               	movf	??_I2C2_ISR,w
 15763  05AB  00F9               	movwf	_i2c2_state
 15764                           
 15765                           ;i2c2.c: 329: }
 15766  05AC  0008               	return
 15767  05AD                     i1l4781:	
 15768                           
 15769                           ;i2c2.c: 330: else
 15770                           ;i2c2.c: 331: {
 15771                           ;i2c2.c: 333: i2c2_state = S_MASTER_SEND_DATA;
 15772  05AD  3003               	movlw	3
 15773  05AE  00F3               	movwf	??_I2C2_ISR
 15774  05AF  0873               	movf	??_I2C2_ISR,w
 15775  05B0  00F9               	movwf	_i2c2_state
 15776                           
 15777                           ;i2c2.c: 334: }
 15778                           ;i2c2.c: 335: }
 15779                           ;i2c2.c: 337: break;
 15780  05B1  0008               	return
 15781  05B2                     i1l299:	
 15782                           ;i2c2.c: 339: case S_MASTER_10BIT_RESTART:
 15783                           
 15784                           
 15785                           ;i2c2.c: 341: if(SSP2CON2bits.ACKSTAT)
 15786  05B2  0024               	movlb	4	; select bank4
 15787  05B3  1F1E               	btfss	30,6	;volatile
 15788  05B4  2DBE               	goto	i1l300
 15789                           
 15790                           ;i2c2.c: 342: {
 15791                           ;i2c2.c: 343: i2c2_object.i2cErrors++;
 15792  05B5  3001               	movlw	1
 15793  05B6  00F3               	movwf	??_I2C2_ISR
 15794  05B7  0873               	movf	??_I2C2_ISR,w
 15795  05B8  0021               	movlb	1	; select bank1
 15796  05B9  07CE               	addwf	(_i2c2_object^(0+128)+4),f
 15797                           
 15798                           ;i2c2.c: 344: I2C2_Stop(I2C2_MESSAGE_ADDRESS_NO_ACK);
 15799  05BA  3004               	movlw	4
 15800  05BB  3195  2550         	fcall	_I2C2_Stop
 15801                           
 15802                           ;i2c2.c: 345: }
 15803  05BD  0008               	return
 15804  05BE                     i1l300:	
 15805                           
 15806                           ;i2c2.c: 346: else
 15807                           ;i2c2.c: 347: {
 15808                           ;i2c2.c: 350: SSP2CON2bits.RSEN = 1;
 15809  05BE  149E               	bsf	30,1	;volatile
 15810                           
 15811                           ;i2c2.c: 354: i2c_address = 0x00F0 | ((i2c_address >> 8) & 0x0006);
 15812  05BF  087B               	movf	I2C2_ISR@i2c_address+1,w
 15813  05C0  00F4               	movwf	??_I2C2_ISR+1
 15814  05C1  087A               	movf	I2C2_ISR@i2c_address,w
 15815  05C2  00F3               	movwf	??_I2C2_ISR
 15816  05C3  0874               	movf	??_I2C2_ISR+1,w
 15817  05C4  00F3               	movwf	??_I2C2_ISR
 15818  05C5  01F4               	clrf	??_I2C2_ISR+1
 15819  05C6  3006               	movlw	6
 15820  05C7  0573               	andwf	??_I2C2_ISR,w
 15821  05C8  00F5               	movwf	??_I2C2_ISR+2
 15822  05C9  3000               	movlw	0
 15823  05CA  0574               	andwf	??_I2C2_ISR+1,w
 15824  05CB  00F6               	movwf	??_I2C2_ISR+3
 15825  05CC  30F0               	movlw	240
 15826  05CD  0475               	iorwf	??_I2C2_ISR+2,w
 15827  05CE  00FA               	movwf	I2C2_ISR@i2c_address
 15828  05CF  3000               	movlw	0
 15829  05D0  0476               	iorwf	??_I2C2_ISR+3,w
 15830  05D1  00FB               	movwf	I2C2_ISR@i2c_address+1
 15831                           
 15832                           ;i2c2.c: 357: i2c_address |= 0x0001;
 15833  05D2  147A               	bsf	I2C2_ISR@i2c_address,0
 15834                           
 15835                           ;i2c2.c: 360: i2c_10bit_address_restart = 1;
 15836  05D3  0021               	movlb	1	; select bank1
 15837  05D4  01E0               	clrf	I2C2_ISR@i2c_10bit_address_restart^(0+128)
 15838  05D5  0AE0               	incf	I2C2_ISR@i2c_10bit_address_restart^(0+128),f
 15839                           
 15840                           ;i2c2.c: 363: i2c2_state = S_MASTER_SEND_ADDR;
 15841  05D6  3002               	movlw	2
 15842  05D7  00F3               	movwf	??_I2C2_ISR
 15843  05D8  0873               	movf	??_I2C2_ISR,w
 15844  05D9  00F9               	movwf	_i2c2_state
 15845                           
 15846                           ;i2c2.c: 364: }
 15847                           ;i2c2.c: 366: break;
 15848  05DA  0008               	return
 15849  05DB                     i1l4795:	
 15850                           ;i2c2.c: 368: case S_MASTER_SEND_ADDR:
 15851                           
 15852                           
 15853                           ;i2c2.c: 381: if(i2c_10bit_address_restart != 1)
 15854  05DB  0021               	movlb	1	; select bank1
 15855  05DC  0360               	decf	I2C2_ISR@i2c_10bit_address_restart^(0+128),w
 15856  05DD  1903               	btfsc	3,2
 15857  05DE  2DF7               	goto	i1l4813
 15858                           
 15859                           ;i2c2.c: 382: {
 15860                           ;i2c2.c: 384: i2c_address = p_i2c2_trb_current->address;
 15861  05DF  0878               	movf	_p_i2c2_trb_current,w
 15862  05E0  0086               	movwf	6
 15863  05E1  3001               	movlw	1	; select bank2/3
 15864  05E2  0087               	movwf	7
 15865  05E3  3F40               	moviw [0]fsr1
 15866  05E4  00FA               	movwf	I2C2_ISR@i2c_address
 15867  05E5  3F41               	moviw [1]fsr1
 15868  05E6  00FB               	movwf	I2C2_ISR@i2c_address+1
 15869                           
 15870                           ;i2c2.c: 385: pi2c_buf_ptr = p_i2c2_trb_current->pbuffer;
 15871  05E7  0878               	movf	_p_i2c2_trb_current,w
 15872  05E8  3E03               	addlw	3
 15873  05E9  0086               	movwf	6
 15874  05EA  3001               	movlw	1	; select bank2/3
 15875  05EB  0087               	movwf	7
 15876  05EC  3F40               	moviw [0]fsr1
 15877  05ED  00D5               	movwf	I2C2_ISR@pi2c_buf_ptr^(0+128)
 15878  05EE  3F41               	moviw [1]fsr1
 15879  05EF  00D6               	movwf	(I2C2_ISR@pi2c_buf_ptr+1)^(0+128)
 15880                           
 15881                           ;i2c2.c: 386: i2c_bytes_left = p_i2c2_trb_current->length;
 15882  05F0  0878               	movf	_p_i2c2_trb_current,w
 15883  05F1  0086               	movwf	6
 15884  05F2  3001               	movlw	1	; select bank2/3
 15885  05F3  0087               	movwf	7
 15886  05F4  3001               	movlw	1	; select bank2/3
 15887  05F5  3F42               	moviw [2]fsr1
 15888  05F6  00E1               	movwf	I2C2_ISR@i2c_bytes_left^(0+128)
 15889  05F7                     i1l4813:	
 15890                           ;i2c2.c: 407: }
 15891                           ;i2c2.c: 408: }
 15892                           
 15893                           ;i2c2.c: 406: i2c_10bit_address_restart = 0;
 15894                           
 15895                           ;i2c2.c: 404: i2c2_state = S_MASTER_ACK_ADDR;
 15896                           
 15897                           ;i2c2.c: 400: else
 15898                           ;i2c2.c: 401: {
 15899                           ;i2c2.c: 403: SSP2BUF = i2c_address;
 15900                           
 15901                           ;i2c2.c: 399: }
 15902                           
 15903                           ;i2c2.c: 398: i2c2_state = S_MASTER_SEND_ADDR_10BIT_LSB;
 15904                           
 15905                           ;i2c2.c: 393: {
 15906                           ;i2c2.c: 397: SSP2BUF = 0xF0 | ((i2c_address >> 8) & 0x0006);
 15907                           
 15908                           ;i2c2.c: 391: {
 15909                           ;i2c2.c: 392: if (0 == i2c_10bit_address_restart)
 15910                           
 15911                           ;i2c2.c: 387: }
 15912                           ;i2c2.c: 390: if(!1 && (0x0 != i2c_address))
 15913                           
 15914                           
 15915                           ;i2c2.c: 409: else
 15916                           ;i2c2.c: 410: {
 15917                           ;i2c2.c: 412: SSP2BUF = i2c_address;
 15918  05F7  087A               	movf	I2C2_ISR@i2c_address,w
 15919  05F8  0024               	movlb	4	; select bank4
 15920  05F9  0099               	movwf	25	;volatile
 15921                           
 15922                           ;i2c2.c: 413: if(i2c_address & 0x01)
 15923  05FA  1C7A               	btfss	I2C2_ISR@i2c_address,0
 15924  05FB  2E01               	goto	i1l4819
 15925                           
 15926                           ;i2c2.c: 414: {
 15927                           ;i2c2.c: 416: i2c2_state = S_MASTER_ACK_ADDR;
 15928  05FC  3005               	movlw	5
 15929  05FD  00F3               	movwf	??_I2C2_ISR
 15930  05FE  0873               	movf	??_I2C2_ISR,w
 15931  05FF  00F9               	movwf	_i2c2_state
 15932                           
 15933                           ;i2c2.c: 417: }
 15934  0600  0008               	return
 15935  0601                     i1l4819:	
 15936                           
 15937                           ;i2c2.c: 418: else
 15938                           ;i2c2.c: 419: {
 15939                           ;i2c2.c: 421: i2c2_state = S_MASTER_SEND_DATA;
 15940  0601  3003               	movlw	3
 15941  0602  00F3               	movwf	??_I2C2_ISR
 15942  0603  0873               	movf	??_I2C2_ISR,w
 15943  0604  00F9               	movwf	_i2c2_state
 15944                           
 15945                           ;i2c2.c: 422: }
 15946                           ;i2c2.c: 423: }
 15947                           ;i2c2.c: 424: break;
 15948  0605  0008               	return
 15949  0606                     i1l310:	
 15950                           ;i2c2.c: 426: case S_MASTER_SEND_DATA:
 15951                           
 15952                           
 15953                           ;i2c2.c: 429: if(SSP2CON2bits.ACKSTAT)
 15954  0606  0024               	movlb	4	; select bank4
 15955  0607  1F1E               	btfss	30,6	;volatile
 15956  0608  2E14               	goto	i1l4827
 15957                           
 15958                           ;i2c2.c: 430: {
 15959                           ;i2c2.c: 432: i2c2_object.i2cErrors++;
 15960  0609  3001               	movlw	1
 15961  060A  00F3               	movwf	??_I2C2_ISR
 15962  060B  0873               	movf	??_I2C2_ISR,w
 15963  060C  0021               	movlb	1	; select bank1
 15964  060D  07CE               	addwf	(_i2c2_object^(0+128)+4),f
 15965                           
 15966                           ;i2c2.c: 435: SSP2CON2bits.ACKSTAT = 0;
 15967  060E  0024               	movlb	4	; select bank4
 15968  060F  131E               	bcf	30,6	;volatile
 15969                           
 15970                           ;i2c2.c: 438: I2C2_Stop(I2C2_DATA_NO_ACK);
 15971  0610  3005               	movlw	5
 15972  0611  3195  2550         	fcall	_I2C2_Stop
 15973                           
 15974                           ;i2c2.c: 440: }
 15975  0613  0008               	return
 15976  0614                     i1l4827:	
 15977                           
 15978                           ;i2c2.c: 441: else
 15979                           ;i2c2.c: 442: {
 15980                           ;i2c2.c: 444: if(i2c_bytes_left-- == 0U)
 15981  0614  3001               	movlw	1
 15982  0615  0021               	movlb	1	; select bank1
 15983  0616  02E1               	subwf	I2C2_ISR@i2c_bytes_left^(0+128),f
 15984  0617  0A61               	incf	I2C2_ISR@i2c_bytes_left^(0+128),w
 15985  0618  1D03               	btfss	3,2
 15986  0619  2E2D               	goto	i1l4835
 15987                           
 15988                           ;i2c2.c: 445: {
 15989                           ;i2c2.c: 449: p_i2c2_trb_current++;
 15990  061A  3005               	movlw	5
 15991  061B  00F3               	movwf	??_I2C2_ISR
 15992  061C  0873               	movf	??_I2C2_ISR,w
 15993  061D  07F8               	addwf	_p_i2c2_trb_current,f
 15994                           
 15995                           ;i2c2.c: 452: if(--i2c2_trb_count == 0)
 15996  061E  3001               	movlw	1
 15997  061F  02E2               	subwf	_i2c2_trb_count^(0+128),f
 15998  0620  1D03               	btfss	3,2
 15999  0621  2E26               	goto	i1l314
 16000                           
 16001                           ;i2c2.c: 453: {
 16002                           ;i2c2.c: 454: I2C2_Stop(I2C2_MESSAGE_COMPLETE);
 16003  0622  3000               	movlw	0
 16004  0623  3195  2550         	fcall	_I2C2_Stop
 16005                           
 16006                           ;i2c2.c: 455: }
 16007  0625  0008               	return
 16008  0626                     i1l314:	
 16009                           
 16010                           ;i2c2.c: 456: else
 16011                           ;i2c2.c: 457: {
 16012                           ;i2c2.c: 464: SSP2CON2bits.RSEN = 1;
 16013  0626  0024               	movlb	4	; select bank4
 16014  0627  149E               	bsf	30,1	;volatile
 16015                           
 16016                           ;i2c2.c: 467: i2c2_state = S_MASTER_SEND_ADDR;
 16017  0628  3002               	movlw	2
 16018  0629  00F3               	movwf	??_I2C2_ISR
 16019  062A  0873               	movf	??_I2C2_ISR,w
 16020  062B  00F9               	movwf	_i2c2_state
 16021                           
 16022                           ;i2c2.c: 469: }
 16023                           ;i2c2.c: 470: }
 16024  062C  0008               	return
 16025  062D                     i1l4835:	
 16026                           
 16027                           ;i2c2.c: 471: else
 16028                           ;i2c2.c: 472: {
 16029                           ;i2c2.c: 474: SSP2BUF = *pi2c_buf_ptr++;
 16030  062D  0021               	movlb	1	; select bank1
 16031  062E  0855               	movf	I2C2_ISR@pi2c_buf_ptr^(0+128),w
 16032  062F  0086               	movwf	6
 16033  0630  0856               	movf	(I2C2_ISR@pi2c_buf_ptr+1)^(0+128),w
 16034  0631  0087               	movwf	7
 16035  0632  0801               	movf	1,w
 16036  0633  0024               	movlb	4	; select bank4
 16037  0634  0099               	movwf	25	;volatile
 16038  0635  3001               	movlw	1
 16039  0636  0021               	movlb	1	; select bank1
 16040  0637  07D5               	addwf	I2C2_ISR@pi2c_buf_ptr^(0+128),f
 16041  0638  3000               	movlw	0
 16042  0639  3DD6               	addwfc	(I2C2_ISR@pi2c_buf_ptr+1)^(0+128),f
 16043                           
 16044                           ;i2c2.c: 475: }
 16045                           ;i2c2.c: 476: }
 16046                           ;i2c2.c: 477: break;
 16047  063A  0008               	return
 16048  063B                     i1l317:	
 16049                           ;i2c2.c: 479: case S_MASTER_ACK_ADDR:
 16050                           
 16051                           
 16052                           ;i2c2.c: 482: if(SSP2CON2bits.ACKSTAT)
 16053  063B  0024               	movlb	4	; select bank4
 16054  063C  1F1E               	btfss	30,6	;volatile
 16055  063D  2E49               	goto	i1l318
 16056                           
 16057                           ;i2c2.c: 483: {
 16058                           ;i2c2.c: 486: i2c2_object.i2cErrors++;
 16059  063E  3001               	movlw	1
 16060  063F  00F3               	movwf	??_I2C2_ISR
 16061  0640  0873               	movf	??_I2C2_ISR,w
 16062  0641  0021               	movlb	1	; select bank1
 16063  0642  07CE               	addwf	(_i2c2_object^(0+128)+4),f
 16064                           
 16065                           ;i2c2.c: 489: I2C2_Stop(I2C2_MESSAGE_ADDRESS_NO_ACK);
 16066  0643  3004               	movlw	4
 16067  0644  3195  2550         	fcall	_I2C2_Stop
 16068                           
 16069                           ;i2c2.c: 492: SSP2CON2bits.ACKSTAT = 0;
 16070  0646  0024               	movlb	4	; select bank4
 16071  0647  131E               	bcf	30,6	;volatile
 16072                           
 16073                           ;i2c2.c: 493: }
 16074  0648  0008               	return
 16075  0649                     i1l318:	
 16076                           
 16077                           ;i2c2.c: 494: else
 16078                           ;i2c2.c: 495: {
 16079                           ;i2c2.c: 496: SSP2CON2bits.RCEN = 1;
 16080  0649  159E               	bsf	30,3	;volatile
 16081                           
 16082                           ;i2c2.c: 497: i2c2_state = S_MASTER_ACK_RCV_DATA;
 16083  064A  3008               	movlw	8
 16084  064B  00F3               	movwf	??_I2C2_ISR
 16085  064C  0873               	movf	??_I2C2_ISR,w
 16086  064D  00F9               	movwf	_i2c2_state
 16087                           
 16088                           ;i2c2.c: 498: }
 16089                           ;i2c2.c: 499: break;
 16090  064E  0008               	return
 16091  064F                     i1l4847:	
 16092                           ;i2c2.c: 501: case S_MASTER_RCV_DATA:
 16093                           
 16094                           
 16095                           ;i2c2.c: 506: i2c2_state = S_MASTER_ACK_RCV_DATA;
 16096  064F  3008               	movlw	8
 16097  0650  00F3               	movwf	??_I2C2_ISR
 16098  0651  0873               	movf	??_I2C2_ISR,w
 16099  0652  00F9               	movwf	_i2c2_state
 16100                           
 16101                           ;i2c2.c: 509: SSP2CON2bits.RCEN = 1;
 16102  0653  0024               	movlb	4	; select bank4
 16103  0654  159E               	bsf	30,3	;volatile
 16104                           
 16105                           ;i2c2.c: 511: break;
 16106  0655  0008               	return
 16107  0656                     i1l4851:	
 16108                           ;i2c2.c: 513: case S_MASTER_ACK_RCV_DATA:
 16109                           
 16110                           
 16111                           ;i2c2.c: 516: *pi2c_buf_ptr++ = SSP2BUF;
 16112  0656  0021               	movlb	1	; select bank1
 16113  0657  0855               	movf	I2C2_ISR@pi2c_buf_ptr^(0+128),w
 16114  0658  0086               	movwf	6
 16115  0659  0856               	movf	(I2C2_ISR@pi2c_buf_ptr+1)^(0+128),w
 16116  065A  0087               	movwf	7
 16117  065B  0024               	movlb	4	; select bank4
 16118  065C  0819               	movf	25,w	;volatile
 16119  065D  0081               	movwf	1
 16120  065E  3001               	movlw	1
 16121  065F  0021               	movlb	1	; select bank1
 16122  0660  07D5               	addwf	I2C2_ISR@pi2c_buf_ptr^(0+128),f
 16123  0661  3000               	movlw	0
 16124  0662  3DD6               	addwfc	(I2C2_ISR@pi2c_buf_ptr+1)^(0+128),f
 16125                           
 16126                           ;i2c2.c: 519: if(--i2c_bytes_left)
 16127  0663  3001               	movlw	1
 16128  0664  02E1               	subwf	I2C2_ISR@i2c_bytes_left^(0+128),f
 16129  0665  1903               	btfsc	3,2
 16130  0666  2E6E               	goto	i1l322
 16131                           
 16132                           ;i2c2.c: 520: {
 16133                           ;i2c2.c: 526: SSP2CON2bits.ACKDT = 0;
 16134  0667  0024               	movlb	4	; select bank4
 16135  0668  129E               	bcf	30,5	;volatile
 16136                           
 16137                           ;i2c2.c: 529: i2c2_state = S_MASTER_RCV_DATA;
 16138  0669  3006               	movlw	6
 16139  066A  00F3               	movwf	??_I2C2_ISR
 16140  066B  0873               	movf	??_I2C2_ISR,w
 16141  066C  00F9               	movwf	_i2c2_state
 16142                           
 16143                           ;i2c2.c: 530: }
 16144  066D  2E72               	goto	i1l4863
 16145  066E                     i1l322:	
 16146                           
 16147                           ;i2c2.c: 531: else
 16148                           ;i2c2.c: 532: {
 16149                           ;i2c2.c: 536: SSP2CON2bits.ACKDT = 1;
 16150  066E  0024               	movlb	4	; select bank4
 16151  066F  169E               	bsf	30,5	;volatile
 16152                           
 16153                           ;i2c2.c: 538: I2C2_FunctionComplete();
 16154  0670  3193  23A3         	fcall	_I2C2_FunctionComplete
 16155  0672                     i1l4863:	
 16156                           
 16157                           ;i2c2.c: 539: }
 16158                           ;i2c2.c: 542: SSP2CON2bits.ACKEN = 1;
 16159  0672  0024               	movlb	4	; select bank4
 16160  0673  161E               	bsf	30,4	;volatile
 16161                           
 16162                           ;i2c2.c: 543: break;
 16163  0674  0008               	return
 16164  0675                     i1l4865:	
 16165                           ;i2c2.c: 545: case S_MASTER_RCV_STOP:
 16166                           
 16167                           
 16168                           ;i2c2.c: 546: case S_MASTER_SEND_STOP:
 16169                           ;i2c2.c: 549: I2C2_Stop(I2C2_MESSAGE_COMPLETE);
 16170  0675  3000               	movlw	0
 16171  0676  3195  2550         	fcall	_I2C2_Stop
 16172                           
 16173                           ;i2c2.c: 550: break;
 16174  0678  0008               	return
 16175  0679                     i1l4867:	
 16176                           ;i2c2.c: 552: default:
 16177                           
 16178                           
 16179                           ;i2c2.c: 556: i2c2_object.i2cErrors++;
 16180  0679  3001               	movlw	1
 16181  067A  00F3               	movwf	??_I2C2_ISR
 16182  067B  0873               	movf	??_I2C2_ISR,w
 16183  067C  0021               	movlb	1	; select bank1
 16184  067D  07CE               	addwf	(_i2c2_object^(0+128)+4),f
 16185                           
 16186                           ;i2c2.c: 557: I2C2_Stop(I2C2_LOST_STATE);
 16187  067E  3006               	movlw	6
 16188  067F  3195  2550         	fcall	_I2C2_Stop
 16189                           
 16190                           ;i2c2.c: 560: }
 16191                           
 16192                           ;i2c2.c: 558: break;
 16193  0681  0008               	return
 16194  0682                     i1l4873:	
 16195  0682  0879               	movf	_i2c2_state,w
 16196                           
 16197                           ; Switch size 1, requested type "space"
 16198                           ; Number of cases is 11, Range of values is 0 to 11
 16199                           ; switch strategies available:
 16200                           ; Name         Instructions Cycles
 16201                           ; direct_byte           30     6 (fixed)
 16202                           ; simple_byte           34    18 (average)
 16203                           ; jumptable            260     6 (fixed)
 16204                           ;	Chosen strategy is direct_byte
 16205  0683  0084               	movwf	4
 16206  0684  300C               	movlw	12
 16207  0685  0204               	subwf	4,w
 16208  0686  1803               	skipnc
 16209  0687  2E79               	goto	i1l4867
 16210  0688  3190               	movlp	high i1S7059
 16211  0689  3504               	lslf	4,w
 16212  068A  3E00               	addlw	low i1S7059
 16213  068B  0082               	movwf	2
 16214  068C  0008               	return
 16215  068D                     __end_of_I2C2_ISR:	
 16216                           
 16217                           	psect	swtext1
 16218  1000                     __pswtext1:	
 16219  1000                     i1S7059:	
 16220  1000  3185  2D5C         	ljmp	i1l288
 16221  1002  3185  2D8A         	ljmp	i1l293
 16222  1004  3185  2DDB         	ljmp	i1l4795
 16223  1006  3186  2E06         	ljmp	i1l310
 16224  1008  3186  2E75         	ljmp	i1l4865
 16225  100A  3186  2E3B         	ljmp	i1l317
 16226  100C  3186  2E4F         	ljmp	i1l4847
 16227  100E  3186  2E75         	ljmp	i1l4865
 16228  1010  3186  2E56         	ljmp	i1l4851
 16229  1012  3186  2E79         	ljmp	i1l4867
 16230  1014  3185  2D91         	ljmp	i1l294
 16231  1016  3185  2DB2         	ljmp	i1l299
 16232                           
 16233                           	psect	text95
 16234  1550                     __ptext95:	
 16235 ;; *************** function _I2C2_Stop *****************
 16236 ;; Defined at:
 16237 ;;		line 581 in file "mcc_generated_files/i2c2.c"
 16238 ;; Parameters:    Size  Location     Type
 16239 ;;  completion_c    1    wreg     enum E2993
 16240 ;; Auto vars:     Size  Location     Type
 16241 ;;  completion_c    1    2[COMMON] enum E2993
 16242 ;; Return value:  Size  Location     Type
 16243 ;;                  1    wreg      void 
 16244 ;; Registers used:
 16245 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 16246 ;; Tracked objects:
 16247 ;;		On entry : 0/0
 16248 ;;		On exit  : 0/0
 16249 ;;		Unchanged: 0/0
 16250 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16251 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16252 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16253 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16254 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16255 ;;Total ram usage:        3 bytes
 16256 ;; Hardware stack levels used:    1
 16257 ;; This function calls:
 16258 ;;		Nothing
 16259 ;; This function is called by:
 16260 ;;		_I2C2_ISR
 16261 ;; This function uses a non-reentrant model
 16262 ;;
 16263                           
 16264                           
 16265                           ;psect for function _I2C2_Stop
 16266  1550                     _I2C2_Stop:	
 16267                           
 16268                           ;incstack = 0
 16269                           ; Regs used in _I2C2_Stop: [wreg+fsr1l+fsr1h+status,2+status,0]
 16270                           ;I2C2_Stop@completion_code stored from wreg
 16271  1550  00F2               	movwf	I2C2_Stop@completion_code
 16272                           
 16273                           ;i2c2.c: 584: SSP2CON2bits.PEN = 1;
 16274  1551  0024               	movlb	4	; select bank4
 16275  1552  151E               	bsf	30,2	;volatile
 16276                           
 16277                           ;i2c2.c: 587: if (p_i2c2_current->pTrFlag != (0))
 16278  1553  0877               	movf	_p_i2c2_current,w
 16279  1554  3E02               	addlw	2
 16280  1555  0086               	movwf	6
 16281  1556  3001               	movlw	1	; select bank2/3
 16282  1557  0087               	movwf	7
 16283  1558  0016               	moviw fsr1++
 16284  1559  0401               	iorwf	1,w
 16285  155A  1903               	btfsc	3,2
 16286  155B  2D6B               	goto	i1l4309
 16287                           
 16288                           ;i2c2.c: 588: {
 16289                           ;i2c2.c: 590: *(p_i2c2_current->pTrFlag) = completion_code;
 16290  155C  0877               	movf	_p_i2c2_current,w
 16291  155D  3E02               	addlw	2
 16292  155E  0086               	movwf	6
 16293  155F  3001               	movlw	1	; select bank2/3
 16294  1560  0087               	movwf	7
 16295  1561  3F40               	moviw [0]fsr1
 16296  1562  00F0               	movwf	??_I2C2_Stop
 16297  1563  3F41               	moviw [1]fsr1
 16298  1564  00F1               	movwf	??_I2C2_Stop+1
 16299  1565  0870               	movf	??_I2C2_Stop,w
 16300  1566  0086               	movwf	6
 16301  1567  0871               	movf	??_I2C2_Stop+1,w
 16302  1568  0087               	movwf	7
 16303  1569  0872               	movf	I2C2_Stop@completion_code,w
 16304  156A  0081               	movwf	1
 16305  156B                     i1l4309:	
 16306                           
 16307                           ;i2c2.c: 591: }
 16308                           ;i2c2.c: 594: i2c2_state = S_MASTER_IDLE;
 16309  156B  01F9               	clrf	_i2c2_state
 16310  156C  0008               	return
 16311  156D                     __end_of_I2C2_Stop:	
 16312                           
 16313                           	psect	text96
 16314  13A3                     __ptext96:	
 16315 ;; *************** function _I2C2_FunctionComplete *****************
 16316 ;; Defined at:
 16317 ;;		line 563 in file "mcc_generated_files/i2c2.c"
 16318 ;; Parameters:    Size  Location     Type
 16319 ;;		None
 16320 ;; Auto vars:     Size  Location     Type
 16321 ;;		None
 16322 ;; Return value:  Size  Location     Type
 16323 ;;                  1    wreg      void 
 16324 ;; Registers used:
 16325 ;;		wreg, status,2, status,0
 16326 ;; Tracked objects:
 16327 ;;		On entry : 0/0
 16328 ;;		On exit  : 0/0
 16329 ;;		Unchanged: 0/0
 16330 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16331 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16332 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16333 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16334 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16335 ;;Total ram usage:        1 bytes
 16336 ;; Hardware stack levels used:    1
 16337 ;; This function calls:
 16338 ;;		Nothing
 16339 ;; This function is called by:
 16340 ;;		_I2C2_ISR
 16341 ;; This function uses a non-reentrant model
 16342 ;;
 16343                           
 16344                           
 16345                           ;psect for function _I2C2_FunctionComplete
 16346  13A3                     _I2C2_FunctionComplete:	
 16347                           
 16348                           ;i2c2.c: 567: p_i2c2_trb_current++;
 16349                           
 16350                           ;incstack = 0
 16351                           ; Regs used in _I2C2_FunctionComplete: [wreg+status,2+status,0]
 16352  13A3  3005               	movlw	5
 16353  13A4  00F0               	movwf	??_I2C2_FunctionComplete
 16354  13A5  0870               	movf	??_I2C2_FunctionComplete,w
 16355  13A6  07F8               	addwf	_p_i2c2_trb_current,f
 16356                           
 16357                           ;i2c2.c: 570: if(--i2c2_trb_count == 0)
 16358  13A7  3001               	movlw	1
 16359  13A8  0021               	movlb	1	; select bank1
 16360  13A9  02E2               	subwf	_i2c2_trb_count^(0+128),f
 16361  13AA  1D03               	btfss	3,2
 16362  13AB  2BB1               	goto	i1l329
 16363                           
 16364                           ;i2c2.c: 571: {
 16365                           ;i2c2.c: 572: i2c2_state = S_MASTER_SEND_STOP;
 16366  13AC  3004               	movlw	4
 16367  13AD  00F0               	movwf	??_I2C2_FunctionComplete
 16368  13AE  0870               	movf	??_I2C2_FunctionComplete,w
 16369  13AF  00F9               	movwf	_i2c2_state
 16370                           
 16371                           ;i2c2.c: 573: }
 16372  13B0  0008               	return
 16373  13B1                     i1l329:	
 16374                           
 16375                           ;i2c2.c: 574: else
 16376                           ;i2c2.c: 575: {
 16377                           ;i2c2.c: 576: i2c2_state = S_MASTER_RESTART;
 16378  13B1  01F9               	clrf	_i2c2_state
 16379  13B2  0AF9               	incf	_i2c2_state,f
 16380  13B3  0008               	return
 16381  13B4                     __end_of_I2C2_FunctionComplete:	
 16382                           
 16383                           	psect	text97
 16384  12A0                     __ptext97:	
 16385 ;; *************** function _I2C2_BusCollisionISR *****************
 16386 ;; Defined at:
 16387 ;;		line 729 in file "mcc_generated_files/i2c2.c"
 16388 ;; Parameters:    Size  Location     Type
 16389 ;;		None
 16390 ;; Auto vars:     Size  Location     Type
 16391 ;;		None
 16392 ;; Return value:  Size  Location     Type
 16393 ;;                  1    wreg      void 
 16394 ;; Registers used:
 16395 ;;		None
 16396 ;; Tracked objects:
 16397 ;;		On entry : 0/0
 16398 ;;		On exit  : 0/0
 16399 ;;		Unchanged: 0/0
 16400 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16401 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16402 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16403 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16404 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16405 ;;Total ram usage:        0 bytes
 16406 ;; Hardware stack levels used:    1
 16407 ;; This function calls:
 16408 ;;		Nothing
 16409 ;; This function is called by:
 16410 ;;		_INTERRUPT_InterruptManager
 16411 ;; This function uses a non-reentrant model
 16412 ;;
 16413                           
 16414                           
 16415                           ;psect for function _I2C2_BusCollisionISR
 16416  12A0                     _I2C2_BusCollisionISR:	
 16417                           
 16418                           ;incstack = 0
 16419                           ; Regs used in _I2C2_BusCollisionISR: []
 16420  12A0  0008               	return
 16421  12A1                     __end_of_I2C2_BusCollisionISR:	
 16422  007E                     btemp	set	126	;btemp
 16423  007E                     int$flags	set	126
 16424  007E                     wtemp0	set	126


Data Sizes:
    Strings     0
    Constant    38
    Data        7
    BSS         148
    Persistent  6
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      7      14
    BANK0            80     79      79
    BANK1            80     42      70
    BANK2            80      0      78
    BANK3            80     12      60
    BANK4            80      0       0
    BANK5            80      0       0
    BANK6            80      0       0
    BANK7            80      0       0
    BANK8            80      0       0
    BANK9            80      0       0
    BANK10           80      0       0
    BANK11           80      0       0
    BANK12           48      0       0

Pointer List with Targets:

    i2c2_tr_queue.ptrb_list.pbuffer	PTR unsigned char  size(2) Largest target is 24
		 -> I2C_BufferRead@ReadAddr(BANK0[1]), I2C_BufferRead@status(BANK0[1]), I2C_ByteWrite@data(BANK0[2]), I2C_ByteWrite@status(BANK0[1]), 
		 -> data(BANK3[8]), b1(BANK3[24]), HMC5883L_ReadBit@tmp(COMMON[1]), HMC5883L_ReadBits@tmp(BANK0[1]), 
		 -> HMC5883L_WriteBit@tmp(COMMON[1]), HMC5883L_WriteBits@tmp(COMMON[1]), heading(BANK3[8]), HMC5883L_TestConnection@tmp(COMMON[3]), 
		 -> MPU6050_ReadBit@tmp(COMMON[1]), MPU6050_ReadBits@tmp(COMMON[1]), MPU6050_WriteBit@tmp(COMMON[1]), MPU6050_WriteBits@tmp(COMMON[1]), 
		 -> MPU6050_GetRawAccel@tempBuffer(COMMON[6]), MPU6050_GetRawAccelGyro@tmpBuffer(COMMON[14]), 

    i2c2_tr_queue.pTrFlag	PTR enum E2993 size(2) Largest target is 24
		 -> I2C_BufferRead@ReadAddr(BANK0[1]), I2C_BufferRead@status(BANK0[1]), I2C_ByteWrite@data(BANK0[2]), I2C_ByteWrite@status(BANK0[1]), 
		 -> data(BANK3[8]), b1(BANK3[24]), HMC5883L_ReadBit@tmp(COMMON[1]), HMC5883L_ReadBits@tmp(BANK0[1]), 
		 -> HMC5883L_WriteBit@tmp(COMMON[1]), HMC5883L_WriteBits@tmp(COMMON[1]), heading(BANK3[8]), HMC5883L_TestConnection@tmp(COMMON[3]), 
		 -> MPU6050_ReadBit@tmp(COMMON[1]), MPU6050_ReadBits@tmp(COMMON[1]), MPU6050_WriteBit@tmp(COMMON[1]), MPU6050_WriteBits@tmp(COMMON[1]), 
		 -> MPU6050_GetRawAccel@tempBuffer(COMMON[6]), MPU6050_GetRawAccelGyro@tmpBuffer(COMMON[14]), 

    i2c2_tr_queue.ptrb_list	PTR struct . size(1) Largest target is 5
		 -> I2C2_MasterRead@trBlock(BANK2[5]), I2C2_MasterWrite@trBlock(BANK2[5]), 

    I2C_BufferRead@pBuffer	PTR unsigned char  size(2) Largest target is 24
		 -> data(BANK3[8]), b1(BANK3[24]), HMC5883L_ReadBit@tmp(COMMON[1]), HMC5883L_ReadBits@tmp(BANK0[1]), 
		 -> HMC5883L_WriteBit@tmp(COMMON[1]), HMC5883L_WriteBits@tmp(COMMON[1]), heading(BANK3[8]), HMC5883L_TestConnection@tmp(COMMON[3]), 
		 -> MPU6050_ReadBit@tmp(COMMON[1]), MPU6050_ReadBits@tmp(COMMON[1]), MPU6050_WriteBit@tmp(COMMON[1]), MPU6050_WriteBits@tmp(COMMON[1]), 
		 -> MPU6050_GetRawAccel@tempBuffer(COMMON[6]), MPU6050_GetRawAccelGyro@tmpBuffer(COMMON[14]), 

    I2C_ByteWrite@pBuffer	PTR unsigned char  size(1) Largest target is 1
		 -> BMP_readTemperature@tmp(BANK1[1]), BMP_init@t(BANK0[1]), HMC5883L_WriteBit@tmp(COMMON[1]), HMC5883L_WriteBits@tmp(COMMON[1]), 
		 -> HMC5883L_SetMode@tmp(COMMON[1]), HMC5883L_SetGain@tmp(COMMON[1]), HMC5883L_Initialize@tmp(COMMON[1]), MPU6050_WriteBit@tmp(COMMON[1]), 
		 -> MPU6050_WriteBits@tmp(COMMON[1]), 

    Wireless_sendData@payload	PTR unsigned char  size(1) Largest target is 6
		 -> Wireless_packageData@data(BANK1[6]), Wireless_determineTransmitPower@testPayload(BANK0[1]), 

    RF_DataIsReady@channel	PTR unsigned char  size(1) Largest target is 1
		 -> Wireless_checkDataReceived@channel(BANK0[1]), 

    RF_RxPayload@payload	PTR unsigned char  size(1) Largest target is 4
		 -> Wireless_checkDataReceived@data(BANK0[4]), 

    RF_TxPayload@payload	PTR unsigned char  size(1) Largest target is 6
		 -> Wireless_packageData@data(BANK1[6]), Wireless_determineTransmitPower@testPayload(BANK0[1]), 

    RF_WriteRegisterData@buf	PTR unsigned char  size(2) Largest target is 6
		 -> Wireless_packageData@data(BANK1[6]), Wireless_determineTransmitPower@testPayload(BANK0[1]), Wireless_init@TADDR(CODE[5]), 

    RF_ReadRegisterData@buf	PTR unsigned char  size(1) Largest target is 4
		 -> Wireless_checkDataReceived@data(BANK0[4]), Wireless_wake@reg(BANK0[1]), Wireless_sleep@reg(BANK0[1]), Wireless_changeTransmitPower@val(BANK0[1]), 

    SPI_WriteBuffer@bufOut	PTR unsigned char  size(2) Largest target is 6
		 -> Wireless_packageData@data(BANK1[6]), Wireless_determineTransmitPower@testPayload(BANK0[1]), Wireless_init@TADDR(CODE[5]), 

    SPI_WriteReadBuffer@bufOut	PTR unsigned char  size(1) Largest target is 4
		 -> Wireless_checkDataReceived@data(BANK0[4]), Wireless_wake@reg(BANK0[1]), Wireless_sleep@reg(BANK0[1]), Wireless_changeTransmitPower@val(BANK0[1]), 

    SPI_WriteReadBuffer@bufIn	PTR unsigned char  size(1) Largest target is 4
		 -> Wireless_checkDataReceived@data(BANK0[4]), Wireless_wake@reg(BANK0[1]), Wireless_sleep@reg(BANK0[1]), Wireless_changeTransmitPower@val(BANK0[1]), 

    HMC5883L_I2C_BufferRead@pBuffer	PTR unsigned char  size(2) Largest target is 14
		 -> HMC5883L_ReadBit@tmp(COMMON[1]), HMC5883L_ReadBits@tmp(BANK0[1]), HMC5883L_WriteBit@tmp(COMMON[1]), HMC5883L_WriteBits@tmp(COMMON[1]), 
		 -> heading(BANK3[8]), HMC5883L_TestConnection@tmp(COMMON[3]), MPU6050_ReadBit@tmp(COMMON[1]), MPU6050_ReadBits@tmp(COMMON[1]), 
		 -> MPU6050_WriteBit@tmp(COMMON[1]), MPU6050_WriteBits@tmp(COMMON[1]), MPU6050_GetRawAccel@tempBuffer(COMMON[6]), MPU6050_GetRawAccelGyro@tmpBuffer(COMMON[14]), 

    HMC5883L_ReadBits@data	PTR unsigned char  size(1) Largest target is 1
		 -> BMP_readTemperature@tmp(BANK1[1]), HMC5883L_GetHeading@tmp(COMMON[1]), HMC5883L_GetMode@tmp(COMMON[1]), HMC5883L_GetGain@tmp(COMMON[1]), 
		 -> HMC5883L_GetMeasurementBias@tmp(COMMON[1]), HMC5883L_GetDataRate@tmp(COMMON[1]), HMC5883L_GetSampleAveraging@tmp(COMMON[1]), 

    I2C2_MasterWriteTRBBuild@pdata	PTR unsigned char  size(1) Largest target is 2
		 -> I2C_BufferRead@ReadAddr(BANK0[1]), I2C_ByteWrite@data(BANK0[2]), 

    I2C2_MasterWriteTRBBuild@ptrb.pbuffer	PTR unsigned char  size(2) Largest target is 24
		 -> I2C_BufferRead@ReadAddr(BANK0[1]), I2C_BufferRead@status(BANK0[1]), I2C_ByteWrite@data(BANK0[2]), I2C_ByteWrite@status(BANK0[1]), 
		 -> data(BANK3[8]), b1(BANK3[24]), HMC5883L_ReadBit@tmp(COMMON[1]), HMC5883L_ReadBits@tmp(BANK0[1]), 
		 -> HMC5883L_WriteBit@tmp(COMMON[1]), HMC5883L_WriteBits@tmp(COMMON[1]), heading(BANK3[8]), HMC5883L_TestConnection@tmp(COMMON[3]), 
		 -> MPU6050_ReadBit@tmp(COMMON[1]), MPU6050_ReadBits@tmp(COMMON[1]), MPU6050_WriteBit@tmp(COMMON[1]), MPU6050_WriteBits@tmp(COMMON[1]), 
		 -> MPU6050_GetRawAccel@tempBuffer(COMMON[6]), MPU6050_GetRawAccelGyro@tmpBuffer(COMMON[14]), 

    I2C2_MasterWriteTRBBuild@ptrb	PTR struct . size(1) Largest target is 5
		 -> I2C2_MasterWrite@trBlock(BANK2[5]), 

    I2C2_MasterReadTRBBuild@pdata	PTR unsigned char  size(2) Largest target is 24
		 -> data(BANK3[8]), b1(BANK3[24]), HMC5883L_ReadBit@tmp(COMMON[1]), HMC5883L_ReadBits@tmp(BANK0[1]), 
		 -> HMC5883L_WriteBit@tmp(COMMON[1]), HMC5883L_WriteBits@tmp(COMMON[1]), heading(BANK3[8]), HMC5883L_TestConnection@tmp(COMMON[3]), 
		 -> MPU6050_ReadBit@tmp(COMMON[1]), MPU6050_ReadBits@tmp(COMMON[1]), MPU6050_WriteBit@tmp(COMMON[1]), MPU6050_WriteBits@tmp(COMMON[1]), 
		 -> MPU6050_GetRawAccel@tempBuffer(COMMON[6]), MPU6050_GetRawAccelGyro@tmpBuffer(COMMON[14]), 

    I2C2_MasterReadTRBBuild@ptrb.pbuffer	PTR unsigned char  size(2) Largest target is 24
		 -> I2C_BufferRead@ReadAddr(BANK0[1]), I2C_BufferRead@status(BANK0[1]), I2C_ByteWrite@data(BANK0[2]), I2C_ByteWrite@status(BANK0[1]), 
		 -> data(BANK3[8]), b1(BANK3[24]), HMC5883L_ReadBit@tmp(COMMON[1]), HMC5883L_ReadBits@tmp(BANK0[1]), 
		 -> HMC5883L_WriteBit@tmp(COMMON[1]), HMC5883L_WriteBits@tmp(COMMON[1]), heading(BANK3[8]), HMC5883L_TestConnection@tmp(COMMON[3]), 
		 -> MPU6050_ReadBit@tmp(COMMON[1]), MPU6050_ReadBits@tmp(COMMON[1]), MPU6050_WriteBit@tmp(COMMON[1]), MPU6050_WriteBits@tmp(COMMON[1]), 
		 -> MPU6050_GetRawAccel@tempBuffer(COMMON[6]), MPU6050_GetRawAccelGyro@tmpBuffer(COMMON[14]), 

    I2C2_MasterReadTRBBuild@ptrb	PTR struct . size(1) Largest target is 5
		 -> I2C2_MasterRead@trBlock(BANK2[5]), 

    i2c2_object.pTrTail.ptrb_list.pbuffer	PTR unsigned char  size(2) Largest target is 24
		 -> I2C_BufferRead@ReadAddr(BANK0[1]), I2C_BufferRead@status(BANK0[1]), I2C_ByteWrite@data(BANK0[2]), I2C_ByteWrite@status(BANK0[1]), 
		 -> data(BANK3[8]), b1(BANK3[24]), HMC5883L_ReadBit@tmp(COMMON[1]), HMC5883L_ReadBits@tmp(BANK0[1]), 
		 -> HMC5883L_WriteBit@tmp(COMMON[1]), HMC5883L_WriteBits@tmp(COMMON[1]), heading(BANK3[8]), HMC5883L_TestConnection@tmp(COMMON[3]), 
		 -> MPU6050_ReadBit@tmp(COMMON[1]), MPU6050_ReadBits@tmp(COMMON[1]), MPU6050_WriteBit@tmp(COMMON[1]), MPU6050_WriteBits@tmp(COMMON[1]), 
		 -> MPU6050_GetRawAccel@tempBuffer(COMMON[6]), MPU6050_GetRawAccelGyro@tmpBuffer(COMMON[14]), 

    i2c2_object.pTrTail.pTrFlag	PTR enum E2993 size(2) Largest target is 24
		 -> I2C_BufferRead@ReadAddr(BANK0[1]), I2C_BufferRead@status(BANK0[1]), I2C_ByteWrite@data(BANK0[2]), I2C_ByteWrite@status(BANK0[1]), 
		 -> data(BANK3[8]), b1(BANK3[24]), HMC5883L_ReadBit@tmp(COMMON[1]), HMC5883L_ReadBits@tmp(BANK0[1]), 
		 -> HMC5883L_WriteBit@tmp(COMMON[1]), HMC5883L_WriteBits@tmp(COMMON[1]), heading(BANK3[8]), HMC5883L_TestConnection@tmp(COMMON[3]), 
		 -> MPU6050_ReadBit@tmp(COMMON[1]), MPU6050_ReadBits@tmp(COMMON[1]), MPU6050_WriteBit@tmp(COMMON[1]), MPU6050_WriteBits@tmp(COMMON[1]), 
		 -> MPU6050_GetRawAccel@tempBuffer(COMMON[6]), MPU6050_GetRawAccelGyro@tmpBuffer(COMMON[14]), 

    i2c2_object.pTrTail.ptrb_list	PTR struct . size(1) Largest target is 5
		 -> I2C2_MasterRead@trBlock(BANK2[5]), I2C2_MasterWrite@trBlock(BANK2[5]), 

    I2C2_MasterTRBInsert@ptrb_list	PTR struct . size(1) Largest target is 5
		 -> I2C2_MasterRead@trBlock(BANK2[5]), I2C2_MasterWrite@trBlock(BANK2[5]), 

    I2C2_MasterTRBInsert@pflag	PTR enum E2993 size(1) Largest target is 1
		 -> I2C_BufferRead@status(BANK0[1]), I2C_ByteWrite@status(BANK0[1]), 

    I2C2_MasterRead@pflag	PTR enum E2993 size(1) Largest target is 1
		 -> I2C_BufferRead@status(BANK0[1]), 

    I2C2_MasterRead@pdata	PTR unsigned char  size(2) Largest target is 24
		 -> data(BANK3[8]), b1(BANK3[24]), HMC5883L_ReadBit@tmp(COMMON[1]), HMC5883L_ReadBits@tmp(BANK0[1]), 
		 -> HMC5883L_WriteBit@tmp(COMMON[1]), HMC5883L_WriteBits@tmp(COMMON[1]), heading(BANK3[8]), HMC5883L_TestConnection@tmp(COMMON[3]), 
		 -> MPU6050_ReadBit@tmp(COMMON[1]), MPU6050_ReadBits@tmp(COMMON[1]), MPU6050_WriteBit@tmp(COMMON[1]), MPU6050_WriteBits@tmp(COMMON[1]), 
		 -> MPU6050_GetRawAccel@tempBuffer(COMMON[6]), MPU6050_GetRawAccelGyro@tmpBuffer(COMMON[14]), 

    F3105.pbuffer	PTR unsigned char  size(2) Largest target is 24
		 -> I2C_BufferRead@ReadAddr(BANK0[1]), I2C_BufferRead@status(BANK0[1]), I2C_ByteWrite@data(BANK0[2]), I2C_ByteWrite@status(BANK0[1]), 
		 -> data(BANK3[8]), b1(BANK3[24]), HMC5883L_ReadBit@tmp(COMMON[1]), HMC5883L_ReadBits@tmp(BANK0[1]), 
		 -> HMC5883L_WriteBit@tmp(COMMON[1]), HMC5883L_WriteBits@tmp(COMMON[1]), heading(BANK3[8]), HMC5883L_TestConnection@tmp(COMMON[3]), 
		 -> MPU6050_ReadBit@tmp(COMMON[1]), MPU6050_ReadBits@tmp(COMMON[1]), MPU6050_WriteBit@tmp(COMMON[1]), MPU6050_WriteBits@tmp(COMMON[1]), 
		 -> MPU6050_GetRawAccel@tempBuffer(COMMON[6]), MPU6050_GetRawAccelGyro@tmpBuffer(COMMON[14]), 

    I2C2_MasterWrite@pflag	PTR enum E2993 size(1) Largest target is 1
		 -> I2C_BufferRead@status(BANK0[1]), I2C_ByteWrite@status(BANK0[1]), 

    I2C2_MasterWrite@pdata	PTR unsigned char  size(1) Largest target is 2
		 -> I2C_BufferRead@ReadAddr(BANK0[1]), I2C_ByteWrite@data(BANK0[2]), 

    F3100.pbuffer	PTR unsigned char  size(2) Largest target is 24
		 -> I2C_BufferRead@ReadAddr(BANK0[1]), I2C_BufferRead@status(BANK0[1]), I2C_ByteWrite@data(BANK0[2]), I2C_ByteWrite@status(BANK0[1]), 
		 -> data(BANK3[8]), b1(BANK3[24]), HMC5883L_ReadBit@tmp(COMMON[1]), HMC5883L_ReadBits@tmp(BANK0[1]), 
		 -> HMC5883L_WriteBit@tmp(COMMON[1]), HMC5883L_WriteBits@tmp(COMMON[1]), heading(BANK3[8]), HMC5883L_TestConnection@tmp(COMMON[3]), 
		 -> MPU6050_ReadBit@tmp(COMMON[1]), MPU6050_ReadBits@tmp(COMMON[1]), MPU6050_WriteBit@tmp(COMMON[1]), MPU6050_WriteBits@tmp(COMMON[1]), 
		 -> MPU6050_GetRawAccel@tempBuffer(COMMON[6]), MPU6050_GetRawAccelGyro@tmpBuffer(COMMON[14]), 

    I2C2_ISR@pi2c_buf_ptr	PTR unsigned char  size(2) Largest target is 24
		 -> I2C_BufferRead@ReadAddr(BANK0[1]), I2C_BufferRead@status(BANK0[1]), I2C_ByteWrite@data(BANK0[2]), I2C_ByteWrite@status(BANK0[1]), 
		 -> data(BANK3[8]), b1(BANK3[24]), HMC5883L_ReadBit@tmp(COMMON[1]), HMC5883L_ReadBits@tmp(BANK0[1]), 
		 -> HMC5883L_WriteBit@tmp(COMMON[1]), HMC5883L_WriteBits@tmp(COMMON[1]), heading(BANK3[8]), HMC5883L_TestConnection@tmp(COMMON[3]), 
		 -> MPU6050_ReadBit@tmp(COMMON[1]), MPU6050_ReadBits@tmp(COMMON[1]), MPU6050_WriteBit@tmp(COMMON[1]), MPU6050_WriteBits@tmp(COMMON[1]), 
		 -> MPU6050_GetRawAccel@tempBuffer(COMMON[6]), MPU6050_GetRawAccelGyro@tmpBuffer(COMMON[14]), NULL(NULL[0]), 

    p_i2c2_trb_current.pbuffer	PTR unsigned char  size(2) Largest target is 24
		 -> I2C_BufferRead@ReadAddr(BANK0[1]), I2C_BufferRead@status(BANK0[1]), I2C_ByteWrite@data(BANK0[2]), I2C_ByteWrite@status(BANK0[1]), 
		 -> data(BANK3[8]), b1(BANK3[24]), HMC5883L_ReadBit@tmp(COMMON[1]), HMC5883L_ReadBits@tmp(BANK0[1]), 
		 -> HMC5883L_WriteBit@tmp(COMMON[1]), HMC5883L_WriteBits@tmp(COMMON[1]), heading(BANK3[8]), HMC5883L_TestConnection@tmp(COMMON[3]), 
		 -> MPU6050_ReadBit@tmp(COMMON[1]), MPU6050_ReadBits@tmp(COMMON[1]), MPU6050_WriteBit@tmp(COMMON[1]), MPU6050_WriteBits@tmp(COMMON[1]), 
		 -> MPU6050_GetRawAccel@tempBuffer(COMMON[6]), MPU6050_GetRawAccelGyro@tmpBuffer(COMMON[14]), 

    p_i2c2_trb_current	PTR struct . size(1) Largest target is 5
		 -> I2C2_MasterRead@trBlock(BANK2[5]), I2C2_MasterWrite@trBlock(BANK2[5]), NULL(NULL[0]), 

    i2c2_object.pTrHead.pTrFlag	PTR enum E2993 size(2) Largest target is 24
		 -> I2C_BufferRead@ReadAddr(BANK0[1]), I2C_BufferRead@status(BANK0[1]), I2C_ByteWrite@data(BANK0[2]), I2C_ByteWrite@status(BANK0[1]), 
		 -> data(BANK3[8]), b1(BANK3[24]), HMC5883L_ReadBit@tmp(COMMON[1]), HMC5883L_ReadBits@tmp(BANK0[1]), 
		 -> HMC5883L_WriteBit@tmp(COMMON[1]), HMC5883L_WriteBits@tmp(COMMON[1]), heading(BANK3[8]), HMC5883L_TestConnection@tmp(COMMON[3]), 
		 -> MPU6050_ReadBit@tmp(COMMON[1]), MPU6050_ReadBits@tmp(COMMON[1]), MPU6050_WriteBit@tmp(COMMON[1]), MPU6050_WriteBits@tmp(COMMON[1]), 
		 -> MPU6050_GetRawAccel@tempBuffer(COMMON[6]), MPU6050_GetRawAccelGyro@tmpBuffer(COMMON[14]), 

    i2c2_object.pTrHead.ptrb_list	PTR struct . size(1) Largest target is 5
		 -> I2C2_MasterRead@trBlock(BANK2[5]), I2C2_MasterWrite@trBlock(BANK2[5]), 

    S587$pbuffer	PTR unsigned char  size(2) Largest target is 24
		 -> I2C_BufferRead@ReadAddr(BANK0[1]), I2C_BufferRead@status(BANK0[1]), I2C_ByteWrite@data(BANK0[2]), I2C_ByteWrite@status(BANK0[1]), 
		 -> data(BANK3[8]), b1(BANK3[24]), HMC5883L_ReadBit@tmp(COMMON[1]), HMC5883L_ReadBits@tmp(BANK0[1]), 
		 -> HMC5883L_WriteBit@tmp(COMMON[1]), HMC5883L_WriteBits@tmp(COMMON[1]), heading(BANK3[8]), HMC5883L_TestConnection@tmp(COMMON[3]), 
		 -> MPU6050_ReadBit@tmp(COMMON[1]), MPU6050_ReadBits@tmp(COMMON[1]), MPU6050_WriteBit@tmp(COMMON[1]), MPU6050_WriteBits@tmp(COMMON[1]), 
		 -> MPU6050_GetRawAccel@tempBuffer(COMMON[6]), MPU6050_GetRawAccelGyro@tmpBuffer(COMMON[14]), 

    p_i2c2_current.pbuffer	PTR unsigned char  size(2) Largest target is 24
		 -> I2C_BufferRead@ReadAddr(BANK0[1]), I2C_BufferRead@status(BANK0[1]), I2C_ByteWrite@data(BANK0[2]), I2C_ByteWrite@status(BANK0[1]), 
		 -> data(BANK3[8]), b1(BANK3[24]), HMC5883L_ReadBit@tmp(COMMON[1]), HMC5883L_ReadBits@tmp(BANK0[1]), 
		 -> HMC5883L_WriteBit@tmp(COMMON[1]), HMC5883L_WriteBits@tmp(COMMON[1]), heading(BANK3[8]), HMC5883L_TestConnection@tmp(COMMON[3]), 
		 -> MPU6050_ReadBit@tmp(COMMON[1]), MPU6050_ReadBits@tmp(COMMON[1]), MPU6050_WriteBit@tmp(COMMON[1]), MPU6050_WriteBits@tmp(COMMON[1]), 
		 -> MPU6050_GetRawAccel@tempBuffer(COMMON[6]), MPU6050_GetRawAccelGyro@tmpBuffer(COMMON[14]), 

    S599$pTrFlag	PTR enum E2993 size(2) Largest target is 24
		 -> I2C_BufferRead@ReadAddr(BANK0[1]), I2C_BufferRead@status(BANK0[1]), I2C_ByteWrite@data(BANK0[2]), I2C_ByteWrite@status(BANK0[1]), 
		 -> data(BANK3[8]), b1(BANK3[24]), HMC5883L_ReadBit@tmp(COMMON[1]), HMC5883L_ReadBits@tmp(BANK0[1]), 
		 -> HMC5883L_WriteBit@tmp(COMMON[1]), HMC5883L_WriteBits@tmp(COMMON[1]), heading(BANK3[8]), HMC5883L_TestConnection@tmp(COMMON[3]), 
		 -> MPU6050_ReadBit@tmp(COMMON[1]), MPU6050_ReadBits@tmp(COMMON[1]), MPU6050_WriteBit@tmp(COMMON[1]), MPU6050_WriteBits@tmp(COMMON[1]), 
		 -> MPU6050_GetRawAccel@tempBuffer(COMMON[6]), MPU6050_GetRawAccelGyro@tmpBuffer(COMMON[14]), 

    p_i2c2_current.pTrFlag	PTR enum E2993 size(2) Largest target is 24
		 -> I2C_BufferRead@ReadAddr(BANK0[1]), I2C_BufferRead@status(BANK0[1]), I2C_ByteWrite@data(BANK0[2]), I2C_ByteWrite@status(BANK0[1]), 
		 -> data(BANK3[8]), b1(BANK3[24]), HMC5883L_ReadBit@tmp(COMMON[1]), HMC5883L_ReadBits@tmp(BANK0[1]), 
		 -> HMC5883L_WriteBit@tmp(COMMON[1]), HMC5883L_WriteBits@tmp(COMMON[1]), heading(BANK3[8]), HMC5883L_TestConnection@tmp(COMMON[3]), 
		 -> MPU6050_ReadBit@tmp(COMMON[1]), MPU6050_ReadBits@tmp(COMMON[1]), MPU6050_WriteBit@tmp(COMMON[1]), MPU6050_WriteBits@tmp(COMMON[1]), 
		 -> MPU6050_GetRawAccel@tempBuffer(COMMON[6]), MPU6050_GetRawAccelGyro@tmpBuffer(COMMON[14]), 

    S599$ptrb_list	PTR struct . size(1) Largest target is 5
		 -> I2C2_MasterRead@trBlock(BANK2[5]), I2C2_MasterWrite@trBlock(BANK2[5]), 

    p_i2c2_current.ptrb_list	PTR struct . size(1) Largest target is 5
		 -> I2C2_MasterRead@trBlock(BANK2[5]), I2C2_MasterWrite@trBlock(BANK2[5]), 

    p_i2c2_current	PTR struct . size(1) Largest target is 5
		 -> i2c2_tr_queue(BANK2[4]), NULL(NULL[0]), 

    S610$pTrHead	PTR struct . size(1) Largest target is 5
		 -> i2c2_tr_queue(BANK2[4]), 

    i2c2_object.pTrHead	PTR struct . size(1) Largest target is 5
		 -> i2c2_tr_queue(BANK2[4]), 

    S610$pTrTail	PTR struct . size(1) Largest target is 5
		 -> i2c2_tr_queue(BANK2[4]), 

    i2c2_object.pTrTail	PTR struct . size(1) Largest target is 5
		 -> i2c2_tr_queue(BANK2[4]), 

    TMR1_SetInterruptHandler@InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> TMR1_DefaultInterruptHandler(), 

    TMR1_InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> TMR1_DefaultInterruptHandler(), Absolute function(), 

    IOCAF2_SetInterruptHandler@InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> IOCAF2_DefaultInterruptHandler(), 

    IOCAF2_InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), IOCAF2_DefaultInterruptHandler(), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _INTERRUPT_InterruptManager in COMMON

    _INTERRUPT_InterruptManager->_I2C2_ISR
    _I2C2_ISR->_I2C2_Stop

Critical Paths under _main in BANK0

    _main->_Wireless_packageData
    _Wireless_wake->_RF_ReadRegisterData
    _Wireless_sleep->_RF_ReadRegisterData
    _Wireless_packageData->___fttol
    _Wireless_determineTransmitPower->_Wireless_sendData
    _Wireless_sendData->_RF_TxPayload
    _RF_TxPayload->_RF_WriteRegisterData
    _RF_Write->_SPI_WriteRead
    _RF_GetStatus->_RF_WriteRead
    _RF_WriteRead->_SPI_WriteRead
    _Wireless_changeTransmitPower->_RF_ReadRegisterData
    _Wireless_checkDataReceived->_RF_RxPayload
    _RF_RxPayload->_RF_ReadRegisterData
    _RF_ReadRegisterData->_SPI_WriteReadBuffer
    _SPI_WriteReadBuffer->_SPI_WriteRead
    _RF_DataIsReady->_RF_ReadRegister
    _RF_ReadRegister->_SPI_WriteRead
    _DOOR_update->_Storage_save
    _Storage_save->_DATAEE_WriteByte
    _Sensor_getSupplyVoltage->___ftdiv
    _Wireless_init->_RF_WriteRegisterData
    _RF_WriteRegisterData->_SPI_WriteBuffer
    _SPI_WriteBuffer->_SPI_WriteRead
    _RF_ResetStatusIRQ->_RF_WriteRegister
    _RF_WriteRegister->_SPI_WriteRead
    _SPI_WriteRead->_SPI1_Exchange8bit
    _Timeout_updateCurrentTime->___lmul
    _TMR1_Initialize->_TMR1_SetInterruptHandler
    _PIN_MANAGER_Initialize->_IOCAF2_SetInterruptHandler
    _BMP_readTemperature->___fttol
    ___lwtoft->___ftpack
    ___fttol->___ftmul
    ___ftneg->___ftdiv
    ___ftmul->___ftadd
    ___ftdiv->___altoft
    ___ftadd->_Sensor_getSupplyVoltage
    ___awtoft->___ftpack
    ___altoft->___ftpack
    ___altoft->___ftpack
    _HMC5883L_ReadBits->_HMC5883L_I2C_BufferRead
    _HMC5883L_I2C_BufferRead->_I2C_BufferRead
    _BMP_init->_I2C_BufferRead
    _I2C_ByteWrite->_I2C2_MasterWrite
    _I2C_BufferRead->_I2C2_MasterRead
    _I2C2_MasterWrite->_I2C2_MasterWriteTRBBuild
    _I2C2_MasterRead->_I2C2_MasterReadTRBBuild

Critical Paths under _INTERRUPT_InterruptManager in BANK0

    None.

Critical Paths under _main in BANK1

    _main->_Wireless_packageData
    _Wireless_packageData->_BMP_readTemperature
    _BMP_readTemperature->___fttol

Critical Paths under _INTERRUPT_InterruptManager in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK12

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                14    14      0  106432
                                             40 BANK1      2     2      0
                                              0 BANK3     12    12      0
                           _BMP_init
                _BMP_readTemperature
                          _DOOR_init
                           _DOOR_run
                  _SYSTEM_Initialize
             _Sensor_peripheralSleep
           _Timeout_getGlobalCounter
          _Timeout_updateCurrentTime
    _Wireless_determineTransmitPower
                      _Wireless_init
               _Wireless_packageData
                     _Wireless_sleep
                      _Wireless_wake
                            ___lldiv
                            ___lwdiv
                       _setSleepTime
 ---------------------------------------------------------------------------------
 (1) _setSleepTime                                         2     0      2     154
                                              1 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (1) ___lwdiv                                              8     4      4     703
                                              1 BANK0      8     4      4
 ---------------------------------------------------------------------------------
 (1) ___lldiv                                             14     6      8     395
                                              1 BANK0     14     6      8
 ---------------------------------------------------------------------------------
 (1) _Wireless_wake                                        2     2      0    2442
                                             15 BANK0      2     2      0
                _RF_ReadRegisterData
                   _RF_WriteRegister
 ---------------------------------------------------------------------------------
 (1) _Wireless_sleep                                       2     2      0    2442
                                             15 BANK0      2     2      0
                _RF_ReadRegisterData
                   _RF_WriteRegister
 ---------------------------------------------------------------------------------
 (1) _Wireless_packageData                                15    11      4   32936
                                             78 BANK0      1     1      0
                                             26 BANK1     14    10      4
                _BMP_readTemperature (ARG)
               _Diag_getSensorHealth
            _Sensor_getSupplyVoltage
         _Wireless_checkDataReceived
    _Wireless_determineTransmitPower
                  _Wireless_sendData
                            ___ftadd
                            ___ftmul
                            ___fttol
                            ___lldiv (ARG)
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (2) _Wireless_determineTransmitPower                      6     6      0    6384
                                             21 BANK0      6     6      0
       _Wireless_changeTransmitPower
  _Wireless_isDataTransmitSuccessful
                  _Wireless_sendData
                              _limit
 ---------------------------------------------------------------------------------
 (3) _limit                                                7     1      6     448
                                              1 BANK0      7     1      6
 ---------------------------------------------------------------------------------
 (2) _Wireless_sendData                                    4     3      1    3104
                                             17 BANK0      4     3      1
                       _RF_GetStatus
                  _RF_ResetStatusIRQ
                       _RF_TxPayload
 ---------------------------------------------------------------------------------
 (3) _RF_TxPayload                                         3     2      1    1536
                                             14 BANK0      3     2      1
                           _RF_Write
               _RF_WriteRegisterData
 ---------------------------------------------------------------------------------
 (4) _RF_Write                                             1     1      0      93
                                              3 BANK0      1     1      0
                      _SPI_WriteRead
 ---------------------------------------------------------------------------------
 (3) _Wireless_isDataTransmitSuccessful                    2     2      0     161
                                              5 BANK0      2     2      0
                       _RF_GetStatus
 ---------------------------------------------------------------------------------
 (3) _RF_GetStatus                                         0     0      0     127
                       _RF_WriteRead
 ---------------------------------------------------------------------------------
 (4) _RF_WriteRead                                         2     2      0     127
                                              3 BANK0      2     2      0
                      _SPI_WriteRead
 ---------------------------------------------------------------------------------
 (3) _Wireless_changeTransmitPower                         3     3      0    2476
                                             15 BANK0      3     3      0
                _RF_ReadRegisterData
                   _RF_WriteRegister
 ---------------------------------------------------------------------------------
 (2) _Wireless_checkDataReceived                           9     9      0    3463
                                             19 BANK0      9     9      0
                      _DOOR_resetPos
                        _DOOR_update
                     _RF_DataIsReady
                       _RF_RxPayload
                             ___lmul
 ---------------------------------------------------------------------------------
 (3) _RF_RxPayload                                         4     3      1    1415
                                             15 BANK0      4     3      1
                _RF_ReadRegisterData
 ---------------------------------------------------------------------------------
 (2) _RF_ReadRegisterData                                  5     3      2    1243
                                             10 BANK0      5     3      2
                      _SPI_WriteRead
                _SPI_WriteReadBuffer
 ---------------------------------------------------------------------------------
 (3) _SPI_WriteReadBuffer                                  7     5      2     441
                                              3 BANK0      7     5      2
                      _SPI_WriteRead
 ---------------------------------------------------------------------------------
 (3) _RF_DataIsReady                                       3     3      0     292
                                              6 BANK0      3     3      0
                    _RF_ReadRegister
 ---------------------------------------------------------------------------------
 (4) _RF_ReadRegister                                      3     3      0     127
                                              3 BANK0      3     3      0
                      _SPI_WriteRead
 ---------------------------------------------------------------------------------
 (3) _DOOR_update                                          3     2      1     978
                                              7 BANK0      3     2      1
                       _Storage_save
 ---------------------------------------------------------------------------------
 (4) _Storage_save                                         3     2      1     700
                                              4 BANK0      3     2      1
                   _DATAEE_WriteByte
 ---------------------------------------------------------------------------------
 (5) _DATAEE_WriteByte                                     3     2      1     561
                                              1 BANK0      3     2      1
 ---------------------------------------------------------------------------------
 (3) _DOOR_resetPos                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _Sensor_getSupplyVoltage                              8     5      3    7868
                                             33 BANK0      8     5      3
            _ADC_GetConversionResult
               _ADC_IsConversionDone
                  _ADC_SelectChannel
                _ADC_StartConversion
                  _FVR_IsOutputReady
             _Sensor_peripheralSleep
              _Sensor_peripheralWake
                            ___ftdiv
                           ___lwtoft
 ---------------------------------------------------------------------------------
 (3) _Sensor_peripheralWake                                0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _Sensor_peripheralSleep                               0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _FVR_IsOutputReady                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _ADC_StartConversion                                  0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _ADC_SelectChannel                                    2     2      0      31
                                              1 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (3) _ADC_IsConversionDone                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _ADC_GetConversionResult                              2     0      2       0
                                              1 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (2) _Diag_getSensorHealth                                 2     2      0      43
                                              1 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _Wireless_init                                        2     2      0    3552
                                             14 BANK0      2     2      0
                            _RF_Init
                  _RF_ResetStatusIRQ
                   _RF_WriteRegister
               _RF_WriteRegisterData
 ---------------------------------------------------------------------------------
 (4) _RF_WriteRegisterData                                 5     2      3    1271
                                              9 BANK0      5     2      3
                    _SPI_WriteBuffer
                      _SPI_WriteRead
 ---------------------------------------------------------------------------------
 (5) _SPI_WriteBuffer                                      6     3      3     346
                                              3 BANK0      6     3      3
                      _SPI_WriteRead
 ---------------------------------------------------------------------------------
 (3) _RF_ResetStatusIRQ                                    2     2      0    1156
                                              5 BANK0      2     2      0
                   _RF_WriteRegister
 ---------------------------------------------------------------------------------
 (2) _RF_WriteRegister                                     2     1      1    1125
                                              3 BANK0      2     1      1
                      _SPI_WriteRead
 ---------------------------------------------------------------------------------
 (3) _SPI_WriteRead                                        1     1      0      62
                                              2 BANK0      1     1      0
                  _SPI1_Exchange8bit
 ---------------------------------------------------------------------------------
 (4) _SPI1_Exchange8bit                                    1     1      0      31
                                              1 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _RF_Init                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Timeout_updateCurrentTime                            8     8      0     617
                                             13 BANK0      8     8      0
                     _TMR1_ReadTimer
                             ___lmul
 ---------------------------------------------------------------------------------
 (3) ___lmul                                              12     4      8     444
                                              1 BANK0     12     4      8
 ---------------------------------------------------------------------------------
 (2) _TMR1_ReadTimer                                      11     9      2     102
                                              1 BANK0     11     9      2
 ---------------------------------------------------------------------------------
 (1) _Timeout_getGlobalCounter                             4     0      4       0
                                              1 BANK0      4     0      4
 ---------------------------------------------------------------------------------
 (1) _SYSTEM_Initialize                                    0     0      0     216
                     _ADC_Initialize
                     _FVR_Initialize
                    _I2C2_Initialize
              _OSCILLATOR_Initialize
             _PIN_MANAGER_Initialize
                    _SPI1_Initialize
                    _TMR1_Initialize
                    _TMR2_Initialize
                     _WDT_Initialize
 ---------------------------------------------------------------------------------
 (2) _WDT_Initialize                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _TMR2_Initialize                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _TMR1_Initialize                                      0     0      0     108
           _TMR1_SetInterruptHandler
 ---------------------------------------------------------------------------------
 (3) _TMR1_SetInterruptHandler                             2     0      2     108
                                              1 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (2) _SPI1_Initialize                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _PIN_MANAGER_Initialize                               0     0      0     108
         _IOCAF2_SetInterruptHandler
 ---------------------------------------------------------------------------------
 (3) _IOCAF2_SetInterruptHandler                           2     0      2     108
                                              1 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (2) _OSCILLATOR_Initialize                                0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _I2C2_Initialize                                      1     1      0       0
                                              1 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _FVR_Initialize                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _ADC_Initialize                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _DOOR_run                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _DOOR_init                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _BMP_readTemperature                                 20    17      3   48745
                                              6 BANK1     20    17      3
                           _BMP_init
           _Diag_getTempSensorHealth
           _Diag_setTempSensorHealth
                  _HMC5883L_ReadBits
                     _I2C_BufferRead
                      _I2C_ByteWrite
                            ___aldiv
                           ___altoft
                           ___awtoft
                            ___ftadd
                            ___ftdiv
                            ___ftmul
                            ___ftneg
                            ___fttol
                           ___lwtoft
 ---------------------------------------------------------------------------------
 (3) ___lwtoft                                             4     1      3    2923
                                              9 BANK0      4     1      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (2) ___fttol                                             14    10      4     679
                                             70 BANK0      8     4      4
                                              0 BANK1      6     6      0
            _Sensor_getSupplyVoltage (ARG)
                           ___altoft (ARG)
                            ___ftadd (ARG)
                            ___ftmul (ARG)
 ---------------------------------------------------------------------------------
 (2) ___ftneg                                              3     0      3     524
                                             33 BANK0      3     0      3
                            ___ftdiv (ARG)
                           ___lwtoft (ARG)
 ---------------------------------------------------------------------------------
 (2) ___ftmul                                             16    10      6    4338
                                             54 BANK0     16    10      6
            _Sensor_getSupplyVoltage (ARG)
                           ___altoft (ARG)
                           ___awtoft (ARG)
                            ___ftadd (ARG)
                            ___ftdiv (ARG)
                            ___ftneg (ARG)
                           ___ftpack
                           ___lwtoft (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftdiv                                             16    10      6    4846
                                             17 BANK0     16    10      6
                           ___altoft (ARG)
                           ___ftpack
                           ___ftpack (ARG)
                           ___lwtoft (ARG)
 ---------------------------------------------------------------------------------
 (2) ___ftadd                                             13     7      6    5611
                                             41 BANK0     13     7      6
            _Sensor_getSupplyVoltage (ARG)
                           ___altoft (ARG)
                            ___ftdiv (ARG)
                            ___ftneg (ARG)
                           ___ftpack
                           ___lwtoft (ARG)
 ---------------------------------------------------------------------------------
 (2) ___awtoft                                             6     3      3    3025
                                              9 BANK0      6     3      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (2) ___altoft                                             8     4      4    3096
                                              9 BANK0      8     4      4
                           ___ftpack
                           ___ftpack (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftpack                                             8     3      5    2584
                                              1 BANK0      8     3      5
 ---------------------------------------------------------------------------------
 (2) ___aldiv                                             15     7      8     599
                                              1 BANK0     15     7      8
 ---------------------------------------------------------------------------------
 (2) _HMC5883L_ReadBits                                   10     6      4    8661
                                             35 BANK0     10     6      4
            _HMC5883L_I2C_BufferRead
 ---------------------------------------------------------------------------------
 (3) _HMC5883L_I2C_BufferRead                              7     2      5    6134
                                             28 BANK0      7     2      5
                     _I2C_BufferRead
 ---------------------------------------------------------------------------------
 (2) _Diag_getTempSensorHealth                             0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _BMP_init                                             4     4      0    7138
                                             28 BANK0      4     4      0
           _Diag_setTempSensorHealth
                     _I2C_BufferRead
                      _I2C_ByteWrite
 ---------------------------------------------------------------------------------
 (2) _I2C_ByteWrite                                       10     8      2    2674
                                             15 BANK0     10     8      2
                   _I2C2_MasterWrite
                 _Timeout_hasExpired
                 _Timeout_setTimeout
 ---------------------------------------------------------------------------------
 (2) _I2C_BufferRead                                      11     6      5    4393
                                             17 BANK0     11     6      5
                    _I2C2_MasterRead
                   _I2C2_MasterWrite
                 _Timeout_hasExpired
                 _Timeout_setTimeout
 ---------------------------------------------------------------------------------
 (3) _Timeout_setTimeout                                   2     0      2     262
                                              1 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (3) _Timeout_hasExpired                                  12    12      0       0
                                              1 BANK0     12    12      0
 ---------------------------------------------------------------------------------
 (3) _I2C2_MasterWrite                                     7     3      4    1627
                                              8 BANK0      7     3      4
               _I2C2_MasterTRBInsert
           _I2C2_MasterWriteTRBBuild
 ---------------------------------------------------------------------------------
 (4) _I2C2_MasterWriteTRBBuild                             7     3      4     450
                                              1 BANK0      7     3      4
 ---------------------------------------------------------------------------------
 (3) _I2C2_MasterRead                                      8     2      6    1398
                                              9 BANK0      8     2      6
            _I2C2_MasterReadTRBBuild
               _I2C2_MasterTRBInsert
 ---------------------------------------------------------------------------------
 (4) _I2C2_MasterTRBInsert                                 4     2      2     494
                                              1 BANK0      4     2      2
 ---------------------------------------------------------------------------------
 (4) _I2C2_MasterReadTRBBuild                              8     3      5     481
                                              1 BANK0      8     3      5
 ---------------------------------------------------------------------------------
 (2) _Diag_setTempSensorHealth                             2     2      0      31
                                              1 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (9) _INTERRUPT_InterruptManager                           1     1      0      22
                                              0 BANK0      1     1      0
               _I2C2_BusCollisionISR
                           _I2C2_ISR
                    _PIN_MANAGER_IOC
                           _TMR1_ISR
 ---------------------------------------------------------------------------------
 (10) _TMR1_ISR                                            0     0      0       0
                      _TMR1_CallBack
 ---------------------------------------------------------------------------------
 (11) _TMR1_CallBack                                       0     0      0       0
                   Absolute function *
       _TMR1_DefaultInterruptHandler *
                  _Timeout_increment
 ---------------------------------------------------------------------------------
 (12) _Timeout_increment                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (12) _TMR1_DefaultInterruptHandler                        0     0      0       0
 ---------------------------------------------------------------------------------
 (10) _PIN_MANAGER_IOC                                     0     0      0       0
                         _IOCAF2_ISR
 ---------------------------------------------------------------------------------
 (11) _IOCAF2_ISR                                          0     0      0       0
                   Absolute function *
     _IOCAF2_DefaultInterruptHandler *
 ---------------------------------------------------------------------------------
 (12) _IOCAF2_DefaultInterruptHandler                      0     0      0       0
 ---------------------------------------------------------------------------------
 (12) Absolute function(Fake)                              0     0      0       0
 ---------------------------------------------------------------------------------
 (10) _I2C2_ISR                                            4     4      0      22
                                              3 COMMON     4     4      0
              _I2C2_FunctionComplete
                          _I2C2_Stop
 ---------------------------------------------------------------------------------
 (11) _I2C2_Stop                                           3     3      0      22
                                              0 COMMON     3     3      0
 ---------------------------------------------------------------------------------
 (11) _I2C2_FunctionComplete                               1     1      0       0
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (10) _I2C2_BusCollisionISR                                0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 12
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _BMP_init
     _Diag_setTempSensorHealth
     _I2C_BufferRead
       _I2C2_MasterRead
         _I2C2_MasterReadTRBBuild
         _I2C2_MasterTRBInsert
       _I2C2_MasterWrite
         _I2C2_MasterTRBInsert
         _I2C2_MasterWriteTRBBuild
       _Timeout_hasExpired
       _Timeout_setTimeout
     _I2C_ByteWrite
       _I2C2_MasterWrite
         _I2C2_MasterTRBInsert
         _I2C2_MasterWriteTRBBuild
       _Timeout_hasExpired
       _Timeout_setTimeout
   _BMP_readTemperature
     _BMP_init
       _Diag_setTempSensorHealth
       _I2C_BufferRead
         _I2C2_MasterRead
           _I2C2_MasterReadTRBBuild
           _I2C2_MasterTRBInsert
         _I2C2_MasterWrite
           _I2C2_MasterTRBInsert
           _I2C2_MasterWriteTRBBuild
         _Timeout_hasExpired
         _Timeout_setTimeout
       _I2C_ByteWrite
         _I2C2_MasterWrite
           _I2C2_MasterTRBInsert
           _I2C2_MasterWriteTRBBuild
         _Timeout_hasExpired
         _Timeout_setTimeout
     _Diag_getTempSensorHealth
     _Diag_setTempSensorHealth
     _HMC5883L_ReadBits
       _HMC5883L_I2C_BufferRead
         _I2C_BufferRead
           _I2C2_MasterRead
             _I2C2_MasterReadTRBBuild
             _I2C2_MasterTRBInsert
           _I2C2_MasterWrite
             _I2C2_MasterTRBInsert
             _I2C2_MasterWriteTRBBuild
           _Timeout_hasExpired
           _Timeout_setTimeout
     _I2C_BufferRead
       _I2C2_MasterRead
         _I2C2_MasterReadTRBBuild
         _I2C2_MasterTRBInsert
       _I2C2_MasterWrite
         _I2C2_MasterTRBInsert
         _I2C2_MasterWriteTRBBuild
       _Timeout_hasExpired
       _Timeout_setTimeout
     _I2C_ByteWrite
       _I2C2_MasterWrite
         _I2C2_MasterTRBInsert
         _I2C2_MasterWriteTRBBuild
       _Timeout_hasExpired
       _Timeout_setTimeout
     ___aldiv
     ___altoft
       ___ftpack
       ___ftpack (ARG)
     ___awtoft
       ___ftpack
     ___ftadd
       _Sensor_getSupplyVoltage (ARG)
         _ADC_GetConversionResult
         _ADC_IsConversionDone
         _ADC_SelectChannel
         _ADC_StartConversion
         _FVR_IsOutputReady
         _Sensor_peripheralSleep
         _Sensor_peripheralWake
         ___ftdiv
           ___altoft (ARG)
             ___ftpack
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
         ___lwtoft
           ___ftpack
       ___altoft (ARG)
         ___ftpack
         ___ftpack (ARG)
       ___ftdiv (ARG)
         ___altoft (ARG)
           ___ftpack
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
       ___ftneg (ARG)
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
         ___lwtoft (ARG)
           ___ftpack
       ___ftpack (ARG)
       ___lwtoft (ARG)
         ___ftpack
     ___ftdiv
       ___altoft (ARG)
         ___ftpack
         ___ftpack (ARG)
       ___ftpack (ARG)
       ___ftpack (ARG)
       ___lwtoft (ARG)
         ___ftpack
     ___ftmul
       _Sensor_getSupplyVoltage (ARG)
         _ADC_GetConversionResult
         _ADC_IsConversionDone
         _ADC_SelectChannel
         _ADC_StartConversion
         _FVR_IsOutputReady
         _Sensor_peripheralSleep
         _Sensor_peripheralWake
         ___ftdiv
           ___altoft (ARG)
             ___ftpack
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
         ___lwtoft
           ___ftpack
       ___altoft (ARG)
         ___ftpack
         ___ftpack (ARG)
       ___awtoft (ARG)
         ___ftpack
       ___ftadd (ARG)
         _Sensor_getSupplyVoltage (ARG)
           _ADC_GetConversionResult
           _ADC_IsConversionDone
           _ADC_SelectChannel
           _ADC_StartConversion
           _FVR_IsOutputReady
           _Sensor_peripheralSleep
           _Sensor_peripheralWake
           ___ftdiv
             ___altoft (ARG)
               ___ftpack
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
           ___lwtoft
             ___ftpack
         ___altoft (ARG)
           ___ftpack
           ___ftpack (ARG)
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
         ___ftneg (ARG)
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
           ___lwtoft (ARG)
             ___ftpack
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
       ___ftdiv (ARG)
         ___altoft (ARG)
           ___ftpack
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
       ___ftneg (ARG)
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
         ___lwtoft (ARG)
           ___ftpack
       ___ftpack (ARG)
       ___lwtoft (ARG)
         ___ftpack
     ___ftneg
       ___ftdiv (ARG)
         ___altoft (ARG)
           ___ftpack
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
       ___lwtoft (ARG)
         ___ftpack
     ___fttol
       _Sensor_getSupplyVoltage (ARG)
         _ADC_GetConversionResult
         _ADC_IsConversionDone
         _ADC_SelectChannel
         _ADC_StartConversion
         _FVR_IsOutputReady
         _Sensor_peripheralSleep
         _Sensor_peripheralWake
         ___ftdiv
           ___altoft (ARG)
             ___ftpack
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
         ___lwtoft
           ___ftpack
       ___altoft (ARG)
         ___ftpack
         ___ftpack (ARG)
       ___ftadd (ARG)
         _Sensor_getSupplyVoltage (ARG)
           _ADC_GetConversionResult
           _ADC_IsConversionDone
           _ADC_SelectChannel
           _ADC_StartConversion
           _FVR_IsOutputReady
           _Sensor_peripheralSleep
           _Sensor_peripheralWake
           ___ftdiv
             ___altoft (ARG)
               ___ftpack
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
           ___lwtoft
             ___ftpack
         ___altoft (ARG)
           ___ftpack
           ___ftpack (ARG)
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
         ___ftneg (ARG)
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
           ___lwtoft (ARG)
             ___ftpack
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
       ___ftmul (ARG)
         _Sensor_getSupplyVoltage (ARG)
           _ADC_GetConversionResult
           _ADC_IsConversionDone
           _ADC_SelectChannel
           _ADC_StartConversion
           _FVR_IsOutputReady
           _Sensor_peripheralSleep
           _Sensor_peripheralWake
           ___ftdiv
             ___altoft (ARG)
               ___ftpack
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
           ___lwtoft
             ___ftpack
         ___altoft (ARG)
           ___ftpack
           ___ftpack (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           _Sensor_getSupplyVoltage (ARG)
             _ADC_GetConversionResult
             _ADC_IsConversionDone
             _ADC_SelectChannel
             _ADC_StartConversion
             _FVR_IsOutputReady
             _Sensor_peripheralSleep
             _Sensor_peripheralWake
             ___ftdiv
               ___altoft (ARG)
                 ___ftpack
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
             ___lwtoft
               ___ftpack
           ___altoft (ARG)
             ___ftpack
             ___ftpack (ARG)
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
           ___ftneg (ARG)
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
             ___lwtoft (ARG)
               ___ftpack
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
         ___ftneg (ARG)
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
           ___lwtoft (ARG)
             ___ftpack
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
     ___lwtoft
       ___ftpack
   _DOOR_init
   _DOOR_run
   _SYSTEM_Initialize
     _ADC_Initialize
     _FVR_Initialize
     _I2C2_Initialize
     _OSCILLATOR_Initialize
     _PIN_MANAGER_Initialize
       _IOCAF2_SetInterruptHandler
     _SPI1_Initialize
     _TMR1_Initialize
       _TMR1_SetInterruptHandler
     _TMR2_Initialize
     _WDT_Initialize
   _Sensor_peripheralSleep
   _Timeout_getGlobalCounter
   _Timeout_updateCurrentTime
     _TMR1_ReadTimer
     ___lmul
   _Wireless_determineTransmitPower
     _Wireless_changeTransmitPower
       _RF_ReadRegisterData
         _SPI_WriteRead
           _SPI1_Exchange8bit
         _SPI_WriteReadBuffer
           _SPI_WriteRead
             _SPI1_Exchange8bit
       _RF_WriteRegister
         _SPI_WriteRead
           _SPI1_Exchange8bit
     _Wireless_isDataTransmitSuccessful
       _RF_GetStatus
         _RF_WriteRead
           _SPI_WriteRead
             _SPI1_Exchange8bit
     _Wireless_sendData
       _RF_GetStatus
         _RF_WriteRead
           _SPI_WriteRead
             _SPI1_Exchange8bit
       _RF_ResetStatusIRQ
         _RF_WriteRegister
           _SPI_WriteRead
             _SPI1_Exchange8bit
       _RF_TxPayload
         _RF_Write
           _SPI_WriteRead
             _SPI1_Exchange8bit
         _RF_WriteRegisterData
           _SPI_WriteBuffer
             _SPI_WriteRead
               _SPI1_Exchange8bit
           _SPI_WriteRead
             _SPI1_Exchange8bit
     _limit
   _Wireless_init
     _RF_Init
     _RF_ResetStatusIRQ
       _RF_WriteRegister
         _SPI_WriteRead
           _SPI1_Exchange8bit
     _RF_WriteRegister
       _SPI_WriteRead
         _SPI1_Exchange8bit
     _RF_WriteRegisterData
       _SPI_WriteBuffer
         _SPI_WriteRead
           _SPI1_Exchange8bit
       _SPI_WriteRead
         _SPI1_Exchange8bit
   _Wireless_packageData
     _BMP_readTemperature (ARG)
       _BMP_init
         _Diag_setTempSensorHealth
         _I2C_BufferRead
           _I2C2_MasterRead
             _I2C2_MasterReadTRBBuild
             _I2C2_MasterTRBInsert
           _I2C2_MasterWrite
             _I2C2_MasterTRBInsert
             _I2C2_MasterWriteTRBBuild
           _Timeout_hasExpired
           _Timeout_setTimeout
         _I2C_ByteWrite
           _I2C2_MasterWrite
             _I2C2_MasterTRBInsert
             _I2C2_MasterWriteTRBBuild
           _Timeout_hasExpired
           _Timeout_setTimeout
       _Diag_getTempSensorHealth
       _Diag_setTempSensorHealth
       _HMC5883L_ReadBits
         _HMC5883L_I2C_BufferRead
           _I2C_BufferRead
             _I2C2_MasterRead
               _I2C2_MasterReadTRBBuild
               _I2C2_MasterTRBInsert
             _I2C2_MasterWrite
               _I2C2_MasterTRBInsert
               _I2C2_MasterWriteTRBBuild
             _Timeout_hasExpired
             _Timeout_setTimeout
       _I2C_BufferRead
         _I2C2_MasterRead
           _I2C2_MasterReadTRBBuild
           _I2C2_MasterTRBInsert
         _I2C2_MasterWrite
           _I2C2_MasterTRBInsert
           _I2C2_MasterWriteTRBBuild
         _Timeout_hasExpired
         _Timeout_setTimeout
       _I2C_ByteWrite
         _I2C2_MasterWrite
           _I2C2_MasterTRBInsert
           _I2C2_MasterWriteTRBBuild
         _Timeout_hasExpired
         _Timeout_setTimeout
       ___aldiv
       ___altoft
         ___ftpack
         ___ftpack (ARG)
       ___awtoft
         ___ftpack
       ___ftadd
         _Sensor_getSupplyVoltage (ARG)
           _ADC_GetConversionResult
           _ADC_IsConversionDone
           _ADC_SelectChannel
           _ADC_StartConversion
           _FVR_IsOutputReady
           _Sensor_peripheralSleep
           _Sensor_peripheralWake
           ___ftdiv
             ___altoft (ARG)
               ___ftpack
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
           ___lwtoft
             ___ftpack
         ___altoft (ARG)
           ___ftpack
           ___ftpack (ARG)
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
         ___ftneg (ARG)
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
           ___lwtoft (ARG)
             ___ftpack
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
       ___ftdiv
         ___altoft (ARG)
           ___ftpack
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
       ___ftmul
         _Sensor_getSupplyVoltage (ARG)
           _ADC_GetConversionResult
           _ADC_IsConversionDone
           _ADC_SelectChannel
           _ADC_StartConversion
           _FVR_IsOutputReady
           _Sensor_peripheralSleep
           _Sensor_peripheralWake
           ___ftdiv
             ___altoft (ARG)
               ___ftpack
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
           ___lwtoft
             ___ftpack
         ___altoft (ARG)
           ___ftpack
           ___ftpack (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           _Sensor_getSupplyVoltage (ARG)
             _ADC_GetConversionResult
             _ADC_IsConversionDone
             _ADC_SelectChannel
             _ADC_StartConversion
             _FVR_IsOutputReady
             _Sensor_peripheralSleep
             _Sensor_peripheralWake
             ___ftdiv
               ___altoft (ARG)
                 ___ftpack
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
             ___lwtoft
               ___ftpack
           ___altoft (ARG)
             ___ftpack
             ___ftpack (ARG)
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
           ___ftneg (ARG)
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
             ___lwtoft (ARG)
               ___ftpack
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
         ___ftneg (ARG)
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
           ___lwtoft (ARG)
             ___ftpack
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
       ___ftneg
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
         ___lwtoft (ARG)
           ___ftpack
       ___fttol
         _Sensor_getSupplyVoltage (ARG)
           _ADC_GetConversionResult
           _ADC_IsConversionDone
           _ADC_SelectChannel
           _ADC_StartConversion
           _FVR_IsOutputReady
           _Sensor_peripheralSleep
           _Sensor_peripheralWake
           ___ftdiv
             ___altoft (ARG)
               ___ftpack
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
           ___lwtoft
             ___ftpack
         ___altoft (ARG)
           ___ftpack
           ___ftpack (ARG)
         ___ftadd (ARG)
           _Sensor_getSupplyVoltage (ARG)
             _ADC_GetConversionResult
             _ADC_IsConversionDone
             _ADC_SelectChannel
             _ADC_StartConversion
             _FVR_IsOutputReady
             _Sensor_peripheralSleep
             _Sensor_peripheralWake
             ___ftdiv
               ___altoft (ARG)
                 ___ftpack
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
             ___lwtoft
               ___ftpack
           ___altoft (ARG)
             ___ftpack
             ___ftpack (ARG)
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
           ___ftneg (ARG)
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
             ___lwtoft (ARG)
               ___ftpack
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
         ___ftmul (ARG)
           _Sensor_getSupplyVoltage (ARG)
             _ADC_GetConversionResult
             _ADC_IsConversionDone
             _ADC_SelectChannel
             _ADC_StartConversion
             _FVR_IsOutputReady
             _Sensor_peripheralSleep
             _Sensor_peripheralWake
             ___ftdiv
               ___altoft (ARG)
                 ___ftpack
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
             ___lwtoft
               ___ftpack
           ___altoft (ARG)
             ___ftpack
             ___ftpack (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             _Sensor_getSupplyVoltage (ARG)
               _ADC_GetConversionResult
               _ADC_IsConversionDone
               _ADC_SelectChannel
               _ADC_StartConversion
               _FVR_IsOutputReady
               _Sensor_peripheralSleep
               _Sensor_peripheralWake
               ___ftdiv
                 ___altoft (ARG)
                   ___ftpack
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
               ___lwtoft
                 ___ftpack
             ___altoft (ARG)
               ___ftpack
               ___ftpack (ARG)
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
             ___ftneg (ARG)
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
           ___ftneg (ARG)
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
             ___lwtoft (ARG)
               ___ftpack
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
       ___lwtoft
         ___ftpack
     _Diag_getSensorHealth (ARG)
     _Sensor_getSupplyVoltage (ARG)
       _ADC_GetConversionResult
       _ADC_IsConversionDone
       _ADC_SelectChannel
       _ADC_StartConversion
       _FVR_IsOutputReady
       _Sensor_peripheralSleep
       _Sensor_peripheralWake
       ___ftdiv
         ___altoft (ARG)
           ___ftpack
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
       ___lwtoft
         ___ftpack
     _Wireless_checkDataReceived (ARG)
       _DOOR_resetPos
       _DOOR_update
         _Storage_save
           _DATAEE_WriteByte
       _RF_DataIsReady
         _RF_ReadRegister
           _SPI_WriteRead
             _SPI1_Exchange8bit
       _RF_RxPayload
         _RF_ReadRegisterData
           _SPI_WriteRead
             _SPI1_Exchange8bit
           _SPI_WriteReadBuffer
             _SPI_WriteRead
               _SPI1_Exchange8bit
       ___lmul
     _Wireless_determineTransmitPower (ARG)
       _Wireless_changeTransmitPower
         _RF_ReadRegisterData
           _SPI_WriteRead
             _SPI1_Exchange8bit
           _SPI_WriteReadBuffer
             _SPI_WriteRead
               _SPI1_Exchange8bit
         _RF_WriteRegister
           _SPI_WriteRead
             _SPI1_Exchange8bit
       _Wireless_isDataTransmitSuccessful
         _RF_GetStatus
           _RF_WriteRead
             _SPI_WriteRead
               _SPI1_Exchange8bit
       _Wireless_sendData
         _RF_GetStatus
           _RF_WriteRead
             _SPI_WriteRead
               _SPI1_Exchange8bit
         _RF_ResetStatusIRQ
           _RF_WriteRegister
             _SPI_WriteRead
               _SPI1_Exchange8bit
         _RF_TxPayload
           _RF_Write
             _SPI_WriteRead
               _SPI1_Exchange8bit
           _RF_WriteRegisterData
             _SPI_WriteBuffer
               _SPI_WriteRead
                 _SPI1_Exchange8bit
             _SPI_WriteRead
               _SPI1_Exchange8bit
       _limit
     _Wireless_sendData (ARG)
       _RF_GetStatus
         _RF_WriteRead
           _SPI_WriteRead
             _SPI1_Exchange8bit
       _RF_ResetStatusIRQ
         _RF_WriteRegister
           _SPI_WriteRead
             _SPI1_Exchange8bit
       _RF_TxPayload
         _RF_Write
           _SPI_WriteRead
             _SPI1_Exchange8bit
         _RF_WriteRegisterData
           _SPI_WriteBuffer
             _SPI_WriteRead
               _SPI1_Exchange8bit
           _SPI_WriteRead
             _SPI1_Exchange8bit
     ___ftadd (ARG)
       _Sensor_getSupplyVoltage (ARG)
         _ADC_GetConversionResult
         _ADC_IsConversionDone
         _ADC_SelectChannel
         _ADC_StartConversion
         _FVR_IsOutputReady
         _Sensor_peripheralSleep
         _Sensor_peripheralWake
         ___ftdiv
           ___altoft (ARG)
             ___ftpack
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
         ___lwtoft
           ___ftpack
       ___altoft (ARG)
         ___ftpack
         ___ftpack (ARG)
       ___ftdiv (ARG)
         ___altoft (ARG)
           ___ftpack
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
       ___ftneg (ARG)
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
         ___lwtoft (ARG)
           ___ftpack
       ___ftpack (ARG)
       ___lwtoft (ARG)
         ___ftpack
     ___ftmul (ARG)
       _Sensor_getSupplyVoltage (ARG)
         _ADC_GetConversionResult
         _ADC_IsConversionDone
         _ADC_SelectChannel
         _ADC_StartConversion
         _FVR_IsOutputReady
         _Sensor_peripheralSleep
         _Sensor_peripheralWake
         ___ftdiv
           ___altoft (ARG)
             ___ftpack
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
         ___lwtoft
           ___ftpack
       ___altoft (ARG)
         ___ftpack
         ___ftpack (ARG)
       ___awtoft (ARG)
         ___ftpack
       ___ftadd (ARG)
         _Sensor_getSupplyVoltage (ARG)
           _ADC_GetConversionResult
           _ADC_IsConversionDone
           _ADC_SelectChannel
           _ADC_StartConversion
           _FVR_IsOutputReady
           _Sensor_peripheralSleep
           _Sensor_peripheralWake
           ___ftdiv
             ___altoft (ARG)
               ___ftpack
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
           ___lwtoft
             ___ftpack
         ___altoft (ARG)
           ___ftpack
           ___ftpack (ARG)
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
         ___ftneg (ARG)
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
           ___lwtoft (ARG)
             ___ftpack
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
       ___ftdiv (ARG)
         ___altoft (ARG)
           ___ftpack
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
       ___ftneg (ARG)
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
         ___lwtoft (ARG)
           ___ftpack
       ___ftpack (ARG)
       ___lwtoft (ARG)
         ___ftpack
     ___fttol (ARG)
       _Sensor_getSupplyVoltage (ARG)
         _ADC_GetConversionResult
         _ADC_IsConversionDone
         _ADC_SelectChannel
         _ADC_StartConversion
         _FVR_IsOutputReady
         _Sensor_peripheralSleep
         _Sensor_peripheralWake
         ___ftdiv
           ___altoft (ARG)
             ___ftpack
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
         ___lwtoft
           ___ftpack
       ___altoft (ARG)
         ___ftpack
         ___ftpack (ARG)
       ___ftadd (ARG)
         _Sensor_getSupplyVoltage (ARG)
           _ADC_GetConversionResult
           _ADC_IsConversionDone
           _ADC_SelectChannel
           _ADC_StartConversion
           _FVR_IsOutputReady
           _Sensor_peripheralSleep
           _Sensor_peripheralWake
           ___ftdiv
             ___altoft (ARG)
               ___ftpack
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
           ___lwtoft
             ___ftpack
         ___altoft (ARG)
           ___ftpack
           ___ftpack (ARG)
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
         ___ftneg (ARG)
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
           ___lwtoft (ARG)
             ___ftpack
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
       ___ftmul (ARG)
         _Sensor_getSupplyVoltage (ARG)
           _ADC_GetConversionResult
           _ADC_IsConversionDone
           _ADC_SelectChannel
           _ADC_StartConversion
           _FVR_IsOutputReady
           _Sensor_peripheralSleep
           _Sensor_peripheralWake
           ___ftdiv
             ___altoft (ARG)
               ___ftpack
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
           ___lwtoft
             ___ftpack
         ___altoft (ARG)
           ___ftpack
           ___ftpack (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           _Sensor_getSupplyVoltage (ARG)
             _ADC_GetConversionResult
             _ADC_IsConversionDone
             _ADC_SelectChannel
             _ADC_StartConversion
             _FVR_IsOutputReady
             _Sensor_peripheralSleep
             _Sensor_peripheralWake
             ___ftdiv
               ___altoft (ARG)
                 ___ftpack
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
             ___lwtoft
               ___ftpack
           ___altoft (ARG)
             ___ftpack
             ___ftpack (ARG)
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
           ___ftneg (ARG)
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
             ___lwtoft (ARG)
               ___ftpack
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
         ___ftneg (ARG)
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
           ___lwtoft (ARG)
             ___ftpack
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
     ___lldiv (ARG)
     ___lwdiv (ARG)
   _Wireless_sleep
     _RF_ReadRegisterData
       _SPI_WriteRead
         _SPI1_Exchange8bit
       _SPI_WriteReadBuffer
         _SPI_WriteRead
           _SPI1_Exchange8bit
     _RF_WriteRegister
       _SPI_WriteRead
         _SPI1_Exchange8bit
   _Wireless_wake
     _RF_ReadRegisterData
       _SPI_WriteRead
         _SPI1_Exchange8bit
       _SPI_WriteReadBuffer
         _SPI_WriteRead
           _SPI1_Exchange8bit
     _RF_WriteRegister
       _SPI_WriteRead
         _SPI1_Exchange8bit
   ___lldiv
   ___lwdiv
   _setSleepTime

 _INTERRUPT_InterruptManager (ROOT)
   _I2C2_BusCollisionISR
   _I2C2_ISR
     _I2C2_FunctionComplete
     _I2C2_Stop
   _PIN_MANAGER_IOC
     _IOCAF2_ISR
       Absolute function(Fake) *
       _IOCAF2_DefaultInterruptHandler *
   _TMR1_ISR
     _TMR1_CallBack
       Absolute function(Fake) *
       _TMR1_DefaultInterruptHandler *
       _Timeout_increment *

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             3F0      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      7       E       2      100.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50     4F      4F       5       98.8%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BANK1               50     2A      46       7       87.5%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BITBANK2            50      0       0       8        0.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BANK2               50      0      4E       9       97.5%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BITBANK3            50      0       0      10        0.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BANK3               50      C      3C      11       75.0%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BITBANK4            50      0       0      12        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BANK4               50      0       0      13        0.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BITBANK5            50      0       0      14        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BANK5               50      0       0      15        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BITBANK6            50      0       0      16        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BANK6               50      0       0      17        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BITBANK7            50      0       0      18        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BANK7               50      0       0      19        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
ABS                  0      0     12D      20        0.0%
BITBANK8            50      0       0      21        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BANK8               50      0       0      22        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITBANK9            50      0       0      23        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BANK9               50      0       0      24        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITBANK10           50      0       0      25        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BANK10              50      0       0      26        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITBANK11           50      0       0      27        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BANK11              50      0       0      28        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITBANK12           30      0       0      29        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BANK12              30      0       0      30        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
DATA                 0      0     12D      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V1.45 build -152302408 
Symbol Table                                                                                   Mon Oct 07 21:47:51 2019

                                          _Wireless_init 0783  
                                      _SPI1_Exchange8bit 134F  
                                          _Wireless_wake 15FE  
                                     ??_RF_WriteRegister 0024  
                                           _RF_TxPayload 1535  
                                           ___altoft@exp 002F  
                                         _Wireless_sleep 147F  
                                                      pc 0002  
                           __end_of_Wireless_packageData 1000  
                                     ?_SPI1_Exchange8bit 0070  
                                            __CFG_CP$OFF 0000  
                                  ?_I2C2_MasterTRBInsert 0021  
                                          ___altoft@sign 0030  
                                                     _b1 01A8  
                           __size_of_RF_ReadRegisterData 001D  
                                 __end_of_FVR_Initialize 12B4  
                                    RF_TxPayload@payload 0030  
                                      ??_SPI_WriteBuffer 0026  
                        __size_of_Sensor_peripheralSleep 0005  
                         I2C2_MasterReadTRBBuild@address 0024  
                        HMC5883L_I2C_BufferRead@ReadAddr 003E  
                                           ___ftadd@exp1 0055  
                                           ___ftadd@exp2 0054  
                                          _doorOpenAngle 00DE  
                                            __CFG_LVP$ON 0000  
                                           ___ftadd@sign 0053  
                                                    l522 1357  
                                                    l358 09ED  
                                                    l498 16BB  
                                                    _PR2 001B  
                                       ??_RF_DataIsReady 0026  
                                           __CFG_CPD$OFF 0000  
                                        _timer1ReloadVal 007C  
                                    ??_SPI1_Exchange8bit 0021  
                                           ?_DOOR_update 0027  
                                        _TMR2_Initialize 1310  
                                           __CFG_BORV$LO 0000  
                                                    wreg 0009  
                                           _RF_WriteRead 1452  
                         HMC5883L_I2C_BufferRead@pBuffer 003C  
                                           __CFG_IESO$ON 0000  
                     __end_of_IOCAF2_SetInterruptHandler 1333  
                             _IOCAF2_SetInterruptHandler 132A  
                                          _globalCounter 00CF  
                                      _Wireless_sendData 1411  
                                    _BMP_readTemperature 0077  
                                 ??_RF_WriteRegisterData 002C  
                                          _DOOR_resetPos 12AA  
                                           ___ftdiv@cntr 003B  
                                       __end_of_I2C2_ISR 068D  
                                     ?_Wireless_sendData 0031  
                                           ___ftdiv@sign 0040  
                                 RF_ResetStatusIRQ@flags 0026  
                                                   l1100 0D3C  
                                                   l1026 0086  
                                                   l1027 0096  
                                                   l1125 0FF3  
                                                   l1143 0B87  
                                                   l1408 0C12  
                                                   l1550 0AFC  
                                                   l1542 0AE1  
                                                   l1633 0D00  
                                                   l1549 0AF4  
                                                   l1573 072C  
                                                   l6041 0882  
                                                   l6201 0BB0  
                                                   l6121 0D9B  
                                                   l6105 0D84  
                                                   l6035 0875  
                                                   l6211 0BF9  
                                                   l6061 0B2B  
                                                   l6125 0D9D  
                                                   l6231 0C33  
                                                   l6223 0C23  
                                                   l6207 0BF3  
                                                   l6143 0DBF  
                                                   l5521 09D8  
                                                   l6241 0C61  
                                                   l6233 0C41  
                                                   l6321 070B  
                                                   l6129 0DAD  
                                                   l6315 06F8  
                                                   l6139 0DBD  
                                                   l6091 0D4C  
                                                   l5525 09DF  
                                                   l6069 0B47  
                                                   l6245 0C6C  
                                                   l6333 073E  
                                                   l6317 0702  
                                                   l6309 06E5  
                                                   l6501 00E6  
                                                   l5541 151C  
                                                   l6093 0D66  
                                                   l5527 09E5  
                                                   l5623 0948  
                                                   l6263 084A  
                                                   l6327 071E  
                                                   l6319 0707  
                                                   l6415 0C9E  
                                                   l5553 170C  
                                                   l5633 0A0E  
                                                   l6169 08FB  
                                                   l6249 0C7A  
                                                   l5721 0AC8  
                                                   l6265 085A  
                                                   l6337 0750  
                                                   l6329 0728  
                                                   l6441 0CF6  
                                                   l6433 0CD7  
                                                   l6089 0D2D  
                                                   l5547 1736  
                                                   l5651 0A48  
                                                   l5643 0A1F  
                                                   l5731 0AEE  
                                                   l5723 0ACD  
                                                   l5715 0AB7  
                                                   l6347 076B  
                                                   l6291 06BC  
                                                   l6363 0E9D  
                                                   l6443 0D04  
                                                   l6435 0CE8  
                                                   l5637 0A19  
                                                   l6277 1668  
                                                   l5901 0DF4  
                                                   l6357 0E87  
                                                   l5581 1640  
                                                   l6197 0BA3  
                                                   l6605 095B  
                                                   l5647 0A3D  
                                                   l5719 0ABE  
                                                   l6287 06B5  
                                                   l6391 0EFC  
                                                   l6375 0ED8  
                                                   l6447 0D12  
                                                   l5831 15BB  
                                                   l6615 0989  
                                                   l6607 0969  
                                                   l5729 0AE6  
                                                   l6297 06CB  
                                                   l5809 16D8  
                                                   l6529 0FEA  
                                                   l6641 0827  
                                                   l6633 0809  
                                                   l5659 0A4E  
                                                   l5923 0E4E  
                                                   l5915 0E35  
                                                   l6387 0EF4  
                                                   l6379 0EE0  
                                                   l6619 0994  
                                                   l6635 0815  
                                                   l6811 0521  
                                                   l6493 00C5  
                                                   l6645 0830  
                                                   l6813 0534  
                                                   l5791 17F8  
                                                   l5863 1373  
                                                   l6743 03D6  
                                                   l5881 17A7  
                                                   l6761 043B  
                                                   l5787 17ED  
                                                   l5877 179D  
                                                   l6773 044E  
                                                   l5799 17FE  
                                                   l5895 0DDE  
                                                   l6783 04AC  
                                                   l6759 0433  
                                                   l6799 04E9  
                             __size_of_HMC5883L_ReadBits 0046  
                                                   _LATA 010C  
                                                   _LATB 010D  
                                                   _LATC 010E  
                                                   u6015 06F9  
                                                   u5065 0944  
                                                   u5235 0B03  
                                                   u5155 0AC3  
                                                   u6045 070C  
                                                   u5405 0E36  
                                                   u5175 0ADC  
                                                   u5415 0E45  
                                                   u6215 0EFD  
                                                   u5335 17A8  
                                                   u5600 0DC5  
                                                   u5425 0E4F  
                                                   u6225 0F03  
                                                   u6145 0EA9  
                                                   u5345 17AF  
                                                   u5195 0AE9  
                                                   u6075 071F  
                                                   u6155 0EB9  
                                                   u6325 0CF7  
                                                   u6405 00FF  
                                                   u5285 16D0  
                                                   u6175 0EE1  
                                                   u6415 010D  
                                                   u7207 154B  
                                                   u5295 16E3  
                                                   u5385 0E06  
                                                   u6185 0EE7  
                                                   u6265 0CA6  
                                                   u7217 139F  
                                                   u5395 0E16  
                                                   u7307 1639  
                                                   u7227 1462  
                                                   u5805 0C42  
                                                   u6445 0A98  
                                                   u7317 1438  
                                                   u7237 15DD  
                                                   u6525 095E  
                                                   u5815 0C56  
                                                   u6295 0CD8  
                                                   u7247 14DE  
                                                   u6615 0816  
                                                   u7167 0367  
                                                   u5680 08F0  
                                                   u5664 08D2  
                                                   u5665 08D1  
                                                   u5825 0C62  
                                                   u7257 0789  
                                                   u6545 096A  
                                                   u6625 0820  
                                                   u7177 0392  
                                                   u5674 08DE  
                                                   u5675 08DD  
                                                   u7267 15A3  
                                                   u6555 097E  
                                                   u6635 0828  
                                                   u7187 03E4  
                                                   u5685 08EE  
                                                   u7277 1620  
                                                   u7197 1617  
                                                   u6565 098A  
                                                   u7287 1626  
                                                   u5785 0C36  
                                                   u5865 084F  
                                                   u7297 1633  
                                                   u6595 080C  
                                                   u5985 06E6  
                                                   u6885 04FF  
                                                   _TMR2 001A  
                                                   _WPUA 020C  
                                                   _WPUB 020D  
                                                   _WPUC 020E  
                                           __CFG_WRT$OFF 0000  
                                           _Storage_save 14B0  
                                          __CFG_FCMEN$ON 0000  
                                                   _data 01C0  
                                                   _main 0345  
                                     _Timeout_hasExpired 08FD  
                                                   _curr 0120  
                                           ___ftpack@arg 0021  
                                                   _var1 0134  
                                                   _var2 0131  
                                           ___ftpack@exp 0024  
                                        __end_of_RF_Init 12BC  
                                                   fsr0h 0005  
                                                   fsr1h 0007  
                                                   indf0 0000  
                                                   fsr0l 0004  
                                                   indf1 0001  
                                                   fsr1l 0006  
                                                   btemp 007E  
                            ??_Timeout_updateCurrentTime 002D  
                            I2C2_MasterReadTRBBuild@ptrb 0028  
                                          __CFG_BOREN$ON 0000  
                                    ??_Wireless_sendData 0032  
                            RF_WriteRegisterData@bufSize 002B  
                                     __size_of_DOOR_init 0001  
                                                   start 0037  
                                      _Timeout_increment 1345  
                              __end_of_SPI1_Exchange8bit 135B  
                               ?_Sensor_getSupplyVoltage 0041  
                       __end_of_Diag_getTempSensorHealth 12A4  
                       __end_of_Diag_setTempSensorHealth 1308  
                                 __end_of_Wireless_sleep 1497  
                              HMC5883L_ReadBits@bitStart 0044  
                                         ?_Wireless_init 0070  
                             ??_TMR1_SetInterruptHandler 0023  
                                         ?_Wireless_wake 0070  
                                          _SPI_WriteRead 12D9  
                                          __CFG_MCLRE$ON 0000  
                                           ___ftmul@cntr 0064  
                                     ?_Timeout_increment 0070  
                                           ___ftmul@sign 0065  
                                    ?_Timeout_hasExpired 0070  
                                   ?_BMP_readTemperature 00A6  
                                           ___fttol@exp1 00A5  
                              __size_of_DATAEE_WriteByte 0023  
                                           ___fttol@lval 00A1  
                                       __end_of_BMP_init 0B87  
                                             _i2c2_state 0079  
                                       __end_of_DOOR_run 12A7  
                                        ?_FVR_Initialize 0070  
                         __size_of_OSCILLATOR_Initialize 0007  
                                    __size_of_IOCAF2_ISR 000D  
                          __end_of_OSCILLATOR_Initialize 12F2  
                                    ??_Timeout_increment 0070  
                                _I2C2_MasterReadTRBBuild 1768  
                                        __end_of___aldiv 0C83  
                                                  ?_main 0070  
                                        __end_of___ftadd 0783  
                                      __end_of_I2C2_Stop 156D  
                                        __end_of___ftdiv 0E70  
                                        __end_of___ftneg 132A  
                                        __end_of___lldiv 099D  
                                        __end_of___ftmul 0F24  
                                                  _T1CON 0018  
                                        __end_of___fttol 0D22  
                                                  _T2CON 001C  
                                        __end_of___lwdiv 0835  
                                                  i1l300 05BE  
                         __size_of_I2C2_FunctionComplete 0011  
                                                  i1l310 0606  
                                                  i1l161 0032  
                                                  i1l153 0015  
                                                  i1l322 066E  
                                                  i1l314 0626  
                                                  i1l155 0021  
                                                  i1l317 063B  
                                                  i1l157 002D  
                                                  i1l318 0649  
                                                  i1l329 13B1  
                                                  i1l293 058A  
                                                  i1l294 0591  
                                                  i1l288 055C  
                                                  i1l299 05B2  
                          __end_of_I2C2_FunctionComplete 13B4  
                              __end_of_Wireless_sendData 1426  
                                    setSleepTime@timeSec 0021  
                                                  _TMR1H 0017  
                                                  _TMR1L 0016  
                                                  _TRISA 008C  
                                                  _TRISB 008D  
                                                  _TRISC 008E  
                       __size_of_ADC_GetConversionResult 0009  
                                    ___lmul@multiplicand 0025  
                                   ??_Timeout_hasExpired 0021  
                                       __end_of_TMR1_ISR 1321  
                                                  _cTemp 012B  
                                                  _adc_p 01A4  
                                                  _adc_t 0124  
                                         ?_DOOR_resetPos 0070  
                                 __size_of_I2C_ByteWrite 003C  
                                          ___awtoft@sign 002E  
                                __end_of_PIN_MANAGER_IOC 12D9  
                                         _WDT_Initialize 12B4  
                                                  _errno 013A  
                                                  _limit 16C5  
                                          ___ftpack@sign 0025  
                           I2C2_MasterReadTRBBuild@pdata 0021  
                                   _Diag_getSensorHealth 13D7  
                                __end_of_TMR1_Initialize 147F  
                                       __end_of_RF_Write 13A3  
                                                  pclath 000A  
                                 _Sensor_peripheralSleep 12C4  
                                   RF_DataIsReady@status 0028  
                              __end_of_Timeout_increment 134F  
                                                  status 0003  
                                                  wtemp0 007E  
                               __size_of_SPI1_Initialize 0007  
                                         ?_SPI_WriteRead 0070  
                                        ?_Wireless_sleep 0070  
                                      ??_I2C2_MasterRead 002F  
                                RF_WriteRegisterData@buf 0029  
                                RF_WriteRegisterData@reg 002D  
                                  ??_BMP_readTemperature 00A9  
                                    RF_WriteRegister@reg 0024  
                                      ??_I2C2_Initialize 0021  
                                        __initialization 0039  
                                    RF_WriteRegister@val 0023  
                             Wireless_packageData@status 00C5  
                                           __end_of_main 0544  
                                 ??_I2C2_MasterTRBInsert 0023  
                                __end_of_TMR2_Initialize 1318  
                            ?_INTERRUPT_InterruptManager 0070  
                       __end_of_I2C2_MasterWriteTRBBuild 16A2  
                                                 ??_main 00C8  
                                          ___fttol@sign1 00A0  
                              _Timeout_updateCurrentTime 0A50  
                                            _i2c2_object 00CA  
                                         __CFG_PLLEN$OFF 0000  
                                      __end_of_DOOR_init 07FF  
                                 __end_of_WDT_Initialize 12B8  
                                __size_of_I2C_BufferRead 005E  
                          __size_of_ADC_IsConversionDone 0007  
                                                 _ADCON0 009D  
                                                 _ADCON1 009E  
                                     _Timeout_setTimeout 1497  
                                       __end_of___altoft 0872  
                                                 ?_limit 0021  
                                              ??_RF_Init 0021  
                                                 i1S7059 1000  
                                                 _ADRESH 009C  
                                                 _EEADRH 0192  
                                                 _ADRESL 009B  
                                                 _EEADRL 0191  
                                                 _EEDATH 0194  
                                                 _EEDATL 0193  
                                                 _EECON2 0196  
                                    I2C_ByteWrite@status 0038  
                                  ?_Diag_getSensorHealth 0070  
                                       __end_of___awtoft 167F  
                                                 _ANSELA 018C  
                                                 _ANSELB 018D  
                                                 _ANSELC 018E  
                                       __end_of___ftpack 0B13  
                                                 _BORCON 0116  
                                                 _T1GCON 0019  
                                   _Wireless_packageData 0F24  
                           __end_of_I2C2_BusCollisionISR 12A1  
                                                 i1l4309 156B  
                                                 i1l4291 1365  
                                                 i1l4813 05F7  
                                                 i1l4851 0656  
                                                 i1l4835 062D  
                                                 i1l4827 0614  
                                                 i1l4819 0601  
                                                 i1l4763 057E  
                                                 i1l4781 05AD  
                                                 i1l4863 0672  
                                                 i1l4847 064F  
                                                 i1l4775 059D  
                                                 i1l4865 0675  
                                                 i1l4873 0682  
                                                 i1l4867 0679  
                                                 i1l4795 05DB  
                                                 _FVRCON 0117  
                        __end_of_Sensor_getSupplyVoltage 08B7  
                               _BMP_readTemperature$2648 00B5  
                                       __end_of___lwtoft 1411  
                                                 _OSCCON 0099  
                                                 _WDTCON 0097  
                                    ?_Timeout_setTimeout 0021  
                                  I2C2_MasterRead@length 002B  
                                  SPI1_Exchange8bit@data 0021  
                                        ??_Wireless_init 002E  
                                        ??_Wireless_wake 002F  
                                    _SPI_WriteReadBuffer 163D  
                             __size_of_SPI1_Exchange8bit 000C  
                                         __CFG_PWRTE$OFF 0000  
                             HMC5883L_ReadBits@slaveAddr 004A  
                                       Wireless_wake@reg 0030  
                                       SPI_WriteBuffer@i 0028  
                   __end_of_TMR1_DefaultInterruptHandler 0800  
                  __size_of_TMR1_DefaultInterruptHandler 0001  
                           _TMR1_DefaultInterruptHandler 07FF  
                                          _I2C_ByteWrite 17C4  
                                   HMC5883L_ReadBits@tmp 004C  
                                  RF_DataIsReady@channel 0027  
                                                 ___lmul 1794  
                                              ??___aldiv 0029  
                                                 _dig_P1 0150  
                                                 _dig_P2 014E  
                                                 _dig_P3 014C  
                                                 _dig_P4 014A  
                                                 _dig_P5 0148  
                                                 _dig_P6 0146  
                                                 _dig_P7 0144  
                                                 _dig_P8 0142  
                                                 _dig_P9 0140  
                                                 _dig_T1 00D3  
                                                 _dig_T2 0156  
                                                 _dig_T3 0154  
                                                 _dig_T4 0152  
                                              ??___ftadd 004F  
                                         _p_i2c2_current 0077  
                                         __CFG_STVREN$ON 0000  
                              ??_I2C2_MasterReadTRBBuild 0026  
                                              ??___ftdiv 0037  
                                              ??___ftneg 0044  
                      Wireless_changeTransmitPower@power 0030  
                                              ??___lldiv 0029  
                                       SPI_WriteRead@val 0022  
                                              ??___ftmul 005C  
                                              ??___fttol 006A  
                                 RF_ReadRegisterData@buf 002A  
                               _Diag_getTempSensorHealth 12A1  
                                 RF_ReadRegisterData@reg 002E  
                                              ??___lwdiv 0025  
                               _Diag_setTempSensorHealth 1300  
Wireless_determineTransmitPower@numOfSuccessfulTransmits 00DA  
                         __size_of_Sensor_peripheralWake 0005  
                                                 _t_fine 012E  
                                              ?_I2C2_ISR 0070  
                          __end_of_Sensor_peripheralWake 12CE  
                               I2C2_Stop@completion_code 0072  
                                           _HMC5883Lmode 00DF  
                                   ??_Timeout_setTimeout 0023  
                          I2C2_MasterReadTRBBuild@length 0023  
                                  ___ftmul@f3_as_product 0061  
                                   ?_SPI_WriteReadBuffer 0023  
                             __size_of_Wireless_sendData 0015  
                                        ??_DOOR_resetPos 0021  
                                RF_TxPayload@payloadSize 002E  
                                        ?_WDT_Initialize 0070  
                                     _sensorUpdatePeriod 016A  
                                   __size_of_DOOR_update 0016  
               TMR1_SetInterruptHandler@InterruptHandler 0021  
             IOCAF2_SetInterruptHandler@InterruptHandler 0021  
                                   DOOR_update@openAngle 0029  
                                       ?_PIN_MANAGER_IOC 0070  
                                  ?_Wireless_packageData 00BA  
                                           ??_IOCAF2_ISR 0070  
                               HMC5883L_ReadBits@regAddr 0043  
                                  __end_of_TMR1_CallBack 1383  
                                    _RF_ReadRegisterData 15C4  
                                       ?_TMR1_Initialize 0070  
                                      _SYSTEM_Initialize 14FF  
                                __end_of__initialization 0073  
                                             ___altoft@c 0029  
                             __size_of_Timeout_increment 000A  
                                              ?_BMP_init 0070  
                                              ?_DOOR_run 0070  
                                             ___ftadd@f1 0049  
                                             ___ftadd@f2 004C  
                                        ??_SPI_WriteRead 0022  
                                     ?_SYSTEM_Initialize 0070  
                      __size_of_Timeout_getGlobalCounter 0011  
                                             ___ftdiv@f1 0034  
                                             ___ftdiv@f2 0031  
                                             ___ftdiv@f3 003C  
                              ?_Timeout_getGlobalCounter 0021  
                                      ?_I2C2_MasterWrite 0028  
                                        _SPI_WriteBuffer 151A  
                                             ___ftneg@f1 0041  
                                             ___awtoft@c 0029  
                                         ?_I2C_ByteWrite 002F  
                                             ___ftmul@f1 0056  
                                             ___ftmul@f2 0059  
                                              BMP_init@t 003F  
                                     ??_I2C2_MasterWrite 002C  
                                             ___fttol@f1 0066  
                           __size_of_ADC_StartConversion 0003  
                                         __pcstackCOMMON 0070  
          Wireless_determineTransmitPower@numOfTransmits 00DB  
                              Wireless_packageData@tempC 00BB  
                            I2C_BufferRead@NumByteToRead 0034  
                                           __pidataBANK1 12AD  
                                           __pidataBANK2 12C0  
                                    ??_SYSTEM_Initialize 0023  
                                 I2C_ByteWrite@WriteAddr 0030  
                                              ?_TMR1_ISR 0070  
                          ?_TMR1_DefaultInterruptHandler 0070  
                                       _DATAEE_WriteByte 16A2  
                                          __end_of_limit 16EB  
                                      ??_SPI1_Initialize 0021  
                                   ?_RF_ReadRegisterData 002A  
                                         _i2c2_trb_count 00E2  
                                             ??_I2C2_ISR 0073  
                                       ?_TMR2_Initialize 0070  
                                              ?_RF_Write 0070  
                                     __end_of_IOCAF2_ISR 1368  
                                             ___lwtoft@c 0029  
                                  ??_SPI_WriteReadBuffer 0025  
                                _ADC_GetConversionResult 133C  
                              __size_of_RF_WriteRegister 0016  
                                         _OPTION_REGbits 0095  
                               ?_HMC5883L_I2C_BufferRead 003C  
                                 Storage_save@closeAngle 0024  
                                __size_of_TMR1_ReadTimer 001D  
                               _I2C2_MasterWriteTRBBuild 167F  
                            ?_IOCAF2_SetInterruptHandler 0021  
                       ??_IOCAF2_DefaultInterruptHandler 0070  
                        ?_IOCAF2_DefaultInterruptHandler 0070  
                              DOOR_run@doorStateDuration 01A0  
                                 ??_Diag_getSensorHealth 0021  
                           I2C2_MasterWriteTRBBuild@ptrb 0027  
                                                ??_limit 0027  
                              __end_of_SYSTEM_Initialize 151A  
                               __size_of_RF_ReadRegister 001A  
                                             __pbssBANK1 00CA  
                                             __pbssBANK2 0120  
                                             __pbssBANK3 01A0  
                                             ??_BMP_init 003C  
                                             ??_DOOR_run 0021  
                                             __pnvCOMMON 007C  
                                   I2C_ByteWrite@pBuffer 002F  
                              SPI_WriteReadBuffer@bufOut 0028  
                                       ??_FVR_Initialize 0021  
                                             __pmaintext 0345  
                                  SPI_WriteBuffer@bufOut 0023  
                                   SPI_WriteReadBuffer@i 0029  
                                                ?___lmul 0021  
                                Diag_getSensorHealth@var 0022  
                                             ??_TMR1_ISR 0070  
                                  ??_RF_ReadRegisterData 002C  
                                             __pintentry 0004  
                                          ?_setSleepTime 0021  
                                              ?___altoft 0029  
                                         ___lmul@product 0029  
                                         main@doorStatus 01DB  
                                              ?___awtoft 0029  
                                              ?___ftpack 0021  
                                                _APFCON0 011D  
                                                _APFCON1 011E  
                                   _I2C2_BusCollisionISR 12A0  
                                             ??_RF_Write 0023  
                              DOOR_run@previousDoorState 00D7  
                                __size_of_ADC_Initialize 0008  
                                              ?___lwtoft 0029  
                       __size_of_Sensor_getSupplyVoltage 0045  
                         Wireless_checkDataReceived@data 0037  
                           ??_Wireless_checkDataReceived 0033  
                                         _I2C_BufferRead 09F2  
                      I2C2_ISR@i2c_10bit_address_restart 00E0  
                                 I2C2_MasterRead@address 002C  
                                              _I2C2_Stop 1550  
                               SPI_WriteReadBuffer@bufIn 0023  
                                                _OSCTUNE 0098  
                                ?_Sensor_peripheralSleep 0070  
                                                _SSP1ADD 0212  
                                                _SSP2ADD 021A  
                                                _SSP1BUF 0211  
                                 ??_Wireless_packageData 006E  
                                                _SSP2BUF 0219  
                                 I2C_ByteWrite@slaveAddr 0035  
                                                _RF_Init 12B8  
                     __size_of_Timeout_updateCurrentTime 005E  
                   __end_of_Wireless_changeTransmitPower 15FE  
                  __size_of_Wireless_changeTransmitPower 001D  
                           _Wireless_changeTransmitPower 15E1  
                                        _I2C2_MasterRead 16EB  
                                __end_of_SPI_WriteBuffer 1535  
                                       main@doorOpenTime 01D7  
                                        _I2C2_Initialize 14E4  
                          __size_of_RF_WriteRegisterData 001D  
                                       ??_Wireless_sleep 002F  
                                   DATAEE_WriteByte@bAdd 0022  
                                 I2C2_MasterRead@trBlock 0158  
                                        ??_I2C_ByteWrite 0031  
                                      Wireless_sleep@reg 0030  
                                  HMC5883L_ReadBits@data 0046  
                                                ___aldiv 0C01  
                                  HMC5883L_ReadBits@mask 004B  
                                         ??_setSleepTime 0023  
                                        __size_of___lmul 0030  
                                                ___ftadd 068D  
                                                ___ftdiv 0DC7  
                                                ___ftneg 1321  
                                                ___lldiv 094A  
                                                ___ftmul 0E70  
                                                ___fttol 0C83  
                                                ___lwdiv 0800  
                                             ??___altoft 002D  
                              ??_ADC_GetConversionResult 0023  
                        __end_of_HMC5883L_I2C_BufferRead 13D7  
                                  ?_I2C2_BusCollisionISR 0070  
                                             ??___awtoft 002C  
                                             ??___ftpack 0026  
                               TMR1_ReadTimer@readValLow 002B  
                                                _heading 01C8  
                              I2C2_MasterTRBInsert@count 0024  
                                                __ptext1 12CE  
                                                __ptext2 0800  
                                                __ptext3 094A  
                                                __ptext4 15FE  
                                                __ptext5 147F  
                                                __ptext6 0F24  
                                                __ptext7 0D22  
                                                __ptext8 16C5  
                                                __ptext9 1411  
                              I2C2_MasterTRBInsert@pflag 0022  
                                Wireless_packageData@var 00C4  
                                 __end_of_I2C_BufferRead 0A50  
                                             ??___lwtoft 002C  
                         ??_TMR1_DefaultInterruptHandler 0070  
                              TMR1_ReadTimer@readValHigh 002A  
                                              _T1CONbits 0018  
                                  _OSCILLATOR_Initialize 12EB  
                                              _T2CONbits 001C  
                             __end_ofWireless_init@TADDR 1826  
                         __end_of_Sensor_peripheralSleep 12C9  
                      __size_of_TMR1_SetInterruptHandler 0009  
                                       ___aldiv@dividend 0025  
                               ??_PIN_MANAGER_Initialize 0023  
                              ?_TMR1_SetInterruptHandler 0021  
                                              _IOCAFbits 0393  
                            main@doorClosedUpdateCounter 01D1  
                                              _IOCANbits 0392  
                                             ?_I2C2_Stop 0070  
                                              _IOCAPbits 0391  
                                  _I2C2_FunctionComplete 13A3  
                                                _timeOut 013C  
                            __size_of_Timeout_hasExpired 004D  
                                              _DOOR_init 07FE  
                             __size_of_SYSTEM_Initialize 001B  
                                                main@dur 01D5  
                                                clrloop0 12E6  
                                   end_of_initialization 0073  
                                __size_of_RF_DataIsReady 001D  
                          ?_Wireless_changeTransmitPower 0070  
                            __end_of_BMP_readTemperature 0345  
                             ??_Diag_getTempSensorHealth 0021  
                             ??_Diag_setTempSensorHealth 0021  
                                      _FVR_IsOutputReady 12DF  
                                      ??_RF_ReadRegister 0023  
                                        ___lldiv@divisor 0021  
                           __end_of_ADC_IsConversionDone 1300  
                                        ___lldiv@counter 002E  
                                     ?_FVR_IsOutputReady 0070  
                                          ?_RF_GetStatus 0070  
                                  I2C2_MasterWrite@pdata 002E  
                                     _p_i2c2_trb_current 0078  
                                  I2C2_MasterWrite@pflag 002B  
                                       ___aldiv@quotient 002C  
                                 I2C2_ISR@i2c_bytes_left 00E1  
                Wireless_isDataTransmitSuccessful@status 0026  
                          __size_of_I2C2_MasterTRBInsert 0055  
                                    ??_FVR_IsOutputReady 0021  
                             Sensor_getSupplyVoltage@res 0047  
                                       ??_WDT_Initialize 0021  
                                              _PORTCbits 000E  
                                        ?_I2C_BufferRead 0031  
                                      __size_of_I2C2_ISR 0149  
                                       _RF_WriteRegister 1426  
                                __end_of_I2C2_MasterRead 1713  
                                       __CFG_FOSC$INTOSC 0000  
                                __end_of_I2C2_Initialize 14FF  
                                         _TMR1_ReadTimer 156D  
                       __end_of_Timeout_getGlobalCounter 13C5  
                                    _ADC_StartConversion 12A7  
                           Timeout_updateCurrentTime@var 0031  
                                             ?_DOOR_init 0070  
                               __end_of_DATAEE_WriteByte 16C5  
                                       ?_SPI_WriteBuffer 0023  
                              __end_of_FVR_IsOutputReady 12E5  
                                            ___ftdiv@exp 003F  
                                        _SPI1_Initialize 12F2  
                             RF_ReadRegisterData@bufSize 002B  
                           HMC5883L_TestConnection@F3572 0137  
                                          ?_RF_RxPayload 002F  
              Wireless_determineTransmitPower@initialise 0038  
                                      __size_of_BMP_init 0074  
                           Wireless_packageData@openTime 00BA  
                                      __size_of_DOOR_run 0003  
                                  __end_of_Wireless_init 07FE  
                                         ??_RF_GetStatus 0025  
                                  __end_of_Wireless_wake 161D  
                                            ___ftmul@exp 0060  
                                   ?_ADC_StartConversion 0070  
                                          ?_RF_TxPayload 002E  
                                   _currentTransmitPower 00DC  
                                 ??_I2C2_BusCollisionISR 0070  
                                         __end_of___lmul 17C4  
                             ??_I2C2_MasterWriteTRBBuild 0025  
                                      __size_of_TMR1_ISR 0009  
                                _Sensor_getSupplyVoltage 0872  
                                         _ADC_Initialize 1308  
                                 ?_OSCILLATOR_Initialize 0070  
                                 __end_of_TMR1_ReadTimer 158A  
                     __end_of_Wireless_checkDataReceived 0C01  
                             _Wireless_checkDataReceived 0B87  
                            __size_of_Timeout_setTimeout 0019  
                              __size_of_I2C2_MasterWrite 002A  
                                  _Sensor_peripheralWake 12C9  
                                        RF_WriteRead@val 0024  
                                          ??_DOOR_update 0028  
                                      __size_of_RF_Write 0010  
                                          ?_RF_WriteRead 0070  
                                 ?_I2C2_FunctionComplete 0070  
                                    start_initialization 0039  
                                RF_RxPayload@payloadSize 002F  
                                            ??_I2C2_Stop 0070  
                        __size_of_PIN_MANAGER_Initialize 002B  
                                  __end_of_DOOR_resetPos 12AD  
                                   __end_of_setSleepTime 12D3  
                                          ?_Storage_save 0024  
                       __size_of_HMC5883L_I2C_BufferRead 0012  
                                         ??_RF_RxPayload 0030  
                        I2C2_MasterWriteTRBBuild@address 0023  
                                            _addressSize 00E5  
                               __size_of_PIN_MANAGER_IOC 0006  
                                  __end_of_SPI_WriteRead 12DF  
                                   I2C2_MasterRead@pdata 0029  
                 __end_of_IOCAF2_DefaultInterruptHandler 0004  
                __size_of_IOCAF2_DefaultInterruptHandler 0001  
                         _IOCAF2_DefaultInterruptHandler 0003  
                               ?_I2C2_MasterReadTRBBuild 0021  
                         Sensor_getSupplyVoltage@voltage 0044  
                                   I2C2_MasterRead@pflag 002E  
                                            RF_Write@val 0023  
                         ??_Wireless_changeTransmitPower 002F  
                                         ??_RF_TxPayload 002F  
                                  ??_ADC_StartConversion 0021  
                               __size_of_TMR1_Initialize 0017  
                                               ??___lmul 0029  
                            __end_of_SPI_WriteReadBuffer 165D  
                          I2C2_MasterWriteTRBBuild@pdata 0021  
                                   I2C2_ISR@pi2c_buf_ptr 00D5  
                                 __end_of_ADC_Initialize 1310  
                                            __pdataBANK1 00E3  
                                            __pdataBANK2 016A  
                                 __size_of_TMR1_CallBack 000E  
                                        ?_TMR1_ReadTimer 0021  
                                      __size_of___altoft 003D  
                                HMC5883L_ReadBits@length 0045  
                                         ??_RF_WriteRead 0023  
                                      __size_of___awtoft 0022  
                                      __size_of___ftpack 0065  
                                       ?_I2C2_MasterRead 0029  
                                            __pbssCOMMON 0077  
                                       ?_I2C2_Initialize 0070  
                                              ___latbits 0002  
                                      __size_of___lwtoft 0015  
                                          __pcstackBANK0 0020  
                                          __pcstackBANK1 00A0  
                                          __pcstackBANK3 01D0  
                                   _ADC_IsConversionDone 12F9  
                               __size_of_TMR2_Initialize 0008  
                                __end_of_SPI1_Initialize 12F9  
                                            ??_DOOR_init 0021  
                                               ?_RF_Init 0070  
                                          _i2c2_tr_queue 0162  
                                         ??_Storage_save 0025  
                          __size_of_Diag_getSensorHealth 0012  
                      Wireless_checkDataReceived@channel 003B  
                                    __end_of_DOOR_update 1452  
                                         _RF_DataIsReady 15A7  
                               _Timeout_getGlobalCounter 13B4  
                             __size_of_FVR_IsOutputReady 0006  
                             SPI_WriteReadBuffer@bufSize 0024  
                                              __pnvBANK2 0166  
                            __end_of_RF_ReadRegisterData 15E1  
                              BMP_readTemperature@status 00B8  
                   HMC5883L_I2C_BufferRead@NumByteToRead 003F  
                                       ___lwdiv@dividend 0023  
                                 _PIN_MANAGER_Initialize 173D  
              __end_of_Wireless_isDataTransmitSuccessful 1375  
             __size_of_Wireless_isDataTransmitSuccessful 000D  
                    ??_Wireless_isDataTransmitSuccessful 0025  
                     ?_Wireless_isDataTransmitSuccessful 0070  
                      _Wireless_isDataTransmitSuccessful 1368  
                                      _RF_ResetStatusIRQ 161D  
                                 SPI_WriteBuffer@bufSize 0025  
                                      _ADC_SelectChannel 1383  
                               Wireless_sendData@payload 0034  
                       __end_of_TMR1_SetInterruptHandler 133C  
                                               ?___aldiv 0021  
                              ??_Sensor_getSupplyVoltage 0044  
                                               ?___ftadd 0049  
                                               ?___ftdiv 0031  
                                               ?___ftneg 0041  
                                               ?___lldiv 0021  
                                               ?___ftmul 0056  
                                               ?___fttol 0066  
                                               ?___lwdiv 0021  
                                     ?_RF_ResetStatusIRQ 0070  
                                        ?_ADC_Initialize 0070  
                           __end_of_RF_WriteRegisterData 15A7  
                                     ?_ADC_SelectChannel 0070  
                                               _I2C2_ISR 0544  
                           ??_INTERRUPT_InterruptManager 0020  
                                 ?_Sensor_peripheralWake 0070  
                                              __pswtext1 1000  
                                  Storage_save@openAngle 0026  
                                              _doorState 00D9  
                                    ??_RF_ResetStatusIRQ 0025  
                                    ??_ADC_SelectChannel 0021  
                                  ?_ADC_IsConversionDone 0070  
                                I2C_BufferRead@slaveAddr 003A  
                                       __CFG_WDTE$NSLEEP 0000  
                                   __end_of_RF_GetStatus 12C0  
                                        _RF_ReadRegister 14CA  
                                 __end_of_RF_DataIsReady 15C4  
                                       ___lwdiv@quotient 0027  
                                         __size_of_limit 0026  
                                 Wireless_packageData@t1 00C6  
                          __size_of_Wireless_packageData 00DC  
                        __end_of_I2C2_MasterReadTRBBuild 1794  
                                          _TMR1_CallBack 1375  
                                        ___aldiv@divisor 0021  
                                        ___aldiv@counter 002A  
                                               _BMP_init 0B13  
                                               _DOOR_run 12A4  
                                               _LATCbits 010E  
                                     Wireless_init@TADDR 1821  
                                              clear_ram0 12E5  
                               __end_of_RF_WriteRegister 143C  
                                               _PIE1bits 0091  
                                               _PIE4bits 0094  
                              __end_of_RF_ResetStatusIRQ 163D  
                              __end_of_ADC_SelectChannel 1393  
                    __size_of_INTERRUPT_InterruptManager 0033  
                                  __end_of_I2C_ByteWrite 1800  
                                               _PIR1bits 0011  
                                               _PIR4bits 0014  
                                               _SSP1CON1 0215  
                                               _SSP2CON1 021D  
                                               _SSP2CON3 021F  
                                       ??_I2C_BufferRead 0036  
                                               _TMR1_ISR 1318  
                                               _SSP1STAT 0214  
                                               _SSP2STAT 021C  
                                      ??_PIN_MANAGER_IOC 0070  
                          I2C2_MasterTRBInsert@ptrb_list 0021  
                                      ??_TMR1_Initialize 0023  
                                               _RF_Write 1393  
                                             _ADCON0bits 009D  
                                       _I2C2_MasterWrite 1713  
                               ADC_SelectChannel@channel 0022  
                                __size_of_FVR_Initialize 0004  
                                   __end_of_RF_RxPayload 13FC  
                             __end_of_Timeout_hasExpired 094A  
                                               _WPUCbits 020E  
                         Diag_setTempSensorHealth@health 0022  
                                            _DOOR_update 143C  
                                  __size_of_setSleepTime 0005  
                                 I2C_BufferRead@ReadAddr 0033  
                                  DATAEE_WriteByte@bData 0021  
                                   __end_of_RF_TxPayload 1550  
                                    __end_ofatan@coeff_a 1812  
                                    __end_ofatan@coeff_b 1821  
                                        ?_RF_DataIsReady 0070  
             Wireless_determineTransmitPower@testPayload 0039  
                                       ?_SPI1_Initialize 0070  
                                      ___lmul@multiplier 0021  
                           __end_of_I2C2_MasterTRBInsert 09F2  
                                       __size_of_RF_Init 0004  
                                         ?_TMR1_CallBack 0070  
                                      ?_DATAEE_WriteByte 0021  
                                _HMC5883L_I2C_BufferRead 13C5  
                                      ??_TMR2_Initialize 0021  
                             ?_Timeout_updateCurrentTime 0070  
                                     ??_DATAEE_WriteByte 0022  
                                      I2C_ByteWrite@data 0036  
                                             _EECON1bits 0195  
                                   __end_of_RF_WriteRead 1468  
                       HMC5883L_I2C_BufferRead@slaveAddr 0042  
                                 DOOR_update@closedAngle 0027  
                               ?_ADC_GetConversionResult 0021  
                                  TMR1_ReadTimer@readVal 0028  
                         I2C2_MasterWriteTRBBuild@length 0022  
                           __size_of_BMP_readTemperature 02CE  
                                __size_of_Wireless_sleep 0018  
                                ??_OSCILLATOR_Initialize 0021  
                                       __size_of___aldiv 0082  
                                       __size_of___ftadd 00F6  
                                           _setSleepTime 12CE  
                                       __size_of___ftdiv 00A9  
                                       __size_of___ftneg 0009  
                                       __size_of___lldiv 0053  
                                               ___altoft 0835  
                                       __size_of___ftmul 00B4  
                                       __size_of___fttol 009F  
                                   __end_of_Storage_save 14CA  
                                       __size_of___lwdiv 0035  
            Wireless_determineTransmitPower@latestResult 003A  
                                               ___awtoft 165D  
                                               ___ftpack 0AAE  
                                ??_I2C2_FunctionComplete 0070  
                               _TMR1_SetInterruptHandler 1333  
                      __size_of_Diag_getTempSensorHealth 0003  
                                __end_of_RF_ReadRegister 14E4  
                      __size_of_Diag_setTempSensorHealth 0008  
                              ?_Diag_getTempSensorHealth 0070  
                                               ___lwtoft 13FC  
                              ?_Diag_setTempSensorHealth 0070  
                                  _TMR1_InterruptHandler 0166  
                            ?_Wireless_checkDataReceived 0070  
                                 ??_ADC_IsConversionDone 0021  
                                _IOCAF2_InterruptHandler 0168  
                                Wireless_sendData@length 0031  
                                            _initialised 00D8  
                                        ___lwdiv@divisor 0021  
                                        ___lwdiv@counter 0026  
                           ??_IOCAF2_SetInterruptHandler 0023  
                                               __ptext10 1535  
                                               __ptext11 1393  
                                               __ptext20 15A7  
                                               __ptext12 1368  
                                               __ptext21 14CA  
                                               __ptext13 12BC  
                                             _T1GCONbits 0019  
                                               __ptext30 12A7  
                                               __ptext22 143C  
                                               __ptext14 1452  
                                               __ptext31 1383  
                                               __ptext23 14B0  
                                               __ptext15 15E1  
                                               __ptext40 12D9  
                                               __ptext32 12F9  
                                               __ptext24 16A2  
                                               __ptext16 0B87  
                                               __ptext41 134F  
                                               __ptext33 133C  
                                               __ptext25 12AA  
                                               __ptext17 13E9  
                                               __ptext50 1468  
                                               __ptext42 12B8  
                                               __ptext34 13D7  
                                               __ptext26 0872  
                                               __ptext18 15C4  
                                               __ptext51 1333  
                                               __ptext43 0A50  
                                               __ptext35 0783  
                                               __ptext27 12C9  
                                               __ptext19 163D  
                                               __ptext60 07FE  
                                               __ptext52 12F2  
                                               __ptext44 1794  
                                               __ptext36 158A  
                                               __ptext28 12C4  
                                               __ptext61 0077  
                                               __ptext53 173D  
                                               __ptext45 156D  
                                               __ptext37 151A  
                                               __ptext29 12DF  
                                               __ptext70 0AAE  
                                               __ptext62 13FC  
                                               __ptext54 132A  
                                               __ptext46 13B4  
                                               __ptext38 161D  
                                               __ptext71 0C01  
                                               __ptext63 0C83  
                                               __ptext55 12EB  
                                               __ptext47 14FF  
                                               __ptext39 1426  
                                               __ptext80 1713  
                                               __ptext72 08B7  
                                               __ptext64 1321  
                                               __ptext56 14E4  
                                               __ptext48 12B4  
                                               __ptext81 167F  
                                               __ptext73 13C5  
                                               __ptext65 0E70  
                                               __ptext57 12B0  
                                               __ptext49 1310  
                                               __ptext90 07FF  
                                               __ptext82 16EB  
                                               __ptext74 12A1  
                                               __ptext66 0DC7  
                                               __ptext58 1308  
                                               __ptext91 12D3  
                                               __ptext83 099D  
                                               __ptext75 0B13  
                                               __ptext67 068D  
                                               __ptext59 12A4  
                                               __ptext92 135B  
                                               __ptext84 1768  
                                               __ptext76 17C4  
                                               __ptext68 165D  
                                               __ptext93 0003  
                                               __ptext85 1300  
                                               __ptext77 09F2  
                                               __ptext69 0835  
                                               __ptext94 0544  
                                               __ptext78 1497  
                                               __ptext95 1550  
                                               __ptext87 1318  
                                               __ptext79 08FD  
                                               __ptext96 13A3  
                                               __ptext88 1375  
                                               __ptext97 12A0  
                                               __ptext89 1345  
                               Wireless_packageData@data 00BE  
                                           _SSP1CON1bits 0215  
                                Wireless_sendData@status 0033  
                                           _SSP2CON1bits 021D  
                                           _SSP2CON2bits 021E  
                                             _IOCAF2_ISR 135B  
                            DATAEE_WriteByte@GIEBitValue 0023  
                                    RF_RxPayload@payload 0032  
                                   _RF_WriteRegisterData 158A  
                                      _HMC5883L_ReadBits 08B7  
                                          __size_of_main 01FF  
                      __end_of_Timeout_updateCurrentTime 0AAE  
                        Wireless_changeTransmitPower@val 0031  
                             __size_of_RF_ResetStatusIRQ 0020  
                                     ?_HMC5883L_ReadBits 0043  
                             __size_of_ADC_SelectChannel 0010  
                                I2C2_MasterWrite@address 0029  
                               __size_of_SPI_WriteBuffer 001B  
                                       ??_TMR1_ReadTimer 0023  
                                               int$flags 007E  
                                               _pressure 0128  
                                    ??_HMC5883L_ReadBits 0047  
                     __end_of_INTERRUPT_InterruptManager 0037  
                             _INTERRUPT_InterruptManager 0004  
                             __end_of_Timeout_setTimeout 14B0  
                                I2C2_MasterWrite@trBlock 015D  
                                           _SSP1STATbits 0214  
                               ??_Sensor_peripheralSleep 0021  
                    __size_of_IOCAF2_SetInterruptHandler 0009  
                                 BMP_readTemperature@tmp 00B9  
                          __size_of_I2C2_BusCollisionISR 0001  
                                            atan@coeff_a 1800  
                                            atan@coeff_b 1812  
                                  __size_of_RF_GetStatus 0004  
                                     RF_ReadRegister@reg 0024  
                                     RF_ReadRegister@val 0025  
                       __size_of_I2C2_MasterReadTRBBuild 002C  
                             ??_Timeout_getGlobalCounter 0025  
                                             _INTCONbits 000B  
                                  Timeout_setTimeout@val 0021  
                __end_of_Wireless_determineTransmitPower 0DC7  
               __size_of_Wireless_determineTransmitPower 00A5  
                      ??_Wireless_determineTransmitPower 0035  
                       ?_Wireless_determineTransmitPower 0070  
                        _Wireless_determineTransmitPower 0D22  
                                             _FVRCONbits 0117  
                                           _sensorHealth 00E3  
                                 __size_of_Wireless_init 007B  
                                               limit@max 0025  
                                               limit@min 0023  
                                               limit@val 0021  
                                  I2C_BufferRead@pBuffer 0031  
                                 __size_of_Wireless_wake 001F  
                                        ??_TMR1_CallBack 0070  
                              ??_HMC5883L_I2C_BufferRead 0041  
                                __size_of_WDT_Initialize 0004  
                      __size_of_I2C2_MasterWriteTRBBuild 0023  
                              __end_of_HMC5883L_ReadBits 08FD  
                              ?_I2C2_MasterWriteTRBBuild 0021  
                                               intlevel1 0000  
                                  ?_RF_WriteRegisterData 0029  
                            __end_of_ADC_StartConversion 12AA  
                                        _doorClosedAngle 00DD  
                                    I2C2_ISR@i2c_address 007A  
                                       ___lldiv@dividend 0025  
                                ?_PIN_MANAGER_Initialize 0070  
                        __end_of_ADC_GetConversionResult 1345  
                                      __CFG_CLKOUTEN$OFF 0000  
                                       ??_ADC_Initialize 0021  
                                           _RF_GetStatus 12BC  
                                 I2C2_MasterWrite@length 0028  
                                ??_Sensor_peripheralWake 0021  
                           __end_of_Diag_getSensorHealth 13E9  
                                 __size_of_DOOR_resetPos 0003  
                                  __size_of_RF_RxPayload 0013  
                                   _I2C2_MasterTRBInsert 099D  
                                          __pstringtext1 1800  
                                          __pstringtext2 1812  
                                          __pstringtext3 1821  
                                  __size_of_RF_TxPayload 001B  
                                         _FVR_Initialize 12B0  
                                       ?_RF_ReadRegister 0070  
                           __size_of_SPI_WriteReadBuffer 0020  
                                       ___lldiv@quotient 002A  
                                   I2C_BufferRead@status 003B  
                                           ___aldiv@sign 002B  
                                 __size_of_SPI_WriteRead 0006  
                                            ?_IOCAF2_ISR 0070  
                         __end_of_PIN_MANAGER_Initialize 1768  
                                  __size_of_RF_WriteRead 0016  
                               __size_of_I2C2_MasterRead 0028  
                               __size_of_I2C2_Initialize 001B  
                                     _referenceDirection 013E  
                                     __size_of_I2C2_Stop 001D  
                                        _PIN_MANAGER_IOC 12D3  
                               __end_of_I2C2_MasterWrite 173D  
                                           _RF_RxPayload 13E9  
                                      ?_RF_WriteRegister 0023  
                                        _TMR1_Initialize 1468  
                    __size_of_Wireless_checkDataReceived 007A  
                                     main@prevDoorStatus 01D0  
                                  __size_of_Storage_save 001A  
