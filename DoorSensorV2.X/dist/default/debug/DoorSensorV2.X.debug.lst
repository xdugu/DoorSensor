

Microchip Technology PIC LITE Macro Assembler V1.45 build -152302408 
                                                                                               Wed Oct 09 21:45:51 2019

Microchip Technology Omniscient Code Generator v1.45 (Free mode) build 201711160504
     1                           	processor	16LF1829
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataBANK1,global,class=CODE,delta=2
     5                           	psect	idataBANK2,global,class=CODE,delta=2
     6                           	psect	stringtext1,global,class=STRCODE,delta=2
     7                           	psect	stringtext2,global,class=STRCODE,delta=2
     8                           	psect	stringtext3,global,class=STRCODE,delta=2
     9                           	psect	nvCOMMON,global,class=COMMON,space=1,delta=1
    10                           	psect	nvBANK2,global,class=BANK2,space=1,delta=1
    11                           	psect	cinit,global,class=CODE,merge=1,delta=2
    12                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
    13                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    14                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1
    15                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1
    16                           	psect	dataBANK2,global,class=BANK2,space=1,delta=1
    17                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1
    18                           	psect	clrtext,global,class=CODE,delta=2
    19                           	psect	cstackBANK3,global,class=BANK3,space=1,delta=1
    20                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    21                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    22                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    23                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    24                           	psect	text1,local,class=CODE,merge=1,delta=2
    25                           	psect	text2,local,class=CODE,merge=1,delta=2,group=2
    26                           	psect	text3,local,class=CODE,merge=1,delta=2,group=2
    27                           	psect	text4,local,class=CODE,merge=1,delta=2
    28                           	psect	text5,local,class=CODE,merge=1,delta=2
    29                           	psect	text6,local,class=CODE,merge=1,delta=2
    30                           	psect	text7,local,class=CODE,merge=1,delta=2
    31                           	psect	text8,local,class=CODE,merge=1,delta=2
    32                           	psect	text9,local,class=CODE,merge=1,delta=2
    33                           	psect	text10,local,class=CODE,merge=1,delta=2
    34                           	psect	text11,local,class=CODE,merge=1,delta=2
    35                           	psect	text12,local,class=CODE,merge=1,delta=2
    36                           	psect	text13,local,class=CODE,merge=1,delta=2
    37                           	psect	text14,local,class=CODE,merge=1,delta=2
    38                           	psect	text15,local,class=CODE,merge=1,delta=2
    39                           	psect	text16,local,class=CODE,merge=1,delta=2
    40                           	psect	text17,local,class=CODE,merge=1,delta=2
    41                           	psect	text18,local,class=CODE,merge=1,delta=2
    42                           	psect	text19,local,class=CODE,merge=1,delta=2
    43                           	psect	text20,local,class=CODE,merge=1,delta=2
    44                           	psect	text21,local,class=CODE,merge=1,delta=2
    45                           	psect	text22,local,class=CODE,merge=1,delta=2
    46                           	psect	text23,local,class=CODE,merge=1,delta=2
    47                           	psect	text24,local,class=CODE,merge=1,delta=2
    48                           	psect	text25,local,class=CODE,merge=1,delta=2
    49                           	psect	text26,local,class=CODE,merge=1,delta=2
    50                           	psect	text27,local,class=CODE,merge=1,delta=2
    51                           	psect	text28,local,class=CODE,merge=1,delta=2
    52                           	psect	text29,local,class=CODE,merge=1,delta=2
    53                           	psect	text30,local,class=CODE,merge=1,delta=2
    54                           	psect	text31,local,class=CODE,merge=1,delta=2
    55                           	psect	text32,local,class=CODE,merge=1,delta=2
    56                           	psect	text33,local,class=CODE,merge=1,delta=2
    57                           	psect	text34,local,class=CODE,merge=1,delta=2
    58                           	psect	text35,local,class=CODE,merge=1,delta=2
    59                           	psect	text36,local,class=CODE,merge=1,delta=2
    60                           	psect	text37,local,class=CODE,merge=1,delta=2
    61                           	psect	text38,local,class=CODE,merge=1,delta=2
    62                           	psect	text39,local,class=CODE,merge=1,delta=2
    63                           	psect	text40,local,class=CODE,merge=1,delta=2,group=2
    64                           	psect	text41,local,class=CODE,merge=1,delta=2
    65                           	psect	text42,local,class=CODE,merge=1,delta=2
    66                           	psect	text43,local,class=CODE,merge=1,delta=2
    67                           	psect	text44,local,class=CODE,merge=1,delta=2
    68                           	psect	text45,local,class=CODE,merge=1,delta=2
    69                           	psect	text46,local,class=CODE,merge=1,delta=2
    70                           	psect	text47,local,class=CODE,merge=1,delta=2
    71                           	psect	text48,local,class=CODE,merge=1,delta=2
    72                           	psect	text49,local,class=CODE,merge=1,delta=2
    73                           	psect	text50,local,class=CODE,merge=1,delta=2
    74                           	psect	text51,local,class=CODE,merge=1,delta=2
    75                           	psect	text52,local,class=CODE,merge=1,delta=2
    76                           	psect	text53,local,class=CODE,merge=1,delta=2
    77                           	psect	text54,local,class=CODE,merge=1,delta=2
    78                           	psect	text55,local,class=CODE,merge=1,delta=2
    79                           	psect	text56,local,class=CODE,merge=1,delta=2
    80                           	psect	text57,local,class=CODE,merge=1,delta=2
    81                           	psect	text58,local,class=CODE,merge=1,delta=2,group=2
    82                           	psect	text59,local,class=CODE,merge=1,delta=2,group=2
    83                           	psect	text60,local,class=CODE,merge=1,delta=2,group=2
    84                           	psect	text61,local,class=CODE,merge=1,delta=2,group=2
    85                           	psect	text62,local,class=CODE,merge=1,delta=2,group=2
    86                           	psect	text63,local,class=CODE,merge=1,delta=2,group=2
    87                           	psect	text64,local,class=CODE,merge=1,delta=2,group=2
    88                           	psect	text65,local,class=CODE,merge=1,delta=2,group=2
    89                           	psect	text66,local,class=CODE,merge=1,delta=2,group=2
    90                           	psect	text67,local,class=CODE,merge=1,delta=2,group=2
    91                           	psect	text68,local,class=CODE,merge=1,delta=2
    92                           	psect	text69,local,class=CODE,merge=1,delta=2
    93                           	psect	text70,local,class=CODE,merge=1,delta=2
    94                           	psect	text71,local,class=CODE,merge=1,delta=2
    95                           	psect	text72,local,class=CODE,merge=1,delta=2
    96                           	psect	text73,local,class=CODE,merge=1,delta=2
    97                           	psect	text74,local,class=CODE,merge=1,delta=2
    98                           	psect	text75,local,class=CODE,merge=1,delta=2
    99                           	psect	text76,local,class=CODE,merge=1,delta=2
   100                           	psect	text77,local,class=CODE,merge=1,delta=2
   101                           	psect	text78,local,class=CODE,merge=1,delta=2
   102                           	psect	text79,local,class=CODE,merge=1,delta=2
   103                           	psect	text80,local,class=CODE,merge=1,delta=2
   104                           	psect	text81,local,class=CODE,merge=1,delta=2
   105                           	psect	intentry,global,class=CODE,delta=2
   106                           	psect	text83,local,class=CODE,merge=1,delta=2
   107                           	psect	text84,local,class=CODE,merge=1,delta=2
   108                           	psect	text85,local,class=CODE,merge=1,delta=2
   109                           	psect	text86,local,class=CODE,merge=1,delta=2
   110                           	psect	text87,local,class=CODE,merge=1,delta=2
   111                           	psect	text88,local,class=CODE,merge=1,delta=2
   112                           	psect	text89,local,class=CODE,merge=1,delta=2
   113                           	psect	text90,local,class=CODE,merge=1,delta=2
   114                           	psect	swtext1,local,class=CONST,delta=2
   115                           	psect	text91,local,class=CODE,merge=1,delta=2
   116                           	psect	text92,local,class=CODE,merge=1,delta=2
   117                           	psect	text93,local,class=CODE,merge=1,delta=2
   118                           	dabs	1,0x7E,2
   119  0000                     
   120                           ; Version 1.45
   121                           ; Generated 16/11/2017 GMT
   122                           ; 
   123                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
   124                           ; All rights reserved.
   125                           ; 
   126                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
   127                           ; 
   128                           ; Redistribution and use in source and binary forms, with or without modification, are
   129                           ; permitted provided that the following conditions are met:
   130                           ; 
   131                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
   132                           ;        conditions and the following disclaimer.
   133                           ; 
   134                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
   135                           ;        of conditions and the following disclaimer in the documentation and/or other
   136                           ;        materials provided with the distribution.
   137                           ; 
   138                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
   139                           ;        software without specific prior written permission.
   140                           ; 
   141                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   142                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   143                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   144                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   145                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   146                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   147                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   148                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   149                           ; 
   150                           ; 
   151                           ; Code-generator required, PIC16LF1829 Definitions
   152                           ; 
   153                           ; SFR Addresses
   154  0000                     	;# 
   155  0001                     	;# 
   156  0002                     	;# 
   157  0003                     	;# 
   158  0004                     	;# 
   159  0005                     	;# 
   160  0006                     	;# 
   161  0007                     	;# 
   162  0008                     	;# 
   163  0009                     	;# 
   164  000A                     	;# 
   165  000B                     	;# 
   166  000C                     	;# 
   167  000D                     	;# 
   168  000E                     	;# 
   169  0011                     	;# 
   170  0012                     	;# 
   171  0013                     	;# 
   172  0014                     	;# 
   173  0015                     	;# 
   174  0016                     	;# 
   175  0016                     	;# 
   176  0017                     	;# 
   177  0018                     	;# 
   178  0019                     	;# 
   179  001A                     	;# 
   180  001B                     	;# 
   181  001C                     	;# 
   182  001E                     	;# 
   183  001F                     	;# 
   184  008C                     	;# 
   185  008D                     	;# 
   186  008E                     	;# 
   187  0091                     	;# 
   188  0092                     	;# 
   189  0093                     	;# 
   190  0094                     	;# 
   191  0095                     	;# 
   192  0096                     	;# 
   193  0097                     	;# 
   194  0098                     	;# 
   195  0099                     	;# 
   196  009A                     	;# 
   197  009B                     	;# 
   198  009B                     	;# 
   199  009C                     	;# 
   200  009D                     	;# 
   201  009E                     	;# 
   202  010C                     	;# 
   203  010D                     	;# 
   204  010E                     	;# 
   205  0111                     	;# 
   206  0112                     	;# 
   207  0113                     	;# 
   208  0114                     	;# 
   209  0115                     	;# 
   210  0116                     	;# 
   211  0117                     	;# 
   212  0118                     	;# 
   213  0119                     	;# 
   214  011A                     	;# 
   215  011B                     	;# 
   216  011D                     	;# 
   217  011E                     	;# 
   218  018C                     	;# 
   219  018D                     	;# 
   220  018E                     	;# 
   221  0191                     	;# 
   222  0191                     	;# 
   223  0192                     	;# 
   224  0193                     	;# 
   225  0193                     	;# 
   226  0193                     	;# 
   227  0194                     	;# 
   228  0195                     	;# 
   229  0196                     	;# 
   230  0199                     	;# 
   231  019A                     	;# 
   232  019B                     	;# 
   233  019B                     	;# 
   234  019B                     	;# 
   235  019B                     	;# 
   236  019C                     	;# 
   237  019C                     	;# 
   238  019D                     	;# 
   239  019E                     	;# 
   240  019F                     	;# 
   241  020C                     	;# 
   242  020D                     	;# 
   243  020E                     	;# 
   244  0211                     	;# 
   245  0211                     	;# 
   246  0212                     	;# 
   247  0212                     	;# 
   248  0213                     	;# 
   249  0213                     	;# 
   250  0214                     	;# 
   251  0214                     	;# 
   252  0215                     	;# 
   253  0215                     	;# 
   254  0215                     	;# 
   255  0216                     	;# 
   256  0216                     	;# 
   257  0217                     	;# 
   258  0217                     	;# 
   259  0219                     	;# 
   260  021A                     	;# 
   261  021B                     	;# 
   262  021C                     	;# 
   263  021D                     	;# 
   264  021E                     	;# 
   265  021F                     	;# 
   266  0291                     	;# 
   267  0291                     	;# 
   268  0292                     	;# 
   269  0293                     	;# 
   270  0294                     	;# 
   271  0295                     	;# 
   272  0295                     	;# 
   273  0296                     	;# 
   274  0298                     	;# 
   275  0298                     	;# 
   276  0299                     	;# 
   277  029A                     	;# 
   278  029B                     	;# 
   279  029C                     	;# 
   280  029D                     	;# 
   281  029E                     	;# 
   282  0311                     	;# 
   283  0311                     	;# 
   284  0312                     	;# 
   285  0313                     	;# 
   286  0318                     	;# 
   287  0318                     	;# 
   288  0319                     	;# 
   289  031A                     	;# 
   290  038C                     	;# 
   291  038D                     	;# 
   292  038E                     	;# 
   293  0391                     	;# 
   294  0392                     	;# 
   295  0393                     	;# 
   296  0394                     	;# 
   297  0395                     	;# 
   298  0396                     	;# 
   299  039A                     	;# 
   300  039C                     	;# 
   301  039D                     	;# 
   302  039E                     	;# 
   303  039F                     	;# 
   304  0415                     	;# 
   305  0416                     	;# 
   306  0417                     	;# 
   307  041C                     	;# 
   308  041D                     	;# 
   309  041E                     	;# 
   310  0FE4                     	;# 
   311  0FE5                     	;# 
   312  0FE6                     	;# 
   313  0FE7                     	;# 
   314  0FE8                     	;# 
   315  0FE9                     	;# 
   316  0FEA                     	;# 
   317  0FEB                     	;# 
   318  0FED                     	;# 
   319  0FEE                     	;# 
   320  0FEF                     	;# 
   321  0000                     	;# 
   322  0001                     	;# 
   323  0002                     	;# 
   324  0003                     	;# 
   325  0004                     	;# 
   326  0005                     	;# 
   327  0006                     	;# 
   328  0007                     	;# 
   329  0008                     	;# 
   330  0009                     	;# 
   331  000A                     	;# 
   332  000B                     	;# 
   333  000C                     	;# 
   334  000D                     	;# 
   335  000E                     	;# 
   336  0011                     	;# 
   337  0012                     	;# 
   338  0013                     	;# 
   339  0014                     	;# 
   340  0015                     	;# 
   341  0016                     	;# 
   342  0016                     	;# 
   343  0017                     	;# 
   344  0018                     	;# 
   345  0019                     	;# 
   346  001A                     	;# 
   347  001B                     	;# 
   348  001C                     	;# 
   349  001E                     	;# 
   350  001F                     	;# 
   351  008C                     	;# 
   352  008D                     	;# 
   353  008E                     	;# 
   354  0091                     	;# 
   355  0092                     	;# 
   356  0093                     	;# 
   357  0094                     	;# 
   358  0095                     	;# 
   359  0096                     	;# 
   360  0097                     	;# 
   361  0098                     	;# 
   362  0099                     	;# 
   363  009A                     	;# 
   364  009B                     	;# 
   365  009B                     	;# 
   366  009C                     	;# 
   367  009D                     	;# 
   368  009E                     	;# 
   369  010C                     	;# 
   370  010D                     	;# 
   371  010E                     	;# 
   372  0111                     	;# 
   373  0112                     	;# 
   374  0113                     	;# 
   375  0114                     	;# 
   376  0115                     	;# 
   377  0116                     	;# 
   378  0117                     	;# 
   379  0118                     	;# 
   380  0119                     	;# 
   381  011A                     	;# 
   382  011B                     	;# 
   383  011D                     	;# 
   384  011E                     	;# 
   385  018C                     	;# 
   386  018D                     	;# 
   387  018E                     	;# 
   388  0191                     	;# 
   389  0191                     	;# 
   390  0192                     	;# 
   391  0193                     	;# 
   392  0193                     	;# 
   393  0193                     	;# 
   394  0194                     	;# 
   395  0195                     	;# 
   396  0196                     	;# 
   397  0199                     	;# 
   398  019A                     	;# 
   399  019B                     	;# 
   400  019B                     	;# 
   401  019B                     	;# 
   402  019B                     	;# 
   403  019C                     	;# 
   404  019C                     	;# 
   405  019D                     	;# 
   406  019E                     	;# 
   407  019F                     	;# 
   408  020C                     	;# 
   409  020D                     	;# 
   410  020E                     	;# 
   411  0211                     	;# 
   412  0211                     	;# 
   413  0212                     	;# 
   414  0212                     	;# 
   415  0213                     	;# 
   416  0213                     	;# 
   417  0214                     	;# 
   418  0214                     	;# 
   419  0215                     	;# 
   420  0215                     	;# 
   421  0215                     	;# 
   422  0216                     	;# 
   423  0216                     	;# 
   424  0217                     	;# 
   425  0217                     	;# 
   426  0219                     	;# 
   427  021A                     	;# 
   428  021B                     	;# 
   429  021C                     	;# 
   430  021D                     	;# 
   431  021E                     	;# 
   432  021F                     	;# 
   433  0291                     	;# 
   434  0291                     	;# 
   435  0292                     	;# 
   436  0293                     	;# 
   437  0294                     	;# 
   438  0295                     	;# 
   439  0295                     	;# 
   440  0296                     	;# 
   441  0298                     	;# 
   442  0298                     	;# 
   443  0299                     	;# 
   444  029A                     	;# 
   445  029B                     	;# 
   446  029C                     	;# 
   447  029D                     	;# 
   448  029E                     	;# 
   449  0311                     	;# 
   450  0311                     	;# 
   451  0312                     	;# 
   452  0313                     	;# 
   453  0318                     	;# 
   454  0318                     	;# 
   455  0319                     	;# 
   456  031A                     	;# 
   457  038C                     	;# 
   458  038D                     	;# 
   459  038E                     	;# 
   460  0391                     	;# 
   461  0392                     	;# 
   462  0393                     	;# 
   463  0394                     	;# 
   464  0395                     	;# 
   465  0396                     	;# 
   466  039A                     	;# 
   467  039C                     	;# 
   468  039D                     	;# 
   469  039E                     	;# 
   470  039F                     	;# 
   471  0415                     	;# 
   472  0416                     	;# 
   473  0417                     	;# 
   474  041C                     	;# 
   475  041D                     	;# 
   476  041E                     	;# 
   477  0FE4                     	;# 
   478  0FE5                     	;# 
   479  0FE6                     	;# 
   480  0FE7                     	;# 
   481  0FE8                     	;# 
   482  0FE9                     	;# 
   483  0FEA                     	;# 
   484  0FEB                     	;# 
   485  0FED                     	;# 
   486  0FEE                     	;# 
   487  0FEF                     	;# 
   488  0000                     	;# 
   489  0001                     	;# 
   490  0002                     	;# 
   491  0003                     	;# 
   492  0004                     	;# 
   493  0005                     	;# 
   494  0006                     	;# 
   495  0007                     	;# 
   496  0008                     	;# 
   497  0009                     	;# 
   498  000A                     	;# 
   499  000B                     	;# 
   500  000C                     	;# 
   501  000D                     	;# 
   502  000E                     	;# 
   503  0011                     	;# 
   504  0012                     	;# 
   505  0013                     	;# 
   506  0014                     	;# 
   507  0015                     	;# 
   508  0016                     	;# 
   509  0016                     	;# 
   510  0017                     	;# 
   511  0018                     	;# 
   512  0019                     	;# 
   513  001A                     	;# 
   514  001B                     	;# 
   515  001C                     	;# 
   516  001E                     	;# 
   517  001F                     	;# 
   518  008C                     	;# 
   519  008D                     	;# 
   520  008E                     	;# 
   521  0091                     	;# 
   522  0092                     	;# 
   523  0093                     	;# 
   524  0094                     	;# 
   525  0095                     	;# 
   526  0096                     	;# 
   527  0097                     	;# 
   528  0098                     	;# 
   529  0099                     	;# 
   530  009A                     	;# 
   531  009B                     	;# 
   532  009B                     	;# 
   533  009C                     	;# 
   534  009D                     	;# 
   535  009E                     	;# 
   536  010C                     	;# 
   537  010D                     	;# 
   538  010E                     	;# 
   539  0111                     	;# 
   540  0112                     	;# 
   541  0113                     	;# 
   542  0114                     	;# 
   543  0115                     	;# 
   544  0116                     	;# 
   545  0117                     	;# 
   546  0118                     	;# 
   547  0119                     	;# 
   548  011A                     	;# 
   549  011B                     	;# 
   550  011D                     	;# 
   551  011E                     	;# 
   552  018C                     	;# 
   553  018D                     	;# 
   554  018E                     	;# 
   555  0191                     	;# 
   556  0191                     	;# 
   557  0192                     	;# 
   558  0193                     	;# 
   559  0193                     	;# 
   560  0193                     	;# 
   561  0194                     	;# 
   562  0195                     	;# 
   563  0196                     	;# 
   564  0199                     	;# 
   565  019A                     	;# 
   566  019B                     	;# 
   567  019B                     	;# 
   568  019B                     	;# 
   569  019B                     	;# 
   570  019C                     	;# 
   571  019C                     	;# 
   572  019D                     	;# 
   573  019E                     	;# 
   574  019F                     	;# 
   575  020C                     	;# 
   576  020D                     	;# 
   577  020E                     	;# 
   578  0211                     	;# 
   579  0211                     	;# 
   580  0212                     	;# 
   581  0212                     	;# 
   582  0213                     	;# 
   583  0213                     	;# 
   584  0214                     	;# 
   585  0214                     	;# 
   586  0215                     	;# 
   587  0215                     	;# 
   588  0215                     	;# 
   589  0216                     	;# 
   590  0216                     	;# 
   591  0217                     	;# 
   592  0217                     	;# 
   593  0219                     	;# 
   594  021A                     	;# 
   595  021B                     	;# 
   596  021C                     	;# 
   597  021D                     	;# 
   598  021E                     	;# 
   599  021F                     	;# 
   600  0291                     	;# 
   601  0291                     	;# 
   602  0292                     	;# 
   603  0293                     	;# 
   604  0294                     	;# 
   605  0295                     	;# 
   606  0295                     	;# 
   607  0296                     	;# 
   608  0298                     	;# 
   609  0298                     	;# 
   610  0299                     	;# 
   611  029A                     	;# 
   612  029B                     	;# 
   613  029C                     	;# 
   614  029D                     	;# 
   615  029E                     	;# 
   616  0311                     	;# 
   617  0311                     	;# 
   618  0312                     	;# 
   619  0313                     	;# 
   620  0318                     	;# 
   621  0318                     	;# 
   622  0319                     	;# 
   623  031A                     	;# 
   624  038C                     	;# 
   625  038D                     	;# 
   626  038E                     	;# 
   627  0391                     	;# 
   628  0392                     	;# 
   629  0393                     	;# 
   630  0394                     	;# 
   631  0395                     	;# 
   632  0396                     	;# 
   633  039A                     	;# 
   634  039C                     	;# 
   635  039D                     	;# 
   636  039E                     	;# 
   637  039F                     	;# 
   638  0415                     	;# 
   639  0416                     	;# 
   640  0417                     	;# 
   641  041C                     	;# 
   642  041D                     	;# 
   643  041E                     	;# 
   644  0FE4                     	;# 
   645  0FE5                     	;# 
   646  0FE6                     	;# 
   647  0FE7                     	;# 
   648  0FE8                     	;# 
   649  0FE9                     	;# 
   650  0FEA                     	;# 
   651  0FEB                     	;# 
   652  0FED                     	;# 
   653  0FEE                     	;# 
   654  0FEF                     	;# 
   655  0000                     	;# 
   656  0001                     	;# 
   657  0002                     	;# 
   658  0003                     	;# 
   659  0004                     	;# 
   660  0005                     	;# 
   661  0006                     	;# 
   662  0007                     	;# 
   663  0008                     	;# 
   664  0009                     	;# 
   665  000A                     	;# 
   666  000B                     	;# 
   667  000C                     	;# 
   668  000D                     	;# 
   669  000E                     	;# 
   670  0011                     	;# 
   671  0012                     	;# 
   672  0013                     	;# 
   673  0014                     	;# 
   674  0015                     	;# 
   675  0016                     	;# 
   676  0016                     	;# 
   677  0017                     	;# 
   678  0018                     	;# 
   679  0019                     	;# 
   680  001A                     	;# 
   681  001B                     	;# 
   682  001C                     	;# 
   683  001E                     	;# 
   684  001F                     	;# 
   685  008C                     	;# 
   686  008D                     	;# 
   687  008E                     	;# 
   688  0091                     	;# 
   689  0092                     	;# 
   690  0093                     	;# 
   691  0094                     	;# 
   692  0095                     	;# 
   693  0096                     	;# 
   694  0097                     	;# 
   695  0098                     	;# 
   696  0099                     	;# 
   697  009A                     	;# 
   698  009B                     	;# 
   699  009B                     	;# 
   700  009C                     	;# 
   701  009D                     	;# 
   702  009E                     	;# 
   703  010C                     	;# 
   704  010D                     	;# 
   705  010E                     	;# 
   706  0111                     	;# 
   707  0112                     	;# 
   708  0113                     	;# 
   709  0114                     	;# 
   710  0115                     	;# 
   711  0116                     	;# 
   712  0117                     	;# 
   713  0118                     	;# 
   714  0119                     	;# 
   715  011A                     	;# 
   716  011B                     	;# 
   717  011D                     	;# 
   718  011E                     	;# 
   719  018C                     	;# 
   720  018D                     	;# 
   721  018E                     	;# 
   722  0191                     	;# 
   723  0191                     	;# 
   724  0192                     	;# 
   725  0193                     	;# 
   726  0193                     	;# 
   727  0193                     	;# 
   728  0194                     	;# 
   729  0195                     	;# 
   730  0196                     	;# 
   731  0199                     	;# 
   732  019A                     	;# 
   733  019B                     	;# 
   734  019B                     	;# 
   735  019B                     	;# 
   736  019B                     	;# 
   737  019C                     	;# 
   738  019C                     	;# 
   739  019D                     	;# 
   740  019E                     	;# 
   741  019F                     	;# 
   742  020C                     	;# 
   743  020D                     	;# 
   744  020E                     	;# 
   745  0211                     	;# 
   746  0211                     	;# 
   747  0212                     	;# 
   748  0212                     	;# 
   749  0213                     	;# 
   750  0213                     	;# 
   751  0214                     	;# 
   752  0214                     	;# 
   753  0215                     	;# 
   754  0215                     	;# 
   755  0215                     	;# 
   756  0216                     	;# 
   757  0216                     	;# 
   758  0217                     	;# 
   759  0217                     	;# 
   760  0219                     	;# 
   761  021A                     	;# 
   762  021B                     	;# 
   763  021C                     	;# 
   764  021D                     	;# 
   765  021E                     	;# 
   766  021F                     	;# 
   767  0291                     	;# 
   768  0291                     	;# 
   769  0292                     	;# 
   770  0293                     	;# 
   771  0294                     	;# 
   772  0295                     	;# 
   773  0295                     	;# 
   774  0296                     	;# 
   775  0298                     	;# 
   776  0298                     	;# 
   777  0299                     	;# 
   778  029A                     	;# 
   779  029B                     	;# 
   780  029C                     	;# 
   781  029D                     	;# 
   782  029E                     	;# 
   783  0311                     	;# 
   784  0311                     	;# 
   785  0312                     	;# 
   786  0313                     	;# 
   787  0318                     	;# 
   788  0318                     	;# 
   789  0319                     	;# 
   790  031A                     	;# 
   791  038C                     	;# 
   792  038D                     	;# 
   793  038E                     	;# 
   794  0391                     	;# 
   795  0392                     	;# 
   796  0393                     	;# 
   797  0394                     	;# 
   798  0395                     	;# 
   799  0396                     	;# 
   800  039A                     	;# 
   801  039C                     	;# 
   802  039D                     	;# 
   803  039E                     	;# 
   804  039F                     	;# 
   805  0415                     	;# 
   806  0416                     	;# 
   807  0417                     	;# 
   808  041C                     	;# 
   809  041D                     	;# 
   810  041E                     	;# 
   811  0FE4                     	;# 
   812  0FE5                     	;# 
   813  0FE6                     	;# 
   814  0FE7                     	;# 
   815  0FE8                     	;# 
   816  0FE9                     	;# 
   817  0FEA                     	;# 
   818  0FEB                     	;# 
   819  0FED                     	;# 
   820  0FEE                     	;# 
   821  0FEF                     	;# 
   822  0000                     	;# 
   823  0001                     	;# 
   824  0002                     	;# 
   825  0003                     	;# 
   826  0004                     	;# 
   827  0005                     	;# 
   828  0006                     	;# 
   829  0007                     	;# 
   830  0008                     	;# 
   831  0009                     	;# 
   832  000A                     	;# 
   833  000B                     	;# 
   834  000C                     	;# 
   835  000D                     	;# 
   836  000E                     	;# 
   837  0011                     	;# 
   838  0012                     	;# 
   839  0013                     	;# 
   840  0014                     	;# 
   841  0015                     	;# 
   842  0016                     	;# 
   843  0016                     	;# 
   844  0017                     	;# 
   845  0018                     	;# 
   846  0019                     	;# 
   847  001A                     	;# 
   848  001B                     	;# 
   849  001C                     	;# 
   850  001E                     	;# 
   851  001F                     	;# 
   852  008C                     	;# 
   853  008D                     	;# 
   854  008E                     	;# 
   855  0091                     	;# 
   856  0092                     	;# 
   857  0093                     	;# 
   858  0094                     	;# 
   859  0095                     	;# 
   860  0096                     	;# 
   861  0097                     	;# 
   862  0098                     	;# 
   863  0099                     	;# 
   864  009A                     	;# 
   865  009B                     	;# 
   866  009B                     	;# 
   867  009C                     	;# 
   868  009D                     	;# 
   869  009E                     	;# 
   870  010C                     	;# 
   871  010D                     	;# 
   872  010E                     	;# 
   873  0111                     	;# 
   874  0112                     	;# 
   875  0113                     	;# 
   876  0114                     	;# 
   877  0115                     	;# 
   878  0116                     	;# 
   879  0117                     	;# 
   880  0118                     	;# 
   881  0119                     	;# 
   882  011A                     	;# 
   883  011B                     	;# 
   884  011D                     	;# 
   885  011E                     	;# 
   886  018C                     	;# 
   887  018D                     	;# 
   888  018E                     	;# 
   889  0191                     	;# 
   890  0191                     	;# 
   891  0192                     	;# 
   892  0193                     	;# 
   893  0193                     	;# 
   894  0193                     	;# 
   895  0194                     	;# 
   896  0195                     	;# 
   897  0196                     	;# 
   898  0199                     	;# 
   899  019A                     	;# 
   900  019B                     	;# 
   901  019B                     	;# 
   902  019B                     	;# 
   903  019B                     	;# 
   904  019C                     	;# 
   905  019C                     	;# 
   906  019D                     	;# 
   907  019E                     	;# 
   908  019F                     	;# 
   909  020C                     	;# 
   910  020D                     	;# 
   911  020E                     	;# 
   912  0211                     	;# 
   913  0211                     	;# 
   914  0212                     	;# 
   915  0212                     	;# 
   916  0213                     	;# 
   917  0213                     	;# 
   918  0214                     	;# 
   919  0214                     	;# 
   920  0215                     	;# 
   921  0215                     	;# 
   922  0215                     	;# 
   923  0216                     	;# 
   924  0216                     	;# 
   925  0217                     	;# 
   926  0217                     	;# 
   927  0219                     	;# 
   928  021A                     	;# 
   929  021B                     	;# 
   930  021C                     	;# 
   931  021D                     	;# 
   932  021E                     	;# 
   933  021F                     	;# 
   934  0291                     	;# 
   935  0291                     	;# 
   936  0292                     	;# 
   937  0293                     	;# 
   938  0294                     	;# 
   939  0295                     	;# 
   940  0295                     	;# 
   941  0296                     	;# 
   942  0298                     	;# 
   943  0298                     	;# 
   944  0299                     	;# 
   945  029A                     	;# 
   946  029B                     	;# 
   947  029C                     	;# 
   948  029D                     	;# 
   949  029E                     	;# 
   950  0311                     	;# 
   951  0311                     	;# 
   952  0312                     	;# 
   953  0313                     	;# 
   954  0318                     	;# 
   955  0318                     	;# 
   956  0319                     	;# 
   957  031A                     	;# 
   958  038C                     	;# 
   959  038D                     	;# 
   960  038E                     	;# 
   961  0391                     	;# 
   962  0392                     	;# 
   963  0393                     	;# 
   964  0394                     	;# 
   965  0395                     	;# 
   966  0396                     	;# 
   967  039A                     	;# 
   968  039C                     	;# 
   969  039D                     	;# 
   970  039E                     	;# 
   971  039F                     	;# 
   972  0415                     	;# 
   973  0416                     	;# 
   974  0417                     	;# 
   975  041C                     	;# 
   976  041D                     	;# 
   977  041E                     	;# 
   978  0FE4                     	;# 
   979  0FE5                     	;# 
   980  0FE6                     	;# 
   981  0FE7                     	;# 
   982  0FE8                     	;# 
   983  0FE9                     	;# 
   984  0FEA                     	;# 
   985  0FEB                     	;# 
   986  0FED                     	;# 
   987  0FEE                     	;# 
   988  0FEF                     	;# 
   989  0000                     	;# 
   990  0001                     	;# 
   991  0002                     	;# 
   992  0003                     	;# 
   993  0004                     	;# 
   994  0005                     	;# 
   995  0006                     	;# 
   996  0007                     	;# 
   997  0008                     	;# 
   998  0009                     	;# 
   999  000A                     	;# 
  1000  000B                     	;# 
  1001  000C                     	;# 
  1002  000D                     	;# 
  1003  000E                     	;# 
  1004  0011                     	;# 
  1005  0012                     	;# 
  1006  0013                     	;# 
  1007  0014                     	;# 
  1008  0015                     	;# 
  1009  0016                     	;# 
  1010  0016                     	;# 
  1011  0017                     	;# 
  1012  0018                     	;# 
  1013  0019                     	;# 
  1014  001A                     	;# 
  1015  001B                     	;# 
  1016  001C                     	;# 
  1017  001E                     	;# 
  1018  001F                     	;# 
  1019  008C                     	;# 
  1020  008D                     	;# 
  1021  008E                     	;# 
  1022  0091                     	;# 
  1023  0092                     	;# 
  1024  0093                     	;# 
  1025  0094                     	;# 
  1026  0095                     	;# 
  1027  0096                     	;# 
  1028  0097                     	;# 
  1029  0098                     	;# 
  1030  0099                     	;# 
  1031  009A                     	;# 
  1032  009B                     	;# 
  1033  009B                     	;# 
  1034  009C                     	;# 
  1035  009D                     	;# 
  1036  009E                     	;# 
  1037  010C                     	;# 
  1038  010D                     	;# 
  1039  010E                     	;# 
  1040  0111                     	;# 
  1041  0112                     	;# 
  1042  0113                     	;# 
  1043  0114                     	;# 
  1044  0115                     	;# 
  1045  0116                     	;# 
  1046  0117                     	;# 
  1047  0118                     	;# 
  1048  0119                     	;# 
  1049  011A                     	;# 
  1050  011B                     	;# 
  1051  011D                     	;# 
  1052  011E                     	;# 
  1053  018C                     	;# 
  1054  018D                     	;# 
  1055  018E                     	;# 
  1056  0191                     	;# 
  1057  0191                     	;# 
  1058  0192                     	;# 
  1059  0193                     	;# 
  1060  0193                     	;# 
  1061  0193                     	;# 
  1062  0194                     	;# 
  1063  0195                     	;# 
  1064  0196                     	;# 
  1065  0199                     	;# 
  1066  019A                     	;# 
  1067  019B                     	;# 
  1068  019B                     	;# 
  1069  019B                     	;# 
  1070  019B                     	;# 
  1071  019C                     	;# 
  1072  019C                     	;# 
  1073  019D                     	;# 
  1074  019E                     	;# 
  1075  019F                     	;# 
  1076  020C                     	;# 
  1077  020D                     	;# 
  1078  020E                     	;# 
  1079  0211                     	;# 
  1080  0211                     	;# 
  1081  0212                     	;# 
  1082  0212                     	;# 
  1083  0213                     	;# 
  1084  0213                     	;# 
  1085  0214                     	;# 
  1086  0214                     	;# 
  1087  0215                     	;# 
  1088  0215                     	;# 
  1089  0215                     	;# 
  1090  0216                     	;# 
  1091  0216                     	;# 
  1092  0217                     	;# 
  1093  0217                     	;# 
  1094  0219                     	;# 
  1095  021A                     	;# 
  1096  021B                     	;# 
  1097  021C                     	;# 
  1098  021D                     	;# 
  1099  021E                     	;# 
  1100  021F                     	;# 
  1101  0291                     	;# 
  1102  0291                     	;# 
  1103  0292                     	;# 
  1104  0293                     	;# 
  1105  0294                     	;# 
  1106  0295                     	;# 
  1107  0295                     	;# 
  1108  0296                     	;# 
  1109  0298                     	;# 
  1110  0298                     	;# 
  1111  0299                     	;# 
  1112  029A                     	;# 
  1113  029B                     	;# 
  1114  029C                     	;# 
  1115  029D                     	;# 
  1116  029E                     	;# 
  1117  0311                     	;# 
  1118  0311                     	;# 
  1119  0312                     	;# 
  1120  0313                     	;# 
  1121  0318                     	;# 
  1122  0318                     	;# 
  1123  0319                     	;# 
  1124  031A                     	;# 
  1125  038C                     	;# 
  1126  038D                     	;# 
  1127  038E                     	;# 
  1128  0391                     	;# 
  1129  0392                     	;# 
  1130  0393                     	;# 
  1131  0394                     	;# 
  1132  0395                     	;# 
  1133  0396                     	;# 
  1134  039A                     	;# 
  1135  039C                     	;# 
  1136  039D                     	;# 
  1137  039E                     	;# 
  1138  039F                     	;# 
  1139  0415                     	;# 
  1140  0416                     	;# 
  1141  0417                     	;# 
  1142  041C                     	;# 
  1143  041D                     	;# 
  1144  041E                     	;# 
  1145  0FE4                     	;# 
  1146  0FE5                     	;# 
  1147  0FE6                     	;# 
  1148  0FE7                     	;# 
  1149  0FE8                     	;# 
  1150  0FE9                     	;# 
  1151  0FEA                     	;# 
  1152  0FEB                     	;# 
  1153  0FED                     	;# 
  1154  0FEE                     	;# 
  1155  0FEF                     	;# 
  1156  0000                     	;# 
  1157  0001                     	;# 
  1158  0002                     	;# 
  1159  0003                     	;# 
  1160  0004                     	;# 
  1161  0005                     	;# 
  1162  0006                     	;# 
  1163  0007                     	;# 
  1164  0008                     	;# 
  1165  0009                     	;# 
  1166  000A                     	;# 
  1167  000B                     	;# 
  1168  000C                     	;# 
  1169  000D                     	;# 
  1170  000E                     	;# 
  1171  0011                     	;# 
  1172  0012                     	;# 
  1173  0013                     	;# 
  1174  0014                     	;# 
  1175  0015                     	;# 
  1176  0016                     	;# 
  1177  0016                     	;# 
  1178  0017                     	;# 
  1179  0018                     	;# 
  1180  0019                     	;# 
  1181  001A                     	;# 
  1182  001B                     	;# 
  1183  001C                     	;# 
  1184  001E                     	;# 
  1185  001F                     	;# 
  1186  008C                     	;# 
  1187  008D                     	;# 
  1188  008E                     	;# 
  1189  0091                     	;# 
  1190  0092                     	;# 
  1191  0093                     	;# 
  1192  0094                     	;# 
  1193  0095                     	;# 
  1194  0096                     	;# 
  1195  0097                     	;# 
  1196  0098                     	;# 
  1197  0099                     	;# 
  1198  009A                     	;# 
  1199  009B                     	;# 
  1200  009B                     	;# 
  1201  009C                     	;# 
  1202  009D                     	;# 
  1203  009E                     	;# 
  1204  010C                     	;# 
  1205  010D                     	;# 
  1206  010E                     	;# 
  1207  0111                     	;# 
  1208  0112                     	;# 
  1209  0113                     	;# 
  1210  0114                     	;# 
  1211  0115                     	;# 
  1212  0116                     	;# 
  1213  0117                     	;# 
  1214  0118                     	;# 
  1215  0119                     	;# 
  1216  011A                     	;# 
  1217  011B                     	;# 
  1218  011D                     	;# 
  1219  011E                     	;# 
  1220  018C                     	;# 
  1221  018D                     	;# 
  1222  018E                     	;# 
  1223  0191                     	;# 
  1224  0191                     	;# 
  1225  0192                     	;# 
  1226  0193                     	;# 
  1227  0193                     	;# 
  1228  0193                     	;# 
  1229  0194                     	;# 
  1230  0195                     	;# 
  1231  0196                     	;# 
  1232  0199                     	;# 
  1233  019A                     	;# 
  1234  019B                     	;# 
  1235  019B                     	;# 
  1236  019B                     	;# 
  1237  019B                     	;# 
  1238  019C                     	;# 
  1239  019C                     	;# 
  1240  019D                     	;# 
  1241  019E                     	;# 
  1242  019F                     	;# 
  1243  020C                     	;# 
  1244  020D                     	;# 
  1245  020E                     	;# 
  1246  0211                     	;# 
  1247  0211                     	;# 
  1248  0212                     	;# 
  1249  0212                     	;# 
  1250  0213                     	;# 
  1251  0213                     	;# 
  1252  0214                     	;# 
  1253  0214                     	;# 
  1254  0215                     	;# 
  1255  0215                     	;# 
  1256  0215                     	;# 
  1257  0216                     	;# 
  1258  0216                     	;# 
  1259  0217                     	;# 
  1260  0217                     	;# 
  1261  0219                     	;# 
  1262  021A                     	;# 
  1263  021B                     	;# 
  1264  021C                     	;# 
  1265  021D                     	;# 
  1266  021E                     	;# 
  1267  021F                     	;# 
  1268  0291                     	;# 
  1269  0291                     	;# 
  1270  0292                     	;# 
  1271  0293                     	;# 
  1272  0294                     	;# 
  1273  0295                     	;# 
  1274  0295                     	;# 
  1275  0296                     	;# 
  1276  0298                     	;# 
  1277  0298                     	;# 
  1278  0299                     	;# 
  1279  029A                     	;# 
  1280  029B                     	;# 
  1281  029C                     	;# 
  1282  029D                     	;# 
  1283  029E                     	;# 
  1284  0311                     	;# 
  1285  0311                     	;# 
  1286  0312                     	;# 
  1287  0313                     	;# 
  1288  0318                     	;# 
  1289  0318                     	;# 
  1290  0319                     	;# 
  1291  031A                     	;# 
  1292  038C                     	;# 
  1293  038D                     	;# 
  1294  038E                     	;# 
  1295  0391                     	;# 
  1296  0392                     	;# 
  1297  0393                     	;# 
  1298  0394                     	;# 
  1299  0395                     	;# 
  1300  0396                     	;# 
  1301  039A                     	;# 
  1302  039C                     	;# 
  1303  039D                     	;# 
  1304  039E                     	;# 
  1305  039F                     	;# 
  1306  0415                     	;# 
  1307  0416                     	;# 
  1308  0417                     	;# 
  1309  041C                     	;# 
  1310  041D                     	;# 
  1311  041E                     	;# 
  1312  0FE4                     	;# 
  1313  0FE5                     	;# 
  1314  0FE6                     	;# 
  1315  0FE7                     	;# 
  1316  0FE8                     	;# 
  1317  0FE9                     	;# 
  1318  0FEA                     	;# 
  1319  0FEB                     	;# 
  1320  0FED                     	;# 
  1321  0FEE                     	;# 
  1322  0FEF                     	;# 
  1323  0000                     	;# 
  1324  0001                     	;# 
  1325  0002                     	;# 
  1326  0003                     	;# 
  1327  0004                     	;# 
  1328  0005                     	;# 
  1329  0006                     	;# 
  1330  0007                     	;# 
  1331  0008                     	;# 
  1332  0009                     	;# 
  1333  000A                     	;# 
  1334  000B                     	;# 
  1335  000C                     	;# 
  1336  000D                     	;# 
  1337  000E                     	;# 
  1338  0011                     	;# 
  1339  0012                     	;# 
  1340  0013                     	;# 
  1341  0014                     	;# 
  1342  0015                     	;# 
  1343  0016                     	;# 
  1344  0016                     	;# 
  1345  0017                     	;# 
  1346  0018                     	;# 
  1347  0019                     	;# 
  1348  001A                     	;# 
  1349  001B                     	;# 
  1350  001C                     	;# 
  1351  001E                     	;# 
  1352  001F                     	;# 
  1353  008C                     	;# 
  1354  008D                     	;# 
  1355  008E                     	;# 
  1356  0091                     	;# 
  1357  0092                     	;# 
  1358  0093                     	;# 
  1359  0094                     	;# 
  1360  0095                     	;# 
  1361  0096                     	;# 
  1362  0097                     	;# 
  1363  0098                     	;# 
  1364  0099                     	;# 
  1365  009A                     	;# 
  1366  009B                     	;# 
  1367  009B                     	;# 
  1368  009C                     	;# 
  1369  009D                     	;# 
  1370  009E                     	;# 
  1371  010C                     	;# 
  1372  010D                     	;# 
  1373  010E                     	;# 
  1374  0111                     	;# 
  1375  0112                     	;# 
  1376  0113                     	;# 
  1377  0114                     	;# 
  1378  0115                     	;# 
  1379  0116                     	;# 
  1380  0117                     	;# 
  1381  0118                     	;# 
  1382  0119                     	;# 
  1383  011A                     	;# 
  1384  011B                     	;# 
  1385  011D                     	;# 
  1386  011E                     	;# 
  1387  018C                     	;# 
  1388  018D                     	;# 
  1389  018E                     	;# 
  1390  0191                     	;# 
  1391  0191                     	;# 
  1392  0192                     	;# 
  1393  0193                     	;# 
  1394  0193                     	;# 
  1395  0193                     	;# 
  1396  0194                     	;# 
  1397  0195                     	;# 
  1398  0196                     	;# 
  1399  0199                     	;# 
  1400  019A                     	;# 
  1401  019B                     	;# 
  1402  019B                     	;# 
  1403  019B                     	;# 
  1404  019B                     	;# 
  1405  019C                     	;# 
  1406  019C                     	;# 
  1407  019D                     	;# 
  1408  019E                     	;# 
  1409  019F                     	;# 
  1410  020C                     	;# 
  1411  020D                     	;# 
  1412  020E                     	;# 
  1413  0211                     	;# 
  1414  0211                     	;# 
  1415  0212                     	;# 
  1416  0212                     	;# 
  1417  0213                     	;# 
  1418  0213                     	;# 
  1419  0214                     	;# 
  1420  0214                     	;# 
  1421  0215                     	;# 
  1422  0215                     	;# 
  1423  0215                     	;# 
  1424  0216                     	;# 
  1425  0216                     	;# 
  1426  0217                     	;# 
  1427  0217                     	;# 
  1428  0219                     	;# 
  1429  021A                     	;# 
  1430  021B                     	;# 
  1431  021C                     	;# 
  1432  021D                     	;# 
  1433  021E                     	;# 
  1434  021F                     	;# 
  1435  0291                     	;# 
  1436  0291                     	;# 
  1437  0292                     	;# 
  1438  0293                     	;# 
  1439  0294                     	;# 
  1440  0295                     	;# 
  1441  0295                     	;# 
  1442  0296                     	;# 
  1443  0298                     	;# 
  1444  0298                     	;# 
  1445  0299                     	;# 
  1446  029A                     	;# 
  1447  029B                     	;# 
  1448  029C                     	;# 
  1449  029D                     	;# 
  1450  029E                     	;# 
  1451  0311                     	;# 
  1452  0311                     	;# 
  1453  0312                     	;# 
  1454  0313                     	;# 
  1455  0318                     	;# 
  1456  0318                     	;# 
  1457  0319                     	;# 
  1458  031A                     	;# 
  1459  038C                     	;# 
  1460  038D                     	;# 
  1461  038E                     	;# 
  1462  0391                     	;# 
  1463  0392                     	;# 
  1464  0393                     	;# 
  1465  0394                     	;# 
  1466  0395                     	;# 
  1467  0396                     	;# 
  1468  039A                     	;# 
  1469  039C                     	;# 
  1470  039D                     	;# 
  1471  039E                     	;# 
  1472  039F                     	;# 
  1473  0415                     	;# 
  1474  0416                     	;# 
  1475  0417                     	;# 
  1476  041C                     	;# 
  1477  041D                     	;# 
  1478  041E                     	;# 
  1479  0FE4                     	;# 
  1480  0FE5                     	;# 
  1481  0FE6                     	;# 
  1482  0FE7                     	;# 
  1483  0FE8                     	;# 
  1484  0FE9                     	;# 
  1485  0FEA                     	;# 
  1486  0FEB                     	;# 
  1487  0FED                     	;# 
  1488  0FEE                     	;# 
  1489  0FEF                     	;# 
  1490  0000                     	;# 
  1491  0001                     	;# 
  1492  0002                     	;# 
  1493  0003                     	;# 
  1494  0004                     	;# 
  1495  0005                     	;# 
  1496  0006                     	;# 
  1497  0007                     	;# 
  1498  0008                     	;# 
  1499  0009                     	;# 
  1500  000A                     	;# 
  1501  000B                     	;# 
  1502  000C                     	;# 
  1503  000D                     	;# 
  1504  000E                     	;# 
  1505  0011                     	;# 
  1506  0012                     	;# 
  1507  0013                     	;# 
  1508  0014                     	;# 
  1509  0015                     	;# 
  1510  0016                     	;# 
  1511  0016                     	;# 
  1512  0017                     	;# 
  1513  0018                     	;# 
  1514  0019                     	;# 
  1515  001A                     	;# 
  1516  001B                     	;# 
  1517  001C                     	;# 
  1518  001E                     	;# 
  1519  001F                     	;# 
  1520  008C                     	;# 
  1521  008D                     	;# 
  1522  008E                     	;# 
  1523  0091                     	;# 
  1524  0092                     	;# 
  1525  0093                     	;# 
  1526  0094                     	;# 
  1527  0095                     	;# 
  1528  0096                     	;# 
  1529  0097                     	;# 
  1530  0098                     	;# 
  1531  0099                     	;# 
  1532  009A                     	;# 
  1533  009B                     	;# 
  1534  009B                     	;# 
  1535  009C                     	;# 
  1536  009D                     	;# 
  1537  009E                     	;# 
  1538  010C                     	;# 
  1539  010D                     	;# 
  1540  010E                     	;# 
  1541  0111                     	;# 
  1542  0112                     	;# 
  1543  0113                     	;# 
  1544  0114                     	;# 
  1545  0115                     	;# 
  1546  0116                     	;# 
  1547  0117                     	;# 
  1548  0118                     	;# 
  1549  0119                     	;# 
  1550  011A                     	;# 
  1551  011B                     	;# 
  1552  011D                     	;# 
  1553  011E                     	;# 
  1554  018C                     	;# 
  1555  018D                     	;# 
  1556  018E                     	;# 
  1557  0191                     	;# 
  1558  0191                     	;# 
  1559  0192                     	;# 
  1560  0193                     	;# 
  1561  0193                     	;# 
  1562  0193                     	;# 
  1563  0194                     	;# 
  1564  0195                     	;# 
  1565  0196                     	;# 
  1566  0199                     	;# 
  1567  019A                     	;# 
  1568  019B                     	;# 
  1569  019B                     	;# 
  1570  019B                     	;# 
  1571  019B                     	;# 
  1572  019C                     	;# 
  1573  019C                     	;# 
  1574  019D                     	;# 
  1575  019E                     	;# 
  1576  019F                     	;# 
  1577  020C                     	;# 
  1578  020D                     	;# 
  1579  020E                     	;# 
  1580  0211                     	;# 
  1581  0211                     	;# 
  1582  0212                     	;# 
  1583  0212                     	;# 
  1584  0213                     	;# 
  1585  0213                     	;# 
  1586  0214                     	;# 
  1587  0214                     	;# 
  1588  0215                     	;# 
  1589  0215                     	;# 
  1590  0215                     	;# 
  1591  0216                     	;# 
  1592  0216                     	;# 
  1593  0217                     	;# 
  1594  0217                     	;# 
  1595  0219                     	;# 
  1596  021A                     	;# 
  1597  021B                     	;# 
  1598  021C                     	;# 
  1599  021D                     	;# 
  1600  021E                     	;# 
  1601  021F                     	;# 
  1602  0291                     	;# 
  1603  0291                     	;# 
  1604  0292                     	;# 
  1605  0293                     	;# 
  1606  0294                     	;# 
  1607  0295                     	;# 
  1608  0295                     	;# 
  1609  0296                     	;# 
  1610  0298                     	;# 
  1611  0298                     	;# 
  1612  0299                     	;# 
  1613  029A                     	;# 
  1614  029B                     	;# 
  1615  029C                     	;# 
  1616  029D                     	;# 
  1617  029E                     	;# 
  1618  0311                     	;# 
  1619  0311                     	;# 
  1620  0312                     	;# 
  1621  0313                     	;# 
  1622  0318                     	;# 
  1623  0318                     	;# 
  1624  0319                     	;# 
  1625  031A                     	;# 
  1626  038C                     	;# 
  1627  038D                     	;# 
  1628  038E                     	;# 
  1629  0391                     	;# 
  1630  0392                     	;# 
  1631  0393                     	;# 
  1632  0394                     	;# 
  1633  0395                     	;# 
  1634  0396                     	;# 
  1635  039A                     	;# 
  1636  039C                     	;# 
  1637  039D                     	;# 
  1638  039E                     	;# 
  1639  039F                     	;# 
  1640  0415                     	;# 
  1641  0416                     	;# 
  1642  0417                     	;# 
  1643  041C                     	;# 
  1644  041D                     	;# 
  1645  041E                     	;# 
  1646  0FE4                     	;# 
  1647  0FE5                     	;# 
  1648  0FE6                     	;# 
  1649  0FE7                     	;# 
  1650  0FE8                     	;# 
  1651  0FE9                     	;# 
  1652  0FEA                     	;# 
  1653  0FEB                     	;# 
  1654  0FED                     	;# 
  1655  0FEE                     	;# 
  1656  0FEF                     	;# 
  1657  0000                     	;# 
  1658  0001                     	;# 
  1659  0002                     	;# 
  1660  0003                     	;# 
  1661  0004                     	;# 
  1662  0005                     	;# 
  1663  0006                     	;# 
  1664  0007                     	;# 
  1665  0008                     	;# 
  1666  0009                     	;# 
  1667  000A                     	;# 
  1668  000B                     	;# 
  1669  000C                     	;# 
  1670  000D                     	;# 
  1671  000E                     	;# 
  1672  0011                     	;# 
  1673  0012                     	;# 
  1674  0013                     	;# 
  1675  0014                     	;# 
  1676  0015                     	;# 
  1677  0016                     	;# 
  1678  0016                     	;# 
  1679  0017                     	;# 
  1680  0018                     	;# 
  1681  0019                     	;# 
  1682  001A                     	;# 
  1683  001B                     	;# 
  1684  001C                     	;# 
  1685  001E                     	;# 
  1686  001F                     	;# 
  1687  008C                     	;# 
  1688  008D                     	;# 
  1689  008E                     	;# 
  1690  0091                     	;# 
  1691  0092                     	;# 
  1692  0093                     	;# 
  1693  0094                     	;# 
  1694  0095                     	;# 
  1695  0096                     	;# 
  1696  0097                     	;# 
  1697  0098                     	;# 
  1698  0099                     	;# 
  1699  009A                     	;# 
  1700  009B                     	;# 
  1701  009B                     	;# 
  1702  009C                     	;# 
  1703  009D                     	;# 
  1704  009E                     	;# 
  1705  010C                     	;# 
  1706  010D                     	;# 
  1707  010E                     	;# 
  1708  0111                     	;# 
  1709  0112                     	;# 
  1710  0113                     	;# 
  1711  0114                     	;# 
  1712  0115                     	;# 
  1713  0116                     	;# 
  1714  0117                     	;# 
  1715  0118                     	;# 
  1716  0119                     	;# 
  1717  011A                     	;# 
  1718  011B                     	;# 
  1719  011D                     	;# 
  1720  011E                     	;# 
  1721  018C                     	;# 
  1722  018D                     	;# 
  1723  018E                     	;# 
  1724  0191                     	;# 
  1725  0191                     	;# 
  1726  0192                     	;# 
  1727  0193                     	;# 
  1728  0193                     	;# 
  1729  0193                     	;# 
  1730  0194                     	;# 
  1731  0195                     	;# 
  1732  0196                     	;# 
  1733  0199                     	;# 
  1734  019A                     	;# 
  1735  019B                     	;# 
  1736  019B                     	;# 
  1737  019B                     	;# 
  1738  019B                     	;# 
  1739  019C                     	;# 
  1740  019C                     	;# 
  1741  019D                     	;# 
  1742  019E                     	;# 
  1743  019F                     	;# 
  1744  020C                     	;# 
  1745  020D                     	;# 
  1746  020E                     	;# 
  1747  0211                     	;# 
  1748  0211                     	;# 
  1749  0212                     	;# 
  1750  0212                     	;# 
  1751  0213                     	;# 
  1752  0213                     	;# 
  1753  0214                     	;# 
  1754  0214                     	;# 
  1755  0215                     	;# 
  1756  0215                     	;# 
  1757  0215                     	;# 
  1758  0216                     	;# 
  1759  0216                     	;# 
  1760  0217                     	;# 
  1761  0217                     	;# 
  1762  0219                     	;# 
  1763  021A                     	;# 
  1764  021B                     	;# 
  1765  021C                     	;# 
  1766  021D                     	;# 
  1767  021E                     	;# 
  1768  021F                     	;# 
  1769  0291                     	;# 
  1770  0291                     	;# 
  1771  0292                     	;# 
  1772  0293                     	;# 
  1773  0294                     	;# 
  1774  0295                     	;# 
  1775  0295                     	;# 
  1776  0296                     	;# 
  1777  0298                     	;# 
  1778  0298                     	;# 
  1779  0299                     	;# 
  1780  029A                     	;# 
  1781  029B                     	;# 
  1782  029C                     	;# 
  1783  029D                     	;# 
  1784  029E                     	;# 
  1785  0311                     	;# 
  1786  0311                     	;# 
  1787  0312                     	;# 
  1788  0313                     	;# 
  1789  0318                     	;# 
  1790  0318                     	;# 
  1791  0319                     	;# 
  1792  031A                     	;# 
  1793  038C                     	;# 
  1794  038D                     	;# 
  1795  038E                     	;# 
  1796  0391                     	;# 
  1797  0392                     	;# 
  1798  0393                     	;# 
  1799  0394                     	;# 
  1800  0395                     	;# 
  1801  0396                     	;# 
  1802  039A                     	;# 
  1803  039C                     	;# 
  1804  039D                     	;# 
  1805  039E                     	;# 
  1806  039F                     	;# 
  1807  0415                     	;# 
  1808  0416                     	;# 
  1809  0417                     	;# 
  1810  041C                     	;# 
  1811  041D                     	;# 
  1812  041E                     	;# 
  1813  0FE4                     	;# 
  1814  0FE5                     	;# 
  1815  0FE6                     	;# 
  1816  0FE7                     	;# 
  1817  0FE8                     	;# 
  1818  0FE9                     	;# 
  1819  0FEA                     	;# 
  1820  0FEB                     	;# 
  1821  0FED                     	;# 
  1822  0FEE                     	;# 
  1823  0FEF                     	;# 
  1824  0000                     	;# 
  1825  0001                     	;# 
  1826  0002                     	;# 
  1827  0003                     	;# 
  1828  0004                     	;# 
  1829  0005                     	;# 
  1830  0006                     	;# 
  1831  0007                     	;# 
  1832  0008                     	;# 
  1833  0009                     	;# 
  1834  000A                     	;# 
  1835  000B                     	;# 
  1836  000C                     	;# 
  1837  000D                     	;# 
  1838  000E                     	;# 
  1839  0011                     	;# 
  1840  0012                     	;# 
  1841  0013                     	;# 
  1842  0014                     	;# 
  1843  0015                     	;# 
  1844  0016                     	;# 
  1845  0016                     	;# 
  1846  0017                     	;# 
  1847  0018                     	;# 
  1848  0019                     	;# 
  1849  001A                     	;# 
  1850  001B                     	;# 
  1851  001C                     	;# 
  1852  001E                     	;# 
  1853  001F                     	;# 
  1854  008C                     	;# 
  1855  008D                     	;# 
  1856  008E                     	;# 
  1857  0091                     	;# 
  1858  0092                     	;# 
  1859  0093                     	;# 
  1860  0094                     	;# 
  1861  0095                     	;# 
  1862  0096                     	;# 
  1863  0097                     	;# 
  1864  0098                     	;# 
  1865  0099                     	;# 
  1866  009A                     	;# 
  1867  009B                     	;# 
  1868  009B                     	;# 
  1869  009C                     	;# 
  1870  009D                     	;# 
  1871  009E                     	;# 
  1872  010C                     	;# 
  1873  010D                     	;# 
  1874  010E                     	;# 
  1875  0111                     	;# 
  1876  0112                     	;# 
  1877  0113                     	;# 
  1878  0114                     	;# 
  1879  0115                     	;# 
  1880  0116                     	;# 
  1881  0117                     	;# 
  1882  0118                     	;# 
  1883  0119                     	;# 
  1884  011A                     	;# 
  1885  011B                     	;# 
  1886  011D                     	;# 
  1887  011E                     	;# 
  1888  018C                     	;# 
  1889  018D                     	;# 
  1890  018E                     	;# 
  1891  0191                     	;# 
  1892  0191                     	;# 
  1893  0192                     	;# 
  1894  0193                     	;# 
  1895  0193                     	;# 
  1896  0193                     	;# 
  1897  0194                     	;# 
  1898  0195                     	;# 
  1899  0196                     	;# 
  1900  0199                     	;# 
  1901  019A                     	;# 
  1902  019B                     	;# 
  1903  019B                     	;# 
  1904  019B                     	;# 
  1905  019B                     	;# 
  1906  019C                     	;# 
  1907  019C                     	;# 
  1908  019D                     	;# 
  1909  019E                     	;# 
  1910  019F                     	;# 
  1911  020C                     	;# 
  1912  020D                     	;# 
  1913  020E                     	;# 
  1914  0211                     	;# 
  1915  0211                     	;# 
  1916  0212                     	;# 
  1917  0212                     	;# 
  1918  0213                     	;# 
  1919  0213                     	;# 
  1920  0214                     	;# 
  1921  0214                     	;# 
  1922  0215                     	;# 
  1923  0215                     	;# 
  1924  0215                     	;# 
  1925  0216                     	;# 
  1926  0216                     	;# 
  1927  0217                     	;# 
  1928  0217                     	;# 
  1929  0219                     	;# 
  1930  021A                     	;# 
  1931  021B                     	;# 
  1932  021C                     	;# 
  1933  021D                     	;# 
  1934  021E                     	;# 
  1935  021F                     	;# 
  1936  0291                     	;# 
  1937  0291                     	;# 
  1938  0292                     	;# 
  1939  0293                     	;# 
  1940  0294                     	;# 
  1941  0295                     	;# 
  1942  0295                     	;# 
  1943  0296                     	;# 
  1944  0298                     	;# 
  1945  0298                     	;# 
  1946  0299                     	;# 
  1947  029A                     	;# 
  1948  029B                     	;# 
  1949  029C                     	;# 
  1950  029D                     	;# 
  1951  029E                     	;# 
  1952  0311                     	;# 
  1953  0311                     	;# 
  1954  0312                     	;# 
  1955  0313                     	;# 
  1956  0318                     	;# 
  1957  0318                     	;# 
  1958  0319                     	;# 
  1959  031A                     	;# 
  1960  038C                     	;# 
  1961  038D                     	;# 
  1962  038E                     	;# 
  1963  0391                     	;# 
  1964  0392                     	;# 
  1965  0393                     	;# 
  1966  0394                     	;# 
  1967  0395                     	;# 
  1968  0396                     	;# 
  1969  039A                     	;# 
  1970  039C                     	;# 
  1971  039D                     	;# 
  1972  039E                     	;# 
  1973  039F                     	;# 
  1974  0415                     	;# 
  1975  0416                     	;# 
  1976  0417                     	;# 
  1977  041C                     	;# 
  1978  041D                     	;# 
  1979  041E                     	;# 
  1980  0FE4                     	;# 
  1981  0FE5                     	;# 
  1982  0FE6                     	;# 
  1983  0FE7                     	;# 
  1984  0FE8                     	;# 
  1985  0FE9                     	;# 
  1986  0FEA                     	;# 
  1987  0FEB                     	;# 
  1988  0FED                     	;# 
  1989  0FEE                     	;# 
  1990  0FEF                     	;# 
  1991  0000                     	;# 
  1992  0001                     	;# 
  1993  0002                     	;# 
  1994  0003                     	;# 
  1995  0004                     	;# 
  1996  0005                     	;# 
  1997  0006                     	;# 
  1998  0007                     	;# 
  1999  0008                     	;# 
  2000  0009                     	;# 
  2001  000A                     	;# 
  2002  000B                     	;# 
  2003  000C                     	;# 
  2004  000D                     	;# 
  2005  000E                     	;# 
  2006  0011                     	;# 
  2007  0012                     	;# 
  2008  0013                     	;# 
  2009  0014                     	;# 
  2010  0015                     	;# 
  2011  0016                     	;# 
  2012  0016                     	;# 
  2013  0017                     	;# 
  2014  0018                     	;# 
  2015  0019                     	;# 
  2016  001A                     	;# 
  2017  001B                     	;# 
  2018  001C                     	;# 
  2019  001E                     	;# 
  2020  001F                     	;# 
  2021  008C                     	;# 
  2022  008D                     	;# 
  2023  008E                     	;# 
  2024  0091                     	;# 
  2025  0092                     	;# 
  2026  0093                     	;# 
  2027  0094                     	;# 
  2028  0095                     	;# 
  2029  0096                     	;# 
  2030  0097                     	;# 
  2031  0098                     	;# 
  2032  0099                     	;# 
  2033  009A                     	;# 
  2034  009B                     	;# 
  2035  009B                     	;# 
  2036  009C                     	;# 
  2037  009D                     	;# 
  2038  009E                     	;# 
  2039  010C                     	;# 
  2040  010D                     	;# 
  2041  010E                     	;# 
  2042  0111                     	;# 
  2043  0112                     	;# 
  2044  0113                     	;# 
  2045  0114                     	;# 
  2046  0115                     	;# 
  2047  0116                     	;# 
  2048  0117                     	;# 
  2049  0118                     	;# 
  2050  0119                     	;# 
  2051  011A                     	;# 
  2052  011B                     	;# 
  2053  011D                     	;# 
  2054  011E                     	;# 
  2055  018C                     	;# 
  2056  018D                     	;# 
  2057  018E                     	;# 
  2058  0191                     	;# 
  2059  0191                     	;# 
  2060  0192                     	;# 
  2061  0193                     	;# 
  2062  0193                     	;# 
  2063  0193                     	;# 
  2064  0194                     	;# 
  2065  0195                     	;# 
  2066  0196                     	;# 
  2067  0199                     	;# 
  2068  019A                     	;# 
  2069  019B                     	;# 
  2070  019B                     	;# 
  2071  019B                     	;# 
  2072  019B                     	;# 
  2073  019C                     	;# 
  2074  019C                     	;# 
  2075  019D                     	;# 
  2076  019E                     	;# 
  2077  019F                     	;# 
  2078  020C                     	;# 
  2079  020D                     	;# 
  2080  020E                     	;# 
  2081  0211                     	;# 
  2082  0211                     	;# 
  2083  0212                     	;# 
  2084  0212                     	;# 
  2085  0213                     	;# 
  2086  0213                     	;# 
  2087  0214                     	;# 
  2088  0214                     	;# 
  2089  0215                     	;# 
  2090  0215                     	;# 
  2091  0215                     	;# 
  2092  0216                     	;# 
  2093  0216                     	;# 
  2094  0217                     	;# 
  2095  0217                     	;# 
  2096  0219                     	;# 
  2097  021A                     	;# 
  2098  021B                     	;# 
  2099  021C                     	;# 
  2100  021D                     	;# 
  2101  021E                     	;# 
  2102  021F                     	;# 
  2103  0291                     	;# 
  2104  0291                     	;# 
  2105  0292                     	;# 
  2106  0293                     	;# 
  2107  0294                     	;# 
  2108  0295                     	;# 
  2109  0295                     	;# 
  2110  0296                     	;# 
  2111  0298                     	;# 
  2112  0298                     	;# 
  2113  0299                     	;# 
  2114  029A                     	;# 
  2115  029B                     	;# 
  2116  029C                     	;# 
  2117  029D                     	;# 
  2118  029E                     	;# 
  2119  0311                     	;# 
  2120  0311                     	;# 
  2121  0312                     	;# 
  2122  0313                     	;# 
  2123  0318                     	;# 
  2124  0318                     	;# 
  2125  0319                     	;# 
  2126  031A                     	;# 
  2127  038C                     	;# 
  2128  038D                     	;# 
  2129  038E                     	;# 
  2130  0391                     	;# 
  2131  0392                     	;# 
  2132  0393                     	;# 
  2133  0394                     	;# 
  2134  0395                     	;# 
  2135  0396                     	;# 
  2136  039A                     	;# 
  2137  039C                     	;# 
  2138  039D                     	;# 
  2139  039E                     	;# 
  2140  039F                     	;# 
  2141  0415                     	;# 
  2142  0416                     	;# 
  2143  0417                     	;# 
  2144  041C                     	;# 
  2145  041D                     	;# 
  2146  041E                     	;# 
  2147  0FE4                     	;# 
  2148  0FE5                     	;# 
  2149  0FE6                     	;# 
  2150  0FE7                     	;# 
  2151  0FE8                     	;# 
  2152  0FE9                     	;# 
  2153  0FEA                     	;# 
  2154  0FEB                     	;# 
  2155  0FED                     	;# 
  2156  0FEE                     	;# 
  2157  0FEF                     	;# 
  2158  0000                     	;# 
  2159  0001                     	;# 
  2160  0002                     	;# 
  2161  0003                     	;# 
  2162  0004                     	;# 
  2163  0005                     	;# 
  2164  0006                     	;# 
  2165  0007                     	;# 
  2166  0008                     	;# 
  2167  0009                     	;# 
  2168  000A                     	;# 
  2169  000B                     	;# 
  2170  000C                     	;# 
  2171  000D                     	;# 
  2172  000E                     	;# 
  2173  0011                     	;# 
  2174  0012                     	;# 
  2175  0013                     	;# 
  2176  0014                     	;# 
  2177  0015                     	;# 
  2178  0016                     	;# 
  2179  0016                     	;# 
  2180  0017                     	;# 
  2181  0018                     	;# 
  2182  0019                     	;# 
  2183  001A                     	;# 
  2184  001B                     	;# 
  2185  001C                     	;# 
  2186  001E                     	;# 
  2187  001F                     	;# 
  2188  008C                     	;# 
  2189  008D                     	;# 
  2190  008E                     	;# 
  2191  0091                     	;# 
  2192  0092                     	;# 
  2193  0093                     	;# 
  2194  0094                     	;# 
  2195  0095                     	;# 
  2196  0096                     	;# 
  2197  0097                     	;# 
  2198  0098                     	;# 
  2199  0099                     	;# 
  2200  009A                     	;# 
  2201  009B                     	;# 
  2202  009B                     	;# 
  2203  009C                     	;# 
  2204  009D                     	;# 
  2205  009E                     	;# 
  2206  010C                     	;# 
  2207  010D                     	;# 
  2208  010E                     	;# 
  2209  0111                     	;# 
  2210  0112                     	;# 
  2211  0113                     	;# 
  2212  0114                     	;# 
  2213  0115                     	;# 
  2214  0116                     	;# 
  2215  0117                     	;# 
  2216  0118                     	;# 
  2217  0119                     	;# 
  2218  011A                     	;# 
  2219  011B                     	;# 
  2220  011D                     	;# 
  2221  011E                     	;# 
  2222  018C                     	;# 
  2223  018D                     	;# 
  2224  018E                     	;# 
  2225  0191                     	;# 
  2226  0191                     	;# 
  2227  0192                     	;# 
  2228  0193                     	;# 
  2229  0193                     	;# 
  2230  0193                     	;# 
  2231  0194                     	;# 
  2232  0195                     	;# 
  2233  0196                     	;# 
  2234  0199                     	;# 
  2235  019A                     	;# 
  2236  019B                     	;# 
  2237  019B                     	;# 
  2238  019B                     	;# 
  2239  019B                     	;# 
  2240  019C                     	;# 
  2241  019C                     	;# 
  2242  019D                     	;# 
  2243  019E                     	;# 
  2244  019F                     	;# 
  2245  020C                     	;# 
  2246  020D                     	;# 
  2247  020E                     	;# 
  2248  0211                     	;# 
  2249  0211                     	;# 
  2250  0212                     	;# 
  2251  0212                     	;# 
  2252  0213                     	;# 
  2253  0213                     	;# 
  2254  0214                     	;# 
  2255  0214                     	;# 
  2256  0215                     	;# 
  2257  0215                     	;# 
  2258  0215                     	;# 
  2259  0216                     	;# 
  2260  0216                     	;# 
  2261  0217                     	;# 
  2262  0217                     	;# 
  2263  0219                     	;# 
  2264  021A                     	;# 
  2265  021B                     	;# 
  2266  021C                     	;# 
  2267  021D                     	;# 
  2268  021E                     	;# 
  2269  021F                     	;# 
  2270  0291                     	;# 
  2271  0291                     	;# 
  2272  0292                     	;# 
  2273  0293                     	;# 
  2274  0294                     	;# 
  2275  0295                     	;# 
  2276  0295                     	;# 
  2277  0296                     	;# 
  2278  0298                     	;# 
  2279  0298                     	;# 
  2280  0299                     	;# 
  2281  029A                     	;# 
  2282  029B                     	;# 
  2283  029C                     	;# 
  2284  029D                     	;# 
  2285  029E                     	;# 
  2286  0311                     	;# 
  2287  0311                     	;# 
  2288  0312                     	;# 
  2289  0313                     	;# 
  2290  0318                     	;# 
  2291  0318                     	;# 
  2292  0319                     	;# 
  2293  031A                     	;# 
  2294  038C                     	;# 
  2295  038D                     	;# 
  2296  038E                     	;# 
  2297  0391                     	;# 
  2298  0392                     	;# 
  2299  0393                     	;# 
  2300  0394                     	;# 
  2301  0395                     	;# 
  2302  0396                     	;# 
  2303  039A                     	;# 
  2304  039C                     	;# 
  2305  039D                     	;# 
  2306  039E                     	;# 
  2307  039F                     	;# 
  2308  0415                     	;# 
  2309  0416                     	;# 
  2310  0417                     	;# 
  2311  041C                     	;# 
  2312  041D                     	;# 
  2313  041E                     	;# 
  2314  0FE4                     	;# 
  2315  0FE5                     	;# 
  2316  0FE6                     	;# 
  2317  0FE7                     	;# 
  2318  0FE8                     	;# 
  2319  0FE9                     	;# 
  2320  0FEA                     	;# 
  2321  0FEB                     	;# 
  2322  0FED                     	;# 
  2323  0FEE                     	;# 
  2324  0FEF                     	;# 
  2325  0000                     	;# 
  2326  0001                     	;# 
  2327  0002                     	;# 
  2328  0003                     	;# 
  2329  0004                     	;# 
  2330  0005                     	;# 
  2331  0006                     	;# 
  2332  0007                     	;# 
  2333  0008                     	;# 
  2334  0009                     	;# 
  2335  000A                     	;# 
  2336  000B                     	;# 
  2337  000C                     	;# 
  2338  000D                     	;# 
  2339  000E                     	;# 
  2340  0011                     	;# 
  2341  0012                     	;# 
  2342  0013                     	;# 
  2343  0014                     	;# 
  2344  0015                     	;# 
  2345  0016                     	;# 
  2346  0016                     	;# 
  2347  0017                     	;# 
  2348  0018                     	;# 
  2349  0019                     	;# 
  2350  001A                     	;# 
  2351  001B                     	;# 
  2352  001C                     	;# 
  2353  001E                     	;# 
  2354  001F                     	;# 
  2355  008C                     	;# 
  2356  008D                     	;# 
  2357  008E                     	;# 
  2358  0091                     	;# 
  2359  0092                     	;# 
  2360  0093                     	;# 
  2361  0094                     	;# 
  2362  0095                     	;# 
  2363  0096                     	;# 
  2364  0097                     	;# 
  2365  0098                     	;# 
  2366  0099                     	;# 
  2367  009A                     	;# 
  2368  009B                     	;# 
  2369  009B                     	;# 
  2370  009C                     	;# 
  2371  009D                     	;# 
  2372  009E                     	;# 
  2373  010C                     	;# 
  2374  010D                     	;# 
  2375  010E                     	;# 
  2376  0111                     	;# 
  2377  0112                     	;# 
  2378  0113                     	;# 
  2379  0114                     	;# 
  2380  0115                     	;# 
  2381  0116                     	;# 
  2382  0117                     	;# 
  2383  0118                     	;# 
  2384  0119                     	;# 
  2385  011A                     	;# 
  2386  011B                     	;# 
  2387  011D                     	;# 
  2388  011E                     	;# 
  2389  018C                     	;# 
  2390  018D                     	;# 
  2391  018E                     	;# 
  2392  0191                     	;# 
  2393  0191                     	;# 
  2394  0192                     	;# 
  2395  0193                     	;# 
  2396  0193                     	;# 
  2397  0193                     	;# 
  2398  0194                     	;# 
  2399  0195                     	;# 
  2400  0196                     	;# 
  2401  0199                     	;# 
  2402  019A                     	;# 
  2403  019B                     	;# 
  2404  019B                     	;# 
  2405  019B                     	;# 
  2406  019B                     	;# 
  2407  019C                     	;# 
  2408  019C                     	;# 
  2409  019D                     	;# 
  2410  019E                     	;# 
  2411  019F                     	;# 
  2412  020C                     	;# 
  2413  020D                     	;# 
  2414  020E                     	;# 
  2415  0211                     	;# 
  2416  0211                     	;# 
  2417  0212                     	;# 
  2418  0212                     	;# 
  2419  0213                     	;# 
  2420  0213                     	;# 
  2421  0214                     	;# 
  2422  0214                     	;# 
  2423  0215                     	;# 
  2424  0215                     	;# 
  2425  0215                     	;# 
  2426  0216                     	;# 
  2427  0216                     	;# 
  2428  0217                     	;# 
  2429  0217                     	;# 
  2430  0219                     	;# 
  2431  021A                     	;# 
  2432  021B                     	;# 
  2433  021C                     	;# 
  2434  021D                     	;# 
  2435  021E                     	;# 
  2436  021F                     	;# 
  2437  0291                     	;# 
  2438  0291                     	;# 
  2439  0292                     	;# 
  2440  0293                     	;# 
  2441  0294                     	;# 
  2442  0295                     	;# 
  2443  0295                     	;# 
  2444  0296                     	;# 
  2445  0298                     	;# 
  2446  0298                     	;# 
  2447  0299                     	;# 
  2448  029A                     	;# 
  2449  029B                     	;# 
  2450  029C                     	;# 
  2451  029D                     	;# 
  2452  029E                     	;# 
  2453  0311                     	;# 
  2454  0311                     	;# 
  2455  0312                     	;# 
  2456  0313                     	;# 
  2457  0318                     	;# 
  2458  0318                     	;# 
  2459  0319                     	;# 
  2460  031A                     	;# 
  2461  038C                     	;# 
  2462  038D                     	;# 
  2463  038E                     	;# 
  2464  0391                     	;# 
  2465  0392                     	;# 
  2466  0393                     	;# 
  2467  0394                     	;# 
  2468  0395                     	;# 
  2469  0396                     	;# 
  2470  039A                     	;# 
  2471  039C                     	;# 
  2472  039D                     	;# 
  2473  039E                     	;# 
  2474  039F                     	;# 
  2475  0415                     	;# 
  2476  0416                     	;# 
  2477  0417                     	;# 
  2478  041C                     	;# 
  2479  041D                     	;# 
  2480  041E                     	;# 
  2481  0FE4                     	;# 
  2482  0FE5                     	;# 
  2483  0FE6                     	;# 
  2484  0FE7                     	;# 
  2485  0FE8                     	;# 
  2486  0FE9                     	;# 
  2487  0FEA                     	;# 
  2488  0FEB                     	;# 
  2489  0FED                     	;# 
  2490  0FEE                     	;# 
  2491  0FEF                     	;# 
  2492  0000                     	;# 
  2493  0001                     	;# 
  2494  0002                     	;# 
  2495  0003                     	;# 
  2496  0004                     	;# 
  2497  0005                     	;# 
  2498  0006                     	;# 
  2499  0007                     	;# 
  2500  0008                     	;# 
  2501  0009                     	;# 
  2502  000A                     	;# 
  2503  000B                     	;# 
  2504  000C                     	;# 
  2505  000D                     	;# 
  2506  000E                     	;# 
  2507  0011                     	;# 
  2508  0012                     	;# 
  2509  0013                     	;# 
  2510  0014                     	;# 
  2511  0015                     	;# 
  2512  0016                     	;# 
  2513  0016                     	;# 
  2514  0017                     	;# 
  2515  0018                     	;# 
  2516  0019                     	;# 
  2517  001A                     	;# 
  2518  001B                     	;# 
  2519  001C                     	;# 
  2520  001E                     	;# 
  2521  001F                     	;# 
  2522  008C                     	;# 
  2523  008D                     	;# 
  2524  008E                     	;# 
  2525  0091                     	;# 
  2526  0092                     	;# 
  2527  0093                     	;# 
  2528  0094                     	;# 
  2529  0095                     	;# 
  2530  0096                     	;# 
  2531  0097                     	;# 
  2532  0098                     	;# 
  2533  0099                     	;# 
  2534  009A                     	;# 
  2535  009B                     	;# 
  2536  009B                     	;# 
  2537  009C                     	;# 
  2538  009D                     	;# 
  2539  009E                     	;# 
  2540  010C                     	;# 
  2541  010D                     	;# 
  2542  010E                     	;# 
  2543  0111                     	;# 
  2544  0112                     	;# 
  2545  0113                     	;# 
  2546  0114                     	;# 
  2547  0115                     	;# 
  2548  0116                     	;# 
  2549  0117                     	;# 
  2550  0118                     	;# 
  2551  0119                     	;# 
  2552  011A                     	;# 
  2553  011B                     	;# 
  2554  011D                     	;# 
  2555  011E                     	;# 
  2556  018C                     	;# 
  2557  018D                     	;# 
  2558  018E                     	;# 
  2559  0191                     	;# 
  2560  0191                     	;# 
  2561  0192                     	;# 
  2562  0193                     	;# 
  2563  0193                     	;# 
  2564  0193                     	;# 
  2565  0194                     	;# 
  2566  0195                     	;# 
  2567  0196                     	;# 
  2568  0199                     	;# 
  2569  019A                     	;# 
  2570  019B                     	;# 
  2571  019B                     	;# 
  2572  019B                     	;# 
  2573  019B                     	;# 
  2574  019C                     	;# 
  2575  019C                     	;# 
  2576  019D                     	;# 
  2577  019E                     	;# 
  2578  019F                     	;# 
  2579  020C                     	;# 
  2580  020D                     	;# 
  2581  020E                     	;# 
  2582  0211                     	;# 
  2583  0211                     	;# 
  2584  0212                     	;# 
  2585  0212                     	;# 
  2586  0213                     	;# 
  2587  0213                     	;# 
  2588  0214                     	;# 
  2589  0214                     	;# 
  2590  0215                     	;# 
  2591  0215                     	;# 
  2592  0215                     	;# 
  2593  0216                     	;# 
  2594  0216                     	;# 
  2595  0217                     	;# 
  2596  0217                     	;# 
  2597  0219                     	;# 
  2598  021A                     	;# 
  2599  021B                     	;# 
  2600  021C                     	;# 
  2601  021D                     	;# 
  2602  021E                     	;# 
  2603  021F                     	;# 
  2604  0291                     	;# 
  2605  0291                     	;# 
  2606  0292                     	;# 
  2607  0293                     	;# 
  2608  0294                     	;# 
  2609  0295                     	;# 
  2610  0295                     	;# 
  2611  0296                     	;# 
  2612  0298                     	;# 
  2613  0298                     	;# 
  2614  0299                     	;# 
  2615  029A                     	;# 
  2616  029B                     	;# 
  2617  029C                     	;# 
  2618  029D                     	;# 
  2619  029E                     	;# 
  2620  0311                     	;# 
  2621  0311                     	;# 
  2622  0312                     	;# 
  2623  0313                     	;# 
  2624  0318                     	;# 
  2625  0318                     	;# 
  2626  0319                     	;# 
  2627  031A                     	;# 
  2628  038C                     	;# 
  2629  038D                     	;# 
  2630  038E                     	;# 
  2631  0391                     	;# 
  2632  0392                     	;# 
  2633  0393                     	;# 
  2634  0394                     	;# 
  2635  0395                     	;# 
  2636  0396                     	;# 
  2637  039A                     	;# 
  2638  039C                     	;# 
  2639  039D                     	;# 
  2640  039E                     	;# 
  2641  039F                     	;# 
  2642  0415                     	;# 
  2643  0416                     	;# 
  2644  0417                     	;# 
  2645  041C                     	;# 
  2646  041D                     	;# 
  2647  041E                     	;# 
  2648  0FE4                     	;# 
  2649  0FE5                     	;# 
  2650  0FE6                     	;# 
  2651  0FE7                     	;# 
  2652  0FE8                     	;# 
  2653  0FE9                     	;# 
  2654  0FEA                     	;# 
  2655  0FEB                     	;# 
  2656  0FED                     	;# 
  2657  0FEE                     	;# 
  2658  0FEF                     	;# 
  2659  0000                     	;# 
  2660  0001                     	;# 
  2661  0002                     	;# 
  2662  0003                     	;# 
  2663  0004                     	;# 
  2664  0005                     	;# 
  2665  0006                     	;# 
  2666  0007                     	;# 
  2667  0008                     	;# 
  2668  0009                     	;# 
  2669  000A                     	;# 
  2670  000B                     	;# 
  2671  000C                     	;# 
  2672  000D                     	;# 
  2673  000E                     	;# 
  2674  0011                     	;# 
  2675  0012                     	;# 
  2676  0013                     	;# 
  2677  0014                     	;# 
  2678  0015                     	;# 
  2679  0016                     	;# 
  2680  0016                     	;# 
  2681  0017                     	;# 
  2682  0018                     	;# 
  2683  0019                     	;# 
  2684  001A                     	;# 
  2685  001B                     	;# 
  2686  001C                     	;# 
  2687  001E                     	;# 
  2688  001F                     	;# 
  2689  008C                     	;# 
  2690  008D                     	;# 
  2691  008E                     	;# 
  2692  0091                     	;# 
  2693  0092                     	;# 
  2694  0093                     	;# 
  2695  0094                     	;# 
  2696  0095                     	;# 
  2697  0096                     	;# 
  2698  0097                     	;# 
  2699  0098                     	;# 
  2700  0099                     	;# 
  2701  009A                     	;# 
  2702  009B                     	;# 
  2703  009B                     	;# 
  2704  009C                     	;# 
  2705  009D                     	;# 
  2706  009E                     	;# 
  2707  010C                     	;# 
  2708  010D                     	;# 
  2709  010E                     	;# 
  2710  0111                     	;# 
  2711  0112                     	;# 
  2712  0113                     	;# 
  2713  0114                     	;# 
  2714  0115                     	;# 
  2715  0116                     	;# 
  2716  0117                     	;# 
  2717  0118                     	;# 
  2718  0119                     	;# 
  2719  011A                     	;# 
  2720  011B                     	;# 
  2721  011D                     	;# 
  2722  011E                     	;# 
  2723  018C                     	;# 
  2724  018D                     	;# 
  2725  018E                     	;# 
  2726  0191                     	;# 
  2727  0191                     	;# 
  2728  0192                     	;# 
  2729  0193                     	;# 
  2730  0193                     	;# 
  2731  0193                     	;# 
  2732  0194                     	;# 
  2733  0195                     	;# 
  2734  0196                     	;# 
  2735  0199                     	;# 
  2736  019A                     	;# 
  2737  019B                     	;# 
  2738  019B                     	;# 
  2739  019B                     	;# 
  2740  019B                     	;# 
  2741  019C                     	;# 
  2742  019C                     	;# 
  2743  019D                     	;# 
  2744  019E                     	;# 
  2745  019F                     	;# 
  2746  020C                     	;# 
  2747  020D                     	;# 
  2748  020E                     	;# 
  2749  0211                     	;# 
  2750  0211                     	;# 
  2751  0212                     	;# 
  2752  0212                     	;# 
  2753  0213                     	;# 
  2754  0213                     	;# 
  2755  0214                     	;# 
  2756  0214                     	;# 
  2757  0215                     	;# 
  2758  0215                     	;# 
  2759  0215                     	;# 
  2760  0216                     	;# 
  2761  0216                     	;# 
  2762  0217                     	;# 
  2763  0217                     	;# 
  2764  0219                     	;# 
  2765  021A                     	;# 
  2766  021B                     	;# 
  2767  021C                     	;# 
  2768  021D                     	;# 
  2769  021E                     	;# 
  2770  021F                     	;# 
  2771  0291                     	;# 
  2772  0291                     	;# 
  2773  0292                     	;# 
  2774  0293                     	;# 
  2775  0294                     	;# 
  2776  0295                     	;# 
  2777  0295                     	;# 
  2778  0296                     	;# 
  2779  0298                     	;# 
  2780  0298                     	;# 
  2781  0299                     	;# 
  2782  029A                     	;# 
  2783  029B                     	;# 
  2784  029C                     	;# 
  2785  029D                     	;# 
  2786  029E                     	;# 
  2787  0311                     	;# 
  2788  0311                     	;# 
  2789  0312                     	;# 
  2790  0313                     	;# 
  2791  0318                     	;# 
  2792  0318                     	;# 
  2793  0319                     	;# 
  2794  031A                     	;# 
  2795  038C                     	;# 
  2796  038D                     	;# 
  2797  038E                     	;# 
  2798  0391                     	;# 
  2799  0392                     	;# 
  2800  0393                     	;# 
  2801  0394                     	;# 
  2802  0395                     	;# 
  2803  0396                     	;# 
  2804  039A                     	;# 
  2805  039C                     	;# 
  2806  039D                     	;# 
  2807  039E                     	;# 
  2808  039F                     	;# 
  2809  0415                     	;# 
  2810  0416                     	;# 
  2811  0417                     	;# 
  2812  041C                     	;# 
  2813  041D                     	;# 
  2814  041E                     	;# 
  2815  0FE4                     	;# 
  2816  0FE5                     	;# 
  2817  0FE6                     	;# 
  2818  0FE7                     	;# 
  2819  0FE8                     	;# 
  2820  0FE9                     	;# 
  2821  0FEA                     	;# 
  2822  0FEB                     	;# 
  2823  0FED                     	;# 
  2824  0FEE                     	;# 
  2825  0FEF                     	;# 
  2826  0000                     	;# 
  2827  0001                     	;# 
  2828  0002                     	;# 
  2829  0003                     	;# 
  2830  0004                     	;# 
  2831  0005                     	;# 
  2832  0006                     	;# 
  2833  0007                     	;# 
  2834  0008                     	;# 
  2835  0009                     	;# 
  2836  000A                     	;# 
  2837  000B                     	;# 
  2838  000C                     	;# 
  2839  000D                     	;# 
  2840  000E                     	;# 
  2841  0011                     	;# 
  2842  0012                     	;# 
  2843  0013                     	;# 
  2844  0014                     	;# 
  2845  0015                     	;# 
  2846  0016                     	;# 
  2847  0016                     	;# 
  2848  0017                     	;# 
  2849  0018                     	;# 
  2850  0019                     	;# 
  2851  001A                     	;# 
  2852  001B                     	;# 
  2853  001C                     	;# 
  2854  001E                     	;# 
  2855  001F                     	;# 
  2856  008C                     	;# 
  2857  008D                     	;# 
  2858  008E                     	;# 
  2859  0091                     	;# 
  2860  0092                     	;# 
  2861  0093                     	;# 
  2862  0094                     	;# 
  2863  0095                     	;# 
  2864  0096                     	;# 
  2865  0097                     	;# 
  2866  0098                     	;# 
  2867  0099                     	;# 
  2868  009A                     	;# 
  2869  009B                     	;# 
  2870  009B                     	;# 
  2871  009C                     	;# 
  2872  009D                     	;# 
  2873  009E                     	;# 
  2874  010C                     	;# 
  2875  010D                     	;# 
  2876  010E                     	;# 
  2877  0111                     	;# 
  2878  0112                     	;# 
  2879  0113                     	;# 
  2880  0114                     	;# 
  2881  0115                     	;# 
  2882  0116                     	;# 
  2883  0117                     	;# 
  2884  0118                     	;# 
  2885  0119                     	;# 
  2886  011A                     	;# 
  2887  011B                     	;# 
  2888  011D                     	;# 
  2889  011E                     	;# 
  2890  018C                     	;# 
  2891  018D                     	;# 
  2892  018E                     	;# 
  2893  0191                     	;# 
  2894  0191                     	;# 
  2895  0192                     	;# 
  2896  0193                     	;# 
  2897  0193                     	;# 
  2898  0193                     	;# 
  2899  0194                     	;# 
  2900  0195                     	;# 
  2901  0196                     	;# 
  2902  0199                     	;# 
  2903  019A                     	;# 
  2904  019B                     	;# 
  2905  019B                     	;# 
  2906  019B                     	;# 
  2907  019B                     	;# 
  2908  019C                     	;# 
  2909  019C                     	;# 
  2910  019D                     	;# 
  2911  019E                     	;# 
  2912  019F                     	;# 
  2913  020C                     	;# 
  2914  020D                     	;# 
  2915  020E                     	;# 
  2916  0211                     	;# 
  2917  0211                     	;# 
  2918  0212                     	;# 
  2919  0212                     	;# 
  2920  0213                     	;# 
  2921  0213                     	;# 
  2922  0214                     	;# 
  2923  0214                     	;# 
  2924  0215                     	;# 
  2925  0215                     	;# 
  2926  0215                     	;# 
  2927  0216                     	;# 
  2928  0216                     	;# 
  2929  0217                     	;# 
  2930  0217                     	;# 
  2931  0219                     	;# 
  2932  021A                     	;# 
  2933  021B                     	;# 
  2934  021C                     	;# 
  2935  021D                     	;# 
  2936  021E                     	;# 
  2937  021F                     	;# 
  2938  0291                     	;# 
  2939  0291                     	;# 
  2940  0292                     	;# 
  2941  0293                     	;# 
  2942  0294                     	;# 
  2943  0295                     	;# 
  2944  0295                     	;# 
  2945  0296                     	;# 
  2946  0298                     	;# 
  2947  0298                     	;# 
  2948  0299                     	;# 
  2949  029A                     	;# 
  2950  029B                     	;# 
  2951  029C                     	;# 
  2952  029D                     	;# 
  2953  029E                     	;# 
  2954  0311                     	;# 
  2955  0311                     	;# 
  2956  0312                     	;# 
  2957  0313                     	;# 
  2958  0318                     	;# 
  2959  0318                     	;# 
  2960  0319                     	;# 
  2961  031A                     	;# 
  2962  038C                     	;# 
  2963  038D                     	;# 
  2964  038E                     	;# 
  2965  0391                     	;# 
  2966  0392                     	;# 
  2967  0393                     	;# 
  2968  0394                     	;# 
  2969  0395                     	;# 
  2970  0396                     	;# 
  2971  039A                     	;# 
  2972  039C                     	;# 
  2973  039D                     	;# 
  2974  039E                     	;# 
  2975  039F                     	;# 
  2976  0415                     	;# 
  2977  0416                     	;# 
  2978  0417                     	;# 
  2979  041C                     	;# 
  2980  041D                     	;# 
  2981  041E                     	;# 
  2982  0FE4                     	;# 
  2983  0FE5                     	;# 
  2984  0FE6                     	;# 
  2985  0FE7                     	;# 
  2986  0FE8                     	;# 
  2987  0FE9                     	;# 
  2988  0FEA                     	;# 
  2989  0FEB                     	;# 
  2990  0FED                     	;# 
  2991  0FEE                     	;# 
  2992  0FEF                     	;# 
  2993  0000                     	;# 
  2994  0001                     	;# 
  2995  0002                     	;# 
  2996  0003                     	;# 
  2997  0004                     	;# 
  2998  0005                     	;# 
  2999  0006                     	;# 
  3000  0007                     	;# 
  3001  0008                     	;# 
  3002  0009                     	;# 
  3003  000A                     	;# 
  3004  000B                     	;# 
  3005  000C                     	;# 
  3006  000D                     	;# 
  3007  000E                     	;# 
  3008  0011                     	;# 
  3009  0012                     	;# 
  3010  0013                     	;# 
  3011  0014                     	;# 
  3012  0015                     	;# 
  3013  0016                     	;# 
  3014  0016                     	;# 
  3015  0017                     	;# 
  3016  0018                     	;# 
  3017  0019                     	;# 
  3018  001A                     	;# 
  3019  001B                     	;# 
  3020  001C                     	;# 
  3021  001E                     	;# 
  3022  001F                     	;# 
  3023  008C                     	;# 
  3024  008D                     	;# 
  3025  008E                     	;# 
  3026  0091                     	;# 
  3027  0092                     	;# 
  3028  0093                     	;# 
  3029  0094                     	;# 
  3030  0095                     	;# 
  3031  0096                     	;# 
  3032  0097                     	;# 
  3033  0098                     	;# 
  3034  0099                     	;# 
  3035  009A                     	;# 
  3036  009B                     	;# 
  3037  009B                     	;# 
  3038  009C                     	;# 
  3039  009D                     	;# 
  3040  009E                     	;# 
  3041  010C                     	;# 
  3042  010D                     	;# 
  3043  010E                     	;# 
  3044  0111                     	;# 
  3045  0112                     	;# 
  3046  0113                     	;# 
  3047  0114                     	;# 
  3048  0115                     	;# 
  3049  0116                     	;# 
  3050  0117                     	;# 
  3051  0118                     	;# 
  3052  0119                     	;# 
  3053  011A                     	;# 
  3054  011B                     	;# 
  3055  011D                     	;# 
  3056  011E                     	;# 
  3057  018C                     	;# 
  3058  018D                     	;# 
  3059  018E                     	;# 
  3060  0191                     	;# 
  3061  0191                     	;# 
  3062  0192                     	;# 
  3063  0193                     	;# 
  3064  0193                     	;# 
  3065  0193                     	;# 
  3066  0194                     	;# 
  3067  0195                     	;# 
  3068  0196                     	;# 
  3069  0199                     	;# 
  3070  019A                     	;# 
  3071  019B                     	;# 
  3072  019B                     	;# 
  3073  019B                     	;# 
  3074  019B                     	;# 
  3075  019C                     	;# 
  3076  019C                     	;# 
  3077  019D                     	;# 
  3078  019E                     	;# 
  3079  019F                     	;# 
  3080  020C                     	;# 
  3081  020D                     	;# 
  3082  020E                     	;# 
  3083  0211                     	;# 
  3084  0211                     	;# 
  3085  0212                     	;# 
  3086  0212                     	;# 
  3087  0213                     	;# 
  3088  0213                     	;# 
  3089  0214                     	;# 
  3090  0214                     	;# 
  3091  0215                     	;# 
  3092  0215                     	;# 
  3093  0215                     	;# 
  3094  0216                     	;# 
  3095  0216                     	;# 
  3096  0217                     	;# 
  3097  0217                     	;# 
  3098  0219                     	;# 
  3099  021A                     	;# 
  3100  021B                     	;# 
  3101  021C                     	;# 
  3102  021D                     	;# 
  3103  021E                     	;# 
  3104  021F                     	;# 
  3105  0291                     	;# 
  3106  0291                     	;# 
  3107  0292                     	;# 
  3108  0293                     	;# 
  3109  0294                     	;# 
  3110  0295                     	;# 
  3111  0295                     	;# 
  3112  0296                     	;# 
  3113  0298                     	;# 
  3114  0298                     	;# 
  3115  0299                     	;# 
  3116  029A                     	;# 
  3117  029B                     	;# 
  3118  029C                     	;# 
  3119  029D                     	;# 
  3120  029E                     	;# 
  3121  0311                     	;# 
  3122  0311                     	;# 
  3123  0312                     	;# 
  3124  0313                     	;# 
  3125  0318                     	;# 
  3126  0318                     	;# 
  3127  0319                     	;# 
  3128  031A                     	;# 
  3129  038C                     	;# 
  3130  038D                     	;# 
  3131  038E                     	;# 
  3132  0391                     	;# 
  3133  0392                     	;# 
  3134  0393                     	;# 
  3135  0394                     	;# 
  3136  0395                     	;# 
  3137  0396                     	;# 
  3138  039A                     	;# 
  3139  039C                     	;# 
  3140  039D                     	;# 
  3141  039E                     	;# 
  3142  039F                     	;# 
  3143  0415                     	;# 
  3144  0416                     	;# 
  3145  0417                     	;# 
  3146  041C                     	;# 
  3147  041D                     	;# 
  3148  041E                     	;# 
  3149  0FE4                     	;# 
  3150  0FE5                     	;# 
  3151  0FE6                     	;# 
  3152  0FE7                     	;# 
  3153  0FE8                     	;# 
  3154  0FE9                     	;# 
  3155  0FEA                     	;# 
  3156  0FEB                     	;# 
  3157  0FED                     	;# 
  3158  0FEE                     	;# 
  3159  0FEF                     	;# 
  3160  0000                     	;# 
  3161  0001                     	;# 
  3162  0002                     	;# 
  3163  0003                     	;# 
  3164  0004                     	;# 
  3165  0005                     	;# 
  3166  0006                     	;# 
  3167  0007                     	;# 
  3168  0008                     	;# 
  3169  0009                     	;# 
  3170  000A                     	;# 
  3171  000B                     	;# 
  3172  000C                     	;# 
  3173  000D                     	;# 
  3174  000E                     	;# 
  3175  0011                     	;# 
  3176  0012                     	;# 
  3177  0013                     	;# 
  3178  0014                     	;# 
  3179  0015                     	;# 
  3180  0016                     	;# 
  3181  0016                     	;# 
  3182  0017                     	;# 
  3183  0018                     	;# 
  3184  0019                     	;# 
  3185  001A                     	;# 
  3186  001B                     	;# 
  3187  001C                     	;# 
  3188  001E                     	;# 
  3189  001F                     	;# 
  3190  008C                     	;# 
  3191  008D                     	;# 
  3192  008E                     	;# 
  3193  0091                     	;# 
  3194  0092                     	;# 
  3195  0093                     	;# 
  3196  0094                     	;# 
  3197  0095                     	;# 
  3198  0096                     	;# 
  3199  0097                     	;# 
  3200  0098                     	;# 
  3201  0099                     	;# 
  3202  009A                     	;# 
  3203  009B                     	;# 
  3204  009B                     	;# 
  3205  009C                     	;# 
  3206  009D                     	;# 
  3207  009E                     	;# 
  3208  010C                     	;# 
  3209  010D                     	;# 
  3210  010E                     	;# 
  3211  0111                     	;# 
  3212  0112                     	;# 
  3213  0113                     	;# 
  3214  0114                     	;# 
  3215  0115                     	;# 
  3216  0116                     	;# 
  3217  0117                     	;# 
  3218  0118                     	;# 
  3219  0119                     	;# 
  3220  011A                     	;# 
  3221  011B                     	;# 
  3222  011D                     	;# 
  3223  011E                     	;# 
  3224  018C                     	;# 
  3225  018D                     	;# 
  3226  018E                     	;# 
  3227  0191                     	;# 
  3228  0191                     	;# 
  3229  0192                     	;# 
  3230  0193                     	;# 
  3231  0193                     	;# 
  3232  0193                     	;# 
  3233  0194                     	;# 
  3234  0195                     	;# 
  3235  0196                     	;# 
  3236  0199                     	;# 
  3237  019A                     	;# 
  3238  019B                     	;# 
  3239  019B                     	;# 
  3240  019B                     	;# 
  3241  019B                     	;# 
  3242  019C                     	;# 
  3243  019C                     	;# 
  3244  019D                     	;# 
  3245  019E                     	;# 
  3246  019F                     	;# 
  3247  020C                     	;# 
  3248  020D                     	;# 
  3249  020E                     	;# 
  3250  0211                     	;# 
  3251  0211                     	;# 
  3252  0212                     	;# 
  3253  0212                     	;# 
  3254  0213                     	;# 
  3255  0213                     	;# 
  3256  0214                     	;# 
  3257  0214                     	;# 
  3258  0215                     	;# 
  3259  0215                     	;# 
  3260  0215                     	;# 
  3261  0216                     	;# 
  3262  0216                     	;# 
  3263  0217                     	;# 
  3264  0217                     	;# 
  3265  0219                     	;# 
  3266  021A                     	;# 
  3267  021B                     	;# 
  3268  021C                     	;# 
  3269  021D                     	;# 
  3270  021E                     	;# 
  3271  021F                     	;# 
  3272  0291                     	;# 
  3273  0291                     	;# 
  3274  0292                     	;# 
  3275  0293                     	;# 
  3276  0294                     	;# 
  3277  0295                     	;# 
  3278  0295                     	;# 
  3279  0296                     	;# 
  3280  0298                     	;# 
  3281  0298                     	;# 
  3282  0299                     	;# 
  3283  029A                     	;# 
  3284  029B                     	;# 
  3285  029C                     	;# 
  3286  029D                     	;# 
  3287  029E                     	;# 
  3288  0311                     	;# 
  3289  0311                     	;# 
  3290  0312                     	;# 
  3291  0313                     	;# 
  3292  0318                     	;# 
  3293  0318                     	;# 
  3294  0319                     	;# 
  3295  031A                     	;# 
  3296  038C                     	;# 
  3297  038D                     	;# 
  3298  038E                     	;# 
  3299  0391                     	;# 
  3300  0392                     	;# 
  3301  0393                     	;# 
  3302  0394                     	;# 
  3303  0395                     	;# 
  3304  0396                     	;# 
  3305  039A                     	;# 
  3306  039C                     	;# 
  3307  039D                     	;# 
  3308  039E                     	;# 
  3309  039F                     	;# 
  3310  0415                     	;# 
  3311  0416                     	;# 
  3312  0417                     	;# 
  3313  041C                     	;# 
  3314  041D                     	;# 
  3315  041E                     	;# 
  3316  0FE4                     	;# 
  3317  0FE5                     	;# 
  3318  0FE6                     	;# 
  3319  0FE7                     	;# 
  3320  0FE8                     	;# 
  3321  0FE9                     	;# 
  3322  0FEA                     	;# 
  3323  0FEB                     	;# 
  3324  0FED                     	;# 
  3325  0FEE                     	;# 
  3326  0FEF                     	;# 
  3327  0000                     	;# 
  3328  0001                     	;# 
  3329  0002                     	;# 
  3330  0003                     	;# 
  3331  0004                     	;# 
  3332  0005                     	;# 
  3333  0006                     	;# 
  3334  0007                     	;# 
  3335  0008                     	;# 
  3336  0009                     	;# 
  3337  000A                     	;# 
  3338  000B                     	;# 
  3339  000C                     	;# 
  3340  000D                     	;# 
  3341  000E                     	;# 
  3342  0011                     	;# 
  3343  0012                     	;# 
  3344  0013                     	;# 
  3345  0014                     	;# 
  3346  0015                     	;# 
  3347  0016                     	;# 
  3348  0016                     	;# 
  3349  0017                     	;# 
  3350  0018                     	;# 
  3351  0019                     	;# 
  3352  001A                     	;# 
  3353  001B                     	;# 
  3354  001C                     	;# 
  3355  001E                     	;# 
  3356  001F                     	;# 
  3357  008C                     	;# 
  3358  008D                     	;# 
  3359  008E                     	;# 
  3360  0091                     	;# 
  3361  0092                     	;# 
  3362  0093                     	;# 
  3363  0094                     	;# 
  3364  0095                     	;# 
  3365  0096                     	;# 
  3366  0097                     	;# 
  3367  0098                     	;# 
  3368  0099                     	;# 
  3369  009A                     	;# 
  3370  009B                     	;# 
  3371  009B                     	;# 
  3372  009C                     	;# 
  3373  009D                     	;# 
  3374  009E                     	;# 
  3375  010C                     	;# 
  3376  010D                     	;# 
  3377  010E                     	;# 
  3378  0111                     	;# 
  3379  0112                     	;# 
  3380  0113                     	;# 
  3381  0114                     	;# 
  3382  0115                     	;# 
  3383  0116                     	;# 
  3384  0117                     	;# 
  3385  0118                     	;# 
  3386  0119                     	;# 
  3387  011A                     	;# 
  3388  011B                     	;# 
  3389  011D                     	;# 
  3390  011E                     	;# 
  3391  018C                     	;# 
  3392  018D                     	;# 
  3393  018E                     	;# 
  3394  0191                     	;# 
  3395  0191                     	;# 
  3396  0192                     	;# 
  3397  0193                     	;# 
  3398  0193                     	;# 
  3399  0193                     	;# 
  3400  0194                     	;# 
  3401  0195                     	;# 
  3402  0196                     	;# 
  3403  0199                     	;# 
  3404  019A                     	;# 
  3405  019B                     	;# 
  3406  019B                     	;# 
  3407  019B                     	;# 
  3408  019B                     	;# 
  3409  019C                     	;# 
  3410  019C                     	;# 
  3411  019D                     	;# 
  3412  019E                     	;# 
  3413  019F                     	;# 
  3414  020C                     	;# 
  3415  020D                     	;# 
  3416  020E                     	;# 
  3417  0211                     	;# 
  3418  0211                     	;# 
  3419  0212                     	;# 
  3420  0212                     	;# 
  3421  0213                     	;# 
  3422  0213                     	;# 
  3423  0214                     	;# 
  3424  0214                     	;# 
  3425  0215                     	;# 
  3426  0215                     	;# 
  3427  0215                     	;# 
  3428  0216                     	;# 
  3429  0216                     	;# 
  3430  0217                     	;# 
  3431  0217                     	;# 
  3432  0219                     	;# 
  3433  021A                     	;# 
  3434  021B                     	;# 
  3435  021C                     	;# 
  3436  021D                     	;# 
  3437  021E                     	;# 
  3438  021F                     	;# 
  3439  0291                     	;# 
  3440  0291                     	;# 
  3441  0292                     	;# 
  3442  0293                     	;# 
  3443  0294                     	;# 
  3444  0295                     	;# 
  3445  0295                     	;# 
  3446  0296                     	;# 
  3447  0298                     	;# 
  3448  0298                     	;# 
  3449  0299                     	;# 
  3450  029A                     	;# 
  3451  029B                     	;# 
  3452  029C                     	;# 
  3453  029D                     	;# 
  3454  029E                     	;# 
  3455  0311                     	;# 
  3456  0311                     	;# 
  3457  0312                     	;# 
  3458  0313                     	;# 
  3459  0318                     	;# 
  3460  0318                     	;# 
  3461  0319                     	;# 
  3462  031A                     	;# 
  3463  038C                     	;# 
  3464  038D                     	;# 
  3465  038E                     	;# 
  3466  0391                     	;# 
  3467  0392                     	;# 
  3468  0393                     	;# 
  3469  0394                     	;# 
  3470  0395                     	;# 
  3471  0396                     	;# 
  3472  039A                     	;# 
  3473  039C                     	;# 
  3474  039D                     	;# 
  3475  039E                     	;# 
  3476  039F                     	;# 
  3477  0415                     	;# 
  3478  0416                     	;# 
  3479  0417                     	;# 
  3480  041C                     	;# 
  3481  041D                     	;# 
  3482  041E                     	;# 
  3483  0FE4                     	;# 
  3484  0FE5                     	;# 
  3485  0FE6                     	;# 
  3486  0FE7                     	;# 
  3487  0FE8                     	;# 
  3488  0FE9                     	;# 
  3489  0FEA                     	;# 
  3490  0FEB                     	;# 
  3491  0FED                     	;# 
  3492  0FEE                     	;# 
  3493  0FEF                     	;# 
  3494  0000                     	;# 
  3495  0001                     	;# 
  3496  0002                     	;# 
  3497  0003                     	;# 
  3498  0004                     	;# 
  3499  0005                     	;# 
  3500  0006                     	;# 
  3501  0007                     	;# 
  3502  0008                     	;# 
  3503  0009                     	;# 
  3504  000A                     	;# 
  3505  000B                     	;# 
  3506  000C                     	;# 
  3507  000D                     	;# 
  3508  000E                     	;# 
  3509  0011                     	;# 
  3510  0012                     	;# 
  3511  0013                     	;# 
  3512  0014                     	;# 
  3513  0015                     	;# 
  3514  0016                     	;# 
  3515  0016                     	;# 
  3516  0017                     	;# 
  3517  0018                     	;# 
  3518  0019                     	;# 
  3519  001A                     	;# 
  3520  001B                     	;# 
  3521  001C                     	;# 
  3522  001E                     	;# 
  3523  001F                     	;# 
  3524  008C                     	;# 
  3525  008D                     	;# 
  3526  008E                     	;# 
  3527  0091                     	;# 
  3528  0092                     	;# 
  3529  0093                     	;# 
  3530  0094                     	;# 
  3531  0095                     	;# 
  3532  0096                     	;# 
  3533  0097                     	;# 
  3534  0098                     	;# 
  3535  0099                     	;# 
  3536  009A                     	;# 
  3537  009B                     	;# 
  3538  009B                     	;# 
  3539  009C                     	;# 
  3540  009D                     	;# 
  3541  009E                     	;# 
  3542  010C                     	;# 
  3543  010D                     	;# 
  3544  010E                     	;# 
  3545  0111                     	;# 
  3546  0112                     	;# 
  3547  0113                     	;# 
  3548  0114                     	;# 
  3549  0115                     	;# 
  3550  0116                     	;# 
  3551  0117                     	;# 
  3552  0118                     	;# 
  3553  0119                     	;# 
  3554  011A                     	;# 
  3555  011B                     	;# 
  3556  011D                     	;# 
  3557  011E                     	;# 
  3558  018C                     	;# 
  3559  018D                     	;# 
  3560  018E                     	;# 
  3561  0191                     	;# 
  3562  0191                     	;# 
  3563  0192                     	;# 
  3564  0193                     	;# 
  3565  0193                     	;# 
  3566  0193                     	;# 
  3567  0194                     	;# 
  3568  0195                     	;# 
  3569  0196                     	;# 
  3570  0199                     	;# 
  3571  019A                     	;# 
  3572  019B                     	;# 
  3573  019B                     	;# 
  3574  019B                     	;# 
  3575  019B                     	;# 
  3576  019C                     	;# 
  3577  019C                     	;# 
  3578  019D                     	;# 
  3579  019E                     	;# 
  3580  019F                     	;# 
  3581  020C                     	;# 
  3582  020D                     	;# 
  3583  020E                     	;# 
  3584  0211                     	;# 
  3585  0211                     	;# 
  3586  0212                     	;# 
  3587  0212                     	;# 
  3588  0213                     	;# 
  3589  0213                     	;# 
  3590  0214                     	;# 
  3591  0214                     	;# 
  3592  0215                     	;# 
  3593  0215                     	;# 
  3594  0215                     	;# 
  3595  0216                     	;# 
  3596  0216                     	;# 
  3597  0217                     	;# 
  3598  0217                     	;# 
  3599  0219                     	;# 
  3600  021A                     	;# 
  3601  021B                     	;# 
  3602  021C                     	;# 
  3603  021D                     	;# 
  3604  021E                     	;# 
  3605  021F                     	;# 
  3606  0291                     	;# 
  3607  0291                     	;# 
  3608  0292                     	;# 
  3609  0293                     	;# 
  3610  0294                     	;# 
  3611  0295                     	;# 
  3612  0295                     	;# 
  3613  0296                     	;# 
  3614  0298                     	;# 
  3615  0298                     	;# 
  3616  0299                     	;# 
  3617  029A                     	;# 
  3618  029B                     	;# 
  3619  029C                     	;# 
  3620  029D                     	;# 
  3621  029E                     	;# 
  3622  0311                     	;# 
  3623  0311                     	;# 
  3624  0312                     	;# 
  3625  0313                     	;# 
  3626  0318                     	;# 
  3627  0318                     	;# 
  3628  0319                     	;# 
  3629  031A                     	;# 
  3630  038C                     	;# 
  3631  038D                     	;# 
  3632  038E                     	;# 
  3633  0391                     	;# 
  3634  0392                     	;# 
  3635  0393                     	;# 
  3636  0394                     	;# 
  3637  0395                     	;# 
  3638  0396                     	;# 
  3639  039A                     	;# 
  3640  039C                     	;# 
  3641  039D                     	;# 
  3642  039E                     	;# 
  3643  039F                     	;# 
  3644  0415                     	;# 
  3645  0416                     	;# 
  3646  0417                     	;# 
  3647  041C                     	;# 
  3648  041D                     	;# 
  3649  041E                     	;# 
  3650  0FE4                     	;# 
  3651  0FE5                     	;# 
  3652  0FE6                     	;# 
  3653  0FE7                     	;# 
  3654  0FE8                     	;# 
  3655  0FE9                     	;# 
  3656  0FEA                     	;# 
  3657  0FEB                     	;# 
  3658  0FED                     	;# 
  3659  0FEE                     	;# 
  3660  0FEF                     	;# 
  3661  0000                     	;# 
  3662  0001                     	;# 
  3663  0002                     	;# 
  3664  0003                     	;# 
  3665  0004                     	;# 
  3666  0005                     	;# 
  3667  0006                     	;# 
  3668  0007                     	;# 
  3669  0008                     	;# 
  3670  0009                     	;# 
  3671  000A                     	;# 
  3672  000B                     	;# 
  3673  000C                     	;# 
  3674  000D                     	;# 
  3675  000E                     	;# 
  3676  0011                     	;# 
  3677  0012                     	;# 
  3678  0013                     	;# 
  3679  0014                     	;# 
  3680  0015                     	;# 
  3681  0016                     	;# 
  3682  0016                     	;# 
  3683  0017                     	;# 
  3684  0018                     	;# 
  3685  0019                     	;# 
  3686  001A                     	;# 
  3687  001B                     	;# 
  3688  001C                     	;# 
  3689  001E                     	;# 
  3690  001F                     	;# 
  3691  008C                     	;# 
  3692  008D                     	;# 
  3693  008E                     	;# 
  3694  0091                     	;# 
  3695  0092                     	;# 
  3696  0093                     	;# 
  3697  0094                     	;# 
  3698  0095                     	;# 
  3699  0096                     	;# 
  3700  0097                     	;# 
  3701  0098                     	;# 
  3702  0099                     	;# 
  3703  009A                     	;# 
  3704  009B                     	;# 
  3705  009B                     	;# 
  3706  009C                     	;# 
  3707  009D                     	;# 
  3708  009E                     	;# 
  3709  010C                     	;# 
  3710  010D                     	;# 
  3711  010E                     	;# 
  3712  0111                     	;# 
  3713  0112                     	;# 
  3714  0113                     	;# 
  3715  0114                     	;# 
  3716  0115                     	;# 
  3717  0116                     	;# 
  3718  0117                     	;# 
  3719  0118                     	;# 
  3720  0119                     	;# 
  3721  011A                     	;# 
  3722  011B                     	;# 
  3723  011D                     	;# 
  3724  011E                     	;# 
  3725  018C                     	;# 
  3726  018D                     	;# 
  3727  018E                     	;# 
  3728  0191                     	;# 
  3729  0191                     	;# 
  3730  0192                     	;# 
  3731  0193                     	;# 
  3732  0193                     	;# 
  3733  0193                     	;# 
  3734  0194                     	;# 
  3735  0195                     	;# 
  3736  0196                     	;# 
  3737  0199                     	;# 
  3738  019A                     	;# 
  3739  019B                     	;# 
  3740  019B                     	;# 
  3741  019B                     	;# 
  3742  019B                     	;# 
  3743  019C                     	;# 
  3744  019C                     	;# 
  3745  019D                     	;# 
  3746  019E                     	;# 
  3747  019F                     	;# 
  3748  020C                     	;# 
  3749  020D                     	;# 
  3750  020E                     	;# 
  3751  0211                     	;# 
  3752  0211                     	;# 
  3753  0212                     	;# 
  3754  0212                     	;# 
  3755  0213                     	;# 
  3756  0213                     	;# 
  3757  0214                     	;# 
  3758  0214                     	;# 
  3759  0215                     	;# 
  3760  0215                     	;# 
  3761  0215                     	;# 
  3762  0216                     	;# 
  3763  0216                     	;# 
  3764  0217                     	;# 
  3765  0217                     	;# 
  3766  0219                     	;# 
  3767  021A                     	;# 
  3768  021B                     	;# 
  3769  021C                     	;# 
  3770  021D                     	;# 
  3771  021E                     	;# 
  3772  021F                     	;# 
  3773  0291                     	;# 
  3774  0291                     	;# 
  3775  0292                     	;# 
  3776  0293                     	;# 
  3777  0294                     	;# 
  3778  0295                     	;# 
  3779  0295                     	;# 
  3780  0296                     	;# 
  3781  0298                     	;# 
  3782  0298                     	;# 
  3783  0299                     	;# 
  3784  029A                     	;# 
  3785  029B                     	;# 
  3786  029C                     	;# 
  3787  029D                     	;# 
  3788  029E                     	;# 
  3789  0311                     	;# 
  3790  0311                     	;# 
  3791  0312                     	;# 
  3792  0313                     	;# 
  3793  0318                     	;# 
  3794  0318                     	;# 
  3795  0319                     	;# 
  3796  031A                     	;# 
  3797  038C                     	;# 
  3798  038D                     	;# 
  3799  038E                     	;# 
  3800  0391                     	;# 
  3801  0392                     	;# 
  3802  0393                     	;# 
  3803  0394                     	;# 
  3804  0395                     	;# 
  3805  0396                     	;# 
  3806  039A                     	;# 
  3807  039C                     	;# 
  3808  039D                     	;# 
  3809  039E                     	;# 
  3810  039F                     	;# 
  3811  0415                     	;# 
  3812  0416                     	;# 
  3813  0417                     	;# 
  3814  041C                     	;# 
  3815  041D                     	;# 
  3816  041E                     	;# 
  3817  0FE4                     	;# 
  3818  0FE5                     	;# 
  3819  0FE6                     	;# 
  3820  0FE7                     	;# 
  3821  0FE8                     	;# 
  3822  0FE9                     	;# 
  3823  0FEA                     	;# 
  3824  0FEB                     	;# 
  3825  0FED                     	;# 
  3826  0FEE                     	;# 
  3827  0FEF                     	;# 
  3828  0000                     	;# 
  3829  0001                     	;# 
  3830  0002                     	;# 
  3831  0003                     	;# 
  3832  0004                     	;# 
  3833  0005                     	;# 
  3834  0006                     	;# 
  3835  0007                     	;# 
  3836  0008                     	;# 
  3837  0009                     	;# 
  3838  000A                     	;# 
  3839  000B                     	;# 
  3840  000C                     	;# 
  3841  000D                     	;# 
  3842  000E                     	;# 
  3843  0011                     	;# 
  3844  0012                     	;# 
  3845  0013                     	;# 
  3846  0014                     	;# 
  3847  0015                     	;# 
  3848  0016                     	;# 
  3849  0016                     	;# 
  3850  0017                     	;# 
  3851  0018                     	;# 
  3852  0019                     	;# 
  3853  001A                     	;# 
  3854  001B                     	;# 
  3855  001C                     	;# 
  3856  001E                     	;# 
  3857  001F                     	;# 
  3858  008C                     	;# 
  3859  008D                     	;# 
  3860  008E                     	;# 
  3861  0091                     	;# 
  3862  0092                     	;# 
  3863  0093                     	;# 
  3864  0094                     	;# 
  3865  0095                     	;# 
  3866  0096                     	;# 
  3867  0097                     	;# 
  3868  0098                     	;# 
  3869  0099                     	;# 
  3870  009A                     	;# 
  3871  009B                     	;# 
  3872  009B                     	;# 
  3873  009C                     	;# 
  3874  009D                     	;# 
  3875  009E                     	;# 
  3876  010C                     	;# 
  3877  010D                     	;# 
  3878  010E                     	;# 
  3879  0111                     	;# 
  3880  0112                     	;# 
  3881  0113                     	;# 
  3882  0114                     	;# 
  3883  0115                     	;# 
  3884  0116                     	;# 
  3885  0117                     	;# 
  3886  0118                     	;# 
  3887  0119                     	;# 
  3888  011A                     	;# 
  3889  011B                     	;# 
  3890  011D                     	;# 
  3891  011E                     	;# 
  3892  018C                     	;# 
  3893  018D                     	;# 
  3894  018E                     	;# 
  3895  0191                     	;# 
  3896  0191                     	;# 
  3897  0192                     	;# 
  3898  0193                     	;# 
  3899  0193                     	;# 
  3900  0193                     	;# 
  3901  0194                     	;# 
  3902  0195                     	;# 
  3903  0196                     	;# 
  3904  0199                     	;# 
  3905  019A                     	;# 
  3906  019B                     	;# 
  3907  019B                     	;# 
  3908  019B                     	;# 
  3909  019B                     	;# 
  3910  019C                     	;# 
  3911  019C                     	;# 
  3912  019D                     	;# 
  3913  019E                     	;# 
  3914  019F                     	;# 
  3915  020C                     	;# 
  3916  020D                     	;# 
  3917  020E                     	;# 
  3918  0211                     	;# 
  3919  0211                     	;# 
  3920  0212                     	;# 
  3921  0212                     	;# 
  3922  0213                     	;# 
  3923  0213                     	;# 
  3924  0214                     	;# 
  3925  0214                     	;# 
  3926  0215                     	;# 
  3927  0215                     	;# 
  3928  0215                     	;# 
  3929  0216                     	;# 
  3930  0216                     	;# 
  3931  0217                     	;# 
  3932  0217                     	;# 
  3933  0219                     	;# 
  3934  021A                     	;# 
  3935  021B                     	;# 
  3936  021C                     	;# 
  3937  021D                     	;# 
  3938  021E                     	;# 
  3939  021F                     	;# 
  3940  0291                     	;# 
  3941  0291                     	;# 
  3942  0292                     	;# 
  3943  0293                     	;# 
  3944  0294                     	;# 
  3945  0295                     	;# 
  3946  0295                     	;# 
  3947  0296                     	;# 
  3948  0298                     	;# 
  3949  0298                     	;# 
  3950  0299                     	;# 
  3951  029A                     	;# 
  3952  029B                     	;# 
  3953  029C                     	;# 
  3954  029D                     	;# 
  3955  029E                     	;# 
  3956  0311                     	;# 
  3957  0311                     	;# 
  3958  0312                     	;# 
  3959  0313                     	;# 
  3960  0318                     	;# 
  3961  0318                     	;# 
  3962  0319                     	;# 
  3963  031A                     	;# 
  3964  038C                     	;# 
  3965  038D                     	;# 
  3966  038E                     	;# 
  3967  0391                     	;# 
  3968  0392                     	;# 
  3969  0393                     	;# 
  3970  0394                     	;# 
  3971  0395                     	;# 
  3972  0396                     	;# 
  3973  039A                     	;# 
  3974  039C                     	;# 
  3975  039D                     	;# 
  3976  039E                     	;# 
  3977  039F                     	;# 
  3978  0415                     	;# 
  3979  0416                     	;# 
  3980  0417                     	;# 
  3981  041C                     	;# 
  3982  041D                     	;# 
  3983  041E                     	;# 
  3984  0FE4                     	;# 
  3985  0FE5                     	;# 
  3986  0FE6                     	;# 
  3987  0FE7                     	;# 
  3988  0FE8                     	;# 
  3989  0FE9                     	;# 
  3990  0FEA                     	;# 
  3991  0FEB                     	;# 
  3992  0FED                     	;# 
  3993  0FEE                     	;# 
  3994  0FEF                     	;# 
  3995                           
  3996                           	psect	idataBANK1
  3997  0003                     __pidataBANK1:	
  3998                           
  3999                           ;initializer for _addressSize
  4000  0003  3405               	retlw	5
  4001                           
  4002                           	psect	idataBANK2
  4003  1308                     __pidataBANK2:	
  4004                           
  4005                           ;initializer for _sensorUpdatePeriod
  4006  1308  34C0               	retlw	192
  4007  1309  3427               	retlw	39
  4008  130A  3409               	retlw	9
  4009  130B  3400               	retlw	0
  4010                           
  4011                           ;initializer for _sensorHealth
  4012  130C  3401               	retlw	1
  4013  130D  3401               	retlw	1
  4014                           
  4015                           	psect	stringtext1
  4016  1800                     __pstringtext1:	
  4017  1800                     atan@coeff_a:	
  4018  1800  343C               	retlw	60
  4019  1801  3404               	retlw	4
  4020  1802  3442               	retlw	66
  4021  1803  349F               	retlw	159
  4022  1804  346A               	retlw	106
  4023  1805  3442               	retlw	66
  4024  1806  3490               	retlw	144
  4025  1807  3401               	retlw	1
  4026  1808  3442               	retlw	66
  4027  1809  344D               	retlw	77
  4028  180A  34BB               	retlw	187
  4029  180B  3440               	retlw	64
  4030  180C  34EC               	retlw	236
  4031  180D  3447               	retlw	71
  4032  180E  343E               	retlw	62
  4033  180F  348E               	retlw	142
  4034  1810  341F               	retlw	31
  4035  1811  34BB               	retlw	187
  4036  1812                     __end_ofatan@coeff_a:	
  4037                           
  4038                           	psect	stringtext2
  4039  1812                     __pstringtext2:	
  4040  1812                     atan@coeff_b:	
  4041  1812  343C               	retlw	60
  4042  1813  3404               	retlw	4
  4043  1814  3442               	retlw	66
  4044  1815  345A               	retlw	90
  4045  1816  348B               	retlw	139
  4046  1817  3442               	retlw	66
  4047  1818  3404               	retlw	4
  4048  1819  3444               	retlw	68
  4049  181A  3442               	retlw	66
  4050  181B  349C               	retlw	156
  4051  181C  344F               	retlw	79
  4052  181D  3441               	retlw	65
  4053  181E  3400               	retlw	0
  4054  181F  3480               	retlw	128
  4055  1820  343F               	retlw	63
  4056  1821                     __end_ofatan@coeff_b:	
  4057                           
  4058                           	psect	stringtext3
  4059  1821                     __pstringtext3:	
  4060  1821                     Wireless_init@TADDR:	
  4061  1821  3431               	retlw	49
  4062  1822  3430               	retlw	48
  4063  1823  3430               	retlw	48
  4064  1824  3430               	retlw	48
  4065  1825  3431               	retlw	49
  4066  1826                     __end_ofWireless_init@TADDR:	
  4067                           
  4068                           	psect	nvCOMMON
  4069  007C                     __pnvCOMMON:	
  4070  007C                     _timer1ReloadVal:	
  4071  007C                     	ds	2
  4072                           
  4073                           	psect	nvBANK2
  4074  016C                     __pnvBANK2:	
  4075  016C                     _TMR1_InterruptHandler:	
  4076  016C                     	ds	2
  4077  016E                     _IOCAF2_InterruptHandler:	
  4078  016E                     	ds	2
  4079  000E                     _PORTCbits	set	14
  4080  0019                     _T1GCONbits	set	25
  4081  0018                     _T1CONbits	set	24
  4082  0018                     _T1CON	set	24
  4083  0016                     _TMR1L	set	22
  4084  0017                     _TMR1H	set	23
  4085  0019                     _T1GCON	set	25
  4086  0014                     _PIR4bits	set	20
  4087  001C                     _T2CONbits	set	28
  4088  001C                     _T2CON	set	28
  4089  0011                     _PIR1bits	set	17
  4090  001A                     _TMR2	set	26
  4091  001B                     _PR2	set	27
  4092  000B                     _INTCONbits	set	11
  4093  009D                     _ADCON0bits	set	157
  4094  009C                     _ADRESH	set	156
  4095  009B                     _ADRESL	set	155
  4096  009E                     _ADCON1	set	158
  4097  009D                     _ADCON0	set	157
  4098  0091                     _PIE1bits	set	145
  4099  0094                     _PIE4bits	set	148
  4100  0095                     _OPTION_REGbits	set	149
  4101  008E                     _TRISC	set	142
  4102  008D                     _TRISB	set	141
  4103  008C                     _TRISA	set	140
  4104  0097                     _WDTCON	set	151
  4105  0098                     _OSCTUNE	set	152
  4106  0099                     _OSCCON	set	153
  4107  010E                     _LATCbits	set	270
  4108  0117                     _FVRCONbits	set	279
  4109  0117                     _FVRCON	set	279
  4110  011D                     _APFCON0	set	285
  4111  011E                     _APFCON1	set	286
  4112  010E                     _LATC	set	270
  4113  010D                     _LATB	set	269
  4114  010C                     _LATA	set	268
  4115  0116                     _BORCON	set	278
  4116  0196                     _EECON2	set	406
  4117  0193                     _EEDATL	set	403
  4118  0194                     _EEDATH	set	404
  4119  0195                     _EECON1bits	set	405
  4120  0192                     _EEADRH	set	402
  4121  0191                     _EEADRL	set	401
  4122  018C                     _ANSELA	set	396
  4123  018D                     _ANSELB	set	397
  4124  018E                     _ANSELC	set	398
  4125  020E                     _WPUCbits	set	526
  4126  0214                     _SSP1STATbits	set	532
  4127  0211                     _SSP1BUF	set	529
  4128  0215                     _SSP1CON1bits	set	533
  4129  0212                     _SSP1ADD	set	530
  4130  0215                     _SSP1CON1	set	533
  4131  0214                     _SSP1STAT	set	532
  4132  0219                     _SSP2BUF	set	537
  4133  021E                     _SSP2CON2bits	set	542
  4134  021D                     _SSP2CON1bits	set	541
  4135  021A                     _SSP2ADD	set	538
  4136  021F                     _SSP2CON3	set	543
  4137  021D                     _SSP2CON1	set	541
  4138  021C                     _SSP2STAT	set	540
  4139  020E                     _WPUC	set	526
  4140  020C                     _WPUA	set	524
  4141  020D                     _WPUB	set	525
  4142  0391                     _IOCAPbits	set	913
  4143  0392                     _IOCANbits	set	914
  4144  0393                     _IOCAFbits	set	915
  4145                           
  4146                           ; #config settings
  4147  0000                     
  4148                           	psect	cinit
  4149  0039                     start_initialization:	
  4150  0039                     __initialization:	
  4151                           
  4152                           ; Initialize objects allocated to BANK1
  4153  0039  0021               	movlb	1	; select bank1
  4154  003A  3180  2003  3180   	fcall	__pidataBANK1	;fetch initializer
  4155  003D  00E6               	movwf	__pdataBANK1& (0+127)
  4156                           
  4157                           ; Initialize objects allocated to BANK2
  4158  003E  3008               	movlw	low __pidataBANK2
  4159  003F  0084               	movwf	4
  4160  0040  3093               	movlw	(high __pidataBANK2)| (0+128)
  4161  0041  0085               	movwf	5
  4162  0042  0022               	movlb	2	; select bank2
  4163  0043  0012               	moviw fsr0++
  4164  0044  00E6               	movwf	__pdataBANK2& (0+127)
  4165  0045  0012               	moviw fsr0++
  4166  0046  00E7               	movwf	(__pdataBANK2+1)& (0+127)
  4167  0047  0012               	moviw fsr0++
  4168  0048  00E8               	movwf	(__pdataBANK2+2)& (0+127)
  4169  0049  0012               	moviw fsr0++
  4170  004A  00E9               	movwf	(__pdataBANK2+3)& (0+127)
  4171  004B  0012               	moviw fsr0++
  4172  004C  00EA               	movwf	(__pdataBANK2+4)& (0+127)
  4173  004D  0012               	moviw fsr0++
  4174  004E  00EB               	movwf	(__pdataBANK2+5)& (0+127)
  4175                           
  4176                           ; Clear objects allocated to COMMON
  4177  004F  01F7               	clrf	__pbssCOMMON& (0+127)
  4178  0050  01F8               	clrf	(__pbssCOMMON+1)& (0+127)
  4179  0051  01F9               	clrf	(__pbssCOMMON+2)& (0+127)
  4180  0052  01FA               	clrf	(__pbssCOMMON+3)& (0+127)
  4181  0053  01FB               	clrf	(__pbssCOMMON+4)& (0+127)
  4182                           
  4183                           ; Clear objects allocated to BANK1
  4184  0054  30CD               	movlw	low __pbssBANK1
  4185  0055  0084               	movwf	4
  4186  0056  3000               	movlw	high __pbssBANK1
  4187  0057  0085               	movwf	5
  4188  0058  3019               	movlw	25
  4189  0059  3193  2302  3180   	fcall	clear_ram0
  4190                           
  4191                           ; Clear objects allocated to BANK2
  4192  005C  3020               	movlw	low __pbssBANK2
  4193  005D  0084               	movwf	4
  4194  005E  3001               	movlw	high __pbssBANK2
  4195  005F  0085               	movwf	5
  4196  0060  3046               	movlw	70
  4197  0061  3193  2302  3180   	fcall	clear_ram0
  4198                           
  4199                           ; Clear objects allocated to BANK3
  4200  0064  30A0               	movlw	low __pbssBANK3
  4201  0065  0084               	movwf	4
  4202  0066  3001               	movlw	high __pbssBANK3
  4203  0067  0085               	movwf	5
  4204  0068  3030               	movlw	48
  4205  0069  3193  2302         	fcall	clear_ram0
  4206  006B                     end_of_initialization:	
  4207                           ;End of C runtime variable initialization code
  4208                           
  4209  006B                     __end_of__initialization:	
  4210  006B  107E               	bcf	int$flags,0	;clear compiler interrupt flag (level 1)
  4211  006C  0020               	movlb	0
  4212  006D  3183  2B3D         	ljmp	_main	;jump to C main() function
  4213                           
  4214                           	psect	bssCOMMON
  4215  0077                     __pbssCOMMON:	
  4216  0077                     _p_i2c2_current:	
  4217  0077                     	ds	1
  4218  0078                     _p_i2c2_trb_current:	
  4219  0078                     	ds	1
  4220  0079                     _i2c2_state:	
  4221  0079                     	ds	1
  4222  007A                     I2C2_ISR@i2c_address:	
  4223  007A                     	ds	2
  4224                           
  4225                           	psect	bssBANK1
  4226  00CD                     __pbssBANK1:	
  4227  00CD                     _i2c2_object:	
  4228  00CD                     	ds	5
  4229  00D2                     _globalCounter:	
  4230  00D2                     	ds	4
  4231  00D6                     _dig_T1:	
  4232  00D6                     	ds	2
  4233  00D8                     I2C2_ISR@pi2c_buf_ptr:	
  4234  00D8                     	ds	2
  4235  00DA                     DOOR_run@previousDoorState:	
  4236  00DA                     	ds	1
  4237  00DB                     _initialised:	
  4238  00DB                     	ds	1
  4239  00DC                     _doorState:	
  4240  00DC                     	ds	1
  4241  00DD                     _doorClosedAngle:	
  4242  00DD                     	ds	1
  4243  00DE                     _doorOpenAngle:	
  4244  00DE                     	ds	1
  4245  00DF                     Wireless_determineTransmitPower@numOfSuccessfulTransmits:	
  4246  00DF                     	ds	1
  4247  00E0                     Wireless_determineTransmitPower@numOfTransmits:	
  4248  00E0                     	ds	1
  4249  00E1                     _currentTransmitPower:	
  4250  00E1                     	ds	1
  4251  00E2                     _HMC5883Lmode:	
  4252  00E2                     	ds	1
  4253  00E3                     I2C2_ISR@i2c_10bit_address_restart:	
  4254  00E3                     	ds	1
  4255  00E4                     I2C2_ISR@i2c_bytes_left:	
  4256  00E4                     	ds	1
  4257  00E5                     _i2c2_trb_count:	
  4258  00E5                     	ds	1
  4259                           
  4260                           	psect	dataBANK1
  4261  00E6                     __pdataBANK1:	
  4262  00E6                     _addressSize:	
  4263  00E6                     	ds	1
  4264                           
  4265                           	psect	bssBANK2
  4266  0120                     __pbssBANK2:	
  4267  0120                     _curr:	
  4268  0120                     	ds	4
  4269  0124                     _adc_t:	
  4270  0124                     	ds	4
  4271  0128                     _pressure:	
  4272  0128                     	ds	3
  4273  012B                     _cTemp:	
  4274  012B                     	ds	3
  4275  012E                     _t_fine:	
  4276  012E                     	ds	3
  4277  0131                     _var2:	
  4278  0131                     	ds	3
  4279  0134                     _var1:	
  4280  0134                     	ds	3
  4281  0137                     HMC5883L_TestConnection@F3572:	
  4282  0137                     	ds	3
  4283  013A                     _errno:	
  4284  013A                     	ds	2
  4285  013C                     _timeOut:	
  4286  013C                     	ds	2
  4287  013E                     _referenceDirection:	
  4288  013E                     	ds	2
  4289  0140                     _dig_P9:	
  4290  0140                     	ds	2
  4291  0142                     _dig_P8:	
  4292  0142                     	ds	2
  4293  0144                     _dig_P7:	
  4294  0144                     	ds	2
  4295  0146                     _dig_P6:	
  4296  0146                     	ds	2
  4297  0148                     _dig_P5:	
  4298  0148                     	ds	2
  4299  014A                     _dig_P4:	
  4300  014A                     	ds	2
  4301  014C                     _dig_P3:	
  4302  014C                     	ds	2
  4303  014E                     _dig_P2:	
  4304  014E                     	ds	2
  4305  0150                     _dig_P1:	
  4306  0150                     	ds	2
  4307  0152                     _dig_T4:	
  4308  0152                     	ds	2
  4309  0154                     _dig_T3:	
  4310  0154                     	ds	2
  4311  0156                     _dig_T2:	
  4312  0156                     	ds	2
  4313  0158                     I2C2_MasterRead@trBlock:	
  4314  0158                     	ds	5
  4315  015D                     I2C2_MasterWrite@trBlock:	
  4316  015D                     	ds	5
  4317  0162                     _i2c2_tr_queue:	
  4318  0162                     	ds	4
  4319                           
  4320                           	psect	dataBANK2
  4321  0166                     __pdataBANK2:	
  4322  0166                     _sensorUpdatePeriod:	
  4323  0166                     	ds	4
  4324  016A                     _sensorHealth:	
  4325  016A                     	ds	2
  4326                           
  4327                           	psect	bssBANK3
  4328  01A0                     __pbssBANK3:	
  4329  01A0                     DOOR_run@doorStateDuration:	
  4330  01A0                     	ds	4
  4331  01A4                     _adc_p:	
  4332  01A4                     	ds	4
  4333  01A8                     _b1:	
  4334  01A8                     	ds	24
  4335  01C0                     _data:	
  4336  01C0                     	ds	8
  4337  01C8                     _heading:	
  4338  01C8                     	ds	8
  4339                           
  4340                           	psect	clrtext
  4341  1302                     clear_ram0:	
  4342                           ;	Called with FSR0 containing the base address, and
  4343                           ;	WREG with the size to clear
  4344                           
  4345  1302  0064               	clrwdt	;clear the watchdog before getting into this loop
  4346  1303                     clrloop0:	
  4347  1303  0180               	clrf	0	;clear RAM location pointed to by FSR
  4348  1304  3101               	addfsr 0,1
  4349  1305  0B89               	decfsz	9,f	;Have we reached the end of clearing yet?
  4350  1306  2B03               	goto	clrloop0	;have we reached the end yet?
  4351  1307  3400               	retlw	0	;all done for this memory range, return
  4352                           
  4353                           	psect	cstackBANK3
  4354  01D0                     __pcstackBANK3:	
  4355  01D0                     main@prevDoorStatus:	
  4356                           
  4357                           ; 1 bytes @ 0x0
  4358  01D0                     	ds	1
  4359  01D1                     main@doorClosedUpdateCounter:	
  4360                           
  4361                           ; 4 bytes @ 0x1
  4362  01D1                     	ds	4
  4363  01D5                     main@dur:	
  4364                           
  4365                           ; 2 bytes @ 0x5
  4366  01D5                     	ds	2
  4367  01D7                     main@doorOpenTime:	
  4368                           
  4369                           ; 4 bytes @ 0x7
  4370  01D7                     	ds	4
  4371  01DB                     main@doorStatus:	
  4372                           
  4373                           ; 1 bytes @ 0xB
  4374  01DB                     	ds	1
  4375                           
  4376                           	psect	cstackBANK1
  4377  00A0                     __pcstackBANK1:	
  4378  00A0                     ___fttol@sign1:	
  4379                           
  4380                           ; 1 bytes @ 0x0
  4381  00A0                     	ds	1
  4382  00A1                     ___fttol@lval:	
  4383                           
  4384                           ; 4 bytes @ 0x1
  4385  00A1                     	ds	4
  4386  00A5                     ___fttol@exp1:	
  4387                           
  4388                           ; 1 bytes @ 0x5
  4389  00A5                     	ds	1
  4390  00A6                     ?_BMP_readTemperature:	
  4391                           
  4392                           ; 3 bytes @ 0x6
  4393  00A6                     	ds	3
  4394  00A9                     ??_BMP_readTemperature:	
  4395                           
  4396                           ; 1 bytes @ 0x9
  4397  00A9                     	ds	12
  4398  00B5                     _BMP_readTemperature$2642:	
  4399                           
  4400                           ; 3 bytes @ 0x15
  4401  00B5                     	ds	3
  4402  00B8                     BMP_readTemperature@status:	
  4403                           
  4404                           ; 1 bytes @ 0x18
  4405  00B8                     	ds	1
  4406  00B9                     BMP_readTemperature@tmp:	
  4407                           
  4408                           ; 1 bytes @ 0x19
  4409  00B9                     	ds	1
  4410  00BA                     ?_Wireless_packageData:	
  4411  00BA                     Wireless_packageData@openTime:	
  4412                           ; 1 bytes @ 0x1A
  4413                           
  4414                           
  4415                           ; 1 bytes @ 0x1A
  4416  00BA                     	ds	1
  4417  00BB                     Wireless_packageData@tempC:	
  4418                           
  4419                           ; 3 bytes @ 0x1B
  4420  00BB                     	ds	3
  4421  00BE                     ??_Wireless_packageData:	
  4422                           
  4423                           ; 1 bytes @ 0x1E
  4424  00BE                     	ds	2
  4425  00C0                     Wireless_packageData@data:	
  4426                           
  4427                           ; 7 bytes @ 0x20
  4428  00C0                     	ds	7
  4429  00C7                     Wireless_packageData@var:	
  4430                           
  4431                           ; 1 bytes @ 0x27
  4432  00C7                     	ds	1
  4433  00C8                     Wireless_packageData@status:	
  4434                           
  4435                           ; 1 bytes @ 0x28
  4436  00C8                     	ds	1
  4437  00C9                     Wireless_packageData@t1:	
  4438                           
  4439                           ; 2 bytes @ 0x29
  4440  00C9                     	ds	2
  4441  00CB                     ??_main:	
  4442                           
  4443                           ; 1 bytes @ 0x2B
  4444  00CB                     	ds	2
  4445                           
  4446                           	psect	cstackCOMMON
  4447  0070                     __pcstackCOMMON:	
  4448  0070                     ?_PIN_MANAGER_Initialize:	
  4449  0070                     ?_OSCILLATOR_Initialize:	
  4450                           ; 1 bytes @ 0x0
  4451                           
  4452  0070                     ?_WDT_Initialize:	
  4453                           ; 1 bytes @ 0x0
  4454                           
  4455  0070                     ?_SPI1_Initialize:	
  4456                           ; 1 bytes @ 0x0
  4457                           
  4458  0070                     ?_I2C2_Initialize:	
  4459                           ; 1 bytes @ 0x0
  4460                           
  4461  0070                     ?_FVR_Initialize:	
  4462                           ; 1 bytes @ 0x0
  4463                           
  4464  0070                     ?_ADC_Initialize:	
  4465                           ; 1 bytes @ 0x0
  4466                           
  4467  0070                     ?_TMR2_Initialize:	
  4468                           ; 1 bytes @ 0x0
  4469                           
  4470  0070                     ?_TMR1_Initialize:	
  4471                           ; 1 bytes @ 0x0
  4472                           
  4473  0070                     ?_IOCAF2_DefaultInterruptHandler:	
  4474                           ; 1 bytes @ 0x0
  4475                           
  4476  0070                     ??_IOCAF2_DefaultInterruptHandler:	
  4477                           ; 1 bytes @ 0x0
  4478                           
  4479  0070                     ?_IOCAF2_ISR:	
  4480                           ; 1 bytes @ 0x0
  4481                           
  4482  0070                     ??_IOCAF2_ISR:	
  4483                           ; 1 bytes @ 0x0
  4484                           
  4485  0070                     ?_I2C2_BusCollisionISR:	
  4486                           ; 1 bytes @ 0x0
  4487                           
  4488  0070                     ??_I2C2_BusCollisionISR:	
  4489                           ; 1 bytes @ 0x0
  4490                           
  4491  0070                     ?_I2C2_ISR:	
  4492                           ; 1 bytes @ 0x0
  4493                           
  4494  0070                     ?_TMR1_ISR:	
  4495                           ; 1 bytes @ 0x0
  4496                           
  4497  0070                     ??_TMR1_ISR:	
  4498                           ; 1 bytes @ 0x0
  4499                           
  4500  0070                     ?_TMR1_DefaultInterruptHandler:	
  4501                           ; 1 bytes @ 0x0
  4502                           
  4503  0070                     ??_TMR1_DefaultInterruptHandler:	
  4504                           ; 1 bytes @ 0x0
  4505                           
  4506  0070                     ?_TMR1_CallBack:	
  4507                           ; 1 bytes @ 0x0
  4508                           
  4509  0070                     ??_TMR1_CallBack:	
  4510                           ; 1 bytes @ 0x0
  4511                           
  4512  0070                     ?_Timeout_increment:	
  4513                           ; 1 bytes @ 0x0
  4514                           
  4515  0070                     ??_Timeout_increment:	
  4516                           ; 1 bytes @ 0x0
  4517                           
  4518  0070                     ?_I2C2_Stop:	
  4519                           ; 1 bytes @ 0x0
  4520                           
  4521  0070                     ??_I2C2_Stop:	
  4522                           ; 1 bytes @ 0x0
  4523                           
  4524  0070                     ?_I2C2_FunctionComplete:	
  4525                           ; 1 bytes @ 0x0
  4526                           
  4527  0070                     ??_I2C2_FunctionComplete:	
  4528                           ; 1 bytes @ 0x0
  4529                           
  4530  0070                     ?_Sensor_peripheralWake:	
  4531                           ; 1 bytes @ 0x0
  4532                           
  4533  0070                     ?_Sensor_peripheralSleep:	
  4534                           ; 1 bytes @ 0x0
  4535                           
  4536  0070                     ?_Wireless_init:	
  4537                           ; 1 bytes @ 0x0
  4538                           
  4539  0070                     ?_BMP_init:	
  4540                           ; 1 bytes @ 0x0
  4541                           
  4542  0070                     ?_DOOR_init:	
  4543                           ; 1 bytes @ 0x0
  4544                           
  4545  0070                     ?_Wireless_wake:	
  4546                           ; 1 bytes @ 0x0
  4547                           
  4548  0070                     ?_Wireless_determineTransmitPower:	
  4549                           ; 1 bytes @ 0x0
  4550                           
  4551  0070                     ?_Wireless_sleep:	
  4552                           ; 1 bytes @ 0x0
  4553                           
  4554  0070                     ?_Timeout_updateCurrentTime:	
  4555                           ; 1 bytes @ 0x0
  4556                           
  4557  0070                     ?_DOOR_run:	
  4558                           ; 1 bytes @ 0x0
  4559                           
  4560  0070                     ?_Diag_setTempSensorHealth:	
  4561                           ; 1 bytes @ 0x0
  4562                           
  4563  0070                     ?_Diag_getTempSensorHealth:	
  4564                           ; 1 bytes @ 0x0
  4565                           
  4566  0070                     ?_Wireless_changeTransmitPower:	
  4567                           ; 1 bytes @ 0x0
  4568                           
  4569  0070                     ?_Wireless_isDataTransmitSuccessful:	
  4570                           ; 1 bytes @ 0x0
  4571                           
  4572  0070                     ?_Diag_getSensorHealth:	
  4573                           ; 1 bytes @ 0x0
  4574                           
  4575  0070                     ?_Wireless_checkDataReceived:	
  4576                           ; 1 bytes @ 0x0
  4577                           
  4578  0070                     ?_SYSTEM_Initialize:	
  4579                           ; 1 bytes @ 0x0
  4580                           
  4581  0070                     ?_PIN_MANAGER_IOC:	
  4582                           ; 1 bytes @ 0x0
  4583                           
  4584  0070                     ??_PIN_MANAGER_IOC:	
  4585                           ; 1 bytes @ 0x0
  4586                           
  4587  0070                     ?_INTERRUPT_InterruptManager:	
  4588                           ; 1 bytes @ 0x0
  4589                           
  4590  0070                     ?_ADC_SelectChannel:	
  4591                           ; 1 bytes @ 0x0
  4592                           
  4593  0070                     ?_ADC_StartConversion:	
  4594                           ; 1 bytes @ 0x0
  4595                           
  4596  0070                     ?_ADC_IsConversionDone:	
  4597                           ; 1 bytes @ 0x0
  4598                           
  4599  0070                     ?_FVR_IsOutputReady:	
  4600                           ; 1 bytes @ 0x0
  4601                           
  4602  0070                     ?_SPI1_Exchange8bit:	
  4603                           ; 1 bytes @ 0x0
  4604                           
  4605  0070                     ?_main:	
  4606                           ; 1 bytes @ 0x0
  4607                           
  4608  0070                     ?_SPI_WriteRead:	
  4609                           ; 1 bytes @ 0x0
  4610                           
  4611  0070                     ?_RF_ReadRegister:	
  4612                           ; 1 bytes @ 0x0
  4613                           
  4614  0070                     ?_RF_WriteRead:	
  4615                           ; 1 bytes @ 0x0
  4616                           
  4617  0070                     ?_RF_Write:	
  4618                           ; 1 bytes @ 0x0
  4619                           
  4620  0070                     ?_RF_GetStatus:	
  4621                           ; 1 bytes @ 0x0
  4622                           
  4623  0070                     ?_RF_ResetStatusIRQ:	
  4624                           ; 1 bytes @ 0x0
  4625                           
  4626  0070                     ?_RF_Init:	
  4627                           ; 1 bytes @ 0x0
  4628                           
  4629  0070                     ?_RF_DataIsReady:	
  4630                           ; 1 bytes @ 0x0
  4631                           
  4632  0070                     ?_Timeout_hasExpired:	
  4633                           ; 1 bytes @ 0x0
  4634                           
  4635                           
  4636                           ; 1 bytes @ 0x0
  4637  0070                     	ds	2
  4638  0072                     I2C2_Stop@completion_code:	
  4639                           
  4640                           ; 1 bytes @ 0x2
  4641  0072                     	ds	1
  4642  0073                     ??_I2C2_ISR:	
  4643                           
  4644                           ; 1 bytes @ 0x3
  4645  0073                     	ds	4
  4646                           
  4647                           	psect	cstackBANK0
  4648  0020                     __pcstackBANK0:	
  4649  0020                     ??_INTERRUPT_InterruptManager:	
  4650                           
  4651                           ; 1 bytes @ 0x0
  4652  0020                     	ds	1
  4653  0021                     ??_OSCILLATOR_Initialize:	
  4654  0021                     ??_WDT_Initialize:	
  4655                           ; 1 bytes @ 0x1
  4656                           
  4657  0021                     ??_SPI1_Initialize:	
  4658                           ; 1 bytes @ 0x1
  4659                           
  4660  0021                     ??_I2C2_Initialize:	
  4661                           ; 1 bytes @ 0x1
  4662                           
  4663  0021                     ??_FVR_Initialize:	
  4664                           ; 1 bytes @ 0x1
  4665                           
  4666  0021                     ??_ADC_Initialize:	
  4667                           ; 1 bytes @ 0x1
  4668                           
  4669  0021                     ??_TMR2_Initialize:	
  4670                           ; 1 bytes @ 0x1
  4671                           
  4672  0021                     ?_IOCAF2_SetInterruptHandler:	
  4673                           ; 1 bytes @ 0x1
  4674                           
  4675  0021                     ?_TMR1_SetInterruptHandler:	
  4676                           ; 1 bytes @ 0x1
  4677                           
  4678  0021                     ?_I2C2_MasterWriteTRBBuild:	
  4679                           ; 1 bytes @ 0x1
  4680                           
  4681  0021                     ?_I2C2_MasterTRBInsert:	
  4682                           ; 1 bytes @ 0x1
  4683                           
  4684  0021                     ?_I2C2_MasterReadTRBBuild:	
  4685                           ; 1 bytes @ 0x1
  4686                           
  4687  0021                     ??_Sensor_peripheralWake:	
  4688                           ; 1 bytes @ 0x1
  4689                           
  4690  0021                     ??_Sensor_peripheralSleep:	
  4691                           ; 1 bytes @ 0x1
  4692                           
  4693  0021                     ?_setSleepTime:	
  4694                           ; 1 bytes @ 0x1
  4695                           
  4696  0021                     ??_DOOR_init:	
  4697                           ; 1 bytes @ 0x1
  4698                           
  4699  0021                     ??_DOOR_run:	
  4700                           ; 1 bytes @ 0x1
  4701                           
  4702  0021                     ??_Diag_setTempSensorHealth:	
  4703                           ; 1 bytes @ 0x1
  4704                           
  4705  0021                     ??_Diag_getTempSensorHealth:	
  4706                           ; 1 bytes @ 0x1
  4707                           
  4708  0021                     ??_Diag_getSensorHealth:	
  4709                           ; 1 bytes @ 0x1
  4710                           
  4711  0021                     ??_ADC_SelectChannel:	
  4712                           ; 1 bytes @ 0x1
  4713                           
  4714  0021                     ??_ADC_StartConversion:	
  4715                           ; 1 bytes @ 0x1
  4716                           
  4717  0021                     ??_ADC_IsConversionDone:	
  4718                           ; 1 bytes @ 0x1
  4719                           
  4720  0021                     ??_FVR_IsOutputReady:	
  4721                           ; 1 bytes @ 0x1
  4722                           
  4723  0021                     ??_SPI1_Exchange8bit:	
  4724                           ; 1 bytes @ 0x1
  4725                           
  4726  0021                     ??_RF_Init:	
  4727                           ; 1 bytes @ 0x1
  4728                           
  4729  0021                     ?_Timeout_setTimeout:	
  4730                           ; 1 bytes @ 0x1
  4731                           
  4732  0021                     ??_Timeout_hasExpired:	
  4733                           ; 1 bytes @ 0x1
  4734                           
  4735  0021                     ?_TMR1_ReadTimer:	
  4736                           ; 1 bytes @ 0x1
  4737                           
  4738  0021                     ?_ADC_GetConversionResult:	
  4739                           ; 2 bytes @ 0x1
  4740                           
  4741  0021                     ?_limit:	
  4742                           ; 2 bytes @ 0x1
  4743                           
  4744  0021                     ?___lwdiv:	
  4745                           ; 2 bytes @ 0x1
  4746                           
  4747  0021                     ?___ftpack:	
  4748                           ; 2 bytes @ 0x1
  4749                           
  4750  0021                     ?_Timeout_getGlobalCounter:	
  4751                           ; 3 bytes @ 0x1
  4752                           
  4753  0021                     ?___lmul:	
  4754                           ; 4 bytes @ 0x1
  4755                           
  4756  0021                     ?___aldiv:	
  4757                           ; 4 bytes @ 0x1
  4758                           
  4759  0021                     ?___lldiv:	
  4760                           ; 4 bytes @ 0x1
  4761                           
  4762  0021                     I2C2_MasterTRBInsert@ptrb_list:	
  4763                           ; 4 bytes @ 0x1
  4764                           
  4765  0021                     I2C2_MasterWriteTRBBuild@pdata:	
  4766                           ; 1 bytes @ 0x1
  4767                           
  4768  0021                     SPI1_Exchange8bit@data:	
  4769                           ; 1 bytes @ 0x1
  4770                           
  4771  0021                     IOCAF2_SetInterruptHandler@InterruptHandler:	
  4772                           ; 1 bytes @ 0x1
  4773                           
  4774  0021                     TMR1_SetInterruptHandler@InterruptHandler:	
  4775                           ; 2 bytes @ 0x1
  4776                           
  4777  0021                     I2C2_MasterReadTRBBuild@pdata:	
  4778                           ; 2 bytes @ 0x1
  4779                           
  4780  0021                     setSleepTime@timeSec:	
  4781                           ; 2 bytes @ 0x1
  4782                           
  4783  0021                     limit@val:	
  4784                           ; 2 bytes @ 0x1
  4785                           
  4786  0021                     Timeout_setTimeout@val:	
  4787                           ; 2 bytes @ 0x1
  4788                           
  4789  0021                     ___lwdiv@divisor:	
  4790                           ; 2 bytes @ 0x1
  4791                           
  4792  0021                     ___ftpack@arg:	
  4793                           ; 2 bytes @ 0x1
  4794                           
  4795  0021                     ___lmul@multiplier:	
  4796                           ; 3 bytes @ 0x1
  4797                           
  4798  0021                     ___aldiv@divisor:	
  4799                           ; 4 bytes @ 0x1
  4800                           
  4801  0021                     ___lldiv@divisor:	
  4802                           ; 4 bytes @ 0x1
  4803                           
  4804                           
  4805                           ; 4 bytes @ 0x1
  4806  0021                     	ds	1
  4807  0022                     ??_SPI_WriteRead:	
  4808  0022                     I2C2_MasterTRBInsert@pflag:	
  4809                           ; 1 bytes @ 0x2
  4810                           
  4811  0022                     I2C2_MasterWriteTRBBuild@length:	
  4812                           ; 1 bytes @ 0x2
  4813                           
  4814  0022                     ADC_SelectChannel@channel:	
  4815                           ; 1 bytes @ 0x2
  4816                           
  4817  0022                     SPI_WriteRead@val:	
  4818                           ; 1 bytes @ 0x2
  4819                           
  4820  0022                     Diag_setTempSensorHealth@health:	
  4821                           ; 1 bytes @ 0x2
  4822                           
  4823  0022                     Diag_getSensorHealth@var:	
  4824                           ; 1 bytes @ 0x2
  4825                           
  4826                           
  4827                           ; 1 bytes @ 0x2
  4828  0022                     	ds	1
  4829  0023                     ??_PIN_MANAGER_Initialize:	
  4830  0023                     ??_TMR1_Initialize:	
  4831                           ; 1 bytes @ 0x3
  4832                           
  4833  0023                     ??_IOCAF2_SetInterruptHandler:	
  4834                           ; 1 bytes @ 0x3
  4835                           
  4836  0023                     ??_TMR1_SetInterruptHandler:	
  4837                           ; 1 bytes @ 0x3
  4838                           
  4839  0023                     ??_I2C2_MasterTRBInsert:	
  4840                           ; 1 bytes @ 0x3
  4841                           
  4842  0023                     ??_setSleepTime:	
  4843                           ; 1 bytes @ 0x3
  4844                           
  4845  0023                     ??_SYSTEM_Initialize:	
  4846                           ; 1 bytes @ 0x3
  4847                           
  4848  0023                     ??_TMR1_ReadTimer:	
  4849                           ; 1 bytes @ 0x3
  4850                           
  4851  0023                     ??_ADC_GetConversionResult:	
  4852                           ; 1 bytes @ 0x3
  4853                           
  4854  0023                     ?_SPI_WriteReadBuffer:	
  4855                           ; 1 bytes @ 0x3
  4856                           
  4857  0023                     ?_SPI_WriteBuffer:	
  4858                           ; 1 bytes @ 0x3
  4859                           
  4860  0023                     ?_RF_WriteRegister:	
  4861                           ; 1 bytes @ 0x3
  4862                           
  4863  0023                     ??_RF_ReadRegister:	
  4864                           ; 1 bytes @ 0x3
  4865                           
  4866  0023                     ??_RF_WriteRead:	
  4867                           ; 1 bytes @ 0x3
  4868                           
  4869  0023                     ??_RF_Write:	
  4870                           ; 1 bytes @ 0x3
  4871                           
  4872  0023                     ??_Timeout_setTimeout:	
  4873                           ; 1 bytes @ 0x3
  4874                           
  4875  0023                     I2C2_MasterReadTRBBuild@length:	
  4876                           ; 1 bytes @ 0x3
  4877                           
  4878  0023                     SPI_WriteReadBuffer@bufIn:	
  4879                           ; 1 bytes @ 0x3
  4880                           
  4881  0023                     RF_WriteRegister@val:	
  4882                           ; 1 bytes @ 0x3
  4883                           
  4884  0023                     RF_Write@val:	
  4885                           ; 1 bytes @ 0x3
  4886                           
  4887  0023                     I2C2_MasterWriteTRBBuild@address:	
  4888                           ; 1 bytes @ 0x3
  4889                           
  4890  0023                     limit@min:	
  4891                           ; 2 bytes @ 0x3
  4892                           
  4893  0023                     SPI_WriteBuffer@bufOut:	
  4894                           ; 2 bytes @ 0x3
  4895                           
  4896  0023                     ___lwdiv@dividend:	
  4897                           ; 2 bytes @ 0x3
  4898                           
  4899                           
  4900                           ; 2 bytes @ 0x3
  4901  0023                     	ds	1
  4902  0024                     ??_RF_WriteRegister:	
  4903  0024                     I2C2_MasterTRBInsert@count:	
  4904                           ; 1 bytes @ 0x4
  4905                           
  4906  0024                     SPI_WriteReadBuffer@bufSize:	
  4907                           ; 1 bytes @ 0x4
  4908                           
  4909  0024                     RF_WriteRegister@reg:	
  4910                           ; 1 bytes @ 0x4
  4911                           
  4912  0024                     RF_ReadRegister@reg:	
  4913                           ; 1 bytes @ 0x4
  4914                           
  4915  0024                     RF_WriteRead@val:	
  4916                           ; 1 bytes @ 0x4
  4917                           
  4918  0024                     ___ftpack@exp:	
  4919                           ; 1 bytes @ 0x4
  4920                           
  4921  0024                     I2C2_MasterReadTRBBuild@address:	
  4922                           ; 1 bytes @ 0x4
  4923                           
  4924                           
  4925                           ; 2 bytes @ 0x4
  4926  0024                     	ds	1
  4927  0025                     ??_I2C2_MasterWriteTRBBuild:	
  4928  0025                     ??_Timeout_getGlobalCounter:	
  4929                           ; 1 bytes @ 0x5
  4930                           
  4931  0025                     ??_Wireless_isDataTransmitSuccessful:	
  4932                           ; 1 bytes @ 0x5
  4933                           
  4934  0025                     ??_SPI_WriteReadBuffer:	
  4935                           ; 1 bytes @ 0x5
  4936                           
  4937  0025                     ??_RF_GetStatus:	
  4938                           ; 1 bytes @ 0x5
  4939                           
  4940  0025                     ??_RF_ResetStatusIRQ:	
  4941                           ; 1 bytes @ 0x5
  4942                           
  4943  0025                     ??___lwdiv:	
  4944                           ; 1 bytes @ 0x5
  4945                           
  4946  0025                     SPI_WriteBuffer@bufSize:	
  4947                           ; 1 bytes @ 0x5
  4948                           
  4949  0025                     RF_ReadRegister@val:	
  4950                           ; 1 bytes @ 0x5
  4951                           
  4952  0025                     ___ftpack@sign:	
  4953                           ; 1 bytes @ 0x5
  4954                           
  4955  0025                     limit@max:	
  4956                           ; 1 bytes @ 0x5
  4957                           
  4958  0025                     ___lmul@multiplicand:	
  4959                           ; 2 bytes @ 0x5
  4960                           
  4961  0025                     ___aldiv@dividend:	
  4962                           ; 4 bytes @ 0x5
  4963                           
  4964  0025                     ___lldiv@dividend:	
  4965                           ; 4 bytes @ 0x5
  4966                           
  4967                           
  4968                           ; 4 bytes @ 0x5
  4969  0025                     	ds	1
  4970  0026                     ??_I2C2_MasterReadTRBBuild:	
  4971  0026                     ??___ftpack:	
  4972                           ; 1 bytes @ 0x6
  4973                           
  4974  0026                     ??_SPI_WriteBuffer:	
  4975                           ; 1 bytes @ 0x6
  4976                           
  4977  0026                     ??_RF_DataIsReady:	
  4978                           ; 1 bytes @ 0x6
  4979                           
  4980  0026                     RF_ResetStatusIRQ@flags:	
  4981                           ; 1 bytes @ 0x6
  4982                           
  4983  0026                     Wireless_isDataTransmitSuccessful@status:	
  4984                           ; 1 bytes @ 0x6
  4985                           
  4986  0026                     ___lwdiv@counter:	
  4987                           ; 1 bytes @ 0x6
  4988                           
  4989                           
  4990                           ; 1 bytes @ 0x6
  4991  0026                     	ds	1
  4992  0027                     ??_limit:	
  4993  0027                     I2C2_MasterWriteTRBBuild@ptrb:	
  4994                           ; 1 bytes @ 0x7
  4995                           
  4996  0027                     RF_DataIsReady@channel:	
  4997                           ; 1 bytes @ 0x7
  4998                           
  4999  0027                     ___lwdiv@quotient:	
  5000                           ; 1 bytes @ 0x7
  5001                           
  5002                           
  5003                           ; 2 bytes @ 0x7
  5004  0027                     	ds	1
  5005  0028                     ?_I2C2_MasterWrite:	
  5006  0028                     I2C2_MasterWrite@length:	
  5007                           ; 1 bytes @ 0x8
  5008                           
  5009  0028                     I2C2_MasterReadTRBBuild@ptrb:	
  5010                           ; 1 bytes @ 0x8
  5011                           
  5012  0028                     SPI_WriteReadBuffer@bufOut:	
  5013                           ; 1 bytes @ 0x8
  5014                           
  5015  0028                     SPI_WriteBuffer@i:	
  5016                           ; 1 bytes @ 0x8
  5017                           
  5018  0028                     RF_DataIsReady@status:	
  5019                           ; 1 bytes @ 0x8
  5020                           
  5021  0028                     TMR1_ReadTimer@readVal:	
  5022                           ; 1 bytes @ 0x8
  5023                           
  5024                           
  5025                           ; 2 bytes @ 0x8
  5026  0028                     	ds	1
  5027  0029                     ?_I2C2_MasterRead:	
  5028  0029                     ?_RF_WriteRegisterData:	
  5029                           ; 1 bytes @ 0x9
  5030                           
  5031  0029                     ??___lmul:	
  5032                           ; 1 bytes @ 0x9
  5033                           
  5034  0029                     ??___aldiv:	
  5035                           ; 1 bytes @ 0x9
  5036                           
  5037  0029                     ??___lldiv:	
  5038                           ; 1 bytes @ 0x9
  5039                           
  5040  0029                     ?___altoft:	
  5041                           ; 1 bytes @ 0x9
  5042                           
  5043  0029                     ?___awtoft:	
  5044                           ; 3 bytes @ 0x9
  5045                           
  5046  0029                     ?___lwtoft:	
  5047                           ; 3 bytes @ 0x9
  5048                           
  5049  0029                     SPI_WriteReadBuffer@i:	
  5050                           ; 3 bytes @ 0x9
  5051                           
  5052  0029                     I2C2_MasterWrite@address:	
  5053                           ; 1 bytes @ 0x9
  5054                           
  5055  0029                     I2C2_MasterRead@pdata:	
  5056                           ; 2 bytes @ 0x9
  5057                           
  5058  0029                     RF_WriteRegisterData@buf:	
  5059                           ; 2 bytes @ 0x9
  5060                           
  5061  0029                     ___awtoft@c:	
  5062                           ; 2 bytes @ 0x9
  5063                           
  5064  0029                     ___lwtoft@c:	
  5065                           ; 2 bytes @ 0x9
  5066                           
  5067  0029                     ___lmul@product:	
  5068                           ; 2 bytes @ 0x9
  5069                           
  5070  0029                     ___altoft@c:	
  5071                           ; 4 bytes @ 0x9
  5072                           
  5073                           
  5074                           ; 4 bytes @ 0x9
  5075  0029                     	ds	1
  5076  002A                     ?_RF_ReadRegisterData:	
  5077  002A                     TMR1_ReadTimer@readValHigh:	
  5078                           ; 1 bytes @ 0xA
  5079                           
  5080  002A                     RF_ReadRegisterData@buf:	
  5081                           ; 1 bytes @ 0xA
  5082                           
  5083  002A                     ___aldiv@counter:	
  5084                           ; 1 bytes @ 0xA
  5085                           
  5086  002A                     ___lldiv@quotient:	
  5087                           ; 1 bytes @ 0xA
  5088                           
  5089                           
  5090                           ; 4 bytes @ 0xA
  5091  002A                     	ds	1
  5092  002B                     TMR1_ReadTimer@readValLow:	
  5093  002B                     I2C2_MasterWrite@pflag:	
  5094                           ; 1 bytes @ 0xB
  5095                           
  5096  002B                     I2C2_MasterRead@length:	
  5097                           ; 1 bytes @ 0xB
  5098                           
  5099  002B                     RF_ReadRegisterData@bufSize:	
  5100                           ; 1 bytes @ 0xB
  5101                           
  5102  002B                     RF_WriteRegisterData@bufSize:	
  5103                           ; 1 bytes @ 0xB
  5104                           
  5105  002B                     ___aldiv@sign:	
  5106                           ; 1 bytes @ 0xB
  5107                           
  5108                           
  5109                           ; 1 bytes @ 0xB
  5110  002B                     	ds	1
  5111  002C                     ??_I2C2_MasterWrite:	
  5112  002C                     ??_RF_ReadRegisterData:	
  5113                           ; 1 bytes @ 0xC
  5114                           
  5115  002C                     ??_RF_WriteRegisterData:	
  5116                           ; 1 bytes @ 0xC
  5117                           
  5118  002C                     ??___awtoft:	
  5119                           ; 1 bytes @ 0xC
  5120                           
  5121  002C                     ??___lwtoft:	
  5122                           ; 1 bytes @ 0xC
  5123                           
  5124  002C                     I2C2_MasterRead@address:	
  5125                           ; 1 bytes @ 0xC
  5126                           
  5127  002C                     ___aldiv@quotient:	
  5128                           ; 2 bytes @ 0xC
  5129                           
  5130                           
  5131                           ; 4 bytes @ 0xC
  5132  002C                     	ds	1
  5133  002D                     ??_Timeout_updateCurrentTime:	
  5134  002D                     ??___altoft:	
  5135                           ; 1 bytes @ 0xD
  5136                           
  5137  002D                     RF_WriteRegisterData@reg:	
  5138                           ; 1 bytes @ 0xD
  5139                           
  5140                           
  5141                           ; 1 bytes @ 0xD
  5142  002D                     	ds	1
  5143  002E                     ??_Wireless_init:	
  5144  002E                     ?_RF_TxPayload:	
  5145                           ; 1 bytes @ 0xE
  5146                           
  5147  002E                     I2C2_MasterWrite@pdata:	
  5148                           ; 1 bytes @ 0xE
  5149                           
  5150  002E                     I2C2_MasterRead@pflag:	
  5151                           ; 1 bytes @ 0xE
  5152                           
  5153  002E                     RF_ReadRegisterData@reg:	
  5154                           ; 1 bytes @ 0xE
  5155                           
  5156  002E                     RF_TxPayload@payloadSize:	
  5157                           ; 1 bytes @ 0xE
  5158                           
  5159  002E                     ___awtoft@sign:	
  5160                           ; 1 bytes @ 0xE
  5161                           
  5162  002E                     ___lldiv@counter:	
  5163                           ; 1 bytes @ 0xE
  5164                           
  5165                           
  5166                           ; 1 bytes @ 0xE
  5167  002E                     	ds	1
  5168  002F                     ??_Wireless_wake:	
  5169  002F                     ??_Wireless_sleep:	
  5170                           ; 1 bytes @ 0xF
  5171                           
  5172  002F                     ?_I2C_ByteWrite:	
  5173                           ; 1 bytes @ 0xF
  5174                           
  5175  002F                     ??_Wireless_changeTransmitPower:	
  5176                           ; 1 bytes @ 0xF
  5177                           
  5178  002F                     ??_I2C2_MasterRead:	
  5179                           ; 1 bytes @ 0xF
  5180                           
  5181  002F                     ??_RF_TxPayload:	
  5182                           ; 1 bytes @ 0xF
  5183                           
  5184  002F                     ?_RF_RxPayload:	
  5185                           ; 1 bytes @ 0xF
  5186                           
  5187  002F                     RF_RxPayload@payloadSize:	
  5188                           ; 1 bytes @ 0xF
  5189                           
  5190  002F                     I2C_ByteWrite@pBuffer:	
  5191                           ; 1 bytes @ 0xF
  5192                           
  5193  002F                     ___altoft@exp:	
  5194                           ; 1 bytes @ 0xF
  5195                           
  5196                           
  5197                           ; 1 bytes @ 0xF
  5198  002F                     	ds	1
  5199  0030                     ??_RF_RxPayload:	
  5200  0030                     RF_TxPayload@payload:	
  5201                           ; 1 bytes @ 0x10
  5202                           
  5203  0030                     Wireless_sleep@reg:	
  5204                           ; 1 bytes @ 0x10
  5205                           
  5206  0030                     Wireless_wake@reg:	
  5207                           ; 1 bytes @ 0x10
  5208                           
  5209  0030                     I2C_ByteWrite@WriteAddr:	
  5210                           ; 1 bytes @ 0x10
  5211                           
  5212  0030                     ___altoft@sign:	
  5213                           ; 1 bytes @ 0x10
  5214                           
  5215                           
  5216                           ; 1 bytes @ 0x10
  5217  0030                     	ds	1
  5218  0031                     ??_I2C_ByteWrite:	
  5219  0031                     ?_I2C_BufferRead:	
  5220                           ; 1 bytes @ 0x11
  5221                           
  5222  0031                     ?_Wireless_sendData:	
  5223                           ; 1 bytes @ 0x11
  5224                           
  5225  0031                     ?___ftdiv:	
  5226                           ; 1 bytes @ 0x11
  5227                           
  5228  0031                     Wireless_sendData@length:	
  5229                           ; 3 bytes @ 0x11
  5230                           
  5231  0031                     I2C_BufferRead@pBuffer:	
  5232                           ; 1 bytes @ 0x11
  5233                           
  5234  0031                     ___ftdiv@f2:	
  5235                           ; 2 bytes @ 0x11
  5236                           
  5237  0031                     Timeout_updateCurrentTime@var:	
  5238                           ; 3 bytes @ 0x11
  5239                           
  5240                           
  5241                           ; 4 bytes @ 0x11
  5242  0031                     	ds	1
  5243  0032                     ??_Wireless_sendData:	
  5244  0032                     RF_RxPayload@payload:	
  5245                           ; 1 bytes @ 0x12
  5246                           
  5247  0032                     Wireless_changeTransmitPower@power:	
  5248                           ; 1 bytes @ 0x12
  5249                           
  5250                           
  5251                           ; 1 bytes @ 0x12
  5252  0032                     	ds	1
  5253  0033                     ??_Wireless_checkDataReceived:	
  5254  0033                     Wireless_changeTransmitPower@val:	
  5255                           ; 1 bytes @ 0x13
  5256                           
  5257  0033                     Wireless_sendData@status:	
  5258                           ; 1 bytes @ 0x13
  5259                           
  5260  0033                     I2C_BufferRead@ReadAddr:	
  5261                           ; 1 bytes @ 0x13
  5262                           
  5263                           
  5264                           ; 1 bytes @ 0x13
  5265  0033                     	ds	1
  5266  0034                     Wireless_sendData@payload:	
  5267  0034                     I2C_BufferRead@NumByteToRead:	
  5268                           ; 1 bytes @ 0x14
  5269                           
  5270  0034                     ___ftdiv@f1:	
  5271                           ; 2 bytes @ 0x14
  5272                           
  5273                           
  5274                           ; 3 bytes @ 0x14
  5275  0034                     	ds	1
  5276  0035                     ??_Wireless_determineTransmitPower:	
  5277  0035                     I2C_ByteWrite@slaveAddr:	
  5278                           ; 1 bytes @ 0x15
  5279                           
  5280                           
  5281                           ; 1 bytes @ 0x15
  5282  0035                     	ds	1
  5283  0036                     ??_I2C_BufferRead:	
  5284  0036                     I2C_ByteWrite@data:	
  5285                           ; 1 bytes @ 0x16
  5286                           
  5287                           
  5288                           ; 2 bytes @ 0x16
  5289  0036                     	ds	1
  5290  0037                     ??___ftdiv:	
  5291  0037                     Wireless_checkDataReceived@data:	
  5292                           ; 1 bytes @ 0x17
  5293                           
  5294                           
  5295                           ; 2 bytes @ 0x17
  5296  0037                     	ds	1
  5297  0038                     Wireless_determineTransmitPower@initialise:	
  5298  0038                     I2C_ByteWrite@status:	
  5299                           ; 1 bytes @ 0x18
  5300                           
  5301                           
  5302                           ; 1 bytes @ 0x18
  5303  0038                     	ds	1
  5304  0039                     Wireless_determineTransmitPower@testPayload:	
  5305  0039                     Wireless_checkDataReceived@channel:	
  5306                           ; 1 bytes @ 0x19
  5307                           
  5308                           
  5309                           ; 1 bytes @ 0x19
  5310  0039                     	ds	1
  5311  003A                     Wireless_determineTransmitPower@latestResult:	
  5312  003A                     I2C_BufferRead@slaveAddr:	
  5313                           ; 1 bytes @ 0x1A
  5314                           
  5315                           
  5316                           ; 1 bytes @ 0x1A
  5317  003A                     	ds	1
  5318  003B                     I2C_BufferRead@status:	
  5319  003B                     ___ftdiv@cntr:	
  5320                           ; 1 bytes @ 0x1B
  5321                           
  5322                           
  5323                           ; 1 bytes @ 0x1B
  5324  003B                     	ds	1
  5325  003C                     ??_BMP_init:	
  5326  003C                     ?_HMC5883L_I2C_BufferRead:	
  5327                           ; 1 bytes @ 0x1C
  5328                           
  5329  003C                     HMC5883L_I2C_BufferRead@pBuffer:	
  5330                           ; 1 bytes @ 0x1C
  5331                           
  5332  003C                     ___ftdiv@f3:	
  5333                           ; 2 bytes @ 0x1C
  5334                           
  5335                           
  5336                           ; 3 bytes @ 0x1C
  5337  003C                     	ds	2
  5338  003E                     HMC5883L_I2C_BufferRead@ReadAddr:	
  5339                           
  5340                           ; 1 bytes @ 0x1E
  5341  003E                     	ds	1
  5342  003F                     BMP_init@t:	
  5343  003F                     ___ftdiv@exp:	
  5344                           ; 1 bytes @ 0x1F
  5345                           
  5346  003F                     HMC5883L_I2C_BufferRead@NumByteToRead:	
  5347                           ; 1 bytes @ 0x1F
  5348                           
  5349                           
  5350                           ; 2 bytes @ 0x1F
  5351  003F                     	ds	1
  5352  0040                     ___ftdiv@sign:	
  5353                           
  5354                           ; 1 bytes @ 0x20
  5355  0040                     	ds	1
  5356  0041                     ??_HMC5883L_I2C_BufferRead:	
  5357  0041                     ?_Sensor_getSupplyVoltage:	
  5358                           ; 1 bytes @ 0x21
  5359                           
  5360  0041                     ?___ftneg:	
  5361                           ; 3 bytes @ 0x21
  5362                           
  5363  0041                     ___ftneg@f1:	
  5364                           ; 3 bytes @ 0x21
  5365                           
  5366                           
  5367                           ; 3 bytes @ 0x21
  5368  0041                     	ds	1
  5369  0042                     HMC5883L_I2C_BufferRead@slaveAddr:	
  5370                           
  5371                           ; 1 bytes @ 0x22
  5372  0042                     	ds	1
  5373  0043                     ?_HMC5883L_ReadBits:	
  5374  0043                     HMC5883L_ReadBits@regAddr:	
  5375                           ; 1 bytes @ 0x23
  5376                           
  5377                           
  5378                           ; 1 bytes @ 0x23
  5379  0043                     	ds	1
  5380  0044                     ??_Sensor_getSupplyVoltage:	
  5381  0044                     ??___ftneg:	
  5382                           ; 1 bytes @ 0x24
  5383                           
  5384  0044                     HMC5883L_ReadBits@bitStart:	
  5385                           ; 1 bytes @ 0x24
  5386                           
  5387  0044                     Sensor_getSupplyVoltage@voltage:	
  5388                           ; 1 bytes @ 0x24
  5389                           
  5390                           
  5391                           ; 3 bytes @ 0x24
  5392  0044                     	ds	1
  5393  0045                     HMC5883L_ReadBits@length:	
  5394                           
  5395                           ; 1 bytes @ 0x25
  5396  0045                     	ds	1
  5397  0046                     HMC5883L_ReadBits@data:	
  5398                           
  5399                           ; 1 bytes @ 0x26
  5400  0046                     	ds	1
  5401  0047                     ??_HMC5883L_ReadBits:	
  5402  0047                     Sensor_getSupplyVoltage@res:	
  5403                           ; 1 bytes @ 0x27
  5404                           
  5405                           
  5406                           ; 2 bytes @ 0x27
  5407  0047                     	ds	2
  5408  0049                     ?___ftadd:	
  5409  0049                     ___ftadd@f1:	
  5410                           ; 3 bytes @ 0x29
  5411                           
  5412                           
  5413                           ; 3 bytes @ 0x29
  5414  0049                     	ds	1
  5415  004A                     HMC5883L_ReadBits@slaveAddr:	
  5416                           
  5417                           ; 1 bytes @ 0x2A
  5418  004A                     	ds	1
  5419  004B                     HMC5883L_ReadBits@mask:	
  5420                           
  5421                           ; 1 bytes @ 0x2B
  5422  004B                     	ds	1
  5423  004C                     HMC5883L_ReadBits@tmp:	
  5424  004C                     ___ftadd@f2:	
  5425                           ; 1 bytes @ 0x2C
  5426                           
  5427                           
  5428                           ; 3 bytes @ 0x2C
  5429  004C                     	ds	3
  5430  004F                     ??___ftadd:	
  5431                           
  5432                           ; 1 bytes @ 0x2F
  5433  004F                     	ds	4
  5434  0053                     ___ftadd@sign:	
  5435                           
  5436                           ; 1 bytes @ 0x33
  5437  0053                     	ds	1
  5438  0054                     ___ftadd@exp2:	
  5439                           
  5440                           ; 1 bytes @ 0x34
  5441  0054                     	ds	1
  5442  0055                     ___ftadd@exp1:	
  5443                           
  5444                           ; 1 bytes @ 0x35
  5445  0055                     	ds	1
  5446  0056                     ?___ftmul:	
  5447  0056                     ___ftmul@f1:	
  5448                           ; 3 bytes @ 0x36
  5449                           
  5450                           
  5451                           ; 3 bytes @ 0x36
  5452  0056                     	ds	3
  5453  0059                     ___ftmul@f2:	
  5454                           
  5455                           ; 3 bytes @ 0x39
  5456  0059                     	ds	3
  5457  005C                     ??___ftmul:	
  5458                           
  5459                           ; 1 bytes @ 0x3C
  5460  005C                     	ds	4
  5461  0060                     ___ftmul@exp:	
  5462                           
  5463                           ; 1 bytes @ 0x40
  5464  0060                     	ds	1
  5465  0061                     ___ftmul@f3_as_product:	
  5466                           
  5467                           ; 3 bytes @ 0x41
  5468  0061                     	ds	3
  5469  0064                     ___ftmul@cntr:	
  5470                           
  5471                           ; 1 bytes @ 0x44
  5472  0064                     	ds	1
  5473  0065                     ___ftmul@sign:	
  5474                           
  5475                           ; 1 bytes @ 0x45
  5476  0065                     	ds	1
  5477  0066                     ?___fttol:	
  5478  0066                     ___fttol@f1:	
  5479                           ; 4 bytes @ 0x46
  5480                           
  5481                           
  5482                           ; 3 bytes @ 0x46
  5483  0066                     	ds	4
  5484  006A                     ??___fttol:	
  5485                           
  5486                           ; 1 bytes @ 0x4A
  5487  006A                     	ds	4
  5488                           
  5489                           	psect	maintext
  5490  033D                     __pmaintext:	
  5491 ;;
  5492 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
  5493 ;;
  5494 ;; *************** function _main *****************
  5495 ;; Defined at:
  5496 ;;		line 58 in file "main.c"
  5497 ;; Parameters:    Size  Location     Type
  5498 ;;		None
  5499 ;; Auto vars:     Size  Location     Type
  5500 ;;  doorOpenTime    4    7[BANK3 ] unsigned long 
  5501 ;;  doorClosedUp    4    1[BANK3 ] unsigned long 
  5502 ;;  dur             2    5[BANK3 ] unsigned int 
  5503 ;;  doorStatus      1   11[BANK3 ] enum E3332
  5504 ;;  prevDoorStat    1    0[BANK3 ] enum E3332
  5505 ;; Return value:  Size  Location     Type
  5506 ;;                  1    wreg      void 
  5507 ;; Registers used:
  5508 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5509 ;; Tracked objects:
  5510 ;;		On entry : B1F/0
  5511 ;;		On exit  : 0/0
  5512 ;;		Unchanged: 0/0
  5513 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5514 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5515 ;;      Locals:         0       0       0       0      12       0       0       0       0       0       0       0       
      +0       0
  5516 ;;      Temps:          0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
  5517 ;;      Totals:         0       0       2       0      12       0       0       0       0       0       0       0       
      +0       0
  5518 ;;Total ram usage:       14 bytes
  5519 ;; Hardware stack levels required when called:   12
  5520 ;; This function calls:
  5521 ;;		_BMP_init
  5522 ;;		_BMP_readTemperature
  5523 ;;		_DOOR_init
  5524 ;;		_DOOR_run
  5525 ;;		_SYSTEM_Initialize
  5526 ;;		_Sensor_peripheralSleep
  5527 ;;		_Timeout_getGlobalCounter
  5528 ;;		_Timeout_updateCurrentTime
  5529 ;;		_Wireless_determineTransmitPower
  5530 ;;		_Wireless_init
  5531 ;;		_Wireless_packageData
  5532 ;;		_Wireless_sleep
  5533 ;;		_Wireless_wake
  5534 ;;		___lldiv
  5535 ;;		___lwdiv
  5536 ;;		_setSleepTime
  5537 ;; This function is called by:
  5538 ;;		Startup code after reset
  5539 ;; This function uses a non-reentrant model
  5540 ;;
  5541                           
  5542                           
  5543                           ;psect for function _main
  5544  033D                     _main:	
  5545                           
  5546                           ;main.c: 60: DOOR doorStatus=DOOR_CLOSED,prevDoorStatus=DOOR_CLOSED;
  5547                           
  5548                           ;incstack = 0
  5549                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  5550  033D  0023               	movlb	3	; select bank3
  5551  033E  01DB               	clrf	main@doorStatus^(0+384)
  5552  033F  01D0               	clrf	main@prevDoorStatus^(0+384)
  5553                           
  5554                           ;main.c: 61: unsigned long doorClosedUpdateCounter=0;
  5555  0340  3000               	movlw	0
  5556  0341  00D4               	movwf	(main@doorClosedUpdateCounter+3)^(0+384)
  5557  0342  3000               	movlw	0
  5558  0343  00D3               	movwf	(main@doorClosedUpdateCounter+2)^(0+384)
  5559  0344  3000               	movlw	0
  5560  0345  00D2               	movwf	(main@doorClosedUpdateCounter+1)^(0+384)
  5561  0346  3000               	movlw	0
  5562  0347  00D1               	movwf	main@doorClosedUpdateCounter^(0+384)
  5563                           
  5564                           ;main.c: 62: unsigned long doorOpenTime=0;
  5565  0348  3000               	movlw	0
  5566  0349  00DA               	movwf	(main@doorOpenTime+3)^(0+384)
  5567  034A  3000               	movlw	0
  5568  034B  00D9               	movwf	(main@doorOpenTime+2)^(0+384)
  5569  034C  3000               	movlw	0
  5570  034D  00D8               	movwf	(main@doorOpenTime+1)^(0+384)
  5571  034E  3000               	movlw	0
  5572  034F  00D7               	movwf	main@doorOpenTime^(0+384)
  5573                           
  5574                           ;main.c: 63: unsigned int dur=0;
  5575  0350  01D5               	clrf	main@dur^(0+384)
  5576  0351  01D6               	clrf	(main@dur+1)^(0+384)
  5577                           
  5578                           ;main.c: 66: SYSTEM_Initialize();
  5579  0352  3194  24F2  3183   	fcall	_SYSTEM_Initialize
  5580                           
  5581                           ;main.c: 72: (INTCONbits.GIE = 1);
  5582  0355  178B               	bsf	11,7	;volatile
  5583                           
  5584                           ;main.c: 75: (INTCONbits.PEIE = 1);
  5585  0356  170B               	bsf	11,6	;volatile
  5586                           
  5587                           ;main.c: 82: do { WPUCbits.WPUC5 = 1; } while(0);
  5588  0357  0024               	movlb	4	; select bank4
  5589  0358  168E               	bsf	14,5	;volatile
  5590                           
  5591                           ;main.c: 83: _delay((unsigned long)((1000)*(8000000/4000.0)));
  5592  0359  300B               	movlw	11
  5593  035A  0021               	movlb	1	; select bank1
  5594  035B  00CC               	movwf	(??_main^(0+128)+1)
  5595  035C  3026               	movlw	38
  5596  035D  00CB               	movwf	??_main^(0+128)
  5597  035E  305D               	movlw	93
  5598  035F                     u7087:	
  5599  035F  0B89               	decfsz	9,f
  5600  0360  2B5F               	goto	u7087
  5601  0361  0BCB               	decfsz	??_main^(0+128),f
  5602  0362  2B5F               	goto	u7087
  5603  0363  0BCC               	decfsz	(??_main^(0+128)+1),f
  5604  0364  2B5F               	goto	u7087
  5605  0365  3200               	nop2
  5606                           
  5607                           ;main.c: 84: Sensor_peripheralSleep();
  5608  0366  3192  22E6  3183   	fcall	_Sensor_peripheralSleep
  5609                           
  5610                           ;main.c: 85: Wireless_init();
  5611  0369  318B  236E  3183   	fcall	_Wireless_init
  5612                           
  5613                           ;main.c: 86: BMP_init();
  5614  036C  318A  22FA  3183   	fcall	_BMP_init
  5615                           
  5616                           ;main.c: 91: setSleepTime(10000/1000);
  5617  036F  300A               	movlw	10
  5618  0370  0020               	movlb	0	; select bank0
  5619  0371  00A1               	movwf	setSleepTime@timeSec
  5620  0372  3000               	movlw	0
  5621  0373  00A2               	movwf	setSleepTime@timeSec+1
  5622  0374  3187  27FB  3183   	fcall	_setSleepTime
  5623                           
  5624                           ;main.c: 93: setSleepTime(10000/1000);
  5625  0377  300A               	movlw	10
  5626  0378  0020               	movlb	0	; select bank0
  5627  0379  00A1               	movwf	setSleepTime@timeSec
  5628  037A  3000               	movlw	0
  5629  037B  00A2               	movwf	setSleepTime@timeSec+1
  5630  037C  3187  27FB  3183   	fcall	_setSleepTime
  5631                           
  5632                           ;main.c: 94: DOOR_init();
  5633  037F  3188  2000  3183   	fcall	_DOOR_init
  5634                           
  5635                           ;main.c: 95: do { LATCbits.LATC6 = 1; } while(0);
  5636  0382  0022               	movlb	2	; select bank2
  5637  0383  170E               	bsf	14,6	;volatile
  5638                           
  5639                           ;main.c: 96: _delay((unsigned long)((500)*(8000000/4000.0)));
  5640  0384  3006               	movlw	6
  5641  0385  0021               	movlb	1	; select bank1
  5642  0386  00CC               	movwf	(??_main^(0+128)+1)
  5643  0387  3013               	movlw	19
  5644  0388  00CB               	movwf	??_main^(0+128)
  5645  0389  30AD               	movlw	173
  5646  038A                     u7097:	
  5647  038A  0B89               	decfsz	9,f
  5648  038B  2B8A               	goto	u7097
  5649  038C  0BCB               	decfsz	??_main^(0+128),f
  5650  038D  2B8A               	goto	u7097
  5651  038E  0BCC               	decfsz	(??_main^(0+128)+1),f
  5652  038F  2B8A               	goto	u7097
  5653  0390  3200               	nop2
  5654                           
  5655                           ;main.c: 97: do { LATCbits.LATC6 = 0; } while(0);
  5656  0391  0022               	movlb	2	; select bank2
  5657  0392  130E               	bcf	14,6	;volatile
  5658                           
  5659                           ;main.c: 98: Wireless_wake();
  5660  0393  3195  25B9  3183   	fcall	_Wireless_wake
  5661                           
  5662                           ;main.c: 99: Wireless_determineTransmitPower(1);
  5663  0396  3001               	movlw	1
  5664  0397  318D  250A  3183   	fcall	_Wireless_determineTransmitPower
  5665                           
  5666                           ;main.c: 100: Wireless_packageData(doorStatus,doorOpenTime/1000,BMP_readTemperature());
  5667  039A  3000               	movlw	0
  5668  039B  0020               	movlb	0	; select bank0
  5669  039C  00A4               	movwf	___lldiv@divisor+3
  5670  039D  3000               	movlw	0
  5671  039E  00A3               	movwf	___lldiv@divisor+2
  5672  039F  3003               	movlw	3
  5673  03A0  00A2               	movwf	___lldiv@divisor+1
  5674  03A1  30E8               	movlw	232
  5675  03A2  00A1               	movwf	___lldiv@divisor
  5676  03A3  0023               	movlb	3	; select bank3
  5677  03A4  085A               	movf	(main@doorOpenTime+3)^(0+384),w
  5678  03A5  0020               	movlb	0	; select bank0
  5679  03A6  00A8               	movwf	___lldiv@dividend+3
  5680  03A7  0023               	movlb	3	; select bank3
  5681  03A8  0859               	movf	(main@doorOpenTime+2)^(0+384),w
  5682  03A9  0020               	movlb	0	; select bank0
  5683  03AA  00A7               	movwf	___lldiv@dividend+2
  5684  03AB  0023               	movlb	3	; select bank3
  5685  03AC  0858               	movf	(main@doorOpenTime+1)^(0+384),w
  5686  03AD  0020               	movlb	0	; select bank0
  5687  03AE  00A6               	movwf	___lldiv@dividend+1
  5688  03AF  0023               	movlb	3	; select bank3
  5689  03B0  0857               	movf	main@doorOpenTime^(0+384),w
  5690  03B1  0020               	movlb	0	; select bank0
  5691  03B2  00A5               	movwf	___lldiv@dividend
  5692  03B3  3189  2131  3183   	fcall	___lldiv
  5693  03B6  0020               	movlb	0	; select bank0
  5694  03B7  0821               	movf	?___lldiv,w
  5695  03B8  0021               	movlb	1	; select bank1
  5696  03B9  00CB               	movwf	??_main^(0+128)
  5697  03BA  084B               	movf	??_main^(0+128),w
  5698  03BB  00BA               	movwf	Wireless_packageData@openTime^(0+128)
  5699  03BC  3180  206F  3183   	fcall	_BMP_readTemperature
  5700  03BF  0021               	movlb	1	; select bank1
  5701  03C0  0826               	movf	?_BMP_readTemperature^(0+128),w
  5702  03C1  00BB               	movwf	Wireless_packageData@tempC^(0+128)
  5703  03C2  0827               	movf	(?_BMP_readTemperature+1)^(0+128),w
  5704  03C3  00BC               	movwf	(Wireless_packageData@tempC+1)^(0+128)
  5705  03C4  0828               	movf	(?_BMP_readTemperature+2)^(0+128),w
  5706  03C5  00BD               	movwf	(Wireless_packageData@tempC+2)^(0+128)
  5707  03C6  0023               	movlb	3	; select bank3
  5708  03C7  085B               	movf	main@doorStatus^(0+384),w
  5709  03C8  3186  2685  3183   	fcall	_Wireless_packageData
  5710                           
  5711                           ;main.c: 101: Wireless_sleep();
  5712  03CB  3194  248C  3183   	fcall	_Wireless_sleep
  5713  03CE                     l6685:	
  5714                           ;main.c: 103: while (1)
  5715                           
  5716                           
  5717                           ;main.c: 104: {
  5718                           ;main.c: 105: Timeout_updateCurrentTime();
  5719  03CE  318A  2237  3183   	fcall	_Timeout_updateCurrentTime
  5720                           
  5721                           ;main.c: 106: if(PORTCbits.RC5==0)
  5722  03D1  0020               	movlb	0	; select bank0
  5723  03D2  1A8E               	btfsc	14,5	;volatile
  5724  03D3  2C2B               	goto	l6701
  5725                           
  5726                           ;main.c: 107: {
  5727                           ;main.c: 109: do { LATCbits.LATC6 = 1; } while(0);
  5728  03D4  0022               	movlb	2	; select bank2
  5729  03D5  170E               	bsf	14,6	;volatile
  5730                           
  5731                           ;main.c: 110: _delay((unsigned long)((500)*(8000000/4000.0)));
  5732  03D6  3006               	movlw	6
  5733  03D7  0021               	movlb	1	; select bank1
  5734  03D8  00CC               	movwf	(??_main^(0+128)+1)
  5735  03D9  3013               	movlw	19
  5736  03DA  00CB               	movwf	??_main^(0+128)
  5737  03DB  30AD               	movlw	173
  5738  03DC                     u7107:	
  5739  03DC  0B89               	decfsz	9,f
  5740  03DD  2BDC               	goto	u7107
  5741  03DE  0BCB               	decfsz	??_main^(0+128),f
  5742  03DF  2BDC               	goto	u7107
  5743  03E0  0BCC               	decfsz	(??_main^(0+128)+1),f
  5744  03E1  2BDC               	goto	u7107
  5745  03E2  3200               	nop2
  5746                           
  5747                           ;main.c: 111: do { LATCbits.LATC6 = 0; } while(0);
  5748  03E3  0022               	movlb	2	; select bank2
  5749  03E4  130E               	bcf	14,6	;volatile
  5750                           
  5751                           ;main.c: 112: Wireless_wake();
  5752  03E5  3195  25B9  3183   	fcall	_Wireless_wake
  5753                           
  5754                           ;main.c: 113: dur = Timeout_getGlobalCounter() - doorOpenTime;
  5755  03E8  0023               	movlb	3	; select bank3
  5756  03E9  0957               	comf	main@doorOpenTime^(0+384),w
  5757  03EA  0021               	movlb	1	; select bank1
  5758  03EB  00CB               	movwf	??_main^(0+128)
  5759  03EC  0023               	movlb	3	; select bank3
  5760  03ED  0958               	comf	(main@doorOpenTime+1)^(0+384),w
  5761  03EE  0021               	movlb	1	; select bank1
  5762  03EF  00CC               	movwf	(??_main^(0+128)+1)
  5763  03F0  0ACB               	incf	??_main^(0+128),f
  5764  03F1  1903               	skipnz
  5765  03F2  0ACC               	incf	(??_main^(0+128)+1),f
  5766  03F3  3193  23D7  3183   	fcall	_Timeout_getGlobalCounter
  5767  03F6  0021               	movlb	1	; select bank1
  5768  03F7  084B               	movf	??_main^(0+128),w
  5769  03F8  0020               	movlb	0	; select bank0
  5770  03F9  0721               	addwf	?_Timeout_getGlobalCounter,w
  5771  03FA  0023               	movlb	3	; select bank3
  5772  03FB  00D5               	movwf	main@dur^(0+384)
  5773  03FC  0021               	movlb	1	; select bank1
  5774  03FD  084C               	movf	(??_main+1)^(0+128),w
  5775  03FE  0020               	movlb	0	; select bank0
  5776  03FF  3D22               	addwfc	?_Timeout_getGlobalCounter+1,w
  5777  0400  0023               	movlb	3	; select bank3
  5778  0401  00D6               	movwf	(main@dur+1)^(0+384)
  5779                           
  5780                           ;main.c: 114: Wireless_packageData(doorStatus,dur/1000,BMP_readTemperature());
  5781  0402  30E8               	movlw	232
  5782  0403  0020               	movlb	0	; select bank0
  5783  0404  00A1               	movwf	___lwdiv@divisor
  5784  0405  3003               	movlw	3
  5785  0406  00A2               	movwf	___lwdiv@divisor+1
  5786  0407  0023               	movlb	3	; select bank3
  5787  0408  0856               	movf	(main@dur+1)^(0+384),w
  5788  0409  0020               	movlb	0	; select bank0
  5789  040A  00A4               	movwf	___lwdiv@dividend+1
  5790  040B  0023               	movlb	3	; select bank3
  5791  040C  0855               	movf	main@dur^(0+384),w
  5792  040D  0020               	movlb	0	; select bank0
  5793  040E  00A3               	movwf	___lwdiv@dividend
  5794  040F  3197  278F  3183   	fcall	___lwdiv
  5795  0412  0020               	movlb	0	; select bank0
  5796  0413  0821               	movf	?___lwdiv,w
  5797  0414  0021               	movlb	1	; select bank1
  5798  0415  00CB               	movwf	??_main^(0+128)
  5799  0416  084B               	movf	??_main^(0+128),w
  5800  0417  00BA               	movwf	Wireless_packageData@openTime^(0+128)
  5801  0418  3180  206F  3183   	fcall	_BMP_readTemperature
  5802  041B  0021               	movlb	1	; select bank1
  5803  041C  0826               	movf	?_BMP_readTemperature^(0+128),w
  5804  041D  00BB               	movwf	Wireless_packageData@tempC^(0+128)
  5805  041E  0827               	movf	(?_BMP_readTemperature+1)^(0+128),w
  5806  041F  00BC               	movwf	(Wireless_packageData@tempC+1)^(0+128)
  5807  0420  0828               	movf	(?_BMP_readTemperature+2)^(0+128),w
  5808  0421  00BD               	movwf	(Wireless_packageData@tempC+2)^(0+128)
  5809  0422  0023               	movlb	3	; select bank3
  5810  0423  085B               	movf	main@doorStatus^(0+384),w
  5811  0424  3186  2685  3183   	fcall	_Wireless_packageData
  5812                           
  5813                           ;main.c: 115: Wireless_sleep();
  5814  0427  3194  248C  3183   	fcall	_Wireless_sleep
  5815                           
  5816                           ;main.c: 116: }
  5817  042A  2C33               	goto	l6703
  5818  042B                     l6701:	
  5819                           
  5820                           ;main.c: 117: else
  5821                           ;main.c: 118: doorStatus=DOOR_run();
  5822  042B  3192  22D0  3183   	fcall	_DOOR_run
  5823  042E  0021               	movlb	1	; select bank1
  5824  042F  00CB               	movwf	??_main^(0+128)
  5825  0430  084B               	movf	??_main^(0+128),w
  5826  0431  0023               	movlb	3	; select bank3
  5827  0432  00DB               	movwf	main@doorStatus^(0+384)
  5828  0433                     l6703:	
  5829                           
  5830                           ;main.c: 121: if((doorStatus!=prevDoorStatus && doorStatus!=DOOR_ERROR))
  5831  0433  0023               	movlb	3	; select bank3
  5832  0434  085B               	movf	main@doorStatus^(0+384),w
  5833  0435  0650               	xorwf	main@prevDoorStatus^(0+384),w
  5834  0436  1903               	skipnz
  5835  0437  2CA4               	goto	l6725
  5836  0438  3002               	movlw	2
  5837  0439  065B               	xorwf	main@doorStatus^(0+384),w
  5838  043A  1903               	btfsc	3,2
  5839  043B  2CA4               	goto	l6725
  5840                           
  5841                           ;main.c: 122: {
  5842                           ;main.c: 123: Wireless_wake();
  5843  043C  3195  25B9  3183   	fcall	_Wireless_wake
  5844                           
  5845                           ;main.c: 124: if(doorStatus==DOOR_OPEN)
  5846  043F  0023               	movlb	3	; select bank3
  5847  0440  035B               	decf	main@doorStatus^(0+384),w
  5848  0441  1D03               	btfss	3,2
  5849  0442  2C46               	goto	l6715
  5850                           
  5851                           ;main.c: 125: {
  5852                           ;main.c: 126: Wireless_packageData(doorStatus,0,BMP_readTemperature());
  5853  0443  0021               	movlb	1	; select bank1
  5854  0444  01BA               	clrf	Wireless_packageData@openTime^(0+128)
  5855  0445  2C75               	goto	L4
  5856  0446                     l6715:	
  5857                           ;main.c: 131: }
  5858                           
  5859                           ;main.c: 127: doorOpenTime= Timeout_getGlobalCounter();
  5860                           
  5861                           
  5862                           ;main.c: 132: else
  5863                           ;main.c: 133: {
  5864                           ;main.c: 134: dur = Timeout_getGlobalCounter() - doorOpenTime;
  5865  0446  0957               	comf	main@doorOpenTime^(0+384),w
  5866  0447  0021               	movlb	1	; select bank1
  5867  0448  00CB               	movwf	??_main^(0+128)
  5868  0449  0023               	movlb	3	; select bank3
  5869  044A  0958               	comf	(main@doorOpenTime+1)^(0+384),w
  5870  044B  0021               	movlb	1	; select bank1
  5871  044C  00CC               	movwf	(??_main^(0+128)+1)
  5872  044D  0ACB               	incf	??_main^(0+128),f
  5873  044E  1903               	skipnz
  5874  044F  0ACC               	incf	(??_main^(0+128)+1),f
  5875  0450  3193  23D7  3183   	fcall	_Timeout_getGlobalCounter
  5876  0453  0021               	movlb	1	; select bank1
  5877  0454  084B               	movf	??_main^(0+128),w
  5878  0455  0020               	movlb	0	; select bank0
  5879  0456  0721               	addwf	?_Timeout_getGlobalCounter,w
  5880  0457  0023               	movlb	3	; select bank3
  5881  0458  00D5               	movwf	main@dur^(0+384)
  5882  0459  0021               	movlb	1	; select bank1
  5883  045A  084C               	movf	(??_main+1)^(0+128),w
  5884  045B  0020               	movlb	0	; select bank0
  5885  045C  3D22               	addwfc	?_Timeout_getGlobalCounter+1,w
  5886  045D  0023               	movlb	3	; select bank3
  5887  045E  00D6               	movwf	(main@dur+1)^(0+384)
  5888                           
  5889                           ;main.c: 135: Wireless_packageData(doorStatus,dur/1000,BMP_readTemperature());
  5890  045F  30E8               	movlw	232
  5891  0460  0020               	movlb	0	; select bank0
  5892  0461  00A1               	movwf	___lwdiv@divisor
  5893  0462  3003               	movlw	3
  5894  0463  00A2               	movwf	___lwdiv@divisor+1
  5895  0464  0023               	movlb	3	; select bank3
  5896  0465  0856               	movf	(main@dur+1)^(0+384),w
  5897  0466  0020               	movlb	0	; select bank0
  5898  0467  00A4               	movwf	___lwdiv@dividend+1
  5899  0468  0023               	movlb	3	; select bank3
  5900  0469  0855               	movf	main@dur^(0+384),w
  5901  046A  0020               	movlb	0	; select bank0
  5902  046B  00A3               	movwf	___lwdiv@dividend
  5903  046C  3197  278F  3183   	fcall	___lwdiv
  5904  046F  0020               	movlb	0	; select bank0
  5905  0470  0821               	movf	?___lwdiv,w
  5906  0471  0021               	movlb	1	; select bank1
  5907  0472  00CB               	movwf	??_main^(0+128)
  5908  0473  084B               	movf	??_main^(0+128),w
  5909  0474  00BA               	movwf	Wireless_packageData@openTime^(0+128)
  5910  0475                     L4:	
  5911  0475  3180  206F  3183   	fcall	_BMP_readTemperature
  5912  0478  0021               	movlb	1	; select bank1
  5913  0479  0826               	movf	?_BMP_readTemperature^(0+128),w
  5914  047A  00BB               	movwf	Wireless_packageData@tempC^(0+128)
  5915  047B  0827               	movf	(?_BMP_readTemperature+1)^(0+128),w
  5916  047C  00BC               	movwf	(Wireless_packageData@tempC+1)^(0+128)
  5917  047D  0828               	movf	(?_BMP_readTemperature+2)^(0+128),w
  5918  047E  00BD               	movwf	(Wireless_packageData@tempC+2)^(0+128)
  5919  047F  0023               	movlb	3	; select bank3
  5920  0480  085B               	movf	main@doorStatus^(0+384),w
  5921  0481  3186  2685  3183   	fcall	_Wireless_packageData
  5922                           
  5923                           ;main.c: 136: doorOpenTime = Timeout_getGlobalCounter();
  5924  0484  3193  23D7  3183   	fcall	_Timeout_getGlobalCounter
  5925  0487  0020               	movlb	0	; select bank0
  5926  0488  0824               	movf	?_Timeout_getGlobalCounter+3,w
  5927  0489  0023               	movlb	3	; select bank3
  5928  048A  00DA               	movwf	(main@doorOpenTime+3)^(0+384)
  5929  048B  0020               	movlb	0	; select bank0
  5930  048C  0823               	movf	?_Timeout_getGlobalCounter+2,w
  5931  048D  0023               	movlb	3	; select bank3
  5932  048E  00D9               	movwf	(main@doorOpenTime+2)^(0+384)
  5933  048F  0020               	movlb	0	; select bank0
  5934  0490  0822               	movf	?_Timeout_getGlobalCounter+1,w
  5935  0491  0023               	movlb	3	; select bank3
  5936  0492  00D8               	movwf	(main@doorOpenTime+1)^(0+384)
  5937  0493  0020               	movlb	0	; select bank0
  5938  0494  0821               	movf	?_Timeout_getGlobalCounter,w
  5939  0495  0023               	movlb	3	; select bank3
  5940  0496  00D7               	movwf	main@doorOpenTime^(0+384)
  5941                           
  5942                           ;main.c: 137: }
  5943                           ;main.c: 138: Wireless_sleep();
  5944  0497  3194  248C  3183   	fcall	_Wireless_sleep
  5945                           
  5946                           ;main.c: 139: doorClosedUpdateCounter=0;
  5947  049A  3000               	movlw	0
  5948  049B  0023               	movlb	3	; select bank3
  5949  049C  00D4               	movwf	(main@doorClosedUpdateCounter+3)^(0+384)
  5950  049D  3000               	movlw	0
  5951  049E  00D3               	movwf	(main@doorClosedUpdateCounter+2)^(0+384)
  5952  049F  3000               	movlw	0
  5953  04A0  00D2               	movwf	(main@doorClosedUpdateCounter+1)^(0+384)
  5954  04A1  3000               	movlw	0
  5955  04A2  00D1               	movwf	main@doorClosedUpdateCounter^(0+384)
  5956                           
  5957                           ;main.c: 140: }
  5958  04A3  2D2C               	goto	l6755
  5959  04A4                     l6725:	
  5960                           
  5961                           ;main.c: 141: else if(doorStatus==DOOR_OPEN)
  5962  04A4  035B               	decf	main@doorStatus^(0+384),w
  5963  04A5  1D03               	btfss	3,2
  5964  04A6  2CE1               	goto	l6741
  5965                           
  5966                           ;main.c: 142: {
  5967                           ;main.c: 143: dur = Timeout_getGlobalCounter()-doorOpenTime;
  5968  04A7  0957               	comf	main@doorOpenTime^(0+384),w
  5969  04A8  0021               	movlb	1	; select bank1
  5970  04A9  00CB               	movwf	??_main^(0+128)
  5971  04AA  0023               	movlb	3	; select bank3
  5972  04AB  0958               	comf	(main@doorOpenTime+1)^(0+384),w
  5973  04AC  0021               	movlb	1	; select bank1
  5974  04AD  00CC               	movwf	(??_main^(0+128)+1)
  5975  04AE  0ACB               	incf	??_main^(0+128),f
  5976  04AF  1903               	skipnz
  5977  04B0  0ACC               	incf	(??_main^(0+128)+1),f
  5978  04B1  3193  23D7  3183   	fcall	_Timeout_getGlobalCounter
  5979  04B4  0021               	movlb	1	; select bank1
  5980  04B5  084B               	movf	??_main^(0+128),w
  5981  04B6  0020               	movlb	0	; select bank0
  5982  04B7  0721               	addwf	?_Timeout_getGlobalCounter,w
  5983  04B8  0023               	movlb	3	; select bank3
  5984  04B9  00D5               	movwf	main@dur^(0+384)
  5985  04BA  0021               	movlb	1	; select bank1
  5986  04BB  084C               	movf	(??_main+1)^(0+128),w
  5987  04BC  0020               	movlb	0	; select bank0
  5988  04BD  3D22               	addwfc	?_Timeout_getGlobalCounter+1,w
  5989  04BE  0023               	movlb	3	; select bank3
  5990  04BF  00D6               	movwf	(main@dur+1)^(0+384)
  5991                           
  5992                           ;main.c: 144: if(dur>=60000)
  5993  04C0  30EA               	movlw	234
  5994  04C1  0256               	subwf	(main@dur+1)^(0+384),w
  5995  04C2  3060               	movlw	96
  5996  04C3  1903               	skipnz
  5997  04C4  0255               	subwf	main@dur^(0+384),w
  5998  04C5  1C03               	skipc
  5999  04C6  2D2C               	goto	l6755
  6000                           
  6001                           ;main.c: 145: {
  6002                           ;main.c: 146: Wireless_wake();
  6003  04C7  3195  25B9  3183   	fcall	_Wireless_wake
  6004                           
  6005                           ;main.c: 147: Wireless_packageData(doorStatus,dur/1000,BMP_readTemperature());
  6006  04CA  30E8               	movlw	232
  6007  04CB  0020               	movlb	0	; select bank0
  6008  04CC  00A1               	movwf	___lwdiv@divisor
  6009  04CD  3003               	movlw	3
  6010  04CE  00A2               	movwf	___lwdiv@divisor+1
  6011  04CF  0023               	movlb	3	; select bank3
  6012  04D0  0856               	movf	(main@dur+1)^(0+384),w
  6013  04D1  0020               	movlb	0	; select bank0
  6014  04D2  00A4               	movwf	___lwdiv@dividend+1
  6015  04D3  0023               	movlb	3	; select bank3
  6016  04D4  0855               	movf	main@dur^(0+384),w
  6017  04D5  0020               	movlb	0	; select bank0
  6018  04D6  00A3               	movwf	___lwdiv@dividend
  6019  04D7  3197  278F  3183   	fcall	___lwdiv
  6020  04DA  0020               	movlb	0	; select bank0
  6021  04DB  0821               	movf	?___lwdiv,w
  6022  04DC  0021               	movlb	1	; select bank1
  6023  04DD  00CB               	movwf	??_main^(0+128)
  6024  04DE  084B               	movf	??_main^(0+128),w
  6025  04DF  00BA               	movwf	Wireless_packageData@openTime^(0+128)
  6026  04E0  2CFE               	goto	L5
  6027  04E1                     l6741:	
  6028                           ;main.c: 151: }
  6029                           ;main.c: 153: }
  6030                           
  6031                           ;main.c: 150: doorOpenTime=Timeout_getGlobalCounter();
  6032                           
  6033                           ;main.c: 149: doorClosedUpdateCounter=0;
  6034                           
  6035                           ;main.c: 148: Wireless_sleep();
  6036                           
  6037                           
  6038                           ;main.c: 154: else if(doorClosedUpdateCounter>=sensorUpdatePeriod)
  6039  04E1  0022               	movlb	2	; select bank2
  6040  04E2  0869               	movf	(_sensorUpdatePeriod+3)^(0+256),w
  6041  04E3  0023               	movlb	3	; select bank3
  6042  04E4  0254               	subwf	(main@doorClosedUpdateCounter+3)^(0+384),w
  6043  04E5  1D03               	skipz
  6044  04E6  2CF7               	goto	u6815
  6045  04E7  0022               	movlb	2	; select bank2
  6046  04E8  0868               	movf	(_sensorUpdatePeriod+2)^(0+256),w
  6047  04E9  0023               	movlb	3	; select bank3
  6048  04EA  0253               	subwf	(main@doorClosedUpdateCounter+2)^(0+384),w
  6049  04EB  1D03               	skipz
  6050  04EC  2CF7               	goto	u6815
  6051  04ED  0022               	movlb	2	; select bank2
  6052  04EE  0867               	movf	(_sensorUpdatePeriod+1)^(0+256),w
  6053  04EF  0023               	movlb	3	; select bank3
  6054  04F0  0252               	subwf	(main@doorClosedUpdateCounter+1)^(0+384),w
  6055  04F1  1D03               	skipz
  6056  04F2  2CF7               	goto	u6815
  6057  04F3  0022               	movlb	2	; select bank2
  6058  04F4  0866               	movf	_sensorUpdatePeriod^(0+256),w
  6059  04F5  0023               	movlb	3	; select bank3
  6060  04F6  0251               	subwf	main@doorClosedUpdateCounter^(0+384),w
  6061  04F7                     u6815:	
  6062  04F7  1C03               	skipc
  6063  04F8  2D19               	goto	l6753
  6064                           
  6065                           ;main.c: 155: {
  6066                           ;main.c: 156: Wireless_wake();
  6067  04F9  3195  25B9  3183   	fcall	_Wireless_wake
  6068                           
  6069                           ;main.c: 157: Wireless_packageData(doorStatus,0,BMP_readTemperature());
  6070  04FC  0021               	movlb	1	; select bank1
  6071  04FD  01BA               	clrf	Wireless_packageData@openTime^(0+128)
  6072  04FE                     L5:	
  6073  04FE  3180  206F  3183   	fcall	_BMP_readTemperature
  6074  0501  0021               	movlb	1	; select bank1
  6075  0502  0826               	movf	?_BMP_readTemperature^(0+128),w
  6076  0503  00BB               	movwf	Wireless_packageData@tempC^(0+128)
  6077  0504  0827               	movf	(?_BMP_readTemperature+1)^(0+128),w
  6078  0505  00BC               	movwf	(Wireless_packageData@tempC+1)^(0+128)
  6079  0506  0828               	movf	(?_BMP_readTemperature+2)^(0+128),w
  6080  0507  00BD               	movwf	(Wireless_packageData@tempC+2)^(0+128)
  6081  0508  0023               	movlb	3	; select bank3
  6082  0509  085B               	movf	main@doorStatus^(0+384),w
  6083  050A  3186  2685  3183   	fcall	_Wireless_packageData
  6084                           
  6085                           ;main.c: 158: Wireless_sleep();
  6086  050D  3194  248C  3183   	fcall	_Wireless_sleep
  6087                           
  6088                           ;main.c: 159: doorClosedUpdateCounter=0;
  6089  0510  3000               	movlw	0
  6090  0511  0023               	movlb	3	; select bank3
  6091  0512  00D4               	movwf	(main@doorClosedUpdateCounter+3)^(0+384)
  6092  0513  3000               	movlw	0
  6093  0514  00D3               	movwf	(main@doorClosedUpdateCounter+2)^(0+384)
  6094  0515  3000               	movlw	0
  6095  0516  00D2               	movwf	(main@doorClosedUpdateCounter+1)^(0+384)
  6096  0517  3000               	movlw	0
  6097  0518  00D1               	movwf	main@doorClosedUpdateCounter^(0+384)
  6098  0519                     l6753:	
  6099                           ;main.c: 161: }
  6100                           
  6101                           ;main.c: 160: doorOpenTime = Timeout_getGlobalCounter();
  6102                           
  6103                           
  6104                           ;main.c: 162: else
  6105                           ;main.c: 163: {
  6106                           ;main.c: 165: doorOpenTime=Timeout_getGlobalCounter();
  6107  0519  3193  23D7  3183   	fcall	_Timeout_getGlobalCounter
  6108  051C  0020               	movlb	0	; select bank0
  6109  051D  0824               	movf	?_Timeout_getGlobalCounter+3,w
  6110  051E  0023               	movlb	3	; select bank3
  6111  051F  00DA               	movwf	(main@doorOpenTime+3)^(0+384)
  6112  0520  0020               	movlb	0	; select bank0
  6113  0521  0823               	movf	?_Timeout_getGlobalCounter+2,w
  6114  0522  0023               	movlb	3	; select bank3
  6115  0523  00D9               	movwf	(main@doorOpenTime+2)^(0+384)
  6116  0524  0020               	movlb	0	; select bank0
  6117  0525  0822               	movf	?_Timeout_getGlobalCounter+1,w
  6118  0526  0023               	movlb	3	; select bank3
  6119  0527  00D8               	movwf	(main@doorOpenTime+1)^(0+384)
  6120  0528  0020               	movlb	0	; select bank0
  6121  0529  0821               	movf	?_Timeout_getGlobalCounter,w
  6122  052A  0023               	movlb	3	; select bank3
  6123  052B  00D7               	movwf	main@doorOpenTime^(0+384)
  6124  052C                     l6755:	
  6125                           
  6126                           ;main.c: 166: }
  6127                           ;main.c: 168: prevDoorStatus=doorStatus;
  6128  052C  085B               	movf	main@doorStatus^(0+384),w
  6129  052D  0021               	movlb	1	; select bank1
  6130  052E  00CB               	movwf	??_main^(0+128)
  6131  052F  084B               	movf	??_main^(0+128),w
  6132  0530  0023               	movlb	3	; select bank3
  6133  0531  00D0               	movwf	main@prevDoorStatus^(0+384)
  6134                           
  6135                           ;main.c: 169: doorClosedUpdateCounter+=10000;
  6136  0532  3010               	movlw	16
  6137  0533  07D1               	addwf	main@doorClosedUpdateCounter^(0+384),f
  6138  0534  3027               	movlw	39
  6139  0535  3DD2               	addwfc	(main@doorClosedUpdateCounter+1)^(0+384),f
  6140  0536  3000               	movlw	0
  6141  0537  3DD3               	addwfc	(main@doorClosedUpdateCounter+2)^(0+384),f
  6142  0538  3000               	movlw	0
  6143  0539  3DD4               	addwfc	(main@doorClosedUpdateCounter+3)^(0+384),f
  6144  053A  0063               	sleep	;# 
  6145  053B  2BCE               	goto	l6685
  6146  053C                     __end_of_main:	
  6147                           
  6148                           	psect	text1
  6149  07FB                     __ptext1:	
  6150 ;; *************** function _setSleepTime *****************
  6151 ;; Defined at:
  6152 ;;		line 7 in file "common.c"
  6153 ;; Parameters:    Size  Location     Type
  6154 ;;  timeSec         2    1[BANK0 ] unsigned short 
  6155 ;; Auto vars:     Size  Location     Type
  6156 ;;		None
  6157 ;; Return value:  Size  Location     Type
  6158 ;;                  1    wreg      void 
  6159 ;; Registers used:
  6160 ;;		wreg
  6161 ;; Tracked objects:
  6162 ;;		On entry : 0/0
  6163 ;;		On exit  : 0/0
  6164 ;;		Unchanged: 0/0
  6165 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6166 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6167 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6168 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6169 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6170 ;;Total ram usage:        2 bytes
  6171 ;; Hardware stack levels used:    1
  6172 ;; Hardware stack levels required when called:    4
  6173 ;; This function calls:
  6174 ;;		Nothing
  6175 ;; This function is called by:
  6176 ;;		_main
  6177 ;; This function uses a non-reentrant model
  6178 ;;
  6179                           
  6180                           
  6181                           ;psect for function _setSleepTime
  6182  07FB                     _setSleepTime:	
  6183                           
  6184                           ;common.c: 9: timer1ReloadVal=0x6000;
  6185                           
  6186                           ;incstack = 0
  6187                           ; Regs used in _setSleepTime: [wreg]
  6188  07FB  3000               	movlw	0
  6189  07FC  00FC               	movwf	_timer1ReloadVal	;volatile
  6190  07FD  3060               	movlw	96
  6191  07FE  00FD               	movwf	_timer1ReloadVal+1	;volatile
  6192  07FF  0008               	return
  6193  0800                     __end_of_setSleepTime:	
  6194                           
  6195                           	psect	text2
  6196  178F                     __ptext2:	
  6197 ;; *************** function ___lwdiv *****************
  6198 ;; Defined at:
  6199 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\lwdiv.c"
  6200 ;; Parameters:    Size  Location     Type
  6201 ;;  divisor         2    1[BANK0 ] unsigned int 
  6202 ;;  dividend        2    3[BANK0 ] unsigned int 
  6203 ;; Auto vars:     Size  Location     Type
  6204 ;;  quotient        2    7[BANK0 ] unsigned int 
  6205 ;;  counter         1    6[BANK0 ] unsigned char 
  6206 ;; Return value:  Size  Location     Type
  6207 ;;                  2    1[BANK0 ] unsigned int 
  6208 ;; Registers used:
  6209 ;;		wreg, status,2, status,0
  6210 ;; Tracked objects:
  6211 ;;		On entry : 0/0
  6212 ;;		On exit  : 0/0
  6213 ;;		Unchanged: 0/0
  6214 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6215 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6216 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6217 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6218 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6219 ;;Total ram usage:        8 bytes
  6220 ;; Hardware stack levels used:    1
  6221 ;; Hardware stack levels required when called:    4
  6222 ;; This function calls:
  6223 ;;		Nothing
  6224 ;; This function is called by:
  6225 ;;		_main
  6226 ;; This function uses a non-reentrant model
  6227 ;;
  6228                           
  6229                           
  6230                           ;psect for function ___lwdiv
  6231  178F                     ___lwdiv:	
  6232                           
  6233                           ;incstack = 0
  6234                           ; Regs used in ___lwdiv: [wreg+status,2+status,0]
  6235  178F  0020               	movlb	0	; select bank0
  6236  1790  01A7               	clrf	___lwdiv@quotient
  6237  1791  01A8               	clrf	___lwdiv@quotient+1
  6238  1792  0821               	movf	___lwdiv@divisor,w
  6239  1793  0422               	iorwf	___lwdiv@divisor+1,w
  6240  1794  1903               	btfsc	3,2
  6241  1795  2FBF               	goto	l6587
  6242  1796  01A6               	clrf	___lwdiv@counter
  6243  1797  0AA6               	incf	___lwdiv@counter,f
  6244  1798                     l6575:	
  6245  1798  1BA2               	btfsc	___lwdiv@divisor+1,7
  6246  1799  2FA4               	goto	l6577
  6247  179A  3001               	movlw	1
  6248  179B                     u6525:	
  6249  179B  35A1               	lslf	___lwdiv@divisor,f
  6250  179C  0DA2               	rlf	___lwdiv@divisor+1,f
  6251  179D  0B89               	decfsz	9,f
  6252  179E  2F9B               	goto	u6525
  6253  179F  3001               	movlw	1
  6254  17A0  00A5               	movwf	??___lwdiv
  6255  17A1  0825               	movf	??___lwdiv,w
  6256  17A2  07A6               	addwf	___lwdiv@counter,f
  6257  17A3  2F98               	goto	l6575
  6258  17A4                     l6577:	
  6259  17A4  3001               	movlw	1
  6260  17A5                     u6545:	
  6261  17A5  35A7               	lslf	___lwdiv@quotient,f
  6262  17A6  0DA8               	rlf	___lwdiv@quotient+1,f
  6263  17A7  0B89               	decfsz	9,f
  6264  17A8  2FA5               	goto	u6545
  6265  17A9  0822               	movf	___lwdiv@divisor+1,w
  6266  17AA  0224               	subwf	___lwdiv@dividend+1,w
  6267  17AB  1D03               	skipz
  6268  17AC  2FAF               	goto	u6555
  6269  17AD  0821               	movf	___lwdiv@divisor,w
  6270  17AE  0223               	subwf	___lwdiv@dividend,w
  6271  17AF                     u6555:	
  6272  17AF  1C03               	skipc
  6273  17B0  2FB6               	goto	l6583
  6274  17B1  0821               	movf	___lwdiv@divisor,w
  6275  17B2  02A3               	subwf	___lwdiv@dividend,f
  6276  17B3  0822               	movf	___lwdiv@divisor+1,w
  6277  17B4  3BA4               	subwfb	___lwdiv@dividend+1,f
  6278  17B5  1427               	bsf	___lwdiv@quotient,0
  6279  17B6                     l6583:	
  6280  17B6  3001               	movlw	1
  6281  17B7                     u6565:	
  6282  17B7  36A2               	lsrf	___lwdiv@divisor+1,f
  6283  17B8  0CA1               	rrf	___lwdiv@divisor,f
  6284  17B9  0B89               	decfsz	9,f
  6285  17BA  2FB7               	goto	u6565
  6286  17BB  3001               	movlw	1
  6287  17BC  02A6               	subwf	___lwdiv@counter,f
  6288  17BD  1D03               	btfss	3,2
  6289  17BE  2FA4               	goto	l6577
  6290  17BF                     l6587:	
  6291  17BF  0828               	movf	___lwdiv@quotient+1,w
  6292  17C0  00A2               	movwf	?___lwdiv+1
  6293  17C1  0827               	movf	___lwdiv@quotient,w
  6294  17C2  00A1               	movwf	?___lwdiv
  6295  17C3  0008               	return
  6296  17C4                     __end_of___lwdiv:	
  6297                           
  6298                           	psect	text3
  6299  0931                     __ptext3:	
  6300 ;; *************** function ___lldiv *****************
  6301 ;; Defined at:
  6302 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\lldiv.c"
  6303 ;; Parameters:    Size  Location     Type
  6304 ;;  divisor         4    1[BANK0 ] unsigned long 
  6305 ;;  dividend        4    5[BANK0 ] unsigned long 
  6306 ;; Auto vars:     Size  Location     Type
  6307 ;;  quotient        4   10[BANK0 ] unsigned long 
  6308 ;;  counter         1   14[BANK0 ] unsigned char 
  6309 ;; Return value:  Size  Location     Type
  6310 ;;                  4    1[BANK0 ] unsigned long 
  6311 ;; Registers used:
  6312 ;;		wreg, status,2, status,0
  6313 ;; Tracked objects:
  6314 ;;		On entry : 0/0
  6315 ;;		On exit  : 0/0
  6316 ;;		Unchanged: 0/0
  6317 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6318 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6319 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6320 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6321 ;;      Totals:         0      14       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6322 ;;Total ram usage:       14 bytes
  6323 ;; Hardware stack levels used:    1
  6324 ;; Hardware stack levels required when called:    4
  6325 ;; This function calls:
  6326 ;;		Nothing
  6327 ;; This function is called by:
  6328 ;;		_main
  6329 ;; This function uses a non-reentrant model
  6330 ;;
  6331                           
  6332                           
  6333                           ;psect for function ___lldiv
  6334  0931                     ___lldiv:	
  6335                           
  6336                           ;incstack = 0
  6337                           ; Regs used in ___lldiv: [wreg+status,2+status,0]
  6338  0931  3000               	movlw	0
  6339  0932  0020               	movlb	0	; select bank0
  6340  0933  00AD               	movwf	___lldiv@quotient+3
  6341  0934  3000               	movlw	0
  6342  0935  00AC               	movwf	___lldiv@quotient+2
  6343  0936  3000               	movlw	0
  6344  0937  00AB               	movwf	___lldiv@quotient+1
  6345  0938  3000               	movlw	0
  6346  0939  00AA               	movwf	___lldiv@quotient
  6347  093A  0824               	movf	___lldiv@divisor+3,w
  6348  093B  0423               	iorwf	___lldiv@divisor+2,w
  6349  093C  0422               	iorwf	___lldiv@divisor+1,w
  6350  093D  0421               	iorwf	___lldiv@divisor,w
  6351  093E  1903               	skipnz
  6352  093F  297B               	goto	l6561
  6353  0940  01AE               	clrf	___lldiv@counter
  6354  0941  0AAE               	incf	___lldiv@counter,f
  6355  0942                     l6547:	
  6356  0942  1BA4               	btfsc	___lldiv@divisor+3,7
  6357  0943  2950               	goto	l6549
  6358  0944  3001               	movlw	1
  6359  0945                     u6455:	
  6360  0945  35A1               	lslf	___lldiv@divisor,f
  6361  0946  0DA2               	rlf	___lldiv@divisor+1,f
  6362  0947  0DA3               	rlf	___lldiv@divisor+2,f
  6363  0948  0DA4               	rlf	___lldiv@divisor+3,f
  6364  0949  0B89               	decfsz	9,f
  6365  094A  2945               	goto	u6455
  6366  094B  3001               	movlw	1
  6367  094C  00A9               	movwf	??___lldiv
  6368  094D  0829               	movf	??___lldiv,w
  6369  094E  07AE               	addwf	___lldiv@counter,f
  6370  094F  2942               	goto	l6547
  6371  0950                     l6549:	
  6372  0950  3001               	movlw	1
  6373  0951                     u6475:	
  6374  0951  35AA               	lslf	___lldiv@quotient,f
  6375  0952  0DAB               	rlf	___lldiv@quotient+1,f
  6376  0953  0DAC               	rlf	___lldiv@quotient+2,f
  6377  0954  0DAD               	rlf	___lldiv@quotient+3,f
  6378  0955  0B89               	decfsz	9,f
  6379  0956  2951               	goto	u6475
  6380  0957  0824               	movf	___lldiv@divisor+3,w
  6381  0958  0228               	subwf	___lldiv@dividend+3,w
  6382  0959  1D03               	skipz
  6383  095A  2965               	goto	u6485
  6384  095B  0823               	movf	___lldiv@divisor+2,w
  6385  095C  0227               	subwf	___lldiv@dividend+2,w
  6386  095D  1D03               	skipz
  6387  095E  2965               	goto	u6485
  6388  095F  0822               	movf	___lldiv@divisor+1,w
  6389  0960  0226               	subwf	___lldiv@dividend+1,w
  6390  0961  1D03               	skipz
  6391  0962  2965               	goto	u6485
  6392  0963  0821               	movf	___lldiv@divisor,w
  6393  0964  0225               	subwf	___lldiv@dividend,w
  6394  0965                     u6485:	
  6395  0965  1C03               	skipc
  6396  0966  2970               	goto	l6557
  6397  0967  0821               	movf	___lldiv@divisor,w
  6398  0968  02A5               	subwf	___lldiv@dividend,f
  6399  0969  0822               	movf	___lldiv@divisor+1,w
  6400  096A  3BA6               	subwfb	___lldiv@dividend+1,f
  6401  096B  0823               	movf	___lldiv@divisor+2,w
  6402  096C  3BA7               	subwfb	___lldiv@dividend+2,f
  6403  096D  0824               	movf	___lldiv@divisor+3,w
  6404  096E  3BA8               	subwfb	___lldiv@dividend+3,f
  6405  096F  142A               	bsf	___lldiv@quotient,0
  6406  0970                     l6557:	
  6407  0970  3001               	movlw	1
  6408  0971                     u6495:	
  6409  0971  36A4               	lsrf	___lldiv@divisor+3,f
  6410  0972  0CA3               	rrf	___lldiv@divisor+2,f
  6411  0973  0CA2               	rrf	___lldiv@divisor+1,f
  6412  0974  0CA1               	rrf	___lldiv@divisor,f
  6413  0975  0B89               	decfsz	9,f
  6414  0976  2971               	goto	u6495
  6415  0977  3001               	movlw	1
  6416  0978  02AE               	subwf	___lldiv@counter,f
  6417  0979  1D03               	btfss	3,2
  6418  097A  2950               	goto	l6549
  6419  097B                     l6561:	
  6420  097B  082D               	movf	___lldiv@quotient+3,w
  6421  097C  00A4               	movwf	?___lldiv+3
  6422  097D  082C               	movf	___lldiv@quotient+2,w
  6423  097E  00A3               	movwf	?___lldiv+2
  6424  097F  082B               	movf	___lldiv@quotient+1,w
  6425  0980  00A2               	movwf	?___lldiv+1
  6426  0981  082A               	movf	___lldiv@quotient,w
  6427  0982  00A1               	movwf	?___lldiv
  6428  0983  0008               	return
  6429  0984                     __end_of___lldiv:	
  6430                           
  6431                           	psect	text4
  6432  15B9                     __ptext4:	
  6433 ;; *************** function _Wireless_wake *****************
  6434 ;; Defined at:
  6435 ;;		line 192 in file "wireless.c"
  6436 ;; Parameters:    Size  Location     Type
  6437 ;;		None
  6438 ;; Auto vars:     Size  Location     Type
  6439 ;;  reg             1   16[BANK0 ] unsigned char 
  6440 ;; Return value:  Size  Location     Type
  6441 ;;                  1    wreg      void 
  6442 ;; Registers used:
  6443 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6444 ;; Tracked objects:
  6445 ;;		On entry : 0/0
  6446 ;;		On exit  : 0/0
  6447 ;;		Unchanged: 0/0
  6448 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6449 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6450 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6451 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6452 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6453 ;;Total ram usage:        2 bytes
  6454 ;; Hardware stack levels used:    1
  6455 ;; Hardware stack levels required when called:    8
  6456 ;; This function calls:
  6457 ;;		_RF_ReadRegisterData
  6458 ;;		_RF_WriteRegister
  6459 ;; This function is called by:
  6460 ;;		_main
  6461 ;; This function uses a non-reentrant model
  6462 ;;
  6463                           
  6464                           
  6465                           ;psect for function _Wireless_wake
  6466  15B9                     _Wireless_wake:	
  6467                           
  6468                           ;wireless.c: 194: u8 reg;
  6469                           ;wireless.c: 196: RF_ReadRegisterData(0x00 , &reg, 1);
  6470                           
  6471                           ;incstack = 0
  6472                           ; Regs used in _Wireless_wake: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  6473  15B9  3030               	movlw	(low (Wireless_wake@reg| 0))& (0+255)
  6474  15BA  0020               	movlb	0	; select bank0
  6475  15BB  00AF               	movwf	??_Wireless_wake
  6476  15BC  082F               	movf	??_Wireless_wake,w
  6477  15BD  00AA               	movwf	RF_ReadRegisterData@buf
  6478  15BE  01AB               	clrf	RF_ReadRegisterData@bufSize
  6479  15BF  0AAB               	incf	RF_ReadRegisterData@bufSize,f
  6480  15C0  3000               	movlw	0
  6481  15C1  3195  259C  3195   	fcall	_RF_ReadRegisterData
  6482                           
  6483                           ;wireless.c: 197: reg|=0b00000010;
  6484  15C4  0020               	movlb	0	; select bank0
  6485  15C5  14B0               	bsf	Wireless_wake@reg,1
  6486                           
  6487                           ;wireless.c: 198: RF_WriteRegister(0x00,reg);
  6488  15C6  0830               	movf	Wireless_wake@reg,w
  6489  15C7  00AF               	movwf	??_Wireless_wake
  6490  15C8  082F               	movf	??_Wireless_wake,w
  6491  15C9  00A3               	movwf	RF_WriteRegister@val
  6492  15CA  3000               	movlw	0
  6493  15CB  3194  2449  3195   	fcall	_RF_WriteRegister
  6494                           
  6495                           ;wireless.c: 199: _delay((unsigned long)((2)*(8000000/4000.0)));
  6496  15CE  3006               	movlw	6
  6497  15CF  0020               	movlb	0	; select bank0
  6498  15D0  00AF               	movwf	??_Wireless_wake
  6499  15D1  3030               	movlw	48
  6500  15D2                     u7117:	
  6501  15D2  0B89               	decfsz	9,f
  6502  15D3  2DD2               	goto	u7117
  6503  15D4  0BAF               	decfsz	??_Wireless_wake,f
  6504  15D5  2DD2               	goto	u7117
  6505  15D6  0000               	nop
  6506  15D7  0008               	return
  6507  15D8                     __end_of_Wireless_wake:	
  6508                           
  6509                           	psect	text5
  6510  148C                     __ptext5:	
  6511 ;; *************** function _Wireless_sleep *****************
  6512 ;; Defined at:
  6513 ;;		line 182 in file "wireless.c"
  6514 ;; Parameters:    Size  Location     Type
  6515 ;;		None
  6516 ;; Auto vars:     Size  Location     Type
  6517 ;;  reg             1   16[BANK0 ] unsigned char 
  6518 ;; Return value:  Size  Location     Type
  6519 ;;                  1    wreg      void 
  6520 ;; Registers used:
  6521 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6522 ;; Tracked objects:
  6523 ;;		On entry : 0/0
  6524 ;;		On exit  : 0/0
  6525 ;;		Unchanged: 0/0
  6526 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6527 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6528 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6529 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6530 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6531 ;;Total ram usage:        2 bytes
  6532 ;; Hardware stack levels used:    1
  6533 ;; Hardware stack levels required when called:    8
  6534 ;; This function calls:
  6535 ;;		_RF_ReadRegisterData
  6536 ;;		_RF_WriteRegister
  6537 ;; This function is called by:
  6538 ;;		_main
  6539 ;; This function uses a non-reentrant model
  6540 ;;
  6541                           
  6542                           
  6543                           ;psect for function _Wireless_sleep
  6544  148C                     _Wireless_sleep:	
  6545                           
  6546                           ;wireless.c: 184: u8 reg;
  6547                           ;wireless.c: 186: RF_ReadRegisterData(0x00 , &reg, 1);
  6548                           
  6549                           ;incstack = 0
  6550                           ; Regs used in _Wireless_sleep: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  6551  148C  3030               	movlw	(low (Wireless_sleep@reg| 0))& (0+255)
  6552  148D  0020               	movlb	0	; select bank0
  6553  148E  00AF               	movwf	??_Wireless_sleep
  6554  148F  082F               	movf	??_Wireless_sleep,w
  6555  1490  00AA               	movwf	RF_ReadRegisterData@buf
  6556  1491  01AB               	clrf	RF_ReadRegisterData@bufSize
  6557  1492  0AAB               	incf	RF_ReadRegisterData@bufSize,f
  6558  1493  3000               	movlw	0
  6559  1494  3195  259C  3194   	fcall	_RF_ReadRegisterData
  6560                           
  6561                           ;wireless.c: 187: reg&=0b11111101;
  6562  1497  30FD               	movlw	253
  6563  1498  0020               	movlb	0	; select bank0
  6564  1499  00AF               	movwf	??_Wireless_sleep
  6565  149A  082F               	movf	??_Wireless_sleep,w
  6566  149B  05B0               	andwf	Wireless_sleep@reg,f
  6567                           
  6568                           ;wireless.c: 188: RF_WriteRegister(0x00,reg);
  6569  149C  0830               	movf	Wireless_sleep@reg,w
  6570  149D  00AF               	movwf	??_Wireless_sleep
  6571  149E  082F               	movf	??_Wireless_sleep,w
  6572  149F  00A3               	movwf	RF_WriteRegister@val
  6573  14A0  3000               	movlw	0
  6574  14A1  3194  2449         	fcall	_RF_WriteRegister
  6575  14A3  0008               	return
  6576  14A4                     __end_of_Wireless_sleep:	
  6577                           
  6578                           	psect	text6
  6579  0685                     __ptext6:	
  6580 ;; *************** function _Wireless_packageData *****************
  6581 ;; Defined at:
  6582 ;;		line 140 in file "wireless.c"
  6583 ;; Parameters:    Size  Location     Type
  6584 ;;  status          1    wreg     enum E3332
  6585 ;;  openTime        1   26[BANK1 ] unsigned char 
  6586 ;;  tempC           3   27[BANK1 ] float 
  6587 ;; Auto vars:     Size  Location     Type
  6588 ;;  status          1   40[BANK1 ] enum E3332
  6589 ;;  data            7   32[BANK1 ] unsigned char [7]
  6590 ;;  t1              2   41[BANK1 ] unsigned int 
  6591 ;;  var             1   39[BANK1 ] unsigned char 
  6592 ;; Return value:  Size  Location     Type
  6593 ;;                  1    wreg      void 
  6594 ;; Registers used:
  6595 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6596 ;; Tracked objects:
  6597 ;;		On entry : 0/0
  6598 ;;		On exit  : 0/0
  6599 ;;		Unchanged: 0/0
  6600 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6601 ;;      Params:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0
  6602 ;;      Locals:         0       0      11       0       0       0       0       0       0       0       0       0       
      +0       0
  6603 ;;      Temps:          0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
  6604 ;;      Totals:         0       0      17       0       0       0       0       0       0       0       0       0       
      +0       0
  6605 ;;Total ram usage:       17 bytes
  6606 ;; Hardware stack levels used:    1
  6607 ;; Hardware stack levels required when called:   11
  6608 ;; This function calls:
  6609 ;;		_Diag_getSensorHealth
  6610 ;;		_Sensor_getSupplyVoltage
  6611 ;;		_Wireless_checkDataReceived
  6612 ;;		_Wireless_determineTransmitPower
  6613 ;;		_Wireless_sendData
  6614 ;;		___aldiv
  6615 ;;		___ftadd
  6616 ;;		___ftmul
  6617 ;;		___fttol
  6618 ;; This function is called by:
  6619 ;;		_main
  6620 ;; This function uses a non-reentrant model
  6621 ;;
  6622                           
  6623                           
  6624                           ;psect for function _Wireless_packageData
  6625  0685                     _Wireless_packageData:	
  6626                           
  6627                           ;incstack = 0
  6628                           ; Regs used in _Wireless_packageData: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6629                           ;Wireless_packageData@status stored from wreg
  6630  0685  0021               	movlb	1	; select bank1
  6631  0686  00C8               	movwf	Wireless_packageData@status^(0+128)
  6632                           
  6633                           ;wireless.c: 150: tempC+=50;
  6634  0687  3000               	movlw	0
  6635  0688  0020               	movlb	0	; select bank0
  6636  0689  00C9               	movwf	___ftadd@f1
  6637  068A  3048               	movlw	72
  6638  068B  00CA               	movwf	___ftadd@f1+1
  6639  068C  3042               	movlw	66
  6640  068D  00CB               	movwf	___ftadd@f1+2
  6641  068E  0021               	movlb	1	; select bank1
  6642  068F  083B               	movf	Wireless_packageData@tempC^(0+128),w
  6643  0690  0020               	movlb	0	; select bank0
  6644  0691  00CC               	movwf	___ftadd@f2
  6645  0692  0021               	movlb	1	; select bank1
  6646  0693  083C               	movf	(Wireless_packageData@tempC+1)^(0+128),w
  6647  0694  0020               	movlb	0	; select bank0
  6648  0695  00CD               	movwf	___ftadd@f2+1
  6649  0696  0021               	movlb	1	; select bank1
  6650  0697  083D               	movf	(Wireless_packageData@tempC+2)^(0+128),w
  6651  0698  0020               	movlb	0	; select bank0
  6652  0699  00CE               	movwf	___ftadd@f2+2
  6653  069A  318F  270A  3186   	fcall	___ftadd
  6654  069D  0020               	movlb	0	; select bank0
  6655  069E  0849               	movf	?___ftadd,w
  6656  069F  0021               	movlb	1	; select bank1
  6657  06A0  00BB               	movwf	Wireless_packageData@tempC^(0+128)
  6658  06A1  0020               	movlb	0	; select bank0
  6659  06A2  084A               	movf	?___ftadd+1,w
  6660  06A3  0021               	movlb	1	; select bank1
  6661  06A4  00BC               	movwf	(Wireless_packageData@tempC+1)^(0+128)
  6662  06A5  0020               	movlb	0	; select bank0
  6663  06A6  084B               	movf	?___ftadd+2,w
  6664  06A7  0021               	movlb	1	; select bank1
  6665  06A8  00BD               	movwf	(Wireless_packageData@tempC+2)^(0+128)
  6666                           
  6667                           ;wireless.c: 151: tempC*=10;
  6668  06A9  3000               	movlw	0
  6669  06AA  0020               	movlb	0	; select bank0
  6670  06AB  00D6               	movwf	___ftmul@f1
  6671  06AC  3020               	movlw	32
  6672  06AD  00D7               	movwf	___ftmul@f1+1
  6673  06AE  3041               	movlw	65
  6674  06AF  00D8               	movwf	___ftmul@f1+2
  6675  06B0  0021               	movlb	1	; select bank1
  6676  06B1  083B               	movf	Wireless_packageData@tempC^(0+128),w
  6677  06B2  0020               	movlb	0	; select bank0
  6678  06B3  00D9               	movwf	___ftmul@f2
  6679  06B4  0021               	movlb	1	; select bank1
  6680  06B5  083C               	movf	(Wireless_packageData@tempC+1)^(0+128),w
  6681  06B6  0020               	movlb	0	; select bank0
  6682  06B7  00DA               	movwf	___ftmul@f2+1
  6683  06B8  0021               	movlb	1	; select bank1
  6684  06B9  083D               	movf	(Wireless_packageData@tempC+2)^(0+128),w
  6685  06BA  0020               	movlb	0	; select bank0
  6686  06BB  00DB               	movwf	___ftmul@f2+2
  6687  06BC  318E  2656  3186   	fcall	___ftmul
  6688  06BF  0020               	movlb	0	; select bank0
  6689  06C0  0856               	movf	?___ftmul,w
  6690  06C1  0021               	movlb	1	; select bank1
  6691  06C2  00BB               	movwf	Wireless_packageData@tempC^(0+128)
  6692  06C3  0020               	movlb	0	; select bank0
  6693  06C4  0857               	movf	?___ftmul+1,w
  6694  06C5  0021               	movlb	1	; select bank1
  6695  06C6  00BC               	movwf	(Wireless_packageData@tempC+1)^(0+128)
  6696  06C7  0020               	movlb	0	; select bank0
  6697  06C8  0858               	movf	?___ftmul+2,w
  6698  06C9  0021               	movlb	1	; select bank1
  6699  06CA  00BD               	movwf	(Wireless_packageData@tempC+2)^(0+128)
  6700                           
  6701                           ;wireless.c: 153: unsigned int t1 = tempC;
  6702  06CB  083B               	movf	Wireless_packageData@tempC^(0+128),w
  6703  06CC  0020               	movlb	0	; select bank0
  6704  06CD  00E6               	movwf	___fttol@f1
  6705  06CE  0021               	movlb	1	; select bank1
  6706  06CF  083C               	movf	(Wireless_packageData@tempC+1)^(0+128),w
  6707  06D0  0020               	movlb	0	; select bank0
  6708  06D1  00E7               	movwf	___fttol@f1+1
  6709  06D2  0021               	movlb	1	; select bank1
  6710  06D3  083D               	movf	(Wireless_packageData@tempC+2)^(0+128),w
  6711  06D4  0020               	movlb	0	; select bank0
  6712  06D5  00E8               	movwf	___fttol@f1+2
  6713  06D6  318C  246B  3186   	fcall	___fttol
  6714  06D9  0020               	movlb	0	; select bank0
  6715  06DA  0867               	movf	?___fttol+1,w
  6716  06DB  0021               	movlb	1	; select bank1
  6717  06DC  00CA               	movwf	(Wireless_packageData@t1+1)^(0+128)
  6718  06DD  0020               	movlb	0	; select bank0
  6719  06DE  0866               	movf	?___fttol,w
  6720  06DF  0021               	movlb	1	; select bank1
  6721  06E0  00C9               	movwf	Wireless_packageData@t1^(0+128)
  6722                           
  6723                           ;wireless.c: 154: char var;
  6724                           ;wireless.c: 155: char data[7];
  6725                           ;wireless.c: 157: status<<=4;
  6726  06E1  0EC8               	swapf	Wireless_packageData@status^(0+128),f
  6727  06E2  30F0               	movlw	240
  6728  06E3  05C8               	andwf	Wireless_packageData@status^(0+128),f
  6729                           
  6730                           ;wireless.c: 158: var=Diag_getSensorHealth();
  6731  06E4  3193  23FA  3186   	fcall	_Diag_getSensorHealth
  6732  06E7  0021               	movlb	1	; select bank1
  6733  06E8  00BE               	movwf	??_Wireless_packageData^(0+128)
  6734  06E9  083E               	movf	??_Wireless_packageData^(0+128),w
  6735  06EA  00C7               	movwf	Wireless_packageData@var^(0+128)
  6736                           
  6737                           ;wireless.c: 159: status|=var;
  6738  06EB  0847               	movf	Wireless_packageData@var^(0+128),w
  6739  06EC  00BE               	movwf	??_Wireless_packageData^(0+128)
  6740  06ED  083E               	movf	??_Wireless_packageData^(0+128),w
  6741  06EE  04C8               	iorwf	Wireless_packageData@status^(0+128),f
  6742                           
  6743                           ;wireless.c: 160: status| = (currentTransmitPower<<2);
  6744  06EF  0861               	movf	_currentTransmitPower^(0+128),w
  6745  06F0  00BE               	movwf	??_Wireless_packageData^(0+128)
  6746  06F1  3001               	movlw	1
  6747  06F2                     u6345:	
  6748  06F2  35BE               	lslf	??_Wireless_packageData^(0+128),f
  6749  06F3  3EFF               	addlw	-1
  6750  06F4  1D03               	skipz
  6751  06F5  2EF2               	goto	u6345
  6752  06F6  353E               	lslf	??_Wireless_packageData^(0+128),w
  6753  06F7  00BF               	movwf	(??_Wireless_packageData+1)^(0+128)
  6754  06F8  083F               	movf	(??_Wireless_packageData+1)^(0+128),w
  6755  06F9  04C8               	iorwf	Wireless_packageData@status^(0+128),f
  6756                           
  6757                           ;wireless.c: 163: data[0]=status;
  6758  06FA  0848               	movf	Wireless_packageData@status^(0+128),w
  6759  06FB  00BE               	movwf	??_Wireless_packageData^(0+128)
  6760  06FC  083E               	movf	??_Wireless_packageData^(0+128),w
  6761  06FD  00C0               	movwf	Wireless_packageData@data^(0+128)
  6762                           
  6763                           ;wireless.c: 164: data[1]=openTime;
  6764  06FE  083A               	movf	Wireless_packageData@openTime^(0+128),w
  6765  06FF  00BE               	movwf	??_Wireless_packageData^(0+128)
  6766  0700  083E               	movf	??_Wireless_packageData^(0+128),w
  6767  0701  00C1               	movwf	(Wireless_packageData@data^(0+128)+1)
  6768                           
  6769                           ;wireless.c: 165: data[2]=t1>>8;
  6770  0702  084A               	movf	(Wireless_packageData@t1+1)^(0+128),w
  6771  0703  00BE               	movwf	??_Wireless_packageData^(0+128)
  6772  0704  083E               	movf	??_Wireless_packageData^(0+128),w
  6773  0705  00C2               	movwf	(Wireless_packageData@data^(0+128)+2)
  6774                           
  6775                           ;wireless.c: 166: data[3]= t1 & 0xFF;
  6776  0706  0849               	movf	Wireless_packageData@t1^(0+128),w
  6777  0707  00BE               	movwf	??_Wireless_packageData^(0+128)
  6778  0708  083E               	movf	??_Wireless_packageData^(0+128),w
  6779  0709  00C3               	movwf	(Wireless_packageData@data^(0+128)+3)
  6780                           
  6781                           ;wireless.c: 167: t1=(float)(Sensor_getSupplyVoltage()-1)*100;
  6782  070A  3188  2059  3186   	fcall	_Sensor_getSupplyVoltage
  6783  070D  0020               	movlb	0	; select bank0
  6784  070E  0841               	movf	?_Sensor_getSupplyVoltage,w
  6785  070F  00CC               	movwf	___ftadd@f2
  6786  0710  0842               	movf	?_Sensor_getSupplyVoltage+1,w
  6787  0711  00CD               	movwf	___ftadd@f2+1
  6788  0712  0843               	movf	?_Sensor_getSupplyVoltage+2,w
  6789  0713  00CE               	movwf	___ftadd@f2+2
  6790  0714  3000               	movlw	0
  6791  0715  00C9               	movwf	___ftadd@f1
  6792  0716  3080               	movlw	128
  6793  0717  00CA               	movwf	___ftadd@f1+1
  6794  0718  30BF               	movlw	191
  6795  0719  00CB               	movwf	___ftadd@f1+2
  6796  071A  318F  270A  3186   	fcall	___ftadd
  6797  071D  0020               	movlb	0	; select bank0
  6798  071E  0849               	movf	?___ftadd,w
  6799  071F  00D9               	movwf	___ftmul@f2
  6800  0720  084A               	movf	?___ftadd+1,w
  6801  0721  00DA               	movwf	___ftmul@f2+1
  6802  0722  084B               	movf	?___ftadd+2,w
  6803  0723  00DB               	movwf	___ftmul@f2+2
  6804  0724  3000               	movlw	0
  6805  0725  00D6               	movwf	___ftmul@f1
  6806  0726  30C8               	movlw	200
  6807  0727  00D7               	movwf	___ftmul@f1+1
  6808  0728  3042               	movlw	66
  6809  0729  00D8               	movwf	___ftmul@f1+2
  6810  072A  318E  2656  3186   	fcall	___ftmul
  6811  072D  0020               	movlb	0	; select bank0
  6812  072E  0856               	movf	?___ftmul,w
  6813  072F  00E6               	movwf	___fttol@f1
  6814  0730  0857               	movf	?___ftmul+1,w
  6815  0731  00E7               	movwf	___fttol@f1+1
  6816  0732  0858               	movf	?___ftmul+2,w
  6817  0733  00E8               	movwf	___fttol@f1+2
  6818  0734  318C  246B  3186   	fcall	___fttol
  6819  0737  0020               	movlb	0	; select bank0
  6820  0738  0867               	movf	?___fttol+1,w
  6821  0739  0021               	movlb	1	; select bank1
  6822  073A  00CA               	movwf	(Wireless_packageData@t1+1)^(0+128)
  6823  073B  0020               	movlb	0	; select bank0
  6824  073C  0866               	movf	?___fttol,w
  6825  073D  0021               	movlb	1	; select bank1
  6826  073E  00C9               	movwf	Wireless_packageData@t1^(0+128)
  6827                           
  6828                           ;wireless.c: 168: data[4]=t1;
  6829  073F  0849               	movf	Wireless_packageData@t1^(0+128),w
  6830  0740  00BE               	movwf	??_Wireless_packageData^(0+128)
  6831  0741  083E               	movf	??_Wireless_packageData^(0+128),w
  6832  0742  00C4               	movwf	(Wireless_packageData@data^(0+128)+4)
  6833                           
  6834                           ;wireless.c: 169: t1 = sensorUpdatePeriod/1000;
  6835  0743  3000               	movlw	0
  6836  0744  0020               	movlb	0	; select bank0
  6837  0745  00A4               	movwf	___aldiv@divisor+3
  6838  0746  3000               	movlw	0
  6839  0747  00A3               	movwf	___aldiv@divisor+2
  6840  0748  3003               	movlw	3
  6841  0749  00A2               	movwf	___aldiv@divisor+1
  6842  074A  30E8               	movlw	232
  6843  074B  00A1               	movwf	___aldiv@divisor
  6844  074C  0022               	movlb	2	; select bank2
  6845  074D  0869               	movf	(_sensorUpdatePeriod+3)^(0+256),w
  6846  074E  0020               	movlb	0	; select bank0
  6847  074F  00A8               	movwf	___aldiv@dividend+3
  6848  0750  0022               	movlb	2	; select bank2
  6849  0751  0868               	movf	(_sensorUpdatePeriod+2)^(0+256),w
  6850  0752  0020               	movlb	0	; select bank0
  6851  0753  00A7               	movwf	___aldiv@dividend+2
  6852  0754  0022               	movlb	2	; select bank2
  6853  0755  0867               	movf	(_sensorUpdatePeriod+1)^(0+256),w
  6854  0756  0020               	movlb	0	; select bank0
  6855  0757  00A6               	movwf	___aldiv@dividend+1
  6856  0758  0022               	movlb	2	; select bank2
  6857  0759  0866               	movf	_sensorUpdatePeriod^(0+256),w
  6858  075A  0020               	movlb	0	; select bank0
  6859  075B  00A5               	movwf	___aldiv@dividend
  6860  075C  318B  23E9  3186   	fcall	___aldiv
  6861  075F  0020               	movlb	0	; select bank0
  6862  0760  0822               	movf	?___aldiv+1,w
  6863  0761  0021               	movlb	1	; select bank1
  6864  0762  00CA               	movwf	(Wireless_packageData@t1+1)^(0+128)
  6865  0763  0020               	movlb	0	; select bank0
  6866  0764  0821               	movf	?___aldiv,w
  6867  0765  0021               	movlb	1	; select bank1
  6868  0766  00C9               	movwf	Wireless_packageData@t1^(0+128)
  6869                           
  6870                           ;wireless.c: 171: data[5] = t1 >>8;
  6871  0767  084A               	movf	(Wireless_packageData@t1+1)^(0+128),w
  6872  0768  00BE               	movwf	??_Wireless_packageData^(0+128)
  6873  0769  083E               	movf	??_Wireless_packageData^(0+128),w
  6874  076A  00C5               	movwf	(Wireless_packageData@data^(0+128)+5)
  6875                           
  6876                           ;wireless.c: 172: data[6] = t1 & 0xFF;
  6877  076B  0849               	movf	Wireless_packageData@t1^(0+128),w
  6878  076C  00BE               	movwf	??_Wireless_packageData^(0+128)
  6879  076D  083E               	movf	??_Wireless_packageData^(0+128),w
  6880  076E  00C6               	movwf	(Wireless_packageData@data^(0+128)+6)
  6881  076F                     l6471:	
  6882                           ;wireless.c: 173: do{
  6883                           
  6884                           
  6885                           ;wireless.c: 174: Wireless_sendData(data, 7);
  6886  076F  3007               	movlw	7
  6887  0770  0021               	movlb	1	; select bank1
  6888  0771  00BE               	movwf	??_Wireless_packageData^(0+128)
  6889  0772  083E               	movf	??_Wireless_packageData^(0+128),w
  6890  0773  0020               	movlb	0	; select bank0
  6891  0774  00B1               	movwf	Wireless_sendData@length
  6892  0775  30C0               	movlw	(low (Wireless_packageData@data| 0))& (0+255)
  6893  0776  3194  2434  3186   	fcall	_Wireless_sendData
  6894  0779                     l1115:	
  6895                           ;wireless.c: 175: while(PORTCbits.RC3);
  6896                           
  6897  0779  0020               	movlb	0	; select bank0
  6898  077A  198E               	btfsc	14,3	;volatile
  6899  077B  2F79               	goto	l1115
  6900                           
  6901                           ;wireless.c: 176: }
  6902                           ;wireless.c: 177: while(Wireless_determineTransmitPower(0));
  6903  077C  3000               	movlw	0
  6904  077D  318D  250A  3186   	fcall	_Wireless_determineTransmitPower
  6905  0780  3A00               	xorlw	0
  6906  0781  1D03               	skipz
  6907  0782  2F6F               	goto	l6471
  6908                           
  6909                           ;wireless.c: 178: Wireless_checkDataReceived();
  6910  0783  3187  2786         	fcall	_Wireless_checkDataReceived
  6911  0785  0008               	return
  6912  0786                     __end_of_Wireless_packageData:	
  6913                           
  6914                           	psect	text7
  6915  0D0A                     __ptext7:	
  6916 ;; *************** function _Wireless_determineTransmitPower *****************
  6917 ;; Defined at:
  6918 ;;		line 62 in file "wireless.c"
  6919 ;; Parameters:    Size  Location     Type
  6920 ;;  initialise      1    wreg     unsigned char 
  6921 ;; Auto vars:     Size  Location     Type
  6922 ;;  initialise      1   24[BANK0 ] unsigned char 
  6923 ;;  latestResult    1   26[BANK0 ] unsigned char 
  6924 ;;  testPayload     1   25[BANK0 ] unsigned char 
  6925 ;; Return value:  Size  Location     Type
  6926 ;;                  1    wreg      unsigned char 
  6927 ;; Registers used:
  6928 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6929 ;; Tracked objects:
  6930 ;;		On entry : 0/0
  6931 ;;		On exit  : 0/0
  6932 ;;		Unchanged: 0/0
  6933 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6934 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6935 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6936 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6937 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6938 ;;Total ram usage:        6 bytes
  6939 ;; Hardware stack levels used:    1
  6940 ;; Hardware stack levels required when called:   10
  6941 ;; This function calls:
  6942 ;;		_Wireless_changeTransmitPower
  6943 ;;		_Wireless_isDataTransmitSuccessful
  6944 ;;		_Wireless_sendData
  6945 ;;		_limit
  6946 ;; This function is called by:
  6947 ;;		_main
  6948 ;;		_Wireless_packageData
  6949 ;; This function uses a non-reentrant model
  6950 ;;
  6951                           
  6952                           
  6953                           ;psect for function _Wireless_determineTransmitPower
  6954  0D0A                     _Wireless_determineTransmitPower:	
  6955                           
  6956                           ;incstack = 0
  6957                           ; Regs used in _Wireless_determineTransmitPower: [wreg-fsr1h+status,2+status,0+pclath+cs
      +                          tack]
  6958                           ;Wireless_determineTransmitPower@initialise stored from wreg
  6959  0D0A  0020               	movlb	0	; select bank0
  6960  0D0B  00B8               	movwf	Wireless_determineTransmitPower@initialise
  6961                           
  6962                           ;wireless.c: 64: char testPayload = 0xFF;
  6963  0D0C  30FF               	movlw	255
  6964  0D0D  00B5               	movwf	??_Wireless_determineTransmitPower
  6965  0D0E  0835               	movf	??_Wireless_determineTransmitPower,w
  6966  0D0F  00B9               	movwf	Wireless_determineTransmitPower@testPayload
  6967                           
  6968                           ;wireless.c: 65: char latestResult;
  6969                           ;wireless.c: 66: static char numOfTransmits = 0;
  6970                           ;wireless.c: 67: static char numOfSuccessfulTransmits = 0;
  6971                           ;wireless.c: 69: if(initialise){
  6972  0D10  0838               	movf	Wireless_determineTransmitPower@initialise,w
  6973  0D11  1903               	btfsc	3,2
  6974  0D12  2D4E               	goto	l6043
  6975                           
  6976                           ;wireless.c: 70: currentTransmitPower = 0;
  6977  0D13  0021               	movlb	1	; select bank1
  6978  0D14  01E1               	clrf	_currentTransmitPower^(0+128)
  6979  0D15                     l6039:	
  6980                           ;wireless.c: 73: for(;currentTransmitPower <= 3; currentTransmitPower++){
  6981                           
  6982  0D15  3004               	movlw	4
  6983  0D16  0261               	subwf	_currentTransmitPower^(0+128),w
  6984  0D17  1803               	btfsc	3,0
  6985  0D18  2D34               	goto	l6041
  6986                           
  6987                           ;wireless.c: 74: Wireless_changeTransmitPower(currentTransmitPower);
  6988  0D19  0861               	movf	_currentTransmitPower^(0+128),w
  6989  0D1A  3197  275C  318D   	fcall	_Wireless_changeTransmitPower
  6990                           
  6991                           ;wireless.c: 75: Wireless_sendData(&testPayload, 1);
  6992  0D1D  0020               	movlb	0	; select bank0
  6993  0D1E  01B1               	clrf	Wireless_sendData@length
  6994  0D1F  0AB1               	incf	Wireless_sendData@length,f
  6995  0D20  3039               	movlw	(low (Wireless_determineTransmitPower@testPayload| 0))& (0+255)
  6996  0D21  3194  2434  318D   	fcall	_Wireless_sendData
  6997  0D24                     l1092:	
  6998                           ;wireless.c: 76: while(PORTCbits.RC3);
  6999                           
  7000  0D24  0020               	movlb	0	; select bank0
  7001  0D25  198E               	btfsc	14,3	;volatile
  7002  0D26  2D24               	goto	l1092
  7003                           
  7004                           ;wireless.c: 78: if(Wireless_isDataTransmitSuccessful())
  7005  0D27  3193  238B  318D   	fcall	_Wireless_isDataTransmitSuccessful
  7006  0D2A  3A00               	xorlw	0
  7007  0D2B  1D03               	btfss	3,2
  7008  0D2C  2D34               	goto	l6041
  7009                           
  7010                           ;wireless.c: 79: break;
  7011  0D2D  3001               	movlw	1
  7012  0D2E  0020               	movlb	0	; select bank0
  7013  0D2F  00B5               	movwf	??_Wireless_determineTransmitPower
  7014  0D30  0835               	movf	??_Wireless_determineTransmitPower,w
  7015  0D31  0021               	movlb	1	; select bank1
  7016  0D32  07E1               	addwf	_currentTransmitPower^(0+128),f
  7017  0D33  2D15               	goto	l6039
  7018  0D34                     l6041:	
  7019                           
  7020                           ;wireless.c: 80: }
  7021                           ;wireless.c: 81: currentTransmitPower = limit( currentTransmitPower, 0, 3);
  7022  0D34  0021               	movlb	1	; select bank1
  7023  0D35  0861               	movf	_currentTransmitPower^(0+128),w
  7024  0D36  0020               	movlb	0	; select bank0
  7025  0D37  00B5               	movwf	??_Wireless_determineTransmitPower
  7026  0D38  01B6               	clrf	??_Wireless_determineTransmitPower+1
  7027  0D39  0835               	movf	??_Wireless_determineTransmitPower,w
  7028  0D3A  00A1               	movwf	limit@val
  7029  0D3B  0836               	movf	??_Wireless_determineTransmitPower+1,w
  7030  0D3C  00A2               	movwf	limit@val+1
  7031  0D3D  3000               	movlw	0
  7032  0D3E  00A3               	movwf	limit@min
  7033  0D3F  00A4               	movwf	limit@min+1
  7034  0D40  3003               	movlw	3
  7035  0D41  00A5               	movwf	limit@max
  7036  0D42  3000               	movlw	0
  7037  0D43  00A6               	movwf	limit@max+1
  7038  0D44  3196  265D  318D   	fcall	_limit
  7039  0D47  0020               	movlb	0	; select bank0
  7040  0D48  0821               	movf	?_limit,w
  7041  0D49  00B7               	movwf	??_Wireless_determineTransmitPower+2
  7042  0D4A  0837               	movf	??_Wireless_determineTransmitPower+2,w
  7043  0D4B  0021               	movlb	1	; select bank1
  7044  0D4C  00E1               	movwf	_currentTransmitPower^(0+128)
  7045                           
  7046                           ;wireless.c: 82: }else{
  7047  0D4D  2DA5               	goto	l6095
  7048  0D4E                     l6043:	
  7049                           
  7050                           ;wireless.c: 84: latestResult = Wireless_isDataTransmitSuccessful();
  7051  0D4E  3193  238B  318D   	fcall	_Wireless_isDataTransmitSuccessful
  7052  0D51  0020               	movlb	0	; select bank0
  7053  0D52  00B5               	movwf	??_Wireless_determineTransmitPower
  7054  0D53  0835               	movf	??_Wireless_determineTransmitPower,w
  7055  0D54  00BA               	movwf	Wireless_determineTransmitPower@latestResult
  7056                           
  7057                           ;wireless.c: 85: numOfTransmits++;
  7058  0D55  3001               	movlw	1
  7059  0D56  00B5               	movwf	??_Wireless_determineTransmitPower
  7060  0D57  0835               	movf	??_Wireless_determineTransmitPower,w
  7061  0D58  0021               	movlb	1	; select bank1
  7062  0D59  07E0               	addwf	Wireless_determineTransmitPower@numOfTransmits^(0+128),f
  7063                           
  7064                           ;wireless.c: 86: numOfSuccessfulTransmits+= latestResult;
  7065  0D5A  0020               	movlb	0	; select bank0
  7066  0D5B  083A               	movf	Wireless_determineTransmitPower@latestResult,w
  7067  0D5C  00B5               	movwf	??_Wireless_determineTransmitPower
  7068  0D5D  0835               	movf	??_Wireless_determineTransmitPower,w
  7069  0D5E  0021               	movlb	1	; select bank1
  7070  0D5F  07DF               	addwf	Wireless_determineTransmitPower@numOfSuccessfulTransmits^(0+128),f
  7071                           
  7072                           ;wireless.c: 88: if(numOfTransmits>=5){
  7073  0D60  3005               	movlw	5
  7074  0D61  0260               	subwf	Wireless_determineTransmitPower@numOfTransmits^(0+128),w
  7075  0D62  1C03               	skipc
  7076  0D63  2D8F               	goto	l6079
  7077                           
  7078                           ;wireless.c: 90: if(currentTransmitPower > 0 && latestResult && numOfSuccessfulTransmits
      +                           >=4)
  7079  0D64  0861               	movf	_currentTransmitPower^(0+128),w
  7080  0D65  1903               	btfsc	3,2
  7081  0D66  2D76               	goto	l6059
  7082  0D67  0020               	movlb	0	; select bank0
  7083  0D68  083A               	movf	Wireless_determineTransmitPower@latestResult,w
  7084  0D69  1903               	btfsc	3,2
  7085  0D6A  2D76               	goto	l6059
  7086  0D6B  3004               	movlw	4
  7087  0D6C  0021               	movlb	1	; select bank1
  7088  0D6D  025F               	subwf	Wireless_determineTransmitPower@numOfSuccessfulTransmits^(0+128),w
  7089  0D6E  1C03               	skipc
  7090  0D6F  2D76               	goto	l6059
  7091                           
  7092                           ;wireless.c: 91: Wireless_changeTransmitPower(--currentTransmitPower);
  7093  0D70  3001               	movlw	1
  7094  0D71  02E1               	subwf	_currentTransmitPower^(0+128),f
  7095  0D72  0861               	movf	_currentTransmitPower^(0+128),w
  7096  0D73  3197  275C  318D   	fcall	_Wireless_changeTransmitPower
  7097  0D76                     l6059:	
  7098                           
  7099                           ;wireless.c: 93: numOfTransmits = 0;
  7100  0D76  0021               	movlb	1	; select bank1
  7101  0D77  01E0               	clrf	Wireless_determineTransmitPower@numOfTransmits^(0+128)
  7102                           
  7103                           ;wireless.c: 94: numOfSuccessfulTransmits = 0;
  7104  0D78  01DF               	clrf	Wireless_determineTransmitPower@numOfSuccessfulTransmits^(0+128)
  7105                           
  7106                           ;wireless.c: 95: if(!latestResult && currentTransmitPower < 3){
  7107  0D79  0020               	movlb	0	; select bank0
  7108  0D7A  083A               	movf	Wireless_determineTransmitPower@latestResult,w
  7109  0D7B  1D03               	btfss	3,2
  7110  0D7C  2D8D               	goto	l6075
  7111  0D7D  3003               	movlw	3
  7112  0D7E  0021               	movlb	1	; select bank1
  7113  0D7F  0261               	subwf	_currentTransmitPower^(0+128),w
  7114  0D80  1803               	skipnc
  7115  0D81  2D8D               	goto	l6075
  7116                           
  7117                           ;wireless.c: 98: Wireless_changeTransmitPower(++currentTransmitPower);
  7118  0D82  3001               	movlw	1
  7119  0D83  0020               	movlb	0	; select bank0
  7120  0D84  00B5               	movwf	??_Wireless_determineTransmitPower
  7121  0D85  0835               	movf	??_Wireless_determineTransmitPower,w
  7122  0D86  0021               	movlb	1	; select bank1
  7123  0D87  07E1               	addwf	_currentTransmitPower^(0+128),f
  7124  0D88  0861               	movf	_currentTransmitPower^(0+128),w
  7125  0D89  3197  275C         	fcall	_Wireless_changeTransmitPower
  7126                           
  7127                           ;wireless.c: 99: return 1;
  7128  0D8B  3001               	movlw	1
  7129  0D8C  0008               	return
  7130  0D8D                     l6075:	
  7131                           ;wireless.c: 100: } else return 0;
  7132                           
  7133  0D8D  3000               	movlw	0
  7134  0D8E  0008               	return
  7135  0D8F                     l6079:	
  7136                           ;wireless.c: 102: }else{
  7137                           
  7138                           
  7139                           ;wireless.c: 104: if(!latestResult && currentTransmitPower < 3){
  7140  0D8F  0020               	movlb	0	; select bank0
  7141  0D90  083A               	movf	Wireless_determineTransmitPower@latestResult,w
  7142  0D91  1D03               	btfss	3,2
  7143  0D92  2DA3               	goto	l6091
  7144  0D93  3003               	movlw	3
  7145  0D94  0021               	movlb	1	; select bank1
  7146  0D95  0261               	subwf	_currentTransmitPower^(0+128),w
  7147  0D96  1803               	skipnc
  7148  0D97  2DA3               	goto	l6091
  7149                           
  7150                           ;wireless.c: 106: Wireless_changeTransmitPower(++currentTransmitPower);
  7151  0D98  3001               	movlw	1
  7152  0D99  0020               	movlb	0	; select bank0
  7153  0D9A  00B5               	movwf	??_Wireless_determineTransmitPower
  7154  0D9B  0835               	movf	??_Wireless_determineTransmitPower,w
  7155  0D9C  0021               	movlb	1	; select bank1
  7156  0D9D  07E1               	addwf	_currentTransmitPower^(0+128),f
  7157  0D9E  0861               	movf	_currentTransmitPower^(0+128),w
  7158  0D9F  3197  275C         	fcall	_Wireless_changeTransmitPower
  7159                           
  7160                           ;wireless.c: 107: return 1;
  7161  0DA1  3001               	movlw	1
  7162  0DA2  0008               	return
  7163  0DA3                     l6091:	
  7164                           ;wireless.c: 108: } else
  7165                           
  7166                           
  7167                           ;wireless.c: 109: return 0;
  7168  0DA3  3000               	movlw	0
  7169  0DA4  0008               	return
  7170  0DA5                     l6095:	
  7171                           
  7172                           ;wireless.c: 111: }
  7173                           ;wireless.c: 112: }
  7174                           ;wireless.c: 115: return !latestResult;
  7175  0DA5  0020               	movlb	0	; select bank0
  7176  0DA6  083A               	movf	Wireless_determineTransmitPower@latestResult,w
  7177  0DA7  1D03               	btfss	3,2
  7178  0DA8  2DAB               	goto	u5550
  7179  0DA9  3001               	movlw	1
  7180  0DAA  0008               	return
  7181  0DAB                     u5550:	
  7182  0DAB  3000               	movlw	0
  7183  0DAC  0008               	return
  7184  0DAD                     __end_of_Wireless_determineTransmitPower:	
  7185                           
  7186                           	psect	text8
  7187  1434                     __ptext8:	
  7188 ;; *************** function _Wireless_sendData *****************
  7189 ;; Defined at:
  7190 ;;		line 130 in file "wireless.c"
  7191 ;; Parameters:    Size  Location     Type
  7192 ;;  payload         1    wreg     PTR unsigned char 
  7193 ;;		 -> Wireless_packageData@data(7), Wireless_determineTransmitPower@testPayload(1), 
  7194 ;;  length          1   17[BANK0 ] unsigned char 
  7195 ;; Auto vars:     Size  Location     Type
  7196 ;;  payload         1   20[BANK0 ] PTR unsigned char 
  7197 ;;		 -> Wireless_packageData@data(7), Wireless_determineTransmitPower@testPayload(1), 
  7198 ;;  status          1   19[BANK0 ] unsigned char 
  7199 ;; Return value:  Size  Location     Type
  7200 ;;                  1    wreg      void 
  7201 ;; Registers used:
  7202 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  7203 ;; Tracked objects:
  7204 ;;		On entry : 0/0
  7205 ;;		On exit  : 0/0
  7206 ;;		Unchanged: 0/0
  7207 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7208 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7209 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7210 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7211 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7212 ;;Total ram usage:        4 bytes
  7213 ;; Hardware stack levels used:    1
  7214 ;; Hardware stack levels required when called:    9
  7215 ;; This function calls:
  7216 ;;		_RF_GetStatus
  7217 ;;		_RF_ResetStatusIRQ
  7218 ;;		_RF_TxPayload
  7219 ;; This function is called by:
  7220 ;;		_Wireless_determineTransmitPower
  7221 ;;		_Wireless_packageData
  7222 ;; This function uses a non-reentrant model
  7223 ;;
  7224                           
  7225                           
  7226                           ;psect for function _Wireless_sendData
  7227  1434                     _Wireless_sendData:	
  7228                           
  7229                           ;incstack = 0
  7230                           ; Regs used in _Wireless_sendData: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  7231                           ;Wireless_sendData@payload stored from wreg
  7232  1434  0020               	movlb	0	; select bank0
  7233  1435  00B4               	movwf	Wireless_sendData@payload
  7234                           
  7235                           ;wireless.c: 132: char status;
  7236                           ;wireless.c: 134: RF_ResetStatusIRQ(0x40|0x20|0x10);
  7237  1436  3070               	movlw	112
  7238  1437  3195  25D8  3194   	fcall	_RF_ResetStatusIRQ
  7239                           
  7240                           ;wireless.c: 135: status = RF_GetStatus();
  7241  143A  3192  22E2  3194   	fcall	_RF_GetStatus
  7242  143D  0020               	movlb	0	; select bank0
  7243  143E  00B2               	movwf	??_Wireless_sendData
  7244  143F  0832               	movf	??_Wireless_sendData,w
  7245  1440  00B3               	movwf	Wireless_sendData@status
  7246                           
  7247                           ;wireless.c: 136: RF_TxPayload(payload, length);
  7248  1441  0831               	movf	Wireless_sendData@length,w
  7249  1442  00B2               	movwf	??_Wireless_sendData
  7250  1443  0832               	movf	??_Wireless_sendData,w
  7251  1444  00AE               	movwf	RF_TxPayload@payloadSize
  7252  1445  0834               	movf	Wireless_sendData@payload,w
  7253  1446  3188  2001         	fcall	_RF_TxPayload
  7254  1448  0008               	return
  7255  1449                     __end_of_Wireless_sendData:	
  7256                           
  7257                           	psect	text9
  7258  0801                     __ptext9:	
  7259 ;; *************** function _RF_TxPayload *****************
  7260 ;; Defined at:
  7261 ;;		line 173 in file "nrf24.c"
  7262 ;; Parameters:    Size  Location     Type
  7263 ;;  payload         1    wreg     PTR unsigned char 
  7264 ;;		 -> Wireless_packageData@data(7), Wireless_determineTransmitPower@testPayload(1), 
  7265 ;;  payloadSize     1   14[BANK0 ] unsigned char 
  7266 ;; Auto vars:     Size  Location     Type
  7267 ;;  payload         1   16[BANK0 ] PTR unsigned char 
  7268 ;;		 -> Wireless_packageData@data(7), Wireless_determineTransmitPower@testPayload(1), 
  7269 ;; Return value:  Size  Location     Type
  7270 ;;                  1    wreg      void 
  7271 ;; Registers used:
  7272 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  7273 ;; Tracked objects:
  7274 ;;		On entry : 0/0
  7275 ;;		On exit  : 0/0
  7276 ;;		Unchanged: 0/0
  7277 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7278 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7279 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7280 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7281 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7282 ;;Total ram usage:        3 bytes
  7283 ;; Hardware stack levels used:    1
  7284 ;; Hardware stack levels required when called:    8
  7285 ;; This function calls:
  7286 ;;		_RF_Write
  7287 ;;		_RF_WriteRegisterData
  7288 ;; This function is called by:
  7289 ;;		_Wireless_sendData
  7290 ;; This function uses a non-reentrant model
  7291 ;;
  7292                           
  7293                           
  7294                           ;psect for function _RF_TxPayload
  7295  0801                     _RF_TxPayload:	
  7296                           
  7297                           ;incstack = 0
  7298                           ; Regs used in _RF_TxPayload: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  7299                           ;RF_TxPayload@payload stored from wreg
  7300  0801  0020               	movlb	0	; select bank0
  7301  0802  00B0               	movwf	RF_TxPayload@payload
  7302                           
  7303                           ;nrf24.c: 174: RF_Write(0xE1);
  7304  0803  30E1               	movlw	225
  7305  0804  3193  23B6  3188   	fcall	_RF_Write
  7306                           
  7307                           ;nrf24.c: 175: RF_WriteRegisterData(0xA0, payload, payloadSize);
  7308  0807  0020               	movlb	0	; select bank0
  7309  0808  0830               	movf	RF_TxPayload@payload,w
  7310  0809  00A9               	movwf	RF_WriteRegisterData@buf
  7311  080A  3000               	movlw	0
  7312  080B  00AA               	movwf	RF_WriteRegisterData@buf+1
  7313  080C  082E               	movf	RF_TxPayload@payloadSize,w
  7314  080D  00AF               	movwf	??_RF_TxPayload
  7315  080E  082F               	movf	??_RF_TxPayload,w
  7316  080F  00AB               	movwf	RF_WriteRegisterData@bufSize
  7317  0810  30A0               	movlw	160
  7318  0811  3195  2562  3188   	fcall	_RF_WriteRegisterData
  7319                           
  7320                           ;nrf24.c: 176: do { LATCbits.LATC2 = 1; } while(0);
  7321  0814  0022               	movlb	2	; select bank2
  7322  0815  150E               	bsf	14,2	;volatile
  7323                           
  7324                           ;nrf24.c: 177: _delay((unsigned long)((15)*(8000000/4000000.0)));
  7325  0816  300A               	movlw	10
  7326  0817                     u7127:	
  7327  0817  0B89               	decfsz	9,f
  7328  0818  2817               	goto	u7127
  7329                           
  7330                           ;nrf24.c: 178: do { LATCbits.LATC2 = 0; } while(0);
  7331  0819  0022               	movlb	2	; select bank2
  7332  081A  110E               	bcf	14,2	;volatile
  7333  081B  0008               	return
  7334  081C                     __end_of_RF_TxPayload:	
  7335                           
  7336                           	psect	text10
  7337  13B6                     __ptext10:	
  7338 ;; *************** function _RF_Write *****************
  7339 ;; Defined at:
  7340 ;;		line 139 in file "nrf24.c"
  7341 ;; Parameters:    Size  Location     Type
  7342 ;;  val             1    wreg     unsigned char 
  7343 ;; Auto vars:     Size  Location     Type
  7344 ;;  val             1    3[BANK0 ] unsigned char 
  7345 ;; Return value:  Size  Location     Type
  7346 ;;                  1    wreg      void 
  7347 ;; Registers used:
  7348 ;;		wreg, status,2, status,0, pclath, cstack
  7349 ;; Tracked objects:
  7350 ;;		On entry : 0/0
  7351 ;;		On exit  : 0/0
  7352 ;;		Unchanged: 0/0
  7353 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7354 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7355 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7356 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7357 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7358 ;;Total ram usage:        1 bytes
  7359 ;; Hardware stack levels used:    1
  7360 ;; Hardware stack levels required when called:    6
  7361 ;; This function calls:
  7362 ;;		_SPI_WriteRead
  7363 ;; This function is called by:
  7364 ;;		_RF_TxPayload
  7365 ;; This function uses a non-reentrant model
  7366 ;;
  7367                           
  7368                           
  7369                           ;psect for function _RF_Write
  7370  13B6                     _RF_Write:	
  7371                           
  7372                           ;incstack = 0
  7373                           ; Regs used in _RF_Write: [wreg+status,2+status,0+pclath+cstack]
  7374                           ;RF_Write@val stored from wreg
  7375  13B6  0020               	movlb	0	; select bank0
  7376  13B7  00A3               	movwf	RF_Write@val
  7377                           
  7378                           ;nrf24.c: 140: do { LATCbits.LATC1 = 0; } while(0);
  7379  13B8  0022               	movlb	2	; select bank2
  7380  13B9  108E               	bcf	14,1	;volatile
  7381                           
  7382                           ;nrf24.c: 141: (void)SPI_WriteRead(val);
  7383  13BA  0020               	movlb	0	; select bank0
  7384  13BB  0823               	movf	RF_Write@val,w
  7385  13BC  3192  22F6  3193   	fcall	_SPI_WriteRead
  7386                           
  7387                           ;nrf24.c: 142: do { LATCbits.LATC1 = 1; } while(0);
  7388  13BF  0022               	movlb	2	; select bank2
  7389  13C0  148E               	bsf	14,1	;volatile
  7390                           
  7391                           ;nrf24.c: 143: _delay((unsigned long)((10)*(8000000/4000000.0)));
  7392  13C1  3006               	movlw	6
  7393  13C2                     u7137:	
  7394  13C2  0B89               	decfsz	9,f
  7395  13C3  2BC2               	goto	u7137
  7396  13C4  3200               	nop2
  7397  13C5  0008               	return
  7398  13C6                     __end_of_RF_Write:	
  7399                           
  7400                           	psect	text11
  7401  138B                     __ptext11:	
  7402 ;; *************** function _Wireless_isDataTransmitSuccessful *****************
  7403 ;; Defined at:
  7404 ;;		line 203 in file "wireless.c"
  7405 ;; Parameters:    Size  Location     Type
  7406 ;;		None
  7407 ;; Auto vars:     Size  Location     Type
  7408 ;;  status          1    6[BANK0 ] unsigned char 
  7409 ;; Return value:  Size  Location     Type
  7410 ;;                  1    wreg      unsigned char 
  7411 ;; Registers used:
  7412 ;;		wreg, pclath, cstack
  7413 ;; Tracked objects:
  7414 ;;		On entry : 0/0
  7415 ;;		On exit  : 0/0
  7416 ;;		Unchanged: 0/0
  7417 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7418 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7419 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7420 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7421 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7422 ;;Total ram usage:        2 bytes
  7423 ;; Hardware stack levels used:    1
  7424 ;; Hardware stack levels required when called:    8
  7425 ;; This function calls:
  7426 ;;		_RF_GetStatus
  7427 ;; This function is called by:
  7428 ;;		_Wireless_determineTransmitPower
  7429 ;; This function uses a non-reentrant model
  7430 ;;
  7431                           
  7432                           
  7433                           ;psect for function _Wireless_isDataTransmitSuccessful
  7434  138B                     _Wireless_isDataTransmitSuccessful:	
  7435                           
  7436                           ;wireless.c: 204: char status = RF_GetStatus();
  7437                           
  7438                           ;incstack = 0
  7439                           ; Regs used in _Wireless_isDataTransmitSuccessful: [wreg+pclath+cstack]
  7440  138B  3192  22E2  3193   	fcall	_RF_GetStatus
  7441  138E  0020               	movlb	0	; select bank0
  7442  138F  00A5               	movwf	??_Wireless_isDataTransmitSuccessful
  7443  1390  0825               	movf	??_Wireless_isDataTransmitSuccessful,w
  7444  1391  00A6               	movwf	Wireless_isDataTransmitSuccessful@status
  7445                           
  7446                           ;wireless.c: 205: if(status & 0x20)
  7447  1392  1EA6               	btfss	Wireless_isDataTransmitSuccessful@status,5
  7448  1393  2B96               	goto	l5821
  7449                           
  7450                           ;wireless.c: 206: return 1;
  7451  1394  3001               	movlw	1
  7452  1395  0008               	return
  7453  1396                     l5821:	
  7454                           
  7455                           ;wireless.c: 207: else
  7456                           ;wireless.c: 208: return 0;
  7457  1396  3000               	movlw	0
  7458  1397  0008               	return
  7459  1398                     __end_of_Wireless_isDataTransmitSuccessful:	
  7460                           
  7461                           	psect	text12
  7462  12E2                     __ptext12:	
  7463 ;; *************** function _RF_GetStatus *****************
  7464 ;; Defined at:
  7465 ;;		line 150 in file "nrf24.c"
  7466 ;; Parameters:    Size  Location     Type
  7467 ;;		None
  7468 ;; Auto vars:     Size  Location     Type
  7469 ;;		None
  7470 ;; Return value:  Size  Location     Type
  7471 ;;                  1    wreg      unsigned char 
  7472 ;; Registers used:
  7473 ;;		wreg, pclath, cstack
  7474 ;; Tracked objects:
  7475 ;;		On entry : 0/0
  7476 ;;		On exit  : 0/0
  7477 ;;		Unchanged: 0/0
  7478 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7479 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7480 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7481 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7482 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7483 ;;Total ram usage:        0 bytes
  7484 ;; Hardware stack levels used:    1
  7485 ;; Hardware stack levels required when called:    7
  7486 ;; This function calls:
  7487 ;;		_RF_WriteRead
  7488 ;; This function is called by:
  7489 ;;		_Wireless_sendData
  7490 ;;		_Wireless_isDataTransmitSuccessful
  7491 ;; This function uses a non-reentrant model
  7492 ;;
  7493                           
  7494                           
  7495                           ;psect for function _RF_GetStatus
  7496  12E2                     _RF_GetStatus:	
  7497                           
  7498                           ;nrf24.c: 151: return RF_WriteRead(0xFF);
  7499                           
  7500                           ;incstack = 0
  7501                           ; Regs used in _RF_GetStatus: [wreg+pclath+cstack]
  7502  12E2  30FF               	movlw	255
  7503  12E3  3194  245F         	fcall	_RF_WriteRead
  7504  12E5  0008               	return
  7505  12E6                     __end_of_RF_GetStatus:	
  7506                           
  7507                           	psect	text13
  7508  145F                     __ptext13:	
  7509 ;; *************** function _RF_WriteRead *****************
  7510 ;; Defined at:
  7511 ;;		line 126 in file "nrf24.c"
  7512 ;; Parameters:    Size  Location     Type
  7513 ;;  val             1    wreg     unsigned char 
  7514 ;; Auto vars:     Size  Location     Type
  7515 ;;  val             1    4[BANK0 ] unsigned char 
  7516 ;; Return value:  Size  Location     Type
  7517 ;;                  1    wreg      unsigned char 
  7518 ;; Registers used:
  7519 ;;		wreg, pclath, cstack
  7520 ;; Tracked objects:
  7521 ;;		On entry : 0/0
  7522 ;;		On exit  : 0/0
  7523 ;;		Unchanged: 0/0
  7524 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7525 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7526 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7527 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7528 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7529 ;;Total ram usage:        2 bytes
  7530 ;; Hardware stack levels used:    1
  7531 ;; Hardware stack levels required when called:    6
  7532 ;; This function calls:
  7533 ;;		_SPI_WriteRead
  7534 ;; This function is called by:
  7535 ;;		_RF_GetStatus
  7536 ;; This function uses a non-reentrant model
  7537 ;;
  7538                           
  7539                           
  7540                           ;psect for function _RF_WriteRead
  7541  145F                     _RF_WriteRead:	
  7542                           
  7543                           ;incstack = 0
  7544                           ; Regs used in _RF_WriteRead: [wreg+pclath+cstack]
  7545                           ;RF_WriteRead@val stored from wreg
  7546  145F  0020               	movlb	0	; select bank0
  7547  1460  00A4               	movwf	RF_WriteRead@val
  7548                           
  7549                           ;nrf24.c: 127: do { LATCbits.LATC1 = 0; } while(0);
  7550  1461  0022               	movlb	2	; select bank2
  7551  1462  108E               	bcf	14,1	;volatile
  7552                           
  7553                           ;nrf24.c: 128: val = SPI_WriteRead(val);
  7554  1463  0020               	movlb	0	; select bank0
  7555  1464  0824               	movf	RF_WriteRead@val,w
  7556  1465  3192  22F6  3194   	fcall	_SPI_WriteRead
  7557  1468  0020               	movlb	0	; select bank0
  7558  1469  00A3               	movwf	??_RF_WriteRead
  7559  146A  0823               	movf	??_RF_WriteRead,w
  7560  146B  00A4               	movwf	RF_WriteRead@val
  7561                           
  7562                           ;nrf24.c: 129: do { LATCbits.LATC1 = 1; } while(0);
  7563  146C  0022               	movlb	2	; select bank2
  7564  146D  148E               	bsf	14,1	;volatile
  7565                           
  7566                           ;nrf24.c: 130: _delay((unsigned long)((10)*(8000000/4000000.0)));
  7567  146E  3006               	movlw	6
  7568  146F                     u7147:	
  7569  146F  0B89               	decfsz	9,f
  7570  1470  2C6F               	goto	u7147
  7571  1471  3200               	nop2
  7572                           
  7573                           ;nrf24.c: 131: return val;
  7574  1472  0020               	movlb	0	; select bank0
  7575  1473  0824               	movf	RF_WriteRead@val,w
  7576  1474  0008               	return
  7577  1475                     __end_of_RF_WriteRead:	
  7578                           
  7579                           	psect	text14
  7580  175C                     __ptext14:	
  7581 ;; *************** function _Wireless_changeTransmitPower *****************
  7582 ;; Defined at:
  7583 ;;		line 117 in file "wireless.c"
  7584 ;; Parameters:    Size  Location     Type
  7585 ;;  power           1    wreg     unsigned char 
  7586 ;; Auto vars:     Size  Location     Type
  7587 ;;  power           1   18[BANK0 ] unsigned char 
  7588 ;;  val             1   19[BANK0 ] unsigned char 
  7589 ;; Return value:  Size  Location     Type
  7590 ;;                  1    wreg      void 
  7591 ;; Registers used:
  7592 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7593 ;; Tracked objects:
  7594 ;;		On entry : 0/0
  7595 ;;		On exit  : 0/0
  7596 ;;		Unchanged: 0/0
  7597 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7598 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7599 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7600 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7601 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7602 ;;Total ram usage:        5 bytes
  7603 ;; Hardware stack levels used:    1
  7604 ;; Hardware stack levels required when called:    8
  7605 ;; This function calls:
  7606 ;;		_RF_ReadRegisterData
  7607 ;;		_RF_WriteRegister
  7608 ;;		_limit
  7609 ;; This function is called by:
  7610 ;;		_Wireless_determineTransmitPower
  7611 ;; This function uses a non-reentrant model
  7612 ;;
  7613                           
  7614                           
  7615                           ;psect for function _Wireless_changeTransmitPower
  7616  175C                     _Wireless_changeTransmitPower:	
  7617                           
  7618                           ;incstack = 0
  7619                           ; Regs used in _Wireless_changeTransmitPower: [wreg+fsr1l+fsr1h+status,2+status,0+pclath
      +                          +cstack]
  7620                           ;Wireless_changeTransmitPower@power stored from wreg
  7621  175C  0020               	movlb	0	; select bank0
  7622  175D  00B2               	movwf	Wireless_changeTransmitPower@power
  7623                           
  7624                           ;wireless.c: 120: u8 val;
  7625                           ;wireless.c: 123: power = limit(power, 0, 3);
  7626  175E  0832               	movf	Wireless_changeTransmitPower@power,w
  7627  175F  00AF               	movwf	??_Wireless_changeTransmitPower
  7628  1760  01B0               	clrf	??_Wireless_changeTransmitPower+1
  7629  1761  082F               	movf	??_Wireless_changeTransmitPower,w
  7630  1762  00A1               	movwf	limit@val
  7631  1763  0830               	movf	??_Wireless_changeTransmitPower+1,w
  7632  1764  00A2               	movwf	limit@val+1
  7633  1765  3000               	movlw	0
  7634  1766  00A3               	movwf	limit@min
  7635  1767  00A4               	movwf	limit@min+1
  7636  1768  3003               	movlw	3
  7637  1769  00A5               	movwf	limit@max
  7638  176A  3000               	movlw	0
  7639  176B  00A6               	movwf	limit@max+1
  7640  176C  3196  265D  3197   	fcall	_limit
  7641  176F  0020               	movlb	0	; select bank0
  7642  1770  0821               	movf	?_limit,w
  7643  1771  00B1               	movwf	??_Wireless_changeTransmitPower+2
  7644  1772  0831               	movf	??_Wireless_changeTransmitPower+2,w
  7645  1773  00B2               	movwf	Wireless_changeTransmitPower@power
  7646                           
  7647                           ;wireless.c: 124: RF_ReadRegisterData(0x06, &val, 1);
  7648  1774  3033               	movlw	(low (Wireless_changeTransmitPower@val| 0))& (0+255)
  7649  1775  00AF               	movwf	??_Wireless_changeTransmitPower
  7650  1776  082F               	movf	??_Wireless_changeTransmitPower,w
  7651  1777  00AA               	movwf	RF_ReadRegisterData@buf
  7652  1778  01AB               	clrf	RF_ReadRegisterData@bufSize
  7653  1779  0AAB               	incf	RF_ReadRegisterData@bufSize,f
  7654  177A  3006               	movlw	6
  7655  177B  3195  259C  3197   	fcall	_RF_ReadRegisterData
  7656                           
  7657                           ;wireless.c: 126: val &= 0b11111001;
  7658  177E  30F9               	movlw	249
  7659  177F  0020               	movlb	0	; select bank0
  7660  1780  00AF               	movwf	??_Wireless_changeTransmitPower
  7661  1781  082F               	movf	??_Wireless_changeTransmitPower,w
  7662  1782  05B3               	andwf	Wireless_changeTransmitPower@val,f
  7663                           
  7664                           ;wireless.c: 127: val |= (power <<1);
  7665  1783  3532               	lslf	Wireless_changeTransmitPower@power,w
  7666  1784  00AF               	movwf	??_Wireless_changeTransmitPower
  7667  1785  082F               	movf	??_Wireless_changeTransmitPower,w
  7668  1786  04B3               	iorwf	Wireless_changeTransmitPower@val,f
  7669                           
  7670                           ;wireless.c: 128: RF_WriteRegister(0x06, val);
  7671  1787  0833               	movf	Wireless_changeTransmitPower@val,w
  7672  1788  00AF               	movwf	??_Wireless_changeTransmitPower
  7673  1789  082F               	movf	??_Wireless_changeTransmitPower,w
  7674  178A  00A3               	movwf	RF_WriteRegister@val
  7675  178B  3006               	movlw	6
  7676  178C  3194  2449         	fcall	_RF_WriteRegister
  7677  178E  0008               	return
  7678  178F                     __end_of_Wireless_changeTransmitPower:	
  7679                           
  7680                           	psect	text15
  7681  165D                     __ptext15:	
  7682 ;; *************** function _limit *****************
  7683 ;; Defined at:
  7684 ;;		line 12 in file "common.c"
  7685 ;; Parameters:    Size  Location     Type
  7686 ;;  val             2    1[BANK0 ] int 
  7687 ;;  min             2    3[BANK0 ] int 
  7688 ;;  max             2    5[BANK0 ] int 
  7689 ;; Auto vars:     Size  Location     Type
  7690 ;;		None
  7691 ;; Return value:  Size  Location     Type
  7692 ;;                  2    1[BANK0 ] int 
  7693 ;; Registers used:
  7694 ;;		wreg
  7695 ;; Tracked objects:
  7696 ;;		On entry : 0/0
  7697 ;;		On exit  : 0/0
  7698 ;;		Unchanged: 0/0
  7699 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7700 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7701 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7702 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7703 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7704 ;;Total ram usage:        7 bytes
  7705 ;; Hardware stack levels used:    1
  7706 ;; Hardware stack levels required when called:    4
  7707 ;; This function calls:
  7708 ;;		Nothing
  7709 ;; This function is called by:
  7710 ;;		_Wireless_determineTransmitPower
  7711 ;;		_Wireless_changeTransmitPower
  7712 ;; This function uses a non-reentrant model
  7713 ;;
  7714                           
  7715                           
  7716                           ;psect for function _limit
  7717  165D                     _limit:	
  7718                           
  7719                           ;common.c: 13: if(val<min)
  7720                           
  7721                           ;incstack = 0
  7722                           ; Regs used in _limit: [wreg]
  7723  165D  0020               	movlb	0	; select bank0
  7724  165E  0822               	movf	limit@val+1,w
  7725  165F  3A80               	xorlw	128
  7726  1660  00A7               	movwf	??_limit
  7727  1661  0824               	movf	limit@min+1,w
  7728  1662  3A80               	xorlw	128
  7729  1663  0227               	subwf	??_limit,w
  7730  1664  1D03               	skipz
  7731  1665  2E68               	goto	u5085
  7732  1666  0823               	movf	limit@min,w
  7733  1667  0221               	subwf	limit@val,w
  7734  1668                     u5085:	
  7735  1668  1803               	skipnc
  7736  1669  2E70               	goto	l5627
  7737                           
  7738                           ;common.c: 14: return min;
  7739  166A  0020               	movlb	0	; select bank0
  7740  166B  0824               	movf	limit@min+1,w
  7741  166C  00A2               	movwf	?_limit+1
  7742  166D  0823               	movf	limit@min,w
  7743  166E  00A1               	movwf	?_limit
  7744  166F  0008               	return
  7745  1670                     l5627:	
  7746                           
  7747                           ;common.c: 15: if(val>max)
  7748  1670  0020               	movlb	0	; select bank0
  7749  1671  0826               	movf	limit@max+1,w
  7750  1672  3A80               	xorlw	128
  7751  1673  00A7               	movwf	??_limit
  7752  1674  0822               	movf	limit@val+1,w
  7753  1675  3A80               	xorlw	128
  7754  1676  0227               	subwf	??_limit,w
  7755  1677  1D03               	skipz
  7756  1678  2E7B               	goto	u5095
  7757  1679  0821               	movf	limit@val,w
  7758  167A  0225               	subwf	limit@max,w
  7759  167B                     u5095:	
  7760  167B  1803               	skipnc
  7761  167C  0008               	return
  7762                           
  7763                           ;common.c: 16: return max;
  7764  167D  0020               	movlb	0	; select bank0
  7765  167E  0826               	movf	limit@max+1,w
  7766  167F  00A2               	movwf	?_limit+1
  7767  1680  0825               	movf	limit@max,w
  7768  1681  00A1               	movwf	?_limit
  7769  1682  0008               	return
  7770  1683                     __end_of_limit:	
  7771                           ;common.c: 17: return val;
  7772                           
  7773                           
  7774                           	psect	text16
  7775  0786                     __ptext16:	
  7776 ;; *************** function _Wireless_checkDataReceived *****************
  7777 ;; Defined at:
  7778 ;;		line 211 in file "wireless.c"
  7779 ;; Parameters:    Size  Location     Type
  7780 ;;		None
  7781 ;; Auto vars:     Size  Location     Type
  7782 ;;  data            2   23[BANK0 ] unsigned char [2]
  7783 ;;  channel         1   25[BANK0 ] unsigned char 
  7784 ;; Return value:  Size  Location     Type
  7785 ;;                  1    wreg      void 
  7786 ;; Registers used:
  7787 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7788 ;; Tracked objects:
  7789 ;;		On entry : 0/0
  7790 ;;		On exit  : 0/0
  7791 ;;		Unchanged: 0/0
  7792 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7793 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7794 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7795 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7796 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7797 ;;Total ram usage:        7 bytes
  7798 ;; Hardware stack levels used:    1
  7799 ;; Hardware stack levels required when called:    9
  7800 ;; This function calls:
  7801 ;;		_RF_DataIsReady
  7802 ;;		_RF_RxPayload
  7803 ;;		___lmul
  7804 ;; This function is called by:
  7805 ;;		_Wireless_packageData
  7806 ;; This function uses a non-reentrant model
  7807 ;;
  7808                           
  7809                           
  7810                           ;psect for function _Wireless_checkDataReceived
  7811  0786                     _Wireless_checkDataReceived:	
  7812  0786                     l1133:	
  7813                           ;incstack = 0
  7814                           ; Regs used in _Wireless_checkDataReceived: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+c
      +                          stack]
  7815                           ;wireless.c: 218: char channel;
  7816                           ;wireless.c: 219: char data[2];
  7817                           ;wireless.c: 220: do
  7818                           
  7819                           
  7820                           ;wireless.c: 221: {
  7821                           ;wireless.c: 222: if(RF_DataIsReady(&channel))
  7822  0786  3039               	movlw	(low (Wireless_checkDataReceived@channel| 0))& (0+255)
  7823  0787  3195  257F  3187   	fcall	_RF_DataIsReady
  7824  078A  3A00               	xorlw	0
  7825  078B  1903               	skipnz
  7826  078C  2FF3               	goto	l6153
  7827                           
  7828                           ;wireless.c: 223: {
  7829                           ;wireless.c: 224: RF_RxPayload(data, 2);
  7830  078D  3002               	movlw	2
  7831  078E  0020               	movlb	0	; select bank0
  7832  078F  00B3               	movwf	??_Wireless_checkDataReceived
  7833  0790  0833               	movf	??_Wireless_checkDataReceived,w
  7834  0791  00AF               	movwf	RF_RxPayload@payloadSize
  7835  0792  3037               	movlw	(low (Wireless_checkDataReceived@data| 0))& (0+255)
  7836  0793  3194  240C  3187   	fcall	_RF_RxPayload
  7837                           
  7838                           ;wireless.c: 225: sensorUpdatePeriod = data[0];
  7839  0796  0020               	movlb	0	; select bank0
  7840  0797  0837               	movf	Wireless_checkDataReceived@data,w
  7841  0798  00B3               	movwf	??_Wireless_checkDataReceived
  7842  0799  01B4               	clrf	??_Wireless_checkDataReceived+1
  7843  079A  01B5               	clrf	??_Wireless_checkDataReceived+2
  7844  079B  01B6               	clrf	??_Wireless_checkDataReceived+3
  7845  079C  0836               	movf	??_Wireless_checkDataReceived+3,w
  7846  079D  0022               	movlb	2	; select bank2
  7847  079E  00E9               	movwf	(_sensorUpdatePeriod+3)^(0+256)
  7848  079F  0020               	movlb	0	; select bank0
  7849  07A0  0835               	movf	??_Wireless_checkDataReceived+2,w
  7850  07A1  0022               	movlb	2	; select bank2
  7851  07A2  00E8               	movwf	(_sensorUpdatePeriod+2)^(0+256)
  7852  07A3  0020               	movlb	0	; select bank0
  7853  07A4  0834               	movf	??_Wireless_checkDataReceived+1,w
  7854  07A5  0022               	movlb	2	; select bank2
  7855  07A6  00E7               	movwf	(_sensorUpdatePeriod+1)^(0+256)
  7856  07A7  0020               	movlb	0	; select bank0
  7857  07A8  0833               	movf	??_Wireless_checkDataReceived,w
  7858  07A9  0022               	movlb	2	; select bank2
  7859  07AA  00E6               	movwf	_sensorUpdatePeriod^(0+256)
  7860                           
  7861                           ;wireless.c: 226: sensorUpdatePeriod << = 8;
  7862  07AB  3008               	movlw	8
  7863  07AC                     u5655:	
  7864  07AC  35E6               	lslf	_sensorUpdatePeriod^(0+256),f
  7865  07AD  0DE7               	rlf	(_sensorUpdatePeriod+1)^(0+256),f
  7866  07AE  0DE8               	rlf	(_sensorUpdatePeriod+2)^(0+256),f
  7867  07AF  0DE9               	rlf	(_sensorUpdatePeriod+3)^(0+256),f
  7868  07B0  0B89               	decfsz	9,f
  7869  07B1  2FAC               	goto	u5655
  7870                           
  7871                           ;wireless.c: 227: sensorUpdatePeriod |= data[1];
  7872  07B2  0020               	movlb	0	; select bank0
  7873  07B3  0838               	movf	Wireless_checkDataReceived@data+1,w
  7874  07B4  00B3               	movwf	??_Wireless_checkDataReceived
  7875  07B5  01B4               	clrf	??_Wireless_checkDataReceived+1
  7876  07B6  01B5               	clrf	??_Wireless_checkDataReceived+2
  7877  07B7  01B6               	clrf	??_Wireless_checkDataReceived+3
  7878  07B8  0833               	movf	??_Wireless_checkDataReceived,w
  7879  07B9  0022               	movlb	2	; select bank2
  7880  07BA  04E6               	iorwf	_sensorUpdatePeriod^(0+256),f
  7881  07BB  0020               	movlb	0	; select bank0
  7882  07BC  0834               	movf	??_Wireless_checkDataReceived+1,w
  7883  07BD  0022               	movlb	2	; select bank2
  7884  07BE  04E7               	iorwf	(_sensorUpdatePeriod+1)^(0+256),f
  7885  07BF  0020               	movlb	0	; select bank0
  7886  07C0  0835               	movf	??_Wireless_checkDataReceived+2,w
  7887  07C1  0022               	movlb	2	; select bank2
  7888  07C2  04E8               	iorwf	(_sensorUpdatePeriod+2)^(0+256),f
  7889  07C3  0020               	movlb	0	; select bank0
  7890  07C4  0836               	movf	??_Wireless_checkDataReceived+3,w
  7891  07C5  0022               	movlb	2	; select bank2
  7892  07C6  04E9               	iorwf	(_sensorUpdatePeriod+3)^(0+256),f
  7893                           
  7894                           ;wireless.c: 228: sensorUpdatePeriod *=1000;
  7895  07C7  3000               	movlw	0
  7896  07C8  0020               	movlb	0	; select bank0
  7897  07C9  00A4               	movwf	___lmul@multiplier+3
  7898  07CA  3000               	movlw	0
  7899  07CB  00A3               	movwf	___lmul@multiplier+2
  7900  07CC  3003               	movlw	3
  7901  07CD  00A2               	movwf	___lmul@multiplier+1
  7902  07CE  30E8               	movlw	232
  7903  07CF  00A1               	movwf	___lmul@multiplier
  7904  07D0  0022               	movlb	2	; select bank2
  7905  07D1  0869               	movf	(_sensorUpdatePeriod+3)^(0+256),w
  7906  07D2  0020               	movlb	0	; select bank0
  7907  07D3  00A8               	movwf	___lmul@multiplicand+3
  7908  07D4  0022               	movlb	2	; select bank2
  7909  07D5  0868               	movf	(_sensorUpdatePeriod+2)^(0+256),w
  7910  07D6  0020               	movlb	0	; select bank0
  7911  07D7  00A7               	movwf	___lmul@multiplicand+2
  7912  07D8  0022               	movlb	2	; select bank2
  7913  07D9  0867               	movf	(_sensorUpdatePeriod+1)^(0+256),w
  7914  07DA  0020               	movlb	0	; select bank0
  7915  07DB  00A6               	movwf	___lmul@multiplicand+1
  7916  07DC  0022               	movlb	2	; select bank2
  7917  07DD  0866               	movf	_sensorUpdatePeriod^(0+256),w
  7918  07DE  0020               	movlb	0	; select bank0
  7919  07DF  00A5               	movwf	___lmul@multiplicand
  7920  07E0  3197  272C  3187   	fcall	___lmul
  7921  07E3  0020               	movlb	0	; select bank0
  7922  07E4  0824               	movf	?___lmul+3,w
  7923  07E5  0022               	movlb	2	; select bank2
  7924  07E6  00E9               	movwf	(_sensorUpdatePeriod+3)^(0+256)
  7925  07E7  0020               	movlb	0	; select bank0
  7926  07E8  0823               	movf	?___lmul+2,w
  7927  07E9  0022               	movlb	2	; select bank2
  7928  07EA  00E8               	movwf	(_sensorUpdatePeriod+2)^(0+256)
  7929  07EB  0020               	movlb	0	; select bank0
  7930  07EC  0822               	movf	?___lmul+1,w
  7931  07ED  0022               	movlb	2	; select bank2
  7932  07EE  00E7               	movwf	(_sensorUpdatePeriod+1)^(0+256)
  7933  07EF  0020               	movlb	0	; select bank0
  7934  07F0  0821               	movf	?___lmul,w
  7935  07F1  0022               	movlb	2	; select bank2
  7936  07F2  00E6               	movwf	_sensorUpdatePeriod^(0+256)
  7937  07F3                     l6153:	
  7938                           
  7939                           ;wireless.c: 232: }
  7940                           ;wireless.c: 233: }while(RF_DataIsReady(&channel));
  7941  07F3  3039               	movlw	(low (Wireless_checkDataReceived@channel| 0))& (0+255)
  7942  07F4  3195  257F  3187   	fcall	_RF_DataIsReady
  7943  07F7  3A00               	xorlw	0
  7944  07F8  1903               	btfsc	3,2
  7945  07F9  0008               	return
  7946  07FA  2F86               	goto	l1133
  7947  07FB                     __end_of_Wireless_checkDataReceived:	
  7948                           
  7949                           	psect	text17
  7950  140C                     __ptext17:	
  7951 ;; *************** function _RF_RxPayload *****************
  7952 ;; Defined at:
  7953 ;;		line 186 in file "nrf24.c"
  7954 ;; Parameters:    Size  Location     Type
  7955 ;;  payload         1    wreg     PTR unsigned char 
  7956 ;;		 -> Wireless_checkDataReceived@data(2), 
  7957 ;;  payloadSize     1   15[BANK0 ] unsigned char 
  7958 ;; Auto vars:     Size  Location     Type
  7959 ;;  payload         1   18[BANK0 ] PTR unsigned char 
  7960 ;;		 -> Wireless_checkDataReceived@data(2), 
  7961 ;; Return value:  Size  Location     Type
  7962 ;;                  1    wreg      void 
  7963 ;; Registers used:
  7964 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7965 ;; Tracked objects:
  7966 ;;		On entry : 0/0
  7967 ;;		On exit  : 0/0
  7968 ;;		Unchanged: 0/0
  7969 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7970 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7971 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7972 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7973 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7974 ;;Total ram usage:        4 bytes
  7975 ;; Hardware stack levels used:    1
  7976 ;; Hardware stack levels required when called:    8
  7977 ;; This function calls:
  7978 ;;		_RF_ReadRegisterData
  7979 ;; This function is called by:
  7980 ;;		_Wireless_checkDataReceived
  7981 ;; This function uses a non-reentrant model
  7982 ;;
  7983                           
  7984                           
  7985                           ;psect for function _RF_RxPayload
  7986  140C                     _RF_RxPayload:	
  7987                           
  7988                           ;incstack = 0
  7989                           ; Regs used in _RF_RxPayload: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  7990                           ;RF_RxPayload@payload stored from wreg
  7991  140C  0020               	movlb	0	; select bank0
  7992  140D  00B2               	movwf	RF_RxPayload@payload
  7993                           
  7994                           ;nrf24.c: 187: do { LATCbits.LATC2 = 0; } while(0);
  7995  140E  0022               	movlb	2	; select bank2
  7996  140F  110E               	bcf	14,2	;volatile
  7997                           
  7998                           ;nrf24.c: 188: RF_ReadRegisterData(0x61, payload, payloadSize);
  7999  1410  0020               	movlb	0	; select bank0
  8000  1411  0832               	movf	RF_RxPayload@payload,w
  8001  1412  00B0               	movwf	??_RF_RxPayload
  8002  1413  0830               	movf	??_RF_RxPayload,w
  8003  1414  00AA               	movwf	RF_ReadRegisterData@buf
  8004  1415  082F               	movf	RF_RxPayload@payloadSize,w
  8005  1416  00B1               	movwf	??_RF_RxPayload+1
  8006  1417  0831               	movf	??_RF_RxPayload+1,w
  8007  1418  00AB               	movwf	RF_ReadRegisterData@bufSize
  8008  1419  3061               	movlw	97
  8009  141A  3195  259C         	fcall	_RF_ReadRegisterData
  8010                           
  8011                           ;nrf24.c: 189: do { LATCbits.LATC2 = 1; } while(0);
  8012  141C  0022               	movlb	2	; select bank2
  8013  141D  150E               	bsf	14,2	;volatile
  8014  141E  0008               	return
  8015  141F                     __end_of_RF_RxPayload:	
  8016                           
  8017                           	psect	text18
  8018  159C                     __ptext18:	
  8019 ;; *************** function _RF_ReadRegisterData *****************
  8020 ;; Defined at:
  8021 ;;		line 99 in file "nrf24.c"
  8022 ;; Parameters:    Size  Location     Type
  8023 ;;  reg             1    wreg     unsigned char 
  8024 ;;  buf             1   10[BANK0 ] PTR unsigned char 
  8025 ;;		 -> Wireless_checkDataReceived@data(2), Wireless_wake@reg(1), Wireless_sleep@reg(1), Wireless_changeTransmitPower@va
      +l(1), 
  8026 ;;  bufSize         1   11[BANK0 ] unsigned char 
  8027 ;; Auto vars:     Size  Location     Type
  8028 ;;  reg             1   14[BANK0 ] unsigned char 
  8029 ;; Return value:  Size  Location     Type
  8030 ;;                  1    wreg      void 
  8031 ;; Registers used:
  8032 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8033 ;; Tracked objects:
  8034 ;;		On entry : 0/0
  8035 ;;		On exit  : 0/0
  8036 ;;		Unchanged: 0/0
  8037 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8038 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8039 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8040 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8041 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8042 ;;Total ram usage:        5 bytes
  8043 ;; Hardware stack levels used:    1
  8044 ;; Hardware stack levels required when called:    7
  8045 ;; This function calls:
  8046 ;;		_SPI_WriteRead
  8047 ;;		_SPI_WriteReadBuffer
  8048 ;; This function is called by:
  8049 ;;		_RF_RxPayload
  8050 ;;		_Wireless_changeTransmitPower
  8051 ;;		_Wireless_sleep
  8052 ;;		_Wireless_wake
  8053 ;; This function uses a non-reentrant model
  8054 ;;
  8055                           
  8056                           
  8057                           ;psect for function _RF_ReadRegisterData
  8058  159C                     _RF_ReadRegisterData:	
  8059                           
  8060                           ;incstack = 0
  8061                           ; Regs used in _RF_ReadRegisterData: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8062                           ;RF_ReadRegisterData@reg stored from wreg
  8063  159C  0020               	movlb	0	; select bank0
  8064  159D  00AE               	movwf	RF_ReadRegisterData@reg
  8065                           
  8066                           ;nrf24.c: 100: do { LATCbits.LATC1 = 0; } while(0);
  8067  159E  0022               	movlb	2	; select bank2
  8068  159F  108E               	bcf	14,1	;volatile
  8069                           
  8070                           ;nrf24.c: 101: (void)SPI_WriteRead(0x00|reg);
  8071  15A0  0020               	movlb	0	; select bank0
  8072  15A1  082E               	movf	RF_ReadRegisterData@reg,w
  8073  15A2  3192  22F6  3195   	fcall	_SPI_WriteRead
  8074                           
  8075                           ;nrf24.c: 102: SPI_WriteReadBuffer(buf, buf, bufSize);
  8076  15A5  0020               	movlb	0	; select bank0
  8077  15A6  082A               	movf	RF_ReadRegisterData@buf,w
  8078  15A7  00AC               	movwf	??_RF_ReadRegisterData
  8079  15A8  082C               	movf	??_RF_ReadRegisterData,w
  8080  15A9  00A3               	movwf	SPI_WriteReadBuffer@bufIn
  8081  15AA  082B               	movf	RF_ReadRegisterData@bufSize,w
  8082  15AB  00AD               	movwf	??_RF_ReadRegisterData+1
  8083  15AC  082D               	movf	??_RF_ReadRegisterData+1,w
  8084  15AD  00A4               	movwf	SPI_WriteReadBuffer@bufSize
  8085  15AE  082A               	movf	RF_ReadRegisterData@buf,w
  8086  15AF  3195  25F8  3195   	fcall	_SPI_WriteReadBuffer
  8087                           
  8088                           ;nrf24.c: 103: do { LATCbits.LATC1 = 1; } while(0);
  8089  15B2  0022               	movlb	2	; select bank2
  8090  15B3  148E               	bsf	14,1	;volatile
  8091                           
  8092                           ;nrf24.c: 104: _delay((unsigned long)((10)*(8000000/4000000.0)));
  8093  15B4  3006               	movlw	6
  8094  15B5                     u7157:	
  8095  15B5  0B89               	decfsz	9,f
  8096  15B6  2DB5               	goto	u7157
  8097  15B7  3200               	nop2
  8098  15B8  0008               	return
  8099  15B9                     __end_of_RF_ReadRegisterData:	
  8100                           
  8101                           	psect	text19
  8102  15F8                     __ptext19:	
  8103 ;; *************** function _SPI_WriteReadBuffer *****************
  8104 ;; Defined at:
  8105 ;;		line 43 in file "nrf24.c"
  8106 ;; Parameters:    Size  Location     Type
  8107 ;;  bufOut          1    wreg     PTR unsigned char 
  8108 ;;		 -> Wireless_checkDataReceived@data(2), Wireless_wake@reg(1), Wireless_sleep@reg(1), Wireless_changeTransmitPower@va
      +l(1), 
  8109 ;;  bufIn           1    3[BANK0 ] PTR unsigned char 
  8110 ;;		 -> Wireless_checkDataReceived@data(2), Wireless_wake@reg(1), Wireless_sleep@reg(1), Wireless_changeTransmitPower@va
      +l(1), 
  8111 ;;  bufSize         1    4[BANK0 ] unsigned char 
  8112 ;; Auto vars:     Size  Location     Type
  8113 ;;  bufOut          1    8[BANK0 ] PTR unsigned char 
  8114 ;;		 -> Wireless_checkDataReceived@data(2), Wireless_wake@reg(1), Wireless_sleep@reg(1), Wireless_changeTransmitPower@va
      +l(1), 
  8115 ;;  i               1    9[BANK0 ] unsigned char 
  8116 ;; Return value:  Size  Location     Type
  8117 ;;                  1    wreg      void 
  8118 ;; Registers used:
  8119 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8120 ;; Tracked objects:
  8121 ;;		On entry : 0/0
  8122 ;;		On exit  : 0/0
  8123 ;;		Unchanged: 0/0
  8124 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8125 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8126 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8127 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8128 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8129 ;;Total ram usage:        7 bytes
  8130 ;; Hardware stack levels used:    1
  8131 ;; Hardware stack levels required when called:    6
  8132 ;; This function calls:
  8133 ;;		_SPI_WriteRead
  8134 ;; This function is called by:
  8135 ;;		_RF_ReadRegisterData
  8136 ;; This function uses a non-reentrant model
  8137 ;;
  8138                           
  8139                           
  8140                           ;psect for function _SPI_WriteReadBuffer
  8141  15F8                     _SPI_WriteReadBuffer:	
  8142                           
  8143                           ;incstack = 0
  8144                           ; Regs used in _SPI_WriteReadBuffer: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8145                           ;SPI_WriteReadBuffer@bufOut stored from wreg
  8146  15F8  0020               	movlb	0	; select bank0
  8147  15F9  00A8               	movwf	SPI_WriteReadBuffer@bufOut
  8148                           
  8149                           ;nrf24.c: 44: uint8_t i;
  8150                           ;nrf24.c: 46: for(i=0;i<bufSize;i++) {
  8151  15FA  01A9               	clrf	SPI_WriteReadBuffer@i
  8152  15FB                     l5539:	
  8153  15FB  0824               	movf	SPI_WriteReadBuffer@bufSize,w
  8154  15FC  0229               	subwf	SPI_WriteReadBuffer@i,w
  8155  15FD  1803               	btfsc	3,0
  8156  15FE  0008               	return
  8157                           
  8158                           ;nrf24.c: 47: bufIn[i] = SPI_WriteRead(bufOut[i]);
  8159  15FF  0829               	movf	SPI_WriteReadBuffer@i,w
  8160  1600  0728               	addwf	SPI_WriteReadBuffer@bufOut,w
  8161  1601  00A5               	movwf	??_SPI_WriteReadBuffer
  8162  1602  0825               	movf	??_SPI_WriteReadBuffer,w
  8163  1603  0086               	movwf	6
  8164  1604  0187               	clrf	7
  8165  1605  0801               	movf	1,w
  8166  1606  3192  22F6  3195   	fcall	_SPI_WriteRead
  8167  1609  0020               	movlb	0	; select bank0
  8168  160A  00A6               	movwf	??_SPI_WriteReadBuffer+1
  8169  160B  0829               	movf	SPI_WriteReadBuffer@i,w
  8170  160C  0723               	addwf	SPI_WriteReadBuffer@bufIn,w
  8171  160D  00A7               	movwf	??_SPI_WriteReadBuffer+2
  8172  160E  0827               	movf	??_SPI_WriteReadBuffer+2,w
  8173  160F  0086               	movwf	6
  8174  1610  0187               	clrf	7
  8175  1611  0826               	movf	??_SPI_WriteReadBuffer+1,w
  8176  1612  0081               	movwf	1
  8177  1613  3001               	movlw	1
  8178  1614  00A5               	movwf	??_SPI_WriteReadBuffer
  8179  1615  0825               	movf	??_SPI_WriteReadBuffer,w
  8180  1616  07A9               	addwf	SPI_WriteReadBuffer@i,f
  8181  1617  2DFB               	goto	l5539
  8182  1618                     __end_of_SPI_WriteReadBuffer:	
  8183                           
  8184                           	psect	text20
  8185  157F                     __ptext20:	
  8186 ;; *************** function _RF_DataIsReady *****************
  8187 ;; Defined at:
  8188 ;;		line 202 in file "nrf24.c"
  8189 ;; Parameters:    Size  Location     Type
  8190 ;;  channel         1    wreg     PTR unsigned char 
  8191 ;;		 -> Wireless_checkDataReceived@channel(1), 
  8192 ;; Auto vars:     Size  Location     Type
  8193 ;;  channel         1    7[BANK0 ] PTR unsigned char 
  8194 ;;		 -> Wireless_checkDataReceived@channel(1), 
  8195 ;;  status          1    8[BANK0 ] unsigned char 
  8196 ;; Return value:  Size  Location     Type
  8197 ;;                  1    wreg      unsigned char 
  8198 ;; Registers used:
  8199 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8200 ;; Tracked objects:
  8201 ;;		On entry : 0/0
  8202 ;;		On exit  : 0/0
  8203 ;;		Unchanged: 0/0
  8204 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8205 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8206 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8207 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8208 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8209 ;;Total ram usage:        3 bytes
  8210 ;; Hardware stack levels used:    1
  8211 ;; Hardware stack levels required when called:    7
  8212 ;; This function calls:
  8213 ;;		_RF_ReadRegister
  8214 ;; This function is called by:
  8215 ;;		_Wireless_checkDataReceived
  8216 ;; This function uses a non-reentrant model
  8217 ;;
  8218                           
  8219                           
  8220                           ;psect for function _RF_DataIsReady
  8221  157F                     _RF_DataIsReady:	
  8222                           
  8223                           ;incstack = 0
  8224                           ; Regs used in _RF_DataIsReady: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8225                           ;RF_DataIsReady@channel stored from wreg
  8226  157F  0020               	movlb	0	; select bank0
  8227  1580  00A7               	movwf	RF_DataIsReady@channel
  8228                           
  8229                           ;nrf24.c: 204: char status;
  8230                           ;nrf24.c: 205: status=RF_ReadRegister(0x07);
  8231  1581  3007               	movlw	7
  8232  1582  3194  24BD  3195   	fcall	_RF_ReadRegister
  8233  1585  0020               	movlb	0	; select bank0
  8234  1586  00A6               	movwf	??_RF_DataIsReady
  8235  1587  0826               	movf	??_RF_DataIsReady,w
  8236  1588  00A8               	movwf	RF_DataIsReady@status
  8237                           
  8238                           ;nrf24.c: 206: status&=0x0E;
  8239  1589  300E               	movlw	14
  8240  158A  00A6               	movwf	??_RF_DataIsReady
  8241  158B  0826               	movf	??_RF_DataIsReady,w
  8242  158C  05A8               	andwf	RF_DataIsReady@status,f
  8243                           
  8244                           ;nrf24.c: 207: if(status==0x0E)
  8245  158D  300E               	movlw	14
  8246  158E  0628               	xorwf	RF_DataIsReady@status,w
  8247  158F  1D03               	btfss	3,2
  8248  1590  2D93               	goto	l5787
  8249                           
  8250                           ;nrf24.c: 208: return 0;
  8251  1591  3000               	movlw	0
  8252  1592  0008               	return
  8253  1593                     l5787:	
  8254                           
  8255                           ;nrf24.c: 209: else
  8256                           ;nrf24.c: 210: *channel=status>>1;
  8257  1593  3628               	lsrf	RF_DataIsReady@status,w
  8258  1594  00A6               	movwf	??_RF_DataIsReady
  8259  1595  0827               	movf	RF_DataIsReady@channel,w
  8260  1596  0086               	movwf	6
  8261  1597  0187               	clrf	7
  8262  1598  0826               	movf	??_RF_DataIsReady,w
  8263  1599  0081               	movwf	1
  8264                           
  8265                           ;nrf24.c: 211: return 1;
  8266  159A  3001               	movlw	1
  8267  159B  0008               	return
  8268  159C                     __end_of_RF_DataIsReady:	
  8269                           
  8270                           	psect	text21
  8271  14BD                     __ptext21:	
  8272 ;; *************** function _RF_ReadRegister *****************
  8273 ;; Defined at:
  8274 ;;		line 82 in file "nrf24.c"
  8275 ;; Parameters:    Size  Location     Type
  8276 ;;  reg             1    wreg     unsigned char 
  8277 ;; Auto vars:     Size  Location     Type
  8278 ;;  reg             1    4[BANK0 ] unsigned char 
  8279 ;;  val             1    5[BANK0 ] unsigned char 
  8280 ;; Return value:  Size  Location     Type
  8281 ;;                  1    wreg      unsigned char 
  8282 ;; Registers used:
  8283 ;;		wreg, status,2, status,0, pclath, cstack
  8284 ;; Tracked objects:
  8285 ;;		On entry : 0/0
  8286 ;;		On exit  : 0/0
  8287 ;;		Unchanged: 0/0
  8288 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8289 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8290 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8291 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8292 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8293 ;;Total ram usage:        3 bytes
  8294 ;; Hardware stack levels used:    1
  8295 ;; Hardware stack levels required when called:    6
  8296 ;; This function calls:
  8297 ;;		_SPI_WriteRead
  8298 ;; This function is called by:
  8299 ;;		_RF_DataIsReady
  8300 ;; This function uses a non-reentrant model
  8301 ;;
  8302                           
  8303                           
  8304                           ;psect for function _RF_ReadRegister
  8305  14BD                     _RF_ReadRegister:	
  8306                           
  8307                           ;incstack = 0
  8308                           ; Regs used in _RF_ReadRegister: [wreg+status,2+status,0+pclath+cstack]
  8309                           ;RF_ReadRegister@reg stored from wreg
  8310  14BD  0020               	movlb	0	; select bank0
  8311  14BE  00A4               	movwf	RF_ReadRegister@reg
  8312                           
  8313                           ;nrf24.c: 83: uint8_t val;
  8314                           ;nrf24.c: 85: do { LATCbits.LATC1 = 0; } while(0);
  8315  14BF  0022               	movlb	2	; select bank2
  8316  14C0  108E               	bcf	14,1	;volatile
  8317                           
  8318                           ;nrf24.c: 86: (void)SPI_WriteRead(reg);
  8319  14C1  0020               	movlb	0	; select bank0
  8320  14C2  0824               	movf	RF_ReadRegister@reg,w
  8321  14C3  3192  22F6  3194   	fcall	_SPI_WriteRead
  8322                           
  8323                           ;nrf24.c: 87: val = SPI_WriteRead(0);
  8324  14C6  3000               	movlw	0
  8325  14C7  3192  22F6  3194   	fcall	_SPI_WriteRead
  8326  14CA  0020               	movlb	0	; select bank0
  8327  14CB  00A3               	movwf	??_RF_ReadRegister
  8328  14CC  0823               	movf	??_RF_ReadRegister,w
  8329  14CD  00A5               	movwf	RF_ReadRegister@val
  8330                           
  8331                           ;nrf24.c: 88: do { LATCbits.LATC1 = 1; } while(0);
  8332  14CE  0022               	movlb	2	; select bank2
  8333  14CF  148E               	bsf	14,1	;volatile
  8334                           
  8335                           ;nrf24.c: 89: _delay((unsigned long)((10)*(8000000/4000000.0)));
  8336  14D0  3006               	movlw	6
  8337  14D1                     u7167:	
  8338  14D1  0B89               	decfsz	9,f
  8339  14D2  2CD1               	goto	u7167
  8340  14D3  3200               	nop2
  8341                           
  8342                           ;nrf24.c: 90: return val;
  8343  14D4  0020               	movlb	0	; select bank0
  8344  14D5  0825               	movf	RF_ReadRegister@val,w
  8345  14D6  0008               	return
  8346  14D7                     __end_of_RF_ReadRegister:	
  8347                           
  8348                           	psect	text22
  8349  0859                     __ptext22:	
  8350 ;; *************** function _Sensor_getSupplyVoltage *****************
  8351 ;; Defined at:
  8352 ;;		line 6 in file "sensors.c"
  8353 ;; Parameters:    Size  Location     Type
  8354 ;;		None
  8355 ;; Auto vars:     Size  Location     Type
  8356 ;;  voltage         3   36[BANK0 ] float 
  8357 ;;  res             2   39[BANK0 ] unsigned short 
  8358 ;; Return value:  Size  Location     Type
  8359 ;;                  3   33[BANK0 ] float 
  8360 ;; Registers used:
  8361 ;;		wreg, status,2, status,0, pclath, cstack
  8362 ;; Tracked objects:
  8363 ;;		On entry : 0/0
  8364 ;;		On exit  : 0/0
  8365 ;;		Unchanged: 0/0
  8366 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8367 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8368 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8369 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8370 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8371 ;;Total ram usage:        8 bytes
  8372 ;; Hardware stack levels used:    1
  8373 ;; Hardware stack levels required when called:    6
  8374 ;; This function calls:
  8375 ;;		_ADC_GetConversionResult
  8376 ;;		_ADC_IsConversionDone
  8377 ;;		_ADC_SelectChannel
  8378 ;;		_ADC_StartConversion
  8379 ;;		_FVR_IsOutputReady
  8380 ;;		_Sensor_peripheralSleep
  8381 ;;		_Sensor_peripheralWake
  8382 ;;		___ftdiv
  8383 ;;		___lwtoft
  8384 ;; This function is called by:
  8385 ;;		_Wireless_packageData
  8386 ;; This function uses a non-reentrant model
  8387 ;;
  8388                           
  8389                           
  8390                           ;psect for function _Sensor_getSupplyVoltage
  8391  0859                     _Sensor_getSupplyVoltage:	
  8392                           
  8393                           ;sensors.c: 8: u16 res;
  8394                           ;sensors.c: 9: float voltage;
  8395                           ;sensors.c: 11: Sensor_peripheralWake();
  8396                           
  8397                           ;incstack = 0
  8398                           ; Regs used in _Sensor_getSupplyVoltage: [wreg+status,2+status,0+pclath+cstack]
  8399  0859  3192  22EB  3188   	fcall	_Sensor_peripheralWake
  8400  085C                     l5985:	
  8401                           ;sensors.c: 12: while(!FVR_IsOutputReady());
  8402                           
  8403  085C  3192  22FC  3188   	fcall	_FVR_IsOutputReady
  8404  085F  3A00               	xorlw	0
  8405  0860  1903               	skipnz
  8406  0861  285C               	goto	l5985
  8407                           
  8408                           ;sensors.c: 13: ADC_SelectChannel(channel_FVR);
  8409  0862  301F               	movlw	31
  8410  0863  3193  23A6  3188   	fcall	_ADC_SelectChannel
  8411                           
  8412                           ;sensors.c: 14: ADC_StartConversion();
  8413  0866  3192  22D3  3188   	fcall	_ADC_StartConversion
  8414  0869                     l5991:	
  8415                           ;sensors.c: 15: while(!ADC_IsConversionDone());
  8416                           
  8417  0869  3193  231C  3188   	fcall	_ADC_IsConversionDone
  8418  086C  3A00               	xorlw	0
  8419  086D  1903               	skipnz
  8420  086E  2869               	goto	l5991
  8421                           
  8422                           ;sensors.c: 16: Sensor_peripheralSleep();
  8423  086F  3192  22E6  3188   	fcall	_Sensor_peripheralSleep
  8424                           
  8425                           ;sensors.c: 17: res=ADC_GetConversionResult();
  8426  0872  3193  235F  3188   	fcall	_ADC_GetConversionResult
  8427  0875  0020               	movlb	0	; select bank0
  8428  0876  0822               	movf	?_ADC_GetConversionResult+1,w
  8429  0877  00C8               	movwf	Sensor_getSupplyVoltage@res+1
  8430  0878  0821               	movf	?_ADC_GetConversionResult,w
  8431  0879  00C7               	movwf	Sensor_getSupplyVoltage@res
  8432                           
  8433                           ;sensors.c: 19: voltage= (float) 1.024 * 1024/(float)res;
  8434  087A  0848               	movf	Sensor_getSupplyVoltage@res+1,w
  8435  087B  00AA               	movwf	___lwtoft@c+1
  8436  087C  0847               	movf	Sensor_getSupplyVoltage@res,w
  8437  087D  00A9               	movwf	___lwtoft@c
  8438  087E  3194  241F  3188   	fcall	___lwtoft
  8439  0881  0020               	movlb	0	; select bank0
  8440  0882  0829               	movf	?___lwtoft,w
  8441  0883  00B1               	movwf	___ftdiv@f2
  8442  0884  082A               	movf	?___lwtoft+1,w
  8443  0885  00B2               	movwf	___ftdiv@f2+1
  8444  0886  082B               	movf	?___lwtoft+2,w
  8445  0887  00B3               	movwf	___ftdiv@f2+2
  8446  0888  3012               	movlw	18
  8447  0889  00B4               	movwf	___ftdiv@f1
  8448  088A  3083               	movlw	131
  8449  088B  00B5               	movwf	___ftdiv@f1+1
  8450  088C  3044               	movlw	68
  8451  088D  00B6               	movwf	___ftdiv@f1+2
  8452  088E  318D  25AD         	fcall	___ftdiv
  8453  0890  0020               	movlb	0	; select bank0
  8454  0891  0831               	movf	?___ftdiv,w
  8455  0892  00C4               	movwf	Sensor_getSupplyVoltage@voltage
  8456  0893  0832               	movf	?___ftdiv+1,w
  8457  0894  00C5               	movwf	Sensor_getSupplyVoltage@voltage+1
  8458  0895  0833               	movf	?___ftdiv+2,w
  8459  0896  00C6               	movwf	Sensor_getSupplyVoltage@voltage+2
  8460                           
  8461                           ;sensors.c: 20: return(voltage);
  8462  0897  0844               	movf	Sensor_getSupplyVoltage@voltage,w
  8463  0898  00C1               	movwf	?_Sensor_getSupplyVoltage
  8464  0899  0845               	movf	Sensor_getSupplyVoltage@voltage+1,w
  8465  089A  00C2               	movwf	?_Sensor_getSupplyVoltage+1
  8466  089B  0846               	movf	Sensor_getSupplyVoltage@voltage+2,w
  8467  089C  00C3               	movwf	?_Sensor_getSupplyVoltage+2
  8468  089D  0008               	return
  8469  089E                     __end_of_Sensor_getSupplyVoltage:	
  8470                           
  8471                           	psect	text23
  8472  12EB                     __ptext23:	
  8473 ;; *************** function _Sensor_peripheralWake *****************
  8474 ;; Defined at:
  8475 ;;		line 32 in file "sensors.c"
  8476 ;; Parameters:    Size  Location     Type
  8477 ;;		None
  8478 ;; Auto vars:     Size  Location     Type
  8479 ;;		None
  8480 ;; Return value:  Size  Location     Type
  8481 ;;                  1    wreg      void 
  8482 ;; Registers used:
  8483 ;;		None
  8484 ;; Tracked objects:
  8485 ;;		On entry : 0/0
  8486 ;;		On exit  : 0/0
  8487 ;;		Unchanged: 0/0
  8488 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8489 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8490 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8491 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8492 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8493 ;;Total ram usage:        0 bytes
  8494 ;; Hardware stack levels used:    1
  8495 ;; Hardware stack levels required when called:    4
  8496 ;; This function calls:
  8497 ;;		Nothing
  8498 ;; This function is called by:
  8499 ;;		_Sensor_getSupplyVoltage
  8500 ;; This function uses a non-reentrant model
  8501 ;;
  8502                           
  8503                           
  8504                           ;psect for function _Sensor_peripheralWake
  8505  12EB                     _Sensor_peripheralWake:	
  8506                           
  8507                           ;sensors.c: 34: ADCON0bits.ADON=1;
  8508                           
  8509                           ;incstack = 0
  8510                           ; Regs used in _Sensor_peripheralWake: []
  8511  12EB  0021               	movlb	1	; select bank1
  8512  12EC  141D               	bsf	29,0	;volatile
  8513                           
  8514                           ;sensors.c: 35: FVRCONbits.FVREN=1;
  8515  12ED  0022               	movlb	2	; select bank2
  8516  12EE  1797               	bsf	23,7	;volatile
  8517  12EF  0008               	return
  8518  12F0                     __end_of_Sensor_peripheralWake:	
  8519                           
  8520                           	psect	text24
  8521  12E6                     __ptext24:	
  8522 ;; *************** function _Sensor_peripheralSleep *****************
  8523 ;; Defined at:
  8524 ;;		line 26 in file "sensors.c"
  8525 ;; Parameters:    Size  Location     Type
  8526 ;;		None
  8527 ;; Auto vars:     Size  Location     Type
  8528 ;;		None
  8529 ;; Return value:  Size  Location     Type
  8530 ;;                  1    wreg      void 
  8531 ;; Registers used:
  8532 ;;		None
  8533 ;; Tracked objects:
  8534 ;;		On entry : 0/0
  8535 ;;		On exit  : 0/0
  8536 ;;		Unchanged: 0/0
  8537 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8538 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8539 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8540 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8541 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8542 ;;Total ram usage:        0 bytes
  8543 ;; Hardware stack levels used:    1
  8544 ;; Hardware stack levels required when called:    4
  8545 ;; This function calls:
  8546 ;;		Nothing
  8547 ;; This function is called by:
  8548 ;;		_Sensor_getSupplyVoltage
  8549 ;;		_main
  8550 ;; This function uses a non-reentrant model
  8551 ;;
  8552                           
  8553                           
  8554                           ;psect for function _Sensor_peripheralSleep
  8555  12E6                     _Sensor_peripheralSleep:	
  8556                           
  8557                           ;sensors.c: 28: ADCON0bits.ADON=0;
  8558                           
  8559                           ;incstack = 0
  8560                           ; Regs used in _Sensor_peripheralSleep: []
  8561  12E6  0021               	movlb	1	; select bank1
  8562  12E7  101D               	bcf	29,0	;volatile
  8563                           
  8564                           ;sensors.c: 29: FVRCONbits.FVREN=0;
  8565  12E8  0022               	movlb	2	; select bank2
  8566  12E9  1397               	bcf	23,7	;volatile
  8567  12EA  0008               	return
  8568  12EB                     __end_of_Sensor_peripheralSleep:	
  8569                           
  8570                           	psect	text25
  8571  12FC                     __ptext25:	
  8572 ;; *************** function _FVR_IsOutputReady *****************
  8573 ;; Defined at:
  8574 ;;		line 63 in file "mcc_generated_files/fvr.c"
  8575 ;; Parameters:    Size  Location     Type
  8576 ;;		None
  8577 ;; Auto vars:     Size  Location     Type
  8578 ;;		None
  8579 ;; Return value:  Size  Location     Type
  8580 ;;                  1    wreg      unsigned char 
  8581 ;; Registers used:
  8582 ;;		wreg, status,2, status,0
  8583 ;; Tracked objects:
  8584 ;;		On entry : 0/0
  8585 ;;		On exit  : 0/0
  8586 ;;		Unchanged: 0/0
  8587 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8588 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8589 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8590 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8591 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8592 ;;Total ram usage:        0 bytes
  8593 ;; Hardware stack levels used:    1
  8594 ;; Hardware stack levels required when called:    4
  8595 ;; This function calls:
  8596 ;;		Nothing
  8597 ;; This function is called by:
  8598 ;;		_Sensor_getSupplyVoltage
  8599 ;; This function uses a non-reentrant model
  8600 ;;
  8601                           
  8602                           
  8603                           ;psect for function _FVR_IsOutputReady
  8604  12FC                     _FVR_IsOutputReady:	
  8605                           
  8606                           ;fvr.c: 65: return (FVRCONbits.FVRRDY);
  8607                           
  8608                           ;incstack = 0
  8609                           ; Regs used in _FVR_IsOutputReady: [wreg+status,2+status,0]
  8610  12FC  0022               	movlb	2	; select bank2
  8611  12FD  0E17               	swapf	23,w	;volatile
  8612  12FE  0C89               	rrf	9,f
  8613  12FF  0C89               	rrf	9,f
  8614  1300  3901               	andlw	1
  8615  1301  0008               	return
  8616  1302                     __end_of_FVR_IsOutputReady:	
  8617                           
  8618                           	psect	text26
  8619  12D3                     __ptext26:	
  8620 ;; *************** function _ADC_StartConversion *****************
  8621 ;; Defined at:
  8622 ;;		line 88 in file "mcc_generated_files/adc.c"
  8623 ;; Parameters:    Size  Location     Type
  8624 ;;		None
  8625 ;; Auto vars:     Size  Location     Type
  8626 ;;		None
  8627 ;; Return value:  Size  Location     Type
  8628 ;;                  1    wreg      void 
  8629 ;; Registers used:
  8630 ;;		None
  8631 ;; Tracked objects:
  8632 ;;		On entry : 0/0
  8633 ;;		On exit  : 0/0
  8634 ;;		Unchanged: 0/0
  8635 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8636 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8637 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8638 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8639 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8640 ;;Total ram usage:        0 bytes
  8641 ;; Hardware stack levels used:    1
  8642 ;; Hardware stack levels required when called:    4
  8643 ;; This function calls:
  8644 ;;		Nothing
  8645 ;; This function is called by:
  8646 ;;		_Sensor_getSupplyVoltage
  8647 ;; This function uses a non-reentrant model
  8648 ;;
  8649                           
  8650                           
  8651                           ;psect for function _ADC_StartConversion
  8652  12D3                     _ADC_StartConversion:	
  8653                           
  8654                           ;adc.c: 91: ADCON0bits.GO_nDONE = 1;
  8655                           
  8656                           ;incstack = 0
  8657                           ; Regs used in _ADC_StartConversion: []
  8658  12D3  0021               	movlb	1	; select bank1
  8659  12D4  149D               	bsf	29,1	;volatile
  8660  12D5  0008               	return
  8661  12D6                     __end_of_ADC_StartConversion:	
  8662                           
  8663                           	psect	text27
  8664  13A6                     __ptext27:	
  8665 ;; *************** function _ADC_SelectChannel *****************
  8666 ;; Defined at:
  8667 ;;		line 80 in file "mcc_generated_files/adc.c"
  8668 ;; Parameters:    Size  Location     Type
  8669 ;;  channel         1    wreg     enum E2996
  8670 ;; Auto vars:     Size  Location     Type
  8671 ;;  channel         1    2[BANK0 ] enum E2996
  8672 ;; Return value:  Size  Location     Type
  8673 ;;                  1    wreg      void 
  8674 ;; Registers used:
  8675 ;;		wreg, status,2, status,0
  8676 ;; Tracked objects:
  8677 ;;		On entry : 0/0
  8678 ;;		On exit  : 0/0
  8679 ;;		Unchanged: 0/0
  8680 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8681 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8682 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8683 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8684 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8685 ;;Total ram usage:        2 bytes
  8686 ;; Hardware stack levels used:    1
  8687 ;; Hardware stack levels required when called:    4
  8688 ;; This function calls:
  8689 ;;		Nothing
  8690 ;; This function is called by:
  8691 ;;		_Sensor_getSupplyVoltage
  8692 ;; This function uses a non-reentrant model
  8693 ;;
  8694                           
  8695                           
  8696                           ;psect for function _ADC_SelectChannel
  8697  13A6                     _ADC_SelectChannel:	
  8698                           
  8699                           ;incstack = 0
  8700                           ; Regs used in _ADC_SelectChannel: [wreg+status,2+status,0]
  8701                           ;ADC_SelectChannel@channel stored from wreg
  8702  13A6  0020               	movlb	0	; select bank0
  8703  13A7  00A2               	movwf	ADC_SelectChannel@channel
  8704                           
  8705                           ;adc.c: 83: ADCON0bits.CHS = channel;
  8706  13A8  0822               	movf	ADC_SelectChannel@channel,w
  8707  13A9  00A1               	movwf	??_ADC_SelectChannel
  8708  13AA  0DA1               	rlf	??_ADC_SelectChannel,f
  8709  13AB  0DA1               	rlf	??_ADC_SelectChannel,f
  8710  13AC  0021               	movlb	1	; select bank1
  8711  13AD  081D               	movf	29,w	;volatile
  8712  13AE  0020               	movlb	0	; select bank0
  8713  13AF  0621               	xorwf	??_ADC_SelectChannel,w
  8714  13B0  3983               	andlw	-125
  8715  13B1  0621               	xorwf	??_ADC_SelectChannel,w
  8716  13B2  0021               	movlb	1	; select bank1
  8717  13B3  009D               	movwf	29	;volatile
  8718                           
  8719                           ;adc.c: 85: ADCON0bits.ADON = 1;
  8720  13B4  141D               	bsf	29,0	;volatile
  8721  13B5  0008               	return
  8722  13B6                     __end_of_ADC_SelectChannel:	
  8723                           
  8724                           	psect	text28
  8725  131C                     __ptext28:	
  8726 ;; *************** function _ADC_IsConversionDone *****************
  8727 ;; Defined at:
  8728 ;;		line 95 in file "mcc_generated_files/adc.c"
  8729 ;; Parameters:    Size  Location     Type
  8730 ;;		None
  8731 ;; Auto vars:     Size  Location     Type
  8732 ;;		None
  8733 ;; Return value:  Size  Location     Type
  8734 ;;                  1    wreg      unsigned char 
  8735 ;; Registers used:
  8736 ;;		wreg, status,0
  8737 ;; Tracked objects:
  8738 ;;		On entry : 0/0
  8739 ;;		On exit  : 0/0
  8740 ;;		Unchanged: 0/0
  8741 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8742 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8743 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8744 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8745 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8746 ;;Total ram usage:        0 bytes
  8747 ;; Hardware stack levels used:    1
  8748 ;; Hardware stack levels required when called:    4
  8749 ;; This function calls:
  8750 ;;		Nothing
  8751 ;; This function is called by:
  8752 ;;		_Sensor_getSupplyVoltage
  8753 ;; This function uses a non-reentrant model
  8754 ;;
  8755                           
  8756                           
  8757                           ;psect for function _ADC_IsConversionDone
  8758  131C                     _ADC_IsConversionDone:	
  8759                           
  8760                           ;adc.c: 98: return ((bool)(!ADCON0bits.GO_nDONE));
  8761                           
  8762                           ;incstack = 0
  8763                           ; Regs used in _ADC_IsConversionDone: [wreg+status,0]
  8764  131C  1003               	clrc
  8765  131D  0021               	movlb	1	; select bank1
  8766  131E  1C9D               	btfss	29,1	;volatile
  8767  131F  1403               	setc
  8768  1320  3000               	movlw	0
  8769  1321  3D09               	addwfc	9,w
  8770  1322  0008               	return
  8771  1323                     __end_of_ADC_IsConversionDone:	
  8772                           
  8773                           	psect	text29
  8774  135F                     __ptext29:	
  8775 ;; *************** function _ADC_GetConversionResult *****************
  8776 ;; Defined at:
  8777 ;;		line 101 in file "mcc_generated_files/adc.c"
  8778 ;; Parameters:    Size  Location     Type
  8779 ;;		None
  8780 ;; Auto vars:     Size  Location     Type
  8781 ;;		None
  8782 ;; Return value:  Size  Location     Type
  8783 ;;                  2    1[BANK0 ] unsigned int 
  8784 ;; Registers used:
  8785 ;;		wreg
  8786 ;; Tracked objects:
  8787 ;;		On entry : 0/0
  8788 ;;		On exit  : 0/0
  8789 ;;		Unchanged: 0/0
  8790 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8791 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8792 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8793 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8794 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8795 ;;Total ram usage:        2 bytes
  8796 ;; Hardware stack levels used:    1
  8797 ;; Hardware stack levels required when called:    4
  8798 ;; This function calls:
  8799 ;;		Nothing
  8800 ;; This function is called by:
  8801 ;;		_Sensor_getSupplyVoltage
  8802 ;; This function uses a non-reentrant model
  8803 ;;
  8804                           
  8805                           
  8806                           ;psect for function _ADC_GetConversionResult
  8807  135F                     _ADC_GetConversionResult:	
  8808                           
  8809                           ;adc.c: 104: return ((adc_result_t)((ADRESH << 8) + ADRESL));
  8810                           
  8811                           ;incstack = 0
  8812                           ; Regs used in _ADC_GetConversionResult: [wreg]
  8813  135F  0021               	movlb	1	; select bank1
  8814  1360  081C               	movf	28,w	;volatile
  8815  1361  0020               	movlb	0	; select bank0
  8816  1362  00A2               	movwf	?_ADC_GetConversionResult+1
  8817  1363  0021               	movlb	1	; select bank1
  8818  1364  081B               	movf	27,w	;volatile
  8819  1365  0020               	movlb	0	; select bank0
  8820  1366  00A1               	movwf	?_ADC_GetConversionResult
  8821  1367  0008               	return
  8822  1368                     __end_of_ADC_GetConversionResult:	
  8823                           
  8824                           	psect	text30
  8825  13FA                     __ptext30:	
  8826 ;; *************** function _Diag_getSensorHealth *****************
  8827 ;; Defined at:
  8828 ;;		line 35 in file "diagnostics.c"
  8829 ;; Parameters:    Size  Location     Type
  8830 ;;		None
  8831 ;; Auto vars:     Size  Location     Type
  8832 ;;  var             1    2[BANK0 ] unsigned char 
  8833 ;; Return value:  Size  Location     Type
  8834 ;;                  1    wreg      unsigned char 
  8835 ;; Registers used:
  8836 ;;		wreg, status,2, status,0
  8837 ;; Tracked objects:
  8838 ;;		On entry : 0/0
  8839 ;;		On exit  : 0/0
  8840 ;;		Unchanged: 0/0
  8841 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8842 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8843 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8844 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8845 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8846 ;;Total ram usage:        2 bytes
  8847 ;; Hardware stack levels used:    1
  8848 ;; Hardware stack levels required when called:    4
  8849 ;; This function calls:
  8850 ;;		Nothing
  8851 ;; This function is called by:
  8852 ;;		_Wireless_packageData
  8853 ;; This function uses a non-reentrant model
  8854 ;;
  8855                           
  8856                           
  8857                           ;psect for function _Diag_getSensorHealth
  8858  13FA                     _Diag_getSensorHealth:	
  8859                           
  8860                           ;diagnostics.c: 38: char var=0;
  8861                           
  8862                           ;incstack = 0
  8863                           ; Regs used in _Diag_getSensorHealth: [wreg+status,2+status,0]
  8864  13FA  0020               	movlb	0	; select bank0
  8865  13FB  01A2               	clrf	Diag_getSensorHealth@var
  8866                           
  8867                           ;diagnostics.c: 40: var|=sensorHealth.compassHealth;
  8868  13FC  0022               	movlb	2	; select bank2
  8869  13FD  086B               	movf	(_sensorHealth^(0+256)+1),w
  8870  13FE  0020               	movlb	0	; select bank0
  8871  13FF  00A1               	movwf	??_Diag_getSensorHealth
  8872  1400  0821               	movf	??_Diag_getSensorHealth,w
  8873  1401  04A2               	iorwf	Diag_getSensorHealth@var,f
  8874                           
  8875                           ;diagnostics.c: 41: var<<=1;
  8876  1402  1003               	clrc
  8877  1403  0DA2               	rlf	Diag_getSensorHealth@var,f
  8878                           
  8879                           ;diagnostics.c: 42: var|=sensorHealth.tempSensorHealth;
  8880  1404  0022               	movlb	2	; select bank2
  8881  1405  086A               	movf	_sensorHealth^(0+256),w
  8882  1406  0020               	movlb	0	; select bank0
  8883  1407  00A1               	movwf	??_Diag_getSensorHealth
  8884  1408  0821               	movf	??_Diag_getSensorHealth,w
  8885  1409  04A2               	iorwf	Diag_getSensorHealth@var,f
  8886                           
  8887                           ;diagnostics.c: 44: return var;
  8888  140A  0822               	movf	Diag_getSensorHealth@var,w
  8889  140B  0008               	return
  8890  140C                     __end_of_Diag_getSensorHealth:	
  8891                           
  8892                           	psect	text31
  8893  0B6E                     __ptext31:	
  8894 ;; *************** function _Wireless_init *****************
  8895 ;; Defined at:
  8896 ;;		line 20 in file "wireless.c"
  8897 ;; Parameters:    Size  Location     Type
  8898 ;;		None
  8899 ;; Auto vars:     Size  Location     Type
  8900 ;;		None
  8901 ;; Return value:  Size  Location     Type
  8902 ;;                  1    wreg      void 
  8903 ;; Registers used:
  8904 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  8905 ;; Tracked objects:
  8906 ;;		On entry : 0/0
  8907 ;;		On exit  : 0/0
  8908 ;;		Unchanged: 0/0
  8909 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8910 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8911 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8912 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8913 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8914 ;;Total ram usage:        2 bytes
  8915 ;; Hardware stack levels used:    1
  8916 ;; Hardware stack levels required when called:    8
  8917 ;; This function calls:
  8918 ;;		_RF_Init
  8919 ;;		_RF_ResetStatusIRQ
  8920 ;;		_RF_WriteRegister
  8921 ;;		_RF_WriteRegisterData
  8922 ;; This function is called by:
  8923 ;;		_main
  8924 ;; This function uses a non-reentrant model
  8925 ;;
  8926                           
  8927                           
  8928                           ;psect for function _Wireless_init
  8929  0B6E                     _Wireless_init:	
  8930                           
  8931                           ;wireless.c: 26: static const uint8_t TADDR[5] = "10001";
  8932                           ;wireless.c: 34: _delay((unsigned long)((100)*(8000000/4000.0)));
  8933                           
  8934                           ;incstack = 0
  8935                           ; Regs used in _Wireless_init: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  8936  0B6E  3002               	movlw	2
  8937  0B6F  0020               	movlb	0	; select bank0
  8938  0B70  00AF               	movwf	??_Wireless_init+1
  8939  0B71  3004               	movlw	4
  8940  0B72  00AE               	movwf	??_Wireless_init
  8941  0B73  30BA               	movlw	186
  8942  0B74                     u7177:	
  8943  0B74  0B89               	decfsz	9,f
  8944  0B75  2B74               	goto	u7177
  8945  0B76  0BAE               	decfsz	??_Wireless_init,f
  8946  0B77  2B74               	goto	u7177
  8947  0B78  0BAF               	decfsz	??_Wireless_init+1,f
  8948  0B79  2B74               	goto	u7177
  8949  0B7A  0000               	nop
  8950                           
  8951                           ;wireless.c: 36: RF_Init();
  8952  0B7B  3192  22DE  318B   	fcall	_RF_Init
  8953                           
  8954                           ;wireless.c: 38: RF_WriteRegister(0x06, 0x06|0x20);
  8955  0B7E  3026               	movlw	38
  8956  0B7F  0020               	movlb	0	; select bank0
  8957  0B80  00AE               	movwf	??_Wireless_init
  8958  0B81  082E               	movf	??_Wireless_init,w
  8959  0B82  00A3               	movwf	RF_WriteRegister@val
  8960  0B83  3006               	movlw	6
  8961  0B84  3194  2449  318B   	fcall	_RF_WriteRegister
  8962                           
  8963                           ;wireless.c: 39: RF_WriteRegister(0x11, 7);
  8964  0B87  3007               	movlw	7
  8965  0B88  0020               	movlb	0	; select bank0
  8966  0B89  00AE               	movwf	??_Wireless_init
  8967  0B8A  082E               	movf	??_Wireless_init,w
  8968  0B8B  00A3               	movwf	RF_WriteRegister@val
  8969  0B8C  3011               	movlw	17
  8970  0B8D  3194  2449  318B   	fcall	_RF_WriteRegister
  8971                           
  8972                           ;wireless.c: 40: RF_WriteRegister(0x05, 2);
  8973  0B90  3002               	movlw	2
  8974  0B91  0020               	movlb	0	; select bank0
  8975  0B92  00AE               	movwf	??_Wireless_init
  8976  0B93  082E               	movf	??_Wireless_init,w
  8977  0B94  00A3               	movwf	RF_WriteRegister@val
  8978  0B95  3005               	movlw	5
  8979  0B96  3194  2449  318B   	fcall	_RF_WriteRegister
  8980                           
  8981                           ;wireless.c: 43: RF_WriteRegisterData(0x0A, (uint8_t*)TADDR, sizeof(TADDR));
  8982  0B99  3021               	movlw	low (Wireless_init@TADDR| (0+32768))
  8983  0B9A  0020               	movlb	0	; select bank0
  8984  0B9B  00A9               	movwf	RF_WriteRegisterData@buf
  8985  0B9C  3098               	movlw	high (Wireless_init@TADDR| (0+32768))
  8986  0B9D  00AA               	movwf	RF_WriteRegisterData@buf+1
  8987  0B9E  3005               	movlw	5
  8988  0B9F  00AE               	movwf	??_Wireless_init
  8989  0BA0  082E               	movf	??_Wireless_init,w
  8990  0BA1  00AB               	movwf	RF_WriteRegisterData@bufSize
  8991  0BA2  300A               	movlw	10
  8992  0BA3  3195  2562  318B   	fcall	_RF_WriteRegisterData
  8993                           
  8994                           ;wireless.c: 44: RF_WriteRegisterData(0x10, (uint8_t*)TADDR, sizeof(TADDR));
  8995  0BA6  3021               	movlw	low (Wireless_init@TADDR| (0+32768))
  8996  0BA7  0020               	movlb	0	; select bank0
  8997  0BA8  00A9               	movwf	RF_WriteRegisterData@buf
  8998  0BA9  3098               	movlw	high (Wireless_init@TADDR| (0+32768))
  8999  0BAA  00AA               	movwf	RF_WriteRegisterData@buf+1
  9000  0BAB  3005               	movlw	5
  9001  0BAC  00AE               	movwf	??_Wireless_init
  9002  0BAD  082E               	movf	??_Wireless_init,w
  9003  0BAE  00AB               	movwf	RF_WriteRegisterData@bufSize
  9004  0BAF  3010               	movlw	16
  9005  0BB0  3195  2562  318B   	fcall	_RF_WriteRegisterData
  9006                           
  9007                           ;wireless.c: 47: RF_WriteRegister(0x02, 0x01);
  9008  0BB3  0020               	movlb	0	; select bank0
  9009  0BB4  01A3               	clrf	RF_WriteRegister@val
  9010  0BB5  0AA3               	incf	RF_WriteRegister@val,f
  9011  0BB6  3002               	movlw	2
  9012  0BB7  3194  2449  318B   	fcall	_RF_WriteRegister
  9013                           
  9014                           ;wireless.c: 50: RF_ResetStatusIRQ(0x40|0x20|0x10);
  9015  0BBA  3070               	movlw	112
  9016  0BBB  3195  25D8  318B   	fcall	_RF_ResetStatusIRQ
  9017                           
  9018                           ;wireless.c: 52: RF_WriteRegister(0x01, 0x01);
  9019  0BBE  0020               	movlb	0	; select bank0
  9020  0BBF  01A3               	clrf	RF_WriteRegister@val
  9021  0BC0  0AA3               	incf	RF_WriteRegister@val,f
  9022  0BC1  3001               	movlw	1
  9023  0BC2  3194  2449  318B   	fcall	_RF_WriteRegister
  9024                           
  9025                           ;wireless.c: 53: RF_WriteRegister(0x04, 0xF0|0x01);
  9026  0BC5  30F1               	movlw	241
  9027  0BC6  0020               	movlb	0	; select bank0
  9028  0BC7  00AE               	movwf	??_Wireless_init
  9029  0BC8  082E               	movf	??_Wireless_init,w
  9030  0BC9  00A3               	movwf	RF_WriteRegister@val
  9031  0BCA  3004               	movlw	4
  9032  0BCB  3194  2449  318B   	fcall	_RF_WriteRegister
  9033                           
  9034                           ;wireless.c: 54: RF_WriteRegister(0x00, (1<<3)|(1<<2)|(1<<1)|(0));
  9035  0BCE  300E               	movlw	14
  9036  0BCF  0020               	movlb	0	; select bank0
  9037  0BD0  00AE               	movwf	??_Wireless_init
  9038  0BD1  082E               	movf	??_Wireless_init,w
  9039  0BD2  00A3               	movwf	RF_WriteRegister@val
  9040  0BD3  3000               	movlw	0
  9041  0BD4  3194  2449  318B   	fcall	_RF_WriteRegister
  9042                           
  9043                           ;wireless.c: 55: RF_WriteRegister(0x1D, (1<<2) | (1<<1));
  9044  0BD7  3006               	movlw	6
  9045  0BD8  0020               	movlb	0	; select bank0
  9046  0BD9  00AE               	movwf	??_Wireless_init
  9047  0BDA  082E               	movf	??_Wireless_init,w
  9048  0BDB  00A3               	movwf	RF_WriteRegister@val
  9049  0BDC  301D               	movlw	29
  9050  0BDD  3194  2449  318B   	fcall	_RF_WriteRegister
  9051                           
  9052                           ;wireless.c: 56: RF_WriteRegister(0x1C, (1<<0));
  9053  0BE0  0020               	movlb	0	; select bank0
  9054  0BE1  01A3               	clrf	RF_WriteRegister@val
  9055  0BE2  0AA3               	incf	RF_WriteRegister@val,f
  9056  0BE3  301C               	movlw	28
  9057  0BE4  3194  2449         	fcall	_RF_WriteRegister
  9058                           
  9059                           ;wireless.c: 57: do { LATCbits.LATC2 = 0; } while(0);
  9060  0BE6  0022               	movlb	2	; select bank2
  9061  0BE7  110E               	bcf	14,2	;volatile
  9062  0BE8  0008               	return
  9063  0BE9                     __end_of_Wireless_init:	
  9064                           
  9065                           	psect	text32
  9066  1562                     __ptext32:	
  9067 ;; *************** function _RF_WriteRegisterData *****************
  9068 ;; Defined at:
  9069 ;;		line 113 in file "nrf24.c"
  9070 ;; Parameters:    Size  Location     Type
  9071 ;;  reg             1    wreg     unsigned char 
  9072 ;;  buf             2    9[BANK0 ] PTR unsigned char 
  9073 ;;		 -> Wireless_packageData@data(7), Wireless_determineTransmitPower@testPayload(1), Wireless_init@TADDR(5), 
  9074 ;;  bufSize         1   11[BANK0 ] unsigned char 
  9075 ;; Auto vars:     Size  Location     Type
  9076 ;;  reg             1   13[BANK0 ] unsigned char 
  9077 ;; Return value:  Size  Location     Type
  9078 ;;                  1    wreg      void 
  9079 ;; Registers used:
  9080 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  9081 ;; Tracked objects:
  9082 ;;		On entry : 0/0
  9083 ;;		On exit  : 0/0
  9084 ;;		Unchanged: 0/0
  9085 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9086 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9087 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9088 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9089 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9090 ;;Total ram usage:        5 bytes
  9091 ;; Hardware stack levels used:    1
  9092 ;; Hardware stack levels required when called:    7
  9093 ;; This function calls:
  9094 ;;		_SPI_WriteBuffer
  9095 ;;		_SPI_WriteRead
  9096 ;; This function is called by:
  9097 ;;		_RF_TxPayload
  9098 ;;		_Wireless_init
  9099 ;;		_RF_openWritingPipe
  9100 ;;		_RF_openReadingPipe
  9101 ;; This function uses a non-reentrant model
  9102 ;;
  9103                           
  9104                           
  9105                           ;psect for function _RF_WriteRegisterData
  9106  1562                     _RF_WriteRegisterData:	
  9107                           
  9108                           ;incstack = 0
  9109                           ; Regs used in _RF_WriteRegisterData: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  9110                           ;RF_WriteRegisterData@reg stored from wreg
  9111  1562  0020               	movlb	0	; select bank0
  9112  1563  00AD               	movwf	RF_WriteRegisterData@reg
  9113                           
  9114                           ;nrf24.c: 114: do { LATCbits.LATC1 = 0; } while(0);
  9115  1564  0022               	movlb	2	; select bank2
  9116  1565  108E               	bcf	14,1	;volatile
  9117                           
  9118                           ;nrf24.c: 115: (void)SPI_WriteRead(0x20|reg);
  9119  1566  0020               	movlb	0	; select bank0
  9120  1567  082D               	movf	RF_WriteRegisterData@reg,w
  9121  1568  3820               	iorlw	32
  9122  1569  3192  22F6  3195   	fcall	_SPI_WriteRead
  9123                           
  9124                           ;nrf24.c: 116: SPI_WriteBuffer(buf, bufSize);
  9125  156C  0020               	movlb	0	; select bank0
  9126  156D  082A               	movf	RF_WriteRegisterData@buf+1,w
  9127  156E  00A4               	movwf	SPI_WriteBuffer@bufOut+1
  9128  156F  0829               	movf	RF_WriteRegisterData@buf,w
  9129  1570  00A3               	movwf	SPI_WriteBuffer@bufOut
  9130  1571  082B               	movf	RF_WriteRegisterData@bufSize,w
  9131  1572  00AC               	movwf	??_RF_WriteRegisterData
  9132  1573  082C               	movf	??_RF_WriteRegisterData,w
  9133  1574  00A5               	movwf	SPI_WriteBuffer@bufSize
  9134  1575  3195  250D  3195   	fcall	_SPI_WriteBuffer
  9135                           
  9136                           ;nrf24.c: 117: do { LATCbits.LATC1 = 1; } while(0);
  9137  1578  0022               	movlb	2	; select bank2
  9138  1579  148E               	bsf	14,1	;volatile
  9139                           
  9140                           ;nrf24.c: 118: _delay((unsigned long)((10)*(8000000/4000000.0)));
  9141  157A  3006               	movlw	6
  9142  157B                     u7187:	
  9143  157B  0B89               	decfsz	9,f
  9144  157C  2D7B               	goto	u7187
  9145  157D  3200               	nop2
  9146  157E  0008               	return
  9147  157F                     __end_of_RF_WriteRegisterData:	
  9148                           
  9149                           	psect	text33
  9150  150D                     __ptext33:	
  9151 ;; *************** function _SPI_WriteBuffer *****************
  9152 ;; Defined at:
  9153 ;;		line 56 in file "nrf24.c"
  9154 ;; Parameters:    Size  Location     Type
  9155 ;;  bufOut          2    3[BANK0 ] PTR unsigned char 
  9156 ;;		 -> Wireless_packageData@data(7), Wireless_determineTransmitPower@testPayload(1), Wireless_init@TADDR(5), 
  9157 ;;  bufSize         1    5[BANK0 ] unsigned char 
  9158 ;; Auto vars:     Size  Location     Type
  9159 ;;  i               1    8[BANK0 ] unsigned char 
  9160 ;; Return value:  Size  Location     Type
  9161 ;;                  1    wreg      void 
  9162 ;; Registers used:
  9163 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  9164 ;; Tracked objects:
  9165 ;;		On entry : 0/0
  9166 ;;		On exit  : 0/0
  9167 ;;		Unchanged: 0/0
  9168 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9169 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9170 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9171 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9172 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9173 ;;Total ram usage:        6 bytes
  9174 ;; Hardware stack levels used:    1
  9175 ;; Hardware stack levels required when called:    6
  9176 ;; This function calls:
  9177 ;;		_SPI_WriteRead
  9178 ;; This function is called by:
  9179 ;;		_RF_WriteRegisterData
  9180 ;; This function uses a non-reentrant model
  9181 ;;
  9182                           
  9183                           
  9184                           ;psect for function _SPI_WriteBuffer
  9185  150D                     _SPI_WriteBuffer:	
  9186                           
  9187                           ;nrf24.c: 57: uint8_t i;
  9188                           ;nrf24.c: 59: for(i=0;i<bufSize;i++) {
  9189                           
  9190                           ;incstack = 0
  9191                           ; Regs used in _SPI_WriteBuffer: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  9192  150D  0020               	movlb	0	; select bank0
  9193  150E  01A8               	clrf	SPI_WriteBuffer@i
  9194  150F                     l5519:	
  9195  150F  0825               	movf	SPI_WriteBuffer@bufSize,w
  9196  1510  0228               	subwf	SPI_WriteBuffer@i,w
  9197  1511  1803               	btfsc	3,0
  9198  1512  0008               	return
  9199                           
  9200                           ;nrf24.c: 60: (void)SPI_WriteRead(bufOut[i]);
  9201  1513  0824               	movf	SPI_WriteBuffer@bufOut+1,w
  9202  1514  00A7               	movwf	??_SPI_WriteBuffer+1
  9203  1515  0823               	movf	SPI_WriteBuffer@bufOut,w
  9204  1516  00A6               	movwf	??_SPI_WriteBuffer
  9205  1517  0828               	movf	SPI_WriteBuffer@i,w
  9206  1518  0726               	addwf	??_SPI_WriteBuffer,w
  9207  1519  0084               	movwf	4
  9208  151A  0827               	movf	??_SPI_WriteBuffer+1,w
  9209  151B  1803               	skipnc
  9210  151C  0A27               	incf	??_SPI_WriteBuffer+1,w
  9211  151D  0085               	movwf	5
  9212  151E  0800               	movf	0,w	;code access
  9213  151F  3192  22F6  3195   	fcall	_SPI_WriteRead
  9214  1522  3001               	movlw	1
  9215  1523  0020               	movlb	0	; select bank0
  9216  1524  00A6               	movwf	??_SPI_WriteBuffer
  9217  1525  0826               	movf	??_SPI_WriteBuffer,w
  9218  1526  07A8               	addwf	SPI_WriteBuffer@i,f
  9219  1527  2D0F               	goto	l5519
  9220  1528                     __end_of_SPI_WriteBuffer:	
  9221                           
  9222                           	psect	text34
  9223  15D8                     __ptext34:	
  9224 ;; *************** function _RF_ResetStatusIRQ *****************
  9225 ;; Defined at:
  9226 ;;		line 158 in file "nrf24.c"
  9227 ;; Parameters:    Size  Location     Type
  9228 ;;  flags           1    wreg     unsigned char 
  9229 ;; Auto vars:     Size  Location     Type
  9230 ;;  flags           1    6[BANK0 ] unsigned char 
  9231 ;; Return value:  Size  Location     Type
  9232 ;;                  1    wreg      void 
  9233 ;; Registers used:
  9234 ;;		wreg, status,2, status,0, pclath, cstack
  9235 ;; Tracked objects:
  9236 ;;		On entry : 0/0
  9237 ;;		On exit  : 0/0
  9238 ;;		Unchanged: 0/0
  9239 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9240 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9241 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9242 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9243 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9244 ;;Total ram usage:        2 bytes
  9245 ;; Hardware stack levels used:    1
  9246 ;; Hardware stack levels required when called:    7
  9247 ;; This function calls:
  9248 ;;		_RF_WriteRegister
  9249 ;; This function is called by:
  9250 ;;		_Wireless_init
  9251 ;;		_Wireless_sendData
  9252 ;; This function uses a non-reentrant model
  9253 ;;
  9254                           
  9255                           
  9256                           ;psect for function _RF_ResetStatusIRQ
  9257  15D8                     _RF_ResetStatusIRQ:	
  9258                           
  9259                           ;incstack = 0
  9260                           ; Regs used in _RF_ResetStatusIRQ: [wreg+status,2+status,0+pclath+cstack]
  9261                           ;RF_ResetStatusIRQ@flags stored from wreg
  9262  15D8  0020               	movlb	0	; select bank0
  9263  15D9  00A6               	movwf	RF_ResetStatusIRQ@flags
  9264                           
  9265                           ;nrf24.c: 159: _delay((unsigned long)((10)*(8000000/4000000.0)));
  9266  15DA  3006               	movlw	6
  9267  15DB                     u7197:	
  9268  15DB  0B89               	decfsz	9,f
  9269  15DC  2DDB               	goto	u7197
  9270  15DD  3200               	nop2
  9271                           
  9272                           ;nrf24.c: 160: do { LATCbits.LATC1 = 0; } while(0);
  9273  15DE  0022               	movlb	2	; select bank2
  9274  15DF  108E               	bcf	14,1	;volatile
  9275                           
  9276                           ;nrf24.c: 161: _delay((unsigned long)((10)*(8000000/4000000.0)));
  9277  15E0  3006               	movlw	6
  9278  15E1                     u7207:	
  9279  15E1  0B89               	decfsz	9,f
  9280  15E2  2DE1               	goto	u7207
  9281  15E3  3200               	nop2
  9282                           
  9283                           ;nrf24.c: 162: RF_WriteRegister(0x07, flags);
  9284  15E4  0020               	movlb	0	; select bank0
  9285  15E5  0826               	movf	RF_ResetStatusIRQ@flags,w
  9286  15E6  00A5               	movwf	??_RF_ResetStatusIRQ
  9287  15E7  0825               	movf	??_RF_ResetStatusIRQ,w
  9288  15E8  00A3               	movwf	RF_WriteRegister@val
  9289  15E9  3007               	movlw	7
  9290  15EA  3194  2449  3195   	fcall	_RF_WriteRegister
  9291                           
  9292                           ;nrf24.c: 163: _delay((unsigned long)((10)*(8000000/4000000.0)));
  9293  15ED  3006               	movlw	6
  9294  15EE                     u7217:	
  9295  15EE  0B89               	decfsz	9,f
  9296  15EF  2DEE               	goto	u7217
  9297  15F0  3200               	nop2
  9298                           
  9299                           ;nrf24.c: 164: do { LATCbits.LATC1 = 1; } while(0);
  9300  15F1  0022               	movlb	2	; select bank2
  9301  15F2  148E               	bsf	14,1	;volatile
  9302                           
  9303                           ;nrf24.c: 165: _delay((unsigned long)((10)*(8000000/4000000.0)));
  9304  15F3  3006               	movlw	6
  9305  15F4                     u7227:	
  9306  15F4  0B89               	decfsz	9,f
  9307  15F5  2DF4               	goto	u7227
  9308  15F6  3200               	nop2
  9309  15F7  0008               	return
  9310  15F8                     __end_of_RF_ResetStatusIRQ:	
  9311                           
  9312                           	psect	text35
  9313  1449                     __ptext35:	
  9314 ;; *************** function _RF_WriteRegister *****************
  9315 ;; Defined at:
  9316 ;;		line 69 in file "nrf24.c"
  9317 ;; Parameters:    Size  Location     Type
  9318 ;;  reg             1    wreg     unsigned char 
  9319 ;;  val             1    3[BANK0 ] unsigned char 
  9320 ;; Auto vars:     Size  Location     Type
  9321 ;;  reg             1    4[BANK0 ] unsigned char 
  9322 ;; Return value:  Size  Location     Type
  9323 ;;                  1    wreg      void 
  9324 ;; Registers used:
  9325 ;;		wreg, status,2, status,0, pclath, cstack
  9326 ;; Tracked objects:
  9327 ;;		On entry : 0/0
  9328 ;;		On exit  : 0/0
  9329 ;;		Unchanged: 0/0
  9330 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9331 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9332 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9333 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9334 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9335 ;;Total ram usage:        2 bytes
  9336 ;; Hardware stack levels used:    1
  9337 ;; Hardware stack levels required when called:    6
  9338 ;; This function calls:
  9339 ;;		_SPI_WriteRead
  9340 ;; This function is called by:
  9341 ;;		_RF_ResetStatusIRQ
  9342 ;;		_Wireless_init
  9343 ;;		_Wireless_changeTransmitPower
  9344 ;;		_Wireless_sleep
  9345 ;;		_Wireless_wake
  9346 ;; This function uses a non-reentrant model
  9347 ;;
  9348                           
  9349                           
  9350                           ;psect for function _RF_WriteRegister
  9351  1449                     _RF_WriteRegister:	
  9352                           
  9353                           ;incstack = 0
  9354                           ; Regs used in _RF_WriteRegister: [wreg+status,2+status,0+pclath+cstack]
  9355                           ;RF_WriteRegister@reg stored from wreg
  9356  1449  0020               	movlb	0	; select bank0
  9357  144A  00A4               	movwf	RF_WriteRegister@reg
  9358                           
  9359                           ;nrf24.c: 70: do { LATCbits.LATC1 = 0; } while(0);
  9360  144B  0022               	movlb	2	; select bank2
  9361  144C  108E               	bcf	14,1	;volatile
  9362                           
  9363                           ;nrf24.c: 71: (void)SPI_WriteRead(0x20|reg);
  9364  144D  0020               	movlb	0	; select bank0
  9365  144E  0824               	movf	RF_WriteRegister@reg,w
  9366  144F  3820               	iorlw	32
  9367  1450  3192  22F6  3194   	fcall	_SPI_WriteRead
  9368                           
  9369                           ;nrf24.c: 72: (void)SPI_WriteRead(val);
  9370  1453  0020               	movlb	0	; select bank0
  9371  1454  0823               	movf	RF_WriteRegister@val,w
  9372  1455  3192  22F6  3194   	fcall	_SPI_WriteRead
  9373                           
  9374                           ;nrf24.c: 73: do { LATCbits.LATC1 = 1; } while(0);
  9375  1458  0022               	movlb	2	; select bank2
  9376  1459  148E               	bsf	14,1	;volatile
  9377                           
  9378                           ;nrf24.c: 74: _delay((unsigned long)((10)*(8000000/4000000.0)));
  9379  145A  3006               	movlw	6
  9380  145B                     u7237:	
  9381  145B  0B89               	decfsz	9,f
  9382  145C  2C5B               	goto	u7237
  9383  145D  3200               	nop2
  9384  145E  0008               	return
  9385  145F                     __end_of_RF_WriteRegister:	
  9386                           
  9387                           	psect	text36
  9388  12F6                     __ptext36:	
  9389 ;; *************** function _SPI_WriteRead *****************
  9390 ;; Defined at:
  9391 ;;		line 26 in file "nrf24.c"
  9392 ;; Parameters:    Size  Location     Type
  9393 ;;  val             1    wreg     unsigned char 
  9394 ;; Auto vars:     Size  Location     Type
  9395 ;;  val             1    2[BANK0 ] unsigned char 
  9396 ;; Return value:  Size  Location     Type
  9397 ;;                  1    wreg      unsigned char 
  9398 ;; Registers used:
  9399 ;;		wreg, pclath, cstack
  9400 ;; Tracked objects:
  9401 ;;		On entry : 0/0
  9402 ;;		On exit  : 0/0
  9403 ;;		Unchanged: 0/0
  9404 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9405 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9406 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9407 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9408 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9409 ;;Total ram usage:        1 bytes
  9410 ;; Hardware stack levels used:    1
  9411 ;; Hardware stack levels required when called:    5
  9412 ;; This function calls:
  9413 ;;		_SPI1_Exchange8bit
  9414 ;; This function is called by:
  9415 ;;		_SPI_WriteReadBuffer
  9416 ;;		_SPI_WriteBuffer
  9417 ;;		_RF_WriteRegister
  9418 ;;		_RF_ReadRegister
  9419 ;;		_RF_ReadRegisterData
  9420 ;;		_RF_WriteRegisterData
  9421 ;;		_RF_WriteRead
  9422 ;;		_RF_Write
  9423 ;; This function uses a non-reentrant model
  9424 ;;
  9425                           
  9426                           
  9427                           ;psect for function _SPI_WriteRead
  9428  12F6                     _SPI_WriteRead:	
  9429                           
  9430                           ;incstack = 0
  9431                           ; Regs used in _SPI_WriteRead: [wreg+pclath+cstack]
  9432                           ;SPI_WriteRead@val stored from wreg
  9433  12F6  0020               	movlb	0	; select bank0
  9434  12F7  00A2               	movwf	SPI_WriteRead@val
  9435                           
  9436                           ;nrf24.c: 34: return SPI1_Exchange8bit(val);
  9437  12F8  0822               	movf	SPI_WriteRead@val,w
  9438  12F9  3193  2372         	fcall	_SPI1_Exchange8bit
  9439  12FB  0008               	return
  9440  12FC                     __end_of_SPI_WriteRead:	
  9441                           
  9442                           	psect	text37
  9443  1372                     __ptext37:	
  9444 ;; *************** function _SPI1_Exchange8bit *****************
  9445 ;; Defined at:
  9446 ;;		line 77 in file "mcc_generated_files/spi1.c"
  9447 ;; Parameters:    Size  Location     Type
  9448 ;;  data            1    wreg     unsigned char 
  9449 ;; Auto vars:     Size  Location     Type
  9450 ;;  data            1    1[BANK0 ] unsigned char 
  9451 ;; Return value:  Size  Location     Type
  9452 ;;                  1    wreg      unsigned char 
  9453 ;; Registers used:
  9454 ;;		wreg
  9455 ;; Tracked objects:
  9456 ;;		On entry : 0/0
  9457 ;;		On exit  : 0/0
  9458 ;;		Unchanged: 0/0
  9459 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9460 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9461 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9462 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9463 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9464 ;;Total ram usage:        1 bytes
  9465 ;; Hardware stack levels used:    1
  9466 ;; Hardware stack levels required when called:    4
  9467 ;; This function calls:
  9468 ;;		Nothing
  9469 ;; This function is called by:
  9470 ;;		_SPI_WriteRead
  9471 ;;		_SPI1_Exchange8bitBuffer
  9472 ;; This function uses a non-reentrant model
  9473 ;;
  9474                           
  9475                           
  9476                           ;psect for function _SPI1_Exchange8bit
  9477  1372                     _SPI1_Exchange8bit:	
  9478                           
  9479                           ;incstack = 0
  9480                           ; Regs used in _SPI1_Exchange8bit: [wreg]
  9481                           ;SPI1_Exchange8bit@data stored from wreg
  9482  1372  0020               	movlb	0	; select bank0
  9483  1373  00A1               	movwf	SPI1_Exchange8bit@data
  9484                           
  9485                           ;spi1.c: 80: SSP1CON1bits.WCOL = 0;
  9486  1374  0024               	movlb	4	; select bank4
  9487  1375  1395               	bcf	21,7	;volatile
  9488                           
  9489                           ;spi1.c: 82: SSP1BUF = data;
  9490  1376  0020               	movlb	0	; select bank0
  9491  1377  0821               	movf	SPI1_Exchange8bit@data,w
  9492  1378  0024               	movlb	4	; select bank4
  9493  1379  0091               	movwf	17	;volatile
  9494  137A                     l522:	
  9495                           ;spi1.c: 85: {
  9496                           
  9497                           ;spi1.c: 84: while(SSP1STATbits.BF == 0x0)
  9498                           
  9499  137A  1C14               	btfss	20,0	;volatile
  9500  137B  2B7A               	goto	l522
  9501                           
  9502                           ;spi1.c: 86: }
  9503                           ;spi1.c: 88: return (SSP1BUF);
  9504  137C  0811               	movf	17,w	;volatile
  9505  137D  0008               	return
  9506  137E                     __end_of_SPI1_Exchange8bit:	
  9507                           
  9508                           	psect	text38
  9509  12DE                     __ptext38:	
  9510 ;; *************** function _RF_Init *****************
  9511 ;; Defined at:
  9512 ;;		line 195 in file "nrf24.c"
  9513 ;; Parameters:    Size  Location     Type
  9514 ;;		None
  9515 ;; Auto vars:     Size  Location     Type
  9516 ;;		None
  9517 ;; Return value:  Size  Location     Type
  9518 ;;                  1    wreg      void 
  9519 ;; Registers used:
  9520 ;;		None
  9521 ;; Tracked objects:
  9522 ;;		On entry : 0/0
  9523 ;;		On exit  : 0/0
  9524 ;;		Unchanged: 0/0
  9525 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9526 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9527 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9528 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9529 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9530 ;;Total ram usage:        0 bytes
  9531 ;; Hardware stack levels used:    1
  9532 ;; Hardware stack levels required when called:    4
  9533 ;; This function calls:
  9534 ;;		Nothing
  9535 ;; This function is called by:
  9536 ;;		_Wireless_init
  9537 ;; This function uses a non-reentrant model
  9538 ;;
  9539                           
  9540                           
  9541                           ;psect for function _RF_Init
  9542  12DE                     _RF_Init:	
  9543                           
  9544                           ;incstack = 0
  9545                           ; Regs used in _RF_Init: []
  9546                           ;nrf24.c: 196: do { LATCbits.LATC2 = 0; } while(0);
  9547  12DE  0022               	movlb	2	; select bank2
  9548  12DF  110E               	bcf	14,2	;volatile
  9549                           
  9550                           ;nrf24.c: 197: do { LATCbits.LATC1 = 1; } while(0);
  9551  12E0  148E               	bsf	14,1	;volatile
  9552  12E1  0008               	return
  9553  12E2                     __end_of_RF_Init:	
  9554                           
  9555                           	psect	text39
  9556  0A37                     __ptext39:	
  9557 ;; *************** function _Timeout_updateCurrentTime *****************
  9558 ;; Defined at:
  9559 ;;		line 13 in file "timeout.c"
  9560 ;; Parameters:    Size  Location     Type
  9561 ;;		None
  9562 ;; Auto vars:     Size  Location     Type
  9563 ;;  var             4   17[BANK0 ] unsigned long 
  9564 ;; Return value:  Size  Location     Type
  9565 ;;                  1    wreg      void 
  9566 ;; Registers used:
  9567 ;;		wreg, status,2, status,0, pclath, cstack
  9568 ;; Tracked objects:
  9569 ;;		On entry : 0/0
  9570 ;;		On exit  : 0/0
  9571 ;;		Unchanged: 0/0
  9572 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9573 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9574 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9575 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9576 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9577 ;;Total ram usage:        8 bytes
  9578 ;; Hardware stack levels used:    1
  9579 ;; Hardware stack levels required when called:    5
  9580 ;; This function calls:
  9581 ;;		_TMR1_ReadTimer
  9582 ;;		___lmul
  9583 ;; This function is called by:
  9584 ;;		_main
  9585 ;; This function uses a non-reentrant model
  9586 ;;
  9587                           
  9588                           
  9589                           ;psect for function _Timeout_updateCurrentTime
  9590  0A37                     _Timeout_updateCurrentTime:	
  9591                           
  9592                           ;timeout.c: 15: unsigned long var = 10;
  9593                           
  9594                           ;incstack = 0
  9595                           ; Regs used in _Timeout_updateCurrentTime: [wreg+status,2+status,0+pclath+cstack]
  9596  0A37  3000               	movlw	0
  9597  0A38  0020               	movlb	0	; select bank0
  9598  0A39  00B4               	movwf	Timeout_updateCurrentTime@var+3
  9599  0A3A  3000               	movlw	0
  9600  0A3B  00B3               	movwf	Timeout_updateCurrentTime@var+2
  9601  0A3C  3000               	movlw	0
  9602  0A3D  00B2               	movwf	Timeout_updateCurrentTime@var+1
  9603  0A3E  300A               	movlw	10
  9604  0A3F  00B1               	movwf	Timeout_updateCurrentTime@var
  9605                           
  9606                           ;timeout.c: 16: var = TMR1_ReadTimer();
  9607  0A40  3195  2545  318A   	fcall	_TMR1_ReadTimer
  9608  0A43  0020               	movlb	0	; select bank0
  9609  0A44  0821               	movf	?_TMR1_ReadTimer,w
  9610  0A45  00B1               	movwf	Timeout_updateCurrentTime@var
  9611  0A46  0822               	movf	?_TMR1_ReadTimer+1,w
  9612  0A47  00B2               	movwf	Timeout_updateCurrentTime@var+1
  9613  0A48  01B3               	clrf	Timeout_updateCurrentTime@var+2
  9614  0A49  01B4               	clrf	Timeout_updateCurrentTime@var+3
  9615                           
  9616                           ;timeout.c: 17: var= var - 0x6000;
  9617  0A4A  3000               	movlw	0
  9618  0A4B  00AD               	movwf	??_Timeout_updateCurrentTime
  9619  0A4C  30A0               	movlw	160
  9620  0A4D  00AE               	movwf	??_Timeout_updateCurrentTime+1
  9621  0A4E  30FF               	movlw	255
  9622  0A4F  00AF               	movwf	??_Timeout_updateCurrentTime+2
  9623  0A50  30FF               	movlw	255
  9624  0A51  00B0               	movwf	??_Timeout_updateCurrentTime+3
  9625  0A52  0831               	movf	Timeout_updateCurrentTime@var,w
  9626  0A53  07AD               	addwf	??_Timeout_updateCurrentTime,f
  9627  0A54  0832               	movf	Timeout_updateCurrentTime@var+1,w
  9628  0A55  3DAE               	addwfc	??_Timeout_updateCurrentTime+1,f
  9629  0A56  0833               	movf	Timeout_updateCurrentTime@var+2,w
  9630  0A57  3DAF               	addwfc	??_Timeout_updateCurrentTime+2,f
  9631  0A58  0834               	movf	Timeout_updateCurrentTime@var+3,w
  9632  0A59  3DB0               	addwfc	??_Timeout_updateCurrentTime+3,f
  9633  0A5A  0830               	movf	??_Timeout_updateCurrentTime+3,w
  9634  0A5B  00B4               	movwf	Timeout_updateCurrentTime@var+3
  9635  0A5C  082F               	movf	??_Timeout_updateCurrentTime+2,w
  9636  0A5D  00B3               	movwf	Timeout_updateCurrentTime@var+2
  9637  0A5E  082E               	movf	??_Timeout_updateCurrentTime+1,w
  9638  0A5F  00B2               	movwf	Timeout_updateCurrentTime@var+1
  9639  0A60  082D               	movf	??_Timeout_updateCurrentTime,w
  9640  0A61  00B1               	movwf	Timeout_updateCurrentTime@var
  9641                           
  9642                           ;timeout.c: 18: globalCounter += ((var*1000)/4096);
  9643  0A62  0834               	movf	Timeout_updateCurrentTime@var+3,w
  9644  0A63  00A4               	movwf	___lmul@multiplier+3
  9645  0A64  0833               	movf	Timeout_updateCurrentTime@var+2,w
  9646  0A65  00A3               	movwf	___lmul@multiplier+2
  9647  0A66  0832               	movf	Timeout_updateCurrentTime@var+1,w
  9648  0A67  00A2               	movwf	___lmul@multiplier+1
  9649  0A68  0831               	movf	Timeout_updateCurrentTime@var,w
  9650  0A69  00A1               	movwf	___lmul@multiplier
  9651  0A6A  3000               	movlw	0
  9652  0A6B  00A8               	movwf	___lmul@multiplicand+3
  9653  0A6C  3000               	movlw	0
  9654  0A6D  00A7               	movwf	___lmul@multiplicand+2
  9655  0A6E  3003               	movlw	3
  9656  0A6F  00A6               	movwf	___lmul@multiplicand+1
  9657  0A70  30E8               	movlw	232
  9658  0A71  00A5               	movwf	___lmul@multiplicand
  9659  0A72  3197  272C  318A   	fcall	___lmul
  9660  0A75  0020               	movlb	0	; select bank0
  9661  0A76  0821               	movf	?___lmul,w
  9662  0A77  00AD               	movwf	??_Timeout_updateCurrentTime
  9663  0A78  0822               	movf	?___lmul+1,w
  9664  0A79  00AE               	movwf	??_Timeout_updateCurrentTime+1
  9665  0A7A  0823               	movf	?___lmul+2,w
  9666  0A7B  00AF               	movwf	??_Timeout_updateCurrentTime+2
  9667  0A7C  0824               	movf	?___lmul+3,w
  9668  0A7D  00B0               	movwf	??_Timeout_updateCurrentTime+3
  9669  0A7E  300C               	movlw	12
  9670  0A7F                     u6375:	
  9671  0A7F  36B0               	lsrf	??_Timeout_updateCurrentTime+3,f
  9672  0A80  0CAF               	rrf	??_Timeout_updateCurrentTime+2,f
  9673  0A81  0CAE               	rrf	??_Timeout_updateCurrentTime+1,f
  9674  0A82  0CAD               	rrf	??_Timeout_updateCurrentTime,f
  9675  0A83  0B89               	decfsz	9,f
  9676  0A84  2A7F               	goto	u6375
  9677  0A85  082D               	movf	??_Timeout_updateCurrentTime,w
  9678  0A86  0021               	movlb	1	; select bank1
  9679  0A87  07D2               	addwf	_globalCounter^(0+128),f	;volatile
  9680  0A88  0020               	movlb	0	; select bank0
  9681  0A89  082E               	movf	??_Timeout_updateCurrentTime+1,w
  9682  0A8A  0021               	movlb	1	; select bank1
  9683  0A8B  3DD3               	addwfc	(_globalCounter+1)^(0+128),f	;volatile
  9684  0A8C  0020               	movlb	0	; select bank0
  9685  0A8D  082F               	movf	??_Timeout_updateCurrentTime+2,w
  9686  0A8E  0021               	movlb	1	; select bank1
  9687  0A8F  3DD4               	addwfc	(_globalCounter+2)^(0+128),f	;volatile
  9688  0A90  0020               	movlb	0	; select bank0
  9689  0A91  0830               	movf	??_Timeout_updateCurrentTime+3,w
  9690  0A92  0021               	movlb	1	; select bank1
  9691  0A93  3DD5               	addwfc	(_globalCounter+3)^(0+128),f	;volatile
  9692  0A94  0008               	return
  9693  0A95                     __end_of_Timeout_updateCurrentTime:	
  9694                           
  9695                           	psect	text40
  9696  172C                     __ptext40:	
  9697 ;; *************** function ___lmul *****************
  9698 ;; Defined at:
  9699 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\Umul32.c"
  9700 ;; Parameters:    Size  Location     Type
  9701 ;;  multiplier      4    1[BANK0 ] unsigned long 
  9702 ;;  multiplicand    4    5[BANK0 ] unsigned long 
  9703 ;; Auto vars:     Size  Location     Type
  9704 ;;  product         4    9[BANK0 ] unsigned long 
  9705 ;; Return value:  Size  Location     Type
  9706 ;;                  4    1[BANK0 ] unsigned long 
  9707 ;; Registers used:
  9708 ;;		wreg, status,2, status,0
  9709 ;; Tracked objects:
  9710 ;;		On entry : 0/0
  9711 ;;		On exit  : 0/0
  9712 ;;		Unchanged: 0/0
  9713 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9714 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9715 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9716 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9717 ;;      Totals:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9718 ;;Total ram usage:       12 bytes
  9719 ;; Hardware stack levels used:    1
  9720 ;; Hardware stack levels required when called:    4
  9721 ;; This function calls:
  9722 ;;		Nothing
  9723 ;; This function is called by:
  9724 ;;		_Wireless_checkDataReceived
  9725 ;;		_Timeout_updateCurrentTime
  9726 ;; This function uses a non-reentrant model
  9727 ;;
  9728                           
  9729                           
  9730                           ;psect for function ___lmul
  9731  172C                     ___lmul:	
  9732                           
  9733                           ;incstack = 0
  9734                           ; Regs used in ___lmul: [wreg+status,2+status,0]
  9735  172C  3000               	movlw	0
  9736  172D  0020               	movlb	0	; select bank0
  9737  172E  00AC               	movwf	___lmul@product+3
  9738  172F  3000               	movlw	0
  9739  1730  00AB               	movwf	___lmul@product+2
  9740  1731  3000               	movlw	0
  9741  1732  00AA               	movwf	___lmul@product+1
  9742  1733  3000               	movlw	0
  9743  1734  00A9               	movwf	___lmul@product
  9744  1735                     l5827:	
  9745  1735  1C21               	btfss	___lmul@multiplier,0
  9746  1736  2F3F               	goto	l5831
  9747  1737  0825               	movf	___lmul@multiplicand,w
  9748  1738  07A9               	addwf	___lmul@product,f
  9749  1739  0826               	movf	___lmul@multiplicand+1,w
  9750  173A  3DAA               	addwfc	___lmul@product+1,f
  9751  173B  0827               	movf	___lmul@multiplicand+2,w
  9752  173C  3DAB               	addwfc	___lmul@product+2,f
  9753  173D  0828               	movf	___lmul@multiplicand+3,w
  9754  173E  3DAC               	addwfc	___lmul@product+3,f
  9755  173F                     l5831:	
  9756  173F  3001               	movlw	1
  9757  1740                     u5285:	
  9758  1740  35A5               	lslf	___lmul@multiplicand,f
  9759  1741  0DA6               	rlf	___lmul@multiplicand+1,f
  9760  1742  0DA7               	rlf	___lmul@multiplicand+2,f
  9761  1743  0DA8               	rlf	___lmul@multiplicand+3,f
  9762  1744  0B89               	decfsz	9,f
  9763  1745  2F40               	goto	u5285
  9764  1746  3001               	movlw	1
  9765  1747                     u5295:	
  9766  1747  36A4               	lsrf	___lmul@multiplier+3,f
  9767  1748  0CA3               	rrf	___lmul@multiplier+2,f
  9768  1749  0CA2               	rrf	___lmul@multiplier+1,f
  9769  174A  0CA1               	rrf	___lmul@multiplier,f
  9770  174B  0B89               	decfsz	9,f
  9771  174C  2F47               	goto	u5295
  9772  174D  0824               	movf	___lmul@multiplier+3,w
  9773  174E  0423               	iorwf	___lmul@multiplier+2,w
  9774  174F  0422               	iorwf	___lmul@multiplier+1,w
  9775  1750  0421               	iorwf	___lmul@multiplier,w
  9776  1751  1D03               	skipz
  9777  1752  2F35               	goto	l5827
  9778  1753  082C               	movf	___lmul@product+3,w
  9779  1754  00A4               	movwf	?___lmul+3
  9780  1755  082B               	movf	___lmul@product+2,w
  9781  1756  00A3               	movwf	?___lmul+2
  9782  1757  082A               	movf	___lmul@product+1,w
  9783  1758  00A2               	movwf	?___lmul+1
  9784  1759  0829               	movf	___lmul@product,w
  9785  175A  00A1               	movwf	?___lmul
  9786  175B  0008               	return
  9787  175C                     __end_of___lmul:	
  9788                           
  9789                           	psect	text41
  9790  1545                     __ptext41:	
  9791 ;; *************** function _TMR1_ReadTimer *****************
  9792 ;; Defined at:
  9793 ;;		line 104 in file "mcc_generated_files/tmr1.c"
  9794 ;; Parameters:    Size  Location     Type
  9795 ;;		None
  9796 ;; Auto vars:     Size  Location     Type
  9797 ;;  readVal         2    8[BANK0 ] unsigned int 
  9798 ;;  readValLow      1   11[BANK0 ] unsigned char 
  9799 ;;  readValHigh     1   10[BANK0 ] unsigned char 
  9800 ;; Return value:  Size  Location     Type
  9801 ;;                  2    1[BANK0 ] unsigned int 
  9802 ;; Registers used:
  9803 ;;		wreg
  9804 ;; Tracked objects:
  9805 ;;		On entry : 0/0
  9806 ;;		On exit  : 0/0
  9807 ;;		Unchanged: 0/0
  9808 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9809 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9810 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9811 ;;      Temps:          0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9812 ;;      Totals:         0      11       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9813 ;;Total ram usage:       11 bytes
  9814 ;; Hardware stack levels used:    1
  9815 ;; Hardware stack levels required when called:    4
  9816 ;; This function calls:
  9817 ;;		Nothing
  9818 ;; This function is called by:
  9819 ;;		_Timeout_updateCurrentTime
  9820 ;; This function uses a non-reentrant model
  9821 ;;
  9822                           
  9823                           
  9824                           ;psect for function _TMR1_ReadTimer
  9825  1545                     _TMR1_ReadTimer:	
  9826                           
  9827                           ;tmr1.c: 106: uint16_t readVal;
  9828                           ;tmr1.c: 107: uint8_t readValHigh;
  9829                           ;tmr1.c: 108: uint8_t readValLow;
  9830                           ;tmr1.c: 110: readValLow = TMR1L;
  9831                           
  9832                           ;incstack = 0
  9833                           ; Regs used in _TMR1_ReadTimer: [wreg]
  9834  1545  0020               	movlb	0	; select bank0
  9835  1546  0816               	movf	22,w	;volatile
  9836  1547  00A3               	movwf	??_TMR1_ReadTimer
  9837  1548  0823               	movf	??_TMR1_ReadTimer,w
  9838  1549  00AB               	movwf	TMR1_ReadTimer@readValLow
  9839                           
  9840                           ;tmr1.c: 111: readValHigh = TMR1H;
  9841  154A  0817               	movf	23,w	;volatile
  9842  154B  00A3               	movwf	??_TMR1_ReadTimer
  9843  154C  0823               	movf	??_TMR1_ReadTimer,w
  9844  154D  00AA               	movwf	TMR1_ReadTimer@readValHigh
  9845                           
  9846                           ;tmr1.c: 113: readVal = ((uint16_t)readValHigh << 8) | readValLow;
  9847  154E  082B               	movf	TMR1_ReadTimer@readValLow,w
  9848  154F  00A3               	movwf	??_TMR1_ReadTimer
  9849  1550  01A4               	clrf	??_TMR1_ReadTimer+1
  9850  1551  082A               	movf	TMR1_ReadTimer@readValHigh,w
  9851  1552  00A5               	movwf	??_TMR1_ReadTimer+2
  9852  1553  01A6               	clrf	??_TMR1_ReadTimer+3
  9853  1554  0825               	movf	??_TMR1_ReadTimer+2,w
  9854  1555  00A6               	movwf	??_TMR1_ReadTimer+3
  9855  1556  01A5               	clrf	??_TMR1_ReadTimer+2
  9856  1557  0823               	movf	??_TMR1_ReadTimer,w
  9857  1558  0425               	iorwf	??_TMR1_ReadTimer+2,w
  9858  1559  00A8               	movwf	TMR1_ReadTimer@readVal
  9859  155A  0824               	movf	??_TMR1_ReadTimer+1,w
  9860  155B  0426               	iorwf	??_TMR1_ReadTimer+3,w
  9861  155C  00A9               	movwf	TMR1_ReadTimer@readVal+1
  9862                           
  9863                           ;tmr1.c: 115: return readVal;
  9864  155D  0829               	movf	TMR1_ReadTimer@readVal+1,w
  9865  155E  00A2               	movwf	?_TMR1_ReadTimer+1
  9866  155F  0828               	movf	TMR1_ReadTimer@readVal,w
  9867  1560  00A1               	movwf	?_TMR1_ReadTimer
  9868  1561  0008               	return
  9869  1562                     __end_of_TMR1_ReadTimer:	
  9870                           
  9871                           	psect	text42
  9872  13D7                     __ptext42:	
  9873 ;; *************** function _Timeout_getGlobalCounter *****************
  9874 ;; Defined at:
  9875 ;;		line 21 in file "timeout.c"
  9876 ;; Parameters:    Size  Location     Type
  9877 ;;		None
  9878 ;; Auto vars:     Size  Location     Type
  9879 ;;		None
  9880 ;; Return value:  Size  Location     Type
  9881 ;;                  4    1[BANK0 ] unsigned long 
  9882 ;; Registers used:
  9883 ;;		wreg
  9884 ;; Tracked objects:
  9885 ;;		On entry : 0/0
  9886 ;;		On exit  : 0/0
  9887 ;;		Unchanged: 0/0
  9888 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9889 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9890 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9891 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9892 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9893 ;;Total ram usage:        4 bytes
  9894 ;; Hardware stack levels used:    1
  9895 ;; Hardware stack levels required when called:    4
  9896 ;; This function calls:
  9897 ;;		Nothing
  9898 ;; This function is called by:
  9899 ;;		_main
  9900 ;; This function uses a non-reentrant model
  9901 ;;
  9902                           
  9903                           
  9904                           ;psect for function _Timeout_getGlobalCounter
  9905  13D7                     _Timeout_getGlobalCounter:	
  9906                           
  9907                           ;timeout.c: 23: return globalCounter;
  9908                           
  9909                           ;incstack = 0
  9910                           ; Regs used in _Timeout_getGlobalCounter: [wreg]
  9911  13D7  0021               	movlb	1	; select bank1
  9912  13D8  0855               	movf	(_globalCounter+3)^(0+128),w	;volatile
  9913  13D9  0020               	movlb	0	; select bank0
  9914  13DA  00A4               	movwf	?_Timeout_getGlobalCounter+3
  9915  13DB  0021               	movlb	1	; select bank1
  9916  13DC  0854               	movf	(_globalCounter+2)^(0+128),w	;volatile
  9917  13DD  0020               	movlb	0	; select bank0
  9918  13DE  00A3               	movwf	?_Timeout_getGlobalCounter+2
  9919  13DF  0021               	movlb	1	; select bank1
  9920  13E0  0853               	movf	(_globalCounter+1)^(0+128),w	;volatile
  9921  13E1  0020               	movlb	0	; select bank0
  9922  13E2  00A2               	movwf	?_Timeout_getGlobalCounter+1
  9923  13E3  0021               	movlb	1	; select bank1
  9924  13E4  0852               	movf	_globalCounter^(0+128),w	;volatile
  9925  13E5  0020               	movlb	0	; select bank0
  9926  13E6  00A1               	movwf	?_Timeout_getGlobalCounter
  9927  13E7  0008               	return
  9928  13E8                     __end_of_Timeout_getGlobalCounter:	
  9929                           
  9930                           	psect	text43
  9931  14F2                     __ptext43:	
  9932 ;; *************** function _SYSTEM_Initialize *****************
  9933 ;; Defined at:
  9934 ;;		line 70 in file "mcc_generated_files/mcc.c"
  9935 ;; Parameters:    Size  Location     Type
  9936 ;;		None
  9937 ;; Auto vars:     Size  Location     Type
  9938 ;;		None
  9939 ;; Return value:  Size  Location     Type
  9940 ;;                  1    wreg      void 
  9941 ;; Registers used:
  9942 ;;		wreg, status,2, status,0, pclath, cstack
  9943 ;; Tracked objects:
  9944 ;;		On entry : 0/0
  9945 ;;		On exit  : 0/0
  9946 ;;		Unchanged: 0/0
  9947 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9948 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9949 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9950 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9951 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9952 ;;Total ram usage:        0 bytes
  9953 ;; Hardware stack levels used:    1
  9954 ;; Hardware stack levels required when called:    6
  9955 ;; This function calls:
  9956 ;;		_ADC_Initialize
  9957 ;;		_FVR_Initialize
  9958 ;;		_I2C2_Initialize
  9959 ;;		_OSCILLATOR_Initialize
  9960 ;;		_PIN_MANAGER_Initialize
  9961 ;;		_SPI1_Initialize
  9962 ;;		_TMR1_Initialize
  9963 ;;		_TMR2_Initialize
  9964 ;;		_WDT_Initialize
  9965 ;; This function is called by:
  9966 ;;		_main
  9967 ;; This function uses a non-reentrant model
  9968 ;;
  9969                           
  9970                           
  9971                           ;psect for function _SYSTEM_Initialize
  9972  14F2                     _SYSTEM_Initialize:	
  9973                           
  9974                           ;mcc.c: 73: PIN_MANAGER_Initialize();
  9975                           
  9976                           ;incstack = 0
  9977                           ; Regs used in _SYSTEM_Initialize: [wreg+status,2+status,0+pclath+cstack]
  9978  14F2  3196  26D5  3194   	fcall	_PIN_MANAGER_Initialize
  9979                           
  9980                           ;mcc.c: 74: OSCILLATOR_Initialize();
  9981  14F5  3193  230E  3194   	fcall	_OSCILLATOR_Initialize
  9982                           
  9983                           ;mcc.c: 75: WDT_Initialize();
  9984  14F8  3192  22DA  3194   	fcall	_WDT_Initialize
  9985                           
  9986                           ;mcc.c: 76: SPI1_Initialize();
  9987  14FB  3193  2315  3194   	fcall	_SPI1_Initialize
  9988                           
  9989                           ;mcc.c: 77: I2C2_Initialize();
  9990  14FE  3194  24D7  3194   	fcall	_I2C2_Initialize
  9991                           
  9992                           ;mcc.c: 78: FVR_Initialize();
  9993  1501  3192  22D6  3194   	fcall	_FVR_Initialize
  9994                           
  9995                           ;mcc.c: 79: ADC_Initialize();
  9996  1504  3193  232B  3194   	fcall	_ADC_Initialize
  9997                           
  9998                           ;mcc.c: 80: TMR2_Initialize();
  9999  1507  3193  2333  3194   	fcall	_TMR2_Initialize
 10000                           
 10001                           ;mcc.c: 81: TMR1_Initialize();
 10002  150A  3194  2475         	fcall	_TMR1_Initialize
 10003  150C  0008               	return
 10004  150D                     __end_of_SYSTEM_Initialize:	
 10005                           
 10006                           	psect	text44
 10007  12DA                     __ptext44:	
 10008 ;; *************** function _WDT_Initialize *****************
 10009 ;; Defined at:
 10010 ;;		line 94 in file "mcc_generated_files/mcc.c"
 10011 ;; Parameters:    Size  Location     Type
 10012 ;;		None
 10013 ;; Auto vars:     Size  Location     Type
 10014 ;;		None
 10015 ;; Return value:  Size  Location     Type
 10016 ;;                  1    wreg      void 
 10017 ;; Registers used:
 10018 ;;		wreg
 10019 ;; Tracked objects:
 10020 ;;		On entry : 0/0
 10021 ;;		On exit  : 0/0
 10022 ;;		Unchanged: 0/0
 10023 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10024 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10025 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10026 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10027 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10028 ;;Total ram usage:        0 bytes
 10029 ;; Hardware stack levels used:    1
 10030 ;; Hardware stack levels required when called:    4
 10031 ;; This function calls:
 10032 ;;		Nothing
 10033 ;; This function is called by:
 10034 ;;		_SYSTEM_Initialize
 10035 ;; This function uses a non-reentrant model
 10036 ;;
 10037                           
 10038                           
 10039                           ;psect for function _WDT_Initialize
 10040  12DA                     _WDT_Initialize:	
 10041                           
 10042                           ;mcc.c: 97: WDTCON = 0x1A;
 10043                           
 10044                           ;incstack = 0
 10045                           ; Regs used in _WDT_Initialize: [wreg]
 10046  12DA  301A               	movlw	26
 10047  12DB  0021               	movlb	1	; select bank1
 10048  12DC  0097               	movwf	23	;volatile
 10049  12DD  0008               	return
 10050  12DE                     __end_of_WDT_Initialize:	
 10051                           
 10052                           	psect	text45
 10053  1333                     __ptext45:	
 10054 ;; *************** function _TMR2_Initialize *****************
 10055 ;; Defined at:
 10056 ;;		line 61 in file "mcc_generated_files/tmr2.c"
 10057 ;; Parameters:    Size  Location     Type
 10058 ;;		None
 10059 ;; Auto vars:     Size  Location     Type
 10060 ;;		None
 10061 ;; Return value:  Size  Location     Type
 10062 ;;                  1    wreg      void 
 10063 ;; Registers used:
 10064 ;;		wreg, status,2
 10065 ;; Tracked objects:
 10066 ;;		On entry : 0/0
 10067 ;;		On exit  : 0/0
 10068 ;;		Unchanged: 0/0
 10069 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10070 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10071 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10072 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10073 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10074 ;;Total ram usage:        0 bytes
 10075 ;; Hardware stack levels used:    1
 10076 ;; Hardware stack levels required when called:    4
 10077 ;; This function calls:
 10078 ;;		Nothing
 10079 ;; This function is called by:
 10080 ;;		_SYSTEM_Initialize
 10081 ;; This function uses a non-reentrant model
 10082 ;;
 10083                           
 10084                           
 10085                           ;psect for function _TMR2_Initialize
 10086  1333                     _TMR2_Initialize:	
 10087                           
 10088                           ;tmr2.c: 66: PR2 = 0x44;
 10089                           
 10090                           ;incstack = 0
 10091                           ; Regs used in _TMR2_Initialize: [wreg+status,2]
 10092  1333  3044               	movlw	68
 10093  1334  0020               	movlb	0	; select bank0
 10094  1335  009B               	movwf	27	;volatile
 10095                           
 10096                           ;tmr2.c: 69: TMR2 = 0x00;
 10097  1336  019A               	clrf	26	;volatile
 10098                           
 10099                           ;tmr2.c: 72: PIR1bits.TMR2IF = 0;
 10100  1337  1091               	bcf	17,1	;volatile
 10101                           
 10102                           ;tmr2.c: 75: T2CON = 0x46;
 10103  1338  3046               	movlw	70
 10104  1339  009C               	movwf	28	;volatile
 10105  133A  0008               	return
 10106  133B                     __end_of_TMR2_Initialize:	
 10107                           
 10108                           	psect	text46
 10109  1475                     __ptext46:	
 10110 ;; *************** function _TMR1_Initialize *****************
 10111 ;; Defined at:
 10112 ;;		line 63 in file "mcc_generated_files/tmr1.c"
 10113 ;; Parameters:    Size  Location     Type
 10114 ;;		None
 10115 ;; Auto vars:     Size  Location     Type
 10116 ;;		None
 10117 ;; Return value:  Size  Location     Type
 10118 ;;                  1    wreg      void 
 10119 ;; Registers used:
 10120 ;;		wreg, status,2, status,0, pclath, cstack
 10121 ;; Tracked objects:
 10122 ;;		On entry : 0/0
 10123 ;;		On exit  : 0/0
 10124 ;;		Unchanged: 0/0
 10125 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10126 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10127 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10128 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10129 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10130 ;;Total ram usage:        0 bytes
 10131 ;; Hardware stack levels used:    1
 10132 ;; Hardware stack levels required when called:    5
 10133 ;; This function calls:
 10134 ;;		_TMR1_SetInterruptHandler
 10135 ;; This function is called by:
 10136 ;;		_SYSTEM_Initialize
 10137 ;; This function uses a non-reentrant model
 10138 ;;
 10139                           
 10140                           
 10141                           ;psect for function _TMR1_Initialize
 10142  1475                     _TMR1_Initialize:	
 10143                           
 10144                           ;tmr1.c: 68: T1GCON = 0x00;
 10145                           
 10146                           ;incstack = 0
 10147                           ; Regs used in _TMR1_Initialize: [wreg+status,2+status,0+pclath+cstack]
 10148  1475  0020               	movlb	0	; select bank0
 10149  1476  0199               	clrf	25	;volatile
 10150                           
 10151                           ;tmr1.c: 71: TMR1H = 0x60;
 10152  1477  3060               	movlw	96
 10153  1478  0097               	movwf	23	;volatile
 10154                           
 10155                           ;tmr1.c: 74: TMR1L = 0x00;
 10156  1479  0196               	clrf	22	;volatile
 10157                           
 10158                           ;tmr1.c: 77: timer1ReloadVal=(uint16_t)((TMR1H << 8) | TMR1L);
 10159  147A  0817               	movf	23,w	;volatile
 10160  147B  00FD               	movwf	_timer1ReloadVal+1	;volatile
 10161  147C  0816               	movf	22,w	;volatile
 10162  147D  00FC               	movwf	_timer1ReloadVal	;volatile
 10163                           
 10164                           ;tmr1.c: 80: PIR1bits.TMR1IF = 0;
 10165  147E  1011               	bcf	17,0	;volatile
 10166                           
 10167                           ;tmr1.c: 83: PIE1bits.TMR1IE = 1;
 10168  147F  0021               	movlb	1	; select bank1
 10169  1480  1411               	bsf	17,0	;volatile
 10170                           
 10171                           ;tmr1.c: 86: TMR1_SetInterruptHandler(TMR1_DefaultInterruptHandler);
 10172  1481  30CC               	movlw	low _TMR1_DefaultInterruptHandler
 10173  1482  0020               	movlb	0	; select bank0
 10174  1483  00A1               	movwf	TMR1_SetInterruptHandler@InterruptHandler
 10175  1484  3012               	movlw	high _TMR1_DefaultInterruptHandler
 10176  1485  00A2               	movwf	TMR1_SetInterruptHandler@InterruptHandler+1
 10177  1486  3193  2356         	fcall	_TMR1_SetInterruptHandler
 10178                           
 10179                           ;tmr1.c: 89: T1CON = 0xBD;
 10180  1488  30BD               	movlw	189
 10181  1489  0020               	movlb	0	; select bank0
 10182  148A  0098               	movwf	24	;volatile
 10183  148B  0008               	return
 10184  148C                     __end_of_TMR1_Initialize:	
 10185                           
 10186                           	psect	text47
 10187  1356                     __ptext47:	
 10188 ;; *************** function _TMR1_SetInterruptHandler *****************
 10189 ;; Defined at:
 10190 ;;		line 181 in file "mcc_generated_files/tmr1.c"
 10191 ;; Parameters:    Size  Location     Type
 10192 ;;  InterruptHan    2    1[BANK0 ] PTR FTN()void 
 10193 ;;		 -> TMR1_DefaultInterruptHandler(1), 
 10194 ;; Auto vars:     Size  Location     Type
 10195 ;;		None
 10196 ;; Return value:  Size  Location     Type
 10197 ;;                  1    wreg      void 
 10198 ;; Registers used:
 10199 ;;		wreg
 10200 ;; Tracked objects:
 10201 ;;		On entry : 0/0
 10202 ;;		On exit  : 0/0
 10203 ;;		Unchanged: 0/0
 10204 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10205 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10206 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10207 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10208 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10209 ;;Total ram usage:        2 bytes
 10210 ;; Hardware stack levels used:    1
 10211 ;; Hardware stack levels required when called:    4
 10212 ;; This function calls:
 10213 ;;		Nothing
 10214 ;; This function is called by:
 10215 ;;		_TMR1_Initialize
 10216 ;; This function uses a non-reentrant model
 10217 ;;
 10218                           
 10219                           
 10220                           ;psect for function _TMR1_SetInterruptHandler
 10221  1356                     _TMR1_SetInterruptHandler:	
 10222                           
 10223                           ;tmr1.c: 182: TMR1_InterruptHandler = InterruptHandler;
 10224                           
 10225                           ;incstack = 0
 10226                           ; Regs used in _TMR1_SetInterruptHandler: [wreg]
 10227  1356  0020               	movlb	0	; select bank0
 10228  1357  0822               	movf	TMR1_SetInterruptHandler@InterruptHandler+1,w
 10229  1358  0022               	movlb	2	; select bank2
 10230  1359  00ED               	movwf	(_TMR1_InterruptHandler+1)^(0+256)
 10231  135A  0020               	movlb	0	; select bank0
 10232  135B  0821               	movf	TMR1_SetInterruptHandler@InterruptHandler,w
 10233  135C  0022               	movlb	2	; select bank2
 10234  135D  00EC               	movwf	_TMR1_InterruptHandler^(0+256)
 10235  135E  0008               	return
 10236  135F                     __end_of_TMR1_SetInterruptHandler:	
 10237                           
 10238                           	psect	text48
 10239  1315                     __ptext48:	
 10240 ;; *************** function _SPI1_Initialize *****************
 10241 ;; Defined at:
 10242 ;;		line 63 in file "mcc_generated_files/spi1.c"
 10243 ;; Parameters:    Size  Location     Type
 10244 ;;		None
 10245 ;; Auto vars:     Size  Location     Type
 10246 ;;		None
 10247 ;; Return value:  Size  Location     Type
 10248 ;;                  1    wreg      void 
 10249 ;; Registers used:
 10250 ;;		wreg, status,2
 10251 ;; Tracked objects:
 10252 ;;		On entry : 0/0
 10253 ;;		On exit  : 0/0
 10254 ;;		Unchanged: 0/0
 10255 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10256 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10257 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10258 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10259 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10260 ;;Total ram usage:        0 bytes
 10261 ;; Hardware stack levels used:    1
 10262 ;; Hardware stack levels required when called:    4
 10263 ;; This function calls:
 10264 ;;		Nothing
 10265 ;; This function is called by:
 10266 ;;		_SYSTEM_Initialize
 10267 ;; This function uses a non-reentrant model
 10268 ;;
 10269                           
 10270                           
 10271                           ;psect for function _SPI1_Initialize
 10272  1315                     _SPI1_Initialize:	
 10273                           
 10274                           ;spi1.c: 68: SSP1STAT = 0x40;
 10275                           
 10276                           ;incstack = 0
 10277                           ; Regs used in _SPI1_Initialize: [wreg+status,2]
 10278  1315  3040               	movlw	64
 10279  1316  0024               	movlb	4	; select bank4
 10280  1317  0094               	movwf	20	;volatile
 10281                           
 10282                           ;spi1.c: 71: SSP1CON1 = 0x20;
 10283  1318  3020               	movlw	32
 10284  1319  0095               	movwf	21	;volatile
 10285                           
 10286                           ;spi1.c: 74: SSP1ADD = 0x00;
 10287  131A  0192               	clrf	18	;volatile
 10288  131B  0008               	return
 10289  131C                     __end_of_SPI1_Initialize:	
 10290                           
 10291                           	psect	text49
 10292  16D5                     __ptext49:	
 10293 ;; *************** function _PIN_MANAGER_Initialize *****************
 10294 ;; Defined at:
 10295 ;;		line 54 in file "mcc_generated_files/pin_manager.c"
 10296 ;; Parameters:    Size  Location     Type
 10297 ;;		None
 10298 ;; Auto vars:     Size  Location     Type
 10299 ;;		None
 10300 ;; Return value:  Size  Location     Type
 10301 ;;                  1    wreg      void 
 10302 ;; Registers used:
 10303 ;;		wreg, status,2, status,0, pclath, cstack
 10304 ;; Tracked objects:
 10305 ;;		On entry : 0/0
 10306 ;;		On exit  : 0/0
 10307 ;;		Unchanged: 0/0
 10308 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10309 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10310 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10311 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10312 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10313 ;;Total ram usage:        0 bytes
 10314 ;; Hardware stack levels used:    1
 10315 ;; Hardware stack levels required when called:    5
 10316 ;; This function calls:
 10317 ;;		_IOCAF2_SetInterruptHandler
 10318 ;; This function is called by:
 10319 ;;		_SYSTEM_Initialize
 10320 ;; This function uses a non-reentrant model
 10321 ;;
 10322                           
 10323                           
 10324                           ;psect for function _PIN_MANAGER_Initialize
 10325  16D5                     _PIN_MANAGER_Initialize:	
 10326                           
 10327                           ;pin_manager.c: 59: LATA = 0x00;
 10328                           
 10329                           ;incstack = 0
 10330                           ; Regs used in _PIN_MANAGER_Initialize: [wreg+status,2+status,0+pclath+cstack]
 10331  16D5  0022               	movlb	2	; select bank2
 10332  16D6  018C               	clrf	12	;volatile
 10333                           
 10334                           ;pin_manager.c: 60: LATB = 0x00;
 10335  16D7  018D               	clrf	13	;volatile
 10336                           
 10337                           ;pin_manager.c: 61: LATC = 0x00;
 10338  16D8  018E               	clrf	14	;volatile
 10339                           
 10340                           ;pin_manager.c: 66: TRISA = 0x3F;
 10341  16D9  303F               	movlw	63
 10342  16DA  0021               	movlb	1	; select bank1
 10343  16DB  008C               	movwf	12	;volatile
 10344                           
 10345                           ;pin_manager.c: 67: TRISB = 0xB0;
 10346  16DC  30B0               	movlw	176
 10347  16DD  008D               	movwf	13	;volatile
 10348                           
 10349                           ;pin_manager.c: 68: TRISC = 0x39;
 10350  16DE  3039               	movlw	57
 10351  16DF  008E               	movwf	14	;volatile
 10352                           
 10353                           ;pin_manager.c: 73: ANSELC = 0x01;
 10354  16E0  3001               	movlw	1
 10355  16E1  0023               	movlb	3	; select bank3
 10356  16E2  008E               	movwf	14	;volatile
 10357                           
 10358                           ;pin_manager.c: 74: ANSELB = 0x00;
 10359  16E3  018D               	clrf	13	;volatile
 10360                           
 10361                           ;pin_manager.c: 75: ANSELA = 0x03;
 10362  16E4  3003               	movlw	3
 10363  16E5  008C               	movwf	12	;volatile
 10364                           
 10365                           ;pin_manager.c: 80: WPUB = 0x10;
 10366  16E6  3010               	movlw	16
 10367  16E7  0024               	movlb	4	; select bank4
 10368  16E8  008D               	movwf	13	;volatile
 10369                           
 10370                           ;pin_manager.c: 81: WPUA = 0x3F;
 10371  16E9  303F               	movlw	63
 10372  16EA  008C               	movwf	12	;volatile
 10373                           
 10374                           ;pin_manager.c: 82: WPUC = 0xD1;
 10375  16EB  30D1               	movlw	209
 10376  16EC  008E               	movwf	14	;volatile
 10377                           
 10378                           ;pin_manager.c: 83: OPTION_REGbits.nWPUEN = 0;
 10379  16ED  0021               	movlb	1	; select bank1
 10380  16EE  1395               	bcf	21,7	;volatile
 10381                           
 10382                           ;pin_manager.c: 89: APFCON1 = 0x2A;
 10383  16EF  302A               	movlw	42
 10384  16F0  0022               	movlb	2	; select bank2
 10385  16F1  009E               	movwf	30	;volatile
 10386                           
 10387                           ;pin_manager.c: 90: APFCON0 = 0x00;
 10388  16F2  019D               	clrf	29	;volatile
 10389                           
 10390                           ;pin_manager.c: 96: IOCAFbits.IOCAF2 = 0;
 10391  16F3  0027               	movlb	7	; select bank7
 10392  16F4  1113               	bcf	19,2	;volatile
 10393                           
 10394                           ;pin_manager.c: 98: IOCANbits.IOCAN2 = 1;
 10395  16F5  1512               	bsf	18,2	;volatile
 10396                           
 10397                           ;pin_manager.c: 100: IOCAPbits.IOCAP2 = 1;
 10398  16F6  1511               	bsf	17,2	;volatile
 10399                           
 10400                           ;pin_manager.c: 103: IOCAF2_SetInterruptHandler(IOCAF2_DefaultInterruptHandler);
 10401  16F7  30CB               	movlw	low _IOCAF2_DefaultInterruptHandler
 10402  16F8  0020               	movlb	0	; select bank0
 10403  16F9  00A1               	movwf	IOCAF2_SetInterruptHandler@InterruptHandler
 10404  16FA  3012               	movlw	high _IOCAF2_DefaultInterruptHandler
 10405  16FB  00A2               	movwf	IOCAF2_SetInterruptHandler@InterruptHandler+1
 10406  16FC  3193  234D         	fcall	_IOCAF2_SetInterruptHandler
 10407                           
 10408                           ;pin_manager.c: 106: INTCONbits.IOCIE = 1;
 10409  16FE  158B               	bsf	11,3	;volatile
 10410  16FF  0008               	return
 10411  1700                     __end_of_PIN_MANAGER_Initialize:	
 10412                           
 10413                           	psect	text50
 10414  134D                     __ptext50:	
 10415 ;; *************** function _IOCAF2_SetInterruptHandler *****************
 10416 ;; Defined at:
 10417 ;;		line 139 in file "mcc_generated_files/pin_manager.c"
 10418 ;; Parameters:    Size  Location     Type
 10419 ;;  InterruptHan    2    1[BANK0 ] PTR FTN()void 
 10420 ;;		 -> IOCAF2_DefaultInterruptHandler(1), 
 10421 ;; Auto vars:     Size  Location     Type
 10422 ;;		None
 10423 ;; Return value:  Size  Location     Type
 10424 ;;                  1    wreg      void 
 10425 ;; Registers used:
 10426 ;;		wreg
 10427 ;; Tracked objects:
 10428 ;;		On entry : 0/0
 10429 ;;		On exit  : 0/0
 10430 ;;		Unchanged: 0/0
 10431 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10432 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10433 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10434 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10435 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10436 ;;Total ram usage:        2 bytes
 10437 ;; Hardware stack levels used:    1
 10438 ;; Hardware stack levels required when called:    4
 10439 ;; This function calls:
 10440 ;;		Nothing
 10441 ;; This function is called by:
 10442 ;;		_PIN_MANAGER_Initialize
 10443 ;; This function uses a non-reentrant model
 10444 ;;
 10445                           
 10446                           
 10447                           ;psect for function _IOCAF2_SetInterruptHandler
 10448  134D                     _IOCAF2_SetInterruptHandler:	
 10449                           
 10450                           ;pin_manager.c: 140: IOCAF2_InterruptHandler = InterruptHandler;
 10451                           
 10452                           ;incstack = 0
 10453                           ; Regs used in _IOCAF2_SetInterruptHandler: [wreg]
 10454  134D  0020               	movlb	0	; select bank0
 10455  134E  0822               	movf	IOCAF2_SetInterruptHandler@InterruptHandler+1,w
 10456  134F  0022               	movlb	2	; select bank2
 10457  1350  00EF               	movwf	(_IOCAF2_InterruptHandler+1)^(0+256)
 10458  1351  0020               	movlb	0	; select bank0
 10459  1352  0821               	movf	IOCAF2_SetInterruptHandler@InterruptHandler,w
 10460  1353  0022               	movlb	2	; select bank2
 10461  1354  00EE               	movwf	_IOCAF2_InterruptHandler^(0+256)
 10462  1355  0008               	return
 10463  1356                     __end_of_IOCAF2_SetInterruptHandler:	
 10464                           
 10465                           	psect	text51
 10466  130E                     __ptext51:	
 10467 ;; *************** function _OSCILLATOR_Initialize *****************
 10468 ;; Defined at:
 10469 ;;		line 84 in file "mcc_generated_files/mcc.c"
 10470 ;; Parameters:    Size  Location     Type
 10471 ;;		None
 10472 ;; Auto vars:     Size  Location     Type
 10473 ;;		None
 10474 ;; Return value:  Size  Location     Type
 10475 ;;                  1    wreg      void 
 10476 ;; Registers used:
 10477 ;;		wreg, status,2
 10478 ;; Tracked objects:
 10479 ;;		On entry : 0/0
 10480 ;;		On exit  : 0/0
 10481 ;;		Unchanged: 0/0
 10482 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10483 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10484 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10485 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10486 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10487 ;;Total ram usage:        0 bytes
 10488 ;; Hardware stack levels used:    1
 10489 ;; Hardware stack levels required when called:    4
 10490 ;; This function calls:
 10491 ;;		Nothing
 10492 ;; This function is called by:
 10493 ;;		_SYSTEM_Initialize
 10494 ;; This function uses a non-reentrant model
 10495 ;;
 10496                           
 10497                           
 10498                           ;psect for function _OSCILLATOR_Initialize
 10499  130E                     _OSCILLATOR_Initialize:	
 10500                           
 10501                           ;mcc.c: 87: OSCCON = 0x72;
 10502                           
 10503                           ;incstack = 0
 10504                           ; Regs used in _OSCILLATOR_Initialize: [wreg+status,2]
 10505  130E  3072               	movlw	114
 10506  130F  0021               	movlb	1	; select bank1
 10507  1310  0099               	movwf	25	;volatile
 10508                           
 10509                           ;mcc.c: 89: OSCTUNE = 0x00;
 10510  1311  0198               	clrf	24	;volatile
 10511                           
 10512                           ;mcc.c: 91: BORCON = 0x00;
 10513  1312  0022               	movlb	2	; select bank2
 10514  1313  0196               	clrf	22	;volatile
 10515  1314  0008               	return
 10516  1315                     __end_of_OSCILLATOR_Initialize:	
 10517                           
 10518                           	psect	text52
 10519  14D7                     __ptext52:	
 10520 ;; *************** function _I2C2_Initialize *****************
 10521 ;; Defined at:
 10522 ;;		line 198 in file "mcc_generated_files/i2c2.c"
 10523 ;; Parameters:    Size  Location     Type
 10524 ;;		None
 10525 ;; Auto vars:     Size  Location     Type
 10526 ;;		None
 10527 ;; Return value:  Size  Location     Type
 10528 ;;                  1    wreg      void 
 10529 ;; Registers used:
 10530 ;;		wreg, status,2
 10531 ;; Tracked objects:
 10532 ;;		On entry : 0/0
 10533 ;;		On exit  : 0/0
 10534 ;;		Unchanged: 0/0
 10535 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10536 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10537 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10538 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10539 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10540 ;;Total ram usage:        1 bytes
 10541 ;; Hardware stack levels used:    1
 10542 ;; Hardware stack levels required when called:    4
 10543 ;; This function calls:
 10544 ;;		Nothing
 10545 ;; This function is called by:
 10546 ;;		_SYSTEM_Initialize
 10547 ;; This function uses a non-reentrant model
 10548 ;;
 10549                           
 10550                           
 10551                           ;psect for function _I2C2_Initialize
 10552  14D7                     _I2C2_Initialize:	
 10553                           
 10554                           ;i2c2.c: 200: i2c2_object.pTrHead = i2c2_tr_queue;
 10555                           
 10556                           ;incstack = 0
 10557                           ; Regs used in _I2C2_Initialize: [wreg+status,2]
 10558  14D7  3062               	movlw	(low (_i2c2_tr_queue| (0+256)))& (0+255)
 10559  14D8  0020               	movlb	0	; select bank0
 10560  14D9  00A1               	movwf	??_I2C2_Initialize
 10561  14DA  0821               	movf	??_I2C2_Initialize,w
 10562  14DB  0021               	movlb	1	; select bank1
 10563  14DC  00CE               	movwf	(low ((_i2c2_object| 0+1)))^(0+128)
 10564                           
 10565                           ;i2c2.c: 201: i2c2_object.pTrTail = i2c2_tr_queue;
 10566  14DD  3062               	movlw	(low (_i2c2_tr_queue| (0+256)))& (0+255)
 10567  14DE  0020               	movlb	0	; select bank0
 10568  14DF  00A1               	movwf	??_I2C2_Initialize
 10569  14E0  0821               	movf	??_I2C2_Initialize,w
 10570  14E1  0021               	movlb	1	; select bank1
 10571  14E2  00CD               	movwf	_i2c2_object^(0+128)
 10572                           
 10573                           ;i2c2.c: 202: i2c2_object.trStatus.s.empty = 1;
 10574  14E3  14CF               	bsf	(_i2c2_object^(0+128)+2),1
 10575                           
 10576                           ;i2c2.c: 203: i2c2_object.trStatus.s.full = 0;
 10577  14E4  104F               	bcf	(_i2c2_object^(0+128)+2),0
 10578                           
 10579                           ;i2c2.c: 205: i2c2_object.i2cErrors = 0;
 10580  14E5  01D1               	clrf	(_i2c2_object^(0+128)+4)
 10581                           
 10582                           ;i2c2.c: 208: SSP2STAT = 0x00;
 10583  14E6  0024               	movlb	4	; select bank4
 10584  14E7  019C               	clrf	28	;volatile
 10585                           
 10586                           ;i2c2.c: 210: SSP2CON1 = 0x28;
 10587  14E8  3028               	movlw	40
 10588  14E9  009D               	movwf	29	;volatile
 10589                           
 10590                           ;i2c2.c: 212: SSP2CON3 = 0x00;
 10591  14EA  019F               	clrf	31	;volatile
 10592                           
 10593                           ;i2c2.c: 214: SSP2ADD = 0x03;
 10594  14EB  3003               	movlw	3
 10595  14EC  009A               	movwf	26	;volatile
 10596                           
 10597                           ;i2c2.c: 218: PIR4bits.SSP2IF = 0;
 10598  14ED  0020               	movlb	0	; select bank0
 10599  14EE  1014               	bcf	20,0	;volatile
 10600                           
 10601                           ;i2c2.c: 220: PIE4bits.SSP2IE = 1;
 10602  14EF  0021               	movlb	1	; select bank1
 10603  14F0  1414               	bsf	20,0	;volatile
 10604  14F1  0008               	return
 10605  14F2                     __end_of_I2C2_Initialize:	
 10606                           
 10607                           	psect	text53
 10608  12D6                     __ptext53:	
 10609 ;; *************** function _FVR_Initialize *****************
 10610 ;; Defined at:
 10611 ;;		line 57 in file "mcc_generated_files/fvr.c"
 10612 ;; Parameters:    Size  Location     Type
 10613 ;;		None
 10614 ;; Auto vars:     Size  Location     Type
 10615 ;;		None
 10616 ;; Return value:  Size  Location     Type
 10617 ;;                  1    wreg      void 
 10618 ;; Registers used:
 10619 ;;		wreg
 10620 ;; Tracked objects:
 10621 ;;		On entry : 0/0
 10622 ;;		On exit  : 0/0
 10623 ;;		Unchanged: 0/0
 10624 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10625 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10626 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10627 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10628 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10629 ;;Total ram usage:        0 bytes
 10630 ;; Hardware stack levels used:    1
 10631 ;; Hardware stack levels required when called:    4
 10632 ;; This function calls:
 10633 ;;		Nothing
 10634 ;; This function is called by:
 10635 ;;		_SYSTEM_Initialize
 10636 ;; This function uses a non-reentrant model
 10637 ;;
 10638                           
 10639                           
 10640                           ;psect for function _FVR_Initialize
 10641  12D6                     _FVR_Initialize:	
 10642                           
 10643                           ;fvr.c: 60: FVRCON = 0x01;
 10644                           
 10645                           ;incstack = 0
 10646                           ; Regs used in _FVR_Initialize: [wreg]
 10647  12D6  3001               	movlw	1
 10648  12D7  0022               	movlb	2	; select bank2
 10649  12D8  0097               	movwf	23	;volatile
 10650  12D9  0008               	return
 10651  12DA                     __end_of_FVR_Initialize:	
 10652                           
 10653                           	psect	text54
 10654  132B                     __ptext54:	
 10655 ;; *************** function _ADC_Initialize *****************
 10656 ;; Defined at:
 10657 ;;		line 62 in file "mcc_generated_files/adc.c"
 10658 ;; Parameters:    Size  Location     Type
 10659 ;;		None
 10660 ;; Auto vars:     Size  Location     Type
 10661 ;;		None
 10662 ;; Return value:  Size  Location     Type
 10663 ;;                  1    wreg      void 
 10664 ;; Registers used:
 10665 ;;		wreg, status,2
 10666 ;; Tracked objects:
 10667 ;;		On entry : 0/0
 10668 ;;		On exit  : 0/0
 10669 ;;		Unchanged: 0/0
 10670 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10671 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10672 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10673 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10674 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10675 ;;Total ram usage:        0 bytes
 10676 ;; Hardware stack levels used:    1
 10677 ;; Hardware stack levels required when called:    4
 10678 ;; This function calls:
 10679 ;;		Nothing
 10680 ;; This function is called by:
 10681 ;;		_SYSTEM_Initialize
 10682 ;; This function uses a non-reentrant model
 10683 ;;
 10684                           
 10685                           
 10686                           ;psect for function _ADC_Initialize
 10687  132B                     _ADC_Initialize:	
 10688                           
 10689                           ;adc.c: 67: ADCON0 = 0x01;
 10690                           
 10691                           ;incstack = 0
 10692                           ; Regs used in _ADC_Initialize: [wreg+status,2]
 10693  132B  3001               	movlw	1
 10694  132C  0021               	movlb	1	; select bank1
 10695  132D  009D               	movwf	29	;volatile
 10696                           
 10697                           ;adc.c: 70: ADCON1 = 0x90;
 10698  132E  3090               	movlw	144
 10699  132F  009E               	movwf	30	;volatile
 10700                           
 10701                           ;adc.c: 73: ADRESL = 0x00;
 10702  1330  019B               	clrf	27	;volatile
 10703                           
 10704                           ;adc.c: 76: ADRESH = 0x00;
 10705  1331  019C               	clrf	28	;volatile
 10706  1332  0008               	return
 10707  1333                     __end_of_ADC_Initialize:	
 10708                           
 10709                           	psect	text55
 10710  12D0                     __ptext55:	
 10711 ;; *************** function _DOOR_run *****************
 10712 ;; Defined at:
 10713 ;;		line 23 in file "doorlogic.c"
 10714 ;; Parameters:    Size  Location     Type
 10715 ;;		None
 10716 ;; Auto vars:     Size  Location     Type
 10717 ;;		None
 10718 ;; Return value:  Size  Location     Type
 10719 ;;                  1    wreg      enum E3332
 10720 ;; Registers used:
 10721 ;;		wreg
 10722 ;; Tracked objects:
 10723 ;;		On entry : 0/0
 10724 ;;		On exit  : 0/0
 10725 ;;		Unchanged: 0/0
 10726 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10727 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10728 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10729 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10730 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10731 ;;Total ram usage:        0 bytes
 10732 ;; Hardware stack levels used:    1
 10733 ;; Hardware stack levels required when called:    4
 10734 ;; This function calls:
 10735 ;;		Nothing
 10736 ;; This function is called by:
 10737 ;;		_main
 10738 ;; This function uses a non-reentrant model
 10739 ;;
 10740                           
 10741                           
 10742                           ;psect for function _DOOR_run
 10743  12D0                     _DOOR_run:	
 10744                           
 10745                           ;doorlogic.c: 24: static DOOR previousDoorState = DOOR_CLOSED;
 10746                           ;doorlogic.c: 25: static unsigned long doorStateDuration = 0;
 10747                           ;doorlogic.c: 50: return(doorState);
 10748                           
 10749                           ;incstack = 0
 10750                           ; Regs used in _DOOR_run: [wreg]
 10751  12D0  0021               	movlb	1	; select bank1
 10752  12D1  085C               	movf	_doorState^(0+128),w
 10753  12D2  0008               	return
 10754  12D3                     __end_of_DOOR_run:	
 10755                           
 10756                           	psect	text56
 10757  0800                     __ptext56:	
 10758 ;; *************** function _DOOR_init *****************
 10759 ;; Defined at:
 10760 ;;		line 10 in file "doorlogic.c"
 10761 ;; Parameters:    Size  Location     Type
 10762 ;;		None
 10763 ;; Auto vars:     Size  Location     Type
 10764 ;;		None
 10765 ;; Return value:  Size  Location     Type
 10766 ;;                  1    wreg      void 
 10767 ;; Registers used:
 10768 ;;		None
 10769 ;; Tracked objects:
 10770 ;;		On entry : 0/0
 10771 ;;		On exit  : 0/0
 10772 ;;		Unchanged: 0/0
 10773 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10774 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10775 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10776 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10777 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10778 ;;Total ram usage:        0 bytes
 10779 ;; Hardware stack levels used:    1
 10780 ;; Hardware stack levels required when called:    4
 10781 ;; This function calls:
 10782 ;;		Nothing
 10783 ;; This function is called by:
 10784 ;;		_main
 10785 ;; This function uses a non-reentrant model
 10786 ;;
 10787                           
 10788                           
 10789                           ;psect for function _DOOR_init
 10790  0800                     _DOOR_init:	
 10791                           
 10792                           ;incstack = 0
 10793                           ; Regs used in _DOOR_init: []
 10794  0800  0008               	return
 10795  0801                     __end_of_DOOR_init:	
 10796                           
 10797                           	psect	text57
 10798  006F                     __ptext57:	
 10799 ;; *************** function _BMP_readTemperature *****************
 10800 ;; Defined at:
 10801 ;;		line 72 in file "bmp280.c"
 10802 ;; Parameters:    Size  Location     Type
 10803 ;;		None
 10804 ;; Auto vars:     Size  Location     Type
 10805 ;;  tmp             1   25[BANK1 ] unsigned char 
 10806 ;;  status          1   24[BANK1 ] unsigned char 
 10807 ;; Return value:  Size  Location     Type
 10808 ;;                  3    6[BANK1 ] float 
 10809 ;; Registers used:
 10810 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10811 ;; Tracked objects:
 10812 ;;		On entry : 0/0
 10813 ;;		On exit  : 0/0
 10814 ;;		Unchanged: 0/0
 10815 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10816 ;;      Params:         0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0
 10817 ;;      Locals:         0       0       5       0       0       0       0       0       0       0       0       0       
      +0       0
 10818 ;;      Temps:          0       0      12       0       0       0       0       0       0       0       0       0       
      +0       0
 10819 ;;      Totals:         0       0      20       0       0       0       0       0       0       0       0       0       
      +0       0
 10820 ;;Total ram usage:       20 bytes
 10821 ;; Hardware stack levels used:    1
 10822 ;; Hardware stack levels required when called:    9
 10823 ;; This function calls:
 10824 ;;		_BMP_init
 10825 ;;		_Diag_getTempSensorHealth
 10826 ;;		_Diag_setTempSensorHealth
 10827 ;;		_HMC5883L_ReadBits
 10828 ;;		_I2C_BufferRead
 10829 ;;		_I2C_ByteWrite
 10830 ;;		___aldiv
 10831 ;;		___altoft
 10832 ;;		___awtoft
 10833 ;;		___ftadd
 10834 ;;		___ftdiv
 10835 ;;		___ftmul
 10836 ;;		___ftneg
 10837 ;;		___fttol
 10838 ;;		___lwtoft
 10839 ;; This function is called by:
 10840 ;;		_main
 10841 ;; This function uses a non-reentrant model
 10842 ;;
 10843                           
 10844                           
 10845                           ;psect for function _BMP_readTemperature
 10846  006F                     _BMP_readTemperature:	
 10847                           
 10848                           ;bmp280.c: 74: char tmp=0;
 10849                           
 10850                           ;incstack = 0
 10851                           ; Regs used in _BMP_readTemperature: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 10852  006F  0021               	movlb	1	; select bank1
 10853  0070  01B9               	clrf	BMP_readTemperature@tmp^(0+128)
 10854                           
 10855                           ;bmp280.c: 75: bool status;
 10856                           ;bmp280.c: 77: tmp=0x41;
 10857  0071  3041               	movlw	65
 10858  0072  00A9               	movwf	??_BMP_readTemperature^(0+128)
 10859  0073  0829               	movf	??_BMP_readTemperature^(0+128),w
 10860  0074  00B9               	movwf	BMP_readTemperature@tmp^(0+128)
 10861                           
 10862                           ;bmp280.c: 78: if(Diag_getTempSensorHealth()==0)
 10863  0075  3192  22CD  3180   	fcall	_Diag_getTempSensorHealth
 10864  0078  3A00               	xorlw	0
 10865  0079  1D03               	skipz
 10866  007A  287E               	goto	l1026
 10867                           
 10868                           ;bmp280.c: 79: {
 10869                           ;bmp280.c: 80: BMP_init();
 10870  007B  318A  22FA  3180   	fcall	_BMP_init
 10871  007E                     l1026:	
 10872                           
 10873                           ;bmp280.c: 81: }
 10874                           ;bmp280.c: 82: I2C_ByteWrite(0x76, &tmp, 0xF4);
 10875  007E  30B9               	movlw	(low (BMP_readTemperature@tmp| 0))& (0+255)
 10876  007F  0021               	movlb	1	; select bank1
 10877  0080  00A9               	movwf	??_BMP_readTemperature^(0+128)
 10878  0081  0829               	movf	??_BMP_readTemperature^(0+128),w
 10879  0082  0020               	movlb	0	; select bank0
 10880  0083  00AF               	movwf	I2C_ByteWrite@pBuffer
 10881  0084  30F4               	movlw	244
 10882  0085  0021               	movlb	1	; select bank1
 10883  0086  00AA               	movwf	(??_BMP_readTemperature+1)^(0+128)
 10884  0087  082A               	movf	(??_BMP_readTemperature+1)^(0+128),w
 10885  0088  0020               	movlb	0	; select bank0
 10886  0089  00B0               	movwf	I2C_ByteWrite@WriteAddr
 10887  008A  3076               	movlw	118
 10888  008B  3197  27C4  3180   	fcall	_I2C_ByteWrite
 10889  008E                     l1027:	
 10890                           ;bmp280.c: 83: do
 10891                           
 10892                           
 10893                           ;bmp280.c: 84: {
 10894                           ;bmp280.c: 85: status=HMC5883L_ReadBits(0x76, 0xF3 , 3, 1, &tmp);
 10895  008E  30F3               	movlw	243
 10896  008F  0021               	movlb	1	; select bank1
 10897  0090  00A9               	movwf	??_BMP_readTemperature^(0+128)
 10898  0091  0829               	movf	??_BMP_readTemperature^(0+128),w
 10899  0092  0020               	movlb	0	; select bank0
 10900  0093  00C3               	movwf	HMC5883L_ReadBits@regAddr
 10901  0094  3003               	movlw	3
 10902  0095  0021               	movlb	1	; select bank1
 10903  0096  00AA               	movwf	(??_BMP_readTemperature+1)^(0+128)
 10904  0097  082A               	movf	(??_BMP_readTemperature+1)^(0+128),w
 10905  0098  0020               	movlb	0	; select bank0
 10906  0099  00C4               	movwf	HMC5883L_ReadBits@bitStart
 10907  009A  01C5               	clrf	HMC5883L_ReadBits@length
 10908  009B  0AC5               	incf	HMC5883L_ReadBits@length,f
 10909  009C  30B9               	movlw	(low (BMP_readTemperature@tmp| 0))& (0+255)
 10910  009D  0021               	movlb	1	; select bank1
 10911  009E  00AB               	movwf	(??_BMP_readTemperature+2)^(0+128)
 10912  009F  082B               	movf	(??_BMP_readTemperature+2)^(0+128),w
 10913  00A0  0020               	movlb	0	; select bank0
 10914  00A1  00C6               	movwf	HMC5883L_ReadBits@data
 10915  00A2  3076               	movlw	118
 10916  00A3  3188  209E  3180   	fcall	_HMC5883L_ReadBits
 10917  00A6  0021               	movlb	1	; select bank1
 10918  00A7  00AC               	movwf	(??_BMP_readTemperature+3)^(0+128)
 10919  00A8  082C               	movf	(??_BMP_readTemperature+3)^(0+128),w
 10920  00A9  00B8               	movwf	BMP_readTemperature@status^(0+128)
 10921                           
 10922                           ;bmp280.c: 86: } while(tmp==0 && status==1);
 10923  00AA  0839               	movf	BMP_readTemperature@tmp^(0+128),w
 10924  00AB  1903               	btfsc	3,2
 10925  00AC  0338               	decf	BMP_readTemperature@status^(0+128),w
 10926  00AD  1903               	btfsc	3,2
 10927  00AE  288E               	goto	l1027
 10928                           
 10929                           ;bmp280.c: 87: if(status==0)
 10930  00AF  0838               	movf	BMP_readTemperature@status^(0+128),w
 10931  00B0  1D03               	btfss	3,2
 10932  00B1  28BD               	goto	l6435
 10933                           
 10934                           ;bmp280.c: 88: {
 10935                           ;bmp280.c: 89: Diag_setTempSensorHealth(0);
 10936  00B2  3000               	movlw	0
 10937  00B3  3193  2323         	fcall	_Diag_setTempSensorHealth
 10938                           
 10939                           ;bmp280.c: 90: return -55;
 10940  00B5  3000               	movlw	0
 10941  00B6  0021               	movlb	1	; select bank1
 10942  00B7  00A6               	movwf	?_BMP_readTemperature^(0+128)
 10943  00B8  305C               	movlw	92
 10944  00B9  00A7               	movwf	(?_BMP_readTemperature+1)^(0+128)
 10945  00BA  30C2               	movlw	194
 10946  00BB  00A8               	movwf	(?_BMP_readTemperature+2)^(0+128)
 10947  00BC  0008               	return
 10948  00BD                     l6435:	
 10949                           
 10950                           ;bmp280.c: 91: }
 10951                           ;bmp280.c: 93: if(I2C_BufferRead(0x76, data, 0xF7, 8)==0)
 10952  00BD  30C0               	movlw	low _data
 10953  00BE  0020               	movlb	0	; select bank0
 10954  00BF  00B1               	movwf	I2C_BufferRead@pBuffer
 10955  00C0  3001               	movlw	high _data
 10956  00C1  00B2               	movwf	I2C_BufferRead@pBuffer+1
 10957  00C2  30F7               	movlw	247
 10958  00C3  0021               	movlb	1	; select bank1
 10959  00C4  00A9               	movwf	??_BMP_readTemperature^(0+128)
 10960  00C5  0829               	movf	??_BMP_readTemperature^(0+128),w
 10961  00C6  0020               	movlb	0	; select bank0
 10962  00C7  00B3               	movwf	I2C_BufferRead@ReadAddr
 10963  00C8  3008               	movlw	8
 10964  00C9  00B4               	movwf	I2C_BufferRead@NumByteToRead
 10965  00CA  3000               	movlw	0
 10966  00CB  00B5               	movwf	I2C_BufferRead@NumByteToRead+1
 10967  00CC  3076               	movlw	118
 10968  00CD  3189  21D9  3180   	fcall	_I2C_BufferRead
 10969  00D0  3A00               	xorlw	0
 10970  00D1  1D03               	skipz
 10971  00D2  28DE               	goto	l6443
 10972                           
 10973                           ;bmp280.c: 94: {
 10974                           ;bmp280.c: 95: Diag_setTempSensorHealth(0);
 10975  00D3  3000               	movlw	0
 10976  00D4  3193  2323         	fcall	_Diag_setTempSensorHealth
 10977                           
 10978                           ;bmp280.c: 96: return -55;
 10979  00D6  3000               	movlw	0
 10980  00D7  0021               	movlb	1	; select bank1
 10981  00D8  00A6               	movwf	?_BMP_readTemperature^(0+128)
 10982  00D9  305C               	movlw	92
 10983  00DA  00A7               	movwf	(?_BMP_readTemperature+1)^(0+128)
 10984  00DB  30C2               	movlw	194
 10985  00DC  00A8               	movwf	(?_BMP_readTemperature+2)^(0+128)
 10986  00DD  0008               	return
 10987  00DE                     l6443:	
 10988                           
 10989                           ;bmp280.c: 97: }
 10990                           ;bmp280.c: 101: adc_t = (((long)(data[3] & 0xFF) * 65536) + ((long)(data[4] & 0xFF) * 25
      +                          6) + (long)(data[5] & 0xF0)) / 16;
 10991  00DE  3000               	movlw	0
 10992  00DF  0020               	movlb	0	; select bank0
 10993  00E0  00A4               	movwf	___aldiv@divisor+3
 10994  00E1  3000               	movlw	0
 10995  00E2  00A3               	movwf	___aldiv@divisor+2
 10996  00E3  3000               	movlw	0
 10997  00E4  00A2               	movwf	___aldiv@divisor+1
 10998  00E5  3010               	movlw	16
 10999  00E6  00A1               	movwf	___aldiv@divisor
 11000  00E7  0023               	movlb	3	; select bank3
 11001  00E8  0845               	movf	(_data^(0+384)+5),w
 11002  00E9  39F0               	andlw	240
 11003  00EA  0021               	movlb	1	; select bank1
 11004  00EB  00A9               	movwf	??_BMP_readTemperature^(0+128)
 11005  00EC  01AA               	clrf	(??_BMP_readTemperature^(0+128)+1)
 11006  00ED  01AB               	clrf	(??_BMP_readTemperature^(0+128)+2)
 11007  00EE  01AC               	clrf	(??_BMP_readTemperature^(0+128)+3)
 11008  00EF  0023               	movlb	3	; select bank3
 11009  00F0  0844               	movf	(_data^(0+384)+4),w
 11010  00F1  0021               	movlb	1	; select bank1
 11011  00F2  00AD               	movwf	(??_BMP_readTemperature+4)^(0+128)
 11012  00F3  01AE               	clrf	((??_BMP_readTemperature+4)^(0+128)+1)
 11013  00F4  01AF               	clrf	((??_BMP_readTemperature+4)^(0+128)+2)
 11014  00F5  01B0               	clrf	((??_BMP_readTemperature+4)^(0+128)+3)
 11015  00F6  3008               	movlw	8
 11016  00F7                     u6325:	
 11017  00F7  35AD               	lslf	(??_BMP_readTemperature+4)^(0+128),f
 11018  00F8  0DAE               	rlf	((??_BMP_readTemperature+4)^(0+128)+1),f
 11019  00F9  0DAF               	rlf	((??_BMP_readTemperature+4)^(0+128)+2),f
 11020  00FA  0DB0               	rlf	((??_BMP_readTemperature+4)^(0+128)+3),f
 11021  00FB  0B89               	decfsz	9,f
 11022  00FC  28F7               	goto	u6325
 11023  00FD  0023               	movlb	3	; select bank3
 11024  00FE  0843               	movf	(_data^(0+384)+3),w
 11025  00FF  0021               	movlb	1	; select bank1
 11026  0100  00B1               	movwf	(??_BMP_readTemperature+8)^(0+128)
 11027  0101  01B2               	clrf	((??_BMP_readTemperature+8)^(0+128)+1)
 11028  0102  01B3               	clrf	((??_BMP_readTemperature+8)^(0+128)+2)
 11029  0103  01B4               	clrf	((??_BMP_readTemperature+8)^(0+128)+3)
 11030  0104  3010               	movlw	16
 11031  0105                     u6335:	
 11032  0105  35B1               	lslf	(??_BMP_readTemperature+8)^(0+128),f
 11033  0106  0DB2               	rlf	((??_BMP_readTemperature+8)^(0+128)+1),f
 11034  0107  0DB3               	rlf	((??_BMP_readTemperature+8)^(0+128)+2),f
 11035  0108  0DB4               	rlf	((??_BMP_readTemperature+8)^(0+128)+3),f
 11036  0109  0B89               	decfsz	9,f
 11037  010A  2905               	goto	u6335
 11038  010B  0831               	movf	(??_BMP_readTemperature+8)^(0+128),w
 11039  010C  07AD               	addwf	(??_BMP_readTemperature+4)^(0+128),f
 11040  010D  0832               	movf	(??_BMP_readTemperature+9)^(0+128),w
 11041  010E  3DAE               	addwfc	((??_BMP_readTemperature+4)^(0+128)+1),f
 11042  010F  0833               	movf	(??_BMP_readTemperature+10)^(0+128),w
 11043  0110  3DAF               	addwfc	((??_BMP_readTemperature+4)^(0+128)+2),f
 11044  0111  0834               	movf	(??_BMP_readTemperature+11)^(0+128),w
 11045  0112  3DB0               	addwfc	((??_BMP_readTemperature+4)^(0+128)+3),f
 11046  0113  082D               	movf	(??_BMP_readTemperature+4)^(0+128),w
 11047  0114  07A9               	addwf	??_BMP_readTemperature^(0+128),f
 11048  0115  082E               	movf	(??_BMP_readTemperature+5)^(0+128),w
 11049  0116  3DAA               	addwfc	(??_BMP_readTemperature^(0+128)+1),f
 11050  0117  082F               	movf	(??_BMP_readTemperature+6)^(0+128),w
 11051  0118  3DAB               	addwfc	(??_BMP_readTemperature^(0+128)+2),f
 11052  0119  0830               	movf	(??_BMP_readTemperature+7)^(0+128),w
 11053  011A  3DAC               	addwfc	(??_BMP_readTemperature^(0+128)+3),f
 11054  011B  082C               	movf	(??_BMP_readTemperature+3)^(0+128),w
 11055  011C  0020               	movlb	0	; select bank0
 11056  011D  00A8               	movwf	___aldiv@dividend+3
 11057  011E  0021               	movlb	1	; select bank1
 11058  011F  082B               	movf	(??_BMP_readTemperature+2)^(0+128),w
 11059  0120  0020               	movlb	0	; select bank0
 11060  0121  00A7               	movwf	___aldiv@dividend+2
 11061  0122  0021               	movlb	1	; select bank1
 11062  0123  082A               	movf	(??_BMP_readTemperature+1)^(0+128),w
 11063  0124  0020               	movlb	0	; select bank0
 11064  0125  00A6               	movwf	___aldiv@dividend+1
 11065  0126  0021               	movlb	1	; select bank1
 11066  0127  0829               	movf	??_BMP_readTemperature^(0+128),w
 11067  0128  0020               	movlb	0	; select bank0
 11068  0129  00A5               	movwf	___aldiv@dividend
 11069  012A  318B  23E9  3180   	fcall	___aldiv
 11070  012D  0020               	movlb	0	; select bank0
 11071  012E  0824               	movf	?___aldiv+3,w
 11072  012F  0022               	movlb	2	; select bank2
 11073  0130  00A7               	movwf	(_adc_t+3)^(0+256)
 11074  0131  0020               	movlb	0	; select bank0
 11075  0132  0823               	movf	?___aldiv+2,w
 11076  0133  0022               	movlb	2	; select bank2
 11077  0134  00A6               	movwf	(_adc_t+2)^(0+256)
 11078  0135  0020               	movlb	0	; select bank0
 11079  0136  0822               	movf	?___aldiv+1,w
 11080  0137  0022               	movlb	2	; select bank2
 11081  0138  00A5               	movwf	(_adc_t+1)^(0+256)
 11082  0139  0020               	movlb	0	; select bank0
 11083  013A  0821               	movf	?___aldiv,w
 11084  013B  0022               	movlb	2	; select bank2
 11085  013C  00A4               	movwf	_adc_t^(0+256)
 11086                           
 11087                           ;bmp280.c: 104: var1 = (((double)adc_t) / 16384.0 - ((double)dig_T1) / 1024.0) * ((doubl
      +                          e)dig_T2);
 11088  013D  0857               	movf	(_dig_T2+1)^(0+256),w
 11089  013E  0020               	movlb	0	; select bank0
 11090  013F  00AA               	movwf	___awtoft@c+1
 11091  0140  0022               	movlb	2	; select bank2
 11092  0141  0856               	movf	_dig_T2^(0+256),w
 11093  0142  0020               	movlb	0	; select bank0
 11094  0143  00A9               	movwf	___awtoft@c
 11095  0144  3196  2618  3180   	fcall	___awtoft
 11096  0147  0020               	movlb	0	; select bank0
 11097  0148  0829               	movf	?___awtoft,w
 11098  0149  00D6               	movwf	___ftmul@f1
 11099  014A  082A               	movf	?___awtoft+1,w
 11100  014B  00D7               	movwf	___ftmul@f1+1
 11101  014C  082B               	movf	?___awtoft+2,w
 11102  014D  00D8               	movwf	___ftmul@f1+2
 11103  014E  0021               	movlb	1	; select bank1
 11104  014F  0857               	movf	(_dig_T1+1)^(0+128),w
 11105  0150  0020               	movlb	0	; select bank0
 11106  0151  00AA               	movwf	___lwtoft@c+1
 11107  0152  0021               	movlb	1	; select bank1
 11108  0153  0856               	movf	_dig_T1^(0+128),w
 11109  0154  0020               	movlb	0	; select bank0
 11110  0155  00A9               	movwf	___lwtoft@c
 11111  0156  3194  241F  3180   	fcall	___lwtoft
 11112  0159  0020               	movlb	0	; select bank0
 11113  015A  0829               	movf	?___lwtoft,w
 11114  015B  00B4               	movwf	___ftdiv@f1
 11115  015C  082A               	movf	?___lwtoft+1,w
 11116  015D  00B5               	movwf	___ftdiv@f1+1
 11117  015E  082B               	movf	?___lwtoft+2,w
 11118  015F  00B6               	movwf	___ftdiv@f1+2
 11119  0160  3000               	movlw	0
 11120  0161  00B1               	movwf	___ftdiv@f2
 11121  0162  3080               	movlw	128
 11122  0163  00B2               	movwf	___ftdiv@f2+1
 11123  0164  3044               	movlw	68
 11124  0165  00B3               	movwf	___ftdiv@f2+2
 11125  0166  318D  25AD  3180   	fcall	___ftdiv
 11126  0169  0020               	movlb	0	; select bank0
 11127  016A  0831               	movf	?___ftdiv,w
 11128  016B  00C1               	movwf	___ftneg@f1
 11129  016C  0832               	movf	?___ftdiv+1,w
 11130  016D  00C2               	movwf	___ftneg@f1+1
 11131  016E  0833               	movf	?___ftdiv+2,w
 11132  016F  00C3               	movwf	___ftneg@f1+2
 11133  0170  3193  2344  3180   	fcall	___ftneg
 11134  0173  0020               	movlb	0	; select bank0
 11135  0174  0841               	movf	?___ftneg,w
 11136  0175  00C9               	movwf	___ftadd@f1
 11137  0176  0842               	movf	?___ftneg+1,w
 11138  0177  00CA               	movwf	___ftadd@f1+1
 11139  0178  0843               	movf	?___ftneg+2,w
 11140  0179  00CB               	movwf	___ftadd@f1+2
 11141  017A  3000               	movlw	0
 11142  017B  00B1               	movwf	___ftdiv@f2
 11143  017C  3080               	movlw	128
 11144  017D  00B2               	movwf	___ftdiv@f2+1
 11145  017E  3046               	movlw	70
 11146  017F  00B3               	movwf	___ftdiv@f2+2
 11147  0180  0022               	movlb	2	; select bank2
 11148  0181  0827               	movf	(_adc_t+3)^(0+256),w
 11149  0182  0020               	movlb	0	; select bank0
 11150  0183  00AC               	movwf	___altoft@c+3
 11151  0184  0022               	movlb	2	; select bank2
 11152  0185  0826               	movf	(_adc_t+2)^(0+256),w
 11153  0186  0020               	movlb	0	; select bank0
 11154  0187  00AB               	movwf	___altoft@c+2
 11155  0188  0022               	movlb	2	; select bank2
 11156  0189  0825               	movf	(_adc_t+1)^(0+256),w
 11157  018A  0020               	movlb	0	; select bank0
 11158  018B  00AA               	movwf	___altoft@c+1
 11159  018C  0022               	movlb	2	; select bank2
 11160  018D  0824               	movf	_adc_t^(0+256),w
 11161  018E  0020               	movlb	0	; select bank0
 11162  018F  00A9               	movwf	___altoft@c
 11163  0190  3188  201C  3180   	fcall	___altoft
 11164  0193  0020               	movlb	0	; select bank0
 11165  0194  0829               	movf	?___altoft,w
 11166  0195  00B4               	movwf	___ftdiv@f1
 11167  0196  082A               	movf	?___altoft+1,w
 11168  0197  00B5               	movwf	___ftdiv@f1+1
 11169  0198  082B               	movf	?___altoft+2,w
 11170  0199  00B6               	movwf	___ftdiv@f1+2
 11171  019A  318D  25AD  3180   	fcall	___ftdiv
 11172  019D  0020               	movlb	0	; select bank0
 11173  019E  0831               	movf	?___ftdiv,w
 11174  019F  00CC               	movwf	___ftadd@f2
 11175  01A0  0832               	movf	?___ftdiv+1,w
 11176  01A1  00CD               	movwf	___ftadd@f2+1
 11177  01A2  0833               	movf	?___ftdiv+2,w
 11178  01A3  00CE               	movwf	___ftadd@f2+2
 11179  01A4  318F  270A  3180   	fcall	___ftadd
 11180  01A7  0020               	movlb	0	; select bank0
 11181  01A8  0849               	movf	?___ftadd,w
 11182  01A9  00D9               	movwf	___ftmul@f2
 11183  01AA  084A               	movf	?___ftadd+1,w
 11184  01AB  00DA               	movwf	___ftmul@f2+1
 11185  01AC  084B               	movf	?___ftadd+2,w
 11186  01AD  00DB               	movwf	___ftmul@f2+2
 11187  01AE  318E  2656  3180   	fcall	___ftmul
 11188  01B1  0020               	movlb	0	; select bank0
 11189  01B2  0856               	movf	?___ftmul,w
 11190  01B3  0022               	movlb	2	; select bank2
 11191  01B4  00B4               	movwf	_var1^(0+256)
 11192  01B5  0020               	movlb	0	; select bank0
 11193  01B6  0857               	movf	?___ftmul+1,w
 11194  01B7  0022               	movlb	2	; select bank2
 11195  01B8  00B5               	movwf	(_var1+1)^(0+256)
 11196  01B9  0020               	movlb	0	; select bank0
 11197  01BA  0858               	movf	?___ftmul+2,w
 11198  01BB  0022               	movlb	2	; select bank2
 11199  01BC  00B6               	movwf	(_var1+2)^(0+256)
 11200                           
 11201                           ;bmp280.c: 105: var2 = ((((double)adc_t) / 131072.0 - ((double)dig_T1) / 8192.0) *
 11202                           ;bmp280.c: 106: (((double)adc_t) / 131072.0 - ((double)dig_T1) / 8192.0)) * ((double)dig
      +                          _T3);
 11203  01BD  0021               	movlb	1	; select bank1
 11204  01BE  0857               	movf	(_dig_T1+1)^(0+128),w
 11205  01BF  0020               	movlb	0	; select bank0
 11206  01C0  00AA               	movwf	___lwtoft@c+1
 11207  01C1  0021               	movlb	1	; select bank1
 11208  01C2  0856               	movf	_dig_T1^(0+128),w
 11209  01C3  0020               	movlb	0	; select bank0
 11210  01C4  00A9               	movwf	___lwtoft@c
 11211  01C5  3194  241F  3180   	fcall	___lwtoft
 11212  01C8  0020               	movlb	0	; select bank0
 11213  01C9  0829               	movf	?___lwtoft,w
 11214  01CA  00B4               	movwf	___ftdiv@f1
 11215  01CB  082A               	movf	?___lwtoft+1,w
 11216  01CC  00B5               	movwf	___ftdiv@f1+1
 11217  01CD  082B               	movf	?___lwtoft+2,w
 11218  01CE  00B6               	movwf	___ftdiv@f1+2
 11219  01CF  3000               	movlw	0
 11220  01D0  00B1               	movwf	___ftdiv@f2
 11221  01D1  3000               	movlw	0
 11222  01D2  00B2               	movwf	___ftdiv@f2+1
 11223  01D3  3046               	movlw	70
 11224  01D4  00B3               	movwf	___ftdiv@f2+2
 11225  01D5  318D  25AD  3180   	fcall	___ftdiv
 11226  01D8  0020               	movlb	0	; select bank0
 11227  01D9  0831               	movf	?___ftdiv,w
 11228  01DA  00C1               	movwf	___ftneg@f1
 11229  01DB  0832               	movf	?___ftdiv+1,w
 11230  01DC  00C2               	movwf	___ftneg@f1+1
 11231  01DD  0833               	movf	?___ftdiv+2,w
 11232  01DE  00C3               	movwf	___ftneg@f1+2
 11233  01DF  3193  2344  3180   	fcall	___ftneg
 11234  01E2  0020               	movlb	0	; select bank0
 11235  01E3  0841               	movf	?___ftneg,w
 11236  01E4  00C9               	movwf	___ftadd@f1
 11237  01E5  0842               	movf	?___ftneg+1,w
 11238  01E6  00CA               	movwf	___ftadd@f1+1
 11239  01E7  0843               	movf	?___ftneg+2,w
 11240  01E8  00CB               	movwf	___ftadd@f1+2
 11241  01E9  3000               	movlw	0
 11242  01EA  00B1               	movwf	___ftdiv@f2
 11243  01EB  3000               	movlw	0
 11244  01EC  00B2               	movwf	___ftdiv@f2+1
 11245  01ED  3048               	movlw	72
 11246  01EE  00B3               	movwf	___ftdiv@f2+2
 11247  01EF  0022               	movlb	2	; select bank2
 11248  01F0  0827               	movf	(_adc_t+3)^(0+256),w
 11249  01F1  0020               	movlb	0	; select bank0
 11250  01F2  00AC               	movwf	___altoft@c+3
 11251  01F3  0022               	movlb	2	; select bank2
 11252  01F4  0826               	movf	(_adc_t+2)^(0+256),w
 11253  01F5  0020               	movlb	0	; select bank0
 11254  01F6  00AB               	movwf	___altoft@c+2
 11255  01F7  0022               	movlb	2	; select bank2
 11256  01F8  0825               	movf	(_adc_t+1)^(0+256),w
 11257  01F9  0020               	movlb	0	; select bank0
 11258  01FA  00AA               	movwf	___altoft@c+1
 11259  01FB  0022               	movlb	2	; select bank2
 11260  01FC  0824               	movf	_adc_t^(0+256),w
 11261  01FD  0020               	movlb	0	; select bank0
 11262  01FE  00A9               	movwf	___altoft@c
 11263  01FF  3188  201C  3180   	fcall	___altoft
 11264  0202  0020               	movlb	0	; select bank0
 11265  0203  0829               	movf	?___altoft,w
 11266  0204  00B4               	movwf	___ftdiv@f1
 11267  0205  082A               	movf	?___altoft+1,w
 11268  0206  00B5               	movwf	___ftdiv@f1+1
 11269  0207  082B               	movf	?___altoft+2,w
 11270  0208  00B6               	movwf	___ftdiv@f1+2
 11271  0209  318D  25AD  3180   	fcall	___ftdiv
 11272  020C  0020               	movlb	0	; select bank0
 11273  020D  0831               	movf	?___ftdiv,w
 11274  020E  00CC               	movwf	___ftadd@f2
 11275  020F  0832               	movf	?___ftdiv+1,w
 11276  0210  00CD               	movwf	___ftadd@f2+1
 11277  0211  0833               	movf	?___ftdiv+2,w
 11278  0212  00CE               	movwf	___ftadd@f2+2
 11279  0213  318F  270A  3180   	fcall	___ftadd
 11280  0216  0020               	movlb	0	; select bank0
 11281  0217  0849               	movf	?___ftadd,w
 11282  0218  00D6               	movwf	___ftmul@f1
 11283  0219  084A               	movf	?___ftadd+1,w
 11284  021A  00D7               	movwf	___ftmul@f1+1
 11285  021B  084B               	movf	?___ftadd+2,w
 11286  021C  00D8               	movwf	___ftmul@f1+2
 11287  021D  0021               	movlb	1	; select bank1
 11288  021E  0857               	movf	(_dig_T1+1)^(0+128),w
 11289  021F  0020               	movlb	0	; select bank0
 11290  0220  00AA               	movwf	___lwtoft@c+1
 11291  0221  0021               	movlb	1	; select bank1
 11292  0222  0856               	movf	_dig_T1^(0+128),w
 11293  0223  0020               	movlb	0	; select bank0
 11294  0224  00A9               	movwf	___lwtoft@c
 11295  0225  3194  241F  3180   	fcall	___lwtoft
 11296  0228  0020               	movlb	0	; select bank0
 11297  0229  0829               	movf	?___lwtoft,w
 11298  022A  00B4               	movwf	___ftdiv@f1
 11299  022B  082A               	movf	?___lwtoft+1,w
 11300  022C  00B5               	movwf	___ftdiv@f1+1
 11301  022D  082B               	movf	?___lwtoft+2,w
 11302  022E  00B6               	movwf	___ftdiv@f1+2
 11303  022F  3000               	movlw	0
 11304  0230  00B1               	movwf	___ftdiv@f2
 11305  0231  3000               	movlw	0
 11306  0232  00B2               	movwf	___ftdiv@f2+1
 11307  0233  3046               	movlw	70
 11308  0234  00B3               	movwf	___ftdiv@f2+2
 11309  0235  318D  25AD  3180   	fcall	___ftdiv
 11310  0238  0020               	movlb	0	; select bank0
 11311  0239  0831               	movf	?___ftdiv,w
 11312  023A  00C1               	movwf	___ftneg@f1
 11313  023B  0832               	movf	?___ftdiv+1,w
 11314  023C  00C2               	movwf	___ftneg@f1+1
 11315  023D  0833               	movf	?___ftdiv+2,w
 11316  023E  00C3               	movwf	___ftneg@f1+2
 11317  023F  3193  2344  3180   	fcall	___ftneg
 11318  0242  0020               	movlb	0	; select bank0
 11319  0243  0841               	movf	?___ftneg,w
 11320  0244  00C9               	movwf	___ftadd@f1
 11321  0245  0842               	movf	?___ftneg+1,w
 11322  0246  00CA               	movwf	___ftadd@f1+1
 11323  0247  0843               	movf	?___ftneg+2,w
 11324  0248  00CB               	movwf	___ftadd@f1+2
 11325  0249  3000               	movlw	0
 11326  024A  00B1               	movwf	___ftdiv@f2
 11327  024B  3000               	movlw	0
 11328  024C  00B2               	movwf	___ftdiv@f2+1
 11329  024D  3048               	movlw	72
 11330  024E  00B3               	movwf	___ftdiv@f2+2
 11331  024F  0022               	movlb	2	; select bank2
 11332  0250  0827               	movf	(_adc_t+3)^(0+256),w
 11333  0251  0020               	movlb	0	; select bank0
 11334  0252  00AC               	movwf	___altoft@c+3
 11335  0253  0022               	movlb	2	; select bank2
 11336  0254  0826               	movf	(_adc_t+2)^(0+256),w
 11337  0255  0020               	movlb	0	; select bank0
 11338  0256  00AB               	movwf	___altoft@c+2
 11339  0257  0022               	movlb	2	; select bank2
 11340  0258  0825               	movf	(_adc_t+1)^(0+256),w
 11341  0259  0020               	movlb	0	; select bank0
 11342  025A  00AA               	movwf	___altoft@c+1
 11343  025B  0022               	movlb	2	; select bank2
 11344  025C  0824               	movf	_adc_t^(0+256),w
 11345  025D  0020               	movlb	0	; select bank0
 11346  025E  00A9               	movwf	___altoft@c
 11347  025F  3188  201C  3180   	fcall	___altoft
 11348  0262  0020               	movlb	0	; select bank0
 11349  0263  0829               	movf	?___altoft,w
 11350  0264  00B4               	movwf	___ftdiv@f1
 11351  0265  082A               	movf	?___altoft+1,w
 11352  0266  00B5               	movwf	___ftdiv@f1+1
 11353  0267  082B               	movf	?___altoft+2,w
 11354  0268  00B6               	movwf	___ftdiv@f1+2
 11355  0269  318D  25AD  3180   	fcall	___ftdiv
 11356  026C  0020               	movlb	0	; select bank0
 11357  026D  0831               	movf	?___ftdiv,w
 11358  026E  00CC               	movwf	___ftadd@f2
 11359  026F  0832               	movf	?___ftdiv+1,w
 11360  0270  00CD               	movwf	___ftadd@f2+1
 11361  0271  0833               	movf	?___ftdiv+2,w
 11362  0272  00CE               	movwf	___ftadd@f2+2
 11363  0273  318F  270A  3180   	fcall	___ftadd
 11364  0276  0020               	movlb	0	; select bank0
 11365  0277  0849               	movf	?___ftadd,w
 11366  0278  00D9               	movwf	___ftmul@f2
 11367  0279  084A               	movf	?___ftadd+1,w
 11368  027A  00DA               	movwf	___ftmul@f2+1
 11369  027B  084B               	movf	?___ftadd+2,w
 11370  027C  00DB               	movwf	___ftmul@f2+2
 11371  027D  318E  2656  3180   	fcall	___ftmul
 11372  0280  0020               	movlb	0	; select bank0
 11373  0281  0856               	movf	?___ftmul,w
 11374  0282  0021               	movlb	1	; select bank1
 11375  0283  00B5               	movwf	_BMP_readTemperature$2642^(0+128)
 11376  0284  0020               	movlb	0	; select bank0
 11377  0285  0857               	movf	?___ftmul+1,w
 11378  0286  0021               	movlb	1	; select bank1
 11379  0287  00B6               	movwf	(_BMP_readTemperature$2642+1)^(0+128)
 11380  0288  0020               	movlb	0	; select bank0
 11381  0289  0858               	movf	?___ftmul+2,w
 11382  028A  0021               	movlb	1	; select bank1
 11383  028B  00B7               	movwf	(_BMP_readTemperature$2642+2)^(0+128)
 11384                           
 11385                           ;bmp280.c: 105: var2 = ((((double)adc_t) / 131072.0 - ((double)dig_T1) / 8192.0) *
 11386                           ;bmp280.c: 106: (((double)adc_t) / 131072.0 - ((double)dig_T1) / 8192.0)) * ((double)dig
      +                          _T3);
 11387  028C  0022               	movlb	2	; select bank2
 11388  028D  0855               	movf	(_dig_T3+1)^(0+256),w
 11389  028E  0020               	movlb	0	; select bank0
 11390  028F  00AA               	movwf	___awtoft@c+1
 11391  0290  0022               	movlb	2	; select bank2
 11392  0291  0854               	movf	_dig_T3^(0+256),w
 11393  0292  0020               	movlb	0	; select bank0
 11394  0293  00A9               	movwf	___awtoft@c
 11395  0294  3196  2618  3180   	fcall	___awtoft
 11396  0297  0020               	movlb	0	; select bank0
 11397  0298  0829               	movf	?___awtoft,w
 11398  0299  00D6               	movwf	___ftmul@f1
 11399  029A  082A               	movf	?___awtoft+1,w
 11400  029B  00D7               	movwf	___ftmul@f1+1
 11401  029C  082B               	movf	?___awtoft+2,w
 11402  029D  00D8               	movwf	___ftmul@f1+2
 11403  029E  0021               	movlb	1	; select bank1
 11404  029F  0835               	movf	_BMP_readTemperature$2642^(0+128),w
 11405  02A0  0020               	movlb	0	; select bank0
 11406  02A1  00D9               	movwf	___ftmul@f2
 11407  02A2  0021               	movlb	1	; select bank1
 11408  02A3  0836               	movf	(_BMP_readTemperature$2642+1)^(0+128),w
 11409  02A4  0020               	movlb	0	; select bank0
 11410  02A5  00DA               	movwf	___ftmul@f2+1
 11411  02A6  0021               	movlb	1	; select bank1
 11412  02A7  0837               	movf	(_BMP_readTemperature$2642+2)^(0+128),w
 11413  02A8  0020               	movlb	0	; select bank0
 11414  02A9  00DB               	movwf	___ftmul@f2+2
 11415  02AA  318E  2656  3180   	fcall	___ftmul
 11416  02AD  0020               	movlb	0	; select bank0
 11417  02AE  0856               	movf	?___ftmul,w
 11418  02AF  0022               	movlb	2	; select bank2
 11419  02B0  00B1               	movwf	_var2^(0+256)
 11420  02B1  0020               	movlb	0	; select bank0
 11421  02B2  0857               	movf	?___ftmul+1,w
 11422  02B3  0022               	movlb	2	; select bank2
 11423  02B4  00B2               	movwf	(_var2+1)^(0+256)
 11424  02B5  0020               	movlb	0	; select bank0
 11425  02B6  0858               	movf	?___ftmul+2,w
 11426  02B7  0022               	movlb	2	; select bank2
 11427  02B8  00B3               	movwf	(_var2+2)^(0+256)
 11428                           
 11429                           ;bmp280.c: 107: t_fine = (long)(var1 + var2);
 11430  02B9  0834               	movf	_var1^(0+256),w
 11431  02BA  0020               	movlb	0	; select bank0
 11432  02BB  00CC               	movwf	___ftadd@f2
 11433  02BC  0022               	movlb	2	; select bank2
 11434  02BD  0835               	movf	(_var1+1)^(0+256),w
 11435  02BE  0020               	movlb	0	; select bank0
 11436  02BF  00CD               	movwf	___ftadd@f2+1
 11437  02C0  0022               	movlb	2	; select bank2
 11438  02C1  0836               	movf	(_var1+2)^(0+256),w
 11439  02C2  0020               	movlb	0	; select bank0
 11440  02C3  00CE               	movwf	___ftadd@f2+2
 11441  02C4  0022               	movlb	2	; select bank2
 11442  02C5  0831               	movf	_var2^(0+256),w
 11443  02C6  0020               	movlb	0	; select bank0
 11444  02C7  00C9               	movwf	___ftadd@f1
 11445  02C8  0022               	movlb	2	; select bank2
 11446  02C9  0832               	movf	(_var2+1)^(0+256),w
 11447  02CA  0020               	movlb	0	; select bank0
 11448  02CB  00CA               	movwf	___ftadd@f1+1
 11449  02CC  0022               	movlb	2	; select bank2
 11450  02CD  0833               	movf	(_var2+2)^(0+256),w
 11451  02CE  0020               	movlb	0	; select bank0
 11452  02CF  00CB               	movwf	___ftadd@f1+2
 11453  02D0  318F  270A  3180   	fcall	___ftadd
 11454  02D3  0020               	movlb	0	; select bank0
 11455  02D4  0849               	movf	?___ftadd,w
 11456  02D5  00E6               	movwf	___fttol@f1
 11457  02D6  084A               	movf	?___ftadd+1,w
 11458  02D7  00E7               	movwf	___fttol@f1+1
 11459  02D8  084B               	movf	?___ftadd+2,w
 11460  02D9  00E8               	movwf	___fttol@f1+2
 11461  02DA  318C  246B  3180   	fcall	___fttol
 11462  02DD  0020               	movlb	0	; select bank0
 11463  02DE  0869               	movf	?___fttol+3,w
 11464  02DF  00AC               	movwf	___altoft@c+3
 11465  02E0  0868               	movf	?___fttol+2,w
 11466  02E1  00AB               	movwf	___altoft@c+2
 11467  02E2  0867               	movf	?___fttol+1,w
 11468  02E3  00AA               	movwf	___altoft@c+1
 11469  02E4  0866               	movf	?___fttol,w
 11470  02E5  00A9               	movwf	___altoft@c
 11471  02E6  3188  201C  3180   	fcall	___altoft
 11472  02E9  0020               	movlb	0	; select bank0
 11473  02EA  0829               	movf	?___altoft,w
 11474  02EB  0022               	movlb	2	; select bank2
 11475  02EC  00AE               	movwf	_t_fine^(0+256)
 11476  02ED  0020               	movlb	0	; select bank0
 11477  02EE  082A               	movf	?___altoft+1,w
 11478  02EF  0022               	movlb	2	; select bank2
 11479  02F0  00AF               	movwf	(_t_fine+1)^(0+256)
 11480  02F1  0020               	movlb	0	; select bank0
 11481  02F2  082B               	movf	?___altoft+2,w
 11482  02F3  0022               	movlb	2	; select bank2
 11483  02F4  00B0               	movwf	(_t_fine+2)^(0+256)
 11484                           
 11485                           ;bmp280.c: 108: cTemp = (var1 + var2) / 5120.0;
 11486  02F5  3000               	movlw	0
 11487  02F6  0020               	movlb	0	; select bank0
 11488  02F7  00B1               	movwf	___ftdiv@f2
 11489  02F8  30A0               	movlw	160
 11490  02F9  00B2               	movwf	___ftdiv@f2+1
 11491  02FA  3045               	movlw	69
 11492  02FB  00B3               	movwf	___ftdiv@f2+2
 11493  02FC  0022               	movlb	2	; select bank2
 11494  02FD  0831               	movf	_var2^(0+256),w
 11495  02FE  0020               	movlb	0	; select bank0
 11496  02FF  00C9               	movwf	___ftadd@f1
 11497  0300  0022               	movlb	2	; select bank2
 11498  0301  0832               	movf	(_var2+1)^(0+256),w
 11499  0302  0020               	movlb	0	; select bank0
 11500  0303  00CA               	movwf	___ftadd@f1+1
 11501  0304  0022               	movlb	2	; select bank2
 11502  0305  0833               	movf	(_var2+2)^(0+256),w
 11503  0306  0020               	movlb	0	; select bank0
 11504  0307  00CB               	movwf	___ftadd@f1+2
 11505  0308  0022               	movlb	2	; select bank2
 11506  0309  0834               	movf	_var1^(0+256),w
 11507  030A  0020               	movlb	0	; select bank0
 11508  030B  00CC               	movwf	___ftadd@f2
 11509  030C  0022               	movlb	2	; select bank2
 11510  030D  0835               	movf	(_var1+1)^(0+256),w
 11511  030E  0020               	movlb	0	; select bank0
 11512  030F  00CD               	movwf	___ftadd@f2+1
 11513  0310  0022               	movlb	2	; select bank2
 11514  0311  0836               	movf	(_var1+2)^(0+256),w
 11515  0312  0020               	movlb	0	; select bank0
 11516  0313  00CE               	movwf	___ftadd@f2+2
 11517  0314  318F  270A  3180   	fcall	___ftadd
 11518  0317  0020               	movlb	0	; select bank0
 11519  0318  0849               	movf	?___ftadd,w
 11520  0319  00B4               	movwf	___ftdiv@f1
 11521  031A  084A               	movf	?___ftadd+1,w
 11522  031B  00B5               	movwf	___ftdiv@f1+1
 11523  031C  084B               	movf	?___ftadd+2,w
 11524  031D  00B6               	movwf	___ftdiv@f1+2
 11525  031E  318D  25AD  3180   	fcall	___ftdiv
 11526  0321  0020               	movlb	0	; select bank0
 11527  0322  0831               	movf	?___ftdiv,w
 11528  0323  0022               	movlb	2	; select bank2
 11529  0324  00AB               	movwf	_cTemp^(0+256)
 11530  0325  0020               	movlb	0	; select bank0
 11531  0326  0832               	movf	?___ftdiv+1,w
 11532  0327  0022               	movlb	2	; select bank2
 11533  0328  00AC               	movwf	(_cTemp+1)^(0+256)
 11534  0329  0020               	movlb	0	; select bank0
 11535  032A  0833               	movf	?___ftdiv+2,w
 11536  032B  0022               	movlb	2	; select bank2
 11537  032C  00AD               	movwf	(_cTemp+2)^(0+256)
 11538                           
 11539                           ;bmp280.c: 123: Diag_setTempSensorHealth(1);
 11540  032D  3001               	movlw	1
 11541  032E  3193  2323         	fcall	_Diag_setTempSensorHealth
 11542                           
 11543                           ;bmp280.c: 124: return(cTemp);
 11544  0330  0022               	movlb	2	; select bank2
 11545  0331  082B               	movf	_cTemp^(0+256),w
 11546  0332  0021               	movlb	1	; select bank1
 11547  0333  00A6               	movwf	?_BMP_readTemperature^(0+128)
 11548  0334  0022               	movlb	2	; select bank2
 11549  0335  082C               	movf	(_cTemp+1)^(0+256),w
 11550  0336  0021               	movlb	1	; select bank1
 11551  0337  00A7               	movwf	(?_BMP_readTemperature+1)^(0+128)
 11552  0338  0022               	movlb	2	; select bank2
 11553  0339  082D               	movf	(_cTemp+2)^(0+256),w
 11554  033A  0021               	movlb	1	; select bank1
 11555  033B  00A8               	movwf	(?_BMP_readTemperature+2)^(0+128)
 11556  033C  0008               	return
 11557  033D                     __end_of_BMP_readTemperature:	
 11558                           
 11559                           	psect	text58
 11560  141F                     __ptext58:	
 11561 ;; *************** function ___lwtoft *****************
 11562 ;; Defined at:
 11563 ;;		line 28 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\lwtoft.c"
 11564 ;; Parameters:    Size  Location     Type
 11565 ;;  c               2    9[BANK0 ] unsigned int 
 11566 ;; Auto vars:     Size  Location     Type
 11567 ;;		None
 11568 ;; Return value:  Size  Location     Type
 11569 ;;                  3    9[BANK0 ] float 
 11570 ;; Registers used:
 11571 ;;		wreg, status,2, status,0, pclath, cstack
 11572 ;; Tracked objects:
 11573 ;;		On entry : 0/0
 11574 ;;		On exit  : 0/0
 11575 ;;		Unchanged: 0/0
 11576 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11577 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11578 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11579 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11580 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11581 ;;Total ram usage:        4 bytes
 11582 ;; Hardware stack levels used:    1
 11583 ;; Hardware stack levels required when called:    5
 11584 ;; This function calls:
 11585 ;;		___ftpack
 11586 ;; This function is called by:
 11587 ;;		_Sensor_getSupplyVoltage
 11588 ;;		_BMP_readTemperature
 11589 ;; This function uses a non-reentrant model
 11590 ;;
 11591                           
 11592                           
 11593                           ;psect for function ___lwtoft
 11594  141F                     ___lwtoft:	
 11595                           
 11596                           ;incstack = 0
 11597                           ; Regs used in ___lwtoft: [wreg+status,2+status,0+pclath+cstack]
 11598  141F  0020               	movlb	0	; select bank0
 11599  1420  0829               	movf	___lwtoft@c,w
 11600  1421  00A1               	movwf	___ftpack@arg
 11601  1422  082A               	movf	___lwtoft@c+1,w
 11602  1423  00A2               	movwf	___ftpack@arg+1
 11603  1424  01A3               	clrf	___ftpack@arg+2
 11604  1425  308E               	movlw	142
 11605  1426  00AC               	movwf	??___lwtoft
 11606  1427  082C               	movf	??___lwtoft,w
 11607  1428  00A4               	movwf	___ftpack@exp
 11608  1429  01A5               	clrf	___ftpack@sign
 11609  142A  318A  2295         	fcall	___ftpack
 11610  142C  0020               	movlb	0	; select bank0
 11611  142D  0821               	movf	?___ftpack,w
 11612  142E  00A9               	movwf	?___lwtoft
 11613  142F  0822               	movf	?___ftpack+1,w
 11614  1430  00AA               	movwf	?___lwtoft+1
 11615  1431  0823               	movf	?___ftpack+2,w
 11616  1432  00AB               	movwf	?___lwtoft+2
 11617  1433  0008               	return
 11618  1434                     __end_of___lwtoft:	
 11619                           
 11620                           	psect	text59
 11621  0C6B                     __ptext59:	
 11622 ;; *************** function ___fttol *****************
 11623 ;; Defined at:
 11624 ;;		line 44 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\fttol.c"
 11625 ;; Parameters:    Size  Location     Type
 11626 ;;  f1              3   70[BANK0 ] float 
 11627 ;; Auto vars:     Size  Location     Type
 11628 ;;  lval            4    1[BANK1 ] unsigned long 
 11629 ;;  exp1            1    5[BANK1 ] unsigned char 
 11630 ;;  sign1           1    0[BANK1 ] unsigned char 
 11631 ;; Return value:  Size  Location     Type
 11632 ;;                  4   70[BANK0 ] long 
 11633 ;; Registers used:
 11634 ;;		wreg, status,2, status,0
 11635 ;; Tracked objects:
 11636 ;;		On entry : 0/0
 11637 ;;		On exit  : 0/0
 11638 ;;		Unchanged: 0/0
 11639 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11640 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11641 ;;      Locals:         0       0       6       0       0       0       0       0       0       0       0       0       
      +0       0
 11642 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11643 ;;      Totals:         0       8       6       0       0       0       0       0       0       0       0       0       
      +0       0
 11644 ;;Total ram usage:       14 bytes
 11645 ;; Hardware stack levels used:    1
 11646 ;; Hardware stack levels required when called:    4
 11647 ;; This function calls:
 11648 ;;		Nothing
 11649 ;; This function is called by:
 11650 ;;		_BMP_readTemperature
 11651 ;;		_Wireless_packageData
 11652 ;;		_HMC5883L_GetCompassDirection
 11653 ;; This function uses a non-reentrant model
 11654 ;;
 11655                           
 11656                           
 11657                           ;psect for function ___fttol
 11658  0C6B                     ___fttol:	
 11659                           
 11660                           ;incstack = 0
 11661                           ; Regs used in ___fttol: [wreg+status,2+status,0]
 11662  0C6B  0020               	movlb	0	; select bank0
 11663  0C6C  0866               	movf	___fttol@f1,w
 11664  0C6D  00EA               	movwf	??___fttol
 11665  0C6E  0867               	movf	___fttol@f1+1,w
 11666  0C6F  00EB               	movwf	??___fttol+1
 11667  0C70  0868               	movf	___fttol@f1+2,w
 11668  0C71  00EC               	movwf	??___fttol+2
 11669  0C72  1003               	clrc
 11670  0C73  0D6B               	rlf	??___fttol+1,w
 11671  0C74  0D6C               	rlf	??___fttol+2,w
 11672  0C75  00ED               	movwf	??___fttol+3
 11673  0C76  086D               	movf	??___fttol+3,w
 11674  0C77  0021               	movlb	1	; select bank1
 11675  0C78  00A5               	movwf	___fttol@exp1^(0+128)
 11676  0C79  0825               	movf	___fttol@exp1^(0+128),w
 11677  0C7A  1D03               	btfss	3,2
 11678  0C7B  2C86               	goto	l6357
 11679  0C7C  3000               	movlw	0
 11680  0C7D  0020               	movlb	0	; select bank0
 11681  0C7E  00E9               	movwf	?___fttol+3
 11682  0C7F  3000               	movlw	0
 11683  0C80  00E8               	movwf	?___fttol+2
 11684  0C81  3000               	movlw	0
 11685  0C82  00E7               	movwf	?___fttol+1
 11686  0C83  3000               	movlw	0
 11687  0C84  00E6               	movwf	?___fttol
 11688  0C85  0008               	return
 11689  0C86                     l6357:	
 11690  0C86  0020               	movlb	0	; select bank0
 11691  0C87  0866               	movf	___fttol@f1,w
 11692  0C88  00EA               	movwf	??___fttol
 11693  0C89  0867               	movf	___fttol@f1+1,w
 11694  0C8A  00EB               	movwf	??___fttol+1
 11695  0C8B  0868               	movf	___fttol@f1+2,w
 11696  0C8C  00EC               	movwf	??___fttol+2
 11697  0C8D  3017               	movlw	23
 11698  0C8E                     u6185:	
 11699  0C8E  36EC               	lsrf	??___fttol+2,f
 11700  0C8F  0CEB               	rrf	??___fttol+1,f
 11701  0C90  0CEA               	rrf	??___fttol,f
 11702  0C91  0B89               	decfsz	9,f
 11703  0C92  2C8E               	goto	u6185
 11704  0C93  086A               	movf	??___fttol,w
 11705  0C94  00ED               	movwf	??___fttol+3
 11706  0C95  086D               	movf	??___fttol+3,w
 11707  0C96  0021               	movlb	1	; select bank1
 11708  0C97  00A0               	movwf	___fttol@sign1^(0+128)
 11709  0C98  0020               	movlb	0	; select bank0
 11710  0C99  17E7               	bsf	___fttol@f1+1,7
 11711  0C9A  30FF               	movlw	255
 11712  0C9B  05E6               	andwf	___fttol@f1,f
 11713  0C9C  30FF               	movlw	255
 11714  0C9D  05E7               	andwf	___fttol@f1+1,f
 11715  0C9E  3000               	movlw	0
 11716  0C9F  05E8               	andwf	___fttol@f1+2,f
 11717  0CA0  0866               	movf	___fttol@f1,w
 11718  0CA1  0021               	movlb	1	; select bank1
 11719  0CA2  00A1               	movwf	___fttol@lval^(0+128)
 11720  0CA3  0020               	movlb	0	; select bank0
 11721  0CA4  0867               	movf	___fttol@f1+1,w
 11722  0CA5  0021               	movlb	1	; select bank1
 11723  0CA6  00A2               	movwf	(___fttol@lval^(0+128)+1)
 11724  0CA7  0020               	movlb	0	; select bank0
 11725  0CA8  0868               	movf	___fttol@f1+2,w
 11726  0CA9  0021               	movlb	1	; select bank1
 11727  0CAA  00A3               	movwf	(___fttol@lval^(0+128)+2)
 11728  0CAB  01A4               	clrf	(___fttol@lval^(0+128)+3)
 11729  0CAC  308E               	movlw	142
 11730  0CAD  02A5               	subwf	___fttol@exp1^(0+128),f
 11731  0CAE  1FA5               	btfss	___fttol@exp1^(0+128),7
 11732  0CAF  2CD0               	goto	l6377
 11733  0CB0  0825               	movf	___fttol@exp1^(0+128),w
 11734  0CB1  3A80               	xorlw	128
 11735  0CB2  3E8F               	addlw	143
 11736  0CB3  1803               	skipnc
 11737  0CB4  2CBF               	goto	l6375
 11738  0CB5  3000               	movlw	0
 11739  0CB6  0020               	movlb	0	; select bank0
 11740  0CB7  00E9               	movwf	?___fttol+3
 11741  0CB8  3000               	movlw	0
 11742  0CB9  00E8               	movwf	?___fttol+2
 11743  0CBA  3000               	movlw	0
 11744  0CBB  00E7               	movwf	?___fttol+1
 11745  0CBC  3000               	movlw	0
 11746  0CBD  00E6               	movwf	?___fttol
 11747  0CBE  0008               	return
 11748  0CBF                     l6375:	
 11749  0CBF  3001               	movlw	1
 11750  0CC0                     u6215:	
 11751  0CC0  0021               	movlb	1	; select bank1
 11752  0CC1  36A4               	lsrf	(___fttol@lval+3)^(0+128),f
 11753  0CC2  0CA3               	rrf	(___fttol@lval+2)^(0+128),f
 11754  0CC3  0CA2               	rrf	(___fttol@lval+1)^(0+128),f
 11755  0CC4  0CA1               	rrf	___fttol@lval^(0+128),f
 11756  0CC5  0B89               	decfsz	9,f
 11757  0CC6  2CC0               	goto	u6215
 11758  0CC7  3001               	movlw	1
 11759  0CC8  0020               	movlb	0	; select bank0
 11760  0CC9  00EA               	movwf	??___fttol
 11761  0CCA  086A               	movf	??___fttol,w
 11762  0CCB  0021               	movlb	1	; select bank1
 11763  0CCC  07A5               	addwf	___fttol@exp1^(0+128),f
 11764  0CCD  1903               	btfsc	3,2
 11765  0CCE  2CEC               	goto	l6385
 11766  0CCF  2CBF               	goto	l6375
 11767  0CD0                     l6377:	
 11768  0CD0  3018               	movlw	24
 11769  0CD1  0225               	subwf	___fttol@exp1^(0+128),w
 11770  0CD2  1C03               	skipc
 11771  0CD3  2CE8               	goto	l1619
 11772  0CD4  3000               	movlw	0
 11773  0CD5  0020               	movlb	0	; select bank0
 11774  0CD6  00E9               	movwf	?___fttol+3
 11775  0CD7  3000               	movlw	0
 11776  0CD8  00E8               	movwf	?___fttol+2
 11777  0CD9  3000               	movlw	0
 11778  0CDA  00E7               	movwf	?___fttol+1
 11779  0CDB  3000               	movlw	0
 11780  0CDC  00E6               	movwf	?___fttol
 11781  0CDD  0008               	return
 11782  0CDE                     l6383:	
 11783  0CDE  3001               	movlw	1
 11784  0CDF                     u6245:	
 11785  0CDF  0021               	movlb	1	; select bank1
 11786  0CE0  35A1               	lslf	___fttol@lval^(0+128),f
 11787  0CE1  0DA2               	rlf	(___fttol@lval+1)^(0+128),f
 11788  0CE2  0DA3               	rlf	(___fttol@lval+2)^(0+128),f
 11789  0CE3  0DA4               	rlf	(___fttol@lval+3)^(0+128),f
 11790  0CE4  0B89               	decfsz	9,f
 11791  0CE5  2CDF               	goto	u6245
 11792  0CE6  3001               	movlw	1
 11793  0CE7  02A5               	subwf	___fttol@exp1^(0+128),f
 11794  0CE8                     l1619:	
 11795  0CE8  0021               	movlb	1	; select bank1
 11796  0CE9  0825               	movf	___fttol@exp1^(0+128),w
 11797  0CEA  1D03               	btfss	3,2
 11798  0CEB  2CDE               	goto	l6383
 11799  0CEC                     l6385:	
 11800  0CEC  0820               	movf	___fttol@sign1^(0+128),w
 11801  0CED  1903               	btfsc	3,2
 11802  0CEE  2CFA               	goto	l6389
 11803  0CEF  09A1               	comf	___fttol@lval^(0+128),f
 11804  0CF0  09A2               	comf	(___fttol@lval+1)^(0+128),f
 11805  0CF1  09A3               	comf	(___fttol@lval+2)^(0+128),f
 11806  0CF2  09A4               	comf	(___fttol@lval+3)^(0+128),f
 11807  0CF3  0AA1               	incf	___fttol@lval^(0+128),f
 11808  0CF4  1903               	skipnz
 11809  0CF5  0AA2               	incf	(___fttol@lval+1)^(0+128),f
 11810  0CF6  1903               	skipnz
 11811  0CF7  0AA3               	incf	(___fttol@lval+2)^(0+128),f
 11812  0CF8  1903               	skipnz
 11813  0CF9  0AA4               	incf	(___fttol@lval+3)^(0+128),f
 11814  0CFA                     l6389:	
 11815  0CFA  0824               	movf	(___fttol@lval+3)^(0+128),w
 11816  0CFB  0020               	movlb	0	; select bank0
 11817  0CFC  00E9               	movwf	?___fttol+3
 11818  0CFD  0021               	movlb	1	; select bank1
 11819  0CFE  0823               	movf	(___fttol@lval+2)^(0+128),w
 11820  0CFF  0020               	movlb	0	; select bank0
 11821  0D00  00E8               	movwf	?___fttol+2
 11822  0D01  0021               	movlb	1	; select bank1
 11823  0D02  0822               	movf	(___fttol@lval+1)^(0+128),w
 11824  0D03  0020               	movlb	0	; select bank0
 11825  0D04  00E7               	movwf	?___fttol+1
 11826  0D05  0021               	movlb	1	; select bank1
 11827  0D06  0821               	movf	___fttol@lval^(0+128),w
 11828  0D07  0020               	movlb	0	; select bank0
 11829  0D08  00E6               	movwf	?___fttol
 11830  0D09  0008               	return
 11831  0D0A                     __end_of___fttol:	
 11832                           
 11833                           	psect	text60
 11834  1344                     __ptext60:	
 11835 ;; *************** function ___ftneg *****************
 11836 ;; Defined at:
 11837 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\ftneg.c"
 11838 ;; Parameters:    Size  Location     Type
 11839 ;;  f1              3   33[BANK0 ] float 
 11840 ;; Auto vars:     Size  Location     Type
 11841 ;;		None
 11842 ;; Return value:  Size  Location     Type
 11843 ;;                  3   33[BANK0 ] float 
 11844 ;; Registers used:
 11845 ;;		wreg
 11846 ;; Tracked objects:
 11847 ;;		On entry : 0/0
 11848 ;;		On exit  : 0/0
 11849 ;;		Unchanged: 0/0
 11850 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11851 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11852 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11853 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11854 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11855 ;;Total ram usage:        3 bytes
 11856 ;; Hardware stack levels used:    1
 11857 ;; Hardware stack levels required when called:    4
 11858 ;; This function calls:
 11859 ;;		Nothing
 11860 ;; This function is called by:
 11861 ;;		_BMP_readTemperature
 11862 ;; This function uses a non-reentrant model
 11863 ;;
 11864                           
 11865                           
 11866                           ;psect for function ___ftneg
 11867  1344                     ___ftneg:	
 11868                           
 11869                           ;incstack = 0
 11870                           ; Regs used in ___ftneg: [wreg]
 11871  1344  0020               	movlb	0	; select bank0
 11872  1345  0843               	movf	___ftneg@f1+2,w
 11873  1346  0442               	iorwf	___ftneg@f1+1,w
 11874  1347  0441               	iorwf	___ftneg@f1,w
 11875  1348  1903               	skipnz
 11876  1349  0008               	return
 11877  134A  3080               	movlw	128
 11878  134B  06C3               	xorwf	___ftneg@f1+2,f
 11879  134C  0008               	return
 11880  134D                     __end_of___ftneg:	
 11881                           
 11882                           	psect	text61
 11883  0E56                     __ptext61:	
 11884 ;; *************** function ___ftmul *****************
 11885 ;; Defined at:
 11886 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\ftmul.c"
 11887 ;; Parameters:    Size  Location     Type
 11888 ;;  f1              3   54[BANK0 ] float 
 11889 ;;  f2              3   57[BANK0 ] float 
 11890 ;; Auto vars:     Size  Location     Type
 11891 ;;  f3_as_produc    3   65[BANK0 ] unsigned um
 11892 ;;  sign            1   69[BANK0 ] unsigned char 
 11893 ;;  cntr            1   68[BANK0 ] unsigned char 
 11894 ;;  exp             1   64[BANK0 ] unsigned char 
 11895 ;; Return value:  Size  Location     Type
 11896 ;;                  3   54[BANK0 ] float 
 11897 ;; Registers used:
 11898 ;;		wreg, status,2, status,0, pclath, cstack
 11899 ;; Tracked objects:
 11900 ;;		On entry : 0/0
 11901 ;;		On exit  : 0/0
 11902 ;;		Unchanged: 0/0
 11903 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11904 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11905 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11906 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11907 ;;      Totals:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11908 ;;Total ram usage:       16 bytes
 11909 ;; Hardware stack levels used:    1
 11910 ;; Hardware stack levels required when called:    5
 11911 ;; This function calls:
 11912 ;;		___ftpack
 11913 ;; This function is called by:
 11914 ;;		_BMP_readTemperature
 11915 ;;		_Wireless_packageData
 11916 ;;		_HMC5883L_GetCompassDirection
 11917 ;; This function uses a non-reentrant model
 11918 ;;
 11919                           
 11920                           
 11921                           ;psect for function ___ftmul
 11922  0E56                     ___ftmul:	
 11923                           
 11924                           ;incstack = 0
 11925                           ; Regs used in ___ftmul: [wreg+status,2+status,0+pclath+cstack]
 11926  0E56  0020               	movlb	0	; select bank0
 11927  0E57  0856               	movf	___ftmul@f1,w
 11928  0E58  00DC               	movwf	??___ftmul
 11929  0E59  0857               	movf	___ftmul@f1+1,w
 11930  0E5A  00DD               	movwf	??___ftmul+1
 11931  0E5B  0858               	movf	___ftmul@f1+2,w
 11932  0E5C  00DE               	movwf	??___ftmul+2
 11933  0E5D  1003               	clrc
 11934  0E5E  0D5D               	rlf	??___ftmul+1,w
 11935  0E5F  0D5E               	rlf	??___ftmul+2,w
 11936  0E60  00DF               	movwf	??___ftmul+3
 11937  0E61  085F               	movf	??___ftmul+3,w
 11938  0E62  00E0               	movwf	___ftmul@exp
 11939  0E63  0860               	movf	___ftmul@exp,w
 11940  0E64  1D03               	btfss	3,2
 11941  0E65  2E6D               	goto	l6299
 11942  0E66  3000               	movlw	0
 11943  0E67  00D6               	movwf	?___ftmul
 11944  0E68  3000               	movlw	0
 11945  0E69  00D7               	movwf	?___ftmul+1
 11946  0E6A  3000               	movlw	0
 11947  0E6B  00D8               	movwf	?___ftmul+2
 11948  0E6C  0008               	return
 11949  0E6D                     l6299:	
 11950  0E6D  0859               	movf	___ftmul@f2,w
 11951  0E6E  00DC               	movwf	??___ftmul
 11952  0E6F  085A               	movf	___ftmul@f2+1,w
 11953  0E70  00DD               	movwf	??___ftmul+1
 11954  0E71  085B               	movf	___ftmul@f2+2,w
 11955  0E72  00DE               	movwf	??___ftmul+2
 11956  0E73  1003               	clrc
 11957  0E74  0D5D               	rlf	??___ftmul+1,w
 11958  0E75  0D5E               	rlf	??___ftmul+2,w
 11959  0E76  00DF               	movwf	??___ftmul+3
 11960  0E77  085F               	movf	??___ftmul+3,w
 11961  0E78  00E5               	movwf	___ftmul@sign
 11962  0E79  0865               	movf	___ftmul@sign,w
 11963  0E7A  1D03               	btfss	3,2
 11964  0E7B  2E83               	goto	l6305
 11965  0E7C  3000               	movlw	0
 11966  0E7D  00D6               	movwf	?___ftmul
 11967  0E7E  3000               	movlw	0
 11968  0E7F  00D7               	movwf	?___ftmul+1
 11969  0E80  3000               	movlw	0
 11970  0E81  00D8               	movwf	?___ftmul+2
 11971  0E82  0008               	return
 11972  0E83                     l6305:	
 11973  0E83  0865               	movf	___ftmul@sign,w
 11974  0E84  3E7B               	addlw	123
 11975  0E85  00DC               	movwf	??___ftmul
 11976  0E86  085C               	movf	??___ftmul,w
 11977  0E87  07E0               	addwf	___ftmul@exp,f
 11978  0E88  0856               	movf	___ftmul@f1,w
 11979  0E89  00DC               	movwf	??___ftmul
 11980  0E8A  0857               	movf	___ftmul@f1+1,w
 11981  0E8B  00DD               	movwf	??___ftmul+1
 11982  0E8C  0858               	movf	___ftmul@f1+2,w
 11983  0E8D  00DE               	movwf	??___ftmul+2
 11984  0E8E  3010               	movlw	16
 11985  0E8F                     u6065:	
 11986  0E8F  36DE               	lsrf	??___ftmul+2,f
 11987  0E90  0CDD               	rrf	??___ftmul+1,f
 11988  0E91  0CDC               	rrf	??___ftmul,f
 11989  0E92  0B89               	decfsz	9,f
 11990  0E93  2E8F               	goto	u6065
 11991  0E94  085C               	movf	??___ftmul,w
 11992  0E95  00DF               	movwf	??___ftmul+3
 11993  0E96  085F               	movf	??___ftmul+3,w
 11994  0E97  00E5               	movwf	___ftmul@sign
 11995  0E98  0859               	movf	___ftmul@f2,w
 11996  0E99  00DC               	movwf	??___ftmul
 11997  0E9A  085A               	movf	___ftmul@f2+1,w
 11998  0E9B  00DD               	movwf	??___ftmul+1
 11999  0E9C  085B               	movf	___ftmul@f2+2,w
 12000  0E9D  00DE               	movwf	??___ftmul+2
 12001  0E9E  3010               	movlw	16
 12002  0E9F                     u6075:	
 12003  0E9F  36DE               	lsrf	??___ftmul+2,f
 12004  0EA0  0CDD               	rrf	??___ftmul+1,f
 12005  0EA1  0CDC               	rrf	??___ftmul,f
 12006  0EA2  0B89               	decfsz	9,f
 12007  0EA3  2E9F               	goto	u6075
 12008  0EA4  085C               	movf	??___ftmul,w
 12009  0EA5  00DF               	movwf	??___ftmul+3
 12010  0EA6  085F               	movf	??___ftmul+3,w
 12011  0EA7  06E5               	xorwf	___ftmul@sign,f
 12012  0EA8  3080               	movlw	128
 12013  0EA9  00DC               	movwf	??___ftmul
 12014  0EAA  085C               	movf	??___ftmul,w
 12015  0EAB  05E5               	andwf	___ftmul@sign,f
 12016  0EAC  17D7               	bsf	___ftmul@f1+1,7
 12017  0EAD  17DA               	bsf	___ftmul@f2+1,7
 12018  0EAE  30FF               	movlw	255
 12019  0EAF  05D9               	andwf	___ftmul@f2,f
 12020  0EB0  30FF               	movlw	255
 12021  0EB1  05DA               	andwf	___ftmul@f2+1,f
 12022  0EB2  3000               	movlw	0
 12023  0EB3  05DB               	andwf	___ftmul@f2+2,f
 12024  0EB4  3000               	movlw	0
 12025  0EB5  00E1               	movwf	___ftmul@f3_as_product
 12026  0EB6  3000               	movlw	0
 12027  0EB7  00E2               	movwf	___ftmul@f3_as_product+1
 12028  0EB8  3000               	movlw	0
 12029  0EB9  00E3               	movwf	___ftmul@f3_as_product+2
 12030  0EBA  3007               	movlw	7
 12031  0EBB  00DC               	movwf	??___ftmul
 12032  0EBC  085C               	movf	??___ftmul,w
 12033  0EBD  00E4               	movwf	___ftmul@cntr
 12034  0EBE                     l6317:	
 12035  0EBE  1C56               	btfss	___ftmul@f1,0
 12036  0EBF  2EC6               	goto	l6321
 12037  0EC0  0859               	movf	___ftmul@f2,w
 12038  0EC1  07E1               	addwf	___ftmul@f3_as_product,f
 12039  0EC2  085A               	movf	___ftmul@f2+1,w
 12040  0EC3  3DE2               	addwfc	___ftmul@f3_as_product+1,f
 12041  0EC4  085B               	movf	___ftmul@f2+2,w
 12042  0EC5  3DE3               	addwfc	___ftmul@f3_as_product+2,f
 12043  0EC6                     l6321:	
 12044  0EC6  3001               	movlw	1
 12045  0EC7                     u6095:	
 12046  0EC7  36D8               	lsrf	___ftmul@f1+2,f
 12047  0EC8  0CD7               	rrf	___ftmul@f1+1,f
 12048  0EC9  0CD6               	rrf	___ftmul@f1,f
 12049  0ECA  0B89               	decfsz	9,f
 12050  0ECB  2EC7               	goto	u6095
 12051  0ECC  3001               	movlw	1
 12052  0ECD                     u6105:	
 12053  0ECD  35D9               	lslf	___ftmul@f2,f
 12054  0ECE  0DDA               	rlf	___ftmul@f2+1,f
 12055  0ECF  0DDB               	rlf	___ftmul@f2+2,f
 12056  0ED0  0B89               	decfsz	9,f
 12057  0ED1  2ECD               	goto	u6105
 12058  0ED2  3001               	movlw	1
 12059  0ED3  02E4               	subwf	___ftmul@cntr,f
 12060  0ED4  1D03               	btfss	3,2
 12061  0ED5  2EBE               	goto	l6317
 12062  0ED6  3009               	movlw	9
 12063  0ED7  00DC               	movwf	??___ftmul
 12064  0ED8  085C               	movf	??___ftmul,w
 12065  0ED9  00E4               	movwf	___ftmul@cntr
 12066  0EDA                     l6329:	
 12067  0EDA  1C56               	btfss	___ftmul@f1,0
 12068  0EDB  2EE2               	goto	l6333
 12069  0EDC  0859               	movf	___ftmul@f2,w
 12070  0EDD  07E1               	addwf	___ftmul@f3_as_product,f
 12071  0EDE  085A               	movf	___ftmul@f2+1,w
 12072  0EDF  3DE2               	addwfc	___ftmul@f3_as_product+1,f
 12073  0EE0  085B               	movf	___ftmul@f2+2,w
 12074  0EE1  3DE3               	addwfc	___ftmul@f3_as_product+2,f
 12075  0EE2                     l6333:	
 12076  0EE2  3001               	movlw	1
 12077  0EE3                     u6135:	
 12078  0EE3  36D8               	lsrf	___ftmul@f1+2,f
 12079  0EE4  0CD7               	rrf	___ftmul@f1+1,f
 12080  0EE5  0CD6               	rrf	___ftmul@f1,f
 12081  0EE6  0B89               	decfsz	9,f
 12082  0EE7  2EE3               	goto	u6135
 12083  0EE8  3001               	movlw	1
 12084  0EE9                     u6145:	
 12085  0EE9  36E3               	lsrf	___ftmul@f3_as_product+2,f
 12086  0EEA  0CE2               	rrf	___ftmul@f3_as_product+1,f
 12087  0EEB  0CE1               	rrf	___ftmul@f3_as_product,f
 12088  0EEC  0B89               	decfsz	9,f
 12089  0EED  2EE9               	goto	u6145
 12090  0EEE  3001               	movlw	1
 12091  0EEF  02E4               	subwf	___ftmul@cntr,f
 12092  0EF0  1D03               	btfss	3,2
 12093  0EF1  2EDA               	goto	l6329
 12094  0EF2  0861               	movf	___ftmul@f3_as_product,w
 12095  0EF3  00A1               	movwf	___ftpack@arg
 12096  0EF4  0862               	movf	___ftmul@f3_as_product+1,w
 12097  0EF5  00A2               	movwf	___ftpack@arg+1
 12098  0EF6  0863               	movf	___ftmul@f3_as_product+2,w
 12099  0EF7  00A3               	movwf	___ftpack@arg+2
 12100  0EF8  0860               	movf	___ftmul@exp,w
 12101  0EF9  00DC               	movwf	??___ftmul
 12102  0EFA  085C               	movf	??___ftmul,w
 12103  0EFB  00A4               	movwf	___ftpack@exp
 12104  0EFC  0865               	movf	___ftmul@sign,w
 12105  0EFD  00DD               	movwf	??___ftmul+1
 12106  0EFE  085D               	movf	??___ftmul+1,w
 12107  0EFF  00A5               	movwf	___ftpack@sign
 12108  0F00  318A  2295         	fcall	___ftpack
 12109  0F02  0020               	movlb	0	; select bank0
 12110  0F03  0821               	movf	?___ftpack,w
 12111  0F04  00D6               	movwf	?___ftmul
 12112  0F05  0822               	movf	?___ftpack+1,w
 12113  0F06  00D7               	movwf	?___ftmul+1
 12114  0F07  0823               	movf	?___ftpack+2,w
 12115  0F08  00D8               	movwf	?___ftmul+2
 12116  0F09  0008               	return
 12117  0F0A                     __end_of___ftmul:	
 12118                           
 12119                           	psect	text62
 12120  0DAD                     __ptext62:	
 12121 ;; *************** function ___ftdiv *****************
 12122 ;; Defined at:
 12123 ;;		line 56 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\ftdiv.c"
 12124 ;; Parameters:    Size  Location     Type
 12125 ;;  f2              3   17[BANK0 ] float 
 12126 ;;  f1              3   20[BANK0 ] float 
 12127 ;; Auto vars:     Size  Location     Type
 12128 ;;  f3              3   28[BANK0 ] float 
 12129 ;;  sign            1   32[BANK0 ] unsigned char 
 12130 ;;  exp             1   31[BANK0 ] unsigned char 
 12131 ;;  cntr            1   27[BANK0 ] unsigned char 
 12132 ;; Return value:  Size  Location     Type
 12133 ;;                  3   17[BANK0 ] float 
 12134 ;; Registers used:
 12135 ;;		wreg, status,2, status,0, pclath, cstack
 12136 ;; Tracked objects:
 12137 ;;		On entry : 0/0
 12138 ;;		On exit  : 0/0
 12139 ;;		Unchanged: 0/0
 12140 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12141 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12142 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12143 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12144 ;;      Totals:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12145 ;;Total ram usage:       16 bytes
 12146 ;; Hardware stack levels used:    1
 12147 ;; Hardware stack levels required when called:    5
 12148 ;; This function calls:
 12149 ;;		___ftpack
 12150 ;; This function is called by:
 12151 ;;		_Sensor_getSupplyVoltage
 12152 ;;		_BMP_readTemperature
 12153 ;;		_HMC5883L_GetCompassDirection
 12154 ;; This function uses a non-reentrant model
 12155 ;;
 12156                           
 12157                           
 12158                           ;psect for function ___ftdiv
 12159  0DAD                     ___ftdiv:	
 12160                           
 12161                           ;incstack = 0
 12162                           ; Regs used in ___ftdiv: [wreg+status,2+status,0+pclath+cstack]
 12163  0DAD  0020               	movlb	0	; select bank0
 12164  0DAE  0834               	movf	___ftdiv@f1,w
 12165  0DAF  00B7               	movwf	??___ftdiv
 12166  0DB0  0835               	movf	___ftdiv@f1+1,w
 12167  0DB1  00B8               	movwf	??___ftdiv+1
 12168  0DB2  0836               	movf	___ftdiv@f1+2,w
 12169  0DB3  00B9               	movwf	??___ftdiv+2
 12170  0DB4  1003               	clrc
 12171  0DB5  0D38               	rlf	??___ftdiv+1,w
 12172  0DB6  0D39               	rlf	??___ftdiv+2,w
 12173  0DB7  00BA               	movwf	??___ftdiv+3
 12174  0DB8  083A               	movf	??___ftdiv+3,w
 12175  0DB9  00BF               	movwf	___ftdiv@exp
 12176  0DBA  083F               	movf	___ftdiv@exp,w
 12177  0DBB  1D03               	btfss	3,2
 12178  0DBC  2DC4               	goto	l5845
 12179  0DBD  3000               	movlw	0
 12180  0DBE  00B1               	movwf	?___ftdiv
 12181  0DBF  3000               	movlw	0
 12182  0DC0  00B2               	movwf	?___ftdiv+1
 12183  0DC1  3000               	movlw	0
 12184  0DC2  00B3               	movwf	?___ftdiv+2
 12185  0DC3  0008               	return
 12186  0DC4                     l5845:	
 12187  0DC4  0831               	movf	___ftdiv@f2,w
 12188  0DC5  00B7               	movwf	??___ftdiv
 12189  0DC6  0832               	movf	___ftdiv@f2+1,w
 12190  0DC7  00B8               	movwf	??___ftdiv+1
 12191  0DC8  0833               	movf	___ftdiv@f2+2,w
 12192  0DC9  00B9               	movwf	??___ftdiv+2
 12193  0DCA  1003               	clrc
 12194  0DCB  0D38               	rlf	??___ftdiv+1,w
 12195  0DCC  0D39               	rlf	??___ftdiv+2,w
 12196  0DCD  00BA               	movwf	??___ftdiv+3
 12197  0DCE  083A               	movf	??___ftdiv+3,w
 12198  0DCF  00C0               	movwf	___ftdiv@sign
 12199  0DD0  0840               	movf	___ftdiv@sign,w
 12200  0DD1  1D03               	btfss	3,2
 12201  0DD2  2DDA               	goto	l5851
 12202  0DD3  3000               	movlw	0
 12203  0DD4  00B1               	movwf	?___ftdiv
 12204  0DD5  3000               	movlw	0
 12205  0DD6  00B2               	movwf	?___ftdiv+1
 12206  0DD7  3000               	movlw	0
 12207  0DD8  00B3               	movwf	?___ftdiv+2
 12208  0DD9  0008               	return
 12209  0DDA                     l5851:	
 12210  0DDA  3000               	movlw	0
 12211  0DDB  00BC               	movwf	___ftdiv@f3
 12212  0DDC  3000               	movlw	0
 12213  0DDD  00BD               	movwf	___ftdiv@f3+1
 12214  0DDE  3000               	movlw	0
 12215  0DDF  00BE               	movwf	___ftdiv@f3+2
 12216  0DE0  3089               	movlw	137
 12217  0DE1  0740               	addwf	___ftdiv@sign,w
 12218  0DE2  00B7               	movwf	??___ftdiv
 12219  0DE3  0837               	movf	??___ftdiv,w
 12220  0DE4  02BF               	subwf	___ftdiv@exp,f
 12221  0DE5  0834               	movf	___ftdiv@f1,w
 12222  0DE6  00B7               	movwf	??___ftdiv
 12223  0DE7  0835               	movf	___ftdiv@f1+1,w
 12224  0DE8  00B8               	movwf	??___ftdiv+1
 12225  0DE9  0836               	movf	___ftdiv@f1+2,w
 12226  0DEA  00B9               	movwf	??___ftdiv+2
 12227  0DEB  3010               	movlw	16
 12228  0DEC                     u5335:	
 12229  0DEC  36B9               	lsrf	??___ftdiv+2,f
 12230  0DED  0CB8               	rrf	??___ftdiv+1,f
 12231  0DEE  0CB7               	rrf	??___ftdiv,f
 12232  0DEF  0B89               	decfsz	9,f
 12233  0DF0  2DEC               	goto	u5335
 12234  0DF1  0837               	movf	??___ftdiv,w
 12235  0DF2  00BA               	movwf	??___ftdiv+3
 12236  0DF3  083A               	movf	??___ftdiv+3,w
 12237  0DF4  00C0               	movwf	___ftdiv@sign
 12238  0DF5  0831               	movf	___ftdiv@f2,w
 12239  0DF6  00B7               	movwf	??___ftdiv
 12240  0DF7  0832               	movf	___ftdiv@f2+1,w
 12241  0DF8  00B8               	movwf	??___ftdiv+1
 12242  0DF9  0833               	movf	___ftdiv@f2+2,w
 12243  0DFA  00B9               	movwf	??___ftdiv+2
 12244  0DFB  3010               	movlw	16
 12245  0DFC                     u5345:	
 12246  0DFC  36B9               	lsrf	??___ftdiv+2,f
 12247  0DFD  0CB8               	rrf	??___ftdiv+1,f
 12248  0DFE  0CB7               	rrf	??___ftdiv,f
 12249  0DFF  0B89               	decfsz	9,f
 12250  0E00  2DFC               	goto	u5345
 12251  0E01  0837               	movf	??___ftdiv,w
 12252  0E02  00BA               	movwf	??___ftdiv+3
 12253  0E03  083A               	movf	??___ftdiv+3,w
 12254  0E04  06C0               	xorwf	___ftdiv@sign,f
 12255  0E05  3080               	movlw	128
 12256  0E06  00B7               	movwf	??___ftdiv
 12257  0E07  0837               	movf	??___ftdiv,w
 12258  0E08  05C0               	andwf	___ftdiv@sign,f
 12259  0E09  17B5               	bsf	___ftdiv@f1+1,7
 12260  0E0A  30FF               	movlw	255
 12261  0E0B  05B4               	andwf	___ftdiv@f1,f
 12262  0E0C  30FF               	movlw	255
 12263  0E0D  05B5               	andwf	___ftdiv@f1+1,f
 12264  0E0E  3000               	movlw	0
 12265  0E0F  05B6               	andwf	___ftdiv@f1+2,f
 12266  0E10  17B2               	bsf	___ftdiv@f2+1,7
 12267  0E11  30FF               	movlw	255
 12268  0E12  05B1               	andwf	___ftdiv@f2,f
 12269  0E13  30FF               	movlw	255
 12270  0E14  05B2               	andwf	___ftdiv@f2+1,f
 12271  0E15  3000               	movlw	0
 12272  0E16  05B3               	andwf	___ftdiv@f2+2,f
 12273  0E17  3018               	movlw	24
 12274  0E18  00B7               	movwf	??___ftdiv
 12275  0E19  0837               	movf	??___ftdiv,w
 12276  0E1A  00BB               	movwf	___ftdiv@cntr
 12277  0E1B                     l5865:	
 12278  0E1B  3001               	movlw	1
 12279  0E1C                     u5355:	
 12280  0E1C  35BC               	lslf	___ftdiv@f3,f
 12281  0E1D  0DBD               	rlf	___ftdiv@f3+1,f
 12282  0E1E  0DBE               	rlf	___ftdiv@f3+2,f
 12283  0E1F  0B89               	decfsz	9,f
 12284  0E20  2E1C               	goto	u5355
 12285  0E21  0833               	movf	___ftdiv@f2+2,w
 12286  0E22  0236               	subwf	___ftdiv@f1+2,w
 12287  0E23  1D03               	skipz
 12288  0E24  2E2B               	goto	u5365
 12289  0E25  0832               	movf	___ftdiv@f2+1,w
 12290  0E26  0235               	subwf	___ftdiv@f1+1,w
 12291  0E27  1D03               	skipz
 12292  0E28  2E2B               	goto	u5365
 12293  0E29  0831               	movf	___ftdiv@f2,w
 12294  0E2A  0234               	subwf	___ftdiv@f1,w
 12295  0E2B                     u5365:	
 12296  0E2B  1C03               	skipc
 12297  0E2C  2E34               	goto	l5873
 12298  0E2D  0831               	movf	___ftdiv@f2,w
 12299  0E2E  02B4               	subwf	___ftdiv@f1,f
 12300  0E2F  0832               	movf	___ftdiv@f2+1,w
 12301  0E30  3BB5               	subwfb	___ftdiv@f1+1,f
 12302  0E31  0833               	movf	___ftdiv@f2+2,w
 12303  0E32  3BB6               	subwfb	___ftdiv@f1+2,f
 12304  0E33  143C               	bsf	___ftdiv@f3,0
 12305  0E34                     l5873:	
 12306  0E34  3001               	movlw	1
 12307  0E35                     u5375:	
 12308  0E35  35B4               	lslf	___ftdiv@f1,f
 12309  0E36  0DB5               	rlf	___ftdiv@f1+1,f
 12310  0E37  0DB6               	rlf	___ftdiv@f1+2,f
 12311  0E38  0B89               	decfsz	9,f
 12312  0E39  2E35               	goto	u5375
 12313  0E3A  3001               	movlw	1
 12314  0E3B  02BB               	subwf	___ftdiv@cntr,f
 12315  0E3C  1D03               	btfss	3,2
 12316  0E3D  2E1B               	goto	l5865
 12317  0E3E  083C               	movf	___ftdiv@f3,w
 12318  0E3F  00A1               	movwf	___ftpack@arg
 12319  0E40  083D               	movf	___ftdiv@f3+1,w
 12320  0E41  00A2               	movwf	___ftpack@arg+1
 12321  0E42  083E               	movf	___ftdiv@f3+2,w
 12322  0E43  00A3               	movwf	___ftpack@arg+2
 12323  0E44  083F               	movf	___ftdiv@exp,w
 12324  0E45  00B7               	movwf	??___ftdiv
 12325  0E46  0837               	movf	??___ftdiv,w
 12326  0E47  00A4               	movwf	___ftpack@exp
 12327  0E48  0840               	movf	___ftdiv@sign,w
 12328  0E49  00B8               	movwf	??___ftdiv+1
 12329  0E4A  0838               	movf	??___ftdiv+1,w
 12330  0E4B  00A5               	movwf	___ftpack@sign
 12331  0E4C  318A  2295         	fcall	___ftpack
 12332  0E4E  0020               	movlb	0	; select bank0
 12333  0E4F  0821               	movf	?___ftpack,w
 12334  0E50  00B1               	movwf	?___ftdiv
 12335  0E51  0822               	movf	?___ftpack+1,w
 12336  0E52  00B2               	movwf	?___ftdiv+1
 12337  0E53  0823               	movf	?___ftpack+2,w
 12338  0E54  00B3               	movwf	?___ftdiv+2
 12339  0E55  0008               	return
 12340  0E56                     __end_of___ftdiv:	
 12341                           
 12342                           	psect	text63
 12343  0F0A                     __ptext63:	
 12344 ;; *************** function ___ftadd *****************
 12345 ;; Defined at:
 12346 ;;		line 86 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\ftadd.c"
 12347 ;; Parameters:    Size  Location     Type
 12348 ;;  f1              3   41[BANK0 ] float 
 12349 ;;  f2              3   44[BANK0 ] float 
 12350 ;; Auto vars:     Size  Location     Type
 12351 ;;  exp1            1   53[BANK0 ] unsigned char 
 12352 ;;  exp2            1   52[BANK0 ] unsigned char 
 12353 ;;  sign            1   51[BANK0 ] unsigned char 
 12354 ;; Return value:  Size  Location     Type
 12355 ;;                  3   41[BANK0 ] float 
 12356 ;; Registers used:
 12357 ;;		wreg, status,2, status,0, pclath, cstack
 12358 ;; Tracked objects:
 12359 ;;		On entry : 0/0
 12360 ;;		On exit  : 0/0
 12361 ;;		Unchanged: 0/0
 12362 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12363 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12364 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12365 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12366 ;;      Totals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12367 ;;Total ram usage:       13 bytes
 12368 ;; Hardware stack levels used:    1
 12369 ;; Hardware stack levels required when called:    5
 12370 ;; This function calls:
 12371 ;;		___ftpack
 12372 ;; This function is called by:
 12373 ;;		_BMP_readTemperature
 12374 ;;		_Wireless_packageData
 12375 ;;		_HMC5883L_GetCompassDirection
 12376 ;; This function uses a non-reentrant model
 12377 ;;
 12378                           
 12379                           
 12380                           ;psect for function ___ftadd
 12381  0F0A                     ___ftadd:	
 12382                           
 12383                           ;incstack = 0
 12384                           ; Regs used in ___ftadd: [wreg+status,2+status,0+pclath+cstack]
 12385  0F0A  0020               	movlb	0	; select bank0
 12386  0F0B  0849               	movf	___ftadd@f1,w
 12387  0F0C  00CF               	movwf	??___ftadd
 12388  0F0D  084A               	movf	___ftadd@f1+1,w
 12389  0F0E  00D0               	movwf	??___ftadd+1
 12390  0F0F  084B               	movf	___ftadd@f1+2,w
 12391  0F10  00D1               	movwf	??___ftadd+2
 12392  0F11  1003               	clrc
 12393  0F12  0D50               	rlf	??___ftadd+1,w
 12394  0F13  0D51               	rlf	??___ftadd+2,w
 12395  0F14  00D2               	movwf	??___ftadd+3
 12396  0F15  0852               	movf	??___ftadd+3,w
 12397  0F16  00D5               	movwf	___ftadd@exp1
 12398  0F17  084C               	movf	___ftadd@f2,w
 12399  0F18  00CF               	movwf	??___ftadd
 12400  0F19  084D               	movf	___ftadd@f2+1,w
 12401  0F1A  00D0               	movwf	??___ftadd+1
 12402  0F1B  084E               	movf	___ftadd@f2+2,w
 12403  0F1C  00D1               	movwf	??___ftadd+2
 12404  0F1D  1003               	clrc
 12405  0F1E  0D50               	rlf	??___ftadd+1,w
 12406  0F1F  0D51               	rlf	??___ftadd+2,w
 12407  0F20  00D2               	movwf	??___ftadd+3
 12408  0F21  0852               	movf	??___ftadd+3,w
 12409  0F22  00D4               	movwf	___ftadd@exp2
 12410  0F23  0855               	movf	___ftadd@exp1,w
 12411  0F24  1903               	btfsc	3,2
 12412  0F25  2F32               	goto	l6229
 12413  0F26  0854               	movf	___ftadd@exp2,w
 12414  0F27  0255               	subwf	___ftadd@exp1,w
 12415  0F28  1803               	skipnc
 12416  0F29  2F39               	goto	l6233
 12417  0F2A  0355               	decf	___ftadd@exp1,w
 12418  0F2B  3AFF               	xorlw	255
 12419  0F2C  0754               	addwf	___ftadd@exp2,w
 12420  0F2D  00CF               	movwf	??___ftadd
 12421  0F2E  3019               	movlw	25
 12422  0F2F  024F               	subwf	??___ftadd,w
 12423  0F30  1C03               	skipc
 12424  0F31  2F39               	goto	l6233
 12425  0F32                     l6229:	
 12426  0F32  084C               	movf	___ftadd@f2,w
 12427  0F33  00C9               	movwf	?___ftadd
 12428  0F34  084D               	movf	___ftadd@f2+1,w
 12429  0F35  00CA               	movwf	?___ftadd+1
 12430  0F36  084E               	movf	___ftadd@f2+2,w
 12431  0F37  00CB               	movwf	?___ftadd+2
 12432  0F38  0008               	return
 12433  0F39                     l6233:	
 12434  0F39  0854               	movf	___ftadd@exp2,w
 12435  0F3A  1903               	btfsc	3,2
 12436  0F3B  0008               	return
 12437  0F3C  0855               	movf	___ftadd@exp1,w
 12438  0F3D  0254               	subwf	___ftadd@exp2,w
 12439  0F3E  1803               	skipnc
 12440  0F3F  2F48               	goto	l6239
 12441  0F40  0354               	decf	___ftadd@exp2,w
 12442  0F41  3AFF               	xorlw	255
 12443  0F42  0755               	addwf	___ftadd@exp1,w
 12444  0F43  00CF               	movwf	??___ftadd
 12445  0F44  3019               	movlw	25
 12446  0F45  024F               	subwf	??___ftadd,w
 12447  0F46  1803               	btfsc	3,0
 12448  0F47  0008               	return
 12449  0F48                     l6239:	
 12450  0F48  3006               	movlw	6
 12451  0F49  00CF               	movwf	??___ftadd
 12452  0F4A  084F               	movf	??___ftadd,w
 12453  0F4B  00D3               	movwf	___ftadd@sign
 12454  0F4C  1BCB               	btfsc	___ftadd@f1+2,7
 12455  0F4D  17D3               	bsf	___ftadd@sign,7
 12456  0F4E  1BCE               	btfsc	___ftadd@f2+2,7
 12457  0F4F  1753               	bsf	___ftadd@sign,6
 12458  0F50  17CA               	bsf	___ftadd@f1+1,7
 12459  0F51  30FF               	movlw	255
 12460  0F52  05C9               	andwf	___ftadd@f1,f
 12461  0F53  30FF               	movlw	255
 12462  0F54  05CA               	andwf	___ftadd@f1+1,f
 12463  0F55  3000               	movlw	0
 12464  0F56  05CB               	andwf	___ftadd@f1+2,f
 12465  0F57  17CD               	bsf	___ftadd@f2+1,7
 12466  0F58  30FF               	movlw	255
 12467  0F59  05CC               	andwf	___ftadd@f2,f
 12468  0F5A  30FF               	movlw	255
 12469  0F5B  05CD               	andwf	___ftadd@f2+1,f
 12470  0F5C  3000               	movlw	0
 12471  0F5D  05CE               	andwf	___ftadd@f2+2,f
 12472  0F5E  0854               	movf	___ftadd@exp2,w
 12473  0F5F  0255               	subwf	___ftadd@exp1,w
 12474  0F60  1803               	skipnc
 12475  0F61  2F84               	goto	l6261
 12476  0F62                     l6251:	
 12477  0F62  3001               	movlw	1
 12478  0F63                     u5905:	
 12479  0F63  35CC               	lslf	___ftadd@f2,f
 12480  0F64  0DCD               	rlf	___ftadd@f2+1,f
 12481  0F65  0DCE               	rlf	___ftadd@f2+2,f
 12482  0F66  0B89               	decfsz	9,f
 12483  0F67  2F63               	goto	u5905
 12484  0F68  3001               	movlw	1
 12485  0F69  02D4               	subwf	___ftadd@exp2,f
 12486  0F6A  0854               	movf	___ftadd@exp2,w
 12487  0F6B  0655               	xorwf	___ftadd@exp1,w
 12488  0F6C  1903               	skipnz
 12489  0F6D  2F7F               	goto	l6259
 12490  0F6E  3001               	movlw	1
 12491  0F6F  02D3               	subwf	___ftadd@sign,f
 12492  0F70  0853               	movf	___ftadd@sign,w
 12493  0F71  3907               	andlw	7
 12494  0F72  1903               	btfsc	3,2
 12495  0F73  2F7F               	goto	l6259
 12496  0F74  2F62               	goto	l6251
 12497  0F75                     l6257:	
 12498  0F75  3001               	movlw	1
 12499  0F76                     u5935:	
 12500  0F76  36CB               	lsrf	___ftadd@f1+2,f
 12501  0F77  0CCA               	rrf	___ftadd@f1+1,f
 12502  0F78  0CC9               	rrf	___ftadd@f1,f
 12503  0F79  0B89               	decfsz	9,f
 12504  0F7A  2F76               	goto	u5935
 12505  0F7B  3001               	movlw	1
 12506  0F7C  00CF               	movwf	??___ftadd
 12507  0F7D  084F               	movf	??___ftadd,w
 12508  0F7E  07D5               	addwf	___ftadd@exp1,f
 12509  0F7F                     l6259:	
 12510  0F7F  0855               	movf	___ftadd@exp1,w
 12511  0F80  0654               	xorwf	___ftadd@exp2,w
 12512  0F81  1903               	btfsc	3,2
 12513  0F82  2FA9               	goto	l1559
 12514  0F83  2F75               	goto	l6257
 12515  0F84                     l6261:	
 12516  0F84  0855               	movf	___ftadd@exp1,w
 12517  0F85  0254               	subwf	___ftadd@exp2,w
 12518  0F86  1803               	skipnc
 12519  0F87  2FA9               	goto	l1559
 12520  0F88                     l6263:	
 12521  0F88  3001               	movlw	1
 12522  0F89                     u5965:	
 12523  0F89  35C9               	lslf	___ftadd@f1,f
 12524  0F8A  0DCA               	rlf	___ftadd@f1+1,f
 12525  0F8B  0DCB               	rlf	___ftadd@f1+2,f
 12526  0F8C  0B89               	decfsz	9,f
 12527  0F8D  2F89               	goto	u5965
 12528  0F8E  3001               	movlw	1
 12529  0F8F  02D5               	subwf	___ftadd@exp1,f
 12530  0F90  0854               	movf	___ftadd@exp2,w
 12531  0F91  0655               	xorwf	___ftadd@exp1,w
 12532  0F92  1903               	skipnz
 12533  0F93  2FA5               	goto	l6271
 12534  0F94  3001               	movlw	1
 12535  0F95  02D3               	subwf	___ftadd@sign,f
 12536  0F96  0853               	movf	___ftadd@sign,w
 12537  0F97  3907               	andlw	7
 12538  0F98  1903               	btfsc	3,2
 12539  0F99  2FA5               	goto	l6271
 12540  0F9A  2F88               	goto	l6263
 12541  0F9B                     l6269:	
 12542  0F9B  3001               	movlw	1
 12543  0F9C                     u5995:	
 12544  0F9C  36CE               	lsrf	___ftadd@f2+2,f
 12545  0F9D  0CCD               	rrf	___ftadd@f2+1,f
 12546  0F9E  0CCC               	rrf	___ftadd@f2,f
 12547  0F9F  0B89               	decfsz	9,f
 12548  0FA0  2F9C               	goto	u5995
 12549  0FA1  3001               	movlw	1
 12550  0FA2  00CF               	movwf	??___ftadd
 12551  0FA3  084F               	movf	??___ftadd,w
 12552  0FA4  07D4               	addwf	___ftadd@exp2,f
 12553  0FA5                     l6271:	
 12554  0FA5  0855               	movf	___ftadd@exp1,w
 12555  0FA6  0654               	xorwf	___ftadd@exp2,w
 12556  0FA7  1D03               	skipz
 12557  0FA8  2F9B               	goto	l6269
 12558  0FA9                     l1559:	
 12559  0FA9  1FD3               	btfss	___ftadd@sign,7
 12560  0FAA  2FBB               	goto	l6275
 12561  0FAB  30FF               	movlw	255
 12562  0FAC  06C9               	xorwf	___ftadd@f1,f
 12563  0FAD  30FF               	movlw	255
 12564  0FAE  06CA               	xorwf	___ftadd@f1+1,f
 12565  0FAF  30FF               	movlw	255
 12566  0FB0  06CB               	xorwf	___ftadd@f1+2,f
 12567  0FB1  3001               	movlw	1
 12568  0FB2  07C9               	addwf	___ftadd@f1,f
 12569  0FB3  3000               	movlw	0
 12570  0FB4  1803               	skipnc
 12571  0FB5  3001               	movlw	1
 12572  0FB6  07CA               	addwf	___ftadd@f1+1,f
 12573  0FB7  3000               	movlw	0
 12574  0FB8  1803               	skipnc
 12575  0FB9  3001               	movlw	1
 12576  0FBA  07CB               	addwf	___ftadd@f1+2,f
 12577  0FBB                     l6275:	
 12578  0FBB  1F53               	btfss	___ftadd@sign,6
 12579  0FBC  2FCD               	goto	l6279
 12580  0FBD  30FF               	movlw	255
 12581  0FBE  06CC               	xorwf	___ftadd@f2,f
 12582  0FBF  30FF               	movlw	255
 12583  0FC0  06CD               	xorwf	___ftadd@f2+1,f
 12584  0FC1  30FF               	movlw	255
 12585  0FC2  06CE               	xorwf	___ftadd@f2+2,f
 12586  0FC3  3001               	movlw	1
 12587  0FC4  07CC               	addwf	___ftadd@f2,f
 12588  0FC5  3000               	movlw	0
 12589  0FC6  1803               	skipnc
 12590  0FC7  3001               	movlw	1
 12591  0FC8  07CD               	addwf	___ftadd@f2+1,f
 12592  0FC9  3000               	movlw	0
 12593  0FCA  1803               	skipnc
 12594  0FCB  3001               	movlw	1
 12595  0FCC  07CE               	addwf	___ftadd@f2+2,f
 12596  0FCD                     l6279:	
 12597  0FCD  01D3               	clrf	___ftadd@sign
 12598  0FCE  0849               	movf	___ftadd@f1,w
 12599  0FCF  07CC               	addwf	___ftadd@f2,f
 12600  0FD0  084A               	movf	___ftadd@f1+1,w
 12601  0FD1  3DCD               	addwfc	___ftadd@f2+1,f
 12602  0FD2  084B               	movf	___ftadd@f1+2,w
 12603  0FD3  3DCE               	addwfc	___ftadd@f2+2,f
 12604  0FD4  1FCE               	btfss	___ftadd@f2+2,7
 12605  0FD5  2FE8               	goto	l6289
 12606  0FD6  30FF               	movlw	255
 12607  0FD7  06CC               	xorwf	___ftadd@f2,f
 12608  0FD8  30FF               	movlw	255
 12609  0FD9  06CD               	xorwf	___ftadd@f2+1,f
 12610  0FDA  30FF               	movlw	255
 12611  0FDB  06CE               	xorwf	___ftadd@f2+2,f
 12612  0FDC  3001               	movlw	1
 12613  0FDD  07CC               	addwf	___ftadd@f2,f
 12614  0FDE  3000               	movlw	0
 12615  0FDF  1803               	skipnc
 12616  0FE0  3001               	movlw	1
 12617  0FE1  07CD               	addwf	___ftadd@f2+1,f
 12618  0FE2  3000               	movlw	0
 12619  0FE3  1803               	skipnc
 12620  0FE4  3001               	movlw	1
 12621  0FE5  07CE               	addwf	___ftadd@f2+2,f
 12622  0FE6  01D3               	clrf	___ftadd@sign
 12623  0FE7  0AD3               	incf	___ftadd@sign,f
 12624  0FE8                     l6289:	
 12625  0FE8  084C               	movf	___ftadd@f2,w
 12626  0FE9  00A1               	movwf	___ftpack@arg
 12627  0FEA  084D               	movf	___ftadd@f2+1,w
 12628  0FEB  00A2               	movwf	___ftpack@arg+1
 12629  0FEC  084E               	movf	___ftadd@f2+2,w
 12630  0FED  00A3               	movwf	___ftpack@arg+2
 12631  0FEE  0855               	movf	___ftadd@exp1,w
 12632  0FEF  00CF               	movwf	??___ftadd
 12633  0FF0  084F               	movf	??___ftadd,w
 12634  0FF1  00A4               	movwf	___ftpack@exp
 12635  0FF2  0853               	movf	___ftadd@sign,w
 12636  0FF3  00D0               	movwf	??___ftadd+1
 12637  0FF4  0850               	movf	??___ftadd+1,w
 12638  0FF5  00A5               	movwf	___ftpack@sign
 12639  0FF6  318A  2295         	fcall	___ftpack
 12640  0FF8  0020               	movlb	0	; select bank0
 12641  0FF9  0821               	movf	?___ftpack,w
 12642  0FFA  00C9               	movwf	?___ftadd
 12643  0FFB  0822               	movf	?___ftpack+1,w
 12644  0FFC  00CA               	movwf	?___ftadd+1
 12645  0FFD  0823               	movf	?___ftpack+2,w
 12646  0FFE  00CB               	movwf	?___ftadd+2
 12647  0FFF  0008               	return
 12648  1000                     __end_of___ftadd:	
 12649                           
 12650                           	psect	text64
 12651  1618                     __ptext64:	
 12652 ;; *************** function ___awtoft *****************
 12653 ;; Defined at:
 12654 ;;		line 32 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\awtoft.c"
 12655 ;; Parameters:    Size  Location     Type
 12656 ;;  c               2    9[BANK0 ] int 
 12657 ;; Auto vars:     Size  Location     Type
 12658 ;;  sign            1   14[BANK0 ] unsigned char 
 12659 ;; Return value:  Size  Location     Type
 12660 ;;                  3    9[BANK0 ] float 
 12661 ;; Registers used:
 12662 ;;		wreg, status,2, status,0, pclath, cstack
 12663 ;; Tracked objects:
 12664 ;;		On entry : 0/0
 12665 ;;		On exit  : 0/0
 12666 ;;		Unchanged: 0/0
 12667 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12668 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12669 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12670 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12671 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12672 ;;Total ram usage:        6 bytes
 12673 ;; Hardware stack levels used:    1
 12674 ;; Hardware stack levels required when called:    5
 12675 ;; This function calls:
 12676 ;;		___ftpack
 12677 ;; This function is called by:
 12678 ;;		_BMP_readTemperature
 12679 ;;		_HMC5883L_GetCompassDirection
 12680 ;; This function uses a non-reentrant model
 12681 ;;
 12682                           
 12683                           
 12684                           ;psect for function ___awtoft
 12685  1618                     ___awtoft:	
 12686                           
 12687                           ;incstack = 0
 12688                           ; Regs used in ___awtoft: [wreg+status,2+status,0+pclath+cstack]
 12689  1618  0020               	movlb	0	; select bank0
 12690  1619  01AE               	clrf	___awtoft@sign
 12691  161A  1FAA               	btfss	___awtoft@c+1,7
 12692  161B  2E23               	goto	l6219
 12693  161C  09A9               	comf	___awtoft@c,f
 12694  161D  09AA               	comf	___awtoft@c+1,f
 12695  161E  0AA9               	incf	___awtoft@c,f
 12696  161F  1903               	skipnz
 12697  1620  0AAA               	incf	___awtoft@c+1,f
 12698  1621  01AE               	clrf	___awtoft@sign
 12699  1622  0AAE               	incf	___awtoft@sign,f
 12700  1623                     l6219:	
 12701  1623  0829               	movf	___awtoft@c,w
 12702  1624  00A1               	movwf	___ftpack@arg
 12703  1625  082A               	movf	___awtoft@c+1,w
 12704  1626  00A2               	movwf	___ftpack@arg+1
 12705  1627  01A3               	clrf	___ftpack@arg+2
 12706  1628  308E               	movlw	142
 12707  1629  00AC               	movwf	??___awtoft
 12708  162A  082C               	movf	??___awtoft,w
 12709  162B  00A4               	movwf	___ftpack@exp
 12710  162C  082E               	movf	___awtoft@sign,w
 12711  162D  00AD               	movwf	??___awtoft+1
 12712  162E  082D               	movf	??___awtoft+1,w
 12713  162F  00A5               	movwf	___ftpack@sign
 12714  1630  318A  2295         	fcall	___ftpack
 12715  1632  0020               	movlb	0	; select bank0
 12716  1633  0821               	movf	?___ftpack,w
 12717  1634  00A9               	movwf	?___awtoft
 12718  1635  0822               	movf	?___ftpack+1,w
 12719  1636  00AA               	movwf	?___awtoft+1
 12720  1637  0823               	movf	?___ftpack+2,w
 12721  1638  00AB               	movwf	?___awtoft+2
 12722  1639  0008               	return
 12723  163A                     __end_of___awtoft:	
 12724                           
 12725                           	psect	text65
 12726  081C                     __ptext65:	
 12727 ;; *************** function ___altoft *****************
 12728 ;; Defined at:
 12729 ;;		line 42 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\altoft.c"
 12730 ;; Parameters:    Size  Location     Type
 12731 ;;  c               4    9[BANK0 ] long 
 12732 ;; Auto vars:     Size  Location     Type
 12733 ;;  sign            1   16[BANK0 ] unsigned char 
 12734 ;;  exp             1   15[BANK0 ] unsigned char 
 12735 ;; Return value:  Size  Location     Type
 12736 ;;                  3    9[BANK0 ] float 
 12737 ;; Registers used:
 12738 ;;		wreg, status,2, status,0, pclath, cstack
 12739 ;; Tracked objects:
 12740 ;;		On entry : 0/0
 12741 ;;		On exit  : 0/0
 12742 ;;		Unchanged: 0/0
 12743 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12744 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12745 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12746 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12747 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12748 ;;Total ram usage:        8 bytes
 12749 ;; Hardware stack levels used:    1
 12750 ;; Hardware stack levels required when called:    5
 12751 ;; This function calls:
 12752 ;;		___ftpack
 12753 ;; This function is called by:
 12754 ;;		_BMP_readTemperature
 12755 ;; This function uses a non-reentrant model
 12756 ;;
 12757                           
 12758                           
 12759                           ;psect for function ___altoft
 12760  081C                     ___altoft:	
 12761                           
 12762                           ;incstack = 0
 12763                           ; Regs used in ___altoft: [wreg+status,2+status,0+pclath+cstack]
 12764  081C  0020               	movlb	0	; select bank0
 12765  081D  01B0               	clrf	___altoft@sign
 12766  081E  308E               	movlw	142
 12767  081F  00AD               	movwf	??___altoft
 12768  0820  082D               	movf	??___altoft,w
 12769  0821  00AF               	movwf	___altoft@exp
 12770  0822  1FAC               	btfss	___altoft@c+3,7
 12771  0823  2831               	goto	l6205
 12772  0824  09A9               	comf	___altoft@c,f
 12773  0825  09AA               	comf	___altoft@c+1,f
 12774  0826  09AB               	comf	___altoft@c+2,f
 12775  0827  09AC               	comf	___altoft@c+3,f
 12776  0828  0AA9               	incf	___altoft@c,f
 12777  0829  1903               	skipnz
 12778  082A  0AAA               	incf	___altoft@c+1,f
 12779  082B  1903               	skipnz
 12780  082C  0AAB               	incf	___altoft@c+2,f
 12781  082D  1903               	skipnz
 12782  082E  0AAC               	incf	___altoft@c+3,f
 12783  082F  01B0               	clrf	___altoft@sign
 12784  0830  0AB0               	incf	___altoft@sign,f
 12785  0831                     l6205:	
 12786  0831  30FF               	movlw	255
 12787  0832  052C               	andwf	___altoft@c+3,w
 12788  0833  1903               	btfsc	3,2
 12789  0834  2841               	goto	l6207
 12790  0835  3001               	movlw	1
 12791  0836                     u5785:	
 12792  0836  36AC               	lsrf	___altoft@c+3,f
 12793  0837  0CAB               	rrf	___altoft@c+2,f
 12794  0838  0CAA               	rrf	___altoft@c+1,f
 12795  0839  0CA9               	rrf	___altoft@c,f
 12796  083A  0B89               	decfsz	9,f
 12797  083B  2836               	goto	u5785
 12798  083C  3001               	movlw	1
 12799  083D  00AD               	movwf	??___altoft
 12800  083E  082D               	movf	??___altoft,w
 12801  083F  07AF               	addwf	___altoft@exp,f
 12802  0840  2831               	goto	l6205
 12803  0841                     l6207:	
 12804  0841  0829               	movf	___altoft@c,w
 12805  0842  00A1               	movwf	___ftpack@arg
 12806  0843  082A               	movf	___altoft@c+1,w
 12807  0844  00A2               	movwf	___ftpack@arg+1
 12808  0845  082B               	movf	___altoft@c+2,w
 12809  0846  00A3               	movwf	___ftpack@arg+2
 12810  0847  082F               	movf	___altoft@exp,w
 12811  0848  00AD               	movwf	??___altoft
 12812  0849  082D               	movf	??___altoft,w
 12813  084A  00A4               	movwf	___ftpack@exp
 12814  084B  0830               	movf	___altoft@sign,w
 12815  084C  00AE               	movwf	??___altoft+1
 12816  084D  082E               	movf	??___altoft+1,w
 12817  084E  00A5               	movwf	___ftpack@sign
 12818  084F  318A  2295         	fcall	___ftpack
 12819  0851  0020               	movlb	0	; select bank0
 12820  0852  0821               	movf	?___ftpack,w
 12821  0853  00A9               	movwf	?___altoft
 12822  0854  0822               	movf	?___ftpack+1,w
 12823  0855  00AA               	movwf	?___altoft+1
 12824  0856  0823               	movf	?___ftpack+2,w
 12825  0857  00AB               	movwf	?___altoft+2
 12826  0858  0008               	return
 12827  0859                     __end_of___altoft:	
 12828                           
 12829                           	psect	text66
 12830  0A95                     __ptext66:	
 12831 ;; *************** function ___ftpack *****************
 12832 ;; Defined at:
 12833 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\float.c"
 12834 ;; Parameters:    Size  Location     Type
 12835 ;;  arg             3    1[BANK0 ] unsigned um
 12836 ;;  exp             1    4[BANK0 ] unsigned char 
 12837 ;;  sign            1    5[BANK0 ] unsigned char 
 12838 ;; Auto vars:     Size  Location     Type
 12839 ;;		None
 12840 ;; Return value:  Size  Location     Type
 12841 ;;                  3    1[BANK0 ] float 
 12842 ;; Registers used:
 12843 ;;		wreg, status,2, status,0
 12844 ;; Tracked objects:
 12845 ;;		On entry : 0/0
 12846 ;;		On exit  : 0/0
 12847 ;;		Unchanged: 0/0
 12848 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12849 ;;      Params:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12850 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12851 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12852 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12853 ;;Total ram usage:        8 bytes
 12854 ;; Hardware stack levels used:    1
 12855 ;; Hardware stack levels required when called:    4
 12856 ;; This function calls:
 12857 ;;		Nothing
 12858 ;; This function is called by:
 12859 ;;		___altoft
 12860 ;;		___awtoft
 12861 ;;		___ftadd
 12862 ;;		___ftdiv
 12863 ;;		___ftmul
 12864 ;;		___lwtoft
 12865 ;; This function uses a non-reentrant model
 12866 ;;
 12867                           
 12868                           
 12869                           ;psect for function ___ftpack
 12870  0A95                     ___ftpack:	
 12871                           
 12872                           ;incstack = 0
 12873                           ; Regs used in ___ftpack: [wreg+status,2+status,0]
 12874  0A95  0020               	movlb	0	; select bank0
 12875  0A96  0824               	movf	___ftpack@exp,w
 12876  0A97  1903               	btfsc	3,2
 12877  0A98  2A9E               	goto	l5683
 12878  0A99  0823               	movf	___ftpack@arg+2,w
 12879  0A9A  0422               	iorwf	___ftpack@arg+1,w
 12880  0A9B  0421               	iorwf	___ftpack@arg,w
 12881  0A9C  1D03               	skipz
 12882  0A9D  2AAF               	goto	l5689
 12883  0A9E                     l5683:	
 12884  0A9E  3000               	movlw	0
 12885  0A9F  00A1               	movwf	?___ftpack
 12886  0AA0  3000               	movlw	0
 12887  0AA1  00A2               	movwf	?___ftpack+1
 12888  0AA2  3000               	movlw	0
 12889  0AA3  00A3               	movwf	?___ftpack+2
 12890  0AA4  0008               	return
 12891  0AA5                     l5687:	
 12892  0AA5  3001               	movlw	1
 12893  0AA6  00A6               	movwf	??___ftpack
 12894  0AA7  0826               	movf	??___ftpack,w
 12895  0AA8  07A4               	addwf	___ftpack@exp,f
 12896  0AA9  3001               	movlw	1
 12897  0AAA                     u5125:	
 12898  0AAA  36A3               	lsrf	___ftpack@arg+2,f
 12899  0AAB  0CA2               	rrf	___ftpack@arg+1,f
 12900  0AAC  0CA1               	rrf	___ftpack@arg,f
 12901  0AAD  0B89               	decfsz	9,f
 12902  0AAE  2AAA               	goto	u5125
 12903  0AAF                     l5689:	
 12904  0AAF  30FE               	movlw	254
 12905  0AB0  0523               	andwf	___ftpack@arg+2,w
 12906  0AB1  1903               	btfsc	3,2
 12907  0AB2  2AC8               	goto	l1528
 12908  0AB3  2AA5               	goto	l5687
 12909  0AB4                     l5691:	
 12910  0AB4  3001               	movlw	1
 12911  0AB5  00A6               	movwf	??___ftpack
 12912  0AB6  0826               	movf	??___ftpack,w
 12913  0AB7  07A4               	addwf	___ftpack@exp,f
 12914  0AB8  3001               	movlw	1
 12915  0AB9  07A1               	addwf	___ftpack@arg,f
 12916  0ABA  3000               	movlw	0
 12917  0ABB  1803               	skipnc
 12918  0ABC  3001               	movlw	1
 12919  0ABD  07A2               	addwf	___ftpack@arg+1,f
 12920  0ABE  3000               	movlw	0
 12921  0ABF  1803               	skipnc
 12922  0AC0  3001               	movlw	1
 12923  0AC1  07A3               	addwf	___ftpack@arg+2,f
 12924  0AC2  3001               	movlw	1
 12925  0AC3                     u5145:	
 12926  0AC3  36A3               	lsrf	___ftpack@arg+2,f
 12927  0AC4  0CA2               	rrf	___ftpack@arg+1,f
 12928  0AC5  0CA1               	rrf	___ftpack@arg,f
 12929  0AC6  0B89               	decfsz	9,f
 12930  0AC7  2AC3               	goto	u5145
 12931  0AC8                     l1528:	
 12932  0AC8  30FF               	movlw	255
 12933  0AC9  0523               	andwf	___ftpack@arg+2,w
 12934  0ACA  1903               	btfsc	3,2
 12935  0ACB  2AD5               	goto	l5699
 12936  0ACC  2AB4               	goto	l5691
 12937  0ACD                     l5697:	
 12938  0ACD  3001               	movlw	1
 12939  0ACE  02A4               	subwf	___ftpack@exp,f
 12940  0ACF  3001               	movlw	1
 12941  0AD0                     u5165:	
 12942  0AD0  35A1               	lslf	___ftpack@arg,f
 12943  0AD1  0DA2               	rlf	___ftpack@arg+1,f
 12944  0AD2  0DA3               	rlf	___ftpack@arg+2,f
 12945  0AD3  0B89               	decfsz	9,f
 12946  0AD4  2AD0               	goto	u5165
 12947  0AD5                     l5699:	
 12948  0AD5  1BA2               	btfsc	___ftpack@arg+1,7
 12949  0AD6  2ADB               	goto	l1535
 12950  0AD7  3002               	movlw	2
 12951  0AD8  0224               	subwf	___ftpack@exp,w
 12952  0AD9  1803               	skipnc
 12953  0ADA  2ACD               	goto	l5697
 12954  0ADB                     l1535:	
 12955  0ADB  1824               	btfsc	___ftpack@exp,0
 12956  0ADC  2AE3               	goto	l1536
 12957  0ADD  30FF               	movlw	255
 12958  0ADE  05A1               	andwf	___ftpack@arg,f
 12959  0ADF  307F               	movlw	127
 12960  0AE0  05A2               	andwf	___ftpack@arg+1,f
 12961  0AE1  30FF               	movlw	255
 12962  0AE2  05A3               	andwf	___ftpack@arg+2,f
 12963  0AE3                     l1536:	
 12964  0AE3  1003               	clrc
 12965  0AE4  0CA4               	rrf	___ftpack@exp,f
 12966  0AE5  0824               	movf	___ftpack@exp,w
 12967  0AE6  00A6               	movwf	??___ftpack
 12968  0AE7  01A7               	clrf	??___ftpack+1
 12969  0AE8  01A8               	clrf	??___ftpack+2
 12970  0AE9  3010               	movlw	16
 12971  0AEA                     u5205:	
 12972  0AEA  35A6               	lslf	??___ftpack,f
 12973  0AEB  0DA7               	rlf	??___ftpack+1,f
 12974  0AEC  0DA8               	rlf	??___ftpack+2,f
 12975  0AED  0B89               	decfsz	9,f
 12976  0AEE  2AEA               	goto	u5205
 12977  0AEF  0826               	movf	??___ftpack,w
 12978  0AF0  04A1               	iorwf	___ftpack@arg,f
 12979  0AF1  0827               	movf	??___ftpack+1,w
 12980  0AF2  04A2               	iorwf	___ftpack@arg+1,f
 12981  0AF3  0828               	movf	??___ftpack+2,w
 12982  0AF4  04A3               	iorwf	___ftpack@arg+2,f
 12983  0AF5  0825               	movf	___ftpack@sign,w
 12984  0AF6  1903               	btfsc	3,2
 12985  0AF7  0008               	return
 12986  0AF8  17A3               	bsf	___ftpack@arg+2,7
 12987  0AF9  0008               	return
 12988  0AFA                     __end_of___ftpack:	
 12989                           
 12990                           	psect	text67
 12991  0BE9                     __ptext67:	
 12992 ;; *************** function ___aldiv *****************
 12993 ;; Defined at:
 12994 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\aldiv.c"
 12995 ;; Parameters:    Size  Location     Type
 12996 ;;  divisor         4    1[BANK0 ] long 
 12997 ;;  dividend        4    5[BANK0 ] long 
 12998 ;; Auto vars:     Size  Location     Type
 12999 ;;  quotient        4   12[BANK0 ] long 
 13000 ;;  sign            1   11[BANK0 ] unsigned char 
 13001 ;;  counter         1   10[BANK0 ] unsigned char 
 13002 ;; Return value:  Size  Location     Type
 13003 ;;                  4    1[BANK0 ] long 
 13004 ;; Registers used:
 13005 ;;		wreg, status,2, status,0
 13006 ;; Tracked objects:
 13007 ;;		On entry : 0/0
 13008 ;;		On exit  : 0/0
 13009 ;;		Unchanged: 0/0
 13010 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13011 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13012 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13013 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13014 ;;      Totals:         0      15       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13015 ;;Total ram usage:       15 bytes
 13016 ;; Hardware stack levels used:    1
 13017 ;; Hardware stack levels required when called:    4
 13018 ;; This function calls:
 13019 ;;		Nothing
 13020 ;; This function is called by:
 13021 ;;		_BMP_readTemperature
 13022 ;;		_Wireless_packageData
 13023 ;; This function uses a non-reentrant model
 13024 ;;
 13025                           
 13026                           
 13027                           ;psect for function ___aldiv
 13028  0BE9                     ___aldiv:	
 13029                           
 13030                           ;incstack = 0
 13031                           ; Regs used in ___aldiv: [wreg+status,2+status,0]
 13032  0BE9  0020               	movlb	0	; select bank0
 13033  0BEA  01AB               	clrf	___aldiv@sign
 13034  0BEB  1FA4               	btfss	___aldiv@divisor+3,7
 13035  0BEC  2BFA               	goto	l1394
 13036  0BED  09A1               	comf	___aldiv@divisor,f
 13037  0BEE  09A2               	comf	___aldiv@divisor+1,f
 13038  0BEF  09A3               	comf	___aldiv@divisor+2,f
 13039  0BF0  09A4               	comf	___aldiv@divisor+3,f
 13040  0BF1  0AA1               	incf	___aldiv@divisor,f
 13041  0BF2  1903               	skipnz
 13042  0BF3  0AA2               	incf	___aldiv@divisor+1,f
 13043  0BF4  1903               	skipnz
 13044  0BF5  0AA3               	incf	___aldiv@divisor+2,f
 13045  0BF6  1903               	skipnz
 13046  0BF7  0AA4               	incf	___aldiv@divisor+3,f
 13047  0BF8  01AB               	clrf	___aldiv@sign
 13048  0BF9  0AAB               	incf	___aldiv@sign,f
 13049  0BFA                     l1394:	
 13050  0BFA  1FA8               	btfss	___aldiv@dividend+3,7
 13051  0BFB  2C0B               	goto	l6165
 13052  0BFC  09A5               	comf	___aldiv@dividend,f
 13053  0BFD  09A6               	comf	___aldiv@dividend+1,f
 13054  0BFE  09A7               	comf	___aldiv@dividend+2,f
 13055  0BFF  09A8               	comf	___aldiv@dividend+3,f
 13056  0C00  0AA5               	incf	___aldiv@dividend,f
 13057  0C01  1903               	skipnz
 13058  0C02  0AA6               	incf	___aldiv@dividend+1,f
 13059  0C03  1903               	skipnz
 13060  0C04  0AA7               	incf	___aldiv@dividend+2,f
 13061  0C05  1903               	skipnz
 13062  0C06  0AA8               	incf	___aldiv@dividend+3,f
 13063  0C07  3001               	movlw	1
 13064  0C08  00A9               	movwf	??___aldiv
 13065  0C09  0829               	movf	??___aldiv,w
 13066  0C0A  06AB               	xorwf	___aldiv@sign,f
 13067  0C0B                     l6165:	
 13068  0C0B  3000               	movlw	0
 13069  0C0C  00AF               	movwf	___aldiv@quotient+3
 13070  0C0D  3000               	movlw	0
 13071  0C0E  00AE               	movwf	___aldiv@quotient+2
 13072  0C0F  3000               	movlw	0
 13073  0C10  00AD               	movwf	___aldiv@quotient+1
 13074  0C11  3000               	movlw	0
 13075  0C12  00AC               	movwf	___aldiv@quotient
 13076  0C13  0824               	movf	___aldiv@divisor+3,w
 13077  0C14  0423               	iorwf	___aldiv@divisor+2,w
 13078  0C15  0422               	iorwf	___aldiv@divisor+1,w
 13079  0C16  0421               	iorwf	___aldiv@divisor,w
 13080  0C17  1903               	skipnz
 13081  0C18  2C54               	goto	l6187
 13082  0C19  01AA               	clrf	___aldiv@counter
 13083  0C1A  0AAA               	incf	___aldiv@counter,f
 13084  0C1B                     l6173:	
 13085  0C1B  1BA4               	btfsc	___aldiv@divisor+3,7
 13086  0C1C  2C29               	goto	l6175
 13087  0C1D  3001               	movlw	1
 13088  0C1E                     u5705:	
 13089  0C1E  35A1               	lslf	___aldiv@divisor,f
 13090  0C1F  0DA2               	rlf	___aldiv@divisor+1,f
 13091  0C20  0DA3               	rlf	___aldiv@divisor+2,f
 13092  0C21  0DA4               	rlf	___aldiv@divisor+3,f
 13093  0C22  0B89               	decfsz	9,f
 13094  0C23  2C1E               	goto	u5705
 13095  0C24  3001               	movlw	1
 13096  0C25  00A9               	movwf	??___aldiv
 13097  0C26  0829               	movf	??___aldiv,w
 13098  0C27  07AA               	addwf	___aldiv@counter,f
 13099  0C28  2C1B               	goto	l6173
 13100  0C29                     l6175:	
 13101  0C29  3001               	movlw	1
 13102  0C2A                     u5725:	
 13103  0C2A  35AC               	lslf	___aldiv@quotient,f
 13104  0C2B  0DAD               	rlf	___aldiv@quotient+1,f
 13105  0C2C  0DAE               	rlf	___aldiv@quotient+2,f
 13106  0C2D  0DAF               	rlf	___aldiv@quotient+3,f
 13107  0C2E  0B89               	decfsz	9,f
 13108  0C2F  2C2A               	goto	u5725
 13109  0C30  0824               	movf	___aldiv@divisor+3,w
 13110  0C31  0228               	subwf	___aldiv@dividend+3,w
 13111  0C32  1D03               	skipz
 13112  0C33  2C3E               	goto	u5735
 13113  0C34  0823               	movf	___aldiv@divisor+2,w
 13114  0C35  0227               	subwf	___aldiv@dividend+2,w
 13115  0C36  1D03               	skipz
 13116  0C37  2C3E               	goto	u5735
 13117  0C38  0822               	movf	___aldiv@divisor+1,w
 13118  0C39  0226               	subwf	___aldiv@dividend+1,w
 13119  0C3A  1D03               	skipz
 13120  0C3B  2C3E               	goto	u5735
 13121  0C3C  0821               	movf	___aldiv@divisor,w
 13122  0C3D  0225               	subwf	___aldiv@dividend,w
 13123  0C3E                     u5735:	
 13124  0C3E  1C03               	skipc
 13125  0C3F  2C49               	goto	l6183
 13126  0C40  0821               	movf	___aldiv@divisor,w
 13127  0C41  02A5               	subwf	___aldiv@dividend,f
 13128  0C42  0822               	movf	___aldiv@divisor+1,w
 13129  0C43  3BA6               	subwfb	___aldiv@dividend+1,f
 13130  0C44  0823               	movf	___aldiv@divisor+2,w
 13131  0C45  3BA7               	subwfb	___aldiv@dividend+2,f
 13132  0C46  0824               	movf	___aldiv@divisor+3,w
 13133  0C47  3BA8               	subwfb	___aldiv@dividend+3,f
 13134  0C48  142C               	bsf	___aldiv@quotient,0
 13135  0C49                     l6183:	
 13136  0C49  3001               	movlw	1
 13137  0C4A                     u5745:	
 13138  0C4A  36A4               	lsrf	___aldiv@divisor+3,f
 13139  0C4B  0CA3               	rrf	___aldiv@divisor+2,f
 13140  0C4C  0CA2               	rrf	___aldiv@divisor+1,f
 13141  0C4D  0CA1               	rrf	___aldiv@divisor,f
 13142  0C4E  0B89               	decfsz	9,f
 13143  0C4F  2C4A               	goto	u5745
 13144  0C50  3001               	movlw	1
 13145  0C51  02AA               	subwf	___aldiv@counter,f
 13146  0C52  1D03               	btfss	3,2
 13147  0C53  2C29               	goto	l6175
 13148  0C54                     l6187:	
 13149  0C54  082B               	movf	___aldiv@sign,w
 13150  0C55  1903               	btfsc	3,2
 13151  0C56  2C62               	goto	l6191
 13152  0C57  09AC               	comf	___aldiv@quotient,f
 13153  0C58  09AD               	comf	___aldiv@quotient+1,f
 13154  0C59  09AE               	comf	___aldiv@quotient+2,f
 13155  0C5A  09AF               	comf	___aldiv@quotient+3,f
 13156  0C5B  0AAC               	incf	___aldiv@quotient,f
 13157  0C5C  1903               	skipnz
 13158  0C5D  0AAD               	incf	___aldiv@quotient+1,f
 13159  0C5E  1903               	skipnz
 13160  0C5F  0AAE               	incf	___aldiv@quotient+2,f
 13161  0C60  1903               	skipnz
 13162  0C61  0AAF               	incf	___aldiv@quotient+3,f
 13163  0C62                     l6191:	
 13164  0C62  082F               	movf	___aldiv@quotient+3,w
 13165  0C63  00A4               	movwf	?___aldiv+3
 13166  0C64  082E               	movf	___aldiv@quotient+2,w
 13167  0C65  00A3               	movwf	?___aldiv+2
 13168  0C66  082D               	movf	___aldiv@quotient+1,w
 13169  0C67  00A2               	movwf	?___aldiv+1
 13170  0C68  082C               	movf	___aldiv@quotient,w
 13171  0C69  00A1               	movwf	?___aldiv
 13172  0C6A  0008               	return
 13173  0C6B                     __end_of___aldiv:	
 13174                           
 13175                           	psect	text68
 13176  089E                     __ptext68:	
 13177 ;; *************** function _HMC5883L_ReadBits *****************
 13178 ;; Defined at:
 13179 ;;		line 418 in file "hmc5883l.c"
 13180 ;; Parameters:    Size  Location     Type
 13181 ;;  slaveAddr       1    wreg     unsigned char 
 13182 ;;  regAddr         1   35[BANK0 ] unsigned char 
 13183 ;;  bitStart        1   36[BANK0 ] unsigned char 
 13184 ;;  length          1   37[BANK0 ] unsigned char 
 13185 ;;  data            1   38[BANK0 ] PTR unsigned char 
 13186 ;;		 -> BMP_readTemperature@tmp(1), HMC5883L_GetHeading@tmp(1), HMC5883L_GetMode@tmp(1), HMC5883L_GetGain@tmp(1), 
 13187 ;;		 -> HMC5883L_GetMeasurementBias@tmp(1), HMC5883L_GetDataRate@tmp(1), HMC5883L_GetSampleAveraging@tmp(1), 
 13188 ;; Auto vars:     Size  Location     Type
 13189 ;;  slaveAddr       1   42[BANK0 ] unsigned char 
 13190 ;;  mask            1   43[BANK0 ] unsigned char 
 13191 ;;  tmp             1   44[BANK0 ] unsigned char 
 13192 ;; Return value:  Size  Location     Type
 13193 ;;                  1    wreg      unsigned char 
 13194 ;; Registers used:
 13195 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13196 ;; Tracked objects:
 13197 ;;		On entry : 0/0
 13198 ;;		On exit  : 0/0
 13199 ;;		Unchanged: 0/0
 13200 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13201 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13202 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13203 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13204 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13205 ;;Total ram usage:       10 bytes
 13206 ;; Hardware stack levels used:    1
 13207 ;; Hardware stack levels required when called:    8
 13208 ;; This function calls:
 13209 ;;		_HMC5883L_I2C_BufferRead
 13210 ;; This function is called by:
 13211 ;;		_BMP_readTemperature
 13212 ;;		_HMC5883L_GetSampleAveraging
 13213 ;;		_HMC5883L_GetDataRate
 13214 ;;		_HMC5883L_GetMeasurementBias
 13215 ;;		_HMC5883L_GetGain
 13216 ;;		_HMC5883L_GetMode
 13217 ;;		_HMC5883L_GetHeading
 13218 ;; This function uses a non-reentrant model
 13219 ;;
 13220                           
 13221                           
 13222                           ;psect for function _HMC5883L_ReadBits
 13223  089E                     _HMC5883L_ReadBits:	
 13224                           
 13225                           ;incstack = 0
 13226                           ; Regs used in _HMC5883L_ReadBits: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 13227                           ;HMC5883L_ReadBits@slaveAddr stored from wreg
 13228  089E  0020               	movlb	0	; select bank0
 13229  089F  00CA               	movwf	HMC5883L_ReadBits@slaveAddr
 13230                           
 13231                           ;hmc5883l.c: 420: uint8_t tmp;
 13232                           ;hmc5883l.c: 422: if(HMC5883L_I2C_BufferRead(slaveAddr, &tmp, regAddr, 1))
 13233  08A0  304C               	movlw	low HMC5883L_ReadBits@tmp
 13234  08A1  00BC               	movwf	HMC5883L_I2C_BufferRead@pBuffer
 13235  08A2  3000               	movlw	high HMC5883L_ReadBits@tmp
 13236  08A3  00BD               	movwf	HMC5883L_I2C_BufferRead@pBuffer+1
 13237  08A4  0843               	movf	HMC5883L_ReadBits@regAddr,w
 13238  08A5  00C7               	movwf	??_HMC5883L_ReadBits
 13239  08A6  0847               	movf	??_HMC5883L_ReadBits,w
 13240  08A7  00BE               	movwf	HMC5883L_I2C_BufferRead@ReadAddr
 13241  08A8  3001               	movlw	1
 13242  08A9  00BF               	movwf	HMC5883L_I2C_BufferRead@NumByteToRead
 13243  08AA  3000               	movlw	0
 13244  08AB  00C0               	movwf	HMC5883L_I2C_BufferRead@NumByteToRead+1
 13245  08AC  084A               	movf	HMC5883L_ReadBits@slaveAddr,w
 13246  08AD  3193  23E8  3188   	fcall	_HMC5883L_I2C_BufferRead
 13247  08B0  3A00               	xorlw	0
 13248  08B1  1903               	skipnz
 13249  08B2  28E2               	goto	l6121
 13250                           
 13251                           ;hmc5883l.c: 423: {
 13252                           ;hmc5883l.c: 424: uint8_t mask = ((1 << length) - 1) << (bitStart - length + 1);
 13253  08B3  3001               	movlw	1
 13254  08B4  0020               	movlb	0	; select bank0
 13255  08B5  00C7               	movwf	??_HMC5883L_ReadBits
 13256  08B6  0A45               	incf	HMC5883L_ReadBits@length,w
 13257  08B7  28B9               	goto	u5614
 13258  08B8                     u5615:	
 13259  08B8  35C7               	lslf	??_HMC5883L_ReadBits,f
 13260  08B9                     u5614:	
 13261  08B9  0B89               	decfsz	9,f
 13262  08BA  28B8               	goto	u5615
 13263  08BB  0847               	movf	??_HMC5883L_ReadBits,w
 13264  08BC  3EFF               	addlw	255
 13265  08BD  00C8               	movwf	??_HMC5883L_ReadBits+1
 13266  08BE  0345               	decf	HMC5883L_ReadBits@length,w
 13267  08BF  3AFF               	xorlw	255
 13268  08C0  0744               	addwf	HMC5883L_ReadBits@bitStart,w
 13269  08C1  3E01               	addlw	1
 13270  08C2  0A89               	incf	9,f
 13271  08C3  28C5               	goto	u5624
 13272  08C4                     u5625:	
 13273  08C4  35C8               	lslf	??_HMC5883L_ReadBits+1,f
 13274  08C5                     u5624:	
 13275  08C5  0B89               	decfsz	9,f
 13276  08C6  28C4               	goto	u5625
 13277  08C7  0848               	movf	??_HMC5883L_ReadBits+1,w
 13278  08C8  00C9               	movwf	??_HMC5883L_ReadBits+2
 13279  08C9  0849               	movf	??_HMC5883L_ReadBits+2,w
 13280  08CA  00CB               	movwf	HMC5883L_ReadBits@mask
 13281                           
 13282                           ;hmc5883l.c: 425: tmp &= mask;
 13283  08CB  084B               	movf	HMC5883L_ReadBits@mask,w
 13284  08CC  00C7               	movwf	??_HMC5883L_ReadBits
 13285  08CD  0847               	movf	??_HMC5883L_ReadBits,w
 13286  08CE  05CC               	andwf	HMC5883L_ReadBits@tmp,f
 13287                           
 13288                           ;hmc5883l.c: 426: tmp >>= (bitStart - length + 1);
 13289  08CF  0345               	decf	HMC5883L_ReadBits@length,w
 13290  08D0  3AFF               	xorlw	255
 13291  08D1  0744               	addwf	HMC5883L_ReadBits@bitStart,w
 13292  08D2  3E01               	addlw	1
 13293  08D3  0A89               	incf	9,f
 13294  08D4  28D7               	goto	u5630
 13295  08D5                     u5635:	
 13296  08D5  1003               	clrc
 13297  08D6  0CCC               	rrf	HMC5883L_ReadBits@tmp,f
 13298  08D7                     u5630:	
 13299  08D7  3EFF               	addlw	-1
 13300  08D8  1D03               	skipz
 13301  08D9  28D5               	goto	u5635
 13302                           
 13303                           ;hmc5883l.c: 427: *data = tmp;
 13304  08DA  084C               	movf	HMC5883L_ReadBits@tmp,w
 13305  08DB  00C7               	movwf	??_HMC5883L_ReadBits
 13306  08DC  0846               	movf	HMC5883L_ReadBits@data,w
 13307  08DD  0086               	movwf	6
 13308  08DE  0187               	clrf	7
 13309  08DF  0847               	movf	??_HMC5883L_ReadBits,w
 13310  08E0  0081               	movwf	1
 13311                           
 13312                           ;hmc5883l.c: 428: }
 13313  08E1  0008               	return
 13314  08E2                     l6121:	
 13315                           
 13316                           ;hmc5883l.c: 429: else return 0;
 13317  08E2  3000               	movlw	0
 13318  08E3  0008               	return
 13319  08E4                     __end_of_HMC5883L_ReadBits:	
 13320                           
 13321                           	psect	text69
 13322  13E8                     __ptext69:	
 13323 ;; *************** function _HMC5883L_I2C_BufferRead *****************
 13324 ;; Defined at:
 13325 ;;		line 471 in file "hmc5883l.c"
 13326 ;; Parameters:    Size  Location     Type
 13327 ;;  slaveAddr       1    wreg     unsigned char 
 13328 ;;  pBuffer         2   28[BANK0 ] PTR unsigned char 
 13329 ;;		 -> HMC5883L_ReadBit@tmp(1), HMC5883L_ReadBits@tmp(1), HMC5883L_WriteBit@tmp(1), HMC5883L_WriteBits@tmp(1), 
 13330 ;;		 -> heading(8), HMC5883L_TestConnection@tmp(3), MPU6050_ReadBit@tmp(1), MPU6050_ReadBits@tmp(1), 
 13331 ;;		 -> MPU6050_WriteBit@tmp(1), MPU6050_WriteBits@tmp(1), MPU6050_GetRawAccel@tempBuffer(6), MPU6050_GetRawAccelGyro@tm
      +pBuffer(14), 
 13332 ;;  ReadAddr        1   30[BANK0 ] unsigned char 
 13333 ;;  NumByteToRea    2   31[BANK0 ] unsigned short 
 13334 ;; Auto vars:     Size  Location     Type
 13335 ;;  slaveAddr       1   34[BANK0 ] unsigned char 
 13336 ;; Return value:  Size  Location     Type
 13337 ;;                  1    wreg      unsigned char 
 13338 ;; Registers used:
 13339 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13340 ;; Tracked objects:
 13341 ;;		On entry : 0/0
 13342 ;;		On exit  : 0/0
 13343 ;;		Unchanged: 0/0
 13344 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13345 ;;      Params:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13346 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13347 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13348 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13349 ;;Total ram usage:        7 bytes
 13350 ;; Hardware stack levels used:    1
 13351 ;; Hardware stack levels required when called:    7
 13352 ;; This function calls:
 13353 ;;		_I2C_BufferRead
 13354 ;; This function is called by:
 13355 ;;		_HMC5883L_ReadBits
 13356 ;;		_MPU6050_I2C_BufferRead
 13357 ;;		_HMC5883L_TestConnection
 13358 ;;		_HMC5883L_GetHeading
 13359 ;;		_HMC5883L_WriteBits
 13360 ;;		_HMC5883L_WriteBit
 13361 ;;		_HMC5883L_ReadBit
 13362 ;; This function uses a non-reentrant model
 13363 ;;
 13364                           
 13365                           
 13366                           ;psect for function _HMC5883L_I2C_BufferRead
 13367  13E8                     _HMC5883L_I2C_BufferRead:	
 13368                           
 13369                           ;incstack = 0
 13370                           ; Regs used in _HMC5883L_I2C_BufferRead: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+csta
      +                          ck]
 13371                           ;HMC5883L_I2C_BufferRead@slaveAddr stored from wreg
 13372  13E8  0020               	movlb	0	; select bank0
 13373  13E9  00C2               	movwf	HMC5883L_I2C_BufferRead@slaveAddr
 13374                           
 13375                           ;hmc5883l.c: 473: return(I2C_BufferRead(slaveAddr,pBuffer,ReadAddr,NumByteToRead));
 13376  13EA  083D               	movf	HMC5883L_I2C_BufferRead@pBuffer+1,w
 13377  13EB  00B2               	movwf	I2C_BufferRead@pBuffer+1
 13378  13EC  083C               	movf	HMC5883L_I2C_BufferRead@pBuffer,w
 13379  13ED  00B1               	movwf	I2C_BufferRead@pBuffer
 13380  13EE  083E               	movf	HMC5883L_I2C_BufferRead@ReadAddr,w
 13381  13EF  00C1               	movwf	??_HMC5883L_I2C_BufferRead
 13382  13F0  0841               	movf	??_HMC5883L_I2C_BufferRead,w
 13383  13F1  00B3               	movwf	I2C_BufferRead@ReadAddr
 13384  13F2  0840               	movf	HMC5883L_I2C_BufferRead@NumByteToRead+1,w
 13385  13F3  00B5               	movwf	I2C_BufferRead@NumByteToRead+1
 13386  13F4  083F               	movf	HMC5883L_I2C_BufferRead@NumByteToRead,w
 13387  13F5  00B4               	movwf	I2C_BufferRead@NumByteToRead
 13388  13F6  0842               	movf	HMC5883L_I2C_BufferRead@slaveAddr,w
 13389  13F7  3189  21D9         	fcall	_I2C_BufferRead
 13390  13F9  0008               	return
 13391  13FA                     __end_of_HMC5883L_I2C_BufferRead:	
 13392                           
 13393                           	psect	text70
 13394  12CD                     __ptext70:	
 13395 ;; *************** function _Diag_getTempSensorHealth *****************
 13396 ;; Defined at:
 13397 ;;		line 25 in file "diagnostics.c"
 13398 ;; Parameters:    Size  Location     Type
 13399 ;;		None
 13400 ;; Auto vars:     Size  Location     Type
 13401 ;;		None
 13402 ;; Return value:  Size  Location     Type
 13403 ;;                  1    wreg      unsigned char 
 13404 ;; Registers used:
 13405 ;;		wreg
 13406 ;; Tracked objects:
 13407 ;;		On entry : 0/0
 13408 ;;		On exit  : 0/0
 13409 ;;		Unchanged: 0/0
 13410 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13411 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13412 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13413 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13414 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13415 ;;Total ram usage:        0 bytes
 13416 ;; Hardware stack levels used:    1
 13417 ;; Hardware stack levels required when called:    4
 13418 ;; This function calls:
 13419 ;;		Nothing
 13420 ;; This function is called by:
 13421 ;;		_BMP_readTemperature
 13422 ;; This function uses a non-reentrant model
 13423 ;;
 13424                           
 13425                           
 13426                           ;psect for function _Diag_getTempSensorHealth
 13427  12CD                     _Diag_getTempSensorHealth:	
 13428                           
 13429                           ;diagnostics.c: 27: return (sensorHealth.tempSensorHealth);
 13430                           
 13431                           ;incstack = 0
 13432                           ; Regs used in _Diag_getTempSensorHealth: [wreg]
 13433  12CD  0022               	movlb	2	; select bank2
 13434  12CE  086A               	movf	_sensorHealth^(0+256),w
 13435  12CF  0008               	return
 13436  12D0                     __end_of_Diag_getTempSensorHealth:	
 13437                           
 13438                           	psect	text71
 13439  0AFA                     __ptext71:	
 13440 ;; *************** function _BMP_init *****************
 13441 ;; Defined at:
 13442 ;;		line 39 in file "bmp280.c"
 13443 ;; Parameters:    Size  Location     Type
 13444 ;;		None
 13445 ;; Auto vars:     Size  Location     Type
 13446 ;;  t               1   31[BANK0 ] unsigned char 
 13447 ;; Return value:  Size  Location     Type
 13448 ;;                  1    wreg      void 
 13449 ;; Registers used:
 13450 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13451 ;; Tracked objects:
 13452 ;;		On entry : 0/0
 13453 ;;		On exit  : 0/0
 13454 ;;		Unchanged: 0/0
 13455 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13456 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13457 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13458 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13459 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13460 ;;Total ram usage:        4 bytes
 13461 ;; Hardware stack levels used:    1
 13462 ;; Hardware stack levels required when called:    7
 13463 ;; This function calls:
 13464 ;;		_Diag_setTempSensorHealth
 13465 ;;		_I2C_BufferRead
 13466 ;;		_I2C_ByteWrite
 13467 ;; This function is called by:
 13468 ;;		_main
 13469 ;;		_BMP_readTemperature
 13470 ;; This function uses a non-reentrant model
 13471 ;;
 13472                           
 13473                           
 13474                           ;psect for function _BMP_init
 13475  0AFA                     _BMP_init:	
 13476                           
 13477                           ;bmp280.c: 41: char t;
 13478                           ;bmp280.c: 42: t=0x40;
 13479                           
 13480                           ;incstack = 0
 13481                           ; Regs used in _BMP_init: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 13482  0AFA  3040               	movlw	64
 13483  0AFB  0020               	movlb	0	; select bank0
 13484  0AFC  00BC               	movwf	??_BMP_init
 13485  0AFD  083C               	movf	??_BMP_init,w
 13486  0AFE  00BF               	movwf	BMP_init@t
 13487                           
 13488                           ;bmp280.c: 43: if(I2C_ByteWrite(0x76, &t, 0xF4)==0)
 13489  0AFF  303F               	movlw	(low (BMP_init@t| 0))& (0+255)
 13490  0B00  00BC               	movwf	??_BMP_init
 13491  0B01  083C               	movf	??_BMP_init,w
 13492  0B02  00AF               	movwf	I2C_ByteWrite@pBuffer
 13493  0B03  30F4               	movlw	244
 13494  0B04  00BD               	movwf	??_BMP_init+1
 13495  0B05  083D               	movf	??_BMP_init+1,w
 13496  0B06  00B0               	movwf	I2C_ByteWrite@WriteAddr
 13497  0B07  3076               	movlw	118
 13498  0B08  3197  27C4  318A   	fcall	_I2C_ByteWrite
 13499  0B0B  3A00               	xorlw	0
 13500  0B0C  1D03               	skipz
 13501  0B0D  2B12               	goto	l6011
 13502                           
 13503                           ;bmp280.c: 44: {
 13504                           ;bmp280.c: 45: Diag_setTempSensorHealth(0);
 13505  0B0E  3000               	movlw	0
 13506  0B0F  3193  2323         	fcall	_Diag_setTempSensorHealth
 13507                           
 13508                           ;bmp280.c: 46: return;
 13509  0B11  0008               	return
 13510  0B12                     l6011:	
 13511                           
 13512                           ;bmp280.c: 47: }
 13513                           ;bmp280.c: 48: t=0xE0;
 13514  0B12  30E0               	movlw	224
 13515  0B13  0020               	movlb	0	; select bank0
 13516  0B14  00BC               	movwf	??_BMP_init
 13517  0B15  083C               	movf	??_BMP_init,w
 13518  0B16  00BF               	movwf	BMP_init@t
 13519                           
 13520                           ;bmp280.c: 50: if(I2C_BufferRead(0x76, b1, 0x88, 24)==0)
 13521  0B17  30A8               	movlw	low _b1
 13522  0B18  00B1               	movwf	I2C_BufferRead@pBuffer
 13523  0B19  3001               	movlw	high _b1
 13524  0B1A  00B2               	movwf	I2C_BufferRead@pBuffer+1
 13525  0B1B  3088               	movlw	136
 13526  0B1C  00BC               	movwf	??_BMP_init
 13527  0B1D  083C               	movf	??_BMP_init,w
 13528  0B1E  00B3               	movwf	I2C_BufferRead@ReadAddr
 13529  0B1F  3018               	movlw	24
 13530  0B20  00B4               	movwf	I2C_BufferRead@NumByteToRead
 13531  0B21  3000               	movlw	0
 13532  0B22  00B5               	movwf	I2C_BufferRead@NumByteToRead+1
 13533  0B23  3076               	movlw	118
 13534  0B24  3189  21D9  318A   	fcall	_I2C_BufferRead
 13535  0B27  3A00               	xorlw	0
 13536  0B28  1D03               	skipz
 13537  0B29  2B2E               	goto	l6019
 13538                           
 13539                           ;bmp280.c: 51: {
 13540                           ;bmp280.c: 52: Diag_setTempSensorHealth(0);
 13541  0B2A  3000               	movlw	0
 13542  0B2B  3193  2323         	fcall	_Diag_setTempSensorHealth
 13543                           
 13544                           ;bmp280.c: 53: return;
 13545  0B2D  0008               	return
 13546  0B2E                     l6019:	
 13547                           
 13548                           ;bmp280.c: 54: }
 13549                           ;bmp280.c: 55: dig_T1 = ((u16)b1[0] & 0xFF) + (((u16)b1[1] & 0xFF) * 256);
 13550  0B2E  0023               	movlb	3	; select bank3
 13551  0B2F  0829               	movf	(_b1^(0+384)+1),w
 13552  0B30  0020               	movlb	0	; select bank0
 13553  0B31  00BC               	movwf	??_BMP_init
 13554  0B32  01BD               	clrf	??_BMP_init+1
 13555  0B33  083C               	movf	??_BMP_init,w
 13556  0B34  00BD               	movwf	??_BMP_init+1
 13557  0B35  01BC               	clrf	??_BMP_init
 13558  0B36  0023               	movlb	3	; select bank3
 13559  0B37  0828               	movf	_b1^(0+384),w
 13560  0B38  0020               	movlb	0	; select bank0
 13561  0B39  073C               	addwf	??_BMP_init,w
 13562  0B3A  0021               	movlb	1	; select bank1
 13563  0B3B  00D6               	movwf	_dig_T1^(0+128)
 13564  0B3C  0020               	movlb	0	; select bank0
 13565  0B3D  083D               	movf	??_BMP_init+1,w
 13566  0B3E  1803               	skipnc
 13567  0B3F  0A3D               	incf	??_BMP_init+1,w
 13568  0B40  0021               	movlb	1	; select bank1
 13569  0B41  00D7               	movwf	(_dig_T1^(0+128)+1)
 13570                           
 13571                           ;bmp280.c: 56: dig_T2 = (int)b1[2] + ((int)b1[3] * 256);
 13572  0B42  0023               	movlb	3	; select bank3
 13573  0B43  082B               	movf	(_b1^(0+384)+3),w
 13574  0B44  0020               	movlb	0	; select bank0
 13575  0B45  00BC               	movwf	??_BMP_init
 13576  0B46  01BD               	clrf	??_BMP_init+1
 13577  0B47  083C               	movf	??_BMP_init,w
 13578  0B48  00BD               	movwf	??_BMP_init+1
 13579  0B49  01BC               	clrf	??_BMP_init
 13580  0B4A  0023               	movlb	3	; select bank3
 13581  0B4B  082A               	movf	(_b1^(0+384)+2),w
 13582  0B4C  0020               	movlb	0	; select bank0
 13583  0B4D  073C               	addwf	??_BMP_init,w
 13584  0B4E  0022               	movlb	2	; select bank2
 13585  0B4F  00D6               	movwf	_dig_T2^(0+256)
 13586  0B50  0020               	movlb	0	; select bank0
 13587  0B51  083D               	movf	??_BMP_init+1,w
 13588  0B52  1803               	skipnc
 13589  0B53  0A3D               	incf	??_BMP_init+1,w
 13590  0B54  0022               	movlb	2	; select bank2
 13591  0B55  00D7               	movwf	(_dig_T2^(0+256)+1)
 13592                           
 13593                           ;bmp280.c: 57: dig_T3 = (int)b1[4] + ((int)b1[5] * 256);
 13594  0B56  0023               	movlb	3	; select bank3
 13595  0B57  082D               	movf	(_b1^(0+384)+5),w
 13596  0B58  0020               	movlb	0	; select bank0
 13597  0B59  00BC               	movwf	??_BMP_init
 13598  0B5A  01BD               	clrf	??_BMP_init+1
 13599  0B5B  083C               	movf	??_BMP_init,w
 13600  0B5C  00BD               	movwf	??_BMP_init+1
 13601  0B5D  01BC               	clrf	??_BMP_init
 13602  0B5E  0023               	movlb	3	; select bank3
 13603  0B5F  082C               	movf	(_b1^(0+384)+4),w
 13604  0B60  0020               	movlb	0	; select bank0
 13605  0B61  073C               	addwf	??_BMP_init,w
 13606  0B62  0022               	movlb	2	; select bank2
 13607  0B63  00D4               	movwf	_dig_T3^(0+256)
 13608  0B64  0020               	movlb	0	; select bank0
 13609  0B65  083D               	movf	??_BMP_init+1,w
 13610  0B66  1803               	skipnc
 13611  0B67  0A3D               	incf	??_BMP_init+1,w
 13612  0B68  0022               	movlb	2	; select bank2
 13613  0B69  00D5               	movwf	(_dig_T3^(0+256)+1)
 13614                           
 13615                           ;bmp280.c: 69: Diag_setTempSensorHealth(1);
 13616  0B6A  3001               	movlw	1
 13617  0B6B  3193  2323         	fcall	_Diag_setTempSensorHealth
 13618  0B6D  0008               	return
 13619  0B6E                     __end_of_BMP_init:	
 13620                           
 13621                           	psect	text72
 13622  17C4                     __ptext72:	
 13623 ;; *************** function _I2C_ByteWrite *****************
 13624 ;; Defined at:
 13625 ;;		line 3 in file "i2c_wrapper.c"
 13626 ;; Parameters:    Size  Location     Type
 13627 ;;  slaveAddr       1    wreg     unsigned char 
 13628 ;;  pBuffer         1   15[BANK0 ] PTR unsigned char 
 13629 ;;		 -> BMP_readTemperature@tmp(1), BMP_init@t(1), HMC5883L_WriteBit@tmp(1), HMC5883L_WriteBits@tmp(1), 
 13630 ;;		 -> HMC5883L_SetMode@tmp(1), HMC5883L_SetGain@tmp(1), HMC5883L_Initialize@tmp(1), MPU6050_WriteBit@tmp(1), 
 13631 ;;		 -> MPU6050_WriteBits@tmp(1), 
 13632 ;;  WriteAddr       1   16[BANK0 ] unsigned char 
 13633 ;; Auto vars:     Size  Location     Type
 13634 ;;  slaveAddr       1   21[BANK0 ] unsigned char 
 13635 ;;  data            2   22[BANK0 ] unsigned char [2]
 13636 ;;  status          1   24[BANK0 ] enum E3025
 13637 ;; Return value:  Size  Location     Type
 13638 ;;                  1    wreg      unsigned char 
 13639 ;; Registers used:
 13640 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13641 ;; Tracked objects:
 13642 ;;		On entry : 0/0
 13643 ;;		On exit  : 0/0
 13644 ;;		Unchanged: 0/0
 13645 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13646 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13647 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13648 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13649 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13650 ;;Total ram usage:       10 bytes
 13651 ;; Hardware stack levels used:    1
 13652 ;; Hardware stack levels required when called:    6
 13653 ;; This function calls:
 13654 ;;		_I2C2_MasterWrite
 13655 ;;		_Timeout_hasExpired
 13656 ;;		_Timeout_setTimeout
 13657 ;; This function is called by:
 13658 ;;		_BMP_init
 13659 ;;		_BMP_readTemperature
 13660 ;;		_HMC5883L_I2C_ByteWrite
 13661 ;; This function uses a non-reentrant model
 13662 ;;
 13663                           
 13664                           
 13665                           ;psect for function _I2C_ByteWrite
 13666  17C4                     _I2C_ByteWrite:	
 13667                           
 13668                           ;incstack = 0
 13669                           ; Regs used in _I2C_ByteWrite: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 13670                           ;I2C_ByteWrite@slaveAddr stored from wreg
 13671  17C4  0020               	movlb	0	; select bank0
 13672  17C5  00B5               	movwf	I2C_ByteWrite@slaveAddr
 13673                           
 13674                           ;i2c_wrapper.c: 5: u8 data[2];
 13675                           ;i2c_wrapper.c: 6: I2C2_MESSAGE_STATUS status=I2C2_MESSAGE_COMPLETE;
 13676  17C6  01B8               	clrf	I2C_ByteWrite@status
 13677                           
 13678                           ;i2c_wrapper.c: 8: data[0]= WriteAddr;
 13679  17C7  0830               	movf	I2C_ByteWrite@WriteAddr,w
 13680  17C8  00B1               	movwf	??_I2C_ByteWrite
 13681  17C9  0831               	movf	??_I2C_ByteWrite,w
 13682  17CA  00B6               	movwf	I2C_ByteWrite@data
 13683                           
 13684                           ;i2c_wrapper.c: 9: data[1]= *pBuffer;
 13685  17CB  082F               	movf	I2C_ByteWrite@pBuffer,w
 13686  17CC  0086               	movwf	6
 13687  17CD  0187               	clrf	7
 13688  17CE  0801               	movf	1,w
 13689  17CF  00B1               	movwf	??_I2C_ByteWrite
 13690  17D0  0831               	movf	??_I2C_ByteWrite,w
 13691  17D1  00B7               	movwf	I2C_ByteWrite@data+1
 13692                           
 13693                           ;i2c_wrapper.c: 12: I2C2_MasterWrite(data,2,slaveAddr, &status);
 13694  17D2  3002               	movlw	2
 13695  17D3  00B1               	movwf	??_I2C_ByteWrite
 13696  17D4  0831               	movf	??_I2C_ByteWrite,w
 13697  17D5  00A8               	movwf	I2C2_MasterWrite@length
 13698  17D6  0835               	movf	I2C_ByteWrite@slaveAddr,w
 13699  17D7  00B2               	movwf	??_I2C_ByteWrite+1
 13700  17D8  01B3               	clrf	??_I2C_ByteWrite+2
 13701  17D9  0832               	movf	??_I2C_ByteWrite+1,w
 13702  17DA  00A9               	movwf	I2C2_MasterWrite@address
 13703  17DB  0833               	movf	??_I2C_ByteWrite+2,w
 13704  17DC  00AA               	movwf	I2C2_MasterWrite@address+1
 13705  17DD  3038               	movlw	(low (I2C_ByteWrite@status| 0))& (0+255)
 13706  17DE  00B4               	movwf	??_I2C_ByteWrite+3
 13707  17DF  0834               	movf	??_I2C_ByteWrite+3,w
 13708  17E0  00AB               	movwf	I2C2_MasterWrite@pflag
 13709  17E1  3036               	movlw	(low (I2C_ByteWrite@data| 0))& (0+255)
 13710  17E2  3196  26AB  3197   	fcall	_I2C2_MasterWrite
 13711                           
 13712                           ;i2c_wrapper.c: 13: Timeout_setTimeout(200);
 13713  17E5  30C8               	movlw	200
 13714  17E6  0020               	movlb	0	; select bank0
 13715  17E7  00A1               	movwf	Timeout_setTimeout@val
 13716  17E8  3000               	movlw	0
 13717  17E9  00A2               	movwf	Timeout_setTimeout@val+1
 13718  17EA  3194  24A4  3197   	fcall	_Timeout_setTimeout
 13719  17ED                     l5755:	
 13720                           ;i2c_wrapper.c: 15: while(status == I2C2_MESSAGE_PENDING && Timeout_hasExpired()==0);
 13721                           
 13722  17ED  3002               	movlw	2
 13723  17EE  0020               	movlb	0	; select bank0
 13724  17EF  0638               	xorwf	I2C_ByteWrite@status,w
 13725  17F0  1D03               	btfss	3,2
 13726  17F1  2FF8               	goto	l5759
 13727  17F2  3188  20E4  3197   	fcall	_Timeout_hasExpired
 13728  17F5  3A00               	xorlw	0
 13729  17F6  1903               	skipnz
 13730  17F7  2FED               	goto	l5755
 13731  17F8                     l5759:	
 13732                           
 13733                           ;i2c_wrapper.c: 17: if (status == I2C2_MESSAGE_COMPLETE)
 13734  17F8  0020               	movlb	0	; select bank0
 13735  17F9  0838               	movf	I2C_ByteWrite@status,w
 13736  17FA  1D03               	btfss	3,2
 13737  17FB  2FFE               	goto	l5767
 13738                           
 13739                           ;i2c_wrapper.c: 18: {
 13740                           ;i2c_wrapper.c: 19: return 1;
 13741  17FC  3001               	movlw	1
 13742                           
 13743                           ;i2c_wrapper.c: 20: }
 13744  17FD  0008               	return
 13745  17FE                     l5767:	
 13746                           
 13747                           ;i2c_wrapper.c: 21: else
 13748                           ;i2c_wrapper.c: 22: {
 13749                           ;i2c_wrapper.c: 23: return 0;
 13750  17FE  3000               	movlw	0
 13751  17FF  0008               	return
 13752  1800                     __end_of_I2C_ByteWrite:	
 13753                           
 13754                           	psect	text73
 13755  09D9                     __ptext73:	
 13756 ;; *************** function _I2C_BufferRead *****************
 13757 ;; Defined at:
 13758 ;;		line 30 in file "i2c_wrapper.c"
 13759 ;; Parameters:    Size  Location     Type
 13760 ;;  slaveAddr       1    wreg     unsigned char 
 13761 ;;  pBuffer         2   17[BANK0 ] PTR unsigned char 
 13762 ;;		 -> data(8), b1(24), HMC5883L_ReadBit@tmp(1), HMC5883L_ReadBits@tmp(1), 
 13763 ;;		 -> HMC5883L_WriteBit@tmp(1), HMC5883L_WriteBits@tmp(1), heading(8), HMC5883L_TestConnection@tmp(3), 
 13764 ;;		 -> MPU6050_ReadBit@tmp(1), MPU6050_ReadBits@tmp(1), MPU6050_WriteBit@tmp(1), MPU6050_WriteBits@tmp(1), 
 13765 ;;		 -> MPU6050_GetRawAccel@tempBuffer(6), MPU6050_GetRawAccelGyro@tmpBuffer(14), 
 13766 ;;  ReadAddr        1   19[BANK0 ] unsigned char 
 13767 ;;  NumByteToRea    2   20[BANK0 ] unsigned short 
 13768 ;; Auto vars:     Size  Location     Type
 13769 ;;  slaveAddr       1   26[BANK0 ] unsigned char 
 13770 ;;  status          1   27[BANK0 ] enum E3025
 13771 ;; Return value:  Size  Location     Type
 13772 ;;                  1    wreg      unsigned char 
 13773 ;; Registers used:
 13774 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13775 ;; Tracked objects:
 13776 ;;		On entry : 0/0
 13777 ;;		On exit  : 0/0
 13778 ;;		Unchanged: 0/0
 13779 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13780 ;;      Params:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13781 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13782 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13783 ;;      Totals:         0      11       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13784 ;;Total ram usage:       11 bytes
 13785 ;; Hardware stack levels used:    1
 13786 ;; Hardware stack levels required when called:    6
 13787 ;; This function calls:
 13788 ;;		_I2C2_MasterRead
 13789 ;;		_I2C2_MasterWrite
 13790 ;;		_Timeout_hasExpired
 13791 ;;		_Timeout_setTimeout
 13792 ;; This function is called by:
 13793 ;;		_HMC5883L_I2C_BufferRead
 13794 ;;		_BMP_init
 13795 ;;		_BMP_readTemperature
 13796 ;; This function uses a non-reentrant model
 13797 ;;
 13798                           
 13799                           
 13800                           ;psect for function _I2C_BufferRead
 13801  09D9                     _I2C_BufferRead:	
 13802                           
 13803                           ;incstack = 0
 13804                           ; Regs used in _I2C_BufferRead: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 13805                           ;I2C_BufferRead@slaveAddr stored from wreg
 13806  09D9  0020               	movlb	0	; select bank0
 13807  09DA  00BA               	movwf	I2C_BufferRead@slaveAddr
 13808                           
 13809                           ;i2c_wrapper.c: 32: I2C2_MESSAGE_STATUS status=I2C2_MESSAGE_COMPLETE;
 13810  09DB  01BB               	clrf	I2C_BufferRead@status
 13811                           
 13812                           ;i2c_wrapper.c: 34: I2C2_MasterWrite(&ReadAddr, 1,slaveAddr, &status);
 13813  09DC  01A8               	clrf	I2C2_MasterWrite@length
 13814  09DD  0AA8               	incf	I2C2_MasterWrite@length,f
 13815  09DE  083A               	movf	I2C_BufferRead@slaveAddr,w
 13816  09DF  00B6               	movwf	??_I2C_BufferRead
 13817  09E0  01B7               	clrf	??_I2C_BufferRead+1
 13818  09E1  0836               	movf	??_I2C_BufferRead,w
 13819  09E2  00A9               	movwf	I2C2_MasterWrite@address
 13820  09E3  0837               	movf	??_I2C_BufferRead+1,w
 13821  09E4  00AA               	movwf	I2C2_MasterWrite@address+1
 13822  09E5  303B               	movlw	(low (I2C_BufferRead@status| 0))& (0+255)
 13823  09E6  00B8               	movwf	??_I2C_BufferRead+2
 13824  09E7  0838               	movf	??_I2C_BufferRead+2,w
 13825  09E8  00AB               	movwf	I2C2_MasterWrite@pflag
 13826  09E9  3033               	movlw	(low (I2C_BufferRead@ReadAddr| 0))& (0+255)
 13827  09EA  3196  26AB  3189   	fcall	_I2C2_MasterWrite
 13828                           
 13829                           ;i2c_wrapper.c: 35: Timeout_setTimeout(200);
 13830  09ED  30C8               	movlw	200
 13831  09EE  0020               	movlb	0	; select bank0
 13832  09EF  00A1               	movwf	Timeout_setTimeout@val
 13833  09F0  3000               	movlw	0
 13834  09F1  00A2               	movwf	Timeout_setTimeout@val+1
 13835  09F2  3194  24A4  3189   	fcall	_Timeout_setTimeout
 13836  09F5                     l5591:	
 13837                           ;i2c_wrapper.c: 38: while(status == I2C2_MESSAGE_PENDING && Timeout_hasExpired()==0);
 13838                           
 13839  09F5  3002               	movlw	2
 13840  09F6  0020               	movlb	0	; select bank0
 13841  09F7  063B               	xorwf	I2C_BufferRead@status,w
 13842  09F8  1D03               	btfss	3,2
 13843  09F9  2A00               	goto	l5595
 13844  09FA  3188  20E4  3189   	fcall	_Timeout_hasExpired
 13845  09FD  3A00               	xorlw	0
 13846  09FE  1903               	skipnz
 13847  09FF  29F5               	goto	l5591
 13848  0A00                     l5595:	
 13849                           
 13850                           ;i2c_wrapper.c: 40: if (status != I2C2_MESSAGE_COMPLETE)
 13851  0A00  0020               	movlb	0	; select bank0
 13852  0A01  083B               	movf	I2C_BufferRead@status,w
 13853  0A02  1903               	btfsc	3,2
 13854  0A03  2A06               	goto	l5601
 13855                           
 13856                           ;i2c_wrapper.c: 41: {
 13857                           ;i2c_wrapper.c: 42: return 0;
 13858  0A04  3000               	movlw	0
 13859  0A05  0008               	return
 13860  0A06                     l5601:	
 13861                           
 13862                           ;i2c_wrapper.c: 43: }
 13863                           ;i2c_wrapper.c: 46: I2C2_MasterRead( pBuffer,NumByteToRead,slaveAddr,&status);
 13864  0A06  0832               	movf	I2C_BufferRead@pBuffer+1,w
 13865  0A07  00AA               	movwf	I2C2_MasterRead@pdata+1
 13866  0A08  0831               	movf	I2C_BufferRead@pBuffer,w
 13867  0A09  00A9               	movwf	I2C2_MasterRead@pdata
 13868  0A0A  0834               	movf	I2C_BufferRead@NumByteToRead,w
 13869  0A0B  00B6               	movwf	??_I2C_BufferRead
 13870  0A0C  0836               	movf	??_I2C_BufferRead,w
 13871  0A0D  00AB               	movwf	I2C2_MasterRead@length
 13872  0A0E  083A               	movf	I2C_BufferRead@slaveAddr,w
 13873  0A0F  00B7               	movwf	??_I2C_BufferRead+1
 13874  0A10  01B8               	clrf	??_I2C_BufferRead+2
 13875  0A11  0837               	movf	??_I2C_BufferRead+1,w
 13876  0A12  00AC               	movwf	I2C2_MasterRead@address
 13877  0A13  0838               	movf	??_I2C_BufferRead+2,w
 13878  0A14  00AD               	movwf	I2C2_MasterRead@address+1
 13879  0A15  303B               	movlw	(low (I2C_BufferRead@status| 0))& (0+255)
 13880  0A16  00B9               	movwf	??_I2C_BufferRead+3
 13881  0A17  0839               	movf	??_I2C_BufferRead+3,w
 13882  0A18  00AE               	movwf	I2C2_MasterRead@pflag
 13883  0A19  3196  2683  3189   	fcall	_I2C2_MasterRead
 13884                           
 13885                           ;i2c_wrapper.c: 47: Timeout_setTimeout(200);
 13886  0A1C  30C8               	movlw	200
 13887  0A1D  0020               	movlb	0	; select bank0
 13888  0A1E  00A1               	movwf	Timeout_setTimeout@val
 13889  0A1F  3000               	movlw	0
 13890  0A20  00A2               	movwf	Timeout_setTimeout@val+1
 13891  0A21  3194  24A4  3189   	fcall	_Timeout_setTimeout
 13892  0A24                     l5605:	
 13893                           ;i2c_wrapper.c: 49: while(status == I2C2_MESSAGE_PENDING && Timeout_hasExpired()==0);
 13894                           
 13895  0A24  3002               	movlw	2
 13896  0A25  0020               	movlb	0	; select bank0
 13897  0A26  063B               	xorwf	I2C_BufferRead@status,w
 13898  0A27  1D03               	btfss	3,2
 13899  0A28  2A2F               	goto	l5609
 13900  0A29  3188  20E4  3189   	fcall	_Timeout_hasExpired
 13901  0A2C  3A00               	xorlw	0
 13902  0A2D  1903               	skipnz
 13903  0A2E  2A24               	goto	l5605
 13904  0A2F                     l5609:	
 13905                           
 13906                           ;i2c_wrapper.c: 51: if (status == I2C2_MESSAGE_COMPLETE)
 13907  0A2F  0020               	movlb	0	; select bank0
 13908  0A30  083B               	movf	I2C_BufferRead@status,w
 13909  0A31  1D03               	btfss	3,2
 13910  0A32  2A35               	goto	l5617
 13911                           
 13912                           ;i2c_wrapper.c: 52: return 1;
 13913  0A33  3001               	movlw	1
 13914  0A34  0008               	return
 13915  0A35                     l5617:	
 13916                           
 13917                           ;i2c_wrapper.c: 53: else
 13918                           ;i2c_wrapper.c: 54: return 0;
 13919  0A35  3000               	movlw	0
 13920  0A36  0008               	return
 13921  0A37                     __end_of_I2C_BufferRead:	
 13922                           
 13923                           	psect	text74
 13924  14A4                     __ptext74:	
 13925 ;; *************** function _Timeout_setTimeout *****************
 13926 ;; Defined at:
 13927 ;;		line 26 in file "timeout.c"
 13928 ;; Parameters:    Size  Location     Type
 13929 ;;  val             2    1[BANK0 ] unsigned short 
 13930 ;; Auto vars:     Size  Location     Type
 13931 ;;		None
 13932 ;; Return value:  Size  Location     Type
 13933 ;;                  1    wreg      void 
 13934 ;; Registers used:
 13935 ;;		wreg
 13936 ;; Tracked objects:
 13937 ;;		On entry : 0/0
 13938 ;;		On exit  : 0/0
 13939 ;;		Unchanged: 0/0
 13940 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13941 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13942 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13943 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13944 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13945 ;;Total ram usage:        2 bytes
 13946 ;; Hardware stack levels used:    1
 13947 ;; Hardware stack levels required when called:    4
 13948 ;; This function calls:
 13949 ;;		Nothing
 13950 ;; This function is called by:
 13951 ;;		_I2C_ByteWrite
 13952 ;;		_I2C_BufferRead
 13953 ;; This function uses a non-reentrant model
 13954 ;;
 13955                           
 13956                           
 13957                           ;psect for function _Timeout_setTimeout
 13958  14A4                     _Timeout_setTimeout:	
 13959                           
 13960                           ;timeout.c: 28: timeOut=val;
 13961                           
 13962                           ;incstack = 0
 13963                           ; Regs used in _Timeout_setTimeout: [wreg]
 13964  14A4  0020               	movlb	0	; select bank0
 13965  14A5  0822               	movf	Timeout_setTimeout@val+1,w
 13966  14A6  0022               	movlb	2	; select bank2
 13967  14A7  00BD               	movwf	(_timeOut+1)^(0+256)
 13968  14A8  0020               	movlb	0	; select bank0
 13969  14A9  0821               	movf	Timeout_setTimeout@val,w
 13970  14AA  0022               	movlb	2	; select bank2
 13971  14AB  00BC               	movwf	_timeOut^(0+256)
 13972                           
 13973                           ;timeout.c: 29: curr=globalCounter;
 13974  14AC  0021               	movlb	1	; select bank1
 13975  14AD  0855               	movf	(_globalCounter+3)^(0+128),w	;volatile
 13976  14AE  0022               	movlb	2	; select bank2
 13977  14AF  00A3               	movwf	(_curr+3)^(0+256)
 13978  14B0  0021               	movlb	1	; select bank1
 13979  14B1  0854               	movf	(_globalCounter+2)^(0+128),w	;volatile
 13980  14B2  0022               	movlb	2	; select bank2
 13981  14B3  00A2               	movwf	(_curr+2)^(0+256)
 13982  14B4  0021               	movlb	1	; select bank1
 13983  14B5  0853               	movf	(_globalCounter+1)^(0+128),w	;volatile
 13984  14B6  0022               	movlb	2	; select bank2
 13985  14B7  00A1               	movwf	(_curr+1)^(0+256)
 13986  14B8  0021               	movlb	1	; select bank1
 13987  14B9  0852               	movf	_globalCounter^(0+128),w	;volatile
 13988  14BA  0022               	movlb	2	; select bank2
 13989  14BB  00A0               	movwf	_curr^(0+256)
 13990  14BC  0008               	return
 13991  14BD                     __end_of_Timeout_setTimeout:	
 13992                           
 13993                           	psect	text75
 13994  08E4                     __ptext75:	
 13995 ;; *************** function _Timeout_hasExpired *****************
 13996 ;; Defined at:
 13997 ;;		line 32 in file "timeout.c"
 13998 ;; Parameters:    Size  Location     Type
 13999 ;;		None
 14000 ;; Auto vars:     Size  Location     Type
 14001 ;;		None
 14002 ;; Return value:  Size  Location     Type
 14003 ;;                  1    wreg      unsigned char 
 14004 ;; Registers used:
 14005 ;;		wreg, status,2, status,0
 14006 ;; Tracked objects:
 14007 ;;		On entry : 0/0
 14008 ;;		On exit  : 0/0
 14009 ;;		Unchanged: 0/0
 14010 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14011 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14012 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14013 ;;      Temps:          0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14014 ;;      Totals:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14015 ;;Total ram usage:       12 bytes
 14016 ;; Hardware stack levels used:    1
 14017 ;; Hardware stack levels required when called:    4
 14018 ;; This function calls:
 14019 ;;		Nothing
 14020 ;; This function is called by:
 14021 ;;		_I2C_ByteWrite
 14022 ;;		_I2C_BufferRead
 14023 ;; This function uses a non-reentrant model
 14024 ;;
 14025                           
 14026                           
 14027                           ;psect for function _Timeout_hasExpired
 14028  08E4                     _Timeout_hasExpired:	
 14029                           
 14030                           ;timeout.c: 34: if(globalCounter-curr>timeOut)
 14031                           
 14032                           ;incstack = 0
 14033                           ; Regs used in _Timeout_hasExpired: [wreg+status,2+status,0]
 14034  08E4  0021               	movlb	1	; select bank1
 14035  08E5  0852               	movf	_globalCounter^(0+128),w	;volatile
 14036  08E6  0020               	movlb	0	; select bank0
 14037  08E7  00A1               	movwf	??_Timeout_hasExpired
 14038  08E8  0021               	movlb	1	; select bank1
 14039  08E9  0853               	movf	(_globalCounter+1)^(0+128),w	;volatile
 14040  08EA  0020               	movlb	0	; select bank0
 14041  08EB  00A2               	movwf	??_Timeout_hasExpired+1
 14042  08EC  0021               	movlb	1	; select bank1
 14043  08ED  0854               	movf	(_globalCounter+2)^(0+128),w	;volatile
 14044  08EE  0020               	movlb	0	; select bank0
 14045  08EF  00A3               	movwf	??_Timeout_hasExpired+2
 14046  08F0  0021               	movlb	1	; select bank1
 14047  08F1  0855               	movf	(_globalCounter+3)^(0+128),w	;volatile
 14048  08F2  0020               	movlb	0	; select bank0
 14049  08F3  00A4               	movwf	??_Timeout_hasExpired+3
 14050  08F4  0022               	movlb	2	; select bank2
 14051  08F5  0920               	comf	_curr^(0+256),w
 14052  08F6  0020               	movlb	0	; select bank0
 14053  08F7  00A5               	movwf	??_Timeout_hasExpired+4
 14054  08F8  0022               	movlb	2	; select bank2
 14055  08F9  0921               	comf	(_curr+1)^(0+256),w
 14056  08FA  0020               	movlb	0	; select bank0
 14057  08FB  00A6               	movwf	??_Timeout_hasExpired+5
 14058  08FC  0022               	movlb	2	; select bank2
 14059  08FD  0922               	comf	(_curr+2)^(0+256),w
 14060  08FE  0020               	movlb	0	; select bank0
 14061  08FF  00A7               	movwf	??_Timeout_hasExpired+6
 14062  0900  0022               	movlb	2	; select bank2
 14063  0901  0923               	comf	(_curr+3)^(0+256),w
 14064  0902  0020               	movlb	0	; select bank0
 14065  0903  00A8               	movwf	??_Timeout_hasExpired+7
 14066  0904  0AA5               	incf	??_Timeout_hasExpired+4,f
 14067  0905  1903               	skipnz
 14068  0906  0AA6               	incf	??_Timeout_hasExpired+5,f
 14069  0907  1903               	skipnz
 14070  0908  0AA7               	incf	??_Timeout_hasExpired+6,f
 14071  0909  1903               	skipnz
 14072  090A  0AA8               	incf	??_Timeout_hasExpired+7,f
 14073  090B  0825               	movf	??_Timeout_hasExpired+4,w
 14074  090C  07A1               	addwf	??_Timeout_hasExpired,f
 14075  090D  0826               	movf	??_Timeout_hasExpired+5,w
 14076  090E  3DA2               	addwfc	??_Timeout_hasExpired+1,f
 14077  090F  0827               	movf	??_Timeout_hasExpired+6,w
 14078  0910  3DA3               	addwfc	??_Timeout_hasExpired+2,f
 14079  0911  0828               	movf	??_Timeout_hasExpired+7,w
 14080  0912  3DA4               	addwfc	??_Timeout_hasExpired+3,f
 14081  0913  0022               	movlb	2	; select bank2
 14082  0914  083C               	movf	_timeOut^(0+256),w
 14083  0915  0020               	movlb	0	; select bank0
 14084  0916  00A9               	movwf	??_Timeout_hasExpired+8
 14085  0917  0022               	movlb	2	; select bank2
 14086  0918  083D               	movf	(_timeOut+1)^(0+256),w
 14087  0919  0020               	movlb	0	; select bank0
 14088  091A  00AA               	movwf	??_Timeout_hasExpired+9
 14089  091B  01AB               	clrf	??_Timeout_hasExpired+10
 14090  091C  01AC               	clrf	??_Timeout_hasExpired+11
 14091  091D  0824               	movf	??_Timeout_hasExpired+3,w
 14092  091E  022C               	subwf	??_Timeout_hasExpired+11,w
 14093  091F  1D03               	skipz
 14094  0920  292B               	goto	u5015
 14095  0921  0823               	movf	??_Timeout_hasExpired+2,w
 14096  0922  022B               	subwf	??_Timeout_hasExpired+10,w
 14097  0923  1D03               	skipz
 14098  0924  292B               	goto	u5015
 14099  0925  0822               	movf	??_Timeout_hasExpired+1,w
 14100  0926  022A               	subwf	??_Timeout_hasExpired+9,w
 14101  0927  1D03               	skipz
 14102  0928  292B               	goto	u5015
 14103  0929  0821               	movf	??_Timeout_hasExpired,w
 14104  092A  0229               	subwf	??_Timeout_hasExpired+8,w
 14105  092B                     u5015:	
 14106  092B  1803               	skipnc
 14107  092C  292F               	goto	l5581
 14108                           
 14109                           ;timeout.c: 35: return 1;
 14110  092D  3001               	movlw	1
 14111  092E  0008               	return
 14112  092F                     l5581:	
 14113                           
 14114                           ;timeout.c: 36: else
 14115                           ;timeout.c: 37: return 0;
 14116  092F  3000               	movlw	0
 14117  0930  0008               	return
 14118  0931                     __end_of_Timeout_hasExpired:	
 14119                           
 14120                           	psect	text76
 14121  16AB                     __ptext76:	
 14122 ;; *************** function _I2C2_MasterWrite *****************
 14123 ;; Defined at:
 14124 ;;		line 598 in file "mcc_generated_files/i2c2.c"
 14125 ;; Parameters:    Size  Location     Type
 14126 ;;  pdata           1    wreg     PTR unsigned char 
 14127 ;;		 -> I2C_BufferRead@ReadAddr(1), I2C_ByteWrite@data(2), 
 14128 ;;  length          1    8[BANK0 ] unsigned char 
 14129 ;;  address         2    9[BANK0 ] unsigned int 
 14130 ;;  pflag           1   11[BANK0 ] PTR enum E2993
 14131 ;;		 -> I2C_BufferRead@status(1), I2C_ByteWrite@status(1), 
 14132 ;; Auto vars:     Size  Location     Type
 14133 ;;  pdata           1   14[BANK0 ] PTR unsigned char 
 14134 ;;		 -> I2C_BufferRead@ReadAddr(1), I2C_ByteWrite@data(2), 
 14135 ;; Return value:  Size  Location     Type
 14136 ;;                  1    wreg      void 
 14137 ;; Registers used:
 14138 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14139 ;; Tracked objects:
 14140 ;;		On entry : 0/0
 14141 ;;		On exit  : 0/0
 14142 ;;		Unchanged: 0/0
 14143 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14144 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14145 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14146 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14147 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14148 ;;Total ram usage:        7 bytes
 14149 ;; Hardware stack levels used:    1
 14150 ;; Hardware stack levels required when called:    5
 14151 ;; This function calls:
 14152 ;;		_I2C2_MasterTRBInsert
 14153 ;;		_I2C2_MasterWriteTRBBuild
 14154 ;; This function is called by:
 14155 ;;		_I2C_ByteWrite
 14156 ;;		_I2C_BufferRead
 14157 ;; This function uses a non-reentrant model
 14158 ;;
 14159                           
 14160                           
 14161                           ;psect for function _I2C2_MasterWrite
 14162  16AB                     _I2C2_MasterWrite:	
 14163                           
 14164                           ;incstack = 0
 14165                           ; Regs used in _I2C2_MasterWrite: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 14166                           ;I2C2_MasterWrite@pdata stored from wreg
 14167  16AB  0020               	movlb	0	; select bank0
 14168  16AC  00AE               	movwf	I2C2_MasterWrite@pdata
 14169                           
 14170                           ;i2c2.c: 604: static I2C2_TRANSACTION_REQUEST_BLOCK trBlock;
 14171                           ;i2c2.c: 607: if (i2c2_object.trStatus.s.full != 1)
 14172  16AD  0021               	movlb	1	; select bank1
 14173  16AE  184F               	btfsc	(_i2c2_object^(0+128)+2),0
 14174  16AF  2ECE               	goto	l5525
 14175                           
 14176                           ;i2c2.c: 608: {
 14177                           ;i2c2.c: 609: I2C2_MasterWriteTRBBuild(&trBlock, pdata, length, address);
 14178  16B0  0020               	movlb	0	; select bank0
 14179  16B1  082E               	movf	I2C2_MasterWrite@pdata,w
 14180  16B2  00AC               	movwf	??_I2C2_MasterWrite
 14181  16B3  082C               	movf	??_I2C2_MasterWrite,w
 14182  16B4  00A1               	movwf	I2C2_MasterWriteTRBBuild@pdata
 14183  16B5  0828               	movf	I2C2_MasterWrite@length,w
 14184  16B6  00AD               	movwf	??_I2C2_MasterWrite+1
 14185  16B7  082D               	movf	??_I2C2_MasterWrite+1,w
 14186  16B8  00A2               	movwf	I2C2_MasterWriteTRBBuild@length
 14187  16B9  082A               	movf	I2C2_MasterWrite@address+1,w
 14188  16BA  00A4               	movwf	I2C2_MasterWriteTRBBuild@address+1
 14189  16BB  0829               	movf	I2C2_MasterWrite@address,w
 14190  16BC  00A3               	movwf	I2C2_MasterWriteTRBBuild@address
 14191  16BD  305D               	movlw	(low (I2C2_MasterWrite@trBlock| (0+256)))& (0+255)
 14192  16BE  3196  263A  3196   	fcall	_I2C2_MasterWriteTRBBuild
 14193                           
 14194                           ;i2c2.c: 610: I2C2_MasterTRBInsert(1, &trBlock, pflag);
 14195  16C1  305D               	movlw	(low (I2C2_MasterWrite@trBlock| (0+256)))& (0+255)
 14196  16C2  0020               	movlb	0	; select bank0
 14197  16C3  00AC               	movwf	??_I2C2_MasterWrite
 14198  16C4  082C               	movf	??_I2C2_MasterWrite,w
 14199  16C5  00A1               	movwf	I2C2_MasterTRBInsert@ptrb_list
 14200  16C6  082B               	movf	I2C2_MasterWrite@pflag,w
 14201  16C7  00AD               	movwf	??_I2C2_MasterWrite+1
 14202  16C8  082D               	movf	??_I2C2_MasterWrite+1,w
 14203  16C9  00A2               	movwf	I2C2_MasterTRBInsert@pflag
 14204  16CA  3001               	movlw	1
 14205  16CB  3189  2184         	fcall	_I2C2_MasterTRBInsert
 14206                           
 14207                           ;i2c2.c: 611: }
 14208  16CD  0008               	return
 14209  16CE                     l5525:	
 14210                           
 14211                           ;i2c2.c: 612: else
 14212                           ;i2c2.c: 613: {
 14213                           ;i2c2.c: 614: *pflag = I2C2_MESSAGE_FAIL;
 14214  16CE  0020               	movlb	0	; select bank0
 14215  16CF  082B               	movf	I2C2_MasterWrite@pflag,w
 14216  16D0  0086               	movwf	6
 14217  16D1  0187               	clrf	7
 14218  16D2  0181               	clrf	1
 14219  16D3  0A81               	incf	1,f
 14220  16D4  0008               	return
 14221  16D5                     __end_of_I2C2_MasterWrite:	
 14222                           
 14223                           	psect	text77
 14224  163A                     __ptext77:	
 14225 ;; *************** function _I2C2_MasterWriteTRBBuild *****************
 14226 ;; Defined at:
 14227 ;;		line 708 in file "mcc_generated_files/i2c2.c"
 14228 ;; Parameters:    Size  Location     Type
 14229 ;;  ptrb            1    wreg     PTR struct .
 14230 ;;		 -> I2C2_MasterWrite@trBlock(5), 
 14231 ;;  pdata           1    1[BANK0 ] PTR unsigned char 
 14232 ;;		 -> I2C_BufferRead@ReadAddr(1), I2C_ByteWrite@data(2), 
 14233 ;;  length          1    2[BANK0 ] unsigned char 
 14234 ;;  address         2    3[BANK0 ] unsigned int 
 14235 ;; Auto vars:     Size  Location     Type
 14236 ;;  ptrb            1    7[BANK0 ] PTR struct .
 14237 ;;		 -> I2C2_MasterWrite@trBlock(5), 
 14238 ;; Return value:  Size  Location     Type
 14239 ;;                  1    wreg      void 
 14240 ;; Registers used:
 14241 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 14242 ;; Tracked objects:
 14243 ;;		On entry : 0/0
 14244 ;;		On exit  : 0/0
 14245 ;;		Unchanged: 0/0
 14246 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14247 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14248 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14249 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14250 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14251 ;;Total ram usage:        7 bytes
 14252 ;; Hardware stack levels used:    1
 14253 ;; Hardware stack levels required when called:    4
 14254 ;; This function calls:
 14255 ;;		Nothing
 14256 ;; This function is called by:
 14257 ;;		_I2C2_MasterWrite
 14258 ;; This function uses a non-reentrant model
 14259 ;;
 14260                           
 14261                           
 14262                           ;psect for function _I2C2_MasterWriteTRBBuild
 14263  163A                     _I2C2_MasterWriteTRBBuild:	
 14264                           
 14265                           ;incstack = 0
 14266                           ; Regs used in _I2C2_MasterWriteTRBBuild: [wreg+fsr1l+fsr1h+status,2+status,0]
 14267                           ;I2C2_MasterWriteTRBBuild@ptrb stored from wreg
 14268  163A  0020               	movlb	0	; select bank0
 14269  163B  00A7               	movwf	I2C2_MasterWriteTRBBuild@ptrb
 14270                           
 14271                           ;i2c2.c: 714: ptrb->address = address << 1;
 14272  163C  0824               	movf	I2C2_MasterWriteTRBBuild@address+1,w
 14273  163D  00A6               	movwf	??_I2C2_MasterWriteTRBBuild+1
 14274  163E  0823               	movf	I2C2_MasterWriteTRBBuild@address,w
 14275  163F  00A5               	movwf	??_I2C2_MasterWriteTRBBuild
 14276  1640  35A5               	lslf	??_I2C2_MasterWriteTRBBuild,f
 14277  1641  0DA6               	rlf	??_I2C2_MasterWriteTRBBuild+1,f
 14278  1642  0827               	movf	I2C2_MasterWriteTRBBuild@ptrb,w
 14279  1643  0086               	movwf	6
 14280  1644  3001               	movlw	1	; select bank2/3
 14281  1645  0087               	movwf	7
 14282  1646  0825               	movf	??_I2C2_MasterWriteTRBBuild,w
 14283  1647  3FC0               	movwi [0]fsr1
 14284  1648  0826               	movf	??_I2C2_MasterWriteTRBBuild+1,w
 14285  1649  3FC1               	movwi [1]fsr1
 14286                           
 14287                           ;i2c2.c: 715: ptrb->length = length;
 14288  164A  0822               	movf	I2C2_MasterWriteTRBBuild@length,w
 14289  164B  00A5               	movwf	??_I2C2_MasterWriteTRBBuild
 14290  164C  0827               	movf	I2C2_MasterWriteTRBBuild@ptrb,w
 14291  164D  3E02               	addlw	2
 14292  164E  0086               	movwf	6
 14293  164F  3001               	movlw	1	; select bank2/3
 14294  1650  0087               	movwf	7
 14295  1651  0825               	movf	??_I2C2_MasterWriteTRBBuild,w
 14296  1652  0081               	movwf	1
 14297                           
 14298                           ;i2c2.c: 716: ptrb->pbuffer = pdata;
 14299  1653  0827               	movf	I2C2_MasterWriteTRBBuild@ptrb,w
 14300  1654  3E03               	addlw	3
 14301  1655  0086               	movwf	6
 14302  1656  3001               	movlw	1	; select bank2/3
 14303  1657  0087               	movwf	7
 14304  1658  0821               	movf	I2C2_MasterWriteTRBBuild@pdata,w
 14305  1659  3FC0               	movwi [0]fsr1
 14306  165A  3000               	movlw	0
 14307  165B  3FC1               	movwi [1]fsr1
 14308  165C  0008               	return
 14309  165D                     __end_of_I2C2_MasterWriteTRBBuild:	
 14310                           
 14311                           	psect	text78
 14312  1683                     __ptext78:	
 14313 ;; *************** function _I2C2_MasterRead *****************
 14314 ;; Defined at:
 14315 ;;		line 619 in file "mcc_generated_files/i2c2.c"
 14316 ;; Parameters:    Size  Location     Type
 14317 ;;  pdata           2    9[BANK0 ] PTR unsigned char 
 14318 ;;		 -> data(8), b1(24), HMC5883L_ReadBit@tmp(1), HMC5883L_ReadBits@tmp(1), 
 14319 ;;		 -> HMC5883L_WriteBit@tmp(1), HMC5883L_WriteBits@tmp(1), heading(8), HMC5883L_TestConnection@tmp(3), 
 14320 ;;		 -> MPU6050_ReadBit@tmp(1), MPU6050_ReadBits@tmp(1), MPU6050_WriteBit@tmp(1), MPU6050_WriteBits@tmp(1), 
 14321 ;;		 -> MPU6050_GetRawAccel@tempBuffer(6), MPU6050_GetRawAccelGyro@tmpBuffer(14), 
 14322 ;;  length          1   11[BANK0 ] unsigned char 
 14323 ;;  address         2   12[BANK0 ] unsigned int 
 14324 ;;  pflag           1   14[BANK0 ] PTR enum E2993
 14325 ;;		 -> I2C_BufferRead@status(1), 
 14326 ;; Auto vars:     Size  Location     Type
 14327 ;;		None
 14328 ;; Return value:  Size  Location     Type
 14329 ;;                  1    wreg      void 
 14330 ;; Registers used:
 14331 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14332 ;; Tracked objects:
 14333 ;;		On entry : 0/0
 14334 ;;		On exit  : 0/0
 14335 ;;		Unchanged: 0/0
 14336 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14337 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14338 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14339 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14340 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14341 ;;Total ram usage:        8 bytes
 14342 ;; Hardware stack levels used:    1
 14343 ;; Hardware stack levels required when called:    5
 14344 ;; This function calls:
 14345 ;;		_I2C2_MasterReadTRBBuild
 14346 ;;		_I2C2_MasterTRBInsert
 14347 ;; This function is called by:
 14348 ;;		_I2C_BufferRead
 14349 ;; This function uses a non-reentrant model
 14350 ;;
 14351                           
 14352                           
 14353                           ;psect for function _I2C2_MasterRead
 14354  1683                     _I2C2_MasterRead:	
 14355                           
 14356                           ;i2c2.c: 625: static I2C2_TRANSACTION_REQUEST_BLOCK trBlock;
 14357                           ;i2c2.c: 629: if (i2c2_object.trStatus.s.full != 1)
 14358                           
 14359                           ;incstack = 0
 14360                           ; Regs used in _I2C2_MasterRead: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 14361  1683  0021               	movlb	1	; select bank1
 14362  1684  184F               	btfsc	(_i2c2_object^(0+128)+2),0
 14363  1685  2EA4               	goto	l5531
 14364                           
 14365                           ;i2c2.c: 630: {
 14366                           ;i2c2.c: 631: I2C2_MasterReadTRBBuild(&trBlock, pdata, length, address);
 14367  1686  0020               	movlb	0	; select bank0
 14368  1687  082A               	movf	I2C2_MasterRead@pdata+1,w
 14369  1688  00A2               	movwf	I2C2_MasterReadTRBBuild@pdata+1
 14370  1689  0829               	movf	I2C2_MasterRead@pdata,w
 14371  168A  00A1               	movwf	I2C2_MasterReadTRBBuild@pdata
 14372  168B  082B               	movf	I2C2_MasterRead@length,w
 14373  168C  00AF               	movwf	??_I2C2_MasterRead
 14374  168D  082F               	movf	??_I2C2_MasterRead,w
 14375  168E  00A3               	movwf	I2C2_MasterReadTRBBuild@length
 14376  168F  082D               	movf	I2C2_MasterRead@address+1,w
 14377  1690  00A5               	movwf	I2C2_MasterReadTRBBuild@address+1
 14378  1691  082C               	movf	I2C2_MasterRead@address,w
 14379  1692  00A4               	movwf	I2C2_MasterReadTRBBuild@address
 14380  1693  3058               	movlw	(low (I2C2_MasterRead@trBlock| (0+256)))& (0+255)
 14381  1694  3197  2700  3196   	fcall	_I2C2_MasterReadTRBBuild
 14382                           
 14383                           ;i2c2.c: 632: I2C2_MasterTRBInsert(1, &trBlock, pflag);
 14384  1697  3058               	movlw	(low (I2C2_MasterRead@trBlock| (0+256)))& (0+255)
 14385  1698  0020               	movlb	0	; select bank0
 14386  1699  00AF               	movwf	??_I2C2_MasterRead
 14387  169A  082F               	movf	??_I2C2_MasterRead,w
 14388  169B  00A1               	movwf	I2C2_MasterTRBInsert@ptrb_list
 14389  169C  082E               	movf	I2C2_MasterRead@pflag,w
 14390  169D  00B0               	movwf	??_I2C2_MasterRead+1
 14391  169E  0830               	movf	??_I2C2_MasterRead+1,w
 14392  169F  00A2               	movwf	I2C2_MasterTRBInsert@pflag
 14393  16A0  3001               	movlw	1
 14394  16A1  3189  2184         	fcall	_I2C2_MasterTRBInsert
 14395                           
 14396                           ;i2c2.c: 633: }
 14397  16A3  0008               	return
 14398  16A4                     l5531:	
 14399                           
 14400                           ;i2c2.c: 634: else
 14401                           ;i2c2.c: 635: {
 14402                           ;i2c2.c: 636: *pflag = I2C2_MESSAGE_FAIL;
 14403  16A4  0020               	movlb	0	; select bank0
 14404  16A5  082E               	movf	I2C2_MasterRead@pflag,w
 14405  16A6  0086               	movwf	6
 14406  16A7  0187               	clrf	7
 14407  16A8  0181               	clrf	1
 14408  16A9  0A81               	incf	1,f
 14409  16AA  0008               	return
 14410  16AB                     __end_of_I2C2_MasterRead:	
 14411                           
 14412                           	psect	text79
 14413  0984                     __ptext79:	
 14414 ;; *************** function _I2C2_MasterTRBInsert *****************
 14415 ;; Defined at:
 14416 ;;		line 641 in file "mcc_generated_files/i2c2.c"
 14417 ;; Parameters:    Size  Location     Type
 14418 ;;  count           1    wreg     unsigned char 
 14419 ;;  ptrb_list       1    1[BANK0 ] PTR struct .
 14420 ;;		 -> I2C2_MasterRead@trBlock(5), I2C2_MasterWrite@trBlock(5), 
 14421 ;;  pflag           1    2[BANK0 ] PTR enum E2993
 14422 ;;		 -> I2C_BufferRead@status(1), I2C_ByteWrite@status(1), 
 14423 ;; Auto vars:     Size  Location     Type
 14424 ;;  count           1    4[BANK0 ] unsigned char 
 14425 ;; Return value:  Size  Location     Type
 14426 ;;                  1    wreg      void 
 14427 ;; Registers used:
 14428 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 14429 ;; Tracked objects:
 14430 ;;		On entry : 0/0
 14431 ;;		On exit  : 0/0
 14432 ;;		Unchanged: 0/0
 14433 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14434 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14435 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14436 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14437 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14438 ;;Total ram usage:        4 bytes
 14439 ;; Hardware stack levels used:    1
 14440 ;; Hardware stack levels required when called:    4
 14441 ;; This function calls:
 14442 ;;		Nothing
 14443 ;; This function is called by:
 14444 ;;		_I2C2_MasterWrite
 14445 ;;		_I2C2_MasterRead
 14446 ;; This function uses a non-reentrant model
 14447 ;;
 14448                           
 14449                           
 14450                           ;psect for function _I2C2_MasterTRBInsert
 14451  0984                     _I2C2_MasterTRBInsert:	
 14452                           
 14453                           ;incstack = 0
 14454                           ; Regs used in _I2C2_MasterTRBInsert: [wreg+fsr1l+fsr1h+status,2+status,0]
 14455                           ;I2C2_MasterTRBInsert@count stored from wreg
 14456  0984  0020               	movlb	0	; select bank0
 14457  0985  00A4               	movwf	I2C2_MasterTRBInsert@count
 14458                           
 14459                           ;i2c2.c: 648: if (i2c2_object.trStatus.s.full != 1)
 14460  0986  0021               	movlb	1	; select bank1
 14461  0987  184F               	btfsc	(_i2c2_object^(0+128)+2),0
 14462  0988  29C6               	goto	l5503
 14463                           
 14464                           ;i2c2.c: 649: {
 14465                           ;i2c2.c: 650: *pflag = I2C2_MESSAGE_PENDING;
 14466  0989  3002               	movlw	2
 14467  098A  0020               	movlb	0	; select bank0
 14468  098B  00A3               	movwf	??_I2C2_MasterTRBInsert
 14469  098C  0822               	movf	I2C2_MasterTRBInsert@pflag,w
 14470  098D  0086               	movwf	6
 14471  098E  0187               	clrf	7
 14472  098F  0823               	movf	??_I2C2_MasterTRBInsert,w
 14473  0990  0081               	movwf	1
 14474                           
 14475                           ;i2c2.c: 652: i2c2_object.pTrTail->ptrb_list = ptrb_list;
 14476  0991  0821               	movf	I2C2_MasterTRBInsert@ptrb_list,w
 14477  0992  00A3               	movwf	??_I2C2_MasterTRBInsert
 14478  0993  0021               	movlb	1	; select bank1
 14479  0994  0A4D               	incf	_i2c2_object^(0+128),w
 14480  0995  0086               	movwf	6
 14481  0996  3001               	movlw	1	; select bank2/3
 14482  0997  0087               	movwf	7
 14483  0998  0020               	movlb	0	; select bank0
 14484  0999  0823               	movf	??_I2C2_MasterTRBInsert,w
 14485  099A  0081               	movwf	1
 14486                           
 14487                           ;i2c2.c: 653: i2c2_object.pTrTail->count = count;
 14488  099B  0824               	movf	I2C2_MasterTRBInsert@count,w
 14489  099C  00A3               	movwf	??_I2C2_MasterTRBInsert
 14490  099D  0021               	movlb	1	; select bank1
 14491  099E  084D               	movf	_i2c2_object^(0+128),w
 14492  099F  0086               	movwf	6
 14493  09A0  3001               	movlw	1	; select bank2/3
 14494  09A1  0087               	movwf	7
 14495  09A2  0020               	movlb	0	; select bank0
 14496  09A3  0823               	movf	??_I2C2_MasterTRBInsert,w
 14497  09A4  0081               	movwf	1
 14498                           
 14499                           ;i2c2.c: 654: i2c2_object.pTrTail->pTrFlag = pflag;
 14500  09A5  0021               	movlb	1	; select bank1
 14501  09A6  084D               	movf	_i2c2_object^(0+128),w
 14502  09A7  3E02               	addlw	2
 14503  09A8  0086               	movwf	6
 14504  09A9  3001               	movlw	1	; select bank2/3
 14505  09AA  0087               	movwf	7
 14506  09AB  0020               	movlb	0	; select bank0
 14507  09AC  0822               	movf	I2C2_MasterTRBInsert@pflag,w
 14508  09AD  3FC0               	movwi [0]fsr1
 14509  09AE  3000               	movlw	0
 14510  09AF  3FC1               	movwi [1]fsr1
 14511                           
 14512                           ;i2c2.c: 655: i2c2_object.pTrTail++;
 14513  09B0  3004               	movlw	4
 14514  09B1  00A3               	movwf	??_I2C2_MasterTRBInsert
 14515  09B2  0823               	movf	??_I2C2_MasterTRBInsert,w
 14516  09B3  0021               	movlb	1	; select bank1
 14517  09B4  07CD               	addwf	_i2c2_object^(0+128),f
 14518                           
 14519                           ;i2c2.c: 658: if (i2c2_object.pTrTail == (i2c2_tr_queue + 1))
 14520  09B5  084D               	movf	_i2c2_object^(0+128),w
 14521  09B6  3A66               	xorlw	(low ((_i2c2_tr_queue| (0+256)+4)))& (0+255)
 14522  09B7  1D03               	skipz
 14523  09B8  29BF               	goto	l5499
 14524                           
 14525                           ;i2c2.c: 659: {
 14526                           ;i2c2.c: 661: i2c2_object.pTrTail = i2c2_tr_queue;
 14527  09B9  3062               	movlw	(low (_i2c2_tr_queue| (0+256)))& (0+255)
 14528  09BA  0020               	movlb	0	; select bank0
 14529  09BB  00A3               	movwf	??_I2C2_MasterTRBInsert
 14530  09BC  0823               	movf	??_I2C2_MasterTRBInsert,w
 14531  09BD  0021               	movlb	1	; select bank1
 14532  09BE  00CD               	movwf	_i2c2_object^(0+128)
 14533  09BF                     l5499:	
 14534                           
 14535                           ;i2c2.c: 662: }
 14536                           ;i2c2.c: 666: i2c2_object.trStatus.s.empty = 0;
 14537  09BF  10CF               	bcf	(_i2c2_object^(0+128)+2),1
 14538                           
 14539                           ;i2c2.c: 669: if (i2c2_object.pTrHead == i2c2_object.pTrTail)
 14540  09C0  084E               	movf	(low ((_i2c2_object| 0+1)))^(0+128),w
 14541  09C1  064D               	xorwf	_i2c2_object^(0+128),w
 14542  09C2  1D03               	skipz
 14543  09C3  29CC               	goto	l5505
 14544                           
 14545                           ;i2c2.c: 670: {
 14546                           ;i2c2.c: 672: i2c2_object.trStatus.s.full = 1;
 14547  09C4  144F               	bsf	(_i2c2_object^(0+128)+2),0
 14548                           
 14549                           ;i2c2.c: 673: }
 14550                           ;i2c2.c: 675: }
 14551  09C5  29CC               	goto	l5505
 14552  09C6                     l5503:	
 14553                           
 14554                           ;i2c2.c: 676: else
 14555                           ;i2c2.c: 677: {
 14556                           ;i2c2.c: 678: *pflag = I2C2_MESSAGE_FAIL;
 14557  09C6  0020               	movlb	0	; select bank0
 14558  09C7  0822               	movf	I2C2_MasterTRBInsert@pflag,w
 14559  09C8  0086               	movwf	6
 14560  09C9  0187               	clrf	7
 14561  09CA  0181               	clrf	1
 14562  09CB  0A81               	incf	1,f
 14563  09CC                     l5505:	
 14564                           
 14565                           ;i2c2.c: 679: }
 14566                           ;i2c2.c: 682: if (*pflag == I2C2_MESSAGE_PENDING)
 14567  09CC  0020               	movlb	0	; select bank0
 14568  09CD  0822               	movf	I2C2_MasterTRBInsert@pflag,w
 14569  09CE  0086               	movwf	6
 14570  09CF  0187               	clrf	7
 14571  09D0  3002               	movlw	2
 14572  09D1  0601               	xorwf	1,w
 14573  09D2  1D03               	btfss	3,2
 14574  09D3  0008               	return
 14575  09D4                     l358:	
 14576                           ;i2c2.c: 685: while(i2c2_state != S_MASTER_IDLE)
 14577                           
 14578                           ;i2c2.c: 683: {
 14579                           ;i2c2.c: 684: PIR4bits.SSP2IF = 1;
 14580                           
 14581                           
 14582                           ;i2c2.c: 686: {
 14583                           ;i2c2.c: 689: PIR4bits.SSP2IF = 1;
 14584  09D4  1414               	bsf	20,0	;volatile
 14585  09D5  0879               	movf	_i2c2_state,w
 14586  09D6  1903               	btfsc	3,2
 14587  09D7  0008               	return
 14588  09D8  29D4               	goto	l358
 14589  09D9                     __end_of_I2C2_MasterTRBInsert:	
 14590                           
 14591                           	psect	text80
 14592  1700                     __ptext80:	
 14593 ;; *************** function _I2C2_MasterReadTRBBuild *****************
 14594 ;; Defined at:
 14595 ;;		line 695 in file "mcc_generated_files/i2c2.c"
 14596 ;; Parameters:    Size  Location     Type
 14597 ;;  ptrb            1    wreg     PTR struct .
 14598 ;;		 -> I2C2_MasterRead@trBlock(5), 
 14599 ;;  pdata           2    1[BANK0 ] PTR unsigned char 
 14600 ;;		 -> data(8), b1(24), HMC5883L_ReadBit@tmp(1), HMC5883L_ReadBits@tmp(1), 
 14601 ;;		 -> HMC5883L_WriteBit@tmp(1), HMC5883L_WriteBits@tmp(1), heading(8), HMC5883L_TestConnection@tmp(3), 
 14602 ;;		 -> MPU6050_ReadBit@tmp(1), MPU6050_ReadBits@tmp(1), MPU6050_WriteBit@tmp(1), MPU6050_WriteBits@tmp(1), 
 14603 ;;		 -> MPU6050_GetRawAccel@tempBuffer(6), MPU6050_GetRawAccelGyro@tmpBuffer(14), 
 14604 ;;  length          1    3[BANK0 ] unsigned char 
 14605 ;;  address         2    4[BANK0 ] unsigned int 
 14606 ;; Auto vars:     Size  Location     Type
 14607 ;;  ptrb            1    8[BANK0 ] PTR struct .
 14608 ;;		 -> I2C2_MasterRead@trBlock(5), 
 14609 ;; Return value:  Size  Location     Type
 14610 ;;                  1    wreg      void 
 14611 ;; Registers used:
 14612 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 14613 ;; Tracked objects:
 14614 ;;		On entry : 0/0
 14615 ;;		On exit  : 0/0
 14616 ;;		Unchanged: 0/0
 14617 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14618 ;;      Params:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14619 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14620 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14621 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14622 ;;Total ram usage:        8 bytes
 14623 ;; Hardware stack levels used:    1
 14624 ;; Hardware stack levels required when called:    4
 14625 ;; This function calls:
 14626 ;;		Nothing
 14627 ;; This function is called by:
 14628 ;;		_I2C2_MasterRead
 14629 ;; This function uses a non-reentrant model
 14630 ;;
 14631                           
 14632                           
 14633                           ;psect for function _I2C2_MasterReadTRBBuild
 14634  1700                     _I2C2_MasterReadTRBBuild:	
 14635                           
 14636                           ;incstack = 0
 14637                           ; Regs used in _I2C2_MasterReadTRBBuild: [wreg+fsr1l+fsr1h+status,2+status,0]
 14638                           ;I2C2_MasterReadTRBBuild@ptrb stored from wreg
 14639  1700  0020               	movlb	0	; select bank0
 14640  1701  00A8               	movwf	I2C2_MasterReadTRBBuild@ptrb
 14641                           
 14642                           ;i2c2.c: 701: ptrb->address = address << 1;
 14643  1702  0825               	movf	I2C2_MasterReadTRBBuild@address+1,w
 14644  1703  00A7               	movwf	??_I2C2_MasterReadTRBBuild+1
 14645  1704  0824               	movf	I2C2_MasterReadTRBBuild@address,w
 14646  1705  00A6               	movwf	??_I2C2_MasterReadTRBBuild
 14647  1706  35A6               	lslf	??_I2C2_MasterReadTRBBuild,f
 14648  1707  0DA7               	rlf	??_I2C2_MasterReadTRBBuild+1,f
 14649  1708  0828               	movf	I2C2_MasterReadTRBBuild@ptrb,w
 14650  1709  0086               	movwf	6
 14651  170A  3001               	movlw	1	; select bank2/3
 14652  170B  0087               	movwf	7
 14653  170C  0826               	movf	??_I2C2_MasterReadTRBBuild,w
 14654  170D  3FC0               	movwi [0]fsr1
 14655  170E  0827               	movf	??_I2C2_MasterReadTRBBuild+1,w
 14656  170F  3FC1               	movwi [1]fsr1
 14657                           
 14658                           ;i2c2.c: 703: ptrb->address |= 0x01;
 14659  1710  0828               	movf	I2C2_MasterReadTRBBuild@ptrb,w
 14660  1711  0086               	movwf	6
 14661  1712  3001               	movlw	1	; select bank2/3
 14662  1713  0087               	movwf	7
 14663  1714  3001               	movlw	1
 14664  1715  0481               	iorwf	1,f
 14665  1716  3141               	addfsr 1,1
 14666  1717  3000               	movlw	0
 14667  1718  0481               	iorwf	1,f
 14668                           
 14669                           ;i2c2.c: 704: ptrb->length = length;
 14670  1719  0823               	movf	I2C2_MasterReadTRBBuild@length,w
 14671  171A  00A6               	movwf	??_I2C2_MasterReadTRBBuild
 14672  171B  0828               	movf	I2C2_MasterReadTRBBuild@ptrb,w
 14673  171C  3E02               	addlw	2
 14674  171D  0086               	movwf	6
 14675  171E  3001               	movlw	1	; select bank2/3
 14676  171F  0087               	movwf	7
 14677  1720  0826               	movf	??_I2C2_MasterReadTRBBuild,w
 14678  1721  0081               	movwf	1
 14679                           
 14680                           ;i2c2.c: 705: ptrb->pbuffer = pdata;
 14681  1722  0828               	movf	I2C2_MasterReadTRBBuild@ptrb,w
 14682  1723  3E03               	addlw	3
 14683  1724  0086               	movwf	6
 14684  1725  3001               	movlw	1	; select bank2/3
 14685  1726  0087               	movwf	7
 14686  1727  0821               	movf	I2C2_MasterReadTRBBuild@pdata,w
 14687  1728  3FC0               	movwi [0]fsr1
 14688  1729  0822               	movf	I2C2_MasterReadTRBBuild@pdata+1,w
 14689  172A  3FC1               	movwi [1]fsr1
 14690  172B  0008               	return
 14691  172C                     __end_of_I2C2_MasterReadTRBBuild:	
 14692                           
 14693                           	psect	text81
 14694  1323                     __ptext81:	
 14695 ;; *************** function _Diag_setTempSensorHealth *****************
 14696 ;; Defined at:
 14697 ;;		line 15 in file "diagnostics.c"
 14698 ;; Parameters:    Size  Location     Type
 14699 ;;  health          1    wreg     unsigned char 
 14700 ;; Auto vars:     Size  Location     Type
 14701 ;;  health          1    2[BANK0 ] unsigned char 
 14702 ;; Return value:  Size  Location     Type
 14703 ;;                  1    wreg      void 
 14704 ;; Registers used:
 14705 ;;		wreg
 14706 ;; Tracked objects:
 14707 ;;		On entry : 0/0
 14708 ;;		On exit  : 0/0
 14709 ;;		Unchanged: 0/0
 14710 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14711 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14712 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14713 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14714 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14715 ;;Total ram usage:        2 bytes
 14716 ;; Hardware stack levels used:    1
 14717 ;; Hardware stack levels required when called:    4
 14718 ;; This function calls:
 14719 ;;		Nothing
 14720 ;; This function is called by:
 14721 ;;		_BMP_init
 14722 ;;		_BMP_readTemperature
 14723 ;; This function uses a non-reentrant model
 14724 ;;
 14725                           
 14726                           
 14727                           ;psect for function _Diag_setTempSensorHealth
 14728  1323                     _Diag_setTempSensorHealth:	
 14729                           
 14730                           ;incstack = 0
 14731                           ; Regs used in _Diag_setTempSensorHealth: [wreg]
 14732                           ;Diag_setTempSensorHealth@health stored from wreg
 14733  1323  0020               	movlb	0	; select bank0
 14734  1324  00A2               	movwf	Diag_setTempSensorHealth@health
 14735                           
 14736                           ;diagnostics.c: 17: sensorHealth.tempSensorHealth=health;
 14737  1325  0822               	movf	Diag_setTempSensorHealth@health,w
 14738  1326  00A1               	movwf	??_Diag_setTempSensorHealth
 14739  1327  0821               	movf	??_Diag_setTempSensorHealth,w
 14740  1328  0022               	movlb	2	; select bank2
 14741  1329  00EA               	movwf	_sensorHealth^(0+256)
 14742  132A  0008               	return
 14743  132B                     __end_of_Diag_setTempSensorHealth:	
 14744                           
 14745                           	psect	intentry
 14746  0004                     __pintentry:	
 14747 ;; *************** function _INTERRUPT_InterruptManager *****************
 14748 ;; Defined at:
 14749 ;;		line 51 in file "mcc_generated_files/interrupt_manager.c"
 14750 ;; Parameters:    Size  Location     Type
 14751 ;;		None
 14752 ;; Auto vars:     Size  Location     Type
 14753 ;;		None
 14754 ;; Return value:  Size  Location     Type
 14755 ;;                  1    wreg      void 
 14756 ;; Registers used:
 14757 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14758 ;; Tracked objects:
 14759 ;;		On entry : 0/0
 14760 ;;		On exit  : 0/0
 14761 ;;		Unchanged: 0/0
 14762 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14763 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14764 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14765 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14766 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14767 ;;Total ram usage:        1 bytes
 14768 ;; Hardware stack levels used:    1
 14769 ;; Hardware stack levels required when called:    3
 14770 ;; This function calls:
 14771 ;;		_I2C2_BusCollisionISR
 14772 ;;		_I2C2_ISR
 14773 ;;		_PIN_MANAGER_IOC
 14774 ;;		_TMR1_ISR
 14775 ;; This function is called by:
 14776 ;;		Interrupt level 1
 14777 ;; This function uses a non-reentrant model
 14778 ;;
 14779                           
 14780  0004                     _INTERRUPT_InterruptManager:	
 14781                           
 14782                           ;incstack = 0
 14783  0004  147E               	bsf	126,0	;set compiler interrupt flag (level 1)
 14784                           
 14785                           ; Regs used in _INTERRUPT_InterruptManager: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 14786  0005  3180               	pagesel	$
 14787  0006  0020               	movlb	0	; select bank0
 14788  0007  087F               	movf	127,w
 14789  0008  00A0               	movwf	??_INTERRUPT_InterruptManager
 14790                           
 14791                           ;interrupt_manager.c: 54: if(INTCONbits.PEIE == 1 && PIE4bits.BCL2IE == 1 && PIR4bits.BC
      +                          L2IF == 1)
 14792  0009  1F0B               	btfss	11,6	;volatile
 14793  000A  2815               	goto	i1l153
 14794  000B  0021               	movlb	1	; select bank1
 14795  000C  1C94               	btfss	20,1	;volatile
 14796  000D  2815               	goto	i1l153
 14797  000E  0020               	movlb	0	; select bank0
 14798  000F  1C94               	btfss	20,1	;volatile
 14799  0010  2815               	goto	i1l153
 14800                           
 14801                           ;interrupt_manager.c: 55: {
 14802                           ;interrupt_manager.c: 56: I2C2_BusCollisionISR();
 14803  0011  3192  22CA  3180   	fcall	_I2C2_BusCollisionISR
 14804                           
 14805                           ;interrupt_manager.c: 57: }
 14806  0014  2832               	goto	i1l161
 14807  0015                     i1l153:	
 14808                           
 14809                           ;interrupt_manager.c: 58: else if(INTCONbits.PEIE == 1 && PIE4bits.SSP2IE == 1 && PIR4bi
      +                          ts.SSP2IF == 1)
 14810  0015  1F0B               	btfss	11,6	;volatile
 14811  0016  2821               	goto	i1l155
 14812  0017  0021               	movlb	1	; select bank1
 14813  0018  1C14               	btfss	20,0	;volatile
 14814  0019  2821               	goto	i1l155
 14815  001A  0020               	movlb	0	; select bank0
 14816  001B  1C14               	btfss	20,0	;volatile
 14817  001C  2821               	goto	i1l155
 14818                           
 14819                           ;interrupt_manager.c: 59: {
 14820                           ;interrupt_manager.c: 60: I2C2_ISR();
 14821  001D  3185  253C  3180   	fcall	_I2C2_ISR
 14822                           
 14823                           ;interrupt_manager.c: 61: }
 14824  0020  2832               	goto	i1l161
 14825  0021                     i1l155:	
 14826                           
 14827                           ;interrupt_manager.c: 62: else if(INTCONbits.PEIE == 1 && PIE1bits.TMR1IE == 1 && PIR1bi
      +                          ts.TMR1IF == 1)
 14828  0021  1F0B               	btfss	11,6	;volatile
 14829  0022  282D               	goto	i1l157
 14830  0023  0021               	movlb	1	; select bank1
 14831  0024  1C11               	btfss	17,0	;volatile
 14832  0025  282D               	goto	i1l157
 14833  0026  0020               	movlb	0	; select bank0
 14834  0027  1C11               	btfss	17,0	;volatile
 14835  0028  282D               	goto	i1l157
 14836                           
 14837                           ;interrupt_manager.c: 63: {
 14838                           ;interrupt_manager.c: 64: TMR1_ISR();
 14839  0029  3193  233B  3180   	fcall	_TMR1_ISR
 14840                           
 14841                           ;interrupt_manager.c: 65: }
 14842  002C  2832               	goto	i1l161
 14843  002D                     i1l157:	
 14844                           
 14845                           ;interrupt_manager.c: 66: else if(INTCONbits.IOCIE == 1 && INTCONbits.IOCIF == 1)
 14846  002D  198B               	btfsc	11,3	;volatile
 14847  002E  1C0B               	btfss	11,0	;volatile
 14848  002F  2832               	goto	i1l161
 14849                           
 14850                           ;interrupt_manager.c: 67: {
 14851                           ;interrupt_manager.c: 68: PIN_MANAGER_IOC();
 14852  0030  3192  22F0         	fcall	_PIN_MANAGER_IOC
 14853  0032                     i1l161:	
 14854                           ;interrupt_manager.c: 70: else
 14855                           ;interrupt_manager.c: 71: {
 14856                           
 14857                           ;interrupt_manager.c: 69: }
 14858                           
 14859  0032  0020               	movlb	0	; select bank0
 14860  0033  0820               	movf	??_INTERRUPT_InterruptManager,w
 14861  0034  00FF               	movwf	127
 14862  0035  107E               	bcf	126,0	;clear compiler interrupt flag (level 1)
 14863  0036  0009               	retfie
 14864  0037                     __end_of_INTERRUPT_InterruptManager:	
 14865                           
 14866                           	psect	text83
 14867  133B                     __ptext83:	
 14868 ;; *************** function _TMR1_ISR *****************
 14869 ;; Defined at:
 14870 ;;		line 157 in file "mcc_generated_files/tmr1.c"
 14871 ;; Parameters:    Size  Location     Type
 14872 ;;		None
 14873 ;; Auto vars:     Size  Location     Type
 14874 ;;		None
 14875 ;; Return value:  Size  Location     Type
 14876 ;;                  1    wreg      void 
 14877 ;; Registers used:
 14878 ;;		wreg, status,2, status,0, pclath, cstack
 14879 ;; Tracked objects:
 14880 ;;		On entry : 0/0
 14881 ;;		On exit  : 0/0
 14882 ;;		Unchanged: 0/0
 14883 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14884 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14885 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14886 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14887 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14888 ;;Total ram usage:        0 bytes
 14889 ;; Hardware stack levels used:    1
 14890 ;; Hardware stack levels required when called:    2
 14891 ;; This function calls:
 14892 ;;		_TMR1_CallBack
 14893 ;; This function is called by:
 14894 ;;		_INTERRUPT_InterruptManager
 14895 ;; This function uses a non-reentrant model
 14896 ;;
 14897                           
 14898                           
 14899                           ;psect for function _TMR1_ISR
 14900  133B                     _TMR1_ISR:	
 14901                           
 14902                           ;tmr1.c: 161: PIR1bits.TMR1IF = 0;
 14903                           
 14904                           ;incstack = 0
 14905                           ; Regs used in _TMR1_ISR: [wreg+status,2+status,0+pclath+cstack]
 14906  133B  0020               	movlb	0	; select bank0
 14907  133C  1011               	bcf	17,0	;volatile
 14908                           
 14909                           ;tmr1.c: 163: TMR1H = (timer1ReloadVal >> 8);
 14910  133D  087D               	movf	_timer1ReloadVal+1,w	;volatile
 14911  133E  0097               	movwf	23	;volatile
 14912                           
 14913                           ;tmr1.c: 164: TMR1L = timer1ReloadVal;
 14914  133F  087C               	movf	_timer1ReloadVal,w	;volatile
 14915  1340  0096               	movwf	22	;volatile
 14916                           
 14917                           ;tmr1.c: 168: TMR1_CallBack();
 14918  1341  3193  2398         	fcall	_TMR1_CallBack
 14919  1343  0008               	return
 14920  1344                     __end_of_TMR1_ISR:	
 14921                           
 14922                           	psect	text84
 14923  1398                     __ptext84:	
 14924 ;; *************** function _TMR1_CallBack *****************
 14925 ;; Defined at:
 14926 ;;		line 171 in file "mcc_generated_files/tmr1.c"
 14927 ;; Parameters:    Size  Location     Type
 14928 ;;		None
 14929 ;; Auto vars:     Size  Location     Type
 14930 ;;		None
 14931 ;; Return value:  Size  Location     Type
 14932 ;;                  1    wreg      void 
 14933 ;; Registers used:
 14934 ;;		wreg, status,2, status,0, pclath, cstack
 14935 ;; Tracked objects:
 14936 ;;		On entry : 0/0
 14937 ;;		On exit  : 0/0
 14938 ;;		Unchanged: 0/0
 14939 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14940 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14941 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14942 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14943 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14944 ;;Total ram usage:        0 bytes
 14945 ;; Hardware stack levels used:    1
 14946 ;; Hardware stack levels required when called:    1
 14947 ;; This function calls:
 14948 ;;		Absolute function
 14949 ;;		_TMR1_DefaultInterruptHandler
 14950 ;;		_Timeout_increment
 14951 ;; This function is called by:
 14952 ;;		_TMR1_ISR
 14953 ;; This function uses a non-reentrant model
 14954 ;;
 14955                           
 14956                           
 14957                           ;psect for function _TMR1_CallBack
 14958  1398                     _TMR1_CallBack:	
 14959                           
 14960                           ;tmr1.c: 174: Timeout_increment();
 14961                           
 14962                           ;incstack = 0
 14963                           ; Regs used in _TMR1_CallBack: [wreg+status,2+status,0+pclath+cstack]
 14964  1398  3193  2368  3193   	fcall	_Timeout_increment
 14965                           
 14966                           ;tmr1.c: 175: if(TMR1_InterruptHandler)
 14967  139B  0022               	movlb	2	; select bank2
 14968  139C  086C               	movf	_TMR1_InterruptHandler^(0+256),w
 14969  139D  046D               	iorwf	(_TMR1_InterruptHandler+1)^(0+256),w
 14970  139E  1903               	btfsc	3,2
 14971  139F  0008               	return
 14972                           
 14973                           ;tmr1.c: 176: {
 14974                           ;tmr1.c: 177: TMR1_InterruptHandler();
 14975  13A0  086D               	movf	(_TMR1_InterruptHandler+1)^(0+256),w
 14976  13A1  008A               	movwf	10
 14977  13A2  086C               	movf	_TMR1_InterruptHandler^(0+256),w
 14978  13A3  000A               	callw
 14979  13A4  3193               	pagesel	$
 14980  13A5  0008               	return
 14981  13A6                     __end_of_TMR1_CallBack:	
 14982                           
 14983                           	psect	text85
 14984  1368                     __ptext85:	
 14985 ;; *************** function _Timeout_increment *****************
 14986 ;; Defined at:
 14987 ;;		line 8 in file "timeout.c"
 14988 ;; Parameters:    Size  Location     Type
 14989 ;;		None
 14990 ;; Auto vars:     Size  Location     Type
 14991 ;;		None
 14992 ;; Return value:  Size  Location     Type
 14993 ;;                  1    wreg      void 
 14994 ;; Registers used:
 14995 ;;		wreg
 14996 ;; Tracked objects:
 14997 ;;		On entry : 0/0
 14998 ;;		On exit  : 0/0
 14999 ;;		Unchanged: 0/0
 15000 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15001 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15002 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15003 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15004 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15005 ;;Total ram usage:        0 bytes
 15006 ;; Hardware stack levels used:    1
 15007 ;; This function calls:
 15008 ;;		Nothing
 15009 ;; This function is called by:
 15010 ;;		_TMR1_CallBack
 15011 ;; This function uses a non-reentrant model
 15012 ;;
 15013                           
 15014                           
 15015                           ;psect for function _Timeout_increment
 15016  1368                     _Timeout_increment:	
 15017                           
 15018                           ;timeout.c: 10: globalCounter+=10000;
 15019                           
 15020                           ;incstack = 0
 15021                           ; Regs used in _Timeout_increment: [wreg]
 15022  1368  3010               	movlw	16
 15023  1369  0021               	movlb	1	; select bank1
 15024  136A  07D2               	addwf	_globalCounter^(0+128),f	;volatile
 15025  136B  3027               	movlw	39
 15026  136C  3DD3               	addwfc	(_globalCounter+1)^(0+128),f	;volatile
 15027  136D  3000               	movlw	0
 15028  136E  3DD4               	addwfc	(_globalCounter+2)^(0+128),f	;volatile
 15029  136F  3000               	movlw	0
 15030  1370  3DD5               	addwfc	(_globalCounter+3)^(0+128),f	;volatile
 15031  1371  0008               	return
 15032  1372                     __end_of_Timeout_increment:	
 15033                           
 15034                           	psect	text86
 15035  12CC                     __ptext86:	
 15036 ;; *************** function _TMR1_DefaultInterruptHandler *****************
 15037 ;; Defined at:
 15038 ;;		line 185 in file "mcc_generated_files/tmr1.c"
 15039 ;; Parameters:    Size  Location     Type
 15040 ;;		None
 15041 ;; Auto vars:     Size  Location     Type
 15042 ;;		None
 15043 ;; Return value:  Size  Location     Type
 15044 ;;                  1    wreg      void 
 15045 ;; Registers used:
 15046 ;;		None
 15047 ;; Tracked objects:
 15048 ;;		On entry : 0/0
 15049 ;;		On exit  : 0/0
 15050 ;;		Unchanged: 0/0
 15051 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15052 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15053 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15054 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15055 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15056 ;;Total ram usage:        0 bytes
 15057 ;; Hardware stack levels used:    1
 15058 ;; This function calls:
 15059 ;;		Nothing
 15060 ;; This function is called by:
 15061 ;;		_TMR1_Initialize
 15062 ;;		_TMR1_CallBack
 15063 ;; This function uses a non-reentrant model
 15064 ;;
 15065                           
 15066                           
 15067                           ;psect for function _TMR1_DefaultInterruptHandler
 15068  12CC                     _TMR1_DefaultInterruptHandler:	
 15069                           
 15070                           ;incstack = 0
 15071                           ; Regs used in _TMR1_DefaultInterruptHandler: []
 15072  12CC  0008               	return
 15073  12CD                     __end_of_TMR1_DefaultInterruptHandler:	
 15074                           
 15075                           	psect	text87
 15076  12F0                     __ptext87:	
 15077 ;; *************** function _PIN_MANAGER_IOC *****************
 15078 ;; Defined at:
 15079 ;;		line 110 in file "mcc_generated_files/pin_manager.c"
 15080 ;; Parameters:    Size  Location     Type
 15081 ;;		None
 15082 ;; Auto vars:     Size  Location     Type
 15083 ;;		None
 15084 ;; Return value:  Size  Location     Type
 15085 ;;                  1    wreg      void 
 15086 ;; Registers used:
 15087 ;;		wreg, status,2, status,0, pclath, cstack
 15088 ;; Tracked objects:
 15089 ;;		On entry : 0/0
 15090 ;;		On exit  : 0/0
 15091 ;;		Unchanged: 0/0
 15092 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15093 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15094 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15095 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15096 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15097 ;;Total ram usage:        0 bytes
 15098 ;; Hardware stack levels used:    1
 15099 ;; Hardware stack levels required when called:    2
 15100 ;; This function calls:
 15101 ;;		_IOCAF2_ISR
 15102 ;; This function is called by:
 15103 ;;		_INTERRUPT_InterruptManager
 15104 ;; This function uses a non-reentrant model
 15105 ;;
 15106                           
 15107                           
 15108                           ;psect for function _PIN_MANAGER_IOC
 15109  12F0                     _PIN_MANAGER_IOC:	
 15110                           
 15111                           ;pin_manager.c: 113: if(IOCAFbits.IOCAF2 == 1)
 15112                           
 15113                           ;incstack = 0
 15114                           ; Regs used in _PIN_MANAGER_IOC: [wreg+status,2+status,0+pclath+cstack]
 15115  12F0  0027               	movlb	7	; select bank7
 15116  12F1  1D13               	btfss	19,2	;volatile
 15117  12F2  0008               	return
 15118                           
 15119                           ;pin_manager.c: 114: {
 15120                           ;pin_manager.c: 115: IOCAF2_ISR();
 15121  12F3  3193  237E         	fcall	_IOCAF2_ISR
 15122  12F5  0008               	return
 15123  12F6                     __end_of_PIN_MANAGER_IOC:	
 15124                           
 15125                           	psect	text88
 15126  137E                     __ptext88:	
 15127 ;; *************** function _IOCAF2_ISR *****************
 15128 ;; Defined at:
 15129 ;;		line 124 in file "mcc_generated_files/pin_manager.c"
 15130 ;; Parameters:    Size  Location     Type
 15131 ;;		None
 15132 ;; Auto vars:     Size  Location     Type
 15133 ;;		None
 15134 ;; Return value:  Size  Location     Type
 15135 ;;                  1    wreg      void 
 15136 ;; Registers used:
 15137 ;;		wreg, status,2, status,0, pclath, cstack
 15138 ;; Tracked objects:
 15139 ;;		On entry : 0/0
 15140 ;;		On exit  : 0/0
 15141 ;;		Unchanged: 0/0
 15142 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15143 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15144 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15145 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15146 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15147 ;;Total ram usage:        0 bytes
 15148 ;; Hardware stack levels used:    1
 15149 ;; Hardware stack levels required when called:    1
 15150 ;; This function calls:
 15151 ;;		Absolute function
 15152 ;;		_IOCAF2_DefaultInterruptHandler
 15153 ;; This function is called by:
 15154 ;;		_PIN_MANAGER_IOC
 15155 ;; This function uses a non-reentrant model
 15156 ;;
 15157                           
 15158                           
 15159                           ;psect for function _IOCAF2_ISR
 15160  137E                     _IOCAF2_ISR:	
 15161                           
 15162                           ;pin_manager.c: 129: if(IOCAF2_InterruptHandler)
 15163                           
 15164                           ;incstack = 0
 15165                           ; Regs used in _IOCAF2_ISR: [wreg+status,2+status,0+pclath+cstack]
 15166  137E  0022               	movlb	2	; select bank2
 15167  137F  086E               	movf	_IOCAF2_InterruptHandler^(0+256),w
 15168  1380  046F               	iorwf	(_IOCAF2_InterruptHandler+1)^(0+256),w
 15169  1381  1903               	btfsc	3,2
 15170  1382  2B88               	goto	i1l4247
 15171                           
 15172                           ;pin_manager.c: 130: {
 15173                           ;pin_manager.c: 131: IOCAF2_InterruptHandler();
 15174  1383  086F               	movf	(_IOCAF2_InterruptHandler+1)^(0+256),w
 15175  1384  008A               	movwf	10
 15176  1385  086E               	movf	_IOCAF2_InterruptHandler^(0+256),w
 15177  1386  000A               	callw
 15178  1387  3193               	pagesel	$
 15179  1388                     i1l4247:	
 15180                           
 15181                           ;pin_manager.c: 132: }
 15182                           ;pin_manager.c: 133: IOCAFbits.IOCAF2 = 0;
 15183  1388  0027               	movlb	7	; select bank7
 15184  1389  1113               	bcf	19,2	;volatile
 15185  138A  0008               	return
 15186  138B                     __end_of_IOCAF2_ISR:	
 15187                           
 15188                           	psect	text89
 15189  12CB                     __ptext89:	
 15190 ;; *************** function _IOCAF2_DefaultInterruptHandler *****************
 15191 ;; Defined at:
 15192 ;;		line 146 in file "mcc_generated_files/pin_manager.c"
 15193 ;; Parameters:    Size  Location     Type
 15194 ;;		None
 15195 ;; Auto vars:     Size  Location     Type
 15196 ;;		None
 15197 ;; Return value:  Size  Location     Type
 15198 ;;                  1    wreg      void 
 15199 ;; Registers used:
 15200 ;;		None
 15201 ;; Tracked objects:
 15202 ;;		On entry : 0/0
 15203 ;;		On exit  : 0/0
 15204 ;;		Unchanged: 0/0
 15205 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15206 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15207 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15208 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15209 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15210 ;;Total ram usage:        0 bytes
 15211 ;; Hardware stack levels used:    1
 15212 ;; This function calls:
 15213 ;;		Nothing
 15214 ;; This function is called by:
 15215 ;;		_PIN_MANAGER_Initialize
 15216 ;;		_IOCAF2_ISR
 15217 ;; This function uses a non-reentrant model
 15218 ;;
 15219                           
 15220                           
 15221                           ;psect for function _IOCAF2_DefaultInterruptHandler
 15222  12CB                     _IOCAF2_DefaultInterruptHandler:	
 15223                           
 15224                           ;incstack = 0
 15225                           ; Regs used in _IOCAF2_DefaultInterruptHandler: []
 15226  12CB  0008               	return
 15227  12CC                     __end_of_IOCAF2_DefaultInterruptHandler:	
 15228                           
 15229                           	psect	text90
 15230  053C                     __ptext90:	
 15231 ;; *************** function _I2C2_ISR *****************
 15232 ;; Defined at:
 15233 ;;		line 233 in file "mcc_generated_files/i2c2.c"
 15234 ;; Parameters:    Size  Location     Type
 15235 ;;		None
 15236 ;; Auto vars:     Size  Location     Type
 15237 ;;		None
 15238 ;; Return value:  Size  Location     Type
 15239 ;;                  1    wreg      void 
 15240 ;; Registers used:
 15241 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15242 ;; Tracked objects:
 15243 ;;		On entry : 0/0
 15244 ;;		On exit  : 0/0
 15245 ;;		Unchanged: 0/0
 15246 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15247 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15248 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15249 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15250 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15251 ;;Total ram usage:        4 bytes
 15252 ;; Hardware stack levels used:    1
 15253 ;; Hardware stack levels required when called:    1
 15254 ;; This function calls:
 15255 ;;		_I2C2_FunctionComplete
 15256 ;;		_I2C2_Stop
 15257 ;; This function is called by:
 15258 ;;		_INTERRUPT_InterruptManager
 15259 ;; This function uses a non-reentrant model
 15260 ;;
 15261                           
 15262                           
 15263                           ;psect for function _I2C2_ISR
 15264  053C                     _I2C2_ISR:	
 15265                           
 15266                           ;i2c2.c: 236: static uint8_t *pi2c_buf_ptr;
 15267                           ;i2c2.c: 237: static uint16_t i2c_address = 0;
 15268                           ;i2c2.c: 238: static uint8_t i2c_bytes_left = 0;
 15269                           ;i2c2.c: 239: static uint8_t i2c_10bit_address_restart = 0;
 15270                           ;i2c2.c: 241: PIR4bits.SSP2IF = 0;
 15271                           
 15272                           ;incstack = 0
 15273                           ; Regs used in _I2C2_ISR: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 15274  053C  0020               	movlb	0	; select bank0
 15275  053D  1014               	bcf	20,0	;volatile
 15276                           
 15277                           ;i2c2.c: 245: if(SSP2CON1bits.WCOL)
 15278  053E  0024               	movlb	4	; select bank4
 15279  053F  1F9D               	btfss	29,7	;volatile
 15280  0540  2E7A               	goto	i1l4821
 15281                           
 15282                           ;i2c2.c: 246: {
 15283                           ;i2c2.c: 248: SSP2CON1bits.WCOL = 0;
 15284  0541  139D               	bcf	29,7	;volatile
 15285                           
 15286                           ;i2c2.c: 249: i2c2_state = S_MASTER_IDLE;
 15287  0542  01F9               	clrf	_i2c2_state
 15288                           
 15289                           ;i2c2.c: 250: *(p_i2c2_current->pTrFlag) = I2C2_MESSAGE_FAIL;
 15290  0543  0877               	movf	_p_i2c2_current,w
 15291  0544  3E02               	addlw	2
 15292  0545  0086               	movwf	6
 15293  0546  3001               	movlw	1	; select bank2/3
 15294  0547  0087               	movwf	7
 15295  0548  3F40               	moviw [0]fsr1
 15296  0549  00F3               	movwf	??_I2C2_ISR
 15297  054A  3F41               	moviw [1]fsr1
 15298  054B  00F4               	movwf	??_I2C2_ISR+1
 15299  054C  0873               	movf	??_I2C2_ISR,w
 15300  054D  0086               	movwf	6
 15301  054E  0874               	movf	??_I2C2_ISR+1,w
 15302  054F  0087               	movwf	7
 15303  0550  3001               	movlw	1
 15304  0551  0081               	movwf	1
 15305                           
 15306                           ;i2c2.c: 253: p_i2c2_current = (0);
 15307  0552  01F7               	clrf	_p_i2c2_current
 15308                           
 15309                           ;i2c2.c: 255: return;
 15310  0553  0008               	return
 15311  0554                     i1l288:	
 15312                           ;i2c2.c: 260: {
 15313                           ;i2c2.c: 261: case S_MASTER_IDLE:
 15314                           
 15315                           ;i2c2.c: 256: }
 15316                           ;i2c2.c: 259: switch(i2c2_state)
 15317                           
 15318                           
 15319                           ;i2c2.c: 263: if(i2c2_object.trStatus.s.empty != 1)
 15320  0554  0021               	movlb	1	; select bank1
 15321  0555  18CF               	btfsc	(_i2c2_object^(0+128)+2),1
 15322  0556  0008               	return
 15323                           
 15324                           ;i2c2.c: 264: {
 15325                           ;i2c2.c: 266: p_i2c2_current = i2c2_object.pTrHead;
 15326  0557  084E               	movf	(low ((_i2c2_object| 0+1)))^(0+128),w
 15327  0558  00F3               	movwf	??_I2C2_ISR
 15328  0559  0873               	movf	??_I2C2_ISR,w
 15329  055A  00F7               	movwf	_p_i2c2_current
 15330                           
 15331                           ;i2c2.c: 267: i2c2_trb_count = i2c2_object.pTrHead->count;
 15332  055B  084E               	movf	(low ((_i2c2_object| 0+1)))^(0+128),w
 15333  055C  0086               	movwf	6
 15334  055D  3001               	movlw	1	; select bank2/3
 15335  055E  0087               	movwf	7
 15336  055F  0801               	movf	1,w
 15337  0560  00F3               	movwf	??_I2C2_ISR
 15338  0561  0873               	movf	??_I2C2_ISR,w
 15339  0562  00E5               	movwf	_i2c2_trb_count^(0+128)
 15340                           
 15341                           ;i2c2.c: 268: p_i2c2_trb_current = i2c2_object.pTrHead->ptrb_list;
 15342  0563  084E               	movf	(low ((_i2c2_object| 0+1)))^(0+128),w
 15343  0564  0086               	movwf	6
 15344  0565  3001               	movlw	1	; select bank2/3
 15345  0566  0087               	movwf	7
 15346  0567  3001               	movlw	1	; select bank2/3
 15347  0568  3F41               	moviw [1]fsr1
 15348  0569  00F8               	movwf	_p_i2c2_trb_current
 15349                           
 15350                           ;i2c2.c: 270: i2c2_object.pTrHead++;
 15351  056A  3004               	movlw	4
 15352  056B  00F3               	movwf	??_I2C2_ISR
 15353  056C  0873               	movf	??_I2C2_ISR,w
 15354  056D  07CE               	addwf	(low ((_i2c2_object| 0+1)))^(0+128),f
 15355                           
 15356                           ;i2c2.c: 273: if(i2c2_object.pTrHead == (i2c2_tr_queue + 1))
 15357  056E  084E               	movf	(low ((_i2c2_object| 0+1)))^(0+128),w
 15358  056F  3A66               	xorlw	(low ((_i2c2_tr_queue| (0+256)+4)))& (0+255)
 15359  0570  1D03               	skipz
 15360  0571  2D76               	goto	i1l4711
 15361                           
 15362                           ;i2c2.c: 274: {
 15363                           ;i2c2.c: 276: i2c2_object.pTrHead = i2c2_tr_queue;
 15364  0572  3062               	movlw	(low (_i2c2_tr_queue| (0+256)))& (0+255)
 15365  0573  00F3               	movwf	??_I2C2_ISR
 15366  0574  0873               	movf	??_I2C2_ISR,w
 15367  0575  00CE               	movwf	(low ((_i2c2_object| 0+1)))^(0+128)
 15368  0576                     i1l4711:	
 15369                           
 15370                           ;i2c2.c: 277: }
 15371                           ;i2c2.c: 281: i2c2_object.trStatus.s.full = 0;
 15372  0576  104F               	bcf	(_i2c2_object^(0+128)+2),0
 15373                           
 15374                           ;i2c2.c: 284: if(i2c2_object.pTrHead == i2c2_object.pTrTail)
 15375  0577  084E               	movf	(low ((_i2c2_object| 0+1)))^(0+128),w
 15376  0578  064D               	xorwf	_i2c2_object^(0+128),w
 15377  0579  1903               	btfsc	3,2
 15378                           
 15379                           ;i2c2.c: 285: {
 15380                           ;i2c2.c: 287: i2c2_object.trStatus.s.empty = 1;
 15381  057A  14CF               	bsf	(_i2c2_object^(0+128)+2),1
 15382                           
 15383                           ;i2c2.c: 288: }
 15384                           ;i2c2.c: 291: SSP2CON2bits.SEN = 1;
 15385  057B  0024               	movlb	4	; select bank4
 15386  057C  141E               	bsf	30,0	;volatile
 15387                           
 15388                           ;i2c2.c: 294: i2c2_state = S_MASTER_SEND_ADDR;
 15389  057D  3002               	movlw	2
 15390  057E  00F3               	movwf	??_I2C2_ISR
 15391  057F  0873               	movf	??_I2C2_ISR,w
 15392  0580  00F9               	movwf	_i2c2_state
 15393                           
 15394                           ;i2c2.c: 295: }
 15395                           ;i2c2.c: 297: break;
 15396  0581  0008               	return
 15397  0582                     i1l293:	
 15398                           ;i2c2.c: 299: case S_MASTER_RESTART:
 15399                           
 15400                           
 15401                           ;i2c2.c: 304: SSP2CON2bits.RSEN = 1;
 15402  0582  0024               	movlb	4	; select bank4
 15403  0583  149E               	bsf	30,1	;volatile
 15404                           
 15405                           ;i2c2.c: 307: i2c2_state = S_MASTER_SEND_ADDR;
 15406  0584  3002               	movlw	2
 15407  0585  00F3               	movwf	??_I2C2_ISR
 15408  0586  0873               	movf	??_I2C2_ISR,w
 15409  0587  00F9               	movwf	_i2c2_state
 15410                           
 15411                           ;i2c2.c: 309: break;
 15412  0588  0008               	return
 15413  0589                     i1l294:	
 15414                           ;i2c2.c: 311: case S_MASTER_SEND_ADDR_10BIT_LSB:
 15415                           
 15416                           
 15417                           ;i2c2.c: 313: if(SSP2CON2bits.ACKSTAT)
 15418  0589  0024               	movlb	4	; select bank4
 15419  058A  1F1E               	btfss	30,6	;volatile
 15420  058B  2D95               	goto	i1l4723
 15421                           
 15422                           ;i2c2.c: 314: {
 15423                           ;i2c2.c: 315: i2c2_object.i2cErrors++;
 15424  058C  3001               	movlw	1
 15425  058D  00F3               	movwf	??_I2C2_ISR
 15426  058E  0873               	movf	??_I2C2_ISR,w
 15427  058F  0021               	movlb	1	; select bank1
 15428  0590  07D1               	addwf	(_i2c2_object^(0+128)+4),f
 15429                           
 15430                           ;i2c2.c: 316: I2C2_Stop(I2C2_MESSAGE_ADDRESS_NO_ACK);
 15431  0591  3004               	movlw	4
 15432  0592  3195  2528         	fcall	_I2C2_Stop
 15433                           
 15434                           ;i2c2.c: 317: }
 15435  0594  0008               	return
 15436  0595                     i1l4723:	
 15437                           
 15438                           ;i2c2.c: 318: else
 15439                           ;i2c2.c: 319: {
 15440                           ;i2c2.c: 321: SSP2BUF = (i2c_address >> 1) & 0x00FF;
 15441  0595  087B               	movf	I2C2_ISR@i2c_address+1,w
 15442  0596  00F4               	movwf	??_I2C2_ISR+1
 15443  0597  087A               	movf	I2C2_ISR@i2c_address,w
 15444  0598  00F3               	movwf	??_I2C2_ISR
 15445  0599  36F4               	lsrf	??_I2C2_ISR+1,f
 15446  059A  0CF3               	rrf	??_I2C2_ISR,f
 15447  059B  0873               	movf	??_I2C2_ISR,w
 15448  059C  0024               	movlb	4	; select bank4
 15449  059D  0099               	movwf	25	;volatile
 15450                           
 15451                           ;i2c2.c: 324: if(i2c_address & 0x01)
 15452  059E  1C7A               	btfss	I2C2_ISR@i2c_address,0
 15453  059F  2DA5               	goto	i1l4729
 15454                           
 15455                           ;i2c2.c: 325: {
 15456                           ;i2c2.c: 328: i2c2_state = S_MASTER_10BIT_RESTART;
 15457  05A0  300B               	movlw	11
 15458  05A1  00F3               	movwf	??_I2C2_ISR
 15459  05A2  0873               	movf	??_I2C2_ISR,w
 15460  05A3  00F9               	movwf	_i2c2_state
 15461                           
 15462                           ;i2c2.c: 329: }
 15463  05A4  0008               	return
 15464  05A5                     i1l4729:	
 15465                           
 15466                           ;i2c2.c: 330: else
 15467                           ;i2c2.c: 331: {
 15468                           ;i2c2.c: 333: i2c2_state = S_MASTER_SEND_DATA;
 15469  05A5  3003               	movlw	3
 15470  05A6  00F3               	movwf	??_I2C2_ISR
 15471  05A7  0873               	movf	??_I2C2_ISR,w
 15472  05A8  00F9               	movwf	_i2c2_state
 15473                           
 15474                           ;i2c2.c: 334: }
 15475                           ;i2c2.c: 335: }
 15476                           ;i2c2.c: 337: break;
 15477  05A9  0008               	return
 15478  05AA                     i1l299:	
 15479                           ;i2c2.c: 339: case S_MASTER_10BIT_RESTART:
 15480                           
 15481                           
 15482                           ;i2c2.c: 341: if(SSP2CON2bits.ACKSTAT)
 15483  05AA  0024               	movlb	4	; select bank4
 15484  05AB  1F1E               	btfss	30,6	;volatile
 15485  05AC  2DB6               	goto	i1l300
 15486                           
 15487                           ;i2c2.c: 342: {
 15488                           ;i2c2.c: 343: i2c2_object.i2cErrors++;
 15489  05AD  3001               	movlw	1
 15490  05AE  00F3               	movwf	??_I2C2_ISR
 15491  05AF  0873               	movf	??_I2C2_ISR,w
 15492  05B0  0021               	movlb	1	; select bank1
 15493  05B1  07D1               	addwf	(_i2c2_object^(0+128)+4),f
 15494                           
 15495                           ;i2c2.c: 344: I2C2_Stop(I2C2_MESSAGE_ADDRESS_NO_ACK);
 15496  05B2  3004               	movlw	4
 15497  05B3  3195  2528         	fcall	_I2C2_Stop
 15498                           
 15499                           ;i2c2.c: 345: }
 15500  05B5  0008               	return
 15501  05B6                     i1l300:	
 15502                           
 15503                           ;i2c2.c: 346: else
 15504                           ;i2c2.c: 347: {
 15505                           ;i2c2.c: 350: SSP2CON2bits.RSEN = 1;
 15506  05B6  149E               	bsf	30,1	;volatile
 15507                           
 15508                           ;i2c2.c: 354: i2c_address = 0x00F0 | ((i2c_address >> 8) & 0x0006);
 15509  05B7  087B               	movf	I2C2_ISR@i2c_address+1,w
 15510  05B8  00F4               	movwf	??_I2C2_ISR+1
 15511  05B9  087A               	movf	I2C2_ISR@i2c_address,w
 15512  05BA  00F3               	movwf	??_I2C2_ISR
 15513  05BB  0874               	movf	??_I2C2_ISR+1,w
 15514  05BC  00F3               	movwf	??_I2C2_ISR
 15515  05BD  01F4               	clrf	??_I2C2_ISR+1
 15516  05BE  3006               	movlw	6
 15517  05BF  0573               	andwf	??_I2C2_ISR,w
 15518  05C0  00F5               	movwf	??_I2C2_ISR+2
 15519  05C1  3000               	movlw	0
 15520  05C2  0574               	andwf	??_I2C2_ISR+1,w
 15521  05C3  00F6               	movwf	??_I2C2_ISR+3
 15522  05C4  30F0               	movlw	240
 15523  05C5  0475               	iorwf	??_I2C2_ISR+2,w
 15524  05C6  00FA               	movwf	I2C2_ISR@i2c_address
 15525  05C7  3000               	movlw	0
 15526  05C8  0476               	iorwf	??_I2C2_ISR+3,w
 15527  05C9  00FB               	movwf	I2C2_ISR@i2c_address+1
 15528                           
 15529                           ;i2c2.c: 357: i2c_address |= 0x0001;
 15530  05CA  147A               	bsf	I2C2_ISR@i2c_address,0
 15531                           
 15532                           ;i2c2.c: 360: i2c_10bit_address_restart = 1;
 15533  05CB  0021               	movlb	1	; select bank1
 15534  05CC  01E3               	clrf	I2C2_ISR@i2c_10bit_address_restart^(0+128)
 15535  05CD  0AE3               	incf	I2C2_ISR@i2c_10bit_address_restart^(0+128),f
 15536                           
 15537                           ;i2c2.c: 363: i2c2_state = S_MASTER_SEND_ADDR;
 15538  05CE  3002               	movlw	2
 15539  05CF  00F3               	movwf	??_I2C2_ISR
 15540  05D0  0873               	movf	??_I2C2_ISR,w
 15541  05D1  00F9               	movwf	_i2c2_state
 15542                           
 15543                           ;i2c2.c: 364: }
 15544                           ;i2c2.c: 366: break;
 15545  05D2  0008               	return
 15546  05D3                     i1l4743:	
 15547                           ;i2c2.c: 368: case S_MASTER_SEND_ADDR:
 15548                           
 15549                           
 15550                           ;i2c2.c: 381: if(i2c_10bit_address_restart != 1)
 15551  05D3  0021               	movlb	1	; select bank1
 15552  05D4  0363               	decf	I2C2_ISR@i2c_10bit_address_restart^(0+128),w
 15553  05D5  1903               	btfsc	3,2
 15554  05D6  2DEF               	goto	i1l4761
 15555                           
 15556                           ;i2c2.c: 382: {
 15557                           ;i2c2.c: 384: i2c_address = p_i2c2_trb_current->address;
 15558  05D7  0878               	movf	_p_i2c2_trb_current,w
 15559  05D8  0086               	movwf	6
 15560  05D9  3001               	movlw	1	; select bank2/3
 15561  05DA  0087               	movwf	7
 15562  05DB  3F40               	moviw [0]fsr1
 15563  05DC  00FA               	movwf	I2C2_ISR@i2c_address
 15564  05DD  3F41               	moviw [1]fsr1
 15565  05DE  00FB               	movwf	I2C2_ISR@i2c_address+1
 15566                           
 15567                           ;i2c2.c: 385: pi2c_buf_ptr = p_i2c2_trb_current->pbuffer;
 15568  05DF  0878               	movf	_p_i2c2_trb_current,w
 15569  05E0  3E03               	addlw	3
 15570  05E1  0086               	movwf	6
 15571  05E2  3001               	movlw	1	; select bank2/3
 15572  05E3  0087               	movwf	7
 15573  05E4  3F40               	moviw [0]fsr1
 15574  05E5  00D8               	movwf	I2C2_ISR@pi2c_buf_ptr^(0+128)
 15575  05E6  3F41               	moviw [1]fsr1
 15576  05E7  00D9               	movwf	(I2C2_ISR@pi2c_buf_ptr+1)^(0+128)
 15577                           
 15578                           ;i2c2.c: 386: i2c_bytes_left = p_i2c2_trb_current->length;
 15579  05E8  0878               	movf	_p_i2c2_trb_current,w
 15580  05E9  0086               	movwf	6
 15581  05EA  3001               	movlw	1	; select bank2/3
 15582  05EB  0087               	movwf	7
 15583  05EC  3001               	movlw	1	; select bank2/3
 15584  05ED  3F42               	moviw [2]fsr1
 15585  05EE  00E4               	movwf	I2C2_ISR@i2c_bytes_left^(0+128)
 15586  05EF                     i1l4761:	
 15587                           ;i2c2.c: 407: }
 15588                           ;i2c2.c: 408: }
 15589                           
 15590                           ;i2c2.c: 406: i2c_10bit_address_restart = 0;
 15591                           
 15592                           ;i2c2.c: 404: i2c2_state = S_MASTER_ACK_ADDR;
 15593                           
 15594                           ;i2c2.c: 400: else
 15595                           ;i2c2.c: 401: {
 15596                           ;i2c2.c: 403: SSP2BUF = i2c_address;
 15597                           
 15598                           ;i2c2.c: 399: }
 15599                           
 15600                           ;i2c2.c: 398: i2c2_state = S_MASTER_SEND_ADDR_10BIT_LSB;
 15601                           
 15602                           ;i2c2.c: 393: {
 15603                           ;i2c2.c: 397: SSP2BUF = 0xF0 | ((i2c_address >> 8) & 0x0006);
 15604                           
 15605                           ;i2c2.c: 391: {
 15606                           ;i2c2.c: 392: if (0 == i2c_10bit_address_restart)
 15607                           
 15608                           ;i2c2.c: 387: }
 15609                           ;i2c2.c: 390: if(!1 && (0x0 != i2c_address))
 15610                           
 15611                           
 15612                           ;i2c2.c: 409: else
 15613                           ;i2c2.c: 410: {
 15614                           ;i2c2.c: 412: SSP2BUF = i2c_address;
 15615  05EF  087A               	movf	I2C2_ISR@i2c_address,w
 15616  05F0  0024               	movlb	4	; select bank4
 15617  05F1  0099               	movwf	25	;volatile
 15618                           
 15619                           ;i2c2.c: 413: if(i2c_address & 0x01)
 15620  05F2  1C7A               	btfss	I2C2_ISR@i2c_address,0
 15621  05F3  2DF9               	goto	i1l4767
 15622                           
 15623                           ;i2c2.c: 414: {
 15624                           ;i2c2.c: 416: i2c2_state = S_MASTER_ACK_ADDR;
 15625  05F4  3005               	movlw	5
 15626  05F5  00F3               	movwf	??_I2C2_ISR
 15627  05F6  0873               	movf	??_I2C2_ISR,w
 15628  05F7  00F9               	movwf	_i2c2_state
 15629                           
 15630                           ;i2c2.c: 417: }
 15631  05F8  0008               	return
 15632  05F9                     i1l4767:	
 15633                           
 15634                           ;i2c2.c: 418: else
 15635                           ;i2c2.c: 419: {
 15636                           ;i2c2.c: 421: i2c2_state = S_MASTER_SEND_DATA;
 15637  05F9  3003               	movlw	3
 15638  05FA  00F3               	movwf	??_I2C2_ISR
 15639  05FB  0873               	movf	??_I2C2_ISR,w
 15640  05FC  00F9               	movwf	_i2c2_state
 15641                           
 15642                           ;i2c2.c: 422: }
 15643                           ;i2c2.c: 423: }
 15644                           ;i2c2.c: 424: break;
 15645  05FD  0008               	return
 15646  05FE                     i1l310:	
 15647                           ;i2c2.c: 426: case S_MASTER_SEND_DATA:
 15648                           
 15649                           
 15650                           ;i2c2.c: 429: if(SSP2CON2bits.ACKSTAT)
 15651  05FE  0024               	movlb	4	; select bank4
 15652  05FF  1F1E               	btfss	30,6	;volatile
 15653  0600  2E0C               	goto	i1l4775
 15654                           
 15655                           ;i2c2.c: 430: {
 15656                           ;i2c2.c: 432: i2c2_object.i2cErrors++;
 15657  0601  3001               	movlw	1
 15658  0602  00F3               	movwf	??_I2C2_ISR
 15659  0603  0873               	movf	??_I2C2_ISR,w
 15660  0604  0021               	movlb	1	; select bank1
 15661  0605  07D1               	addwf	(_i2c2_object^(0+128)+4),f
 15662                           
 15663                           ;i2c2.c: 435: SSP2CON2bits.ACKSTAT = 0;
 15664  0606  0024               	movlb	4	; select bank4
 15665  0607  131E               	bcf	30,6	;volatile
 15666                           
 15667                           ;i2c2.c: 438: I2C2_Stop(I2C2_DATA_NO_ACK);
 15668  0608  3005               	movlw	5
 15669  0609  3195  2528         	fcall	_I2C2_Stop
 15670                           
 15671                           ;i2c2.c: 440: }
 15672  060B  0008               	return
 15673  060C                     i1l4775:	
 15674                           
 15675                           ;i2c2.c: 441: else
 15676                           ;i2c2.c: 442: {
 15677                           ;i2c2.c: 444: if(i2c_bytes_left-- == 0U)
 15678  060C  3001               	movlw	1
 15679  060D  0021               	movlb	1	; select bank1
 15680  060E  02E4               	subwf	I2C2_ISR@i2c_bytes_left^(0+128),f
 15681  060F  0A64               	incf	I2C2_ISR@i2c_bytes_left^(0+128),w
 15682  0610  1D03               	btfss	3,2
 15683  0611  2E25               	goto	i1l4783
 15684                           
 15685                           ;i2c2.c: 445: {
 15686                           ;i2c2.c: 449: p_i2c2_trb_current++;
 15687  0612  3005               	movlw	5
 15688  0613  00F3               	movwf	??_I2C2_ISR
 15689  0614  0873               	movf	??_I2C2_ISR,w
 15690  0615  07F8               	addwf	_p_i2c2_trb_current,f
 15691                           
 15692                           ;i2c2.c: 452: if(--i2c2_trb_count == 0)
 15693  0616  3001               	movlw	1
 15694  0617  02E5               	subwf	_i2c2_trb_count^(0+128),f
 15695  0618  1D03               	btfss	3,2
 15696  0619  2E1E               	goto	i1l314
 15697                           
 15698                           ;i2c2.c: 453: {
 15699                           ;i2c2.c: 454: I2C2_Stop(I2C2_MESSAGE_COMPLETE);
 15700  061A  3000               	movlw	0
 15701  061B  3195  2528         	fcall	_I2C2_Stop
 15702                           
 15703                           ;i2c2.c: 455: }
 15704  061D  0008               	return
 15705  061E                     i1l314:	
 15706                           
 15707                           ;i2c2.c: 456: else
 15708                           ;i2c2.c: 457: {
 15709                           ;i2c2.c: 464: SSP2CON2bits.RSEN = 1;
 15710  061E  0024               	movlb	4	; select bank4
 15711  061F  149E               	bsf	30,1	;volatile
 15712                           
 15713                           ;i2c2.c: 467: i2c2_state = S_MASTER_SEND_ADDR;
 15714  0620  3002               	movlw	2
 15715  0621  00F3               	movwf	??_I2C2_ISR
 15716  0622  0873               	movf	??_I2C2_ISR,w
 15717  0623  00F9               	movwf	_i2c2_state
 15718                           
 15719                           ;i2c2.c: 469: }
 15720                           ;i2c2.c: 470: }
 15721  0624  0008               	return
 15722  0625                     i1l4783:	
 15723                           
 15724                           ;i2c2.c: 471: else
 15725                           ;i2c2.c: 472: {
 15726                           ;i2c2.c: 474: SSP2BUF = *pi2c_buf_ptr++;
 15727  0625  0021               	movlb	1	; select bank1
 15728  0626  0858               	movf	I2C2_ISR@pi2c_buf_ptr^(0+128),w
 15729  0627  0086               	movwf	6
 15730  0628  0859               	movf	(I2C2_ISR@pi2c_buf_ptr+1)^(0+128),w
 15731  0629  0087               	movwf	7
 15732  062A  0801               	movf	1,w
 15733  062B  0024               	movlb	4	; select bank4
 15734  062C  0099               	movwf	25	;volatile
 15735  062D  3001               	movlw	1
 15736  062E  0021               	movlb	1	; select bank1
 15737  062F  07D8               	addwf	I2C2_ISR@pi2c_buf_ptr^(0+128),f
 15738  0630  3000               	movlw	0
 15739  0631  3DD9               	addwfc	(I2C2_ISR@pi2c_buf_ptr+1)^(0+128),f
 15740                           
 15741                           ;i2c2.c: 475: }
 15742                           ;i2c2.c: 476: }
 15743                           ;i2c2.c: 477: break;
 15744  0632  0008               	return
 15745  0633                     i1l317:	
 15746                           ;i2c2.c: 479: case S_MASTER_ACK_ADDR:
 15747                           
 15748                           
 15749                           ;i2c2.c: 482: if(SSP2CON2bits.ACKSTAT)
 15750  0633  0024               	movlb	4	; select bank4
 15751  0634  1F1E               	btfss	30,6	;volatile
 15752  0635  2E41               	goto	i1l318
 15753                           
 15754                           ;i2c2.c: 483: {
 15755                           ;i2c2.c: 486: i2c2_object.i2cErrors++;
 15756  0636  3001               	movlw	1
 15757  0637  00F3               	movwf	??_I2C2_ISR
 15758  0638  0873               	movf	??_I2C2_ISR,w
 15759  0639  0021               	movlb	1	; select bank1
 15760  063A  07D1               	addwf	(_i2c2_object^(0+128)+4),f
 15761                           
 15762                           ;i2c2.c: 489: I2C2_Stop(I2C2_MESSAGE_ADDRESS_NO_ACK);
 15763  063B  3004               	movlw	4
 15764  063C  3195  2528         	fcall	_I2C2_Stop
 15765                           
 15766                           ;i2c2.c: 492: SSP2CON2bits.ACKSTAT = 0;
 15767  063E  0024               	movlb	4	; select bank4
 15768  063F  131E               	bcf	30,6	;volatile
 15769                           
 15770                           ;i2c2.c: 493: }
 15771  0640  0008               	return
 15772  0641                     i1l318:	
 15773                           
 15774                           ;i2c2.c: 494: else
 15775                           ;i2c2.c: 495: {
 15776                           ;i2c2.c: 496: SSP2CON2bits.RCEN = 1;
 15777  0641  159E               	bsf	30,3	;volatile
 15778                           
 15779                           ;i2c2.c: 497: i2c2_state = S_MASTER_ACK_RCV_DATA;
 15780  0642  3008               	movlw	8
 15781  0643  00F3               	movwf	??_I2C2_ISR
 15782  0644  0873               	movf	??_I2C2_ISR,w
 15783  0645  00F9               	movwf	_i2c2_state
 15784                           
 15785                           ;i2c2.c: 498: }
 15786                           ;i2c2.c: 499: break;
 15787  0646  0008               	return
 15788  0647                     i1l4795:	
 15789                           ;i2c2.c: 501: case S_MASTER_RCV_DATA:
 15790                           
 15791                           
 15792                           ;i2c2.c: 506: i2c2_state = S_MASTER_ACK_RCV_DATA;
 15793  0647  3008               	movlw	8
 15794  0648  00F3               	movwf	??_I2C2_ISR
 15795  0649  0873               	movf	??_I2C2_ISR,w
 15796  064A  00F9               	movwf	_i2c2_state
 15797                           
 15798                           ;i2c2.c: 509: SSP2CON2bits.RCEN = 1;
 15799  064B  0024               	movlb	4	; select bank4
 15800  064C  159E               	bsf	30,3	;volatile
 15801                           
 15802                           ;i2c2.c: 511: break;
 15803  064D  0008               	return
 15804  064E                     i1l4799:	
 15805                           ;i2c2.c: 513: case S_MASTER_ACK_RCV_DATA:
 15806                           
 15807                           
 15808                           ;i2c2.c: 516: *pi2c_buf_ptr++ = SSP2BUF;
 15809  064E  0021               	movlb	1	; select bank1
 15810  064F  0858               	movf	I2C2_ISR@pi2c_buf_ptr^(0+128),w
 15811  0650  0086               	movwf	6
 15812  0651  0859               	movf	(I2C2_ISR@pi2c_buf_ptr+1)^(0+128),w
 15813  0652  0087               	movwf	7
 15814  0653  0024               	movlb	4	; select bank4
 15815  0654  0819               	movf	25,w	;volatile
 15816  0655  0081               	movwf	1
 15817  0656  3001               	movlw	1
 15818  0657  0021               	movlb	1	; select bank1
 15819  0658  07D8               	addwf	I2C2_ISR@pi2c_buf_ptr^(0+128),f
 15820  0659  3000               	movlw	0
 15821  065A  3DD9               	addwfc	(I2C2_ISR@pi2c_buf_ptr+1)^(0+128),f
 15822                           
 15823                           ;i2c2.c: 519: if(--i2c_bytes_left)
 15824  065B  3001               	movlw	1
 15825  065C  02E4               	subwf	I2C2_ISR@i2c_bytes_left^(0+128),f
 15826  065D  1903               	btfsc	3,2
 15827  065E  2E66               	goto	i1l322
 15828                           
 15829                           ;i2c2.c: 520: {
 15830                           ;i2c2.c: 526: SSP2CON2bits.ACKDT = 0;
 15831  065F  0024               	movlb	4	; select bank4
 15832  0660  129E               	bcf	30,5	;volatile
 15833                           
 15834                           ;i2c2.c: 529: i2c2_state = S_MASTER_RCV_DATA;
 15835  0661  3006               	movlw	6
 15836  0662  00F3               	movwf	??_I2C2_ISR
 15837  0663  0873               	movf	??_I2C2_ISR,w
 15838  0664  00F9               	movwf	_i2c2_state
 15839                           
 15840                           ;i2c2.c: 530: }
 15841  0665  2E6A               	goto	i1l4811
 15842  0666                     i1l322:	
 15843                           
 15844                           ;i2c2.c: 531: else
 15845                           ;i2c2.c: 532: {
 15846                           ;i2c2.c: 536: SSP2CON2bits.ACKDT = 1;
 15847  0666  0024               	movlb	4	; select bank4
 15848  0667  169E               	bsf	30,5	;volatile
 15849                           
 15850                           ;i2c2.c: 538: I2C2_FunctionComplete();
 15851  0668  3193  23C6         	fcall	_I2C2_FunctionComplete
 15852  066A                     i1l4811:	
 15853                           
 15854                           ;i2c2.c: 539: }
 15855                           ;i2c2.c: 542: SSP2CON2bits.ACKEN = 1;
 15856  066A  0024               	movlb	4	; select bank4
 15857  066B  161E               	bsf	30,4	;volatile
 15858                           
 15859                           ;i2c2.c: 543: break;
 15860  066C  0008               	return
 15861  066D                     i1l4813:	
 15862                           ;i2c2.c: 545: case S_MASTER_RCV_STOP:
 15863                           
 15864                           
 15865                           ;i2c2.c: 546: case S_MASTER_SEND_STOP:
 15866                           ;i2c2.c: 549: I2C2_Stop(I2C2_MESSAGE_COMPLETE);
 15867  066D  3000               	movlw	0
 15868  066E  3195  2528         	fcall	_I2C2_Stop
 15869                           
 15870                           ;i2c2.c: 550: break;
 15871  0670  0008               	return
 15872  0671                     i1l4815:	
 15873                           ;i2c2.c: 552: default:
 15874                           
 15875                           
 15876                           ;i2c2.c: 556: i2c2_object.i2cErrors++;
 15877  0671  3001               	movlw	1
 15878  0672  00F3               	movwf	??_I2C2_ISR
 15879  0673  0873               	movf	??_I2C2_ISR,w
 15880  0674  0021               	movlb	1	; select bank1
 15881  0675  07D1               	addwf	(_i2c2_object^(0+128)+4),f
 15882                           
 15883                           ;i2c2.c: 557: I2C2_Stop(I2C2_LOST_STATE);
 15884  0676  3006               	movlw	6
 15885  0677  3195  2528         	fcall	_I2C2_Stop
 15886                           
 15887                           ;i2c2.c: 560: }
 15888                           
 15889                           ;i2c2.c: 558: break;
 15890  0679  0008               	return
 15891  067A                     i1l4821:	
 15892  067A  0879               	movf	_i2c2_state,w
 15893                           
 15894                           ; Switch size 1, requested type "space"
 15895                           ; Number of cases is 11, Range of values is 0 to 11
 15896                           ; switch strategies available:
 15897                           ; Name         Instructions Cycles
 15898                           ; direct_byte           30     6 (fixed)
 15899                           ; simple_byte           34    18 (average)
 15900                           ; jumptable            260     6 (fixed)
 15901                           ;	Chosen strategy is direct_byte
 15902  067B  0084               	movwf	4
 15903  067C  300C               	movlw	12
 15904  067D  0204               	subwf	4,w
 15905  067E  1803               	skipnc
 15906  067F  2E71               	goto	i1l4815
 15907  0680  3190               	movlp	high i1S6993
 15908  0681  3504               	lslf	4,w
 15909  0682  3E00               	addlw	low i1S6993
 15910  0683  0082               	movwf	2
 15911  0684  0008               	return
 15912  0685                     __end_of_I2C2_ISR:	
 15913                           
 15914                           	psect	swtext1
 15915  1000                     __pswtext1:	
 15916  1000                     i1S6993:	
 15917  1000  3185  2D54         	ljmp	i1l288
 15918  1002  3185  2D82         	ljmp	i1l293
 15919  1004  3185  2DD3         	ljmp	i1l4743
 15920  1006  3185  2DFE         	ljmp	i1l310
 15921  1008  3186  2E6D         	ljmp	i1l4813
 15922  100A  3186  2E33         	ljmp	i1l317
 15923  100C  3186  2E47         	ljmp	i1l4795
 15924  100E  3186  2E6D         	ljmp	i1l4813
 15925  1010  3186  2E4E         	ljmp	i1l4799
 15926  1012  3186  2E71         	ljmp	i1l4815
 15927  1014  3185  2D89         	ljmp	i1l294
 15928  1016  3185  2DAA         	ljmp	i1l299
 15929                           
 15930                           	psect	text91
 15931  1528                     __ptext91:	
 15932 ;; *************** function _I2C2_Stop *****************
 15933 ;; Defined at:
 15934 ;;		line 581 in file "mcc_generated_files/i2c2.c"
 15935 ;; Parameters:    Size  Location     Type
 15936 ;;  completion_c    1    wreg     enum E2993
 15937 ;; Auto vars:     Size  Location     Type
 15938 ;;  completion_c    1    2[COMMON] enum E2993
 15939 ;; Return value:  Size  Location     Type
 15940 ;;                  1    wreg      void 
 15941 ;; Registers used:
 15942 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 15943 ;; Tracked objects:
 15944 ;;		On entry : 0/0
 15945 ;;		On exit  : 0/0
 15946 ;;		Unchanged: 0/0
 15947 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15948 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15949 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15950 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15951 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15952 ;;Total ram usage:        3 bytes
 15953 ;; Hardware stack levels used:    1
 15954 ;; This function calls:
 15955 ;;		Nothing
 15956 ;; This function is called by:
 15957 ;;		_I2C2_ISR
 15958 ;; This function uses a non-reentrant model
 15959 ;;
 15960                           
 15961                           
 15962                           ;psect for function _I2C2_Stop
 15963  1528                     _I2C2_Stop:	
 15964                           
 15965                           ;incstack = 0
 15966                           ; Regs used in _I2C2_Stop: [wreg+fsr1l+fsr1h+status,2+status,0]
 15967                           ;I2C2_Stop@completion_code stored from wreg
 15968  1528  00F2               	movwf	I2C2_Stop@completion_code
 15969                           
 15970                           ;i2c2.c: 584: SSP2CON2bits.PEN = 1;
 15971  1529  0024               	movlb	4	; select bank4
 15972  152A  151E               	bsf	30,2	;volatile
 15973                           
 15974                           ;i2c2.c: 587: if (p_i2c2_current->pTrFlag != (0))
 15975  152B  0877               	movf	_p_i2c2_current,w
 15976  152C  3E02               	addlw	2
 15977  152D  0086               	movwf	6
 15978  152E  3001               	movlw	1	; select bank2/3
 15979  152F  0087               	movwf	7
 15980  1530  0016               	moviw fsr1++
 15981  1531  0401               	iorwf	1,w
 15982  1532  1903               	btfsc	3,2
 15983  1533  2D43               	goto	i1l4265
 15984                           
 15985                           ;i2c2.c: 588: {
 15986                           ;i2c2.c: 590: *(p_i2c2_current->pTrFlag) = completion_code;
 15987  1534  0877               	movf	_p_i2c2_current,w
 15988  1535  3E02               	addlw	2
 15989  1536  0086               	movwf	6
 15990  1537  3001               	movlw	1	; select bank2/3
 15991  1538  0087               	movwf	7
 15992  1539  3F40               	moviw [0]fsr1
 15993  153A  00F0               	movwf	??_I2C2_Stop
 15994  153B  3F41               	moviw [1]fsr1
 15995  153C  00F1               	movwf	??_I2C2_Stop+1
 15996  153D  0870               	movf	??_I2C2_Stop,w
 15997  153E  0086               	movwf	6
 15998  153F  0871               	movf	??_I2C2_Stop+1,w
 15999  1540  0087               	movwf	7
 16000  1541  0872               	movf	I2C2_Stop@completion_code,w
 16001  1542  0081               	movwf	1
 16002  1543                     i1l4265:	
 16003                           
 16004                           ;i2c2.c: 591: }
 16005                           ;i2c2.c: 594: i2c2_state = S_MASTER_IDLE;
 16006  1543  01F9               	clrf	_i2c2_state
 16007  1544  0008               	return
 16008  1545                     __end_of_I2C2_Stop:	
 16009                           
 16010                           	psect	text92
 16011  13C6                     __ptext92:	
 16012 ;; *************** function _I2C2_FunctionComplete *****************
 16013 ;; Defined at:
 16014 ;;		line 563 in file "mcc_generated_files/i2c2.c"
 16015 ;; Parameters:    Size  Location     Type
 16016 ;;		None
 16017 ;; Auto vars:     Size  Location     Type
 16018 ;;		None
 16019 ;; Return value:  Size  Location     Type
 16020 ;;                  1    wreg      void 
 16021 ;; Registers used:
 16022 ;;		wreg, status,2, status,0
 16023 ;; Tracked objects:
 16024 ;;		On entry : 0/0
 16025 ;;		On exit  : 0/0
 16026 ;;		Unchanged: 0/0
 16027 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16028 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16029 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16030 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16031 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16032 ;;Total ram usage:        1 bytes
 16033 ;; Hardware stack levels used:    1
 16034 ;; This function calls:
 16035 ;;		Nothing
 16036 ;; This function is called by:
 16037 ;;		_I2C2_ISR
 16038 ;; This function uses a non-reentrant model
 16039 ;;
 16040                           
 16041                           
 16042                           ;psect for function _I2C2_FunctionComplete
 16043  13C6                     _I2C2_FunctionComplete:	
 16044                           
 16045                           ;i2c2.c: 567: p_i2c2_trb_current++;
 16046                           
 16047                           ;incstack = 0
 16048                           ; Regs used in _I2C2_FunctionComplete: [wreg+status,2+status,0]
 16049  13C6  3005               	movlw	5
 16050  13C7  00F0               	movwf	??_I2C2_FunctionComplete
 16051  13C8  0870               	movf	??_I2C2_FunctionComplete,w
 16052  13C9  07F8               	addwf	_p_i2c2_trb_current,f
 16053                           
 16054                           ;i2c2.c: 570: if(--i2c2_trb_count == 0)
 16055  13CA  3001               	movlw	1
 16056  13CB  0021               	movlb	1	; select bank1
 16057  13CC  02E5               	subwf	_i2c2_trb_count^(0+128),f
 16058  13CD  1D03               	btfss	3,2
 16059  13CE  2BD4               	goto	i1l329
 16060                           
 16061                           ;i2c2.c: 571: {
 16062                           ;i2c2.c: 572: i2c2_state = S_MASTER_SEND_STOP;
 16063  13CF  3004               	movlw	4
 16064  13D0  00F0               	movwf	??_I2C2_FunctionComplete
 16065  13D1  0870               	movf	??_I2C2_FunctionComplete,w
 16066  13D2  00F9               	movwf	_i2c2_state
 16067                           
 16068                           ;i2c2.c: 573: }
 16069  13D3  0008               	return
 16070  13D4                     i1l329:	
 16071                           
 16072                           ;i2c2.c: 574: else
 16073                           ;i2c2.c: 575: {
 16074                           ;i2c2.c: 576: i2c2_state = S_MASTER_RESTART;
 16075  13D4  01F9               	clrf	_i2c2_state
 16076  13D5  0AF9               	incf	_i2c2_state,f
 16077  13D6  0008               	return
 16078  13D7                     __end_of_I2C2_FunctionComplete:	
 16079                           
 16080                           	psect	text93
 16081  12CA                     __ptext93:	
 16082 ;; *************** function _I2C2_BusCollisionISR *****************
 16083 ;; Defined at:
 16084 ;;		line 729 in file "mcc_generated_files/i2c2.c"
 16085 ;; Parameters:    Size  Location     Type
 16086 ;;		None
 16087 ;; Auto vars:     Size  Location     Type
 16088 ;;		None
 16089 ;; Return value:  Size  Location     Type
 16090 ;;                  1    wreg      void 
 16091 ;; Registers used:
 16092 ;;		None
 16093 ;; Tracked objects:
 16094 ;;		On entry : 0/0
 16095 ;;		On exit  : 0/0
 16096 ;;		Unchanged: 0/0
 16097 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16098 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16099 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16100 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16101 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16102 ;;Total ram usage:        0 bytes
 16103 ;; Hardware stack levels used:    1
 16104 ;; This function calls:
 16105 ;;		Nothing
 16106 ;; This function is called by:
 16107 ;;		_INTERRUPT_InterruptManager
 16108 ;; This function uses a non-reentrant model
 16109 ;;
 16110                           
 16111                           
 16112                           ;psect for function _I2C2_BusCollisionISR
 16113  12CA                     _I2C2_BusCollisionISR:	
 16114                           
 16115                           ;incstack = 0
 16116                           ; Regs used in _I2C2_BusCollisionISR: []
 16117  12CA  0008               	return
 16118  12CB                     __end_of_I2C2_BusCollisionISR:	
 16119  007E                     btemp	set	126	;btemp
 16120  007E                     int$flags	set	126
 16121  007E                     wtemp0	set	126


Data Sizes:
    Strings     0
    Constant    38
    Data        7
    BSS         148
    Persistent  6
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      7      14
    BANK0            80     78      78
    BANK1            80     45      71
    BANK2            80      0      80
    BANK3            80     12      60
    BANK4            80      0       0
    BANK5            80      0       0
    BANK6            80      0       0
    BANK7            80      0       0
    BANK8            80      0       0
    BANK9            80      0       0
    BANK10           80      0       0
    BANK11           80      0       0
    BANK12           48      0       0

Pointer List with Targets:

    i2c2_tr_queue.ptrb_list.pbuffer	PTR unsigned char  size(2) Largest target is 24
		 -> I2C_BufferRead@ReadAddr(BANK0[1]), I2C_BufferRead@status(BANK0[1]), I2C_ByteWrite@data(BANK0[2]), I2C_ByteWrite@status(BANK0[1]), 
		 -> data(BANK3[8]), b1(BANK3[24]), HMC5883L_ReadBit@tmp(COMMON[1]), HMC5883L_ReadBits@tmp(BANK0[1]), 
		 -> HMC5883L_WriteBit@tmp(COMMON[1]), HMC5883L_WriteBits@tmp(COMMON[1]), heading(BANK3[8]), HMC5883L_TestConnection@tmp(COMMON[3]), 
		 -> MPU6050_ReadBit@tmp(COMMON[1]), MPU6050_ReadBits@tmp(COMMON[1]), MPU6050_WriteBit@tmp(COMMON[1]), MPU6050_WriteBits@tmp(COMMON[1]), 
		 -> MPU6050_GetRawAccel@tempBuffer(COMMON[6]), MPU6050_GetRawAccelGyro@tmpBuffer(COMMON[14]), 

    i2c2_tr_queue.pTrFlag	PTR enum E2993 size(2) Largest target is 24
		 -> I2C_BufferRead@ReadAddr(BANK0[1]), I2C_BufferRead@status(BANK0[1]), I2C_ByteWrite@data(BANK0[2]), I2C_ByteWrite@status(BANK0[1]), 
		 -> data(BANK3[8]), b1(BANK3[24]), HMC5883L_ReadBit@tmp(COMMON[1]), HMC5883L_ReadBits@tmp(BANK0[1]), 
		 -> HMC5883L_WriteBit@tmp(COMMON[1]), HMC5883L_WriteBits@tmp(COMMON[1]), heading(BANK3[8]), HMC5883L_TestConnection@tmp(COMMON[3]), 
		 -> MPU6050_ReadBit@tmp(COMMON[1]), MPU6050_ReadBits@tmp(COMMON[1]), MPU6050_WriteBit@tmp(COMMON[1]), MPU6050_WriteBits@tmp(COMMON[1]), 
		 -> MPU6050_GetRawAccel@tempBuffer(COMMON[6]), MPU6050_GetRawAccelGyro@tmpBuffer(COMMON[14]), 

    i2c2_tr_queue.ptrb_list	PTR struct . size(1) Largest target is 5
		 -> I2C2_MasterRead@trBlock(BANK2[5]), I2C2_MasterWrite@trBlock(BANK2[5]), 

    I2C_BufferRead@pBuffer	PTR unsigned char  size(2) Largest target is 24
		 -> data(BANK3[8]), b1(BANK3[24]), HMC5883L_ReadBit@tmp(COMMON[1]), HMC5883L_ReadBits@tmp(BANK0[1]), 
		 -> HMC5883L_WriteBit@tmp(COMMON[1]), HMC5883L_WriteBits@tmp(COMMON[1]), heading(BANK3[8]), HMC5883L_TestConnection@tmp(COMMON[3]), 
		 -> MPU6050_ReadBit@tmp(COMMON[1]), MPU6050_ReadBits@tmp(COMMON[1]), MPU6050_WriteBit@tmp(COMMON[1]), MPU6050_WriteBits@tmp(COMMON[1]), 
		 -> MPU6050_GetRawAccel@tempBuffer(COMMON[6]), MPU6050_GetRawAccelGyro@tmpBuffer(COMMON[14]), 

    I2C_ByteWrite@pBuffer	PTR unsigned char  size(1) Largest target is 1
		 -> BMP_readTemperature@tmp(BANK1[1]), BMP_init@t(BANK0[1]), HMC5883L_WriteBit@tmp(COMMON[1]), HMC5883L_WriteBits@tmp(COMMON[1]), 
		 -> HMC5883L_SetMode@tmp(COMMON[1]), HMC5883L_SetGain@tmp(COMMON[1]), HMC5883L_Initialize@tmp(COMMON[1]), MPU6050_WriteBit@tmp(COMMON[1]), 
		 -> MPU6050_WriteBits@tmp(COMMON[1]), 

    Wireless_sendData@payload	PTR unsigned char  size(1) Largest target is 7
		 -> Wireless_packageData@data(BANK1[7]), Wireless_determineTransmitPower@testPayload(BANK0[1]), 

    RF_DataIsReady@channel	PTR unsigned char  size(1) Largest target is 1
		 -> Wireless_checkDataReceived@channel(BANK0[1]), 

    RF_RxPayload@payload	PTR unsigned char  size(1) Largest target is 2
		 -> Wireless_checkDataReceived@data(BANK0[2]), 

    RF_TxPayload@payload	PTR unsigned char  size(1) Largest target is 7
		 -> Wireless_packageData@data(BANK1[7]), Wireless_determineTransmitPower@testPayload(BANK0[1]), 

    RF_WriteRegisterData@buf	PTR unsigned char  size(2) Largest target is 7
		 -> Wireless_packageData@data(BANK1[7]), Wireless_determineTransmitPower@testPayload(BANK0[1]), Wireless_init@TADDR(CODE[5]), 

    RF_ReadRegisterData@buf	PTR unsigned char  size(1) Largest target is 2
		 -> Wireless_checkDataReceived@data(BANK0[2]), Wireless_wake@reg(BANK0[1]), Wireless_sleep@reg(BANK0[1]), Wireless_changeTransmitPower@val(BANK0[1]), 

    SPI_WriteBuffer@bufOut	PTR unsigned char  size(2) Largest target is 7
		 -> Wireless_packageData@data(BANK1[7]), Wireless_determineTransmitPower@testPayload(BANK0[1]), Wireless_init@TADDR(CODE[5]), 

    SPI_WriteReadBuffer@bufOut	PTR unsigned char  size(1) Largest target is 2
		 -> Wireless_checkDataReceived@data(BANK0[2]), Wireless_wake@reg(BANK0[1]), Wireless_sleep@reg(BANK0[1]), Wireless_changeTransmitPower@val(BANK0[1]), 

    SPI_WriteReadBuffer@bufIn	PTR unsigned char  size(1) Largest target is 2
		 -> Wireless_checkDataReceived@data(BANK0[2]), Wireless_wake@reg(BANK0[1]), Wireless_sleep@reg(BANK0[1]), Wireless_changeTransmitPower@val(BANK0[1]), 

    HMC5883L_I2C_BufferRead@pBuffer	PTR unsigned char  size(2) Largest target is 14
		 -> HMC5883L_ReadBit@tmp(COMMON[1]), HMC5883L_ReadBits@tmp(BANK0[1]), HMC5883L_WriteBit@tmp(COMMON[1]), HMC5883L_WriteBits@tmp(COMMON[1]), 
		 -> heading(BANK3[8]), HMC5883L_TestConnection@tmp(COMMON[3]), MPU6050_ReadBit@tmp(COMMON[1]), MPU6050_ReadBits@tmp(COMMON[1]), 
		 -> MPU6050_WriteBit@tmp(COMMON[1]), MPU6050_WriteBits@tmp(COMMON[1]), MPU6050_GetRawAccel@tempBuffer(COMMON[6]), MPU6050_GetRawAccelGyro@tmpBuffer(COMMON[14]), 

    HMC5883L_ReadBits@data	PTR unsigned char  size(1) Largest target is 1
		 -> BMP_readTemperature@tmp(BANK1[1]), HMC5883L_GetHeading@tmp(COMMON[1]), HMC5883L_GetMode@tmp(COMMON[1]), HMC5883L_GetGain@tmp(COMMON[1]), 
		 -> HMC5883L_GetMeasurementBias@tmp(COMMON[1]), HMC5883L_GetDataRate@tmp(COMMON[1]), HMC5883L_GetSampleAveraging@tmp(COMMON[1]), 

    I2C2_MasterWriteTRBBuild@pdata	PTR unsigned char  size(1) Largest target is 2
		 -> I2C_BufferRead@ReadAddr(BANK0[1]), I2C_ByteWrite@data(BANK0[2]), 

    I2C2_MasterWriteTRBBuild@ptrb.pbuffer	PTR unsigned char  size(2) Largest target is 24
		 -> I2C_BufferRead@ReadAddr(BANK0[1]), I2C_BufferRead@status(BANK0[1]), I2C_ByteWrite@data(BANK0[2]), I2C_ByteWrite@status(BANK0[1]), 
		 -> data(BANK3[8]), b1(BANK3[24]), HMC5883L_ReadBit@tmp(COMMON[1]), HMC5883L_ReadBits@tmp(BANK0[1]), 
		 -> HMC5883L_WriteBit@tmp(COMMON[1]), HMC5883L_WriteBits@tmp(COMMON[1]), heading(BANK3[8]), HMC5883L_TestConnection@tmp(COMMON[3]), 
		 -> MPU6050_ReadBit@tmp(COMMON[1]), MPU6050_ReadBits@tmp(COMMON[1]), MPU6050_WriteBit@tmp(COMMON[1]), MPU6050_WriteBits@tmp(COMMON[1]), 
		 -> MPU6050_GetRawAccel@tempBuffer(COMMON[6]), MPU6050_GetRawAccelGyro@tmpBuffer(COMMON[14]), 

    I2C2_MasterWriteTRBBuild@ptrb	PTR struct . size(1) Largest target is 5
		 -> I2C2_MasterWrite@trBlock(BANK2[5]), 

    I2C2_MasterReadTRBBuild@pdata	PTR unsigned char  size(2) Largest target is 24
		 -> data(BANK3[8]), b1(BANK3[24]), HMC5883L_ReadBit@tmp(COMMON[1]), HMC5883L_ReadBits@tmp(BANK0[1]), 
		 -> HMC5883L_WriteBit@tmp(COMMON[1]), HMC5883L_WriteBits@tmp(COMMON[1]), heading(BANK3[8]), HMC5883L_TestConnection@tmp(COMMON[3]), 
		 -> MPU6050_ReadBit@tmp(COMMON[1]), MPU6050_ReadBits@tmp(COMMON[1]), MPU6050_WriteBit@tmp(COMMON[1]), MPU6050_WriteBits@tmp(COMMON[1]), 
		 -> MPU6050_GetRawAccel@tempBuffer(COMMON[6]), MPU6050_GetRawAccelGyro@tmpBuffer(COMMON[14]), 

    I2C2_MasterReadTRBBuild@ptrb.pbuffer	PTR unsigned char  size(2) Largest target is 24
		 -> I2C_BufferRead@ReadAddr(BANK0[1]), I2C_BufferRead@status(BANK0[1]), I2C_ByteWrite@data(BANK0[2]), I2C_ByteWrite@status(BANK0[1]), 
		 -> data(BANK3[8]), b1(BANK3[24]), HMC5883L_ReadBit@tmp(COMMON[1]), HMC5883L_ReadBits@tmp(BANK0[1]), 
		 -> HMC5883L_WriteBit@tmp(COMMON[1]), HMC5883L_WriteBits@tmp(COMMON[1]), heading(BANK3[8]), HMC5883L_TestConnection@tmp(COMMON[3]), 
		 -> MPU6050_ReadBit@tmp(COMMON[1]), MPU6050_ReadBits@tmp(COMMON[1]), MPU6050_WriteBit@tmp(COMMON[1]), MPU6050_WriteBits@tmp(COMMON[1]), 
		 -> MPU6050_GetRawAccel@tempBuffer(COMMON[6]), MPU6050_GetRawAccelGyro@tmpBuffer(COMMON[14]), 

    I2C2_MasterReadTRBBuild@ptrb	PTR struct . size(1) Largest target is 5
		 -> I2C2_MasterRead@trBlock(BANK2[5]), 

    i2c2_object.pTrTail.ptrb_list.pbuffer	PTR unsigned char  size(2) Largest target is 24
		 -> I2C_BufferRead@ReadAddr(BANK0[1]), I2C_BufferRead@status(BANK0[1]), I2C_ByteWrite@data(BANK0[2]), I2C_ByteWrite@status(BANK0[1]), 
		 -> data(BANK3[8]), b1(BANK3[24]), HMC5883L_ReadBit@tmp(COMMON[1]), HMC5883L_ReadBits@tmp(BANK0[1]), 
		 -> HMC5883L_WriteBit@tmp(COMMON[1]), HMC5883L_WriteBits@tmp(COMMON[1]), heading(BANK3[8]), HMC5883L_TestConnection@tmp(COMMON[3]), 
		 -> MPU6050_ReadBit@tmp(COMMON[1]), MPU6050_ReadBits@tmp(COMMON[1]), MPU6050_WriteBit@tmp(COMMON[1]), MPU6050_WriteBits@tmp(COMMON[1]), 
		 -> MPU6050_GetRawAccel@tempBuffer(COMMON[6]), MPU6050_GetRawAccelGyro@tmpBuffer(COMMON[14]), 

    i2c2_object.pTrTail.pTrFlag	PTR enum E2993 size(2) Largest target is 24
		 -> I2C_BufferRead@ReadAddr(BANK0[1]), I2C_BufferRead@status(BANK0[1]), I2C_ByteWrite@data(BANK0[2]), I2C_ByteWrite@status(BANK0[1]), 
		 -> data(BANK3[8]), b1(BANK3[24]), HMC5883L_ReadBit@tmp(COMMON[1]), HMC5883L_ReadBits@tmp(BANK0[1]), 
		 -> HMC5883L_WriteBit@tmp(COMMON[1]), HMC5883L_WriteBits@tmp(COMMON[1]), heading(BANK3[8]), HMC5883L_TestConnection@tmp(COMMON[3]), 
		 -> MPU6050_ReadBit@tmp(COMMON[1]), MPU6050_ReadBits@tmp(COMMON[1]), MPU6050_WriteBit@tmp(COMMON[1]), MPU6050_WriteBits@tmp(COMMON[1]), 
		 -> MPU6050_GetRawAccel@tempBuffer(COMMON[6]), MPU6050_GetRawAccelGyro@tmpBuffer(COMMON[14]), 

    i2c2_object.pTrTail.ptrb_list	PTR struct . size(1) Largest target is 5
		 -> I2C2_MasterRead@trBlock(BANK2[5]), I2C2_MasterWrite@trBlock(BANK2[5]), 

    I2C2_MasterTRBInsert@ptrb_list	PTR struct . size(1) Largest target is 5
		 -> I2C2_MasterRead@trBlock(BANK2[5]), I2C2_MasterWrite@trBlock(BANK2[5]), 

    I2C2_MasterTRBInsert@pflag	PTR enum E2993 size(1) Largest target is 1
		 -> I2C_BufferRead@status(BANK0[1]), I2C_ByteWrite@status(BANK0[1]), 

    I2C2_MasterRead@pflag	PTR enum E2993 size(1) Largest target is 1
		 -> I2C_BufferRead@status(BANK0[1]), 

    I2C2_MasterRead@pdata	PTR unsigned char  size(2) Largest target is 24
		 -> data(BANK3[8]), b1(BANK3[24]), HMC5883L_ReadBit@tmp(COMMON[1]), HMC5883L_ReadBits@tmp(BANK0[1]), 
		 -> HMC5883L_WriteBit@tmp(COMMON[1]), HMC5883L_WriteBits@tmp(COMMON[1]), heading(BANK3[8]), HMC5883L_TestConnection@tmp(COMMON[3]), 
		 -> MPU6050_ReadBit@tmp(COMMON[1]), MPU6050_ReadBits@tmp(COMMON[1]), MPU6050_WriteBit@tmp(COMMON[1]), MPU6050_WriteBits@tmp(COMMON[1]), 
		 -> MPU6050_GetRawAccel@tempBuffer(COMMON[6]), MPU6050_GetRawAccelGyro@tmpBuffer(COMMON[14]), 

    F3105.pbuffer	PTR unsigned char  size(2) Largest target is 24
		 -> I2C_BufferRead@ReadAddr(BANK0[1]), I2C_BufferRead@status(BANK0[1]), I2C_ByteWrite@data(BANK0[2]), I2C_ByteWrite@status(BANK0[1]), 
		 -> data(BANK3[8]), b1(BANK3[24]), HMC5883L_ReadBit@tmp(COMMON[1]), HMC5883L_ReadBits@tmp(BANK0[1]), 
		 -> HMC5883L_WriteBit@tmp(COMMON[1]), HMC5883L_WriteBits@tmp(COMMON[1]), heading(BANK3[8]), HMC5883L_TestConnection@tmp(COMMON[3]), 
		 -> MPU6050_ReadBit@tmp(COMMON[1]), MPU6050_ReadBits@tmp(COMMON[1]), MPU6050_WriteBit@tmp(COMMON[1]), MPU6050_WriteBits@tmp(COMMON[1]), 
		 -> MPU6050_GetRawAccel@tempBuffer(COMMON[6]), MPU6050_GetRawAccelGyro@tmpBuffer(COMMON[14]), 

    I2C2_MasterWrite@pflag	PTR enum E2993 size(1) Largest target is 1
		 -> I2C_BufferRead@status(BANK0[1]), I2C_ByteWrite@status(BANK0[1]), 

    I2C2_MasterWrite@pdata	PTR unsigned char  size(1) Largest target is 2
		 -> I2C_BufferRead@ReadAddr(BANK0[1]), I2C_ByteWrite@data(BANK0[2]), 

    F3100.pbuffer	PTR unsigned char  size(2) Largest target is 24
		 -> I2C_BufferRead@ReadAddr(BANK0[1]), I2C_BufferRead@status(BANK0[1]), I2C_ByteWrite@data(BANK0[2]), I2C_ByteWrite@status(BANK0[1]), 
		 -> data(BANK3[8]), b1(BANK3[24]), HMC5883L_ReadBit@tmp(COMMON[1]), HMC5883L_ReadBits@tmp(BANK0[1]), 
		 -> HMC5883L_WriteBit@tmp(COMMON[1]), HMC5883L_WriteBits@tmp(COMMON[1]), heading(BANK3[8]), HMC5883L_TestConnection@tmp(COMMON[3]), 
		 -> MPU6050_ReadBit@tmp(COMMON[1]), MPU6050_ReadBits@tmp(COMMON[1]), MPU6050_WriteBit@tmp(COMMON[1]), MPU6050_WriteBits@tmp(COMMON[1]), 
		 -> MPU6050_GetRawAccel@tempBuffer(COMMON[6]), MPU6050_GetRawAccelGyro@tmpBuffer(COMMON[14]), 

    I2C2_ISR@pi2c_buf_ptr	PTR unsigned char  size(2) Largest target is 24
		 -> I2C_BufferRead@ReadAddr(BANK0[1]), I2C_BufferRead@status(BANK0[1]), I2C_ByteWrite@data(BANK0[2]), I2C_ByteWrite@status(BANK0[1]), 
		 -> data(BANK3[8]), b1(BANK3[24]), HMC5883L_ReadBit@tmp(COMMON[1]), HMC5883L_ReadBits@tmp(BANK0[1]), 
		 -> HMC5883L_WriteBit@tmp(COMMON[1]), HMC5883L_WriteBits@tmp(COMMON[1]), heading(BANK3[8]), HMC5883L_TestConnection@tmp(COMMON[3]), 
		 -> MPU6050_ReadBit@tmp(COMMON[1]), MPU6050_ReadBits@tmp(COMMON[1]), MPU6050_WriteBit@tmp(COMMON[1]), MPU6050_WriteBits@tmp(COMMON[1]), 
		 -> MPU6050_GetRawAccel@tempBuffer(COMMON[6]), MPU6050_GetRawAccelGyro@tmpBuffer(COMMON[14]), NULL(NULL[0]), 

    p_i2c2_trb_current.pbuffer	PTR unsigned char  size(2) Largest target is 24
		 -> I2C_BufferRead@ReadAddr(BANK0[1]), I2C_BufferRead@status(BANK0[1]), I2C_ByteWrite@data(BANK0[2]), I2C_ByteWrite@status(BANK0[1]), 
		 -> data(BANK3[8]), b1(BANK3[24]), HMC5883L_ReadBit@tmp(COMMON[1]), HMC5883L_ReadBits@tmp(BANK0[1]), 
		 -> HMC5883L_WriteBit@tmp(COMMON[1]), HMC5883L_WriteBits@tmp(COMMON[1]), heading(BANK3[8]), HMC5883L_TestConnection@tmp(COMMON[3]), 
		 -> MPU6050_ReadBit@tmp(COMMON[1]), MPU6050_ReadBits@tmp(COMMON[1]), MPU6050_WriteBit@tmp(COMMON[1]), MPU6050_WriteBits@tmp(COMMON[1]), 
		 -> MPU6050_GetRawAccel@tempBuffer(COMMON[6]), MPU6050_GetRawAccelGyro@tmpBuffer(COMMON[14]), 

    p_i2c2_trb_current	PTR struct . size(1) Largest target is 5
		 -> I2C2_MasterRead@trBlock(BANK2[5]), I2C2_MasterWrite@trBlock(BANK2[5]), NULL(NULL[0]), 

    i2c2_object.pTrHead.pTrFlag	PTR enum E2993 size(2) Largest target is 24
		 -> I2C_BufferRead@ReadAddr(BANK0[1]), I2C_BufferRead@status(BANK0[1]), I2C_ByteWrite@data(BANK0[2]), I2C_ByteWrite@status(BANK0[1]), 
		 -> data(BANK3[8]), b1(BANK3[24]), HMC5883L_ReadBit@tmp(COMMON[1]), HMC5883L_ReadBits@tmp(BANK0[1]), 
		 -> HMC5883L_WriteBit@tmp(COMMON[1]), HMC5883L_WriteBits@tmp(COMMON[1]), heading(BANK3[8]), HMC5883L_TestConnection@tmp(COMMON[3]), 
		 -> MPU6050_ReadBit@tmp(COMMON[1]), MPU6050_ReadBits@tmp(COMMON[1]), MPU6050_WriteBit@tmp(COMMON[1]), MPU6050_WriteBits@tmp(COMMON[1]), 
		 -> MPU6050_GetRawAccel@tempBuffer(COMMON[6]), MPU6050_GetRawAccelGyro@tmpBuffer(COMMON[14]), 

    i2c2_object.pTrHead.ptrb_list	PTR struct . size(1) Largest target is 5
		 -> I2C2_MasterRead@trBlock(BANK2[5]), I2C2_MasterWrite@trBlock(BANK2[5]), 

    S587$pbuffer	PTR unsigned char  size(2) Largest target is 24
		 -> I2C_BufferRead@ReadAddr(BANK0[1]), I2C_BufferRead@status(BANK0[1]), I2C_ByteWrite@data(BANK0[2]), I2C_ByteWrite@status(BANK0[1]), 
		 -> data(BANK3[8]), b1(BANK3[24]), HMC5883L_ReadBit@tmp(COMMON[1]), HMC5883L_ReadBits@tmp(BANK0[1]), 
		 -> HMC5883L_WriteBit@tmp(COMMON[1]), HMC5883L_WriteBits@tmp(COMMON[1]), heading(BANK3[8]), HMC5883L_TestConnection@tmp(COMMON[3]), 
		 -> MPU6050_ReadBit@tmp(COMMON[1]), MPU6050_ReadBits@tmp(COMMON[1]), MPU6050_WriteBit@tmp(COMMON[1]), MPU6050_WriteBits@tmp(COMMON[1]), 
		 -> MPU6050_GetRawAccel@tempBuffer(COMMON[6]), MPU6050_GetRawAccelGyro@tmpBuffer(COMMON[14]), 

    p_i2c2_current.pbuffer	PTR unsigned char  size(2) Largest target is 24
		 -> I2C_BufferRead@ReadAddr(BANK0[1]), I2C_BufferRead@status(BANK0[1]), I2C_ByteWrite@data(BANK0[2]), I2C_ByteWrite@status(BANK0[1]), 
		 -> data(BANK3[8]), b1(BANK3[24]), HMC5883L_ReadBit@tmp(COMMON[1]), HMC5883L_ReadBits@tmp(BANK0[1]), 
		 -> HMC5883L_WriteBit@tmp(COMMON[1]), HMC5883L_WriteBits@tmp(COMMON[1]), heading(BANK3[8]), HMC5883L_TestConnection@tmp(COMMON[3]), 
		 -> MPU6050_ReadBit@tmp(COMMON[1]), MPU6050_ReadBits@tmp(COMMON[1]), MPU6050_WriteBit@tmp(COMMON[1]), MPU6050_WriteBits@tmp(COMMON[1]), 
		 -> MPU6050_GetRawAccel@tempBuffer(COMMON[6]), MPU6050_GetRawAccelGyro@tmpBuffer(COMMON[14]), 

    S599$pTrFlag	PTR enum E2993 size(2) Largest target is 24
		 -> I2C_BufferRead@ReadAddr(BANK0[1]), I2C_BufferRead@status(BANK0[1]), I2C_ByteWrite@data(BANK0[2]), I2C_ByteWrite@status(BANK0[1]), 
		 -> data(BANK3[8]), b1(BANK3[24]), HMC5883L_ReadBit@tmp(COMMON[1]), HMC5883L_ReadBits@tmp(BANK0[1]), 
		 -> HMC5883L_WriteBit@tmp(COMMON[1]), HMC5883L_WriteBits@tmp(COMMON[1]), heading(BANK3[8]), HMC5883L_TestConnection@tmp(COMMON[3]), 
		 -> MPU6050_ReadBit@tmp(COMMON[1]), MPU6050_ReadBits@tmp(COMMON[1]), MPU6050_WriteBit@tmp(COMMON[1]), MPU6050_WriteBits@tmp(COMMON[1]), 
		 -> MPU6050_GetRawAccel@tempBuffer(COMMON[6]), MPU6050_GetRawAccelGyro@tmpBuffer(COMMON[14]), 

    p_i2c2_current.pTrFlag	PTR enum E2993 size(2) Largest target is 24
		 -> I2C_BufferRead@ReadAddr(BANK0[1]), I2C_BufferRead@status(BANK0[1]), I2C_ByteWrite@data(BANK0[2]), I2C_ByteWrite@status(BANK0[1]), 
		 -> data(BANK3[8]), b1(BANK3[24]), HMC5883L_ReadBit@tmp(COMMON[1]), HMC5883L_ReadBits@tmp(BANK0[1]), 
		 -> HMC5883L_WriteBit@tmp(COMMON[1]), HMC5883L_WriteBits@tmp(COMMON[1]), heading(BANK3[8]), HMC5883L_TestConnection@tmp(COMMON[3]), 
		 -> MPU6050_ReadBit@tmp(COMMON[1]), MPU6050_ReadBits@tmp(COMMON[1]), MPU6050_WriteBit@tmp(COMMON[1]), MPU6050_WriteBits@tmp(COMMON[1]), 
		 -> MPU6050_GetRawAccel@tempBuffer(COMMON[6]), MPU6050_GetRawAccelGyro@tmpBuffer(COMMON[14]), 

    S599$ptrb_list	PTR struct . size(1) Largest target is 5
		 -> I2C2_MasterRead@trBlock(BANK2[5]), I2C2_MasterWrite@trBlock(BANK2[5]), 

    p_i2c2_current.ptrb_list	PTR struct . size(1) Largest target is 5
		 -> I2C2_MasterRead@trBlock(BANK2[5]), I2C2_MasterWrite@trBlock(BANK2[5]), 

    p_i2c2_current	PTR struct . size(1) Largest target is 5
		 -> i2c2_tr_queue(BANK2[4]), NULL(NULL[0]), 

    S610$pTrHead	PTR struct . size(1) Largest target is 5
		 -> i2c2_tr_queue(BANK2[4]), 

    i2c2_object.pTrHead	PTR struct . size(1) Largest target is 5
		 -> i2c2_tr_queue(BANK2[4]), 

    S610$pTrTail	PTR struct . size(1) Largest target is 5
		 -> i2c2_tr_queue(BANK2[4]), 

    i2c2_object.pTrTail	PTR struct . size(1) Largest target is 5
		 -> i2c2_tr_queue(BANK2[4]), 

    TMR1_SetInterruptHandler@InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> TMR1_DefaultInterruptHandler(), 

    TMR1_InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> TMR1_DefaultInterruptHandler(), Absolute function(), 

    IOCAF2_SetInterruptHandler@InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> IOCAF2_DefaultInterruptHandler(), 

    IOCAF2_InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), IOCAF2_DefaultInterruptHandler(), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _INTERRUPT_InterruptManager in COMMON

    _INTERRUPT_InterruptManager->_I2C2_ISR
    _I2C2_ISR->_I2C2_Stop

Critical Paths under _main in BANK0

    _Wireless_wake->_RF_ReadRegisterData
    _Wireless_sleep->_RF_ReadRegisterData
    _Wireless_packageData->___fttol
    _Wireless_determineTransmitPower->_Wireless_sendData
    _Wireless_sendData->_RF_TxPayload
    _RF_TxPayload->_RF_WriteRegisterData
    _RF_Write->_SPI_WriteRead
    _RF_GetStatus->_RF_WriteRead
    _RF_WriteRead->_SPI_WriteRead
    _Wireless_changeTransmitPower->_RF_ReadRegisterData
    _Wireless_checkDataReceived->_RF_RxPayload
    _RF_RxPayload->_RF_ReadRegisterData
    _RF_ReadRegisterData->_SPI_WriteReadBuffer
    _SPI_WriteReadBuffer->_SPI_WriteRead
    _RF_DataIsReady->_RF_ReadRegister
    _RF_ReadRegister->_SPI_WriteRead
    _Sensor_getSupplyVoltage->___ftdiv
    _Wireless_init->_RF_WriteRegisterData
    _RF_WriteRegisterData->_SPI_WriteBuffer
    _SPI_WriteBuffer->_SPI_WriteRead
    _RF_ResetStatusIRQ->_RF_WriteRegister
    _RF_WriteRegister->_SPI_WriteRead
    _SPI_WriteRead->_SPI1_Exchange8bit
    _Timeout_updateCurrentTime->___lmul
    _TMR1_Initialize->_TMR1_SetInterruptHandler
    _PIN_MANAGER_Initialize->_IOCAF2_SetInterruptHandler
    _BMP_readTemperature->___fttol
    ___lwtoft->___ftpack
    ___fttol->___ftmul
    ___ftneg->___ftdiv
    ___ftmul->___ftadd
    ___ftdiv->___altoft
    ___ftadd->_Sensor_getSupplyVoltage
    ___awtoft->___ftpack
    ___altoft->___ftpack
    ___altoft->___ftpack
    _HMC5883L_ReadBits->_HMC5883L_I2C_BufferRead
    _HMC5883L_I2C_BufferRead->_I2C_BufferRead
    _BMP_init->_I2C_BufferRead
    _I2C_ByteWrite->_I2C2_MasterWrite
    _I2C_BufferRead->_I2C2_MasterRead
    _I2C2_MasterWrite->_I2C2_MasterWriteTRBBuild
    _I2C2_MasterRead->_I2C2_MasterReadTRBBuild

Critical Paths under _INTERRUPT_InterruptManager in BANK0

    None.

Critical Paths under _main in BANK1

    _main->_Wireless_packageData
    _Wireless_packageData->_BMP_readTemperature
    _BMP_readTemperature->___fttol

Critical Paths under _INTERRUPT_InterruptManager in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK12

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                14    14      0  108255
                                             43 BANK1      2     2      0
                                              0 BANK3     12    12      0
                           _BMP_init
                _BMP_readTemperature
                          _DOOR_init
                           _DOOR_run
                  _SYSTEM_Initialize
             _Sensor_peripheralSleep
           _Timeout_getGlobalCounter
          _Timeout_updateCurrentTime
    _Wireless_determineTransmitPower
                      _Wireless_init
               _Wireless_packageData
                     _Wireless_sleep
                      _Wireless_wake
                            ___lldiv
                            ___lwdiv
                       _setSleepTime
 ---------------------------------------------------------------------------------
 (1) _setSleepTime                                         2     0      2     154
                                              1 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (1) ___lwdiv                                              8     4      4     703
                                              1 BANK0      8     4      4
 ---------------------------------------------------------------------------------
 (1) ___lldiv                                             14     6      8     395
                                              1 BANK0     14     6      8
 ---------------------------------------------------------------------------------
 (1) _Wireless_wake                                        2     2      0    2442
                                             15 BANK0      2     2      0
                _RF_ReadRegisterData
                   _RF_WriteRegister
 ---------------------------------------------------------------------------------
 (1) _Wireless_sleep                                       2     2      0    2442
                                             15 BANK0      2     2      0
                _RF_ReadRegisterData
                   _RF_WriteRegister
 ---------------------------------------------------------------------------------
 (1) _Wireless_packageData                                17    13      4   33630
                                             26 BANK1     17    13      4
                _BMP_readTemperature (ARG)
               _Diag_getSensorHealth
            _Sensor_getSupplyVoltage
         _Wireless_checkDataReceived
    _Wireless_determineTransmitPower
                  _Wireless_sendData
                            ___aldiv
                            ___ftadd
                            ___ftmul
                            ___fttol
                            ___lldiv (ARG)
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (2) _Wireless_determineTransmitPower                      6     6      0    7359
                                             21 BANK0      6     6      0
       _Wireless_changeTransmitPower
  _Wireless_isDataTransmitSuccessful
                  _Wireless_sendData
                              _limit
 ---------------------------------------------------------------------------------
 (2) _Wireless_sendData                                    4     3      1    3104
                                             17 BANK0      4     3      1
                       _RF_GetStatus
                  _RF_ResetStatusIRQ
                       _RF_TxPayload
 ---------------------------------------------------------------------------------
 (3) _RF_TxPayload                                         3     2      1    1536
                                             14 BANK0      3     2      1
                           _RF_Write
               _RF_WriteRegisterData
 ---------------------------------------------------------------------------------
 (4) _RF_Write                                             1     1      0      93
                                              3 BANK0      1     1      0
                      _SPI_WriteRead
 ---------------------------------------------------------------------------------
 (3) _Wireless_isDataTransmitSuccessful                    2     2      0     161
                                              5 BANK0      2     2      0
                       _RF_GetStatus
 ---------------------------------------------------------------------------------
 (3) _RF_GetStatus                                         0     0      0     127
                       _RF_WriteRead
 ---------------------------------------------------------------------------------
 (4) _RF_WriteRead                                         2     2      0     127
                                              3 BANK0      2     2      0
                      _SPI_WriteRead
 ---------------------------------------------------------------------------------
 (3) _Wireless_changeTransmitPower                         5     5      0    3189
                                             15 BANK0      5     5      0
                _RF_ReadRegisterData
                   _RF_WriteRegister
                              _limit
 ---------------------------------------------------------------------------------
 (3) _limit                                                7     1      6     679
                                              1 BANK0      7     1      6
 ---------------------------------------------------------------------------------
 (2) _Wireless_checkDataReceived                           7     7      0    2324
                                             19 BANK0      7     7      0
                     _RF_DataIsReady
                       _RF_RxPayload
                             ___lmul
 ---------------------------------------------------------------------------------
 (3) _RF_RxPayload                                         4     3      1    1415
                                             15 BANK0      4     3      1
                _RF_ReadRegisterData
 ---------------------------------------------------------------------------------
 (2) _RF_ReadRegisterData                                  5     3      2    1243
                                             10 BANK0      5     3      2
                      _SPI_WriteRead
                _SPI_WriteReadBuffer
 ---------------------------------------------------------------------------------
 (3) _SPI_WriteReadBuffer                                  7     5      2     441
                                              3 BANK0      7     5      2
                      _SPI_WriteRead
 ---------------------------------------------------------------------------------
 (3) _RF_DataIsReady                                       3     3      0     292
                                              6 BANK0      3     3      0
                    _RF_ReadRegister
 ---------------------------------------------------------------------------------
 (4) _RF_ReadRegister                                      3     3      0     127
                                              3 BANK0      3     3      0
                      _SPI_WriteRead
 ---------------------------------------------------------------------------------
 (2) _Sensor_getSupplyVoltage                              8     5      3    7868
                                             33 BANK0      8     5      3
            _ADC_GetConversionResult
               _ADC_IsConversionDone
                  _ADC_SelectChannel
                _ADC_StartConversion
                  _FVR_IsOutputReady
             _Sensor_peripheralSleep
              _Sensor_peripheralWake
                            ___ftdiv
                           ___lwtoft
 ---------------------------------------------------------------------------------
 (3) _Sensor_peripheralWake                                0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _Sensor_peripheralSleep                               0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _FVR_IsOutputReady                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _ADC_StartConversion                                  0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _ADC_SelectChannel                                    2     2      0      31
                                              1 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (3) _ADC_IsConversionDone                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _ADC_GetConversionResult                              2     0      2       0
                                              1 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (2) _Diag_getSensorHealth                                 2     2      0      43
                                              1 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _Wireless_init                                        2     2      0    3552
                                             14 BANK0      2     2      0
                            _RF_Init
                  _RF_ResetStatusIRQ
                   _RF_WriteRegister
               _RF_WriteRegisterData
 ---------------------------------------------------------------------------------
 (4) _RF_WriteRegisterData                                 5     2      3    1271
                                              9 BANK0      5     2      3
                    _SPI_WriteBuffer
                      _SPI_WriteRead
 ---------------------------------------------------------------------------------
 (5) _SPI_WriteBuffer                                      6     3      3     346
                                              3 BANK0      6     3      3
                      _SPI_WriteRead
 ---------------------------------------------------------------------------------
 (3) _RF_ResetStatusIRQ                                    2     2      0    1156
                                              5 BANK0      2     2      0
                   _RF_WriteRegister
 ---------------------------------------------------------------------------------
 (2) _RF_WriteRegister                                     2     1      1    1125
                                              3 BANK0      2     1      1
                      _SPI_WriteRead
 ---------------------------------------------------------------------------------
 (3) _SPI_WriteRead                                        1     1      0      62
                                              2 BANK0      1     1      0
                  _SPI1_Exchange8bit
 ---------------------------------------------------------------------------------
 (4) _SPI1_Exchange8bit                                    1     1      0      31
                                              1 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _RF_Init                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Timeout_updateCurrentTime                            8     8      0     617
                                             13 BANK0      8     8      0
                     _TMR1_ReadTimer
                             ___lmul
 ---------------------------------------------------------------------------------
 (3) ___lmul                                              12     4      8     444
                                              1 BANK0     12     4      8
 ---------------------------------------------------------------------------------
 (2) _TMR1_ReadTimer                                      11     9      2     102
                                              1 BANK0     11     9      2
 ---------------------------------------------------------------------------------
 (1) _Timeout_getGlobalCounter                             4     0      4       0
                                              1 BANK0      4     0      4
 ---------------------------------------------------------------------------------
 (1) _SYSTEM_Initialize                                    0     0      0     216
                     _ADC_Initialize
                     _FVR_Initialize
                    _I2C2_Initialize
              _OSCILLATOR_Initialize
             _PIN_MANAGER_Initialize
                    _SPI1_Initialize
                    _TMR1_Initialize
                    _TMR2_Initialize
                     _WDT_Initialize
 ---------------------------------------------------------------------------------
 (2) _WDT_Initialize                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _TMR2_Initialize                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _TMR1_Initialize                                      0     0      0     108
           _TMR1_SetInterruptHandler
 ---------------------------------------------------------------------------------
 (3) _TMR1_SetInterruptHandler                             2     0      2     108
                                              1 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (2) _SPI1_Initialize                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _PIN_MANAGER_Initialize                               0     0      0     108
         _IOCAF2_SetInterruptHandler
 ---------------------------------------------------------------------------------
 (3) _IOCAF2_SetInterruptHandler                           2     0      2     108
                                              1 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (2) _OSCILLATOR_Initialize                                0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _I2C2_Initialize                                      1     1      0       0
                                              1 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _FVR_Initialize                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _ADC_Initialize                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _DOOR_run                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _DOOR_init                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _BMP_readTemperature                                 20    17      3   48899
                                              6 BANK1     20    17      3
                           _BMP_init
           _Diag_getTempSensorHealth
           _Diag_setTempSensorHealth
                  _HMC5883L_ReadBits
                     _I2C_BufferRead
                      _I2C_ByteWrite
                            ___aldiv
                           ___altoft
                           ___awtoft
                            ___ftadd
                            ___ftdiv
                            ___ftmul
                            ___ftneg
                            ___fttol
                           ___lwtoft
 ---------------------------------------------------------------------------------
 (3) ___lwtoft                                             4     1      3    2923
                                              9 BANK0      4     1      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (2) ___fttol                                             14    10      4     679
                                             70 BANK0      8     4      4
                                              0 BANK1      6     6      0
            _Sensor_getSupplyVoltage (ARG)
                           ___altoft (ARG)
                            ___ftadd (ARG)
                            ___ftmul (ARG)
 ---------------------------------------------------------------------------------
 (2) ___ftneg                                              3     0      3     524
                                             33 BANK0      3     0      3
                            ___ftdiv (ARG)
                           ___lwtoft (ARG)
 ---------------------------------------------------------------------------------
 (2) ___ftmul                                             16    10      6    4338
                                             54 BANK0     16    10      6
            _Sensor_getSupplyVoltage (ARG)
                           ___altoft (ARG)
                           ___awtoft (ARG)
                            ___ftadd (ARG)
                            ___ftdiv (ARG)
                            ___ftneg (ARG)
                           ___ftpack
                           ___lwtoft (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftdiv                                             16    10      6    4846
                                             17 BANK0     16    10      6
                           ___altoft (ARG)
                           ___ftpack
                           ___ftpack (ARG)
                           ___lwtoft (ARG)
 ---------------------------------------------------------------------------------
 (2) ___ftadd                                             13     7      6    5611
                                             41 BANK0     13     7      6
            _Sensor_getSupplyVoltage (ARG)
                           ___altoft (ARG)
                            ___ftdiv (ARG)
                            ___ftneg (ARG)
                           ___ftpack
                           ___lwtoft (ARG)
 ---------------------------------------------------------------------------------
 (2) ___awtoft                                             6     3      3    3025
                                              9 BANK0      6     3      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (2) ___altoft                                             8     4      4    3096
                                              9 BANK0      8     4      4
                           ___ftpack
                           ___ftpack (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftpack                                             8     3      5    2584
                                              1 BANK0      8     3      5
 ---------------------------------------------------------------------------------
 (2) ___aldiv                                             15     7      8     753
                                              1 BANK0     15     7      8
 ---------------------------------------------------------------------------------
 (2) _HMC5883L_ReadBits                                   10     6      4    8661
                                             35 BANK0     10     6      4
            _HMC5883L_I2C_BufferRead
 ---------------------------------------------------------------------------------
 (3) _HMC5883L_I2C_BufferRead                              7     2      5    6134
                                             28 BANK0      7     2      5
                     _I2C_BufferRead
 ---------------------------------------------------------------------------------
 (2) _Diag_getTempSensorHealth                             0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _BMP_init                                             4     4      0    7138
                                             28 BANK0      4     4      0
           _Diag_setTempSensorHealth
                     _I2C_BufferRead
                      _I2C_ByteWrite
 ---------------------------------------------------------------------------------
 (2) _I2C_ByteWrite                                       10     8      2    2674
                                             15 BANK0     10     8      2
                   _I2C2_MasterWrite
                 _Timeout_hasExpired
                 _Timeout_setTimeout
 ---------------------------------------------------------------------------------
 (2) _I2C_BufferRead                                      11     6      5    4393
                                             17 BANK0     11     6      5
                    _I2C2_MasterRead
                   _I2C2_MasterWrite
                 _Timeout_hasExpired
                 _Timeout_setTimeout
 ---------------------------------------------------------------------------------
 (3) _Timeout_setTimeout                                   2     0      2     262
                                              1 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (3) _Timeout_hasExpired                                  12    12      0       0
                                              1 BANK0     12    12      0
 ---------------------------------------------------------------------------------
 (3) _I2C2_MasterWrite                                     7     3      4    1627
                                              8 BANK0      7     3      4
               _I2C2_MasterTRBInsert
           _I2C2_MasterWriteTRBBuild
 ---------------------------------------------------------------------------------
 (4) _I2C2_MasterWriteTRBBuild                             7     3      4     450
                                              1 BANK0      7     3      4
 ---------------------------------------------------------------------------------
 (3) _I2C2_MasterRead                                      8     2      6    1398
                                              9 BANK0      8     2      6
            _I2C2_MasterReadTRBBuild
               _I2C2_MasterTRBInsert
 ---------------------------------------------------------------------------------
 (4) _I2C2_MasterTRBInsert                                 4     2      2     494
                                              1 BANK0      4     2      2
 ---------------------------------------------------------------------------------
 (4) _I2C2_MasterReadTRBBuild                              8     3      5     481
                                              1 BANK0      8     3      5
 ---------------------------------------------------------------------------------
 (2) _Diag_setTempSensorHealth                             2     2      0      31
                                              1 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (9) _INTERRUPT_InterruptManager                           1     1      0      22
                                              0 BANK0      1     1      0
               _I2C2_BusCollisionISR
                           _I2C2_ISR
                    _PIN_MANAGER_IOC
                           _TMR1_ISR
 ---------------------------------------------------------------------------------
 (10) _TMR1_ISR                                            0     0      0       0
                      _TMR1_CallBack
 ---------------------------------------------------------------------------------
 (11) _TMR1_CallBack                                       0     0      0       0
                   Absolute function *
       _TMR1_DefaultInterruptHandler *
                  _Timeout_increment
 ---------------------------------------------------------------------------------
 (12) _Timeout_increment                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (12) _TMR1_DefaultInterruptHandler                        0     0      0       0
 ---------------------------------------------------------------------------------
 (10) _PIN_MANAGER_IOC                                     0     0      0       0
                         _IOCAF2_ISR
 ---------------------------------------------------------------------------------
 (11) _IOCAF2_ISR                                          0     0      0       0
                   Absolute function *
     _IOCAF2_DefaultInterruptHandler *
 ---------------------------------------------------------------------------------
 (12) _IOCAF2_DefaultInterruptHandler                      0     0      0       0
 ---------------------------------------------------------------------------------
 (12) Absolute function(Fake)                              0     0      0       0
 ---------------------------------------------------------------------------------
 (10) _I2C2_ISR                                            4     4      0      22
                                              3 COMMON     4     4      0
              _I2C2_FunctionComplete
                          _I2C2_Stop
 ---------------------------------------------------------------------------------
 (11) _I2C2_Stop                                           3     3      0      22
                                              0 COMMON     3     3      0
 ---------------------------------------------------------------------------------
 (11) _I2C2_FunctionComplete                               1     1      0       0
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (10) _I2C2_BusCollisionISR                                0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 12
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _BMP_init
     _Diag_setTempSensorHealth
     _I2C_BufferRead
       _I2C2_MasterRead
         _I2C2_MasterReadTRBBuild
         _I2C2_MasterTRBInsert
       _I2C2_MasterWrite
         _I2C2_MasterTRBInsert
         _I2C2_MasterWriteTRBBuild
       _Timeout_hasExpired
       _Timeout_setTimeout
     _I2C_ByteWrite
       _I2C2_MasterWrite
         _I2C2_MasterTRBInsert
         _I2C2_MasterWriteTRBBuild
       _Timeout_hasExpired
       _Timeout_setTimeout
   _BMP_readTemperature
     _BMP_init
       _Diag_setTempSensorHealth
       _I2C_BufferRead
         _I2C2_MasterRead
           _I2C2_MasterReadTRBBuild
           _I2C2_MasterTRBInsert
         _I2C2_MasterWrite
           _I2C2_MasterTRBInsert
           _I2C2_MasterWriteTRBBuild
         _Timeout_hasExpired
         _Timeout_setTimeout
       _I2C_ByteWrite
         _I2C2_MasterWrite
           _I2C2_MasterTRBInsert
           _I2C2_MasterWriteTRBBuild
         _Timeout_hasExpired
         _Timeout_setTimeout
     _Diag_getTempSensorHealth
     _Diag_setTempSensorHealth
     _HMC5883L_ReadBits
       _HMC5883L_I2C_BufferRead
         _I2C_BufferRead
           _I2C2_MasterRead
             _I2C2_MasterReadTRBBuild
             _I2C2_MasterTRBInsert
           _I2C2_MasterWrite
             _I2C2_MasterTRBInsert
             _I2C2_MasterWriteTRBBuild
           _Timeout_hasExpired
           _Timeout_setTimeout
     _I2C_BufferRead
       _I2C2_MasterRead
         _I2C2_MasterReadTRBBuild
         _I2C2_MasterTRBInsert
       _I2C2_MasterWrite
         _I2C2_MasterTRBInsert
         _I2C2_MasterWriteTRBBuild
       _Timeout_hasExpired
       _Timeout_setTimeout
     _I2C_ByteWrite
       _I2C2_MasterWrite
         _I2C2_MasterTRBInsert
         _I2C2_MasterWriteTRBBuild
       _Timeout_hasExpired
       _Timeout_setTimeout
     ___aldiv
     ___altoft
       ___ftpack
       ___ftpack (ARG)
     ___awtoft
       ___ftpack
     ___ftadd
       _Sensor_getSupplyVoltage (ARG)
         _ADC_GetConversionResult
         _ADC_IsConversionDone
         _ADC_SelectChannel
         _ADC_StartConversion
         _FVR_IsOutputReady
         _Sensor_peripheralSleep
         _Sensor_peripheralWake
         ___ftdiv
           ___altoft (ARG)
             ___ftpack
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
         ___lwtoft
           ___ftpack
       ___altoft (ARG)
         ___ftpack
         ___ftpack (ARG)
       ___ftdiv (ARG)
         ___altoft (ARG)
           ___ftpack
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
       ___ftneg (ARG)
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
         ___lwtoft (ARG)
           ___ftpack
       ___ftpack (ARG)
       ___lwtoft (ARG)
         ___ftpack
     ___ftdiv
       ___altoft (ARG)
         ___ftpack
         ___ftpack (ARG)
       ___ftpack (ARG)
       ___ftpack (ARG)
       ___lwtoft (ARG)
         ___ftpack
     ___ftmul
       _Sensor_getSupplyVoltage (ARG)
         _ADC_GetConversionResult
         _ADC_IsConversionDone
         _ADC_SelectChannel
         _ADC_StartConversion
         _FVR_IsOutputReady
         _Sensor_peripheralSleep
         _Sensor_peripheralWake
         ___ftdiv
           ___altoft (ARG)
             ___ftpack
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
         ___lwtoft
           ___ftpack
       ___altoft (ARG)
         ___ftpack
         ___ftpack (ARG)
       ___awtoft (ARG)
         ___ftpack
       ___ftadd (ARG)
         _Sensor_getSupplyVoltage (ARG)
           _ADC_GetConversionResult
           _ADC_IsConversionDone
           _ADC_SelectChannel
           _ADC_StartConversion
           _FVR_IsOutputReady
           _Sensor_peripheralSleep
           _Sensor_peripheralWake
           ___ftdiv
             ___altoft (ARG)
               ___ftpack
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
           ___lwtoft
             ___ftpack
         ___altoft (ARG)
           ___ftpack
           ___ftpack (ARG)
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
         ___ftneg (ARG)
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
           ___lwtoft (ARG)
             ___ftpack
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
       ___ftdiv (ARG)
         ___altoft (ARG)
           ___ftpack
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
       ___ftneg (ARG)
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
         ___lwtoft (ARG)
           ___ftpack
       ___ftpack (ARG)
       ___lwtoft (ARG)
         ___ftpack
     ___ftneg
       ___ftdiv (ARG)
         ___altoft (ARG)
           ___ftpack
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
       ___lwtoft (ARG)
         ___ftpack
     ___fttol
       _Sensor_getSupplyVoltage (ARG)
         _ADC_GetConversionResult
         _ADC_IsConversionDone
         _ADC_SelectChannel
         _ADC_StartConversion
         _FVR_IsOutputReady
         _Sensor_peripheralSleep
         _Sensor_peripheralWake
         ___ftdiv
           ___altoft (ARG)
             ___ftpack
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
         ___lwtoft
           ___ftpack
       ___altoft (ARG)
         ___ftpack
         ___ftpack (ARG)
       ___ftadd (ARG)
         _Sensor_getSupplyVoltage (ARG)
           _ADC_GetConversionResult
           _ADC_IsConversionDone
           _ADC_SelectChannel
           _ADC_StartConversion
           _FVR_IsOutputReady
           _Sensor_peripheralSleep
           _Sensor_peripheralWake
           ___ftdiv
             ___altoft (ARG)
               ___ftpack
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
           ___lwtoft
             ___ftpack
         ___altoft (ARG)
           ___ftpack
           ___ftpack (ARG)
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
         ___ftneg (ARG)
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
           ___lwtoft (ARG)
             ___ftpack
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
       ___ftmul (ARG)
         _Sensor_getSupplyVoltage (ARG)
           _ADC_GetConversionResult
           _ADC_IsConversionDone
           _ADC_SelectChannel
           _ADC_StartConversion
           _FVR_IsOutputReady
           _Sensor_peripheralSleep
           _Sensor_peripheralWake
           ___ftdiv
             ___altoft (ARG)
               ___ftpack
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
           ___lwtoft
             ___ftpack
         ___altoft (ARG)
           ___ftpack
           ___ftpack (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           _Sensor_getSupplyVoltage (ARG)
             _ADC_GetConversionResult
             _ADC_IsConversionDone
             _ADC_SelectChannel
             _ADC_StartConversion
             _FVR_IsOutputReady
             _Sensor_peripheralSleep
             _Sensor_peripheralWake
             ___ftdiv
               ___altoft (ARG)
                 ___ftpack
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
             ___lwtoft
               ___ftpack
           ___altoft (ARG)
             ___ftpack
             ___ftpack (ARG)
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
           ___ftneg (ARG)
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
             ___lwtoft (ARG)
               ___ftpack
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
         ___ftneg (ARG)
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
           ___lwtoft (ARG)
             ___ftpack
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
     ___lwtoft
       ___ftpack
   _DOOR_init
   _DOOR_run
   _SYSTEM_Initialize
     _ADC_Initialize
     _FVR_Initialize
     _I2C2_Initialize
     _OSCILLATOR_Initialize
     _PIN_MANAGER_Initialize
       _IOCAF2_SetInterruptHandler
     _SPI1_Initialize
     _TMR1_Initialize
       _TMR1_SetInterruptHandler
     _TMR2_Initialize
     _WDT_Initialize
   _Sensor_peripheralSleep
   _Timeout_getGlobalCounter
   _Timeout_updateCurrentTime
     _TMR1_ReadTimer
     ___lmul
   _Wireless_determineTransmitPower
     _Wireless_changeTransmitPower
       _RF_ReadRegisterData
         _SPI_WriteRead
           _SPI1_Exchange8bit
         _SPI_WriteReadBuffer
           _SPI_WriteRead
             _SPI1_Exchange8bit
       _RF_WriteRegister
         _SPI_WriteRead
           _SPI1_Exchange8bit
       _limit
     _Wireless_isDataTransmitSuccessful
       _RF_GetStatus
         _RF_WriteRead
           _SPI_WriteRead
             _SPI1_Exchange8bit
     _Wireless_sendData
       _RF_GetStatus
         _RF_WriteRead
           _SPI_WriteRead
             _SPI1_Exchange8bit
       _RF_ResetStatusIRQ
         _RF_WriteRegister
           _SPI_WriteRead
             _SPI1_Exchange8bit
       _RF_TxPayload
         _RF_Write
           _SPI_WriteRead
             _SPI1_Exchange8bit
         _RF_WriteRegisterData
           _SPI_WriteBuffer
             _SPI_WriteRead
               _SPI1_Exchange8bit
           _SPI_WriteRead
             _SPI1_Exchange8bit
     _limit
   _Wireless_init
     _RF_Init
     _RF_ResetStatusIRQ
       _RF_WriteRegister
         _SPI_WriteRead
           _SPI1_Exchange8bit
     _RF_WriteRegister
       _SPI_WriteRead
         _SPI1_Exchange8bit
     _RF_WriteRegisterData
       _SPI_WriteBuffer
         _SPI_WriteRead
           _SPI1_Exchange8bit
       _SPI_WriteRead
         _SPI1_Exchange8bit
   _Wireless_packageData
     _BMP_readTemperature (ARG)
       _BMP_init
         _Diag_setTempSensorHealth
         _I2C_BufferRead
           _I2C2_MasterRead
             _I2C2_MasterReadTRBBuild
             _I2C2_MasterTRBInsert
           _I2C2_MasterWrite
             _I2C2_MasterTRBInsert
             _I2C2_MasterWriteTRBBuild
           _Timeout_hasExpired
           _Timeout_setTimeout
         _I2C_ByteWrite
           _I2C2_MasterWrite
             _I2C2_MasterTRBInsert
             _I2C2_MasterWriteTRBBuild
           _Timeout_hasExpired
           _Timeout_setTimeout
       _Diag_getTempSensorHealth
       _Diag_setTempSensorHealth
       _HMC5883L_ReadBits
         _HMC5883L_I2C_BufferRead
           _I2C_BufferRead
             _I2C2_MasterRead
               _I2C2_MasterReadTRBBuild
               _I2C2_MasterTRBInsert
             _I2C2_MasterWrite
               _I2C2_MasterTRBInsert
               _I2C2_MasterWriteTRBBuild
             _Timeout_hasExpired
             _Timeout_setTimeout
       _I2C_BufferRead
         _I2C2_MasterRead
           _I2C2_MasterReadTRBBuild
           _I2C2_MasterTRBInsert
         _I2C2_MasterWrite
           _I2C2_MasterTRBInsert
           _I2C2_MasterWriteTRBBuild
         _Timeout_hasExpired
         _Timeout_setTimeout
       _I2C_ByteWrite
         _I2C2_MasterWrite
           _I2C2_MasterTRBInsert
           _I2C2_MasterWriteTRBBuild
         _Timeout_hasExpired
         _Timeout_setTimeout
       ___aldiv
       ___altoft
         ___ftpack
         ___ftpack (ARG)
       ___awtoft
         ___ftpack
       ___ftadd
         _Sensor_getSupplyVoltage (ARG)
           _ADC_GetConversionResult
           _ADC_IsConversionDone
           _ADC_SelectChannel
           _ADC_StartConversion
           _FVR_IsOutputReady
           _Sensor_peripheralSleep
           _Sensor_peripheralWake
           ___ftdiv
             ___altoft (ARG)
               ___ftpack
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
           ___lwtoft
             ___ftpack
         ___altoft (ARG)
           ___ftpack
           ___ftpack (ARG)
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
         ___ftneg (ARG)
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
           ___lwtoft (ARG)
             ___ftpack
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
       ___ftdiv
         ___altoft (ARG)
           ___ftpack
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
       ___ftmul
         _Sensor_getSupplyVoltage (ARG)
           _ADC_GetConversionResult
           _ADC_IsConversionDone
           _ADC_SelectChannel
           _ADC_StartConversion
           _FVR_IsOutputReady
           _Sensor_peripheralSleep
           _Sensor_peripheralWake
           ___ftdiv
             ___altoft (ARG)
               ___ftpack
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
           ___lwtoft
             ___ftpack
         ___altoft (ARG)
           ___ftpack
           ___ftpack (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           _Sensor_getSupplyVoltage (ARG)
             _ADC_GetConversionResult
             _ADC_IsConversionDone
             _ADC_SelectChannel
             _ADC_StartConversion
             _FVR_IsOutputReady
             _Sensor_peripheralSleep
             _Sensor_peripheralWake
             ___ftdiv
               ___altoft (ARG)
                 ___ftpack
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
             ___lwtoft
               ___ftpack
           ___altoft (ARG)
             ___ftpack
             ___ftpack (ARG)
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
           ___ftneg (ARG)
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
             ___lwtoft (ARG)
               ___ftpack
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
         ___ftneg (ARG)
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
           ___lwtoft (ARG)
             ___ftpack
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
       ___ftneg
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
         ___lwtoft (ARG)
           ___ftpack
       ___fttol
         _Sensor_getSupplyVoltage (ARG)
           _ADC_GetConversionResult
           _ADC_IsConversionDone
           _ADC_SelectChannel
           _ADC_StartConversion
           _FVR_IsOutputReady
           _Sensor_peripheralSleep
           _Sensor_peripheralWake
           ___ftdiv
             ___altoft (ARG)
               ___ftpack
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
           ___lwtoft
             ___ftpack
         ___altoft (ARG)
           ___ftpack
           ___ftpack (ARG)
         ___ftadd (ARG)
           _Sensor_getSupplyVoltage (ARG)
             _ADC_GetConversionResult
             _ADC_IsConversionDone
             _ADC_SelectChannel
             _ADC_StartConversion
             _FVR_IsOutputReady
             _Sensor_peripheralSleep
             _Sensor_peripheralWake
             ___ftdiv
               ___altoft (ARG)
                 ___ftpack
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
             ___lwtoft
               ___ftpack
           ___altoft (ARG)
             ___ftpack
             ___ftpack (ARG)
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
           ___ftneg (ARG)
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
             ___lwtoft (ARG)
               ___ftpack
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
         ___ftmul (ARG)
           _Sensor_getSupplyVoltage (ARG)
             _ADC_GetConversionResult
             _ADC_IsConversionDone
             _ADC_SelectChannel
             _ADC_StartConversion
             _FVR_IsOutputReady
             _Sensor_peripheralSleep
             _Sensor_peripheralWake
             ___ftdiv
               ___altoft (ARG)
                 ___ftpack
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
             ___lwtoft
               ___ftpack
           ___altoft (ARG)
             ___ftpack
             ___ftpack (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             _Sensor_getSupplyVoltage (ARG)
               _ADC_GetConversionResult
               _ADC_IsConversionDone
               _ADC_SelectChannel
               _ADC_StartConversion
               _FVR_IsOutputReady
               _Sensor_peripheralSleep
               _Sensor_peripheralWake
               ___ftdiv
                 ___altoft (ARG)
                   ___ftpack
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
               ___lwtoft
                 ___ftpack
             ___altoft (ARG)
               ___ftpack
               ___ftpack (ARG)
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
             ___ftneg (ARG)
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
           ___ftneg (ARG)
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
             ___lwtoft (ARG)
               ___ftpack
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
       ___lwtoft
         ___ftpack
     _Diag_getSensorHealth (ARG)
     _Sensor_getSupplyVoltage (ARG)
       _ADC_GetConversionResult
       _ADC_IsConversionDone
       _ADC_SelectChannel
       _ADC_StartConversion
       _FVR_IsOutputReady
       _Sensor_peripheralSleep
       _Sensor_peripheralWake
       ___ftdiv
         ___altoft (ARG)
           ___ftpack
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
       ___lwtoft
         ___ftpack
     _Wireless_checkDataReceived (ARG)
       _RF_DataIsReady
         _RF_ReadRegister
           _SPI_WriteRead
             _SPI1_Exchange8bit
       _RF_RxPayload
         _RF_ReadRegisterData
           _SPI_WriteRead
             _SPI1_Exchange8bit
           _SPI_WriteReadBuffer
             _SPI_WriteRead
               _SPI1_Exchange8bit
       ___lmul
     _Wireless_determineTransmitPower (ARG)
       _Wireless_changeTransmitPower
         _RF_ReadRegisterData
           _SPI_WriteRead
             _SPI1_Exchange8bit
           _SPI_WriteReadBuffer
             _SPI_WriteRead
               _SPI1_Exchange8bit
         _RF_WriteRegister
           _SPI_WriteRead
             _SPI1_Exchange8bit
         _limit
       _Wireless_isDataTransmitSuccessful
         _RF_GetStatus
           _RF_WriteRead
             _SPI_WriteRead
               _SPI1_Exchange8bit
       _Wireless_sendData
         _RF_GetStatus
           _RF_WriteRead
             _SPI_WriteRead
               _SPI1_Exchange8bit
         _RF_ResetStatusIRQ
           _RF_WriteRegister
             _SPI_WriteRead
               _SPI1_Exchange8bit
         _RF_TxPayload
           _RF_Write
             _SPI_WriteRead
               _SPI1_Exchange8bit
           _RF_WriteRegisterData
             _SPI_WriteBuffer
               _SPI_WriteRead
                 _SPI1_Exchange8bit
             _SPI_WriteRead
               _SPI1_Exchange8bit
       _limit
     _Wireless_sendData (ARG)
       _RF_GetStatus
         _RF_WriteRead
           _SPI_WriteRead
             _SPI1_Exchange8bit
       _RF_ResetStatusIRQ
         _RF_WriteRegister
           _SPI_WriteRead
             _SPI1_Exchange8bit
       _RF_TxPayload
         _RF_Write
           _SPI_WriteRead
             _SPI1_Exchange8bit
         _RF_WriteRegisterData
           _SPI_WriteBuffer
             _SPI_WriteRead
               _SPI1_Exchange8bit
           _SPI_WriteRead
             _SPI1_Exchange8bit
     ___aldiv (ARG)
     ___ftadd (ARG)
       _Sensor_getSupplyVoltage (ARG)
         _ADC_GetConversionResult
         _ADC_IsConversionDone
         _ADC_SelectChannel
         _ADC_StartConversion
         _FVR_IsOutputReady
         _Sensor_peripheralSleep
         _Sensor_peripheralWake
         ___ftdiv
           ___altoft (ARG)
             ___ftpack
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
         ___lwtoft
           ___ftpack
       ___altoft (ARG)
         ___ftpack
         ___ftpack (ARG)
       ___ftdiv (ARG)
         ___altoft (ARG)
           ___ftpack
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
       ___ftneg (ARG)
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
         ___lwtoft (ARG)
           ___ftpack
       ___ftpack (ARG)
       ___lwtoft (ARG)
         ___ftpack
     ___ftmul (ARG)
       _Sensor_getSupplyVoltage (ARG)
         _ADC_GetConversionResult
         _ADC_IsConversionDone
         _ADC_SelectChannel
         _ADC_StartConversion
         _FVR_IsOutputReady
         _Sensor_peripheralSleep
         _Sensor_peripheralWake
         ___ftdiv
           ___altoft (ARG)
             ___ftpack
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
         ___lwtoft
           ___ftpack
       ___altoft (ARG)
         ___ftpack
         ___ftpack (ARG)
       ___awtoft (ARG)
         ___ftpack
       ___ftadd (ARG)
         _Sensor_getSupplyVoltage (ARG)
           _ADC_GetConversionResult
           _ADC_IsConversionDone
           _ADC_SelectChannel
           _ADC_StartConversion
           _FVR_IsOutputReady
           _Sensor_peripheralSleep
           _Sensor_peripheralWake
           ___ftdiv
             ___altoft (ARG)
               ___ftpack
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
           ___lwtoft
             ___ftpack
         ___altoft (ARG)
           ___ftpack
           ___ftpack (ARG)
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
         ___ftneg (ARG)
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
           ___lwtoft (ARG)
             ___ftpack
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
       ___ftdiv (ARG)
         ___altoft (ARG)
           ___ftpack
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
       ___ftneg (ARG)
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
         ___lwtoft (ARG)
           ___ftpack
       ___ftpack (ARG)
       ___lwtoft (ARG)
         ___ftpack
     ___fttol (ARG)
       _Sensor_getSupplyVoltage (ARG)
         _ADC_GetConversionResult
         _ADC_IsConversionDone
         _ADC_SelectChannel
         _ADC_StartConversion
         _FVR_IsOutputReady
         _Sensor_peripheralSleep
         _Sensor_peripheralWake
         ___ftdiv
           ___altoft (ARG)
             ___ftpack
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
         ___lwtoft
           ___ftpack
       ___altoft (ARG)
         ___ftpack
         ___ftpack (ARG)
       ___ftadd (ARG)
         _Sensor_getSupplyVoltage (ARG)
           _ADC_GetConversionResult
           _ADC_IsConversionDone
           _ADC_SelectChannel
           _ADC_StartConversion
           _FVR_IsOutputReady
           _Sensor_peripheralSleep
           _Sensor_peripheralWake
           ___ftdiv
             ___altoft (ARG)
               ___ftpack
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
           ___lwtoft
             ___ftpack
         ___altoft (ARG)
           ___ftpack
           ___ftpack (ARG)
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
         ___ftneg (ARG)
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
           ___lwtoft (ARG)
             ___ftpack
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
       ___ftmul (ARG)
         _Sensor_getSupplyVoltage (ARG)
           _ADC_GetConversionResult
           _ADC_IsConversionDone
           _ADC_SelectChannel
           _ADC_StartConversion
           _FVR_IsOutputReady
           _Sensor_peripheralSleep
           _Sensor_peripheralWake
           ___ftdiv
             ___altoft (ARG)
               ___ftpack
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
           ___lwtoft
             ___ftpack
         ___altoft (ARG)
           ___ftpack
           ___ftpack (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           _Sensor_getSupplyVoltage (ARG)
             _ADC_GetConversionResult
             _ADC_IsConversionDone
             _ADC_SelectChannel
             _ADC_StartConversion
             _FVR_IsOutputReady
             _Sensor_peripheralSleep
             _Sensor_peripheralWake
             ___ftdiv
               ___altoft (ARG)
                 ___ftpack
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
             ___lwtoft
               ___ftpack
           ___altoft (ARG)
             ___ftpack
             ___ftpack (ARG)
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
           ___ftneg (ARG)
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
             ___lwtoft (ARG)
               ___ftpack
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
         ___ftneg (ARG)
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
           ___lwtoft (ARG)
             ___ftpack
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
     ___lldiv (ARG)
     ___lwdiv (ARG)
   _Wireless_sleep
     _RF_ReadRegisterData
       _SPI_WriteRead
         _SPI1_Exchange8bit
       _SPI_WriteReadBuffer
         _SPI_WriteRead
           _SPI1_Exchange8bit
     _RF_WriteRegister
       _SPI_WriteRead
         _SPI1_Exchange8bit
   _Wireless_wake
     _RF_ReadRegisterData
       _SPI_WriteRead
         _SPI1_Exchange8bit
       _SPI_WriteReadBuffer
         _SPI_WriteRead
           _SPI1_Exchange8bit
     _RF_WriteRegister
       _SPI_WriteRead
         _SPI1_Exchange8bit
   ___lldiv
   ___lwdiv
   _setSleepTime

 _INTERRUPT_InterruptManager (ROOT)
   _I2C2_BusCollisionISR
   _I2C2_ISR
     _I2C2_FunctionComplete
     _I2C2_Stop
   _PIN_MANAGER_IOC
     _IOCAF2_ISR
       Absolute function(Fake) *
       _IOCAF2_DefaultInterruptHandler *
   _TMR1_ISR
     _TMR1_CallBack
       Absolute function(Fake) *
       _TMR1_DefaultInterruptHandler *
       _Timeout_increment *

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             3F0      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      7       E       2      100.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50     4E      4E       5       97.5%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BANK1               50     2D      47       7       88.8%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BITBANK2            50      0       0       8        0.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BANK2               50      0      50       9      100.0%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BITBANK3            50      0       0      10        0.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BANK3               50      C      3C      11       75.0%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BITBANK4            50      0       0      12        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BANK4               50      0       0      13        0.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BITBANK5            50      0       0      14        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BANK5               50      0       0      15        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BITBANK6            50      0       0      16        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BANK6               50      0       0      17        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BITBANK7            50      0       0      18        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BANK7               50      0       0      19        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
ABS                  0      0     12F      20        0.0%
BITBANK8            50      0       0      21        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BANK8               50      0       0      22        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITBANK9            50      0       0      23        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BANK9               50      0       0      24        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITBANK10           50      0       0      25        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BANK10              50      0       0      26        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITBANK11           50      0       0      27        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BANK11              50      0       0      28        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITBANK12           30      0       0      29        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BANK12              30      0       0      30        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
DATA                 0      0     12F      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V1.45 build -152302408 
Symbol Table                                                                                   Wed Oct 09 21:45:51 2019

                                          _Wireless_init 0B6E  
                                      _SPI1_Exchange8bit 1372  
                                          _Wireless_wake 15B9  
                                     ??_RF_WriteRegister 0024  
                                           _RF_TxPayload 0801  
                                           ___altoft@exp 002F  
                                         _Wireless_sleep 148C  
                                                      pc 0002  
                           __end_of_Wireless_packageData 0786  
                                     ?_SPI1_Exchange8bit 0070  
                                            __CFG_CP$OFF 0000  
                                  ?_I2C2_MasterTRBInsert 0021  
                                          ___altoft@sign 0030  
                                                     _b1 01A8  
                           __size_of_RF_ReadRegisterData 001D  
                                 __end_of_FVR_Initialize 12DA  
                                    RF_TxPayload@payload 0030  
                                      ??_SPI_WriteBuffer 0026  
                        __size_of_Sensor_peripheralSleep 0005  
                         I2C2_MasterReadTRBBuild@address 0024  
                        HMC5883L_I2C_BufferRead@ReadAddr 003E  
                                           ___ftadd@exp1 0055  
                                           ___ftadd@exp2 0054  
                                          _doorOpenAngle 00DE  
                                            __CFG_LVP$ON 0000  
                                           ___ftadd@sign 0053  
                                                    l522 137A  
                                                    l358 09D4  
                                                    _PR2 001B  
                                       ??_RF_DataIsReady 0026  
                                           __CFG_CPD$OFF 0000  
                                        _timer1ReloadVal 007C  
                                    ??_SPI1_Exchange8bit 0021  
                                        _TMR2_Initialize 1333  
                                           __CFG_BORV$LO 0000  
                                                    wreg 0009  
                                           _RF_WriteRead 145F  
                         HMC5883L_I2C_BufferRead@pBuffer 003C  
                                           __CFG_IESO$ON 0000  
                     __end_of_IOCAF2_SetInterruptHandler 1356  
                             _IOCAF2_SetInterruptHandler 134D  
                                          _globalCounter 00D2  
                                      _Wireless_sendData 1434  
                                    _BMP_readTemperature 006F  
                                 ??_RF_WriteRegisterData 002C  
                                           ___ftdiv@cntr 003B  
                                       __end_of_I2C2_ISR 0685  
                                     ?_Wireless_sendData 0031  
                                           ___ftdiv@sign 0040  
                                 RF_ResetStatusIRQ@flags 0026  
                                                   l1026 007E  
                                                   l1027 008E  
                                                   l1115 0779  
                                                   l1133 0786  
                                                   l1092 0D24  
                                                   l1535 0ADB  
                                                   l1536 0AE3  
                                                   l1528 0AC8  
                                                   l1394 0BFA  
                                                   l1619 0CE8  
                                                   l1559 0FA9  
                                                   l6011 0B12  
                                                   l6121 08E2  
                                                   l6041 0D34  
                                                   l6019 0B2E  
                                                   l6043 0D4E  
                                                   l6205 0831  
                                                   l5503 09C6  
                                                   l6207 0841  
                                                   l6039 0D15  
                                                   l5505 09CC  
                                                   l5601 0A06  
                                                   l6233 0F39  
                                                   l6321 0EC6  
                                                   l6305 0E83  
                                                   l6153 07F3  
                                                   l5531 16A4  
                                                   l6219 1623  
                                                   l6251 0F62  
                                                   l6091 0DA3  
                                                   l6075 0D8D  
                                                   l6059 0D76  
                                                   l5525 16CE  
                                                   l5605 0A24  
                                                   l6173 0C1B  
                                                   l6165 0C0B  
                                                   l6261 0F84  
                                                   l6229 0F32  
                                                   l6333 0EE2  
                                                   l6317 0EBE  
                                                   l6191 0C62  
                                                   l6183 0C49  
                                                   l6175 0C29  
                                                   l6271 0FA5  
                                                   l6263 0F88  
                                                   l6239 0F48  
                                                   l5519 150F  
                                                   l6079 0D8F  
                                                   l6095 0DA5  
                                                   l5617 0A35  
                                                   l5609 0A2F  
                                                   l6257 0F75  
                                                   l6329 0EDA  
                                                   l6187 0C54  
                                                   l6275 0FBB  
                                                   l6259 0F7F  
                                                   l6443 00DE  
                                                   l6435 00BD  
                                                   l5539 15FB  
                                                   l5627 1670  
                                                   l5581 092F  
                                                   l6269 0F9B  
                                                   l6357 0C86  
                                                   l5821 1396  
                                                   l6701 042B  
                                                   l5591 09F5  
                                                   l6279 0FCD  
                                                   l6383 0CDE  
                                                   l6375 0CBF  
                                                   l5831 173F  
                                                   l6471 076F  
                                                   l6703 0433  
                                                   l6289 0FE8  
                                                   l6385 0CEC  
                                                   l6377 0CD0  
                                                   l6561 097B  
                                                   l5499 09BF  
                                                   l5595 0A00  
                                                   l5755 17ED  
                                                   l5691 0AB4  
                                                   l5683 0A9E  
                                                   l5851 0DDA  
                                                   l6299 0E6D  
                                                   l5827 1735  
                                                   l6547 0942  
                                                   l6715 0446  
                                                   l5845 0DC4  
                                                   l6389 0CFA  
                                                   l6557 0970  
                                                   l6549 0950  
                                                   l6741 04E1  
                                                   l6725 04A4  
                                                   l5767 17FE  
                                                   l5759 17F8  
                                                   l5687 0AA5  
                                                   l6583 17B6  
                                                   l6575 1798  
                                                   l5697 0ACD  
                                                   l5689 0AAF  
                                                   l5873 0E34  
                                                   l5865 0E1B  
                                                   l6577 17A4  
                                                   l6753 0519  
                                                   l5699 0AD5  
                                                   l5787 1593  
                                                   l6587 17BF  
                                                   l6755 052C  
                                                   l6685 03CE  
                                                   l5991 0869  
                                                   l5985 085C  
                             __size_of_HMC5883L_ReadBits 0046  
                                                   _LATA 010C  
                                                   _LATB 010D  
                                                   _LATC 010E  
                                                   u5015 092B  
                                                   u5205 0AEA  
                                                   u5125 0AAA  
                                                   u5145 0AC3  
                                                   u6105 0ECD  
                                                   u5165 0AD0  
                                                   u5085 1668  
                                                   u5335 0DEC  
                                                   u6135 0EE3  
                                                   u6215 0CC0  
                                                   u5095 167B  
                                                   u5345 0DFC  
                                                   u6145 0EE9  
                                                   u6065 0E8F  
                                                   u5355 0E1C  
                                                   u6075 0E9F  
                                                   u7107 03DC  
                                                   u5365 0E2B  
                                                   u6245 0CDF  
                                                   u6325 00F7  
                                                   u5285 1740  
                                                   u7117 15D2  
                                                   u5630 08D7  
                                                   u5614 08B9  
                                                   u5550 0DAB  
                                                   u5615 08B8  
                                                   u5375 0E35  
                                                   u6095 0EC7  
                                                   u6335 0105  
                                                   u5295 1747  
                                                   u7207 15E1  
                                                   u7127 0817  
                                                   u5624 08C5  
                                                   u5625 08C4  
                                                   u5705 0C1E  
                                                   u6185 0C8E  
                                                   u7217 15EE  
                                                   u7137 13C2  
                                                   u6345 06F2  
                                                   u5635 08D5  
                                                   u7227 15F4  
                                                   u7147 146F  
                                                   u5725 0C2A  
                                                   u7237 145B  
                                                   u7157 15B5  
                                                   u6525 179B  
                                                   u5735 0C3E  
                                                   u6375 0A7F  
                                                   u7167 14D1  
                                                   u5655 07AC  
                                                   u6455 0945  
                                                   u7087 035F  
                                                   u5745 0C4A  
                                                   u5905 0F63  
                                                   u7177 0B74  
                                                   u6545 17A5  
                                                   u7097 038A  
                                                   u7187 157B  
                                                   u6475 0951  
                                                   u6555 17AF  
                                                   u7197 15DB  
                                                   u6485 0965  
                                                   u6565 17B7  
                                                   u5935 0F76  
                                                   u6495 0971  
                                                   u6815 04F7  
                                                   u5785 0836  
                                                   u5965 0F89  
                                                   u5995 0F9C  
                                                   _TMR2 001A  
                                                   _WPUA 020C  
                                                   _WPUB 020D  
                                                   _WPUC 020E  
                                           __CFG_WRT$OFF 0000  
                                          __CFG_FCMEN$ON 0000  
                                                   _data 01C0  
                                                   _main 033D  
                                     _Timeout_hasExpired 08E4  
                                                   _curr 0120  
                                           ___ftpack@arg 0021  
                                                   _var1 0134  
                                                   _var2 0131  
                                           ___ftpack@exp 0024  
                                        __end_of_RF_Init 12E2  
                                                   fsr0h 0005  
                                                   fsr1h 0007  
                                                   indf0 0000  
                                                   fsr0l 0004  
                                                   indf1 0001  
                                                   fsr1l 0006  
                                                   btemp 007E  
                            ??_Timeout_updateCurrentTime 002D  
                            I2C2_MasterReadTRBBuild@ptrb 0028  
                                          __CFG_BOREN$ON 0000  
                                    ??_Wireless_sendData 0032  
                            RF_WriteRegisterData@bufSize 002B  
                                     __size_of_DOOR_init 0001  
                                                   start 0037  
                                      _Timeout_increment 1368  
                              __end_of_SPI1_Exchange8bit 137E  
                               ?_Sensor_getSupplyVoltage 0041  
                       __end_of_Diag_getTempSensorHealth 12D0  
                       __end_of_Diag_setTempSensorHealth 132B  
                                 __end_of_Wireless_sleep 14A4  
                              HMC5883L_ReadBits@bitStart 0044  
                                         ?_Wireless_init 0070  
                             ??_TMR1_SetInterruptHandler 0023  
                                         ?_Wireless_wake 0070  
                                          _SPI_WriteRead 12F6  
                                          __CFG_MCLRE$ON 0000  
                                           ___ftmul@cntr 0064  
                                     ?_Timeout_increment 0070  
                                           ___ftmul@sign 0065  
                                    ?_Timeout_hasExpired 0070  
                                   ?_BMP_readTemperature 00A6  
                                           ___fttol@exp1 00A5  
                                           ___fttol@lval 00A1  
                                       __end_of_BMP_init 0B6E  
                                             _i2c2_state 0079  
                                       __end_of_DOOR_run 12D3  
                                        ?_FVR_Initialize 0070  
                         __size_of_OSCILLATOR_Initialize 0007  
                                    __size_of_IOCAF2_ISR 000D  
                          __end_of_OSCILLATOR_Initialize 1315  
                                    ??_Timeout_increment 0070  
                                _I2C2_MasterReadTRBBuild 1700  
                                        __end_of___aldiv 0C6B  
                                                  ?_main 0070  
                                        __end_of___ftadd 1000  
                                      __end_of_I2C2_Stop 1545  
                                        __end_of___ftdiv 0E56  
                                        __end_of___ftneg 134D  
                                        __end_of___lldiv 0984  
                                        __end_of___ftmul 0F0A  
                                                  _T1CON 0018  
                                        __end_of___fttol 0D0A  
                                                  _T2CON 001C  
                                        __end_of___lwdiv 17C4  
                                                  i1l300 05B6  
                         __size_of_I2C2_FunctionComplete 0011  
                                                  i1l310 05FE  
                                                  i1l161 0032  
                                                  i1l153 0015  
                                                  i1l322 0666  
                                                  i1l314 061E  
                                                  i1l155 0021  
                                                  i1l317 0633  
                                                  i1l157 002D  
                                                  i1l318 0641  
                                                  i1l329 13D4  
                                                  i1l293 0582  
                                                  i1l294 0589  
                                                  i1l288 0554  
                                                  i1l299 05AA  
                          __end_of_I2C2_FunctionComplete 13D7  
                              __end_of_Wireless_sendData 1449  
                                    setSleepTime@timeSec 0021  
                                                  _TMR1H 0017  
                                                  _TMR1L 0016  
                                                  _TRISA 008C  
                                                  _TRISB 008D  
                                                  _TRISC 008E  
                       __size_of_ADC_GetConversionResult 0009  
                                    ___lmul@multiplicand 0025  
                                   ??_Timeout_hasExpired 0021  
                                       __end_of_TMR1_ISR 1344  
                                                  _cTemp 012B  
                                                  _adc_p 01A4  
                                                  _adc_t 0124  
                                 __size_of_I2C_ByteWrite 003C  
                                          ___awtoft@sign 002E  
                                __end_of_PIN_MANAGER_IOC 12F6  
                                         _WDT_Initialize 12DA  
                                                  _errno 013A  
                                                  _limit 165D  
                                          ___ftpack@sign 0025  
                           I2C2_MasterReadTRBBuild@pdata 0021  
                                   _Diag_getSensorHealth 13FA  
                                __end_of_TMR1_Initialize 148C  
                                       __end_of_RF_Write 13C6  
                                                  pclath 000A  
                                 _Sensor_peripheralSleep 12E6  
                                   RF_DataIsReady@status 0028  
                              __end_of_Timeout_increment 1372  
                                                  status 0003  
                                                  wtemp0 007E  
                               __size_of_SPI1_Initialize 0007  
                                         ?_SPI_WriteRead 0070  
                                        ?_Wireless_sleep 0070  
                                      ??_I2C2_MasterRead 002F  
                                RF_WriteRegisterData@buf 0029  
                                RF_WriteRegisterData@reg 002D  
                                  ??_BMP_readTemperature 00A9  
                                    RF_WriteRegister@reg 0024  
                                      ??_I2C2_Initialize 0021  
                                        __initialization 0039  
                                    RF_WriteRegister@val 0023  
                             Wireless_packageData@status 00C8  
                                           __end_of_main 053C  
                                 ??_I2C2_MasterTRBInsert 0023  
                                __end_of_TMR2_Initialize 133B  
                            ?_INTERRUPT_InterruptManager 0070  
                       __end_of_I2C2_MasterWriteTRBBuild 165D  
                                                 ??_main 00CB  
                                          ___fttol@sign1 00A0  
                              _Timeout_updateCurrentTime 0A37  
                                            _i2c2_object 00CD  
                                         __CFG_PLLEN$OFF 0000  
                                      __end_of_DOOR_init 0801  
                                 __end_of_WDT_Initialize 12DE  
                                __size_of_I2C_BufferRead 005E  
                          __size_of_ADC_IsConversionDone 0007  
                                                 _ADCON0 009D  
                                                 _ADCON1 009E  
                                     _Timeout_setTimeout 14A4  
                                       __end_of___altoft 0859  
                                                 ?_limit 0021  
                                              ??_RF_Init 0021  
                                                 _ADRESH 009C  
                                                 _EEADRH 0192  
                                                 _ADRESL 009B  
                                                 _EEADRL 0191  
                                                 _EEDATH 0194  
                                                 _EEDATL 0193  
                                                 i1S6993 1000  
                                                 _EECON2 0196  
                                    I2C_ByteWrite@status 0038  
                                  ?_Diag_getSensorHealth 0070  
                                       __end_of___awtoft 163A  
                                                 _ANSELA 018C  
                                                 _ANSELB 018D  
                                                 _ANSELC 018E  
                                       __end_of___ftpack 0AFA  
                                                 _BORCON 0116  
                                                 _T1GCON 0019  
                                   _Wireless_packageData 0685  
                           __end_of_I2C2_BusCollisionISR 12CB  
                                                 i1l4247 1388  
                                                 i1l4265 1543  
                                                 i1l4711 0576  
                                                 i1l4811 066A  
                                                 i1l4723 0595  
                                                 i1l4813 066D  
                                                 i1l4821 067A  
                                                 i1l4815 0671  
                                                 i1l4743 05D3  
                                                 i1l4761 05EF  
                                                 i1l4729 05A5  
                                                 i1l4783 0625  
                                                 i1l4775 060C  
                                                 i1l4767 05F9  
                                                 i1l4795 0647  
                                                 i1l4799 064E  
                                                 _FVRCON 0117  
                        __end_of_Sensor_getSupplyVoltage 089E  
                               _BMP_readTemperature$2642 00B5  
                                       __end_of___lwtoft 1434  
                                                 _OSCCON 0099  
                                                 _WDTCON 0097  
                                    ?_Timeout_setTimeout 0021  
                                  I2C2_MasterRead@length 002B  
                                  SPI1_Exchange8bit@data 0021  
                                        ??_Wireless_init 002E  
                                        ??_Wireless_wake 002F  
                                    _SPI_WriteReadBuffer 15F8  
                             __size_of_SPI1_Exchange8bit 000C  
                                         __CFG_PWRTE$OFF 0000  
                             HMC5883L_ReadBits@slaveAddr 004A  
                                       Wireless_wake@reg 0030  
                                       SPI_WriteBuffer@i 0028  
                   __end_of_TMR1_DefaultInterruptHandler 12CD  
                  __size_of_TMR1_DefaultInterruptHandler 0001  
                           _TMR1_DefaultInterruptHandler 12CC  
                                          _I2C_ByteWrite 17C4  
                                   HMC5883L_ReadBits@tmp 004C  
                                  RF_DataIsReady@channel 0027  
                                                 ___lmul 172C  
                                              ??___aldiv 0029  
                                                 _dig_P1 0150  
                                                 _dig_P2 014E  
                                                 _dig_P3 014C  
                                                 _dig_P4 014A  
                                                 _dig_P5 0148  
                                                 _dig_P6 0146  
                                                 _dig_P7 0144  
                                                 _dig_P8 0142  
                                                 _dig_P9 0140  
                                                 _dig_T1 00D6  
                                                 _dig_T2 0156  
                                                 _dig_T3 0154  
                                                 _dig_T4 0152  
                                              ??___ftadd 004F  
                                         _p_i2c2_current 0077  
                                         __CFG_STVREN$ON 0000  
                              ??_I2C2_MasterReadTRBBuild 0026  
                                              ??___ftdiv 0037  
                                              ??___ftneg 0044  
                      Wireless_changeTransmitPower@power 0032  
                                              ??___lldiv 0029  
                                       SPI_WriteRead@val 0022  
                                              ??___ftmul 005C  
                                              ??___fttol 006A  
                                 RF_ReadRegisterData@buf 002A  
                               _Diag_getTempSensorHealth 12CD  
                                 RF_ReadRegisterData@reg 002E  
                                              ??___lwdiv 0025  
                               _Diag_setTempSensorHealth 1323  
Wireless_determineTransmitPower@numOfSuccessfulTransmits 00DF  
                         __size_of_Sensor_peripheralWake 0005  
                                                 _t_fine 012E  
                                              ?_I2C2_ISR 0070  
                          __end_of_Sensor_peripheralWake 12F0  
                               I2C2_Stop@completion_code 0072  
                                           _HMC5883Lmode 00E2  
                                   ??_Timeout_setTimeout 0023  
                          I2C2_MasterReadTRBBuild@length 0023  
                                  ___ftmul@f3_as_product 0061  
                                   ?_SPI_WriteReadBuffer 0023  
                             __size_of_Wireless_sendData 0015  
                                RF_TxPayload@payloadSize 002E  
                                        ?_WDT_Initialize 0070  
                                     _sensorUpdatePeriod 0166  
               TMR1_SetInterruptHandler@InterruptHandler 0021  
             IOCAF2_SetInterruptHandler@InterruptHandler 0021  
                                       ?_PIN_MANAGER_IOC 0070  
                                  ?_Wireless_packageData 00BA  
                                           ??_IOCAF2_ISR 0070  
                               HMC5883L_ReadBits@regAddr 0043  
                                  __end_of_TMR1_CallBack 13A6  
                                    _RF_ReadRegisterData 159C  
                                       ?_TMR1_Initialize 0070  
                                      _SYSTEM_Initialize 14F2  
                                __end_of__initialization 006B  
                                             ___altoft@c 0029  
                             __size_of_Timeout_increment 000A  
                                              ?_BMP_init 0070  
                                              ?_DOOR_run 0070  
                                             ___ftadd@f1 0049  
                                             ___ftadd@f2 004C  
                                        ??_SPI_WriteRead 0022  
                                     ?_SYSTEM_Initialize 0070  
                      __size_of_Timeout_getGlobalCounter 0011  
                                             ___ftdiv@f1 0034  
                                             ___ftdiv@f2 0031  
                                             ___ftdiv@f3 003C  
                              ?_Timeout_getGlobalCounter 0021  
                                      ?_I2C2_MasterWrite 0028  
                                        _SPI_WriteBuffer 150D  
                                             ___ftneg@f1 0041  
                                             ___awtoft@c 0029  
                                         ?_I2C_ByteWrite 002F  
                                             ___ftmul@f1 0056  
                                             ___ftmul@f2 0059  
                                              BMP_init@t 003F  
                                     ??_I2C2_MasterWrite 002C  
                                             ___fttol@f1 0066  
                           __size_of_ADC_StartConversion 0003  
                                         __pcstackCOMMON 0070  
          Wireless_determineTransmitPower@numOfTransmits 00E0  
                              Wireless_packageData@tempC 00BB  
                            I2C_BufferRead@NumByteToRead 0034  
                                           __pidataBANK1 0003  
                                           __pidataBANK2 1308  
                                    ??_SYSTEM_Initialize 0023  
                                 I2C_ByteWrite@WriteAddr 0030  
                                              ?_TMR1_ISR 0070  
                          ?_TMR1_DefaultInterruptHandler 0070  
                                          __end_of_limit 1683  
                                      ??_SPI1_Initialize 0021  
                                   ?_RF_ReadRegisterData 002A  
                                         _i2c2_trb_count 00E5  
                                             ??_I2C2_ISR 0073  
                                       ?_TMR2_Initialize 0070  
                                              ?_RF_Write 0070  
                                     __end_of_IOCAF2_ISR 138B  
                                             ___lwtoft@c 0029  
                                  ??_SPI_WriteReadBuffer 0025  
                                _ADC_GetConversionResult 135F  
                              __size_of_RF_WriteRegister 0016  
                                         _OPTION_REGbits 0095  
                               ?_HMC5883L_I2C_BufferRead 003C  
                                __size_of_TMR1_ReadTimer 001D  
                               _I2C2_MasterWriteTRBBuild 163A  
                            ?_IOCAF2_SetInterruptHandler 0021  
                       ??_IOCAF2_DefaultInterruptHandler 0070  
                        ?_IOCAF2_DefaultInterruptHandler 0070  
                              DOOR_run@doorStateDuration 01A0  
                                 ??_Diag_getSensorHealth 0021  
                           I2C2_MasterWriteTRBBuild@ptrb 0027  
                                                ??_limit 0027  
                              __end_of_SYSTEM_Initialize 150D  
                               __size_of_RF_ReadRegister 001A  
                                             __pbssBANK1 00CD  
                                             __pbssBANK2 0120  
                                             __pbssBANK3 01A0  
                                             ??_BMP_init 003C  
                                             ??_DOOR_run 0021  
                                             __pnvCOMMON 007C  
                                   I2C_ByteWrite@pBuffer 002F  
                              SPI_WriteReadBuffer@bufOut 0028  
                                       ??_FVR_Initialize 0021  
                                             __pmaintext 033D  
                                  SPI_WriteBuffer@bufOut 0023  
                                   SPI_WriteReadBuffer@i 0029  
                                                ?___lmul 0021  
                                Diag_getSensorHealth@var 0022  
                                             ??_TMR1_ISR 0070  
                                  ??_RF_ReadRegisterData 002C  
                                             __pintentry 0004  
                                          ?_setSleepTime 0021  
                                              ?___altoft 0029  
                                         ___lmul@product 0029  
                                         main@doorStatus 01DB  
                                              ?___awtoft 0029  
                                              ?___ftpack 0021  
                                                _APFCON0 011D  
                                                _APFCON1 011E  
                                   _I2C2_BusCollisionISR 12CA  
                                             ??_RF_Write 0023  
                              DOOR_run@previousDoorState 00DA  
                                __size_of_ADC_Initialize 0008  
                                              ?___lwtoft 0029  
                       __size_of_Sensor_getSupplyVoltage 0045  
                         Wireless_checkDataReceived@data 0037  
                           ??_Wireless_checkDataReceived 0033  
                                         _I2C_BufferRead 09D9  
                      I2C2_ISR@i2c_10bit_address_restart 00E3  
                                 I2C2_MasterRead@address 002C  
                                              _I2C2_Stop 1528  
                               SPI_WriteReadBuffer@bufIn 0023  
                                                _OSCTUNE 0098  
                                ?_Sensor_peripheralSleep 0070  
                                                _SSP1ADD 0212  
                                                _SSP2ADD 021A  
                                                _SSP1BUF 0211  
                                 ??_Wireless_packageData 00BE  
                                                _SSP2BUF 0219  
                                 I2C_ByteWrite@slaveAddr 0035  
                                                _RF_Init 12DE  
                     __size_of_Timeout_updateCurrentTime 005E  
                   __end_of_Wireless_changeTransmitPower 178F  
                  __size_of_Wireless_changeTransmitPower 0033  
                           _Wireless_changeTransmitPower 175C  
                                        _I2C2_MasterRead 1683  
                                __end_of_SPI_WriteBuffer 1528  
                                       main@doorOpenTime 01D7  
                                        _I2C2_Initialize 14D7  
                          __size_of_RF_WriteRegisterData 001D  
                                       ??_Wireless_sleep 002F  
                                 I2C2_MasterRead@trBlock 0158  
                                        ??_I2C_ByteWrite 0031  
                                      Wireless_sleep@reg 0030  
                                  HMC5883L_ReadBits@data 0046  
                                                ___aldiv 0BE9  
                                  HMC5883L_ReadBits@mask 004B  
                                         ??_setSleepTime 0023  
                                        __size_of___lmul 0030  
                                                ___ftadd 0F0A  
                                                ___ftdiv 0DAD  
                                                ___ftneg 1344  
                                                ___lldiv 0931  
                                                ___ftmul 0E56  
                                                ___fttol 0C6B  
                                                ___lwdiv 178F  
                                             ??___altoft 002D  
                              ??_ADC_GetConversionResult 0023  
                        __end_of_HMC5883L_I2C_BufferRead 13FA  
                                  ?_I2C2_BusCollisionISR 0070  
                                             ??___awtoft 002C  
                                             ??___ftpack 0026  
                               TMR1_ReadTimer@readValLow 002B  
                                                _heading 01C8  
                              I2C2_MasterTRBInsert@count 0024  
                                                __ptext1 07FB  
                                                __ptext2 178F  
                                                __ptext3 0931  
                                                __ptext4 15B9  
                                                __ptext5 148C  
                                                __ptext6 0685  
                                                __ptext7 0D0A  
                                                __ptext8 1434  
                                                __ptext9 0801  
                              I2C2_MasterTRBInsert@pflag 0022  
                                Wireless_packageData@var 00C7  
                                 __end_of_I2C_BufferRead 0A37  
                                             ??___lwtoft 002C  
                         ??_TMR1_DefaultInterruptHandler 0070  
                              TMR1_ReadTimer@readValHigh 002A  
                                              _T1CONbits 0018  
                                  _OSCILLATOR_Initialize 130E  
                                              _T2CONbits 001C  
                             __end_ofWireless_init@TADDR 1826  
                         __end_of_Sensor_peripheralSleep 12EB  
                      __size_of_TMR1_SetInterruptHandler 0009  
                                       ___aldiv@dividend 0025  
                               ??_PIN_MANAGER_Initialize 0023  
                              ?_TMR1_SetInterruptHandler 0021  
                                              _IOCAFbits 0393  
                            main@doorClosedUpdateCounter 01D1  
                                              _IOCANbits 0392  
                                             ?_I2C2_Stop 0070  
                                              _IOCAPbits 0391  
                                  _I2C2_FunctionComplete 13C6  
                                                _timeOut 013C  
                            __size_of_Timeout_hasExpired 004D  
                                              _DOOR_init 0800  
                             __size_of_SYSTEM_Initialize 001B  
                                                main@dur 01D5  
                                                clrloop0 1303  
                                   end_of_initialization 006B  
                                __size_of_RF_DataIsReady 001D  
                          ?_Wireless_changeTransmitPower 0070  
                            __end_of_BMP_readTemperature 033D  
                             ??_Diag_getTempSensorHealth 0021  
                             ??_Diag_setTempSensorHealth 0021  
                                      _FVR_IsOutputReady 12FC  
                                      ??_RF_ReadRegister 0023  
                                        ___lldiv@divisor 0021  
                           __end_of_ADC_IsConversionDone 1323  
                                        ___lldiv@counter 002E  
                                     ?_FVR_IsOutputReady 0070  
                                          ?_RF_GetStatus 0070  
                                  I2C2_MasterWrite@pdata 002E  
                                     _p_i2c2_trb_current 0078  
                                  I2C2_MasterWrite@pflag 002B  
                                       ___aldiv@quotient 002C  
                                 I2C2_ISR@i2c_bytes_left 00E4  
                Wireless_isDataTransmitSuccessful@status 0026  
                          __size_of_I2C2_MasterTRBInsert 0055  
                                    ??_FVR_IsOutputReady 0021  
                             Sensor_getSupplyVoltage@res 0047  
                                       ??_WDT_Initialize 0021  
                                              _PORTCbits 000E  
                                        ?_I2C_BufferRead 0031  
                                      __size_of_I2C2_ISR 0149  
                                       _RF_WriteRegister 1449  
                                __end_of_I2C2_MasterRead 16AB  
                                       __CFG_FOSC$INTOSC 0000  
                                __end_of_I2C2_Initialize 14F2  
                                         _TMR1_ReadTimer 1545  
                       __end_of_Timeout_getGlobalCounter 13E8  
                                    _ADC_StartConversion 12D3  
                           Timeout_updateCurrentTime@var 0031  
                                             ?_DOOR_init 0070  
                                       ?_SPI_WriteBuffer 0023  
                              __end_of_FVR_IsOutputReady 1302  
                                            ___ftdiv@exp 003F  
                                        _SPI1_Initialize 1315  
                             RF_ReadRegisterData@bufSize 002B  
                           HMC5883L_TestConnection@F3572 0137  
                                          ?_RF_RxPayload 002F  
              Wireless_determineTransmitPower@initialise 0038  
                                      __size_of_BMP_init 0074  
                           Wireless_packageData@openTime 00BA  
                                      __size_of_DOOR_run 0003  
                                  __end_of_Wireless_init 0BE9  
                                         ??_RF_GetStatus 0025  
                                  __end_of_Wireless_wake 15D8  
                                            ___ftmul@exp 0060  
                                   ?_ADC_StartConversion 0070  
                                          ?_RF_TxPayload 002E  
                                   _currentTransmitPower 00E1  
                                 ??_I2C2_BusCollisionISR 0070  
                                         __end_of___lmul 175C  
                             ??_I2C2_MasterWriteTRBBuild 0025  
                                      __size_of_TMR1_ISR 0009  
                                _Sensor_getSupplyVoltage 0859  
                                         _ADC_Initialize 132B  
                                 ?_OSCILLATOR_Initialize 0070  
                                 __end_of_TMR1_ReadTimer 1562  
                     __end_of_Wireless_checkDataReceived 07FB  
                             _Wireless_checkDataReceived 0786  
                            __size_of_Timeout_setTimeout 0019  
                              __size_of_I2C2_MasterWrite 002A  
                                  _Sensor_peripheralWake 12EB  
                                        RF_WriteRead@val 0024  
                                      __size_of_RF_Write 0010  
                                          ?_RF_WriteRead 0070  
                                 ?_I2C2_FunctionComplete 0070  
                                    start_initialization 0039  
                                RF_RxPayload@payloadSize 002F  
                                            ??_I2C2_Stop 0070  
                        __size_of_PIN_MANAGER_Initialize 002B  
                                   __end_of_setSleepTime 0800  
                       __size_of_HMC5883L_I2C_BufferRead 0012  
                                         ??_RF_RxPayload 0030  
                        I2C2_MasterWriteTRBBuild@address 0023  
                                            _addressSize 00E6  
                               __size_of_PIN_MANAGER_IOC 0006  
                                  __end_of_SPI_WriteRead 12FC  
                                   I2C2_MasterRead@pdata 0029  
                 __end_of_IOCAF2_DefaultInterruptHandler 12CC  
                __size_of_IOCAF2_DefaultInterruptHandler 0001  
                         _IOCAF2_DefaultInterruptHandler 12CB  
                               ?_I2C2_MasterReadTRBBuild 0021  
                         Sensor_getSupplyVoltage@voltage 0044  
                                   I2C2_MasterRead@pflag 002E  
                                            RF_Write@val 0023  
                         ??_Wireless_changeTransmitPower 002F  
                                         ??_RF_TxPayload 002F  
                                  ??_ADC_StartConversion 0021  
                               __size_of_TMR1_Initialize 0017  
                                               ??___lmul 0029  
                            __end_of_SPI_WriteReadBuffer 1618  
                          I2C2_MasterWriteTRBBuild@pdata 0021  
                                   I2C2_ISR@pi2c_buf_ptr 00D8  
                                 __end_of_ADC_Initialize 1333  
                                            __pdataBANK1 00E6  
                                            __pdataBANK2 0166  
                                 __size_of_TMR1_CallBack 000E  
                                        ?_TMR1_ReadTimer 0021  
                                      __size_of___altoft 003D  
                                HMC5883L_ReadBits@length 0045  
                                         ??_RF_WriteRead 0023  
                                      __size_of___awtoft 0022  
                                      __size_of___ftpack 0065  
                                       ?_I2C2_MasterRead 0029  
                                            __pbssCOMMON 0077  
                                       ?_I2C2_Initialize 0070  
                                              ___latbits 0002  
                                      __size_of___lwtoft 0015  
                                          __pcstackBANK0 0020  
                                          __pcstackBANK1 00A0  
                                          __pcstackBANK3 01D0  
                                   _ADC_IsConversionDone 131C  
                               __size_of_TMR2_Initialize 0008  
                                __end_of_SPI1_Initialize 131C  
                                            ??_DOOR_init 0021  
                                               ?_RF_Init 0070  
                                          _i2c2_tr_queue 0162  
                          __size_of_Diag_getSensorHealth 0012  
                      Wireless_checkDataReceived@channel 0039  
                                         _RF_DataIsReady 157F  
                               _Timeout_getGlobalCounter 13D7  
                             __size_of_FVR_IsOutputReady 0006  
                             SPI_WriteReadBuffer@bufSize 0024  
                                              __pnvBANK2 016C  
                            __end_of_RF_ReadRegisterData 15B9  
                              BMP_readTemperature@status 00B8  
                   HMC5883L_I2C_BufferRead@NumByteToRead 003F  
                                       ___lwdiv@dividend 0023  
                                 _PIN_MANAGER_Initialize 16D5  
              __end_of_Wireless_isDataTransmitSuccessful 1398  
             __size_of_Wireless_isDataTransmitSuccessful 000D  
                    ??_Wireless_isDataTransmitSuccessful 0025  
                     ?_Wireless_isDataTransmitSuccessful 0070  
                      _Wireless_isDataTransmitSuccessful 138B  
                                      _RF_ResetStatusIRQ 15D8  
                                 SPI_WriteBuffer@bufSize 0025  
                                      _ADC_SelectChannel 13A6  
                               Wireless_sendData@payload 0034  
                       __end_of_TMR1_SetInterruptHandler 135F  
                                               ?___aldiv 0021  
                              ??_Sensor_getSupplyVoltage 0044  
                                               ?___ftadd 0049  
                                               ?___ftdiv 0031  
                                               ?___ftneg 0041  
                                               ?___lldiv 0021  
                                               ?___ftmul 0056  
                                               ?___fttol 0066  
                                               ?___lwdiv 0021  
                                     ?_RF_ResetStatusIRQ 0070  
                                        ?_ADC_Initialize 0070  
                           __end_of_RF_WriteRegisterData 157F  
                                     ?_ADC_SelectChannel 0070  
                                               _I2C2_ISR 053C  
                           ??_INTERRUPT_InterruptManager 0020  
                                 ?_Sensor_peripheralWake 0070  
                                              __pswtext1 1000  
                                              _doorState 00DC  
                                    ??_RF_ResetStatusIRQ 0025  
                                    ??_ADC_SelectChannel 0021  
                                  ?_ADC_IsConversionDone 0070  
                                I2C_BufferRead@slaveAddr 003A  
                                       __CFG_WDTE$NSLEEP 0000  
                                   __end_of_RF_GetStatus 12E6  
                                        _RF_ReadRegister 14BD  
                                 __end_of_RF_DataIsReady 159C  
                                       ___lwdiv@quotient 0027  
                                         __size_of_limit 0026  
                                 Wireless_packageData@t1 00C9  
                          __size_of_Wireless_packageData 0101  
                        __end_of_I2C2_MasterReadTRBBuild 172C  
                                          _TMR1_CallBack 1398  
                                        ___aldiv@divisor 0021  
                                        ___aldiv@counter 002A  
                                               _BMP_init 0AFA  
                                               _DOOR_run 12D0  
                                               _LATCbits 010E  
                                     Wireless_init@TADDR 1821  
                                              clear_ram0 1302  
                               __end_of_RF_WriteRegister 145F  
                                               _PIE1bits 0091  
                                               _PIE4bits 0094  
                              __end_of_RF_ResetStatusIRQ 15F8  
                              __end_of_ADC_SelectChannel 13B6  
                    __size_of_INTERRUPT_InterruptManager 0033  
                                  __end_of_I2C_ByteWrite 1800  
                                               _PIR1bits 0011  
                                               _PIR4bits 0014  
                                               _SSP1CON1 0215  
                                               _SSP2CON1 021D  
                                               _SSP2CON3 021F  
                                       ??_I2C_BufferRead 0036  
                                               _TMR1_ISR 133B  
                                               _SSP1STAT 0214  
                                               _SSP2STAT 021C  
                                      ??_PIN_MANAGER_IOC 0070  
                          I2C2_MasterTRBInsert@ptrb_list 0021  
                                      ??_TMR1_Initialize 0023  
                                               _RF_Write 13B6  
                                             _ADCON0bits 009D  
                                       _I2C2_MasterWrite 16AB  
                               ADC_SelectChannel@channel 0022  
                                __size_of_FVR_Initialize 0004  
                                   __end_of_RF_RxPayload 141F  
                             __end_of_Timeout_hasExpired 0931  
                                               _WPUCbits 020E  
                         Diag_setTempSensorHealth@health 0022  
                                  __size_of_setSleepTime 0005  
                                 I2C_BufferRead@ReadAddr 0033  
                                   __end_of_RF_TxPayload 081C  
                                    __end_ofatan@coeff_a 1812  
                                    __end_ofatan@coeff_b 1821  
                                        ?_RF_DataIsReady 0070  
             Wireless_determineTransmitPower@testPayload 0039  
                                       ?_SPI1_Initialize 0070  
                                      ___lmul@multiplier 0021  
                           __end_of_I2C2_MasterTRBInsert 09D9  
                                       __size_of_RF_Init 0004  
                                         ?_TMR1_CallBack 0070  
                                _HMC5883L_I2C_BufferRead 13E8  
                                      ??_TMR2_Initialize 0021  
                             ?_Timeout_updateCurrentTime 0070  
                                      I2C_ByteWrite@data 0036  
                                             _EECON1bits 0195  
                                   __end_of_RF_WriteRead 1475  
                       HMC5883L_I2C_BufferRead@slaveAddr 0042  
                               ?_ADC_GetConversionResult 0021  
                                  TMR1_ReadTimer@readVal 0028  
                         I2C2_MasterWriteTRBBuild@length 0022  
                           __size_of_BMP_readTemperature 02CE  
                                __size_of_Wireless_sleep 0018  
                                ??_OSCILLATOR_Initialize 0021  
                                       __size_of___aldiv 0082  
                                       __size_of___ftadd 00F6  
                                           _setSleepTime 07FB  
                                       __size_of___ftdiv 00A9  
                                       __size_of___ftneg 0009  
                                       __size_of___lldiv 0053  
                                               ___altoft 081C  
                                       __size_of___ftmul 00B4  
                                       __size_of___fttol 009F  
                                       __size_of___lwdiv 0035  
            Wireless_determineTransmitPower@latestResult 003A  
                                               ___awtoft 1618  
                                               ___ftpack 0A95  
                                ??_I2C2_FunctionComplete 0070  
                               _TMR1_SetInterruptHandler 1356  
                      __size_of_Diag_getTempSensorHealth 0003  
                                __end_of_RF_ReadRegister 14D7  
                      __size_of_Diag_setTempSensorHealth 0008  
                              ?_Diag_getTempSensorHealth 0070  
                                               ___lwtoft 141F  
                              ?_Diag_setTempSensorHealth 0070  
                                  _TMR1_InterruptHandler 016C  
                            ?_Wireless_checkDataReceived 0070  
                                 ??_ADC_IsConversionDone 0021  
                                _IOCAF2_InterruptHandler 016E  
                                Wireless_sendData@length 0031  
                                            _initialised 00DB  
                                        ___lwdiv@divisor 0021  
                                        ___lwdiv@counter 0026  
                           ??_IOCAF2_SetInterruptHandler 0023  
                                               __ptext10 13B6  
                                               __ptext11 138B  
                                               __ptext20 157F  
                                               __ptext12 12E2  
                                               __ptext21 14BD  
                                               __ptext13 145F  
                                             _T1GCONbits 0019  
                                               __ptext30 13FA  
                                               __ptext22 0859  
                                               __ptext14 175C  
                                               __ptext31 0B6E  
                                               __ptext23 12EB  
                                               __ptext15 165D  
                                               __ptext40 172C  
                                               __ptext32 1562  
                                               __ptext24 12E6  
                                               __ptext16 0786  
                                               __ptext41 1545  
                                               __ptext33 150D  
                                               __ptext25 12FC  
                                               __ptext17 140C  
                                               __ptext50 134D  
                                               __ptext42 13D7  
                                               __ptext34 15D8  
                                               __ptext26 12D3  
                                               __ptext18 159C  
                                               __ptext51 130E  
                                               __ptext43 14F2  
                                               __ptext35 1449  
                                               __ptext27 13A6  
                                               __ptext19 15F8  
                                               __ptext60 1344  
                                               __ptext52 14D7  
                                               __ptext44 12DA  
                                               __ptext36 12F6  
                                               __ptext28 131C  
                                               __ptext61 0E56  
                                               __ptext53 12D6  
                                               __ptext45 1333  
                                               __ptext37 1372  
                                               __ptext29 135F  
                                               __ptext70 12CD  
                                               __ptext62 0DAD  
                                               __ptext54 132B  
                                               __ptext46 1475  
                                               __ptext38 12DE  
                                               __ptext71 0AFA  
                                               __ptext63 0F0A  
                                               __ptext55 12D0  
                                               __ptext47 1356  
                                               __ptext39 0A37  
                                               __ptext80 1700  
                                               __ptext72 17C4  
                                               __ptext64 1618  
                                               __ptext56 0800  
                                               __ptext48 1315  
                                               __ptext81 1323  
                                               __ptext73 09D9  
                                               __ptext65 081C  
                                               __ptext57 006F  
                                               __ptext49 16D5  
                                               __ptext90 053C  
                                               __ptext74 14A4  
                                               __ptext66 0A95  
                                               __ptext58 141F  
                                               __ptext91 1528  
                                               __ptext83 133B  
                                               __ptext75 08E4  
                                               __ptext67 0BE9  
                                               __ptext59 0C6B  
                                               __ptext92 13C6  
                                               __ptext84 1398  
                                               __ptext76 16AB  
                                               __ptext68 089E  
                                               __ptext93 12CA  
                                               __ptext85 1368  
                                               __ptext77 163A  
                                               __ptext69 13E8  
                                               __ptext86 12CC  
                                               __ptext78 1683  
                                               __ptext87 12F0  
                                               __ptext79 0984  
                                               __ptext88 137E  
                                               __ptext89 12CB  
                               Wireless_packageData@data 00C0  
                                           _SSP1CON1bits 0215  
                                Wireless_sendData@status 0033  
                                           _SSP2CON1bits 021D  
                                           _SSP2CON2bits 021E  
                                             _IOCAF2_ISR 137E  
                                    RF_RxPayload@payload 0032  
                                   _RF_WriteRegisterData 1562  
                                      _HMC5883L_ReadBits 089E  
                                          __size_of_main 01FF  
                      __end_of_Timeout_updateCurrentTime 0A95  
                        Wireless_changeTransmitPower@val 0033  
                             __size_of_RF_ResetStatusIRQ 0020  
                                     ?_HMC5883L_ReadBits 0043  
                             __size_of_ADC_SelectChannel 0010  
                                I2C2_MasterWrite@address 0029  
                               __size_of_SPI_WriteBuffer 001B  
                                       ??_TMR1_ReadTimer 0023  
                                               int$flags 007E  
                                               _pressure 0128  
                                    ??_HMC5883L_ReadBits 0047  
                     __end_of_INTERRUPT_InterruptManager 0037  
                             _INTERRUPT_InterruptManager 0004  
                             __end_of_Timeout_setTimeout 14BD  
                                I2C2_MasterWrite@trBlock 015D  
                                           _SSP1STATbits 0214  
                               ??_Sensor_peripheralSleep 0021  
                    __size_of_IOCAF2_SetInterruptHandler 0009  
                                 BMP_readTemperature@tmp 00B9  
                          __size_of_I2C2_BusCollisionISR 0001  
                                            atan@coeff_a 1800  
                                            atan@coeff_b 1812  
                                  __size_of_RF_GetStatus 0004  
                                     RF_ReadRegister@reg 0024  
                                     RF_ReadRegister@val 0025  
                       __size_of_I2C2_MasterReadTRBBuild 002C  
                             ??_Timeout_getGlobalCounter 0025  
                                             _INTCONbits 000B  
                                  Timeout_setTimeout@val 0021  
                __end_of_Wireless_determineTransmitPower 0DAD  
               __size_of_Wireless_determineTransmitPower 00A3  
                      ??_Wireless_determineTransmitPower 0035  
                       ?_Wireless_determineTransmitPower 0070  
                        _Wireless_determineTransmitPower 0D0A  
                                             _FVRCONbits 0117  
                                           _sensorHealth 016A  
                                 __size_of_Wireless_init 007B  
                                               limit@max 0025  
                                               limit@min 0023  
                                               limit@val 0021  
                                  I2C_BufferRead@pBuffer 0031  
                                 __size_of_Wireless_wake 001F  
                                        ??_TMR1_CallBack 0070  
                              ??_HMC5883L_I2C_BufferRead 0041  
                                __size_of_WDT_Initialize 0004  
                      __size_of_I2C2_MasterWriteTRBBuild 0023  
                              __end_of_HMC5883L_ReadBits 08E4  
                              ?_I2C2_MasterWriteTRBBuild 0021  
                                               intlevel1 0000  
                                  ?_RF_WriteRegisterData 0029  
                            __end_of_ADC_StartConversion 12D6  
                                        _doorClosedAngle 00DD  
                                    I2C2_ISR@i2c_address 007A  
                                       ___lldiv@dividend 0025  
                                ?_PIN_MANAGER_Initialize 0070  
                        __end_of_ADC_GetConversionResult 1368  
                                      __CFG_CLKOUTEN$OFF 0000  
                                       ??_ADC_Initialize 0021  
                                           _RF_GetStatus 12E2  
                                 I2C2_MasterWrite@length 0028  
                                ??_Sensor_peripheralWake 0021  
                           __end_of_Diag_getSensorHealth 140C  
                                  __size_of_RF_RxPayload 0013  
                                   _I2C2_MasterTRBInsert 0984  
                                          __pstringtext1 1800  
                                          __pstringtext2 1812  
                                          __pstringtext3 1821  
                                  __size_of_RF_TxPayload 001B  
                                         _FVR_Initialize 12D6  
                                       ?_RF_ReadRegister 0070  
                           __size_of_SPI_WriteReadBuffer 0020  
                                       ___lldiv@quotient 002A  
                                   I2C_BufferRead@status 003B  
                                           ___aldiv@sign 002B  
                                 __size_of_SPI_WriteRead 0006  
                                            ?_IOCAF2_ISR 0070  
                         __end_of_PIN_MANAGER_Initialize 1700  
                                  __size_of_RF_WriteRead 0016  
                               __size_of_I2C2_MasterRead 0028  
                               __size_of_I2C2_Initialize 001B  
                                     _referenceDirection 013E  
                                     __size_of_I2C2_Stop 001D  
                                        _PIN_MANAGER_IOC 12F0  
                               __end_of_I2C2_MasterWrite 16D5  
                                           _RF_RxPayload 140C  
                                      ?_RF_WriteRegister 0023  
                                        _TMR1_Initialize 1475  
                    __size_of_Wireless_checkDataReceived 0075  
                                     main@prevDoorStatus 01D0  
