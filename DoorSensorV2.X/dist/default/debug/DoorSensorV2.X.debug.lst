

Microchip Technology PIC LITE Macro Assembler V1.45 build -152302408 
                                                                                               Fri Feb 15 22:33:43 2019

Microchip Technology Omniscient Code Generator v1.45 (Free mode) build 201711160504
     1                           	processor	16LF1829
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataBANK1,global,class=CODE,delta=2
     5                           	psect	idataBANK2,global,class=CODE,delta=2
     6                           	psect	stringtext1,global,class=STRCODE,delta=2
     7                           	psect	stringtext2,global,class=STRCODE,delta=2
     8                           	psect	stringtext3,global,class=STRCODE,delta=2
     9                           	psect	nvCOMMON,global,class=COMMON,space=1,delta=1
    10                           	psect	nvBANK2,global,class=BANK2,space=1,delta=1
    11                           	psect	cinit,global,class=CODE,merge=1,delta=2
    12                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
    13                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    14                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1
    15                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1
    16                           	psect	dataBANK2,global,class=BANK2,space=1,delta=1
    17                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1
    18                           	psect	clrtext,global,class=CODE,delta=2
    19                           	psect	cstackBANK3,global,class=BANK3,space=1,delta=1
    20                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    21                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    22                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    23                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    24                           	psect	text1,local,class=CODE,merge=1,delta=2
    25                           	psect	text2,local,class=CODE,merge=1,delta=2,group=2
    26                           	psect	text3,local,class=CODE,merge=1,delta=2,group=2
    27                           	psect	text4,local,class=CODE,merge=1,delta=2
    28                           	psect	text5,local,class=CODE,merge=1,delta=2
    29                           	psect	text6,local,class=CODE,merge=1,delta=2
    30                           	psect	text7,local,class=CODE,merge=1,delta=2
    31                           	psect	text8,local,class=CODE,merge=1,delta=2
    32                           	psect	text9,local,class=CODE,merge=1,delta=2
    33                           	psect	text10,local,class=CODE,merge=1,delta=2
    34                           	psect	text11,local,class=CODE,merge=1,delta=2
    35                           	psect	text12,local,class=CODE,merge=1,delta=2
    36                           	psect	text13,local,class=CODE,merge=1,delta=2
    37                           	psect	text14,local,class=CODE,merge=1,delta=2
    38                           	psect	text15,local,class=CODE,merge=1,delta=2
    39                           	psect	text16,local,class=CODE,merge=1,delta=2
    40                           	psect	text17,local,class=CODE,merge=1,delta=2
    41                           	psect	text18,local,class=CODE,merge=1,delta=2
    42                           	psect	text19,local,class=CODE,merge=1,delta=2
    43                           	psect	text20,local,class=CODE,merge=1,delta=2
    44                           	psect	text21,local,class=CODE,merge=1,delta=2
    45                           	psect	text22,local,class=CODE,merge=1,delta=2
    46                           	psect	text23,local,class=CODE,merge=1,delta=2
    47                           	psect	text24,local,class=CODE,merge=1,delta=2
    48                           	psect	text25,local,class=CODE,merge=1,delta=2
    49                           	psect	text26,local,class=CODE,merge=1,delta=2
    50                           	psect	text27,local,class=CODE,merge=1,delta=2
    51                           	psect	text28,local,class=CODE,merge=1,delta=2
    52                           	psect	text29,local,class=CODE,merge=1,delta=2
    53                           	psect	text30,local,class=CODE,merge=1,delta=2
    54                           	psect	text31,local,class=CODE,merge=1,delta=2
    55                           	psect	text32,local,class=CODE,merge=1,delta=2
    56                           	psect	text33,local,class=CODE,merge=1,delta=2
    57                           	psect	text34,local,class=CODE,merge=1,delta=2
    58                           	psect	text35,local,class=CODE,merge=1,delta=2
    59                           	psect	text36,local,class=CODE,merge=1,delta=2
    60                           	psect	text37,local,class=CODE,merge=1,delta=2
    61                           	psect	text38,local,class=CODE,merge=1,delta=2,group=2
    62                           	psect	text39,local,class=CODE,merge=1,delta=2
    63                           	psect	text40,local,class=CODE,merge=1,delta=2
    64                           	psect	text41,local,class=CODE,merge=1,delta=2
    65                           	psect	text42,local,class=CODE,merge=1,delta=2
    66                           	psect	text43,local,class=CODE,merge=1,delta=2
    67                           	psect	text44,local,class=CODE,merge=1,delta=2
    68                           	psect	text45,local,class=CODE,merge=1,delta=2
    69                           	psect	text46,local,class=CODE,merge=1,delta=2
    70                           	psect	text47,local,class=CODE,merge=1,delta=2
    71                           	psect	text48,local,class=CODE,merge=1,delta=2
    72                           	psect	text49,local,class=CODE,merge=1,delta=2
    73                           	psect	text50,local,class=CODE,merge=1,delta=2
    74                           	psect	text51,local,class=CODE,merge=1,delta=2
    75                           	psect	text52,local,class=CODE,merge=1,delta=2
    76                           	psect	text53,local,class=CODE,merge=1,delta=2
    77                           	psect	text54,local,class=CODE,merge=1,delta=2
    78                           	psect	text55,local,class=CODE,merge=1,delta=2
    79                           	psect	text56,local,class=CODE,merge=1,delta=2,group=2
    80                           	psect	text57,local,class=CODE,merge=1,delta=2,group=2
    81                           	psect	text58,local,class=CODE,merge=1,delta=2,group=2
    82                           	psect	text59,local,class=CODE,merge=1,delta=2,group=2
    83                           	psect	text60,local,class=CODE,merge=1,delta=2,group=2
    84                           	psect	text61,local,class=CODE,merge=1,delta=2,group=2
    85                           	psect	text62,local,class=CODE,merge=1,delta=2,group=2
    86                           	psect	text63,local,class=CODE,merge=1,delta=2,group=2
    87                           	psect	text64,local,class=CODE,merge=1,delta=2,group=2
    88                           	psect	text65,local,class=CODE,merge=1,delta=2,group=2
    89                           	psect	text66,local,class=CODE,merge=1,delta=2
    90                           	psect	text67,local,class=CODE,merge=1,delta=2
    91                           	psect	text68,local,class=CODE,merge=1,delta=2
    92                           	psect	text69,local,class=CODE,merge=1,delta=2
    93                           	psect	text70,local,class=CODE,merge=1,delta=2
    94                           	psect	text71,local,class=CODE,merge=1,delta=2
    95                           	psect	text72,local,class=CODE,merge=1,delta=2
    96                           	psect	text73,local,class=CODE,merge=1,delta=2
    97                           	psect	text74,local,class=CODE,merge=1,delta=2
    98                           	psect	text75,local,class=CODE,merge=1,delta=2
    99                           	psect	text76,local,class=CODE,merge=1,delta=2
   100                           	psect	text77,local,class=CODE,merge=1,delta=2
   101                           	psect	text78,local,class=CODE,merge=1,delta=2
   102                           	psect	text79,local,class=CODE,merge=1,delta=2
   103                           	psect	intentry,global,class=CODE,delta=2
   104                           	psect	text81,local,class=CODE,merge=1,delta=2
   105                           	psect	text82,local,class=CODE,merge=1,delta=2
   106                           	psect	text83,local,class=CODE,merge=1,delta=2
   107                           	psect	text84,local,class=CODE,merge=1,delta=2
   108                           	psect	text85,local,class=CODE,merge=1,delta=2
   109                           	psect	text86,local,class=CODE,merge=1,delta=2
   110                           	psect	text87,local,class=CODE,merge=1,delta=2
   111                           	psect	text88,local,class=CODE,merge=1,delta=2
   112                           	psect	swtext1,local,class=CONST,delta=2
   113                           	psect	text89,local,class=CODE,merge=1,delta=2
   114                           	psect	text90,local,class=CODE,merge=1,delta=2
   115                           	psect	text91,local,class=CODE,merge=1,delta=2
   116                           	dabs	1,0x7E,2
   117  0000                     
   118                           ; Version 1.45
   119                           ; Generated 16/11/2017 GMT
   120                           ; 
   121                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
   122                           ; All rights reserved.
   123                           ; 
   124                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
   125                           ; 
   126                           ; Redistribution and use in source and binary forms, with or without modification, are
   127                           ; permitted provided that the following conditions are met:
   128                           ; 
   129                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
   130                           ;        conditions and the following disclaimer.
   131                           ; 
   132                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
   133                           ;        of conditions and the following disclaimer in the documentation and/or other
   134                           ;        materials provided with the distribution.
   135                           ; 
   136                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
   137                           ;        software without specific prior written permission.
   138                           ; 
   139                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   140                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   141                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   142                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   143                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   144                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   145                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   146                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   147                           ; 
   148                           ; 
   149                           ; Code-generator required, PIC16LF1829 Definitions
   150                           ; 
   151                           ; SFR Addresses
   152  0000                     	;# 
   153  0001                     	;# 
   154  0002                     	;# 
   155  0003                     	;# 
   156  0004                     	;# 
   157  0005                     	;# 
   158  0006                     	;# 
   159  0007                     	;# 
   160  0008                     	;# 
   161  0009                     	;# 
   162  000A                     	;# 
   163  000B                     	;# 
   164  000C                     	;# 
   165  000D                     	;# 
   166  000E                     	;# 
   167  0011                     	;# 
   168  0012                     	;# 
   169  0013                     	;# 
   170  0014                     	;# 
   171  0015                     	;# 
   172  0016                     	;# 
   173  0016                     	;# 
   174  0017                     	;# 
   175  0018                     	;# 
   176  0019                     	;# 
   177  001A                     	;# 
   178  001B                     	;# 
   179  001C                     	;# 
   180  001E                     	;# 
   181  001F                     	;# 
   182  008C                     	;# 
   183  008D                     	;# 
   184  008E                     	;# 
   185  0091                     	;# 
   186  0092                     	;# 
   187  0093                     	;# 
   188  0094                     	;# 
   189  0095                     	;# 
   190  0096                     	;# 
   191  0097                     	;# 
   192  0098                     	;# 
   193  0099                     	;# 
   194  009A                     	;# 
   195  009B                     	;# 
   196  009B                     	;# 
   197  009C                     	;# 
   198  009D                     	;# 
   199  009E                     	;# 
   200  010C                     	;# 
   201  010D                     	;# 
   202  010E                     	;# 
   203  0111                     	;# 
   204  0112                     	;# 
   205  0113                     	;# 
   206  0114                     	;# 
   207  0115                     	;# 
   208  0116                     	;# 
   209  0117                     	;# 
   210  0118                     	;# 
   211  0119                     	;# 
   212  011A                     	;# 
   213  011B                     	;# 
   214  011D                     	;# 
   215  011E                     	;# 
   216  018C                     	;# 
   217  018D                     	;# 
   218  018E                     	;# 
   219  0191                     	;# 
   220  0191                     	;# 
   221  0192                     	;# 
   222  0193                     	;# 
   223  0193                     	;# 
   224  0193                     	;# 
   225  0194                     	;# 
   226  0195                     	;# 
   227  0196                     	;# 
   228  0199                     	;# 
   229  019A                     	;# 
   230  019B                     	;# 
   231  019B                     	;# 
   232  019B                     	;# 
   233  019B                     	;# 
   234  019C                     	;# 
   235  019C                     	;# 
   236  019D                     	;# 
   237  019E                     	;# 
   238  019F                     	;# 
   239  020C                     	;# 
   240  020D                     	;# 
   241  020E                     	;# 
   242  0211                     	;# 
   243  0211                     	;# 
   244  0212                     	;# 
   245  0212                     	;# 
   246  0213                     	;# 
   247  0213                     	;# 
   248  0214                     	;# 
   249  0214                     	;# 
   250  0215                     	;# 
   251  0215                     	;# 
   252  0215                     	;# 
   253  0216                     	;# 
   254  0216                     	;# 
   255  0217                     	;# 
   256  0217                     	;# 
   257  0219                     	;# 
   258  021A                     	;# 
   259  021B                     	;# 
   260  021C                     	;# 
   261  021D                     	;# 
   262  021E                     	;# 
   263  021F                     	;# 
   264  0291                     	;# 
   265  0291                     	;# 
   266  0292                     	;# 
   267  0293                     	;# 
   268  0294                     	;# 
   269  0295                     	;# 
   270  0295                     	;# 
   271  0296                     	;# 
   272  0298                     	;# 
   273  0298                     	;# 
   274  0299                     	;# 
   275  029A                     	;# 
   276  029B                     	;# 
   277  029C                     	;# 
   278  029D                     	;# 
   279  029E                     	;# 
   280  0311                     	;# 
   281  0311                     	;# 
   282  0312                     	;# 
   283  0313                     	;# 
   284  0318                     	;# 
   285  0318                     	;# 
   286  0319                     	;# 
   287  031A                     	;# 
   288  038C                     	;# 
   289  038D                     	;# 
   290  038E                     	;# 
   291  0391                     	;# 
   292  0392                     	;# 
   293  0393                     	;# 
   294  0394                     	;# 
   295  0395                     	;# 
   296  0396                     	;# 
   297  039A                     	;# 
   298  039C                     	;# 
   299  039D                     	;# 
   300  039E                     	;# 
   301  039F                     	;# 
   302  0415                     	;# 
   303  0416                     	;# 
   304  0417                     	;# 
   305  041C                     	;# 
   306  041D                     	;# 
   307  041E                     	;# 
   308  0FE4                     	;# 
   309  0FE5                     	;# 
   310  0FE6                     	;# 
   311  0FE7                     	;# 
   312  0FE8                     	;# 
   313  0FE9                     	;# 
   314  0FEA                     	;# 
   315  0FEB                     	;# 
   316  0FED                     	;# 
   317  0FEE                     	;# 
   318  0FEF                     	;# 
   319  0000                     	;# 
   320  0001                     	;# 
   321  0002                     	;# 
   322  0003                     	;# 
   323  0004                     	;# 
   324  0005                     	;# 
   325  0006                     	;# 
   326  0007                     	;# 
   327  0008                     	;# 
   328  0009                     	;# 
   329  000A                     	;# 
   330  000B                     	;# 
   331  000C                     	;# 
   332  000D                     	;# 
   333  000E                     	;# 
   334  0011                     	;# 
   335  0012                     	;# 
   336  0013                     	;# 
   337  0014                     	;# 
   338  0015                     	;# 
   339  0016                     	;# 
   340  0016                     	;# 
   341  0017                     	;# 
   342  0018                     	;# 
   343  0019                     	;# 
   344  001A                     	;# 
   345  001B                     	;# 
   346  001C                     	;# 
   347  001E                     	;# 
   348  001F                     	;# 
   349  008C                     	;# 
   350  008D                     	;# 
   351  008E                     	;# 
   352  0091                     	;# 
   353  0092                     	;# 
   354  0093                     	;# 
   355  0094                     	;# 
   356  0095                     	;# 
   357  0096                     	;# 
   358  0097                     	;# 
   359  0098                     	;# 
   360  0099                     	;# 
   361  009A                     	;# 
   362  009B                     	;# 
   363  009B                     	;# 
   364  009C                     	;# 
   365  009D                     	;# 
   366  009E                     	;# 
   367  010C                     	;# 
   368  010D                     	;# 
   369  010E                     	;# 
   370  0111                     	;# 
   371  0112                     	;# 
   372  0113                     	;# 
   373  0114                     	;# 
   374  0115                     	;# 
   375  0116                     	;# 
   376  0117                     	;# 
   377  0118                     	;# 
   378  0119                     	;# 
   379  011A                     	;# 
   380  011B                     	;# 
   381  011D                     	;# 
   382  011E                     	;# 
   383  018C                     	;# 
   384  018D                     	;# 
   385  018E                     	;# 
   386  0191                     	;# 
   387  0191                     	;# 
   388  0192                     	;# 
   389  0193                     	;# 
   390  0193                     	;# 
   391  0193                     	;# 
   392  0194                     	;# 
   393  0195                     	;# 
   394  0196                     	;# 
   395  0199                     	;# 
   396  019A                     	;# 
   397  019B                     	;# 
   398  019B                     	;# 
   399  019B                     	;# 
   400  019B                     	;# 
   401  019C                     	;# 
   402  019C                     	;# 
   403  019D                     	;# 
   404  019E                     	;# 
   405  019F                     	;# 
   406  020C                     	;# 
   407  020D                     	;# 
   408  020E                     	;# 
   409  0211                     	;# 
   410  0211                     	;# 
   411  0212                     	;# 
   412  0212                     	;# 
   413  0213                     	;# 
   414  0213                     	;# 
   415  0214                     	;# 
   416  0214                     	;# 
   417  0215                     	;# 
   418  0215                     	;# 
   419  0215                     	;# 
   420  0216                     	;# 
   421  0216                     	;# 
   422  0217                     	;# 
   423  0217                     	;# 
   424  0219                     	;# 
   425  021A                     	;# 
   426  021B                     	;# 
   427  021C                     	;# 
   428  021D                     	;# 
   429  021E                     	;# 
   430  021F                     	;# 
   431  0291                     	;# 
   432  0291                     	;# 
   433  0292                     	;# 
   434  0293                     	;# 
   435  0294                     	;# 
   436  0295                     	;# 
   437  0295                     	;# 
   438  0296                     	;# 
   439  0298                     	;# 
   440  0298                     	;# 
   441  0299                     	;# 
   442  029A                     	;# 
   443  029B                     	;# 
   444  029C                     	;# 
   445  029D                     	;# 
   446  029E                     	;# 
   447  0311                     	;# 
   448  0311                     	;# 
   449  0312                     	;# 
   450  0313                     	;# 
   451  0318                     	;# 
   452  0318                     	;# 
   453  0319                     	;# 
   454  031A                     	;# 
   455  038C                     	;# 
   456  038D                     	;# 
   457  038E                     	;# 
   458  0391                     	;# 
   459  0392                     	;# 
   460  0393                     	;# 
   461  0394                     	;# 
   462  0395                     	;# 
   463  0396                     	;# 
   464  039A                     	;# 
   465  039C                     	;# 
   466  039D                     	;# 
   467  039E                     	;# 
   468  039F                     	;# 
   469  0415                     	;# 
   470  0416                     	;# 
   471  0417                     	;# 
   472  041C                     	;# 
   473  041D                     	;# 
   474  041E                     	;# 
   475  0FE4                     	;# 
   476  0FE5                     	;# 
   477  0FE6                     	;# 
   478  0FE7                     	;# 
   479  0FE8                     	;# 
   480  0FE9                     	;# 
   481  0FEA                     	;# 
   482  0FEB                     	;# 
   483  0FED                     	;# 
   484  0FEE                     	;# 
   485  0FEF                     	;# 
   486  0000                     	;# 
   487  0001                     	;# 
   488  0002                     	;# 
   489  0003                     	;# 
   490  0004                     	;# 
   491  0005                     	;# 
   492  0006                     	;# 
   493  0007                     	;# 
   494  0008                     	;# 
   495  0009                     	;# 
   496  000A                     	;# 
   497  000B                     	;# 
   498  000C                     	;# 
   499  000D                     	;# 
   500  000E                     	;# 
   501  0011                     	;# 
   502  0012                     	;# 
   503  0013                     	;# 
   504  0014                     	;# 
   505  0015                     	;# 
   506  0016                     	;# 
   507  0016                     	;# 
   508  0017                     	;# 
   509  0018                     	;# 
   510  0019                     	;# 
   511  001A                     	;# 
   512  001B                     	;# 
   513  001C                     	;# 
   514  001E                     	;# 
   515  001F                     	;# 
   516  008C                     	;# 
   517  008D                     	;# 
   518  008E                     	;# 
   519  0091                     	;# 
   520  0092                     	;# 
   521  0093                     	;# 
   522  0094                     	;# 
   523  0095                     	;# 
   524  0096                     	;# 
   525  0097                     	;# 
   526  0098                     	;# 
   527  0099                     	;# 
   528  009A                     	;# 
   529  009B                     	;# 
   530  009B                     	;# 
   531  009C                     	;# 
   532  009D                     	;# 
   533  009E                     	;# 
   534  010C                     	;# 
   535  010D                     	;# 
   536  010E                     	;# 
   537  0111                     	;# 
   538  0112                     	;# 
   539  0113                     	;# 
   540  0114                     	;# 
   541  0115                     	;# 
   542  0116                     	;# 
   543  0117                     	;# 
   544  0118                     	;# 
   545  0119                     	;# 
   546  011A                     	;# 
   547  011B                     	;# 
   548  011D                     	;# 
   549  011E                     	;# 
   550  018C                     	;# 
   551  018D                     	;# 
   552  018E                     	;# 
   553  0191                     	;# 
   554  0191                     	;# 
   555  0192                     	;# 
   556  0193                     	;# 
   557  0193                     	;# 
   558  0193                     	;# 
   559  0194                     	;# 
   560  0195                     	;# 
   561  0196                     	;# 
   562  0199                     	;# 
   563  019A                     	;# 
   564  019B                     	;# 
   565  019B                     	;# 
   566  019B                     	;# 
   567  019B                     	;# 
   568  019C                     	;# 
   569  019C                     	;# 
   570  019D                     	;# 
   571  019E                     	;# 
   572  019F                     	;# 
   573  020C                     	;# 
   574  020D                     	;# 
   575  020E                     	;# 
   576  0211                     	;# 
   577  0211                     	;# 
   578  0212                     	;# 
   579  0212                     	;# 
   580  0213                     	;# 
   581  0213                     	;# 
   582  0214                     	;# 
   583  0214                     	;# 
   584  0215                     	;# 
   585  0215                     	;# 
   586  0215                     	;# 
   587  0216                     	;# 
   588  0216                     	;# 
   589  0217                     	;# 
   590  0217                     	;# 
   591  0219                     	;# 
   592  021A                     	;# 
   593  021B                     	;# 
   594  021C                     	;# 
   595  021D                     	;# 
   596  021E                     	;# 
   597  021F                     	;# 
   598  0291                     	;# 
   599  0291                     	;# 
   600  0292                     	;# 
   601  0293                     	;# 
   602  0294                     	;# 
   603  0295                     	;# 
   604  0295                     	;# 
   605  0296                     	;# 
   606  0298                     	;# 
   607  0298                     	;# 
   608  0299                     	;# 
   609  029A                     	;# 
   610  029B                     	;# 
   611  029C                     	;# 
   612  029D                     	;# 
   613  029E                     	;# 
   614  0311                     	;# 
   615  0311                     	;# 
   616  0312                     	;# 
   617  0313                     	;# 
   618  0318                     	;# 
   619  0318                     	;# 
   620  0319                     	;# 
   621  031A                     	;# 
   622  038C                     	;# 
   623  038D                     	;# 
   624  038E                     	;# 
   625  0391                     	;# 
   626  0392                     	;# 
   627  0393                     	;# 
   628  0394                     	;# 
   629  0395                     	;# 
   630  0396                     	;# 
   631  039A                     	;# 
   632  039C                     	;# 
   633  039D                     	;# 
   634  039E                     	;# 
   635  039F                     	;# 
   636  0415                     	;# 
   637  0416                     	;# 
   638  0417                     	;# 
   639  041C                     	;# 
   640  041D                     	;# 
   641  041E                     	;# 
   642  0FE4                     	;# 
   643  0FE5                     	;# 
   644  0FE6                     	;# 
   645  0FE7                     	;# 
   646  0FE8                     	;# 
   647  0FE9                     	;# 
   648  0FEA                     	;# 
   649  0FEB                     	;# 
   650  0FED                     	;# 
   651  0FEE                     	;# 
   652  0FEF                     	;# 
   653  0000                     	;# 
   654  0001                     	;# 
   655  0002                     	;# 
   656  0003                     	;# 
   657  0004                     	;# 
   658  0005                     	;# 
   659  0006                     	;# 
   660  0007                     	;# 
   661  0008                     	;# 
   662  0009                     	;# 
   663  000A                     	;# 
   664  000B                     	;# 
   665  000C                     	;# 
   666  000D                     	;# 
   667  000E                     	;# 
   668  0011                     	;# 
   669  0012                     	;# 
   670  0013                     	;# 
   671  0014                     	;# 
   672  0015                     	;# 
   673  0016                     	;# 
   674  0016                     	;# 
   675  0017                     	;# 
   676  0018                     	;# 
   677  0019                     	;# 
   678  001A                     	;# 
   679  001B                     	;# 
   680  001C                     	;# 
   681  001E                     	;# 
   682  001F                     	;# 
   683  008C                     	;# 
   684  008D                     	;# 
   685  008E                     	;# 
   686  0091                     	;# 
   687  0092                     	;# 
   688  0093                     	;# 
   689  0094                     	;# 
   690  0095                     	;# 
   691  0096                     	;# 
   692  0097                     	;# 
   693  0098                     	;# 
   694  0099                     	;# 
   695  009A                     	;# 
   696  009B                     	;# 
   697  009B                     	;# 
   698  009C                     	;# 
   699  009D                     	;# 
   700  009E                     	;# 
   701  010C                     	;# 
   702  010D                     	;# 
   703  010E                     	;# 
   704  0111                     	;# 
   705  0112                     	;# 
   706  0113                     	;# 
   707  0114                     	;# 
   708  0115                     	;# 
   709  0116                     	;# 
   710  0117                     	;# 
   711  0118                     	;# 
   712  0119                     	;# 
   713  011A                     	;# 
   714  011B                     	;# 
   715  011D                     	;# 
   716  011E                     	;# 
   717  018C                     	;# 
   718  018D                     	;# 
   719  018E                     	;# 
   720  0191                     	;# 
   721  0191                     	;# 
   722  0192                     	;# 
   723  0193                     	;# 
   724  0193                     	;# 
   725  0193                     	;# 
   726  0194                     	;# 
   727  0195                     	;# 
   728  0196                     	;# 
   729  0199                     	;# 
   730  019A                     	;# 
   731  019B                     	;# 
   732  019B                     	;# 
   733  019B                     	;# 
   734  019B                     	;# 
   735  019C                     	;# 
   736  019C                     	;# 
   737  019D                     	;# 
   738  019E                     	;# 
   739  019F                     	;# 
   740  020C                     	;# 
   741  020D                     	;# 
   742  020E                     	;# 
   743  0211                     	;# 
   744  0211                     	;# 
   745  0212                     	;# 
   746  0212                     	;# 
   747  0213                     	;# 
   748  0213                     	;# 
   749  0214                     	;# 
   750  0214                     	;# 
   751  0215                     	;# 
   752  0215                     	;# 
   753  0215                     	;# 
   754  0216                     	;# 
   755  0216                     	;# 
   756  0217                     	;# 
   757  0217                     	;# 
   758  0219                     	;# 
   759  021A                     	;# 
   760  021B                     	;# 
   761  021C                     	;# 
   762  021D                     	;# 
   763  021E                     	;# 
   764  021F                     	;# 
   765  0291                     	;# 
   766  0291                     	;# 
   767  0292                     	;# 
   768  0293                     	;# 
   769  0294                     	;# 
   770  0295                     	;# 
   771  0295                     	;# 
   772  0296                     	;# 
   773  0298                     	;# 
   774  0298                     	;# 
   775  0299                     	;# 
   776  029A                     	;# 
   777  029B                     	;# 
   778  029C                     	;# 
   779  029D                     	;# 
   780  029E                     	;# 
   781  0311                     	;# 
   782  0311                     	;# 
   783  0312                     	;# 
   784  0313                     	;# 
   785  0318                     	;# 
   786  0318                     	;# 
   787  0319                     	;# 
   788  031A                     	;# 
   789  038C                     	;# 
   790  038D                     	;# 
   791  038E                     	;# 
   792  0391                     	;# 
   793  0392                     	;# 
   794  0393                     	;# 
   795  0394                     	;# 
   796  0395                     	;# 
   797  0396                     	;# 
   798  039A                     	;# 
   799  039C                     	;# 
   800  039D                     	;# 
   801  039E                     	;# 
   802  039F                     	;# 
   803  0415                     	;# 
   804  0416                     	;# 
   805  0417                     	;# 
   806  041C                     	;# 
   807  041D                     	;# 
   808  041E                     	;# 
   809  0FE4                     	;# 
   810  0FE5                     	;# 
   811  0FE6                     	;# 
   812  0FE7                     	;# 
   813  0FE8                     	;# 
   814  0FE9                     	;# 
   815  0FEA                     	;# 
   816  0FEB                     	;# 
   817  0FED                     	;# 
   818  0FEE                     	;# 
   819  0FEF                     	;# 
   820  0000                     	;# 
   821  0001                     	;# 
   822  0002                     	;# 
   823  0003                     	;# 
   824  0004                     	;# 
   825  0005                     	;# 
   826  0006                     	;# 
   827  0007                     	;# 
   828  0008                     	;# 
   829  0009                     	;# 
   830  000A                     	;# 
   831  000B                     	;# 
   832  000C                     	;# 
   833  000D                     	;# 
   834  000E                     	;# 
   835  0011                     	;# 
   836  0012                     	;# 
   837  0013                     	;# 
   838  0014                     	;# 
   839  0015                     	;# 
   840  0016                     	;# 
   841  0016                     	;# 
   842  0017                     	;# 
   843  0018                     	;# 
   844  0019                     	;# 
   845  001A                     	;# 
   846  001B                     	;# 
   847  001C                     	;# 
   848  001E                     	;# 
   849  001F                     	;# 
   850  008C                     	;# 
   851  008D                     	;# 
   852  008E                     	;# 
   853  0091                     	;# 
   854  0092                     	;# 
   855  0093                     	;# 
   856  0094                     	;# 
   857  0095                     	;# 
   858  0096                     	;# 
   859  0097                     	;# 
   860  0098                     	;# 
   861  0099                     	;# 
   862  009A                     	;# 
   863  009B                     	;# 
   864  009B                     	;# 
   865  009C                     	;# 
   866  009D                     	;# 
   867  009E                     	;# 
   868  010C                     	;# 
   869  010D                     	;# 
   870  010E                     	;# 
   871  0111                     	;# 
   872  0112                     	;# 
   873  0113                     	;# 
   874  0114                     	;# 
   875  0115                     	;# 
   876  0116                     	;# 
   877  0117                     	;# 
   878  0118                     	;# 
   879  0119                     	;# 
   880  011A                     	;# 
   881  011B                     	;# 
   882  011D                     	;# 
   883  011E                     	;# 
   884  018C                     	;# 
   885  018D                     	;# 
   886  018E                     	;# 
   887  0191                     	;# 
   888  0191                     	;# 
   889  0192                     	;# 
   890  0193                     	;# 
   891  0193                     	;# 
   892  0193                     	;# 
   893  0194                     	;# 
   894  0195                     	;# 
   895  0196                     	;# 
   896  0199                     	;# 
   897  019A                     	;# 
   898  019B                     	;# 
   899  019B                     	;# 
   900  019B                     	;# 
   901  019B                     	;# 
   902  019C                     	;# 
   903  019C                     	;# 
   904  019D                     	;# 
   905  019E                     	;# 
   906  019F                     	;# 
   907  020C                     	;# 
   908  020D                     	;# 
   909  020E                     	;# 
   910  0211                     	;# 
   911  0211                     	;# 
   912  0212                     	;# 
   913  0212                     	;# 
   914  0213                     	;# 
   915  0213                     	;# 
   916  0214                     	;# 
   917  0214                     	;# 
   918  0215                     	;# 
   919  0215                     	;# 
   920  0215                     	;# 
   921  0216                     	;# 
   922  0216                     	;# 
   923  0217                     	;# 
   924  0217                     	;# 
   925  0219                     	;# 
   926  021A                     	;# 
   927  021B                     	;# 
   928  021C                     	;# 
   929  021D                     	;# 
   930  021E                     	;# 
   931  021F                     	;# 
   932  0291                     	;# 
   933  0291                     	;# 
   934  0292                     	;# 
   935  0293                     	;# 
   936  0294                     	;# 
   937  0295                     	;# 
   938  0295                     	;# 
   939  0296                     	;# 
   940  0298                     	;# 
   941  0298                     	;# 
   942  0299                     	;# 
   943  029A                     	;# 
   944  029B                     	;# 
   945  029C                     	;# 
   946  029D                     	;# 
   947  029E                     	;# 
   948  0311                     	;# 
   949  0311                     	;# 
   950  0312                     	;# 
   951  0313                     	;# 
   952  0318                     	;# 
   953  0318                     	;# 
   954  0319                     	;# 
   955  031A                     	;# 
   956  038C                     	;# 
   957  038D                     	;# 
   958  038E                     	;# 
   959  0391                     	;# 
   960  0392                     	;# 
   961  0393                     	;# 
   962  0394                     	;# 
   963  0395                     	;# 
   964  0396                     	;# 
   965  039A                     	;# 
   966  039C                     	;# 
   967  039D                     	;# 
   968  039E                     	;# 
   969  039F                     	;# 
   970  0415                     	;# 
   971  0416                     	;# 
   972  0417                     	;# 
   973  041C                     	;# 
   974  041D                     	;# 
   975  041E                     	;# 
   976  0FE4                     	;# 
   977  0FE5                     	;# 
   978  0FE6                     	;# 
   979  0FE7                     	;# 
   980  0FE8                     	;# 
   981  0FE9                     	;# 
   982  0FEA                     	;# 
   983  0FEB                     	;# 
   984  0FED                     	;# 
   985  0FEE                     	;# 
   986  0FEF                     	;# 
   987  0000                     	;# 
   988  0001                     	;# 
   989  0002                     	;# 
   990  0003                     	;# 
   991  0004                     	;# 
   992  0005                     	;# 
   993  0006                     	;# 
   994  0007                     	;# 
   995  0008                     	;# 
   996  0009                     	;# 
   997  000A                     	;# 
   998  000B                     	;# 
   999  000C                     	;# 
  1000  000D                     	;# 
  1001  000E                     	;# 
  1002  0011                     	;# 
  1003  0012                     	;# 
  1004  0013                     	;# 
  1005  0014                     	;# 
  1006  0015                     	;# 
  1007  0016                     	;# 
  1008  0016                     	;# 
  1009  0017                     	;# 
  1010  0018                     	;# 
  1011  0019                     	;# 
  1012  001A                     	;# 
  1013  001B                     	;# 
  1014  001C                     	;# 
  1015  001E                     	;# 
  1016  001F                     	;# 
  1017  008C                     	;# 
  1018  008D                     	;# 
  1019  008E                     	;# 
  1020  0091                     	;# 
  1021  0092                     	;# 
  1022  0093                     	;# 
  1023  0094                     	;# 
  1024  0095                     	;# 
  1025  0096                     	;# 
  1026  0097                     	;# 
  1027  0098                     	;# 
  1028  0099                     	;# 
  1029  009A                     	;# 
  1030  009B                     	;# 
  1031  009B                     	;# 
  1032  009C                     	;# 
  1033  009D                     	;# 
  1034  009E                     	;# 
  1035  010C                     	;# 
  1036  010D                     	;# 
  1037  010E                     	;# 
  1038  0111                     	;# 
  1039  0112                     	;# 
  1040  0113                     	;# 
  1041  0114                     	;# 
  1042  0115                     	;# 
  1043  0116                     	;# 
  1044  0117                     	;# 
  1045  0118                     	;# 
  1046  0119                     	;# 
  1047  011A                     	;# 
  1048  011B                     	;# 
  1049  011D                     	;# 
  1050  011E                     	;# 
  1051  018C                     	;# 
  1052  018D                     	;# 
  1053  018E                     	;# 
  1054  0191                     	;# 
  1055  0191                     	;# 
  1056  0192                     	;# 
  1057  0193                     	;# 
  1058  0193                     	;# 
  1059  0193                     	;# 
  1060  0194                     	;# 
  1061  0195                     	;# 
  1062  0196                     	;# 
  1063  0199                     	;# 
  1064  019A                     	;# 
  1065  019B                     	;# 
  1066  019B                     	;# 
  1067  019B                     	;# 
  1068  019B                     	;# 
  1069  019C                     	;# 
  1070  019C                     	;# 
  1071  019D                     	;# 
  1072  019E                     	;# 
  1073  019F                     	;# 
  1074  020C                     	;# 
  1075  020D                     	;# 
  1076  020E                     	;# 
  1077  0211                     	;# 
  1078  0211                     	;# 
  1079  0212                     	;# 
  1080  0212                     	;# 
  1081  0213                     	;# 
  1082  0213                     	;# 
  1083  0214                     	;# 
  1084  0214                     	;# 
  1085  0215                     	;# 
  1086  0215                     	;# 
  1087  0215                     	;# 
  1088  0216                     	;# 
  1089  0216                     	;# 
  1090  0217                     	;# 
  1091  0217                     	;# 
  1092  0219                     	;# 
  1093  021A                     	;# 
  1094  021B                     	;# 
  1095  021C                     	;# 
  1096  021D                     	;# 
  1097  021E                     	;# 
  1098  021F                     	;# 
  1099  0291                     	;# 
  1100  0291                     	;# 
  1101  0292                     	;# 
  1102  0293                     	;# 
  1103  0294                     	;# 
  1104  0295                     	;# 
  1105  0295                     	;# 
  1106  0296                     	;# 
  1107  0298                     	;# 
  1108  0298                     	;# 
  1109  0299                     	;# 
  1110  029A                     	;# 
  1111  029B                     	;# 
  1112  029C                     	;# 
  1113  029D                     	;# 
  1114  029E                     	;# 
  1115  0311                     	;# 
  1116  0311                     	;# 
  1117  0312                     	;# 
  1118  0313                     	;# 
  1119  0318                     	;# 
  1120  0318                     	;# 
  1121  0319                     	;# 
  1122  031A                     	;# 
  1123  038C                     	;# 
  1124  038D                     	;# 
  1125  038E                     	;# 
  1126  0391                     	;# 
  1127  0392                     	;# 
  1128  0393                     	;# 
  1129  0394                     	;# 
  1130  0395                     	;# 
  1131  0396                     	;# 
  1132  039A                     	;# 
  1133  039C                     	;# 
  1134  039D                     	;# 
  1135  039E                     	;# 
  1136  039F                     	;# 
  1137  0415                     	;# 
  1138  0416                     	;# 
  1139  0417                     	;# 
  1140  041C                     	;# 
  1141  041D                     	;# 
  1142  041E                     	;# 
  1143  0FE4                     	;# 
  1144  0FE5                     	;# 
  1145  0FE6                     	;# 
  1146  0FE7                     	;# 
  1147  0FE8                     	;# 
  1148  0FE9                     	;# 
  1149  0FEA                     	;# 
  1150  0FEB                     	;# 
  1151  0FED                     	;# 
  1152  0FEE                     	;# 
  1153  0FEF                     	;# 
  1154  0000                     	;# 
  1155  0001                     	;# 
  1156  0002                     	;# 
  1157  0003                     	;# 
  1158  0004                     	;# 
  1159  0005                     	;# 
  1160  0006                     	;# 
  1161  0007                     	;# 
  1162  0008                     	;# 
  1163  0009                     	;# 
  1164  000A                     	;# 
  1165  000B                     	;# 
  1166  000C                     	;# 
  1167  000D                     	;# 
  1168  000E                     	;# 
  1169  0011                     	;# 
  1170  0012                     	;# 
  1171  0013                     	;# 
  1172  0014                     	;# 
  1173  0015                     	;# 
  1174  0016                     	;# 
  1175  0016                     	;# 
  1176  0017                     	;# 
  1177  0018                     	;# 
  1178  0019                     	;# 
  1179  001A                     	;# 
  1180  001B                     	;# 
  1181  001C                     	;# 
  1182  001E                     	;# 
  1183  001F                     	;# 
  1184  008C                     	;# 
  1185  008D                     	;# 
  1186  008E                     	;# 
  1187  0091                     	;# 
  1188  0092                     	;# 
  1189  0093                     	;# 
  1190  0094                     	;# 
  1191  0095                     	;# 
  1192  0096                     	;# 
  1193  0097                     	;# 
  1194  0098                     	;# 
  1195  0099                     	;# 
  1196  009A                     	;# 
  1197  009B                     	;# 
  1198  009B                     	;# 
  1199  009C                     	;# 
  1200  009D                     	;# 
  1201  009E                     	;# 
  1202  010C                     	;# 
  1203  010D                     	;# 
  1204  010E                     	;# 
  1205  0111                     	;# 
  1206  0112                     	;# 
  1207  0113                     	;# 
  1208  0114                     	;# 
  1209  0115                     	;# 
  1210  0116                     	;# 
  1211  0117                     	;# 
  1212  0118                     	;# 
  1213  0119                     	;# 
  1214  011A                     	;# 
  1215  011B                     	;# 
  1216  011D                     	;# 
  1217  011E                     	;# 
  1218  018C                     	;# 
  1219  018D                     	;# 
  1220  018E                     	;# 
  1221  0191                     	;# 
  1222  0191                     	;# 
  1223  0192                     	;# 
  1224  0193                     	;# 
  1225  0193                     	;# 
  1226  0193                     	;# 
  1227  0194                     	;# 
  1228  0195                     	;# 
  1229  0196                     	;# 
  1230  0199                     	;# 
  1231  019A                     	;# 
  1232  019B                     	;# 
  1233  019B                     	;# 
  1234  019B                     	;# 
  1235  019B                     	;# 
  1236  019C                     	;# 
  1237  019C                     	;# 
  1238  019D                     	;# 
  1239  019E                     	;# 
  1240  019F                     	;# 
  1241  020C                     	;# 
  1242  020D                     	;# 
  1243  020E                     	;# 
  1244  0211                     	;# 
  1245  0211                     	;# 
  1246  0212                     	;# 
  1247  0212                     	;# 
  1248  0213                     	;# 
  1249  0213                     	;# 
  1250  0214                     	;# 
  1251  0214                     	;# 
  1252  0215                     	;# 
  1253  0215                     	;# 
  1254  0215                     	;# 
  1255  0216                     	;# 
  1256  0216                     	;# 
  1257  0217                     	;# 
  1258  0217                     	;# 
  1259  0219                     	;# 
  1260  021A                     	;# 
  1261  021B                     	;# 
  1262  021C                     	;# 
  1263  021D                     	;# 
  1264  021E                     	;# 
  1265  021F                     	;# 
  1266  0291                     	;# 
  1267  0291                     	;# 
  1268  0292                     	;# 
  1269  0293                     	;# 
  1270  0294                     	;# 
  1271  0295                     	;# 
  1272  0295                     	;# 
  1273  0296                     	;# 
  1274  0298                     	;# 
  1275  0298                     	;# 
  1276  0299                     	;# 
  1277  029A                     	;# 
  1278  029B                     	;# 
  1279  029C                     	;# 
  1280  029D                     	;# 
  1281  029E                     	;# 
  1282  0311                     	;# 
  1283  0311                     	;# 
  1284  0312                     	;# 
  1285  0313                     	;# 
  1286  0318                     	;# 
  1287  0318                     	;# 
  1288  0319                     	;# 
  1289  031A                     	;# 
  1290  038C                     	;# 
  1291  038D                     	;# 
  1292  038E                     	;# 
  1293  0391                     	;# 
  1294  0392                     	;# 
  1295  0393                     	;# 
  1296  0394                     	;# 
  1297  0395                     	;# 
  1298  0396                     	;# 
  1299  039A                     	;# 
  1300  039C                     	;# 
  1301  039D                     	;# 
  1302  039E                     	;# 
  1303  039F                     	;# 
  1304  0415                     	;# 
  1305  0416                     	;# 
  1306  0417                     	;# 
  1307  041C                     	;# 
  1308  041D                     	;# 
  1309  041E                     	;# 
  1310  0FE4                     	;# 
  1311  0FE5                     	;# 
  1312  0FE6                     	;# 
  1313  0FE7                     	;# 
  1314  0FE8                     	;# 
  1315  0FE9                     	;# 
  1316  0FEA                     	;# 
  1317  0FEB                     	;# 
  1318  0FED                     	;# 
  1319  0FEE                     	;# 
  1320  0FEF                     	;# 
  1321  0000                     	;# 
  1322  0001                     	;# 
  1323  0002                     	;# 
  1324  0003                     	;# 
  1325  0004                     	;# 
  1326  0005                     	;# 
  1327  0006                     	;# 
  1328  0007                     	;# 
  1329  0008                     	;# 
  1330  0009                     	;# 
  1331  000A                     	;# 
  1332  000B                     	;# 
  1333  000C                     	;# 
  1334  000D                     	;# 
  1335  000E                     	;# 
  1336  0011                     	;# 
  1337  0012                     	;# 
  1338  0013                     	;# 
  1339  0014                     	;# 
  1340  0015                     	;# 
  1341  0016                     	;# 
  1342  0016                     	;# 
  1343  0017                     	;# 
  1344  0018                     	;# 
  1345  0019                     	;# 
  1346  001A                     	;# 
  1347  001B                     	;# 
  1348  001C                     	;# 
  1349  001E                     	;# 
  1350  001F                     	;# 
  1351  008C                     	;# 
  1352  008D                     	;# 
  1353  008E                     	;# 
  1354  0091                     	;# 
  1355  0092                     	;# 
  1356  0093                     	;# 
  1357  0094                     	;# 
  1358  0095                     	;# 
  1359  0096                     	;# 
  1360  0097                     	;# 
  1361  0098                     	;# 
  1362  0099                     	;# 
  1363  009A                     	;# 
  1364  009B                     	;# 
  1365  009B                     	;# 
  1366  009C                     	;# 
  1367  009D                     	;# 
  1368  009E                     	;# 
  1369  010C                     	;# 
  1370  010D                     	;# 
  1371  010E                     	;# 
  1372  0111                     	;# 
  1373  0112                     	;# 
  1374  0113                     	;# 
  1375  0114                     	;# 
  1376  0115                     	;# 
  1377  0116                     	;# 
  1378  0117                     	;# 
  1379  0118                     	;# 
  1380  0119                     	;# 
  1381  011A                     	;# 
  1382  011B                     	;# 
  1383  011D                     	;# 
  1384  011E                     	;# 
  1385  018C                     	;# 
  1386  018D                     	;# 
  1387  018E                     	;# 
  1388  0191                     	;# 
  1389  0191                     	;# 
  1390  0192                     	;# 
  1391  0193                     	;# 
  1392  0193                     	;# 
  1393  0193                     	;# 
  1394  0194                     	;# 
  1395  0195                     	;# 
  1396  0196                     	;# 
  1397  0199                     	;# 
  1398  019A                     	;# 
  1399  019B                     	;# 
  1400  019B                     	;# 
  1401  019B                     	;# 
  1402  019B                     	;# 
  1403  019C                     	;# 
  1404  019C                     	;# 
  1405  019D                     	;# 
  1406  019E                     	;# 
  1407  019F                     	;# 
  1408  020C                     	;# 
  1409  020D                     	;# 
  1410  020E                     	;# 
  1411  0211                     	;# 
  1412  0211                     	;# 
  1413  0212                     	;# 
  1414  0212                     	;# 
  1415  0213                     	;# 
  1416  0213                     	;# 
  1417  0214                     	;# 
  1418  0214                     	;# 
  1419  0215                     	;# 
  1420  0215                     	;# 
  1421  0215                     	;# 
  1422  0216                     	;# 
  1423  0216                     	;# 
  1424  0217                     	;# 
  1425  0217                     	;# 
  1426  0219                     	;# 
  1427  021A                     	;# 
  1428  021B                     	;# 
  1429  021C                     	;# 
  1430  021D                     	;# 
  1431  021E                     	;# 
  1432  021F                     	;# 
  1433  0291                     	;# 
  1434  0291                     	;# 
  1435  0292                     	;# 
  1436  0293                     	;# 
  1437  0294                     	;# 
  1438  0295                     	;# 
  1439  0295                     	;# 
  1440  0296                     	;# 
  1441  0298                     	;# 
  1442  0298                     	;# 
  1443  0299                     	;# 
  1444  029A                     	;# 
  1445  029B                     	;# 
  1446  029C                     	;# 
  1447  029D                     	;# 
  1448  029E                     	;# 
  1449  0311                     	;# 
  1450  0311                     	;# 
  1451  0312                     	;# 
  1452  0313                     	;# 
  1453  0318                     	;# 
  1454  0318                     	;# 
  1455  0319                     	;# 
  1456  031A                     	;# 
  1457  038C                     	;# 
  1458  038D                     	;# 
  1459  038E                     	;# 
  1460  0391                     	;# 
  1461  0392                     	;# 
  1462  0393                     	;# 
  1463  0394                     	;# 
  1464  0395                     	;# 
  1465  0396                     	;# 
  1466  039A                     	;# 
  1467  039C                     	;# 
  1468  039D                     	;# 
  1469  039E                     	;# 
  1470  039F                     	;# 
  1471  0415                     	;# 
  1472  0416                     	;# 
  1473  0417                     	;# 
  1474  041C                     	;# 
  1475  041D                     	;# 
  1476  041E                     	;# 
  1477  0FE4                     	;# 
  1478  0FE5                     	;# 
  1479  0FE6                     	;# 
  1480  0FE7                     	;# 
  1481  0FE8                     	;# 
  1482  0FE9                     	;# 
  1483  0FEA                     	;# 
  1484  0FEB                     	;# 
  1485  0FED                     	;# 
  1486  0FEE                     	;# 
  1487  0FEF                     	;# 
  1488  0000                     	;# 
  1489  0001                     	;# 
  1490  0002                     	;# 
  1491  0003                     	;# 
  1492  0004                     	;# 
  1493  0005                     	;# 
  1494  0006                     	;# 
  1495  0007                     	;# 
  1496  0008                     	;# 
  1497  0009                     	;# 
  1498  000A                     	;# 
  1499  000B                     	;# 
  1500  000C                     	;# 
  1501  000D                     	;# 
  1502  000E                     	;# 
  1503  0011                     	;# 
  1504  0012                     	;# 
  1505  0013                     	;# 
  1506  0014                     	;# 
  1507  0015                     	;# 
  1508  0016                     	;# 
  1509  0016                     	;# 
  1510  0017                     	;# 
  1511  0018                     	;# 
  1512  0019                     	;# 
  1513  001A                     	;# 
  1514  001B                     	;# 
  1515  001C                     	;# 
  1516  001E                     	;# 
  1517  001F                     	;# 
  1518  008C                     	;# 
  1519  008D                     	;# 
  1520  008E                     	;# 
  1521  0091                     	;# 
  1522  0092                     	;# 
  1523  0093                     	;# 
  1524  0094                     	;# 
  1525  0095                     	;# 
  1526  0096                     	;# 
  1527  0097                     	;# 
  1528  0098                     	;# 
  1529  0099                     	;# 
  1530  009A                     	;# 
  1531  009B                     	;# 
  1532  009B                     	;# 
  1533  009C                     	;# 
  1534  009D                     	;# 
  1535  009E                     	;# 
  1536  010C                     	;# 
  1537  010D                     	;# 
  1538  010E                     	;# 
  1539  0111                     	;# 
  1540  0112                     	;# 
  1541  0113                     	;# 
  1542  0114                     	;# 
  1543  0115                     	;# 
  1544  0116                     	;# 
  1545  0117                     	;# 
  1546  0118                     	;# 
  1547  0119                     	;# 
  1548  011A                     	;# 
  1549  011B                     	;# 
  1550  011D                     	;# 
  1551  011E                     	;# 
  1552  018C                     	;# 
  1553  018D                     	;# 
  1554  018E                     	;# 
  1555  0191                     	;# 
  1556  0191                     	;# 
  1557  0192                     	;# 
  1558  0193                     	;# 
  1559  0193                     	;# 
  1560  0193                     	;# 
  1561  0194                     	;# 
  1562  0195                     	;# 
  1563  0196                     	;# 
  1564  0199                     	;# 
  1565  019A                     	;# 
  1566  019B                     	;# 
  1567  019B                     	;# 
  1568  019B                     	;# 
  1569  019B                     	;# 
  1570  019C                     	;# 
  1571  019C                     	;# 
  1572  019D                     	;# 
  1573  019E                     	;# 
  1574  019F                     	;# 
  1575  020C                     	;# 
  1576  020D                     	;# 
  1577  020E                     	;# 
  1578  0211                     	;# 
  1579  0211                     	;# 
  1580  0212                     	;# 
  1581  0212                     	;# 
  1582  0213                     	;# 
  1583  0213                     	;# 
  1584  0214                     	;# 
  1585  0214                     	;# 
  1586  0215                     	;# 
  1587  0215                     	;# 
  1588  0215                     	;# 
  1589  0216                     	;# 
  1590  0216                     	;# 
  1591  0217                     	;# 
  1592  0217                     	;# 
  1593  0219                     	;# 
  1594  021A                     	;# 
  1595  021B                     	;# 
  1596  021C                     	;# 
  1597  021D                     	;# 
  1598  021E                     	;# 
  1599  021F                     	;# 
  1600  0291                     	;# 
  1601  0291                     	;# 
  1602  0292                     	;# 
  1603  0293                     	;# 
  1604  0294                     	;# 
  1605  0295                     	;# 
  1606  0295                     	;# 
  1607  0296                     	;# 
  1608  0298                     	;# 
  1609  0298                     	;# 
  1610  0299                     	;# 
  1611  029A                     	;# 
  1612  029B                     	;# 
  1613  029C                     	;# 
  1614  029D                     	;# 
  1615  029E                     	;# 
  1616  0311                     	;# 
  1617  0311                     	;# 
  1618  0312                     	;# 
  1619  0313                     	;# 
  1620  0318                     	;# 
  1621  0318                     	;# 
  1622  0319                     	;# 
  1623  031A                     	;# 
  1624  038C                     	;# 
  1625  038D                     	;# 
  1626  038E                     	;# 
  1627  0391                     	;# 
  1628  0392                     	;# 
  1629  0393                     	;# 
  1630  0394                     	;# 
  1631  0395                     	;# 
  1632  0396                     	;# 
  1633  039A                     	;# 
  1634  039C                     	;# 
  1635  039D                     	;# 
  1636  039E                     	;# 
  1637  039F                     	;# 
  1638  0415                     	;# 
  1639  0416                     	;# 
  1640  0417                     	;# 
  1641  041C                     	;# 
  1642  041D                     	;# 
  1643  041E                     	;# 
  1644  0FE4                     	;# 
  1645  0FE5                     	;# 
  1646  0FE6                     	;# 
  1647  0FE7                     	;# 
  1648  0FE8                     	;# 
  1649  0FE9                     	;# 
  1650  0FEA                     	;# 
  1651  0FEB                     	;# 
  1652  0FED                     	;# 
  1653  0FEE                     	;# 
  1654  0FEF                     	;# 
  1655  0000                     	;# 
  1656  0001                     	;# 
  1657  0002                     	;# 
  1658  0003                     	;# 
  1659  0004                     	;# 
  1660  0005                     	;# 
  1661  0006                     	;# 
  1662  0007                     	;# 
  1663  0008                     	;# 
  1664  0009                     	;# 
  1665  000A                     	;# 
  1666  000B                     	;# 
  1667  000C                     	;# 
  1668  000D                     	;# 
  1669  000E                     	;# 
  1670  0011                     	;# 
  1671  0012                     	;# 
  1672  0013                     	;# 
  1673  0014                     	;# 
  1674  0015                     	;# 
  1675  0016                     	;# 
  1676  0016                     	;# 
  1677  0017                     	;# 
  1678  0018                     	;# 
  1679  0019                     	;# 
  1680  001A                     	;# 
  1681  001B                     	;# 
  1682  001C                     	;# 
  1683  001E                     	;# 
  1684  001F                     	;# 
  1685  008C                     	;# 
  1686  008D                     	;# 
  1687  008E                     	;# 
  1688  0091                     	;# 
  1689  0092                     	;# 
  1690  0093                     	;# 
  1691  0094                     	;# 
  1692  0095                     	;# 
  1693  0096                     	;# 
  1694  0097                     	;# 
  1695  0098                     	;# 
  1696  0099                     	;# 
  1697  009A                     	;# 
  1698  009B                     	;# 
  1699  009B                     	;# 
  1700  009C                     	;# 
  1701  009D                     	;# 
  1702  009E                     	;# 
  1703  010C                     	;# 
  1704  010D                     	;# 
  1705  010E                     	;# 
  1706  0111                     	;# 
  1707  0112                     	;# 
  1708  0113                     	;# 
  1709  0114                     	;# 
  1710  0115                     	;# 
  1711  0116                     	;# 
  1712  0117                     	;# 
  1713  0118                     	;# 
  1714  0119                     	;# 
  1715  011A                     	;# 
  1716  011B                     	;# 
  1717  011D                     	;# 
  1718  011E                     	;# 
  1719  018C                     	;# 
  1720  018D                     	;# 
  1721  018E                     	;# 
  1722  0191                     	;# 
  1723  0191                     	;# 
  1724  0192                     	;# 
  1725  0193                     	;# 
  1726  0193                     	;# 
  1727  0193                     	;# 
  1728  0194                     	;# 
  1729  0195                     	;# 
  1730  0196                     	;# 
  1731  0199                     	;# 
  1732  019A                     	;# 
  1733  019B                     	;# 
  1734  019B                     	;# 
  1735  019B                     	;# 
  1736  019B                     	;# 
  1737  019C                     	;# 
  1738  019C                     	;# 
  1739  019D                     	;# 
  1740  019E                     	;# 
  1741  019F                     	;# 
  1742  020C                     	;# 
  1743  020D                     	;# 
  1744  020E                     	;# 
  1745  0211                     	;# 
  1746  0211                     	;# 
  1747  0212                     	;# 
  1748  0212                     	;# 
  1749  0213                     	;# 
  1750  0213                     	;# 
  1751  0214                     	;# 
  1752  0214                     	;# 
  1753  0215                     	;# 
  1754  0215                     	;# 
  1755  0215                     	;# 
  1756  0216                     	;# 
  1757  0216                     	;# 
  1758  0217                     	;# 
  1759  0217                     	;# 
  1760  0219                     	;# 
  1761  021A                     	;# 
  1762  021B                     	;# 
  1763  021C                     	;# 
  1764  021D                     	;# 
  1765  021E                     	;# 
  1766  021F                     	;# 
  1767  0291                     	;# 
  1768  0291                     	;# 
  1769  0292                     	;# 
  1770  0293                     	;# 
  1771  0294                     	;# 
  1772  0295                     	;# 
  1773  0295                     	;# 
  1774  0296                     	;# 
  1775  0298                     	;# 
  1776  0298                     	;# 
  1777  0299                     	;# 
  1778  029A                     	;# 
  1779  029B                     	;# 
  1780  029C                     	;# 
  1781  029D                     	;# 
  1782  029E                     	;# 
  1783  0311                     	;# 
  1784  0311                     	;# 
  1785  0312                     	;# 
  1786  0313                     	;# 
  1787  0318                     	;# 
  1788  0318                     	;# 
  1789  0319                     	;# 
  1790  031A                     	;# 
  1791  038C                     	;# 
  1792  038D                     	;# 
  1793  038E                     	;# 
  1794  0391                     	;# 
  1795  0392                     	;# 
  1796  0393                     	;# 
  1797  0394                     	;# 
  1798  0395                     	;# 
  1799  0396                     	;# 
  1800  039A                     	;# 
  1801  039C                     	;# 
  1802  039D                     	;# 
  1803  039E                     	;# 
  1804  039F                     	;# 
  1805  0415                     	;# 
  1806  0416                     	;# 
  1807  0417                     	;# 
  1808  041C                     	;# 
  1809  041D                     	;# 
  1810  041E                     	;# 
  1811  0FE4                     	;# 
  1812  0FE5                     	;# 
  1813  0FE6                     	;# 
  1814  0FE7                     	;# 
  1815  0FE8                     	;# 
  1816  0FE9                     	;# 
  1817  0FEA                     	;# 
  1818  0FEB                     	;# 
  1819  0FED                     	;# 
  1820  0FEE                     	;# 
  1821  0FEF                     	;# 
  1822  0000                     	;# 
  1823  0001                     	;# 
  1824  0002                     	;# 
  1825  0003                     	;# 
  1826  0004                     	;# 
  1827  0005                     	;# 
  1828  0006                     	;# 
  1829  0007                     	;# 
  1830  0008                     	;# 
  1831  0009                     	;# 
  1832  000A                     	;# 
  1833  000B                     	;# 
  1834  000C                     	;# 
  1835  000D                     	;# 
  1836  000E                     	;# 
  1837  0011                     	;# 
  1838  0012                     	;# 
  1839  0013                     	;# 
  1840  0014                     	;# 
  1841  0015                     	;# 
  1842  0016                     	;# 
  1843  0016                     	;# 
  1844  0017                     	;# 
  1845  0018                     	;# 
  1846  0019                     	;# 
  1847  001A                     	;# 
  1848  001B                     	;# 
  1849  001C                     	;# 
  1850  001E                     	;# 
  1851  001F                     	;# 
  1852  008C                     	;# 
  1853  008D                     	;# 
  1854  008E                     	;# 
  1855  0091                     	;# 
  1856  0092                     	;# 
  1857  0093                     	;# 
  1858  0094                     	;# 
  1859  0095                     	;# 
  1860  0096                     	;# 
  1861  0097                     	;# 
  1862  0098                     	;# 
  1863  0099                     	;# 
  1864  009A                     	;# 
  1865  009B                     	;# 
  1866  009B                     	;# 
  1867  009C                     	;# 
  1868  009D                     	;# 
  1869  009E                     	;# 
  1870  010C                     	;# 
  1871  010D                     	;# 
  1872  010E                     	;# 
  1873  0111                     	;# 
  1874  0112                     	;# 
  1875  0113                     	;# 
  1876  0114                     	;# 
  1877  0115                     	;# 
  1878  0116                     	;# 
  1879  0117                     	;# 
  1880  0118                     	;# 
  1881  0119                     	;# 
  1882  011A                     	;# 
  1883  011B                     	;# 
  1884  011D                     	;# 
  1885  011E                     	;# 
  1886  018C                     	;# 
  1887  018D                     	;# 
  1888  018E                     	;# 
  1889  0191                     	;# 
  1890  0191                     	;# 
  1891  0192                     	;# 
  1892  0193                     	;# 
  1893  0193                     	;# 
  1894  0193                     	;# 
  1895  0194                     	;# 
  1896  0195                     	;# 
  1897  0196                     	;# 
  1898  0199                     	;# 
  1899  019A                     	;# 
  1900  019B                     	;# 
  1901  019B                     	;# 
  1902  019B                     	;# 
  1903  019B                     	;# 
  1904  019C                     	;# 
  1905  019C                     	;# 
  1906  019D                     	;# 
  1907  019E                     	;# 
  1908  019F                     	;# 
  1909  020C                     	;# 
  1910  020D                     	;# 
  1911  020E                     	;# 
  1912  0211                     	;# 
  1913  0211                     	;# 
  1914  0212                     	;# 
  1915  0212                     	;# 
  1916  0213                     	;# 
  1917  0213                     	;# 
  1918  0214                     	;# 
  1919  0214                     	;# 
  1920  0215                     	;# 
  1921  0215                     	;# 
  1922  0215                     	;# 
  1923  0216                     	;# 
  1924  0216                     	;# 
  1925  0217                     	;# 
  1926  0217                     	;# 
  1927  0219                     	;# 
  1928  021A                     	;# 
  1929  021B                     	;# 
  1930  021C                     	;# 
  1931  021D                     	;# 
  1932  021E                     	;# 
  1933  021F                     	;# 
  1934  0291                     	;# 
  1935  0291                     	;# 
  1936  0292                     	;# 
  1937  0293                     	;# 
  1938  0294                     	;# 
  1939  0295                     	;# 
  1940  0295                     	;# 
  1941  0296                     	;# 
  1942  0298                     	;# 
  1943  0298                     	;# 
  1944  0299                     	;# 
  1945  029A                     	;# 
  1946  029B                     	;# 
  1947  029C                     	;# 
  1948  029D                     	;# 
  1949  029E                     	;# 
  1950  0311                     	;# 
  1951  0311                     	;# 
  1952  0312                     	;# 
  1953  0313                     	;# 
  1954  0318                     	;# 
  1955  0318                     	;# 
  1956  0319                     	;# 
  1957  031A                     	;# 
  1958  038C                     	;# 
  1959  038D                     	;# 
  1960  038E                     	;# 
  1961  0391                     	;# 
  1962  0392                     	;# 
  1963  0393                     	;# 
  1964  0394                     	;# 
  1965  0395                     	;# 
  1966  0396                     	;# 
  1967  039A                     	;# 
  1968  039C                     	;# 
  1969  039D                     	;# 
  1970  039E                     	;# 
  1971  039F                     	;# 
  1972  0415                     	;# 
  1973  0416                     	;# 
  1974  0417                     	;# 
  1975  041C                     	;# 
  1976  041D                     	;# 
  1977  041E                     	;# 
  1978  0FE4                     	;# 
  1979  0FE5                     	;# 
  1980  0FE6                     	;# 
  1981  0FE7                     	;# 
  1982  0FE8                     	;# 
  1983  0FE9                     	;# 
  1984  0FEA                     	;# 
  1985  0FEB                     	;# 
  1986  0FED                     	;# 
  1987  0FEE                     	;# 
  1988  0FEF                     	;# 
  1989  0000                     	;# 
  1990  0001                     	;# 
  1991  0002                     	;# 
  1992  0003                     	;# 
  1993  0004                     	;# 
  1994  0005                     	;# 
  1995  0006                     	;# 
  1996  0007                     	;# 
  1997  0008                     	;# 
  1998  0009                     	;# 
  1999  000A                     	;# 
  2000  000B                     	;# 
  2001  000C                     	;# 
  2002  000D                     	;# 
  2003  000E                     	;# 
  2004  0011                     	;# 
  2005  0012                     	;# 
  2006  0013                     	;# 
  2007  0014                     	;# 
  2008  0015                     	;# 
  2009  0016                     	;# 
  2010  0016                     	;# 
  2011  0017                     	;# 
  2012  0018                     	;# 
  2013  0019                     	;# 
  2014  001A                     	;# 
  2015  001B                     	;# 
  2016  001C                     	;# 
  2017  001E                     	;# 
  2018  001F                     	;# 
  2019  008C                     	;# 
  2020  008D                     	;# 
  2021  008E                     	;# 
  2022  0091                     	;# 
  2023  0092                     	;# 
  2024  0093                     	;# 
  2025  0094                     	;# 
  2026  0095                     	;# 
  2027  0096                     	;# 
  2028  0097                     	;# 
  2029  0098                     	;# 
  2030  0099                     	;# 
  2031  009A                     	;# 
  2032  009B                     	;# 
  2033  009B                     	;# 
  2034  009C                     	;# 
  2035  009D                     	;# 
  2036  009E                     	;# 
  2037  010C                     	;# 
  2038  010D                     	;# 
  2039  010E                     	;# 
  2040  0111                     	;# 
  2041  0112                     	;# 
  2042  0113                     	;# 
  2043  0114                     	;# 
  2044  0115                     	;# 
  2045  0116                     	;# 
  2046  0117                     	;# 
  2047  0118                     	;# 
  2048  0119                     	;# 
  2049  011A                     	;# 
  2050  011B                     	;# 
  2051  011D                     	;# 
  2052  011E                     	;# 
  2053  018C                     	;# 
  2054  018D                     	;# 
  2055  018E                     	;# 
  2056  0191                     	;# 
  2057  0191                     	;# 
  2058  0192                     	;# 
  2059  0193                     	;# 
  2060  0193                     	;# 
  2061  0193                     	;# 
  2062  0194                     	;# 
  2063  0195                     	;# 
  2064  0196                     	;# 
  2065  0199                     	;# 
  2066  019A                     	;# 
  2067  019B                     	;# 
  2068  019B                     	;# 
  2069  019B                     	;# 
  2070  019B                     	;# 
  2071  019C                     	;# 
  2072  019C                     	;# 
  2073  019D                     	;# 
  2074  019E                     	;# 
  2075  019F                     	;# 
  2076  020C                     	;# 
  2077  020D                     	;# 
  2078  020E                     	;# 
  2079  0211                     	;# 
  2080  0211                     	;# 
  2081  0212                     	;# 
  2082  0212                     	;# 
  2083  0213                     	;# 
  2084  0213                     	;# 
  2085  0214                     	;# 
  2086  0214                     	;# 
  2087  0215                     	;# 
  2088  0215                     	;# 
  2089  0215                     	;# 
  2090  0216                     	;# 
  2091  0216                     	;# 
  2092  0217                     	;# 
  2093  0217                     	;# 
  2094  0219                     	;# 
  2095  021A                     	;# 
  2096  021B                     	;# 
  2097  021C                     	;# 
  2098  021D                     	;# 
  2099  021E                     	;# 
  2100  021F                     	;# 
  2101  0291                     	;# 
  2102  0291                     	;# 
  2103  0292                     	;# 
  2104  0293                     	;# 
  2105  0294                     	;# 
  2106  0295                     	;# 
  2107  0295                     	;# 
  2108  0296                     	;# 
  2109  0298                     	;# 
  2110  0298                     	;# 
  2111  0299                     	;# 
  2112  029A                     	;# 
  2113  029B                     	;# 
  2114  029C                     	;# 
  2115  029D                     	;# 
  2116  029E                     	;# 
  2117  0311                     	;# 
  2118  0311                     	;# 
  2119  0312                     	;# 
  2120  0313                     	;# 
  2121  0318                     	;# 
  2122  0318                     	;# 
  2123  0319                     	;# 
  2124  031A                     	;# 
  2125  038C                     	;# 
  2126  038D                     	;# 
  2127  038E                     	;# 
  2128  0391                     	;# 
  2129  0392                     	;# 
  2130  0393                     	;# 
  2131  0394                     	;# 
  2132  0395                     	;# 
  2133  0396                     	;# 
  2134  039A                     	;# 
  2135  039C                     	;# 
  2136  039D                     	;# 
  2137  039E                     	;# 
  2138  039F                     	;# 
  2139  0415                     	;# 
  2140  0416                     	;# 
  2141  0417                     	;# 
  2142  041C                     	;# 
  2143  041D                     	;# 
  2144  041E                     	;# 
  2145  0FE4                     	;# 
  2146  0FE5                     	;# 
  2147  0FE6                     	;# 
  2148  0FE7                     	;# 
  2149  0FE8                     	;# 
  2150  0FE9                     	;# 
  2151  0FEA                     	;# 
  2152  0FEB                     	;# 
  2153  0FED                     	;# 
  2154  0FEE                     	;# 
  2155  0FEF                     	;# 
  2156  0000                     	;# 
  2157  0001                     	;# 
  2158  0002                     	;# 
  2159  0003                     	;# 
  2160  0004                     	;# 
  2161  0005                     	;# 
  2162  0006                     	;# 
  2163  0007                     	;# 
  2164  0008                     	;# 
  2165  0009                     	;# 
  2166  000A                     	;# 
  2167  000B                     	;# 
  2168  000C                     	;# 
  2169  000D                     	;# 
  2170  000E                     	;# 
  2171  0011                     	;# 
  2172  0012                     	;# 
  2173  0013                     	;# 
  2174  0014                     	;# 
  2175  0015                     	;# 
  2176  0016                     	;# 
  2177  0016                     	;# 
  2178  0017                     	;# 
  2179  0018                     	;# 
  2180  0019                     	;# 
  2181  001A                     	;# 
  2182  001B                     	;# 
  2183  001C                     	;# 
  2184  001E                     	;# 
  2185  001F                     	;# 
  2186  008C                     	;# 
  2187  008D                     	;# 
  2188  008E                     	;# 
  2189  0091                     	;# 
  2190  0092                     	;# 
  2191  0093                     	;# 
  2192  0094                     	;# 
  2193  0095                     	;# 
  2194  0096                     	;# 
  2195  0097                     	;# 
  2196  0098                     	;# 
  2197  0099                     	;# 
  2198  009A                     	;# 
  2199  009B                     	;# 
  2200  009B                     	;# 
  2201  009C                     	;# 
  2202  009D                     	;# 
  2203  009E                     	;# 
  2204  010C                     	;# 
  2205  010D                     	;# 
  2206  010E                     	;# 
  2207  0111                     	;# 
  2208  0112                     	;# 
  2209  0113                     	;# 
  2210  0114                     	;# 
  2211  0115                     	;# 
  2212  0116                     	;# 
  2213  0117                     	;# 
  2214  0118                     	;# 
  2215  0119                     	;# 
  2216  011A                     	;# 
  2217  011B                     	;# 
  2218  011D                     	;# 
  2219  011E                     	;# 
  2220  018C                     	;# 
  2221  018D                     	;# 
  2222  018E                     	;# 
  2223  0191                     	;# 
  2224  0191                     	;# 
  2225  0192                     	;# 
  2226  0193                     	;# 
  2227  0193                     	;# 
  2228  0193                     	;# 
  2229  0194                     	;# 
  2230  0195                     	;# 
  2231  0196                     	;# 
  2232  0199                     	;# 
  2233  019A                     	;# 
  2234  019B                     	;# 
  2235  019B                     	;# 
  2236  019B                     	;# 
  2237  019B                     	;# 
  2238  019C                     	;# 
  2239  019C                     	;# 
  2240  019D                     	;# 
  2241  019E                     	;# 
  2242  019F                     	;# 
  2243  020C                     	;# 
  2244  020D                     	;# 
  2245  020E                     	;# 
  2246  0211                     	;# 
  2247  0211                     	;# 
  2248  0212                     	;# 
  2249  0212                     	;# 
  2250  0213                     	;# 
  2251  0213                     	;# 
  2252  0214                     	;# 
  2253  0214                     	;# 
  2254  0215                     	;# 
  2255  0215                     	;# 
  2256  0215                     	;# 
  2257  0216                     	;# 
  2258  0216                     	;# 
  2259  0217                     	;# 
  2260  0217                     	;# 
  2261  0219                     	;# 
  2262  021A                     	;# 
  2263  021B                     	;# 
  2264  021C                     	;# 
  2265  021D                     	;# 
  2266  021E                     	;# 
  2267  021F                     	;# 
  2268  0291                     	;# 
  2269  0291                     	;# 
  2270  0292                     	;# 
  2271  0293                     	;# 
  2272  0294                     	;# 
  2273  0295                     	;# 
  2274  0295                     	;# 
  2275  0296                     	;# 
  2276  0298                     	;# 
  2277  0298                     	;# 
  2278  0299                     	;# 
  2279  029A                     	;# 
  2280  029B                     	;# 
  2281  029C                     	;# 
  2282  029D                     	;# 
  2283  029E                     	;# 
  2284  0311                     	;# 
  2285  0311                     	;# 
  2286  0312                     	;# 
  2287  0313                     	;# 
  2288  0318                     	;# 
  2289  0318                     	;# 
  2290  0319                     	;# 
  2291  031A                     	;# 
  2292  038C                     	;# 
  2293  038D                     	;# 
  2294  038E                     	;# 
  2295  0391                     	;# 
  2296  0392                     	;# 
  2297  0393                     	;# 
  2298  0394                     	;# 
  2299  0395                     	;# 
  2300  0396                     	;# 
  2301  039A                     	;# 
  2302  039C                     	;# 
  2303  039D                     	;# 
  2304  039E                     	;# 
  2305  039F                     	;# 
  2306  0415                     	;# 
  2307  0416                     	;# 
  2308  0417                     	;# 
  2309  041C                     	;# 
  2310  041D                     	;# 
  2311  041E                     	;# 
  2312  0FE4                     	;# 
  2313  0FE5                     	;# 
  2314  0FE6                     	;# 
  2315  0FE7                     	;# 
  2316  0FE8                     	;# 
  2317  0FE9                     	;# 
  2318  0FEA                     	;# 
  2319  0FEB                     	;# 
  2320  0FED                     	;# 
  2321  0FEE                     	;# 
  2322  0FEF                     	;# 
  2323  0000                     	;# 
  2324  0001                     	;# 
  2325  0002                     	;# 
  2326  0003                     	;# 
  2327  0004                     	;# 
  2328  0005                     	;# 
  2329  0006                     	;# 
  2330  0007                     	;# 
  2331  0008                     	;# 
  2332  0009                     	;# 
  2333  000A                     	;# 
  2334  000B                     	;# 
  2335  000C                     	;# 
  2336  000D                     	;# 
  2337  000E                     	;# 
  2338  0011                     	;# 
  2339  0012                     	;# 
  2340  0013                     	;# 
  2341  0014                     	;# 
  2342  0015                     	;# 
  2343  0016                     	;# 
  2344  0016                     	;# 
  2345  0017                     	;# 
  2346  0018                     	;# 
  2347  0019                     	;# 
  2348  001A                     	;# 
  2349  001B                     	;# 
  2350  001C                     	;# 
  2351  001E                     	;# 
  2352  001F                     	;# 
  2353  008C                     	;# 
  2354  008D                     	;# 
  2355  008E                     	;# 
  2356  0091                     	;# 
  2357  0092                     	;# 
  2358  0093                     	;# 
  2359  0094                     	;# 
  2360  0095                     	;# 
  2361  0096                     	;# 
  2362  0097                     	;# 
  2363  0098                     	;# 
  2364  0099                     	;# 
  2365  009A                     	;# 
  2366  009B                     	;# 
  2367  009B                     	;# 
  2368  009C                     	;# 
  2369  009D                     	;# 
  2370  009E                     	;# 
  2371  010C                     	;# 
  2372  010D                     	;# 
  2373  010E                     	;# 
  2374  0111                     	;# 
  2375  0112                     	;# 
  2376  0113                     	;# 
  2377  0114                     	;# 
  2378  0115                     	;# 
  2379  0116                     	;# 
  2380  0117                     	;# 
  2381  0118                     	;# 
  2382  0119                     	;# 
  2383  011A                     	;# 
  2384  011B                     	;# 
  2385  011D                     	;# 
  2386  011E                     	;# 
  2387  018C                     	;# 
  2388  018D                     	;# 
  2389  018E                     	;# 
  2390  0191                     	;# 
  2391  0191                     	;# 
  2392  0192                     	;# 
  2393  0193                     	;# 
  2394  0193                     	;# 
  2395  0193                     	;# 
  2396  0194                     	;# 
  2397  0195                     	;# 
  2398  0196                     	;# 
  2399  0199                     	;# 
  2400  019A                     	;# 
  2401  019B                     	;# 
  2402  019B                     	;# 
  2403  019B                     	;# 
  2404  019B                     	;# 
  2405  019C                     	;# 
  2406  019C                     	;# 
  2407  019D                     	;# 
  2408  019E                     	;# 
  2409  019F                     	;# 
  2410  020C                     	;# 
  2411  020D                     	;# 
  2412  020E                     	;# 
  2413  0211                     	;# 
  2414  0211                     	;# 
  2415  0212                     	;# 
  2416  0212                     	;# 
  2417  0213                     	;# 
  2418  0213                     	;# 
  2419  0214                     	;# 
  2420  0214                     	;# 
  2421  0215                     	;# 
  2422  0215                     	;# 
  2423  0215                     	;# 
  2424  0216                     	;# 
  2425  0216                     	;# 
  2426  0217                     	;# 
  2427  0217                     	;# 
  2428  0219                     	;# 
  2429  021A                     	;# 
  2430  021B                     	;# 
  2431  021C                     	;# 
  2432  021D                     	;# 
  2433  021E                     	;# 
  2434  021F                     	;# 
  2435  0291                     	;# 
  2436  0291                     	;# 
  2437  0292                     	;# 
  2438  0293                     	;# 
  2439  0294                     	;# 
  2440  0295                     	;# 
  2441  0295                     	;# 
  2442  0296                     	;# 
  2443  0298                     	;# 
  2444  0298                     	;# 
  2445  0299                     	;# 
  2446  029A                     	;# 
  2447  029B                     	;# 
  2448  029C                     	;# 
  2449  029D                     	;# 
  2450  029E                     	;# 
  2451  0311                     	;# 
  2452  0311                     	;# 
  2453  0312                     	;# 
  2454  0313                     	;# 
  2455  0318                     	;# 
  2456  0318                     	;# 
  2457  0319                     	;# 
  2458  031A                     	;# 
  2459  038C                     	;# 
  2460  038D                     	;# 
  2461  038E                     	;# 
  2462  0391                     	;# 
  2463  0392                     	;# 
  2464  0393                     	;# 
  2465  0394                     	;# 
  2466  0395                     	;# 
  2467  0396                     	;# 
  2468  039A                     	;# 
  2469  039C                     	;# 
  2470  039D                     	;# 
  2471  039E                     	;# 
  2472  039F                     	;# 
  2473  0415                     	;# 
  2474  0416                     	;# 
  2475  0417                     	;# 
  2476  041C                     	;# 
  2477  041D                     	;# 
  2478  041E                     	;# 
  2479  0FE4                     	;# 
  2480  0FE5                     	;# 
  2481  0FE6                     	;# 
  2482  0FE7                     	;# 
  2483  0FE8                     	;# 
  2484  0FE9                     	;# 
  2485  0FEA                     	;# 
  2486  0FEB                     	;# 
  2487  0FED                     	;# 
  2488  0FEE                     	;# 
  2489  0FEF                     	;# 
  2490  0000                     	;# 
  2491  0001                     	;# 
  2492  0002                     	;# 
  2493  0003                     	;# 
  2494  0004                     	;# 
  2495  0005                     	;# 
  2496  0006                     	;# 
  2497  0007                     	;# 
  2498  0008                     	;# 
  2499  0009                     	;# 
  2500  000A                     	;# 
  2501  000B                     	;# 
  2502  000C                     	;# 
  2503  000D                     	;# 
  2504  000E                     	;# 
  2505  0011                     	;# 
  2506  0012                     	;# 
  2507  0013                     	;# 
  2508  0014                     	;# 
  2509  0015                     	;# 
  2510  0016                     	;# 
  2511  0016                     	;# 
  2512  0017                     	;# 
  2513  0018                     	;# 
  2514  0019                     	;# 
  2515  001A                     	;# 
  2516  001B                     	;# 
  2517  001C                     	;# 
  2518  001E                     	;# 
  2519  001F                     	;# 
  2520  008C                     	;# 
  2521  008D                     	;# 
  2522  008E                     	;# 
  2523  0091                     	;# 
  2524  0092                     	;# 
  2525  0093                     	;# 
  2526  0094                     	;# 
  2527  0095                     	;# 
  2528  0096                     	;# 
  2529  0097                     	;# 
  2530  0098                     	;# 
  2531  0099                     	;# 
  2532  009A                     	;# 
  2533  009B                     	;# 
  2534  009B                     	;# 
  2535  009C                     	;# 
  2536  009D                     	;# 
  2537  009E                     	;# 
  2538  010C                     	;# 
  2539  010D                     	;# 
  2540  010E                     	;# 
  2541  0111                     	;# 
  2542  0112                     	;# 
  2543  0113                     	;# 
  2544  0114                     	;# 
  2545  0115                     	;# 
  2546  0116                     	;# 
  2547  0117                     	;# 
  2548  0118                     	;# 
  2549  0119                     	;# 
  2550  011A                     	;# 
  2551  011B                     	;# 
  2552  011D                     	;# 
  2553  011E                     	;# 
  2554  018C                     	;# 
  2555  018D                     	;# 
  2556  018E                     	;# 
  2557  0191                     	;# 
  2558  0191                     	;# 
  2559  0192                     	;# 
  2560  0193                     	;# 
  2561  0193                     	;# 
  2562  0193                     	;# 
  2563  0194                     	;# 
  2564  0195                     	;# 
  2565  0196                     	;# 
  2566  0199                     	;# 
  2567  019A                     	;# 
  2568  019B                     	;# 
  2569  019B                     	;# 
  2570  019B                     	;# 
  2571  019B                     	;# 
  2572  019C                     	;# 
  2573  019C                     	;# 
  2574  019D                     	;# 
  2575  019E                     	;# 
  2576  019F                     	;# 
  2577  020C                     	;# 
  2578  020D                     	;# 
  2579  020E                     	;# 
  2580  0211                     	;# 
  2581  0211                     	;# 
  2582  0212                     	;# 
  2583  0212                     	;# 
  2584  0213                     	;# 
  2585  0213                     	;# 
  2586  0214                     	;# 
  2587  0214                     	;# 
  2588  0215                     	;# 
  2589  0215                     	;# 
  2590  0215                     	;# 
  2591  0216                     	;# 
  2592  0216                     	;# 
  2593  0217                     	;# 
  2594  0217                     	;# 
  2595  0219                     	;# 
  2596  021A                     	;# 
  2597  021B                     	;# 
  2598  021C                     	;# 
  2599  021D                     	;# 
  2600  021E                     	;# 
  2601  021F                     	;# 
  2602  0291                     	;# 
  2603  0291                     	;# 
  2604  0292                     	;# 
  2605  0293                     	;# 
  2606  0294                     	;# 
  2607  0295                     	;# 
  2608  0295                     	;# 
  2609  0296                     	;# 
  2610  0298                     	;# 
  2611  0298                     	;# 
  2612  0299                     	;# 
  2613  029A                     	;# 
  2614  029B                     	;# 
  2615  029C                     	;# 
  2616  029D                     	;# 
  2617  029E                     	;# 
  2618  0311                     	;# 
  2619  0311                     	;# 
  2620  0312                     	;# 
  2621  0313                     	;# 
  2622  0318                     	;# 
  2623  0318                     	;# 
  2624  0319                     	;# 
  2625  031A                     	;# 
  2626  038C                     	;# 
  2627  038D                     	;# 
  2628  038E                     	;# 
  2629  0391                     	;# 
  2630  0392                     	;# 
  2631  0393                     	;# 
  2632  0394                     	;# 
  2633  0395                     	;# 
  2634  0396                     	;# 
  2635  039A                     	;# 
  2636  039C                     	;# 
  2637  039D                     	;# 
  2638  039E                     	;# 
  2639  039F                     	;# 
  2640  0415                     	;# 
  2641  0416                     	;# 
  2642  0417                     	;# 
  2643  041C                     	;# 
  2644  041D                     	;# 
  2645  041E                     	;# 
  2646  0FE4                     	;# 
  2647  0FE5                     	;# 
  2648  0FE6                     	;# 
  2649  0FE7                     	;# 
  2650  0FE8                     	;# 
  2651  0FE9                     	;# 
  2652  0FEA                     	;# 
  2653  0FEB                     	;# 
  2654  0FED                     	;# 
  2655  0FEE                     	;# 
  2656  0FEF                     	;# 
  2657  0000                     	;# 
  2658  0001                     	;# 
  2659  0002                     	;# 
  2660  0003                     	;# 
  2661  0004                     	;# 
  2662  0005                     	;# 
  2663  0006                     	;# 
  2664  0007                     	;# 
  2665  0008                     	;# 
  2666  0009                     	;# 
  2667  000A                     	;# 
  2668  000B                     	;# 
  2669  000C                     	;# 
  2670  000D                     	;# 
  2671  000E                     	;# 
  2672  0011                     	;# 
  2673  0012                     	;# 
  2674  0013                     	;# 
  2675  0014                     	;# 
  2676  0015                     	;# 
  2677  0016                     	;# 
  2678  0016                     	;# 
  2679  0017                     	;# 
  2680  0018                     	;# 
  2681  0019                     	;# 
  2682  001A                     	;# 
  2683  001B                     	;# 
  2684  001C                     	;# 
  2685  001E                     	;# 
  2686  001F                     	;# 
  2687  008C                     	;# 
  2688  008D                     	;# 
  2689  008E                     	;# 
  2690  0091                     	;# 
  2691  0092                     	;# 
  2692  0093                     	;# 
  2693  0094                     	;# 
  2694  0095                     	;# 
  2695  0096                     	;# 
  2696  0097                     	;# 
  2697  0098                     	;# 
  2698  0099                     	;# 
  2699  009A                     	;# 
  2700  009B                     	;# 
  2701  009B                     	;# 
  2702  009C                     	;# 
  2703  009D                     	;# 
  2704  009E                     	;# 
  2705  010C                     	;# 
  2706  010D                     	;# 
  2707  010E                     	;# 
  2708  0111                     	;# 
  2709  0112                     	;# 
  2710  0113                     	;# 
  2711  0114                     	;# 
  2712  0115                     	;# 
  2713  0116                     	;# 
  2714  0117                     	;# 
  2715  0118                     	;# 
  2716  0119                     	;# 
  2717  011A                     	;# 
  2718  011B                     	;# 
  2719  011D                     	;# 
  2720  011E                     	;# 
  2721  018C                     	;# 
  2722  018D                     	;# 
  2723  018E                     	;# 
  2724  0191                     	;# 
  2725  0191                     	;# 
  2726  0192                     	;# 
  2727  0193                     	;# 
  2728  0193                     	;# 
  2729  0193                     	;# 
  2730  0194                     	;# 
  2731  0195                     	;# 
  2732  0196                     	;# 
  2733  0199                     	;# 
  2734  019A                     	;# 
  2735  019B                     	;# 
  2736  019B                     	;# 
  2737  019B                     	;# 
  2738  019B                     	;# 
  2739  019C                     	;# 
  2740  019C                     	;# 
  2741  019D                     	;# 
  2742  019E                     	;# 
  2743  019F                     	;# 
  2744  020C                     	;# 
  2745  020D                     	;# 
  2746  020E                     	;# 
  2747  0211                     	;# 
  2748  0211                     	;# 
  2749  0212                     	;# 
  2750  0212                     	;# 
  2751  0213                     	;# 
  2752  0213                     	;# 
  2753  0214                     	;# 
  2754  0214                     	;# 
  2755  0215                     	;# 
  2756  0215                     	;# 
  2757  0215                     	;# 
  2758  0216                     	;# 
  2759  0216                     	;# 
  2760  0217                     	;# 
  2761  0217                     	;# 
  2762  0219                     	;# 
  2763  021A                     	;# 
  2764  021B                     	;# 
  2765  021C                     	;# 
  2766  021D                     	;# 
  2767  021E                     	;# 
  2768  021F                     	;# 
  2769  0291                     	;# 
  2770  0291                     	;# 
  2771  0292                     	;# 
  2772  0293                     	;# 
  2773  0294                     	;# 
  2774  0295                     	;# 
  2775  0295                     	;# 
  2776  0296                     	;# 
  2777  0298                     	;# 
  2778  0298                     	;# 
  2779  0299                     	;# 
  2780  029A                     	;# 
  2781  029B                     	;# 
  2782  029C                     	;# 
  2783  029D                     	;# 
  2784  029E                     	;# 
  2785  0311                     	;# 
  2786  0311                     	;# 
  2787  0312                     	;# 
  2788  0313                     	;# 
  2789  0318                     	;# 
  2790  0318                     	;# 
  2791  0319                     	;# 
  2792  031A                     	;# 
  2793  038C                     	;# 
  2794  038D                     	;# 
  2795  038E                     	;# 
  2796  0391                     	;# 
  2797  0392                     	;# 
  2798  0393                     	;# 
  2799  0394                     	;# 
  2800  0395                     	;# 
  2801  0396                     	;# 
  2802  039A                     	;# 
  2803  039C                     	;# 
  2804  039D                     	;# 
  2805  039E                     	;# 
  2806  039F                     	;# 
  2807  0415                     	;# 
  2808  0416                     	;# 
  2809  0417                     	;# 
  2810  041C                     	;# 
  2811  041D                     	;# 
  2812  041E                     	;# 
  2813  0FE4                     	;# 
  2814  0FE5                     	;# 
  2815  0FE6                     	;# 
  2816  0FE7                     	;# 
  2817  0FE8                     	;# 
  2818  0FE9                     	;# 
  2819  0FEA                     	;# 
  2820  0FEB                     	;# 
  2821  0FED                     	;# 
  2822  0FEE                     	;# 
  2823  0FEF                     	;# 
  2824  0000                     	;# 
  2825  0001                     	;# 
  2826  0002                     	;# 
  2827  0003                     	;# 
  2828  0004                     	;# 
  2829  0005                     	;# 
  2830  0006                     	;# 
  2831  0007                     	;# 
  2832  0008                     	;# 
  2833  0009                     	;# 
  2834  000A                     	;# 
  2835  000B                     	;# 
  2836  000C                     	;# 
  2837  000D                     	;# 
  2838  000E                     	;# 
  2839  0011                     	;# 
  2840  0012                     	;# 
  2841  0013                     	;# 
  2842  0014                     	;# 
  2843  0015                     	;# 
  2844  0016                     	;# 
  2845  0016                     	;# 
  2846  0017                     	;# 
  2847  0018                     	;# 
  2848  0019                     	;# 
  2849  001A                     	;# 
  2850  001B                     	;# 
  2851  001C                     	;# 
  2852  001E                     	;# 
  2853  001F                     	;# 
  2854  008C                     	;# 
  2855  008D                     	;# 
  2856  008E                     	;# 
  2857  0091                     	;# 
  2858  0092                     	;# 
  2859  0093                     	;# 
  2860  0094                     	;# 
  2861  0095                     	;# 
  2862  0096                     	;# 
  2863  0097                     	;# 
  2864  0098                     	;# 
  2865  0099                     	;# 
  2866  009A                     	;# 
  2867  009B                     	;# 
  2868  009B                     	;# 
  2869  009C                     	;# 
  2870  009D                     	;# 
  2871  009E                     	;# 
  2872  010C                     	;# 
  2873  010D                     	;# 
  2874  010E                     	;# 
  2875  0111                     	;# 
  2876  0112                     	;# 
  2877  0113                     	;# 
  2878  0114                     	;# 
  2879  0115                     	;# 
  2880  0116                     	;# 
  2881  0117                     	;# 
  2882  0118                     	;# 
  2883  0119                     	;# 
  2884  011A                     	;# 
  2885  011B                     	;# 
  2886  011D                     	;# 
  2887  011E                     	;# 
  2888  018C                     	;# 
  2889  018D                     	;# 
  2890  018E                     	;# 
  2891  0191                     	;# 
  2892  0191                     	;# 
  2893  0192                     	;# 
  2894  0193                     	;# 
  2895  0193                     	;# 
  2896  0193                     	;# 
  2897  0194                     	;# 
  2898  0195                     	;# 
  2899  0196                     	;# 
  2900  0199                     	;# 
  2901  019A                     	;# 
  2902  019B                     	;# 
  2903  019B                     	;# 
  2904  019B                     	;# 
  2905  019B                     	;# 
  2906  019C                     	;# 
  2907  019C                     	;# 
  2908  019D                     	;# 
  2909  019E                     	;# 
  2910  019F                     	;# 
  2911  020C                     	;# 
  2912  020D                     	;# 
  2913  020E                     	;# 
  2914  0211                     	;# 
  2915  0211                     	;# 
  2916  0212                     	;# 
  2917  0212                     	;# 
  2918  0213                     	;# 
  2919  0213                     	;# 
  2920  0214                     	;# 
  2921  0214                     	;# 
  2922  0215                     	;# 
  2923  0215                     	;# 
  2924  0215                     	;# 
  2925  0216                     	;# 
  2926  0216                     	;# 
  2927  0217                     	;# 
  2928  0217                     	;# 
  2929  0219                     	;# 
  2930  021A                     	;# 
  2931  021B                     	;# 
  2932  021C                     	;# 
  2933  021D                     	;# 
  2934  021E                     	;# 
  2935  021F                     	;# 
  2936  0291                     	;# 
  2937  0291                     	;# 
  2938  0292                     	;# 
  2939  0293                     	;# 
  2940  0294                     	;# 
  2941  0295                     	;# 
  2942  0295                     	;# 
  2943  0296                     	;# 
  2944  0298                     	;# 
  2945  0298                     	;# 
  2946  0299                     	;# 
  2947  029A                     	;# 
  2948  029B                     	;# 
  2949  029C                     	;# 
  2950  029D                     	;# 
  2951  029E                     	;# 
  2952  0311                     	;# 
  2953  0311                     	;# 
  2954  0312                     	;# 
  2955  0313                     	;# 
  2956  0318                     	;# 
  2957  0318                     	;# 
  2958  0319                     	;# 
  2959  031A                     	;# 
  2960  038C                     	;# 
  2961  038D                     	;# 
  2962  038E                     	;# 
  2963  0391                     	;# 
  2964  0392                     	;# 
  2965  0393                     	;# 
  2966  0394                     	;# 
  2967  0395                     	;# 
  2968  0396                     	;# 
  2969  039A                     	;# 
  2970  039C                     	;# 
  2971  039D                     	;# 
  2972  039E                     	;# 
  2973  039F                     	;# 
  2974  0415                     	;# 
  2975  0416                     	;# 
  2976  0417                     	;# 
  2977  041C                     	;# 
  2978  041D                     	;# 
  2979  041E                     	;# 
  2980  0FE4                     	;# 
  2981  0FE5                     	;# 
  2982  0FE6                     	;# 
  2983  0FE7                     	;# 
  2984  0FE8                     	;# 
  2985  0FE9                     	;# 
  2986  0FEA                     	;# 
  2987  0FEB                     	;# 
  2988  0FED                     	;# 
  2989  0FEE                     	;# 
  2990  0FEF                     	;# 
  2991  0000                     	;# 
  2992  0001                     	;# 
  2993  0002                     	;# 
  2994  0003                     	;# 
  2995  0004                     	;# 
  2996  0005                     	;# 
  2997  0006                     	;# 
  2998  0007                     	;# 
  2999  0008                     	;# 
  3000  0009                     	;# 
  3001  000A                     	;# 
  3002  000B                     	;# 
  3003  000C                     	;# 
  3004  000D                     	;# 
  3005  000E                     	;# 
  3006  0011                     	;# 
  3007  0012                     	;# 
  3008  0013                     	;# 
  3009  0014                     	;# 
  3010  0015                     	;# 
  3011  0016                     	;# 
  3012  0016                     	;# 
  3013  0017                     	;# 
  3014  0018                     	;# 
  3015  0019                     	;# 
  3016  001A                     	;# 
  3017  001B                     	;# 
  3018  001C                     	;# 
  3019  001E                     	;# 
  3020  001F                     	;# 
  3021  008C                     	;# 
  3022  008D                     	;# 
  3023  008E                     	;# 
  3024  0091                     	;# 
  3025  0092                     	;# 
  3026  0093                     	;# 
  3027  0094                     	;# 
  3028  0095                     	;# 
  3029  0096                     	;# 
  3030  0097                     	;# 
  3031  0098                     	;# 
  3032  0099                     	;# 
  3033  009A                     	;# 
  3034  009B                     	;# 
  3035  009B                     	;# 
  3036  009C                     	;# 
  3037  009D                     	;# 
  3038  009E                     	;# 
  3039  010C                     	;# 
  3040  010D                     	;# 
  3041  010E                     	;# 
  3042  0111                     	;# 
  3043  0112                     	;# 
  3044  0113                     	;# 
  3045  0114                     	;# 
  3046  0115                     	;# 
  3047  0116                     	;# 
  3048  0117                     	;# 
  3049  0118                     	;# 
  3050  0119                     	;# 
  3051  011A                     	;# 
  3052  011B                     	;# 
  3053  011D                     	;# 
  3054  011E                     	;# 
  3055  018C                     	;# 
  3056  018D                     	;# 
  3057  018E                     	;# 
  3058  0191                     	;# 
  3059  0191                     	;# 
  3060  0192                     	;# 
  3061  0193                     	;# 
  3062  0193                     	;# 
  3063  0193                     	;# 
  3064  0194                     	;# 
  3065  0195                     	;# 
  3066  0196                     	;# 
  3067  0199                     	;# 
  3068  019A                     	;# 
  3069  019B                     	;# 
  3070  019B                     	;# 
  3071  019B                     	;# 
  3072  019B                     	;# 
  3073  019C                     	;# 
  3074  019C                     	;# 
  3075  019D                     	;# 
  3076  019E                     	;# 
  3077  019F                     	;# 
  3078  020C                     	;# 
  3079  020D                     	;# 
  3080  020E                     	;# 
  3081  0211                     	;# 
  3082  0211                     	;# 
  3083  0212                     	;# 
  3084  0212                     	;# 
  3085  0213                     	;# 
  3086  0213                     	;# 
  3087  0214                     	;# 
  3088  0214                     	;# 
  3089  0215                     	;# 
  3090  0215                     	;# 
  3091  0215                     	;# 
  3092  0216                     	;# 
  3093  0216                     	;# 
  3094  0217                     	;# 
  3095  0217                     	;# 
  3096  0219                     	;# 
  3097  021A                     	;# 
  3098  021B                     	;# 
  3099  021C                     	;# 
  3100  021D                     	;# 
  3101  021E                     	;# 
  3102  021F                     	;# 
  3103  0291                     	;# 
  3104  0291                     	;# 
  3105  0292                     	;# 
  3106  0293                     	;# 
  3107  0294                     	;# 
  3108  0295                     	;# 
  3109  0295                     	;# 
  3110  0296                     	;# 
  3111  0298                     	;# 
  3112  0298                     	;# 
  3113  0299                     	;# 
  3114  029A                     	;# 
  3115  029B                     	;# 
  3116  029C                     	;# 
  3117  029D                     	;# 
  3118  029E                     	;# 
  3119  0311                     	;# 
  3120  0311                     	;# 
  3121  0312                     	;# 
  3122  0313                     	;# 
  3123  0318                     	;# 
  3124  0318                     	;# 
  3125  0319                     	;# 
  3126  031A                     	;# 
  3127  038C                     	;# 
  3128  038D                     	;# 
  3129  038E                     	;# 
  3130  0391                     	;# 
  3131  0392                     	;# 
  3132  0393                     	;# 
  3133  0394                     	;# 
  3134  0395                     	;# 
  3135  0396                     	;# 
  3136  039A                     	;# 
  3137  039C                     	;# 
  3138  039D                     	;# 
  3139  039E                     	;# 
  3140  039F                     	;# 
  3141  0415                     	;# 
  3142  0416                     	;# 
  3143  0417                     	;# 
  3144  041C                     	;# 
  3145  041D                     	;# 
  3146  041E                     	;# 
  3147  0FE4                     	;# 
  3148  0FE5                     	;# 
  3149  0FE6                     	;# 
  3150  0FE7                     	;# 
  3151  0FE8                     	;# 
  3152  0FE9                     	;# 
  3153  0FEA                     	;# 
  3154  0FEB                     	;# 
  3155  0FED                     	;# 
  3156  0FEE                     	;# 
  3157  0FEF                     	;# 
  3158  0000                     	;# 
  3159  0001                     	;# 
  3160  0002                     	;# 
  3161  0003                     	;# 
  3162  0004                     	;# 
  3163  0005                     	;# 
  3164  0006                     	;# 
  3165  0007                     	;# 
  3166  0008                     	;# 
  3167  0009                     	;# 
  3168  000A                     	;# 
  3169  000B                     	;# 
  3170  000C                     	;# 
  3171  000D                     	;# 
  3172  000E                     	;# 
  3173  0011                     	;# 
  3174  0012                     	;# 
  3175  0013                     	;# 
  3176  0014                     	;# 
  3177  0015                     	;# 
  3178  0016                     	;# 
  3179  0016                     	;# 
  3180  0017                     	;# 
  3181  0018                     	;# 
  3182  0019                     	;# 
  3183  001A                     	;# 
  3184  001B                     	;# 
  3185  001C                     	;# 
  3186  001E                     	;# 
  3187  001F                     	;# 
  3188  008C                     	;# 
  3189  008D                     	;# 
  3190  008E                     	;# 
  3191  0091                     	;# 
  3192  0092                     	;# 
  3193  0093                     	;# 
  3194  0094                     	;# 
  3195  0095                     	;# 
  3196  0096                     	;# 
  3197  0097                     	;# 
  3198  0098                     	;# 
  3199  0099                     	;# 
  3200  009A                     	;# 
  3201  009B                     	;# 
  3202  009B                     	;# 
  3203  009C                     	;# 
  3204  009D                     	;# 
  3205  009E                     	;# 
  3206  010C                     	;# 
  3207  010D                     	;# 
  3208  010E                     	;# 
  3209  0111                     	;# 
  3210  0112                     	;# 
  3211  0113                     	;# 
  3212  0114                     	;# 
  3213  0115                     	;# 
  3214  0116                     	;# 
  3215  0117                     	;# 
  3216  0118                     	;# 
  3217  0119                     	;# 
  3218  011A                     	;# 
  3219  011B                     	;# 
  3220  011D                     	;# 
  3221  011E                     	;# 
  3222  018C                     	;# 
  3223  018D                     	;# 
  3224  018E                     	;# 
  3225  0191                     	;# 
  3226  0191                     	;# 
  3227  0192                     	;# 
  3228  0193                     	;# 
  3229  0193                     	;# 
  3230  0193                     	;# 
  3231  0194                     	;# 
  3232  0195                     	;# 
  3233  0196                     	;# 
  3234  0199                     	;# 
  3235  019A                     	;# 
  3236  019B                     	;# 
  3237  019B                     	;# 
  3238  019B                     	;# 
  3239  019B                     	;# 
  3240  019C                     	;# 
  3241  019C                     	;# 
  3242  019D                     	;# 
  3243  019E                     	;# 
  3244  019F                     	;# 
  3245  020C                     	;# 
  3246  020D                     	;# 
  3247  020E                     	;# 
  3248  0211                     	;# 
  3249  0211                     	;# 
  3250  0212                     	;# 
  3251  0212                     	;# 
  3252  0213                     	;# 
  3253  0213                     	;# 
  3254  0214                     	;# 
  3255  0214                     	;# 
  3256  0215                     	;# 
  3257  0215                     	;# 
  3258  0215                     	;# 
  3259  0216                     	;# 
  3260  0216                     	;# 
  3261  0217                     	;# 
  3262  0217                     	;# 
  3263  0219                     	;# 
  3264  021A                     	;# 
  3265  021B                     	;# 
  3266  021C                     	;# 
  3267  021D                     	;# 
  3268  021E                     	;# 
  3269  021F                     	;# 
  3270  0291                     	;# 
  3271  0291                     	;# 
  3272  0292                     	;# 
  3273  0293                     	;# 
  3274  0294                     	;# 
  3275  0295                     	;# 
  3276  0295                     	;# 
  3277  0296                     	;# 
  3278  0298                     	;# 
  3279  0298                     	;# 
  3280  0299                     	;# 
  3281  029A                     	;# 
  3282  029B                     	;# 
  3283  029C                     	;# 
  3284  029D                     	;# 
  3285  029E                     	;# 
  3286  0311                     	;# 
  3287  0311                     	;# 
  3288  0312                     	;# 
  3289  0313                     	;# 
  3290  0318                     	;# 
  3291  0318                     	;# 
  3292  0319                     	;# 
  3293  031A                     	;# 
  3294  038C                     	;# 
  3295  038D                     	;# 
  3296  038E                     	;# 
  3297  0391                     	;# 
  3298  0392                     	;# 
  3299  0393                     	;# 
  3300  0394                     	;# 
  3301  0395                     	;# 
  3302  0396                     	;# 
  3303  039A                     	;# 
  3304  039C                     	;# 
  3305  039D                     	;# 
  3306  039E                     	;# 
  3307  039F                     	;# 
  3308  0415                     	;# 
  3309  0416                     	;# 
  3310  0417                     	;# 
  3311  041C                     	;# 
  3312  041D                     	;# 
  3313  041E                     	;# 
  3314  0FE4                     	;# 
  3315  0FE5                     	;# 
  3316  0FE6                     	;# 
  3317  0FE7                     	;# 
  3318  0FE8                     	;# 
  3319  0FE9                     	;# 
  3320  0FEA                     	;# 
  3321  0FEB                     	;# 
  3322  0FED                     	;# 
  3323  0FEE                     	;# 
  3324  0FEF                     	;# 
  3325  0000                     	;# 
  3326  0001                     	;# 
  3327  0002                     	;# 
  3328  0003                     	;# 
  3329  0004                     	;# 
  3330  0005                     	;# 
  3331  0006                     	;# 
  3332  0007                     	;# 
  3333  0008                     	;# 
  3334  0009                     	;# 
  3335  000A                     	;# 
  3336  000B                     	;# 
  3337  000C                     	;# 
  3338  000D                     	;# 
  3339  000E                     	;# 
  3340  0011                     	;# 
  3341  0012                     	;# 
  3342  0013                     	;# 
  3343  0014                     	;# 
  3344  0015                     	;# 
  3345  0016                     	;# 
  3346  0016                     	;# 
  3347  0017                     	;# 
  3348  0018                     	;# 
  3349  0019                     	;# 
  3350  001A                     	;# 
  3351  001B                     	;# 
  3352  001C                     	;# 
  3353  001E                     	;# 
  3354  001F                     	;# 
  3355  008C                     	;# 
  3356  008D                     	;# 
  3357  008E                     	;# 
  3358  0091                     	;# 
  3359  0092                     	;# 
  3360  0093                     	;# 
  3361  0094                     	;# 
  3362  0095                     	;# 
  3363  0096                     	;# 
  3364  0097                     	;# 
  3365  0098                     	;# 
  3366  0099                     	;# 
  3367  009A                     	;# 
  3368  009B                     	;# 
  3369  009B                     	;# 
  3370  009C                     	;# 
  3371  009D                     	;# 
  3372  009E                     	;# 
  3373  010C                     	;# 
  3374  010D                     	;# 
  3375  010E                     	;# 
  3376  0111                     	;# 
  3377  0112                     	;# 
  3378  0113                     	;# 
  3379  0114                     	;# 
  3380  0115                     	;# 
  3381  0116                     	;# 
  3382  0117                     	;# 
  3383  0118                     	;# 
  3384  0119                     	;# 
  3385  011A                     	;# 
  3386  011B                     	;# 
  3387  011D                     	;# 
  3388  011E                     	;# 
  3389  018C                     	;# 
  3390  018D                     	;# 
  3391  018E                     	;# 
  3392  0191                     	;# 
  3393  0191                     	;# 
  3394  0192                     	;# 
  3395  0193                     	;# 
  3396  0193                     	;# 
  3397  0193                     	;# 
  3398  0194                     	;# 
  3399  0195                     	;# 
  3400  0196                     	;# 
  3401  0199                     	;# 
  3402  019A                     	;# 
  3403  019B                     	;# 
  3404  019B                     	;# 
  3405  019B                     	;# 
  3406  019B                     	;# 
  3407  019C                     	;# 
  3408  019C                     	;# 
  3409  019D                     	;# 
  3410  019E                     	;# 
  3411  019F                     	;# 
  3412  020C                     	;# 
  3413  020D                     	;# 
  3414  020E                     	;# 
  3415  0211                     	;# 
  3416  0211                     	;# 
  3417  0212                     	;# 
  3418  0212                     	;# 
  3419  0213                     	;# 
  3420  0213                     	;# 
  3421  0214                     	;# 
  3422  0214                     	;# 
  3423  0215                     	;# 
  3424  0215                     	;# 
  3425  0215                     	;# 
  3426  0216                     	;# 
  3427  0216                     	;# 
  3428  0217                     	;# 
  3429  0217                     	;# 
  3430  0219                     	;# 
  3431  021A                     	;# 
  3432  021B                     	;# 
  3433  021C                     	;# 
  3434  021D                     	;# 
  3435  021E                     	;# 
  3436  021F                     	;# 
  3437  0291                     	;# 
  3438  0291                     	;# 
  3439  0292                     	;# 
  3440  0293                     	;# 
  3441  0294                     	;# 
  3442  0295                     	;# 
  3443  0295                     	;# 
  3444  0296                     	;# 
  3445  0298                     	;# 
  3446  0298                     	;# 
  3447  0299                     	;# 
  3448  029A                     	;# 
  3449  029B                     	;# 
  3450  029C                     	;# 
  3451  029D                     	;# 
  3452  029E                     	;# 
  3453  0311                     	;# 
  3454  0311                     	;# 
  3455  0312                     	;# 
  3456  0313                     	;# 
  3457  0318                     	;# 
  3458  0318                     	;# 
  3459  0319                     	;# 
  3460  031A                     	;# 
  3461  038C                     	;# 
  3462  038D                     	;# 
  3463  038E                     	;# 
  3464  0391                     	;# 
  3465  0392                     	;# 
  3466  0393                     	;# 
  3467  0394                     	;# 
  3468  0395                     	;# 
  3469  0396                     	;# 
  3470  039A                     	;# 
  3471  039C                     	;# 
  3472  039D                     	;# 
  3473  039E                     	;# 
  3474  039F                     	;# 
  3475  0415                     	;# 
  3476  0416                     	;# 
  3477  0417                     	;# 
  3478  041C                     	;# 
  3479  041D                     	;# 
  3480  041E                     	;# 
  3481  0FE4                     	;# 
  3482  0FE5                     	;# 
  3483  0FE6                     	;# 
  3484  0FE7                     	;# 
  3485  0FE8                     	;# 
  3486  0FE9                     	;# 
  3487  0FEA                     	;# 
  3488  0FEB                     	;# 
  3489  0FED                     	;# 
  3490  0FEE                     	;# 
  3491  0FEF                     	;# 
  3492  0000                     	;# 
  3493  0001                     	;# 
  3494  0002                     	;# 
  3495  0003                     	;# 
  3496  0004                     	;# 
  3497  0005                     	;# 
  3498  0006                     	;# 
  3499  0007                     	;# 
  3500  0008                     	;# 
  3501  0009                     	;# 
  3502  000A                     	;# 
  3503  000B                     	;# 
  3504  000C                     	;# 
  3505  000D                     	;# 
  3506  000E                     	;# 
  3507  0011                     	;# 
  3508  0012                     	;# 
  3509  0013                     	;# 
  3510  0014                     	;# 
  3511  0015                     	;# 
  3512  0016                     	;# 
  3513  0016                     	;# 
  3514  0017                     	;# 
  3515  0018                     	;# 
  3516  0019                     	;# 
  3517  001A                     	;# 
  3518  001B                     	;# 
  3519  001C                     	;# 
  3520  001E                     	;# 
  3521  001F                     	;# 
  3522  008C                     	;# 
  3523  008D                     	;# 
  3524  008E                     	;# 
  3525  0091                     	;# 
  3526  0092                     	;# 
  3527  0093                     	;# 
  3528  0094                     	;# 
  3529  0095                     	;# 
  3530  0096                     	;# 
  3531  0097                     	;# 
  3532  0098                     	;# 
  3533  0099                     	;# 
  3534  009A                     	;# 
  3535  009B                     	;# 
  3536  009B                     	;# 
  3537  009C                     	;# 
  3538  009D                     	;# 
  3539  009E                     	;# 
  3540  010C                     	;# 
  3541  010D                     	;# 
  3542  010E                     	;# 
  3543  0111                     	;# 
  3544  0112                     	;# 
  3545  0113                     	;# 
  3546  0114                     	;# 
  3547  0115                     	;# 
  3548  0116                     	;# 
  3549  0117                     	;# 
  3550  0118                     	;# 
  3551  0119                     	;# 
  3552  011A                     	;# 
  3553  011B                     	;# 
  3554  011D                     	;# 
  3555  011E                     	;# 
  3556  018C                     	;# 
  3557  018D                     	;# 
  3558  018E                     	;# 
  3559  0191                     	;# 
  3560  0191                     	;# 
  3561  0192                     	;# 
  3562  0193                     	;# 
  3563  0193                     	;# 
  3564  0193                     	;# 
  3565  0194                     	;# 
  3566  0195                     	;# 
  3567  0196                     	;# 
  3568  0199                     	;# 
  3569  019A                     	;# 
  3570  019B                     	;# 
  3571  019B                     	;# 
  3572  019B                     	;# 
  3573  019B                     	;# 
  3574  019C                     	;# 
  3575  019C                     	;# 
  3576  019D                     	;# 
  3577  019E                     	;# 
  3578  019F                     	;# 
  3579  020C                     	;# 
  3580  020D                     	;# 
  3581  020E                     	;# 
  3582  0211                     	;# 
  3583  0211                     	;# 
  3584  0212                     	;# 
  3585  0212                     	;# 
  3586  0213                     	;# 
  3587  0213                     	;# 
  3588  0214                     	;# 
  3589  0214                     	;# 
  3590  0215                     	;# 
  3591  0215                     	;# 
  3592  0215                     	;# 
  3593  0216                     	;# 
  3594  0216                     	;# 
  3595  0217                     	;# 
  3596  0217                     	;# 
  3597  0219                     	;# 
  3598  021A                     	;# 
  3599  021B                     	;# 
  3600  021C                     	;# 
  3601  021D                     	;# 
  3602  021E                     	;# 
  3603  021F                     	;# 
  3604  0291                     	;# 
  3605  0291                     	;# 
  3606  0292                     	;# 
  3607  0293                     	;# 
  3608  0294                     	;# 
  3609  0295                     	;# 
  3610  0295                     	;# 
  3611  0296                     	;# 
  3612  0298                     	;# 
  3613  0298                     	;# 
  3614  0299                     	;# 
  3615  029A                     	;# 
  3616  029B                     	;# 
  3617  029C                     	;# 
  3618  029D                     	;# 
  3619  029E                     	;# 
  3620  0311                     	;# 
  3621  0311                     	;# 
  3622  0312                     	;# 
  3623  0313                     	;# 
  3624  0318                     	;# 
  3625  0318                     	;# 
  3626  0319                     	;# 
  3627  031A                     	;# 
  3628  038C                     	;# 
  3629  038D                     	;# 
  3630  038E                     	;# 
  3631  0391                     	;# 
  3632  0392                     	;# 
  3633  0393                     	;# 
  3634  0394                     	;# 
  3635  0395                     	;# 
  3636  0396                     	;# 
  3637  039A                     	;# 
  3638  039C                     	;# 
  3639  039D                     	;# 
  3640  039E                     	;# 
  3641  039F                     	;# 
  3642  0415                     	;# 
  3643  0416                     	;# 
  3644  0417                     	;# 
  3645  041C                     	;# 
  3646  041D                     	;# 
  3647  041E                     	;# 
  3648  0FE4                     	;# 
  3649  0FE5                     	;# 
  3650  0FE6                     	;# 
  3651  0FE7                     	;# 
  3652  0FE8                     	;# 
  3653  0FE9                     	;# 
  3654  0FEA                     	;# 
  3655  0FEB                     	;# 
  3656  0FED                     	;# 
  3657  0FEE                     	;# 
  3658  0FEF                     	;# 
  3659  0000                     	;# 
  3660  0001                     	;# 
  3661  0002                     	;# 
  3662  0003                     	;# 
  3663  0004                     	;# 
  3664  0005                     	;# 
  3665  0006                     	;# 
  3666  0007                     	;# 
  3667  0008                     	;# 
  3668  0009                     	;# 
  3669  000A                     	;# 
  3670  000B                     	;# 
  3671  000C                     	;# 
  3672  000D                     	;# 
  3673  000E                     	;# 
  3674  0011                     	;# 
  3675  0012                     	;# 
  3676  0013                     	;# 
  3677  0014                     	;# 
  3678  0015                     	;# 
  3679  0016                     	;# 
  3680  0016                     	;# 
  3681  0017                     	;# 
  3682  0018                     	;# 
  3683  0019                     	;# 
  3684  001A                     	;# 
  3685  001B                     	;# 
  3686  001C                     	;# 
  3687  001E                     	;# 
  3688  001F                     	;# 
  3689  008C                     	;# 
  3690  008D                     	;# 
  3691  008E                     	;# 
  3692  0091                     	;# 
  3693  0092                     	;# 
  3694  0093                     	;# 
  3695  0094                     	;# 
  3696  0095                     	;# 
  3697  0096                     	;# 
  3698  0097                     	;# 
  3699  0098                     	;# 
  3700  0099                     	;# 
  3701  009A                     	;# 
  3702  009B                     	;# 
  3703  009B                     	;# 
  3704  009C                     	;# 
  3705  009D                     	;# 
  3706  009E                     	;# 
  3707  010C                     	;# 
  3708  010D                     	;# 
  3709  010E                     	;# 
  3710  0111                     	;# 
  3711  0112                     	;# 
  3712  0113                     	;# 
  3713  0114                     	;# 
  3714  0115                     	;# 
  3715  0116                     	;# 
  3716  0117                     	;# 
  3717  0118                     	;# 
  3718  0119                     	;# 
  3719  011A                     	;# 
  3720  011B                     	;# 
  3721  011D                     	;# 
  3722  011E                     	;# 
  3723  018C                     	;# 
  3724  018D                     	;# 
  3725  018E                     	;# 
  3726  0191                     	;# 
  3727  0191                     	;# 
  3728  0192                     	;# 
  3729  0193                     	;# 
  3730  0193                     	;# 
  3731  0193                     	;# 
  3732  0194                     	;# 
  3733  0195                     	;# 
  3734  0196                     	;# 
  3735  0199                     	;# 
  3736  019A                     	;# 
  3737  019B                     	;# 
  3738  019B                     	;# 
  3739  019B                     	;# 
  3740  019B                     	;# 
  3741  019C                     	;# 
  3742  019C                     	;# 
  3743  019D                     	;# 
  3744  019E                     	;# 
  3745  019F                     	;# 
  3746  020C                     	;# 
  3747  020D                     	;# 
  3748  020E                     	;# 
  3749  0211                     	;# 
  3750  0211                     	;# 
  3751  0212                     	;# 
  3752  0212                     	;# 
  3753  0213                     	;# 
  3754  0213                     	;# 
  3755  0214                     	;# 
  3756  0214                     	;# 
  3757  0215                     	;# 
  3758  0215                     	;# 
  3759  0215                     	;# 
  3760  0216                     	;# 
  3761  0216                     	;# 
  3762  0217                     	;# 
  3763  0217                     	;# 
  3764  0219                     	;# 
  3765  021A                     	;# 
  3766  021B                     	;# 
  3767  021C                     	;# 
  3768  021D                     	;# 
  3769  021E                     	;# 
  3770  021F                     	;# 
  3771  0291                     	;# 
  3772  0291                     	;# 
  3773  0292                     	;# 
  3774  0293                     	;# 
  3775  0294                     	;# 
  3776  0295                     	;# 
  3777  0295                     	;# 
  3778  0296                     	;# 
  3779  0298                     	;# 
  3780  0298                     	;# 
  3781  0299                     	;# 
  3782  029A                     	;# 
  3783  029B                     	;# 
  3784  029C                     	;# 
  3785  029D                     	;# 
  3786  029E                     	;# 
  3787  0311                     	;# 
  3788  0311                     	;# 
  3789  0312                     	;# 
  3790  0313                     	;# 
  3791  0318                     	;# 
  3792  0318                     	;# 
  3793  0319                     	;# 
  3794  031A                     	;# 
  3795  038C                     	;# 
  3796  038D                     	;# 
  3797  038E                     	;# 
  3798  0391                     	;# 
  3799  0392                     	;# 
  3800  0393                     	;# 
  3801  0394                     	;# 
  3802  0395                     	;# 
  3803  0396                     	;# 
  3804  039A                     	;# 
  3805  039C                     	;# 
  3806  039D                     	;# 
  3807  039E                     	;# 
  3808  039F                     	;# 
  3809  0415                     	;# 
  3810  0416                     	;# 
  3811  0417                     	;# 
  3812  041C                     	;# 
  3813  041D                     	;# 
  3814  041E                     	;# 
  3815  0FE4                     	;# 
  3816  0FE5                     	;# 
  3817  0FE6                     	;# 
  3818  0FE7                     	;# 
  3819  0FE8                     	;# 
  3820  0FE9                     	;# 
  3821  0FEA                     	;# 
  3822  0FEB                     	;# 
  3823  0FED                     	;# 
  3824  0FEE                     	;# 
  3825  0FEF                     	;# 
  3826  0000                     	;# 
  3827  0001                     	;# 
  3828  0002                     	;# 
  3829  0003                     	;# 
  3830  0004                     	;# 
  3831  0005                     	;# 
  3832  0006                     	;# 
  3833  0007                     	;# 
  3834  0008                     	;# 
  3835  0009                     	;# 
  3836  000A                     	;# 
  3837  000B                     	;# 
  3838  000C                     	;# 
  3839  000D                     	;# 
  3840  000E                     	;# 
  3841  0011                     	;# 
  3842  0012                     	;# 
  3843  0013                     	;# 
  3844  0014                     	;# 
  3845  0015                     	;# 
  3846  0016                     	;# 
  3847  0016                     	;# 
  3848  0017                     	;# 
  3849  0018                     	;# 
  3850  0019                     	;# 
  3851  001A                     	;# 
  3852  001B                     	;# 
  3853  001C                     	;# 
  3854  001E                     	;# 
  3855  001F                     	;# 
  3856  008C                     	;# 
  3857  008D                     	;# 
  3858  008E                     	;# 
  3859  0091                     	;# 
  3860  0092                     	;# 
  3861  0093                     	;# 
  3862  0094                     	;# 
  3863  0095                     	;# 
  3864  0096                     	;# 
  3865  0097                     	;# 
  3866  0098                     	;# 
  3867  0099                     	;# 
  3868  009A                     	;# 
  3869  009B                     	;# 
  3870  009B                     	;# 
  3871  009C                     	;# 
  3872  009D                     	;# 
  3873  009E                     	;# 
  3874  010C                     	;# 
  3875  010D                     	;# 
  3876  010E                     	;# 
  3877  0111                     	;# 
  3878  0112                     	;# 
  3879  0113                     	;# 
  3880  0114                     	;# 
  3881  0115                     	;# 
  3882  0116                     	;# 
  3883  0117                     	;# 
  3884  0118                     	;# 
  3885  0119                     	;# 
  3886  011A                     	;# 
  3887  011B                     	;# 
  3888  011D                     	;# 
  3889  011E                     	;# 
  3890  018C                     	;# 
  3891  018D                     	;# 
  3892  018E                     	;# 
  3893  0191                     	;# 
  3894  0191                     	;# 
  3895  0192                     	;# 
  3896  0193                     	;# 
  3897  0193                     	;# 
  3898  0193                     	;# 
  3899  0194                     	;# 
  3900  0195                     	;# 
  3901  0196                     	;# 
  3902  0199                     	;# 
  3903  019A                     	;# 
  3904  019B                     	;# 
  3905  019B                     	;# 
  3906  019B                     	;# 
  3907  019B                     	;# 
  3908  019C                     	;# 
  3909  019C                     	;# 
  3910  019D                     	;# 
  3911  019E                     	;# 
  3912  019F                     	;# 
  3913  020C                     	;# 
  3914  020D                     	;# 
  3915  020E                     	;# 
  3916  0211                     	;# 
  3917  0211                     	;# 
  3918  0212                     	;# 
  3919  0212                     	;# 
  3920  0213                     	;# 
  3921  0213                     	;# 
  3922  0214                     	;# 
  3923  0214                     	;# 
  3924  0215                     	;# 
  3925  0215                     	;# 
  3926  0215                     	;# 
  3927  0216                     	;# 
  3928  0216                     	;# 
  3929  0217                     	;# 
  3930  0217                     	;# 
  3931  0219                     	;# 
  3932  021A                     	;# 
  3933  021B                     	;# 
  3934  021C                     	;# 
  3935  021D                     	;# 
  3936  021E                     	;# 
  3937  021F                     	;# 
  3938  0291                     	;# 
  3939  0291                     	;# 
  3940  0292                     	;# 
  3941  0293                     	;# 
  3942  0294                     	;# 
  3943  0295                     	;# 
  3944  0295                     	;# 
  3945  0296                     	;# 
  3946  0298                     	;# 
  3947  0298                     	;# 
  3948  0299                     	;# 
  3949  029A                     	;# 
  3950  029B                     	;# 
  3951  029C                     	;# 
  3952  029D                     	;# 
  3953  029E                     	;# 
  3954  0311                     	;# 
  3955  0311                     	;# 
  3956  0312                     	;# 
  3957  0313                     	;# 
  3958  0318                     	;# 
  3959  0318                     	;# 
  3960  0319                     	;# 
  3961  031A                     	;# 
  3962  038C                     	;# 
  3963  038D                     	;# 
  3964  038E                     	;# 
  3965  0391                     	;# 
  3966  0392                     	;# 
  3967  0393                     	;# 
  3968  0394                     	;# 
  3969  0395                     	;# 
  3970  0396                     	;# 
  3971  039A                     	;# 
  3972  039C                     	;# 
  3973  039D                     	;# 
  3974  039E                     	;# 
  3975  039F                     	;# 
  3976  0415                     	;# 
  3977  0416                     	;# 
  3978  0417                     	;# 
  3979  041C                     	;# 
  3980  041D                     	;# 
  3981  041E                     	;# 
  3982  0FE4                     	;# 
  3983  0FE5                     	;# 
  3984  0FE6                     	;# 
  3985  0FE7                     	;# 
  3986  0FE8                     	;# 
  3987  0FE9                     	;# 
  3988  0FEA                     	;# 
  3989  0FEB                     	;# 
  3990  0FED                     	;# 
  3991  0FEE                     	;# 
  3992  0FEF                     	;# 
  3993                           
  3994                           	psect	idataBANK1
  3995  1370                     __pidataBANK1:	
  3996                           
  3997                           ;initializer for _sensorHealth
  3998  1370  3401               	retlw	1
  3999  1371  3401               	retlw	1
  4000                           
  4001                           ;initializer for _addressSize
  4002  1372  3405               	retlw	5
  4003                           
  4004                           	psect	idataBANK2
  4005  137F                     __pidataBANK2:	
  4006                           
  4007                           ;initializer for _sensorUpdatePeriod
  4008  137F  34C0               	retlw	192
  4009  1380  3427               	retlw	39
  4010  1381  3409               	retlw	9
  4011  1382  3400               	retlw	0
  4012                           
  4013                           	psect	stringtext1
  4014  1800                     __pstringtext1:	
  4015  1800                     atan@coeff_a:	
  4016  1800  343C               	retlw	60
  4017  1801  3404               	retlw	4
  4018  1802  3442               	retlw	66
  4019  1803  349F               	retlw	159
  4020  1804  346A               	retlw	106
  4021  1805  3442               	retlw	66
  4022  1806  3490               	retlw	144
  4023  1807  3401               	retlw	1
  4024  1808  3442               	retlw	66
  4025  1809  344D               	retlw	77
  4026  180A  34BB               	retlw	187
  4027  180B  3440               	retlw	64
  4028  180C  34EC               	retlw	236
  4029  180D  3447               	retlw	71
  4030  180E  343E               	retlw	62
  4031  180F  348E               	retlw	142
  4032  1810  341F               	retlw	31
  4033  1811  34BB               	retlw	187
  4034  1812                     __end_ofatan@coeff_a:	
  4035                           
  4036                           	psect	stringtext2
  4037  1812                     __pstringtext2:	
  4038  1812                     atan@coeff_b:	
  4039  1812  343C               	retlw	60
  4040  1813  3404               	retlw	4
  4041  1814  3442               	retlw	66
  4042  1815  345A               	retlw	90
  4043  1816  348B               	retlw	139
  4044  1817  3442               	retlw	66
  4045  1818  3404               	retlw	4
  4046  1819  3444               	retlw	68
  4047  181A  3442               	retlw	66
  4048  181B  349C               	retlw	156
  4049  181C  344F               	retlw	79
  4050  181D  3441               	retlw	65
  4051  181E  3400               	retlw	0
  4052  181F  3480               	retlw	128
  4053  1820  343F               	retlw	63
  4054  1821                     __end_ofatan@coeff_b:	
  4055                           
  4056                           	psect	stringtext3
  4057  1821                     __pstringtext3:	
  4058  1821                     Wireless_init@TADDR:	
  4059  1821  3432               	retlw	50
  4060  1822  3430               	retlw	48
  4061  1823  3430               	retlw	48
  4062  1824  3430               	retlw	48
  4063  1825  3431               	retlw	49
  4064  1826                     __end_ofWireless_init@TADDR:	
  4065                           
  4066                           	psect	nvCOMMON
  4067  007C                     __pnvCOMMON:	
  4068  007C                     _timer1ReloadVal:	
  4069  007C                     	ds	2
  4070                           
  4071                           	psect	nvBANK2
  4072  0166                     __pnvBANK2:	
  4073  0166                     _TMR1_InterruptHandler:	
  4074  0166                     	ds	2
  4075  0168                     _IOCAF2_InterruptHandler:	
  4076  0168                     	ds	2
  4077  000C                     _PORTAbits	set	12
  4078  000E                     _PORTCbits	set	14
  4079  0019                     _T1GCONbits	set	25
  4080  0018                     _T1CONbits	set	24
  4081  0018                     _T1CON	set	24
  4082  0016                     _TMR1L	set	22
  4083  0017                     _TMR1H	set	23
  4084  0019                     _T1GCON	set	25
  4085  0014                     _PIR4bits	set	20
  4086  001C                     _T2CONbits	set	28
  4087  001C                     _T2CON	set	28
  4088  0011                     _PIR1bits	set	17
  4089  001A                     _TMR2	set	26
  4090  001B                     _PR2	set	27
  4091  000B                     _INTCONbits	set	11
  4092  009D                     _ADCON0bits	set	157
  4093  009C                     _ADRESH	set	156
  4094  009B                     _ADRESL	set	155
  4095  009E                     _ADCON1	set	158
  4096  009D                     _ADCON0	set	157
  4097  0091                     _PIE1bits	set	145
  4098  0094                     _PIE4bits	set	148
  4099  0095                     _OPTION_REGbits	set	149
  4100  008E                     _TRISC	set	142
  4101  008D                     _TRISB	set	141
  4102  008C                     _TRISA	set	140
  4103  0097                     _WDTCON	set	151
  4104  0098                     _OSCTUNE	set	152
  4105  0099                     _OSCCON	set	153
  4106  010E                     _LATCbits	set	270
  4107  0117                     _FVRCONbits	set	279
  4108  0117                     _FVRCON	set	279
  4109  011D                     _APFCON0	set	285
  4110  011E                     _APFCON1	set	286
  4111  010E                     _LATC	set	270
  4112  010D                     _LATB	set	269
  4113  010C                     _LATA	set	268
  4114  0116                     _BORCON	set	278
  4115  0196                     _EECON2	set	406
  4116  0193                     _EEDATL	set	403
  4117  0194                     _EEDATH	set	404
  4118  0195                     _EECON1bits	set	405
  4119  0192                     _EEADRH	set	402
  4120  0191                     _EEADRL	set	401
  4121  018C                     _ANSELA	set	396
  4122  018D                     _ANSELB	set	397
  4123  018E                     _ANSELC	set	398
  4124  020E                     _WPUCbits	set	526
  4125  0214                     _SSP1STATbits	set	532
  4126  0211                     _SSP1BUF	set	529
  4127  0215                     _SSP1CON1bits	set	533
  4128  0212                     _SSP1ADD	set	530
  4129  0215                     _SSP1CON1	set	533
  4130  0214                     _SSP1STAT	set	532
  4131  0219                     _SSP2BUF	set	537
  4132  021E                     _SSP2CON2bits	set	542
  4133  021D                     _SSP2CON1bits	set	541
  4134  021A                     _SSP2ADD	set	538
  4135  021F                     _SSP2CON3	set	543
  4136  021D                     _SSP2CON1	set	541
  4137  021C                     _SSP2STAT	set	540
  4138  020E                     _WPUC	set	526
  4139  020C                     _WPUA	set	524
  4140  020D                     _WPUB	set	525
  4141  0391                     _IOCAPbits	set	913
  4142  0392                     _IOCANbits	set	914
  4143  0393                     _IOCAFbits	set	915
  4144                           
  4145                           ; #config settings
  4146  0000                     
  4147                           	psect	cinit
  4148  0039                     start_initialization:	
  4149  0039                     __initialization:	
  4150                           
  4151                           ; Initialize objects allocated to BANK1
  4152  0039  0021               	movlb	1	; select bank1
  4153  003A  3193  2370  3180   	fcall	__pidataBANK1	;fetch initializer
  4154  003D  00E3               	movwf	__pdataBANK1& (0+127)
  4155  003E  3193  2371  3180   	fcall	__pidataBANK1+1	;fetch initializer
  4156  0041  00E4               	movwf	(__pdataBANK1+1)& (0+127)
  4157  0042  3193  2372  3180   	fcall	__pidataBANK1+2	;fetch initializer
  4158  0045  00E5               	movwf	(__pdataBANK1+2)& (0+127)
  4159                           
  4160                           ; Initialize objects allocated to BANK2
  4161  0046  0022               	movlb	2	; select bank2
  4162  0047  3193  237F  3180   	fcall	__pidataBANK2	;fetch initializer
  4163  004A  00EA               	movwf	__pdataBANK2& (0+127)
  4164  004B  3193  2380  3180   	fcall	__pidataBANK2+1	;fetch initializer
  4165  004E  00EB               	movwf	(__pdataBANK2+1)& (0+127)
  4166  004F  3193  2381  3180   	fcall	__pidataBANK2+2	;fetch initializer
  4167  0052  00EC               	movwf	(__pdataBANK2+2)& (0+127)
  4168  0053  3193  2382  3180   	fcall	__pidataBANK2+3	;fetch initializer
  4169  0056  00ED               	movwf	(__pdataBANK2+3)& (0+127)
  4170                           
  4171                           ; Clear objects allocated to COMMON
  4172  0057  01F7               	clrf	__pbssCOMMON& (0+127)
  4173  0058  01F8               	clrf	(__pbssCOMMON+1)& (0+127)
  4174  0059  01F9               	clrf	(__pbssCOMMON+2)& (0+127)
  4175  005A  01FA               	clrf	(__pbssCOMMON+3)& (0+127)
  4176  005B  01FB               	clrf	(__pbssCOMMON+4)& (0+127)
  4177                           
  4178                           ; Clear objects allocated to BANK1
  4179  005C  30C9               	movlw	low __pbssBANK1
  4180  005D  0084               	movwf	4
  4181  005E  3000               	movlw	high __pbssBANK1
  4182  005F  0085               	movwf	5
  4183  0060  301A               	movlw	26
  4184  0061  3187  27FA  3180   	fcall	clear_ram0
  4185                           
  4186                           ; Clear objects allocated to BANK2
  4187  0064  3020               	movlw	low __pbssBANK2
  4188  0065  0084               	movwf	4
  4189  0066  3001               	movlw	high __pbssBANK2
  4190  0067  0085               	movwf	5
  4191  0068  3046               	movlw	70
  4192  0069  3187  27FA  3180   	fcall	clear_ram0
  4193                           
  4194                           ; Clear objects allocated to BANK3
  4195  006C  30A0               	movlw	low __pbssBANK3
  4196  006D  0084               	movwf	4
  4197  006E  3001               	movlw	high __pbssBANK3
  4198  006F  0085               	movwf	5
  4199  0070  302C               	movlw	44
  4200  0071  3187  27FA         	fcall	clear_ram0
  4201  0073                     end_of_initialization:	
  4202                           ;End of C runtime variable initialization code
  4203                           
  4204  0073                     __end_of__initialization:	
  4205  0073  107E               	bcf	int$flags,0	;clear compiler interrupt flag (level 1)
  4206  0074  0020               	movlb	0
  4207  0075  3183  2B46         	ljmp	_main	;jump to C main() function
  4208                           
  4209                           	psect	bssCOMMON
  4210  0077                     __pbssCOMMON:	
  4211  0077                     _p_i2c2_current:	
  4212  0077                     	ds	1
  4213  0078                     _p_i2c2_trb_current:	
  4214  0078                     	ds	1
  4215  0079                     _i2c2_state:	
  4216  0079                     	ds	1
  4217  007A                     I2C2_ISR@i2c_address:	
  4218  007A                     	ds	2
  4219                           
  4220                           	psect	bssBANK1
  4221  00C9                     __pbssBANK1:	
  4222  00C9                     _i2c2_object:	
  4223  00C9                     	ds	5
  4224  00CE                     _globalCounter:	
  4225  00CE                     	ds	4
  4226  00D2                     _adc_t:	
  4227  00D2                     	ds	4
  4228  00D6                     _dig_T1:	
  4229  00D6                     	ds	2
  4230  00D8                     I2C2_ISR@pi2c_buf_ptr:	
  4231  00D8                     	ds	2
  4232  00DA                     DOOR_run@previousDoorState:	
  4233  00DA                     	ds	1
  4234  00DB                     _initialised:	
  4235  00DB                     	ds	1
  4236  00DC                     _doorState:	
  4237  00DC                     	ds	1
  4238  00DD                     _doorClosedAngle:	
  4239  00DD                     	ds	1
  4240  00DE                     _doorOpenAngle:	
  4241  00DE                     	ds	1
  4242  00DF                     _HMC5883Lmode:	
  4243  00DF                     	ds	1
  4244  00E0                     I2C2_ISR@i2c_10bit_address_restart:	
  4245  00E0                     	ds	1
  4246  00E1                     I2C2_ISR@i2c_bytes_left:	
  4247  00E1                     	ds	1
  4248  00E2                     _i2c2_trb_count:	
  4249  00E2                     	ds	1
  4250                           
  4251                           	psect	dataBANK1
  4252  00E3                     __pdataBANK1:	
  4253  00E3                     _sensorHealth:	
  4254  00E3                     	ds	2
  4255  00E5                     _addressSize:	
  4256  00E5                     	ds	1
  4257                           
  4258                           	psect	bssBANK2
  4259  0120                     __pbssBANK2:	
  4260  0120                     _curr:	
  4261  0120                     	ds	4
  4262  0124                     DOOR_run@doorStateDuration:	
  4263  0124                     	ds	4
  4264  0128                     _pressure:	
  4265  0128                     	ds	3
  4266  012B                     _cTemp:	
  4267  012B                     	ds	3
  4268  012E                     _t_fine:	
  4269  012E                     	ds	3
  4270  0131                     _var2:	
  4271  0131                     	ds	3
  4272  0134                     _var1:	
  4273  0134                     	ds	3
  4274  0137                     HMC5883L_TestConnection@F3565:	
  4275  0137                     	ds	3
  4276  013A                     _errno:	
  4277  013A                     	ds	2
  4278  013C                     _timeOut:	
  4279  013C                     	ds	2
  4280  013E                     _referenceDirection:	
  4281  013E                     	ds	2
  4282  0140                     _dig_P9:	
  4283  0140                     	ds	2
  4284  0142                     _dig_P8:	
  4285  0142                     	ds	2
  4286  0144                     _dig_P7:	
  4287  0144                     	ds	2
  4288  0146                     _dig_P6:	
  4289  0146                     	ds	2
  4290  0148                     _dig_P5:	
  4291  0148                     	ds	2
  4292  014A                     _dig_P4:	
  4293  014A                     	ds	2
  4294  014C                     _dig_P3:	
  4295  014C                     	ds	2
  4296  014E                     _dig_P2:	
  4297  014E                     	ds	2
  4298  0150                     _dig_P1:	
  4299  0150                     	ds	2
  4300  0152                     _dig_T4:	
  4301  0152                     	ds	2
  4302  0154                     _dig_T3:	
  4303  0154                     	ds	2
  4304  0156                     _dig_T2:	
  4305  0156                     	ds	2
  4306  0158                     I2C2_MasterRead@trBlock:	
  4307  0158                     	ds	5
  4308  015D                     I2C2_MasterWrite@trBlock:	
  4309  015D                     	ds	5
  4310  0162                     _i2c2_tr_queue:	
  4311  0162                     	ds	4
  4312                           
  4313                           	psect	dataBANK2
  4314  016A                     __pdataBANK2:	
  4315  016A                     _sensorUpdatePeriod:	
  4316  016A                     	ds	4
  4317                           
  4318                           	psect	bssBANK3
  4319  01A0                     __pbssBANK3:	
  4320  01A0                     _adc_p:	
  4321  01A0                     	ds	4
  4322  01A4                     _b1:	
  4323  01A4                     	ds	24
  4324  01BC                     _data:	
  4325  01BC                     	ds	8
  4326  01C4                     _heading:	
  4327  01C4                     	ds	8
  4328                           
  4329                           	psect	clrtext
  4330  07FA                     clear_ram0:	
  4331                           ;	Called with FSR0 containing the base address, and
  4332                           ;	WREG with the size to clear
  4333                           
  4334  07FA  0064               	clrwdt	;clear the watchdog before getting into this loop
  4335  07FB                     clrloop0:	
  4336  07FB  0180               	clrf	0	;clear RAM location pointed to by FSR
  4337  07FC  3101               	addfsr 0,1
  4338  07FD  0B89               	decfsz	9,f	;Have we reached the end of clearing yet?
  4339  07FE  2FFB               	goto	clrloop0	;have we reached the end yet?
  4340  07FF  3400               	retlw	0	;all done for this memory range, return
  4341                           
  4342                           	psect	cstackBANK3
  4343  01CC                     __pcstackBANK3:	
  4344  01CC                     main@prevDoorStatus:	
  4345                           
  4346                           ; 1 bytes @ 0x0
  4347  01CC                     	ds	1
  4348  01CD                     main@doorClosedUpdateCounter:	
  4349                           
  4350                           ; 4 bytes @ 0x1
  4351  01CD                     	ds	4
  4352  01D1                     main@dur:	
  4353                           
  4354                           ; 2 bytes @ 0x5
  4355  01D1                     	ds	2
  4356  01D3                     main@doorOpenTime:	
  4357                           
  4358                           ; 4 bytes @ 0x7
  4359  01D3                     	ds	4
  4360  01D7                     main@doorStatus:	
  4361                           
  4362                           ; 1 bytes @ 0xB
  4363  01D7                     	ds	1
  4364                           
  4365                           	psect	cstackBANK1
  4366  00A0                     __pcstackBANK1:	
  4367  00A0                     ___fttol@sign1:	
  4368                           
  4369                           ; 1 bytes @ 0x0
  4370  00A0                     	ds	1
  4371  00A1                     ___fttol@lval:	
  4372                           
  4373                           ; 4 bytes @ 0x1
  4374  00A1                     	ds	4
  4375  00A5                     ___fttol@exp1:	
  4376                           
  4377                           ; 1 bytes @ 0x5
  4378  00A5                     	ds	1
  4379  00A6                     ?_BMP_readTemperature:	
  4380                           
  4381                           ; 3 bytes @ 0x6
  4382  00A6                     	ds	3
  4383  00A9                     ??_BMP_readTemperature:	
  4384                           
  4385                           ; 1 bytes @ 0x9
  4386  00A9                     	ds	12
  4387  00B5                     _BMP_readTemperature$2637:	
  4388                           
  4389                           ; 3 bytes @ 0x15
  4390  00B5                     	ds	3
  4391  00B8                     BMP_readTemperature@status:	
  4392                           
  4393                           ; 1 bytes @ 0x18
  4394  00B8                     	ds	1
  4395  00B9                     BMP_readTemperature@tmp:	
  4396                           
  4397                           ; 1 bytes @ 0x19
  4398  00B9                     	ds	1
  4399  00BA                     ?_Wireless_packageData:	
  4400  00BA                     Wireless_packageData@openTime:	
  4401                           ; 1 bytes @ 0x1A
  4402                           
  4403                           
  4404                           ; 1 bytes @ 0x1A
  4405  00BA                     	ds	1
  4406  00BB                     Wireless_packageData@tempC:	
  4407                           
  4408                           ; 3 bytes @ 0x1B
  4409  00BB                     	ds	3
  4410  00BE                     Wireless_packageData@data:	
  4411                           
  4412                           ; 5 bytes @ 0x1E
  4413  00BE                     	ds	5
  4414  00C3                     Wireless_packageData@var:	
  4415                           
  4416                           ; 1 bytes @ 0x23
  4417  00C3                     	ds	1
  4418  00C4                     Wireless_packageData@status:	
  4419                           
  4420                           ; 1 bytes @ 0x24
  4421  00C4                     	ds	1
  4422  00C5                     Wireless_packageData@t1:	
  4423                           
  4424                           ; 2 bytes @ 0x25
  4425  00C5                     	ds	2
  4426  00C7                     ??_main:	
  4427                           
  4428                           ; 1 bytes @ 0x27
  4429  00C7                     	ds	2
  4430                           
  4431                           	psect	cstackCOMMON
  4432  0070                     __pcstackCOMMON:	
  4433  0070                     ?_PIN_MANAGER_Initialize:	
  4434  0070                     ?_OSCILLATOR_Initialize:	
  4435                           ; 1 bytes @ 0x0
  4436                           
  4437  0070                     ?_WDT_Initialize:	
  4438                           ; 1 bytes @ 0x0
  4439                           
  4440  0070                     ?_SPI1_Initialize:	
  4441                           ; 1 bytes @ 0x0
  4442                           
  4443  0070                     ?_I2C2_Initialize:	
  4444                           ; 1 bytes @ 0x0
  4445                           
  4446  0070                     ?_FVR_Initialize:	
  4447                           ; 1 bytes @ 0x0
  4448                           
  4449  0070                     ?_ADC_Initialize:	
  4450                           ; 1 bytes @ 0x0
  4451                           
  4452  0070                     ?_TMR2_Initialize:	
  4453                           ; 1 bytes @ 0x0
  4454                           
  4455  0070                     ?_TMR1_Initialize:	
  4456                           ; 1 bytes @ 0x0
  4457                           
  4458  0070                     ?_IOCAF2_DefaultInterruptHandler:	
  4459                           ; 1 bytes @ 0x0
  4460                           
  4461  0070                     ??_IOCAF2_DefaultInterruptHandler:	
  4462                           ; 1 bytes @ 0x0
  4463                           
  4464  0070                     ?_IOCAF2_ISR:	
  4465                           ; 1 bytes @ 0x0
  4466                           
  4467  0070                     ??_IOCAF2_ISR:	
  4468                           ; 1 bytes @ 0x0
  4469                           
  4470  0070                     ?_I2C2_BusCollisionISR:	
  4471                           ; 1 bytes @ 0x0
  4472                           
  4473  0070                     ??_I2C2_BusCollisionISR:	
  4474                           ; 1 bytes @ 0x0
  4475                           
  4476  0070                     ?_I2C2_ISR:	
  4477                           ; 1 bytes @ 0x0
  4478                           
  4479  0070                     ?_TMR1_ISR:	
  4480                           ; 1 bytes @ 0x0
  4481                           
  4482  0070                     ??_TMR1_ISR:	
  4483                           ; 1 bytes @ 0x0
  4484                           
  4485  0070                     ?_TMR1_DefaultInterruptHandler:	
  4486                           ; 1 bytes @ 0x0
  4487                           
  4488  0070                     ??_TMR1_DefaultInterruptHandler:	
  4489                           ; 1 bytes @ 0x0
  4490                           
  4491  0070                     ?_TMR1_CallBack:	
  4492                           ; 1 bytes @ 0x0
  4493                           
  4494  0070                     ??_TMR1_CallBack:	
  4495                           ; 1 bytes @ 0x0
  4496                           
  4497  0070                     ?_Timeout_increment:	
  4498                           ; 1 bytes @ 0x0
  4499                           
  4500  0070                     ??_Timeout_increment:	
  4501                           ; 1 bytes @ 0x0
  4502                           
  4503  0070                     ?_I2C2_Stop:	
  4504                           ; 1 bytes @ 0x0
  4505                           
  4506  0070                     ??_I2C2_Stop:	
  4507                           ; 1 bytes @ 0x0
  4508                           
  4509  0070                     ?_I2C2_FunctionComplete:	
  4510                           ; 1 bytes @ 0x0
  4511                           
  4512  0070                     ??_I2C2_FunctionComplete:	
  4513                           ; 1 bytes @ 0x0
  4514                           
  4515  0070                     ?_Sensor_peripheralWake:	
  4516                           ; 1 bytes @ 0x0
  4517                           
  4518  0070                     ?_Sensor_peripheralSleep:	
  4519                           ; 1 bytes @ 0x0
  4520                           
  4521  0070                     ?_Wireless_init:	
  4522                           ; 1 bytes @ 0x0
  4523                           
  4524  0070                     ?_BMP_init:	
  4525                           ; 1 bytes @ 0x0
  4526                           
  4527  0070                     ?_DOOR_init:	
  4528                           ; 1 bytes @ 0x0
  4529                           
  4530  0070                     ?_Wireless_wake:	
  4531                           ; 1 bytes @ 0x0
  4532                           
  4533  0070                     ?_Wireless_sleep:	
  4534                           ; 1 bytes @ 0x0
  4535                           
  4536  0070                     ?_Timeout_updateCurrentTime:	
  4537                           ; 1 bytes @ 0x0
  4538                           
  4539  0070                     ?_DOOR_run:	
  4540                           ; 1 bytes @ 0x0
  4541                           
  4542  0070                     ?_Diag_setTempSensorHealth:	
  4543                           ; 1 bytes @ 0x0
  4544                           
  4545  0070                     ?_Diag_getTempSensorHealth:	
  4546                           ; 1 bytes @ 0x0
  4547                           
  4548  0070                     ?_Diag_getSensorHealth:	
  4549                           ; 1 bytes @ 0x0
  4550                           
  4551  0070                     ?_Wireless_checkDataReceived:	
  4552                           ; 1 bytes @ 0x0
  4553                           
  4554  0070                     ?_DOOR_resetPos:	
  4555                           ; 1 bytes @ 0x0
  4556                           
  4557  0070                     ?_SYSTEM_Initialize:	
  4558                           ; 1 bytes @ 0x0
  4559                           
  4560  0070                     ?_PIN_MANAGER_IOC:	
  4561                           ; 1 bytes @ 0x0
  4562                           
  4563  0070                     ??_PIN_MANAGER_IOC:	
  4564                           ; 1 bytes @ 0x0
  4565                           
  4566  0070                     ?_INTERRUPT_InterruptManager:	
  4567                           ; 1 bytes @ 0x0
  4568                           
  4569  0070                     ?_ADC_SelectChannel:	
  4570                           ; 1 bytes @ 0x0
  4571                           
  4572  0070                     ?_ADC_StartConversion:	
  4573                           ; 1 bytes @ 0x0
  4574                           
  4575  0070                     ?_ADC_IsConversionDone:	
  4576                           ; 1 bytes @ 0x0
  4577                           
  4578  0070                     ?_FVR_IsOutputReady:	
  4579                           ; 1 bytes @ 0x0
  4580                           
  4581  0070                     ?_SPI1_Exchange8bit:	
  4582                           ; 1 bytes @ 0x0
  4583                           
  4584  0070                     ?_main:	
  4585                           ; 1 bytes @ 0x0
  4586                           
  4587  0070                     ?_SPI_WriteRead:	
  4588                           ; 1 bytes @ 0x0
  4589                           
  4590  0070                     ?_RF_ReadRegister:	
  4591                           ; 1 bytes @ 0x0
  4592                           
  4593  0070                     ?_RF_Write:	
  4594                           ; 1 bytes @ 0x0
  4595                           
  4596  0070                     ?_RF_ResetStatusIRQ:	
  4597                           ; 1 bytes @ 0x0
  4598                           
  4599  0070                     ?_RF_Init:	
  4600                           ; 1 bytes @ 0x0
  4601                           
  4602  0070                     ?_RF_DataIsReady:	
  4603                           ; 1 bytes @ 0x0
  4604                           
  4605  0070                     ?_Wireless_sendData:	
  4606                           ; 1 bytes @ 0x0
  4607                           
  4608  0070                     ?_Timeout_hasExpired:	
  4609                           ; 1 bytes @ 0x0
  4610                           
  4611                           
  4612                           ; 1 bytes @ 0x0
  4613  0070                     	ds	2
  4614  0072                     I2C2_Stop@completion_code:	
  4615                           
  4616                           ; 1 bytes @ 0x2
  4617  0072                     	ds	1
  4618  0073                     ??_I2C2_ISR:	
  4619                           
  4620                           ; 1 bytes @ 0x3
  4621  0073                     	ds	4
  4622                           
  4623                           	psect	cstackBANK0
  4624  0020                     __pcstackBANK0:	
  4625  0020                     ??_INTERRUPT_InterruptManager:	
  4626                           
  4627                           ; 1 bytes @ 0x0
  4628  0020                     	ds	1
  4629  0021                     ??_OSCILLATOR_Initialize:	
  4630  0021                     ??_WDT_Initialize:	
  4631                           ; 1 bytes @ 0x1
  4632                           
  4633  0021                     ??_SPI1_Initialize:	
  4634                           ; 1 bytes @ 0x1
  4635                           
  4636  0021                     ??_I2C2_Initialize:	
  4637                           ; 1 bytes @ 0x1
  4638                           
  4639  0021                     ??_FVR_Initialize:	
  4640                           ; 1 bytes @ 0x1
  4641                           
  4642  0021                     ??_ADC_Initialize:	
  4643                           ; 1 bytes @ 0x1
  4644                           
  4645  0021                     ??_TMR2_Initialize:	
  4646                           ; 1 bytes @ 0x1
  4647                           
  4648  0021                     ?_IOCAF2_SetInterruptHandler:	
  4649                           ; 1 bytes @ 0x1
  4650                           
  4651  0021                     ?_TMR1_SetInterruptHandler:	
  4652                           ; 1 bytes @ 0x1
  4653                           
  4654  0021                     ?_I2C2_MasterWriteTRBBuild:	
  4655                           ; 1 bytes @ 0x1
  4656                           
  4657  0021                     ?_I2C2_MasterTRBInsert:	
  4658                           ; 1 bytes @ 0x1
  4659                           
  4660  0021                     ?_I2C2_MasterReadTRBBuild:	
  4661                           ; 1 bytes @ 0x1
  4662                           
  4663  0021                     ??_Sensor_peripheralWake:	
  4664                           ; 1 bytes @ 0x1
  4665                           
  4666  0021                     ??_Sensor_peripheralSleep:	
  4667                           ; 1 bytes @ 0x1
  4668                           
  4669  0021                     ?_setSleepTime:	
  4670                           ; 1 bytes @ 0x1
  4671                           
  4672  0021                     ??_DOOR_init:	
  4673                           ; 1 bytes @ 0x1
  4674                           
  4675  0021                     ??_Diag_setTempSensorHealth:	
  4676                           ; 1 bytes @ 0x1
  4677                           
  4678  0021                     ??_Diag_getTempSensorHealth:	
  4679                           ; 1 bytes @ 0x1
  4680                           
  4681  0021                     ??_Diag_getSensorHealth:	
  4682                           ; 1 bytes @ 0x1
  4683                           
  4684  0021                     ??_DOOR_resetPos:	
  4685                           ; 1 bytes @ 0x1
  4686                           
  4687  0021                     ??_ADC_SelectChannel:	
  4688                           ; 1 bytes @ 0x1
  4689                           
  4690  0021                     ??_ADC_StartConversion:	
  4691                           ; 1 bytes @ 0x1
  4692                           
  4693  0021                     ??_ADC_IsConversionDone:	
  4694                           ; 1 bytes @ 0x1
  4695                           
  4696  0021                     ??_FVR_IsOutputReady:	
  4697                           ; 1 bytes @ 0x1
  4698                           
  4699  0021                     ?_DATAEE_WriteByte:	
  4700                           ; 1 bytes @ 0x1
  4701                           
  4702  0021                     ??_SPI1_Exchange8bit:	
  4703                           ; 1 bytes @ 0x1
  4704                           
  4705  0021                     ??_RF_Init:	
  4706                           ; 1 bytes @ 0x1
  4707                           
  4708  0021                     ?_Timeout_setTimeout:	
  4709                           ; 1 bytes @ 0x1
  4710                           
  4711  0021                     ??_Timeout_hasExpired:	
  4712                           ; 1 bytes @ 0x1
  4713                           
  4714  0021                     ?_TMR1_ReadTimer:	
  4715                           ; 1 bytes @ 0x1
  4716                           
  4717  0021                     ?_ADC_GetConversionResult:	
  4718                           ; 2 bytes @ 0x1
  4719                           
  4720  0021                     ?___lwdiv:	
  4721                           ; 2 bytes @ 0x1
  4722                           
  4723  0021                     ?___ftpack:	
  4724                           ; 2 bytes @ 0x1
  4725                           
  4726  0021                     ?_Timeout_getGlobalCounter:	
  4727                           ; 3 bytes @ 0x1
  4728                           
  4729  0021                     ?___lmul:	
  4730                           ; 4 bytes @ 0x1
  4731                           
  4732  0021                     ?___aldiv:	
  4733                           ; 4 bytes @ 0x1
  4734                           
  4735  0021                     ?___lldiv:	
  4736                           ; 4 bytes @ 0x1
  4737                           
  4738  0021                     I2C2_MasterTRBInsert@ptrb_list:	
  4739                           ; 4 bytes @ 0x1
  4740                           
  4741  0021                     I2C2_MasterWriteTRBBuild@pdata:	
  4742                           ; 1 bytes @ 0x1
  4743                           
  4744  0021                     DATAEE_WriteByte@bData:	
  4745                           ; 1 bytes @ 0x1
  4746                           
  4747  0021                     SPI1_Exchange8bit@data:	
  4748                           ; 1 bytes @ 0x1
  4749                           
  4750  0021                     IOCAF2_SetInterruptHandler@InterruptHandler:	
  4751                           ; 1 bytes @ 0x1
  4752                           
  4753  0021                     TMR1_SetInterruptHandler@InterruptHandler:	
  4754                           ; 2 bytes @ 0x1
  4755                           
  4756  0021                     I2C2_MasterReadTRBBuild@pdata:	
  4757                           ; 2 bytes @ 0x1
  4758                           
  4759  0021                     setSleepTime@timeSec:	
  4760                           ; 2 bytes @ 0x1
  4761                           
  4762  0021                     Timeout_setTimeout@val:	
  4763                           ; 2 bytes @ 0x1
  4764                           
  4765  0021                     ___lwdiv@divisor:	
  4766                           ; 2 bytes @ 0x1
  4767                           
  4768  0021                     ___ftpack@arg:	
  4769                           ; 2 bytes @ 0x1
  4770                           
  4771  0021                     ___lmul@multiplier:	
  4772                           ; 3 bytes @ 0x1
  4773                           
  4774  0021                     ___aldiv@divisor:	
  4775                           ; 4 bytes @ 0x1
  4776                           
  4777  0021                     ___lldiv@divisor:	
  4778                           ; 4 bytes @ 0x1
  4779                           
  4780                           
  4781                           ; 4 bytes @ 0x1
  4782  0021                     	ds	1
  4783  0022                     ??_DATAEE_WriteByte:	
  4784  0022                     ??_SPI_WriteRead:	
  4785                           ; 1 bytes @ 0x2
  4786                           
  4787  0022                     I2C2_MasterTRBInsert@pflag:	
  4788                           ; 1 bytes @ 0x2
  4789                           
  4790  0022                     I2C2_MasterWriteTRBBuild@length:	
  4791                           ; 1 bytes @ 0x2
  4792                           
  4793  0022                     ADC_SelectChannel@channel:	
  4794                           ; 1 bytes @ 0x2
  4795                           
  4796  0022                     DATAEE_WriteByte@bAdd:	
  4797                           ; 1 bytes @ 0x2
  4798                           
  4799  0022                     SPI_WriteRead@val:	
  4800                           ; 1 bytes @ 0x2
  4801                           
  4802  0022                     Diag_setTempSensorHealth@health:	
  4803                           ; 1 bytes @ 0x2
  4804                           
  4805  0022                     Diag_getSensorHealth@var:	
  4806                           ; 1 bytes @ 0x2
  4807                           
  4808                           
  4809                           ; 1 bytes @ 0x2
  4810  0022                     	ds	1
  4811  0023                     ??_PIN_MANAGER_Initialize:	
  4812  0023                     ??_TMR1_Initialize:	
  4813                           ; 1 bytes @ 0x3
  4814                           
  4815  0023                     ??_IOCAF2_SetInterruptHandler:	
  4816                           ; 1 bytes @ 0x3
  4817                           
  4818  0023                     ??_TMR1_SetInterruptHandler:	
  4819                           ; 1 bytes @ 0x3
  4820                           
  4821  0023                     ??_I2C2_MasterTRBInsert:	
  4822                           ; 1 bytes @ 0x3
  4823                           
  4824  0023                     ??_setSleepTime:	
  4825                           ; 1 bytes @ 0x3
  4826                           
  4827  0023                     ??_SYSTEM_Initialize:	
  4828                           ; 1 bytes @ 0x3
  4829                           
  4830  0023                     ??_TMR1_ReadTimer:	
  4831                           ; 1 bytes @ 0x3
  4832                           
  4833  0023                     ??_ADC_GetConversionResult:	
  4834                           ; 1 bytes @ 0x3
  4835                           
  4836  0023                     ?_SPI_WriteReadBuffer:	
  4837                           ; 1 bytes @ 0x3
  4838                           
  4839  0023                     ?_SPI_WriteBuffer:	
  4840                           ; 1 bytes @ 0x3
  4841                           
  4842  0023                     ?_RF_WriteRegister:	
  4843                           ; 1 bytes @ 0x3
  4844                           
  4845  0023                     ??_RF_ReadRegister:	
  4846                           ; 1 bytes @ 0x3
  4847                           
  4848  0023                     ??_RF_Write:	
  4849                           ; 1 bytes @ 0x3
  4850                           
  4851  0023                     ??_Timeout_setTimeout:	
  4852                           ; 1 bytes @ 0x3
  4853                           
  4854  0023                     I2C2_MasterReadTRBBuild@length:	
  4855                           ; 1 bytes @ 0x3
  4856                           
  4857  0023                     DATAEE_WriteByte@GIEBitValue:	
  4858                           ; 1 bytes @ 0x3
  4859                           
  4860  0023                     SPI_WriteReadBuffer@bufIn:	
  4861                           ; 1 bytes @ 0x3
  4862                           
  4863  0023                     RF_WriteRegister@val:	
  4864                           ; 1 bytes @ 0x3
  4865                           
  4866  0023                     RF_Write@val:	
  4867                           ; 1 bytes @ 0x3
  4868                           
  4869  0023                     I2C2_MasterWriteTRBBuild@address:	
  4870                           ; 1 bytes @ 0x3
  4871                           
  4872  0023                     SPI_WriteBuffer@bufOut:	
  4873                           ; 2 bytes @ 0x3
  4874                           
  4875  0023                     ___lwdiv@dividend:	
  4876                           ; 2 bytes @ 0x3
  4877                           
  4878                           
  4879                           ; 2 bytes @ 0x3
  4880  0023                     	ds	1
  4881  0024                     ?_Storage_save:	
  4882  0024                     ??_RF_WriteRegister:	
  4883                           ; 1 bytes @ 0x4
  4884                           
  4885  0024                     I2C2_MasterTRBInsert@count:	
  4886                           ; 1 bytes @ 0x4
  4887                           
  4888  0024                     SPI_WriteReadBuffer@bufSize:	
  4889                           ; 1 bytes @ 0x4
  4890                           
  4891  0024                     RF_WriteRegister@reg:	
  4892                           ; 1 bytes @ 0x4
  4893                           
  4894  0024                     RF_ReadRegister@reg:	
  4895                           ; 1 bytes @ 0x4
  4896                           
  4897  0024                     Storage_save@closeAngle:	
  4898                           ; 1 bytes @ 0x4
  4899                           
  4900  0024                     ___ftpack@exp:	
  4901                           ; 1 bytes @ 0x4
  4902                           
  4903  0024                     I2C2_MasterReadTRBBuild@address:	
  4904                           ; 1 bytes @ 0x4
  4905                           
  4906                           
  4907                           ; 2 bytes @ 0x4
  4908  0024                     	ds	1
  4909  0025                     ??_I2C2_MasterWriteTRBBuild:	
  4910  0025                     ??_Timeout_getGlobalCounter:	
  4911                           ; 1 bytes @ 0x5
  4912                           
  4913  0025                     ??_DOOR_run:	
  4914                           ; 1 bytes @ 0x5
  4915                           
  4916  0025                     ??_Storage_save:	
  4917                           ; 1 bytes @ 0x5
  4918                           
  4919  0025                     ??_SPI_WriteReadBuffer:	
  4920                           ; 1 bytes @ 0x5
  4921                           
  4922  0025                     ??_RF_ResetStatusIRQ:	
  4923                           ; 1 bytes @ 0x5
  4924                           
  4925  0025                     ??___lwdiv:	
  4926                           ; 1 bytes @ 0x5
  4927                           
  4928  0025                     SPI_WriteBuffer@bufSize:	
  4929                           ; 1 bytes @ 0x5
  4930                           
  4931  0025                     RF_ReadRegister@val:	
  4932                           ; 1 bytes @ 0x5
  4933                           
  4934  0025                     ___ftpack@sign:	
  4935                           ; 1 bytes @ 0x5
  4936                           
  4937  0025                     ___lmul@multiplicand:	
  4938                           ; 1 bytes @ 0x5
  4939                           
  4940  0025                     ___aldiv@dividend:	
  4941                           ; 4 bytes @ 0x5
  4942                           
  4943  0025                     ___lldiv@dividend:	
  4944                           ; 4 bytes @ 0x5
  4945                           
  4946                           
  4947                           ; 4 bytes @ 0x5
  4948  0025                     	ds	1
  4949  0026                     ??_I2C2_MasterReadTRBBuild:	
  4950  0026                     ??___ftpack:	
  4951                           ; 1 bytes @ 0x6
  4952                           
  4953  0026                     ??_SPI_WriteBuffer:	
  4954                           ; 1 bytes @ 0x6
  4955                           
  4956  0026                     ??_RF_DataIsReady:	
  4957                           ; 1 bytes @ 0x6
  4958                           
  4959  0026                     RF_ResetStatusIRQ@flags:	
  4960                           ; 1 bytes @ 0x6
  4961                           
  4962  0026                     Storage_save@openAngle:	
  4963                           ; 1 bytes @ 0x6
  4964                           
  4965  0026                     ___lwdiv@counter:	
  4966                           ; 1 bytes @ 0x6
  4967                           
  4968                           
  4969                           ; 1 bytes @ 0x6
  4970  0026                     	ds	1
  4971  0027                     ?_DOOR_update:	
  4972  0027                     I2C2_MasterWriteTRBBuild@ptrb:	
  4973                           ; 1 bytes @ 0x7
  4974                           
  4975  0027                     RF_DataIsReady@channel:	
  4976                           ; 1 bytes @ 0x7
  4977                           
  4978  0027                     DOOR_update@closedAngle:	
  4979                           ; 1 bytes @ 0x7
  4980                           
  4981  0027                     ___lwdiv@quotient:	
  4982                           ; 1 bytes @ 0x7
  4983                           
  4984                           
  4985                           ; 2 bytes @ 0x7
  4986  0027                     	ds	1
  4987  0028                     ??_DOOR_update:	
  4988  0028                     ?_I2C2_MasterWrite:	
  4989                           ; 1 bytes @ 0x8
  4990                           
  4991  0028                     I2C2_MasterWrite@length:	
  4992                           ; 1 bytes @ 0x8
  4993                           
  4994  0028                     I2C2_MasterReadTRBBuild@ptrb:	
  4995                           ; 1 bytes @ 0x8
  4996                           
  4997  0028                     SPI_WriteReadBuffer@bufOut:	
  4998                           ; 1 bytes @ 0x8
  4999                           
  5000  0028                     SPI_WriteBuffer@i:	
  5001                           ; 1 bytes @ 0x8
  5002                           
  5003  0028                     RF_DataIsReady@status:	
  5004                           ; 1 bytes @ 0x8
  5005                           
  5006  0028                     TMR1_ReadTimer@readVal:	
  5007                           ; 1 bytes @ 0x8
  5008                           
  5009                           
  5010                           ; 2 bytes @ 0x8
  5011  0028                     	ds	1
  5012  0029                     ?_I2C2_MasterRead:	
  5013  0029                     ?_RF_WriteRegisterData:	
  5014                           ; 1 bytes @ 0x9
  5015                           
  5016  0029                     ??___lmul:	
  5017                           ; 1 bytes @ 0x9
  5018                           
  5019  0029                     ??___aldiv:	
  5020                           ; 1 bytes @ 0x9
  5021                           
  5022  0029                     ??___lldiv:	
  5023                           ; 1 bytes @ 0x9
  5024                           
  5025  0029                     ?___altoft:	
  5026                           ; 1 bytes @ 0x9
  5027                           
  5028  0029                     ?___awtoft:	
  5029                           ; 3 bytes @ 0x9
  5030                           
  5031  0029                     ?___lwtoft:	
  5032                           ; 3 bytes @ 0x9
  5033                           
  5034  0029                     SPI_WriteReadBuffer@i:	
  5035                           ; 3 bytes @ 0x9
  5036                           
  5037  0029                     DOOR_update@openAngle:	
  5038                           ; 1 bytes @ 0x9
  5039                           
  5040  0029                     I2C2_MasterWrite@address:	
  5041                           ; 1 bytes @ 0x9
  5042                           
  5043  0029                     I2C2_MasterRead@pdata:	
  5044                           ; 2 bytes @ 0x9
  5045                           
  5046  0029                     RF_WriteRegisterData@buf:	
  5047                           ; 2 bytes @ 0x9
  5048                           
  5049  0029                     ___awtoft@c:	
  5050                           ; 2 bytes @ 0x9
  5051                           
  5052  0029                     ___lwtoft@c:	
  5053                           ; 2 bytes @ 0x9
  5054                           
  5055  0029                     ___lmul@product:	
  5056                           ; 2 bytes @ 0x9
  5057                           
  5058  0029                     ___altoft@c:	
  5059                           ; 4 bytes @ 0x9
  5060                           
  5061                           
  5062                           ; 4 bytes @ 0x9
  5063  0029                     	ds	1
  5064  002A                     ?_RF_ReadRegisterData:	
  5065  002A                     TMR1_ReadTimer@readValHigh:	
  5066                           ; 1 bytes @ 0xA
  5067                           
  5068  002A                     RF_ReadRegisterData@buf:	
  5069                           ; 1 bytes @ 0xA
  5070                           
  5071  002A                     ___aldiv@counter:	
  5072                           ; 1 bytes @ 0xA
  5073                           
  5074  002A                     ___lldiv@quotient:	
  5075                           ; 1 bytes @ 0xA
  5076                           
  5077                           
  5078                           ; 4 bytes @ 0xA
  5079  002A                     	ds	1
  5080  002B                     TMR1_ReadTimer@readValLow:	
  5081  002B                     I2C2_MasterWrite@pflag:	
  5082                           ; 1 bytes @ 0xB
  5083                           
  5084  002B                     I2C2_MasterRead@length:	
  5085                           ; 1 bytes @ 0xB
  5086                           
  5087  002B                     RF_ReadRegisterData@bufSize:	
  5088                           ; 1 bytes @ 0xB
  5089                           
  5090  002B                     RF_WriteRegisterData@bufSize:	
  5091                           ; 1 bytes @ 0xB
  5092                           
  5093  002B                     ___aldiv@sign:	
  5094                           ; 1 bytes @ 0xB
  5095                           
  5096                           
  5097                           ; 1 bytes @ 0xB
  5098  002B                     	ds	1
  5099  002C                     ??_I2C2_MasterWrite:	
  5100  002C                     ??_RF_ReadRegisterData:	
  5101                           ; 1 bytes @ 0xC
  5102                           
  5103  002C                     ??_RF_WriteRegisterData:	
  5104                           ; 1 bytes @ 0xC
  5105                           
  5106  002C                     ??___awtoft:	
  5107                           ; 1 bytes @ 0xC
  5108                           
  5109  002C                     ??___lwtoft:	
  5110                           ; 1 bytes @ 0xC
  5111                           
  5112  002C                     I2C2_MasterRead@address:	
  5113                           ; 1 bytes @ 0xC
  5114                           
  5115  002C                     ___aldiv@quotient:	
  5116                           ; 2 bytes @ 0xC
  5117                           
  5118                           
  5119                           ; 4 bytes @ 0xC
  5120  002C                     	ds	1
  5121  002D                     ??_Timeout_updateCurrentTime:	
  5122  002D                     ??___altoft:	
  5123                           ; 1 bytes @ 0xD
  5124                           
  5125  002D                     RF_WriteRegisterData@reg:	
  5126                           ; 1 bytes @ 0xD
  5127                           
  5128                           
  5129                           ; 1 bytes @ 0xD
  5130  002D                     	ds	1
  5131  002E                     ??_Wireless_init:	
  5132  002E                     ?_RF_TxPayload:	
  5133                           ; 1 bytes @ 0xE
  5134                           
  5135  002E                     I2C2_MasterWrite@pdata:	
  5136                           ; 1 bytes @ 0xE
  5137                           
  5138  002E                     I2C2_MasterRead@pflag:	
  5139                           ; 1 bytes @ 0xE
  5140                           
  5141  002E                     RF_ReadRegisterData@reg:	
  5142                           ; 1 bytes @ 0xE
  5143                           
  5144  002E                     RF_TxPayload@payloadSize:	
  5145                           ; 1 bytes @ 0xE
  5146                           
  5147  002E                     ___awtoft@sign:	
  5148                           ; 1 bytes @ 0xE
  5149                           
  5150  002E                     ___lldiv@counter:	
  5151                           ; 1 bytes @ 0xE
  5152                           
  5153                           
  5154                           ; 1 bytes @ 0xE
  5155  002E                     	ds	1
  5156  002F                     ??_Wireless_wake:	
  5157  002F                     ??_Wireless_sleep:	
  5158                           ; 1 bytes @ 0xF
  5159                           
  5160  002F                     ?_I2C_ByteWrite:	
  5161                           ; 1 bytes @ 0xF
  5162                           
  5163  002F                     ??_I2C2_MasterRead:	
  5164                           ; 1 bytes @ 0xF
  5165                           
  5166  002F                     ??_RF_TxPayload:	
  5167                           ; 1 bytes @ 0xF
  5168                           
  5169  002F                     ?_RF_RxPayload:	
  5170                           ; 1 bytes @ 0xF
  5171                           
  5172  002F                     RF_RxPayload@payloadSize:	
  5173                           ; 1 bytes @ 0xF
  5174                           
  5175  002F                     I2C_ByteWrite@pBuffer:	
  5176                           ; 1 bytes @ 0xF
  5177                           
  5178  002F                     ___altoft@exp:	
  5179                           ; 1 bytes @ 0xF
  5180                           
  5181                           
  5182                           ; 1 bytes @ 0xF
  5183  002F                     	ds	1
  5184  0030                     ??_RF_RxPayload:	
  5185  0030                     RF_TxPayload@payload:	
  5186                           ; 1 bytes @ 0x10
  5187                           
  5188  0030                     Wireless_sleep@reg:	
  5189                           ; 1 bytes @ 0x10
  5190                           
  5191  0030                     Wireless_wake@reg:	
  5192                           ; 1 bytes @ 0x10
  5193                           
  5194  0030                     I2C_ByteWrite@WriteAddr:	
  5195                           ; 1 bytes @ 0x10
  5196                           
  5197  0030                     ___altoft@sign:	
  5198                           ; 1 bytes @ 0x10
  5199                           
  5200                           
  5201                           ; 1 bytes @ 0x10
  5202  0030                     	ds	1
  5203  0031                     ??_I2C_ByteWrite:	
  5204  0031                     ?_I2C_BufferRead:	
  5205                           ; 1 bytes @ 0x11
  5206                           
  5207  0031                     ??_Wireless_sendData:	
  5208                           ; 1 bytes @ 0x11
  5209                           
  5210  0031                     ?___ftdiv:	
  5211                           ; 1 bytes @ 0x11
  5212                           
  5213  0031                     I2C_BufferRead@pBuffer:	
  5214                           ; 3 bytes @ 0x11
  5215                           
  5216  0031                     ___ftdiv@f2:	
  5217                           ; 2 bytes @ 0x11
  5218                           
  5219  0031                     Timeout_updateCurrentTime@var:	
  5220                           ; 3 bytes @ 0x11
  5221                           
  5222                           
  5223                           ; 4 bytes @ 0x11
  5224  0031                     	ds	1
  5225  0032                     RF_RxPayload@payload:	
  5226  0032                     Wireless_sendData@payload:	
  5227                           ; 1 bytes @ 0x12
  5228                           
  5229                           
  5230                           ; 1 bytes @ 0x12
  5231  0032                     	ds	1
  5232  0033                     ??_Wireless_checkDataReceived:	
  5233  0033                     I2C_BufferRead@ReadAddr:	
  5234                           ; 1 bytes @ 0x13
  5235                           
  5236                           
  5237                           ; 1 bytes @ 0x13
  5238  0033                     	ds	1
  5239  0034                     I2C_BufferRead@NumByteToRead:	
  5240  0034                     ___ftdiv@f1:	
  5241                           ; 2 bytes @ 0x14
  5242                           
  5243                           
  5244                           ; 3 bytes @ 0x14
  5245  0034                     	ds	1
  5246  0035                     I2C_ByteWrite@slaveAddr:	
  5247                           
  5248                           ; 1 bytes @ 0x15
  5249  0035                     	ds	1
  5250  0036                     ??_I2C_BufferRead:	
  5251  0036                     I2C_ByteWrite@data:	
  5252                           ; 1 bytes @ 0x16
  5253                           
  5254                           
  5255                           ; 2 bytes @ 0x16
  5256  0036                     	ds	1
  5257  0037                     ??___ftdiv:	
  5258  0037                     Wireless_checkDataReceived@data:	
  5259                           ; 1 bytes @ 0x17
  5260                           
  5261                           
  5262                           ; 4 bytes @ 0x17
  5263  0037                     	ds	1
  5264  0038                     I2C_ByteWrite@status:	
  5265                           
  5266                           ; 1 bytes @ 0x18
  5267  0038                     	ds	2
  5268  003A                     I2C_BufferRead@slaveAddr:	
  5269                           
  5270                           ; 1 bytes @ 0x1A
  5271  003A                     	ds	1
  5272  003B                     Wireless_checkDataReceived@channel:	
  5273  003B                     I2C_BufferRead@status:	
  5274                           ; 1 bytes @ 0x1B
  5275                           
  5276  003B                     ___ftdiv@cntr:	
  5277                           ; 1 bytes @ 0x1B
  5278                           
  5279                           
  5280                           ; 1 bytes @ 0x1B
  5281  003B                     	ds	1
  5282  003C                     ??_BMP_init:	
  5283  003C                     ?_HMC5883L_I2C_BufferRead:	
  5284                           ; 1 bytes @ 0x1C
  5285                           
  5286  003C                     HMC5883L_I2C_BufferRead@pBuffer:	
  5287                           ; 1 bytes @ 0x1C
  5288                           
  5289  003C                     ___ftdiv@f3:	
  5290                           ; 2 bytes @ 0x1C
  5291                           
  5292                           
  5293                           ; 3 bytes @ 0x1C
  5294  003C                     	ds	2
  5295  003E                     HMC5883L_I2C_BufferRead@ReadAddr:	
  5296                           
  5297                           ; 1 bytes @ 0x1E
  5298  003E                     	ds	1
  5299  003F                     BMP_init@t:	
  5300  003F                     ___ftdiv@exp:	
  5301                           ; 1 bytes @ 0x1F
  5302                           
  5303  003F                     HMC5883L_I2C_BufferRead@NumByteToRead:	
  5304                           ; 1 bytes @ 0x1F
  5305                           
  5306                           
  5307                           ; 2 bytes @ 0x1F
  5308  003F                     	ds	1
  5309  0040                     ___ftdiv@sign:	
  5310                           
  5311                           ; 1 bytes @ 0x20
  5312  0040                     	ds	1
  5313  0041                     ??_HMC5883L_I2C_BufferRead:	
  5314  0041                     ?_Sensor_getSupplyVoltage:	
  5315                           ; 1 bytes @ 0x21
  5316                           
  5317  0041                     ?___ftneg:	
  5318                           ; 3 bytes @ 0x21
  5319                           
  5320  0041                     ___ftneg@f1:	
  5321                           ; 3 bytes @ 0x21
  5322                           
  5323                           
  5324                           ; 3 bytes @ 0x21
  5325  0041                     	ds	1
  5326  0042                     HMC5883L_I2C_BufferRead@slaveAddr:	
  5327                           
  5328                           ; 1 bytes @ 0x22
  5329  0042                     	ds	1
  5330  0043                     ?_HMC5883L_ReadBits:	
  5331  0043                     HMC5883L_ReadBits@regAddr:	
  5332                           ; 1 bytes @ 0x23
  5333                           
  5334                           
  5335                           ; 1 bytes @ 0x23
  5336  0043                     	ds	1
  5337  0044                     ??_Sensor_getSupplyVoltage:	
  5338  0044                     ??___ftneg:	
  5339                           ; 1 bytes @ 0x24
  5340                           
  5341  0044                     HMC5883L_ReadBits@bitStart:	
  5342                           ; 1 bytes @ 0x24
  5343                           
  5344  0044                     Sensor_getSupplyVoltage@voltage:	
  5345                           ; 1 bytes @ 0x24
  5346                           
  5347                           
  5348                           ; 3 bytes @ 0x24
  5349  0044                     	ds	1
  5350  0045                     HMC5883L_ReadBits@length:	
  5351                           
  5352                           ; 1 bytes @ 0x25
  5353  0045                     	ds	1
  5354  0046                     HMC5883L_ReadBits@data:	
  5355                           
  5356                           ; 1 bytes @ 0x26
  5357  0046                     	ds	1
  5358  0047                     ??_HMC5883L_ReadBits:	
  5359  0047                     Sensor_getSupplyVoltage@res:	
  5360                           ; 1 bytes @ 0x27
  5361                           
  5362                           
  5363                           ; 2 bytes @ 0x27
  5364  0047                     	ds	2
  5365  0049                     ?___ftadd:	
  5366  0049                     ___ftadd@f1:	
  5367                           ; 3 bytes @ 0x29
  5368                           
  5369                           
  5370                           ; 3 bytes @ 0x29
  5371  0049                     	ds	1
  5372  004A                     HMC5883L_ReadBits@slaveAddr:	
  5373                           
  5374                           ; 1 bytes @ 0x2A
  5375  004A                     	ds	1
  5376  004B                     HMC5883L_ReadBits@mask:	
  5377                           
  5378                           ; 1 bytes @ 0x2B
  5379  004B                     	ds	1
  5380  004C                     HMC5883L_ReadBits@tmp:	
  5381  004C                     ___ftadd@f2:	
  5382                           ; 1 bytes @ 0x2C
  5383                           
  5384                           
  5385                           ; 3 bytes @ 0x2C
  5386  004C                     	ds	3
  5387  004F                     ??___ftadd:	
  5388                           
  5389                           ; 1 bytes @ 0x2F
  5390  004F                     	ds	4
  5391  0053                     ___ftadd@sign:	
  5392                           
  5393                           ; 1 bytes @ 0x33
  5394  0053                     	ds	1
  5395  0054                     ___ftadd@exp2:	
  5396                           
  5397                           ; 1 bytes @ 0x34
  5398  0054                     	ds	1
  5399  0055                     ___ftadd@exp1:	
  5400                           
  5401                           ; 1 bytes @ 0x35
  5402  0055                     	ds	1
  5403  0056                     ?___ftmul:	
  5404  0056                     ___ftmul@f1:	
  5405                           ; 3 bytes @ 0x36
  5406                           
  5407                           
  5408                           ; 3 bytes @ 0x36
  5409  0056                     	ds	3
  5410  0059                     ___ftmul@f2:	
  5411                           
  5412                           ; 3 bytes @ 0x39
  5413  0059                     	ds	3
  5414  005C                     ??___ftmul:	
  5415                           
  5416                           ; 1 bytes @ 0x3C
  5417  005C                     	ds	4
  5418  0060                     ___ftmul@exp:	
  5419                           
  5420                           ; 1 bytes @ 0x40
  5421  0060                     	ds	1
  5422  0061                     ___ftmul@f3_as_product:	
  5423                           
  5424                           ; 3 bytes @ 0x41
  5425  0061                     	ds	3
  5426  0064                     ___ftmul@cntr:	
  5427                           
  5428                           ; 1 bytes @ 0x44
  5429  0064                     	ds	1
  5430  0065                     ___ftmul@sign:	
  5431                           
  5432                           ; 1 bytes @ 0x45
  5433  0065                     	ds	1
  5434  0066                     ?___fttol:	
  5435  0066                     ___fttol@f1:	
  5436                           ; 4 bytes @ 0x46
  5437                           
  5438                           
  5439                           ; 3 bytes @ 0x46
  5440  0066                     	ds	4
  5441  006A                     ??___fttol:	
  5442                           
  5443                           ; 1 bytes @ 0x4A
  5444  006A                     	ds	4
  5445  006E                     ??_Wireless_packageData:	
  5446                           
  5447                           ; 1 bytes @ 0x4E
  5448  006E                     	ds	1
  5449                           
  5450                           	psect	maintext
  5451  0346                     __pmaintext:	
  5452 ;;
  5453 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
  5454 ;;
  5455 ;; *************** function _main *****************
  5456 ;; Defined at:
  5457 ;;		line 58 in file "main.c"
  5458 ;; Parameters:    Size  Location     Type
  5459 ;;		None
  5460 ;; Auto vars:     Size  Location     Type
  5461 ;;  doorOpenTime    4    7[BANK3 ] unsigned long 
  5462 ;;  doorClosedUp    4    1[BANK3 ] unsigned long 
  5463 ;;  dur             2    5[BANK3 ] unsigned int 
  5464 ;;  doorStatus      1   11[BANK3 ] enum E3332
  5465 ;;  prevDoorStat    1    0[BANK3 ] enum E3332
  5466 ;; Return value:  Size  Location     Type
  5467 ;;                  1    wreg      void 
  5468 ;; Registers used:
  5469 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5470 ;; Tracked objects:
  5471 ;;		On entry : B1F/0
  5472 ;;		On exit  : 0/0
  5473 ;;		Unchanged: 0/0
  5474 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5475 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5476 ;;      Locals:         0       0       0       0      12       0       0       0       0       0       0       0       
      +0       0
  5477 ;;      Temps:          0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
  5478 ;;      Totals:         0       0       2       0      12       0       0       0       0       0       0       0       
      +0       0
  5479 ;;Total ram usage:       14 bytes
  5480 ;; Hardware stack levels required when called:   11
  5481 ;; This function calls:
  5482 ;;		_BMP_init
  5483 ;;		_BMP_readTemperature
  5484 ;;		_DOOR_init
  5485 ;;		_DOOR_run
  5486 ;;		_SYSTEM_Initialize
  5487 ;;		_Sensor_peripheralSleep
  5488 ;;		_Timeout_getGlobalCounter
  5489 ;;		_Timeout_updateCurrentTime
  5490 ;;		_Wireless_init
  5491 ;;		_Wireless_packageData
  5492 ;;		_Wireless_sleep
  5493 ;;		_Wireless_wake
  5494 ;;		___lldiv
  5495 ;;		___lwdiv
  5496 ;;		_setSleepTime
  5497 ;; This function is called by:
  5498 ;;		Startup code after reset
  5499 ;; This function uses a non-reentrant model
  5500 ;;
  5501                           
  5502                           
  5503                           ;psect for function _main
  5504  0346                     _main:	
  5505                           
  5506                           ;main.c: 60: DOOR doorStatus=DOOR_CLOSED,prevDoorStatus=DOOR_CLOSED;
  5507                           
  5508                           ;incstack = 0
  5509                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  5510  0346  0023               	movlb	3	; select bank3
  5511  0347  01D7               	clrf	main@doorStatus^(0+384)
  5512  0348  01CC               	clrf	main@prevDoorStatus^(0+384)
  5513                           
  5514                           ;main.c: 61: unsigned long doorClosedUpdateCounter=0;
  5515  0349  3000               	movlw	0
  5516  034A  00D0               	movwf	(main@doorClosedUpdateCounter+3)^(0+384)
  5517  034B  3000               	movlw	0
  5518  034C  00CF               	movwf	(main@doorClosedUpdateCounter+2)^(0+384)
  5519  034D  3000               	movlw	0
  5520  034E  00CE               	movwf	(main@doorClosedUpdateCounter+1)^(0+384)
  5521  034F  3000               	movlw	0
  5522  0350  00CD               	movwf	main@doorClosedUpdateCounter^(0+384)
  5523                           
  5524                           ;main.c: 62: unsigned long doorOpenTime=0;
  5525  0351  3000               	movlw	0
  5526  0352  00D6               	movwf	(main@doorOpenTime+3)^(0+384)
  5527  0353  3000               	movlw	0
  5528  0354  00D5               	movwf	(main@doorOpenTime+2)^(0+384)
  5529  0355  3000               	movlw	0
  5530  0356  00D4               	movwf	(main@doorOpenTime+1)^(0+384)
  5531  0357  3000               	movlw	0
  5532  0358  00D3               	movwf	main@doorOpenTime^(0+384)
  5533                           
  5534                           ;main.c: 63: unsigned int dur=0;
  5535  0359  01D1               	clrf	main@dur^(0+384)
  5536  035A  01D2               	clrf	(main@dur+1)^(0+384)
  5537                           
  5538                           ;main.c: 66: SYSTEM_Initialize();
  5539  035B  3195  257E  3183   	fcall	_SYSTEM_Initialize
  5540                           
  5541                           ;main.c: 72: (INTCONbits.GIE = 1);
  5542  035E  178B               	bsf	11,7	;volatile
  5543                           
  5544                           ;main.c: 75: (INTCONbits.PEIE = 1);
  5545  035F  170B               	bsf	11,6	;volatile
  5546                           
  5547                           ;main.c: 82: do { WPUCbits.WPUC5 = 1; } while(0);
  5548  0360  0024               	movlb	4	; select bank4
  5549  0361  168E               	bsf	14,5	;volatile
  5550                           
  5551                           ;main.c: 83: _delay((unsigned long)((1000)*(8000000/4000.0)));
  5552  0362  300B               	movlw	11
  5553  0363  0021               	movlb	1	; select bank1
  5554  0364  00C8               	movwf	(??_main^(0+128)+1)
  5555  0365  3026               	movlw	38
  5556  0366  00C7               	movwf	??_main^(0+128)
  5557  0367  305D               	movlw	93
  5558  0368                     u6747:	
  5559  0368  0B89               	decfsz	9,f
  5560  0369  2B68               	goto	u6747
  5561  036A  0BC7               	decfsz	??_main^(0+128),f
  5562  036B  2B68               	goto	u6747
  5563  036C  0BC8               	decfsz	(??_main^(0+128)+1),f
  5564  036D  2B68               	goto	u6747
  5565  036E  3200               	nop2
  5566                           
  5567                           ;main.c: 84: Sensor_peripheralSleep();
  5568  036F  3193  2383  3183   	fcall	_Sensor_peripheralSleep
  5569                           
  5570                           ;main.c: 85: Wireless_init();
  5571  0372  318C  24BF  3183   	fcall	_Wireless_init
  5572                           
  5573                           ;main.c: 86: BMP_init();
  5574  0375  318B  23D1  3183   	fcall	_BMP_init
  5575                           
  5576                           ;main.c: 93: setSleepTime(10000/1000);
  5577  0378  300A               	movlw	10
  5578  0379  0020               	movlb	0	; select bank0
  5579  037A  00A1               	movwf	setSleepTime@timeSec
  5580  037B  3000               	movlw	0
  5581  037C  00A2               	movwf	setSleepTime@timeSec+1
  5582  037D  3193  238D  3183   	fcall	_setSleepTime
  5583                           
  5584                           ;main.c: 94: DOOR_init();
  5585  0380  3180  2003  3183   	fcall	_DOOR_init
  5586                           
  5587                           ;main.c: 95: do { LATCbits.LATC6 = 1; } while(0);
  5588  0383  0022               	movlb	2	; select bank2
  5589  0384  170E               	bsf	14,6	;volatile
  5590                           
  5591                           ;main.c: 96: _delay((unsigned long)((500)*(8000000/4000.0)));
  5592  0385  3006               	movlw	6
  5593  0386  0021               	movlb	1	; select bank1
  5594  0387  00C8               	movwf	(??_main^(0+128)+1)
  5595  0388  3013               	movlw	19
  5596  0389  00C7               	movwf	??_main^(0+128)
  5597  038A  30AD               	movlw	173
  5598  038B                     u6757:	
  5599  038B  0B89               	decfsz	9,f
  5600  038C  2B8B               	goto	u6757
  5601  038D  0BC7               	decfsz	??_main^(0+128),f
  5602  038E  2B8B               	goto	u6757
  5603  038F  0BC8               	decfsz	(??_main^(0+128)+1),f
  5604  0390  2B8B               	goto	u6757
  5605  0391  3200               	nop2
  5606                           
  5607                           ;main.c: 97: do { LATCbits.LATC6 = 0; } while(0);
  5608  0392  0022               	movlb	2	; select bank2
  5609  0393  130E               	bcf	14,6	;volatile
  5610                           
  5611                           ;main.c: 98: Wireless_wake();
  5612  0394  3196  2660  3183   	fcall	_Wireless_wake
  5613                           
  5614                           ;main.c: 99: Wireless_packageData(doorStatus,doorOpenTime/1000,BMP_readTemperature());
  5615  0397  3000               	movlw	0
  5616  0398  0020               	movlb	0	; select bank0
  5617  0399  00A4               	movwf	___lldiv@divisor+3
  5618  039A  3000               	movlw	0
  5619  039B  00A3               	movwf	___lldiv@divisor+2
  5620  039C  3003               	movlw	3
  5621  039D  00A2               	movwf	___lldiv@divisor+1
  5622  039E  30E8               	movlw	232
  5623  039F  00A1               	movwf	___lldiv@divisor
  5624  03A0  0023               	movlb	3	; select bank3
  5625  03A1  0856               	movf	(main@doorOpenTime+3)^(0+384),w
  5626  03A2  0020               	movlb	0	; select bank0
  5627  03A3  00A8               	movwf	___lldiv@dividend+3
  5628  03A4  0023               	movlb	3	; select bank3
  5629  03A5  0855               	movf	(main@doorOpenTime+2)^(0+384),w
  5630  03A6  0020               	movlb	0	; select bank0
  5631  03A7  00A7               	movwf	___lldiv@dividend+2
  5632  03A8  0023               	movlb	3	; select bank3
  5633  03A9  0854               	movf	(main@doorOpenTime+1)^(0+384),w
  5634  03AA  0020               	movlb	0	; select bank0
  5635  03AB  00A6               	movwf	___lldiv@dividend+1
  5636  03AC  0023               	movlb	3	; select bank3
  5637  03AD  0853               	movf	main@doorOpenTime^(0+384),w
  5638  03AE  0020               	movlb	0	; select bank0
  5639  03AF  00A5               	movwf	___lldiv@dividend
  5640  03B0  3189  2197  3183   	fcall	___lldiv
  5641  03B3  0020               	movlb	0	; select bank0
  5642  03B4  0821               	movf	?___lldiv,w
  5643  03B5  0021               	movlb	1	; select bank1
  5644  03B6  00C7               	movwf	??_main^(0+128)
  5645  03B7  0847               	movf	??_main^(0+128),w
  5646  03B8  00BA               	movwf	Wireless_packageData@openTime^(0+128)
  5647  03B9  3180  2077  3183   	fcall	_BMP_readTemperature
  5648  03BC  0021               	movlb	1	; select bank1
  5649  03BD  0826               	movf	?_BMP_readTemperature^(0+128),w
  5650  03BE  00BB               	movwf	Wireless_packageData@tempC^(0+128)
  5651  03BF  0827               	movf	(?_BMP_readTemperature+1)^(0+128),w
  5652  03C0  00BC               	movwf	(Wireless_packageData@tempC+1)^(0+128)
  5653  03C1  0828               	movf	(?_BMP_readTemperature+2)^(0+128),w
  5654  03C2  00BD               	movwf	(Wireless_packageData@tempC+2)^(0+128)
  5655  03C3  0023               	movlb	3	; select bank3
  5656  03C4  0857               	movf	main@doorStatus^(0+384),w
  5657  03C5  318F  2736  3183   	fcall	_Wireless_packageData
  5658                           
  5659                           ;main.c: 100: Wireless_sleep();
  5660  03C8  3194  24FE  3183   	fcall	_Wireless_sleep
  5661  03CB                     l6410:	
  5662                           ;main.c: 102: while (1)
  5663                           
  5664                           
  5665                           ;main.c: 103: {
  5666                           ;main.c: 104: Timeout_updateCurrentTime();
  5667  03CB  318A  229D  3183   	fcall	_Timeout_updateCurrentTime
  5668                           
  5669                           ;main.c: 105: if(PORTCbits.RC5==0)
  5670  03CE  0020               	movlb	0	; select bank0
  5671  03CF  1A8E               	btfsc	14,5	;volatile
  5672  03D0  2C28               	goto	l6426
  5673                           
  5674                           ;main.c: 106: {
  5675                           ;main.c: 108: do { LATCbits.LATC6 = 1; } while(0);
  5676  03D1  0022               	movlb	2	; select bank2
  5677  03D2  170E               	bsf	14,6	;volatile
  5678                           
  5679                           ;main.c: 109: _delay((unsigned long)((500)*(8000000/4000.0)));
  5680  03D3  3006               	movlw	6
  5681  03D4  0021               	movlb	1	; select bank1
  5682  03D5  00C8               	movwf	(??_main^(0+128)+1)
  5683  03D6  3013               	movlw	19
  5684  03D7  00C7               	movwf	??_main^(0+128)
  5685  03D8  30AD               	movlw	173
  5686  03D9                     u6767:	
  5687  03D9  0B89               	decfsz	9,f
  5688  03DA  2BD9               	goto	u6767
  5689  03DB  0BC7               	decfsz	??_main^(0+128),f
  5690  03DC  2BD9               	goto	u6767
  5691  03DD  0BC8               	decfsz	(??_main^(0+128)+1),f
  5692  03DE  2BD9               	goto	u6767
  5693  03DF  3200               	nop2
  5694                           
  5695                           ;main.c: 110: do { LATCbits.LATC6 = 0; } while(0);
  5696  03E0  0022               	movlb	2	; select bank2
  5697  03E1  130E               	bcf	14,6	;volatile
  5698                           
  5699                           ;main.c: 111: Wireless_wake();
  5700  03E2  3196  2660  3183   	fcall	_Wireless_wake
  5701                           
  5702                           ;main.c: 112: dur = Timeout_getGlobalCounter() - doorOpenTime;
  5703  03E5  0023               	movlb	3	; select bank3
  5704  03E6  0953               	comf	main@doorOpenTime^(0+384),w
  5705  03E7  0021               	movlb	1	; select bank1
  5706  03E8  00C7               	movwf	??_main^(0+128)
  5707  03E9  0023               	movlb	3	; select bank3
  5708  03EA  0954               	comf	(main@doorOpenTime+1)^(0+384),w
  5709  03EB  0021               	movlb	1	; select bank1
  5710  03EC  00C8               	movwf	(??_main^(0+128)+1)
  5711  03ED  0AC7               	incf	??_main^(0+128),f
  5712  03EE  1903               	skipnz
  5713  03EF  0AC8               	incf	(??_main^(0+128)+1),f
  5714  03F0  3188  2000  3183   	fcall	_Timeout_getGlobalCounter
  5715  03F3  0021               	movlb	1	; select bank1
  5716  03F4  0847               	movf	??_main^(0+128),w
  5717  03F5  0020               	movlb	0	; select bank0
  5718  03F6  0721               	addwf	?_Timeout_getGlobalCounter,w
  5719  03F7  0023               	movlb	3	; select bank3
  5720  03F8  00D1               	movwf	main@dur^(0+384)
  5721  03F9  0021               	movlb	1	; select bank1
  5722  03FA  0848               	movf	(??_main+1)^(0+128),w
  5723  03FB  0020               	movlb	0	; select bank0
  5724  03FC  3D22               	addwfc	?_Timeout_getGlobalCounter+1,w
  5725  03FD  0023               	movlb	3	; select bank3
  5726  03FE  00D2               	movwf	(main@dur+1)^(0+384)
  5727                           
  5728                           ;main.c: 113: Wireless_packageData(doorStatus,dur/1000,BMP_readTemperature());
  5729  03FF  30E8               	movlw	232
  5730  0400  0020               	movlb	0	; select bank0
  5731  0401  00A1               	movwf	___lwdiv@divisor
  5732  0402  3003               	movlw	3
  5733  0403  00A2               	movwf	___lwdiv@divisor+1
  5734  0404  0023               	movlb	3	; select bank3
  5735  0405  0852               	movf	(main@dur+1)^(0+384),w
  5736  0406  0020               	movlb	0	; select bank0
  5737  0407  00A4               	movwf	___lwdiv@dividend+1
  5738  0408  0023               	movlb	3	; select bank3
  5739  0409  0851               	movf	main@dur^(0+384),w
  5740  040A  0020               	movlb	0	; select bank0
  5741  040B  00A3               	movwf	___lwdiv@dividend
  5742  040C  3188  2011  3183   	fcall	___lwdiv
  5743  040F  0020               	movlb	0	; select bank0
  5744  0410  0821               	movf	?___lwdiv,w
  5745  0411  0021               	movlb	1	; select bank1
  5746  0412  00C7               	movwf	??_main^(0+128)
  5747  0413  0847               	movf	??_main^(0+128),w
  5748  0414  00BA               	movwf	Wireless_packageData@openTime^(0+128)
  5749  0415  3180  2077  3183   	fcall	_BMP_readTemperature
  5750  0418  0021               	movlb	1	; select bank1
  5751  0419  0826               	movf	?_BMP_readTemperature^(0+128),w
  5752  041A  00BB               	movwf	Wireless_packageData@tempC^(0+128)
  5753  041B  0827               	movf	(?_BMP_readTemperature+1)^(0+128),w
  5754  041C  00BC               	movwf	(Wireless_packageData@tempC+1)^(0+128)
  5755  041D  0828               	movf	(?_BMP_readTemperature+2)^(0+128),w
  5756  041E  00BD               	movwf	(Wireless_packageData@tempC+2)^(0+128)
  5757  041F  0023               	movlb	3	; select bank3
  5758  0420  0857               	movf	main@doorStatus^(0+384),w
  5759  0421  318F  2736  3183   	fcall	_Wireless_packageData
  5760                           
  5761                           ;main.c: 114: Wireless_sleep();
  5762  0424  3194  24FE  3183   	fcall	_Wireless_sleep
  5763                           
  5764                           ;main.c: 115: }
  5765  0427  2C30               	goto	l6428
  5766  0428                     l6426:	
  5767                           
  5768                           ;main.c: 116: else
  5769                           ;main.c: 117: doorStatus=DOOR_run();
  5770  0428  318B  2360  3183   	fcall	_DOOR_run
  5771  042B  0021               	movlb	1	; select bank1
  5772  042C  00C7               	movwf	??_main^(0+128)
  5773  042D  0847               	movf	??_main^(0+128),w
  5774  042E  0023               	movlb	3	; select bank3
  5775  042F  00D7               	movwf	main@doorStatus^(0+384)
  5776  0430                     l6428:	
  5777                           
  5778                           ;main.c: 120: if((doorStatus!=prevDoorStatus && doorStatus!=DOOR_ERROR))
  5779  0430  0023               	movlb	3	; select bank3
  5780  0431  0857               	movf	main@doorStatus^(0+384),w
  5781  0432  064C               	xorwf	main@prevDoorStatus^(0+384),w
  5782  0433  1903               	skipnz
  5783  0434  2CA1               	goto	l6450
  5784  0435  3002               	movlw	2
  5785  0436  0657               	xorwf	main@doorStatus^(0+384),w
  5786  0437  1903               	btfsc	3,2
  5787  0438  2CA1               	goto	l6450
  5788                           
  5789                           ;main.c: 121: {
  5790                           ;main.c: 122: Wireless_wake();
  5791  0439  3196  2660  3183   	fcall	_Wireless_wake
  5792                           
  5793                           ;main.c: 123: if(doorStatus==DOOR_OPEN)
  5794  043C  0023               	movlb	3	; select bank3
  5795  043D  0357               	decf	main@doorStatus^(0+384),w
  5796  043E  1D03               	btfss	3,2
  5797  043F  2C43               	goto	l6440
  5798                           
  5799                           ;main.c: 124: {
  5800                           ;main.c: 125: Wireless_packageData(doorStatus,0,BMP_readTemperature());
  5801  0440  0021               	movlb	1	; select bank1
  5802  0441  01BA               	clrf	Wireless_packageData@openTime^(0+128)
  5803  0442  2C72               	goto	L4
  5804  0443                     l6440:	
  5805                           ;main.c: 130: }
  5806                           
  5807                           ;main.c: 126: doorOpenTime= Timeout_getGlobalCounter();
  5808                           
  5809                           
  5810                           ;main.c: 131: else
  5811                           ;main.c: 132: {
  5812                           ;main.c: 133: dur = Timeout_getGlobalCounter() - doorOpenTime;
  5813  0443  0953               	comf	main@doorOpenTime^(0+384),w
  5814  0444  0021               	movlb	1	; select bank1
  5815  0445  00C7               	movwf	??_main^(0+128)
  5816  0446  0023               	movlb	3	; select bank3
  5817  0447  0954               	comf	(main@doorOpenTime+1)^(0+384),w
  5818  0448  0021               	movlb	1	; select bank1
  5819  0449  00C8               	movwf	(??_main^(0+128)+1)
  5820  044A  0AC7               	incf	??_main^(0+128),f
  5821  044B  1903               	skipnz
  5822  044C  0AC8               	incf	(??_main^(0+128)+1),f
  5823  044D  3188  2000  3183   	fcall	_Timeout_getGlobalCounter
  5824  0450  0021               	movlb	1	; select bank1
  5825  0451  0847               	movf	??_main^(0+128),w
  5826  0452  0020               	movlb	0	; select bank0
  5827  0453  0721               	addwf	?_Timeout_getGlobalCounter,w
  5828  0454  0023               	movlb	3	; select bank3
  5829  0455  00D1               	movwf	main@dur^(0+384)
  5830  0456  0021               	movlb	1	; select bank1
  5831  0457  0848               	movf	(??_main+1)^(0+128),w
  5832  0458  0020               	movlb	0	; select bank0
  5833  0459  3D22               	addwfc	?_Timeout_getGlobalCounter+1,w
  5834  045A  0023               	movlb	3	; select bank3
  5835  045B  00D2               	movwf	(main@dur+1)^(0+384)
  5836                           
  5837                           ;main.c: 134: Wireless_packageData(doorStatus,dur/1000,BMP_readTemperature());
  5838  045C  30E8               	movlw	232
  5839  045D  0020               	movlb	0	; select bank0
  5840  045E  00A1               	movwf	___lwdiv@divisor
  5841  045F  3003               	movlw	3
  5842  0460  00A2               	movwf	___lwdiv@divisor+1
  5843  0461  0023               	movlb	3	; select bank3
  5844  0462  0852               	movf	(main@dur+1)^(0+384),w
  5845  0463  0020               	movlb	0	; select bank0
  5846  0464  00A4               	movwf	___lwdiv@dividend+1
  5847  0465  0023               	movlb	3	; select bank3
  5848  0466  0851               	movf	main@dur^(0+384),w
  5849  0467  0020               	movlb	0	; select bank0
  5850  0468  00A3               	movwf	___lwdiv@dividend
  5851  0469  3188  2011  3183   	fcall	___lwdiv
  5852  046C  0020               	movlb	0	; select bank0
  5853  046D  0821               	movf	?___lwdiv,w
  5854  046E  0021               	movlb	1	; select bank1
  5855  046F  00C7               	movwf	??_main^(0+128)
  5856  0470  0847               	movf	??_main^(0+128),w
  5857  0471  00BA               	movwf	Wireless_packageData@openTime^(0+128)
  5858  0472                     L4:	
  5859  0472  3180  2077  3183   	fcall	_BMP_readTemperature
  5860  0475  0021               	movlb	1	; select bank1
  5861  0476  0826               	movf	?_BMP_readTemperature^(0+128),w
  5862  0477  00BB               	movwf	Wireless_packageData@tempC^(0+128)
  5863  0478  0827               	movf	(?_BMP_readTemperature+1)^(0+128),w
  5864  0479  00BC               	movwf	(Wireless_packageData@tempC+1)^(0+128)
  5865  047A  0828               	movf	(?_BMP_readTemperature+2)^(0+128),w
  5866  047B  00BD               	movwf	(Wireless_packageData@tempC+2)^(0+128)
  5867  047C  0023               	movlb	3	; select bank3
  5868  047D  0857               	movf	main@doorStatus^(0+384),w
  5869  047E  318F  2736  3183   	fcall	_Wireless_packageData
  5870                           
  5871                           ;main.c: 135: doorOpenTime = Timeout_getGlobalCounter();
  5872  0481  3188  2000  3183   	fcall	_Timeout_getGlobalCounter
  5873  0484  0020               	movlb	0	; select bank0
  5874  0485  0824               	movf	?_Timeout_getGlobalCounter+3,w
  5875  0486  0023               	movlb	3	; select bank3
  5876  0487  00D6               	movwf	(main@doorOpenTime+3)^(0+384)
  5877  0488  0020               	movlb	0	; select bank0
  5878  0489  0823               	movf	?_Timeout_getGlobalCounter+2,w
  5879  048A  0023               	movlb	3	; select bank3
  5880  048B  00D5               	movwf	(main@doorOpenTime+2)^(0+384)
  5881  048C  0020               	movlb	0	; select bank0
  5882  048D  0822               	movf	?_Timeout_getGlobalCounter+1,w
  5883  048E  0023               	movlb	3	; select bank3
  5884  048F  00D4               	movwf	(main@doorOpenTime+1)^(0+384)
  5885  0490  0020               	movlb	0	; select bank0
  5886  0491  0821               	movf	?_Timeout_getGlobalCounter,w
  5887  0492  0023               	movlb	3	; select bank3
  5888  0493  00D3               	movwf	main@doorOpenTime^(0+384)
  5889                           
  5890                           ;main.c: 136: }
  5891                           ;main.c: 137: Wireless_sleep();
  5892  0494  3194  24FE  3183   	fcall	_Wireless_sleep
  5893                           
  5894                           ;main.c: 138: doorClosedUpdateCounter=0;
  5895  0497  3000               	movlw	0
  5896  0498  0023               	movlb	3	; select bank3
  5897  0499  00D0               	movwf	(main@doorClosedUpdateCounter+3)^(0+384)
  5898  049A  3000               	movlw	0
  5899  049B  00CF               	movwf	(main@doorClosedUpdateCounter+2)^(0+384)
  5900  049C  3000               	movlw	0
  5901  049D  00CE               	movwf	(main@doorClosedUpdateCounter+1)^(0+384)
  5902  049E  3000               	movlw	0
  5903  049F  00CD               	movwf	main@doorClosedUpdateCounter^(0+384)
  5904                           
  5905                           ;main.c: 139: }
  5906  04A0  2D29               	goto	l6480
  5907  04A1                     l6450:	
  5908                           
  5909                           ;main.c: 140: else if(doorStatus==DOOR_OPEN)
  5910  04A1  0357               	decf	main@doorStatus^(0+384),w
  5911  04A2  1D03               	btfss	3,2
  5912  04A3  2CDE               	goto	l6466
  5913                           
  5914                           ;main.c: 141: {
  5915                           ;main.c: 142: dur = Timeout_getGlobalCounter()-doorOpenTime;
  5916  04A4  0953               	comf	main@doorOpenTime^(0+384),w
  5917  04A5  0021               	movlb	1	; select bank1
  5918  04A6  00C7               	movwf	??_main^(0+128)
  5919  04A7  0023               	movlb	3	; select bank3
  5920  04A8  0954               	comf	(main@doorOpenTime+1)^(0+384),w
  5921  04A9  0021               	movlb	1	; select bank1
  5922  04AA  00C8               	movwf	(??_main^(0+128)+1)
  5923  04AB  0AC7               	incf	??_main^(0+128),f
  5924  04AC  1903               	skipnz
  5925  04AD  0AC8               	incf	(??_main^(0+128)+1),f
  5926  04AE  3188  2000  3183   	fcall	_Timeout_getGlobalCounter
  5927  04B1  0021               	movlb	1	; select bank1
  5928  04B2  0847               	movf	??_main^(0+128),w
  5929  04B3  0020               	movlb	0	; select bank0
  5930  04B4  0721               	addwf	?_Timeout_getGlobalCounter,w
  5931  04B5  0023               	movlb	3	; select bank3
  5932  04B6  00D1               	movwf	main@dur^(0+384)
  5933  04B7  0021               	movlb	1	; select bank1
  5934  04B8  0848               	movf	(??_main+1)^(0+128),w
  5935  04B9  0020               	movlb	0	; select bank0
  5936  04BA  3D22               	addwfc	?_Timeout_getGlobalCounter+1,w
  5937  04BB  0023               	movlb	3	; select bank3
  5938  04BC  00D2               	movwf	(main@dur+1)^(0+384)
  5939                           
  5940                           ;main.c: 143: if(dur>=60000)
  5941  04BD  30EA               	movlw	234
  5942  04BE  0252               	subwf	(main@dur+1)^(0+384),w
  5943  04BF  3060               	movlw	96
  5944  04C0  1903               	skipnz
  5945  04C1  0251               	subwf	main@dur^(0+384),w
  5946  04C2  1C03               	skipc
  5947  04C3  2D29               	goto	l6480
  5948                           
  5949                           ;main.c: 144: {
  5950                           ;main.c: 145: Wireless_wake();
  5951  04C4  3196  2660  3183   	fcall	_Wireless_wake
  5952                           
  5953                           ;main.c: 146: Wireless_packageData(doorStatus,dur/1000,BMP_readTemperature());
  5954  04C7  30E8               	movlw	232
  5955  04C8  0020               	movlb	0	; select bank0
  5956  04C9  00A1               	movwf	___lwdiv@divisor
  5957  04CA  3003               	movlw	3
  5958  04CB  00A2               	movwf	___lwdiv@divisor+1
  5959  04CC  0023               	movlb	3	; select bank3
  5960  04CD  0852               	movf	(main@dur+1)^(0+384),w
  5961  04CE  0020               	movlb	0	; select bank0
  5962  04CF  00A4               	movwf	___lwdiv@dividend+1
  5963  04D0  0023               	movlb	3	; select bank3
  5964  04D1  0851               	movf	main@dur^(0+384),w
  5965  04D2  0020               	movlb	0	; select bank0
  5966  04D3  00A3               	movwf	___lwdiv@dividend
  5967  04D4  3188  2011  3183   	fcall	___lwdiv
  5968  04D7  0020               	movlb	0	; select bank0
  5969  04D8  0821               	movf	?___lwdiv,w
  5970  04D9  0021               	movlb	1	; select bank1
  5971  04DA  00C7               	movwf	??_main^(0+128)
  5972  04DB  0847               	movf	??_main^(0+128),w
  5973  04DC  00BA               	movwf	Wireless_packageData@openTime^(0+128)
  5974  04DD  2CFB               	goto	L5
  5975  04DE                     l6466:	
  5976                           ;main.c: 150: }
  5977                           ;main.c: 152: }
  5978                           
  5979                           ;main.c: 149: doorOpenTime=Timeout_getGlobalCounter();
  5980                           
  5981                           ;main.c: 148: doorClosedUpdateCounter=0;
  5982                           
  5983                           ;main.c: 147: Wireless_sleep();
  5984                           
  5985                           
  5986                           ;main.c: 153: else if(doorClosedUpdateCounter>=sensorUpdatePeriod)
  5987  04DE  0022               	movlb	2	; select bank2
  5988  04DF  086D               	movf	(_sensorUpdatePeriod+3)^(0+256),w
  5989  04E0  0023               	movlb	3	; select bank3
  5990  04E1  0250               	subwf	(main@doorClosedUpdateCounter+3)^(0+384),w
  5991  04E2  1D03               	skipz
  5992  04E3  2CF4               	goto	u6465
  5993  04E4  0022               	movlb	2	; select bank2
  5994  04E5  086C               	movf	(_sensorUpdatePeriod+2)^(0+256),w
  5995  04E6  0023               	movlb	3	; select bank3
  5996  04E7  024F               	subwf	(main@doorClosedUpdateCounter+2)^(0+384),w
  5997  04E8  1D03               	skipz
  5998  04E9  2CF4               	goto	u6465
  5999  04EA  0022               	movlb	2	; select bank2
  6000  04EB  086B               	movf	(_sensorUpdatePeriod+1)^(0+256),w
  6001  04EC  0023               	movlb	3	; select bank3
  6002  04ED  024E               	subwf	(main@doorClosedUpdateCounter+1)^(0+384),w
  6003  04EE  1D03               	skipz
  6004  04EF  2CF4               	goto	u6465
  6005  04F0  0022               	movlb	2	; select bank2
  6006  04F1  086A               	movf	_sensorUpdatePeriod^(0+256),w
  6007  04F2  0023               	movlb	3	; select bank3
  6008  04F3  024D               	subwf	main@doorClosedUpdateCounter^(0+384),w
  6009  04F4                     u6465:	
  6010  04F4  1C03               	skipc
  6011  04F5  2D16               	goto	l6478
  6012                           
  6013                           ;main.c: 154: {
  6014                           ;main.c: 155: Wireless_wake();
  6015  04F6  3196  2660  3183   	fcall	_Wireless_wake
  6016                           
  6017                           ;main.c: 156: Wireless_packageData(doorStatus,0,BMP_readTemperature());
  6018  04F9  0021               	movlb	1	; select bank1
  6019  04FA  01BA               	clrf	Wireless_packageData@openTime^(0+128)
  6020  04FB                     L5:	
  6021  04FB  3180  2077  3183   	fcall	_BMP_readTemperature
  6022  04FE  0021               	movlb	1	; select bank1
  6023  04FF  0826               	movf	?_BMP_readTemperature^(0+128),w
  6024  0500  00BB               	movwf	Wireless_packageData@tempC^(0+128)
  6025  0501  0827               	movf	(?_BMP_readTemperature+1)^(0+128),w
  6026  0502  00BC               	movwf	(Wireless_packageData@tempC+1)^(0+128)
  6027  0503  0828               	movf	(?_BMP_readTemperature+2)^(0+128),w
  6028  0504  00BD               	movwf	(Wireless_packageData@tempC+2)^(0+128)
  6029  0505  0023               	movlb	3	; select bank3
  6030  0506  0857               	movf	main@doorStatus^(0+384),w
  6031  0507  318F  2736  3183   	fcall	_Wireless_packageData
  6032                           
  6033                           ;main.c: 157: Wireless_sleep();
  6034  050A  3194  24FE  3183   	fcall	_Wireless_sleep
  6035                           
  6036                           ;main.c: 158: doorClosedUpdateCounter=0;
  6037  050D  3000               	movlw	0
  6038  050E  0023               	movlb	3	; select bank3
  6039  050F  00D0               	movwf	(main@doorClosedUpdateCounter+3)^(0+384)
  6040  0510  3000               	movlw	0
  6041  0511  00CF               	movwf	(main@doorClosedUpdateCounter+2)^(0+384)
  6042  0512  3000               	movlw	0
  6043  0513  00CE               	movwf	(main@doorClosedUpdateCounter+1)^(0+384)
  6044  0514  3000               	movlw	0
  6045  0515  00CD               	movwf	main@doorClosedUpdateCounter^(0+384)
  6046  0516                     l6478:	
  6047                           ;main.c: 160: }
  6048                           
  6049                           ;main.c: 159: doorOpenTime = Timeout_getGlobalCounter();
  6050                           
  6051                           
  6052                           ;main.c: 161: else
  6053                           ;main.c: 162: {
  6054                           ;main.c: 164: doorOpenTime=Timeout_getGlobalCounter();
  6055  0516  3188  2000  3183   	fcall	_Timeout_getGlobalCounter
  6056  0519  0020               	movlb	0	; select bank0
  6057  051A  0824               	movf	?_Timeout_getGlobalCounter+3,w
  6058  051B  0023               	movlb	3	; select bank3
  6059  051C  00D6               	movwf	(main@doorOpenTime+3)^(0+384)
  6060  051D  0020               	movlb	0	; select bank0
  6061  051E  0823               	movf	?_Timeout_getGlobalCounter+2,w
  6062  051F  0023               	movlb	3	; select bank3
  6063  0520  00D5               	movwf	(main@doorOpenTime+2)^(0+384)
  6064  0521  0020               	movlb	0	; select bank0
  6065  0522  0822               	movf	?_Timeout_getGlobalCounter+1,w
  6066  0523  0023               	movlb	3	; select bank3
  6067  0524  00D4               	movwf	(main@doorOpenTime+1)^(0+384)
  6068  0525  0020               	movlb	0	; select bank0
  6069  0526  0821               	movf	?_Timeout_getGlobalCounter,w
  6070  0527  0023               	movlb	3	; select bank3
  6071  0528  00D3               	movwf	main@doorOpenTime^(0+384)
  6072  0529                     l6480:	
  6073                           
  6074                           ;main.c: 165: }
  6075                           ;main.c: 167: prevDoorStatus=doorStatus;
  6076  0529  0857               	movf	main@doorStatus^(0+384),w
  6077  052A  0021               	movlb	1	; select bank1
  6078  052B  00C7               	movwf	??_main^(0+128)
  6079  052C  0847               	movf	??_main^(0+128),w
  6080  052D  0023               	movlb	3	; select bank3
  6081  052E  00CC               	movwf	main@prevDoorStatus^(0+384)
  6082                           
  6083                           ;main.c: 168: doorClosedUpdateCounter+=10000;
  6084  052F  3010               	movlw	16
  6085  0530  07CD               	addwf	main@doorClosedUpdateCounter^(0+384),f
  6086  0531  3027               	movlw	39
  6087  0532  3DCE               	addwfc	(main@doorClosedUpdateCounter+1)^(0+384),f
  6088  0533  3000               	movlw	0
  6089  0534  3DCF               	addwfc	(main@doorClosedUpdateCounter+2)^(0+384),f
  6090  0535  3000               	movlw	0
  6091  0536  3DD0               	addwfc	(main@doorClosedUpdateCounter+3)^(0+384),f
  6092  0537  0063               	sleep	;# 
  6093  0538  2BCB               	goto	l6410
  6094  0539                     __end_of_main:	
  6095                           
  6096                           	psect	text1
  6097  138D                     __ptext1:	
  6098 ;; *************** function _setSleepTime *****************
  6099 ;; Defined at:
  6100 ;;		line 7 in file "common.c"
  6101 ;; Parameters:    Size  Location     Type
  6102 ;;  timeSec         2    1[BANK0 ] unsigned short 
  6103 ;; Auto vars:     Size  Location     Type
  6104 ;;		None
  6105 ;; Return value:  Size  Location     Type
  6106 ;;                  1    wreg      void 
  6107 ;; Registers used:
  6108 ;;		wreg
  6109 ;; Tracked objects:
  6110 ;;		On entry : 0/0
  6111 ;;		On exit  : 0/0
  6112 ;;		Unchanged: 0/0
  6113 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6114 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6115 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6116 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6117 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6118 ;;Total ram usage:        2 bytes
  6119 ;; Hardware stack levels used:    1
  6120 ;; Hardware stack levels required when called:    4
  6121 ;; This function calls:
  6122 ;;		Nothing
  6123 ;; This function is called by:
  6124 ;;		_main
  6125 ;; This function uses a non-reentrant model
  6126 ;;
  6127                           
  6128                           
  6129                           ;psect for function _setSleepTime
  6130  138D                     _setSleepTime:	
  6131                           
  6132                           ;common.c: 9: timer1ReloadVal=0x6000;
  6133                           
  6134                           ;incstack = 0
  6135                           ; Regs used in _setSleepTime: [wreg]
  6136  138D  3000               	movlw	0
  6137  138E  00FC               	movwf	_timer1ReloadVal	;volatile
  6138  138F  3060               	movlw	96
  6139  1390  00FD               	movwf	_timer1ReloadVal+1	;volatile
  6140  1391  0008               	return
  6141  1392                     __end_of_setSleepTime:	
  6142                           
  6143                           	psect	text2
  6144  0811                     __ptext2:	
  6145 ;; *************** function ___lwdiv *****************
  6146 ;; Defined at:
  6147 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\lwdiv.c"
  6148 ;; Parameters:    Size  Location     Type
  6149 ;;  divisor         2    1[BANK0 ] unsigned int 
  6150 ;;  dividend        2    3[BANK0 ] unsigned int 
  6151 ;; Auto vars:     Size  Location     Type
  6152 ;;  quotient        2    7[BANK0 ] unsigned int 
  6153 ;;  counter         1    6[BANK0 ] unsigned char 
  6154 ;; Return value:  Size  Location     Type
  6155 ;;                  2    1[BANK0 ] unsigned int 
  6156 ;; Registers used:
  6157 ;;		wreg, status,2, status,0
  6158 ;; Tracked objects:
  6159 ;;		On entry : 0/0
  6160 ;;		On exit  : 0/0
  6161 ;;		Unchanged: 0/0
  6162 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6163 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6164 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6165 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6166 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6167 ;;Total ram usage:        8 bytes
  6168 ;; Hardware stack levels used:    1
  6169 ;; Hardware stack levels required when called:    4
  6170 ;; This function calls:
  6171 ;;		Nothing
  6172 ;; This function is called by:
  6173 ;;		_main
  6174 ;; This function uses a non-reentrant model
  6175 ;;
  6176                           
  6177                           
  6178                           ;psect for function ___lwdiv
  6179  0811                     ___lwdiv:	
  6180                           
  6181                           ;incstack = 0
  6182                           ; Regs used in ___lwdiv: [wreg+status,2+status,0]
  6183  0811  0020               	movlb	0	; select bank0
  6184  0812  01A7               	clrf	___lwdiv@quotient
  6185  0813  01A8               	clrf	___lwdiv@quotient+1
  6186  0814  0821               	movf	___lwdiv@divisor,w
  6187  0815  0422               	iorwf	___lwdiv@divisor+1,w
  6188  0816  1903               	btfsc	3,2
  6189  0817  2841               	goto	l6316
  6190  0818  01A6               	clrf	___lwdiv@counter
  6191  0819  0AA6               	incf	___lwdiv@counter,f
  6192  081A                     l6304:	
  6193  081A  1BA2               	btfsc	___lwdiv@divisor+1,7
  6194  081B  2826               	goto	l6306
  6195  081C  3001               	movlw	1
  6196  081D                     u6175:	
  6197  081D  35A1               	lslf	___lwdiv@divisor,f
  6198  081E  0DA2               	rlf	___lwdiv@divisor+1,f
  6199  081F  0B89               	decfsz	9,f
  6200  0820  281D               	goto	u6175
  6201  0821  3001               	movlw	1
  6202  0822  00A5               	movwf	??___lwdiv
  6203  0823  0825               	movf	??___lwdiv,w
  6204  0824  07A6               	addwf	___lwdiv@counter,f
  6205  0825  281A               	goto	l6304
  6206  0826                     l6306:	
  6207  0826  3001               	movlw	1
  6208  0827                     u6195:	
  6209  0827  35A7               	lslf	___lwdiv@quotient,f
  6210  0828  0DA8               	rlf	___lwdiv@quotient+1,f
  6211  0829  0B89               	decfsz	9,f
  6212  082A  2827               	goto	u6195
  6213  082B  0822               	movf	___lwdiv@divisor+1,w
  6214  082C  0224               	subwf	___lwdiv@dividend+1,w
  6215  082D  1D03               	skipz
  6216  082E  2831               	goto	u6205
  6217  082F  0821               	movf	___lwdiv@divisor,w
  6218  0830  0223               	subwf	___lwdiv@dividend,w
  6219  0831                     u6205:	
  6220  0831  1C03               	skipc
  6221  0832  2838               	goto	l6312
  6222  0833  0821               	movf	___lwdiv@divisor,w
  6223  0834  02A3               	subwf	___lwdiv@dividend,f
  6224  0835  0822               	movf	___lwdiv@divisor+1,w
  6225  0836  3BA4               	subwfb	___lwdiv@dividend+1,f
  6226  0837  1427               	bsf	___lwdiv@quotient,0
  6227  0838                     l6312:	
  6228  0838  3001               	movlw	1
  6229  0839                     u6215:	
  6230  0839  36A2               	lsrf	___lwdiv@divisor+1,f
  6231  083A  0CA1               	rrf	___lwdiv@divisor,f
  6232  083B  0B89               	decfsz	9,f
  6233  083C  2839               	goto	u6215
  6234  083D  3001               	movlw	1
  6235  083E  02A6               	subwf	___lwdiv@counter,f
  6236  083F  1D03               	btfss	3,2
  6237  0840  2826               	goto	l6306
  6238  0841                     l6316:	
  6239  0841  0828               	movf	___lwdiv@quotient+1,w
  6240  0842  00A2               	movwf	?___lwdiv+1
  6241  0843  0827               	movf	___lwdiv@quotient,w
  6242  0844  00A1               	movwf	?___lwdiv
  6243  0845  0008               	return
  6244  0846                     __end_of___lwdiv:	
  6245                           
  6246                           	psect	text3
  6247  0997                     __ptext3:	
  6248 ;; *************** function ___lldiv *****************
  6249 ;; Defined at:
  6250 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\lldiv.c"
  6251 ;; Parameters:    Size  Location     Type
  6252 ;;  divisor         4    1[BANK0 ] unsigned long 
  6253 ;;  dividend        4    5[BANK0 ] unsigned long 
  6254 ;; Auto vars:     Size  Location     Type
  6255 ;;  quotient        4   10[BANK0 ] unsigned long 
  6256 ;;  counter         1   14[BANK0 ] unsigned char 
  6257 ;; Return value:  Size  Location     Type
  6258 ;;                  4    1[BANK0 ] unsigned long 
  6259 ;; Registers used:
  6260 ;;		wreg, status,2, status,0
  6261 ;; Tracked objects:
  6262 ;;		On entry : 0/0
  6263 ;;		On exit  : 0/0
  6264 ;;		Unchanged: 0/0
  6265 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6266 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6267 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6268 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6269 ;;      Totals:         0      14       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6270 ;;Total ram usage:       14 bytes
  6271 ;; Hardware stack levels used:    1
  6272 ;; Hardware stack levels required when called:    4
  6273 ;; This function calls:
  6274 ;;		Nothing
  6275 ;; This function is called by:
  6276 ;;		_main
  6277 ;; This function uses a non-reentrant model
  6278 ;;
  6279                           
  6280                           
  6281                           ;psect for function ___lldiv
  6282  0997                     ___lldiv:	
  6283                           
  6284                           ;incstack = 0
  6285                           ; Regs used in ___lldiv: [wreg+status,2+status,0]
  6286  0997  3000               	movlw	0
  6287  0998  0020               	movlb	0	; select bank0
  6288  0999  00AD               	movwf	___lldiv@quotient+3
  6289  099A  3000               	movlw	0
  6290  099B  00AC               	movwf	___lldiv@quotient+2
  6291  099C  3000               	movlw	0
  6292  099D  00AB               	movwf	___lldiv@quotient+1
  6293  099E  3000               	movlw	0
  6294  099F  00AA               	movwf	___lldiv@quotient
  6295  09A0  0824               	movf	___lldiv@divisor+3,w
  6296  09A1  0423               	iorwf	___lldiv@divisor+2,w
  6297  09A2  0422               	iorwf	___lldiv@divisor+1,w
  6298  09A3  0421               	iorwf	___lldiv@divisor,w
  6299  09A4  1903               	skipnz
  6300  09A5  29E1               	goto	l6290
  6301  09A6  01AE               	clrf	___lldiv@counter
  6302  09A7  0AAE               	incf	___lldiv@counter,f
  6303  09A8                     l6276:	
  6304  09A8  1BA4               	btfsc	___lldiv@divisor+3,7
  6305  09A9  29B6               	goto	l6278
  6306  09AA  3001               	movlw	1
  6307  09AB                     u6105:	
  6308  09AB  35A1               	lslf	___lldiv@divisor,f
  6309  09AC  0DA2               	rlf	___lldiv@divisor+1,f
  6310  09AD  0DA3               	rlf	___lldiv@divisor+2,f
  6311  09AE  0DA4               	rlf	___lldiv@divisor+3,f
  6312  09AF  0B89               	decfsz	9,f
  6313  09B0  29AB               	goto	u6105
  6314  09B1  3001               	movlw	1
  6315  09B2  00A9               	movwf	??___lldiv
  6316  09B3  0829               	movf	??___lldiv,w
  6317  09B4  07AE               	addwf	___lldiv@counter,f
  6318  09B5  29A8               	goto	l6276
  6319  09B6                     l6278:	
  6320  09B6  3001               	movlw	1
  6321  09B7                     u6125:	
  6322  09B7  35AA               	lslf	___lldiv@quotient,f
  6323  09B8  0DAB               	rlf	___lldiv@quotient+1,f
  6324  09B9  0DAC               	rlf	___lldiv@quotient+2,f
  6325  09BA  0DAD               	rlf	___lldiv@quotient+3,f
  6326  09BB  0B89               	decfsz	9,f
  6327  09BC  29B7               	goto	u6125
  6328  09BD  0824               	movf	___lldiv@divisor+3,w
  6329  09BE  0228               	subwf	___lldiv@dividend+3,w
  6330  09BF  1D03               	skipz
  6331  09C0  29CB               	goto	u6135
  6332  09C1  0823               	movf	___lldiv@divisor+2,w
  6333  09C2  0227               	subwf	___lldiv@dividend+2,w
  6334  09C3  1D03               	skipz
  6335  09C4  29CB               	goto	u6135
  6336  09C5  0822               	movf	___lldiv@divisor+1,w
  6337  09C6  0226               	subwf	___lldiv@dividend+1,w
  6338  09C7  1D03               	skipz
  6339  09C8  29CB               	goto	u6135
  6340  09C9  0821               	movf	___lldiv@divisor,w
  6341  09CA  0225               	subwf	___lldiv@dividend,w
  6342  09CB                     u6135:	
  6343  09CB  1C03               	skipc
  6344  09CC  29D6               	goto	l6286
  6345  09CD  0821               	movf	___lldiv@divisor,w
  6346  09CE  02A5               	subwf	___lldiv@dividend,f
  6347  09CF  0822               	movf	___lldiv@divisor+1,w
  6348  09D0  3BA6               	subwfb	___lldiv@dividend+1,f
  6349  09D1  0823               	movf	___lldiv@divisor+2,w
  6350  09D2  3BA7               	subwfb	___lldiv@dividend+2,f
  6351  09D3  0824               	movf	___lldiv@divisor+3,w
  6352  09D4  3BA8               	subwfb	___lldiv@dividend+3,f
  6353  09D5  142A               	bsf	___lldiv@quotient,0
  6354  09D6                     l6286:	
  6355  09D6  3001               	movlw	1
  6356  09D7                     u6145:	
  6357  09D7  36A4               	lsrf	___lldiv@divisor+3,f
  6358  09D8  0CA3               	rrf	___lldiv@divisor+2,f
  6359  09D9  0CA2               	rrf	___lldiv@divisor+1,f
  6360  09DA  0CA1               	rrf	___lldiv@divisor,f
  6361  09DB  0B89               	decfsz	9,f
  6362  09DC  29D7               	goto	u6145
  6363  09DD  3001               	movlw	1
  6364  09DE  02AE               	subwf	___lldiv@counter,f
  6365  09DF  1D03               	btfss	3,2
  6366  09E0  29B6               	goto	l6278
  6367  09E1                     l6290:	
  6368  09E1  082D               	movf	___lldiv@quotient+3,w
  6369  09E2  00A4               	movwf	?___lldiv+3
  6370  09E3  082C               	movf	___lldiv@quotient+2,w
  6371  09E4  00A3               	movwf	?___lldiv+2
  6372  09E5  082B               	movf	___lldiv@quotient+1,w
  6373  09E6  00A2               	movwf	?___lldiv+1
  6374  09E7  082A               	movf	___lldiv@quotient,w
  6375  09E8  00A1               	movwf	?___lldiv
  6376  09E9  0008               	return
  6377  09EA                     __end_of___lldiv:	
  6378                           
  6379                           	psect	text4
  6380  1660                     __ptext4:	
  6381 ;; *************** function _Wireless_wake *****************
  6382 ;; Defined at:
  6383 ;;		line 103 in file "wireless.c"
  6384 ;; Parameters:    Size  Location     Type
  6385 ;;		None
  6386 ;; Auto vars:     Size  Location     Type
  6387 ;;  reg             1   16[BANK0 ] unsigned char 
  6388 ;; Return value:  Size  Location     Type
  6389 ;;                  1    wreg      void 
  6390 ;; Registers used:
  6391 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6392 ;; Tracked objects:
  6393 ;;		On entry : 0/0
  6394 ;;		On exit  : 0/0
  6395 ;;		Unchanged: 0/0
  6396 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6397 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6398 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6399 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6400 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6401 ;;Total ram usage:        2 bytes
  6402 ;; Hardware stack levels used:    1
  6403 ;; Hardware stack levels required when called:    8
  6404 ;; This function calls:
  6405 ;;		_RF_ReadRegisterData
  6406 ;;		_RF_WriteRegister
  6407 ;; This function is called by:
  6408 ;;		_main
  6409 ;; This function uses a non-reentrant model
  6410 ;;
  6411                           
  6412                           
  6413                           ;psect for function _Wireless_wake
  6414  1660                     _Wireless_wake:	
  6415                           
  6416                           ;wireless.c: 105: u8 reg;
  6417                           ;wireless.c: 107: RF_ReadRegisterData(0x00 , &reg, 1);
  6418                           
  6419                           ;incstack = 0
  6420                           ; Regs used in _Wireless_wake: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  6421  1660  3030               	movlw	(low (Wireless_wake@reg| 0))& (0+255)
  6422  1661  0020               	movlb	0	; select bank0
  6423  1662  00AF               	movwf	??_Wireless_wake
  6424  1663  082F               	movf	??_Wireless_wake,w
  6425  1664  00AA               	movwf	RF_ReadRegisterData@buf
  6426  1665  01AB               	clrf	RF_ReadRegisterData@bufSize
  6427  1666  0AAB               	incf	RF_ReadRegisterData@bufSize,f
  6428  1667  3000               	movlw	0
  6429  1668  3196  2643  3196   	fcall	_RF_ReadRegisterData
  6430                           
  6431                           ;wireless.c: 108: reg|=0b00000010;
  6432  166B  0020               	movlb	0	; select bank0
  6433  166C  14B0               	bsf	Wireless_wake@reg,1
  6434                           
  6435                           ;wireless.c: 109: RF_WriteRegister(0x00,reg);
  6436  166D  0830               	movf	Wireless_wake@reg,w
  6437  166E  00AF               	movwf	??_Wireless_wake
  6438  166F  082F               	movf	??_Wireless_wake,w
  6439  1670  00A3               	movwf	RF_WriteRegister@val
  6440  1671  3000               	movlw	0
  6441  1672  3194  24BB  3196   	fcall	_RF_WriteRegister
  6442                           
  6443                           ;wireless.c: 110: _delay((unsigned long)((2)*(8000000/4000.0)));
  6444  1675  3006               	movlw	6
  6445  1676  0020               	movlb	0	; select bank0
  6446  1677  00AF               	movwf	??_Wireless_wake
  6447  1678  3030               	movlw	48
  6448  1679                     u6777:	
  6449  1679  0B89               	decfsz	9,f
  6450  167A  2E79               	goto	u6777
  6451  167B  0BAF               	decfsz	??_Wireless_wake,f
  6452  167C  2E79               	goto	u6777
  6453  167D  0000               	nop
  6454  167E  0008               	return
  6455  167F                     __end_of_Wireless_wake:	
  6456                           
  6457                           	psect	text5
  6458  14FE                     __ptext5:	
  6459 ;; *************** function _Wireless_sleep *****************
  6460 ;; Defined at:
  6461 ;;		line 93 in file "wireless.c"
  6462 ;; Parameters:    Size  Location     Type
  6463 ;;		None
  6464 ;; Auto vars:     Size  Location     Type
  6465 ;;  reg             1   16[BANK0 ] unsigned char 
  6466 ;; Return value:  Size  Location     Type
  6467 ;;                  1    wreg      void 
  6468 ;; Registers used:
  6469 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6470 ;; Tracked objects:
  6471 ;;		On entry : 0/0
  6472 ;;		On exit  : 0/0
  6473 ;;		Unchanged: 0/0
  6474 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6475 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6476 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6477 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6478 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6479 ;;Total ram usage:        2 bytes
  6480 ;; Hardware stack levels used:    1
  6481 ;; Hardware stack levels required when called:    8
  6482 ;; This function calls:
  6483 ;;		_RF_ReadRegisterData
  6484 ;;		_RF_WriteRegister
  6485 ;; This function is called by:
  6486 ;;		_main
  6487 ;; This function uses a non-reentrant model
  6488 ;;
  6489                           
  6490                           
  6491                           ;psect for function _Wireless_sleep
  6492  14FE                     _Wireless_sleep:	
  6493                           
  6494                           ;wireless.c: 95: u8 reg;
  6495                           ;wireless.c: 97: RF_ReadRegisterData(0x00 , &reg, 1);
  6496                           
  6497                           ;incstack = 0
  6498                           ; Regs used in _Wireless_sleep: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  6499  14FE  3030               	movlw	(low (Wireless_sleep@reg| 0))& (0+255)
  6500  14FF  0020               	movlb	0	; select bank0
  6501  1500  00AF               	movwf	??_Wireless_sleep
  6502  1501  082F               	movf	??_Wireless_sleep,w
  6503  1502  00AA               	movwf	RF_ReadRegisterData@buf
  6504  1503  01AB               	clrf	RF_ReadRegisterData@bufSize
  6505  1504  0AAB               	incf	RF_ReadRegisterData@bufSize,f
  6506  1505  3000               	movlw	0
  6507  1506  3196  2643  3194   	fcall	_RF_ReadRegisterData
  6508                           
  6509                           ;wireless.c: 98: reg&=0b11111101;
  6510  1509  30FD               	movlw	253
  6511  150A  0020               	movlb	0	; select bank0
  6512  150B  00AF               	movwf	??_Wireless_sleep
  6513  150C  082F               	movf	??_Wireless_sleep,w
  6514  150D  05B0               	andwf	Wireless_sleep@reg,f
  6515                           
  6516                           ;wireless.c: 99: RF_WriteRegister(0x00,reg);
  6517  150E  0830               	movf	Wireless_sleep@reg,w
  6518  150F  00AF               	movwf	??_Wireless_sleep
  6519  1510  082F               	movf	??_Wireless_sleep,w
  6520  1511  00A3               	movwf	RF_WriteRegister@val
  6521  1512  3000               	movlw	0
  6522  1513  3194  24BB         	fcall	_RF_WriteRegister
  6523  1515  0008               	return
  6524  1516                     __end_of_Wireless_sleep:	
  6525                           
  6526                           	psect	text6
  6527  0F36                     __ptext6:	
  6528 ;; *************** function _Wireless_packageData *****************
  6529 ;; Defined at:
  6530 ;;		line 59 in file "wireless.c"
  6531 ;; Parameters:    Size  Location     Type
  6532 ;;  status          1    wreg     enum E3332
  6533 ;;  openTime        1   26[BANK1 ] unsigned char 
  6534 ;;  tempC           3   27[BANK1 ] float 
  6535 ;; Auto vars:     Size  Location     Type
  6536 ;;  status          1   36[BANK1 ] enum E3332
  6537 ;;  data            5   30[BANK1 ] unsigned char [5]
  6538 ;;  t1              2   37[BANK1 ] unsigned int 
  6539 ;;  var             1   35[BANK1 ] unsigned char 
  6540 ;; Return value:  Size  Location     Type
  6541 ;;                  1    wreg      void 
  6542 ;; Registers used:
  6543 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6544 ;; Tracked objects:
  6545 ;;		On entry : 0/0
  6546 ;;		On exit  : 0/0
  6547 ;;		Unchanged: 0/0
  6548 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6549 ;;      Params:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0
  6550 ;;      Locals:         0       0       9       0       0       0       0       0       0       0       0       0       
      +0       0
  6551 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6552 ;;      Totals:         0       1      13       0       0       0       0       0       0       0       0       0       
      +0       0
  6553 ;;Total ram usage:       14 bytes
  6554 ;; Hardware stack levels used:    1
  6555 ;; Hardware stack levels required when called:   10
  6556 ;; This function calls:
  6557 ;;		_Diag_getSensorHealth
  6558 ;;		_Sensor_getSupplyVoltage
  6559 ;;		_Wireless_checkDataReceived
  6560 ;;		_Wireless_sendData
  6561 ;;		___ftadd
  6562 ;;		___ftmul
  6563 ;;		___fttol
  6564 ;; This function is called by:
  6565 ;;		_main
  6566 ;; This function uses a non-reentrant model
  6567 ;;
  6568                           
  6569                           
  6570                           ;psect for function _Wireless_packageData
  6571  0F36                     _Wireless_packageData:	
  6572                           
  6573                           ;incstack = 0
  6574                           ; Regs used in _Wireless_packageData: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6575                           ;Wireless_packageData@status stored from wreg
  6576  0F36  0021               	movlb	1	; select bank1
  6577  0F37  00C4               	movwf	Wireless_packageData@status^(0+128)
  6578                           
  6579                           ;wireless.c: 69: tempC+=50;
  6580  0F38  3000               	movlw	0
  6581  0F39  0020               	movlb	0	; select bank0
  6582  0F3A  00C9               	movwf	___ftadd@f1
  6583  0F3B  3048               	movlw	72
  6584  0F3C  00CA               	movwf	___ftadd@f1+1
  6585  0F3D  3042               	movlw	66
  6586  0F3E  00CB               	movwf	___ftadd@f1+2
  6587  0F3F  0021               	movlb	1	; select bank1
  6588  0F40  083B               	movf	Wireless_packageData@tempC^(0+128),w
  6589  0F41  0020               	movlb	0	; select bank0
  6590  0F42  00CC               	movwf	___ftadd@f2
  6591  0F43  0021               	movlb	1	; select bank1
  6592  0F44  083C               	movf	(Wireless_packageData@tempC+1)^(0+128),w
  6593  0F45  0020               	movlb	0	; select bank0
  6594  0F46  00CD               	movwf	___ftadd@f2+1
  6595  0F47  0021               	movlb	1	; select bank1
  6596  0F48  083D               	movf	(Wireless_packageData@tempC+2)^(0+128),w
  6597  0F49  0020               	movlb	0	; select bank0
  6598  0F4A  00CE               	movwf	___ftadd@f2+2
  6599  0F4B  3186  2682  318F   	fcall	___ftadd
  6600  0F4E  0020               	movlb	0	; select bank0
  6601  0F4F  0849               	movf	?___ftadd,w
  6602  0F50  0021               	movlb	1	; select bank1
  6603  0F51  00BB               	movwf	Wireless_packageData@tempC^(0+128)
  6604  0F52  0020               	movlb	0	; select bank0
  6605  0F53  084A               	movf	?___ftadd+1,w
  6606  0F54  0021               	movlb	1	; select bank1
  6607  0F55  00BC               	movwf	(Wireless_packageData@tempC+1)^(0+128)
  6608  0F56  0020               	movlb	0	; select bank0
  6609  0F57  084B               	movf	?___ftadd+2,w
  6610  0F58  0021               	movlb	1	; select bank1
  6611  0F59  00BD               	movwf	(Wireless_packageData@tempC+2)^(0+128)
  6612                           
  6613                           ;wireless.c: 70: tempC*=10;
  6614  0F5A  3000               	movlw	0
  6615  0F5B  0020               	movlb	0	; select bank0
  6616  0F5C  00D6               	movwf	___ftmul@f1
  6617  0F5D  3020               	movlw	32
  6618  0F5E  00D7               	movwf	___ftmul@f1+1
  6619  0F5F  3041               	movlw	65
  6620  0F60  00D8               	movwf	___ftmul@f1+2
  6621  0F61  0021               	movlb	1	; select bank1
  6622  0F62  083B               	movf	Wireless_packageData@tempC^(0+128),w
  6623  0F63  0020               	movlb	0	; select bank0
  6624  0F64  00D9               	movwf	___ftmul@f2
  6625  0F65  0021               	movlb	1	; select bank1
  6626  0F66  083C               	movf	(Wireless_packageData@tempC+1)^(0+128),w
  6627  0F67  0020               	movlb	0	; select bank0
  6628  0F68  00DA               	movwf	___ftmul@f2+1
  6629  0F69  0021               	movlb	1	; select bank1
  6630  0F6A  083D               	movf	(Wireless_packageData@tempC+2)^(0+128),w
  6631  0F6B  0020               	movlb	0	; select bank0
  6632  0F6C  00DB               	movwf	___ftmul@f2+2
  6633  0F6D  318E  2682  318F   	fcall	___ftmul
  6634  0F70  0020               	movlb	0	; select bank0
  6635  0F71  0856               	movf	?___ftmul,w
  6636  0F72  0021               	movlb	1	; select bank1
  6637  0F73  00BB               	movwf	Wireless_packageData@tempC^(0+128)
  6638  0F74  0020               	movlb	0	; select bank0
  6639  0F75  0857               	movf	?___ftmul+1,w
  6640  0F76  0021               	movlb	1	; select bank1
  6641  0F77  00BC               	movwf	(Wireless_packageData@tempC+1)^(0+128)
  6642  0F78  0020               	movlb	0	; select bank0
  6643  0F79  0858               	movf	?___ftmul+2,w
  6644  0F7A  0021               	movlb	1	; select bank1
  6645  0F7B  00BD               	movwf	(Wireless_packageData@tempC+2)^(0+128)
  6646                           
  6647                           ;wireless.c: 72: unsigned int t1 = tempC;
  6648  0F7C  083B               	movf	Wireless_packageData@tempC^(0+128),w
  6649  0F7D  0020               	movlb	0	; select bank0
  6650  0F7E  00E6               	movwf	___fttol@f1
  6651  0F7F  0021               	movlb	1	; select bank1
  6652  0F80  083C               	movf	(Wireless_packageData@tempC+1)^(0+128),w
  6653  0F81  0020               	movlb	0	; select bank0
  6654  0F82  00E7               	movwf	___fttol@f1+1
  6655  0F83  0021               	movlb	1	; select bank1
  6656  0F84  083D               	movf	(Wireless_packageData@tempC+2)^(0+128),w
  6657  0F85  0020               	movlb	0	; select bank0
  6658  0F86  00E8               	movwf	___fttol@f1+2
  6659  0F87  318D  253A  318F   	fcall	___fttol
  6660  0F8A  0020               	movlb	0	; select bank0
  6661  0F8B  0867               	movf	?___fttol+1,w
  6662  0F8C  0021               	movlb	1	; select bank1
  6663  0F8D  00C6               	movwf	(Wireless_packageData@t1+1)^(0+128)
  6664  0F8E  0020               	movlb	0	; select bank0
  6665  0F8F  0866               	movf	?___fttol,w
  6666  0F90  0021               	movlb	1	; select bank1
  6667  0F91  00C5               	movwf	Wireless_packageData@t1^(0+128)
  6668                           
  6669                           ;wireless.c: 73: char var;
  6670                           ;wireless.c: 74: char data[5];
  6671                           ;wireless.c: 76: status<<=4;
  6672  0F92  0EC4               	swapf	Wireless_packageData@status^(0+128),f
  6673  0F93  30F0               	movlw	240
  6674  0F94  05C4               	andwf	Wireless_packageData@status^(0+128),f
  6675                           
  6676                           ;wireless.c: 77: var=Diag_getSensorHealth();
  6677  0F95  3194  2481  318F   	fcall	_Diag_getSensorHealth
  6678  0F98  0020               	movlb	0	; select bank0
  6679  0F99  00EE               	movwf	??_Wireless_packageData
  6680  0F9A  086E               	movf	??_Wireless_packageData,w
  6681  0F9B  0021               	movlb	1	; select bank1
  6682  0F9C  00C3               	movwf	Wireless_packageData@var^(0+128)
  6683                           
  6684                           ;wireless.c: 78: status|=var;
  6685  0F9D  0843               	movf	Wireless_packageData@var^(0+128),w
  6686  0F9E  0020               	movlb	0	; select bank0
  6687  0F9F  00EE               	movwf	??_Wireless_packageData
  6688  0FA0  086E               	movf	??_Wireless_packageData,w
  6689  0FA1  0021               	movlb	1	; select bank1
  6690  0FA2  04C4               	iorwf	Wireless_packageData@status^(0+128),f
  6691                           
  6692                           ;wireless.c: 81: data[0]=status;
  6693  0FA3  0844               	movf	Wireless_packageData@status^(0+128),w
  6694  0FA4  0020               	movlb	0	; select bank0
  6695  0FA5  00EE               	movwf	??_Wireless_packageData
  6696  0FA6  086E               	movf	??_Wireless_packageData,w
  6697  0FA7  0021               	movlb	1	; select bank1
  6698  0FA8  00BE               	movwf	Wireless_packageData@data^(0+128)
  6699                           
  6700                           ;wireless.c: 82: data[1]=openTime;
  6701  0FA9  083A               	movf	Wireless_packageData@openTime^(0+128),w
  6702  0FAA  0020               	movlb	0	; select bank0
  6703  0FAB  00EE               	movwf	??_Wireless_packageData
  6704  0FAC  086E               	movf	??_Wireless_packageData,w
  6705  0FAD  0021               	movlb	1	; select bank1
  6706  0FAE  00BF               	movwf	(Wireless_packageData@data^(0+128)+1)
  6707                           
  6708                           ;wireless.c: 83: data[2]=t1>>8;
  6709  0FAF  0846               	movf	(Wireless_packageData@t1+1)^(0+128),w
  6710  0FB0  0020               	movlb	0	; select bank0
  6711  0FB1  00EE               	movwf	??_Wireless_packageData
  6712  0FB2  086E               	movf	??_Wireless_packageData,w
  6713  0FB3  0021               	movlb	1	; select bank1
  6714  0FB4  00C0               	movwf	(Wireless_packageData@data^(0+128)+2)
  6715                           
  6716                           ;wireless.c: 84: data[3]= t1 & 0xFF;
  6717  0FB5  0845               	movf	Wireless_packageData@t1^(0+128),w
  6718  0FB6  0020               	movlb	0	; select bank0
  6719  0FB7  00EE               	movwf	??_Wireless_packageData
  6720  0FB8  086E               	movf	??_Wireless_packageData,w
  6721  0FB9  0021               	movlb	1	; select bank1
  6722  0FBA  00C1               	movwf	(Wireless_packageData@data^(0+128)+3)
  6723                           
  6724                           ;wireless.c: 85: t1=(float)(Sensor_getSupplyVoltage()-1)*100;
  6725  0FBB  3188  20BF  318F   	fcall	_Sensor_getSupplyVoltage
  6726  0FBE  0020               	movlb	0	; select bank0
  6727  0FBF  0841               	movf	?_Sensor_getSupplyVoltage,w
  6728  0FC0  00CC               	movwf	___ftadd@f2
  6729  0FC1  0842               	movf	?_Sensor_getSupplyVoltage+1,w
  6730  0FC2  00CD               	movwf	___ftadd@f2+1
  6731  0FC3  0843               	movf	?_Sensor_getSupplyVoltage+2,w
  6732  0FC4  00CE               	movwf	___ftadd@f2+2
  6733  0FC5  3000               	movlw	0
  6734  0FC6  00C9               	movwf	___ftadd@f1
  6735  0FC7  3080               	movlw	128
  6736  0FC8  00CA               	movwf	___ftadd@f1+1
  6737  0FC9  30BF               	movlw	191
  6738  0FCA  00CB               	movwf	___ftadd@f1+2
  6739  0FCB  3186  2682  318F   	fcall	___ftadd
  6740  0FCE  0020               	movlb	0	; select bank0
  6741  0FCF  0849               	movf	?___ftadd,w
  6742  0FD0  00D9               	movwf	___ftmul@f2
  6743  0FD1  084A               	movf	?___ftadd+1,w
  6744  0FD2  00DA               	movwf	___ftmul@f2+1
  6745  0FD3  084B               	movf	?___ftadd+2,w
  6746  0FD4  00DB               	movwf	___ftmul@f2+2
  6747  0FD5  3000               	movlw	0
  6748  0FD6  00D6               	movwf	___ftmul@f1
  6749  0FD7  30C8               	movlw	200
  6750  0FD8  00D7               	movwf	___ftmul@f1+1
  6751  0FD9  3042               	movlw	66
  6752  0FDA  00D8               	movwf	___ftmul@f1+2
  6753  0FDB  318E  2682  318F   	fcall	___ftmul
  6754  0FDE  0020               	movlb	0	; select bank0
  6755  0FDF  0856               	movf	?___ftmul,w
  6756  0FE0  00E6               	movwf	___fttol@f1
  6757  0FE1  0857               	movf	?___ftmul+1,w
  6758  0FE2  00E7               	movwf	___fttol@f1+1
  6759  0FE3  0858               	movf	?___ftmul+2,w
  6760  0FE4  00E8               	movwf	___fttol@f1+2
  6761  0FE5  318D  253A  318F   	fcall	___fttol
  6762  0FE8  0020               	movlb	0	; select bank0
  6763  0FE9  0867               	movf	?___fttol+1,w
  6764  0FEA  0021               	movlb	1	; select bank1
  6765  0FEB  00C6               	movwf	(Wireless_packageData@t1+1)^(0+128)
  6766  0FEC  0020               	movlb	0	; select bank0
  6767  0FED  0866               	movf	?___fttol,w
  6768  0FEE  0021               	movlb	1	; select bank1
  6769  0FEF  00C5               	movwf	Wireless_packageData@t1^(0+128)
  6770                           
  6771                           ;wireless.c: 86: data[4]=t1;
  6772  0FF0  0845               	movf	Wireless_packageData@t1^(0+128),w
  6773  0FF1  0020               	movlb	0	; select bank0
  6774  0FF2  00EE               	movwf	??_Wireless_packageData
  6775  0FF3  086E               	movf	??_Wireless_packageData,w
  6776  0FF4  0021               	movlb	1	; select bank1
  6777  0FF5  00C2               	movwf	(Wireless_packageData@data^(0+128)+4)
  6778                           
  6779                           ;wireless.c: 87: Wireless_sendData(data);
  6780  0FF6  30BE               	movlw	(low (Wireless_packageData@data| 0))& (0+255)
  6781  0FF7  3194  242F  318F   	fcall	_Wireless_sendData
  6782  0FFA                     l1080:	
  6783                           ;wireless.c: 88: while(PORTCbits.RC3);
  6784                           
  6785  0FFA  0020               	movlb	0	; select bank0
  6786  0FFB  198E               	btfsc	14,3	;volatile
  6787  0FFC  2FFA               	goto	l1080
  6788                           
  6789                           ;wireless.c: 89: Wireless_checkDataReceived();
  6790  0FFD  318C  2445         	fcall	_Wireless_checkDataReceived
  6791  0FFF  0008               	return
  6792  1000                     __end_of_Wireless_packageData:	
  6793                           
  6794                           	psect	text7
  6795  142F                     __ptext7:	
  6796 ;; *************** function _Wireless_sendData *****************
  6797 ;; Defined at:
  6798 ;;		line 51 in file "wireless.c"
  6799 ;; Parameters:    Size  Location     Type
  6800 ;;  payload         1    wreg     PTR unsigned char 
  6801 ;;		 -> Wireless_packageData@data(5), 
  6802 ;; Auto vars:     Size  Location     Type
  6803 ;;  payload         1   18[BANK0 ] PTR unsigned char 
  6804 ;;		 -> Wireless_packageData@data(5), 
  6805 ;; Return value:  Size  Location     Type
  6806 ;;                  1    wreg      void 
  6807 ;; Registers used:
  6808 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  6809 ;; Tracked objects:
  6810 ;;		On entry : 0/0
  6811 ;;		On exit  : 0/0
  6812 ;;		Unchanged: 0/0
  6813 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6814 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6815 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6816 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6817 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6818 ;;Total ram usage:        2 bytes
  6819 ;; Hardware stack levels used:    1
  6820 ;; Hardware stack levels required when called:    9
  6821 ;; This function calls:
  6822 ;;		_RF_ResetStatusIRQ
  6823 ;;		_RF_TxPayload
  6824 ;; This function is called by:
  6825 ;;		_Wireless_packageData
  6826 ;; This function uses a non-reentrant model
  6827 ;;
  6828                           
  6829                           
  6830                           ;psect for function _Wireless_sendData
  6831  142F                     _Wireless_sendData:	
  6832                           
  6833                           ;incstack = 0
  6834                           ; Regs used in _Wireless_sendData: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  6835                           ;Wireless_sendData@payload stored from wreg
  6836  142F  0020               	movlb	0	; select bank0
  6837  1430  00B2               	movwf	Wireless_sendData@payload
  6838                           
  6839                           ;wireless.c: 54: RF_ResetStatusIRQ(0x40|0x20|0x10);
  6840  1431  3070               	movlw	112
  6841  1432  3196  267F  3194   	fcall	_RF_ResetStatusIRQ
  6842                           
  6843                           ;wireless.c: 55: RF_TxPayload(payload, 5);
  6844  1435  3005               	movlw	5
  6845  1436  0020               	movlb	0	; select bank0
  6846  1437  00B1               	movwf	??_Wireless_sendData
  6847  1438  0831               	movf	??_Wireless_sendData,w
  6848  1439  00AE               	movwf	RF_TxPayload@payloadSize
  6849  143A  0832               	movf	Wireless_sendData@payload,w
  6850  143B  3195  25B4         	fcall	_RF_TxPayload
  6851  143D  0008               	return
  6852  143E                     __end_of_Wireless_sendData:	
  6853                           
  6854                           	psect	text8
  6855  15B4                     __ptext8:	
  6856 ;; *************** function _RF_TxPayload *****************
  6857 ;; Defined at:
  6858 ;;		line 173 in file "nrf24.c"
  6859 ;; Parameters:    Size  Location     Type
  6860 ;;  payload         1    wreg     PTR unsigned char 
  6861 ;;		 -> Wireless_packageData@data(5), 
  6862 ;;  payloadSize     1   14[BANK0 ] unsigned char 
  6863 ;; Auto vars:     Size  Location     Type
  6864 ;;  payload         1   16[BANK0 ] PTR unsigned char 
  6865 ;;		 -> Wireless_packageData@data(5), 
  6866 ;; Return value:  Size  Location     Type
  6867 ;;                  1    wreg      void 
  6868 ;; Registers used:
  6869 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  6870 ;; Tracked objects:
  6871 ;;		On entry : 0/0
  6872 ;;		On exit  : 0/0
  6873 ;;		Unchanged: 0/0
  6874 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6875 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6876 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6877 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6878 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6879 ;;Total ram usage:        3 bytes
  6880 ;; Hardware stack levels used:    1
  6881 ;; Hardware stack levels required when called:    8
  6882 ;; This function calls:
  6883 ;;		_RF_Write
  6884 ;;		_RF_WriteRegisterData
  6885 ;; This function is called by:
  6886 ;;		_Wireless_sendData
  6887 ;; This function uses a non-reentrant model
  6888 ;;
  6889                           
  6890                           
  6891                           ;psect for function _RF_TxPayload
  6892  15B4                     _RF_TxPayload:	
  6893                           
  6894                           ;incstack = 0
  6895                           ; Regs used in _RF_TxPayload: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  6896                           ;RF_TxPayload@payload stored from wreg
  6897  15B4  0020               	movlb	0	; select bank0
  6898  15B5  00B0               	movwf	RF_TxPayload@payload
  6899                           
  6900                           ;nrf24.c: 174: RF_Write(0xE1);
  6901  15B6  30E1               	movlw	225
  6902  15B7  3194  244E  3195   	fcall	_RF_Write
  6903                           
  6904                           ;nrf24.c: 175: RF_WriteRegisterData(0xA0, payload, payloadSize);
  6905  15BA  0020               	movlb	0	; select bank0
  6906  15BB  0830               	movf	RF_TxPayload@payload,w
  6907  15BC  00A9               	movwf	RF_WriteRegisterData@buf
  6908  15BD  3000               	movlw	0
  6909  15BE  00AA               	movwf	RF_WriteRegisterData@buf+1
  6910  15BF  082E               	movf	RF_TxPayload@payloadSize,w
  6911  15C0  00AF               	movwf	??_RF_TxPayload
  6912  15C1  082F               	movf	??_RF_TxPayload,w
  6913  15C2  00AB               	movwf	RF_WriteRegisterData@bufSize
  6914  15C3  30A0               	movlw	160
  6915  15C4  3196  2609  3195   	fcall	_RF_WriteRegisterData
  6916                           
  6917                           ;nrf24.c: 176: do { LATCbits.LATC2 = 1; } while(0);
  6918  15C7  0022               	movlb	2	; select bank2
  6919  15C8  150E               	bsf	14,2	;volatile
  6920                           
  6921                           ;nrf24.c: 177: _delay((unsigned long)((15)*(8000000/4000000.0)));
  6922  15C9  300A               	movlw	10
  6923  15CA                     u6787:	
  6924  15CA  0B89               	decfsz	9,f
  6925  15CB  2DCA               	goto	u6787
  6926                           
  6927                           ;nrf24.c: 178: do { LATCbits.LATC2 = 0; } while(0);
  6928  15CC  0022               	movlb	2	; select bank2
  6929  15CD  110E               	bcf	14,2	;volatile
  6930  15CE  0008               	return
  6931  15CF                     __end_of_RF_TxPayload:	
  6932                           
  6933                           	psect	text9
  6934  144E                     __ptext9:	
  6935 ;; *************** function _RF_Write *****************
  6936 ;; Defined at:
  6937 ;;		line 139 in file "nrf24.c"
  6938 ;; Parameters:    Size  Location     Type
  6939 ;;  val             1    wreg     unsigned char 
  6940 ;; Auto vars:     Size  Location     Type
  6941 ;;  val             1    3[BANK0 ] unsigned char 
  6942 ;; Return value:  Size  Location     Type
  6943 ;;                  1    wreg      void 
  6944 ;; Registers used:
  6945 ;;		wreg, status,2, status,0, pclath, cstack
  6946 ;; Tracked objects:
  6947 ;;		On entry : 0/0
  6948 ;;		On exit  : 0/0
  6949 ;;		Unchanged: 0/0
  6950 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6951 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6952 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6953 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6954 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6955 ;;Total ram usage:        1 bytes
  6956 ;; Hardware stack levels used:    1
  6957 ;; Hardware stack levels required when called:    6
  6958 ;; This function calls:
  6959 ;;		_SPI_WriteRead
  6960 ;; This function is called by:
  6961 ;;		_RF_TxPayload
  6962 ;; This function uses a non-reentrant model
  6963 ;;
  6964                           
  6965                           
  6966                           ;psect for function _RF_Write
  6967  144E                     _RF_Write:	
  6968                           
  6969                           ;incstack = 0
  6970                           ; Regs used in _RF_Write: [wreg+status,2+status,0+pclath+cstack]
  6971                           ;RF_Write@val stored from wreg
  6972  144E  0020               	movlb	0	; select bank0
  6973  144F  00A3               	movwf	RF_Write@val
  6974                           
  6975                           ;nrf24.c: 140: do { LATCbits.LATC1 = 0; } while(0);
  6976  1450  0022               	movlb	2	; select bank2
  6977  1451  108E               	bcf	14,1	;volatile
  6978                           
  6979                           ;nrf24.c: 141: (void)SPI_WriteRead(val);
  6980  1452  0020               	movlb	0	; select bank0
  6981  1453  0823               	movf	RF_Write@val,w
  6982  1454  3193  2398  3194   	fcall	_SPI_WriteRead
  6983                           
  6984                           ;nrf24.c: 142: do { LATCbits.LATC1 = 1; } while(0);
  6985  1457  0022               	movlb	2	; select bank2
  6986  1458  148E               	bsf	14,1	;volatile
  6987                           
  6988                           ;nrf24.c: 143: _delay((unsigned long)((10)*(8000000/4000000.0)));
  6989  1459  3006               	movlw	6
  6990  145A                     u6797:	
  6991  145A  0B89               	decfsz	9,f
  6992  145B  2C5A               	goto	u6797
  6993  145C  3200               	nop2
  6994  145D  0008               	return
  6995  145E                     __end_of_RF_Write:	
  6996                           
  6997                           	psect	text10
  6998  0C45                     __ptext10:	
  6999 ;; *************** function _Wireless_checkDataReceived *****************
  7000 ;; Defined at:
  7001 ;;		line 113 in file "wireless.c"
  7002 ;; Parameters:    Size  Location     Type
  7003 ;;		None
  7004 ;; Auto vars:     Size  Location     Type
  7005 ;;  data            4   23[BANK0 ] unsigned char [4]
  7006 ;;  channel         1   27[BANK0 ] unsigned char 
  7007 ;; Return value:  Size  Location     Type
  7008 ;;                  1    wreg      void 
  7009 ;; Registers used:
  7010 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7011 ;; Tracked objects:
  7012 ;;		On entry : 0/0
  7013 ;;		On exit  : 0/0
  7014 ;;		Unchanged: 0/0
  7015 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7016 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7017 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7018 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7019 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7020 ;;Total ram usage:        9 bytes
  7021 ;; Hardware stack levels used:    1
  7022 ;; Hardware stack levels required when called:    9
  7023 ;; This function calls:
  7024 ;;		_DOOR_resetPos
  7025 ;;		_DOOR_update
  7026 ;;		_RF_DataIsReady
  7027 ;;		_RF_RxPayload
  7028 ;;		___lmul
  7029 ;; This function is called by:
  7030 ;;		_Wireless_packageData
  7031 ;; This function uses a non-reentrant model
  7032 ;;
  7033                           
  7034                           
  7035                           ;psect for function _Wireless_checkDataReceived
  7036  0C45                     _Wireless_checkDataReceived:	
  7037  0C45                     l1092:	
  7038                           ;incstack = 0
  7039                           ; Regs used in _Wireless_checkDataReceived: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+c
      +                          stack]
  7040                           ;wireless.c: 120: char channel;
  7041                           ;wireless.c: 121: char data[4];
  7042                           ;wireless.c: 122: do
  7043                           
  7044                           
  7045                           ;wireless.c: 123: {
  7046                           ;wireless.c: 124: if(RF_DataIsReady(&channel))
  7047  0C45  303B               	movlw	(low (Wireless_checkDataReceived@channel| 0))& (0+255)
  7048  0C46  3196  2626  318C   	fcall	_RF_DataIsReady
  7049  0C49  3A00               	xorlw	0
  7050  0C4A  1903               	skipnz
  7051  0C4B  2CB7               	goto	l5858
  7052                           
  7053                           ;wireless.c: 125: {
  7054                           ;wireless.c: 126: RF_RxPayload(data, 4);
  7055  0C4C  3004               	movlw	4
  7056  0C4D  0020               	movlb	0	; select bank0
  7057  0C4E  00B3               	movwf	??_Wireless_checkDataReceived
  7058  0C4F  0833               	movf	??_Wireless_checkDataReceived,w
  7059  0C50  00AF               	movwf	RF_RxPayload@payloadSize
  7060  0C51  3037               	movlw	(low (Wireless_checkDataReceived@data| 0))& (0+255)
  7061  0C52  3194  2493  318C   	fcall	_RF_RxPayload
  7062                           
  7063                           ;wireless.c: 127: if(data[0] & 0x01)
  7064  0C55  0020               	movlb	0	; select bank0
  7065  0C56  1C37               	btfss	Wireless_checkDataReceived@data,0
  7066  0C57  2C61               	goto	l5844
  7067                           
  7068                           ;wireless.c: 128: {
  7069                           ;wireless.c: 129: DOOR_update(doorOpenAngle,data[1]);
  7070  0C58  0838               	movf	Wireless_checkDataReceived@data+1,w
  7071  0C59  00B3               	movwf	??_Wireless_checkDataReceived
  7072  0C5A  0833               	movf	??_Wireless_checkDataReceived,w
  7073  0C5B  00A7               	movwf	DOOR_update@closedAngle
  7074  0C5C  0021               	movlb	1	; select bank1
  7075  0C5D  085E               	movf	_doorOpenAngle^(0+128),w
  7076  0C5E  3194  24D1  318C   	fcall	_DOOR_update
  7077  0C61                     l5844:	
  7078                           
  7079                           ;wireless.c: 130: }
  7080                           ;wireless.c: 131: if(data[0] & 0x02)
  7081  0C61  0020               	movlb	0	; select bank0
  7082  0C62  1CB7               	btfss	Wireless_checkDataReceived@data,1
  7083  0C63  2C6E               	goto	l5848
  7084                           
  7085                           ;wireless.c: 132: {
  7086                           ;wireless.c: 133: DOOR_update(data[2],doorClosedAngle);
  7087  0C64  0021               	movlb	1	; select bank1
  7088  0C65  085D               	movf	_doorClosedAngle^(0+128),w
  7089  0C66  0020               	movlb	0	; select bank0
  7090  0C67  00B3               	movwf	??_Wireless_checkDataReceived
  7091  0C68  0833               	movf	??_Wireless_checkDataReceived,w
  7092  0C69  00A7               	movwf	DOOR_update@closedAngle
  7093  0C6A  0839               	movf	Wireless_checkDataReceived@data+2,w
  7094  0C6B  3194  24D1  318C   	fcall	_DOOR_update
  7095  0C6E                     l5848:	
  7096                           
  7097                           ;wireless.c: 134: }
  7098                           ;wireless.c: 135: if(data[0] & 0x04)
  7099  0C6E  0020               	movlb	0	; select bank0
  7100  0C6F  1D37               	btfss	Wireless_checkDataReceived@data,2
  7101  0C70  2CB1               	goto	l5854
  7102                           
  7103                           ;wireless.c: 136: {
  7104                           ;wireless.c: 137: sensorUpdatePeriod=data[3];
  7105  0C71  083A               	movf	Wireless_checkDataReceived@data+3,w
  7106  0C72  00B3               	movwf	??_Wireless_checkDataReceived
  7107  0C73  01B4               	clrf	??_Wireless_checkDataReceived+1
  7108  0C74  01B5               	clrf	??_Wireless_checkDataReceived+2
  7109  0C75  01B6               	clrf	??_Wireless_checkDataReceived+3
  7110  0C76  0836               	movf	??_Wireless_checkDataReceived+3,w
  7111  0C77  0022               	movlb	2	; select bank2
  7112  0C78  00ED               	movwf	(_sensorUpdatePeriod+3)^(0+256)
  7113  0C79  0020               	movlb	0	; select bank0
  7114  0C7A  0835               	movf	??_Wireless_checkDataReceived+2,w
  7115  0C7B  0022               	movlb	2	; select bank2
  7116  0C7C  00EC               	movwf	(_sensorUpdatePeriod+2)^(0+256)
  7117  0C7D  0020               	movlb	0	; select bank0
  7118  0C7E  0834               	movf	??_Wireless_checkDataReceived+1,w
  7119  0C7F  0022               	movlb	2	; select bank2
  7120  0C80  00EB               	movwf	(_sensorUpdatePeriod+1)^(0+256)
  7121  0C81  0020               	movlb	0	; select bank0
  7122  0C82  0833               	movf	??_Wireless_checkDataReceived,w
  7123  0C83  0022               	movlb	2	; select bank2
  7124  0C84  00EA               	movwf	_sensorUpdatePeriod^(0+256)
  7125                           
  7126                           ;wireless.c: 138: sensorUpdatePeriod*=1000;
  7127  0C85  3000               	movlw	0
  7128  0C86  0020               	movlb	0	; select bank0
  7129  0C87  00A4               	movwf	___lmul@multiplier+3
  7130  0C88  3000               	movlw	0
  7131  0C89  00A3               	movwf	___lmul@multiplier+2
  7132  0C8A  3003               	movlw	3
  7133  0C8B  00A2               	movwf	___lmul@multiplier+1
  7134  0C8C  30E8               	movlw	232
  7135  0C8D  00A1               	movwf	___lmul@multiplier
  7136  0C8E  0022               	movlb	2	; select bank2
  7137  0C8F  086D               	movf	(_sensorUpdatePeriod+3)^(0+256),w
  7138  0C90  0020               	movlb	0	; select bank0
  7139  0C91  00A8               	movwf	___lmul@multiplicand+3
  7140  0C92  0022               	movlb	2	; select bank2
  7141  0C93  086C               	movf	(_sensorUpdatePeriod+2)^(0+256),w
  7142  0C94  0020               	movlb	0	; select bank0
  7143  0C95  00A7               	movwf	___lmul@multiplicand+2
  7144  0C96  0022               	movlb	2	; select bank2
  7145  0C97  086B               	movf	(_sensorUpdatePeriod+1)^(0+256),w
  7146  0C98  0020               	movlb	0	; select bank0
  7147  0C99  00A6               	movwf	___lmul@multiplicand+1
  7148  0C9A  0022               	movlb	2	; select bank2
  7149  0C9B  086A               	movf	_sensorUpdatePeriod^(0+256),w
  7150  0C9C  0020               	movlb	0	; select bank0
  7151  0C9D  00A5               	movwf	___lmul@multiplicand
  7152  0C9E  3197  27D0  318C   	fcall	___lmul
  7153  0CA1  0020               	movlb	0	; select bank0
  7154  0CA2  0824               	movf	?___lmul+3,w
  7155  0CA3  0022               	movlb	2	; select bank2
  7156  0CA4  00ED               	movwf	(_sensorUpdatePeriod+3)^(0+256)
  7157  0CA5  0020               	movlb	0	; select bank0
  7158  0CA6  0823               	movf	?___lmul+2,w
  7159  0CA7  0022               	movlb	2	; select bank2
  7160  0CA8  00EC               	movwf	(_sensorUpdatePeriod+2)^(0+256)
  7161  0CA9  0020               	movlb	0	; select bank0
  7162  0CAA  0822               	movf	?___lmul+1,w
  7163  0CAB  0022               	movlb	2	; select bank2
  7164  0CAC  00EB               	movwf	(_sensorUpdatePeriod+1)^(0+256)
  7165  0CAD  0020               	movlb	0	; select bank0
  7166  0CAE  0821               	movf	?___lmul,w
  7167  0CAF  0022               	movlb	2	; select bank2
  7168  0CB0  00EA               	movwf	_sensorUpdatePeriod^(0+256)
  7169  0CB1                     l5854:	
  7170                           
  7171                           ;wireless.c: 139: }
  7172                           ;wireless.c: 140: if(data[0] & 0x08)
  7173  0CB1  0020               	movlb	0	; select bank0
  7174  0CB2  1DB7               	btfss	Wireless_checkDataReceived@data,3
  7175  0CB3  2CB7               	goto	l5858
  7176                           
  7177                           ;wireless.c: 141: {
  7178                           ;wireless.c: 142: DOOR_resetPos();
  7179  0CB4  3193  236D  318C   	fcall	_DOOR_resetPos
  7180  0CB7                     l5858:	
  7181                           
  7182                           ;wireless.c: 143: }
  7183                           ;wireless.c: 147: }
  7184                           ;wireless.c: 148: }while(RF_DataIsReady(&channel));
  7185  0CB7  303B               	movlw	(low (Wireless_checkDataReceived@channel| 0))& (0+255)
  7186  0CB8  3196  2626  318C   	fcall	_RF_DataIsReady
  7187  0CBB  3A00               	xorlw	0
  7188  0CBC  1903               	btfsc	3,2
  7189  0CBD  0008               	return
  7190  0CBE  2C45               	goto	l1092
  7191  0CBF                     __end_of_Wireless_checkDataReceived:	
  7192                           
  7193                           	psect	text11
  7194  1493                     __ptext11:	
  7195 ;; *************** function _RF_RxPayload *****************
  7196 ;; Defined at:
  7197 ;;		line 186 in file "nrf24.c"
  7198 ;; Parameters:    Size  Location     Type
  7199 ;;  payload         1    wreg     PTR unsigned char 
  7200 ;;		 -> Wireless_checkDataReceived@data(4), 
  7201 ;;  payloadSize     1   15[BANK0 ] unsigned char 
  7202 ;; Auto vars:     Size  Location     Type
  7203 ;;  payload         1   18[BANK0 ] PTR unsigned char 
  7204 ;;		 -> Wireless_checkDataReceived@data(4), 
  7205 ;; Return value:  Size  Location     Type
  7206 ;;                  1    wreg      void 
  7207 ;; Registers used:
  7208 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7209 ;; Tracked objects:
  7210 ;;		On entry : 0/0
  7211 ;;		On exit  : 0/0
  7212 ;;		Unchanged: 0/0
  7213 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7214 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7215 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7216 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7217 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7218 ;;Total ram usage:        4 bytes
  7219 ;; Hardware stack levels used:    1
  7220 ;; Hardware stack levels required when called:    8
  7221 ;; This function calls:
  7222 ;;		_RF_ReadRegisterData
  7223 ;; This function is called by:
  7224 ;;		_Wireless_checkDataReceived
  7225 ;; This function uses a non-reentrant model
  7226 ;;
  7227                           
  7228                           
  7229                           ;psect for function _RF_RxPayload
  7230  1493                     _RF_RxPayload:	
  7231                           
  7232                           ;incstack = 0
  7233                           ; Regs used in _RF_RxPayload: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  7234                           ;RF_RxPayload@payload stored from wreg
  7235  1493  0020               	movlb	0	; select bank0
  7236  1494  00B2               	movwf	RF_RxPayload@payload
  7237                           
  7238                           ;nrf24.c: 187: do { LATCbits.LATC2 = 0; } while(0);
  7239  1495  0022               	movlb	2	; select bank2
  7240  1496  110E               	bcf	14,2	;volatile
  7241                           
  7242                           ;nrf24.c: 188: RF_ReadRegisterData(0x61, payload, payloadSize);
  7243  1497  0020               	movlb	0	; select bank0
  7244  1498  0832               	movf	RF_RxPayload@payload,w
  7245  1499  00B0               	movwf	??_RF_RxPayload
  7246  149A  0830               	movf	??_RF_RxPayload,w
  7247  149B  00AA               	movwf	RF_ReadRegisterData@buf
  7248  149C  082F               	movf	RF_RxPayload@payloadSize,w
  7249  149D  00B1               	movwf	??_RF_RxPayload+1
  7250  149E  0831               	movf	??_RF_RxPayload+1,w
  7251  149F  00AB               	movwf	RF_ReadRegisterData@bufSize
  7252  14A0  3061               	movlw	97
  7253  14A1  3196  2643         	fcall	_RF_ReadRegisterData
  7254                           
  7255                           ;nrf24.c: 189: do { LATCbits.LATC2 = 1; } while(0);
  7256  14A3  0022               	movlb	2	; select bank2
  7257  14A4  150E               	bsf	14,2	;volatile
  7258  14A5  0008               	return
  7259  14A6                     __end_of_RF_RxPayload:	
  7260                           
  7261                           	psect	text12
  7262  1643                     __ptext12:	
  7263 ;; *************** function _RF_ReadRegisterData *****************
  7264 ;; Defined at:
  7265 ;;		line 99 in file "nrf24.c"
  7266 ;; Parameters:    Size  Location     Type
  7267 ;;  reg             1    wreg     unsigned char 
  7268 ;;  buf             1   10[BANK0 ] PTR unsigned char 
  7269 ;;		 -> Wireless_checkDataReceived@data(4), Wireless_wake@reg(1), Wireless_sleep@reg(1), 
  7270 ;;  bufSize         1   11[BANK0 ] unsigned char 
  7271 ;; Auto vars:     Size  Location     Type
  7272 ;;  reg             1   14[BANK0 ] unsigned char 
  7273 ;; Return value:  Size  Location     Type
  7274 ;;                  1    wreg      void 
  7275 ;; Registers used:
  7276 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7277 ;; Tracked objects:
  7278 ;;		On entry : 0/0
  7279 ;;		On exit  : 0/0
  7280 ;;		Unchanged: 0/0
  7281 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7282 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7283 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7284 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7285 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7286 ;;Total ram usage:        5 bytes
  7287 ;; Hardware stack levels used:    1
  7288 ;; Hardware stack levels required when called:    7
  7289 ;; This function calls:
  7290 ;;		_SPI_WriteRead
  7291 ;;		_SPI_WriteReadBuffer
  7292 ;; This function is called by:
  7293 ;;		_RF_RxPayload
  7294 ;;		_Wireless_sleep
  7295 ;;		_Wireless_wake
  7296 ;; This function uses a non-reentrant model
  7297 ;;
  7298                           
  7299                           
  7300                           ;psect for function _RF_ReadRegisterData
  7301  1643                     _RF_ReadRegisterData:	
  7302                           
  7303                           ;incstack = 0
  7304                           ; Regs used in _RF_ReadRegisterData: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  7305                           ;RF_ReadRegisterData@reg stored from wreg
  7306  1643  0020               	movlb	0	; select bank0
  7307  1644  00AE               	movwf	RF_ReadRegisterData@reg
  7308                           
  7309                           ;nrf24.c: 100: do { LATCbits.LATC1 = 0; } while(0);
  7310  1645  0022               	movlb	2	; select bank2
  7311  1646  108E               	bcf	14,1	;volatile
  7312                           
  7313                           ;nrf24.c: 101: (void)SPI_WriteRead(0x00|reg);
  7314  1647  0020               	movlb	0	; select bank0
  7315  1648  082E               	movf	RF_ReadRegisterData@reg,w
  7316  1649  3193  2398  3196   	fcall	_SPI_WriteRead
  7317                           
  7318                           ;nrf24.c: 102: SPI_WriteReadBuffer(buf, buf, bufSize);
  7319  164C  0020               	movlb	0	; select bank0
  7320  164D  082A               	movf	RF_ReadRegisterData@buf,w
  7321  164E  00AC               	movwf	??_RF_ReadRegisterData
  7322  164F  082C               	movf	??_RF_ReadRegisterData,w
  7323  1650  00A3               	movwf	SPI_WriteReadBuffer@bufIn
  7324  1651  082B               	movf	RF_ReadRegisterData@bufSize,w
  7325  1652  00AD               	movwf	??_RF_ReadRegisterData+1
  7326  1653  082D               	movf	??_RF_ReadRegisterData+1,w
  7327  1654  00A4               	movwf	SPI_WriteReadBuffer@bufSize
  7328  1655  082A               	movf	RF_ReadRegisterData@buf,w
  7329  1656  3196  269F  3196   	fcall	_SPI_WriteReadBuffer
  7330                           
  7331                           ;nrf24.c: 103: do { LATCbits.LATC1 = 1; } while(0);
  7332  1659  0022               	movlb	2	; select bank2
  7333  165A  148E               	bsf	14,1	;volatile
  7334                           
  7335                           ;nrf24.c: 104: _delay((unsigned long)((10)*(8000000/4000000.0)));
  7336  165B  3006               	movlw	6
  7337  165C                     u6807:	
  7338  165C  0B89               	decfsz	9,f
  7339  165D  2E5C               	goto	u6807
  7340  165E  3200               	nop2
  7341  165F  0008               	return
  7342  1660                     __end_of_RF_ReadRegisterData:	
  7343                           
  7344                           	psect	text13
  7345  169F                     __ptext13:	
  7346 ;; *************** function _SPI_WriteReadBuffer *****************
  7347 ;; Defined at:
  7348 ;;		line 43 in file "nrf24.c"
  7349 ;; Parameters:    Size  Location     Type
  7350 ;;  bufOut          1    wreg     PTR unsigned char 
  7351 ;;		 -> Wireless_checkDataReceived@data(4), Wireless_wake@reg(1), Wireless_sleep@reg(1), 
  7352 ;;  bufIn           1    3[BANK0 ] PTR unsigned char 
  7353 ;;		 -> Wireless_checkDataReceived@data(4), Wireless_wake@reg(1), Wireless_sleep@reg(1), 
  7354 ;;  bufSize         1    4[BANK0 ] unsigned char 
  7355 ;; Auto vars:     Size  Location     Type
  7356 ;;  bufOut          1    8[BANK0 ] PTR unsigned char 
  7357 ;;		 -> Wireless_checkDataReceived@data(4), Wireless_wake@reg(1), Wireless_sleep@reg(1), 
  7358 ;;  i               1    9[BANK0 ] unsigned char 
  7359 ;; Return value:  Size  Location     Type
  7360 ;;                  1    wreg      void 
  7361 ;; Registers used:
  7362 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7363 ;; Tracked objects:
  7364 ;;		On entry : 0/0
  7365 ;;		On exit  : 0/0
  7366 ;;		Unchanged: 0/0
  7367 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7368 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7369 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7370 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7371 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7372 ;;Total ram usage:        7 bytes
  7373 ;; Hardware stack levels used:    1
  7374 ;; Hardware stack levels required when called:    6
  7375 ;; This function calls:
  7376 ;;		_SPI_WriteRead
  7377 ;; This function is called by:
  7378 ;;		_RF_ReadRegisterData
  7379 ;; This function uses a non-reentrant model
  7380 ;;
  7381                           
  7382                           
  7383                           ;psect for function _SPI_WriteReadBuffer
  7384  169F                     _SPI_WriteReadBuffer:	
  7385                           
  7386                           ;incstack = 0
  7387                           ; Regs used in _SPI_WriteReadBuffer: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  7388                           ;SPI_WriteReadBuffer@bufOut stored from wreg
  7389  169F  0020               	movlb	0	; select bank0
  7390  16A0  00A8               	movwf	SPI_WriteReadBuffer@bufOut
  7391                           
  7392                           ;nrf24.c: 44: uint8_t i;
  7393                           ;nrf24.c: 46: for(i=0;i<bufSize;i++) {
  7394  16A1  01A9               	clrf	SPI_WriteReadBuffer@i
  7395  16A2                     l5340:	
  7396  16A2  0824               	movf	SPI_WriteReadBuffer@bufSize,w
  7397  16A3  0229               	subwf	SPI_WriteReadBuffer@i,w
  7398  16A4  1803               	btfsc	3,0
  7399  16A5  0008               	return
  7400                           
  7401                           ;nrf24.c: 47: bufIn[i] = SPI_WriteRead(bufOut[i]);
  7402  16A6  0829               	movf	SPI_WriteReadBuffer@i,w
  7403  16A7  0728               	addwf	SPI_WriteReadBuffer@bufOut,w
  7404  16A8  00A5               	movwf	??_SPI_WriteReadBuffer
  7405  16A9  0825               	movf	??_SPI_WriteReadBuffer,w
  7406  16AA  0086               	movwf	6
  7407  16AB  0187               	clrf	7
  7408  16AC  0801               	movf	1,w
  7409  16AD  3193  2398  3196   	fcall	_SPI_WriteRead
  7410  16B0  0020               	movlb	0	; select bank0
  7411  16B1  00A6               	movwf	??_SPI_WriteReadBuffer+1
  7412  16B2  0829               	movf	SPI_WriteReadBuffer@i,w
  7413  16B3  0723               	addwf	SPI_WriteReadBuffer@bufIn,w
  7414  16B4  00A7               	movwf	??_SPI_WriteReadBuffer+2
  7415  16B5  0827               	movf	??_SPI_WriteReadBuffer+2,w
  7416  16B6  0086               	movwf	6
  7417  16B7  0187               	clrf	7
  7418  16B8  0826               	movf	??_SPI_WriteReadBuffer+1,w
  7419  16B9  0081               	movwf	1
  7420  16BA  3001               	movlw	1
  7421  16BB  00A5               	movwf	??_SPI_WriteReadBuffer
  7422  16BC  0825               	movf	??_SPI_WriteReadBuffer,w
  7423  16BD  07A9               	addwf	SPI_WriteReadBuffer@i,f
  7424  16BE  2EA2               	goto	l5340
  7425  16BF                     __end_of_SPI_WriteReadBuffer:	
  7426                           
  7427                           	psect	text14
  7428  1626                     __ptext14:	
  7429 ;; *************** function _RF_DataIsReady *****************
  7430 ;; Defined at:
  7431 ;;		line 202 in file "nrf24.c"
  7432 ;; Parameters:    Size  Location     Type
  7433 ;;  channel         1    wreg     PTR unsigned char 
  7434 ;;		 -> Wireless_checkDataReceived@channel(1), 
  7435 ;; Auto vars:     Size  Location     Type
  7436 ;;  channel         1    7[BANK0 ] PTR unsigned char 
  7437 ;;		 -> Wireless_checkDataReceived@channel(1), 
  7438 ;;  status          1    8[BANK0 ] unsigned char 
  7439 ;; Return value:  Size  Location     Type
  7440 ;;                  1    wreg      unsigned char 
  7441 ;; Registers used:
  7442 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7443 ;; Tracked objects:
  7444 ;;		On entry : 0/0
  7445 ;;		On exit  : 0/0
  7446 ;;		Unchanged: 0/0
  7447 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7448 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7449 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7450 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7451 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7452 ;;Total ram usage:        3 bytes
  7453 ;; Hardware stack levels used:    1
  7454 ;; Hardware stack levels required when called:    7
  7455 ;; This function calls:
  7456 ;;		_RF_ReadRegister
  7457 ;; This function is called by:
  7458 ;;		_Wireless_checkDataReceived
  7459 ;; This function uses a non-reentrant model
  7460 ;;
  7461                           
  7462                           
  7463                           ;psect for function _RF_DataIsReady
  7464  1626                     _RF_DataIsReady:	
  7465                           
  7466                           ;incstack = 0
  7467                           ; Regs used in _RF_DataIsReady: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  7468                           ;RF_DataIsReady@channel stored from wreg
  7469  1626  0020               	movlb	0	; select bank0
  7470  1627  00A7               	movwf	RF_DataIsReady@channel
  7471                           
  7472                           ;nrf24.c: 204: char status;
  7473                           ;nrf24.c: 205: status=RF_ReadRegister(0x07);
  7474  1628  3007               	movlw	7
  7475  1629  3195  2549  3196   	fcall	_RF_ReadRegister
  7476  162C  0020               	movlb	0	; select bank0
  7477  162D  00A6               	movwf	??_RF_DataIsReady
  7478  162E  0826               	movf	??_RF_DataIsReady,w
  7479  162F  00A8               	movwf	RF_DataIsReady@status
  7480                           
  7481                           ;nrf24.c: 206: status&=0x0E;
  7482  1630  300E               	movlw	14
  7483  1631  00A6               	movwf	??_RF_DataIsReady
  7484  1632  0826               	movf	??_RF_DataIsReady,w
  7485  1633  05A8               	andwf	RF_DataIsReady@status,f
  7486                           
  7487                           ;nrf24.c: 207: if(status==0x0E)
  7488  1634  300E               	movlw	14
  7489  1635  0628               	xorwf	RF_DataIsReady@status,w
  7490  1636  1D03               	btfss	3,2
  7491  1637  2E3A               	goto	l5572
  7492                           
  7493                           ;nrf24.c: 208: return 0;
  7494  1638  3000               	movlw	0
  7495  1639  0008               	return
  7496  163A                     l5572:	
  7497                           
  7498                           ;nrf24.c: 209: else
  7499                           ;nrf24.c: 210: *channel=status>>1;
  7500  163A  3628               	lsrf	RF_DataIsReady@status,w
  7501  163B  00A6               	movwf	??_RF_DataIsReady
  7502  163C  0827               	movf	RF_DataIsReady@channel,w
  7503  163D  0086               	movwf	6
  7504  163E  0187               	clrf	7
  7505  163F  0826               	movf	??_RF_DataIsReady,w
  7506  1640  0081               	movwf	1
  7507                           
  7508                           ;nrf24.c: 211: return 1;
  7509  1641  3001               	movlw	1
  7510  1642  0008               	return
  7511  1643                     __end_of_RF_DataIsReady:	
  7512                           
  7513                           	psect	text15
  7514  1549                     __ptext15:	
  7515 ;; *************** function _RF_ReadRegister *****************
  7516 ;; Defined at:
  7517 ;;		line 82 in file "nrf24.c"
  7518 ;; Parameters:    Size  Location     Type
  7519 ;;  reg             1    wreg     unsigned char 
  7520 ;; Auto vars:     Size  Location     Type
  7521 ;;  reg             1    4[BANK0 ] unsigned char 
  7522 ;;  val             1    5[BANK0 ] unsigned char 
  7523 ;; Return value:  Size  Location     Type
  7524 ;;                  1    wreg      unsigned char 
  7525 ;; Registers used:
  7526 ;;		wreg, status,2, status,0, pclath, cstack
  7527 ;; Tracked objects:
  7528 ;;		On entry : 0/0
  7529 ;;		On exit  : 0/0
  7530 ;;		Unchanged: 0/0
  7531 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7532 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7533 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7534 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7535 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7536 ;;Total ram usage:        3 bytes
  7537 ;; Hardware stack levels used:    1
  7538 ;; Hardware stack levels required when called:    6
  7539 ;; This function calls:
  7540 ;;		_SPI_WriteRead
  7541 ;; This function is called by:
  7542 ;;		_RF_DataIsReady
  7543 ;; This function uses a non-reentrant model
  7544 ;;
  7545                           
  7546                           
  7547                           ;psect for function _RF_ReadRegister
  7548  1549                     _RF_ReadRegister:	
  7549                           
  7550                           ;incstack = 0
  7551                           ; Regs used in _RF_ReadRegister: [wreg+status,2+status,0+pclath+cstack]
  7552                           ;RF_ReadRegister@reg stored from wreg
  7553  1549  0020               	movlb	0	; select bank0
  7554  154A  00A4               	movwf	RF_ReadRegister@reg
  7555                           
  7556                           ;nrf24.c: 83: uint8_t val;
  7557                           ;nrf24.c: 85: do { LATCbits.LATC1 = 0; } while(0);
  7558  154B  0022               	movlb	2	; select bank2
  7559  154C  108E               	bcf	14,1	;volatile
  7560                           
  7561                           ;nrf24.c: 86: (void)SPI_WriteRead(reg);
  7562  154D  0020               	movlb	0	; select bank0
  7563  154E  0824               	movf	RF_ReadRegister@reg,w
  7564  154F  3193  2398  3195   	fcall	_SPI_WriteRead
  7565                           
  7566                           ;nrf24.c: 87: val = SPI_WriteRead(0);
  7567  1552  3000               	movlw	0
  7568  1553  3193  2398  3195   	fcall	_SPI_WriteRead
  7569  1556  0020               	movlb	0	; select bank0
  7570  1557  00A3               	movwf	??_RF_ReadRegister
  7571  1558  0823               	movf	??_RF_ReadRegister,w
  7572  1559  00A5               	movwf	RF_ReadRegister@val
  7573                           
  7574                           ;nrf24.c: 88: do { LATCbits.LATC1 = 1; } while(0);
  7575  155A  0022               	movlb	2	; select bank2
  7576  155B  148E               	bsf	14,1	;volatile
  7577                           
  7578                           ;nrf24.c: 89: _delay((unsigned long)((10)*(8000000/4000000.0)));
  7579  155C  3006               	movlw	6
  7580  155D                     u6817:	
  7581  155D  0B89               	decfsz	9,f
  7582  155E  2D5D               	goto	u6817
  7583  155F  3200               	nop2
  7584                           
  7585                           ;nrf24.c: 90: return val;
  7586  1560  0020               	movlb	0	; select bank0
  7587  1561  0825               	movf	RF_ReadRegister@val,w
  7588  1562  0008               	return
  7589  1563                     __end_of_RF_ReadRegister:	
  7590                           
  7591                           	psect	text16
  7592  14D1                     __ptext16:	
  7593 ;; *************** function _DOOR_update *****************
  7594 ;; Defined at:
  7595 ;;		line 16 in file "doorlogic.c"
  7596 ;; Parameters:    Size  Location     Type
  7597 ;;  openAngle       1    wreg     unsigned char 
  7598 ;;  closedAngle     1    7[BANK0 ] unsigned char 
  7599 ;; Auto vars:     Size  Location     Type
  7600 ;;  openAngle       1    9[BANK0 ] unsigned char 
  7601 ;; Return value:  Size  Location     Type
  7602 ;;                  1    wreg      void 
  7603 ;; Registers used:
  7604 ;;		wreg, status,2, status,0, pclath, cstack
  7605 ;; Tracked objects:
  7606 ;;		On entry : 0/0
  7607 ;;		On exit  : 0/0
  7608 ;;		Unchanged: 0/0
  7609 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7610 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7611 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7612 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7613 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7614 ;;Total ram usage:        3 bytes
  7615 ;; Hardware stack levels used:    1
  7616 ;; Hardware stack levels required when called:    6
  7617 ;; This function calls:
  7618 ;;		_Storage_save
  7619 ;; This function is called by:
  7620 ;;		_Wireless_checkDataReceived
  7621 ;; This function uses a non-reentrant model
  7622 ;;
  7623                           
  7624                           
  7625                           ;psect for function _DOOR_update
  7626  14D1                     _DOOR_update:	
  7627                           
  7628                           ;incstack = 0
  7629                           ; Regs used in _DOOR_update: [wreg+status,2+status,0+pclath+cstack]
  7630                           ;DOOR_update@openAngle stored from wreg
  7631  14D1  0020               	movlb	0	; select bank0
  7632  14D2  00A9               	movwf	DOOR_update@openAngle
  7633                           
  7634                           ;doorlogic.c: 18: doorOpenAngle=openAngle;
  7635  14D3  0829               	movf	DOOR_update@openAngle,w
  7636  14D4  00A8               	movwf	??_DOOR_update
  7637  14D5  0828               	movf	??_DOOR_update,w
  7638  14D6  0021               	movlb	1	; select bank1
  7639  14D7  00DE               	movwf	_doorOpenAngle^(0+128)
  7640                           
  7641                           ;doorlogic.c: 19: doorClosedAngle=closedAngle;
  7642  14D8  0020               	movlb	0	; select bank0
  7643  14D9  0827               	movf	DOOR_update@closedAngle,w
  7644  14DA  00A8               	movwf	??_DOOR_update
  7645  14DB  0828               	movf	??_DOOR_update,w
  7646  14DC  0021               	movlb	1	; select bank1
  7647  14DD  00DD               	movwf	_doorClosedAngle^(0+128)
  7648                           
  7649                           ;doorlogic.c: 20: Storage_save(openAngle,closedAngle);
  7650  14DE  0020               	movlb	0	; select bank0
  7651  14DF  0827               	movf	DOOR_update@closedAngle,w
  7652  14E0  00A8               	movwf	??_DOOR_update
  7653  14E1  0828               	movf	??_DOOR_update,w
  7654  14E2  00A4               	movwf	Storage_save@closeAngle
  7655  14E3  0829               	movf	DOOR_update@openAngle,w
  7656  14E4  3195  252F         	fcall	_Storage_save
  7657  14E6  0008               	return
  7658  14E7                     __end_of_DOOR_update:	
  7659                           
  7660                           	psect	text17
  7661  152F                     __ptext17:	
  7662 ;; *************** function _Storage_save *****************
  7663 ;; Defined at:
  7664 ;;		line 30 in file "storage.c"
  7665 ;; Parameters:    Size  Location     Type
  7666 ;;  openAngle       1    wreg     unsigned char 
  7667 ;;  closeAngle      1    4[BANK0 ] unsigned char 
  7668 ;; Auto vars:     Size  Location     Type
  7669 ;;  openAngle       1    6[BANK0 ] unsigned char 
  7670 ;; Return value:  Size  Location     Type
  7671 ;;                  1    wreg      void 
  7672 ;; Registers used:
  7673 ;;		wreg, status,2, status,0, pclath, cstack
  7674 ;; Tracked objects:
  7675 ;;		On entry : 0/0
  7676 ;;		On exit  : 0/0
  7677 ;;		Unchanged: 0/0
  7678 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7679 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7680 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7681 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7682 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7683 ;;Total ram usage:        3 bytes
  7684 ;; Hardware stack levels used:    1
  7685 ;; Hardware stack levels required when called:    5
  7686 ;; This function calls:
  7687 ;;		_DATAEE_WriteByte
  7688 ;; This function is called by:
  7689 ;;		_DOOR_update
  7690 ;; This function uses a non-reentrant model
  7691 ;;
  7692                           
  7693                           
  7694                           ;psect for function _Storage_save
  7695  152F                     _Storage_save:	
  7696                           
  7697                           ;incstack = 0
  7698                           ; Regs used in _Storage_save: [wreg+status,2+status,0+pclath+cstack]
  7699                           ;Storage_save@openAngle stored from wreg
  7700  152F  0020               	movlb	0	; select bank0
  7701  1530  00A6               	movwf	Storage_save@openAngle
  7702                           
  7703                           ;storage.c: 32: DATAEE_WriteByte(1, openAngle);
  7704  1531  0826               	movf	Storage_save@openAngle,w
  7705  1532  00A5               	movwf	??_Storage_save
  7706  1533  0825               	movf	??_Storage_save,w
  7707  1534  00A1               	movwf	DATAEE_WriteByte@bData
  7708  1535  3001               	movlw	1
  7709  1536  3197  2704  3195   	fcall	_DATAEE_WriteByte
  7710                           
  7711                           ;storage.c: 33: DATAEE_WriteByte(2, closeAngle);
  7712  1539  0020               	movlb	0	; select bank0
  7713  153A  0824               	movf	Storage_save@closeAngle,w
  7714  153B  00A5               	movwf	??_Storage_save
  7715  153C  0825               	movf	??_Storage_save,w
  7716  153D  00A1               	movwf	DATAEE_WriteByte@bData
  7717  153E  3002               	movlw	2
  7718  153F  3197  2704  3195   	fcall	_DATAEE_WriteByte
  7719                           
  7720                           ;storage.c: 34: DATAEE_WriteByte(0 , 1);
  7721  1542  0020               	movlb	0	; select bank0
  7722  1543  01A1               	clrf	DATAEE_WriteByte@bData
  7723  1544  0AA1               	incf	DATAEE_WriteByte@bData,f
  7724  1545  3000               	movlw	0
  7725  1546  3197  2704         	fcall	_DATAEE_WriteByte
  7726  1548  0008               	return
  7727  1549                     __end_of_Storage_save:	
  7728                           
  7729                           	psect	text18
  7730  1704                     __ptext18:	
  7731 ;; *************** function _DATAEE_WriteByte *****************
  7732 ;; Defined at:
  7733 ;;		line 186 in file "mcc_generated_files/memory.c"
  7734 ;; Parameters:    Size  Location     Type
  7735 ;;  bAdd            1    wreg     unsigned char 
  7736 ;;  bData           1    1[BANK0 ] unsigned char 
  7737 ;; Auto vars:     Size  Location     Type
  7738 ;;  bAdd            1    2[BANK0 ] unsigned char 
  7739 ;;  GIEBitValue     1    3[BANK0 ] unsigned char 
  7740 ;; Return value:  Size  Location     Type
  7741 ;;                  1    wreg      void 
  7742 ;; Registers used:
  7743 ;;		wreg, status,2, status,0
  7744 ;; Tracked objects:
  7745 ;;		On entry : 0/0
  7746 ;;		On exit  : 0/0
  7747 ;;		Unchanged: 0/0
  7748 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7749 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7750 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7751 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7752 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7753 ;;Total ram usage:        3 bytes
  7754 ;; Hardware stack levels used:    1
  7755 ;; Hardware stack levels required when called:    4
  7756 ;; This function calls:
  7757 ;;		Nothing
  7758 ;; This function is called by:
  7759 ;;		_Storage_save
  7760 ;;		_Storage_load
  7761 ;; This function uses a non-reentrant model
  7762 ;;
  7763                           
  7764                           
  7765                           ;psect for function _DATAEE_WriteByte
  7766  1704                     _DATAEE_WriteByte:	
  7767                           
  7768                           ;incstack = 0
  7769                           ; Regs used in _DATAEE_WriteByte: [wreg+status,2+status,0]
  7770                           ;DATAEE_WriteByte@bAdd stored from wreg
  7771  1704  0020               	movlb	0	; select bank0
  7772  1705  00A2               	movwf	DATAEE_WriteByte@bAdd
  7773                           
  7774                           ;memory.c: 188: uint8_t GIEBitValue = 0;
  7775  1706  01A3               	clrf	DATAEE_WriteByte@GIEBitValue
  7776                           
  7777                           ;memory.c: 190: EEADRL = (uint8_t)(bAdd & 0x0ff);
  7778  1707  0822               	movf	DATAEE_WriteByte@bAdd,w
  7779  1708  0023               	movlb	3	; select bank3
  7780  1709  0091               	movwf	17	;volatile
  7781                           
  7782                           ;memory.c: 191: EEDATL = bData;
  7783  170A  0020               	movlb	0	; select bank0
  7784  170B  0821               	movf	DATAEE_WriteByte@bData,w
  7785  170C  0023               	movlb	3	; select bank3
  7786  170D  0093               	movwf	19	;volatile
  7787                           
  7788                           ;memory.c: 192: EECON1bits.EEPGD = 0;
  7789  170E  1395               	bcf	21,7	;volsfr
  7790                           
  7791                           ;memory.c: 193: EECON1bits.CFGS = 0;
  7792  170F  1315               	bcf	21,6	;volsfr
  7793                           
  7794                           ;memory.c: 194: EECON1bits.WREN = 1;
  7795  1710  1515               	bsf	21,2	;volsfr
  7796                           
  7797                           ;memory.c: 196: GIEBitValue = INTCONbits.GIE;
  7798  1711  3000               	movlw	0
  7799  1712  1B8B               	btfsc	11,7	;volatile
  7800  1713  3001               	movlw	1
  7801  1714  0020               	movlb	0	; select bank0
  7802  1715  00A3               	movwf	DATAEE_WriteByte@GIEBitValue
  7803                           
  7804                           ;memory.c: 197: INTCONbits.GIE = 0;
  7805  1716  138B               	bcf	11,7	;volatile
  7806                           
  7807                           ;memory.c: 198: EECON2 = 0x55;
  7808  1717  3055               	movlw	85
  7809  1718  0023               	movlb	3	; select bank3
  7810  1719  0096               	movwf	22	;volsfr
  7811                           
  7812                           ;memory.c: 199: EECON2 = 0xAA;
  7813  171A  30AA               	movlw	170
  7814  171B  0096               	movwf	22	;volsfr
  7815                           
  7816                           ;memory.c: 200: EECON1bits.WR = 1;
  7817  171C  1495               	bsf	21,1	;volsfr
  7818  171D                     l498:	
  7819                           ;memory.c: 203: {
  7820                           
  7821                           ;memory.c: 202: while (EECON1bits.WR)
  7822                           
  7823  171D  1895               	btfsc	21,1	;volsfr
  7824  171E  2F1D               	goto	l498
  7825                           
  7826                           ;memory.c: 204: }
  7827                           ;memory.c: 206: EECON1bits.WREN = 0;
  7828  171F  1115               	bcf	21,2	;volsfr
  7829                           
  7830                           ;memory.c: 207: INTCONbits.GIE = GIEBitValue;
  7831  1720  0020               	movlb	0	; select bank0
  7832  1721  0C23               	rrf	DATAEE_WriteByte@GIEBitValue,w
  7833  1722  1C03               	skipc
  7834  1723  138B               	bcf	11,7	;volatile
  7835  1724  1803               	skipnc
  7836  1725  178B               	bsf	11,7	;volatile
  7837  1726  0008               	return
  7838  1727                     __end_of_DATAEE_WriteByte:	
  7839                           
  7840                           	psect	text19
  7841  136D                     __ptext19:	
  7842 ;; *************** function _DOOR_resetPos *****************
  7843 ;; Defined at:
  7844 ;;		line 94 in file "doorlogic.c"
  7845 ;; Parameters:    Size  Location     Type
  7846 ;;		None
  7847 ;; Auto vars:     Size  Location     Type
  7848 ;;		None
  7849 ;; Return value:  Size  Location     Type
  7850 ;;                  1    wreg      enum E3332
  7851 ;; Registers used:
  7852 ;;		status,2
  7853 ;; Tracked objects:
  7854 ;;		On entry : 0/0
  7855 ;;		On exit  : 0/0
  7856 ;;		Unchanged: 0/0
  7857 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7858 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7859 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7860 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7861 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7862 ;;Total ram usage:        0 bytes
  7863 ;; Hardware stack levels used:    1
  7864 ;; Hardware stack levels required when called:    4
  7865 ;; This function calls:
  7866 ;;		Nothing
  7867 ;; This function is called by:
  7868 ;;		_Wireless_checkDataReceived
  7869 ;; This function uses a non-reentrant model
  7870 ;;
  7871                           
  7872                           
  7873                           ;psect for function _DOOR_resetPos
  7874  136D                     _DOOR_resetPos:	
  7875                           
  7876                           ;doorlogic.c: 96: initialised=0;
  7877                           
  7878                           ;incstack = 0
  7879                           ; Regs used in _DOOR_resetPos: [status,2]
  7880  136D  0021               	movlb	1	; select bank1
  7881  136E  01DB               	clrf	_initialised^(0+128)
  7882  136F  0008               	return
  7883  1370                     __end_of_DOOR_resetPos:	
  7884                           ;doorlogic.c: 97: return(DOOR_CLOSED);
  7885                           ;	Return value of _DOOR_resetPos is never used
  7886                           
  7887                           
  7888                           	psect	text20
  7889  08BF                     __ptext20:	
  7890 ;; *************** function _Sensor_getSupplyVoltage *****************
  7891 ;; Defined at:
  7892 ;;		line 6 in file "sensors.c"
  7893 ;; Parameters:    Size  Location     Type
  7894 ;;		None
  7895 ;; Auto vars:     Size  Location     Type
  7896 ;;  voltage         3   36[BANK0 ] float 
  7897 ;;  res             2   39[BANK0 ] unsigned short 
  7898 ;; Return value:  Size  Location     Type
  7899 ;;                  3   33[BANK0 ] float 
  7900 ;; Registers used:
  7901 ;;		wreg, status,2, status,0, pclath, cstack
  7902 ;; Tracked objects:
  7903 ;;		On entry : 0/0
  7904 ;;		On exit  : 0/0
  7905 ;;		Unchanged: 0/0
  7906 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7907 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7908 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7909 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7910 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7911 ;;Total ram usage:        8 bytes
  7912 ;; Hardware stack levels used:    1
  7913 ;; Hardware stack levels required when called:    6
  7914 ;; This function calls:
  7915 ;;		_ADC_GetConversionResult
  7916 ;;		_ADC_IsConversionDone
  7917 ;;		_ADC_SelectChannel
  7918 ;;		_ADC_StartConversion
  7919 ;;		_FVR_IsOutputReady
  7920 ;;		_Sensor_peripheralSleep
  7921 ;;		_Sensor_peripheralWake
  7922 ;;		___ftdiv
  7923 ;;		___lwtoft
  7924 ;; This function is called by:
  7925 ;;		_Wireless_packageData
  7926 ;; This function uses a non-reentrant model
  7927 ;;
  7928                           
  7929                           
  7930                           ;psect for function _Sensor_getSupplyVoltage
  7931  08BF                     _Sensor_getSupplyVoltage:	
  7932                           
  7933                           ;sensors.c: 8: u16 res;
  7934                           ;sensors.c: 9: float voltage;
  7935                           ;sensors.c: 11: Sensor_peripheralWake();
  7936                           
  7937                           ;incstack = 0
  7938                           ; Regs used in _Sensor_getSupplyVoltage: [wreg+status,2+status,0+pclath+cstack]
  7939  08BF  3193  2388  3188   	fcall	_Sensor_peripheralWake
  7940  08C2                     l5748:	
  7941                           ;sensors.c: 12: while(!FVR_IsOutputReady());
  7942                           
  7943  08C2  3193  239E  3188   	fcall	_FVR_IsOutputReady
  7944  08C5  3A00               	xorlw	0
  7945  08C6  1903               	skipnz
  7946  08C7  28C2               	goto	l5748
  7947                           
  7948                           ;sensors.c: 13: ADC_SelectChannel(channel_FVR);
  7949  08C8  301F               	movlw	31
  7950  08C9  3194  243E  3188   	fcall	_ADC_SelectChannel
  7951                           
  7952                           ;sensors.c: 14: ADC_StartConversion();
  7953  08CC  3193  236A  3188   	fcall	_ADC_StartConversion
  7954  08CF                     l5754:	
  7955                           ;sensors.c: 15: while(!ADC_IsConversionDone());
  7956                           
  7957  08CF  3193  23B2  3188   	fcall	_ADC_IsConversionDone
  7958  08D2  3A00               	xorlw	0
  7959  08D3  1903               	skipnz
  7960  08D4  28CF               	goto	l5754
  7961                           
  7962                           ;sensors.c: 16: Sensor_peripheralSleep();
  7963  08D5  3193  2383  3188   	fcall	_Sensor_peripheralSleep
  7964                           
  7965                           ;sensors.c: 17: res=ADC_GetConversionResult();
  7966  08D8  3193  23F5  3188   	fcall	_ADC_GetConversionResult
  7967  08DB  0020               	movlb	0	; select bank0
  7968  08DC  0822               	movf	?_ADC_GetConversionResult+1,w
  7969  08DD  00C8               	movwf	Sensor_getSupplyVoltage@res+1
  7970  08DE  0821               	movf	?_ADC_GetConversionResult,w
  7971  08DF  00C7               	movwf	Sensor_getSupplyVoltage@res
  7972                           
  7973                           ;sensors.c: 19: voltage= (float) 1.024 * 1024/(float)res;
  7974  08E0  0848               	movf	Sensor_getSupplyVoltage@res+1,w
  7975  08E1  00AA               	movwf	___lwtoft@c+1
  7976  08E2  0847               	movf	Sensor_getSupplyVoltage@res,w
  7977  08E3  00A9               	movwf	___lwtoft@c
  7978  08E4  3194  24A6  3188   	fcall	___lwtoft
  7979  08E7  0020               	movlb	0	; select bank0
  7980  08E8  0829               	movf	?___lwtoft,w
  7981  08E9  00B1               	movwf	___ftdiv@f2
  7982  08EA  082A               	movf	?___lwtoft+1,w
  7983  08EB  00B2               	movwf	___ftdiv@f2+1
  7984  08EC  082B               	movf	?___lwtoft+2,w
  7985  08ED  00B3               	movwf	___ftdiv@f2+2
  7986  08EE  3012               	movlw	18
  7987  08EF  00B4               	movwf	___ftdiv@f1
  7988  08F0  3083               	movlw	131
  7989  08F1  00B5               	movwf	___ftdiv@f1+1
  7990  08F2  3044               	movlw	68
  7991  08F3  00B6               	movwf	___ftdiv@f1+2
  7992  08F4  318D  25D9         	fcall	___ftdiv
  7993  08F6  0020               	movlb	0	; select bank0
  7994  08F7  0831               	movf	?___ftdiv,w
  7995  08F8  00C4               	movwf	Sensor_getSupplyVoltage@voltage
  7996  08F9  0832               	movf	?___ftdiv+1,w
  7997  08FA  00C5               	movwf	Sensor_getSupplyVoltage@voltage+1
  7998  08FB  0833               	movf	?___ftdiv+2,w
  7999  08FC  00C6               	movwf	Sensor_getSupplyVoltage@voltage+2
  8000                           
  8001                           ;sensors.c: 20: return(voltage);
  8002  08FD  0844               	movf	Sensor_getSupplyVoltage@voltage,w
  8003  08FE  00C1               	movwf	?_Sensor_getSupplyVoltage
  8004  08FF  0845               	movf	Sensor_getSupplyVoltage@voltage+1,w
  8005  0900  00C2               	movwf	?_Sensor_getSupplyVoltage+1
  8006  0901  0846               	movf	Sensor_getSupplyVoltage@voltage+2,w
  8007  0902  00C3               	movwf	?_Sensor_getSupplyVoltage+2
  8008  0903  0008               	return
  8009  0904                     __end_of_Sensor_getSupplyVoltage:	
  8010                           
  8011                           	psect	text21
  8012  1388                     __ptext21:	
  8013 ;; *************** function _Sensor_peripheralWake *****************
  8014 ;; Defined at:
  8015 ;;		line 32 in file "sensors.c"
  8016 ;; Parameters:    Size  Location     Type
  8017 ;;		None
  8018 ;; Auto vars:     Size  Location     Type
  8019 ;;		None
  8020 ;; Return value:  Size  Location     Type
  8021 ;;                  1    wreg      void 
  8022 ;; Registers used:
  8023 ;;		None
  8024 ;; Tracked objects:
  8025 ;;		On entry : 0/0
  8026 ;;		On exit  : 0/0
  8027 ;;		Unchanged: 0/0
  8028 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8029 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8030 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8031 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8032 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8033 ;;Total ram usage:        0 bytes
  8034 ;; Hardware stack levels used:    1
  8035 ;; Hardware stack levels required when called:    4
  8036 ;; This function calls:
  8037 ;;		Nothing
  8038 ;; This function is called by:
  8039 ;;		_Sensor_getSupplyVoltage
  8040 ;; This function uses a non-reentrant model
  8041 ;;
  8042                           
  8043                           
  8044                           ;psect for function _Sensor_peripheralWake
  8045  1388                     _Sensor_peripheralWake:	
  8046                           
  8047                           ;sensors.c: 34: ADCON0bits.ADON=1;
  8048                           
  8049                           ;incstack = 0
  8050                           ; Regs used in _Sensor_peripheralWake: []
  8051  1388  0021               	movlb	1	; select bank1
  8052  1389  141D               	bsf	29,0	;volatile
  8053                           
  8054                           ;sensors.c: 35: FVRCONbits.FVREN=1;
  8055  138A  0022               	movlb	2	; select bank2
  8056  138B  1797               	bsf	23,7	;volatile
  8057  138C  0008               	return
  8058  138D                     __end_of_Sensor_peripheralWake:	
  8059                           
  8060                           	psect	text22
  8061  1383                     __ptext22:	
  8062 ;; *************** function _Sensor_peripheralSleep *****************
  8063 ;; Defined at:
  8064 ;;		line 26 in file "sensors.c"
  8065 ;; Parameters:    Size  Location     Type
  8066 ;;		None
  8067 ;; Auto vars:     Size  Location     Type
  8068 ;;		None
  8069 ;; Return value:  Size  Location     Type
  8070 ;;                  1    wreg      void 
  8071 ;; Registers used:
  8072 ;;		None
  8073 ;; Tracked objects:
  8074 ;;		On entry : 0/0
  8075 ;;		On exit  : 0/0
  8076 ;;		Unchanged: 0/0
  8077 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8078 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8079 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8080 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8081 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8082 ;;Total ram usage:        0 bytes
  8083 ;; Hardware stack levels used:    1
  8084 ;; Hardware stack levels required when called:    4
  8085 ;; This function calls:
  8086 ;;		Nothing
  8087 ;; This function is called by:
  8088 ;;		_Sensor_getSupplyVoltage
  8089 ;;		_main
  8090 ;; This function uses a non-reentrant model
  8091 ;;
  8092                           
  8093                           
  8094                           ;psect for function _Sensor_peripheralSleep
  8095  1383                     _Sensor_peripheralSleep:	
  8096                           
  8097                           ;sensors.c: 28: ADCON0bits.ADON=0;
  8098                           
  8099                           ;incstack = 0
  8100                           ; Regs used in _Sensor_peripheralSleep: []
  8101  1383  0021               	movlb	1	; select bank1
  8102  1384  101D               	bcf	29,0	;volatile
  8103                           
  8104                           ;sensors.c: 29: FVRCONbits.FVREN=0;
  8105  1385  0022               	movlb	2	; select bank2
  8106  1386  1397               	bcf	23,7	;volatile
  8107  1387  0008               	return
  8108  1388                     __end_of_Sensor_peripheralSleep:	
  8109                           
  8110                           	psect	text23
  8111  139E                     __ptext23:	
  8112 ;; *************** function _FVR_IsOutputReady *****************
  8113 ;; Defined at:
  8114 ;;		line 63 in file "mcc_generated_files/fvr.c"
  8115 ;; Parameters:    Size  Location     Type
  8116 ;;		None
  8117 ;; Auto vars:     Size  Location     Type
  8118 ;;		None
  8119 ;; Return value:  Size  Location     Type
  8120 ;;                  1    wreg      unsigned char 
  8121 ;; Registers used:
  8122 ;;		wreg, status,2, status,0
  8123 ;; Tracked objects:
  8124 ;;		On entry : 0/0
  8125 ;;		On exit  : 0/0
  8126 ;;		Unchanged: 0/0
  8127 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8128 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8129 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8130 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8131 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8132 ;;Total ram usage:        0 bytes
  8133 ;; Hardware stack levels used:    1
  8134 ;; Hardware stack levels required when called:    4
  8135 ;; This function calls:
  8136 ;;		Nothing
  8137 ;; This function is called by:
  8138 ;;		_Sensor_getSupplyVoltage
  8139 ;; This function uses a non-reentrant model
  8140 ;;
  8141                           
  8142                           
  8143                           ;psect for function _FVR_IsOutputReady
  8144  139E                     _FVR_IsOutputReady:	
  8145                           
  8146                           ;fvr.c: 65: return (FVRCONbits.FVRRDY);
  8147                           
  8148                           ;incstack = 0
  8149                           ; Regs used in _FVR_IsOutputReady: [wreg+status,2+status,0]
  8150  139E  0022               	movlb	2	; select bank2
  8151  139F  0E17               	swapf	23,w	;volatile
  8152  13A0  0C89               	rrf	9,f
  8153  13A1  0C89               	rrf	9,f
  8154  13A2  3901               	andlw	1
  8155  13A3  0008               	return
  8156  13A4                     __end_of_FVR_IsOutputReady:	
  8157                           
  8158                           	psect	text24
  8159  136A                     __ptext24:	
  8160 ;; *************** function _ADC_StartConversion *****************
  8161 ;; Defined at:
  8162 ;;		line 88 in file "mcc_generated_files/adc.c"
  8163 ;; Parameters:    Size  Location     Type
  8164 ;;		None
  8165 ;; Auto vars:     Size  Location     Type
  8166 ;;		None
  8167 ;; Return value:  Size  Location     Type
  8168 ;;                  1    wreg      void 
  8169 ;; Registers used:
  8170 ;;		None
  8171 ;; Tracked objects:
  8172 ;;		On entry : 0/0
  8173 ;;		On exit  : 0/0
  8174 ;;		Unchanged: 0/0
  8175 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8176 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8177 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8178 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8179 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8180 ;;Total ram usage:        0 bytes
  8181 ;; Hardware stack levels used:    1
  8182 ;; Hardware stack levels required when called:    4
  8183 ;; This function calls:
  8184 ;;		Nothing
  8185 ;; This function is called by:
  8186 ;;		_Sensor_getSupplyVoltage
  8187 ;; This function uses a non-reentrant model
  8188 ;;
  8189                           
  8190                           
  8191                           ;psect for function _ADC_StartConversion
  8192  136A                     _ADC_StartConversion:	
  8193                           
  8194                           ;adc.c: 91: ADCON0bits.GO_nDONE = 1;
  8195                           
  8196                           ;incstack = 0
  8197                           ; Regs used in _ADC_StartConversion: []
  8198  136A  0021               	movlb	1	; select bank1
  8199  136B  149D               	bsf	29,1	;volatile
  8200  136C  0008               	return
  8201  136D                     __end_of_ADC_StartConversion:	
  8202                           
  8203                           	psect	text25
  8204  143E                     __ptext25:	
  8205 ;; *************** function _ADC_SelectChannel *****************
  8206 ;; Defined at:
  8207 ;;		line 80 in file "mcc_generated_files/adc.c"
  8208 ;; Parameters:    Size  Location     Type
  8209 ;;  channel         1    wreg     enum E2996
  8210 ;; Auto vars:     Size  Location     Type
  8211 ;;  channel         1    2[BANK0 ] enum E2996
  8212 ;; Return value:  Size  Location     Type
  8213 ;;                  1    wreg      void 
  8214 ;; Registers used:
  8215 ;;		wreg, status,2, status,0
  8216 ;; Tracked objects:
  8217 ;;		On entry : 0/0
  8218 ;;		On exit  : 0/0
  8219 ;;		Unchanged: 0/0
  8220 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8221 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8222 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8223 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8224 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8225 ;;Total ram usage:        2 bytes
  8226 ;; Hardware stack levels used:    1
  8227 ;; Hardware stack levels required when called:    4
  8228 ;; This function calls:
  8229 ;;		Nothing
  8230 ;; This function is called by:
  8231 ;;		_Sensor_getSupplyVoltage
  8232 ;; This function uses a non-reentrant model
  8233 ;;
  8234                           
  8235                           
  8236                           ;psect for function _ADC_SelectChannel
  8237  143E                     _ADC_SelectChannel:	
  8238                           
  8239                           ;incstack = 0
  8240                           ; Regs used in _ADC_SelectChannel: [wreg+status,2+status,0]
  8241                           ;ADC_SelectChannel@channel stored from wreg
  8242  143E  0020               	movlb	0	; select bank0
  8243  143F  00A2               	movwf	ADC_SelectChannel@channel
  8244                           
  8245                           ;adc.c: 83: ADCON0bits.CHS = channel;
  8246  1440  0822               	movf	ADC_SelectChannel@channel,w
  8247  1441  00A1               	movwf	??_ADC_SelectChannel
  8248  1442  0DA1               	rlf	??_ADC_SelectChannel,f
  8249  1443  0DA1               	rlf	??_ADC_SelectChannel,f
  8250  1444  0021               	movlb	1	; select bank1
  8251  1445  081D               	movf	29,w	;volatile
  8252  1446  0020               	movlb	0	; select bank0
  8253  1447  0621               	xorwf	??_ADC_SelectChannel,w
  8254  1448  3983               	andlw	-125
  8255  1449  0621               	xorwf	??_ADC_SelectChannel,w
  8256  144A  0021               	movlb	1	; select bank1
  8257  144B  009D               	movwf	29	;volatile
  8258                           
  8259                           ;adc.c: 85: ADCON0bits.ADON = 1;
  8260  144C  141D               	bsf	29,0	;volatile
  8261  144D  0008               	return
  8262  144E                     __end_of_ADC_SelectChannel:	
  8263                           
  8264                           	psect	text26
  8265  13B2                     __ptext26:	
  8266 ;; *************** function _ADC_IsConversionDone *****************
  8267 ;; Defined at:
  8268 ;;		line 95 in file "mcc_generated_files/adc.c"
  8269 ;; Parameters:    Size  Location     Type
  8270 ;;		None
  8271 ;; Auto vars:     Size  Location     Type
  8272 ;;		None
  8273 ;; Return value:  Size  Location     Type
  8274 ;;                  1    wreg      unsigned char 
  8275 ;; Registers used:
  8276 ;;		wreg, status,0
  8277 ;; Tracked objects:
  8278 ;;		On entry : 0/0
  8279 ;;		On exit  : 0/0
  8280 ;;		Unchanged: 0/0
  8281 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8282 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8283 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8284 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8285 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8286 ;;Total ram usage:        0 bytes
  8287 ;; Hardware stack levels used:    1
  8288 ;; Hardware stack levels required when called:    4
  8289 ;; This function calls:
  8290 ;;		Nothing
  8291 ;; This function is called by:
  8292 ;;		_Sensor_getSupplyVoltage
  8293 ;; This function uses a non-reentrant model
  8294 ;;
  8295                           
  8296                           
  8297                           ;psect for function _ADC_IsConversionDone
  8298  13B2                     _ADC_IsConversionDone:	
  8299                           
  8300                           ;adc.c: 98: return ((bool)(!ADCON0bits.GO_nDONE));
  8301                           
  8302                           ;incstack = 0
  8303                           ; Regs used in _ADC_IsConversionDone: [wreg+status,0]
  8304  13B2  1003               	clrc
  8305  13B3  0021               	movlb	1	; select bank1
  8306  13B4  1C9D               	btfss	29,1	;volatile
  8307  13B5  1403               	setc
  8308  13B6  3000               	movlw	0
  8309  13B7  3D09               	addwfc	9,w
  8310  13B8  0008               	return
  8311  13B9                     __end_of_ADC_IsConversionDone:	
  8312                           
  8313                           	psect	text27
  8314  13F5                     __ptext27:	
  8315 ;; *************** function _ADC_GetConversionResult *****************
  8316 ;; Defined at:
  8317 ;;		line 101 in file "mcc_generated_files/adc.c"
  8318 ;; Parameters:    Size  Location     Type
  8319 ;;		None
  8320 ;; Auto vars:     Size  Location     Type
  8321 ;;		None
  8322 ;; Return value:  Size  Location     Type
  8323 ;;                  2    1[BANK0 ] unsigned int 
  8324 ;; Registers used:
  8325 ;;		wreg
  8326 ;; Tracked objects:
  8327 ;;		On entry : 0/0
  8328 ;;		On exit  : 0/0
  8329 ;;		Unchanged: 0/0
  8330 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8331 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8332 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8333 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8334 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8335 ;;Total ram usage:        2 bytes
  8336 ;; Hardware stack levels used:    1
  8337 ;; Hardware stack levels required when called:    4
  8338 ;; This function calls:
  8339 ;;		Nothing
  8340 ;; This function is called by:
  8341 ;;		_Sensor_getSupplyVoltage
  8342 ;; This function uses a non-reentrant model
  8343 ;;
  8344                           
  8345                           
  8346                           ;psect for function _ADC_GetConversionResult
  8347  13F5                     _ADC_GetConversionResult:	
  8348                           
  8349                           ;adc.c: 104: return ((adc_result_t)((ADRESH << 8) + ADRESL));
  8350                           
  8351                           ;incstack = 0
  8352                           ; Regs used in _ADC_GetConversionResult: [wreg]
  8353  13F5  0021               	movlb	1	; select bank1
  8354  13F6  081C               	movf	28,w	;volatile
  8355  13F7  0020               	movlb	0	; select bank0
  8356  13F8  00A2               	movwf	?_ADC_GetConversionResult+1
  8357  13F9  0021               	movlb	1	; select bank1
  8358  13FA  081B               	movf	27,w	;volatile
  8359  13FB  0020               	movlb	0	; select bank0
  8360  13FC  00A1               	movwf	?_ADC_GetConversionResult
  8361  13FD  0008               	return
  8362  13FE                     __end_of_ADC_GetConversionResult:	
  8363                           
  8364                           	psect	text28
  8365  1481                     __ptext28:	
  8366 ;; *************** function _Diag_getSensorHealth *****************
  8367 ;; Defined at:
  8368 ;;		line 35 in file "diagnostics.c"
  8369 ;; Parameters:    Size  Location     Type
  8370 ;;		None
  8371 ;; Auto vars:     Size  Location     Type
  8372 ;;  var             1    2[BANK0 ] unsigned char 
  8373 ;; Return value:  Size  Location     Type
  8374 ;;                  1    wreg      unsigned char 
  8375 ;; Registers used:
  8376 ;;		wreg, status,2, status,0
  8377 ;; Tracked objects:
  8378 ;;		On entry : 0/0
  8379 ;;		On exit  : 0/0
  8380 ;;		Unchanged: 0/0
  8381 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8382 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8383 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8384 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8385 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8386 ;;Total ram usage:        2 bytes
  8387 ;; Hardware stack levels used:    1
  8388 ;; Hardware stack levels required when called:    4
  8389 ;; This function calls:
  8390 ;;		Nothing
  8391 ;; This function is called by:
  8392 ;;		_Wireless_packageData
  8393 ;; This function uses a non-reentrant model
  8394 ;;
  8395                           
  8396                           
  8397                           ;psect for function _Diag_getSensorHealth
  8398  1481                     _Diag_getSensorHealth:	
  8399                           
  8400                           ;diagnostics.c: 38: char var=0;
  8401                           
  8402                           ;incstack = 0
  8403                           ; Regs used in _Diag_getSensorHealth: [wreg+status,2+status,0]
  8404  1481  0020               	movlb	0	; select bank0
  8405  1482  01A2               	clrf	Diag_getSensorHealth@var
  8406                           
  8407                           ;diagnostics.c: 40: var|=sensorHealth.compassHealth;
  8408  1483  0021               	movlb	1	; select bank1
  8409  1484  0864               	movf	(_sensorHealth^(0+128)+1),w
  8410  1485  0020               	movlb	0	; select bank0
  8411  1486  00A1               	movwf	??_Diag_getSensorHealth
  8412  1487  0821               	movf	??_Diag_getSensorHealth,w
  8413  1488  04A2               	iorwf	Diag_getSensorHealth@var,f
  8414                           
  8415                           ;diagnostics.c: 41: var<<=1;
  8416  1489  1003               	clrc
  8417  148A  0DA2               	rlf	Diag_getSensorHealth@var,f
  8418                           
  8419                           ;diagnostics.c: 42: var|=sensorHealth.tempSensorHealth;
  8420  148B  0021               	movlb	1	; select bank1
  8421  148C  0863               	movf	_sensorHealth^(0+128),w
  8422  148D  0020               	movlb	0	; select bank0
  8423  148E  00A1               	movwf	??_Diag_getSensorHealth
  8424  148F  0821               	movf	??_Diag_getSensorHealth,w
  8425  1490  04A2               	iorwf	Diag_getSensorHealth@var,f
  8426                           
  8427                           ;diagnostics.c: 44: return var;
  8428  1491  0822               	movf	Diag_getSensorHealth@var,w
  8429  1492  0008               	return
  8430  1493                     __end_of_Diag_getSensorHealth:	
  8431                           
  8432                           	psect	text29
  8433  0CBF                     __ptext29:	
  8434 ;; *************** function _Wireless_init *****************
  8435 ;; Defined at:
  8436 ;;		line 11 in file "wireless.c"
  8437 ;; Parameters:    Size  Location     Type
  8438 ;;		None
  8439 ;; Auto vars:     Size  Location     Type
  8440 ;;		None
  8441 ;; Return value:  Size  Location     Type
  8442 ;;                  1    wreg      void 
  8443 ;; Registers used:
  8444 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  8445 ;; Tracked objects:
  8446 ;;		On entry : 0/0
  8447 ;;		On exit  : 0/0
  8448 ;;		Unchanged: 0/0
  8449 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8450 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8451 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8452 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8453 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8454 ;;Total ram usage:        2 bytes
  8455 ;; Hardware stack levels used:    1
  8456 ;; Hardware stack levels required when called:    8
  8457 ;; This function calls:
  8458 ;;		_RF_Init
  8459 ;;		_RF_ResetStatusIRQ
  8460 ;;		_RF_WriteRegister
  8461 ;;		_RF_WriteRegisterData
  8462 ;; This function is called by:
  8463 ;;		_main
  8464 ;; This function uses a non-reentrant model
  8465 ;;
  8466                           
  8467                           
  8468                           ;psect for function _Wireless_init
  8469  0CBF                     _Wireless_init:	
  8470                           
  8471                           ;wireless.c: 14: static const uint8_t TADDR[5] = "20001";
  8472                           ;wireless.c: 21: _delay((unsigned long)((100)*(8000000/4000.0)));
  8473                           
  8474                           ;incstack = 0
  8475                           ; Regs used in _Wireless_init: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  8476  0CBF  3002               	movlw	2
  8477  0CC0  0020               	movlb	0	; select bank0
  8478  0CC1  00AF               	movwf	??_Wireless_init+1
  8479  0CC2  3004               	movlw	4
  8480  0CC3  00AE               	movwf	??_Wireless_init
  8481  0CC4  30BA               	movlw	186
  8482  0CC5                     u6827:	
  8483  0CC5  0B89               	decfsz	9,f
  8484  0CC6  2CC5               	goto	u6827
  8485  0CC7  0BAE               	decfsz	??_Wireless_init,f
  8486  0CC8  2CC5               	goto	u6827
  8487  0CC9  0BAF               	decfsz	??_Wireless_init+1,f
  8488  0CCA  2CC5               	goto	u6827
  8489  0CCB  0000               	nop
  8490                           
  8491                           ;wireless.c: 23: RF_Init();
  8492  0CCC  3193  237B  318C   	fcall	_RF_Init
  8493                           
  8494                           ;wireless.c: 25: RF_WriteRegister(0x06, 0x06|0x20);
  8495  0CCF  3026               	movlw	38
  8496  0CD0  0020               	movlb	0	; select bank0
  8497  0CD1  00AE               	movwf	??_Wireless_init
  8498  0CD2  082E               	movf	??_Wireless_init,w
  8499  0CD3  00A3               	movwf	RF_WriteRegister@val
  8500  0CD4  3006               	movlw	6
  8501  0CD5  3194  24BB  318C   	fcall	_RF_WriteRegister
  8502                           
  8503                           ;wireless.c: 26: RF_WriteRegister(0x11, 5);
  8504  0CD8  3005               	movlw	5
  8505  0CD9  0020               	movlb	0	; select bank0
  8506  0CDA  00AE               	movwf	??_Wireless_init
  8507  0CDB  082E               	movf	??_Wireless_init,w
  8508  0CDC  00A3               	movwf	RF_WriteRegister@val
  8509  0CDD  3011               	movlw	17
  8510  0CDE  3194  24BB  318C   	fcall	_RF_WriteRegister
  8511                           
  8512                           ;wireless.c: 27: RF_WriteRegister(0x05, 2);
  8513  0CE1  3002               	movlw	2
  8514  0CE2  0020               	movlb	0	; select bank0
  8515  0CE3  00AE               	movwf	??_Wireless_init
  8516  0CE4  082E               	movf	??_Wireless_init,w
  8517  0CE5  00A3               	movwf	RF_WriteRegister@val
  8518  0CE6  3005               	movlw	5
  8519  0CE7  3194  24BB  318C   	fcall	_RF_WriteRegister
  8520                           
  8521                           ;wireless.c: 30: RF_WriteRegisterData(0x0A, (uint8_t*)TADDR, sizeof(TADDR));
  8522  0CEA  3021               	movlw	low (Wireless_init@TADDR| (0+32768))
  8523  0CEB  0020               	movlb	0	; select bank0
  8524  0CEC  00A9               	movwf	RF_WriteRegisterData@buf
  8525  0CED  3098               	movlw	high (Wireless_init@TADDR| (0+32768))
  8526  0CEE  00AA               	movwf	RF_WriteRegisterData@buf+1
  8527  0CEF  3005               	movlw	5
  8528  0CF0  00AE               	movwf	??_Wireless_init
  8529  0CF1  082E               	movf	??_Wireless_init,w
  8530  0CF2  00AB               	movwf	RF_WriteRegisterData@bufSize
  8531  0CF3  300A               	movlw	10
  8532  0CF4  3196  2609  318C   	fcall	_RF_WriteRegisterData
  8533                           
  8534                           ;wireless.c: 31: RF_WriteRegisterData(0x10, (uint8_t*)TADDR, sizeof(TADDR));
  8535  0CF7  3021               	movlw	low (Wireless_init@TADDR| (0+32768))
  8536  0CF8  0020               	movlb	0	; select bank0
  8537  0CF9  00A9               	movwf	RF_WriteRegisterData@buf
  8538  0CFA  3098               	movlw	high (Wireless_init@TADDR| (0+32768))
  8539  0CFB  00AA               	movwf	RF_WriteRegisterData@buf+1
  8540  0CFC  3005               	movlw	5
  8541  0CFD  00AE               	movwf	??_Wireless_init
  8542  0CFE  082E               	movf	??_Wireless_init,w
  8543  0CFF  00AB               	movwf	RF_WriteRegisterData@bufSize
  8544  0D00  3010               	movlw	16
  8545  0D01  3196  2609  318C   	fcall	_RF_WriteRegisterData
  8546                           
  8547                           ;wireless.c: 34: RF_WriteRegister(0x02, 0x01);
  8548  0D04  0020               	movlb	0	; select bank0
  8549  0D05  01A3               	clrf	RF_WriteRegister@val
  8550  0D06  0AA3               	incf	RF_WriteRegister@val,f
  8551  0D07  3002               	movlw	2
  8552  0D08  3194  24BB  318C   	fcall	_RF_WriteRegister
  8553                           
  8554                           ;wireless.c: 37: RF_ResetStatusIRQ(0x40|0x20|0x10);
  8555  0D0B  3070               	movlw	112
  8556  0D0C  3196  267F  318C   	fcall	_RF_ResetStatusIRQ
  8557                           
  8558                           ;wireless.c: 39: RF_WriteRegister(0x01, 0x01);
  8559  0D0F  0020               	movlb	0	; select bank0
  8560  0D10  01A3               	clrf	RF_WriteRegister@val
  8561  0D11  0AA3               	incf	RF_WriteRegister@val,f
  8562  0D12  3001               	movlw	1
  8563  0D13  3194  24BB  318C   	fcall	_RF_WriteRegister
  8564                           
  8565                           ;wireless.c: 40: RF_WriteRegister(0x04, 0xF0|0x01);
  8566  0D16  30F1               	movlw	241
  8567  0D17  0020               	movlb	0	; select bank0
  8568  0D18  00AE               	movwf	??_Wireless_init
  8569  0D19  082E               	movf	??_Wireless_init,w
  8570  0D1A  00A3               	movwf	RF_WriteRegister@val
  8571  0D1B  3004               	movlw	4
  8572  0D1C  3194  24BB  318C   	fcall	_RF_WriteRegister
  8573                           
  8574                           ;wireless.c: 41: RF_WriteRegister(0x00, (1<<3)|(1<<2)|(1<<1)|(0));
  8575  0D1F  300E               	movlw	14
  8576  0D20  0020               	movlb	0	; select bank0
  8577  0D21  00AE               	movwf	??_Wireless_init
  8578  0D22  082E               	movf	??_Wireless_init,w
  8579  0D23  00A3               	movwf	RF_WriteRegister@val
  8580  0D24  3000               	movlw	0
  8581  0D25  3194  24BB  318C   	fcall	_RF_WriteRegister
  8582                           
  8583                           ;wireless.c: 42: RF_WriteRegister(0x1D, (1<<2) | (1<<1));
  8584  0D28  3006               	movlw	6
  8585  0D29  0020               	movlb	0	; select bank0
  8586  0D2A  00AE               	movwf	??_Wireless_init
  8587  0D2B  082E               	movf	??_Wireless_init,w
  8588  0D2C  00A3               	movwf	RF_WriteRegister@val
  8589  0D2D  301D               	movlw	29
  8590  0D2E  3194  24BB  318C   	fcall	_RF_WriteRegister
  8591                           
  8592                           ;wireless.c: 43: RF_WriteRegister(0x1C, (1<<0));
  8593  0D31  0020               	movlb	0	; select bank0
  8594  0D32  01A3               	clrf	RF_WriteRegister@val
  8595  0D33  0AA3               	incf	RF_WriteRegister@val,f
  8596  0D34  301C               	movlw	28
  8597  0D35  3194  24BB         	fcall	_RF_WriteRegister
  8598                           
  8599                           ;wireless.c: 44: do { LATCbits.LATC2 = 0; } while(0);
  8600  0D37  0022               	movlb	2	; select bank2
  8601  0D38  110E               	bcf	14,2	;volatile
  8602  0D39  0008               	return
  8603  0D3A                     __end_of_Wireless_init:	
  8604                           
  8605                           	psect	text30
  8606  1609                     __ptext30:	
  8607 ;; *************** function _RF_WriteRegisterData *****************
  8608 ;; Defined at:
  8609 ;;		line 113 in file "nrf24.c"
  8610 ;; Parameters:    Size  Location     Type
  8611 ;;  reg             1    wreg     unsigned char 
  8612 ;;  buf             2    9[BANK0 ] PTR unsigned char 
  8613 ;;		 -> Wireless_packageData@data(5), Wireless_init@TADDR(5), 
  8614 ;;  bufSize         1   11[BANK0 ] unsigned char 
  8615 ;; Auto vars:     Size  Location     Type
  8616 ;;  reg             1   13[BANK0 ] unsigned char 
  8617 ;; Return value:  Size  Location     Type
  8618 ;;                  1    wreg      void 
  8619 ;; Registers used:
  8620 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  8621 ;; Tracked objects:
  8622 ;;		On entry : 0/0
  8623 ;;		On exit  : 0/0
  8624 ;;		Unchanged: 0/0
  8625 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8626 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8627 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8628 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8629 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8630 ;;Total ram usage:        5 bytes
  8631 ;; Hardware stack levels used:    1
  8632 ;; Hardware stack levels required when called:    7
  8633 ;; This function calls:
  8634 ;;		_SPI_WriteBuffer
  8635 ;;		_SPI_WriteRead
  8636 ;; This function is called by:
  8637 ;;		_RF_TxPayload
  8638 ;;		_Wireless_init
  8639 ;;		_RF_openWritingPipe
  8640 ;;		_RF_openReadingPipe
  8641 ;; This function uses a non-reentrant model
  8642 ;;
  8643                           
  8644                           
  8645                           ;psect for function _RF_WriteRegisterData
  8646  1609                     _RF_WriteRegisterData:	
  8647                           
  8648                           ;incstack = 0
  8649                           ; Regs used in _RF_WriteRegisterData: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  8650                           ;RF_WriteRegisterData@reg stored from wreg
  8651  1609  0020               	movlb	0	; select bank0
  8652  160A  00AD               	movwf	RF_WriteRegisterData@reg
  8653                           
  8654                           ;nrf24.c: 114: do { LATCbits.LATC1 = 0; } while(0);
  8655  160B  0022               	movlb	2	; select bank2
  8656  160C  108E               	bcf	14,1	;volatile
  8657                           
  8658                           ;nrf24.c: 115: (void)SPI_WriteRead(0x20|reg);
  8659  160D  0020               	movlb	0	; select bank0
  8660  160E  082D               	movf	RF_WriteRegisterData@reg,w
  8661  160F  3820               	iorlw	32
  8662  1610  3193  2398  3196   	fcall	_SPI_WriteRead
  8663                           
  8664                           ;nrf24.c: 116: SPI_WriteBuffer(buf, bufSize);
  8665  1613  0020               	movlb	0	; select bank0
  8666  1614  082A               	movf	RF_WriteRegisterData@buf+1,w
  8667  1615  00A4               	movwf	SPI_WriteBuffer@bufOut+1
  8668  1616  0829               	movf	RF_WriteRegisterData@buf,w
  8669  1617  00A3               	movwf	SPI_WriteBuffer@bufOut
  8670  1618  082B               	movf	RF_WriteRegisterData@bufSize,w
  8671  1619  00AC               	movwf	??_RF_WriteRegisterData
  8672  161A  082C               	movf	??_RF_WriteRegisterData,w
  8673  161B  00A5               	movwf	SPI_WriteBuffer@bufSize
  8674  161C  3195  2599  3196   	fcall	_SPI_WriteBuffer
  8675                           
  8676                           ;nrf24.c: 117: do { LATCbits.LATC1 = 1; } while(0);
  8677  161F  0022               	movlb	2	; select bank2
  8678  1620  148E               	bsf	14,1	;volatile
  8679                           
  8680                           ;nrf24.c: 118: _delay((unsigned long)((10)*(8000000/4000000.0)));
  8681  1621  3006               	movlw	6
  8682  1622                     u6837:	
  8683  1622  0B89               	decfsz	9,f
  8684  1623  2E22               	goto	u6837
  8685  1624  3200               	nop2
  8686  1625  0008               	return
  8687  1626                     __end_of_RF_WriteRegisterData:	
  8688                           
  8689                           	psect	text31
  8690  1599                     __ptext31:	
  8691 ;; *************** function _SPI_WriteBuffer *****************
  8692 ;; Defined at:
  8693 ;;		line 56 in file "nrf24.c"
  8694 ;; Parameters:    Size  Location     Type
  8695 ;;  bufOut          2    3[BANK0 ] PTR unsigned char 
  8696 ;;		 -> Wireless_packageData@data(5), Wireless_init@TADDR(5), 
  8697 ;;  bufSize         1    5[BANK0 ] unsigned char 
  8698 ;; Auto vars:     Size  Location     Type
  8699 ;;  i               1    8[BANK0 ] unsigned char 
  8700 ;; Return value:  Size  Location     Type
  8701 ;;                  1    wreg      void 
  8702 ;; Registers used:
  8703 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  8704 ;; Tracked objects:
  8705 ;;		On entry : 0/0
  8706 ;;		On exit  : 0/0
  8707 ;;		Unchanged: 0/0
  8708 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8709 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8710 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8711 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8712 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8713 ;;Total ram usage:        6 bytes
  8714 ;; Hardware stack levels used:    1
  8715 ;; Hardware stack levels required when called:    6
  8716 ;; This function calls:
  8717 ;;		_SPI_WriteRead
  8718 ;; This function is called by:
  8719 ;;		_RF_WriteRegisterData
  8720 ;; This function uses a non-reentrant model
  8721 ;;
  8722                           
  8723                           
  8724                           ;psect for function _SPI_WriteBuffer
  8725  1599                     _SPI_WriteBuffer:	
  8726                           
  8727                           ;nrf24.c: 57: uint8_t i;
  8728                           ;nrf24.c: 59: for(i=0;i<bufSize;i++) {
  8729                           
  8730                           ;incstack = 0
  8731                           ; Regs used in _SPI_WriteBuffer: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  8732  1599  0020               	movlb	0	; select bank0
  8733  159A  01A8               	clrf	SPI_WriteBuffer@i
  8734  159B                     l5348:	
  8735  159B  0825               	movf	SPI_WriteBuffer@bufSize,w
  8736  159C  0228               	subwf	SPI_WriteBuffer@i,w
  8737  159D  1803               	btfsc	3,0
  8738  159E  0008               	return
  8739                           
  8740                           ;nrf24.c: 60: (void)SPI_WriteRead(bufOut[i]);
  8741  159F  0824               	movf	SPI_WriteBuffer@bufOut+1,w
  8742  15A0  00A7               	movwf	??_SPI_WriteBuffer+1
  8743  15A1  0823               	movf	SPI_WriteBuffer@bufOut,w
  8744  15A2  00A6               	movwf	??_SPI_WriteBuffer
  8745  15A3  0828               	movf	SPI_WriteBuffer@i,w
  8746  15A4  0726               	addwf	??_SPI_WriteBuffer,w
  8747  15A5  0084               	movwf	4
  8748  15A6  0827               	movf	??_SPI_WriteBuffer+1,w
  8749  15A7  1803               	skipnc
  8750  15A8  0A27               	incf	??_SPI_WriteBuffer+1,w
  8751  15A9  0085               	movwf	5
  8752  15AA  0800               	movf	0,w	;code access
  8753  15AB  3193  2398  3195   	fcall	_SPI_WriteRead
  8754  15AE  3001               	movlw	1
  8755  15AF  0020               	movlb	0	; select bank0
  8756  15B0  00A6               	movwf	??_SPI_WriteBuffer
  8757  15B1  0826               	movf	??_SPI_WriteBuffer,w
  8758  15B2  07A8               	addwf	SPI_WriteBuffer@i,f
  8759  15B3  2D9B               	goto	l5348
  8760  15B4                     __end_of_SPI_WriteBuffer:	
  8761                           
  8762                           	psect	text32
  8763  167F                     __ptext32:	
  8764 ;; *************** function _RF_ResetStatusIRQ *****************
  8765 ;; Defined at:
  8766 ;;		line 158 in file "nrf24.c"
  8767 ;; Parameters:    Size  Location     Type
  8768 ;;  flags           1    wreg     unsigned char 
  8769 ;; Auto vars:     Size  Location     Type
  8770 ;;  flags           1    6[BANK0 ] unsigned char 
  8771 ;; Return value:  Size  Location     Type
  8772 ;;                  1    wreg      void 
  8773 ;; Registers used:
  8774 ;;		wreg, status,2, status,0, pclath, cstack
  8775 ;; Tracked objects:
  8776 ;;		On entry : 0/0
  8777 ;;		On exit  : 0/0
  8778 ;;		Unchanged: 0/0
  8779 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8780 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8781 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8782 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8783 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8784 ;;Total ram usage:        2 bytes
  8785 ;; Hardware stack levels used:    1
  8786 ;; Hardware stack levels required when called:    7
  8787 ;; This function calls:
  8788 ;;		_RF_WriteRegister
  8789 ;; This function is called by:
  8790 ;;		_Wireless_init
  8791 ;;		_Wireless_sendData
  8792 ;; This function uses a non-reentrant model
  8793 ;;
  8794                           
  8795                           
  8796                           ;psect for function _RF_ResetStatusIRQ
  8797  167F                     _RF_ResetStatusIRQ:	
  8798                           
  8799                           ;incstack = 0
  8800                           ; Regs used in _RF_ResetStatusIRQ: [wreg+status,2+status,0+pclath+cstack]
  8801                           ;RF_ResetStatusIRQ@flags stored from wreg
  8802  167F  0020               	movlb	0	; select bank0
  8803  1680  00A6               	movwf	RF_ResetStatusIRQ@flags
  8804                           
  8805                           ;nrf24.c: 159: _delay((unsigned long)((10)*(8000000/4000000.0)));
  8806  1681  3006               	movlw	6
  8807  1682                     u6847:	
  8808  1682  0B89               	decfsz	9,f
  8809  1683  2E82               	goto	u6847
  8810  1684  3200               	nop2
  8811                           
  8812                           ;nrf24.c: 160: do { LATCbits.LATC1 = 0; } while(0);
  8813  1685  0022               	movlb	2	; select bank2
  8814  1686  108E               	bcf	14,1	;volatile
  8815                           
  8816                           ;nrf24.c: 161: _delay((unsigned long)((10)*(8000000/4000000.0)));
  8817  1687  3006               	movlw	6
  8818  1688                     u6857:	
  8819  1688  0B89               	decfsz	9,f
  8820  1689  2E88               	goto	u6857
  8821  168A  3200               	nop2
  8822                           
  8823                           ;nrf24.c: 162: RF_WriteRegister(0x07, flags);
  8824  168B  0020               	movlb	0	; select bank0
  8825  168C  0826               	movf	RF_ResetStatusIRQ@flags,w
  8826  168D  00A5               	movwf	??_RF_ResetStatusIRQ
  8827  168E  0825               	movf	??_RF_ResetStatusIRQ,w
  8828  168F  00A3               	movwf	RF_WriteRegister@val
  8829  1690  3007               	movlw	7
  8830  1691  3194  24BB  3196   	fcall	_RF_WriteRegister
  8831                           
  8832                           ;nrf24.c: 163: _delay((unsigned long)((10)*(8000000/4000000.0)));
  8833  1694  3006               	movlw	6
  8834  1695                     u6867:	
  8835  1695  0B89               	decfsz	9,f
  8836  1696  2E95               	goto	u6867
  8837  1697  3200               	nop2
  8838                           
  8839                           ;nrf24.c: 164: do { LATCbits.LATC1 = 1; } while(0);
  8840  1698  0022               	movlb	2	; select bank2
  8841  1699  148E               	bsf	14,1	;volatile
  8842                           
  8843                           ;nrf24.c: 165: _delay((unsigned long)((10)*(8000000/4000000.0)));
  8844  169A  3006               	movlw	6
  8845  169B                     u6877:	
  8846  169B  0B89               	decfsz	9,f
  8847  169C  2E9B               	goto	u6877
  8848  169D  3200               	nop2
  8849  169E  0008               	return
  8850  169F                     __end_of_RF_ResetStatusIRQ:	
  8851                           
  8852                           	psect	text33
  8853  14BB                     __ptext33:	
  8854 ;; *************** function _RF_WriteRegister *****************
  8855 ;; Defined at:
  8856 ;;		line 69 in file "nrf24.c"
  8857 ;; Parameters:    Size  Location     Type
  8858 ;;  reg             1    wreg     unsigned char 
  8859 ;;  val             1    3[BANK0 ] unsigned char 
  8860 ;; Auto vars:     Size  Location     Type
  8861 ;;  reg             1    4[BANK0 ] unsigned char 
  8862 ;; Return value:  Size  Location     Type
  8863 ;;                  1    wreg      void 
  8864 ;; Registers used:
  8865 ;;		wreg, status,2, status,0, pclath, cstack
  8866 ;; Tracked objects:
  8867 ;;		On entry : 0/0
  8868 ;;		On exit  : 0/0
  8869 ;;		Unchanged: 0/0
  8870 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8871 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8872 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8873 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8874 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8875 ;;Total ram usage:        2 bytes
  8876 ;; Hardware stack levels used:    1
  8877 ;; Hardware stack levels required when called:    6
  8878 ;; This function calls:
  8879 ;;		_SPI_WriteRead
  8880 ;; This function is called by:
  8881 ;;		_RF_ResetStatusIRQ
  8882 ;;		_Wireless_init
  8883 ;;		_Wireless_sleep
  8884 ;;		_Wireless_wake
  8885 ;; This function uses a non-reentrant model
  8886 ;;
  8887                           
  8888                           
  8889                           ;psect for function _RF_WriteRegister
  8890  14BB                     _RF_WriteRegister:	
  8891                           
  8892                           ;incstack = 0
  8893                           ; Regs used in _RF_WriteRegister: [wreg+status,2+status,0+pclath+cstack]
  8894                           ;RF_WriteRegister@reg stored from wreg
  8895  14BB  0020               	movlb	0	; select bank0
  8896  14BC  00A4               	movwf	RF_WriteRegister@reg
  8897                           
  8898                           ;nrf24.c: 70: do { LATCbits.LATC1 = 0; } while(0);
  8899  14BD  0022               	movlb	2	; select bank2
  8900  14BE  108E               	bcf	14,1	;volatile
  8901                           
  8902                           ;nrf24.c: 71: (void)SPI_WriteRead(0x20|reg);
  8903  14BF  0020               	movlb	0	; select bank0
  8904  14C0  0824               	movf	RF_WriteRegister@reg,w
  8905  14C1  3820               	iorlw	32
  8906  14C2  3193  2398  3194   	fcall	_SPI_WriteRead
  8907                           
  8908                           ;nrf24.c: 72: (void)SPI_WriteRead(val);
  8909  14C5  0020               	movlb	0	; select bank0
  8910  14C6  0823               	movf	RF_WriteRegister@val,w
  8911  14C7  3193  2398  3194   	fcall	_SPI_WriteRead
  8912                           
  8913                           ;nrf24.c: 73: do { LATCbits.LATC1 = 1; } while(0);
  8914  14CA  0022               	movlb	2	; select bank2
  8915  14CB  148E               	bsf	14,1	;volatile
  8916                           
  8917                           ;nrf24.c: 74: _delay((unsigned long)((10)*(8000000/4000000.0)));
  8918  14CC  3006               	movlw	6
  8919  14CD                     u6887:	
  8920  14CD  0B89               	decfsz	9,f
  8921  14CE  2CCD               	goto	u6887
  8922  14CF  3200               	nop2
  8923  14D0  0008               	return
  8924  14D1                     __end_of_RF_WriteRegister:	
  8925                           
  8926                           	psect	text34
  8927  1398                     __ptext34:	
  8928 ;; *************** function _SPI_WriteRead *****************
  8929 ;; Defined at:
  8930 ;;		line 26 in file "nrf24.c"
  8931 ;; Parameters:    Size  Location     Type
  8932 ;;  val             1    wreg     unsigned char 
  8933 ;; Auto vars:     Size  Location     Type
  8934 ;;  val             1    2[BANK0 ] unsigned char 
  8935 ;; Return value:  Size  Location     Type
  8936 ;;                  1    wreg      unsigned char 
  8937 ;; Registers used:
  8938 ;;		wreg, pclath, cstack
  8939 ;; Tracked objects:
  8940 ;;		On entry : 0/0
  8941 ;;		On exit  : 0/0
  8942 ;;		Unchanged: 0/0
  8943 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8944 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8945 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8946 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8947 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8948 ;;Total ram usage:        1 bytes
  8949 ;; Hardware stack levels used:    1
  8950 ;; Hardware stack levels required when called:    5
  8951 ;; This function calls:
  8952 ;;		_SPI1_Exchange8bit
  8953 ;; This function is called by:
  8954 ;;		_SPI_WriteReadBuffer
  8955 ;;		_SPI_WriteBuffer
  8956 ;;		_RF_WriteRegister
  8957 ;;		_RF_ReadRegister
  8958 ;;		_RF_ReadRegisterData
  8959 ;;		_RF_WriteRegisterData
  8960 ;;		_RF_Write
  8961 ;;		_RF_WriteRead
  8962 ;; This function uses a non-reentrant model
  8963 ;;
  8964                           
  8965                           
  8966                           ;psect for function _SPI_WriteRead
  8967  1398                     _SPI_WriteRead:	
  8968                           
  8969                           ;incstack = 0
  8970                           ; Regs used in _SPI_WriteRead: [wreg+pclath+cstack]
  8971                           ;SPI_WriteRead@val stored from wreg
  8972  1398  0020               	movlb	0	; select bank0
  8973  1399  00A2               	movwf	SPI_WriteRead@val
  8974                           
  8975                           ;nrf24.c: 34: return SPI1_Exchange8bit(val);
  8976  139A  0822               	movf	SPI_WriteRead@val,w
  8977  139B  3194  2408         	fcall	_SPI1_Exchange8bit
  8978  139D  0008               	return
  8979  139E                     __end_of_SPI_WriteRead:	
  8980                           
  8981                           	psect	text35
  8982  1408                     __ptext35:	
  8983 ;; *************** function _SPI1_Exchange8bit *****************
  8984 ;; Defined at:
  8985 ;;		line 77 in file "mcc_generated_files/spi1.c"
  8986 ;; Parameters:    Size  Location     Type
  8987 ;;  data            1    wreg     unsigned char 
  8988 ;; Auto vars:     Size  Location     Type
  8989 ;;  data            1    1[BANK0 ] unsigned char 
  8990 ;; Return value:  Size  Location     Type
  8991 ;;                  1    wreg      unsigned char 
  8992 ;; Registers used:
  8993 ;;		wreg
  8994 ;; Tracked objects:
  8995 ;;		On entry : 0/0
  8996 ;;		On exit  : 0/0
  8997 ;;		Unchanged: 0/0
  8998 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8999 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9000 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9001 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9002 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9003 ;;Total ram usage:        1 bytes
  9004 ;; Hardware stack levels used:    1
  9005 ;; Hardware stack levels required when called:    4
  9006 ;; This function calls:
  9007 ;;		Nothing
  9008 ;; This function is called by:
  9009 ;;		_SPI_WriteRead
  9010 ;;		_SPI1_Exchange8bitBuffer
  9011 ;; This function uses a non-reentrant model
  9012 ;;
  9013                           
  9014                           
  9015                           ;psect for function _SPI1_Exchange8bit
  9016  1408                     _SPI1_Exchange8bit:	
  9017                           
  9018                           ;incstack = 0
  9019                           ; Regs used in _SPI1_Exchange8bit: [wreg]
  9020                           ;SPI1_Exchange8bit@data stored from wreg
  9021  1408  0020               	movlb	0	; select bank0
  9022  1409  00A1               	movwf	SPI1_Exchange8bit@data
  9023                           
  9024                           ;spi1.c: 80: SSP1CON1bits.WCOL = 0;
  9025  140A  0024               	movlb	4	; select bank4
  9026  140B  1395               	bcf	21,7	;volatile
  9027                           
  9028                           ;spi1.c: 82: SSP1BUF = data;
  9029  140C  0020               	movlb	0	; select bank0
  9030  140D  0821               	movf	SPI1_Exchange8bit@data,w
  9031  140E  0024               	movlb	4	; select bank4
  9032  140F  0091               	movwf	17	;volatile
  9033  1410                     l522:	
  9034                           ;spi1.c: 85: {
  9035                           
  9036                           ;spi1.c: 84: while(SSP1STATbits.BF == 0x0)
  9037                           
  9038  1410  1C14               	btfss	20,0	;volatile
  9039  1411  2C10               	goto	l522
  9040                           
  9041                           ;spi1.c: 86: }
  9042                           ;spi1.c: 88: return (SSP1BUF);
  9043  1412  0811               	movf	17,w	;volatile
  9044  1413  0008               	return
  9045  1414                     __end_of_SPI1_Exchange8bit:	
  9046                           
  9047                           	psect	text36
  9048  137B                     __ptext36:	
  9049 ;; *************** function _RF_Init *****************
  9050 ;; Defined at:
  9051 ;;		line 195 in file "nrf24.c"
  9052 ;; Parameters:    Size  Location     Type
  9053 ;;		None
  9054 ;; Auto vars:     Size  Location     Type
  9055 ;;		None
  9056 ;; Return value:  Size  Location     Type
  9057 ;;                  1    wreg      void 
  9058 ;; Registers used:
  9059 ;;		None
  9060 ;; Tracked objects:
  9061 ;;		On entry : 0/0
  9062 ;;		On exit  : 0/0
  9063 ;;		Unchanged: 0/0
  9064 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9065 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9066 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9067 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9068 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9069 ;;Total ram usage:        0 bytes
  9070 ;; Hardware stack levels used:    1
  9071 ;; Hardware stack levels required when called:    4
  9072 ;; This function calls:
  9073 ;;		Nothing
  9074 ;; This function is called by:
  9075 ;;		_Wireless_init
  9076 ;; This function uses a non-reentrant model
  9077 ;;
  9078                           
  9079                           
  9080                           ;psect for function _RF_Init
  9081  137B                     _RF_Init:	
  9082                           
  9083                           ;incstack = 0
  9084                           ; Regs used in _RF_Init: []
  9085                           ;nrf24.c: 196: do { LATCbits.LATC2 = 0; } while(0);
  9086  137B  0022               	movlb	2	; select bank2
  9087  137C  110E               	bcf	14,2	;volatile
  9088                           
  9089                           ;nrf24.c: 197: do { LATCbits.LATC1 = 1; } while(0);
  9090  137D  148E               	bsf	14,1	;volatile
  9091  137E  0008               	return
  9092  137F                     __end_of_RF_Init:	
  9093                           
  9094                           	psect	text37
  9095  0A9D                     __ptext37:	
  9096 ;; *************** function _Timeout_updateCurrentTime *****************
  9097 ;; Defined at:
  9098 ;;		line 13 in file "timeout.c"
  9099 ;; Parameters:    Size  Location     Type
  9100 ;;		None
  9101 ;; Auto vars:     Size  Location     Type
  9102 ;;  var             4   17[BANK0 ] unsigned long 
  9103 ;; Return value:  Size  Location     Type
  9104 ;;                  1    wreg      void 
  9105 ;; Registers used:
  9106 ;;		wreg, status,2, status,0, pclath, cstack
  9107 ;; Tracked objects:
  9108 ;;		On entry : 0/0
  9109 ;;		On exit  : 0/0
  9110 ;;		Unchanged: 0/0
  9111 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9112 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9113 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9114 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9115 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9116 ;;Total ram usage:        8 bytes
  9117 ;; Hardware stack levels used:    1
  9118 ;; Hardware stack levels required when called:    5
  9119 ;; This function calls:
  9120 ;;		_TMR1_ReadTimer
  9121 ;;		___lmul
  9122 ;; This function is called by:
  9123 ;;		_main
  9124 ;; This function uses a non-reentrant model
  9125 ;;
  9126                           
  9127                           
  9128                           ;psect for function _Timeout_updateCurrentTime
  9129  0A9D                     _Timeout_updateCurrentTime:	
  9130                           
  9131                           ;timeout.c: 15: unsigned long var = 10;
  9132                           
  9133                           ;incstack = 0
  9134                           ; Regs used in _Timeout_updateCurrentTime: [wreg+status,2+status,0+pclath+cstack]
  9135  0A9D  3000               	movlw	0
  9136  0A9E  0020               	movlb	0	; select bank0
  9137  0A9F  00B4               	movwf	Timeout_updateCurrentTime@var+3
  9138  0AA0  3000               	movlw	0
  9139  0AA1  00B3               	movwf	Timeout_updateCurrentTime@var+2
  9140  0AA2  3000               	movlw	0
  9141  0AA3  00B2               	movwf	Timeout_updateCurrentTime@var+1
  9142  0AA4  300A               	movlw	10
  9143  0AA5  00B1               	movwf	Timeout_updateCurrentTime@var
  9144                           
  9145                           ;timeout.c: 16: var = TMR1_ReadTimer();
  9146  0AA6  3195  25EC  318A   	fcall	_TMR1_ReadTimer
  9147  0AA9  0020               	movlb	0	; select bank0
  9148  0AAA  0821               	movf	?_TMR1_ReadTimer,w
  9149  0AAB  00B1               	movwf	Timeout_updateCurrentTime@var
  9150  0AAC  0822               	movf	?_TMR1_ReadTimer+1,w
  9151  0AAD  00B2               	movwf	Timeout_updateCurrentTime@var+1
  9152  0AAE  01B3               	clrf	Timeout_updateCurrentTime@var+2
  9153  0AAF  01B4               	clrf	Timeout_updateCurrentTime@var+3
  9154                           
  9155                           ;timeout.c: 17: var= var - 0x6000;
  9156  0AB0  3000               	movlw	0
  9157  0AB1  00AD               	movwf	??_Timeout_updateCurrentTime
  9158  0AB2  30A0               	movlw	160
  9159  0AB3  00AE               	movwf	??_Timeout_updateCurrentTime+1
  9160  0AB4  30FF               	movlw	255
  9161  0AB5  00AF               	movwf	??_Timeout_updateCurrentTime+2
  9162  0AB6  30FF               	movlw	255
  9163  0AB7  00B0               	movwf	??_Timeout_updateCurrentTime+3
  9164  0AB8  0831               	movf	Timeout_updateCurrentTime@var,w
  9165  0AB9  07AD               	addwf	??_Timeout_updateCurrentTime,f
  9166  0ABA  0832               	movf	Timeout_updateCurrentTime@var+1,w
  9167  0ABB  3DAE               	addwfc	??_Timeout_updateCurrentTime+1,f
  9168  0ABC  0833               	movf	Timeout_updateCurrentTime@var+2,w
  9169  0ABD  3DAF               	addwfc	??_Timeout_updateCurrentTime+2,f
  9170  0ABE  0834               	movf	Timeout_updateCurrentTime@var+3,w
  9171  0ABF  3DB0               	addwfc	??_Timeout_updateCurrentTime+3,f
  9172  0AC0  0830               	movf	??_Timeout_updateCurrentTime+3,w
  9173  0AC1  00B4               	movwf	Timeout_updateCurrentTime@var+3
  9174  0AC2  082F               	movf	??_Timeout_updateCurrentTime+2,w
  9175  0AC3  00B3               	movwf	Timeout_updateCurrentTime@var+2
  9176  0AC4  082E               	movf	??_Timeout_updateCurrentTime+1,w
  9177  0AC5  00B2               	movwf	Timeout_updateCurrentTime@var+1
  9178  0AC6  082D               	movf	??_Timeout_updateCurrentTime,w
  9179  0AC7  00B1               	movwf	Timeout_updateCurrentTime@var
  9180                           
  9181                           ;timeout.c: 18: globalCounter += ((var*1000)/4096);
  9182  0AC8  0834               	movf	Timeout_updateCurrentTime@var+3,w
  9183  0AC9  00A4               	movwf	___lmul@multiplier+3
  9184  0ACA  0833               	movf	Timeout_updateCurrentTime@var+2,w
  9185  0ACB  00A3               	movwf	___lmul@multiplier+2
  9186  0ACC  0832               	movf	Timeout_updateCurrentTime@var+1,w
  9187  0ACD  00A2               	movwf	___lmul@multiplier+1
  9188  0ACE  0831               	movf	Timeout_updateCurrentTime@var,w
  9189  0ACF  00A1               	movwf	___lmul@multiplier
  9190  0AD0  3000               	movlw	0
  9191  0AD1  00A8               	movwf	___lmul@multiplicand+3
  9192  0AD2  3000               	movlw	0
  9193  0AD3  00A7               	movwf	___lmul@multiplicand+2
  9194  0AD4  3003               	movlw	3
  9195  0AD5  00A6               	movwf	___lmul@multiplicand+1
  9196  0AD6  30E8               	movlw	232
  9197  0AD7  00A5               	movwf	___lmul@multiplicand
  9198  0AD8  3197  27D0  318A   	fcall	___lmul
  9199  0ADB  0020               	movlb	0	; select bank0
  9200  0ADC  0821               	movf	?___lmul,w
  9201  0ADD  00AD               	movwf	??_Timeout_updateCurrentTime
  9202  0ADE  0822               	movf	?___lmul+1,w
  9203  0ADF  00AE               	movwf	??_Timeout_updateCurrentTime+1
  9204  0AE0  0823               	movf	?___lmul+2,w
  9205  0AE1  00AF               	movwf	??_Timeout_updateCurrentTime+2
  9206  0AE2  0824               	movf	?___lmul+3,w
  9207  0AE3  00B0               	movwf	??_Timeout_updateCurrentTime+3
  9208  0AE4  300C               	movlw	12
  9209  0AE5                     u5985:	
  9210  0AE5  36B0               	lsrf	??_Timeout_updateCurrentTime+3,f
  9211  0AE6  0CAF               	rrf	??_Timeout_updateCurrentTime+2,f
  9212  0AE7  0CAE               	rrf	??_Timeout_updateCurrentTime+1,f
  9213  0AE8  0CAD               	rrf	??_Timeout_updateCurrentTime,f
  9214  0AE9  0B89               	decfsz	9,f
  9215  0AEA  2AE5               	goto	u5985
  9216  0AEB  082D               	movf	??_Timeout_updateCurrentTime,w
  9217  0AEC  0021               	movlb	1	; select bank1
  9218  0AED  07CE               	addwf	_globalCounter^(0+128),f	;volatile
  9219  0AEE  0020               	movlb	0	; select bank0
  9220  0AEF  082E               	movf	??_Timeout_updateCurrentTime+1,w
  9221  0AF0  0021               	movlb	1	; select bank1
  9222  0AF1  3DCF               	addwfc	(_globalCounter+1)^(0+128),f	;volatile
  9223  0AF2  0020               	movlb	0	; select bank0
  9224  0AF3  082F               	movf	??_Timeout_updateCurrentTime+2,w
  9225  0AF4  0021               	movlb	1	; select bank1
  9226  0AF5  3DD0               	addwfc	(_globalCounter+2)^(0+128),f	;volatile
  9227  0AF6  0020               	movlb	0	; select bank0
  9228  0AF7  0830               	movf	??_Timeout_updateCurrentTime+3,w
  9229  0AF8  0021               	movlb	1	; select bank1
  9230  0AF9  3DD1               	addwfc	(_globalCounter+3)^(0+128),f	;volatile
  9231  0AFA  0008               	return
  9232  0AFB                     __end_of_Timeout_updateCurrentTime:	
  9233                           
  9234                           	psect	text38
  9235  17D0                     __ptext38:	
  9236 ;; *************** function ___lmul *****************
  9237 ;; Defined at:
  9238 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\Umul32.c"
  9239 ;; Parameters:    Size  Location     Type
  9240 ;;  multiplier      4    1[BANK0 ] unsigned long 
  9241 ;;  multiplicand    4    5[BANK0 ] unsigned long 
  9242 ;; Auto vars:     Size  Location     Type
  9243 ;;  product         4    9[BANK0 ] unsigned long 
  9244 ;; Return value:  Size  Location     Type
  9245 ;;                  4    1[BANK0 ] unsigned long 
  9246 ;; Registers used:
  9247 ;;		wreg, status,2, status,0
  9248 ;; Tracked objects:
  9249 ;;		On entry : 0/0
  9250 ;;		On exit  : 0/0
  9251 ;;		Unchanged: 0/0
  9252 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9253 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9254 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9255 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9256 ;;      Totals:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9257 ;;Total ram usage:       12 bytes
  9258 ;; Hardware stack levels used:    1
  9259 ;; Hardware stack levels required when called:    4
  9260 ;; This function calls:
  9261 ;;		Nothing
  9262 ;; This function is called by:
  9263 ;;		_Wireless_checkDataReceived
  9264 ;;		_Timeout_updateCurrentTime
  9265 ;; This function uses a non-reentrant model
  9266 ;;
  9267                           
  9268                           
  9269                           ;psect for function ___lmul
  9270  17D0                     ___lmul:	
  9271                           
  9272                           ;incstack = 0
  9273                           ; Regs used in ___lmul: [wreg+status,2+status,0]
  9274  17D0  3000               	movlw	0
  9275  17D1  0020               	movlb	0	; select bank0
  9276  17D2  00AC               	movwf	___lmul@product+3
  9277  17D3  3000               	movlw	0
  9278  17D4  00AB               	movwf	___lmul@product+2
  9279  17D5  3000               	movlw	0
  9280  17D6  00AA               	movwf	___lmul@product+1
  9281  17D7  3000               	movlw	0
  9282  17D8  00A9               	movwf	___lmul@product
  9283  17D9                     l5590:	
  9284  17D9  1C21               	btfss	___lmul@multiplier,0
  9285  17DA  2FE3               	goto	l5594
  9286  17DB  0825               	movf	___lmul@multiplicand,w
  9287  17DC  07A9               	addwf	___lmul@product,f
  9288  17DD  0826               	movf	___lmul@multiplicand+1,w
  9289  17DE  3DAA               	addwfc	___lmul@product+1,f
  9290  17DF  0827               	movf	___lmul@multiplicand+2,w
  9291  17E0  3DAB               	addwfc	___lmul@product+2,f
  9292  17E1  0828               	movf	___lmul@multiplicand+3,w
  9293  17E2  3DAC               	addwfc	___lmul@product+3,f
  9294  17E3                     l5594:	
  9295  17E3  3001               	movlw	1
  9296  17E4                     u5025:	
  9297  17E4  35A5               	lslf	___lmul@multiplicand,f
  9298  17E5  0DA6               	rlf	___lmul@multiplicand+1,f
  9299  17E6  0DA7               	rlf	___lmul@multiplicand+2,f
  9300  17E7  0DA8               	rlf	___lmul@multiplicand+3,f
  9301  17E8  0B89               	decfsz	9,f
  9302  17E9  2FE4               	goto	u5025
  9303  17EA  3001               	movlw	1
  9304  17EB                     u5035:	
  9305  17EB  36A4               	lsrf	___lmul@multiplier+3,f
  9306  17EC  0CA3               	rrf	___lmul@multiplier+2,f
  9307  17ED  0CA2               	rrf	___lmul@multiplier+1,f
  9308  17EE  0CA1               	rrf	___lmul@multiplier,f
  9309  17EF  0B89               	decfsz	9,f
  9310  17F0  2FEB               	goto	u5035
  9311  17F1  0824               	movf	___lmul@multiplier+3,w
  9312  17F2  0423               	iorwf	___lmul@multiplier+2,w
  9313  17F3  0422               	iorwf	___lmul@multiplier+1,w
  9314  17F4  0421               	iorwf	___lmul@multiplier,w
  9315  17F5  1D03               	skipz
  9316  17F6  2FD9               	goto	l5590
  9317  17F7  082C               	movf	___lmul@product+3,w
  9318  17F8  00A4               	movwf	?___lmul+3
  9319  17F9  082B               	movf	___lmul@product+2,w
  9320  17FA  00A3               	movwf	?___lmul+2
  9321  17FB  082A               	movf	___lmul@product+1,w
  9322  17FC  00A2               	movwf	?___lmul+1
  9323  17FD  0829               	movf	___lmul@product,w
  9324  17FE  00A1               	movwf	?___lmul
  9325  17FF  0008               	return
  9326  1800                     __end_of___lmul:	
  9327                           
  9328                           	psect	text39
  9329  15EC                     __ptext39:	
  9330 ;; *************** function _TMR1_ReadTimer *****************
  9331 ;; Defined at:
  9332 ;;		line 104 in file "mcc_generated_files/tmr1.c"
  9333 ;; Parameters:    Size  Location     Type
  9334 ;;		None
  9335 ;; Auto vars:     Size  Location     Type
  9336 ;;  readVal         2    8[BANK0 ] unsigned int 
  9337 ;;  readValLow      1   11[BANK0 ] unsigned char 
  9338 ;;  readValHigh     1   10[BANK0 ] unsigned char 
  9339 ;; Return value:  Size  Location     Type
  9340 ;;                  2    1[BANK0 ] unsigned int 
  9341 ;; Registers used:
  9342 ;;		wreg
  9343 ;; Tracked objects:
  9344 ;;		On entry : 0/0
  9345 ;;		On exit  : 0/0
  9346 ;;		Unchanged: 0/0
  9347 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9348 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9349 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9350 ;;      Temps:          0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9351 ;;      Totals:         0      11       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9352 ;;Total ram usage:       11 bytes
  9353 ;; Hardware stack levels used:    1
  9354 ;; Hardware stack levels required when called:    4
  9355 ;; This function calls:
  9356 ;;		Nothing
  9357 ;; This function is called by:
  9358 ;;		_Timeout_updateCurrentTime
  9359 ;; This function uses a non-reentrant model
  9360 ;;
  9361                           
  9362                           
  9363                           ;psect for function _TMR1_ReadTimer
  9364  15EC                     _TMR1_ReadTimer:	
  9365                           
  9366                           ;tmr1.c: 106: uint16_t readVal;
  9367                           ;tmr1.c: 107: uint8_t readValHigh;
  9368                           ;tmr1.c: 108: uint8_t readValLow;
  9369                           ;tmr1.c: 110: readValLow = TMR1L;
  9370                           
  9371                           ;incstack = 0
  9372                           ; Regs used in _TMR1_ReadTimer: [wreg]
  9373  15EC  0020               	movlb	0	; select bank0
  9374  15ED  0816               	movf	22,w	;volatile
  9375  15EE  00A3               	movwf	??_TMR1_ReadTimer
  9376  15EF  0823               	movf	??_TMR1_ReadTimer,w
  9377  15F0  00AB               	movwf	TMR1_ReadTimer@readValLow
  9378                           
  9379                           ;tmr1.c: 111: readValHigh = TMR1H;
  9380  15F1  0817               	movf	23,w	;volatile
  9381  15F2  00A3               	movwf	??_TMR1_ReadTimer
  9382  15F3  0823               	movf	??_TMR1_ReadTimer,w
  9383  15F4  00AA               	movwf	TMR1_ReadTimer@readValHigh
  9384                           
  9385                           ;tmr1.c: 113: readVal = ((uint16_t)readValHigh << 8) | readValLow;
  9386  15F5  082B               	movf	TMR1_ReadTimer@readValLow,w
  9387  15F6  00A3               	movwf	??_TMR1_ReadTimer
  9388  15F7  01A4               	clrf	??_TMR1_ReadTimer+1
  9389  15F8  082A               	movf	TMR1_ReadTimer@readValHigh,w
  9390  15F9  00A5               	movwf	??_TMR1_ReadTimer+2
  9391  15FA  01A6               	clrf	??_TMR1_ReadTimer+3
  9392  15FB  0825               	movf	??_TMR1_ReadTimer+2,w
  9393  15FC  00A6               	movwf	??_TMR1_ReadTimer+3
  9394  15FD  01A5               	clrf	??_TMR1_ReadTimer+2
  9395  15FE  0823               	movf	??_TMR1_ReadTimer,w
  9396  15FF  0425               	iorwf	??_TMR1_ReadTimer+2,w
  9397  1600  00A8               	movwf	TMR1_ReadTimer@readVal
  9398  1601  0824               	movf	??_TMR1_ReadTimer+1,w
  9399  1602  0426               	iorwf	??_TMR1_ReadTimer+3,w
  9400  1603  00A9               	movwf	TMR1_ReadTimer@readVal+1
  9401                           
  9402                           ;tmr1.c: 115: return readVal;
  9403  1604  0829               	movf	TMR1_ReadTimer@readVal+1,w
  9404  1605  00A2               	movwf	?_TMR1_ReadTimer+1
  9405  1606  0828               	movf	TMR1_ReadTimer@readVal,w
  9406  1607  00A1               	movwf	?_TMR1_ReadTimer
  9407  1608  0008               	return
  9408  1609                     __end_of_TMR1_ReadTimer:	
  9409                           
  9410                           	psect	text40
  9411  157E                     __ptext40:	
  9412 ;; *************** function _SYSTEM_Initialize *****************
  9413 ;; Defined at:
  9414 ;;		line 70 in file "mcc_generated_files/mcc.c"
  9415 ;; Parameters:    Size  Location     Type
  9416 ;;		None
  9417 ;; Auto vars:     Size  Location     Type
  9418 ;;		None
  9419 ;; Return value:  Size  Location     Type
  9420 ;;                  1    wreg      void 
  9421 ;; Registers used:
  9422 ;;		wreg, status,2, status,0, pclath, cstack
  9423 ;; Tracked objects:
  9424 ;;		On entry : 0/0
  9425 ;;		On exit  : 0/0
  9426 ;;		Unchanged: 0/0
  9427 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9428 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9429 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9430 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9431 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9432 ;;Total ram usage:        0 bytes
  9433 ;; Hardware stack levels used:    1
  9434 ;; Hardware stack levels required when called:    6
  9435 ;; This function calls:
  9436 ;;		_ADC_Initialize
  9437 ;;		_FVR_Initialize
  9438 ;;		_I2C2_Initialize
  9439 ;;		_OSCILLATOR_Initialize
  9440 ;;		_PIN_MANAGER_Initialize
  9441 ;;		_SPI1_Initialize
  9442 ;;		_TMR1_Initialize
  9443 ;;		_TMR2_Initialize
  9444 ;;		_WDT_Initialize
  9445 ;; This function is called by:
  9446 ;;		_main
  9447 ;; This function uses a non-reentrant model
  9448 ;;
  9449                           
  9450                           
  9451                           ;psect for function _SYSTEM_Initialize
  9452  157E                     _SYSTEM_Initialize:	
  9453                           
  9454                           ;mcc.c: 73: PIN_MANAGER_Initialize();
  9455                           
  9456                           ;incstack = 0
  9457                           ; Regs used in _SYSTEM_Initialize: [wreg+status,2+status,0+pclath+cstack]
  9458  157E  3197  2779  3195   	fcall	_PIN_MANAGER_Initialize
  9459                           
  9460                           ;mcc.c: 74: OSCILLATOR_Initialize();
  9461  1581  3193  23A4  3195   	fcall	_OSCILLATOR_Initialize
  9462                           
  9463                           ;mcc.c: 75: WDT_Initialize();
  9464  1584  3193  2377  3195   	fcall	_WDT_Initialize
  9465                           
  9466                           ;mcc.c: 76: SPI1_Initialize();
  9467  1587  3193  23AB  3195   	fcall	_SPI1_Initialize
  9468                           
  9469                           ;mcc.c: 77: I2C2_Initialize();
  9470  158A  3195  2563  3195   	fcall	_I2C2_Initialize
  9471                           
  9472                           ;mcc.c: 78: FVR_Initialize();
  9473  158D  3193  2373  3195   	fcall	_FVR_Initialize
  9474                           
  9475                           ;mcc.c: 79: ADC_Initialize();
  9476  1590  3193  23C1  3195   	fcall	_ADC_Initialize
  9477                           
  9478                           ;mcc.c: 80: TMR2_Initialize();
  9479  1593  3193  23C9  3195   	fcall	_TMR2_Initialize
  9480                           
  9481                           ;mcc.c: 81: TMR1_Initialize();
  9482  1596  3194  24E7         	fcall	_TMR1_Initialize
  9483  1598  0008               	return
  9484  1599                     __end_of_SYSTEM_Initialize:	
  9485                           
  9486                           	psect	text41
  9487  1377                     __ptext41:	
  9488 ;; *************** function _WDT_Initialize *****************
  9489 ;; Defined at:
  9490 ;;		line 94 in file "mcc_generated_files/mcc.c"
  9491 ;; Parameters:    Size  Location     Type
  9492 ;;		None
  9493 ;; Auto vars:     Size  Location     Type
  9494 ;;		None
  9495 ;; Return value:  Size  Location     Type
  9496 ;;                  1    wreg      void 
  9497 ;; Registers used:
  9498 ;;		wreg
  9499 ;; Tracked objects:
  9500 ;;		On entry : 0/0
  9501 ;;		On exit  : 0/0
  9502 ;;		Unchanged: 0/0
  9503 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9504 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9505 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9506 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9507 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9508 ;;Total ram usage:        0 bytes
  9509 ;; Hardware stack levels used:    1
  9510 ;; Hardware stack levels required when called:    4
  9511 ;; This function calls:
  9512 ;;		Nothing
  9513 ;; This function is called by:
  9514 ;;		_SYSTEM_Initialize
  9515 ;; This function uses a non-reentrant model
  9516 ;;
  9517                           
  9518                           
  9519                           ;psect for function _WDT_Initialize
  9520  1377                     _WDT_Initialize:	
  9521                           
  9522                           ;mcc.c: 97: WDTCON = 0x1A;
  9523                           
  9524                           ;incstack = 0
  9525                           ; Regs used in _WDT_Initialize: [wreg]
  9526  1377  301A               	movlw	26
  9527  1378  0021               	movlb	1	; select bank1
  9528  1379  0097               	movwf	23	;volatile
  9529  137A  0008               	return
  9530  137B                     __end_of_WDT_Initialize:	
  9531                           
  9532                           	psect	text42
  9533  13C9                     __ptext42:	
  9534 ;; *************** function _TMR2_Initialize *****************
  9535 ;; Defined at:
  9536 ;;		line 61 in file "mcc_generated_files/tmr2.c"
  9537 ;; Parameters:    Size  Location     Type
  9538 ;;		None
  9539 ;; Auto vars:     Size  Location     Type
  9540 ;;		None
  9541 ;; Return value:  Size  Location     Type
  9542 ;;                  1    wreg      void 
  9543 ;; Registers used:
  9544 ;;		wreg, status,2
  9545 ;; Tracked objects:
  9546 ;;		On entry : 0/0
  9547 ;;		On exit  : 0/0
  9548 ;;		Unchanged: 0/0
  9549 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9550 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9551 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9552 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9553 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9554 ;;Total ram usage:        0 bytes
  9555 ;; Hardware stack levels used:    1
  9556 ;; Hardware stack levels required when called:    4
  9557 ;; This function calls:
  9558 ;;		Nothing
  9559 ;; This function is called by:
  9560 ;;		_SYSTEM_Initialize
  9561 ;; This function uses a non-reentrant model
  9562 ;;
  9563                           
  9564                           
  9565                           ;psect for function _TMR2_Initialize
  9566  13C9                     _TMR2_Initialize:	
  9567                           
  9568                           ;tmr2.c: 66: PR2 = 0x44;
  9569                           
  9570                           ;incstack = 0
  9571                           ; Regs used in _TMR2_Initialize: [wreg+status,2]
  9572  13C9  3044               	movlw	68
  9573  13CA  0020               	movlb	0	; select bank0
  9574  13CB  009B               	movwf	27	;volatile
  9575                           
  9576                           ;tmr2.c: 69: TMR2 = 0x00;
  9577  13CC  019A               	clrf	26	;volatile
  9578                           
  9579                           ;tmr2.c: 72: PIR1bits.TMR2IF = 0;
  9580  13CD  1091               	bcf	17,1	;volatile
  9581                           
  9582                           ;tmr2.c: 75: T2CON = 0x46;
  9583  13CE  3046               	movlw	70
  9584  13CF  009C               	movwf	28	;volatile
  9585  13D0  0008               	return
  9586  13D1                     __end_of_TMR2_Initialize:	
  9587                           
  9588                           	psect	text43
  9589  14E7                     __ptext43:	
  9590 ;; *************** function _TMR1_Initialize *****************
  9591 ;; Defined at:
  9592 ;;		line 63 in file "mcc_generated_files/tmr1.c"
  9593 ;; Parameters:    Size  Location     Type
  9594 ;;		None
  9595 ;; Auto vars:     Size  Location     Type
  9596 ;;		None
  9597 ;; Return value:  Size  Location     Type
  9598 ;;                  1    wreg      void 
  9599 ;; Registers used:
  9600 ;;		wreg, status,2, status,0, pclath, cstack
  9601 ;; Tracked objects:
  9602 ;;		On entry : 0/0
  9603 ;;		On exit  : 0/0
  9604 ;;		Unchanged: 0/0
  9605 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9606 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9607 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9608 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9609 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9610 ;;Total ram usage:        0 bytes
  9611 ;; Hardware stack levels used:    1
  9612 ;; Hardware stack levels required when called:    5
  9613 ;; This function calls:
  9614 ;;		_TMR1_SetInterruptHandler
  9615 ;; This function is called by:
  9616 ;;		_SYSTEM_Initialize
  9617 ;; This function uses a non-reentrant model
  9618 ;;
  9619                           
  9620                           
  9621                           ;psect for function _TMR1_Initialize
  9622  14E7                     _TMR1_Initialize:	
  9623                           
  9624                           ;tmr1.c: 68: T1GCON = 0x00;
  9625                           
  9626                           ;incstack = 0
  9627                           ; Regs used in _TMR1_Initialize: [wreg+status,2+status,0+pclath+cstack]
  9628  14E7  0020               	movlb	0	; select bank0
  9629  14E8  0199               	clrf	25	;volatile
  9630                           
  9631                           ;tmr1.c: 71: TMR1H = 0x60;
  9632  14E9  3060               	movlw	96
  9633  14EA  0097               	movwf	23	;volatile
  9634                           
  9635                           ;tmr1.c: 74: TMR1L = 0x00;
  9636  14EB  0196               	clrf	22	;volatile
  9637                           
  9638                           ;tmr1.c: 77: timer1ReloadVal=(uint16_t)((TMR1H << 8) | TMR1L);
  9639  14EC  0817               	movf	23,w	;volatile
  9640  14ED  00FD               	movwf	_timer1ReloadVal+1	;volatile
  9641  14EE  0816               	movf	22,w	;volatile
  9642  14EF  00FC               	movwf	_timer1ReloadVal	;volatile
  9643                           
  9644                           ;tmr1.c: 80: PIR1bits.TMR1IF = 0;
  9645  14F0  1011               	bcf	17,0	;volatile
  9646                           
  9647                           ;tmr1.c: 83: PIE1bits.TMR1IE = 1;
  9648  14F1  0021               	movlb	1	; select bank1
  9649  14F2  1411               	bsf	17,0	;volatile
  9650                           
  9651                           ;tmr1.c: 86: TMR1_SetInterruptHandler(TMR1_DefaultInterruptHandler);
  9652  14F3  3066               	movlw	low _TMR1_DefaultInterruptHandler
  9653  14F4  0020               	movlb	0	; select bank0
  9654  14F5  00A1               	movwf	TMR1_SetInterruptHandler@InterruptHandler
  9655  14F6  3013               	movlw	high _TMR1_DefaultInterruptHandler
  9656  14F7  00A2               	movwf	TMR1_SetInterruptHandler@InterruptHandler+1
  9657  14F8  3193  23EC         	fcall	_TMR1_SetInterruptHandler
  9658                           
  9659                           ;tmr1.c: 89: T1CON = 0xBD;
  9660  14FA  30BD               	movlw	189
  9661  14FB  0020               	movlb	0	; select bank0
  9662  14FC  0098               	movwf	24	;volatile
  9663  14FD  0008               	return
  9664  14FE                     __end_of_TMR1_Initialize:	
  9665                           
  9666                           	psect	text44
  9667  13EC                     __ptext44:	
  9668 ;; *************** function _TMR1_SetInterruptHandler *****************
  9669 ;; Defined at:
  9670 ;;		line 181 in file "mcc_generated_files/tmr1.c"
  9671 ;; Parameters:    Size  Location     Type
  9672 ;;  InterruptHan    2    1[BANK0 ] PTR FTN()void 
  9673 ;;		 -> TMR1_DefaultInterruptHandler(1), 
  9674 ;; Auto vars:     Size  Location     Type
  9675 ;;		None
  9676 ;; Return value:  Size  Location     Type
  9677 ;;                  1    wreg      void 
  9678 ;; Registers used:
  9679 ;;		wreg
  9680 ;; Tracked objects:
  9681 ;;		On entry : 0/0
  9682 ;;		On exit  : 0/0
  9683 ;;		Unchanged: 0/0
  9684 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9685 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9686 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9687 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9688 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9689 ;;Total ram usage:        2 bytes
  9690 ;; Hardware stack levels used:    1
  9691 ;; Hardware stack levels required when called:    4
  9692 ;; This function calls:
  9693 ;;		Nothing
  9694 ;; This function is called by:
  9695 ;;		_TMR1_Initialize
  9696 ;; This function uses a non-reentrant model
  9697 ;;
  9698                           
  9699                           
  9700                           ;psect for function _TMR1_SetInterruptHandler
  9701  13EC                     _TMR1_SetInterruptHandler:	
  9702                           
  9703                           ;tmr1.c: 182: TMR1_InterruptHandler = InterruptHandler;
  9704                           
  9705                           ;incstack = 0
  9706                           ; Regs used in _TMR1_SetInterruptHandler: [wreg]
  9707  13EC  0020               	movlb	0	; select bank0
  9708  13ED  0822               	movf	TMR1_SetInterruptHandler@InterruptHandler+1,w
  9709  13EE  0022               	movlb	2	; select bank2
  9710  13EF  00E7               	movwf	(_TMR1_InterruptHandler+1)^(0+256)
  9711  13F0  0020               	movlb	0	; select bank0
  9712  13F1  0821               	movf	TMR1_SetInterruptHandler@InterruptHandler,w
  9713  13F2  0022               	movlb	2	; select bank2
  9714  13F3  00E6               	movwf	_TMR1_InterruptHandler^(0+256)
  9715  13F4  0008               	return
  9716  13F5                     __end_of_TMR1_SetInterruptHandler:	
  9717                           
  9718                           	psect	text45
  9719  13AB                     __ptext45:	
  9720 ;; *************** function _SPI1_Initialize *****************
  9721 ;; Defined at:
  9722 ;;		line 63 in file "mcc_generated_files/spi1.c"
  9723 ;; Parameters:    Size  Location     Type
  9724 ;;		None
  9725 ;; Auto vars:     Size  Location     Type
  9726 ;;		None
  9727 ;; Return value:  Size  Location     Type
  9728 ;;                  1    wreg      void 
  9729 ;; Registers used:
  9730 ;;		wreg, status,2
  9731 ;; Tracked objects:
  9732 ;;		On entry : 0/0
  9733 ;;		On exit  : 0/0
  9734 ;;		Unchanged: 0/0
  9735 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9736 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9737 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9738 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9739 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9740 ;;Total ram usage:        0 bytes
  9741 ;; Hardware stack levels used:    1
  9742 ;; Hardware stack levels required when called:    4
  9743 ;; This function calls:
  9744 ;;		Nothing
  9745 ;; This function is called by:
  9746 ;;		_SYSTEM_Initialize
  9747 ;; This function uses a non-reentrant model
  9748 ;;
  9749                           
  9750                           
  9751                           ;psect for function _SPI1_Initialize
  9752  13AB                     _SPI1_Initialize:	
  9753                           
  9754                           ;spi1.c: 68: SSP1STAT = 0x40;
  9755                           
  9756                           ;incstack = 0
  9757                           ; Regs used in _SPI1_Initialize: [wreg+status,2]
  9758  13AB  3040               	movlw	64
  9759  13AC  0024               	movlb	4	; select bank4
  9760  13AD  0094               	movwf	20	;volatile
  9761                           
  9762                           ;spi1.c: 71: SSP1CON1 = 0x20;
  9763  13AE  3020               	movlw	32
  9764  13AF  0095               	movwf	21	;volatile
  9765                           
  9766                           ;spi1.c: 74: SSP1ADD = 0x00;
  9767  13B0  0192               	clrf	18	;volatile
  9768  13B1  0008               	return
  9769  13B2                     __end_of_SPI1_Initialize:	
  9770                           
  9771                           	psect	text46
  9772  1779                     __ptext46:	
  9773 ;; *************** function _PIN_MANAGER_Initialize *****************
  9774 ;; Defined at:
  9775 ;;		line 54 in file "mcc_generated_files/pin_manager.c"
  9776 ;; Parameters:    Size  Location     Type
  9777 ;;		None
  9778 ;; Auto vars:     Size  Location     Type
  9779 ;;		None
  9780 ;; Return value:  Size  Location     Type
  9781 ;;                  1    wreg      void 
  9782 ;; Registers used:
  9783 ;;		wreg, status,2, status,0, pclath, cstack
  9784 ;; Tracked objects:
  9785 ;;		On entry : 0/0
  9786 ;;		On exit  : 0/0
  9787 ;;		Unchanged: 0/0
  9788 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9789 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9790 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9791 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9792 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9793 ;;Total ram usage:        0 bytes
  9794 ;; Hardware stack levels used:    1
  9795 ;; Hardware stack levels required when called:    5
  9796 ;; This function calls:
  9797 ;;		_IOCAF2_SetInterruptHandler
  9798 ;; This function is called by:
  9799 ;;		_SYSTEM_Initialize
  9800 ;; This function uses a non-reentrant model
  9801 ;;
  9802                           
  9803                           
  9804                           ;psect for function _PIN_MANAGER_Initialize
  9805  1779                     _PIN_MANAGER_Initialize:	
  9806                           
  9807                           ;pin_manager.c: 59: LATA = 0x00;
  9808                           
  9809                           ;incstack = 0
  9810                           ; Regs used in _PIN_MANAGER_Initialize: [wreg+status,2+status,0+pclath+cstack]
  9811  1779  0022               	movlb	2	; select bank2
  9812  177A  018C               	clrf	12	;volatile
  9813                           
  9814                           ;pin_manager.c: 60: LATB = 0x00;
  9815  177B  018D               	clrf	13	;volatile
  9816                           
  9817                           ;pin_manager.c: 61: LATC = 0x00;
  9818  177C  018E               	clrf	14	;volatile
  9819                           
  9820                           ;pin_manager.c: 66: TRISA = 0x3F;
  9821  177D  303F               	movlw	63
  9822  177E  0021               	movlb	1	; select bank1
  9823  177F  008C               	movwf	12	;volatile
  9824                           
  9825                           ;pin_manager.c: 67: TRISB = 0xB0;
  9826  1780  30B0               	movlw	176
  9827  1781  008D               	movwf	13	;volatile
  9828                           
  9829                           ;pin_manager.c: 68: TRISC = 0x39;
  9830  1782  3039               	movlw	57
  9831  1783  008E               	movwf	14	;volatile
  9832                           
  9833                           ;pin_manager.c: 73: ANSELC = 0x01;
  9834  1784  3001               	movlw	1
  9835  1785  0023               	movlb	3	; select bank3
  9836  1786  008E               	movwf	14	;volatile
  9837                           
  9838                           ;pin_manager.c: 74: ANSELB = 0x00;
  9839  1787  018D               	clrf	13	;volatile
  9840                           
  9841                           ;pin_manager.c: 75: ANSELA = 0x03;
  9842  1788  3003               	movlw	3
  9843  1789  008C               	movwf	12	;volatile
  9844                           
  9845                           ;pin_manager.c: 80: WPUB = 0x10;
  9846  178A  3010               	movlw	16
  9847  178B  0024               	movlb	4	; select bank4
  9848  178C  008D               	movwf	13	;volatile
  9849                           
  9850                           ;pin_manager.c: 81: WPUA = 0x3F;
  9851  178D  303F               	movlw	63
  9852  178E  008C               	movwf	12	;volatile
  9853                           
  9854                           ;pin_manager.c: 82: WPUC = 0xD1;
  9855  178F  30D1               	movlw	209
  9856  1790  008E               	movwf	14	;volatile
  9857                           
  9858                           ;pin_manager.c: 83: OPTION_REGbits.nWPUEN = 0;
  9859  1791  0021               	movlb	1	; select bank1
  9860  1792  1395               	bcf	21,7	;volatile
  9861                           
  9862                           ;pin_manager.c: 89: APFCON1 = 0x2A;
  9863  1793  302A               	movlw	42
  9864  1794  0022               	movlb	2	; select bank2
  9865  1795  009E               	movwf	30	;volatile
  9866                           
  9867                           ;pin_manager.c: 90: APFCON0 = 0x00;
  9868  1796  019D               	clrf	29	;volatile
  9869                           
  9870                           ;pin_manager.c: 96: IOCAFbits.IOCAF2 = 0;
  9871  1797  0027               	movlb	7	; select bank7
  9872  1798  1113               	bcf	19,2	;volatile
  9873                           
  9874                           ;pin_manager.c: 98: IOCANbits.IOCAN2 = 1;
  9875  1799  1512               	bsf	18,2	;volatile
  9876                           
  9877                           ;pin_manager.c: 100: IOCAPbits.IOCAP2 = 1;
  9878  179A  1511               	bsf	17,2	;volatile
  9879                           
  9880                           ;pin_manager.c: 103: IOCAF2_SetInterruptHandler(IOCAF2_DefaultInterruptHandler);
  9881  179B  3065               	movlw	low _IOCAF2_DefaultInterruptHandler
  9882  179C  0020               	movlb	0	; select bank0
  9883  179D  00A1               	movwf	IOCAF2_SetInterruptHandler@InterruptHandler
  9884  179E  3013               	movlw	high _IOCAF2_DefaultInterruptHandler
  9885  179F  00A2               	movwf	IOCAF2_SetInterruptHandler@InterruptHandler+1
  9886  17A0  3193  23E3         	fcall	_IOCAF2_SetInterruptHandler
  9887                           
  9888                           ;pin_manager.c: 106: INTCONbits.IOCIE = 1;
  9889  17A2  158B               	bsf	11,3	;volatile
  9890  17A3  0008               	return
  9891  17A4                     __end_of_PIN_MANAGER_Initialize:	
  9892                           
  9893                           	psect	text47
  9894  13E3                     __ptext47:	
  9895 ;; *************** function _IOCAF2_SetInterruptHandler *****************
  9896 ;; Defined at:
  9897 ;;		line 139 in file "mcc_generated_files/pin_manager.c"
  9898 ;; Parameters:    Size  Location     Type
  9899 ;;  InterruptHan    2    1[BANK0 ] PTR FTN()void 
  9900 ;;		 -> IOCAF2_DefaultInterruptHandler(1), 
  9901 ;; Auto vars:     Size  Location     Type
  9902 ;;		None
  9903 ;; Return value:  Size  Location     Type
  9904 ;;                  1    wreg      void 
  9905 ;; Registers used:
  9906 ;;		wreg
  9907 ;; Tracked objects:
  9908 ;;		On entry : 0/0
  9909 ;;		On exit  : 0/0
  9910 ;;		Unchanged: 0/0
  9911 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9912 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9913 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9914 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9915 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9916 ;;Total ram usage:        2 bytes
  9917 ;; Hardware stack levels used:    1
  9918 ;; Hardware stack levels required when called:    4
  9919 ;; This function calls:
  9920 ;;		Nothing
  9921 ;; This function is called by:
  9922 ;;		_PIN_MANAGER_Initialize
  9923 ;; This function uses a non-reentrant model
  9924 ;;
  9925                           
  9926                           
  9927                           ;psect for function _IOCAF2_SetInterruptHandler
  9928  13E3                     _IOCAF2_SetInterruptHandler:	
  9929                           
  9930                           ;pin_manager.c: 140: IOCAF2_InterruptHandler = InterruptHandler;
  9931                           
  9932                           ;incstack = 0
  9933                           ; Regs used in _IOCAF2_SetInterruptHandler: [wreg]
  9934  13E3  0020               	movlb	0	; select bank0
  9935  13E4  0822               	movf	IOCAF2_SetInterruptHandler@InterruptHandler+1,w
  9936  13E5  0022               	movlb	2	; select bank2
  9937  13E6  00E9               	movwf	(_IOCAF2_InterruptHandler+1)^(0+256)
  9938  13E7  0020               	movlb	0	; select bank0
  9939  13E8  0821               	movf	IOCAF2_SetInterruptHandler@InterruptHandler,w
  9940  13E9  0022               	movlb	2	; select bank2
  9941  13EA  00E8               	movwf	_IOCAF2_InterruptHandler^(0+256)
  9942  13EB  0008               	return
  9943  13EC                     __end_of_IOCAF2_SetInterruptHandler:	
  9944                           
  9945                           	psect	text48
  9946  13A4                     __ptext48:	
  9947 ;; *************** function _OSCILLATOR_Initialize *****************
  9948 ;; Defined at:
  9949 ;;		line 84 in file "mcc_generated_files/mcc.c"
  9950 ;; Parameters:    Size  Location     Type
  9951 ;;		None
  9952 ;; Auto vars:     Size  Location     Type
  9953 ;;		None
  9954 ;; Return value:  Size  Location     Type
  9955 ;;                  1    wreg      void 
  9956 ;; Registers used:
  9957 ;;		wreg, status,2
  9958 ;; Tracked objects:
  9959 ;;		On entry : 0/0
  9960 ;;		On exit  : 0/0
  9961 ;;		Unchanged: 0/0
  9962 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9963 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9964 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9965 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9966 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9967 ;;Total ram usage:        0 bytes
  9968 ;; Hardware stack levels used:    1
  9969 ;; Hardware stack levels required when called:    4
  9970 ;; This function calls:
  9971 ;;		Nothing
  9972 ;; This function is called by:
  9973 ;;		_SYSTEM_Initialize
  9974 ;; This function uses a non-reentrant model
  9975 ;;
  9976                           
  9977                           
  9978                           ;psect for function _OSCILLATOR_Initialize
  9979  13A4                     _OSCILLATOR_Initialize:	
  9980                           
  9981                           ;mcc.c: 87: OSCCON = 0x72;
  9982                           
  9983                           ;incstack = 0
  9984                           ; Regs used in _OSCILLATOR_Initialize: [wreg+status,2]
  9985  13A4  3072               	movlw	114
  9986  13A5  0021               	movlb	1	; select bank1
  9987  13A6  0099               	movwf	25	;volatile
  9988                           
  9989                           ;mcc.c: 89: OSCTUNE = 0x00;
  9990  13A7  0198               	clrf	24	;volatile
  9991                           
  9992                           ;mcc.c: 91: BORCON = 0x00;
  9993  13A8  0022               	movlb	2	; select bank2
  9994  13A9  0196               	clrf	22	;volatile
  9995  13AA  0008               	return
  9996  13AB                     __end_of_OSCILLATOR_Initialize:	
  9997                           
  9998                           	psect	text49
  9999  1563                     __ptext49:	
 10000 ;; *************** function _I2C2_Initialize *****************
 10001 ;; Defined at:
 10002 ;;		line 198 in file "mcc_generated_files/i2c2.c"
 10003 ;; Parameters:    Size  Location     Type
 10004 ;;		None
 10005 ;; Auto vars:     Size  Location     Type
 10006 ;;		None
 10007 ;; Return value:  Size  Location     Type
 10008 ;;                  1    wreg      void 
 10009 ;; Registers used:
 10010 ;;		wreg, status,2
 10011 ;; Tracked objects:
 10012 ;;		On entry : 0/0
 10013 ;;		On exit  : 0/0
 10014 ;;		Unchanged: 0/0
 10015 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10016 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10017 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10018 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10019 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10020 ;;Total ram usage:        1 bytes
 10021 ;; Hardware stack levels used:    1
 10022 ;; Hardware stack levels required when called:    4
 10023 ;; This function calls:
 10024 ;;		Nothing
 10025 ;; This function is called by:
 10026 ;;		_SYSTEM_Initialize
 10027 ;; This function uses a non-reentrant model
 10028 ;;
 10029                           
 10030                           
 10031                           ;psect for function _I2C2_Initialize
 10032  1563                     _I2C2_Initialize:	
 10033                           
 10034                           ;i2c2.c: 200: i2c2_object.pTrHead = i2c2_tr_queue;
 10035                           
 10036                           ;incstack = 0
 10037                           ; Regs used in _I2C2_Initialize: [wreg+status,2]
 10038  1563  3062               	movlw	(low (_i2c2_tr_queue| (0+256)))& (0+255)
 10039  1564  0020               	movlb	0	; select bank0
 10040  1565  00A1               	movwf	??_I2C2_Initialize
 10041  1566  0821               	movf	??_I2C2_Initialize,w
 10042  1567  0021               	movlb	1	; select bank1
 10043  1568  00CA               	movwf	(low ((_i2c2_object| 0+1)))^(0+128)
 10044                           
 10045                           ;i2c2.c: 201: i2c2_object.pTrTail = i2c2_tr_queue;
 10046  1569  3062               	movlw	(low (_i2c2_tr_queue| (0+256)))& (0+255)
 10047  156A  0020               	movlb	0	; select bank0
 10048  156B  00A1               	movwf	??_I2C2_Initialize
 10049  156C  0821               	movf	??_I2C2_Initialize,w
 10050  156D  0021               	movlb	1	; select bank1
 10051  156E  00C9               	movwf	_i2c2_object^(0+128)
 10052                           
 10053                           ;i2c2.c: 202: i2c2_object.trStatus.s.empty = 1;
 10054  156F  14CB               	bsf	(_i2c2_object^(0+128)+2),1
 10055                           
 10056                           ;i2c2.c: 203: i2c2_object.trStatus.s.full = 0;
 10057  1570  104B               	bcf	(_i2c2_object^(0+128)+2),0
 10058                           
 10059                           ;i2c2.c: 205: i2c2_object.i2cErrors = 0;
 10060  1571  01CD               	clrf	(_i2c2_object^(0+128)+4)
 10061                           
 10062                           ;i2c2.c: 208: SSP2STAT = 0x00;
 10063  1572  0024               	movlb	4	; select bank4
 10064  1573  019C               	clrf	28	;volatile
 10065                           
 10066                           ;i2c2.c: 210: SSP2CON1 = 0x28;
 10067  1574  3028               	movlw	40
 10068  1575  009D               	movwf	29	;volatile
 10069                           
 10070                           ;i2c2.c: 212: SSP2CON3 = 0x00;
 10071  1576  019F               	clrf	31	;volatile
 10072                           
 10073                           ;i2c2.c: 214: SSP2ADD = 0x03;
 10074  1577  3003               	movlw	3
 10075  1578  009A               	movwf	26	;volatile
 10076                           
 10077                           ;i2c2.c: 218: PIR4bits.SSP2IF = 0;
 10078  1579  0020               	movlb	0	; select bank0
 10079  157A  1014               	bcf	20,0	;volatile
 10080                           
 10081                           ;i2c2.c: 220: PIE4bits.SSP2IE = 1;
 10082  157B  0021               	movlb	1	; select bank1
 10083  157C  1414               	bsf	20,0	;volatile
 10084  157D  0008               	return
 10085  157E                     __end_of_I2C2_Initialize:	
 10086                           
 10087                           	psect	text50
 10088  1373                     __ptext50:	
 10089 ;; *************** function _FVR_Initialize *****************
 10090 ;; Defined at:
 10091 ;;		line 57 in file "mcc_generated_files/fvr.c"
 10092 ;; Parameters:    Size  Location     Type
 10093 ;;		None
 10094 ;; Auto vars:     Size  Location     Type
 10095 ;;		None
 10096 ;; Return value:  Size  Location     Type
 10097 ;;                  1    wreg      void 
 10098 ;; Registers used:
 10099 ;;		wreg
 10100 ;; Tracked objects:
 10101 ;;		On entry : 0/0
 10102 ;;		On exit  : 0/0
 10103 ;;		Unchanged: 0/0
 10104 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10105 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10106 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10107 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10108 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10109 ;;Total ram usage:        0 bytes
 10110 ;; Hardware stack levels used:    1
 10111 ;; Hardware stack levels required when called:    4
 10112 ;; This function calls:
 10113 ;;		Nothing
 10114 ;; This function is called by:
 10115 ;;		_SYSTEM_Initialize
 10116 ;; This function uses a non-reentrant model
 10117 ;;
 10118                           
 10119                           
 10120                           ;psect for function _FVR_Initialize
 10121  1373                     _FVR_Initialize:	
 10122                           
 10123                           ;fvr.c: 60: FVRCON = 0x01;
 10124                           
 10125                           ;incstack = 0
 10126                           ; Regs used in _FVR_Initialize: [wreg]
 10127  1373  3001               	movlw	1
 10128  1374  0022               	movlb	2	; select bank2
 10129  1375  0097               	movwf	23	;volatile
 10130  1376  0008               	return
 10131  1377                     __end_of_FVR_Initialize:	
 10132                           
 10133                           	psect	text51
 10134  13C1                     __ptext51:	
 10135 ;; *************** function _ADC_Initialize *****************
 10136 ;; Defined at:
 10137 ;;		line 62 in file "mcc_generated_files/adc.c"
 10138 ;; Parameters:    Size  Location     Type
 10139 ;;		None
 10140 ;; Auto vars:     Size  Location     Type
 10141 ;;		None
 10142 ;; Return value:  Size  Location     Type
 10143 ;;                  1    wreg      void 
 10144 ;; Registers used:
 10145 ;;		wreg, status,2
 10146 ;; Tracked objects:
 10147 ;;		On entry : 0/0
 10148 ;;		On exit  : 0/0
 10149 ;;		Unchanged: 0/0
 10150 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10151 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10152 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10153 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10154 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10155 ;;Total ram usage:        0 bytes
 10156 ;; Hardware stack levels used:    1
 10157 ;; Hardware stack levels required when called:    4
 10158 ;; This function calls:
 10159 ;;		Nothing
 10160 ;; This function is called by:
 10161 ;;		_SYSTEM_Initialize
 10162 ;; This function uses a non-reentrant model
 10163 ;;
 10164                           
 10165                           
 10166                           ;psect for function _ADC_Initialize
 10167  13C1                     _ADC_Initialize:	
 10168                           
 10169                           ;adc.c: 67: ADCON0 = 0x01;
 10170                           
 10171                           ;incstack = 0
 10172                           ; Regs used in _ADC_Initialize: [wreg+status,2]
 10173  13C1  3001               	movlw	1
 10174  13C2  0021               	movlb	1	; select bank1
 10175  13C3  009D               	movwf	29	;volatile
 10176                           
 10177                           ;adc.c: 70: ADCON1 = 0x90;
 10178  13C4  3090               	movlw	144
 10179  13C5  009E               	movwf	30	;volatile
 10180                           
 10181                           ;adc.c: 73: ADRESL = 0x00;
 10182  13C6  019B               	clrf	27	;volatile
 10183                           
 10184                           ;adc.c: 76: ADRESH = 0x00;
 10185  13C7  019C               	clrf	28	;volatile
 10186  13C8  0008               	return
 10187  13C9                     __end_of_ADC_Initialize:	
 10188                           
 10189                           	psect	text52
 10190  0B60                     __ptext52:	
 10191 ;; *************** function _DOOR_run *****************
 10192 ;; Defined at:
 10193 ;;		line 23 in file "doorlogic.c"
 10194 ;; Parameters:    Size  Location     Type
 10195 ;;		None
 10196 ;; Auto vars:     Size  Location     Type
 10197 ;;		None
 10198 ;; Return value:  Size  Location     Type
 10199 ;;                  1    wreg      enum E3332
 10200 ;; Registers used:
 10201 ;;		wreg, status,2, status,0, pclath, cstack
 10202 ;; Tracked objects:
 10203 ;;		On entry : 0/0
 10204 ;;		On exit  : 0/0
 10205 ;;		Unchanged: 0/0
 10206 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10207 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10208 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10209 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10210 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10211 ;;Total ram usage:        4 bytes
 10212 ;; Hardware stack levels used:    1
 10213 ;; Hardware stack levels required when called:    5
 10214 ;; This function calls:
 10215 ;;		_Timeout_getGlobalCounter
 10216 ;; This function is called by:
 10217 ;;		_main
 10218 ;; This function uses a non-reentrant model
 10219 ;;
 10220                           
 10221                           
 10222                           ;psect for function _DOOR_run
 10223  0B60                     _DOOR_run:	
 10224                           
 10225                           ;doorlogic.c: 24: static DOOR previousDoorState = DOOR_CLOSED;
 10226                           ;doorlogic.c: 25: static unsigned long doorStateDuration = 0;
 10227                           ;doorlogic.c: 27: if(PORTAbits.RA2){
 10228                           
 10229                           ;incstack = 0
 10230                           ; Regs used in _DOOR_run: [wreg+status,2+status,0+pclath+cstack]
 10231  0B60  0020               	movlb	0	; select bank0
 10232  0B61  1D0C               	btfss	12,2	;volatile
 10233  0B62  2B84               	goto	l6204
 10234                           
 10235                           ;doorlogic.c: 29: if(previousDoorState == DOOR_CLOSED){
 10236  0B63  0021               	movlb	1	; select bank1
 10237  0B64  085A               	movf	DOOR_run@previousDoorState^(0+128),w
 10238  0B65  1D03               	btfss	3,2
 10239  0B66  2B7D               	goto	l6200
 10240                           
 10241                           ;doorlogic.c: 30: doorStateDuration = Timeout_getGlobalCounter();
 10242  0B67  3188  2000  318B   	fcall	_Timeout_getGlobalCounter
 10243  0B6A  0020               	movlb	0	; select bank0
 10244  0B6B  0824               	movf	?_Timeout_getGlobalCounter+3,w
 10245  0B6C  0022               	movlb	2	; select bank2
 10246  0B6D  00A7               	movwf	(DOOR_run@doorStateDuration+3)^(0+256)
 10247  0B6E  0020               	movlb	0	; select bank0
 10248  0B6F  0823               	movf	?_Timeout_getGlobalCounter+2,w
 10249  0B70  0022               	movlb	2	; select bank2
 10250  0B71  00A6               	movwf	(DOOR_run@doorStateDuration+2)^(0+256)
 10251  0B72  0020               	movlb	0	; select bank0
 10252  0B73  0822               	movf	?_Timeout_getGlobalCounter+1,w
 10253  0B74  0022               	movlb	2	; select bank2
 10254  0B75  00A5               	movwf	(DOOR_run@doorStateDuration+1)^(0+256)
 10255  0B76  0020               	movlb	0	; select bank0
 10256  0B77  0821               	movf	?_Timeout_getGlobalCounter,w
 10257  0B78  0022               	movlb	2	; select bank2
 10258  0B79  00A4               	movwf	DOOR_run@doorStateDuration^(0+256)
 10259                           
 10260                           ;doorlogic.c: 31: previousDoorState=DOOR_OPEN;
 10261  0B7A  0021               	movlb	1	; select bank1
 10262  0B7B  01DA               	clrf	DOOR_run@previousDoorState^(0+128)
 10263  0B7C  0ADA               	incf	DOOR_run@previousDoorState^(0+128),f
 10264  0B7D                     l6200:	
 10265                           
 10266                           ;doorlogic.c: 32: }
 10267                           ;doorlogic.c: 33: if(Timeout_getGlobalCounter() - doorStateDuration>=0){
 10268  0B7D  3188  2000  318B   	fcall	_Timeout_getGlobalCounter
 10269                           
 10270                           ;doorlogic.c: 34: doorState = DOOR_OPEN;
 10271  0B80  0021               	movlb	1	; select bank1
 10272  0B81  01DC               	clrf	_doorState^(0+128)
 10273  0B82  0ADC               	incf	_doorState^(0+128),f
 10274                           
 10275                           ;doorlogic.c: 36: }
 10276                           ;doorlogic.c: 37: }
 10277  0B83  2BCE               	goto	l6214
 10278  0B84                     l6204:	
 10279                           
 10280                           ;doorlogic.c: 38: else {
 10281                           ;doorlogic.c: 39: if(previousDoorState== DOOR_OPEN){
 10282  0B84  0021               	movlb	1	; select bank1
 10283  0B85  035A               	decf	DOOR_run@previousDoorState^(0+128),w
 10284  0B86  1D03               	btfss	3,2
 10285  0B87  2B9D               	goto	l6210
 10286                           
 10287                           ;doorlogic.c: 40: doorStateDuration = Timeout_getGlobalCounter();
 10288  0B88  3188  2000  318B   	fcall	_Timeout_getGlobalCounter
 10289  0B8B  0020               	movlb	0	; select bank0
 10290  0B8C  0824               	movf	?_Timeout_getGlobalCounter+3,w
 10291  0B8D  0022               	movlb	2	; select bank2
 10292  0B8E  00A7               	movwf	(DOOR_run@doorStateDuration+3)^(0+256)
 10293  0B8F  0020               	movlb	0	; select bank0
 10294  0B90  0823               	movf	?_Timeout_getGlobalCounter+2,w
 10295  0B91  0022               	movlb	2	; select bank2
 10296  0B92  00A6               	movwf	(DOOR_run@doorStateDuration+2)^(0+256)
 10297  0B93  0020               	movlb	0	; select bank0
 10298  0B94  0822               	movf	?_Timeout_getGlobalCounter+1,w
 10299  0B95  0022               	movlb	2	; select bank2
 10300  0B96  00A5               	movwf	(DOOR_run@doorStateDuration+1)^(0+256)
 10301  0B97  0020               	movlb	0	; select bank0
 10302  0B98  0821               	movf	?_Timeout_getGlobalCounter,w
 10303  0B99  0022               	movlb	2	; select bank2
 10304  0B9A  00A4               	movwf	DOOR_run@doorStateDuration^(0+256)
 10305                           
 10306                           ;doorlogic.c: 41: previousDoorState=DOOR_CLOSED;
 10307  0B9B  0021               	movlb	1	; select bank1
 10308  0B9C  01DA               	clrf	DOOR_run@previousDoorState^(0+128)
 10309  0B9D                     l6210:	
 10310                           
 10311                           ;doorlogic.c: 42: }
 10312                           ;doorlogic.c: 43: if(Timeout_getGlobalCounter() - doorStateDuration>=20000){
 10313  0B9D  0022               	movlb	2	; select bank2
 10314  0B9E  0924               	comf	DOOR_run@doorStateDuration^(0+256),w
 10315  0B9F  0020               	movlb	0	; select bank0
 10316  0BA0  00A5               	movwf	??_DOOR_run
 10317  0BA1  0022               	movlb	2	; select bank2
 10318  0BA2  0925               	comf	(DOOR_run@doorStateDuration+1)^(0+256),w
 10319  0BA3  0020               	movlb	0	; select bank0
 10320  0BA4  00A6               	movwf	??_DOOR_run+1
 10321  0BA5  0022               	movlb	2	; select bank2
 10322  0BA6  0926               	comf	(DOOR_run@doorStateDuration+2)^(0+256),w
 10323  0BA7  0020               	movlb	0	; select bank0
 10324  0BA8  00A7               	movwf	??_DOOR_run+2
 10325  0BA9  0022               	movlb	2	; select bank2
 10326  0BAA  0927               	comf	(DOOR_run@doorStateDuration+3)^(0+256),w
 10327  0BAB  0020               	movlb	0	; select bank0
 10328  0BAC  00A8               	movwf	??_DOOR_run+3
 10329  0BAD  0AA5               	incf	??_DOOR_run,f
 10330  0BAE  1903               	skipnz
 10331  0BAF  0AA6               	incf	??_DOOR_run+1,f
 10332  0BB0  1903               	skipnz
 10333  0BB1  0AA7               	incf	??_DOOR_run+2,f
 10334  0BB2  1903               	skipnz
 10335  0BB3  0AA8               	incf	??_DOOR_run+3,f
 10336  0BB4  3188  2000  318B   	fcall	_Timeout_getGlobalCounter
 10337  0BB7  0020               	movlb	0	; select bank0
 10338  0BB8  0821               	movf	?_Timeout_getGlobalCounter,w
 10339  0BB9  07A5               	addwf	??_DOOR_run,f
 10340  0BBA  0822               	movf	?_Timeout_getGlobalCounter+1,w
 10341  0BBB  3DA6               	addwfc	??_DOOR_run+1,f
 10342  0BBC  0823               	movf	?_Timeout_getGlobalCounter+2,w
 10343  0BBD  3DA7               	addwfc	??_DOOR_run+2,f
 10344  0BBE  0824               	movf	?_Timeout_getGlobalCounter+3,w
 10345  0BBF  3DA8               	addwfc	??_DOOR_run+3,f
 10346  0BC0  0828               	movf	??_DOOR_run+3,w
 10347  0BC1  1D03               	btfss	3,2
 10348  0BC2  2BCC               	goto	l6212
 10349  0BC3  0827               	movf	??_DOOR_run+2,w
 10350  0BC4  1D03               	btfss	3,2
 10351  0BC5  2BCC               	goto	l6212
 10352  0BC6  3020               	movlw	32
 10353  0BC7  0225               	subwf	??_DOOR_run,w
 10354  0BC8  304E               	movlw	78
 10355  0BC9  3B26               	subwfb	??_DOOR_run+1,w
 10356  0BCA  1C03               	btfss	3,0
 10357  0BCB  2BCE               	goto	l6214
 10358  0BCC                     l6212:	
 10359                           
 10360                           ;doorlogic.c: 44: doorState= DOOR_CLOSED;
 10361  0BCC  0021               	movlb	1	; select bank1
 10362  0BCD  01DC               	clrf	_doorState^(0+128)
 10363  0BCE                     l6214:	
 10364                           
 10365                           ;doorlogic.c: 46: }
 10366                           ;doorlogic.c: 48: }
 10367                           ;doorlogic.c: 50: return(doorState);
 10368  0BCE  0021               	movlb	1	; select bank1
 10369  0BCF  085C               	movf	_doorState^(0+128),w
 10370  0BD0  0008               	return
 10371  0BD1                     __end_of_DOOR_run:	
 10372                           
 10373                           	psect	text53
 10374  0800                     __ptext53:	
 10375 ;; *************** function _Timeout_getGlobalCounter *****************
 10376 ;; Defined at:
 10377 ;;		line 21 in file "timeout.c"
 10378 ;; Parameters:    Size  Location     Type
 10379 ;;		None
 10380 ;; Auto vars:     Size  Location     Type
 10381 ;;		None
 10382 ;; Return value:  Size  Location     Type
 10383 ;;                  4    1[BANK0 ] unsigned long 
 10384 ;; Registers used:
 10385 ;;		wreg
 10386 ;; Tracked objects:
 10387 ;;		On entry : 0/0
 10388 ;;		On exit  : 0/0
 10389 ;;		Unchanged: 0/0
 10390 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10391 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10392 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10393 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10394 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10395 ;;Total ram usage:        4 bytes
 10396 ;; Hardware stack levels used:    1
 10397 ;; Hardware stack levels required when called:    4
 10398 ;; This function calls:
 10399 ;;		Nothing
 10400 ;; This function is called by:
 10401 ;;		_main
 10402 ;;		_DOOR_run
 10403 ;; This function uses a non-reentrant model
 10404 ;;
 10405                           
 10406                           
 10407                           ;psect for function _Timeout_getGlobalCounter
 10408  0800                     _Timeout_getGlobalCounter:	
 10409                           
 10410                           ;timeout.c: 23: return globalCounter;
 10411                           
 10412                           ;incstack = 0
 10413                           ; Regs used in _Timeout_getGlobalCounter: [wreg]
 10414  0800  0021               	movlb	1	; select bank1
 10415  0801  0851               	movf	(_globalCounter+3)^(0+128),w	;volatile
 10416  0802  0020               	movlb	0	; select bank0
 10417  0803  00A4               	movwf	?_Timeout_getGlobalCounter+3
 10418  0804  0021               	movlb	1	; select bank1
 10419  0805  0850               	movf	(_globalCounter+2)^(0+128),w	;volatile
 10420  0806  0020               	movlb	0	; select bank0
 10421  0807  00A3               	movwf	?_Timeout_getGlobalCounter+2
 10422  0808  0021               	movlb	1	; select bank1
 10423  0809  084F               	movf	(_globalCounter+1)^(0+128),w	;volatile
 10424  080A  0020               	movlb	0	; select bank0
 10425  080B  00A2               	movwf	?_Timeout_getGlobalCounter+1
 10426  080C  0021               	movlb	1	; select bank1
 10427  080D  084E               	movf	_globalCounter^(0+128),w	;volatile
 10428  080E  0020               	movlb	0	; select bank0
 10429  080F  00A1               	movwf	?_Timeout_getGlobalCounter
 10430  0810  0008               	return
 10431  0811                     __end_of_Timeout_getGlobalCounter:	
 10432                           
 10433                           	psect	text54
 10434  0003                     __ptext54:	
 10435 ;; *************** function _DOOR_init *****************
 10436 ;; Defined at:
 10437 ;;		line 10 in file "doorlogic.c"
 10438 ;; Parameters:    Size  Location     Type
 10439 ;;		None
 10440 ;; Auto vars:     Size  Location     Type
 10441 ;;		None
 10442 ;; Return value:  Size  Location     Type
 10443 ;;                  1    wreg      void 
 10444 ;; Registers used:
 10445 ;;		None
 10446 ;; Tracked objects:
 10447 ;;		On entry : 0/0
 10448 ;;		On exit  : 0/0
 10449 ;;		Unchanged: 0/0
 10450 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10451 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10452 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10453 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10454 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10455 ;;Total ram usage:        0 bytes
 10456 ;; Hardware stack levels used:    1
 10457 ;; Hardware stack levels required when called:    4
 10458 ;; This function calls:
 10459 ;;		Nothing
 10460 ;; This function is called by:
 10461 ;;		_main
 10462 ;; This function uses a non-reentrant model
 10463 ;;
 10464                           
 10465                           
 10466                           ;psect for function _DOOR_init
 10467  0003                     _DOOR_init:	
 10468                           
 10469                           ;incstack = 0
 10470                           ; Regs used in _DOOR_init: []
 10471  0003  0008               	return
 10472  0004                     __end_of_DOOR_init:	
 10473                           
 10474                           	psect	text55
 10475  0077                     __ptext55:	
 10476 ;; *************** function _BMP_readTemperature *****************
 10477 ;; Defined at:
 10478 ;;		line 72 in file "bmp280.c"
 10479 ;; Parameters:    Size  Location     Type
 10480 ;;		None
 10481 ;; Auto vars:     Size  Location     Type
 10482 ;;  tmp             1   25[BANK1 ] unsigned char 
 10483 ;;  status          1   24[BANK1 ] unsigned char 
 10484 ;; Return value:  Size  Location     Type
 10485 ;;                  3    6[BANK1 ] float 
 10486 ;; Registers used:
 10487 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10488 ;; Tracked objects:
 10489 ;;		On entry : 0/0
 10490 ;;		On exit  : 0/0
 10491 ;;		Unchanged: 0/0
 10492 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10493 ;;      Params:         0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0
 10494 ;;      Locals:         0       0       5       0       0       0       0       0       0       0       0       0       
      +0       0
 10495 ;;      Temps:          0       0      12       0       0       0       0       0       0       0       0       0       
      +0       0
 10496 ;;      Totals:         0       0      20       0       0       0       0       0       0       0       0       0       
      +0       0
 10497 ;;Total ram usage:       20 bytes
 10498 ;; Hardware stack levels used:    1
 10499 ;; Hardware stack levels required when called:    9
 10500 ;; This function calls:
 10501 ;;		_BMP_init
 10502 ;;		_Diag_getTempSensorHealth
 10503 ;;		_Diag_setTempSensorHealth
 10504 ;;		_HMC5883L_ReadBits
 10505 ;;		_I2C_BufferRead
 10506 ;;		_I2C_ByteWrite
 10507 ;;		___aldiv
 10508 ;;		___altoft
 10509 ;;		___awtoft
 10510 ;;		___ftadd
 10511 ;;		___ftdiv
 10512 ;;		___ftmul
 10513 ;;		___ftneg
 10514 ;;		___fttol
 10515 ;;		___lwtoft
 10516 ;; This function is called by:
 10517 ;;		_main
 10518 ;; This function uses a non-reentrant model
 10519 ;;
 10520                           
 10521                           
 10522                           ;psect for function _BMP_readTemperature
 10523  0077                     _BMP_readTemperature:	
 10524                           
 10525                           ;bmp280.c: 74: char tmp=0;
 10526                           
 10527                           ;incstack = 0
 10528                           ; Regs used in _BMP_readTemperature: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 10529  0077  0021               	movlb	1	; select bank1
 10530  0078  01B9               	clrf	BMP_readTemperature@tmp^(0+128)
 10531                           
 10532                           ;bmp280.c: 75: bool status;
 10533                           ;bmp280.c: 77: tmp=0x41;
 10534  0079  3041               	movlw	65
 10535  007A  00A9               	movwf	??_BMP_readTemperature^(0+128)
 10536  007B  0829               	movf	??_BMP_readTemperature^(0+128),w
 10537  007C  00B9               	movwf	BMP_readTemperature@tmp^(0+128)
 10538                           
 10539                           ;bmp280.c: 78: if(Diag_getTempSensorHealth()==0)
 10540  007D  3193  2367  3180   	fcall	_Diag_getTempSensorHealth
 10541  0080  3A00               	xorlw	0
 10542  0081  1D03               	skipz
 10543  0082  2886               	goto	l1019
 10544                           
 10545                           ;bmp280.c: 79: {
 10546                           ;bmp280.c: 80: BMP_init();
 10547  0083  318B  23D1  3180   	fcall	_BMP_init
 10548  0086                     l1019:	
 10549                           
 10550                           ;bmp280.c: 81: }
 10551                           ;bmp280.c: 82: I2C_ByteWrite(0x76, &tmp, 0xF4);
 10552  0086  30B9               	movlw	(low (BMP_readTemperature@tmp| 0))& (0+255)
 10553  0087  0021               	movlb	1	; select bank1
 10554  0088  00A9               	movwf	??_BMP_readTemperature^(0+128)
 10555  0089  0829               	movf	??_BMP_readTemperature^(0+128),w
 10556  008A  0020               	movlb	0	; select bank0
 10557  008B  00AF               	movwf	I2C_ByteWrite@pBuffer
 10558  008C  30F4               	movlw	244
 10559  008D  0021               	movlb	1	; select bank1
 10560  008E  00AA               	movwf	(??_BMP_readTemperature+1)^(0+128)
 10561  008F  082A               	movf	(??_BMP_readTemperature+1)^(0+128),w
 10562  0090  0020               	movlb	0	; select bank0
 10563  0091  00B0               	movwf	I2C_ByteWrite@WriteAddr
 10564  0092  3076               	movlw	118
 10565  0093  3188  2046  3180   	fcall	_I2C_ByteWrite
 10566  0096                     l1020:	
 10567                           ;bmp280.c: 83: do
 10568                           
 10569                           
 10570                           ;bmp280.c: 84: {
 10571                           ;bmp280.c: 85: status=HMC5883L_ReadBits(0x76, 0xF3 , 3, 1, &tmp);
 10572  0096  30F3               	movlw	243
 10573  0097  0021               	movlb	1	; select bank1
 10574  0098  00A9               	movwf	??_BMP_readTemperature^(0+128)
 10575  0099  0829               	movf	??_BMP_readTemperature^(0+128),w
 10576  009A  0020               	movlb	0	; select bank0
 10577  009B  00C3               	movwf	HMC5883L_ReadBits@regAddr
 10578  009C  3003               	movlw	3
 10579  009D  0021               	movlb	1	; select bank1
 10580  009E  00AA               	movwf	(??_BMP_readTemperature+1)^(0+128)
 10581  009F  082A               	movf	(??_BMP_readTemperature+1)^(0+128),w
 10582  00A0  0020               	movlb	0	; select bank0
 10583  00A1  00C4               	movwf	HMC5883L_ReadBits@bitStart
 10584  00A2  01C5               	clrf	HMC5883L_ReadBits@length
 10585  00A3  0AC5               	incf	HMC5883L_ReadBits@length,f
 10586  00A4  30B9               	movlw	(low (BMP_readTemperature@tmp| 0))& (0+255)
 10587  00A5  0021               	movlb	1	; select bank1
 10588  00A6  00AB               	movwf	(??_BMP_readTemperature+2)^(0+128)
 10589  00A7  082B               	movf	(??_BMP_readTemperature+2)^(0+128),w
 10590  00A8  0020               	movlb	0	; select bank0
 10591  00A9  00C6               	movwf	HMC5883L_ReadBits@data
 10592  00AA  3076               	movlw	118
 10593  00AB  3189  2104  3180   	fcall	_HMC5883L_ReadBits
 10594  00AE  0021               	movlb	1	; select bank1
 10595  00AF  00AC               	movwf	(??_BMP_readTemperature+3)^(0+128)
 10596  00B0  082C               	movf	(??_BMP_readTemperature+3)^(0+128),w
 10597  00B1  00B8               	movwf	BMP_readTemperature@status^(0+128)
 10598                           
 10599                           ;bmp280.c: 86: } while(tmp==0 && status==1);
 10600  00B2  0839               	movf	BMP_readTemperature@tmp^(0+128),w
 10601  00B3  1903               	btfsc	3,2
 10602  00B4  0338               	decf	BMP_readTemperature@status^(0+128),w
 10603  00B5  1903               	btfsc	3,2
 10604  00B6  2896               	goto	l1020
 10605                           
 10606                           ;bmp280.c: 87: if(status==0)
 10607  00B7  0838               	movf	BMP_readTemperature@status^(0+128),w
 10608  00B8  1D03               	btfss	3,2
 10609  00B9  28C5               	goto	l6140
 10610                           
 10611                           ;bmp280.c: 88: {
 10612                           ;bmp280.c: 89: Diag_setTempSensorHealth(0);
 10613  00BA  3000               	movlw	0
 10614  00BB  3193  23B9         	fcall	_Diag_setTempSensorHealth
 10615                           
 10616                           ;bmp280.c: 90: return -55;
 10617  00BD  3000               	movlw	0
 10618  00BE  0021               	movlb	1	; select bank1
 10619  00BF  00A6               	movwf	?_BMP_readTemperature^(0+128)
 10620  00C0  305C               	movlw	92
 10621  00C1  00A7               	movwf	(?_BMP_readTemperature+1)^(0+128)
 10622  00C2  30C2               	movlw	194
 10623  00C3  00A8               	movwf	(?_BMP_readTemperature+2)^(0+128)
 10624  00C4  0008               	return
 10625  00C5                     l6140:	
 10626                           
 10627                           ;bmp280.c: 91: }
 10628                           ;bmp280.c: 93: if(I2C_BufferRead(0x76, data, 0xF7, 8)==0)
 10629  00C5  30BC               	movlw	low _data
 10630  00C6  0020               	movlb	0	; select bank0
 10631  00C7  00B1               	movwf	I2C_BufferRead@pBuffer
 10632  00C8  3001               	movlw	high _data
 10633  00C9  00B2               	movwf	I2C_BufferRead@pBuffer+1
 10634  00CA  30F7               	movlw	247
 10635  00CB  0021               	movlb	1	; select bank1
 10636  00CC  00A9               	movwf	??_BMP_readTemperature^(0+128)
 10637  00CD  0829               	movf	??_BMP_readTemperature^(0+128),w
 10638  00CE  0020               	movlb	0	; select bank0
 10639  00CF  00B3               	movwf	I2C_BufferRead@ReadAddr
 10640  00D0  3008               	movlw	8
 10641  00D1  00B4               	movwf	I2C_BufferRead@NumByteToRead
 10642  00D2  3000               	movlw	0
 10643  00D3  00B5               	movwf	I2C_BufferRead@NumByteToRead+1
 10644  00D4  3076               	movlw	118
 10645  00D5  318A  223F  3180   	fcall	_I2C_BufferRead
 10646  00D8  3A00               	xorlw	0
 10647  00D9  1D03               	skipz
 10648  00DA  28E6               	goto	l6148
 10649                           
 10650                           ;bmp280.c: 94: {
 10651                           ;bmp280.c: 95: Diag_setTempSensorHealth(0);
 10652  00DB  3000               	movlw	0
 10653  00DC  3193  23B9         	fcall	_Diag_setTempSensorHealth
 10654                           
 10655                           ;bmp280.c: 96: return -55;
 10656  00DE  3000               	movlw	0
 10657  00DF  0021               	movlb	1	; select bank1
 10658  00E0  00A6               	movwf	?_BMP_readTemperature^(0+128)
 10659  00E1  305C               	movlw	92
 10660  00E2  00A7               	movwf	(?_BMP_readTemperature+1)^(0+128)
 10661  00E3  30C2               	movlw	194
 10662  00E4  00A8               	movwf	(?_BMP_readTemperature+2)^(0+128)
 10663  00E5  0008               	return
 10664  00E6                     l6148:	
 10665                           
 10666                           ;bmp280.c: 97: }
 10667                           ;bmp280.c: 101: adc_t = (((long)(data[3] & 0xFF) * 65536) + ((long)(data[4] & 0xFF) * 25
      +                          6) + (long)(data[5] & 0xF0)) / 16;
 10668  00E6  3000               	movlw	0
 10669  00E7  0020               	movlb	0	; select bank0
 10670  00E8  00A4               	movwf	___aldiv@divisor+3
 10671  00E9  3000               	movlw	0
 10672  00EA  00A3               	movwf	___aldiv@divisor+2
 10673  00EB  3000               	movlw	0
 10674  00EC  00A2               	movwf	___aldiv@divisor+1
 10675  00ED  3010               	movlw	16
 10676  00EE  00A1               	movwf	___aldiv@divisor
 10677  00EF  0023               	movlb	3	; select bank3
 10678  00F0  0841               	movf	(_data^(0+384)+5),w
 10679  00F1  39F0               	andlw	240
 10680  00F2  0021               	movlb	1	; select bank1
 10681  00F3  00A9               	movwf	??_BMP_readTemperature^(0+128)
 10682  00F4  01AA               	clrf	(??_BMP_readTemperature^(0+128)+1)
 10683  00F5  01AB               	clrf	(??_BMP_readTemperature^(0+128)+2)
 10684  00F6  01AC               	clrf	(??_BMP_readTemperature^(0+128)+3)
 10685  00F7  0023               	movlb	3	; select bank3
 10686  00F8  0840               	movf	(_data^(0+384)+4),w
 10687  00F9  0021               	movlb	1	; select bank1
 10688  00FA  00AD               	movwf	(??_BMP_readTemperature+4)^(0+128)
 10689  00FB  01AE               	clrf	((??_BMP_readTemperature+4)^(0+128)+1)
 10690  00FC  01AF               	clrf	((??_BMP_readTemperature+4)^(0+128)+2)
 10691  00FD  01B0               	clrf	((??_BMP_readTemperature+4)^(0+128)+3)
 10692  00FE  3008               	movlw	8
 10693  00FF                     u5955:	
 10694  00FF  35AD               	lslf	(??_BMP_readTemperature+4)^(0+128),f
 10695  0100  0DAE               	rlf	((??_BMP_readTemperature+4)^(0+128)+1),f
 10696  0101  0DAF               	rlf	((??_BMP_readTemperature+4)^(0+128)+2),f
 10697  0102  0DB0               	rlf	((??_BMP_readTemperature+4)^(0+128)+3),f
 10698  0103  0B89               	decfsz	9,f
 10699  0104  28FF               	goto	u5955
 10700  0105  0023               	movlb	3	; select bank3
 10701  0106  083F               	movf	(_data^(0+384)+3),w
 10702  0107  0021               	movlb	1	; select bank1
 10703  0108  00B1               	movwf	(??_BMP_readTemperature+8)^(0+128)
 10704  0109  01B2               	clrf	((??_BMP_readTemperature+8)^(0+128)+1)
 10705  010A  01B3               	clrf	((??_BMP_readTemperature+8)^(0+128)+2)
 10706  010B  01B4               	clrf	((??_BMP_readTemperature+8)^(0+128)+3)
 10707  010C  3010               	movlw	16
 10708  010D                     u5965:	
 10709  010D  35B1               	lslf	(??_BMP_readTemperature+8)^(0+128),f
 10710  010E  0DB2               	rlf	((??_BMP_readTemperature+8)^(0+128)+1),f
 10711  010F  0DB3               	rlf	((??_BMP_readTemperature+8)^(0+128)+2),f
 10712  0110  0DB4               	rlf	((??_BMP_readTemperature+8)^(0+128)+3),f
 10713  0111  0B89               	decfsz	9,f
 10714  0112  290D               	goto	u5965
 10715  0113  0831               	movf	(??_BMP_readTemperature+8)^(0+128),w
 10716  0114  07AD               	addwf	(??_BMP_readTemperature+4)^(0+128),f
 10717  0115  0832               	movf	(??_BMP_readTemperature+9)^(0+128),w
 10718  0116  3DAE               	addwfc	((??_BMP_readTemperature+4)^(0+128)+1),f
 10719  0117  0833               	movf	(??_BMP_readTemperature+10)^(0+128),w
 10720  0118  3DAF               	addwfc	((??_BMP_readTemperature+4)^(0+128)+2),f
 10721  0119  0834               	movf	(??_BMP_readTemperature+11)^(0+128),w
 10722  011A  3DB0               	addwfc	((??_BMP_readTemperature+4)^(0+128)+3),f
 10723  011B  082D               	movf	(??_BMP_readTemperature+4)^(0+128),w
 10724  011C  07A9               	addwf	??_BMP_readTemperature^(0+128),f
 10725  011D  082E               	movf	(??_BMP_readTemperature+5)^(0+128),w
 10726  011E  3DAA               	addwfc	(??_BMP_readTemperature^(0+128)+1),f
 10727  011F  082F               	movf	(??_BMP_readTemperature+6)^(0+128),w
 10728  0120  3DAB               	addwfc	(??_BMP_readTemperature^(0+128)+2),f
 10729  0121  0830               	movf	(??_BMP_readTemperature+7)^(0+128),w
 10730  0122  3DAC               	addwfc	(??_BMP_readTemperature^(0+128)+3),f
 10731  0123  082C               	movf	(??_BMP_readTemperature+3)^(0+128),w
 10732  0124  0020               	movlb	0	; select bank0
 10733  0125  00A8               	movwf	___aldiv@dividend+3
 10734  0126  0021               	movlb	1	; select bank1
 10735  0127  082B               	movf	(??_BMP_readTemperature+2)^(0+128),w
 10736  0128  0020               	movlb	0	; select bank0
 10737  0129  00A7               	movwf	___aldiv@dividend+2
 10738  012A  0021               	movlb	1	; select bank1
 10739  012B  082A               	movf	(??_BMP_readTemperature+1)^(0+128),w
 10740  012C  0020               	movlb	0	; select bank0
 10741  012D  00A6               	movwf	___aldiv@dividend+1
 10742  012E  0021               	movlb	1	; select bank1
 10743  012F  0829               	movf	??_BMP_readTemperature^(0+128),w
 10744  0130  0020               	movlb	0	; select bank0
 10745  0131  00A5               	movwf	___aldiv@dividend
 10746  0132  3187  2778  3180   	fcall	___aldiv
 10747  0135  0020               	movlb	0	; select bank0
 10748  0136  0824               	movf	?___aldiv+3,w
 10749  0137  0021               	movlb	1	; select bank1
 10750  0138  00D5               	movwf	(_adc_t+3)^(0+128)
 10751  0139  0020               	movlb	0	; select bank0
 10752  013A  0823               	movf	?___aldiv+2,w
 10753  013B  0021               	movlb	1	; select bank1
 10754  013C  00D4               	movwf	(_adc_t+2)^(0+128)
 10755  013D  0020               	movlb	0	; select bank0
 10756  013E  0822               	movf	?___aldiv+1,w
 10757  013F  0021               	movlb	1	; select bank1
 10758  0140  00D3               	movwf	(_adc_t+1)^(0+128)
 10759  0141  0020               	movlb	0	; select bank0
 10760  0142  0821               	movf	?___aldiv,w
 10761  0143  0021               	movlb	1	; select bank1
 10762  0144  00D2               	movwf	_adc_t^(0+128)
 10763                           
 10764                           ;bmp280.c: 104: var1 = (((double)adc_t) / 16384.0 - ((double)dig_T1) / 1024.0) * ((doubl
      +                          e)dig_T2);
 10765  0145  0022               	movlb	2	; select bank2
 10766  0146  0857               	movf	(_dig_T2+1)^(0+256),w
 10767  0147  0020               	movlb	0	; select bank0
 10768  0148  00AA               	movwf	___awtoft@c+1
 10769  0149  0022               	movlb	2	; select bank2
 10770  014A  0856               	movf	_dig_T2^(0+256),w
 10771  014B  0020               	movlb	0	; select bank0
 10772  014C  00A9               	movwf	___awtoft@c
 10773  014D  3196  26BF  3180   	fcall	___awtoft
 10774  0150  0020               	movlb	0	; select bank0
 10775  0151  0829               	movf	?___awtoft,w
 10776  0152  00D6               	movwf	___ftmul@f1
 10777  0153  082A               	movf	?___awtoft+1,w
 10778  0154  00D7               	movwf	___ftmul@f1+1
 10779  0155  082B               	movf	?___awtoft+2,w
 10780  0156  00D8               	movwf	___ftmul@f1+2
 10781  0157  0021               	movlb	1	; select bank1
 10782  0158  0857               	movf	(_dig_T1+1)^(0+128),w
 10783  0159  0020               	movlb	0	; select bank0
 10784  015A  00AA               	movwf	___lwtoft@c+1
 10785  015B  0021               	movlb	1	; select bank1
 10786  015C  0856               	movf	_dig_T1^(0+128),w
 10787  015D  0020               	movlb	0	; select bank0
 10788  015E  00A9               	movwf	___lwtoft@c
 10789  015F  3194  24A6  3180   	fcall	___lwtoft
 10790  0162  0020               	movlb	0	; select bank0
 10791  0163  0829               	movf	?___lwtoft,w
 10792  0164  00B4               	movwf	___ftdiv@f1
 10793  0165  082A               	movf	?___lwtoft+1,w
 10794  0166  00B5               	movwf	___ftdiv@f1+1
 10795  0167  082B               	movf	?___lwtoft+2,w
 10796  0168  00B6               	movwf	___ftdiv@f1+2
 10797  0169  3000               	movlw	0
 10798  016A  00B1               	movwf	___ftdiv@f2
 10799  016B  3080               	movlw	128
 10800  016C  00B2               	movwf	___ftdiv@f2+1
 10801  016D  3044               	movlw	68
 10802  016E  00B3               	movwf	___ftdiv@f2+2
 10803  016F  318D  25D9  3180   	fcall	___ftdiv
 10804  0172  0020               	movlb	0	; select bank0
 10805  0173  0831               	movf	?___ftdiv,w
 10806  0174  00C1               	movwf	___ftneg@f1
 10807  0175  0832               	movf	?___ftdiv+1,w
 10808  0176  00C2               	movwf	___ftneg@f1+1
 10809  0177  0833               	movf	?___ftdiv+2,w
 10810  0178  00C3               	movwf	___ftneg@f1+2
 10811  0179  3193  23DA  3180   	fcall	___ftneg
 10812  017C  0020               	movlb	0	; select bank0
 10813  017D  0841               	movf	?___ftneg,w
 10814  017E  00C9               	movwf	___ftadd@f1
 10815  017F  0842               	movf	?___ftneg+1,w
 10816  0180  00CA               	movwf	___ftadd@f1+1
 10817  0181  0843               	movf	?___ftneg+2,w
 10818  0182  00CB               	movwf	___ftadd@f1+2
 10819  0183  3000               	movlw	0
 10820  0184  00B1               	movwf	___ftdiv@f2
 10821  0185  3080               	movlw	128
 10822  0186  00B2               	movwf	___ftdiv@f2+1
 10823  0187  3046               	movlw	70
 10824  0188  00B3               	movwf	___ftdiv@f2+2
 10825  0189  0021               	movlb	1	; select bank1
 10826  018A  0855               	movf	(_adc_t+3)^(0+128),w
 10827  018B  0020               	movlb	0	; select bank0
 10828  018C  00AC               	movwf	___altoft@c+3
 10829  018D  0021               	movlb	1	; select bank1
 10830  018E  0854               	movf	(_adc_t+2)^(0+128),w
 10831  018F  0020               	movlb	0	; select bank0
 10832  0190  00AB               	movwf	___altoft@c+2
 10833  0191  0021               	movlb	1	; select bank1
 10834  0192  0853               	movf	(_adc_t+1)^(0+128),w
 10835  0193  0020               	movlb	0	; select bank0
 10836  0194  00AA               	movwf	___altoft@c+1
 10837  0195  0021               	movlb	1	; select bank1
 10838  0196  0852               	movf	_adc_t^(0+128),w
 10839  0197  0020               	movlb	0	; select bank0
 10840  0198  00A9               	movwf	___altoft@c
 10841  0199  3188  2082  3180   	fcall	___altoft
 10842  019C  0020               	movlb	0	; select bank0
 10843  019D  0829               	movf	?___altoft,w
 10844  019E  00B4               	movwf	___ftdiv@f1
 10845  019F  082A               	movf	?___altoft+1,w
 10846  01A0  00B5               	movwf	___ftdiv@f1+1
 10847  01A1  082B               	movf	?___altoft+2,w
 10848  01A2  00B6               	movwf	___ftdiv@f1+2
 10849  01A3  318D  25D9  3180   	fcall	___ftdiv
 10850  01A6  0020               	movlb	0	; select bank0
 10851  01A7  0831               	movf	?___ftdiv,w
 10852  01A8  00CC               	movwf	___ftadd@f2
 10853  01A9  0832               	movf	?___ftdiv+1,w
 10854  01AA  00CD               	movwf	___ftadd@f2+1
 10855  01AB  0833               	movf	?___ftdiv+2,w
 10856  01AC  00CE               	movwf	___ftadd@f2+2
 10857  01AD  3186  2682  3180   	fcall	___ftadd
 10858  01B0  0020               	movlb	0	; select bank0
 10859  01B1  0849               	movf	?___ftadd,w
 10860  01B2  00D9               	movwf	___ftmul@f2
 10861  01B3  084A               	movf	?___ftadd+1,w
 10862  01B4  00DA               	movwf	___ftmul@f2+1
 10863  01B5  084B               	movf	?___ftadd+2,w
 10864  01B6  00DB               	movwf	___ftmul@f2+2
 10865  01B7  318E  2682  3180   	fcall	___ftmul
 10866  01BA  0020               	movlb	0	; select bank0
 10867  01BB  0856               	movf	?___ftmul,w
 10868  01BC  0022               	movlb	2	; select bank2
 10869  01BD  00B4               	movwf	_var1^(0+256)
 10870  01BE  0020               	movlb	0	; select bank0
 10871  01BF  0857               	movf	?___ftmul+1,w
 10872  01C0  0022               	movlb	2	; select bank2
 10873  01C1  00B5               	movwf	(_var1+1)^(0+256)
 10874  01C2  0020               	movlb	0	; select bank0
 10875  01C3  0858               	movf	?___ftmul+2,w
 10876  01C4  0022               	movlb	2	; select bank2
 10877  01C5  00B6               	movwf	(_var1+2)^(0+256)
 10878                           
 10879                           ;bmp280.c: 105: var2 = ((((double)adc_t) / 131072.0 - ((double)dig_T1) / 8192.0) *
 10880                           ;bmp280.c: 106: (((double)adc_t) / 131072.0 - ((double)dig_T1) / 8192.0)) * ((double)dig
      +                          _T3);
 10881  01C6  0021               	movlb	1	; select bank1
 10882  01C7  0857               	movf	(_dig_T1+1)^(0+128),w
 10883  01C8  0020               	movlb	0	; select bank0
 10884  01C9  00AA               	movwf	___lwtoft@c+1
 10885  01CA  0021               	movlb	1	; select bank1
 10886  01CB  0856               	movf	_dig_T1^(0+128),w
 10887  01CC  0020               	movlb	0	; select bank0
 10888  01CD  00A9               	movwf	___lwtoft@c
 10889  01CE  3194  24A6  3180   	fcall	___lwtoft
 10890  01D1  0020               	movlb	0	; select bank0
 10891  01D2  0829               	movf	?___lwtoft,w
 10892  01D3  00B4               	movwf	___ftdiv@f1
 10893  01D4  082A               	movf	?___lwtoft+1,w
 10894  01D5  00B5               	movwf	___ftdiv@f1+1
 10895  01D6  082B               	movf	?___lwtoft+2,w
 10896  01D7  00B6               	movwf	___ftdiv@f1+2
 10897  01D8  3000               	movlw	0
 10898  01D9  00B1               	movwf	___ftdiv@f2
 10899  01DA  3000               	movlw	0
 10900  01DB  00B2               	movwf	___ftdiv@f2+1
 10901  01DC  3046               	movlw	70
 10902  01DD  00B3               	movwf	___ftdiv@f2+2
 10903  01DE  318D  25D9  3180   	fcall	___ftdiv
 10904  01E1  0020               	movlb	0	; select bank0
 10905  01E2  0831               	movf	?___ftdiv,w
 10906  01E3  00C1               	movwf	___ftneg@f1
 10907  01E4  0832               	movf	?___ftdiv+1,w
 10908  01E5  00C2               	movwf	___ftneg@f1+1
 10909  01E6  0833               	movf	?___ftdiv+2,w
 10910  01E7  00C3               	movwf	___ftneg@f1+2
 10911  01E8  3193  23DA  3180   	fcall	___ftneg
 10912  01EB  0020               	movlb	0	; select bank0
 10913  01EC  0841               	movf	?___ftneg,w
 10914  01ED  00C9               	movwf	___ftadd@f1
 10915  01EE  0842               	movf	?___ftneg+1,w
 10916  01EF  00CA               	movwf	___ftadd@f1+1
 10917  01F0  0843               	movf	?___ftneg+2,w
 10918  01F1  00CB               	movwf	___ftadd@f1+2
 10919  01F2  3000               	movlw	0
 10920  01F3  00B1               	movwf	___ftdiv@f2
 10921  01F4  3000               	movlw	0
 10922  01F5  00B2               	movwf	___ftdiv@f2+1
 10923  01F6  3048               	movlw	72
 10924  01F7  00B3               	movwf	___ftdiv@f2+2
 10925  01F8  0021               	movlb	1	; select bank1
 10926  01F9  0855               	movf	(_adc_t+3)^(0+128),w
 10927  01FA  0020               	movlb	0	; select bank0
 10928  01FB  00AC               	movwf	___altoft@c+3
 10929  01FC  0021               	movlb	1	; select bank1
 10930  01FD  0854               	movf	(_adc_t+2)^(0+128),w
 10931  01FE  0020               	movlb	0	; select bank0
 10932  01FF  00AB               	movwf	___altoft@c+2
 10933  0200  0021               	movlb	1	; select bank1
 10934  0201  0853               	movf	(_adc_t+1)^(0+128),w
 10935  0202  0020               	movlb	0	; select bank0
 10936  0203  00AA               	movwf	___altoft@c+1
 10937  0204  0021               	movlb	1	; select bank1
 10938  0205  0852               	movf	_adc_t^(0+128),w
 10939  0206  0020               	movlb	0	; select bank0
 10940  0207  00A9               	movwf	___altoft@c
 10941  0208  3188  2082  3180   	fcall	___altoft
 10942  020B  0020               	movlb	0	; select bank0
 10943  020C  0829               	movf	?___altoft,w
 10944  020D  00B4               	movwf	___ftdiv@f1
 10945  020E  082A               	movf	?___altoft+1,w
 10946  020F  00B5               	movwf	___ftdiv@f1+1
 10947  0210  082B               	movf	?___altoft+2,w
 10948  0211  00B6               	movwf	___ftdiv@f1+2
 10949  0212  318D  25D9  3180   	fcall	___ftdiv
 10950  0215  0020               	movlb	0	; select bank0
 10951  0216  0831               	movf	?___ftdiv,w
 10952  0217  00CC               	movwf	___ftadd@f2
 10953  0218  0832               	movf	?___ftdiv+1,w
 10954  0219  00CD               	movwf	___ftadd@f2+1
 10955  021A  0833               	movf	?___ftdiv+2,w
 10956  021B  00CE               	movwf	___ftadd@f2+2
 10957  021C  3186  2682  3180   	fcall	___ftadd
 10958  021F  0020               	movlb	0	; select bank0
 10959  0220  0849               	movf	?___ftadd,w
 10960  0221  00D6               	movwf	___ftmul@f1
 10961  0222  084A               	movf	?___ftadd+1,w
 10962  0223  00D7               	movwf	___ftmul@f1+1
 10963  0224  084B               	movf	?___ftadd+2,w
 10964  0225  00D8               	movwf	___ftmul@f1+2
 10965  0226  0021               	movlb	1	; select bank1
 10966  0227  0857               	movf	(_dig_T1+1)^(0+128),w
 10967  0228  0020               	movlb	0	; select bank0
 10968  0229  00AA               	movwf	___lwtoft@c+1
 10969  022A  0021               	movlb	1	; select bank1
 10970  022B  0856               	movf	_dig_T1^(0+128),w
 10971  022C  0020               	movlb	0	; select bank0
 10972  022D  00A9               	movwf	___lwtoft@c
 10973  022E  3194  24A6  3180   	fcall	___lwtoft
 10974  0231  0020               	movlb	0	; select bank0
 10975  0232  0829               	movf	?___lwtoft,w
 10976  0233  00B4               	movwf	___ftdiv@f1
 10977  0234  082A               	movf	?___lwtoft+1,w
 10978  0235  00B5               	movwf	___ftdiv@f1+1
 10979  0236  082B               	movf	?___lwtoft+2,w
 10980  0237  00B6               	movwf	___ftdiv@f1+2
 10981  0238  3000               	movlw	0
 10982  0239  00B1               	movwf	___ftdiv@f2
 10983  023A  3000               	movlw	0
 10984  023B  00B2               	movwf	___ftdiv@f2+1
 10985  023C  3046               	movlw	70
 10986  023D  00B3               	movwf	___ftdiv@f2+2
 10987  023E  318D  25D9  3180   	fcall	___ftdiv
 10988  0241  0020               	movlb	0	; select bank0
 10989  0242  0831               	movf	?___ftdiv,w
 10990  0243  00C1               	movwf	___ftneg@f1
 10991  0244  0832               	movf	?___ftdiv+1,w
 10992  0245  00C2               	movwf	___ftneg@f1+1
 10993  0246  0833               	movf	?___ftdiv+2,w
 10994  0247  00C3               	movwf	___ftneg@f1+2
 10995  0248  3193  23DA  3180   	fcall	___ftneg
 10996  024B  0020               	movlb	0	; select bank0
 10997  024C  0841               	movf	?___ftneg,w
 10998  024D  00C9               	movwf	___ftadd@f1
 10999  024E  0842               	movf	?___ftneg+1,w
 11000  024F  00CA               	movwf	___ftadd@f1+1
 11001  0250  0843               	movf	?___ftneg+2,w
 11002  0251  00CB               	movwf	___ftadd@f1+2
 11003  0252  3000               	movlw	0
 11004  0253  00B1               	movwf	___ftdiv@f2
 11005  0254  3000               	movlw	0
 11006  0255  00B2               	movwf	___ftdiv@f2+1
 11007  0256  3048               	movlw	72
 11008  0257  00B3               	movwf	___ftdiv@f2+2
 11009  0258  0021               	movlb	1	; select bank1
 11010  0259  0855               	movf	(_adc_t+3)^(0+128),w
 11011  025A  0020               	movlb	0	; select bank0
 11012  025B  00AC               	movwf	___altoft@c+3
 11013  025C  0021               	movlb	1	; select bank1
 11014  025D  0854               	movf	(_adc_t+2)^(0+128),w
 11015  025E  0020               	movlb	0	; select bank0
 11016  025F  00AB               	movwf	___altoft@c+2
 11017  0260  0021               	movlb	1	; select bank1
 11018  0261  0853               	movf	(_adc_t+1)^(0+128),w
 11019  0262  0020               	movlb	0	; select bank0
 11020  0263  00AA               	movwf	___altoft@c+1
 11021  0264  0021               	movlb	1	; select bank1
 11022  0265  0852               	movf	_adc_t^(0+128),w
 11023  0266  0020               	movlb	0	; select bank0
 11024  0267  00A9               	movwf	___altoft@c
 11025  0268  3188  2082  3180   	fcall	___altoft
 11026  026B  0020               	movlb	0	; select bank0
 11027  026C  0829               	movf	?___altoft,w
 11028  026D  00B4               	movwf	___ftdiv@f1
 11029  026E  082A               	movf	?___altoft+1,w
 11030  026F  00B5               	movwf	___ftdiv@f1+1
 11031  0270  082B               	movf	?___altoft+2,w
 11032  0271  00B6               	movwf	___ftdiv@f1+2
 11033  0272  318D  25D9  3180   	fcall	___ftdiv
 11034  0275  0020               	movlb	0	; select bank0
 11035  0276  0831               	movf	?___ftdiv,w
 11036  0277  00CC               	movwf	___ftadd@f2
 11037  0278  0832               	movf	?___ftdiv+1,w
 11038  0279  00CD               	movwf	___ftadd@f2+1
 11039  027A  0833               	movf	?___ftdiv+2,w
 11040  027B  00CE               	movwf	___ftadd@f2+2
 11041  027C  3186  2682  3180   	fcall	___ftadd
 11042  027F  0020               	movlb	0	; select bank0
 11043  0280  0849               	movf	?___ftadd,w
 11044  0281  00D9               	movwf	___ftmul@f2
 11045  0282  084A               	movf	?___ftadd+1,w
 11046  0283  00DA               	movwf	___ftmul@f2+1
 11047  0284  084B               	movf	?___ftadd+2,w
 11048  0285  00DB               	movwf	___ftmul@f2+2
 11049  0286  318E  2682  3180   	fcall	___ftmul
 11050  0289  0020               	movlb	0	; select bank0
 11051  028A  0856               	movf	?___ftmul,w
 11052  028B  0021               	movlb	1	; select bank1
 11053  028C  00B5               	movwf	_BMP_readTemperature$2637^(0+128)
 11054  028D  0020               	movlb	0	; select bank0
 11055  028E  0857               	movf	?___ftmul+1,w
 11056  028F  0021               	movlb	1	; select bank1
 11057  0290  00B6               	movwf	(_BMP_readTemperature$2637+1)^(0+128)
 11058  0291  0020               	movlb	0	; select bank0
 11059  0292  0858               	movf	?___ftmul+2,w
 11060  0293  0021               	movlb	1	; select bank1
 11061  0294  00B7               	movwf	(_BMP_readTemperature$2637+2)^(0+128)
 11062                           
 11063                           ;bmp280.c: 105: var2 = ((((double)adc_t) / 131072.0 - ((double)dig_T1) / 8192.0) *
 11064                           ;bmp280.c: 106: (((double)adc_t) / 131072.0 - ((double)dig_T1) / 8192.0)) * ((double)dig
      +                          _T3);
 11065  0295  0022               	movlb	2	; select bank2
 11066  0296  0855               	movf	(_dig_T3+1)^(0+256),w
 11067  0297  0020               	movlb	0	; select bank0
 11068  0298  00AA               	movwf	___awtoft@c+1
 11069  0299  0022               	movlb	2	; select bank2
 11070  029A  0854               	movf	_dig_T3^(0+256),w
 11071  029B  0020               	movlb	0	; select bank0
 11072  029C  00A9               	movwf	___awtoft@c
 11073  029D  3196  26BF  3180   	fcall	___awtoft
 11074  02A0  0020               	movlb	0	; select bank0
 11075  02A1  0829               	movf	?___awtoft,w
 11076  02A2  00D6               	movwf	___ftmul@f1
 11077  02A3  082A               	movf	?___awtoft+1,w
 11078  02A4  00D7               	movwf	___ftmul@f1+1
 11079  02A5  082B               	movf	?___awtoft+2,w
 11080  02A6  00D8               	movwf	___ftmul@f1+2
 11081  02A7  0021               	movlb	1	; select bank1
 11082  02A8  0835               	movf	_BMP_readTemperature$2637^(0+128),w
 11083  02A9  0020               	movlb	0	; select bank0
 11084  02AA  00D9               	movwf	___ftmul@f2
 11085  02AB  0021               	movlb	1	; select bank1
 11086  02AC  0836               	movf	(_BMP_readTemperature$2637+1)^(0+128),w
 11087  02AD  0020               	movlb	0	; select bank0
 11088  02AE  00DA               	movwf	___ftmul@f2+1
 11089  02AF  0021               	movlb	1	; select bank1
 11090  02B0  0837               	movf	(_BMP_readTemperature$2637+2)^(0+128),w
 11091  02B1  0020               	movlb	0	; select bank0
 11092  02B2  00DB               	movwf	___ftmul@f2+2
 11093  02B3  318E  2682  3180   	fcall	___ftmul
 11094  02B6  0020               	movlb	0	; select bank0
 11095  02B7  0856               	movf	?___ftmul,w
 11096  02B8  0022               	movlb	2	; select bank2
 11097  02B9  00B1               	movwf	_var2^(0+256)
 11098  02BA  0020               	movlb	0	; select bank0
 11099  02BB  0857               	movf	?___ftmul+1,w
 11100  02BC  0022               	movlb	2	; select bank2
 11101  02BD  00B2               	movwf	(_var2+1)^(0+256)
 11102  02BE  0020               	movlb	0	; select bank0
 11103  02BF  0858               	movf	?___ftmul+2,w
 11104  02C0  0022               	movlb	2	; select bank2
 11105  02C1  00B3               	movwf	(_var2+2)^(0+256)
 11106                           
 11107                           ;bmp280.c: 107: t_fine = (long)(var1 + var2);
 11108  02C2  0834               	movf	_var1^(0+256),w
 11109  02C3  0020               	movlb	0	; select bank0
 11110  02C4  00CC               	movwf	___ftadd@f2
 11111  02C5  0022               	movlb	2	; select bank2
 11112  02C6  0835               	movf	(_var1+1)^(0+256),w
 11113  02C7  0020               	movlb	0	; select bank0
 11114  02C8  00CD               	movwf	___ftadd@f2+1
 11115  02C9  0022               	movlb	2	; select bank2
 11116  02CA  0836               	movf	(_var1+2)^(0+256),w
 11117  02CB  0020               	movlb	0	; select bank0
 11118  02CC  00CE               	movwf	___ftadd@f2+2
 11119  02CD  0022               	movlb	2	; select bank2
 11120  02CE  0831               	movf	_var2^(0+256),w
 11121  02CF  0020               	movlb	0	; select bank0
 11122  02D0  00C9               	movwf	___ftadd@f1
 11123  02D1  0022               	movlb	2	; select bank2
 11124  02D2  0832               	movf	(_var2+1)^(0+256),w
 11125  02D3  0020               	movlb	0	; select bank0
 11126  02D4  00CA               	movwf	___ftadd@f1+1
 11127  02D5  0022               	movlb	2	; select bank2
 11128  02D6  0833               	movf	(_var2+2)^(0+256),w
 11129  02D7  0020               	movlb	0	; select bank0
 11130  02D8  00CB               	movwf	___ftadd@f1+2
 11131  02D9  3186  2682  3180   	fcall	___ftadd
 11132  02DC  0020               	movlb	0	; select bank0
 11133  02DD  0849               	movf	?___ftadd,w
 11134  02DE  00E6               	movwf	___fttol@f1
 11135  02DF  084A               	movf	?___ftadd+1,w
 11136  02E0  00E7               	movwf	___fttol@f1+1
 11137  02E1  084B               	movf	?___ftadd+2,w
 11138  02E2  00E8               	movwf	___fttol@f1+2
 11139  02E3  318D  253A  3180   	fcall	___fttol
 11140  02E6  0020               	movlb	0	; select bank0
 11141  02E7  0869               	movf	?___fttol+3,w
 11142  02E8  00AC               	movwf	___altoft@c+3
 11143  02E9  0868               	movf	?___fttol+2,w
 11144  02EA  00AB               	movwf	___altoft@c+2
 11145  02EB  0867               	movf	?___fttol+1,w
 11146  02EC  00AA               	movwf	___altoft@c+1
 11147  02ED  0866               	movf	?___fttol,w
 11148  02EE  00A9               	movwf	___altoft@c
 11149  02EF  3188  2082  3180   	fcall	___altoft
 11150  02F2  0020               	movlb	0	; select bank0
 11151  02F3  0829               	movf	?___altoft,w
 11152  02F4  0022               	movlb	2	; select bank2
 11153  02F5  00AE               	movwf	_t_fine^(0+256)
 11154  02F6  0020               	movlb	0	; select bank0
 11155  02F7  082A               	movf	?___altoft+1,w
 11156  02F8  0022               	movlb	2	; select bank2
 11157  02F9  00AF               	movwf	(_t_fine+1)^(0+256)
 11158  02FA  0020               	movlb	0	; select bank0
 11159  02FB  082B               	movf	?___altoft+2,w
 11160  02FC  0022               	movlb	2	; select bank2
 11161  02FD  00B0               	movwf	(_t_fine+2)^(0+256)
 11162                           
 11163                           ;bmp280.c: 108: cTemp = (var1 + var2) / 5120.0;
 11164  02FE  3000               	movlw	0
 11165  02FF  0020               	movlb	0	; select bank0
 11166  0300  00B1               	movwf	___ftdiv@f2
 11167  0301  30A0               	movlw	160
 11168  0302  00B2               	movwf	___ftdiv@f2+1
 11169  0303  3045               	movlw	69
 11170  0304  00B3               	movwf	___ftdiv@f2+2
 11171  0305  0022               	movlb	2	; select bank2
 11172  0306  0831               	movf	_var2^(0+256),w
 11173  0307  0020               	movlb	0	; select bank0
 11174  0308  00C9               	movwf	___ftadd@f1
 11175  0309  0022               	movlb	2	; select bank2
 11176  030A  0832               	movf	(_var2+1)^(0+256),w
 11177  030B  0020               	movlb	0	; select bank0
 11178  030C  00CA               	movwf	___ftadd@f1+1
 11179  030D  0022               	movlb	2	; select bank2
 11180  030E  0833               	movf	(_var2+2)^(0+256),w
 11181  030F  0020               	movlb	0	; select bank0
 11182  0310  00CB               	movwf	___ftadd@f1+2
 11183  0311  0022               	movlb	2	; select bank2
 11184  0312  0834               	movf	_var1^(0+256),w
 11185  0313  0020               	movlb	0	; select bank0
 11186  0314  00CC               	movwf	___ftadd@f2
 11187  0315  0022               	movlb	2	; select bank2
 11188  0316  0835               	movf	(_var1+1)^(0+256),w
 11189  0317  0020               	movlb	0	; select bank0
 11190  0318  00CD               	movwf	___ftadd@f2+1
 11191  0319  0022               	movlb	2	; select bank2
 11192  031A  0836               	movf	(_var1+2)^(0+256),w
 11193  031B  0020               	movlb	0	; select bank0
 11194  031C  00CE               	movwf	___ftadd@f2+2
 11195  031D  3186  2682  3180   	fcall	___ftadd
 11196  0320  0020               	movlb	0	; select bank0
 11197  0321  0849               	movf	?___ftadd,w
 11198  0322  00B4               	movwf	___ftdiv@f1
 11199  0323  084A               	movf	?___ftadd+1,w
 11200  0324  00B5               	movwf	___ftdiv@f1+1
 11201  0325  084B               	movf	?___ftadd+2,w
 11202  0326  00B6               	movwf	___ftdiv@f1+2
 11203  0327  318D  25D9  3180   	fcall	___ftdiv
 11204  032A  0020               	movlb	0	; select bank0
 11205  032B  0831               	movf	?___ftdiv,w
 11206  032C  0022               	movlb	2	; select bank2
 11207  032D  00AB               	movwf	_cTemp^(0+256)
 11208  032E  0020               	movlb	0	; select bank0
 11209  032F  0832               	movf	?___ftdiv+1,w
 11210  0330  0022               	movlb	2	; select bank2
 11211  0331  00AC               	movwf	(_cTemp+1)^(0+256)
 11212  0332  0020               	movlb	0	; select bank0
 11213  0333  0833               	movf	?___ftdiv+2,w
 11214  0334  0022               	movlb	2	; select bank2
 11215  0335  00AD               	movwf	(_cTemp+2)^(0+256)
 11216                           
 11217                           ;bmp280.c: 123: Diag_setTempSensorHealth(1);
 11218  0336  3001               	movlw	1
 11219  0337  3193  23B9         	fcall	_Diag_setTempSensorHealth
 11220                           
 11221                           ;bmp280.c: 124: return(cTemp);
 11222  0339  0022               	movlb	2	; select bank2
 11223  033A  082B               	movf	_cTemp^(0+256),w
 11224  033B  0021               	movlb	1	; select bank1
 11225  033C  00A6               	movwf	?_BMP_readTemperature^(0+128)
 11226  033D  0022               	movlb	2	; select bank2
 11227  033E  082C               	movf	(_cTemp+1)^(0+256),w
 11228  033F  0021               	movlb	1	; select bank1
 11229  0340  00A7               	movwf	(?_BMP_readTemperature+1)^(0+128)
 11230  0341  0022               	movlb	2	; select bank2
 11231  0342  082D               	movf	(_cTemp+2)^(0+256),w
 11232  0343  0021               	movlb	1	; select bank1
 11233  0344  00A8               	movwf	(?_BMP_readTemperature+2)^(0+128)
 11234  0345  0008               	return
 11235  0346                     __end_of_BMP_readTemperature:	
 11236                           
 11237                           	psect	text56
 11238  14A6                     __ptext56:	
 11239 ;; *************** function ___lwtoft *****************
 11240 ;; Defined at:
 11241 ;;		line 28 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\lwtoft.c"
 11242 ;; Parameters:    Size  Location     Type
 11243 ;;  c               2    9[BANK0 ] unsigned int 
 11244 ;; Auto vars:     Size  Location     Type
 11245 ;;		None
 11246 ;; Return value:  Size  Location     Type
 11247 ;;                  3    9[BANK0 ] float 
 11248 ;; Registers used:
 11249 ;;		wreg, status,2, status,0, pclath, cstack
 11250 ;; Tracked objects:
 11251 ;;		On entry : 0/0
 11252 ;;		On exit  : 0/0
 11253 ;;		Unchanged: 0/0
 11254 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11255 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11256 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11257 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11258 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11259 ;;Total ram usage:        4 bytes
 11260 ;; Hardware stack levels used:    1
 11261 ;; Hardware stack levels required when called:    5
 11262 ;; This function calls:
 11263 ;;		___ftpack
 11264 ;; This function is called by:
 11265 ;;		_Sensor_getSupplyVoltage
 11266 ;;		_BMP_readTemperature
 11267 ;; This function uses a non-reentrant model
 11268 ;;
 11269                           
 11270                           
 11271                           ;psect for function ___lwtoft
 11272  14A6                     ___lwtoft:	
 11273                           
 11274                           ;incstack = 0
 11275                           ; Regs used in ___lwtoft: [wreg+status,2+status,0+pclath+cstack]
 11276  14A6  0020               	movlb	0	; select bank0
 11277  14A7  0829               	movf	___lwtoft@c,w
 11278  14A8  00A1               	movwf	___ftpack@arg
 11279  14A9  082A               	movf	___lwtoft@c+1,w
 11280  14AA  00A2               	movwf	___ftpack@arg+1
 11281  14AB  01A3               	clrf	___ftpack@arg+2
 11282  14AC  308E               	movlw	142
 11283  14AD  00AC               	movwf	??___lwtoft
 11284  14AE  082C               	movf	??___lwtoft,w
 11285  14AF  00A4               	movwf	___ftpack@exp
 11286  14B0  01A5               	clrf	___ftpack@sign
 11287  14B1  318A  22FB         	fcall	___ftpack
 11288  14B3  0020               	movlb	0	; select bank0
 11289  14B4  0821               	movf	?___ftpack,w
 11290  14B5  00A9               	movwf	?___lwtoft
 11291  14B6  0822               	movf	?___ftpack+1,w
 11292  14B7  00AA               	movwf	?___lwtoft+1
 11293  14B8  0823               	movf	?___ftpack+2,w
 11294  14B9  00AB               	movwf	?___lwtoft+2
 11295  14BA  0008               	return
 11296  14BB                     __end_of___lwtoft:	
 11297                           
 11298                           	psect	text57
 11299  0D3A                     __ptext57:	
 11300 ;; *************** function ___fttol *****************
 11301 ;; Defined at:
 11302 ;;		line 44 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\fttol.c"
 11303 ;; Parameters:    Size  Location     Type
 11304 ;;  f1              3   70[BANK0 ] float 
 11305 ;; Auto vars:     Size  Location     Type
 11306 ;;  lval            4    1[BANK1 ] unsigned long 
 11307 ;;  exp1            1    5[BANK1 ] unsigned char 
 11308 ;;  sign1           1    0[BANK1 ] unsigned char 
 11309 ;; Return value:  Size  Location     Type
 11310 ;;                  4   70[BANK0 ] long 
 11311 ;; Registers used:
 11312 ;;		wreg, status,2, status,0
 11313 ;; Tracked objects:
 11314 ;;		On entry : 0/0
 11315 ;;		On exit  : 0/0
 11316 ;;		Unchanged: 0/0
 11317 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11318 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11319 ;;      Locals:         0       0       6       0       0       0       0       0       0       0       0       0       
      +0       0
 11320 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11321 ;;      Totals:         0       8       6       0       0       0       0       0       0       0       0       0       
      +0       0
 11322 ;;Total ram usage:       14 bytes
 11323 ;; Hardware stack levels used:    1
 11324 ;; Hardware stack levels required when called:    4
 11325 ;; This function calls:
 11326 ;;		Nothing
 11327 ;; This function is called by:
 11328 ;;		_BMP_readTemperature
 11329 ;;		_Wireless_packageData
 11330 ;;		_HMC5883L_GetCompassDirection
 11331 ;; This function uses a non-reentrant model
 11332 ;;
 11333                           
 11334                           
 11335                           ;psect for function ___fttol
 11336  0D3A                     ___fttol:	
 11337                           
 11338                           ;incstack = 0
 11339                           ; Regs used in ___fttol: [wreg+status,2+status,0]
 11340  0D3A  0020               	movlb	0	; select bank0
 11341  0D3B  0866               	movf	___fttol@f1,w
 11342  0D3C  00EA               	movwf	??___fttol
 11343  0D3D  0867               	movf	___fttol@f1+1,w
 11344  0D3E  00EB               	movwf	??___fttol+1
 11345  0D3F  0868               	movf	___fttol@f1+2,w
 11346  0D40  00EC               	movwf	??___fttol+2
 11347  0D41  1003               	clrc
 11348  0D42  0D6B               	rlf	??___fttol+1,w
 11349  0D43  0D6C               	rlf	??___fttol+2,w
 11350  0D44  00ED               	movwf	??___fttol+3
 11351  0D45  086D               	movf	??___fttol+3,w
 11352  0D46  0021               	movlb	1	; select bank1
 11353  0D47  00A5               	movwf	___fttol@exp1^(0+128)
 11354  0D48  0825               	movf	___fttol@exp1^(0+128),w
 11355  0D49  1D03               	btfss	3,2
 11356  0D4A  2D55               	goto	l6062
 11357  0D4B  3000               	movlw	0
 11358  0D4C  0020               	movlb	0	; select bank0
 11359  0D4D  00E9               	movwf	?___fttol+3
 11360  0D4E  3000               	movlw	0
 11361  0D4F  00E8               	movwf	?___fttol+2
 11362  0D50  3000               	movlw	0
 11363  0D51  00E7               	movwf	?___fttol+1
 11364  0D52  3000               	movlw	0
 11365  0D53  00E6               	movwf	?___fttol
 11366  0D54  0008               	return
 11367  0D55                     l6062:	
 11368  0D55  0020               	movlb	0	; select bank0
 11369  0D56  0866               	movf	___fttol@f1,w
 11370  0D57  00EA               	movwf	??___fttol
 11371  0D58  0867               	movf	___fttol@f1+1,w
 11372  0D59  00EB               	movwf	??___fttol+1
 11373  0D5A  0868               	movf	___fttol@f1+2,w
 11374  0D5B  00EC               	movwf	??___fttol+2
 11375  0D5C  3017               	movlw	23
 11376  0D5D                     u5815:	
 11377  0D5D  36EC               	lsrf	??___fttol+2,f
 11378  0D5E  0CEB               	rrf	??___fttol+1,f
 11379  0D5F  0CEA               	rrf	??___fttol,f
 11380  0D60  0B89               	decfsz	9,f
 11381  0D61  2D5D               	goto	u5815
 11382  0D62  086A               	movf	??___fttol,w
 11383  0D63  00ED               	movwf	??___fttol+3
 11384  0D64  086D               	movf	??___fttol+3,w
 11385  0D65  0021               	movlb	1	; select bank1
 11386  0D66  00A0               	movwf	___fttol@sign1^(0+128)
 11387  0D67  0020               	movlb	0	; select bank0
 11388  0D68  17E7               	bsf	___fttol@f1+1,7
 11389  0D69  30FF               	movlw	255
 11390  0D6A  05E6               	andwf	___fttol@f1,f
 11391  0D6B  30FF               	movlw	255
 11392  0D6C  05E7               	andwf	___fttol@f1+1,f
 11393  0D6D  3000               	movlw	0
 11394  0D6E  05E8               	andwf	___fttol@f1+2,f
 11395  0D6F  0866               	movf	___fttol@f1,w
 11396  0D70  0021               	movlb	1	; select bank1
 11397  0D71  00A1               	movwf	___fttol@lval^(0+128)
 11398  0D72  0020               	movlb	0	; select bank0
 11399  0D73  0867               	movf	___fttol@f1+1,w
 11400  0D74  0021               	movlb	1	; select bank1
 11401  0D75  00A2               	movwf	(___fttol@lval^(0+128)+1)
 11402  0D76  0020               	movlb	0	; select bank0
 11403  0D77  0868               	movf	___fttol@f1+2,w
 11404  0D78  0021               	movlb	1	; select bank1
 11405  0D79  00A3               	movwf	(___fttol@lval^(0+128)+2)
 11406  0D7A  01A4               	clrf	(___fttol@lval^(0+128)+3)
 11407  0D7B  308E               	movlw	142
 11408  0D7C  02A5               	subwf	___fttol@exp1^(0+128),f
 11409  0D7D  1FA5               	btfss	___fttol@exp1^(0+128),7
 11410  0D7E  2D9F               	goto	l6082
 11411  0D7F  0825               	movf	___fttol@exp1^(0+128),w
 11412  0D80  3A80               	xorlw	128
 11413  0D81  3E8F               	addlw	143
 11414  0D82  1803               	skipnc
 11415  0D83  2D8E               	goto	l6080
 11416  0D84  3000               	movlw	0
 11417  0D85  0020               	movlb	0	; select bank0
 11418  0D86  00E9               	movwf	?___fttol+3
 11419  0D87  3000               	movlw	0
 11420  0D88  00E8               	movwf	?___fttol+2
 11421  0D89  3000               	movlw	0
 11422  0D8A  00E7               	movwf	?___fttol+1
 11423  0D8B  3000               	movlw	0
 11424  0D8C  00E6               	movwf	?___fttol
 11425  0D8D  0008               	return
 11426  0D8E                     l6080:	
 11427  0D8E  3001               	movlw	1
 11428  0D8F                     u5845:	
 11429  0D8F  0021               	movlb	1	; select bank1
 11430  0D90  36A4               	lsrf	(___fttol@lval+3)^(0+128),f
 11431  0D91  0CA3               	rrf	(___fttol@lval+2)^(0+128),f
 11432  0D92  0CA2               	rrf	(___fttol@lval+1)^(0+128),f
 11433  0D93  0CA1               	rrf	___fttol@lval^(0+128),f
 11434  0D94  0B89               	decfsz	9,f
 11435  0D95  2D8F               	goto	u5845
 11436  0D96  3001               	movlw	1
 11437  0D97  0020               	movlb	0	; select bank0
 11438  0D98  00EA               	movwf	??___fttol
 11439  0D99  086A               	movf	??___fttol,w
 11440  0D9A  0021               	movlb	1	; select bank1
 11441  0D9B  07A5               	addwf	___fttol@exp1^(0+128),f
 11442  0D9C  1903               	btfsc	3,2
 11443  0D9D  2DBB               	goto	l6090
 11444  0D9E  2D8E               	goto	l6080
 11445  0D9F                     l6082:	
 11446  0D9F  3018               	movlw	24
 11447  0DA0  0225               	subwf	___fttol@exp1^(0+128),w
 11448  0DA1  1C03               	skipc
 11449  0DA2  2DB7               	goto	l1592
 11450  0DA3  3000               	movlw	0
 11451  0DA4  0020               	movlb	0	; select bank0
 11452  0DA5  00E9               	movwf	?___fttol+3
 11453  0DA6  3000               	movlw	0
 11454  0DA7  00E8               	movwf	?___fttol+2
 11455  0DA8  3000               	movlw	0
 11456  0DA9  00E7               	movwf	?___fttol+1
 11457  0DAA  3000               	movlw	0
 11458  0DAB  00E6               	movwf	?___fttol
 11459  0DAC  0008               	return
 11460  0DAD                     l6088:	
 11461  0DAD  3001               	movlw	1
 11462  0DAE                     u5875:	
 11463  0DAE  0021               	movlb	1	; select bank1
 11464  0DAF  35A1               	lslf	___fttol@lval^(0+128),f
 11465  0DB0  0DA2               	rlf	(___fttol@lval+1)^(0+128),f
 11466  0DB1  0DA3               	rlf	(___fttol@lval+2)^(0+128),f
 11467  0DB2  0DA4               	rlf	(___fttol@lval+3)^(0+128),f
 11468  0DB3  0B89               	decfsz	9,f
 11469  0DB4  2DAE               	goto	u5875
 11470  0DB5  3001               	movlw	1
 11471  0DB6  02A5               	subwf	___fttol@exp1^(0+128),f
 11472  0DB7                     l1592:	
 11473  0DB7  0021               	movlb	1	; select bank1
 11474  0DB8  0825               	movf	___fttol@exp1^(0+128),w
 11475  0DB9  1D03               	btfss	3,2
 11476  0DBA  2DAD               	goto	l6088
 11477  0DBB                     l6090:	
 11478  0DBB  0820               	movf	___fttol@sign1^(0+128),w
 11479  0DBC  1903               	btfsc	3,2
 11480  0DBD  2DC9               	goto	l6094
 11481  0DBE  09A1               	comf	___fttol@lval^(0+128),f
 11482  0DBF  09A2               	comf	(___fttol@lval+1)^(0+128),f
 11483  0DC0  09A3               	comf	(___fttol@lval+2)^(0+128),f
 11484  0DC1  09A4               	comf	(___fttol@lval+3)^(0+128),f
 11485  0DC2  0AA1               	incf	___fttol@lval^(0+128),f
 11486  0DC3  1903               	skipnz
 11487  0DC4  0AA2               	incf	(___fttol@lval+1)^(0+128),f
 11488  0DC5  1903               	skipnz
 11489  0DC6  0AA3               	incf	(___fttol@lval+2)^(0+128),f
 11490  0DC7  1903               	skipnz
 11491  0DC8  0AA4               	incf	(___fttol@lval+3)^(0+128),f
 11492  0DC9                     l6094:	
 11493  0DC9  0824               	movf	(___fttol@lval+3)^(0+128),w
 11494  0DCA  0020               	movlb	0	; select bank0
 11495  0DCB  00E9               	movwf	?___fttol+3
 11496  0DCC  0021               	movlb	1	; select bank1
 11497  0DCD  0823               	movf	(___fttol@lval+2)^(0+128),w
 11498  0DCE  0020               	movlb	0	; select bank0
 11499  0DCF  00E8               	movwf	?___fttol+2
 11500  0DD0  0021               	movlb	1	; select bank1
 11501  0DD1  0822               	movf	(___fttol@lval+1)^(0+128),w
 11502  0DD2  0020               	movlb	0	; select bank0
 11503  0DD3  00E7               	movwf	?___fttol+1
 11504  0DD4  0021               	movlb	1	; select bank1
 11505  0DD5  0821               	movf	___fttol@lval^(0+128),w
 11506  0DD6  0020               	movlb	0	; select bank0
 11507  0DD7  00E6               	movwf	?___fttol
 11508  0DD8  0008               	return
 11509  0DD9                     __end_of___fttol:	
 11510                           
 11511                           	psect	text58
 11512  13DA                     __ptext58:	
 11513 ;; *************** function ___ftneg *****************
 11514 ;; Defined at:
 11515 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\ftneg.c"
 11516 ;; Parameters:    Size  Location     Type
 11517 ;;  f1              3   33[BANK0 ] float 
 11518 ;; Auto vars:     Size  Location     Type
 11519 ;;		None
 11520 ;; Return value:  Size  Location     Type
 11521 ;;                  3   33[BANK0 ] float 
 11522 ;; Registers used:
 11523 ;;		wreg
 11524 ;; Tracked objects:
 11525 ;;		On entry : 0/0
 11526 ;;		On exit  : 0/0
 11527 ;;		Unchanged: 0/0
 11528 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11529 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11530 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11531 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11532 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11533 ;;Total ram usage:        3 bytes
 11534 ;; Hardware stack levels used:    1
 11535 ;; Hardware stack levels required when called:    4
 11536 ;; This function calls:
 11537 ;;		Nothing
 11538 ;; This function is called by:
 11539 ;;		_BMP_readTemperature
 11540 ;; This function uses a non-reentrant model
 11541 ;;
 11542                           
 11543                           
 11544                           ;psect for function ___ftneg
 11545  13DA                     ___ftneg:	
 11546                           
 11547                           ;incstack = 0
 11548                           ; Regs used in ___ftneg: [wreg]
 11549  13DA  0020               	movlb	0	; select bank0
 11550  13DB  0843               	movf	___ftneg@f1+2,w
 11551  13DC  0442               	iorwf	___ftneg@f1+1,w
 11552  13DD  0441               	iorwf	___ftneg@f1,w
 11553  13DE  1903               	skipnz
 11554  13DF  0008               	return
 11555  13E0  3080               	movlw	128
 11556  13E1  06C3               	xorwf	___ftneg@f1+2,f
 11557  13E2  0008               	return
 11558  13E3                     __end_of___ftneg:	
 11559                           
 11560                           	psect	text59
 11561  0E82                     __ptext59:	
 11562 ;; *************** function ___ftmul *****************
 11563 ;; Defined at:
 11564 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\ftmul.c"
 11565 ;; Parameters:    Size  Location     Type
 11566 ;;  f1              3   54[BANK0 ] float 
 11567 ;;  f2              3   57[BANK0 ] float 
 11568 ;; Auto vars:     Size  Location     Type
 11569 ;;  f3_as_produc    3   65[BANK0 ] unsigned um
 11570 ;;  sign            1   69[BANK0 ] unsigned char 
 11571 ;;  cntr            1   68[BANK0 ] unsigned char 
 11572 ;;  exp             1   64[BANK0 ] unsigned char 
 11573 ;; Return value:  Size  Location     Type
 11574 ;;                  3   54[BANK0 ] float 
 11575 ;; Registers used:
 11576 ;;		wreg, status,2, status,0, pclath, cstack
 11577 ;; Tracked objects:
 11578 ;;		On entry : 0/0
 11579 ;;		On exit  : 0/0
 11580 ;;		Unchanged: 0/0
 11581 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11582 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11583 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11584 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11585 ;;      Totals:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11586 ;;Total ram usage:       16 bytes
 11587 ;; Hardware stack levels used:    1
 11588 ;; Hardware stack levels required when called:    5
 11589 ;; This function calls:
 11590 ;;		___ftpack
 11591 ;; This function is called by:
 11592 ;;		_BMP_readTemperature
 11593 ;;		_Wireless_packageData
 11594 ;;		_HMC5883L_GetCompassDirection
 11595 ;; This function uses a non-reentrant model
 11596 ;;
 11597                           
 11598                           
 11599                           ;psect for function ___ftmul
 11600  0E82                     ___ftmul:	
 11601                           
 11602                           ;incstack = 0
 11603                           ; Regs used in ___ftmul: [wreg+status,2+status,0+pclath+cstack]
 11604  0E82  0020               	movlb	0	; select bank0
 11605  0E83  0856               	movf	___ftmul@f1,w
 11606  0E84  00DC               	movwf	??___ftmul
 11607  0E85  0857               	movf	___ftmul@f1+1,w
 11608  0E86  00DD               	movwf	??___ftmul+1
 11609  0E87  0858               	movf	___ftmul@f1+2,w
 11610  0E88  00DE               	movwf	??___ftmul+2
 11611  0E89  1003               	clrc
 11612  0E8A  0D5D               	rlf	??___ftmul+1,w
 11613  0E8B  0D5E               	rlf	??___ftmul+2,w
 11614  0E8C  00DF               	movwf	??___ftmul+3
 11615  0E8D  085F               	movf	??___ftmul+3,w
 11616  0E8E  00E0               	movwf	___ftmul@exp
 11617  0E8F  0860               	movf	___ftmul@exp,w
 11618  0E90  1D03               	btfss	3,2
 11619  0E91  2E99               	goto	l6004
 11620  0E92  3000               	movlw	0
 11621  0E93  00D6               	movwf	?___ftmul
 11622  0E94  3000               	movlw	0
 11623  0E95  00D7               	movwf	?___ftmul+1
 11624  0E96  3000               	movlw	0
 11625  0E97  00D8               	movwf	?___ftmul+2
 11626  0E98  0008               	return
 11627  0E99                     l6004:	
 11628  0E99  0859               	movf	___ftmul@f2,w
 11629  0E9A  00DC               	movwf	??___ftmul
 11630  0E9B  085A               	movf	___ftmul@f2+1,w
 11631  0E9C  00DD               	movwf	??___ftmul+1
 11632  0E9D  085B               	movf	___ftmul@f2+2,w
 11633  0E9E  00DE               	movwf	??___ftmul+2
 11634  0E9F  1003               	clrc
 11635  0EA0  0D5D               	rlf	??___ftmul+1,w
 11636  0EA1  0D5E               	rlf	??___ftmul+2,w
 11637  0EA2  00DF               	movwf	??___ftmul+3
 11638  0EA3  085F               	movf	??___ftmul+3,w
 11639  0EA4  00E5               	movwf	___ftmul@sign
 11640  0EA5  0865               	movf	___ftmul@sign,w
 11641  0EA6  1D03               	btfss	3,2
 11642  0EA7  2EAF               	goto	l6010
 11643  0EA8  3000               	movlw	0
 11644  0EA9  00D6               	movwf	?___ftmul
 11645  0EAA  3000               	movlw	0
 11646  0EAB  00D7               	movwf	?___ftmul+1
 11647  0EAC  3000               	movlw	0
 11648  0EAD  00D8               	movwf	?___ftmul+2
 11649  0EAE  0008               	return
 11650  0EAF                     l6010:	
 11651  0EAF  0865               	movf	___ftmul@sign,w
 11652  0EB0  3E7B               	addlw	123
 11653  0EB1  00DC               	movwf	??___ftmul
 11654  0EB2  085C               	movf	??___ftmul,w
 11655  0EB3  07E0               	addwf	___ftmul@exp,f
 11656  0EB4  0856               	movf	___ftmul@f1,w
 11657  0EB5  00DC               	movwf	??___ftmul
 11658  0EB6  0857               	movf	___ftmul@f1+1,w
 11659  0EB7  00DD               	movwf	??___ftmul+1
 11660  0EB8  0858               	movf	___ftmul@f1+2,w
 11661  0EB9  00DE               	movwf	??___ftmul+2
 11662  0EBA  3010               	movlw	16
 11663  0EBB                     u5695:	
 11664  0EBB  36DE               	lsrf	??___ftmul+2,f
 11665  0EBC  0CDD               	rrf	??___ftmul+1,f
 11666  0EBD  0CDC               	rrf	??___ftmul,f
 11667  0EBE  0B89               	decfsz	9,f
 11668  0EBF  2EBB               	goto	u5695
 11669  0EC0  085C               	movf	??___ftmul,w
 11670  0EC1  00DF               	movwf	??___ftmul+3
 11671  0EC2  085F               	movf	??___ftmul+3,w
 11672  0EC3  00E5               	movwf	___ftmul@sign
 11673  0EC4  0859               	movf	___ftmul@f2,w
 11674  0EC5  00DC               	movwf	??___ftmul
 11675  0EC6  085A               	movf	___ftmul@f2+1,w
 11676  0EC7  00DD               	movwf	??___ftmul+1
 11677  0EC8  085B               	movf	___ftmul@f2+2,w
 11678  0EC9  00DE               	movwf	??___ftmul+2
 11679  0ECA  3010               	movlw	16
 11680  0ECB                     u5705:	
 11681  0ECB  36DE               	lsrf	??___ftmul+2,f
 11682  0ECC  0CDD               	rrf	??___ftmul+1,f
 11683  0ECD  0CDC               	rrf	??___ftmul,f
 11684  0ECE  0B89               	decfsz	9,f
 11685  0ECF  2ECB               	goto	u5705
 11686  0ED0  085C               	movf	??___ftmul,w
 11687  0ED1  00DF               	movwf	??___ftmul+3
 11688  0ED2  085F               	movf	??___ftmul+3,w
 11689  0ED3  06E5               	xorwf	___ftmul@sign,f
 11690  0ED4  3080               	movlw	128
 11691  0ED5  00DC               	movwf	??___ftmul
 11692  0ED6  085C               	movf	??___ftmul,w
 11693  0ED7  05E5               	andwf	___ftmul@sign,f
 11694  0ED8  17D7               	bsf	___ftmul@f1+1,7
 11695  0ED9  17DA               	bsf	___ftmul@f2+1,7
 11696  0EDA  30FF               	movlw	255
 11697  0EDB  05D9               	andwf	___ftmul@f2,f
 11698  0EDC  30FF               	movlw	255
 11699  0EDD  05DA               	andwf	___ftmul@f2+1,f
 11700  0EDE  3000               	movlw	0
 11701  0EDF  05DB               	andwf	___ftmul@f2+2,f
 11702  0EE0  3000               	movlw	0
 11703  0EE1  00E1               	movwf	___ftmul@f3_as_product
 11704  0EE2  3000               	movlw	0
 11705  0EE3  00E2               	movwf	___ftmul@f3_as_product+1
 11706  0EE4  3000               	movlw	0
 11707  0EE5  00E3               	movwf	___ftmul@f3_as_product+2
 11708  0EE6  3007               	movlw	7
 11709  0EE7  00DC               	movwf	??___ftmul
 11710  0EE8  085C               	movf	??___ftmul,w
 11711  0EE9  00E4               	movwf	___ftmul@cntr
 11712  0EEA                     l6022:	
 11713  0EEA  1C56               	btfss	___ftmul@f1,0
 11714  0EEB  2EF2               	goto	l6026
 11715  0EEC  0859               	movf	___ftmul@f2,w
 11716  0EED  07E1               	addwf	___ftmul@f3_as_product,f
 11717  0EEE  085A               	movf	___ftmul@f2+1,w
 11718  0EEF  3DE2               	addwfc	___ftmul@f3_as_product+1,f
 11719  0EF0  085B               	movf	___ftmul@f2+2,w
 11720  0EF1  3DE3               	addwfc	___ftmul@f3_as_product+2,f
 11721  0EF2                     l6026:	
 11722  0EF2  3001               	movlw	1
 11723  0EF3                     u5725:	
 11724  0EF3  36D8               	lsrf	___ftmul@f1+2,f
 11725  0EF4  0CD7               	rrf	___ftmul@f1+1,f
 11726  0EF5  0CD6               	rrf	___ftmul@f1,f
 11727  0EF6  0B89               	decfsz	9,f
 11728  0EF7  2EF3               	goto	u5725
 11729  0EF8  3001               	movlw	1
 11730  0EF9                     u5735:	
 11731  0EF9  35D9               	lslf	___ftmul@f2,f
 11732  0EFA  0DDA               	rlf	___ftmul@f2+1,f
 11733  0EFB  0DDB               	rlf	___ftmul@f2+2,f
 11734  0EFC  0B89               	decfsz	9,f
 11735  0EFD  2EF9               	goto	u5735
 11736  0EFE  3001               	movlw	1
 11737  0EFF  02E4               	subwf	___ftmul@cntr,f
 11738  0F00  1D03               	btfss	3,2
 11739  0F01  2EEA               	goto	l6022
 11740  0F02  3009               	movlw	9
 11741  0F03  00DC               	movwf	??___ftmul
 11742  0F04  085C               	movf	??___ftmul,w
 11743  0F05  00E4               	movwf	___ftmul@cntr
 11744  0F06                     l6034:	
 11745  0F06  1C56               	btfss	___ftmul@f1,0
 11746  0F07  2F0E               	goto	l6038
 11747  0F08  0859               	movf	___ftmul@f2,w
 11748  0F09  07E1               	addwf	___ftmul@f3_as_product,f
 11749  0F0A  085A               	movf	___ftmul@f2+1,w
 11750  0F0B  3DE2               	addwfc	___ftmul@f3_as_product+1,f
 11751  0F0C  085B               	movf	___ftmul@f2+2,w
 11752  0F0D  3DE3               	addwfc	___ftmul@f3_as_product+2,f
 11753  0F0E                     l6038:	
 11754  0F0E  3001               	movlw	1
 11755  0F0F                     u5765:	
 11756  0F0F  36D8               	lsrf	___ftmul@f1+2,f
 11757  0F10  0CD7               	rrf	___ftmul@f1+1,f
 11758  0F11  0CD6               	rrf	___ftmul@f1,f
 11759  0F12  0B89               	decfsz	9,f
 11760  0F13  2F0F               	goto	u5765
 11761  0F14  3001               	movlw	1
 11762  0F15                     u5775:	
 11763  0F15  36E3               	lsrf	___ftmul@f3_as_product+2,f
 11764  0F16  0CE2               	rrf	___ftmul@f3_as_product+1,f
 11765  0F17  0CE1               	rrf	___ftmul@f3_as_product,f
 11766  0F18  0B89               	decfsz	9,f
 11767  0F19  2F15               	goto	u5775
 11768  0F1A  3001               	movlw	1
 11769  0F1B  02E4               	subwf	___ftmul@cntr,f
 11770  0F1C  1D03               	btfss	3,2
 11771  0F1D  2F06               	goto	l6034
 11772  0F1E  0861               	movf	___ftmul@f3_as_product,w
 11773  0F1F  00A1               	movwf	___ftpack@arg
 11774  0F20  0862               	movf	___ftmul@f3_as_product+1,w
 11775  0F21  00A2               	movwf	___ftpack@arg+1
 11776  0F22  0863               	movf	___ftmul@f3_as_product+2,w
 11777  0F23  00A3               	movwf	___ftpack@arg+2
 11778  0F24  0860               	movf	___ftmul@exp,w
 11779  0F25  00DC               	movwf	??___ftmul
 11780  0F26  085C               	movf	??___ftmul,w
 11781  0F27  00A4               	movwf	___ftpack@exp
 11782  0F28  0865               	movf	___ftmul@sign,w
 11783  0F29  00DD               	movwf	??___ftmul+1
 11784  0F2A  085D               	movf	??___ftmul+1,w
 11785  0F2B  00A5               	movwf	___ftpack@sign
 11786  0F2C  318A  22FB         	fcall	___ftpack
 11787  0F2E  0020               	movlb	0	; select bank0
 11788  0F2F  0821               	movf	?___ftpack,w
 11789  0F30  00D6               	movwf	?___ftmul
 11790  0F31  0822               	movf	?___ftpack+1,w
 11791  0F32  00D7               	movwf	?___ftmul+1
 11792  0F33  0823               	movf	?___ftpack+2,w
 11793  0F34  00D8               	movwf	?___ftmul+2
 11794  0F35  0008               	return
 11795  0F36                     __end_of___ftmul:	
 11796                           
 11797                           	psect	text60
 11798  0DD9                     __ptext60:	
 11799 ;; *************** function ___ftdiv *****************
 11800 ;; Defined at:
 11801 ;;		line 56 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\ftdiv.c"
 11802 ;; Parameters:    Size  Location     Type
 11803 ;;  f2              3   17[BANK0 ] float 
 11804 ;;  f1              3   20[BANK0 ] float 
 11805 ;; Auto vars:     Size  Location     Type
 11806 ;;  f3              3   28[BANK0 ] float 
 11807 ;;  sign            1   32[BANK0 ] unsigned char 
 11808 ;;  exp             1   31[BANK0 ] unsigned char 
 11809 ;;  cntr            1   27[BANK0 ] unsigned char 
 11810 ;; Return value:  Size  Location     Type
 11811 ;;                  3   17[BANK0 ] float 
 11812 ;; Registers used:
 11813 ;;		wreg, status,2, status,0, pclath, cstack
 11814 ;; Tracked objects:
 11815 ;;		On entry : 0/0
 11816 ;;		On exit  : 0/0
 11817 ;;		Unchanged: 0/0
 11818 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11819 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11820 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11821 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11822 ;;      Totals:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11823 ;;Total ram usage:       16 bytes
 11824 ;; Hardware stack levels used:    1
 11825 ;; Hardware stack levels required when called:    5
 11826 ;; This function calls:
 11827 ;;		___ftpack
 11828 ;; This function is called by:
 11829 ;;		_Sensor_getSupplyVoltage
 11830 ;;		_BMP_readTemperature
 11831 ;;		_HMC5883L_GetCompassDirection
 11832 ;; This function uses a non-reentrant model
 11833 ;;
 11834                           
 11835                           
 11836                           ;psect for function ___ftdiv
 11837  0DD9                     ___ftdiv:	
 11838                           
 11839                           ;incstack = 0
 11840                           ; Regs used in ___ftdiv: [wreg+status,2+status,0+pclath+cstack]
 11841  0DD9  0020               	movlb	0	; select bank0
 11842  0DDA  0834               	movf	___ftdiv@f1,w
 11843  0DDB  00B7               	movwf	??___ftdiv
 11844  0DDC  0835               	movf	___ftdiv@f1+1,w
 11845  0DDD  00B8               	movwf	??___ftdiv+1
 11846  0DDE  0836               	movf	___ftdiv@f1+2,w
 11847  0DDF  00B9               	movwf	??___ftdiv+2
 11848  0DE0  1003               	clrc
 11849  0DE1  0D38               	rlf	??___ftdiv+1,w
 11850  0DE2  0D39               	rlf	??___ftdiv+2,w
 11851  0DE3  00BA               	movwf	??___ftdiv+3
 11852  0DE4  083A               	movf	??___ftdiv+3,w
 11853  0DE5  00BF               	movwf	___ftdiv@exp
 11854  0DE6  083F               	movf	___ftdiv@exp,w
 11855  0DE7  1D03               	btfss	3,2
 11856  0DE8  2DF0               	goto	l5608
 11857  0DE9  3000               	movlw	0
 11858  0DEA  00B1               	movwf	?___ftdiv
 11859  0DEB  3000               	movlw	0
 11860  0DEC  00B2               	movwf	?___ftdiv+1
 11861  0DED  3000               	movlw	0
 11862  0DEE  00B3               	movwf	?___ftdiv+2
 11863  0DEF  0008               	return
 11864  0DF0                     l5608:	
 11865  0DF0  0831               	movf	___ftdiv@f2,w
 11866  0DF1  00B7               	movwf	??___ftdiv
 11867  0DF2  0832               	movf	___ftdiv@f2+1,w
 11868  0DF3  00B8               	movwf	??___ftdiv+1
 11869  0DF4  0833               	movf	___ftdiv@f2+2,w
 11870  0DF5  00B9               	movwf	??___ftdiv+2
 11871  0DF6  1003               	clrc
 11872  0DF7  0D38               	rlf	??___ftdiv+1,w
 11873  0DF8  0D39               	rlf	??___ftdiv+2,w
 11874  0DF9  00BA               	movwf	??___ftdiv+3
 11875  0DFA  083A               	movf	??___ftdiv+3,w
 11876  0DFB  00C0               	movwf	___ftdiv@sign
 11877  0DFC  0840               	movf	___ftdiv@sign,w
 11878  0DFD  1D03               	btfss	3,2
 11879  0DFE  2E06               	goto	l5614
 11880  0DFF  3000               	movlw	0
 11881  0E00  00B1               	movwf	?___ftdiv
 11882  0E01  3000               	movlw	0
 11883  0E02  00B2               	movwf	?___ftdiv+1
 11884  0E03  3000               	movlw	0
 11885  0E04  00B3               	movwf	?___ftdiv+2
 11886  0E05  0008               	return
 11887  0E06                     l5614:	
 11888  0E06  3000               	movlw	0
 11889  0E07  00BC               	movwf	___ftdiv@f3
 11890  0E08  3000               	movlw	0
 11891  0E09  00BD               	movwf	___ftdiv@f3+1
 11892  0E0A  3000               	movlw	0
 11893  0E0B  00BE               	movwf	___ftdiv@f3+2
 11894  0E0C  3089               	movlw	137
 11895  0E0D  0740               	addwf	___ftdiv@sign,w
 11896  0E0E  00B7               	movwf	??___ftdiv
 11897  0E0F  0837               	movf	??___ftdiv,w
 11898  0E10  02BF               	subwf	___ftdiv@exp,f
 11899  0E11  0834               	movf	___ftdiv@f1,w
 11900  0E12  00B7               	movwf	??___ftdiv
 11901  0E13  0835               	movf	___ftdiv@f1+1,w
 11902  0E14  00B8               	movwf	??___ftdiv+1
 11903  0E15  0836               	movf	___ftdiv@f1+2,w
 11904  0E16  00B9               	movwf	??___ftdiv+2
 11905  0E17  3010               	movlw	16
 11906  0E18                     u5075:	
 11907  0E18  36B9               	lsrf	??___ftdiv+2,f
 11908  0E19  0CB8               	rrf	??___ftdiv+1,f
 11909  0E1A  0CB7               	rrf	??___ftdiv,f
 11910  0E1B  0B89               	decfsz	9,f
 11911  0E1C  2E18               	goto	u5075
 11912  0E1D  0837               	movf	??___ftdiv,w
 11913  0E1E  00BA               	movwf	??___ftdiv+3
 11914  0E1F  083A               	movf	??___ftdiv+3,w
 11915  0E20  00C0               	movwf	___ftdiv@sign
 11916  0E21  0831               	movf	___ftdiv@f2,w
 11917  0E22  00B7               	movwf	??___ftdiv
 11918  0E23  0832               	movf	___ftdiv@f2+1,w
 11919  0E24  00B8               	movwf	??___ftdiv+1
 11920  0E25  0833               	movf	___ftdiv@f2+2,w
 11921  0E26  00B9               	movwf	??___ftdiv+2
 11922  0E27  3010               	movlw	16
 11923  0E28                     u5085:	
 11924  0E28  36B9               	lsrf	??___ftdiv+2,f
 11925  0E29  0CB8               	rrf	??___ftdiv+1,f
 11926  0E2A  0CB7               	rrf	??___ftdiv,f
 11927  0E2B  0B89               	decfsz	9,f
 11928  0E2C  2E28               	goto	u5085
 11929  0E2D  0837               	movf	??___ftdiv,w
 11930  0E2E  00BA               	movwf	??___ftdiv+3
 11931  0E2F  083A               	movf	??___ftdiv+3,w
 11932  0E30  06C0               	xorwf	___ftdiv@sign,f
 11933  0E31  3080               	movlw	128
 11934  0E32  00B7               	movwf	??___ftdiv
 11935  0E33  0837               	movf	??___ftdiv,w
 11936  0E34  05C0               	andwf	___ftdiv@sign,f
 11937  0E35  17B5               	bsf	___ftdiv@f1+1,7
 11938  0E36  30FF               	movlw	255
 11939  0E37  05B4               	andwf	___ftdiv@f1,f
 11940  0E38  30FF               	movlw	255
 11941  0E39  05B5               	andwf	___ftdiv@f1+1,f
 11942  0E3A  3000               	movlw	0
 11943  0E3B  05B6               	andwf	___ftdiv@f1+2,f
 11944  0E3C  17B2               	bsf	___ftdiv@f2+1,7
 11945  0E3D  30FF               	movlw	255
 11946  0E3E  05B1               	andwf	___ftdiv@f2,f
 11947  0E3F  30FF               	movlw	255
 11948  0E40  05B2               	andwf	___ftdiv@f2+1,f
 11949  0E41  3000               	movlw	0
 11950  0E42  05B3               	andwf	___ftdiv@f2+2,f
 11951  0E43  3018               	movlw	24
 11952  0E44  00B7               	movwf	??___ftdiv
 11953  0E45  0837               	movf	??___ftdiv,w
 11954  0E46  00BB               	movwf	___ftdiv@cntr
 11955  0E47                     l5628:	
 11956  0E47  3001               	movlw	1
 11957  0E48                     u5095:	
 11958  0E48  35BC               	lslf	___ftdiv@f3,f
 11959  0E49  0DBD               	rlf	___ftdiv@f3+1,f
 11960  0E4A  0DBE               	rlf	___ftdiv@f3+2,f
 11961  0E4B  0B89               	decfsz	9,f
 11962  0E4C  2E48               	goto	u5095
 11963  0E4D  0833               	movf	___ftdiv@f2+2,w
 11964  0E4E  0236               	subwf	___ftdiv@f1+2,w
 11965  0E4F  1D03               	skipz
 11966  0E50  2E57               	goto	u5105
 11967  0E51  0832               	movf	___ftdiv@f2+1,w
 11968  0E52  0235               	subwf	___ftdiv@f1+1,w
 11969  0E53  1D03               	skipz
 11970  0E54  2E57               	goto	u5105
 11971  0E55  0831               	movf	___ftdiv@f2,w
 11972  0E56  0234               	subwf	___ftdiv@f1,w
 11973  0E57                     u5105:	
 11974  0E57  1C03               	skipc
 11975  0E58  2E60               	goto	l5636
 11976  0E59  0831               	movf	___ftdiv@f2,w
 11977  0E5A  02B4               	subwf	___ftdiv@f1,f
 11978  0E5B  0832               	movf	___ftdiv@f2+1,w
 11979  0E5C  3BB5               	subwfb	___ftdiv@f1+1,f
 11980  0E5D  0833               	movf	___ftdiv@f2+2,w
 11981  0E5E  3BB6               	subwfb	___ftdiv@f1+2,f
 11982  0E5F  143C               	bsf	___ftdiv@f3,0
 11983  0E60                     l5636:	
 11984  0E60  3001               	movlw	1
 11985  0E61                     u5115:	
 11986  0E61  35B4               	lslf	___ftdiv@f1,f
 11987  0E62  0DB5               	rlf	___ftdiv@f1+1,f
 11988  0E63  0DB6               	rlf	___ftdiv@f1+2,f
 11989  0E64  0B89               	decfsz	9,f
 11990  0E65  2E61               	goto	u5115
 11991  0E66  3001               	movlw	1
 11992  0E67  02BB               	subwf	___ftdiv@cntr,f
 11993  0E68  1D03               	btfss	3,2
 11994  0E69  2E47               	goto	l5628
 11995  0E6A  083C               	movf	___ftdiv@f3,w
 11996  0E6B  00A1               	movwf	___ftpack@arg
 11997  0E6C  083D               	movf	___ftdiv@f3+1,w
 11998  0E6D  00A2               	movwf	___ftpack@arg+1
 11999  0E6E  083E               	movf	___ftdiv@f3+2,w
 12000  0E6F  00A3               	movwf	___ftpack@arg+2
 12001  0E70  083F               	movf	___ftdiv@exp,w
 12002  0E71  00B7               	movwf	??___ftdiv
 12003  0E72  0837               	movf	??___ftdiv,w
 12004  0E73  00A4               	movwf	___ftpack@exp
 12005  0E74  0840               	movf	___ftdiv@sign,w
 12006  0E75  00B8               	movwf	??___ftdiv+1
 12007  0E76  0838               	movf	??___ftdiv+1,w
 12008  0E77  00A5               	movwf	___ftpack@sign
 12009  0E78  318A  22FB         	fcall	___ftpack
 12010  0E7A  0020               	movlb	0	; select bank0
 12011  0E7B  0821               	movf	?___ftpack,w
 12012  0E7C  00B1               	movwf	?___ftdiv
 12013  0E7D  0822               	movf	?___ftpack+1,w
 12014  0E7E  00B2               	movwf	?___ftdiv+1
 12015  0E7F  0823               	movf	?___ftpack+2,w
 12016  0E80  00B3               	movwf	?___ftdiv+2
 12017  0E81  0008               	return
 12018  0E82                     __end_of___ftdiv:	
 12019                           
 12020                           	psect	text61
 12021  0682                     __ptext61:	
 12022 ;; *************** function ___ftadd *****************
 12023 ;; Defined at:
 12024 ;;		line 86 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\ftadd.c"
 12025 ;; Parameters:    Size  Location     Type
 12026 ;;  f1              3   41[BANK0 ] float 
 12027 ;;  f2              3   44[BANK0 ] float 
 12028 ;; Auto vars:     Size  Location     Type
 12029 ;;  exp1            1   53[BANK0 ] unsigned char 
 12030 ;;  exp2            1   52[BANK0 ] unsigned char 
 12031 ;;  sign            1   51[BANK0 ] unsigned char 
 12032 ;; Return value:  Size  Location     Type
 12033 ;;                  3   41[BANK0 ] float 
 12034 ;; Registers used:
 12035 ;;		wreg, status,2, status,0, pclath, cstack
 12036 ;; Tracked objects:
 12037 ;;		On entry : 0/0
 12038 ;;		On exit  : 0/0
 12039 ;;		Unchanged: 0/0
 12040 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12041 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12042 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12043 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12044 ;;      Totals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12045 ;;Total ram usage:       13 bytes
 12046 ;; Hardware stack levels used:    1
 12047 ;; Hardware stack levels required when called:    5
 12048 ;; This function calls:
 12049 ;;		___ftpack
 12050 ;; This function is called by:
 12051 ;;		_BMP_readTemperature
 12052 ;;		_Wireless_packageData
 12053 ;;		_HMC5883L_GetCompassDirection
 12054 ;; This function uses a non-reentrant model
 12055 ;;
 12056                           
 12057                           
 12058                           ;psect for function ___ftadd
 12059  0682                     ___ftadd:	
 12060                           
 12061                           ;incstack = 0
 12062                           ; Regs used in ___ftadd: [wreg+status,2+status,0+pclath+cstack]
 12063  0682  0020               	movlb	0	; select bank0
 12064  0683  0849               	movf	___ftadd@f1,w
 12065  0684  00CF               	movwf	??___ftadd
 12066  0685  084A               	movf	___ftadd@f1+1,w
 12067  0686  00D0               	movwf	??___ftadd+1
 12068  0687  084B               	movf	___ftadd@f1+2,w
 12069  0688  00D1               	movwf	??___ftadd+2
 12070  0689  1003               	clrc
 12071  068A  0D50               	rlf	??___ftadd+1,w
 12072  068B  0D51               	rlf	??___ftadd+2,w
 12073  068C  00D2               	movwf	??___ftadd+3
 12074  068D  0852               	movf	??___ftadd+3,w
 12075  068E  00D5               	movwf	___ftadd@exp1
 12076  068F  084C               	movf	___ftadd@f2,w
 12077  0690  00CF               	movwf	??___ftadd
 12078  0691  084D               	movf	___ftadd@f2+1,w
 12079  0692  00D0               	movwf	??___ftadd+1
 12080  0693  084E               	movf	___ftadd@f2+2,w
 12081  0694  00D1               	movwf	??___ftadd+2
 12082  0695  1003               	clrc
 12083  0696  0D50               	rlf	??___ftadd+1,w
 12084  0697  0D51               	rlf	??___ftadd+2,w
 12085  0698  00D2               	movwf	??___ftadd+3
 12086  0699  0852               	movf	??___ftadd+3,w
 12087  069A  00D4               	movwf	___ftadd@exp2
 12088  069B  0855               	movf	___ftadd@exp1,w
 12089  069C  1903               	btfsc	3,2
 12090  069D  2EAA               	goto	l5934
 12091  069E  0854               	movf	___ftadd@exp2,w
 12092  069F  0255               	subwf	___ftadd@exp1,w
 12093  06A0  1803               	skipnc
 12094  06A1  2EB1               	goto	l5938
 12095  06A2  0355               	decf	___ftadd@exp1,w
 12096  06A3  3AFF               	xorlw	255
 12097  06A4  0754               	addwf	___ftadd@exp2,w
 12098  06A5  00CF               	movwf	??___ftadd
 12099  06A6  3019               	movlw	25
 12100  06A7  024F               	subwf	??___ftadd,w
 12101  06A8  1C03               	skipc
 12102  06A9  2EB1               	goto	l5938
 12103  06AA                     l5934:	
 12104  06AA  084C               	movf	___ftadd@f2,w
 12105  06AB  00C9               	movwf	?___ftadd
 12106  06AC  084D               	movf	___ftadd@f2+1,w
 12107  06AD  00CA               	movwf	?___ftadd+1
 12108  06AE  084E               	movf	___ftadd@f2+2,w
 12109  06AF  00CB               	movwf	?___ftadd+2
 12110  06B0  0008               	return
 12111  06B1                     l5938:	
 12112  06B1  0854               	movf	___ftadd@exp2,w
 12113  06B2  1903               	btfsc	3,2
 12114  06B3  0008               	return
 12115  06B4  0855               	movf	___ftadd@exp1,w
 12116  06B5  0254               	subwf	___ftadd@exp2,w
 12117  06B6  1803               	skipnc
 12118  06B7  2EC0               	goto	l5944
 12119  06B8  0354               	decf	___ftadd@exp2,w
 12120  06B9  3AFF               	xorlw	255
 12121  06BA  0755               	addwf	___ftadd@exp1,w
 12122  06BB  00CF               	movwf	??___ftadd
 12123  06BC  3019               	movlw	25
 12124  06BD  024F               	subwf	??___ftadd,w
 12125  06BE  1803               	btfsc	3,0
 12126  06BF  0008               	return
 12127  06C0                     l5944:	
 12128  06C0  3006               	movlw	6
 12129  06C1  00CF               	movwf	??___ftadd
 12130  06C2  084F               	movf	??___ftadd,w
 12131  06C3  00D3               	movwf	___ftadd@sign
 12132  06C4  1BCB               	btfsc	___ftadd@f1+2,7
 12133  06C5  17D3               	bsf	___ftadd@sign,7
 12134  06C6  1BCE               	btfsc	___ftadd@f2+2,7
 12135  06C7  1753               	bsf	___ftadd@sign,6
 12136  06C8  17CA               	bsf	___ftadd@f1+1,7
 12137  06C9  30FF               	movlw	255
 12138  06CA  05C9               	andwf	___ftadd@f1,f
 12139  06CB  30FF               	movlw	255
 12140  06CC  05CA               	andwf	___ftadd@f1+1,f
 12141  06CD  3000               	movlw	0
 12142  06CE  05CB               	andwf	___ftadd@f1+2,f
 12143  06CF  17CD               	bsf	___ftadd@f2+1,7
 12144  06D0  30FF               	movlw	255
 12145  06D1  05CC               	andwf	___ftadd@f2,f
 12146  06D2  30FF               	movlw	255
 12147  06D3  05CD               	andwf	___ftadd@f2+1,f
 12148  06D4  3000               	movlw	0
 12149  06D5  05CE               	andwf	___ftadd@f2+2,f
 12150  06D6  0854               	movf	___ftadd@exp2,w
 12151  06D7  0255               	subwf	___ftadd@exp1,w
 12152  06D8  1803               	skipnc
 12153  06D9  2EFC               	goto	l5966
 12154  06DA                     l5956:	
 12155  06DA  3001               	movlw	1
 12156  06DB                     u5535:	
 12157  06DB  35CC               	lslf	___ftadd@f2,f
 12158  06DC  0DCD               	rlf	___ftadd@f2+1,f
 12159  06DD  0DCE               	rlf	___ftadd@f2+2,f
 12160  06DE  0B89               	decfsz	9,f
 12161  06DF  2EDB               	goto	u5535
 12162  06E0  3001               	movlw	1
 12163  06E1  02D4               	subwf	___ftadd@exp2,f
 12164  06E2  0854               	movf	___ftadd@exp2,w
 12165  06E3  0655               	xorwf	___ftadd@exp1,w
 12166  06E4  1903               	skipnz
 12167  06E5  2EF7               	goto	l5964
 12168  06E6  3001               	movlw	1
 12169  06E7  02D3               	subwf	___ftadd@sign,f
 12170  06E8  0853               	movf	___ftadd@sign,w
 12171  06E9  3907               	andlw	7
 12172  06EA  1903               	btfsc	3,2
 12173  06EB  2EF7               	goto	l5964
 12174  06EC  2EDA               	goto	l5956
 12175  06ED                     l5962:	
 12176  06ED  3001               	movlw	1
 12177  06EE                     u5565:	
 12178  06EE  36CB               	lsrf	___ftadd@f1+2,f
 12179  06EF  0CCA               	rrf	___ftadd@f1+1,f
 12180  06F0  0CC9               	rrf	___ftadd@f1,f
 12181  06F1  0B89               	decfsz	9,f
 12182  06F2  2EEE               	goto	u5565
 12183  06F3  3001               	movlw	1
 12184  06F4  00CF               	movwf	??___ftadd
 12185  06F5  084F               	movf	??___ftadd,w
 12186  06F6  07D5               	addwf	___ftadd@exp1,f
 12187  06F7                     l5964:	
 12188  06F7  0855               	movf	___ftadd@exp1,w
 12189  06F8  0654               	xorwf	___ftadd@exp2,w
 12190  06F9  1903               	btfsc	3,2
 12191  06FA  2F21               	goto	l1532
 12192  06FB  2EED               	goto	l5962
 12193  06FC                     l5966:	
 12194  06FC  0855               	movf	___ftadd@exp1,w
 12195  06FD  0254               	subwf	___ftadd@exp2,w
 12196  06FE  1803               	skipnc
 12197  06FF  2F21               	goto	l1532
 12198  0700                     l5968:	
 12199  0700  3001               	movlw	1
 12200  0701                     u5595:	
 12201  0701  35C9               	lslf	___ftadd@f1,f
 12202  0702  0DCA               	rlf	___ftadd@f1+1,f
 12203  0703  0DCB               	rlf	___ftadd@f1+2,f
 12204  0704  0B89               	decfsz	9,f
 12205  0705  2F01               	goto	u5595
 12206  0706  3001               	movlw	1
 12207  0707  02D5               	subwf	___ftadd@exp1,f
 12208  0708  0854               	movf	___ftadd@exp2,w
 12209  0709  0655               	xorwf	___ftadd@exp1,w
 12210  070A  1903               	skipnz
 12211  070B  2F1D               	goto	l5976
 12212  070C  3001               	movlw	1
 12213  070D  02D3               	subwf	___ftadd@sign,f
 12214  070E  0853               	movf	___ftadd@sign,w
 12215  070F  3907               	andlw	7
 12216  0710  1903               	btfsc	3,2
 12217  0711  2F1D               	goto	l5976
 12218  0712  2F00               	goto	l5968
 12219  0713                     l5974:	
 12220  0713  3001               	movlw	1
 12221  0714                     u5625:	
 12222  0714  36CE               	lsrf	___ftadd@f2+2,f
 12223  0715  0CCD               	rrf	___ftadd@f2+1,f
 12224  0716  0CCC               	rrf	___ftadd@f2,f
 12225  0717  0B89               	decfsz	9,f
 12226  0718  2F14               	goto	u5625
 12227  0719  3001               	movlw	1
 12228  071A  00CF               	movwf	??___ftadd
 12229  071B  084F               	movf	??___ftadd,w
 12230  071C  07D4               	addwf	___ftadd@exp2,f
 12231  071D                     l5976:	
 12232  071D  0855               	movf	___ftadd@exp1,w
 12233  071E  0654               	xorwf	___ftadd@exp2,w
 12234  071F  1D03               	skipz
 12235  0720  2F13               	goto	l5974
 12236  0721                     l1532:	
 12237  0721  1FD3               	btfss	___ftadd@sign,7
 12238  0722  2F33               	goto	l5980
 12239  0723  30FF               	movlw	255
 12240  0724  06C9               	xorwf	___ftadd@f1,f
 12241  0725  30FF               	movlw	255
 12242  0726  06CA               	xorwf	___ftadd@f1+1,f
 12243  0727  30FF               	movlw	255
 12244  0728  06CB               	xorwf	___ftadd@f1+2,f
 12245  0729  3001               	movlw	1
 12246  072A  07C9               	addwf	___ftadd@f1,f
 12247  072B  3000               	movlw	0
 12248  072C  1803               	skipnc
 12249  072D  3001               	movlw	1
 12250  072E  07CA               	addwf	___ftadd@f1+1,f
 12251  072F  3000               	movlw	0
 12252  0730  1803               	skipnc
 12253  0731  3001               	movlw	1
 12254  0732  07CB               	addwf	___ftadd@f1+2,f
 12255  0733                     l5980:	
 12256  0733  1F53               	btfss	___ftadd@sign,6
 12257  0734  2F45               	goto	l5984
 12258  0735  30FF               	movlw	255
 12259  0736  06CC               	xorwf	___ftadd@f2,f
 12260  0737  30FF               	movlw	255
 12261  0738  06CD               	xorwf	___ftadd@f2+1,f
 12262  0739  30FF               	movlw	255
 12263  073A  06CE               	xorwf	___ftadd@f2+2,f
 12264  073B  3001               	movlw	1
 12265  073C  07CC               	addwf	___ftadd@f2,f
 12266  073D  3000               	movlw	0
 12267  073E  1803               	skipnc
 12268  073F  3001               	movlw	1
 12269  0740  07CD               	addwf	___ftadd@f2+1,f
 12270  0741  3000               	movlw	0
 12271  0742  1803               	skipnc
 12272  0743  3001               	movlw	1
 12273  0744  07CE               	addwf	___ftadd@f2+2,f
 12274  0745                     l5984:	
 12275  0745  01D3               	clrf	___ftadd@sign
 12276  0746  0849               	movf	___ftadd@f1,w
 12277  0747  07CC               	addwf	___ftadd@f2,f
 12278  0748  084A               	movf	___ftadd@f1+1,w
 12279  0749  3DCD               	addwfc	___ftadd@f2+1,f
 12280  074A  084B               	movf	___ftadd@f1+2,w
 12281  074B  3DCE               	addwfc	___ftadd@f2+2,f
 12282  074C  1FCE               	btfss	___ftadd@f2+2,7
 12283  074D  2F60               	goto	l5994
 12284  074E  30FF               	movlw	255
 12285  074F  06CC               	xorwf	___ftadd@f2,f
 12286  0750  30FF               	movlw	255
 12287  0751  06CD               	xorwf	___ftadd@f2+1,f
 12288  0752  30FF               	movlw	255
 12289  0753  06CE               	xorwf	___ftadd@f2+2,f
 12290  0754  3001               	movlw	1
 12291  0755  07CC               	addwf	___ftadd@f2,f
 12292  0756  3000               	movlw	0
 12293  0757  1803               	skipnc
 12294  0758  3001               	movlw	1
 12295  0759  07CD               	addwf	___ftadd@f2+1,f
 12296  075A  3000               	movlw	0
 12297  075B  1803               	skipnc
 12298  075C  3001               	movlw	1
 12299  075D  07CE               	addwf	___ftadd@f2+2,f
 12300  075E  01D3               	clrf	___ftadd@sign
 12301  075F  0AD3               	incf	___ftadd@sign,f
 12302  0760                     l5994:	
 12303  0760  084C               	movf	___ftadd@f2,w
 12304  0761  00A1               	movwf	___ftpack@arg
 12305  0762  084D               	movf	___ftadd@f2+1,w
 12306  0763  00A2               	movwf	___ftpack@arg+1
 12307  0764  084E               	movf	___ftadd@f2+2,w
 12308  0765  00A3               	movwf	___ftpack@arg+2
 12309  0766  0855               	movf	___ftadd@exp1,w
 12310  0767  00CF               	movwf	??___ftadd
 12311  0768  084F               	movf	??___ftadd,w
 12312  0769  00A4               	movwf	___ftpack@exp
 12313  076A  0853               	movf	___ftadd@sign,w
 12314  076B  00D0               	movwf	??___ftadd+1
 12315  076C  0850               	movf	??___ftadd+1,w
 12316  076D  00A5               	movwf	___ftpack@sign
 12317  076E  318A  22FB         	fcall	___ftpack
 12318  0770  0020               	movlb	0	; select bank0
 12319  0771  0821               	movf	?___ftpack,w
 12320  0772  00C9               	movwf	?___ftadd
 12321  0773  0822               	movf	?___ftpack+1,w
 12322  0774  00CA               	movwf	?___ftadd+1
 12323  0775  0823               	movf	?___ftpack+2,w
 12324  0776  00CB               	movwf	?___ftadd+2
 12325  0777  0008               	return
 12326  0778                     __end_of___ftadd:	
 12327                           
 12328                           	psect	text62
 12329  16BF                     __ptext62:	
 12330 ;; *************** function ___awtoft *****************
 12331 ;; Defined at:
 12332 ;;		line 32 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\awtoft.c"
 12333 ;; Parameters:    Size  Location     Type
 12334 ;;  c               2    9[BANK0 ] int 
 12335 ;; Auto vars:     Size  Location     Type
 12336 ;;  sign            1   14[BANK0 ] unsigned char 
 12337 ;; Return value:  Size  Location     Type
 12338 ;;                  3    9[BANK0 ] float 
 12339 ;; Registers used:
 12340 ;;		wreg, status,2, status,0, pclath, cstack
 12341 ;; Tracked objects:
 12342 ;;		On entry : 0/0
 12343 ;;		On exit  : 0/0
 12344 ;;		Unchanged: 0/0
 12345 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12346 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12347 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12348 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12349 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12350 ;;Total ram usage:        6 bytes
 12351 ;; Hardware stack levels used:    1
 12352 ;; Hardware stack levels required when called:    5
 12353 ;; This function calls:
 12354 ;;		___ftpack
 12355 ;; This function is called by:
 12356 ;;		_BMP_readTemperature
 12357 ;;		_HMC5883L_GetCompassDirection
 12358 ;; This function uses a non-reentrant model
 12359 ;;
 12360                           
 12361                           
 12362                           ;psect for function ___awtoft
 12363  16BF                     ___awtoft:	
 12364                           
 12365                           ;incstack = 0
 12366                           ; Regs used in ___awtoft: [wreg+status,2+status,0+pclath+cstack]
 12367  16BF  0020               	movlb	0	; select bank0
 12368  16C0  01AE               	clrf	___awtoft@sign
 12369  16C1  1FAA               	btfss	___awtoft@c+1,7
 12370  16C2  2ECA               	goto	l5924
 12371  16C3  09A9               	comf	___awtoft@c,f
 12372  16C4  09AA               	comf	___awtoft@c+1,f
 12373  16C5  0AA9               	incf	___awtoft@c,f
 12374  16C6  1903               	skipnz
 12375  16C7  0AAA               	incf	___awtoft@c+1,f
 12376  16C8  01AE               	clrf	___awtoft@sign
 12377  16C9  0AAE               	incf	___awtoft@sign,f
 12378  16CA                     l5924:	
 12379  16CA  0829               	movf	___awtoft@c,w
 12380  16CB  00A1               	movwf	___ftpack@arg
 12381  16CC  082A               	movf	___awtoft@c+1,w
 12382  16CD  00A2               	movwf	___ftpack@arg+1
 12383  16CE  01A3               	clrf	___ftpack@arg+2
 12384  16CF  308E               	movlw	142
 12385  16D0  00AC               	movwf	??___awtoft
 12386  16D1  082C               	movf	??___awtoft,w
 12387  16D2  00A4               	movwf	___ftpack@exp
 12388  16D3  082E               	movf	___awtoft@sign,w
 12389  16D4  00AD               	movwf	??___awtoft+1
 12390  16D5  082D               	movf	??___awtoft+1,w
 12391  16D6  00A5               	movwf	___ftpack@sign
 12392  16D7  318A  22FB         	fcall	___ftpack
 12393  16D9  0020               	movlb	0	; select bank0
 12394  16DA  0821               	movf	?___ftpack,w
 12395  16DB  00A9               	movwf	?___awtoft
 12396  16DC  0822               	movf	?___ftpack+1,w
 12397  16DD  00AA               	movwf	?___awtoft+1
 12398  16DE  0823               	movf	?___ftpack+2,w
 12399  16DF  00AB               	movwf	?___awtoft+2
 12400  16E0  0008               	return
 12401  16E1                     __end_of___awtoft:	
 12402                           
 12403                           	psect	text63
 12404  0882                     __ptext63:	
 12405 ;; *************** function ___altoft *****************
 12406 ;; Defined at:
 12407 ;;		line 42 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\altoft.c"
 12408 ;; Parameters:    Size  Location     Type
 12409 ;;  c               4    9[BANK0 ] long 
 12410 ;; Auto vars:     Size  Location     Type
 12411 ;;  sign            1   16[BANK0 ] unsigned char 
 12412 ;;  exp             1   15[BANK0 ] unsigned char 
 12413 ;; Return value:  Size  Location     Type
 12414 ;;                  3    9[BANK0 ] float 
 12415 ;; Registers used:
 12416 ;;		wreg, status,2, status,0, pclath, cstack
 12417 ;; Tracked objects:
 12418 ;;		On entry : 0/0
 12419 ;;		On exit  : 0/0
 12420 ;;		Unchanged: 0/0
 12421 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12422 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12423 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12424 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12425 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12426 ;;Total ram usage:        8 bytes
 12427 ;; Hardware stack levels used:    1
 12428 ;; Hardware stack levels required when called:    5
 12429 ;; This function calls:
 12430 ;;		___ftpack
 12431 ;; This function is called by:
 12432 ;;		_BMP_readTemperature
 12433 ;; This function uses a non-reentrant model
 12434 ;;
 12435                           
 12436                           
 12437                           ;psect for function ___altoft
 12438  0882                     ___altoft:	
 12439                           
 12440                           ;incstack = 0
 12441                           ; Regs used in ___altoft: [wreg+status,2+status,0+pclath+cstack]
 12442  0882  0020               	movlb	0	; select bank0
 12443  0883  01B0               	clrf	___altoft@sign
 12444  0884  308E               	movlw	142
 12445  0885  00AD               	movwf	??___altoft
 12446  0886  082D               	movf	??___altoft,w
 12447  0887  00AF               	movwf	___altoft@exp
 12448  0888  1FAC               	btfss	___altoft@c+3,7
 12449  0889  2897               	goto	l5910
 12450  088A  09A9               	comf	___altoft@c,f
 12451  088B  09AA               	comf	___altoft@c+1,f
 12452  088C  09AB               	comf	___altoft@c+2,f
 12453  088D  09AC               	comf	___altoft@c+3,f
 12454  088E  0AA9               	incf	___altoft@c,f
 12455  088F  1903               	skipnz
 12456  0890  0AAA               	incf	___altoft@c+1,f
 12457  0891  1903               	skipnz
 12458  0892  0AAB               	incf	___altoft@c+2,f
 12459  0893  1903               	skipnz
 12460  0894  0AAC               	incf	___altoft@c+3,f
 12461  0895  01B0               	clrf	___altoft@sign
 12462  0896  0AB0               	incf	___altoft@sign,f
 12463  0897                     l5910:	
 12464  0897  30FF               	movlw	255
 12465  0898  052C               	andwf	___altoft@c+3,w
 12466  0899  1903               	btfsc	3,2
 12467  089A  28A7               	goto	l5912
 12468  089B  3001               	movlw	1
 12469  089C                     u5415:	
 12470  089C  36AC               	lsrf	___altoft@c+3,f
 12471  089D  0CAB               	rrf	___altoft@c+2,f
 12472  089E  0CAA               	rrf	___altoft@c+1,f
 12473  089F  0CA9               	rrf	___altoft@c,f
 12474  08A0  0B89               	decfsz	9,f
 12475  08A1  289C               	goto	u5415
 12476  08A2  3001               	movlw	1
 12477  08A3  00AD               	movwf	??___altoft
 12478  08A4  082D               	movf	??___altoft,w
 12479  08A5  07AF               	addwf	___altoft@exp,f
 12480  08A6  2897               	goto	l5910
 12481  08A7                     l5912:	
 12482  08A7  0829               	movf	___altoft@c,w
 12483  08A8  00A1               	movwf	___ftpack@arg
 12484  08A9  082A               	movf	___altoft@c+1,w
 12485  08AA  00A2               	movwf	___ftpack@arg+1
 12486  08AB  082B               	movf	___altoft@c+2,w
 12487  08AC  00A3               	movwf	___ftpack@arg+2
 12488  08AD  082F               	movf	___altoft@exp,w
 12489  08AE  00AD               	movwf	??___altoft
 12490  08AF  082D               	movf	??___altoft,w
 12491  08B0  00A4               	movwf	___ftpack@exp
 12492  08B1  0830               	movf	___altoft@sign,w
 12493  08B2  00AE               	movwf	??___altoft+1
 12494  08B3  082E               	movf	??___altoft+1,w
 12495  08B4  00A5               	movwf	___ftpack@sign
 12496  08B5  318A  22FB         	fcall	___ftpack
 12497  08B7  0020               	movlb	0	; select bank0
 12498  08B8  0821               	movf	?___ftpack,w
 12499  08B9  00A9               	movwf	?___altoft
 12500  08BA  0822               	movf	?___ftpack+1,w
 12501  08BB  00AA               	movwf	?___altoft+1
 12502  08BC  0823               	movf	?___ftpack+2,w
 12503  08BD  00AB               	movwf	?___altoft+2
 12504  08BE  0008               	return
 12505  08BF                     __end_of___altoft:	
 12506                           
 12507                           	psect	text64
 12508  0AFB                     __ptext64:	
 12509 ;; *************** function ___ftpack *****************
 12510 ;; Defined at:
 12511 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\float.c"
 12512 ;; Parameters:    Size  Location     Type
 12513 ;;  arg             3    1[BANK0 ] unsigned um
 12514 ;;  exp             1    4[BANK0 ] unsigned char 
 12515 ;;  sign            1    5[BANK0 ] unsigned char 
 12516 ;; Auto vars:     Size  Location     Type
 12517 ;;		None
 12518 ;; Return value:  Size  Location     Type
 12519 ;;                  3    1[BANK0 ] float 
 12520 ;; Registers used:
 12521 ;;		wreg, status,2, status,0
 12522 ;; Tracked objects:
 12523 ;;		On entry : 0/0
 12524 ;;		On exit  : 0/0
 12525 ;;		Unchanged: 0/0
 12526 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12527 ;;      Params:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12528 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12529 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12530 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12531 ;;Total ram usage:        8 bytes
 12532 ;; Hardware stack levels used:    1
 12533 ;; Hardware stack levels required when called:    4
 12534 ;; This function calls:
 12535 ;;		Nothing
 12536 ;; This function is called by:
 12537 ;;		___altoft
 12538 ;;		___awtoft
 12539 ;;		___ftadd
 12540 ;;		___ftdiv
 12541 ;;		___ftmul
 12542 ;;		___lwtoft
 12543 ;; This function uses a non-reentrant model
 12544 ;;
 12545                           
 12546                           
 12547                           ;psect for function ___ftpack
 12548  0AFB                     ___ftpack:	
 12549                           
 12550                           ;incstack = 0
 12551                           ; Regs used in ___ftpack: [wreg+status,2+status,0]
 12552  0AFB  0020               	movlb	0	; select bank0
 12553  0AFC  0824               	movf	___ftpack@exp,w
 12554  0AFD  1903               	btfsc	3,2
 12555  0AFE  2B04               	goto	l5446
 12556  0AFF  0823               	movf	___ftpack@arg+2,w
 12557  0B00  0422               	iorwf	___ftpack@arg+1,w
 12558  0B01  0421               	iorwf	___ftpack@arg,w
 12559  0B02  1D03               	skipz
 12560  0B03  2B15               	goto	l5452
 12561  0B04                     l5446:	
 12562  0B04  3000               	movlw	0
 12563  0B05  00A1               	movwf	?___ftpack
 12564  0B06  3000               	movlw	0
 12565  0B07  00A2               	movwf	?___ftpack+1
 12566  0B08  3000               	movlw	0
 12567  0B09  00A3               	movwf	?___ftpack+2
 12568  0B0A  0008               	return
 12569  0B0B                     l5450:	
 12570  0B0B  3001               	movlw	1
 12571  0B0C  00A6               	movwf	??___ftpack
 12572  0B0D  0826               	movf	??___ftpack,w
 12573  0B0E  07A4               	addwf	___ftpack@exp,f
 12574  0B0F  3001               	movlw	1
 12575  0B10                     u4875:	
 12576  0B10  36A3               	lsrf	___ftpack@arg+2,f
 12577  0B11  0CA2               	rrf	___ftpack@arg+1,f
 12578  0B12  0CA1               	rrf	___ftpack@arg,f
 12579  0B13  0B89               	decfsz	9,f
 12580  0B14  2B10               	goto	u4875
 12581  0B15                     l5452:	
 12582  0B15  30FE               	movlw	254
 12583  0B16  0523               	andwf	___ftpack@arg+2,w
 12584  0B17  1903               	btfsc	3,2
 12585  0B18  2B2E               	goto	l1501
 12586  0B19  2B0B               	goto	l5450
 12587  0B1A                     l5454:	
 12588  0B1A  3001               	movlw	1
 12589  0B1B  00A6               	movwf	??___ftpack
 12590  0B1C  0826               	movf	??___ftpack,w
 12591  0B1D  07A4               	addwf	___ftpack@exp,f
 12592  0B1E  3001               	movlw	1
 12593  0B1F  07A1               	addwf	___ftpack@arg,f
 12594  0B20  3000               	movlw	0
 12595  0B21  1803               	skipnc
 12596  0B22  3001               	movlw	1
 12597  0B23  07A2               	addwf	___ftpack@arg+1,f
 12598  0B24  3000               	movlw	0
 12599  0B25  1803               	skipnc
 12600  0B26  3001               	movlw	1
 12601  0B27  07A3               	addwf	___ftpack@arg+2,f
 12602  0B28  3001               	movlw	1
 12603  0B29                     u4895:	
 12604  0B29  36A3               	lsrf	___ftpack@arg+2,f
 12605  0B2A  0CA2               	rrf	___ftpack@arg+1,f
 12606  0B2B  0CA1               	rrf	___ftpack@arg,f
 12607  0B2C  0B89               	decfsz	9,f
 12608  0B2D  2B29               	goto	u4895
 12609  0B2E                     l1501:	
 12610  0B2E  30FF               	movlw	255
 12611  0B2F  0523               	andwf	___ftpack@arg+2,w
 12612  0B30  1903               	btfsc	3,2
 12613  0B31  2B3B               	goto	l5462
 12614  0B32  2B1A               	goto	l5454
 12615  0B33                     l5460:	
 12616  0B33  3001               	movlw	1
 12617  0B34  02A4               	subwf	___ftpack@exp,f
 12618  0B35  3001               	movlw	1
 12619  0B36                     u4915:	
 12620  0B36  35A1               	lslf	___ftpack@arg,f
 12621  0B37  0DA2               	rlf	___ftpack@arg+1,f
 12622  0B38  0DA3               	rlf	___ftpack@arg+2,f
 12623  0B39  0B89               	decfsz	9,f
 12624  0B3A  2B36               	goto	u4915
 12625  0B3B                     l5462:	
 12626  0B3B  1BA2               	btfsc	___ftpack@arg+1,7
 12627  0B3C  2B41               	goto	l1508
 12628  0B3D  3002               	movlw	2
 12629  0B3E  0224               	subwf	___ftpack@exp,w
 12630  0B3F  1803               	skipnc
 12631  0B40  2B33               	goto	l5460
 12632  0B41                     l1508:	
 12633  0B41  1824               	btfsc	___ftpack@exp,0
 12634  0B42  2B49               	goto	l1509
 12635  0B43  30FF               	movlw	255
 12636  0B44  05A1               	andwf	___ftpack@arg,f
 12637  0B45  307F               	movlw	127
 12638  0B46  05A2               	andwf	___ftpack@arg+1,f
 12639  0B47  30FF               	movlw	255
 12640  0B48  05A3               	andwf	___ftpack@arg+2,f
 12641  0B49                     l1509:	
 12642  0B49  1003               	clrc
 12643  0B4A  0CA4               	rrf	___ftpack@exp,f
 12644  0B4B  0824               	movf	___ftpack@exp,w
 12645  0B4C  00A6               	movwf	??___ftpack
 12646  0B4D  01A7               	clrf	??___ftpack+1
 12647  0B4E  01A8               	clrf	??___ftpack+2
 12648  0B4F  3010               	movlw	16
 12649  0B50                     u4955:	
 12650  0B50  35A6               	lslf	??___ftpack,f
 12651  0B51  0DA7               	rlf	??___ftpack+1,f
 12652  0B52  0DA8               	rlf	??___ftpack+2,f
 12653  0B53  0B89               	decfsz	9,f
 12654  0B54  2B50               	goto	u4955
 12655  0B55  0826               	movf	??___ftpack,w
 12656  0B56  04A1               	iorwf	___ftpack@arg,f
 12657  0B57  0827               	movf	??___ftpack+1,w
 12658  0B58  04A2               	iorwf	___ftpack@arg+1,f
 12659  0B59  0828               	movf	??___ftpack+2,w
 12660  0B5A  04A3               	iorwf	___ftpack@arg+2,f
 12661  0B5B  0825               	movf	___ftpack@sign,w
 12662  0B5C  1903               	btfsc	3,2
 12663  0B5D  0008               	return
 12664  0B5E  17A3               	bsf	___ftpack@arg+2,7
 12665  0B5F  0008               	return
 12666  0B60                     __end_of___ftpack:	
 12667                           
 12668                           	psect	text65
 12669  0778                     __ptext65:	
 12670 ;; *************** function ___aldiv *****************
 12671 ;; Defined at:
 12672 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\aldiv.c"
 12673 ;; Parameters:    Size  Location     Type
 12674 ;;  divisor         4    1[BANK0 ] long 
 12675 ;;  dividend        4    5[BANK0 ] long 
 12676 ;; Auto vars:     Size  Location     Type
 12677 ;;  quotient        4   12[BANK0 ] long 
 12678 ;;  sign            1   11[BANK0 ] unsigned char 
 12679 ;;  counter         1   10[BANK0 ] unsigned char 
 12680 ;; Return value:  Size  Location     Type
 12681 ;;                  4    1[BANK0 ] long 
 12682 ;; Registers used:
 12683 ;;		wreg, status,2, status,0
 12684 ;; Tracked objects:
 12685 ;;		On entry : 0/0
 12686 ;;		On exit  : 0/0
 12687 ;;		Unchanged: 0/0
 12688 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12689 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12690 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12691 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12692 ;;      Totals:         0      15       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12693 ;;Total ram usage:       15 bytes
 12694 ;; Hardware stack levels used:    1
 12695 ;; Hardware stack levels required when called:    4
 12696 ;; This function calls:
 12697 ;;		Nothing
 12698 ;; This function is called by:
 12699 ;;		_BMP_readTemperature
 12700 ;; This function uses a non-reentrant model
 12701 ;;
 12702                           
 12703                           
 12704                           ;psect for function ___aldiv
 12705  0778                     ___aldiv:	
 12706                           
 12707                           ;incstack = 0
 12708                           ; Regs used in ___aldiv: [wreg+status,2+status,0]
 12709  0778  0020               	movlb	0	; select bank0
 12710  0779  01AB               	clrf	___aldiv@sign
 12711  077A  1FA4               	btfss	___aldiv@divisor+3,7
 12712  077B  2F89               	goto	l1367
 12713  077C  09A1               	comf	___aldiv@divisor,f
 12714  077D  09A2               	comf	___aldiv@divisor+1,f
 12715  077E  09A3               	comf	___aldiv@divisor+2,f
 12716  077F  09A4               	comf	___aldiv@divisor+3,f
 12717  0780  0AA1               	incf	___aldiv@divisor,f
 12718  0781  1903               	skipnz
 12719  0782  0AA2               	incf	___aldiv@divisor+1,f
 12720  0783  1903               	skipnz
 12721  0784  0AA3               	incf	___aldiv@divisor+2,f
 12722  0785  1903               	skipnz
 12723  0786  0AA4               	incf	___aldiv@divisor+3,f
 12724  0787  01AB               	clrf	___aldiv@sign
 12725  0788  0AAB               	incf	___aldiv@sign,f
 12726  0789                     l1367:	
 12727  0789  1FA8               	btfss	___aldiv@dividend+3,7
 12728  078A  2F9A               	goto	l5870
 12729  078B  09A5               	comf	___aldiv@dividend,f
 12730  078C  09A6               	comf	___aldiv@dividend+1,f
 12731  078D  09A7               	comf	___aldiv@dividend+2,f
 12732  078E  09A8               	comf	___aldiv@dividend+3,f
 12733  078F  0AA5               	incf	___aldiv@dividend,f
 12734  0790  1903               	skipnz
 12735  0791  0AA6               	incf	___aldiv@dividend+1,f
 12736  0792  1903               	skipnz
 12737  0793  0AA7               	incf	___aldiv@dividend+2,f
 12738  0794  1903               	skipnz
 12739  0795  0AA8               	incf	___aldiv@dividend+3,f
 12740  0796  3001               	movlw	1
 12741  0797  00A9               	movwf	??___aldiv
 12742  0798  0829               	movf	??___aldiv,w
 12743  0799  06AB               	xorwf	___aldiv@sign,f
 12744  079A                     l5870:	
 12745  079A  3000               	movlw	0
 12746  079B  00AF               	movwf	___aldiv@quotient+3
 12747  079C  3000               	movlw	0
 12748  079D  00AE               	movwf	___aldiv@quotient+2
 12749  079E  3000               	movlw	0
 12750  079F  00AD               	movwf	___aldiv@quotient+1
 12751  07A0  3000               	movlw	0
 12752  07A1  00AC               	movwf	___aldiv@quotient
 12753  07A2  0824               	movf	___aldiv@divisor+3,w
 12754  07A3  0423               	iorwf	___aldiv@divisor+2,w
 12755  07A4  0422               	iorwf	___aldiv@divisor+1,w
 12756  07A5  0421               	iorwf	___aldiv@divisor,w
 12757  07A6  1903               	skipnz
 12758  07A7  2FE3               	goto	l5892
 12759  07A8  01AA               	clrf	___aldiv@counter
 12760  07A9  0AAA               	incf	___aldiv@counter,f
 12761  07AA                     l5878:	
 12762  07AA  1BA4               	btfsc	___aldiv@divisor+3,7
 12763  07AB  2FB8               	goto	l5880
 12764  07AC  3001               	movlw	1
 12765  07AD                     u5335:	
 12766  07AD  35A1               	lslf	___aldiv@divisor,f
 12767  07AE  0DA2               	rlf	___aldiv@divisor+1,f
 12768  07AF  0DA3               	rlf	___aldiv@divisor+2,f
 12769  07B0  0DA4               	rlf	___aldiv@divisor+3,f
 12770  07B1  0B89               	decfsz	9,f
 12771  07B2  2FAD               	goto	u5335
 12772  07B3  3001               	movlw	1
 12773  07B4  00A9               	movwf	??___aldiv
 12774  07B5  0829               	movf	??___aldiv,w
 12775  07B6  07AA               	addwf	___aldiv@counter,f
 12776  07B7  2FAA               	goto	l5878
 12777  07B8                     l5880:	
 12778  07B8  3001               	movlw	1
 12779  07B9                     u5355:	
 12780  07B9  35AC               	lslf	___aldiv@quotient,f
 12781  07BA  0DAD               	rlf	___aldiv@quotient+1,f
 12782  07BB  0DAE               	rlf	___aldiv@quotient+2,f
 12783  07BC  0DAF               	rlf	___aldiv@quotient+3,f
 12784  07BD  0B89               	decfsz	9,f
 12785  07BE  2FB9               	goto	u5355
 12786  07BF  0824               	movf	___aldiv@divisor+3,w
 12787  07C0  0228               	subwf	___aldiv@dividend+3,w
 12788  07C1  1D03               	skipz
 12789  07C2  2FCD               	goto	u5365
 12790  07C3  0823               	movf	___aldiv@divisor+2,w
 12791  07C4  0227               	subwf	___aldiv@dividend+2,w
 12792  07C5  1D03               	skipz
 12793  07C6  2FCD               	goto	u5365
 12794  07C7  0822               	movf	___aldiv@divisor+1,w
 12795  07C8  0226               	subwf	___aldiv@dividend+1,w
 12796  07C9  1D03               	skipz
 12797  07CA  2FCD               	goto	u5365
 12798  07CB  0821               	movf	___aldiv@divisor,w
 12799  07CC  0225               	subwf	___aldiv@dividend,w
 12800  07CD                     u5365:	
 12801  07CD  1C03               	skipc
 12802  07CE  2FD8               	goto	l5888
 12803  07CF  0821               	movf	___aldiv@divisor,w
 12804  07D0  02A5               	subwf	___aldiv@dividend,f
 12805  07D1  0822               	movf	___aldiv@divisor+1,w
 12806  07D2  3BA6               	subwfb	___aldiv@dividend+1,f
 12807  07D3  0823               	movf	___aldiv@divisor+2,w
 12808  07D4  3BA7               	subwfb	___aldiv@dividend+2,f
 12809  07D5  0824               	movf	___aldiv@divisor+3,w
 12810  07D6  3BA8               	subwfb	___aldiv@dividend+3,f
 12811  07D7  142C               	bsf	___aldiv@quotient,0
 12812  07D8                     l5888:	
 12813  07D8  3001               	movlw	1
 12814  07D9                     u5375:	
 12815  07D9  36A4               	lsrf	___aldiv@divisor+3,f
 12816  07DA  0CA3               	rrf	___aldiv@divisor+2,f
 12817  07DB  0CA2               	rrf	___aldiv@divisor+1,f
 12818  07DC  0CA1               	rrf	___aldiv@divisor,f
 12819  07DD  0B89               	decfsz	9,f
 12820  07DE  2FD9               	goto	u5375
 12821  07DF  3001               	movlw	1
 12822  07E0  02AA               	subwf	___aldiv@counter,f
 12823  07E1  1D03               	btfss	3,2
 12824  07E2  2FB8               	goto	l5880
 12825  07E3                     l5892:	
 12826  07E3  082B               	movf	___aldiv@sign,w
 12827  07E4  1903               	btfsc	3,2
 12828  07E5  2FF1               	goto	l5896
 12829  07E6  09AC               	comf	___aldiv@quotient,f
 12830  07E7  09AD               	comf	___aldiv@quotient+1,f
 12831  07E8  09AE               	comf	___aldiv@quotient+2,f
 12832  07E9  09AF               	comf	___aldiv@quotient+3,f
 12833  07EA  0AAC               	incf	___aldiv@quotient,f
 12834  07EB  1903               	skipnz
 12835  07EC  0AAD               	incf	___aldiv@quotient+1,f
 12836  07ED  1903               	skipnz
 12837  07EE  0AAE               	incf	___aldiv@quotient+2,f
 12838  07EF  1903               	skipnz
 12839  07F0  0AAF               	incf	___aldiv@quotient+3,f
 12840  07F1                     l5896:	
 12841  07F1  082F               	movf	___aldiv@quotient+3,w
 12842  07F2  00A4               	movwf	?___aldiv+3
 12843  07F3  082E               	movf	___aldiv@quotient+2,w
 12844  07F4  00A3               	movwf	?___aldiv+2
 12845  07F5  082D               	movf	___aldiv@quotient+1,w
 12846  07F6  00A2               	movwf	?___aldiv+1
 12847  07F7  082C               	movf	___aldiv@quotient,w
 12848  07F8  00A1               	movwf	?___aldiv
 12849  07F9  0008               	return
 12850  07FA                     __end_of___aldiv:	
 12851                           
 12852                           	psect	text66
 12853  0904                     __ptext66:	
 12854 ;; *************** function _HMC5883L_ReadBits *****************
 12855 ;; Defined at:
 12856 ;;		line 418 in file "hmc5883l.c"
 12857 ;; Parameters:    Size  Location     Type
 12858 ;;  slaveAddr       1    wreg     unsigned char 
 12859 ;;  regAddr         1   35[BANK0 ] unsigned char 
 12860 ;;  bitStart        1   36[BANK0 ] unsigned char 
 12861 ;;  length          1   37[BANK0 ] unsigned char 
 12862 ;;  data            1   38[BANK0 ] PTR unsigned char 
 12863 ;;		 -> BMP_readTemperature@tmp(1), HMC5883L_GetHeading@tmp(1), HMC5883L_GetMode@tmp(1), HMC5883L_GetGain@tmp(1), 
 12864 ;;		 -> HMC5883L_GetMeasurementBias@tmp(1), HMC5883L_GetDataRate@tmp(1), HMC5883L_GetSampleAveraging@tmp(1), 
 12865 ;; Auto vars:     Size  Location     Type
 12866 ;;  slaveAddr       1   42[BANK0 ] unsigned char 
 12867 ;;  mask            1   43[BANK0 ] unsigned char 
 12868 ;;  tmp             1   44[BANK0 ] unsigned char 
 12869 ;; Return value:  Size  Location     Type
 12870 ;;                  1    wreg      unsigned char 
 12871 ;; Registers used:
 12872 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12873 ;; Tracked objects:
 12874 ;;		On entry : 0/0
 12875 ;;		On exit  : 0/0
 12876 ;;		Unchanged: 0/0
 12877 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12878 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12879 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12880 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12881 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12882 ;;Total ram usage:       10 bytes
 12883 ;; Hardware stack levels used:    1
 12884 ;; Hardware stack levels required when called:    8
 12885 ;; This function calls:
 12886 ;;		_HMC5883L_I2C_BufferRead
 12887 ;; This function is called by:
 12888 ;;		_BMP_readTemperature
 12889 ;;		_HMC5883L_GetSampleAveraging
 12890 ;;		_HMC5883L_GetDataRate
 12891 ;;		_HMC5883L_GetMeasurementBias
 12892 ;;		_HMC5883L_GetGain
 12893 ;;		_HMC5883L_GetMode
 12894 ;;		_HMC5883L_GetHeading
 12895 ;; This function uses a non-reentrant model
 12896 ;;
 12897                           
 12898                           
 12899                           ;psect for function _HMC5883L_ReadBits
 12900  0904                     _HMC5883L_ReadBits:	
 12901                           
 12902                           ;incstack = 0
 12903                           ; Regs used in _HMC5883L_ReadBits: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 12904                           ;HMC5883L_ReadBits@slaveAddr stored from wreg
 12905  0904  0020               	movlb	0	; select bank0
 12906  0905  00CA               	movwf	HMC5883L_ReadBits@slaveAddr
 12907                           
 12908                           ;hmc5883l.c: 420: uint8_t tmp;
 12909                           ;hmc5883l.c: 422: if(HMC5883L_I2C_BufferRead(slaveAddr, &tmp, regAddr, 1))
 12910  0906  304C               	movlw	low HMC5883L_ReadBits@tmp
 12911  0907  00BC               	movwf	HMC5883L_I2C_BufferRead@pBuffer
 12912  0908  3000               	movlw	high HMC5883L_ReadBits@tmp
 12913  0909  00BD               	movwf	HMC5883L_I2C_BufferRead@pBuffer+1
 12914  090A  0843               	movf	HMC5883L_ReadBits@regAddr,w
 12915  090B  00C7               	movwf	??_HMC5883L_ReadBits
 12916  090C  0847               	movf	??_HMC5883L_ReadBits,w
 12917  090D  00BE               	movwf	HMC5883L_I2C_BufferRead@ReadAddr
 12918  090E  3001               	movlw	1
 12919  090F  00BF               	movwf	HMC5883L_I2C_BufferRead@NumByteToRead
 12920  0910  3000               	movlw	0
 12921  0911  00C0               	movwf	HMC5883L_I2C_BufferRead@NumByteToRead+1
 12922  0912  084A               	movf	HMC5883L_ReadBits@slaveAddr,w
 12923  0913  3194  246F  3189   	fcall	_HMC5883L_I2C_BufferRead
 12924  0916  3A00               	xorlw	0
 12925  0917  1903               	skipnz
 12926  0918  2948               	goto	l5812
 12927                           
 12928                           ;hmc5883l.c: 423: {
 12929                           ;hmc5883l.c: 424: uint8_t mask = ((1 << length) - 1) << (bitStart - length + 1);
 12930  0919  3001               	movlw	1
 12931  091A  0020               	movlb	0	; select bank0
 12932  091B  00C7               	movwf	??_HMC5883L_ReadBits
 12933  091C  0A45               	incf	HMC5883L_ReadBits@length,w
 12934  091D  291F               	goto	u5214
 12935  091E                     u5215:	
 12936  091E  35C7               	lslf	??_HMC5883L_ReadBits,f
 12937  091F                     u5214:	
 12938  091F  0B89               	decfsz	9,f
 12939  0920  291E               	goto	u5215
 12940  0921  0847               	movf	??_HMC5883L_ReadBits,w
 12941  0922  3EFF               	addlw	255
 12942  0923  00C8               	movwf	??_HMC5883L_ReadBits+1
 12943  0924  0345               	decf	HMC5883L_ReadBits@length,w
 12944  0925  3AFF               	xorlw	255
 12945  0926  0744               	addwf	HMC5883L_ReadBits@bitStart,w
 12946  0927  3E01               	addlw	1
 12947  0928  0A89               	incf	9,f
 12948  0929  292B               	goto	u5224
 12949  092A                     u5225:	
 12950  092A  35C8               	lslf	??_HMC5883L_ReadBits+1,f
 12951  092B                     u5224:	
 12952  092B  0B89               	decfsz	9,f
 12953  092C  292A               	goto	u5225
 12954  092D  0848               	movf	??_HMC5883L_ReadBits+1,w
 12955  092E  00C9               	movwf	??_HMC5883L_ReadBits+2
 12956  092F  0849               	movf	??_HMC5883L_ReadBits+2,w
 12957  0930  00CB               	movwf	HMC5883L_ReadBits@mask
 12958                           
 12959                           ;hmc5883l.c: 425: tmp &= mask;
 12960  0931  084B               	movf	HMC5883L_ReadBits@mask,w
 12961  0932  00C7               	movwf	??_HMC5883L_ReadBits
 12962  0933  0847               	movf	??_HMC5883L_ReadBits,w
 12963  0934  05CC               	andwf	HMC5883L_ReadBits@tmp,f
 12964                           
 12965                           ;hmc5883l.c: 426: tmp >>= (bitStart - length + 1);
 12966  0935  0345               	decf	HMC5883L_ReadBits@length,w
 12967  0936  3AFF               	xorlw	255
 12968  0937  0744               	addwf	HMC5883L_ReadBits@bitStart,w
 12969  0938  3E01               	addlw	1
 12970  0939  0A89               	incf	9,f
 12971  093A  293D               	goto	u5230
 12972  093B                     u5235:	
 12973  093B  1003               	clrc
 12974  093C  0CCC               	rrf	HMC5883L_ReadBits@tmp,f
 12975  093D                     u5230:	
 12976  093D  3EFF               	addlw	-1
 12977  093E  1D03               	skipz
 12978  093F  293B               	goto	u5235
 12979                           
 12980                           ;hmc5883l.c: 427: *data = tmp;
 12981  0940  084C               	movf	HMC5883L_ReadBits@tmp,w
 12982  0941  00C7               	movwf	??_HMC5883L_ReadBits
 12983  0942  0846               	movf	HMC5883L_ReadBits@data,w
 12984  0943  0086               	movwf	6
 12985  0944  0187               	clrf	7
 12986  0945  0847               	movf	??_HMC5883L_ReadBits,w
 12987  0946  0081               	movwf	1
 12988                           
 12989                           ;hmc5883l.c: 428: }
 12990  0947  0008               	return
 12991  0948                     l5812:	
 12992                           
 12993                           ;hmc5883l.c: 429: else return 0;
 12994  0948  3000               	movlw	0
 12995  0949  0008               	return
 12996  094A                     __end_of_HMC5883L_ReadBits:	
 12997                           
 12998                           	psect	text67
 12999  146F                     __ptext67:	
 13000 ;; *************** function _HMC5883L_I2C_BufferRead *****************
 13001 ;; Defined at:
 13002 ;;		line 471 in file "hmc5883l.c"
 13003 ;; Parameters:    Size  Location     Type
 13004 ;;  slaveAddr       1    wreg     unsigned char 
 13005 ;;  pBuffer         2   28[BANK0 ] PTR unsigned char 
 13006 ;;		 -> HMC5883L_ReadBit@tmp(1), HMC5883L_ReadBits@tmp(1), HMC5883L_WriteBit@tmp(1), HMC5883L_WriteBits@tmp(1), 
 13007 ;;		 -> heading(8), HMC5883L_TestConnection@tmp(3), MPU6050_ReadBit@tmp(1), MPU6050_ReadBits@tmp(1), 
 13008 ;;		 -> MPU6050_WriteBit@tmp(1), MPU6050_WriteBits@tmp(1), MPU6050_GetRawAccel@tempBuffer(6), MPU6050_GetRawAccelGyro@tm
      +pBuffer(14), 
 13009 ;;  ReadAddr        1   30[BANK0 ] unsigned char 
 13010 ;;  NumByteToRea    2   31[BANK0 ] unsigned short 
 13011 ;; Auto vars:     Size  Location     Type
 13012 ;;  slaveAddr       1   34[BANK0 ] unsigned char 
 13013 ;; Return value:  Size  Location     Type
 13014 ;;                  1    wreg      unsigned char 
 13015 ;; Registers used:
 13016 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13017 ;; Tracked objects:
 13018 ;;		On entry : 0/0
 13019 ;;		On exit  : 0/0
 13020 ;;		Unchanged: 0/0
 13021 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13022 ;;      Params:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13023 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13024 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13025 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13026 ;;Total ram usage:        7 bytes
 13027 ;; Hardware stack levels used:    1
 13028 ;; Hardware stack levels required when called:    7
 13029 ;; This function calls:
 13030 ;;		_I2C_BufferRead
 13031 ;; This function is called by:
 13032 ;;		_HMC5883L_ReadBits
 13033 ;;		_MPU6050_I2C_BufferRead
 13034 ;;		_HMC5883L_TestConnection
 13035 ;;		_HMC5883L_GetHeading
 13036 ;;		_HMC5883L_WriteBits
 13037 ;;		_HMC5883L_WriteBit
 13038 ;;		_HMC5883L_ReadBit
 13039 ;; This function uses a non-reentrant model
 13040 ;;
 13041                           
 13042                           
 13043                           ;psect for function _HMC5883L_I2C_BufferRead
 13044  146F                     _HMC5883L_I2C_BufferRead:	
 13045                           
 13046                           ;incstack = 0
 13047                           ; Regs used in _HMC5883L_I2C_BufferRead: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+csta
      +                          ck]
 13048                           ;HMC5883L_I2C_BufferRead@slaveAddr stored from wreg
 13049  146F  0020               	movlb	0	; select bank0
 13050  1470  00C2               	movwf	HMC5883L_I2C_BufferRead@slaveAddr
 13051                           
 13052                           ;hmc5883l.c: 473: return(I2C_BufferRead(slaveAddr,pBuffer,ReadAddr,NumByteToRead));
 13053  1471  083D               	movf	HMC5883L_I2C_BufferRead@pBuffer+1,w
 13054  1472  00B2               	movwf	I2C_BufferRead@pBuffer+1
 13055  1473  083C               	movf	HMC5883L_I2C_BufferRead@pBuffer,w
 13056  1474  00B1               	movwf	I2C_BufferRead@pBuffer
 13057  1475  083E               	movf	HMC5883L_I2C_BufferRead@ReadAddr,w
 13058  1476  00C1               	movwf	??_HMC5883L_I2C_BufferRead
 13059  1477  0841               	movf	??_HMC5883L_I2C_BufferRead,w
 13060  1478  00B3               	movwf	I2C_BufferRead@ReadAddr
 13061  1479  0840               	movf	HMC5883L_I2C_BufferRead@NumByteToRead+1,w
 13062  147A  00B5               	movwf	I2C_BufferRead@NumByteToRead+1
 13063  147B  083F               	movf	HMC5883L_I2C_BufferRead@NumByteToRead,w
 13064  147C  00B4               	movwf	I2C_BufferRead@NumByteToRead
 13065  147D  0842               	movf	HMC5883L_I2C_BufferRead@slaveAddr,w
 13066  147E  318A  223F         	fcall	_I2C_BufferRead
 13067  1480  0008               	return
 13068  1481                     __end_of_HMC5883L_I2C_BufferRead:	
 13069                           
 13070                           	psect	text68
 13071  1367                     __ptext68:	
 13072 ;; *************** function _Diag_getTempSensorHealth *****************
 13073 ;; Defined at:
 13074 ;;		line 25 in file "diagnostics.c"
 13075 ;; Parameters:    Size  Location     Type
 13076 ;;		None
 13077 ;; Auto vars:     Size  Location     Type
 13078 ;;		None
 13079 ;; Return value:  Size  Location     Type
 13080 ;;                  1    wreg      unsigned char 
 13081 ;; Registers used:
 13082 ;;		wreg
 13083 ;; Tracked objects:
 13084 ;;		On entry : 0/0
 13085 ;;		On exit  : 0/0
 13086 ;;		Unchanged: 0/0
 13087 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13088 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13089 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13090 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13091 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13092 ;;Total ram usage:        0 bytes
 13093 ;; Hardware stack levels used:    1
 13094 ;; Hardware stack levels required when called:    4
 13095 ;; This function calls:
 13096 ;;		Nothing
 13097 ;; This function is called by:
 13098 ;;		_BMP_readTemperature
 13099 ;; This function uses a non-reentrant model
 13100 ;;
 13101                           
 13102                           
 13103                           ;psect for function _Diag_getTempSensorHealth
 13104  1367                     _Diag_getTempSensorHealth:	
 13105                           
 13106                           ;diagnostics.c: 27: return (sensorHealth.tempSensorHealth);
 13107                           
 13108                           ;incstack = 0
 13109                           ; Regs used in _Diag_getTempSensorHealth: [wreg]
 13110  1367  0021               	movlb	1	; select bank1
 13111  1368  0863               	movf	_sensorHealth^(0+128),w
 13112  1369  0008               	return
 13113  136A                     __end_of_Diag_getTempSensorHealth:	
 13114                           
 13115                           	psect	text69
 13116  0BD1                     __ptext69:	
 13117 ;; *************** function _BMP_init *****************
 13118 ;; Defined at:
 13119 ;;		line 39 in file "bmp280.c"
 13120 ;; Parameters:    Size  Location     Type
 13121 ;;		None
 13122 ;; Auto vars:     Size  Location     Type
 13123 ;;  t               1   31[BANK0 ] unsigned char 
 13124 ;; Return value:  Size  Location     Type
 13125 ;;                  1    wreg      void 
 13126 ;; Registers used:
 13127 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13128 ;; Tracked objects:
 13129 ;;		On entry : 0/0
 13130 ;;		On exit  : 0/0
 13131 ;;		Unchanged: 0/0
 13132 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13133 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13134 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13135 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13136 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13137 ;;Total ram usage:        4 bytes
 13138 ;; Hardware stack levels used:    1
 13139 ;; Hardware stack levels required when called:    7
 13140 ;; This function calls:
 13141 ;;		_Diag_setTempSensorHealth
 13142 ;;		_I2C_BufferRead
 13143 ;;		_I2C_ByteWrite
 13144 ;; This function is called by:
 13145 ;;		_main
 13146 ;;		_BMP_readTemperature
 13147 ;; This function uses a non-reentrant model
 13148 ;;
 13149                           
 13150                           
 13151                           ;psect for function _BMP_init
 13152  0BD1                     _BMP_init:	
 13153                           
 13154                           ;bmp280.c: 41: char t;
 13155                           ;bmp280.c: 42: t=0x40;
 13156                           
 13157                           ;incstack = 0
 13158                           ; Regs used in _BMP_init: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 13159  0BD1  3040               	movlw	64
 13160  0BD2  0020               	movlb	0	; select bank0
 13161  0BD3  00BC               	movwf	??_BMP_init
 13162  0BD4  083C               	movf	??_BMP_init,w
 13163  0BD5  00BF               	movwf	BMP_init@t
 13164                           
 13165                           ;bmp280.c: 43: if(I2C_ByteWrite(0x76, &t, 0xF4)==0)
 13166  0BD6  303F               	movlw	(low (BMP_init@t| 0))& (0+255)
 13167  0BD7  00BC               	movwf	??_BMP_init
 13168  0BD8  083C               	movf	??_BMP_init,w
 13169  0BD9  00AF               	movwf	I2C_ByteWrite@pBuffer
 13170  0BDA  30F4               	movlw	244
 13171  0BDB  00BD               	movwf	??_BMP_init+1
 13172  0BDC  083D               	movf	??_BMP_init+1,w
 13173  0BDD  00B0               	movwf	I2C_ByteWrite@WriteAddr
 13174  0BDE  3076               	movlw	118
 13175  0BDF  3188  2046  318B   	fcall	_I2C_ByteWrite
 13176  0BE2  3A00               	xorlw	0
 13177  0BE3  1D03               	skipz
 13178  0BE4  2BE9               	goto	l5774
 13179                           
 13180                           ;bmp280.c: 44: {
 13181                           ;bmp280.c: 45: Diag_setTempSensorHealth(0);
 13182  0BE5  3000               	movlw	0
 13183  0BE6  3193  23B9         	fcall	_Diag_setTempSensorHealth
 13184                           
 13185                           ;bmp280.c: 46: return;
 13186  0BE8  0008               	return
 13187  0BE9                     l5774:	
 13188                           
 13189                           ;bmp280.c: 47: }
 13190                           ;bmp280.c: 48: t=0xE0;
 13191  0BE9  30E0               	movlw	224
 13192  0BEA  0020               	movlb	0	; select bank0
 13193  0BEB  00BC               	movwf	??_BMP_init
 13194  0BEC  083C               	movf	??_BMP_init,w
 13195  0BED  00BF               	movwf	BMP_init@t
 13196                           
 13197                           ;bmp280.c: 50: if(I2C_BufferRead(0x76, b1, 0x88, 24)==0)
 13198  0BEE  30A4               	movlw	low _b1
 13199  0BEF  00B1               	movwf	I2C_BufferRead@pBuffer
 13200  0BF0  3001               	movlw	high _b1
 13201  0BF1  00B2               	movwf	I2C_BufferRead@pBuffer+1
 13202  0BF2  3088               	movlw	136
 13203  0BF3  00BC               	movwf	??_BMP_init
 13204  0BF4  083C               	movf	??_BMP_init,w
 13205  0BF5  00B3               	movwf	I2C_BufferRead@ReadAddr
 13206  0BF6  3018               	movlw	24
 13207  0BF7  00B4               	movwf	I2C_BufferRead@NumByteToRead
 13208  0BF8  3000               	movlw	0
 13209  0BF9  00B5               	movwf	I2C_BufferRead@NumByteToRead+1
 13210  0BFA  3076               	movlw	118
 13211  0BFB  318A  223F  318B   	fcall	_I2C_BufferRead
 13212  0BFE  3A00               	xorlw	0
 13213  0BFF  1D03               	skipz
 13214  0C00  2C05               	goto	l5782
 13215                           
 13216                           ;bmp280.c: 51: {
 13217                           ;bmp280.c: 52: Diag_setTempSensorHealth(0);
 13218  0C01  3000               	movlw	0
 13219  0C02  3193  23B9         	fcall	_Diag_setTempSensorHealth
 13220                           
 13221                           ;bmp280.c: 53: return;
 13222  0C04  0008               	return
 13223  0C05                     l5782:	
 13224                           
 13225                           ;bmp280.c: 54: }
 13226                           ;bmp280.c: 55: dig_T1 = ((u16)b1[0] & 0xFF) + (((u16)b1[1] & 0xFF) * 256);
 13227  0C05  0023               	movlb	3	; select bank3
 13228  0C06  0825               	movf	(_b1^(0+384)+1),w
 13229  0C07  0020               	movlb	0	; select bank0
 13230  0C08  00BC               	movwf	??_BMP_init
 13231  0C09  01BD               	clrf	??_BMP_init+1
 13232  0C0A  083C               	movf	??_BMP_init,w
 13233  0C0B  00BD               	movwf	??_BMP_init+1
 13234  0C0C  01BC               	clrf	??_BMP_init
 13235  0C0D  0023               	movlb	3	; select bank3
 13236  0C0E  0824               	movf	_b1^(0+384),w
 13237  0C0F  0020               	movlb	0	; select bank0
 13238  0C10  073C               	addwf	??_BMP_init,w
 13239  0C11  0021               	movlb	1	; select bank1
 13240  0C12  00D6               	movwf	_dig_T1^(0+128)
 13241  0C13  0020               	movlb	0	; select bank0
 13242  0C14  083D               	movf	??_BMP_init+1,w
 13243  0C15  1803               	skipnc
 13244  0C16  0A3D               	incf	??_BMP_init+1,w
 13245  0C17  0021               	movlb	1	; select bank1
 13246  0C18  00D7               	movwf	(_dig_T1^(0+128)+1)
 13247                           
 13248                           ;bmp280.c: 56: dig_T2 = (int)b1[2] + ((int)b1[3] * 256);
 13249  0C19  0023               	movlb	3	; select bank3
 13250  0C1A  0827               	movf	(_b1^(0+384)+3),w
 13251  0C1B  0020               	movlb	0	; select bank0
 13252  0C1C  00BC               	movwf	??_BMP_init
 13253  0C1D  01BD               	clrf	??_BMP_init+1
 13254  0C1E  083C               	movf	??_BMP_init,w
 13255  0C1F  00BD               	movwf	??_BMP_init+1
 13256  0C20  01BC               	clrf	??_BMP_init
 13257  0C21  0023               	movlb	3	; select bank3
 13258  0C22  0826               	movf	(_b1^(0+384)+2),w
 13259  0C23  0020               	movlb	0	; select bank0
 13260  0C24  073C               	addwf	??_BMP_init,w
 13261  0C25  0022               	movlb	2	; select bank2
 13262  0C26  00D6               	movwf	_dig_T2^(0+256)
 13263  0C27  0020               	movlb	0	; select bank0
 13264  0C28  083D               	movf	??_BMP_init+1,w
 13265  0C29  1803               	skipnc
 13266  0C2A  0A3D               	incf	??_BMP_init+1,w
 13267  0C2B  0022               	movlb	2	; select bank2
 13268  0C2C  00D7               	movwf	(_dig_T2^(0+256)+1)
 13269                           
 13270                           ;bmp280.c: 57: dig_T3 = (int)b1[4] + ((int)b1[5] * 256);
 13271  0C2D  0023               	movlb	3	; select bank3
 13272  0C2E  0829               	movf	(_b1^(0+384)+5),w
 13273  0C2F  0020               	movlb	0	; select bank0
 13274  0C30  00BC               	movwf	??_BMP_init
 13275  0C31  01BD               	clrf	??_BMP_init+1
 13276  0C32  083C               	movf	??_BMP_init,w
 13277  0C33  00BD               	movwf	??_BMP_init+1
 13278  0C34  01BC               	clrf	??_BMP_init
 13279  0C35  0023               	movlb	3	; select bank3
 13280  0C36  0828               	movf	(_b1^(0+384)+4),w
 13281  0C37  0020               	movlb	0	; select bank0
 13282  0C38  073C               	addwf	??_BMP_init,w
 13283  0C39  0022               	movlb	2	; select bank2
 13284  0C3A  00D4               	movwf	_dig_T3^(0+256)
 13285  0C3B  0020               	movlb	0	; select bank0
 13286  0C3C  083D               	movf	??_BMP_init+1,w
 13287  0C3D  1803               	skipnc
 13288  0C3E  0A3D               	incf	??_BMP_init+1,w
 13289  0C3F  0022               	movlb	2	; select bank2
 13290  0C40  00D5               	movwf	(_dig_T3^(0+256)+1)
 13291                           
 13292                           ;bmp280.c: 69: Diag_setTempSensorHealth(1);
 13293  0C41  3001               	movlw	1
 13294  0C42  3193  23B9         	fcall	_Diag_setTempSensorHealth
 13295  0C44  0008               	return
 13296  0C45                     __end_of_BMP_init:	
 13297                           
 13298                           	psect	text70
 13299  0846                     __ptext70:	
 13300 ;; *************** function _I2C_ByteWrite *****************
 13301 ;; Defined at:
 13302 ;;		line 3 in file "i2c_wrapper.c"
 13303 ;; Parameters:    Size  Location     Type
 13304 ;;  slaveAddr       1    wreg     unsigned char 
 13305 ;;  pBuffer         1   15[BANK0 ] PTR unsigned char 
 13306 ;;		 -> BMP_readTemperature@tmp(1), BMP_init@t(1), HMC5883L_WriteBit@tmp(1), HMC5883L_WriteBits@tmp(1), 
 13307 ;;		 -> HMC5883L_SetMode@tmp(1), HMC5883L_SetGain@tmp(1), HMC5883L_Initialize@tmp(1), MPU6050_WriteBit@tmp(1), 
 13308 ;;		 -> MPU6050_WriteBits@tmp(1), 
 13309 ;;  WriteAddr       1   16[BANK0 ] unsigned char 
 13310 ;; Auto vars:     Size  Location     Type
 13311 ;;  slaveAddr       1   21[BANK0 ] unsigned char 
 13312 ;;  data            2   22[BANK0 ] unsigned char [2]
 13313 ;;  status          1   24[BANK0 ] enum E3025
 13314 ;; Return value:  Size  Location     Type
 13315 ;;                  1    wreg      unsigned char 
 13316 ;; Registers used:
 13317 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13318 ;; Tracked objects:
 13319 ;;		On entry : 0/0
 13320 ;;		On exit  : 0/0
 13321 ;;		Unchanged: 0/0
 13322 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13323 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13324 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13325 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13326 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13327 ;;Total ram usage:       10 bytes
 13328 ;; Hardware stack levels used:    1
 13329 ;; Hardware stack levels required when called:    6
 13330 ;; This function calls:
 13331 ;;		_I2C2_MasterWrite
 13332 ;;		_Timeout_hasExpired
 13333 ;;		_Timeout_setTimeout
 13334 ;; This function is called by:
 13335 ;;		_BMP_init
 13336 ;;		_BMP_readTemperature
 13337 ;;		_HMC5883L_I2C_ByteWrite
 13338 ;; This function uses a non-reentrant model
 13339 ;;
 13340                           
 13341                           
 13342                           ;psect for function _I2C_ByteWrite
 13343  0846                     _I2C_ByteWrite:	
 13344                           
 13345                           ;incstack = 0
 13346                           ; Regs used in _I2C_ByteWrite: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 13347                           ;I2C_ByteWrite@slaveAddr stored from wreg
 13348  0846  0020               	movlb	0	; select bank0
 13349  0847  00B5               	movwf	I2C_ByteWrite@slaveAddr
 13350                           
 13351                           ;i2c_wrapper.c: 5: u8 data[2];
 13352                           ;i2c_wrapper.c: 6: I2C2_MESSAGE_STATUS status=I2C2_MESSAGE_COMPLETE;
 13353  0848  01B8               	clrf	I2C_ByteWrite@status
 13354                           
 13355                           ;i2c_wrapper.c: 8: data[0]= WriteAddr;
 13356  0849  0830               	movf	I2C_ByteWrite@WriteAddr,w
 13357  084A  00B1               	movwf	??_I2C_ByteWrite
 13358  084B  0831               	movf	??_I2C_ByteWrite,w
 13359  084C  00B6               	movwf	I2C_ByteWrite@data
 13360                           
 13361                           ;i2c_wrapper.c: 9: data[1]= *pBuffer;
 13362  084D  082F               	movf	I2C_ByteWrite@pBuffer,w
 13363  084E  0086               	movwf	6
 13364  084F  0187               	clrf	7
 13365  0850  0801               	movf	1,w
 13366  0851  00B1               	movwf	??_I2C_ByteWrite
 13367  0852  0831               	movf	??_I2C_ByteWrite,w
 13368  0853  00B7               	movwf	I2C_ByteWrite@data+1
 13369                           
 13370                           ;i2c_wrapper.c: 12: I2C2_MasterWrite(data,2,slaveAddr, &status);
 13371  0854  3002               	movlw	2
 13372  0855  00B1               	movwf	??_I2C_ByteWrite
 13373  0856  0831               	movf	??_I2C_ByteWrite,w
 13374  0857  00A8               	movwf	I2C2_MasterWrite@length
 13375  0858  0835               	movf	I2C_ByteWrite@slaveAddr,w
 13376  0859  00B2               	movwf	??_I2C_ByteWrite+1
 13377  085A  01B3               	clrf	??_I2C_ByteWrite+2
 13378  085B  0832               	movf	??_I2C_ByteWrite+1,w
 13379  085C  00A9               	movwf	I2C2_MasterWrite@address
 13380  085D  0833               	movf	??_I2C_ByteWrite+2,w
 13381  085E  00AA               	movwf	I2C2_MasterWrite@address+1
 13382  085F  3038               	movlw	(low (I2C_ByteWrite@status| 0))& (0+255)
 13383  0860  00B4               	movwf	??_I2C_ByteWrite+3
 13384  0861  0834               	movf	??_I2C_ByteWrite+3,w
 13385  0862  00AB               	movwf	I2C2_MasterWrite@pflag
 13386  0863  3036               	movlw	(low (I2C_ByteWrite@data| 0))& (0+255)
 13387  0864  3197  274F  3188   	fcall	_I2C2_MasterWrite
 13388                           
 13389                           ;i2c_wrapper.c: 13: Timeout_setTimeout(200);
 13390  0867  30C8               	movlw	200
 13391  0868  0020               	movlb	0	; select bank0
 13392  0869  00A1               	movwf	Timeout_setTimeout@val
 13393  086A  3000               	movlw	0
 13394  086B  00A2               	movwf	Timeout_setTimeout@val+1
 13395  086C  3195  2516  3188   	fcall	_Timeout_setTimeout
 13396  086F                     l5518:	
 13397                           ;i2c_wrapper.c: 15: while(status == I2C2_MESSAGE_PENDING && Timeout_hasExpired()==0);
 13398                           
 13399  086F  3002               	movlw	2
 13400  0870  0020               	movlb	0	; select bank0
 13401  0871  0638               	xorwf	I2C_ByteWrite@status,w
 13402  0872  1D03               	btfss	3,2
 13403  0873  287A               	goto	l5522
 13404  0874  3189  214A  3188   	fcall	_Timeout_hasExpired
 13405  0877  3A00               	xorlw	0
 13406  0878  1903               	skipnz
 13407  0879  286F               	goto	l5518
 13408  087A                     l5522:	
 13409                           
 13410                           ;i2c_wrapper.c: 17: if (status == I2C2_MESSAGE_COMPLETE)
 13411  087A  0020               	movlb	0	; select bank0
 13412  087B  0838               	movf	I2C_ByteWrite@status,w
 13413  087C  1D03               	btfss	3,2
 13414  087D  2880               	goto	l5530
 13415                           
 13416                           ;i2c_wrapper.c: 18: {
 13417                           ;i2c_wrapper.c: 19: return 1;
 13418  087E  3001               	movlw	1
 13419                           
 13420                           ;i2c_wrapper.c: 20: }
 13421  087F  0008               	return
 13422  0880                     l5530:	
 13423                           
 13424                           ;i2c_wrapper.c: 21: else
 13425                           ;i2c_wrapper.c: 22: {
 13426                           ;i2c_wrapper.c: 23: return 0;
 13427  0880  3000               	movlw	0
 13428  0881  0008               	return
 13429  0882                     __end_of_I2C_ByteWrite:	
 13430                           
 13431                           	psect	text71
 13432  0A3F                     __ptext71:	
 13433 ;; *************** function _I2C_BufferRead *****************
 13434 ;; Defined at:
 13435 ;;		line 30 in file "i2c_wrapper.c"
 13436 ;; Parameters:    Size  Location     Type
 13437 ;;  slaveAddr       1    wreg     unsigned char 
 13438 ;;  pBuffer         2   17[BANK0 ] PTR unsigned char 
 13439 ;;		 -> data(8), b1(24), HMC5883L_ReadBit@tmp(1), HMC5883L_ReadBits@tmp(1), 
 13440 ;;		 -> HMC5883L_WriteBit@tmp(1), HMC5883L_WriteBits@tmp(1), heading(8), HMC5883L_TestConnection@tmp(3), 
 13441 ;;		 -> MPU6050_ReadBit@tmp(1), MPU6050_ReadBits@tmp(1), MPU6050_WriteBit@tmp(1), MPU6050_WriteBits@tmp(1), 
 13442 ;;		 -> MPU6050_GetRawAccel@tempBuffer(6), MPU6050_GetRawAccelGyro@tmpBuffer(14), 
 13443 ;;  ReadAddr        1   19[BANK0 ] unsigned char 
 13444 ;;  NumByteToRea    2   20[BANK0 ] unsigned short 
 13445 ;; Auto vars:     Size  Location     Type
 13446 ;;  slaveAddr       1   26[BANK0 ] unsigned char 
 13447 ;;  status          1   27[BANK0 ] enum E3025
 13448 ;; Return value:  Size  Location     Type
 13449 ;;                  1    wreg      unsigned char 
 13450 ;; Registers used:
 13451 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13452 ;; Tracked objects:
 13453 ;;		On entry : 0/0
 13454 ;;		On exit  : 0/0
 13455 ;;		Unchanged: 0/0
 13456 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13457 ;;      Params:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13458 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13459 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13460 ;;      Totals:         0      11       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13461 ;;Total ram usage:       11 bytes
 13462 ;; Hardware stack levels used:    1
 13463 ;; Hardware stack levels required when called:    6
 13464 ;; This function calls:
 13465 ;;		_I2C2_MasterRead
 13466 ;;		_I2C2_MasterWrite
 13467 ;;		_Timeout_hasExpired
 13468 ;;		_Timeout_setTimeout
 13469 ;; This function is called by:
 13470 ;;		_HMC5883L_I2C_BufferRead
 13471 ;;		_BMP_init
 13472 ;;		_BMP_readTemperature
 13473 ;; This function uses a non-reentrant model
 13474 ;;
 13475                           
 13476                           
 13477                           ;psect for function _I2C_BufferRead
 13478  0A3F                     _I2C_BufferRead:	
 13479                           
 13480                           ;incstack = 0
 13481                           ; Regs used in _I2C_BufferRead: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 13482                           ;I2C_BufferRead@slaveAddr stored from wreg
 13483  0A3F  0020               	movlb	0	; select bank0
 13484  0A40  00BA               	movwf	I2C_BufferRead@slaveAddr
 13485                           
 13486                           ;i2c_wrapper.c: 32: I2C2_MESSAGE_STATUS status=I2C2_MESSAGE_COMPLETE;
 13487  0A41  01BB               	clrf	I2C_BufferRead@status
 13488                           
 13489                           ;i2c_wrapper.c: 34: I2C2_MasterWrite(&ReadAddr, 1,slaveAddr, &status);
 13490  0A42  01A8               	clrf	I2C2_MasterWrite@length
 13491  0A43  0AA8               	incf	I2C2_MasterWrite@length,f
 13492  0A44  083A               	movf	I2C_BufferRead@slaveAddr,w
 13493  0A45  00B6               	movwf	??_I2C_BufferRead
 13494  0A46  01B7               	clrf	??_I2C_BufferRead+1
 13495  0A47  0836               	movf	??_I2C_BufferRead,w
 13496  0A48  00A9               	movwf	I2C2_MasterWrite@address
 13497  0A49  0837               	movf	??_I2C_BufferRead+1,w
 13498  0A4A  00AA               	movwf	I2C2_MasterWrite@address+1
 13499  0A4B  303B               	movlw	(low (I2C_BufferRead@status| 0))& (0+255)
 13500  0A4C  00B8               	movwf	??_I2C_BufferRead+2
 13501  0A4D  0838               	movf	??_I2C_BufferRead+2,w
 13502  0A4E  00AB               	movwf	I2C2_MasterWrite@pflag
 13503  0A4F  3033               	movlw	(low (I2C_BufferRead@ReadAddr| 0))& (0+255)
 13504  0A50  3197  274F  318A   	fcall	_I2C2_MasterWrite
 13505                           
 13506                           ;i2c_wrapper.c: 35: Timeout_setTimeout(200);
 13507  0A53  30C8               	movlw	200
 13508  0A54  0020               	movlb	0	; select bank0
 13509  0A55  00A1               	movwf	Timeout_setTimeout@val
 13510  0A56  3000               	movlw	0
 13511  0A57  00A2               	movwf	Timeout_setTimeout@val+1
 13512  0A58  3195  2516  318A   	fcall	_Timeout_setTimeout
 13513  0A5B                     l5370:	
 13514                           ;i2c_wrapper.c: 38: while(status == I2C2_MESSAGE_PENDING && Timeout_hasExpired()==0);
 13515                           
 13516  0A5B  3002               	movlw	2
 13517  0A5C  0020               	movlb	0	; select bank0
 13518  0A5D  063B               	xorwf	I2C_BufferRead@status,w
 13519  0A5E  1D03               	btfss	3,2
 13520  0A5F  2A66               	goto	l5374
 13521  0A60  3189  214A  318A   	fcall	_Timeout_hasExpired
 13522  0A63  3A00               	xorlw	0
 13523  0A64  1903               	skipnz
 13524  0A65  2A5B               	goto	l5370
 13525  0A66                     l5374:	
 13526                           
 13527                           ;i2c_wrapper.c: 40: if (status != I2C2_MESSAGE_COMPLETE)
 13528  0A66  0020               	movlb	0	; select bank0
 13529  0A67  083B               	movf	I2C_BufferRead@status,w
 13530  0A68  1903               	btfsc	3,2
 13531  0A69  2A6C               	goto	l5380
 13532                           
 13533                           ;i2c_wrapper.c: 41: {
 13534                           ;i2c_wrapper.c: 42: return 0;
 13535  0A6A  3000               	movlw	0
 13536  0A6B  0008               	return
 13537  0A6C                     l5380:	
 13538                           
 13539                           ;i2c_wrapper.c: 43: }
 13540                           ;i2c_wrapper.c: 46: I2C2_MasterRead( pBuffer,NumByteToRead,slaveAddr,&status);
 13541  0A6C  0832               	movf	I2C_BufferRead@pBuffer+1,w
 13542  0A6D  00AA               	movwf	I2C2_MasterRead@pdata+1
 13543  0A6E  0831               	movf	I2C_BufferRead@pBuffer,w
 13544  0A6F  00A9               	movwf	I2C2_MasterRead@pdata
 13545  0A70  0834               	movf	I2C_BufferRead@NumByteToRead,w
 13546  0A71  00B6               	movwf	??_I2C_BufferRead
 13547  0A72  0836               	movf	??_I2C_BufferRead,w
 13548  0A73  00AB               	movwf	I2C2_MasterRead@length
 13549  0A74  083A               	movf	I2C_BufferRead@slaveAddr,w
 13550  0A75  00B7               	movwf	??_I2C_BufferRead+1
 13551  0A76  01B8               	clrf	??_I2C_BufferRead+2
 13552  0A77  0837               	movf	??_I2C_BufferRead+1,w
 13553  0A78  00AC               	movwf	I2C2_MasterRead@address
 13554  0A79  0838               	movf	??_I2C_BufferRead+2,w
 13555  0A7A  00AD               	movwf	I2C2_MasterRead@address+1
 13556  0A7B  303B               	movlw	(low (I2C_BufferRead@status| 0))& (0+255)
 13557  0A7C  00B9               	movwf	??_I2C_BufferRead+3
 13558  0A7D  0839               	movf	??_I2C_BufferRead+3,w
 13559  0A7E  00AE               	movwf	I2C2_MasterRead@pflag
 13560  0A7F  3197  2727  318A   	fcall	_I2C2_MasterRead
 13561                           
 13562                           ;i2c_wrapper.c: 47: Timeout_setTimeout(200);
 13563  0A82  30C8               	movlw	200
 13564  0A83  0020               	movlb	0	; select bank0
 13565  0A84  00A1               	movwf	Timeout_setTimeout@val
 13566  0A85  3000               	movlw	0
 13567  0A86  00A2               	movwf	Timeout_setTimeout@val+1
 13568  0A87  3195  2516  318A   	fcall	_Timeout_setTimeout
 13569  0A8A                     l5384:	
 13570                           ;i2c_wrapper.c: 49: while(status == I2C2_MESSAGE_PENDING && Timeout_hasExpired()==0);
 13571                           
 13572  0A8A  3002               	movlw	2
 13573  0A8B  0020               	movlb	0	; select bank0
 13574  0A8C  063B               	xorwf	I2C_BufferRead@status,w
 13575  0A8D  1D03               	btfss	3,2
 13576  0A8E  2A95               	goto	l5388
 13577  0A8F  3189  214A  318A   	fcall	_Timeout_hasExpired
 13578  0A92  3A00               	xorlw	0
 13579  0A93  1903               	skipnz
 13580  0A94  2A8A               	goto	l5384
 13581  0A95                     l5388:	
 13582                           
 13583                           ;i2c_wrapper.c: 51: if (status == I2C2_MESSAGE_COMPLETE)
 13584  0A95  0020               	movlb	0	; select bank0
 13585  0A96  083B               	movf	I2C_BufferRead@status,w
 13586  0A97  1D03               	btfss	3,2
 13587  0A98  2A9B               	goto	l5396
 13588                           
 13589                           ;i2c_wrapper.c: 52: return 1;
 13590  0A99  3001               	movlw	1
 13591  0A9A  0008               	return
 13592  0A9B                     l5396:	
 13593                           
 13594                           ;i2c_wrapper.c: 53: else
 13595                           ;i2c_wrapper.c: 54: return 0;
 13596  0A9B  3000               	movlw	0
 13597  0A9C  0008               	return
 13598  0A9D                     __end_of_I2C_BufferRead:	
 13599                           
 13600                           	psect	text72
 13601  1516                     __ptext72:	
 13602 ;; *************** function _Timeout_setTimeout *****************
 13603 ;; Defined at:
 13604 ;;		line 26 in file "timeout.c"
 13605 ;; Parameters:    Size  Location     Type
 13606 ;;  val             2    1[BANK0 ] unsigned short 
 13607 ;; Auto vars:     Size  Location     Type
 13608 ;;		None
 13609 ;; Return value:  Size  Location     Type
 13610 ;;                  1    wreg      void 
 13611 ;; Registers used:
 13612 ;;		wreg
 13613 ;; Tracked objects:
 13614 ;;		On entry : 0/0
 13615 ;;		On exit  : 0/0
 13616 ;;		Unchanged: 0/0
 13617 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13618 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13619 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13620 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13621 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13622 ;;Total ram usage:        2 bytes
 13623 ;; Hardware stack levels used:    1
 13624 ;; Hardware stack levels required when called:    4
 13625 ;; This function calls:
 13626 ;;		Nothing
 13627 ;; This function is called by:
 13628 ;;		_I2C_ByteWrite
 13629 ;;		_I2C_BufferRead
 13630 ;; This function uses a non-reentrant model
 13631 ;;
 13632                           
 13633                           
 13634                           ;psect for function _Timeout_setTimeout
 13635  1516                     _Timeout_setTimeout:	
 13636                           
 13637                           ;timeout.c: 28: timeOut=val;
 13638                           
 13639                           ;incstack = 0
 13640                           ; Regs used in _Timeout_setTimeout: [wreg]
 13641  1516  0020               	movlb	0	; select bank0
 13642  1517  0822               	movf	Timeout_setTimeout@val+1,w
 13643  1518  0022               	movlb	2	; select bank2
 13644  1519  00BD               	movwf	(_timeOut+1)^(0+256)
 13645  151A  0020               	movlb	0	; select bank0
 13646  151B  0821               	movf	Timeout_setTimeout@val,w
 13647  151C  0022               	movlb	2	; select bank2
 13648  151D  00BC               	movwf	_timeOut^(0+256)
 13649                           
 13650                           ;timeout.c: 29: curr=globalCounter;
 13651  151E  0021               	movlb	1	; select bank1
 13652  151F  0851               	movf	(_globalCounter+3)^(0+128),w	;volatile
 13653  1520  0022               	movlb	2	; select bank2
 13654  1521  00A3               	movwf	(_curr+3)^(0+256)
 13655  1522  0021               	movlb	1	; select bank1
 13656  1523  0850               	movf	(_globalCounter+2)^(0+128),w	;volatile
 13657  1524  0022               	movlb	2	; select bank2
 13658  1525  00A2               	movwf	(_curr+2)^(0+256)
 13659  1526  0021               	movlb	1	; select bank1
 13660  1527  084F               	movf	(_globalCounter+1)^(0+128),w	;volatile
 13661  1528  0022               	movlb	2	; select bank2
 13662  1529  00A1               	movwf	(_curr+1)^(0+256)
 13663  152A  0021               	movlb	1	; select bank1
 13664  152B  084E               	movf	_globalCounter^(0+128),w	;volatile
 13665  152C  0022               	movlb	2	; select bank2
 13666  152D  00A0               	movwf	_curr^(0+256)
 13667  152E  0008               	return
 13668  152F                     __end_of_Timeout_setTimeout:	
 13669                           
 13670                           	psect	text73
 13671  094A                     __ptext73:	
 13672 ;; *************** function _Timeout_hasExpired *****************
 13673 ;; Defined at:
 13674 ;;		line 32 in file "timeout.c"
 13675 ;; Parameters:    Size  Location     Type
 13676 ;;		None
 13677 ;; Auto vars:     Size  Location     Type
 13678 ;;		None
 13679 ;; Return value:  Size  Location     Type
 13680 ;;                  1    wreg      unsigned char 
 13681 ;; Registers used:
 13682 ;;		wreg, status,2, status,0
 13683 ;; Tracked objects:
 13684 ;;		On entry : 0/0
 13685 ;;		On exit  : 0/0
 13686 ;;		Unchanged: 0/0
 13687 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13688 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13689 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13690 ;;      Temps:          0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13691 ;;      Totals:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13692 ;;Total ram usage:       12 bytes
 13693 ;; Hardware stack levels used:    1
 13694 ;; Hardware stack levels required when called:    4
 13695 ;; This function calls:
 13696 ;;		Nothing
 13697 ;; This function is called by:
 13698 ;;		_I2C_ByteWrite
 13699 ;;		_I2C_BufferRead
 13700 ;; This function uses a non-reentrant model
 13701 ;;
 13702                           
 13703                           
 13704                           ;psect for function _Timeout_hasExpired
 13705  094A                     _Timeout_hasExpired:	
 13706                           
 13707                           ;timeout.c: 34: if(globalCounter-curr>timeOut)
 13708                           
 13709                           ;incstack = 0
 13710                           ; Regs used in _Timeout_hasExpired: [wreg+status,2+status,0]
 13711  094A  0021               	movlb	1	; select bank1
 13712  094B  084E               	movf	_globalCounter^(0+128),w	;volatile
 13713  094C  0020               	movlb	0	; select bank0
 13714  094D  00A1               	movwf	??_Timeout_hasExpired
 13715  094E  0021               	movlb	1	; select bank1
 13716  094F  084F               	movf	(_globalCounter+1)^(0+128),w	;volatile
 13717  0950  0020               	movlb	0	; select bank0
 13718  0951  00A2               	movwf	??_Timeout_hasExpired+1
 13719  0952  0021               	movlb	1	; select bank1
 13720  0953  0850               	movf	(_globalCounter+2)^(0+128),w	;volatile
 13721  0954  0020               	movlb	0	; select bank0
 13722  0955  00A3               	movwf	??_Timeout_hasExpired+2
 13723  0956  0021               	movlb	1	; select bank1
 13724  0957  0851               	movf	(_globalCounter+3)^(0+128),w	;volatile
 13725  0958  0020               	movlb	0	; select bank0
 13726  0959  00A4               	movwf	??_Timeout_hasExpired+3
 13727  095A  0022               	movlb	2	; select bank2
 13728  095B  0920               	comf	_curr^(0+256),w
 13729  095C  0020               	movlb	0	; select bank0
 13730  095D  00A5               	movwf	??_Timeout_hasExpired+4
 13731  095E  0022               	movlb	2	; select bank2
 13732  095F  0921               	comf	(_curr+1)^(0+256),w
 13733  0960  0020               	movlb	0	; select bank0
 13734  0961  00A6               	movwf	??_Timeout_hasExpired+5
 13735  0962  0022               	movlb	2	; select bank2
 13736  0963  0922               	comf	(_curr+2)^(0+256),w
 13737  0964  0020               	movlb	0	; select bank0
 13738  0965  00A7               	movwf	??_Timeout_hasExpired+6
 13739  0966  0022               	movlb	2	; select bank2
 13740  0967  0923               	comf	(_curr+3)^(0+256),w
 13741  0968  0020               	movlb	0	; select bank0
 13742  0969  00A8               	movwf	??_Timeout_hasExpired+7
 13743  096A  0AA5               	incf	??_Timeout_hasExpired+4,f
 13744  096B  1903               	skipnz
 13745  096C  0AA6               	incf	??_Timeout_hasExpired+5,f
 13746  096D  1903               	skipnz
 13747  096E  0AA7               	incf	??_Timeout_hasExpired+6,f
 13748  096F  1903               	skipnz
 13749  0970  0AA8               	incf	??_Timeout_hasExpired+7,f
 13750  0971  0825               	movf	??_Timeout_hasExpired+4,w
 13751  0972  07A1               	addwf	??_Timeout_hasExpired,f
 13752  0973  0826               	movf	??_Timeout_hasExpired+5,w
 13753  0974  3DA2               	addwfc	??_Timeout_hasExpired+1,f
 13754  0975  0827               	movf	??_Timeout_hasExpired+6,w
 13755  0976  3DA3               	addwfc	??_Timeout_hasExpired+2,f
 13756  0977  0828               	movf	??_Timeout_hasExpired+7,w
 13757  0978  3DA4               	addwfc	??_Timeout_hasExpired+3,f
 13758  0979  0022               	movlb	2	; select bank2
 13759  097A  083C               	movf	_timeOut^(0+256),w
 13760  097B  0020               	movlb	0	; select bank0
 13761  097C  00A9               	movwf	??_Timeout_hasExpired+8
 13762  097D  0022               	movlb	2	; select bank2
 13763  097E  083D               	movf	(_timeOut+1)^(0+256),w
 13764  097F  0020               	movlb	0	; select bank0
 13765  0980  00AA               	movwf	??_Timeout_hasExpired+9
 13766  0981  01AB               	clrf	??_Timeout_hasExpired+10
 13767  0982  01AC               	clrf	??_Timeout_hasExpired+11
 13768  0983  0824               	movf	??_Timeout_hasExpired+3,w
 13769  0984  022C               	subwf	??_Timeout_hasExpired+11,w
 13770  0985  1D03               	skipz
 13771  0986  2991               	goto	u4785
 13772  0987  0823               	movf	??_Timeout_hasExpired+2,w
 13773  0988  022B               	subwf	??_Timeout_hasExpired+10,w
 13774  0989  1D03               	skipz
 13775  098A  2991               	goto	u4785
 13776  098B  0822               	movf	??_Timeout_hasExpired+1,w
 13777  098C  022A               	subwf	??_Timeout_hasExpired+9,w
 13778  098D  1D03               	skipz
 13779  098E  2991               	goto	u4785
 13780  098F  0821               	movf	??_Timeout_hasExpired,w
 13781  0990  0229               	subwf	??_Timeout_hasExpired+8,w
 13782  0991                     u4785:	
 13783  0991  1803               	skipnc
 13784  0992  2995               	goto	l5360
 13785                           
 13786                           ;timeout.c: 35: return 1;
 13787  0993  3001               	movlw	1
 13788  0994  0008               	return
 13789  0995                     l5360:	
 13790                           
 13791                           ;timeout.c: 36: else
 13792                           ;timeout.c: 37: return 0;
 13793  0995  3000               	movlw	0
 13794  0996  0008               	return
 13795  0997                     __end_of_Timeout_hasExpired:	
 13796                           
 13797                           	psect	text74
 13798  174F                     __ptext74:	
 13799 ;; *************** function _I2C2_MasterWrite *****************
 13800 ;; Defined at:
 13801 ;;		line 598 in file "mcc_generated_files/i2c2.c"
 13802 ;; Parameters:    Size  Location     Type
 13803 ;;  pdata           1    wreg     PTR unsigned char 
 13804 ;;		 -> I2C_BufferRead@ReadAddr(1), I2C_ByteWrite@data(2), 
 13805 ;;  length          1    8[BANK0 ] unsigned char 
 13806 ;;  address         2    9[BANK0 ] unsigned int 
 13807 ;;  pflag           1   11[BANK0 ] PTR enum E2993
 13808 ;;		 -> I2C_BufferRead@status(1), I2C_ByteWrite@status(1), 
 13809 ;; Auto vars:     Size  Location     Type
 13810 ;;  pdata           1   14[BANK0 ] PTR unsigned char 
 13811 ;;		 -> I2C_BufferRead@ReadAddr(1), I2C_ByteWrite@data(2), 
 13812 ;; Return value:  Size  Location     Type
 13813 ;;                  1    wreg      void 
 13814 ;; Registers used:
 13815 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13816 ;; Tracked objects:
 13817 ;;		On entry : 0/0
 13818 ;;		On exit  : 0/0
 13819 ;;		Unchanged: 0/0
 13820 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13821 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13822 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13823 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13824 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13825 ;;Total ram usage:        7 bytes
 13826 ;; Hardware stack levels used:    1
 13827 ;; Hardware stack levels required when called:    5
 13828 ;; This function calls:
 13829 ;;		_I2C2_MasterTRBInsert
 13830 ;;		_I2C2_MasterWriteTRBBuild
 13831 ;; This function is called by:
 13832 ;;		_I2C_ByteWrite
 13833 ;;		_I2C_BufferRead
 13834 ;; This function uses a non-reentrant model
 13835 ;;
 13836                           
 13837                           
 13838                           ;psect for function _I2C2_MasterWrite
 13839  174F                     _I2C2_MasterWrite:	
 13840                           
 13841                           ;incstack = 0
 13842                           ; Regs used in _I2C2_MasterWrite: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 13843                           ;I2C2_MasterWrite@pdata stored from wreg
 13844  174F  0020               	movlb	0	; select bank0
 13845  1750  00AE               	movwf	I2C2_MasterWrite@pdata
 13846                           
 13847                           ;i2c2.c: 604: static I2C2_TRANSACTION_REQUEST_BLOCK trBlock;
 13848                           ;i2c2.c: 607: if (i2c2_object.trStatus.s.full != 1)
 13849  1751  0021               	movlb	1	; select bank1
 13850  1752  184B               	btfsc	(_i2c2_object^(0+128)+2),0
 13851  1753  2F72               	goto	l5306
 13852                           
 13853                           ;i2c2.c: 608: {
 13854                           ;i2c2.c: 609: I2C2_MasterWriteTRBBuild(&trBlock, pdata, length, address);
 13855  1754  0020               	movlb	0	; select bank0
 13856  1755  082E               	movf	I2C2_MasterWrite@pdata,w
 13857  1756  00AC               	movwf	??_I2C2_MasterWrite
 13858  1757  082C               	movf	??_I2C2_MasterWrite,w
 13859  1758  00A1               	movwf	I2C2_MasterWriteTRBBuild@pdata
 13860  1759  0828               	movf	I2C2_MasterWrite@length,w
 13861  175A  00AD               	movwf	??_I2C2_MasterWrite+1
 13862  175B  082D               	movf	??_I2C2_MasterWrite+1,w
 13863  175C  00A2               	movwf	I2C2_MasterWriteTRBBuild@length
 13864  175D  082A               	movf	I2C2_MasterWrite@address+1,w
 13865  175E  00A4               	movwf	I2C2_MasterWriteTRBBuild@address+1
 13866  175F  0829               	movf	I2C2_MasterWrite@address,w
 13867  1760  00A3               	movwf	I2C2_MasterWriteTRBBuild@address
 13868  1761  305D               	movlw	(low (I2C2_MasterWrite@trBlock| (0+256)))& (0+255)
 13869  1762  3196  26E1  3197   	fcall	_I2C2_MasterWriteTRBBuild
 13870                           
 13871                           ;i2c2.c: 610: I2C2_MasterTRBInsert(1, &trBlock, pflag);
 13872  1765  305D               	movlw	(low (I2C2_MasterWrite@trBlock| (0+256)))& (0+255)
 13873  1766  0020               	movlb	0	; select bank0
 13874  1767  00AC               	movwf	??_I2C2_MasterWrite
 13875  1768  082C               	movf	??_I2C2_MasterWrite,w
 13876  1769  00A1               	movwf	I2C2_MasterTRBInsert@ptrb_list
 13877  176A  082B               	movf	I2C2_MasterWrite@pflag,w
 13878  176B  00AD               	movwf	??_I2C2_MasterWrite+1
 13879  176C  082D               	movf	??_I2C2_MasterWrite+1,w
 13880  176D  00A2               	movwf	I2C2_MasterTRBInsert@pflag
 13881  176E  3001               	movlw	1
 13882  176F  3189  21EA         	fcall	_I2C2_MasterTRBInsert
 13883                           
 13884                           ;i2c2.c: 611: }
 13885  1771  0008               	return
 13886  1772                     l5306:	
 13887                           
 13888                           ;i2c2.c: 612: else
 13889                           ;i2c2.c: 613: {
 13890                           ;i2c2.c: 614: *pflag = I2C2_MESSAGE_FAIL;
 13891  1772  0020               	movlb	0	; select bank0
 13892  1773  082B               	movf	I2C2_MasterWrite@pflag,w
 13893  1774  0086               	movwf	6
 13894  1775  0187               	clrf	7
 13895  1776  0181               	clrf	1
 13896  1777  0A81               	incf	1,f
 13897  1778  0008               	return
 13898  1779                     __end_of_I2C2_MasterWrite:	
 13899                           
 13900                           	psect	text75
 13901  16E1                     __ptext75:	
 13902 ;; *************** function _I2C2_MasterWriteTRBBuild *****************
 13903 ;; Defined at:
 13904 ;;		line 708 in file "mcc_generated_files/i2c2.c"
 13905 ;; Parameters:    Size  Location     Type
 13906 ;;  ptrb            1    wreg     PTR struct .
 13907 ;;		 -> I2C2_MasterWrite@trBlock(5), 
 13908 ;;  pdata           1    1[BANK0 ] PTR unsigned char 
 13909 ;;		 -> I2C_BufferRead@ReadAddr(1), I2C_ByteWrite@data(2), 
 13910 ;;  length          1    2[BANK0 ] unsigned char 
 13911 ;;  address         2    3[BANK0 ] unsigned int 
 13912 ;; Auto vars:     Size  Location     Type
 13913 ;;  ptrb            1    7[BANK0 ] PTR struct .
 13914 ;;		 -> I2C2_MasterWrite@trBlock(5), 
 13915 ;; Return value:  Size  Location     Type
 13916 ;;                  1    wreg      void 
 13917 ;; Registers used:
 13918 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 13919 ;; Tracked objects:
 13920 ;;		On entry : 0/0
 13921 ;;		On exit  : 0/0
 13922 ;;		Unchanged: 0/0
 13923 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13924 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13925 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13926 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13927 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13928 ;;Total ram usage:        7 bytes
 13929 ;; Hardware stack levels used:    1
 13930 ;; Hardware stack levels required when called:    4
 13931 ;; This function calls:
 13932 ;;		Nothing
 13933 ;; This function is called by:
 13934 ;;		_I2C2_MasterWrite
 13935 ;; This function uses a non-reentrant model
 13936 ;;
 13937                           
 13938                           
 13939                           ;psect for function _I2C2_MasterWriteTRBBuild
 13940  16E1                     _I2C2_MasterWriteTRBBuild:	
 13941                           
 13942                           ;incstack = 0
 13943                           ; Regs used in _I2C2_MasterWriteTRBBuild: [wreg+fsr1l+fsr1h+status,2+status,0]
 13944                           ;I2C2_MasterWriteTRBBuild@ptrb stored from wreg
 13945  16E1  0020               	movlb	0	; select bank0
 13946  16E2  00A7               	movwf	I2C2_MasterWriteTRBBuild@ptrb
 13947                           
 13948                           ;i2c2.c: 714: ptrb->address = address << 1;
 13949  16E3  0824               	movf	I2C2_MasterWriteTRBBuild@address+1,w
 13950  16E4  00A6               	movwf	??_I2C2_MasterWriteTRBBuild+1
 13951  16E5  0823               	movf	I2C2_MasterWriteTRBBuild@address,w
 13952  16E6  00A5               	movwf	??_I2C2_MasterWriteTRBBuild
 13953  16E7  35A5               	lslf	??_I2C2_MasterWriteTRBBuild,f
 13954  16E8  0DA6               	rlf	??_I2C2_MasterWriteTRBBuild+1,f
 13955  16E9  0827               	movf	I2C2_MasterWriteTRBBuild@ptrb,w
 13956  16EA  0086               	movwf	6
 13957  16EB  3001               	movlw	1	; select bank2/3
 13958  16EC  0087               	movwf	7
 13959  16ED  0825               	movf	??_I2C2_MasterWriteTRBBuild,w
 13960  16EE  3FC0               	movwi [0]fsr1
 13961  16EF  0826               	movf	??_I2C2_MasterWriteTRBBuild+1,w
 13962  16F0  3FC1               	movwi [1]fsr1
 13963                           
 13964                           ;i2c2.c: 715: ptrb->length = length;
 13965  16F1  0822               	movf	I2C2_MasterWriteTRBBuild@length,w
 13966  16F2  00A5               	movwf	??_I2C2_MasterWriteTRBBuild
 13967  16F3  0827               	movf	I2C2_MasterWriteTRBBuild@ptrb,w
 13968  16F4  3E02               	addlw	2
 13969  16F5  0086               	movwf	6
 13970  16F6  3001               	movlw	1	; select bank2/3
 13971  16F7  0087               	movwf	7
 13972  16F8  0825               	movf	??_I2C2_MasterWriteTRBBuild,w
 13973  16F9  0081               	movwf	1
 13974                           
 13975                           ;i2c2.c: 716: ptrb->pbuffer = pdata;
 13976  16FA  0827               	movf	I2C2_MasterWriteTRBBuild@ptrb,w
 13977  16FB  3E03               	addlw	3
 13978  16FC  0086               	movwf	6
 13979  16FD  3001               	movlw	1	; select bank2/3
 13980  16FE  0087               	movwf	7
 13981  16FF  0821               	movf	I2C2_MasterWriteTRBBuild@pdata,w
 13982  1700  3FC0               	movwi [0]fsr1
 13983  1701  3000               	movlw	0
 13984  1702  3FC1               	movwi [1]fsr1
 13985  1703  0008               	return
 13986  1704                     __end_of_I2C2_MasterWriteTRBBuild:	
 13987                           
 13988                           	psect	text76
 13989  1727                     __ptext76:	
 13990 ;; *************** function _I2C2_MasterRead *****************
 13991 ;; Defined at:
 13992 ;;		line 619 in file "mcc_generated_files/i2c2.c"
 13993 ;; Parameters:    Size  Location     Type
 13994 ;;  pdata           2    9[BANK0 ] PTR unsigned char 
 13995 ;;		 -> data(8), b1(24), HMC5883L_ReadBit@tmp(1), HMC5883L_ReadBits@tmp(1), 
 13996 ;;		 -> HMC5883L_WriteBit@tmp(1), HMC5883L_WriteBits@tmp(1), heading(8), HMC5883L_TestConnection@tmp(3), 
 13997 ;;		 -> MPU6050_ReadBit@tmp(1), MPU6050_ReadBits@tmp(1), MPU6050_WriteBit@tmp(1), MPU6050_WriteBits@tmp(1), 
 13998 ;;		 -> MPU6050_GetRawAccel@tempBuffer(6), MPU6050_GetRawAccelGyro@tmpBuffer(14), 
 13999 ;;  length          1   11[BANK0 ] unsigned char 
 14000 ;;  address         2   12[BANK0 ] unsigned int 
 14001 ;;  pflag           1   14[BANK0 ] PTR enum E2993
 14002 ;;		 -> I2C_BufferRead@status(1), 
 14003 ;; Auto vars:     Size  Location     Type
 14004 ;;		None
 14005 ;; Return value:  Size  Location     Type
 14006 ;;                  1    wreg      void 
 14007 ;; Registers used:
 14008 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14009 ;; Tracked objects:
 14010 ;;		On entry : 0/0
 14011 ;;		On exit  : 0/0
 14012 ;;		Unchanged: 0/0
 14013 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14014 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14015 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14016 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14017 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14018 ;;Total ram usage:        8 bytes
 14019 ;; Hardware stack levels used:    1
 14020 ;; Hardware stack levels required when called:    5
 14021 ;; This function calls:
 14022 ;;		_I2C2_MasterReadTRBBuild
 14023 ;;		_I2C2_MasterTRBInsert
 14024 ;; This function is called by:
 14025 ;;		_I2C_BufferRead
 14026 ;; This function uses a non-reentrant model
 14027 ;;
 14028                           
 14029                           
 14030                           ;psect for function _I2C2_MasterRead
 14031  1727                     _I2C2_MasterRead:	
 14032                           
 14033                           ;i2c2.c: 625: static I2C2_TRANSACTION_REQUEST_BLOCK trBlock;
 14034                           ;i2c2.c: 629: if (i2c2_object.trStatus.s.full != 1)
 14035                           
 14036                           ;incstack = 0
 14037                           ; Regs used in _I2C2_MasterRead: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 14038  1727  0021               	movlb	1	; select bank1
 14039  1728  184B               	btfsc	(_i2c2_object^(0+128)+2),0
 14040  1729  2F48               	goto	l5312
 14041                           
 14042                           ;i2c2.c: 630: {
 14043                           ;i2c2.c: 631: I2C2_MasterReadTRBBuild(&trBlock, pdata, length, address);
 14044  172A  0020               	movlb	0	; select bank0
 14045  172B  082A               	movf	I2C2_MasterRead@pdata+1,w
 14046  172C  00A2               	movwf	I2C2_MasterReadTRBBuild@pdata+1
 14047  172D  0829               	movf	I2C2_MasterRead@pdata,w
 14048  172E  00A1               	movwf	I2C2_MasterReadTRBBuild@pdata
 14049  172F  082B               	movf	I2C2_MasterRead@length,w
 14050  1730  00AF               	movwf	??_I2C2_MasterRead
 14051  1731  082F               	movf	??_I2C2_MasterRead,w
 14052  1732  00A3               	movwf	I2C2_MasterReadTRBBuild@length
 14053  1733  082D               	movf	I2C2_MasterRead@address+1,w
 14054  1734  00A5               	movwf	I2C2_MasterReadTRBBuild@address+1
 14055  1735  082C               	movf	I2C2_MasterRead@address,w
 14056  1736  00A4               	movwf	I2C2_MasterReadTRBBuild@address
 14057  1737  3058               	movlw	(low (I2C2_MasterRead@trBlock| (0+256)))& (0+255)
 14058  1738  3197  27A4  3197   	fcall	_I2C2_MasterReadTRBBuild
 14059                           
 14060                           ;i2c2.c: 632: I2C2_MasterTRBInsert(1, &trBlock, pflag);
 14061  173B  3058               	movlw	(low (I2C2_MasterRead@trBlock| (0+256)))& (0+255)
 14062  173C  0020               	movlb	0	; select bank0
 14063  173D  00AF               	movwf	??_I2C2_MasterRead
 14064  173E  082F               	movf	??_I2C2_MasterRead,w
 14065  173F  00A1               	movwf	I2C2_MasterTRBInsert@ptrb_list
 14066  1740  082E               	movf	I2C2_MasterRead@pflag,w
 14067  1741  00B0               	movwf	??_I2C2_MasterRead+1
 14068  1742  0830               	movf	??_I2C2_MasterRead+1,w
 14069  1743  00A2               	movwf	I2C2_MasterTRBInsert@pflag
 14070  1744  3001               	movlw	1
 14071  1745  3189  21EA         	fcall	_I2C2_MasterTRBInsert
 14072                           
 14073                           ;i2c2.c: 633: }
 14074  1747  0008               	return
 14075  1748                     l5312:	
 14076                           
 14077                           ;i2c2.c: 634: else
 14078                           ;i2c2.c: 635: {
 14079                           ;i2c2.c: 636: *pflag = I2C2_MESSAGE_FAIL;
 14080  1748  0020               	movlb	0	; select bank0
 14081  1749  082E               	movf	I2C2_MasterRead@pflag,w
 14082  174A  0086               	movwf	6
 14083  174B  0187               	clrf	7
 14084  174C  0181               	clrf	1
 14085  174D  0A81               	incf	1,f
 14086  174E  0008               	return
 14087  174F                     __end_of_I2C2_MasterRead:	
 14088                           
 14089                           	psect	text77
 14090  09EA                     __ptext77:	
 14091 ;; *************** function _I2C2_MasterTRBInsert *****************
 14092 ;; Defined at:
 14093 ;;		line 641 in file "mcc_generated_files/i2c2.c"
 14094 ;; Parameters:    Size  Location     Type
 14095 ;;  count           1    wreg     unsigned char 
 14096 ;;  ptrb_list       1    1[BANK0 ] PTR struct .
 14097 ;;		 -> I2C2_MasterRead@trBlock(5), I2C2_MasterWrite@trBlock(5), 
 14098 ;;  pflag           1    2[BANK0 ] PTR enum E2993
 14099 ;;		 -> I2C_BufferRead@status(1), I2C_ByteWrite@status(1), 
 14100 ;; Auto vars:     Size  Location     Type
 14101 ;;  count           1    4[BANK0 ] unsigned char 
 14102 ;; Return value:  Size  Location     Type
 14103 ;;                  1    wreg      void 
 14104 ;; Registers used:
 14105 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 14106 ;; Tracked objects:
 14107 ;;		On entry : 0/0
 14108 ;;		On exit  : 0/0
 14109 ;;		Unchanged: 0/0
 14110 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14111 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14112 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14113 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14114 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14115 ;;Total ram usage:        4 bytes
 14116 ;; Hardware stack levels used:    1
 14117 ;; Hardware stack levels required when called:    4
 14118 ;; This function calls:
 14119 ;;		Nothing
 14120 ;; This function is called by:
 14121 ;;		_I2C2_MasterWrite
 14122 ;;		_I2C2_MasterRead
 14123 ;; This function uses a non-reentrant model
 14124 ;;
 14125                           
 14126                           
 14127                           ;psect for function _I2C2_MasterTRBInsert
 14128  09EA                     _I2C2_MasterTRBInsert:	
 14129                           
 14130                           ;incstack = 0
 14131                           ; Regs used in _I2C2_MasterTRBInsert: [wreg+fsr1l+fsr1h+status,2+status,0]
 14132                           ;I2C2_MasterTRBInsert@count stored from wreg
 14133  09EA  0020               	movlb	0	; select bank0
 14134  09EB  00A4               	movwf	I2C2_MasterTRBInsert@count
 14135                           
 14136                           ;i2c2.c: 648: if (i2c2_object.trStatus.s.full != 1)
 14137  09EC  0021               	movlb	1	; select bank1
 14138  09ED  184B               	btfsc	(_i2c2_object^(0+128)+2),0
 14139  09EE  2A2C               	goto	l5288
 14140                           
 14141                           ;i2c2.c: 649: {
 14142                           ;i2c2.c: 650: *pflag = I2C2_MESSAGE_PENDING;
 14143  09EF  3002               	movlw	2
 14144  09F0  0020               	movlb	0	; select bank0
 14145  09F1  00A3               	movwf	??_I2C2_MasterTRBInsert
 14146  09F2  0822               	movf	I2C2_MasterTRBInsert@pflag,w
 14147  09F3  0086               	movwf	6
 14148  09F4  0187               	clrf	7
 14149  09F5  0823               	movf	??_I2C2_MasterTRBInsert,w
 14150  09F6  0081               	movwf	1
 14151                           
 14152                           ;i2c2.c: 652: i2c2_object.pTrTail->ptrb_list = ptrb_list;
 14153  09F7  0821               	movf	I2C2_MasterTRBInsert@ptrb_list,w
 14154  09F8  00A3               	movwf	??_I2C2_MasterTRBInsert
 14155  09F9  0021               	movlb	1	; select bank1
 14156  09FA  0A49               	incf	_i2c2_object^(0+128),w
 14157  09FB  0086               	movwf	6
 14158  09FC  3001               	movlw	1	; select bank2/3
 14159  09FD  0087               	movwf	7
 14160  09FE  0020               	movlb	0	; select bank0
 14161  09FF  0823               	movf	??_I2C2_MasterTRBInsert,w
 14162  0A00  0081               	movwf	1
 14163                           
 14164                           ;i2c2.c: 653: i2c2_object.pTrTail->count = count;
 14165  0A01  0824               	movf	I2C2_MasterTRBInsert@count,w
 14166  0A02  00A3               	movwf	??_I2C2_MasterTRBInsert
 14167  0A03  0021               	movlb	1	; select bank1
 14168  0A04  0849               	movf	_i2c2_object^(0+128),w
 14169  0A05  0086               	movwf	6
 14170  0A06  3001               	movlw	1	; select bank2/3
 14171  0A07  0087               	movwf	7
 14172  0A08  0020               	movlb	0	; select bank0
 14173  0A09  0823               	movf	??_I2C2_MasterTRBInsert,w
 14174  0A0A  0081               	movwf	1
 14175                           
 14176                           ;i2c2.c: 654: i2c2_object.pTrTail->pTrFlag = pflag;
 14177  0A0B  0021               	movlb	1	; select bank1
 14178  0A0C  0849               	movf	_i2c2_object^(0+128),w
 14179  0A0D  3E02               	addlw	2
 14180  0A0E  0086               	movwf	6
 14181  0A0F  3001               	movlw	1	; select bank2/3
 14182  0A10  0087               	movwf	7
 14183  0A11  0020               	movlb	0	; select bank0
 14184  0A12  0822               	movf	I2C2_MasterTRBInsert@pflag,w
 14185  0A13  3FC0               	movwi [0]fsr1
 14186  0A14  3000               	movlw	0
 14187  0A15  3FC1               	movwi [1]fsr1
 14188                           
 14189                           ;i2c2.c: 655: i2c2_object.pTrTail++;
 14190  0A16  3004               	movlw	4
 14191  0A17  00A3               	movwf	??_I2C2_MasterTRBInsert
 14192  0A18  0823               	movf	??_I2C2_MasterTRBInsert,w
 14193  0A19  0021               	movlb	1	; select bank1
 14194  0A1A  07C9               	addwf	_i2c2_object^(0+128),f
 14195                           
 14196                           ;i2c2.c: 658: if (i2c2_object.pTrTail == (i2c2_tr_queue + 1))
 14197  0A1B  0849               	movf	_i2c2_object^(0+128),w
 14198  0A1C  3A66               	xorlw	(low ((_i2c2_tr_queue| (0+256)+4)))& (0+255)
 14199  0A1D  1D03               	skipz
 14200  0A1E  2A25               	goto	l5284
 14201                           
 14202                           ;i2c2.c: 659: {
 14203                           ;i2c2.c: 661: i2c2_object.pTrTail = i2c2_tr_queue;
 14204  0A1F  3062               	movlw	(low (_i2c2_tr_queue| (0+256)))& (0+255)
 14205  0A20  0020               	movlb	0	; select bank0
 14206  0A21  00A3               	movwf	??_I2C2_MasterTRBInsert
 14207  0A22  0823               	movf	??_I2C2_MasterTRBInsert,w
 14208  0A23  0021               	movlb	1	; select bank1
 14209  0A24  00C9               	movwf	_i2c2_object^(0+128)
 14210  0A25                     l5284:	
 14211                           
 14212                           ;i2c2.c: 662: }
 14213                           ;i2c2.c: 666: i2c2_object.trStatus.s.empty = 0;
 14214  0A25  10CB               	bcf	(_i2c2_object^(0+128)+2),1
 14215                           
 14216                           ;i2c2.c: 669: if (i2c2_object.pTrHead == i2c2_object.pTrTail)
 14217  0A26  084A               	movf	(low ((_i2c2_object| 0+1)))^(0+128),w
 14218  0A27  0649               	xorwf	_i2c2_object^(0+128),w
 14219  0A28  1D03               	skipz
 14220  0A29  2A32               	goto	l5290
 14221                           
 14222                           ;i2c2.c: 670: {
 14223                           ;i2c2.c: 672: i2c2_object.trStatus.s.full = 1;
 14224  0A2A  144B               	bsf	(_i2c2_object^(0+128)+2),0
 14225                           
 14226                           ;i2c2.c: 673: }
 14227                           ;i2c2.c: 675: }
 14228  0A2B  2A32               	goto	l5290
 14229  0A2C                     l5288:	
 14230                           
 14231                           ;i2c2.c: 676: else
 14232                           ;i2c2.c: 677: {
 14233                           ;i2c2.c: 678: *pflag = I2C2_MESSAGE_FAIL;
 14234  0A2C  0020               	movlb	0	; select bank0
 14235  0A2D  0822               	movf	I2C2_MasterTRBInsert@pflag,w
 14236  0A2E  0086               	movwf	6
 14237  0A2F  0187               	clrf	7
 14238  0A30  0181               	clrf	1
 14239  0A31  0A81               	incf	1,f
 14240  0A32                     l5290:	
 14241                           
 14242                           ;i2c2.c: 679: }
 14243                           ;i2c2.c: 682: if (*pflag == I2C2_MESSAGE_PENDING)
 14244  0A32  0020               	movlb	0	; select bank0
 14245  0A33  0822               	movf	I2C2_MasterTRBInsert@pflag,w
 14246  0A34  0086               	movwf	6
 14247  0A35  0187               	clrf	7
 14248  0A36  3002               	movlw	2
 14249  0A37  0601               	xorwf	1,w
 14250  0A38  1D03               	btfss	3,2
 14251  0A39  0008               	return
 14252  0A3A                     l358:	
 14253                           ;i2c2.c: 685: while(i2c2_state != S_MASTER_IDLE)
 14254                           
 14255                           ;i2c2.c: 683: {
 14256                           ;i2c2.c: 684: PIR4bits.SSP2IF = 1;
 14257                           
 14258                           
 14259                           ;i2c2.c: 686: {
 14260                           ;i2c2.c: 689: PIR4bits.SSP2IF = 1;
 14261  0A3A  1414               	bsf	20,0	;volatile
 14262  0A3B  0879               	movf	_i2c2_state,w
 14263  0A3C  1903               	btfsc	3,2
 14264  0A3D  0008               	return
 14265  0A3E  2A3A               	goto	l358
 14266  0A3F                     __end_of_I2C2_MasterTRBInsert:	
 14267                           
 14268                           	psect	text78
 14269  17A4                     __ptext78:	
 14270 ;; *************** function _I2C2_MasterReadTRBBuild *****************
 14271 ;; Defined at:
 14272 ;;		line 695 in file "mcc_generated_files/i2c2.c"
 14273 ;; Parameters:    Size  Location     Type
 14274 ;;  ptrb            1    wreg     PTR struct .
 14275 ;;		 -> I2C2_MasterRead@trBlock(5), 
 14276 ;;  pdata           2    1[BANK0 ] PTR unsigned char 
 14277 ;;		 -> data(8), b1(24), HMC5883L_ReadBit@tmp(1), HMC5883L_ReadBits@tmp(1), 
 14278 ;;		 -> HMC5883L_WriteBit@tmp(1), HMC5883L_WriteBits@tmp(1), heading(8), HMC5883L_TestConnection@tmp(3), 
 14279 ;;		 -> MPU6050_ReadBit@tmp(1), MPU6050_ReadBits@tmp(1), MPU6050_WriteBit@tmp(1), MPU6050_WriteBits@tmp(1), 
 14280 ;;		 -> MPU6050_GetRawAccel@tempBuffer(6), MPU6050_GetRawAccelGyro@tmpBuffer(14), 
 14281 ;;  length          1    3[BANK0 ] unsigned char 
 14282 ;;  address         2    4[BANK0 ] unsigned int 
 14283 ;; Auto vars:     Size  Location     Type
 14284 ;;  ptrb            1    8[BANK0 ] PTR struct .
 14285 ;;		 -> I2C2_MasterRead@trBlock(5), 
 14286 ;; Return value:  Size  Location     Type
 14287 ;;                  1    wreg      void 
 14288 ;; Registers used:
 14289 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 14290 ;; Tracked objects:
 14291 ;;		On entry : 0/0
 14292 ;;		On exit  : 0/0
 14293 ;;		Unchanged: 0/0
 14294 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14295 ;;      Params:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14296 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14297 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14298 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14299 ;;Total ram usage:        8 bytes
 14300 ;; Hardware stack levels used:    1
 14301 ;; Hardware stack levels required when called:    4
 14302 ;; This function calls:
 14303 ;;		Nothing
 14304 ;; This function is called by:
 14305 ;;		_I2C2_MasterRead
 14306 ;; This function uses a non-reentrant model
 14307 ;;
 14308                           
 14309                           
 14310                           ;psect for function _I2C2_MasterReadTRBBuild
 14311  17A4                     _I2C2_MasterReadTRBBuild:	
 14312                           
 14313                           ;incstack = 0
 14314                           ; Regs used in _I2C2_MasterReadTRBBuild: [wreg+fsr1l+fsr1h+status,2+status,0]
 14315                           ;I2C2_MasterReadTRBBuild@ptrb stored from wreg
 14316  17A4  0020               	movlb	0	; select bank0
 14317  17A5  00A8               	movwf	I2C2_MasterReadTRBBuild@ptrb
 14318                           
 14319                           ;i2c2.c: 701: ptrb->address = address << 1;
 14320  17A6  0825               	movf	I2C2_MasterReadTRBBuild@address+1,w
 14321  17A7  00A7               	movwf	??_I2C2_MasterReadTRBBuild+1
 14322  17A8  0824               	movf	I2C2_MasterReadTRBBuild@address,w
 14323  17A9  00A6               	movwf	??_I2C2_MasterReadTRBBuild
 14324  17AA  35A6               	lslf	??_I2C2_MasterReadTRBBuild,f
 14325  17AB  0DA7               	rlf	??_I2C2_MasterReadTRBBuild+1,f
 14326  17AC  0828               	movf	I2C2_MasterReadTRBBuild@ptrb,w
 14327  17AD  0086               	movwf	6
 14328  17AE  3001               	movlw	1	; select bank2/3
 14329  17AF  0087               	movwf	7
 14330  17B0  0826               	movf	??_I2C2_MasterReadTRBBuild,w
 14331  17B1  3FC0               	movwi [0]fsr1
 14332  17B2  0827               	movf	??_I2C2_MasterReadTRBBuild+1,w
 14333  17B3  3FC1               	movwi [1]fsr1
 14334                           
 14335                           ;i2c2.c: 703: ptrb->address |= 0x01;
 14336  17B4  0828               	movf	I2C2_MasterReadTRBBuild@ptrb,w
 14337  17B5  0086               	movwf	6
 14338  17B6  3001               	movlw	1	; select bank2/3
 14339  17B7  0087               	movwf	7
 14340  17B8  3001               	movlw	1
 14341  17B9  0481               	iorwf	1,f
 14342  17BA  3141               	addfsr 1,1
 14343  17BB  3000               	movlw	0
 14344  17BC  0481               	iorwf	1,f
 14345                           
 14346                           ;i2c2.c: 704: ptrb->length = length;
 14347  17BD  0823               	movf	I2C2_MasterReadTRBBuild@length,w
 14348  17BE  00A6               	movwf	??_I2C2_MasterReadTRBBuild
 14349  17BF  0828               	movf	I2C2_MasterReadTRBBuild@ptrb,w
 14350  17C0  3E02               	addlw	2
 14351  17C1  0086               	movwf	6
 14352  17C2  3001               	movlw	1	; select bank2/3
 14353  17C3  0087               	movwf	7
 14354  17C4  0826               	movf	??_I2C2_MasterReadTRBBuild,w
 14355  17C5  0081               	movwf	1
 14356                           
 14357                           ;i2c2.c: 705: ptrb->pbuffer = pdata;
 14358  17C6  0828               	movf	I2C2_MasterReadTRBBuild@ptrb,w
 14359  17C7  3E03               	addlw	3
 14360  17C8  0086               	movwf	6
 14361  17C9  3001               	movlw	1	; select bank2/3
 14362  17CA  0087               	movwf	7
 14363  17CB  0821               	movf	I2C2_MasterReadTRBBuild@pdata,w
 14364  17CC  3FC0               	movwi [0]fsr1
 14365  17CD  0822               	movf	I2C2_MasterReadTRBBuild@pdata+1,w
 14366  17CE  3FC1               	movwi [1]fsr1
 14367  17CF  0008               	return
 14368  17D0                     __end_of_I2C2_MasterReadTRBBuild:	
 14369                           
 14370                           	psect	text79
 14371  13B9                     __ptext79:	
 14372 ;; *************** function _Diag_setTempSensorHealth *****************
 14373 ;; Defined at:
 14374 ;;		line 15 in file "diagnostics.c"
 14375 ;; Parameters:    Size  Location     Type
 14376 ;;  health          1    wreg     unsigned char 
 14377 ;; Auto vars:     Size  Location     Type
 14378 ;;  health          1    2[BANK0 ] unsigned char 
 14379 ;; Return value:  Size  Location     Type
 14380 ;;                  1    wreg      void 
 14381 ;; Registers used:
 14382 ;;		wreg
 14383 ;; Tracked objects:
 14384 ;;		On entry : 0/0
 14385 ;;		On exit  : 0/0
 14386 ;;		Unchanged: 0/0
 14387 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14388 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14389 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14390 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14391 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14392 ;;Total ram usage:        2 bytes
 14393 ;; Hardware stack levels used:    1
 14394 ;; Hardware stack levels required when called:    4
 14395 ;; This function calls:
 14396 ;;		Nothing
 14397 ;; This function is called by:
 14398 ;;		_BMP_init
 14399 ;;		_BMP_readTemperature
 14400 ;; This function uses a non-reentrant model
 14401 ;;
 14402                           
 14403                           
 14404                           ;psect for function _Diag_setTempSensorHealth
 14405  13B9                     _Diag_setTempSensorHealth:	
 14406                           
 14407                           ;incstack = 0
 14408                           ; Regs used in _Diag_setTempSensorHealth: [wreg]
 14409                           ;Diag_setTempSensorHealth@health stored from wreg
 14410  13B9  0020               	movlb	0	; select bank0
 14411  13BA  00A2               	movwf	Diag_setTempSensorHealth@health
 14412                           
 14413                           ;diagnostics.c: 17: sensorHealth.tempSensorHealth=health;
 14414  13BB  0822               	movf	Diag_setTempSensorHealth@health,w
 14415  13BC  00A1               	movwf	??_Diag_setTempSensorHealth
 14416  13BD  0821               	movf	??_Diag_setTempSensorHealth,w
 14417  13BE  0021               	movlb	1	; select bank1
 14418  13BF  00E3               	movwf	_sensorHealth^(0+128)
 14419  13C0  0008               	return
 14420  13C1                     __end_of_Diag_setTempSensorHealth:	
 14421                           
 14422                           	psect	intentry
 14423  0004                     __pintentry:	
 14424 ;; *************** function _INTERRUPT_InterruptManager *****************
 14425 ;; Defined at:
 14426 ;;		line 51 in file "mcc_generated_files/interrupt_manager.c"
 14427 ;; Parameters:    Size  Location     Type
 14428 ;;		None
 14429 ;; Auto vars:     Size  Location     Type
 14430 ;;		None
 14431 ;; Return value:  Size  Location     Type
 14432 ;;                  1    wreg      void 
 14433 ;; Registers used:
 14434 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14435 ;; Tracked objects:
 14436 ;;		On entry : 0/0
 14437 ;;		On exit  : 0/0
 14438 ;;		Unchanged: 0/0
 14439 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14440 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14441 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14442 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14443 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14444 ;;Total ram usage:        1 bytes
 14445 ;; Hardware stack levels used:    1
 14446 ;; Hardware stack levels required when called:    3
 14447 ;; This function calls:
 14448 ;;		_I2C2_BusCollisionISR
 14449 ;;		_I2C2_ISR
 14450 ;;		_PIN_MANAGER_IOC
 14451 ;;		_TMR1_ISR
 14452 ;; This function is called by:
 14453 ;;		Interrupt level 1
 14454 ;; This function uses a non-reentrant model
 14455 ;;
 14456                           
 14457  0004                     _INTERRUPT_InterruptManager:	
 14458                           
 14459                           ;incstack = 0
 14460  0004  147E               	bsf	126,0	;set compiler interrupt flag (level 1)
 14461                           
 14462                           ; Regs used in _INTERRUPT_InterruptManager: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 14463  0005  3180               	pagesel	$
 14464  0006  0020               	movlb	0	; select bank0
 14465  0007  087F               	movf	127,w
 14466  0008  00A0               	movwf	??_INTERRUPT_InterruptManager
 14467                           
 14468                           ;interrupt_manager.c: 54: if(INTCONbits.PEIE == 1 && PIE4bits.BCL2IE == 1 && PIR4bits.BC
      +                          L2IF == 1)
 14469  0009  1F0B               	btfss	11,6	;volatile
 14470  000A  2815               	goto	i1l153
 14471  000B  0021               	movlb	1	; select bank1
 14472  000C  1C94               	btfss	20,1	;volatile
 14473  000D  2815               	goto	i1l153
 14474  000E  0020               	movlb	0	; select bank0
 14475  000F  1C94               	btfss	20,1	;volatile
 14476  0010  2815               	goto	i1l153
 14477                           
 14478                           ;interrupt_manager.c: 55: {
 14479                           ;interrupt_manager.c: 56: I2C2_BusCollisionISR();
 14480  0011  3193  2364  3180   	fcall	_I2C2_BusCollisionISR
 14481                           
 14482                           ;interrupt_manager.c: 57: }
 14483  0014  2832               	goto	i1l161
 14484  0015                     i1l153:	
 14485                           
 14486                           ;interrupt_manager.c: 58: else if(INTCONbits.PEIE == 1 && PIE4bits.SSP2IE == 1 && PIR4bi
      +                          ts.SSP2IF == 1)
 14487  0015  1F0B               	btfss	11,6	;volatile
 14488  0016  2821               	goto	i1l155
 14489  0017  0021               	movlb	1	; select bank1
 14490  0018  1C14               	btfss	20,0	;volatile
 14491  0019  2821               	goto	i1l155
 14492  001A  0020               	movlb	0	; select bank0
 14493  001B  1C14               	btfss	20,0	;volatile
 14494  001C  2821               	goto	i1l155
 14495                           
 14496                           ;interrupt_manager.c: 59: {
 14497                           ;interrupt_manager.c: 60: I2C2_ISR();
 14498  001D  3185  2539  3180   	fcall	_I2C2_ISR
 14499                           
 14500                           ;interrupt_manager.c: 61: }
 14501  0020  2832               	goto	i1l161
 14502  0021                     i1l155:	
 14503                           
 14504                           ;interrupt_manager.c: 62: else if(INTCONbits.PEIE == 1 && PIE1bits.TMR1IE == 1 && PIR1bi
      +                          ts.TMR1IF == 1)
 14505  0021  1F0B               	btfss	11,6	;volatile
 14506  0022  282D               	goto	i1l157
 14507  0023  0021               	movlb	1	; select bank1
 14508  0024  1C11               	btfss	17,0	;volatile
 14509  0025  282D               	goto	i1l157
 14510  0026  0020               	movlb	0	; select bank0
 14511  0027  1C11               	btfss	17,0	;volatile
 14512  0028  282D               	goto	i1l157
 14513                           
 14514                           ;interrupt_manager.c: 63: {
 14515                           ;interrupt_manager.c: 64: TMR1_ISR();
 14516  0029  3193  23D1  3180   	fcall	_TMR1_ISR
 14517                           
 14518                           ;interrupt_manager.c: 65: }
 14519  002C  2832               	goto	i1l161
 14520  002D                     i1l157:	
 14521                           
 14522                           ;interrupt_manager.c: 66: else if(INTCONbits.IOCIE == 1 && INTCONbits.IOCIF == 1)
 14523  002D  198B               	btfsc	11,3	;volatile
 14524  002E  1C0B               	btfss	11,0	;volatile
 14525  002F  2832               	goto	i1l161
 14526                           
 14527                           ;interrupt_manager.c: 67: {
 14528                           ;interrupt_manager.c: 68: PIN_MANAGER_IOC();
 14529  0030  3193  2392         	fcall	_PIN_MANAGER_IOC
 14530  0032                     i1l161:	
 14531                           ;interrupt_manager.c: 70: else
 14532                           ;interrupt_manager.c: 71: {
 14533                           
 14534                           ;interrupt_manager.c: 69: }
 14535                           
 14536  0032  0020               	movlb	0	; select bank0
 14537  0033  0820               	movf	??_INTERRUPT_InterruptManager,w
 14538  0034  00FF               	movwf	127
 14539  0035  107E               	bcf	126,0	;clear compiler interrupt flag (level 1)
 14540  0036  0009               	retfie
 14541  0037                     __end_of_INTERRUPT_InterruptManager:	
 14542                           
 14543                           	psect	text81
 14544  13D1                     __ptext81:	
 14545 ;; *************** function _TMR1_ISR *****************
 14546 ;; Defined at:
 14547 ;;		line 157 in file "mcc_generated_files/tmr1.c"
 14548 ;; Parameters:    Size  Location     Type
 14549 ;;		None
 14550 ;; Auto vars:     Size  Location     Type
 14551 ;;		None
 14552 ;; Return value:  Size  Location     Type
 14553 ;;                  1    wreg      void 
 14554 ;; Registers used:
 14555 ;;		wreg, status,2, status,0, pclath, cstack
 14556 ;; Tracked objects:
 14557 ;;		On entry : 0/0
 14558 ;;		On exit  : 0/0
 14559 ;;		Unchanged: 0/0
 14560 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14561 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14562 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14563 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14564 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14565 ;;Total ram usage:        0 bytes
 14566 ;; Hardware stack levels used:    1
 14567 ;; Hardware stack levels required when called:    2
 14568 ;; This function calls:
 14569 ;;		_TMR1_CallBack
 14570 ;; This function is called by:
 14571 ;;		_INTERRUPT_InterruptManager
 14572 ;; This function uses a non-reentrant model
 14573 ;;
 14574                           
 14575                           
 14576                           ;psect for function _TMR1_ISR
 14577  13D1                     _TMR1_ISR:	
 14578                           
 14579                           ;tmr1.c: 161: PIR1bits.TMR1IF = 0;
 14580                           
 14581                           ;incstack = 0
 14582                           ; Regs used in _TMR1_ISR: [wreg+status,2+status,0+pclath+cstack]
 14583  13D1  0020               	movlb	0	; select bank0
 14584  13D2  1011               	bcf	17,0	;volatile
 14585                           
 14586                           ;tmr1.c: 163: TMR1H = (timer1ReloadVal >> 8);
 14587  13D3  087D               	movf	_timer1ReloadVal+1,w	;volatile
 14588  13D4  0097               	movwf	23	;volatile
 14589                           
 14590                           ;tmr1.c: 164: TMR1L = timer1ReloadVal;
 14591  13D5  087C               	movf	_timer1ReloadVal,w	;volatile
 14592  13D6  0096               	movwf	22	;volatile
 14593                           
 14594                           ;tmr1.c: 168: TMR1_CallBack();
 14595  13D7  3194  2421         	fcall	_TMR1_CallBack
 14596  13D9  0008               	return
 14597  13DA                     __end_of_TMR1_ISR:	
 14598                           
 14599                           	psect	text82
 14600  1421                     __ptext82:	
 14601 ;; *************** function _TMR1_CallBack *****************
 14602 ;; Defined at:
 14603 ;;		line 171 in file "mcc_generated_files/tmr1.c"
 14604 ;; Parameters:    Size  Location     Type
 14605 ;;		None
 14606 ;; Auto vars:     Size  Location     Type
 14607 ;;		None
 14608 ;; Return value:  Size  Location     Type
 14609 ;;                  1    wreg      void 
 14610 ;; Registers used:
 14611 ;;		wreg, status,2, status,0, pclath, cstack
 14612 ;; Tracked objects:
 14613 ;;		On entry : 0/0
 14614 ;;		On exit  : 0/0
 14615 ;;		Unchanged: 0/0
 14616 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14617 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14618 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14619 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14620 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14621 ;;Total ram usage:        0 bytes
 14622 ;; Hardware stack levels used:    1
 14623 ;; Hardware stack levels required when called:    1
 14624 ;; This function calls:
 14625 ;;		Absolute function
 14626 ;;		_TMR1_DefaultInterruptHandler
 14627 ;;		_Timeout_increment
 14628 ;; This function is called by:
 14629 ;;		_TMR1_ISR
 14630 ;; This function uses a non-reentrant model
 14631 ;;
 14632                           
 14633                           
 14634                           ;psect for function _TMR1_CallBack
 14635  1421                     _TMR1_CallBack:	
 14636                           
 14637                           ;tmr1.c: 174: Timeout_increment();
 14638                           
 14639                           ;incstack = 0
 14640                           ; Regs used in _TMR1_CallBack: [wreg+status,2+status,0+pclath+cstack]
 14641  1421  3193  23FE  3194   	fcall	_Timeout_increment
 14642                           
 14643                           ;tmr1.c: 175: if(TMR1_InterruptHandler)
 14644  1424  0022               	movlb	2	; select bank2
 14645  1425  0866               	movf	_TMR1_InterruptHandler^(0+256),w
 14646  1426  0467               	iorwf	(_TMR1_InterruptHandler+1)^(0+256),w
 14647  1427  1903               	btfsc	3,2
 14648  1428  0008               	return
 14649                           
 14650                           ;tmr1.c: 176: {
 14651                           ;tmr1.c: 177: TMR1_InterruptHandler();
 14652  1429  0867               	movf	(_TMR1_InterruptHandler+1)^(0+256),w
 14653  142A  008A               	movwf	10
 14654  142B  0866               	movf	_TMR1_InterruptHandler^(0+256),w
 14655  142C  000A               	callw
 14656  142D  3194               	pagesel	$
 14657  142E  0008               	return
 14658  142F                     __end_of_TMR1_CallBack:	
 14659                           
 14660                           	psect	text83
 14661  13FE                     __ptext83:	
 14662 ;; *************** function _Timeout_increment *****************
 14663 ;; Defined at:
 14664 ;;		line 8 in file "timeout.c"
 14665 ;; Parameters:    Size  Location     Type
 14666 ;;		None
 14667 ;; Auto vars:     Size  Location     Type
 14668 ;;		None
 14669 ;; Return value:  Size  Location     Type
 14670 ;;                  1    wreg      void 
 14671 ;; Registers used:
 14672 ;;		wreg
 14673 ;; Tracked objects:
 14674 ;;		On entry : 0/0
 14675 ;;		On exit  : 0/0
 14676 ;;		Unchanged: 0/0
 14677 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14678 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14679 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14680 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14681 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14682 ;;Total ram usage:        0 bytes
 14683 ;; Hardware stack levels used:    1
 14684 ;; This function calls:
 14685 ;;		Nothing
 14686 ;; This function is called by:
 14687 ;;		_TMR1_CallBack
 14688 ;; This function uses a non-reentrant model
 14689 ;;
 14690                           
 14691                           
 14692                           ;psect for function _Timeout_increment
 14693  13FE                     _Timeout_increment:	
 14694                           
 14695                           ;timeout.c: 10: globalCounter+=10000;
 14696                           
 14697                           ;incstack = 0
 14698                           ; Regs used in _Timeout_increment: [wreg]
 14699  13FE  3010               	movlw	16
 14700  13FF  0021               	movlb	1	; select bank1
 14701  1400  07CE               	addwf	_globalCounter^(0+128),f	;volatile
 14702  1401  3027               	movlw	39
 14703  1402  3DCF               	addwfc	(_globalCounter+1)^(0+128),f	;volatile
 14704  1403  3000               	movlw	0
 14705  1404  3DD0               	addwfc	(_globalCounter+2)^(0+128),f	;volatile
 14706  1405  3000               	movlw	0
 14707  1406  3DD1               	addwfc	(_globalCounter+3)^(0+128),f	;volatile
 14708  1407  0008               	return
 14709  1408                     __end_of_Timeout_increment:	
 14710                           
 14711                           	psect	text84
 14712  1366                     __ptext84:	
 14713 ;; *************** function _TMR1_DefaultInterruptHandler *****************
 14714 ;; Defined at:
 14715 ;;		line 185 in file "mcc_generated_files/tmr1.c"
 14716 ;; Parameters:    Size  Location     Type
 14717 ;;		None
 14718 ;; Auto vars:     Size  Location     Type
 14719 ;;		None
 14720 ;; Return value:  Size  Location     Type
 14721 ;;                  1    wreg      void 
 14722 ;; Registers used:
 14723 ;;		None
 14724 ;; Tracked objects:
 14725 ;;		On entry : 0/0
 14726 ;;		On exit  : 0/0
 14727 ;;		Unchanged: 0/0
 14728 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14729 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14730 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14731 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14732 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14733 ;;Total ram usage:        0 bytes
 14734 ;; Hardware stack levels used:    1
 14735 ;; This function calls:
 14736 ;;		Nothing
 14737 ;; This function is called by:
 14738 ;;		_TMR1_Initialize
 14739 ;;		_TMR1_CallBack
 14740 ;; This function uses a non-reentrant model
 14741 ;;
 14742                           
 14743                           
 14744                           ;psect for function _TMR1_DefaultInterruptHandler
 14745  1366                     _TMR1_DefaultInterruptHandler:	
 14746                           
 14747                           ;incstack = 0
 14748                           ; Regs used in _TMR1_DefaultInterruptHandler: []
 14749  1366  0008               	return
 14750  1367                     __end_of_TMR1_DefaultInterruptHandler:	
 14751                           
 14752                           	psect	text85
 14753  1392                     __ptext85:	
 14754 ;; *************** function _PIN_MANAGER_IOC *****************
 14755 ;; Defined at:
 14756 ;;		line 110 in file "mcc_generated_files/pin_manager.c"
 14757 ;; Parameters:    Size  Location     Type
 14758 ;;		None
 14759 ;; Auto vars:     Size  Location     Type
 14760 ;;		None
 14761 ;; Return value:  Size  Location     Type
 14762 ;;                  1    wreg      void 
 14763 ;; Registers used:
 14764 ;;		wreg, status,2, status,0, pclath, cstack
 14765 ;; Tracked objects:
 14766 ;;		On entry : 0/0
 14767 ;;		On exit  : 0/0
 14768 ;;		Unchanged: 0/0
 14769 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14770 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14771 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14772 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14773 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14774 ;;Total ram usage:        0 bytes
 14775 ;; Hardware stack levels used:    1
 14776 ;; Hardware stack levels required when called:    2
 14777 ;; This function calls:
 14778 ;;		_IOCAF2_ISR
 14779 ;; This function is called by:
 14780 ;;		_INTERRUPT_InterruptManager
 14781 ;; This function uses a non-reentrant model
 14782 ;;
 14783                           
 14784                           
 14785                           ;psect for function _PIN_MANAGER_IOC
 14786  1392                     _PIN_MANAGER_IOC:	
 14787                           
 14788                           ;pin_manager.c: 113: if(IOCAFbits.IOCAF2 == 1)
 14789                           
 14790                           ;incstack = 0
 14791                           ; Regs used in _PIN_MANAGER_IOC: [wreg+status,2+status,0+pclath+cstack]
 14792  1392  0027               	movlb	7	; select bank7
 14793  1393  1D13               	btfss	19,2	;volatile
 14794  1394  0008               	return
 14795                           
 14796                           ;pin_manager.c: 114: {
 14797                           ;pin_manager.c: 115: IOCAF2_ISR();
 14798  1395  3194  2414         	fcall	_IOCAF2_ISR
 14799  1397  0008               	return
 14800  1398                     __end_of_PIN_MANAGER_IOC:	
 14801                           
 14802                           	psect	text86
 14803  1414                     __ptext86:	
 14804 ;; *************** function _IOCAF2_ISR *****************
 14805 ;; Defined at:
 14806 ;;		line 124 in file "mcc_generated_files/pin_manager.c"
 14807 ;; Parameters:    Size  Location     Type
 14808 ;;		None
 14809 ;; Auto vars:     Size  Location     Type
 14810 ;;		None
 14811 ;; Return value:  Size  Location     Type
 14812 ;;                  1    wreg      void 
 14813 ;; Registers used:
 14814 ;;		wreg, status,2, status,0, pclath, cstack
 14815 ;; Tracked objects:
 14816 ;;		On entry : 0/0
 14817 ;;		On exit  : 0/0
 14818 ;;		Unchanged: 0/0
 14819 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14820 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14821 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14822 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14823 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14824 ;;Total ram usage:        0 bytes
 14825 ;; Hardware stack levels used:    1
 14826 ;; Hardware stack levels required when called:    1
 14827 ;; This function calls:
 14828 ;;		Absolute function
 14829 ;;		_IOCAF2_DefaultInterruptHandler
 14830 ;; This function is called by:
 14831 ;;		_PIN_MANAGER_IOC
 14832 ;; This function uses a non-reentrant model
 14833 ;;
 14834                           
 14835                           
 14836                           ;psect for function _IOCAF2_ISR
 14837  1414                     _IOCAF2_ISR:	
 14838                           
 14839                           ;pin_manager.c: 129: if(IOCAF2_InterruptHandler)
 14840                           
 14841                           ;incstack = 0
 14842                           ; Regs used in _IOCAF2_ISR: [wreg+status,2+status,0+pclath+cstack]
 14843  1414  0022               	movlb	2	; select bank2
 14844  1415  0868               	movf	_IOCAF2_InterruptHandler^(0+256),w
 14845  1416  0469               	iorwf	(_IOCAF2_InterruptHandler+1)^(0+256),w
 14846  1417  1903               	btfsc	3,2
 14847  1418  2C1E               	goto	i1l4100
 14848                           
 14849                           ;pin_manager.c: 130: {
 14850                           ;pin_manager.c: 131: IOCAF2_InterruptHandler();
 14851  1419  0869               	movf	(_IOCAF2_InterruptHandler+1)^(0+256),w
 14852  141A  008A               	movwf	10
 14853  141B  0868               	movf	_IOCAF2_InterruptHandler^(0+256),w
 14854  141C  000A               	callw
 14855  141D  3194               	pagesel	$
 14856  141E                     i1l4100:	
 14857                           
 14858                           ;pin_manager.c: 132: }
 14859                           ;pin_manager.c: 133: IOCAFbits.IOCAF2 = 0;
 14860  141E  0027               	movlb	7	; select bank7
 14861  141F  1113               	bcf	19,2	;volatile
 14862  1420  0008               	return
 14863  1421                     __end_of_IOCAF2_ISR:	
 14864                           
 14865                           	psect	text87
 14866  1365                     __ptext87:	
 14867 ;; *************** function _IOCAF2_DefaultInterruptHandler *****************
 14868 ;; Defined at:
 14869 ;;		line 146 in file "mcc_generated_files/pin_manager.c"
 14870 ;; Parameters:    Size  Location     Type
 14871 ;;		None
 14872 ;; Auto vars:     Size  Location     Type
 14873 ;;		None
 14874 ;; Return value:  Size  Location     Type
 14875 ;;                  1    wreg      void 
 14876 ;; Registers used:
 14877 ;;		None
 14878 ;; Tracked objects:
 14879 ;;		On entry : 0/0
 14880 ;;		On exit  : 0/0
 14881 ;;		Unchanged: 0/0
 14882 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14883 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14884 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14885 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14886 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14887 ;;Total ram usage:        0 bytes
 14888 ;; Hardware stack levels used:    1
 14889 ;; This function calls:
 14890 ;;		Nothing
 14891 ;; This function is called by:
 14892 ;;		_PIN_MANAGER_Initialize
 14893 ;;		_IOCAF2_ISR
 14894 ;; This function uses a non-reentrant model
 14895 ;;
 14896                           
 14897                           
 14898                           ;psect for function _IOCAF2_DefaultInterruptHandler
 14899  1365                     _IOCAF2_DefaultInterruptHandler:	
 14900                           
 14901                           ;incstack = 0
 14902                           ; Regs used in _IOCAF2_DefaultInterruptHandler: []
 14903  1365  0008               	return
 14904  1366                     __end_of_IOCAF2_DefaultInterruptHandler:	
 14905                           
 14906                           	psect	text88
 14907  0539                     __ptext88:	
 14908 ;; *************** function _I2C2_ISR *****************
 14909 ;; Defined at:
 14910 ;;		line 233 in file "mcc_generated_files/i2c2.c"
 14911 ;; Parameters:    Size  Location     Type
 14912 ;;		None
 14913 ;; Auto vars:     Size  Location     Type
 14914 ;;		None
 14915 ;; Return value:  Size  Location     Type
 14916 ;;                  1    wreg      void 
 14917 ;; Registers used:
 14918 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14919 ;; Tracked objects:
 14920 ;;		On entry : 0/0
 14921 ;;		On exit  : 0/0
 14922 ;;		Unchanged: 0/0
 14923 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14924 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14925 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14926 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14927 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14928 ;;Total ram usage:        4 bytes
 14929 ;; Hardware stack levels used:    1
 14930 ;; Hardware stack levels required when called:    1
 14931 ;; This function calls:
 14932 ;;		_I2C2_FunctionComplete
 14933 ;;		_I2C2_Stop
 14934 ;; This function is called by:
 14935 ;;		_INTERRUPT_InterruptManager
 14936 ;; This function uses a non-reentrant model
 14937 ;;
 14938                           
 14939                           
 14940                           ;psect for function _I2C2_ISR
 14941  0539                     _I2C2_ISR:	
 14942                           
 14943                           ;i2c2.c: 236: static uint8_t *pi2c_buf_ptr;
 14944                           ;i2c2.c: 237: static uint16_t i2c_address = 0;
 14945                           ;i2c2.c: 238: static uint8_t i2c_bytes_left = 0;
 14946                           ;i2c2.c: 239: static uint8_t i2c_10bit_address_restart = 0;
 14947                           ;i2c2.c: 241: PIR4bits.SSP2IF = 0;
 14948                           
 14949                           ;incstack = 0
 14950                           ; Regs used in _I2C2_ISR: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 14951  0539  0020               	movlb	0	; select bank0
 14952  053A  1014               	bcf	20,0	;volatile
 14953                           
 14954                           ;i2c2.c: 245: if(SSP2CON1bits.WCOL)
 14955  053B  0024               	movlb	4	; select bank4
 14956  053C  1F9D               	btfss	29,7	;volatile
 14957  053D  2E77               	goto	i1l4616
 14958                           
 14959                           ;i2c2.c: 246: {
 14960                           ;i2c2.c: 248: SSP2CON1bits.WCOL = 0;
 14961  053E  139D               	bcf	29,7	;volatile
 14962                           
 14963                           ;i2c2.c: 249: i2c2_state = S_MASTER_IDLE;
 14964  053F  01F9               	clrf	_i2c2_state
 14965                           
 14966                           ;i2c2.c: 250: *(p_i2c2_current->pTrFlag) = I2C2_MESSAGE_FAIL;
 14967  0540  0877               	movf	_p_i2c2_current,w
 14968  0541  3E02               	addlw	2
 14969  0542  0086               	movwf	6
 14970  0543  3001               	movlw	1	; select bank2/3
 14971  0544  0087               	movwf	7
 14972  0545  3F40               	moviw [0]fsr1
 14973  0546  00F3               	movwf	??_I2C2_ISR
 14974  0547  3F41               	moviw [1]fsr1
 14975  0548  00F4               	movwf	??_I2C2_ISR+1
 14976  0549  0873               	movf	??_I2C2_ISR,w
 14977  054A  0086               	movwf	6
 14978  054B  0874               	movf	??_I2C2_ISR+1,w
 14979  054C  0087               	movwf	7
 14980  054D  3001               	movlw	1
 14981  054E  0081               	movwf	1
 14982                           
 14983                           ;i2c2.c: 253: p_i2c2_current = (0);
 14984  054F  01F7               	clrf	_p_i2c2_current
 14985                           
 14986                           ;i2c2.c: 255: return;
 14987  0550  0008               	return
 14988  0551                     i1l288:	
 14989                           ;i2c2.c: 260: {
 14990                           ;i2c2.c: 261: case S_MASTER_IDLE:
 14991                           
 14992                           ;i2c2.c: 256: }
 14993                           ;i2c2.c: 259: switch(i2c2_state)
 14994                           
 14995                           
 14996                           ;i2c2.c: 263: if(i2c2_object.trStatus.s.empty != 1)
 14997  0551  0021               	movlb	1	; select bank1
 14998  0552  18CB               	btfsc	(_i2c2_object^(0+128)+2),1
 14999  0553  0008               	return
 15000                           
 15001                           ;i2c2.c: 264: {
 15002                           ;i2c2.c: 266: p_i2c2_current = i2c2_object.pTrHead;
 15003  0554  084A               	movf	(low ((_i2c2_object| 0+1)))^(0+128),w
 15004  0555  00F3               	movwf	??_I2C2_ISR
 15005  0556  0873               	movf	??_I2C2_ISR,w
 15006  0557  00F7               	movwf	_p_i2c2_current
 15007                           
 15008                           ;i2c2.c: 267: i2c2_trb_count = i2c2_object.pTrHead->count;
 15009  0558  084A               	movf	(low ((_i2c2_object| 0+1)))^(0+128),w
 15010  0559  0086               	movwf	6
 15011  055A  3001               	movlw	1	; select bank2/3
 15012  055B  0087               	movwf	7
 15013  055C  0801               	movf	1,w
 15014  055D  00F3               	movwf	??_I2C2_ISR
 15015  055E  0873               	movf	??_I2C2_ISR,w
 15016  055F  00E2               	movwf	_i2c2_trb_count^(0+128)
 15017                           
 15018                           ;i2c2.c: 268: p_i2c2_trb_current = i2c2_object.pTrHead->ptrb_list;
 15019  0560  084A               	movf	(low ((_i2c2_object| 0+1)))^(0+128),w
 15020  0561  0086               	movwf	6
 15021  0562  3001               	movlw	1	; select bank2/3
 15022  0563  0087               	movwf	7
 15023  0564  3001               	movlw	1	; select bank2/3
 15024  0565  3F41               	moviw [1]fsr1
 15025  0566  00F8               	movwf	_p_i2c2_trb_current
 15026                           
 15027                           ;i2c2.c: 270: i2c2_object.pTrHead++;
 15028  0567  3004               	movlw	4
 15029  0568  00F3               	movwf	??_I2C2_ISR
 15030  0569  0873               	movf	??_I2C2_ISR,w
 15031  056A  07CA               	addwf	(low ((_i2c2_object| 0+1)))^(0+128),f
 15032                           
 15033                           ;i2c2.c: 273: if(i2c2_object.pTrHead == (i2c2_tr_queue + 1))
 15034  056B  084A               	movf	(low ((_i2c2_object| 0+1)))^(0+128),w
 15035  056C  3A66               	xorlw	(low ((_i2c2_tr_queue| (0+256)+4)))& (0+255)
 15036  056D  1D03               	skipz
 15037  056E  2D73               	goto	i1l4506
 15038                           
 15039                           ;i2c2.c: 274: {
 15040                           ;i2c2.c: 276: i2c2_object.pTrHead = i2c2_tr_queue;
 15041  056F  3062               	movlw	(low (_i2c2_tr_queue| (0+256)))& (0+255)
 15042  0570  00F3               	movwf	??_I2C2_ISR
 15043  0571  0873               	movf	??_I2C2_ISR,w
 15044  0572  00CA               	movwf	(low ((_i2c2_object| 0+1)))^(0+128)
 15045  0573                     i1l4506:	
 15046                           
 15047                           ;i2c2.c: 277: }
 15048                           ;i2c2.c: 281: i2c2_object.trStatus.s.full = 0;
 15049  0573  104B               	bcf	(_i2c2_object^(0+128)+2),0
 15050                           
 15051                           ;i2c2.c: 284: if(i2c2_object.pTrHead == i2c2_object.pTrTail)
 15052  0574  084A               	movf	(low ((_i2c2_object| 0+1)))^(0+128),w
 15053  0575  0649               	xorwf	_i2c2_object^(0+128),w
 15054  0576  1903               	btfsc	3,2
 15055                           
 15056                           ;i2c2.c: 285: {
 15057                           ;i2c2.c: 287: i2c2_object.trStatus.s.empty = 1;
 15058  0577  14CB               	bsf	(_i2c2_object^(0+128)+2),1
 15059                           
 15060                           ;i2c2.c: 288: }
 15061                           ;i2c2.c: 291: SSP2CON2bits.SEN = 1;
 15062  0578  0024               	movlb	4	; select bank4
 15063  0579  141E               	bsf	30,0	;volatile
 15064                           
 15065                           ;i2c2.c: 294: i2c2_state = S_MASTER_SEND_ADDR;
 15066  057A  3002               	movlw	2
 15067  057B  00F3               	movwf	??_I2C2_ISR
 15068  057C  0873               	movf	??_I2C2_ISR,w
 15069  057D  00F9               	movwf	_i2c2_state
 15070                           
 15071                           ;i2c2.c: 295: }
 15072                           ;i2c2.c: 297: break;
 15073  057E  0008               	return
 15074  057F                     i1l293:	
 15075                           ;i2c2.c: 299: case S_MASTER_RESTART:
 15076                           
 15077                           
 15078                           ;i2c2.c: 304: SSP2CON2bits.RSEN = 1;
 15079  057F  0024               	movlb	4	; select bank4
 15080  0580  149E               	bsf	30,1	;volatile
 15081                           
 15082                           ;i2c2.c: 307: i2c2_state = S_MASTER_SEND_ADDR;
 15083  0581  3002               	movlw	2
 15084  0582  00F3               	movwf	??_I2C2_ISR
 15085  0583  0873               	movf	??_I2C2_ISR,w
 15086  0584  00F9               	movwf	_i2c2_state
 15087                           
 15088                           ;i2c2.c: 309: break;
 15089  0585  0008               	return
 15090  0586                     i1l294:	
 15091                           ;i2c2.c: 311: case S_MASTER_SEND_ADDR_10BIT_LSB:
 15092                           
 15093                           
 15094                           ;i2c2.c: 313: if(SSP2CON2bits.ACKSTAT)
 15095  0586  0024               	movlb	4	; select bank4
 15096  0587  1F1E               	btfss	30,6	;volatile
 15097  0588  2D92               	goto	i1l4518
 15098                           
 15099                           ;i2c2.c: 314: {
 15100                           ;i2c2.c: 315: i2c2_object.i2cErrors++;
 15101  0589  3001               	movlw	1
 15102  058A  00F3               	movwf	??_I2C2_ISR
 15103  058B  0873               	movf	??_I2C2_ISR,w
 15104  058C  0021               	movlb	1	; select bank1
 15105  058D  07CD               	addwf	(_i2c2_object^(0+128)+4),f
 15106                           
 15107                           ;i2c2.c: 316: I2C2_Stop(I2C2_MESSAGE_ADDRESS_NO_ACK);
 15108  058E  3004               	movlw	4
 15109  058F  3195  25CF         	fcall	_I2C2_Stop
 15110                           
 15111                           ;i2c2.c: 317: }
 15112  0591  0008               	return
 15113  0592                     i1l4518:	
 15114                           
 15115                           ;i2c2.c: 318: else
 15116                           ;i2c2.c: 319: {
 15117                           ;i2c2.c: 321: SSP2BUF = (i2c_address >> 1) & 0x00FF;
 15118  0592  087B               	movf	I2C2_ISR@i2c_address+1,w
 15119  0593  00F4               	movwf	??_I2C2_ISR+1
 15120  0594  087A               	movf	I2C2_ISR@i2c_address,w
 15121  0595  00F3               	movwf	??_I2C2_ISR
 15122  0596  36F4               	lsrf	??_I2C2_ISR+1,f
 15123  0597  0CF3               	rrf	??_I2C2_ISR,f
 15124  0598  0873               	movf	??_I2C2_ISR,w
 15125  0599  0024               	movlb	4	; select bank4
 15126  059A  0099               	movwf	25	;volatile
 15127                           
 15128                           ;i2c2.c: 324: if(i2c_address & 0x01)
 15129  059B  1C7A               	btfss	I2C2_ISR@i2c_address,0
 15130  059C  2DA2               	goto	i1l4524
 15131                           
 15132                           ;i2c2.c: 325: {
 15133                           ;i2c2.c: 328: i2c2_state = S_MASTER_10BIT_RESTART;
 15134  059D  300B               	movlw	11
 15135  059E  00F3               	movwf	??_I2C2_ISR
 15136  059F  0873               	movf	??_I2C2_ISR,w
 15137  05A0  00F9               	movwf	_i2c2_state
 15138                           
 15139                           ;i2c2.c: 329: }
 15140  05A1  0008               	return
 15141  05A2                     i1l4524:	
 15142                           
 15143                           ;i2c2.c: 330: else
 15144                           ;i2c2.c: 331: {
 15145                           ;i2c2.c: 333: i2c2_state = S_MASTER_SEND_DATA;
 15146  05A2  3003               	movlw	3
 15147  05A3  00F3               	movwf	??_I2C2_ISR
 15148  05A4  0873               	movf	??_I2C2_ISR,w
 15149  05A5  00F9               	movwf	_i2c2_state
 15150                           
 15151                           ;i2c2.c: 334: }
 15152                           ;i2c2.c: 335: }
 15153                           ;i2c2.c: 337: break;
 15154  05A6  0008               	return
 15155  05A7                     i1l299:	
 15156                           ;i2c2.c: 339: case S_MASTER_10BIT_RESTART:
 15157                           
 15158                           
 15159                           ;i2c2.c: 341: if(SSP2CON2bits.ACKSTAT)
 15160  05A7  0024               	movlb	4	; select bank4
 15161  05A8  1F1E               	btfss	30,6	;volatile
 15162  05A9  2DB3               	goto	i1l300
 15163                           
 15164                           ;i2c2.c: 342: {
 15165                           ;i2c2.c: 343: i2c2_object.i2cErrors++;
 15166  05AA  3001               	movlw	1
 15167  05AB  00F3               	movwf	??_I2C2_ISR
 15168  05AC  0873               	movf	??_I2C2_ISR,w
 15169  05AD  0021               	movlb	1	; select bank1
 15170  05AE  07CD               	addwf	(_i2c2_object^(0+128)+4),f
 15171                           
 15172                           ;i2c2.c: 344: I2C2_Stop(I2C2_MESSAGE_ADDRESS_NO_ACK);
 15173  05AF  3004               	movlw	4
 15174  05B0  3195  25CF         	fcall	_I2C2_Stop
 15175                           
 15176                           ;i2c2.c: 345: }
 15177  05B2  0008               	return
 15178  05B3                     i1l300:	
 15179                           
 15180                           ;i2c2.c: 346: else
 15181                           ;i2c2.c: 347: {
 15182                           ;i2c2.c: 350: SSP2CON2bits.RSEN = 1;
 15183  05B3  149E               	bsf	30,1	;volatile
 15184                           
 15185                           ;i2c2.c: 354: i2c_address = 0x00F0 | ((i2c_address >> 8) & 0x0006);
 15186  05B4  087B               	movf	I2C2_ISR@i2c_address+1,w
 15187  05B5  00F4               	movwf	??_I2C2_ISR+1
 15188  05B6  087A               	movf	I2C2_ISR@i2c_address,w
 15189  05B7  00F3               	movwf	??_I2C2_ISR
 15190  05B8  0874               	movf	??_I2C2_ISR+1,w
 15191  05B9  00F3               	movwf	??_I2C2_ISR
 15192  05BA  01F4               	clrf	??_I2C2_ISR+1
 15193  05BB  3006               	movlw	6
 15194  05BC  0573               	andwf	??_I2C2_ISR,w
 15195  05BD  00F5               	movwf	??_I2C2_ISR+2
 15196  05BE  3000               	movlw	0
 15197  05BF  0574               	andwf	??_I2C2_ISR+1,w
 15198  05C0  00F6               	movwf	??_I2C2_ISR+3
 15199  05C1  30F0               	movlw	240
 15200  05C2  0475               	iorwf	??_I2C2_ISR+2,w
 15201  05C3  00FA               	movwf	I2C2_ISR@i2c_address
 15202  05C4  3000               	movlw	0
 15203  05C5  0476               	iorwf	??_I2C2_ISR+3,w
 15204  05C6  00FB               	movwf	I2C2_ISR@i2c_address+1
 15205                           
 15206                           ;i2c2.c: 357: i2c_address |= 0x0001;
 15207  05C7  147A               	bsf	I2C2_ISR@i2c_address,0
 15208                           
 15209                           ;i2c2.c: 360: i2c_10bit_address_restart = 1;
 15210  05C8  0021               	movlb	1	; select bank1
 15211  05C9  01E0               	clrf	I2C2_ISR@i2c_10bit_address_restart^(0+128)
 15212  05CA  0AE0               	incf	I2C2_ISR@i2c_10bit_address_restart^(0+128),f
 15213                           
 15214                           ;i2c2.c: 363: i2c2_state = S_MASTER_SEND_ADDR;
 15215  05CB  3002               	movlw	2
 15216  05CC  00F3               	movwf	??_I2C2_ISR
 15217  05CD  0873               	movf	??_I2C2_ISR,w
 15218  05CE  00F9               	movwf	_i2c2_state
 15219                           
 15220                           ;i2c2.c: 364: }
 15221                           ;i2c2.c: 366: break;
 15222  05CF  0008               	return
 15223  05D0                     i1l4538:	
 15224                           ;i2c2.c: 368: case S_MASTER_SEND_ADDR:
 15225                           
 15226                           
 15227                           ;i2c2.c: 381: if(i2c_10bit_address_restart != 1)
 15228  05D0  0021               	movlb	1	; select bank1
 15229  05D1  0360               	decf	I2C2_ISR@i2c_10bit_address_restart^(0+128),w
 15230  05D2  1903               	btfsc	3,2
 15231  05D3  2DEC               	goto	i1l4556
 15232                           
 15233                           ;i2c2.c: 382: {
 15234                           ;i2c2.c: 384: i2c_address = p_i2c2_trb_current->address;
 15235  05D4  0878               	movf	_p_i2c2_trb_current,w
 15236  05D5  0086               	movwf	6
 15237  05D6  3001               	movlw	1	; select bank2/3
 15238  05D7  0087               	movwf	7
 15239  05D8  3F40               	moviw [0]fsr1
 15240  05D9  00FA               	movwf	I2C2_ISR@i2c_address
 15241  05DA  3F41               	moviw [1]fsr1
 15242  05DB  00FB               	movwf	I2C2_ISR@i2c_address+1
 15243                           
 15244                           ;i2c2.c: 385: pi2c_buf_ptr = p_i2c2_trb_current->pbuffer;
 15245  05DC  0878               	movf	_p_i2c2_trb_current,w
 15246  05DD  3E03               	addlw	3
 15247  05DE  0086               	movwf	6
 15248  05DF  3001               	movlw	1	; select bank2/3
 15249  05E0  0087               	movwf	7
 15250  05E1  3F40               	moviw [0]fsr1
 15251  05E2  00D8               	movwf	I2C2_ISR@pi2c_buf_ptr^(0+128)
 15252  05E3  3F41               	moviw [1]fsr1
 15253  05E4  00D9               	movwf	(I2C2_ISR@pi2c_buf_ptr+1)^(0+128)
 15254                           
 15255                           ;i2c2.c: 386: i2c_bytes_left = p_i2c2_trb_current->length;
 15256  05E5  0878               	movf	_p_i2c2_trb_current,w
 15257  05E6  0086               	movwf	6
 15258  05E7  3001               	movlw	1	; select bank2/3
 15259  05E8  0087               	movwf	7
 15260  05E9  3001               	movlw	1	; select bank2/3
 15261  05EA  3F42               	moviw [2]fsr1
 15262  05EB  00E1               	movwf	I2C2_ISR@i2c_bytes_left^(0+128)
 15263  05EC                     i1l4556:	
 15264                           ;i2c2.c: 407: }
 15265                           ;i2c2.c: 408: }
 15266                           
 15267                           ;i2c2.c: 406: i2c_10bit_address_restart = 0;
 15268                           
 15269                           ;i2c2.c: 404: i2c2_state = S_MASTER_ACK_ADDR;
 15270                           
 15271                           ;i2c2.c: 400: else
 15272                           ;i2c2.c: 401: {
 15273                           ;i2c2.c: 403: SSP2BUF = i2c_address;
 15274                           
 15275                           ;i2c2.c: 399: }
 15276                           
 15277                           ;i2c2.c: 398: i2c2_state = S_MASTER_SEND_ADDR_10BIT_LSB;
 15278                           
 15279                           ;i2c2.c: 393: {
 15280                           ;i2c2.c: 397: SSP2BUF = 0xF0 | ((i2c_address >> 8) & 0x0006);
 15281                           
 15282                           ;i2c2.c: 391: {
 15283                           ;i2c2.c: 392: if (0 == i2c_10bit_address_restart)
 15284                           
 15285                           ;i2c2.c: 387: }
 15286                           ;i2c2.c: 390: if(!1 && (0x0 != i2c_address))
 15287                           
 15288                           
 15289                           ;i2c2.c: 409: else
 15290                           ;i2c2.c: 410: {
 15291                           ;i2c2.c: 412: SSP2BUF = i2c_address;
 15292  05EC  087A               	movf	I2C2_ISR@i2c_address,w
 15293  05ED  0024               	movlb	4	; select bank4
 15294  05EE  0099               	movwf	25	;volatile
 15295                           
 15296                           ;i2c2.c: 413: if(i2c_address & 0x01)
 15297  05EF  1C7A               	btfss	I2C2_ISR@i2c_address,0
 15298  05F0  2DF6               	goto	i1l4562
 15299                           
 15300                           ;i2c2.c: 414: {
 15301                           ;i2c2.c: 416: i2c2_state = S_MASTER_ACK_ADDR;
 15302  05F1  3005               	movlw	5
 15303  05F2  00F3               	movwf	??_I2C2_ISR
 15304  05F3  0873               	movf	??_I2C2_ISR,w
 15305  05F4  00F9               	movwf	_i2c2_state
 15306                           
 15307                           ;i2c2.c: 417: }
 15308  05F5  0008               	return
 15309  05F6                     i1l4562:	
 15310                           
 15311                           ;i2c2.c: 418: else
 15312                           ;i2c2.c: 419: {
 15313                           ;i2c2.c: 421: i2c2_state = S_MASTER_SEND_DATA;
 15314  05F6  3003               	movlw	3
 15315  05F7  00F3               	movwf	??_I2C2_ISR
 15316  05F8  0873               	movf	??_I2C2_ISR,w
 15317  05F9  00F9               	movwf	_i2c2_state
 15318                           
 15319                           ;i2c2.c: 422: }
 15320                           ;i2c2.c: 423: }
 15321                           ;i2c2.c: 424: break;
 15322  05FA  0008               	return
 15323  05FB                     i1l310:	
 15324                           ;i2c2.c: 426: case S_MASTER_SEND_DATA:
 15325                           
 15326                           
 15327                           ;i2c2.c: 429: if(SSP2CON2bits.ACKSTAT)
 15328  05FB  0024               	movlb	4	; select bank4
 15329  05FC  1F1E               	btfss	30,6	;volatile
 15330  05FD  2E09               	goto	i1l4570
 15331                           
 15332                           ;i2c2.c: 430: {
 15333                           ;i2c2.c: 432: i2c2_object.i2cErrors++;
 15334  05FE  3001               	movlw	1
 15335  05FF  00F3               	movwf	??_I2C2_ISR
 15336  0600  0873               	movf	??_I2C2_ISR,w
 15337  0601  0021               	movlb	1	; select bank1
 15338  0602  07CD               	addwf	(_i2c2_object^(0+128)+4),f
 15339                           
 15340                           ;i2c2.c: 435: SSP2CON2bits.ACKSTAT = 0;
 15341  0603  0024               	movlb	4	; select bank4
 15342  0604  131E               	bcf	30,6	;volatile
 15343                           
 15344                           ;i2c2.c: 438: I2C2_Stop(I2C2_DATA_NO_ACK);
 15345  0605  3005               	movlw	5
 15346  0606  3195  25CF         	fcall	_I2C2_Stop
 15347                           
 15348                           ;i2c2.c: 440: }
 15349  0608  0008               	return
 15350  0609                     i1l4570:	
 15351                           
 15352                           ;i2c2.c: 441: else
 15353                           ;i2c2.c: 442: {
 15354                           ;i2c2.c: 444: if(i2c_bytes_left-- == 0U)
 15355  0609  3001               	movlw	1
 15356  060A  0021               	movlb	1	; select bank1
 15357  060B  02E1               	subwf	I2C2_ISR@i2c_bytes_left^(0+128),f
 15358  060C  0A61               	incf	I2C2_ISR@i2c_bytes_left^(0+128),w
 15359  060D  1D03               	btfss	3,2
 15360  060E  2E22               	goto	i1l4578
 15361                           
 15362                           ;i2c2.c: 445: {
 15363                           ;i2c2.c: 449: p_i2c2_trb_current++;
 15364  060F  3005               	movlw	5
 15365  0610  00F3               	movwf	??_I2C2_ISR
 15366  0611  0873               	movf	??_I2C2_ISR,w
 15367  0612  07F8               	addwf	_p_i2c2_trb_current,f
 15368                           
 15369                           ;i2c2.c: 452: if(--i2c2_trb_count == 0)
 15370  0613  3001               	movlw	1
 15371  0614  02E2               	subwf	_i2c2_trb_count^(0+128),f
 15372  0615  1D03               	btfss	3,2
 15373  0616  2E1B               	goto	i1l314
 15374                           
 15375                           ;i2c2.c: 453: {
 15376                           ;i2c2.c: 454: I2C2_Stop(I2C2_MESSAGE_COMPLETE);
 15377  0617  3000               	movlw	0
 15378  0618  3195  25CF         	fcall	_I2C2_Stop
 15379                           
 15380                           ;i2c2.c: 455: }
 15381  061A  0008               	return
 15382  061B                     i1l314:	
 15383                           
 15384                           ;i2c2.c: 456: else
 15385                           ;i2c2.c: 457: {
 15386                           ;i2c2.c: 464: SSP2CON2bits.RSEN = 1;
 15387  061B  0024               	movlb	4	; select bank4
 15388  061C  149E               	bsf	30,1	;volatile
 15389                           
 15390                           ;i2c2.c: 467: i2c2_state = S_MASTER_SEND_ADDR;
 15391  061D  3002               	movlw	2
 15392  061E  00F3               	movwf	??_I2C2_ISR
 15393  061F  0873               	movf	??_I2C2_ISR,w
 15394  0620  00F9               	movwf	_i2c2_state
 15395                           
 15396                           ;i2c2.c: 469: }
 15397                           ;i2c2.c: 470: }
 15398  0621  0008               	return
 15399  0622                     i1l4578:	
 15400                           
 15401                           ;i2c2.c: 471: else
 15402                           ;i2c2.c: 472: {
 15403                           ;i2c2.c: 474: SSP2BUF = *pi2c_buf_ptr++;
 15404  0622  0021               	movlb	1	; select bank1
 15405  0623  0858               	movf	I2C2_ISR@pi2c_buf_ptr^(0+128),w
 15406  0624  0086               	movwf	6
 15407  0625  0859               	movf	(I2C2_ISR@pi2c_buf_ptr+1)^(0+128),w
 15408  0626  0087               	movwf	7
 15409  0627  0801               	movf	1,w
 15410  0628  0024               	movlb	4	; select bank4
 15411  0629  0099               	movwf	25	;volatile
 15412  062A  3001               	movlw	1
 15413  062B  0021               	movlb	1	; select bank1
 15414  062C  07D8               	addwf	I2C2_ISR@pi2c_buf_ptr^(0+128),f
 15415  062D  3000               	movlw	0
 15416  062E  3DD9               	addwfc	(I2C2_ISR@pi2c_buf_ptr+1)^(0+128),f
 15417                           
 15418                           ;i2c2.c: 475: }
 15419                           ;i2c2.c: 476: }
 15420                           ;i2c2.c: 477: break;
 15421  062F  0008               	return
 15422  0630                     i1l317:	
 15423                           ;i2c2.c: 479: case S_MASTER_ACK_ADDR:
 15424                           
 15425                           
 15426                           ;i2c2.c: 482: if(SSP2CON2bits.ACKSTAT)
 15427  0630  0024               	movlb	4	; select bank4
 15428  0631  1F1E               	btfss	30,6	;volatile
 15429  0632  2E3E               	goto	i1l318
 15430                           
 15431                           ;i2c2.c: 483: {
 15432                           ;i2c2.c: 486: i2c2_object.i2cErrors++;
 15433  0633  3001               	movlw	1
 15434  0634  00F3               	movwf	??_I2C2_ISR
 15435  0635  0873               	movf	??_I2C2_ISR,w
 15436  0636  0021               	movlb	1	; select bank1
 15437  0637  07CD               	addwf	(_i2c2_object^(0+128)+4),f
 15438                           
 15439                           ;i2c2.c: 489: I2C2_Stop(I2C2_MESSAGE_ADDRESS_NO_ACK);
 15440  0638  3004               	movlw	4
 15441  0639  3195  25CF         	fcall	_I2C2_Stop
 15442                           
 15443                           ;i2c2.c: 492: SSP2CON2bits.ACKSTAT = 0;
 15444  063B  0024               	movlb	4	; select bank4
 15445  063C  131E               	bcf	30,6	;volatile
 15446                           
 15447                           ;i2c2.c: 493: }
 15448  063D  0008               	return
 15449  063E                     i1l318:	
 15450                           
 15451                           ;i2c2.c: 494: else
 15452                           ;i2c2.c: 495: {
 15453                           ;i2c2.c: 496: SSP2CON2bits.RCEN = 1;
 15454  063E  159E               	bsf	30,3	;volatile
 15455                           
 15456                           ;i2c2.c: 497: i2c2_state = S_MASTER_ACK_RCV_DATA;
 15457  063F  3008               	movlw	8
 15458  0640  00F3               	movwf	??_I2C2_ISR
 15459  0641  0873               	movf	??_I2C2_ISR,w
 15460  0642  00F9               	movwf	_i2c2_state
 15461                           
 15462                           ;i2c2.c: 498: }
 15463                           ;i2c2.c: 499: break;
 15464  0643  0008               	return
 15465  0644                     i1l4590:	
 15466                           ;i2c2.c: 501: case S_MASTER_RCV_DATA:
 15467                           
 15468                           
 15469                           ;i2c2.c: 506: i2c2_state = S_MASTER_ACK_RCV_DATA;
 15470  0644  3008               	movlw	8
 15471  0645  00F3               	movwf	??_I2C2_ISR
 15472  0646  0873               	movf	??_I2C2_ISR,w
 15473  0647  00F9               	movwf	_i2c2_state
 15474                           
 15475                           ;i2c2.c: 509: SSP2CON2bits.RCEN = 1;
 15476  0648  0024               	movlb	4	; select bank4
 15477  0649  159E               	bsf	30,3	;volatile
 15478                           
 15479                           ;i2c2.c: 511: break;
 15480  064A  0008               	return
 15481  064B                     i1l4594:	
 15482                           ;i2c2.c: 513: case S_MASTER_ACK_RCV_DATA:
 15483                           
 15484                           
 15485                           ;i2c2.c: 516: *pi2c_buf_ptr++ = SSP2BUF;
 15486  064B  0021               	movlb	1	; select bank1
 15487  064C  0858               	movf	I2C2_ISR@pi2c_buf_ptr^(0+128),w
 15488  064D  0086               	movwf	6
 15489  064E  0859               	movf	(I2C2_ISR@pi2c_buf_ptr+1)^(0+128),w
 15490  064F  0087               	movwf	7
 15491  0650  0024               	movlb	4	; select bank4
 15492  0651  0819               	movf	25,w	;volatile
 15493  0652  0081               	movwf	1
 15494  0653  3001               	movlw	1
 15495  0654  0021               	movlb	1	; select bank1
 15496  0655  07D8               	addwf	I2C2_ISR@pi2c_buf_ptr^(0+128),f
 15497  0656  3000               	movlw	0
 15498  0657  3DD9               	addwfc	(I2C2_ISR@pi2c_buf_ptr+1)^(0+128),f
 15499                           
 15500                           ;i2c2.c: 519: if(--i2c_bytes_left)
 15501  0658  3001               	movlw	1
 15502  0659  02E1               	subwf	I2C2_ISR@i2c_bytes_left^(0+128),f
 15503  065A  1903               	btfsc	3,2
 15504  065B  2E63               	goto	i1l322
 15505                           
 15506                           ;i2c2.c: 520: {
 15507                           ;i2c2.c: 526: SSP2CON2bits.ACKDT = 0;
 15508  065C  0024               	movlb	4	; select bank4
 15509  065D  129E               	bcf	30,5	;volatile
 15510                           
 15511                           ;i2c2.c: 529: i2c2_state = S_MASTER_RCV_DATA;
 15512  065E  3006               	movlw	6
 15513  065F  00F3               	movwf	??_I2C2_ISR
 15514  0660  0873               	movf	??_I2C2_ISR,w
 15515  0661  00F9               	movwf	_i2c2_state
 15516                           
 15517                           ;i2c2.c: 530: }
 15518  0662  2E67               	goto	i1l4606
 15519  0663                     i1l322:	
 15520                           
 15521                           ;i2c2.c: 531: else
 15522                           ;i2c2.c: 532: {
 15523                           ;i2c2.c: 536: SSP2CON2bits.ACKDT = 1;
 15524  0663  0024               	movlb	4	; select bank4
 15525  0664  169E               	bsf	30,5	;volatile
 15526                           
 15527                           ;i2c2.c: 538: I2C2_FunctionComplete();
 15528  0665  3194  245E         	fcall	_I2C2_FunctionComplete
 15529  0667                     i1l4606:	
 15530                           
 15531                           ;i2c2.c: 539: }
 15532                           ;i2c2.c: 542: SSP2CON2bits.ACKEN = 1;
 15533  0667  0024               	movlb	4	; select bank4
 15534  0668  161E               	bsf	30,4	;volatile
 15535                           
 15536                           ;i2c2.c: 543: break;
 15537  0669  0008               	return
 15538  066A                     i1l4608:	
 15539                           ;i2c2.c: 545: case S_MASTER_RCV_STOP:
 15540                           
 15541                           
 15542                           ;i2c2.c: 546: case S_MASTER_SEND_STOP:
 15543                           ;i2c2.c: 549: I2C2_Stop(I2C2_MESSAGE_COMPLETE);
 15544  066A  3000               	movlw	0
 15545  066B  3195  25CF         	fcall	_I2C2_Stop
 15546                           
 15547                           ;i2c2.c: 550: break;
 15548  066D  0008               	return
 15549  066E                     i1l4610:	
 15550                           ;i2c2.c: 552: default:
 15551                           
 15552                           
 15553                           ;i2c2.c: 556: i2c2_object.i2cErrors++;
 15554  066E  3001               	movlw	1
 15555  066F  00F3               	movwf	??_I2C2_ISR
 15556  0670  0873               	movf	??_I2C2_ISR,w
 15557  0671  0021               	movlb	1	; select bank1
 15558  0672  07CD               	addwf	(_i2c2_object^(0+128)+4),f
 15559                           
 15560                           ;i2c2.c: 557: I2C2_Stop(I2C2_LOST_STATE);
 15561  0673  3006               	movlw	6
 15562  0674  3195  25CF         	fcall	_I2C2_Stop
 15563                           
 15564                           ;i2c2.c: 560: }
 15565                           
 15566                           ;i2c2.c: 558: break;
 15567  0676  0008               	return
 15568  0677                     i1l4616:	
 15569  0677  0879               	movf	_i2c2_state,w
 15570                           
 15571                           ; Switch size 1, requested type "space"
 15572                           ; Number of cases is 11, Range of values is 0 to 11
 15573                           ; switch strategies available:
 15574                           ; Name         Instructions Cycles
 15575                           ; direct_byte           30     6 (fixed)
 15576                           ; simple_byte           34    18 (average)
 15577                           ; jumptable            260     6 (fixed)
 15578                           ;	Chosen strategy is direct_byte
 15579  0678  0084               	movwf	4
 15580  0679  300C               	movlw	12
 15581  067A  0204               	subwf	4,w
 15582  067B  1803               	skipnc
 15583  067C  2E6E               	goto	i1l4610
 15584  067D  3190               	movlp	high i1S6730
 15585  067E  3504               	lslf	4,w
 15586  067F  3E00               	addlw	low i1S6730
 15587  0680  0082               	movwf	2
 15588  0681  0008               	return
 15589  0682                     __end_of_I2C2_ISR:	
 15590                           
 15591                           	psect	swtext1
 15592  1000                     __pswtext1:	
 15593  1000                     i1S6730:	
 15594  1000  3185  2D51         	ljmp	i1l288
 15595  1002  3185  2D7F         	ljmp	i1l293
 15596  1004  3185  2DD0         	ljmp	i1l4538
 15597  1006  3185  2DFB         	ljmp	i1l310
 15598  1008  3186  2E6A         	ljmp	i1l4608
 15599  100A  3186  2E30         	ljmp	i1l317
 15600  100C  3186  2E44         	ljmp	i1l4590
 15601  100E  3186  2E6A         	ljmp	i1l4608
 15602  1010  3186  2E4B         	ljmp	i1l4594
 15603  1012  3186  2E6E         	ljmp	i1l4610
 15604  1014  3185  2D86         	ljmp	i1l294
 15605  1016  3185  2DA7         	ljmp	i1l299
 15606                           
 15607                           	psect	text89
 15608  15CF                     __ptext89:	
 15609 ;; *************** function _I2C2_Stop *****************
 15610 ;; Defined at:
 15611 ;;		line 581 in file "mcc_generated_files/i2c2.c"
 15612 ;; Parameters:    Size  Location     Type
 15613 ;;  completion_c    1    wreg     enum E2993
 15614 ;; Auto vars:     Size  Location     Type
 15615 ;;  completion_c    1    2[COMMON] enum E2993
 15616 ;; Return value:  Size  Location     Type
 15617 ;;                  1    wreg      void 
 15618 ;; Registers used:
 15619 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 15620 ;; Tracked objects:
 15621 ;;		On entry : 0/0
 15622 ;;		On exit  : 0/0
 15623 ;;		Unchanged: 0/0
 15624 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15625 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15626 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15627 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15628 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15629 ;;Total ram usage:        3 bytes
 15630 ;; Hardware stack levels used:    1
 15631 ;; This function calls:
 15632 ;;		Nothing
 15633 ;; This function is called by:
 15634 ;;		_I2C2_ISR
 15635 ;; This function uses a non-reentrant model
 15636 ;;
 15637                           
 15638                           
 15639                           ;psect for function _I2C2_Stop
 15640  15CF                     _I2C2_Stop:	
 15641                           
 15642                           ;incstack = 0
 15643                           ; Regs used in _I2C2_Stop: [wreg+fsr1l+fsr1h+status,2+status,0]
 15644                           ;I2C2_Stop@completion_code stored from wreg
 15645  15CF  00F2               	movwf	I2C2_Stop@completion_code
 15646                           
 15647                           ;i2c2.c: 584: SSP2CON2bits.PEN = 1;
 15648  15D0  0024               	movlb	4	; select bank4
 15649  15D1  151E               	bsf	30,2	;volatile
 15650                           
 15651                           ;i2c2.c: 587: if (p_i2c2_current->pTrFlag != (0))
 15652  15D2  0877               	movf	_p_i2c2_current,w
 15653  15D3  3E02               	addlw	2
 15654  15D4  0086               	movwf	6
 15655  15D5  3001               	movlw	1	; select bank2/3
 15656  15D6  0087               	movwf	7
 15657  15D7  0016               	moviw fsr1++
 15658  15D8  0401               	iorwf	1,w
 15659  15D9  1903               	btfsc	3,2
 15660  15DA  2DEA               	goto	i1l4118
 15661                           
 15662                           ;i2c2.c: 588: {
 15663                           ;i2c2.c: 590: *(p_i2c2_current->pTrFlag) = completion_code;
 15664  15DB  0877               	movf	_p_i2c2_current,w
 15665  15DC  3E02               	addlw	2
 15666  15DD  0086               	movwf	6
 15667  15DE  3001               	movlw	1	; select bank2/3
 15668  15DF  0087               	movwf	7
 15669  15E0  3F40               	moviw [0]fsr1
 15670  15E1  00F0               	movwf	??_I2C2_Stop
 15671  15E2  3F41               	moviw [1]fsr1
 15672  15E3  00F1               	movwf	??_I2C2_Stop+1
 15673  15E4  0870               	movf	??_I2C2_Stop,w
 15674  15E5  0086               	movwf	6
 15675  15E6  0871               	movf	??_I2C2_Stop+1,w
 15676  15E7  0087               	movwf	7
 15677  15E8  0872               	movf	I2C2_Stop@completion_code,w
 15678  15E9  0081               	movwf	1
 15679  15EA                     i1l4118:	
 15680                           
 15681                           ;i2c2.c: 591: }
 15682                           ;i2c2.c: 594: i2c2_state = S_MASTER_IDLE;
 15683  15EA  01F9               	clrf	_i2c2_state
 15684  15EB  0008               	return
 15685  15EC                     __end_of_I2C2_Stop:	
 15686                           
 15687                           	psect	text90
 15688  145E                     __ptext90:	
 15689 ;; *************** function _I2C2_FunctionComplete *****************
 15690 ;; Defined at:
 15691 ;;		line 563 in file "mcc_generated_files/i2c2.c"
 15692 ;; Parameters:    Size  Location     Type
 15693 ;;		None
 15694 ;; Auto vars:     Size  Location     Type
 15695 ;;		None
 15696 ;; Return value:  Size  Location     Type
 15697 ;;                  1    wreg      void 
 15698 ;; Registers used:
 15699 ;;		wreg, status,2, status,0
 15700 ;; Tracked objects:
 15701 ;;		On entry : 0/0
 15702 ;;		On exit  : 0/0
 15703 ;;		Unchanged: 0/0
 15704 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15705 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15706 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15707 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15708 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15709 ;;Total ram usage:        1 bytes
 15710 ;; Hardware stack levels used:    1
 15711 ;; This function calls:
 15712 ;;		Nothing
 15713 ;; This function is called by:
 15714 ;;		_I2C2_ISR
 15715 ;; This function uses a non-reentrant model
 15716 ;;
 15717                           
 15718                           
 15719                           ;psect for function _I2C2_FunctionComplete
 15720  145E                     _I2C2_FunctionComplete:	
 15721                           
 15722                           ;i2c2.c: 567: p_i2c2_trb_current++;
 15723                           
 15724                           ;incstack = 0
 15725                           ; Regs used in _I2C2_FunctionComplete: [wreg+status,2+status,0]
 15726  145E  3005               	movlw	5
 15727  145F  00F0               	movwf	??_I2C2_FunctionComplete
 15728  1460  0870               	movf	??_I2C2_FunctionComplete,w
 15729  1461  07F8               	addwf	_p_i2c2_trb_current,f
 15730                           
 15731                           ;i2c2.c: 570: if(--i2c2_trb_count == 0)
 15732  1462  3001               	movlw	1
 15733  1463  0021               	movlb	1	; select bank1
 15734  1464  02E2               	subwf	_i2c2_trb_count^(0+128),f
 15735  1465  1D03               	btfss	3,2
 15736  1466  2C6C               	goto	i1l329
 15737                           
 15738                           ;i2c2.c: 571: {
 15739                           ;i2c2.c: 572: i2c2_state = S_MASTER_SEND_STOP;
 15740  1467  3004               	movlw	4
 15741  1468  00F0               	movwf	??_I2C2_FunctionComplete
 15742  1469  0870               	movf	??_I2C2_FunctionComplete,w
 15743  146A  00F9               	movwf	_i2c2_state
 15744                           
 15745                           ;i2c2.c: 573: }
 15746  146B  0008               	return
 15747  146C                     i1l329:	
 15748                           
 15749                           ;i2c2.c: 574: else
 15750                           ;i2c2.c: 575: {
 15751                           ;i2c2.c: 576: i2c2_state = S_MASTER_RESTART;
 15752  146C  01F9               	clrf	_i2c2_state
 15753  146D  0AF9               	incf	_i2c2_state,f
 15754  146E  0008               	return
 15755  146F                     __end_of_I2C2_FunctionComplete:	
 15756                           
 15757                           	psect	text91
 15758  1364                     __ptext91:	
 15759 ;; *************** function _I2C2_BusCollisionISR *****************
 15760 ;; Defined at:
 15761 ;;		line 729 in file "mcc_generated_files/i2c2.c"
 15762 ;; Parameters:    Size  Location     Type
 15763 ;;		None
 15764 ;; Auto vars:     Size  Location     Type
 15765 ;;		None
 15766 ;; Return value:  Size  Location     Type
 15767 ;;                  1    wreg      void 
 15768 ;; Registers used:
 15769 ;;		None
 15770 ;; Tracked objects:
 15771 ;;		On entry : 0/0
 15772 ;;		On exit  : 0/0
 15773 ;;		Unchanged: 0/0
 15774 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15775 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15776 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15777 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15778 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15779 ;;Total ram usage:        0 bytes
 15780 ;; Hardware stack levels used:    1
 15781 ;; This function calls:
 15782 ;;		Nothing
 15783 ;; This function is called by:
 15784 ;;		_INTERRUPT_InterruptManager
 15785 ;; This function uses a non-reentrant model
 15786 ;;
 15787                           
 15788                           
 15789                           ;psect for function _I2C2_BusCollisionISR
 15790  1364                     _I2C2_BusCollisionISR:	
 15791                           
 15792                           ;incstack = 0
 15793                           ; Regs used in _I2C2_BusCollisionISR: []
 15794  1364  0008               	return
 15795  1365                     __end_of_I2C2_BusCollisionISR:	
 15796  007E                     btemp	set	126	;btemp
 15797  007E                     int$flags	set	126
 15798  007E                     wtemp0	set	126


Data Sizes:
    Strings     0
    Constant    38
    Data        7
    BSS         145
    Persistent  6
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      7      14
    BANK0            80     79      79
    BANK1            80     41      70
    BANK2            80      0      78
    BANK3            80     12      56
    BANK4            80      0       0
    BANK5            80      0       0
    BANK6            80      0       0
    BANK7            80      0       0
    BANK8            80      0       0
    BANK9            80      0       0
    BANK10           80      0       0
    BANK11           80      0       0
    BANK12           48      0       0

Pointer List with Targets:

    i2c2_tr_queue.ptrb_list.pbuffer	PTR unsigned char  size(2) Largest target is 24
		 -> I2C_BufferRead@ReadAddr(BANK0[1]), I2C_BufferRead@status(BANK0[1]), I2C_ByteWrite@data(BANK0[2]), I2C_ByteWrite@status(BANK0[1]), 
		 -> data(BANK3[8]), b1(BANK3[24]), HMC5883L_ReadBit@tmp(COMMON[1]), HMC5883L_ReadBits@tmp(BANK0[1]), 
		 -> HMC5883L_WriteBit@tmp(COMMON[1]), HMC5883L_WriteBits@tmp(COMMON[1]), heading(BANK3[8]), HMC5883L_TestConnection@tmp(COMMON[3]), 
		 -> MPU6050_ReadBit@tmp(COMMON[1]), MPU6050_ReadBits@tmp(COMMON[1]), MPU6050_WriteBit@tmp(COMMON[1]), MPU6050_WriteBits@tmp(COMMON[1]), 
		 -> MPU6050_GetRawAccel@tempBuffer(COMMON[6]), MPU6050_GetRawAccelGyro@tmpBuffer(COMMON[14]), 

    i2c2_tr_queue.pTrFlag	PTR enum E2993 size(2) Largest target is 24
		 -> I2C_BufferRead@ReadAddr(BANK0[1]), I2C_BufferRead@status(BANK0[1]), I2C_ByteWrite@data(BANK0[2]), I2C_ByteWrite@status(BANK0[1]), 
		 -> data(BANK3[8]), b1(BANK3[24]), HMC5883L_ReadBit@tmp(COMMON[1]), HMC5883L_ReadBits@tmp(BANK0[1]), 
		 -> HMC5883L_WriteBit@tmp(COMMON[1]), HMC5883L_WriteBits@tmp(COMMON[1]), heading(BANK3[8]), HMC5883L_TestConnection@tmp(COMMON[3]), 
		 -> MPU6050_ReadBit@tmp(COMMON[1]), MPU6050_ReadBits@tmp(COMMON[1]), MPU6050_WriteBit@tmp(COMMON[1]), MPU6050_WriteBits@tmp(COMMON[1]), 
		 -> MPU6050_GetRawAccel@tempBuffer(COMMON[6]), MPU6050_GetRawAccelGyro@tmpBuffer(COMMON[14]), 

    i2c2_tr_queue.ptrb_list	PTR struct . size(1) Largest target is 5
		 -> I2C2_MasterRead@trBlock(BANK2[5]), I2C2_MasterWrite@trBlock(BANK2[5]), 

    I2C_BufferRead@pBuffer	PTR unsigned char  size(2) Largest target is 24
		 -> data(BANK3[8]), b1(BANK3[24]), HMC5883L_ReadBit@tmp(COMMON[1]), HMC5883L_ReadBits@tmp(BANK0[1]), 
		 -> HMC5883L_WriteBit@tmp(COMMON[1]), HMC5883L_WriteBits@tmp(COMMON[1]), heading(BANK3[8]), HMC5883L_TestConnection@tmp(COMMON[3]), 
		 -> MPU6050_ReadBit@tmp(COMMON[1]), MPU6050_ReadBits@tmp(COMMON[1]), MPU6050_WriteBit@tmp(COMMON[1]), MPU6050_WriteBits@tmp(COMMON[1]), 
		 -> MPU6050_GetRawAccel@tempBuffer(COMMON[6]), MPU6050_GetRawAccelGyro@tmpBuffer(COMMON[14]), 

    I2C_ByteWrite@pBuffer	PTR unsigned char  size(1) Largest target is 1
		 -> BMP_readTemperature@tmp(BANK1[1]), BMP_init@t(BANK0[1]), HMC5883L_WriteBit@tmp(COMMON[1]), HMC5883L_WriteBits@tmp(COMMON[1]), 
		 -> HMC5883L_SetMode@tmp(COMMON[1]), HMC5883L_SetGain@tmp(COMMON[1]), HMC5883L_Initialize@tmp(COMMON[1]), MPU6050_WriteBit@tmp(COMMON[1]), 
		 -> MPU6050_WriteBits@tmp(COMMON[1]), 

    Wireless_sendData@payload	PTR unsigned char  size(1) Largest target is 5
		 -> Wireless_packageData@data(BANK1[5]), 

    RF_DataIsReady@channel	PTR unsigned char  size(1) Largest target is 1
		 -> Wireless_checkDataReceived@channel(BANK0[1]), 

    RF_RxPayload@payload	PTR unsigned char  size(1) Largest target is 4
		 -> Wireless_checkDataReceived@data(BANK0[4]), 

    RF_TxPayload@payload	PTR unsigned char  size(1) Largest target is 5
		 -> Wireless_packageData@data(BANK1[5]), 

    RF_WriteRegisterData@buf	PTR unsigned char  size(2) Largest target is 5
		 -> Wireless_packageData@data(BANK1[5]), Wireless_init@TADDR(CODE[5]), 

    RF_ReadRegisterData@buf	PTR unsigned char  size(1) Largest target is 4
		 -> Wireless_checkDataReceived@data(BANK0[4]), Wireless_wake@reg(BANK0[1]), Wireless_sleep@reg(BANK0[1]), 

    SPI_WriteBuffer@bufOut	PTR unsigned char  size(2) Largest target is 5
		 -> Wireless_packageData@data(BANK1[5]), Wireless_init@TADDR(CODE[5]), 

    SPI_WriteReadBuffer@bufOut	PTR unsigned char  size(1) Largest target is 4
		 -> Wireless_checkDataReceived@data(BANK0[4]), Wireless_wake@reg(BANK0[1]), Wireless_sleep@reg(BANK0[1]), 

    SPI_WriteReadBuffer@bufIn	PTR unsigned char  size(1) Largest target is 4
		 -> Wireless_checkDataReceived@data(BANK0[4]), Wireless_wake@reg(BANK0[1]), Wireless_sleep@reg(BANK0[1]), 

    HMC5883L_I2C_BufferRead@pBuffer	PTR unsigned char  size(2) Largest target is 14
		 -> HMC5883L_ReadBit@tmp(COMMON[1]), HMC5883L_ReadBits@tmp(BANK0[1]), HMC5883L_WriteBit@tmp(COMMON[1]), HMC5883L_WriteBits@tmp(COMMON[1]), 
		 -> heading(BANK3[8]), HMC5883L_TestConnection@tmp(COMMON[3]), MPU6050_ReadBit@tmp(COMMON[1]), MPU6050_ReadBits@tmp(COMMON[1]), 
		 -> MPU6050_WriteBit@tmp(COMMON[1]), MPU6050_WriteBits@tmp(COMMON[1]), MPU6050_GetRawAccel@tempBuffer(COMMON[6]), MPU6050_GetRawAccelGyro@tmpBuffer(COMMON[14]), 

    HMC5883L_ReadBits@data	PTR unsigned char  size(1) Largest target is 1
		 -> BMP_readTemperature@tmp(BANK1[1]), HMC5883L_GetHeading@tmp(COMMON[1]), HMC5883L_GetMode@tmp(COMMON[1]), HMC5883L_GetGain@tmp(COMMON[1]), 
		 -> HMC5883L_GetMeasurementBias@tmp(COMMON[1]), HMC5883L_GetDataRate@tmp(COMMON[1]), HMC5883L_GetSampleAveraging@tmp(COMMON[1]), 

    I2C2_MasterWriteTRBBuild@pdata	PTR unsigned char  size(1) Largest target is 2
		 -> I2C_BufferRead@ReadAddr(BANK0[1]), I2C_ByteWrite@data(BANK0[2]), 

    I2C2_MasterWriteTRBBuild@ptrb.pbuffer	PTR unsigned char  size(2) Largest target is 24
		 -> I2C_BufferRead@ReadAddr(BANK0[1]), I2C_BufferRead@status(BANK0[1]), I2C_ByteWrite@data(BANK0[2]), I2C_ByteWrite@status(BANK0[1]), 
		 -> data(BANK3[8]), b1(BANK3[24]), HMC5883L_ReadBit@tmp(COMMON[1]), HMC5883L_ReadBits@tmp(BANK0[1]), 
		 -> HMC5883L_WriteBit@tmp(COMMON[1]), HMC5883L_WriteBits@tmp(COMMON[1]), heading(BANK3[8]), HMC5883L_TestConnection@tmp(COMMON[3]), 
		 -> MPU6050_ReadBit@tmp(COMMON[1]), MPU6050_ReadBits@tmp(COMMON[1]), MPU6050_WriteBit@tmp(COMMON[1]), MPU6050_WriteBits@tmp(COMMON[1]), 
		 -> MPU6050_GetRawAccel@tempBuffer(COMMON[6]), MPU6050_GetRawAccelGyro@tmpBuffer(COMMON[14]), 

    I2C2_MasterWriteTRBBuild@ptrb	PTR struct . size(1) Largest target is 5
		 -> I2C2_MasterWrite@trBlock(BANK2[5]), 

    I2C2_MasterReadTRBBuild@pdata	PTR unsigned char  size(2) Largest target is 24
		 -> data(BANK3[8]), b1(BANK3[24]), HMC5883L_ReadBit@tmp(COMMON[1]), HMC5883L_ReadBits@tmp(BANK0[1]), 
		 -> HMC5883L_WriteBit@tmp(COMMON[1]), HMC5883L_WriteBits@tmp(COMMON[1]), heading(BANK3[8]), HMC5883L_TestConnection@tmp(COMMON[3]), 
		 -> MPU6050_ReadBit@tmp(COMMON[1]), MPU6050_ReadBits@tmp(COMMON[1]), MPU6050_WriteBit@tmp(COMMON[1]), MPU6050_WriteBits@tmp(COMMON[1]), 
		 -> MPU6050_GetRawAccel@tempBuffer(COMMON[6]), MPU6050_GetRawAccelGyro@tmpBuffer(COMMON[14]), 

    I2C2_MasterReadTRBBuild@ptrb.pbuffer	PTR unsigned char  size(2) Largest target is 24
		 -> I2C_BufferRead@ReadAddr(BANK0[1]), I2C_BufferRead@status(BANK0[1]), I2C_ByteWrite@data(BANK0[2]), I2C_ByteWrite@status(BANK0[1]), 
		 -> data(BANK3[8]), b1(BANK3[24]), HMC5883L_ReadBit@tmp(COMMON[1]), HMC5883L_ReadBits@tmp(BANK0[1]), 
		 -> HMC5883L_WriteBit@tmp(COMMON[1]), HMC5883L_WriteBits@tmp(COMMON[1]), heading(BANK3[8]), HMC5883L_TestConnection@tmp(COMMON[3]), 
		 -> MPU6050_ReadBit@tmp(COMMON[1]), MPU6050_ReadBits@tmp(COMMON[1]), MPU6050_WriteBit@tmp(COMMON[1]), MPU6050_WriteBits@tmp(COMMON[1]), 
		 -> MPU6050_GetRawAccel@tempBuffer(COMMON[6]), MPU6050_GetRawAccelGyro@tmpBuffer(COMMON[14]), 

    I2C2_MasterReadTRBBuild@ptrb	PTR struct . size(1) Largest target is 5
		 -> I2C2_MasterRead@trBlock(BANK2[5]), 

    i2c2_object.pTrTail.ptrb_list.pbuffer	PTR unsigned char  size(2) Largest target is 24
		 -> I2C_BufferRead@ReadAddr(BANK0[1]), I2C_BufferRead@status(BANK0[1]), I2C_ByteWrite@data(BANK0[2]), I2C_ByteWrite@status(BANK0[1]), 
		 -> data(BANK3[8]), b1(BANK3[24]), HMC5883L_ReadBit@tmp(COMMON[1]), HMC5883L_ReadBits@tmp(BANK0[1]), 
		 -> HMC5883L_WriteBit@tmp(COMMON[1]), HMC5883L_WriteBits@tmp(COMMON[1]), heading(BANK3[8]), HMC5883L_TestConnection@tmp(COMMON[3]), 
		 -> MPU6050_ReadBit@tmp(COMMON[1]), MPU6050_ReadBits@tmp(COMMON[1]), MPU6050_WriteBit@tmp(COMMON[1]), MPU6050_WriteBits@tmp(COMMON[1]), 
		 -> MPU6050_GetRawAccel@tempBuffer(COMMON[6]), MPU6050_GetRawAccelGyro@tmpBuffer(COMMON[14]), 

    i2c2_object.pTrTail.pTrFlag	PTR enum E2993 size(2) Largest target is 24
		 -> I2C_BufferRead@ReadAddr(BANK0[1]), I2C_BufferRead@status(BANK0[1]), I2C_ByteWrite@data(BANK0[2]), I2C_ByteWrite@status(BANK0[1]), 
		 -> data(BANK3[8]), b1(BANK3[24]), HMC5883L_ReadBit@tmp(COMMON[1]), HMC5883L_ReadBits@tmp(BANK0[1]), 
		 -> HMC5883L_WriteBit@tmp(COMMON[1]), HMC5883L_WriteBits@tmp(COMMON[1]), heading(BANK3[8]), HMC5883L_TestConnection@tmp(COMMON[3]), 
		 -> MPU6050_ReadBit@tmp(COMMON[1]), MPU6050_ReadBits@tmp(COMMON[1]), MPU6050_WriteBit@tmp(COMMON[1]), MPU6050_WriteBits@tmp(COMMON[1]), 
		 -> MPU6050_GetRawAccel@tempBuffer(COMMON[6]), MPU6050_GetRawAccelGyro@tmpBuffer(COMMON[14]), 

    i2c2_object.pTrTail.ptrb_list	PTR struct . size(1) Largest target is 5
		 -> I2C2_MasterRead@trBlock(BANK2[5]), I2C2_MasterWrite@trBlock(BANK2[5]), 

    I2C2_MasterTRBInsert@ptrb_list	PTR struct . size(1) Largest target is 5
		 -> I2C2_MasterRead@trBlock(BANK2[5]), I2C2_MasterWrite@trBlock(BANK2[5]), 

    I2C2_MasterTRBInsert@pflag	PTR enum E2993 size(1) Largest target is 1
		 -> I2C_BufferRead@status(BANK0[1]), I2C_ByteWrite@status(BANK0[1]), 

    I2C2_MasterRead@pflag	PTR enum E2993 size(1) Largest target is 1
		 -> I2C_BufferRead@status(BANK0[1]), 

    I2C2_MasterRead@pdata	PTR unsigned char  size(2) Largest target is 24
		 -> data(BANK3[8]), b1(BANK3[24]), HMC5883L_ReadBit@tmp(COMMON[1]), HMC5883L_ReadBits@tmp(BANK0[1]), 
		 -> HMC5883L_WriteBit@tmp(COMMON[1]), HMC5883L_WriteBits@tmp(COMMON[1]), heading(BANK3[8]), HMC5883L_TestConnection@tmp(COMMON[3]), 
		 -> MPU6050_ReadBit@tmp(COMMON[1]), MPU6050_ReadBits@tmp(COMMON[1]), MPU6050_WriteBit@tmp(COMMON[1]), MPU6050_WriteBits@tmp(COMMON[1]), 
		 -> MPU6050_GetRawAccel@tempBuffer(COMMON[6]), MPU6050_GetRawAccelGyro@tmpBuffer(COMMON[14]), 

    F3105.pbuffer	PTR unsigned char  size(2) Largest target is 24
		 -> I2C_BufferRead@ReadAddr(BANK0[1]), I2C_BufferRead@status(BANK0[1]), I2C_ByteWrite@data(BANK0[2]), I2C_ByteWrite@status(BANK0[1]), 
		 -> data(BANK3[8]), b1(BANK3[24]), HMC5883L_ReadBit@tmp(COMMON[1]), HMC5883L_ReadBits@tmp(BANK0[1]), 
		 -> HMC5883L_WriteBit@tmp(COMMON[1]), HMC5883L_WriteBits@tmp(COMMON[1]), heading(BANK3[8]), HMC5883L_TestConnection@tmp(COMMON[3]), 
		 -> MPU6050_ReadBit@tmp(COMMON[1]), MPU6050_ReadBits@tmp(COMMON[1]), MPU6050_WriteBit@tmp(COMMON[1]), MPU6050_WriteBits@tmp(COMMON[1]), 
		 -> MPU6050_GetRawAccel@tempBuffer(COMMON[6]), MPU6050_GetRawAccelGyro@tmpBuffer(COMMON[14]), 

    I2C2_MasterWrite@pflag	PTR enum E2993 size(1) Largest target is 1
		 -> I2C_BufferRead@status(BANK0[1]), I2C_ByteWrite@status(BANK0[1]), 

    I2C2_MasterWrite@pdata	PTR unsigned char  size(1) Largest target is 2
		 -> I2C_BufferRead@ReadAddr(BANK0[1]), I2C_ByteWrite@data(BANK0[2]), 

    F3100.pbuffer	PTR unsigned char  size(2) Largest target is 24
		 -> I2C_BufferRead@ReadAddr(BANK0[1]), I2C_BufferRead@status(BANK0[1]), I2C_ByteWrite@data(BANK0[2]), I2C_ByteWrite@status(BANK0[1]), 
		 -> data(BANK3[8]), b1(BANK3[24]), HMC5883L_ReadBit@tmp(COMMON[1]), HMC5883L_ReadBits@tmp(BANK0[1]), 
		 -> HMC5883L_WriteBit@tmp(COMMON[1]), HMC5883L_WriteBits@tmp(COMMON[1]), heading(BANK3[8]), HMC5883L_TestConnection@tmp(COMMON[3]), 
		 -> MPU6050_ReadBit@tmp(COMMON[1]), MPU6050_ReadBits@tmp(COMMON[1]), MPU6050_WriteBit@tmp(COMMON[1]), MPU6050_WriteBits@tmp(COMMON[1]), 
		 -> MPU6050_GetRawAccel@tempBuffer(COMMON[6]), MPU6050_GetRawAccelGyro@tmpBuffer(COMMON[14]), 

    I2C2_ISR@pi2c_buf_ptr	PTR unsigned char  size(2) Largest target is 24
		 -> I2C_BufferRead@ReadAddr(BANK0[1]), I2C_BufferRead@status(BANK0[1]), I2C_ByteWrite@data(BANK0[2]), I2C_ByteWrite@status(BANK0[1]), 
		 -> data(BANK3[8]), b1(BANK3[24]), HMC5883L_ReadBit@tmp(COMMON[1]), HMC5883L_ReadBits@tmp(BANK0[1]), 
		 -> HMC5883L_WriteBit@tmp(COMMON[1]), HMC5883L_WriteBits@tmp(COMMON[1]), heading(BANK3[8]), HMC5883L_TestConnection@tmp(COMMON[3]), 
		 -> MPU6050_ReadBit@tmp(COMMON[1]), MPU6050_ReadBits@tmp(COMMON[1]), MPU6050_WriteBit@tmp(COMMON[1]), MPU6050_WriteBits@tmp(COMMON[1]), 
		 -> MPU6050_GetRawAccel@tempBuffer(COMMON[6]), MPU6050_GetRawAccelGyro@tmpBuffer(COMMON[14]), NULL(NULL[0]), 

    p_i2c2_trb_current.pbuffer	PTR unsigned char  size(2) Largest target is 24
		 -> I2C_BufferRead@ReadAddr(BANK0[1]), I2C_BufferRead@status(BANK0[1]), I2C_ByteWrite@data(BANK0[2]), I2C_ByteWrite@status(BANK0[1]), 
		 -> data(BANK3[8]), b1(BANK3[24]), HMC5883L_ReadBit@tmp(COMMON[1]), HMC5883L_ReadBits@tmp(BANK0[1]), 
		 -> HMC5883L_WriteBit@tmp(COMMON[1]), HMC5883L_WriteBits@tmp(COMMON[1]), heading(BANK3[8]), HMC5883L_TestConnection@tmp(COMMON[3]), 
		 -> MPU6050_ReadBit@tmp(COMMON[1]), MPU6050_ReadBits@tmp(COMMON[1]), MPU6050_WriteBit@tmp(COMMON[1]), MPU6050_WriteBits@tmp(COMMON[1]), 
		 -> MPU6050_GetRawAccel@tempBuffer(COMMON[6]), MPU6050_GetRawAccelGyro@tmpBuffer(COMMON[14]), 

    p_i2c2_trb_current	PTR struct . size(1) Largest target is 5
		 -> I2C2_MasterRead@trBlock(BANK2[5]), I2C2_MasterWrite@trBlock(BANK2[5]), NULL(NULL[0]), 

    i2c2_object.pTrHead.pTrFlag	PTR enum E2993 size(2) Largest target is 24
		 -> I2C_BufferRead@ReadAddr(BANK0[1]), I2C_BufferRead@status(BANK0[1]), I2C_ByteWrite@data(BANK0[2]), I2C_ByteWrite@status(BANK0[1]), 
		 -> data(BANK3[8]), b1(BANK3[24]), HMC5883L_ReadBit@tmp(COMMON[1]), HMC5883L_ReadBits@tmp(BANK0[1]), 
		 -> HMC5883L_WriteBit@tmp(COMMON[1]), HMC5883L_WriteBits@tmp(COMMON[1]), heading(BANK3[8]), HMC5883L_TestConnection@tmp(COMMON[3]), 
		 -> MPU6050_ReadBit@tmp(COMMON[1]), MPU6050_ReadBits@tmp(COMMON[1]), MPU6050_WriteBit@tmp(COMMON[1]), MPU6050_WriteBits@tmp(COMMON[1]), 
		 -> MPU6050_GetRawAccel@tempBuffer(COMMON[6]), MPU6050_GetRawAccelGyro@tmpBuffer(COMMON[14]), 

    i2c2_object.pTrHead.ptrb_list	PTR struct . size(1) Largest target is 5
		 -> I2C2_MasterRead@trBlock(BANK2[5]), I2C2_MasterWrite@trBlock(BANK2[5]), 

    S587$pbuffer	PTR unsigned char  size(2) Largest target is 24
		 -> I2C_BufferRead@ReadAddr(BANK0[1]), I2C_BufferRead@status(BANK0[1]), I2C_ByteWrite@data(BANK0[2]), I2C_ByteWrite@status(BANK0[1]), 
		 -> data(BANK3[8]), b1(BANK3[24]), HMC5883L_ReadBit@tmp(COMMON[1]), HMC5883L_ReadBits@tmp(BANK0[1]), 
		 -> HMC5883L_WriteBit@tmp(COMMON[1]), HMC5883L_WriteBits@tmp(COMMON[1]), heading(BANK3[8]), HMC5883L_TestConnection@tmp(COMMON[3]), 
		 -> MPU6050_ReadBit@tmp(COMMON[1]), MPU6050_ReadBits@tmp(COMMON[1]), MPU6050_WriteBit@tmp(COMMON[1]), MPU6050_WriteBits@tmp(COMMON[1]), 
		 -> MPU6050_GetRawAccel@tempBuffer(COMMON[6]), MPU6050_GetRawAccelGyro@tmpBuffer(COMMON[14]), 

    p_i2c2_current.pbuffer	PTR unsigned char  size(2) Largest target is 24
		 -> I2C_BufferRead@ReadAddr(BANK0[1]), I2C_BufferRead@status(BANK0[1]), I2C_ByteWrite@data(BANK0[2]), I2C_ByteWrite@status(BANK0[1]), 
		 -> data(BANK3[8]), b1(BANK3[24]), HMC5883L_ReadBit@tmp(COMMON[1]), HMC5883L_ReadBits@tmp(BANK0[1]), 
		 -> HMC5883L_WriteBit@tmp(COMMON[1]), HMC5883L_WriteBits@tmp(COMMON[1]), heading(BANK3[8]), HMC5883L_TestConnection@tmp(COMMON[3]), 
		 -> MPU6050_ReadBit@tmp(COMMON[1]), MPU6050_ReadBits@tmp(COMMON[1]), MPU6050_WriteBit@tmp(COMMON[1]), MPU6050_WriteBits@tmp(COMMON[1]), 
		 -> MPU6050_GetRawAccel@tempBuffer(COMMON[6]), MPU6050_GetRawAccelGyro@tmpBuffer(COMMON[14]), 

    S599$pTrFlag	PTR enum E2993 size(2) Largest target is 24
		 -> I2C_BufferRead@ReadAddr(BANK0[1]), I2C_BufferRead@status(BANK0[1]), I2C_ByteWrite@data(BANK0[2]), I2C_ByteWrite@status(BANK0[1]), 
		 -> data(BANK3[8]), b1(BANK3[24]), HMC5883L_ReadBit@tmp(COMMON[1]), HMC5883L_ReadBits@tmp(BANK0[1]), 
		 -> HMC5883L_WriteBit@tmp(COMMON[1]), HMC5883L_WriteBits@tmp(COMMON[1]), heading(BANK3[8]), HMC5883L_TestConnection@tmp(COMMON[3]), 
		 -> MPU6050_ReadBit@tmp(COMMON[1]), MPU6050_ReadBits@tmp(COMMON[1]), MPU6050_WriteBit@tmp(COMMON[1]), MPU6050_WriteBits@tmp(COMMON[1]), 
		 -> MPU6050_GetRawAccel@tempBuffer(COMMON[6]), MPU6050_GetRawAccelGyro@tmpBuffer(COMMON[14]), 

    p_i2c2_current.pTrFlag	PTR enum E2993 size(2) Largest target is 24
		 -> I2C_BufferRead@ReadAddr(BANK0[1]), I2C_BufferRead@status(BANK0[1]), I2C_ByteWrite@data(BANK0[2]), I2C_ByteWrite@status(BANK0[1]), 
		 -> data(BANK3[8]), b1(BANK3[24]), HMC5883L_ReadBit@tmp(COMMON[1]), HMC5883L_ReadBits@tmp(BANK0[1]), 
		 -> HMC5883L_WriteBit@tmp(COMMON[1]), HMC5883L_WriteBits@tmp(COMMON[1]), heading(BANK3[8]), HMC5883L_TestConnection@tmp(COMMON[3]), 
		 -> MPU6050_ReadBit@tmp(COMMON[1]), MPU6050_ReadBits@tmp(COMMON[1]), MPU6050_WriteBit@tmp(COMMON[1]), MPU6050_WriteBits@tmp(COMMON[1]), 
		 -> MPU6050_GetRawAccel@tempBuffer(COMMON[6]), MPU6050_GetRawAccelGyro@tmpBuffer(COMMON[14]), 

    S599$ptrb_list	PTR struct . size(1) Largest target is 5
		 -> I2C2_MasterRead@trBlock(BANK2[5]), I2C2_MasterWrite@trBlock(BANK2[5]), 

    p_i2c2_current.ptrb_list	PTR struct . size(1) Largest target is 5
		 -> I2C2_MasterRead@trBlock(BANK2[5]), I2C2_MasterWrite@trBlock(BANK2[5]), 

    p_i2c2_current	PTR struct . size(1) Largest target is 5
		 -> i2c2_tr_queue(BANK2[4]), NULL(NULL[0]), 

    S610$pTrHead	PTR struct . size(1) Largest target is 5
		 -> i2c2_tr_queue(BANK2[4]), 

    i2c2_object.pTrHead	PTR struct . size(1) Largest target is 5
		 -> i2c2_tr_queue(BANK2[4]), 

    S610$pTrTail	PTR struct . size(1) Largest target is 5
		 -> i2c2_tr_queue(BANK2[4]), 

    i2c2_object.pTrTail	PTR struct . size(1) Largest target is 5
		 -> i2c2_tr_queue(BANK2[4]), 

    TMR1_SetInterruptHandler@InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> TMR1_DefaultInterruptHandler(), 

    TMR1_InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> TMR1_DefaultInterruptHandler(), Absolute function(), 

    IOCAF2_SetInterruptHandler@InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> IOCAF2_DefaultInterruptHandler(), 

    IOCAF2_InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), IOCAF2_DefaultInterruptHandler(), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _INTERRUPT_InterruptManager in COMMON

    _INTERRUPT_InterruptManager->_I2C2_ISR
    _I2C2_ISR->_I2C2_Stop

Critical Paths under _main in BANK0

    _main->_Wireless_packageData
    _Wireless_wake->_RF_ReadRegisterData
    _Wireless_sleep->_RF_ReadRegisterData
    _Wireless_packageData->___fttol
    _Wireless_sendData->_RF_TxPayload
    _RF_TxPayload->_RF_WriteRegisterData
    _RF_Write->_SPI_WriteRead
    _Wireless_checkDataReceived->_RF_RxPayload
    _RF_RxPayload->_RF_ReadRegisterData
    _RF_ReadRegisterData->_SPI_WriteReadBuffer
    _SPI_WriteReadBuffer->_SPI_WriteRead
    _RF_DataIsReady->_RF_ReadRegister
    _RF_ReadRegister->_SPI_WriteRead
    _DOOR_update->_Storage_save
    _Storage_save->_DATAEE_WriteByte
    _Sensor_getSupplyVoltage->___ftdiv
    _Wireless_init->_RF_WriteRegisterData
    _RF_WriteRegisterData->_SPI_WriteBuffer
    _SPI_WriteBuffer->_SPI_WriteRead
    _RF_ResetStatusIRQ->_RF_WriteRegister
    _RF_WriteRegister->_SPI_WriteRead
    _SPI_WriteRead->_SPI1_Exchange8bit
    _Timeout_updateCurrentTime->___lmul
    _TMR1_Initialize->_TMR1_SetInterruptHandler
    _PIN_MANAGER_Initialize->_IOCAF2_SetInterruptHandler
    _DOOR_run->_Timeout_getGlobalCounter
    _BMP_readTemperature->___fttol
    ___lwtoft->___ftpack
    ___fttol->___ftmul
    ___ftneg->___ftdiv
    ___ftmul->___ftadd
    ___ftdiv->___altoft
    ___ftadd->_Sensor_getSupplyVoltage
    ___awtoft->___ftpack
    ___altoft->___ftpack
    ___altoft->___ftpack
    _HMC5883L_ReadBits->_HMC5883L_I2C_BufferRead
    _HMC5883L_I2C_BufferRead->_I2C_BufferRead
    _BMP_init->_I2C_BufferRead
    _I2C_ByteWrite->_I2C2_MasterWrite
    _I2C_BufferRead->_I2C2_MasterRead
    _I2C2_MasterWrite->_I2C2_MasterWriteTRBBuild
    _I2C2_MasterRead->_I2C2_MasterReadTRBBuild

Critical Paths under _INTERRUPT_InterruptManager in BANK0

    None.

Critical Paths under _main in BANK1

    _main->_Wireless_packageData
    _Wireless_packageData->_BMP_readTemperature
    _BMP_readTemperature->___fttol

Critical Paths under _INTERRUPT_InterruptManager in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK12

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                14    14      0   92355
                                             39 BANK1      2     2      0
                                              0 BANK3     12    12      0
                           _BMP_init
                _BMP_readTemperature
                          _DOOR_init
                           _DOOR_run
                  _SYSTEM_Initialize
             _Sensor_peripheralSleep
           _Timeout_getGlobalCounter
          _Timeout_updateCurrentTime
                      _Wireless_init
               _Wireless_packageData
                     _Wireless_sleep
                      _Wireless_wake
                            ___lldiv
                            ___lwdiv
                       _setSleepTime
 ---------------------------------------------------------------------------------
 (1) _setSleepTime                                         2     0      2      77
                                              1 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (1) ___lwdiv                                              8     4      4     703
                                              1 BANK0      8     4      4
 ---------------------------------------------------------------------------------
 (1) ___lldiv                                             14     6      8     395
                                              1 BANK0     14     6      8
 ---------------------------------------------------------------------------------
 (1) _Wireless_wake                                        2     2      0    2211
                                             15 BANK0      2     2      0
                _RF_ReadRegisterData
                   _RF_WriteRegister
 ---------------------------------------------------------------------------------
 (1) _Wireless_sleep                                       2     2      0    2211
                                             15 BANK0      2     2      0
                _RF_ReadRegisterData
                   _RF_WriteRegister
 ---------------------------------------------------------------------------------
 (1) _Wireless_packageData                                14    10      4   25936
                                             78 BANK0      1     1      0
                                             26 BANK1     13     9      4
                _BMP_readTemperature (ARG)
               _Diag_getSensorHealth
            _Sensor_getSupplyVoltage
         _Wireless_checkDataReceived
                  _Wireless_sendData
                            ___ftadd
                            ___ftmul
                            ___fttol
                            ___lldiv (ARG)
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (2) _Wireless_sendData                                    2     2      0    2679
                                             17 BANK0      2     2      0
                  _RF_ResetStatusIRQ
                       _RF_TxPayload
 ---------------------------------------------------------------------------------
 (3) _RF_TxPayload                                         3     2      1    1536
                                             14 BANK0      3     2      1
                           _RF_Write
               _RF_WriteRegisterData
 ---------------------------------------------------------------------------------
 (4) _RF_Write                                             1     1      0      93
                                              3 BANK0      1     1      0
                      _SPI_WriteRead
 ---------------------------------------------------------------------------------
 (2) _Wireless_checkDataReceived                           9     9      0    3309
                                             19 BANK0      9     9      0
                      _DOOR_resetPos
                        _DOOR_update
                     _RF_DataIsReady
                       _RF_RxPayload
                             ___lmul
 ---------------------------------------------------------------------------------
 (3) _RF_RxPayload                                         4     3      1    1261
                                             15 BANK0      4     3      1
                _RF_ReadRegisterData
 ---------------------------------------------------------------------------------
 (2) _RF_ReadRegisterData                                  5     3      2    1089
                                             10 BANK0      5     3      2
                      _SPI_WriteRead
                _SPI_WriteReadBuffer
 ---------------------------------------------------------------------------------
 (3) _SPI_WriteReadBuffer                                  7     5      2     441
                                              3 BANK0      7     5      2
                      _SPI_WriteRead
 ---------------------------------------------------------------------------------
 (3) _RF_DataIsReady                                       3     3      0     292
                                              6 BANK0      3     3      0
                    _RF_ReadRegister
 ---------------------------------------------------------------------------------
 (4) _RF_ReadRegister                                      3     3      0     127
                                              3 BANK0      3     3      0
                      _SPI_WriteRead
 ---------------------------------------------------------------------------------
 (3) _DOOR_update                                          3     2      1     978
                                              7 BANK0      3     2      1
                       _Storage_save
 ---------------------------------------------------------------------------------
 (4) _Storage_save                                         3     2      1     700
                                              4 BANK0      3     2      1
                   _DATAEE_WriteByte
 ---------------------------------------------------------------------------------
 (5) _DATAEE_WriteByte                                     3     2      1     561
                                              1 BANK0      3     2      1
 ---------------------------------------------------------------------------------
 (3) _DOOR_resetPos                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _Sensor_getSupplyVoltage                              8     5      3    7868
                                             33 BANK0      8     5      3
            _ADC_GetConversionResult
               _ADC_IsConversionDone
                  _ADC_SelectChannel
                _ADC_StartConversion
                  _FVR_IsOutputReady
             _Sensor_peripheralSleep
              _Sensor_peripheralWake
                            ___ftdiv
                           ___lwtoft
 ---------------------------------------------------------------------------------
 (3) _Sensor_peripheralWake                                0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _Sensor_peripheralSleep                               0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _FVR_IsOutputReady                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _ADC_StartConversion                                  0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _ADC_SelectChannel                                    2     2      0      31
                                              1 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (3) _ADC_IsConversionDone                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _ADC_GetConversionResult                              2     0      2       0
                                              1 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (2) _Diag_getSensorHealth                                 2     2      0      43
                                              1 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _Wireless_init                                        2     2      0    3398
                                             14 BANK0      2     2      0
                            _RF_Init
                  _RF_ResetStatusIRQ
                   _RF_WriteRegister
               _RF_WriteRegisterData
 ---------------------------------------------------------------------------------
 (4) _RF_WriteRegisterData                                 5     2      3    1271
                                              9 BANK0      5     2      3
                    _SPI_WriteBuffer
                      _SPI_WriteRead
 ---------------------------------------------------------------------------------
 (5) _SPI_WriteBuffer                                      6     3      3     346
                                              3 BANK0      6     3      3
                      _SPI_WriteRead
 ---------------------------------------------------------------------------------
 (3) _RF_ResetStatusIRQ                                    2     2      0    1079
                                              5 BANK0      2     2      0
                   _RF_WriteRegister
 ---------------------------------------------------------------------------------
 (2) _RF_WriteRegister                                     2     1      1    1048
                                              3 BANK0      2     1      1
                      _SPI_WriteRead
 ---------------------------------------------------------------------------------
 (3) _SPI_WriteRead                                        1     1      0      62
                                              2 BANK0      1     1      0
                  _SPI1_Exchange8bit
 ---------------------------------------------------------------------------------
 (4) _SPI1_Exchange8bit                                    1     1      0      31
                                              1 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _RF_Init                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Timeout_updateCurrentTime                            8     8      0     617
                                             13 BANK0      8     8      0
                     _TMR1_ReadTimer
                             ___lmul
 ---------------------------------------------------------------------------------
 (3) ___lmul                                              12     4      8     444
                                              1 BANK0     12     4      8
 ---------------------------------------------------------------------------------
 (2) _TMR1_ReadTimer                                      11     9      2     102
                                              1 BANK0     11     9      2
 ---------------------------------------------------------------------------------
 (1) _SYSTEM_Initialize                                    0     0      0     216
                     _ADC_Initialize
                     _FVR_Initialize
                    _I2C2_Initialize
              _OSCILLATOR_Initialize
             _PIN_MANAGER_Initialize
                    _SPI1_Initialize
                    _TMR1_Initialize
                    _TMR2_Initialize
                     _WDT_Initialize
 ---------------------------------------------------------------------------------
 (2) _WDT_Initialize                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _TMR2_Initialize                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _TMR1_Initialize                                      0     0      0     108
           _TMR1_SetInterruptHandler
 ---------------------------------------------------------------------------------
 (3) _TMR1_SetInterruptHandler                             2     0      2     108
                                              1 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (2) _SPI1_Initialize                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _PIN_MANAGER_Initialize                               0     0      0     108
         _IOCAF2_SetInterruptHandler
 ---------------------------------------------------------------------------------
 (3) _IOCAF2_SetInterruptHandler                           2     0      2     108
                                              1 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (2) _OSCILLATOR_Initialize                                0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _I2C2_Initialize                                      1     1      0       0
                                              1 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _FVR_Initialize                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _ADC_Initialize                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _DOOR_run                                             4     4      0       0
                                              5 BANK0      4     4      0
           _Timeout_getGlobalCounter
 ---------------------------------------------------------------------------------
 (1) _Timeout_getGlobalCounter                             4     0      4       0
                                              1 BANK0      4     0      4
 ---------------------------------------------------------------------------------
 (1) _DOOR_init                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _BMP_readTemperature                                 20    17      3   48745
                                              6 BANK1     20    17      3
                           _BMP_init
           _Diag_getTempSensorHealth
           _Diag_setTempSensorHealth
                  _HMC5883L_ReadBits
                     _I2C_BufferRead
                      _I2C_ByteWrite
                            ___aldiv
                           ___altoft
                           ___awtoft
                            ___ftadd
                            ___ftdiv
                            ___ftmul
                            ___ftneg
                            ___fttol
                           ___lwtoft
 ---------------------------------------------------------------------------------
 (3) ___lwtoft                                             4     1      3    2923
                                              9 BANK0      4     1      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (2) ___fttol                                             14    10      4     679
                                             70 BANK0      8     4      4
                                              0 BANK1      6     6      0
            _Sensor_getSupplyVoltage (ARG)
                           ___altoft (ARG)
                            ___ftadd (ARG)
                            ___ftmul (ARG)
 ---------------------------------------------------------------------------------
 (2) ___ftneg                                              3     0      3     524
                                             33 BANK0      3     0      3
                            ___ftdiv (ARG)
                           ___lwtoft (ARG)
 ---------------------------------------------------------------------------------
 (2) ___ftmul                                             16    10      6    4338
                                             54 BANK0     16    10      6
            _Sensor_getSupplyVoltage (ARG)
                           ___altoft (ARG)
                           ___awtoft (ARG)
                            ___ftadd (ARG)
                            ___ftdiv (ARG)
                            ___ftneg (ARG)
                           ___ftpack
                           ___lwtoft (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftdiv                                             16    10      6    4846
                                             17 BANK0     16    10      6
                           ___altoft (ARG)
                           ___ftpack
                           ___ftpack (ARG)
                           ___lwtoft (ARG)
 ---------------------------------------------------------------------------------
 (2) ___ftadd                                             13     7      6    5611
                                             41 BANK0     13     7      6
            _Sensor_getSupplyVoltage (ARG)
                           ___altoft (ARG)
                            ___ftdiv (ARG)
                            ___ftneg (ARG)
                           ___ftpack
                           ___lwtoft (ARG)
 ---------------------------------------------------------------------------------
 (2) ___awtoft                                             6     3      3    3025
                                              9 BANK0      6     3      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (2) ___altoft                                             8     4      4    3096
                                              9 BANK0      8     4      4
                           ___ftpack
                           ___ftpack (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftpack                                             8     3      5    2584
                                              1 BANK0      8     3      5
 ---------------------------------------------------------------------------------
 (2) ___aldiv                                             15     7      8     599
                                              1 BANK0     15     7      8
 ---------------------------------------------------------------------------------
 (2) _HMC5883L_ReadBits                                   10     6      4    8661
                                             35 BANK0     10     6      4
            _HMC5883L_I2C_BufferRead
 ---------------------------------------------------------------------------------
 (3) _HMC5883L_I2C_BufferRead                              7     2      5    6134
                                             28 BANK0      7     2      5
                     _I2C_BufferRead
 ---------------------------------------------------------------------------------
 (2) _Diag_getTempSensorHealth                             0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _BMP_init                                             4     4      0    7138
                                             28 BANK0      4     4      0
           _Diag_setTempSensorHealth
                     _I2C_BufferRead
                      _I2C_ByteWrite
 ---------------------------------------------------------------------------------
 (2) _I2C_ByteWrite                                       10     8      2    2674
                                             15 BANK0     10     8      2
                   _I2C2_MasterWrite
                 _Timeout_hasExpired
                 _Timeout_setTimeout
 ---------------------------------------------------------------------------------
 (2) _I2C_BufferRead                                      11     6      5    4393
                                             17 BANK0     11     6      5
                    _I2C2_MasterRead
                   _I2C2_MasterWrite
                 _Timeout_hasExpired
                 _Timeout_setTimeout
 ---------------------------------------------------------------------------------
 (3) _Timeout_setTimeout                                   2     0      2     262
                                              1 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (3) _Timeout_hasExpired                                  12    12      0       0
                                              1 BANK0     12    12      0
 ---------------------------------------------------------------------------------
 (3) _I2C2_MasterWrite                                     7     3      4    1627
                                              8 BANK0      7     3      4
               _I2C2_MasterTRBInsert
           _I2C2_MasterWriteTRBBuild
 ---------------------------------------------------------------------------------
 (4) _I2C2_MasterWriteTRBBuild                             7     3      4     450
                                              1 BANK0      7     3      4
 ---------------------------------------------------------------------------------
 (3) _I2C2_MasterRead                                      8     2      6    1398
                                              9 BANK0      8     2      6
            _I2C2_MasterReadTRBBuild
               _I2C2_MasterTRBInsert
 ---------------------------------------------------------------------------------
 (4) _I2C2_MasterTRBInsert                                 4     2      2     494
                                              1 BANK0      4     2      2
 ---------------------------------------------------------------------------------
 (4) _I2C2_MasterReadTRBBuild                              8     3      5     481
                                              1 BANK0      8     3      5
 ---------------------------------------------------------------------------------
 (2) _Diag_setTempSensorHealth                             2     2      0      31
                                              1 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (8) _INTERRUPT_InterruptManager                           1     1      0      22
                                              0 BANK0      1     1      0
               _I2C2_BusCollisionISR
                           _I2C2_ISR
                    _PIN_MANAGER_IOC
                           _TMR1_ISR
 ---------------------------------------------------------------------------------
 (9) _TMR1_ISR                                             0     0      0       0
                      _TMR1_CallBack
 ---------------------------------------------------------------------------------
 (10) _TMR1_CallBack                                       0     0      0       0
                   Absolute function *
       _TMR1_DefaultInterruptHandler *
                  _Timeout_increment
 ---------------------------------------------------------------------------------
 (11) _Timeout_increment                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (11) _TMR1_DefaultInterruptHandler                        0     0      0       0
 ---------------------------------------------------------------------------------
 (9) _PIN_MANAGER_IOC                                      0     0      0       0
                         _IOCAF2_ISR
 ---------------------------------------------------------------------------------
 (10) _IOCAF2_ISR                                          0     0      0       0
                   Absolute function *
     _IOCAF2_DefaultInterruptHandler *
 ---------------------------------------------------------------------------------
 (11) _IOCAF2_DefaultInterruptHandler                      0     0      0       0
 ---------------------------------------------------------------------------------
 (11) Absolute function(Fake)                              0     0      0       0
 ---------------------------------------------------------------------------------
 (9) _I2C2_ISR                                             4     4      0      22
                                              3 COMMON     4     4      0
              _I2C2_FunctionComplete
                          _I2C2_Stop
 ---------------------------------------------------------------------------------
 (10) _I2C2_Stop                                           3     3      0      22
                                              0 COMMON     3     3      0
 ---------------------------------------------------------------------------------
 (10) _I2C2_FunctionComplete                               1     1      0       0
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (9) _I2C2_BusCollisionISR                                 0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 11
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _BMP_init
     _Diag_setTempSensorHealth
     _I2C_BufferRead
       _I2C2_MasterRead
         _I2C2_MasterReadTRBBuild
         _I2C2_MasterTRBInsert
       _I2C2_MasterWrite
         _I2C2_MasterTRBInsert
         _I2C2_MasterWriteTRBBuild
       _Timeout_hasExpired
       _Timeout_setTimeout
     _I2C_ByteWrite
       _I2C2_MasterWrite
         _I2C2_MasterTRBInsert
         _I2C2_MasterWriteTRBBuild
       _Timeout_hasExpired
       _Timeout_setTimeout
   _BMP_readTemperature
     _BMP_init
       _Diag_setTempSensorHealth
       _I2C_BufferRead
         _I2C2_MasterRead
           _I2C2_MasterReadTRBBuild
           _I2C2_MasterTRBInsert
         _I2C2_MasterWrite
           _I2C2_MasterTRBInsert
           _I2C2_MasterWriteTRBBuild
         _Timeout_hasExpired
         _Timeout_setTimeout
       _I2C_ByteWrite
         _I2C2_MasterWrite
           _I2C2_MasterTRBInsert
           _I2C2_MasterWriteTRBBuild
         _Timeout_hasExpired
         _Timeout_setTimeout
     _Diag_getTempSensorHealth
     _Diag_setTempSensorHealth
     _HMC5883L_ReadBits
       _HMC5883L_I2C_BufferRead
         _I2C_BufferRead
           _I2C2_MasterRead
             _I2C2_MasterReadTRBBuild
             _I2C2_MasterTRBInsert
           _I2C2_MasterWrite
             _I2C2_MasterTRBInsert
             _I2C2_MasterWriteTRBBuild
           _Timeout_hasExpired
           _Timeout_setTimeout
     _I2C_BufferRead
       _I2C2_MasterRead
         _I2C2_MasterReadTRBBuild
         _I2C2_MasterTRBInsert
       _I2C2_MasterWrite
         _I2C2_MasterTRBInsert
         _I2C2_MasterWriteTRBBuild
       _Timeout_hasExpired
       _Timeout_setTimeout
     _I2C_ByteWrite
       _I2C2_MasterWrite
         _I2C2_MasterTRBInsert
         _I2C2_MasterWriteTRBBuild
       _Timeout_hasExpired
       _Timeout_setTimeout
     ___aldiv
     ___altoft
       ___ftpack
       ___ftpack (ARG)
     ___awtoft
       ___ftpack
     ___ftadd
       _Sensor_getSupplyVoltage (ARG)
         _ADC_GetConversionResult
         _ADC_IsConversionDone
         _ADC_SelectChannel
         _ADC_StartConversion
         _FVR_IsOutputReady
         _Sensor_peripheralSleep
         _Sensor_peripheralWake
         ___ftdiv
           ___altoft (ARG)
             ___ftpack
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
         ___lwtoft
           ___ftpack
       ___altoft (ARG)
         ___ftpack
         ___ftpack (ARG)
       ___ftdiv (ARG)
         ___altoft (ARG)
           ___ftpack
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
       ___ftneg (ARG)
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
         ___lwtoft (ARG)
           ___ftpack
       ___ftpack (ARG)
       ___lwtoft (ARG)
         ___ftpack
     ___ftdiv
       ___altoft (ARG)
         ___ftpack
         ___ftpack (ARG)
       ___ftpack (ARG)
       ___ftpack (ARG)
       ___lwtoft (ARG)
         ___ftpack
     ___ftmul
       _Sensor_getSupplyVoltage (ARG)
         _ADC_GetConversionResult
         _ADC_IsConversionDone
         _ADC_SelectChannel
         _ADC_StartConversion
         _FVR_IsOutputReady
         _Sensor_peripheralSleep
         _Sensor_peripheralWake
         ___ftdiv
           ___altoft (ARG)
             ___ftpack
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
         ___lwtoft
           ___ftpack
       ___altoft (ARG)
         ___ftpack
         ___ftpack (ARG)
       ___awtoft (ARG)
         ___ftpack
       ___ftadd (ARG)
         _Sensor_getSupplyVoltage (ARG)
           _ADC_GetConversionResult
           _ADC_IsConversionDone
           _ADC_SelectChannel
           _ADC_StartConversion
           _FVR_IsOutputReady
           _Sensor_peripheralSleep
           _Sensor_peripheralWake
           ___ftdiv
             ___altoft (ARG)
               ___ftpack
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
           ___lwtoft
             ___ftpack
         ___altoft (ARG)
           ___ftpack
           ___ftpack (ARG)
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
         ___ftneg (ARG)
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
           ___lwtoft (ARG)
             ___ftpack
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
       ___ftdiv (ARG)
         ___altoft (ARG)
           ___ftpack
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
       ___ftneg (ARG)
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
         ___lwtoft (ARG)
           ___ftpack
       ___ftpack (ARG)
       ___lwtoft (ARG)
         ___ftpack
     ___ftneg
       ___ftdiv (ARG)
         ___altoft (ARG)
           ___ftpack
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
       ___lwtoft (ARG)
         ___ftpack
     ___fttol
       _Sensor_getSupplyVoltage (ARG)
         _ADC_GetConversionResult
         _ADC_IsConversionDone
         _ADC_SelectChannel
         _ADC_StartConversion
         _FVR_IsOutputReady
         _Sensor_peripheralSleep
         _Sensor_peripheralWake
         ___ftdiv
           ___altoft (ARG)
             ___ftpack
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
         ___lwtoft
           ___ftpack
       ___altoft (ARG)
         ___ftpack
         ___ftpack (ARG)
       ___ftadd (ARG)
         _Sensor_getSupplyVoltage (ARG)
           _ADC_GetConversionResult
           _ADC_IsConversionDone
           _ADC_SelectChannel
           _ADC_StartConversion
           _FVR_IsOutputReady
           _Sensor_peripheralSleep
           _Sensor_peripheralWake
           ___ftdiv
             ___altoft (ARG)
               ___ftpack
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
           ___lwtoft
             ___ftpack
         ___altoft (ARG)
           ___ftpack
           ___ftpack (ARG)
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
         ___ftneg (ARG)
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
           ___lwtoft (ARG)
             ___ftpack
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
       ___ftmul (ARG)
         _Sensor_getSupplyVoltage (ARG)
           _ADC_GetConversionResult
           _ADC_IsConversionDone
           _ADC_SelectChannel
           _ADC_StartConversion
           _FVR_IsOutputReady
           _Sensor_peripheralSleep
           _Sensor_peripheralWake
           ___ftdiv
             ___altoft (ARG)
               ___ftpack
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
           ___lwtoft
             ___ftpack
         ___altoft (ARG)
           ___ftpack
           ___ftpack (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           _Sensor_getSupplyVoltage (ARG)
             _ADC_GetConversionResult
             _ADC_IsConversionDone
             _ADC_SelectChannel
             _ADC_StartConversion
             _FVR_IsOutputReady
             _Sensor_peripheralSleep
             _Sensor_peripheralWake
             ___ftdiv
               ___altoft (ARG)
                 ___ftpack
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
             ___lwtoft
               ___ftpack
           ___altoft (ARG)
             ___ftpack
             ___ftpack (ARG)
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
           ___ftneg (ARG)
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
             ___lwtoft (ARG)
               ___ftpack
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
         ___ftneg (ARG)
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
           ___lwtoft (ARG)
             ___ftpack
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
     ___lwtoft
       ___ftpack
   _DOOR_init
   _DOOR_run
     _Timeout_getGlobalCounter
   _SYSTEM_Initialize
     _ADC_Initialize
     _FVR_Initialize
     _I2C2_Initialize
     _OSCILLATOR_Initialize
     _PIN_MANAGER_Initialize
       _IOCAF2_SetInterruptHandler
     _SPI1_Initialize
     _TMR1_Initialize
       _TMR1_SetInterruptHandler
     _TMR2_Initialize
     _WDT_Initialize
   _Sensor_peripheralSleep
   _Timeout_getGlobalCounter
   _Timeout_updateCurrentTime
     _TMR1_ReadTimer
     ___lmul
   _Wireless_init
     _RF_Init
     _RF_ResetStatusIRQ
       _RF_WriteRegister
         _SPI_WriteRead
           _SPI1_Exchange8bit
     _RF_WriteRegister
       _SPI_WriteRead
         _SPI1_Exchange8bit
     _RF_WriteRegisterData
       _SPI_WriteBuffer
         _SPI_WriteRead
           _SPI1_Exchange8bit
       _SPI_WriteRead
         _SPI1_Exchange8bit
   _Wireless_packageData
     _BMP_readTemperature (ARG)
       _BMP_init
         _Diag_setTempSensorHealth
         _I2C_BufferRead
           _I2C2_MasterRead
             _I2C2_MasterReadTRBBuild
             _I2C2_MasterTRBInsert
           _I2C2_MasterWrite
             _I2C2_MasterTRBInsert
             _I2C2_MasterWriteTRBBuild
           _Timeout_hasExpired
           _Timeout_setTimeout
         _I2C_ByteWrite
           _I2C2_MasterWrite
             _I2C2_MasterTRBInsert
             _I2C2_MasterWriteTRBBuild
           _Timeout_hasExpired
           _Timeout_setTimeout
       _Diag_getTempSensorHealth
       _Diag_setTempSensorHealth
       _HMC5883L_ReadBits
         _HMC5883L_I2C_BufferRead
           _I2C_BufferRead
             _I2C2_MasterRead
               _I2C2_MasterReadTRBBuild
               _I2C2_MasterTRBInsert
             _I2C2_MasterWrite
               _I2C2_MasterTRBInsert
               _I2C2_MasterWriteTRBBuild
             _Timeout_hasExpired
             _Timeout_setTimeout
       _I2C_BufferRead
         _I2C2_MasterRead
           _I2C2_MasterReadTRBBuild
           _I2C2_MasterTRBInsert
         _I2C2_MasterWrite
           _I2C2_MasterTRBInsert
           _I2C2_MasterWriteTRBBuild
         _Timeout_hasExpired
         _Timeout_setTimeout
       _I2C_ByteWrite
         _I2C2_MasterWrite
           _I2C2_MasterTRBInsert
           _I2C2_MasterWriteTRBBuild
         _Timeout_hasExpired
         _Timeout_setTimeout
       ___aldiv
       ___altoft
         ___ftpack
         ___ftpack (ARG)
       ___awtoft
         ___ftpack
       ___ftadd
         _Sensor_getSupplyVoltage (ARG)
           _ADC_GetConversionResult
           _ADC_IsConversionDone
           _ADC_SelectChannel
           _ADC_StartConversion
           _FVR_IsOutputReady
           _Sensor_peripheralSleep
           _Sensor_peripheralWake
           ___ftdiv
             ___altoft (ARG)
               ___ftpack
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
           ___lwtoft
             ___ftpack
         ___altoft (ARG)
           ___ftpack
           ___ftpack (ARG)
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
         ___ftneg (ARG)
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
           ___lwtoft (ARG)
             ___ftpack
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
       ___ftdiv
         ___altoft (ARG)
           ___ftpack
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
       ___ftmul
         _Sensor_getSupplyVoltage (ARG)
           _ADC_GetConversionResult
           _ADC_IsConversionDone
           _ADC_SelectChannel
           _ADC_StartConversion
           _FVR_IsOutputReady
           _Sensor_peripheralSleep
           _Sensor_peripheralWake
           ___ftdiv
             ___altoft (ARG)
               ___ftpack
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
           ___lwtoft
             ___ftpack
         ___altoft (ARG)
           ___ftpack
           ___ftpack (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           _Sensor_getSupplyVoltage (ARG)
             _ADC_GetConversionResult
             _ADC_IsConversionDone
             _ADC_SelectChannel
             _ADC_StartConversion
             _FVR_IsOutputReady
             _Sensor_peripheralSleep
             _Sensor_peripheralWake
             ___ftdiv
               ___altoft (ARG)
                 ___ftpack
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
             ___lwtoft
               ___ftpack
           ___altoft (ARG)
             ___ftpack
             ___ftpack (ARG)
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
           ___ftneg (ARG)
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
             ___lwtoft (ARG)
               ___ftpack
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
         ___ftneg (ARG)
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
           ___lwtoft (ARG)
             ___ftpack
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
       ___ftneg
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
         ___lwtoft (ARG)
           ___ftpack
       ___fttol
         _Sensor_getSupplyVoltage (ARG)
           _ADC_GetConversionResult
           _ADC_IsConversionDone
           _ADC_SelectChannel
           _ADC_StartConversion
           _FVR_IsOutputReady
           _Sensor_peripheralSleep
           _Sensor_peripheralWake
           ___ftdiv
             ___altoft (ARG)
               ___ftpack
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
           ___lwtoft
             ___ftpack
         ___altoft (ARG)
           ___ftpack
           ___ftpack (ARG)
         ___ftadd (ARG)
           _Sensor_getSupplyVoltage (ARG)
             _ADC_GetConversionResult
             _ADC_IsConversionDone
             _ADC_SelectChannel
             _ADC_StartConversion
             _FVR_IsOutputReady
             _Sensor_peripheralSleep
             _Sensor_peripheralWake
             ___ftdiv
               ___altoft (ARG)
                 ___ftpack
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
             ___lwtoft
               ___ftpack
           ___altoft (ARG)
             ___ftpack
             ___ftpack (ARG)
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
           ___ftneg (ARG)
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
             ___lwtoft (ARG)
               ___ftpack
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
         ___ftmul (ARG)
           _Sensor_getSupplyVoltage (ARG)
             _ADC_GetConversionResult
             _ADC_IsConversionDone
             _ADC_SelectChannel
             _ADC_StartConversion
             _FVR_IsOutputReady
             _Sensor_peripheralSleep
             _Sensor_peripheralWake
             ___ftdiv
               ___altoft (ARG)
                 ___ftpack
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
             ___lwtoft
               ___ftpack
           ___altoft (ARG)
             ___ftpack
             ___ftpack (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             _Sensor_getSupplyVoltage (ARG)
               _ADC_GetConversionResult
               _ADC_IsConversionDone
               _ADC_SelectChannel
               _ADC_StartConversion
               _FVR_IsOutputReady
               _Sensor_peripheralSleep
               _Sensor_peripheralWake
               ___ftdiv
                 ___altoft (ARG)
                   ___ftpack
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
               ___lwtoft
                 ___ftpack
             ___altoft (ARG)
               ___ftpack
               ___ftpack (ARG)
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
             ___ftneg (ARG)
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
           ___ftneg (ARG)
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
             ___lwtoft (ARG)
               ___ftpack
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
       ___lwtoft
         ___ftpack
     _Diag_getSensorHealth (ARG)
     _Sensor_getSupplyVoltage (ARG)
       _ADC_GetConversionResult
       _ADC_IsConversionDone
       _ADC_SelectChannel
       _ADC_StartConversion
       _FVR_IsOutputReady
       _Sensor_peripheralSleep
       _Sensor_peripheralWake
       ___ftdiv
         ___altoft (ARG)
           ___ftpack
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
       ___lwtoft
         ___ftpack
     _Wireless_checkDataReceived (ARG)
       _DOOR_resetPos
       _DOOR_update
         _Storage_save
           _DATAEE_WriteByte
       _RF_DataIsReady
         _RF_ReadRegister
           _SPI_WriteRead
             _SPI1_Exchange8bit
       _RF_RxPayload
         _RF_ReadRegisterData
           _SPI_WriteRead
             _SPI1_Exchange8bit
           _SPI_WriteReadBuffer
             _SPI_WriteRead
               _SPI1_Exchange8bit
       ___lmul
     _Wireless_sendData (ARG)
       _RF_ResetStatusIRQ
         _RF_WriteRegister
           _SPI_WriteRead
             _SPI1_Exchange8bit
       _RF_TxPayload
         _RF_Write
           _SPI_WriteRead
             _SPI1_Exchange8bit
         _RF_WriteRegisterData
           _SPI_WriteBuffer
             _SPI_WriteRead
               _SPI1_Exchange8bit
           _SPI_WriteRead
             _SPI1_Exchange8bit
     ___ftadd (ARG)
       _Sensor_getSupplyVoltage (ARG)
         _ADC_GetConversionResult
         _ADC_IsConversionDone
         _ADC_SelectChannel
         _ADC_StartConversion
         _FVR_IsOutputReady
         _Sensor_peripheralSleep
         _Sensor_peripheralWake
         ___ftdiv
           ___altoft (ARG)
             ___ftpack
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
         ___lwtoft
           ___ftpack
       ___altoft (ARG)
         ___ftpack
         ___ftpack (ARG)
       ___ftdiv (ARG)
         ___altoft (ARG)
           ___ftpack
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
       ___ftneg (ARG)
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
         ___lwtoft (ARG)
           ___ftpack
       ___ftpack (ARG)
       ___lwtoft (ARG)
         ___ftpack
     ___ftmul (ARG)
       _Sensor_getSupplyVoltage (ARG)
         _ADC_GetConversionResult
         _ADC_IsConversionDone
         _ADC_SelectChannel
         _ADC_StartConversion
         _FVR_IsOutputReady
         _Sensor_peripheralSleep
         _Sensor_peripheralWake
         ___ftdiv
           ___altoft (ARG)
             ___ftpack
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
         ___lwtoft
           ___ftpack
       ___altoft (ARG)
         ___ftpack
         ___ftpack (ARG)
       ___awtoft (ARG)
         ___ftpack
       ___ftadd (ARG)
         _Sensor_getSupplyVoltage (ARG)
           _ADC_GetConversionResult
           _ADC_IsConversionDone
           _ADC_SelectChannel
           _ADC_StartConversion
           _FVR_IsOutputReady
           _Sensor_peripheralSleep
           _Sensor_peripheralWake
           ___ftdiv
             ___altoft (ARG)
               ___ftpack
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
           ___lwtoft
             ___ftpack
         ___altoft (ARG)
           ___ftpack
           ___ftpack (ARG)
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
         ___ftneg (ARG)
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
           ___lwtoft (ARG)
             ___ftpack
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
       ___ftdiv (ARG)
         ___altoft (ARG)
           ___ftpack
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
       ___ftneg (ARG)
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
         ___lwtoft (ARG)
           ___ftpack
       ___ftpack (ARG)
       ___lwtoft (ARG)
         ___ftpack
     ___fttol (ARG)
       _Sensor_getSupplyVoltage (ARG)
         _ADC_GetConversionResult
         _ADC_IsConversionDone
         _ADC_SelectChannel
         _ADC_StartConversion
         _FVR_IsOutputReady
         _Sensor_peripheralSleep
         _Sensor_peripheralWake
         ___ftdiv
           ___altoft (ARG)
             ___ftpack
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
         ___lwtoft
           ___ftpack
       ___altoft (ARG)
         ___ftpack
         ___ftpack (ARG)
       ___ftadd (ARG)
         _Sensor_getSupplyVoltage (ARG)
           _ADC_GetConversionResult
           _ADC_IsConversionDone
           _ADC_SelectChannel
           _ADC_StartConversion
           _FVR_IsOutputReady
           _Sensor_peripheralSleep
           _Sensor_peripheralWake
           ___ftdiv
             ___altoft (ARG)
               ___ftpack
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
           ___lwtoft
             ___ftpack
         ___altoft (ARG)
           ___ftpack
           ___ftpack (ARG)
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
         ___ftneg (ARG)
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
           ___lwtoft (ARG)
             ___ftpack
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
       ___ftmul (ARG)
         _Sensor_getSupplyVoltage (ARG)
           _ADC_GetConversionResult
           _ADC_IsConversionDone
           _ADC_SelectChannel
           _ADC_StartConversion
           _FVR_IsOutputReady
           _Sensor_peripheralSleep
           _Sensor_peripheralWake
           ___ftdiv
             ___altoft (ARG)
               ___ftpack
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
           ___lwtoft
             ___ftpack
         ___altoft (ARG)
           ___ftpack
           ___ftpack (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           _Sensor_getSupplyVoltage (ARG)
             _ADC_GetConversionResult
             _ADC_IsConversionDone
             _ADC_SelectChannel
             _ADC_StartConversion
             _FVR_IsOutputReady
             _Sensor_peripheralSleep
             _Sensor_peripheralWake
             ___ftdiv
               ___altoft (ARG)
                 ___ftpack
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
             ___lwtoft
               ___ftpack
           ___altoft (ARG)
             ___ftpack
             ___ftpack (ARG)
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
           ___ftneg (ARG)
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
             ___lwtoft (ARG)
               ___ftpack
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
         ___ftneg (ARG)
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
           ___lwtoft (ARG)
             ___ftpack
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
     ___lldiv (ARG)
     ___lwdiv (ARG)
   _Wireless_sleep
     _RF_ReadRegisterData
       _SPI_WriteRead
         _SPI1_Exchange8bit
       _SPI_WriteReadBuffer
         _SPI_WriteRead
           _SPI1_Exchange8bit
     _RF_WriteRegister
       _SPI_WriteRead
         _SPI1_Exchange8bit
   _Wireless_wake
     _RF_ReadRegisterData
       _SPI_WriteRead
         _SPI1_Exchange8bit
       _SPI_WriteReadBuffer
         _SPI_WriteRead
           _SPI1_Exchange8bit
     _RF_WriteRegister
       _SPI_WriteRead
         _SPI1_Exchange8bit
   ___lldiv
   ___lwdiv
   _setSleepTime

 _INTERRUPT_InterruptManager (ROOT)
   _I2C2_BusCollisionISR
   _I2C2_ISR
     _I2C2_FunctionComplete
     _I2C2_Stop
   _PIN_MANAGER_IOC
     _IOCAF2_ISR
       Absolute function(Fake) *
       _IOCAF2_DefaultInterruptHandler *
   _TMR1_ISR
     _TMR1_CallBack
       Absolute function(Fake) *
       _TMR1_DefaultInterruptHandler *
       _Timeout_increment *

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             3F0      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      7       E       2      100.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50     4F      4F       5       98.8%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BANK1               50     29      46       7       87.5%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BITBANK2            50      0       0       8        0.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BANK2               50      0      4E       9       97.5%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BITBANK3            50      0       0      10        0.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BANK3               50      C      38      11       70.0%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BITBANK4            50      0       0      12        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BANK4               50      0       0      13        0.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BITBANK5            50      0       0      14        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BANK5               50      0       0      15        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BITBANK6            50      0       0      16        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BANK6               50      0       0      17        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BITBANK7            50      0       0      18        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BANK7               50      0       0      19        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
ABS                  0      0     129      20        0.0%
BITBANK8            50      0       0      21        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BANK8               50      0       0      22        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITBANK9            50      0       0      23        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BANK9               50      0       0      24        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITBANK10           50      0       0      25        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BANK10              50      0       0      26        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITBANK11           50      0       0      27        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BANK11              50      0       0      28        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITBANK12           30      0       0      29        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BANK12              30      0       0      30        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
DATA                 0      0     129      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V1.45 build -152302408 
Symbol Table                                                                                   Fri Feb 15 22:33:43 2019

                             _Wireless_init 0CBF                           _SPI1_Exchange8bit 1408  
                             _Wireless_wake 1660                          ??_RF_WriteRegister 0024  
                              _RF_TxPayload 15B4                                ___altoft@exp 002F  
                            _Wireless_sleep 14FE                                           pc 0002  
              __end_of_Wireless_packageData 1000                          ?_SPI1_Exchange8bit 0070  
                               __CFG_CP$OFF 0000                       ?_I2C2_MasterTRBInsert 0021  
                             ___altoft@sign 0030                                          _b1 01A4  
              __size_of_RF_ReadRegisterData 001D                      __end_of_FVR_Initialize 1377  
                       RF_TxPayload@payload 0030                           ??_SPI_WriteBuffer 0026  
           __size_of_Sensor_peripheralSleep 0005              I2C2_MasterReadTRBBuild@address 0024  
           HMC5883L_I2C_BufferRead@ReadAddr 003E                                ___ftadd@exp1 0055  
                              ___ftadd@exp2 0054                               _doorOpenAngle 00DE  
                               __CFG_LVP$ON 0000                                ___ftadd@sign 0053  
                                       l522 1410                                         l358 0A3A  
                                       l498 171D                                         _PR2 001B  
                          ??_RF_DataIsReady 0026                                __CFG_CPD$OFF 0000  
                           _timer1ReloadVal 007C                         ??_SPI1_Exchange8bit 0021  
                              ?_DOOR_update 0027                             _TMR2_Initialize 13C9  
                              __CFG_BORV$LO 0000                                         wreg 0009  
            HMC5883L_I2C_BufferRead@pBuffer 003C                                __CFG_IESO$ON 0000  
        __end_of_IOCAF2_SetInterruptHandler 13EC                  _IOCAF2_SetInterruptHandler 13E3  
                             _globalCounter 00CE                           _Wireless_sendData 142F  
                       _BMP_readTemperature 0077                      ??_RF_WriteRegisterData 002C  
                             _DOOR_resetPos 136D                                ___ftdiv@cntr 003B  
                          __end_of_I2C2_ISR 0682                          ?_Wireless_sendData 0070  
                              ___ftdiv@sign 0040                      RF_ResetStatusIRQ@flags 0026  
                                      l1020 0096                                        l1019 0086  
                                      l1080 0FFA                                        l1092 0C45  
                                      l1501 0B2E                                        l1508 0B41  
                                      l1532 0721                                        l1509 0B49  
                                      l1367 0789                                        l1592 0DB7  
                                      l6010 0EAF                                        l6004 0E99  
                                      l6022 0EEA                                        l5312 1748  
                                      l6200 0B7D                                        l5306 1772  
                                      l6034 0F06                                        l6026 0EF2  
                                      l6210 0B9D                                        l6140 00C5  
                                      l6212 0BCC                                        l6204 0B84  
                                      l5340 16A2                                        l6038 0F0E  
                                      l6062 0D55                                        l6214 0BCE  
                                      l5360 0995                                        l6080 0D8E  
                                      l6312 0838                                        l6304 081A  
                                      l5290 0A32                                        l5370 0A5B  
                                      l5530 0880                                        l5522 087A  
                                      l5450 0B0B                                        l6090 0DBB  
                                      l6082 0D9F                                        l6306 0826  
                                      l6410 03CB                                        l5284 0A25  
                                      l5380 0A6C                                        l5460 0B33  
                                      l5452 0B15                                        l6148 00E6  
                                      l5348 159B                                        l6316 0841  
                                      l5374 0A66                                        l5518 086F  
                                      l5462 0B3B                                        l5454 0B1A  
                                      l5446 0B04                                        l5614 0E06  
                                      l6094 0DC9                                        l5288 0A2C  
                                      l5384 0A8A                                        l5608 0DF0  
                                      l6088 0DAD                                        l6440 0443  
                                      l6290 09E1                                        l6450 04A1  
                                      l6426 0428                                        l5396 0A9B  
                                      l5388 0A95                                        l5812 0948  
                                      l5636 0E60                                        l5628 0E47  
                                      l5572 163A                                        l6276 09A8  
                                      l6428 0430                                        l5910 0897  
                                      l5590 17D9                                        l6286 09D6  
                                      l6278 09B6                                        l5912 08A7  
                                      l6480 0529                                        l5594 17E3  
                                      l5754 08CF                                        l6466 04DE  
                                      l5924 16CA                                        l5748 08C2  
                                      l5844 0C61                                        l5782 0C05  
                                      l5774 0BE9                                        l5870 079A  
                                      l5934 06AA                                        l5854 0CB1  
                                      l6478 0516                                        l5880 07B8  
                                      l5944 06C0                                        l5848 0C6E  
                                      l5962 06ED                                        l5938 06B1  
                                      l5858 0CB7                                        l5892 07E3  
                                      l5980 0733                                        l5964 06F7  
                                      l5956 06DA                                        l5878 07AA  
                                      l5974 0713                                        l5966 06FC  
                                      l5896 07F1                                        l5888 07D8  
                                      l5984 0745                                        l5976 071D  
                                      l5968 0700                                        l5994 0760  
                __size_of_HMC5883L_ReadBits 0046                                        _LATA 010C  
                                      _LATB 010D                                        _LATC 010E  
                                      u5105 0E57                                        u5025 17E4  
                                      u5115 0E61                                        u5035 17EB  
                                      u5230 093D                                        u5214 091F  
                                      u5215 091E                                        u5224 092B  
                                      u5225 092A                                        u6105 09AB  
                                      u5235 093B                                        u5075 0E18  
                                      u5085 0E28                                        u6125 09B7  
                                      u6205 0831                                        u5335 07AD  
                                      u5415 089C                                        u5095 0E48  
                                      u6135 09CB                                        u6215 0839  
                                      u6145 09D7                                        u5355 07B9  
                                      u5365 07CD                                        u5375 07D9  
                                      u5535 06DB                                        u6175 081D  
                                      u5625 0714                                        u5705 0ECB  
                                      u4915 0B36                                        u6195 0827  
                                      u5565 06EE                                        u5725 0EF3  
                                      u5735 0EF9                                        u5815 0D5D  
                                      u4785 0991                                        u6465 04F4  
                                      u4955 0B50                                        u4875 0B10  
                                      u5595 0701                                        u5765 0F0F  
                                      u5845 0D8F                                        u4895 0B29  
                                      u5775 0F15                                        u5695 0EBB  
                                      u6807 165C                                        u6817 155D  
                                      u5875 0DAE                                        u5955 00FF  
                                      u6827 0CC5                                        u6747 0368  
                                      u5965 010D                                        u6837 1622  
                                      u6757 038B                                        u6847 1682  
                                      u6767 03D9                                        u5985 0AE5  
                                      u6857 1688                                        u6777 1679  
                                      u6867 1695                                        u6787 15CA  
                                      u6877 169B                                        u6797 145A  
                                      u6887 14CD                                        _TMR2 001A  
                                      _WPUA 020C                                        _WPUB 020D  
                                      _WPUC 020E                                __CFG_WRT$OFF 0000  
                              _Storage_save 152F                               __CFG_FCMEN$ON 0000  
                                      _data 01BC                                        _main 0346  
                        _Timeout_hasExpired 094A                                        _curr 0120  
                              ___ftpack@arg 0021                                        _var1 0134  
                                      _var2 0131                                ___ftpack@exp 0024  
                           __end_of_RF_Init 137F                                        fsr0h 0005  
                                      fsr1h 0007                                        indf0 0000  
                                      fsr0l 0004                                        indf1 0001  
                                      fsr1l 0006                                        btemp 007E  
               ??_Timeout_updateCurrentTime 002D                 I2C2_MasterReadTRBBuild@ptrb 0028  
                             __CFG_BOREN$ON 0000                         ??_Wireless_sendData 0031  
               RF_WriteRegisterData@bufSize 002B                          __size_of_DOOR_init 0001  
                                      start 0037                           _Timeout_increment 13FE  
                 __end_of_SPI1_Exchange8bit 1414                    ?_Sensor_getSupplyVoltage 0041  
          __end_of_Diag_getTempSensorHealth 136A            __end_of_Diag_setTempSensorHealth 13C1  
                    __end_of_Wireless_sleep 1516                   HMC5883L_ReadBits@bitStart 0044  
                            ?_Wireless_init 0070                  ??_TMR1_SetInterruptHandler 0023  
                            ?_Wireless_wake 0070                               _SPI_WriteRead 1398  
                             __CFG_MCLRE$ON 0000                                ___ftmul@cntr 0064  
                        ?_Timeout_increment 0070                                ___ftmul@sign 0065  
                       ?_Timeout_hasExpired 0070                        ?_BMP_readTemperature 00A6  
                              ___fttol@exp1 00A5                   __size_of_DATAEE_WriteByte 0023  
                              ___fttol@lval 00A1                            __end_of_BMP_init 0C45  
                                _i2c2_state 0079                            __end_of_DOOR_run 0BD1  
                           ?_FVR_Initialize 0070              __size_of_OSCILLATOR_Initialize 0007  
                       __size_of_IOCAF2_ISR 000D               __end_of_OSCILLATOR_Initialize 13AB  
                       ??_Timeout_increment 0070                     _I2C2_MasterReadTRBBuild 17A4  
                           __end_of___aldiv 07FA                                       ?_main 0070  
                           __end_of___ftadd 0778                           __end_of_I2C2_Stop 15EC  
                           __end_of___ftdiv 0E82                             __end_of___ftneg 13E3  
                           __end_of___lldiv 09EA                             __end_of___ftmul 0F36  
                                     _T1CON 0018                             __end_of___fttol 0DD9  
                                     _T2CON 001C                             __end_of___lwdiv 0846  
                                     i1l300 05B3              __size_of_I2C2_FunctionComplete 0011  
                                     i1l310 05FB                                       i1l161 0032  
                                     i1l153 0015                                       i1l322 0663  
                                     i1l314 061B                                       i1l155 0021  
                                     i1l317 0630                                       i1l157 002D  
                                     i1l318 063E                                       i1l329 146C  
                                     i1l293 057F                                       i1l294 0586  
                                     i1l288 0551                                       i1l299 05A7  
             __end_of_I2C2_FunctionComplete 146F                   __end_of_Wireless_sendData 143E  
                       setSleepTime@timeSec 0021                                       _TMR1H 0017  
                                     _TMR1L 0016                                       _TRISA 008C  
                                     _TRISB 008D                                       _TRISC 008E  
          __size_of_ADC_GetConversionResult 0009                         ___lmul@multiplicand 0025  
                      ??_Timeout_hasExpired 0021                            __end_of_TMR1_ISR 13DA  
                                     _cTemp 012B                                       _adc_p 01A0  
                                     _adc_t 00D2                              ?_DOOR_resetPos 0070  
                    __size_of_I2C_ByteWrite 003C                               ___awtoft@sign 002E  
                   __end_of_PIN_MANAGER_IOC 1398                              _WDT_Initialize 1377  
                                     _errno 013A                               ___ftpack@sign 0025  
              I2C2_MasterReadTRBBuild@pdata 0021                        _Diag_getSensorHealth 1481  
                   __end_of_TMR1_Initialize 14FE                            __end_of_RF_Write 145E  
                                     pclath 000A                      _Sensor_peripheralSleep 1383  
                      RF_DataIsReady@status 0028                   __end_of_Timeout_increment 1408  
                                     status 0003                                       wtemp0 007E  
                  __size_of_SPI1_Initialize 0007                              ?_SPI_WriteRead 0070  
                           ?_Wireless_sleep 0070                           ??_I2C2_MasterRead 002F  
                   RF_WriteRegisterData@buf 0029                     RF_WriteRegisterData@reg 002D  
                     ??_BMP_readTemperature 00A9                         RF_WriteRegister@reg 0024  
                         ??_I2C2_Initialize 0021                             __initialization 0039  
                       RF_WriteRegister@val 0023                  Wireless_packageData@status 00C4  
                              __end_of_main 0539                      ??_I2C2_MasterTRBInsert 0023  
                   __end_of_TMR2_Initialize 13D1                 ?_INTERRUPT_InterruptManager 0070  
          __end_of_I2C2_MasterWriteTRBBuild 1704                                      ??_main 00C7  
                             ___fttol@sign1 00A0                   _Timeout_updateCurrentTime 0A9D  
                               _i2c2_object 00C9                              __CFG_PLLEN$OFF 0000  
                         __end_of_DOOR_init 0004                      __end_of_WDT_Initialize 137B  
                   __size_of_I2C_BufferRead 005E               __size_of_ADC_IsConversionDone 0007  
                                    _ADCON0 009D                                      _ADCON1 009E  
                        _Timeout_setTimeout 1516                            __end_of___altoft 08BF  
                                 ??_RF_Init 0021                                      i1S6730 1000  
                                    _ADRESH 009C                                      _EEADRH 0192  
                                    _ADRESL 009B                                      _EEADRL 0191  
                                    _EEDATH 0194                                      _EEDATL 0193  
                                    _EECON2 0196                         I2C_ByteWrite@status 0038  
                     ?_Diag_getSensorHealth 0070                            __end_of___awtoft 16E1  
                                    _ANSELA 018C                                      _ANSELB 018D  
                                    _ANSELC 018E                            __end_of___ftpack 0B60  
                                    _BORCON 0116                                      _T1GCON 0019  
                      _Wireless_packageData 0F36                __end_of_I2C2_BusCollisionISR 1365  
                                    i1l4100 141E                                      i1l4118 15EA  
                                    i1l4610 066E                                      i1l4506 0573  
                                    i1l4524 05A2                                      i1l4606 0667  
                                    i1l4518 0592                                      i1l4608 066A  
                                    i1l4616 0677                                      i1l4570 0609  
                                    i1l4562 05F6                                      i1l4538 05D0  
                                    i1l4556 05EC                                      i1l4590 0644  
                                    i1l4594 064B                                      i1l4578 0622  
                                    _FVRCON 0117             __end_of_Sensor_getSupplyVoltage 0904  
                  _BMP_readTemperature$2637 00B5                            __end_of___lwtoft 14BB  
                                    _OSCCON 0099                                      _WDTCON 0097  
                       ?_Timeout_setTimeout 0021                       I2C2_MasterRead@length 002B  
                     SPI1_Exchange8bit@data 0021                             ??_Wireless_init 002E  
                           ??_Wireless_wake 002F                         _SPI_WriteReadBuffer 169F  
                __size_of_SPI1_Exchange8bit 000C                              __CFG_PWRTE$OFF 0000  
                HMC5883L_ReadBits@slaveAddr 004A                            Wireless_wake@reg 0030  
                          SPI_WriteBuffer@i 0028        __end_of_TMR1_DefaultInterruptHandler 1367  
     __size_of_TMR1_DefaultInterruptHandler 0001                _TMR1_DefaultInterruptHandler 1366  
                             _I2C_ByteWrite 0846                        HMC5883L_ReadBits@tmp 004C  
                     RF_DataIsReady@channel 0027                                      ___lmul 17D0  
                                 ??___aldiv 0029                                      _dig_P1 0150  
                                    _dig_P2 014E                                      _dig_P3 014C  
                                    _dig_P4 014A                                      _dig_P5 0148  
                                    _dig_P6 0146                                      _dig_P7 0144  
                                    _dig_P8 0142                                      _dig_P9 0140  
                                    _dig_T1 00D6                                      _dig_T2 0156  
                                    _dig_T3 0154                                      _dig_T4 0152  
                                 ??___ftadd 004F                              _p_i2c2_current 0077  
                            __CFG_STVREN$ON 0000                   ??_I2C2_MasterReadTRBBuild 0026  
                                 ??___ftdiv 0037                                   ??___ftneg 0044  
                                 ??___lldiv 0029                            SPI_WriteRead@val 0022  
                                 ??___ftmul 005C                                   ??___fttol 006A  
                    RF_ReadRegisterData@buf 002A                    _Diag_getTempSensorHealth 1367  
                    RF_ReadRegisterData@reg 002E                                   ??___lwdiv 0025  
                  _Diag_setTempSensorHealth 13B9              __size_of_Sensor_peripheralWake 0005  
                                    _t_fine 012E                                   ?_I2C2_ISR 0070  
             __end_of_Sensor_peripheralWake 138D                    I2C2_Stop@completion_code 0072  
                              _HMC5883Lmode 00DF                        ??_Timeout_setTimeout 0023  
             I2C2_MasterReadTRBBuild@length 0023                       ___ftmul@f3_as_product 0061  
                      ?_SPI_WriteReadBuffer 0023                  __size_of_Wireless_sendData 000F  
                           ??_DOOR_resetPos 0021                     RF_TxPayload@payloadSize 002E  
                           ?_WDT_Initialize 0070                          _sensorUpdatePeriod 016A  
                      __size_of_DOOR_update 0016    TMR1_SetInterruptHandler@InterruptHandler 0021  
IOCAF2_SetInterruptHandler@InterruptHandler 0021                        DOOR_update@openAngle 0029  
                          ?_PIN_MANAGER_IOC 0070                       ?_Wireless_packageData 00BA  
                              ??_IOCAF2_ISR 0070                    HMC5883L_ReadBits@regAddr 0043  
                     __end_of_TMR1_CallBack 142F                         _RF_ReadRegisterData 1643  
                          ?_TMR1_Initialize 0070                           _SYSTEM_Initialize 157E  
                   __end_of__initialization 0073                                  ___altoft@c 0029  
                __size_of_Timeout_increment 000A                                   ?_BMP_init 0070  
                                 ?_DOOR_run 0070                                  ___ftadd@f1 0049  
                                ___ftadd@f2 004C                             ??_SPI_WriteRead 0022  
                        ?_SYSTEM_Initialize 0070           __size_of_Timeout_getGlobalCounter 0011  
                                ___ftdiv@f1 0034                                  ___ftdiv@f2 0031  
                                ___ftdiv@f3 003C                   ?_Timeout_getGlobalCounter 0021  
                         ?_I2C2_MasterWrite 0028                             _SPI_WriteBuffer 1599  
                                ___ftneg@f1 0041                                  ___awtoft@c 0029  
                            ?_I2C_ByteWrite 002F                                  ___ftmul@f1 0056  
                                ___ftmul@f2 0059                                   BMP_init@t 003F  
                        ??_I2C2_MasterWrite 002C                                  ___fttol@f1 0066  
              __size_of_ADC_StartConversion 0003                              __pcstackCOMMON 0070  
                 Wireless_packageData@tempC 00BB                 I2C_BufferRead@NumByteToRead 0034  
                              __pidataBANK1 1370                                __pidataBANK2 137F  
                       ??_SYSTEM_Initialize 0023                      I2C_ByteWrite@WriteAddr 0030  
                                 ?_TMR1_ISR 0070               ?_TMR1_DefaultInterruptHandler 0070  
                          _DATAEE_WriteByte 1704                           ??_SPI1_Initialize 0021  
                      ?_RF_ReadRegisterData 002A                              _i2c2_trb_count 00E2  
                                ??_I2C2_ISR 0073                            ?_TMR2_Initialize 0070  
                                 ?_RF_Write 0070                          __end_of_IOCAF2_ISR 1421  
                                ___lwtoft@c 0029                       ??_SPI_WriteReadBuffer 0025  
                   _ADC_GetConversionResult 13F5                   __size_of_RF_WriteRegister 0016  
                            _OPTION_REGbits 0095                    ?_HMC5883L_I2C_BufferRead 003C  
                    Storage_save@closeAngle 0024                     __size_of_TMR1_ReadTimer 001D  
                  _I2C2_MasterWriteTRBBuild 16E1                 ?_IOCAF2_SetInterruptHandler 0021  
          ??_IOCAF2_DefaultInterruptHandler 0070             ?_IOCAF2_DefaultInterruptHandler 0070  
                 DOOR_run@doorStateDuration 0124                      ??_Diag_getSensorHealth 0021  
              I2C2_MasterWriteTRBBuild@ptrb 0027                   __end_of_SYSTEM_Initialize 1599  
                  __size_of_RF_ReadRegister 001A                                  __pbssBANK1 00C9  
                                __pbssBANK2 0120                                  __pbssBANK3 01A0  
                                ??_BMP_init 003C                                  ??_DOOR_run 0025  
                                __pnvCOMMON 007C                        I2C_ByteWrite@pBuffer 002F  
                 SPI_WriteReadBuffer@bufOut 0028                            ??_FVR_Initialize 0021  
                                __pmaintext 0346                       SPI_WriteBuffer@bufOut 0023  
                      SPI_WriteReadBuffer@i 0029                                     ?___lmul 0021  
                   Diag_getSensorHealth@var 0022                                  ??_TMR1_ISR 0070  
                     ??_RF_ReadRegisterData 002C                                  __pintentry 0004  
                             ?_setSleepTime 0021                                   ?___altoft 0029  
                            ___lmul@product 0029                              main@doorStatus 01D7  
                                 ?___awtoft 0029                                   ?___ftpack 0021  
                                   _APFCON0 011D                                     _APFCON1 011E  
                      _I2C2_BusCollisionISR 1364                                  ??_RF_Write 0023  
                 DOOR_run@previousDoorState 00DA                     __size_of_ADC_Initialize 0008  
                                 ?___lwtoft 0029            __size_of_Sensor_getSupplyVoltage 0045  
            Wireless_checkDataReceived@data 0037                ??_Wireless_checkDataReceived 0033  
                            _I2C_BufferRead 0A3F           I2C2_ISR@i2c_10bit_address_restart 00E0  
                    I2C2_MasterRead@address 002C                                   _I2C2_Stop 15CF  
                  SPI_WriteReadBuffer@bufIn 0023                                     _OSCTUNE 0098  
                   ?_Sensor_peripheralSleep 0070                                     _SSP1ADD 0212  
                                   _SSP2ADD 021A                                     _SSP1BUF 0211  
                    ??_Wireless_packageData 006E                                     _SSP2BUF 0219  
                    I2C_ByteWrite@slaveAddr 0035                                     _RF_Init 137B  
        __size_of_Timeout_updateCurrentTime 005E                             _I2C2_MasterRead 1727  
                   __end_of_SPI_WriteBuffer 15B4                            main@doorOpenTime 01D3  
                           _I2C2_Initialize 1563               __size_of_RF_WriteRegisterData 001D  
                          ??_Wireless_sleep 002F                        DATAEE_WriteByte@bAdd 0022  
                    I2C2_MasterRead@trBlock 0158                             ??_I2C_ByteWrite 0031  
                         Wireless_sleep@reg 0030                       HMC5883L_ReadBits@data 0046  
                                   ___aldiv 0778                       HMC5883L_ReadBits@mask 004B  
                            ??_setSleepTime 0023                             __size_of___lmul 0030  
                                   ___ftadd 0682                                     ___ftdiv 0DD9  
                                   ___ftneg 13DA                                     ___lldiv 0997  
                                   ___ftmul 0E82                                     ___fttol 0D3A  
                                   ___lwdiv 0811                                  ??___altoft 002D  
                 ??_ADC_GetConversionResult 0023             __end_of_HMC5883L_I2C_BufferRead 1481  
                     ?_I2C2_BusCollisionISR 0070                                  ??___awtoft 002C  
                                ??___ftpack 0026                    TMR1_ReadTimer@readValLow 002B  
                                   _heading 01C4                   I2C2_MasterTRBInsert@count 0024  
                                   __ptext1 138D                                     __ptext2 0811  
                                   __ptext3 0997                                     __ptext4 1660  
                                   __ptext5 14FE                                     __ptext6 0F36  
                                   __ptext7 142F                                     __ptext8 15B4  
                                   __ptext9 144E                   I2C2_MasterTRBInsert@pflag 0022  
                   Wireless_packageData@var 00C3                      __end_of_I2C_BufferRead 0A9D  
                                ??___lwtoft 002C              ??_TMR1_DefaultInterruptHandler 0070  
                 TMR1_ReadTimer@readValHigh 002A                                   _T1CONbits 0018  
                     _OSCILLATOR_Initialize 13A4                                   _T2CONbits 001C  
                __end_ofWireless_init@TADDR 1826              __end_of_Sensor_peripheralSleep 1388  
         __size_of_TMR1_SetInterruptHandler 0009                            ___aldiv@dividend 0025  
                  ??_PIN_MANAGER_Initialize 0023                   ?_TMR1_SetInterruptHandler 0021  
                                 _IOCAFbits 0393                 main@doorClosedUpdateCounter 01CD  
                                 _IOCANbits 0392                                  ?_I2C2_Stop 0070  
                                 _IOCAPbits 0391                       _I2C2_FunctionComplete 145E  
                                   _timeOut 013C                 __size_of_Timeout_hasExpired 004D  
                                 _DOOR_init 0003                  __size_of_SYSTEM_Initialize 001B  
                                   main@dur 01D1                                     clrloop0 07FB  
                      end_of_initialization 0073                     __size_of_RF_DataIsReady 001D  
               __end_of_BMP_readTemperature 0346                  ??_Diag_getTempSensorHealth 0021  
                ??_Diag_setTempSensorHealth 0021                           _FVR_IsOutputReady 139E  
                         ??_RF_ReadRegister 0023                             ___lldiv@divisor 0021  
              __end_of_ADC_IsConversionDone 13B9                             ___lldiv@counter 002E  
                        ?_FVR_IsOutputReady 0070                       I2C2_MasterWrite@pdata 002E  
                        _p_i2c2_trb_current 0078                       I2C2_MasterWrite@pflag 002B  
                          ___aldiv@quotient 002C                      I2C2_ISR@i2c_bytes_left 00E1  
             __size_of_I2C2_MasterTRBInsert 0055                         ??_FVR_IsOutputReady 0021  
                Sensor_getSupplyVoltage@res 0047                            ??_WDT_Initialize 0021  
                                 _PORTAbits 000C                                   _PORTCbits 000E  
                           ?_I2C_BufferRead 0031                           __size_of_I2C2_ISR 0149  
                          _RF_WriteRegister 14BB                     __end_of_I2C2_MasterRead 174F  
                          __CFG_FOSC$INTOSC 0000                     __end_of_I2C2_Initialize 157E  
                            _TMR1_ReadTimer 15EC            __end_of_Timeout_getGlobalCounter 0811  
                       _ADC_StartConversion 136A                Timeout_updateCurrentTime@var 0031  
                                ?_DOOR_init 0070                    __end_of_DATAEE_WriteByte 1727  
                          ?_SPI_WriteBuffer 0023                   __end_of_FVR_IsOutputReady 13A4  
                               ___ftdiv@exp 003F                             _SPI1_Initialize 13AB  
                RF_ReadRegisterData@bufSize 002B                HMC5883L_TestConnection@F3565 0137  
                             ?_RF_RxPayload 002F                           __size_of_BMP_init 0074  
              Wireless_packageData@openTime 00BA                           __size_of_DOOR_run 0071  
                     __end_of_Wireless_init 0D3A                       __end_of_Wireless_wake 167F  
                               ___ftmul@exp 0060                        ?_ADC_StartConversion 0070  
                             ?_RF_TxPayload 002E                      ??_I2C2_BusCollisionISR 0070  
                            __end_of___lmul 1800                  ??_I2C2_MasterWriteTRBBuild 0025  
                         __size_of_TMR1_ISR 0009                     _Sensor_getSupplyVoltage 08BF  
                            _ADC_Initialize 13C1                      ?_OSCILLATOR_Initialize 0070  
                    __end_of_TMR1_ReadTimer 1609          __end_of_Wireless_checkDataReceived 0CBF  
                _Wireless_checkDataReceived 0C45                 __size_of_Timeout_setTimeout 0019  
                 __size_of_I2C2_MasterWrite 002A                       _Sensor_peripheralWake 1388  
                             ??_DOOR_update 0028                           __size_of_RF_Write 0010  
                    ?_I2C2_FunctionComplete 0070                         start_initialization 0039  
                   RF_RxPayload@payloadSize 002F                                 ??_I2C2_Stop 0070  
           __size_of_PIN_MANAGER_Initialize 002B                       __end_of_DOOR_resetPos 1370  
                      __end_of_setSleepTime 1392                               ?_Storage_save 0024  
          __size_of_HMC5883L_I2C_BufferRead 0012                              ??_RF_RxPayload 0030  
           I2C2_MasterWriteTRBBuild@address 0023                                 _addressSize 00E5  
                  __size_of_PIN_MANAGER_IOC 0006                       __end_of_SPI_WriteRead 139E  
                      I2C2_MasterRead@pdata 0029      __end_of_IOCAF2_DefaultInterruptHandler 1366  
   __size_of_IOCAF2_DefaultInterruptHandler 0001              _IOCAF2_DefaultInterruptHandler 1365  
                  ?_I2C2_MasterReadTRBBuild 0021              Sensor_getSupplyVoltage@voltage 0044  
                      I2C2_MasterRead@pflag 002E                                 RF_Write@val 0023  
                            ??_RF_TxPayload 002F                       ??_ADC_StartConversion 0021  
                  __size_of_TMR1_Initialize 0017                                    ??___lmul 0029  
               __end_of_SPI_WriteReadBuffer 16BF               I2C2_MasterWriteTRBBuild@pdata 0021  
                      I2C2_ISR@pi2c_buf_ptr 00D8                      __end_of_ADC_Initialize 13C9  
                               __pdataBANK1 00E3                                 __pdataBANK2 016A  
                    __size_of_TMR1_CallBack 000E                             ?_TMR1_ReadTimer 0021  
                         __size_of___altoft 003D                     HMC5883L_ReadBits@length 0045  
                         __size_of___awtoft 0022                           __size_of___ftpack 0065  
                          ?_I2C2_MasterRead 0029                                 __pbssCOMMON 0077  
                          ?_I2C2_Initialize 0070                                   ___latbits 0002  
                         __size_of___lwtoft 0015                               __pcstackBANK0 0020  
                             __pcstackBANK1 00A0                               __pcstackBANK3 01CC  
                      _ADC_IsConversionDone 13B2                    __size_of_TMR2_Initialize 0008  
                   __end_of_SPI1_Initialize 13B2                                 ??_DOOR_init 0021  
                                  ?_RF_Init 0070                               _i2c2_tr_queue 0162  
                            ??_Storage_save 0025               __size_of_Diag_getSensorHealth 0012  
         Wireless_checkDataReceived@channel 003B                         __end_of_DOOR_update 14E7  
                            _RF_DataIsReady 1626                    _Timeout_getGlobalCounter 0800  
                __size_of_FVR_IsOutputReady 0006                  SPI_WriteReadBuffer@bufSize 0024  
                                 __pnvBANK2 0166                 __end_of_RF_ReadRegisterData 1660  
                 BMP_readTemperature@status 00B8        HMC5883L_I2C_BufferRead@NumByteToRead 003F  
                          ___lwdiv@dividend 0023                      _PIN_MANAGER_Initialize 1779  
                         _RF_ResetStatusIRQ 167F                      SPI_WriteBuffer@bufSize 0025  
                         _ADC_SelectChannel 143E                    Wireless_sendData@payload 0032  
          __end_of_TMR1_SetInterruptHandler 13F5                                    ?___aldiv 0021  
                 ??_Sensor_getSupplyVoltage 0044                                    ?___ftadd 0049  
                                  ?___ftdiv 0031                                    ?___ftneg 0041  
                                  ?___lldiv 0021                                    ?___ftmul 0056  
                                  ?___fttol 0066                                    ?___lwdiv 0021  
                        ?_RF_ResetStatusIRQ 0070                             ?_ADC_Initialize 0070  
              __end_of_RF_WriteRegisterData 1626                          ?_ADC_SelectChannel 0070  
                                  _I2C2_ISR 0539                ??_INTERRUPT_InterruptManager 0020  
                    ?_Sensor_peripheralWake 0070                                   __pswtext1 1000  
                     Storage_save@openAngle 0026                                   _doorState 00DC  
                       ??_RF_ResetStatusIRQ 0025                         ??_ADC_SelectChannel 0021  
                     ?_ADC_IsConversionDone 0070                     I2C_BufferRead@slaveAddr 003A  
                          __CFG_WDTE$NSLEEP 0000                             _RF_ReadRegister 1549  
                    __end_of_RF_DataIsReady 1643                            ___lwdiv@quotient 0027  
                    Wireless_packageData@t1 00C5               __size_of_Wireless_packageData 00CA  
           __end_of_I2C2_MasterReadTRBBuild 17D0                               _TMR1_CallBack 1421  
                           ___aldiv@divisor 0021                             ___aldiv@counter 002A  
                                  _BMP_init 0BD1                                    _DOOR_run 0B60  
                                  _LATCbits 010E                          Wireless_init@TADDR 1821  
                                 clear_ram0 07FA                    __end_of_RF_WriteRegister 14D1  
                                  _PIE1bits 0091                                    _PIE4bits 0094  
                 __end_of_RF_ResetStatusIRQ 169F                   __end_of_ADC_SelectChannel 144E  
       __size_of_INTERRUPT_InterruptManager 0033                       __end_of_I2C_ByteWrite 0882  
                                  _PIR1bits 0011                                    _PIR4bits 0014  
                                  _SSP1CON1 0215                                    _SSP2CON1 021D  
                                  _SSP2CON3 021F                            ??_I2C_BufferRead 0036  
                                  _TMR1_ISR 13D1                                    _SSP1STAT 0214  
                                  _SSP2STAT 021C                           ??_PIN_MANAGER_IOC 0070  
             I2C2_MasterTRBInsert@ptrb_list 0021                           ??_TMR1_Initialize 0023  
                                  _RF_Write 144E                                  _ADCON0bits 009D  
                          _I2C2_MasterWrite 174F                    ADC_SelectChannel@channel 0022  
                   __size_of_FVR_Initialize 0004                        __end_of_RF_RxPayload 14A6  
                __end_of_Timeout_hasExpired 0997                                    _WPUCbits 020E  
            Diag_setTempSensorHealth@health 0022                                 _DOOR_update 14D1  
                     __size_of_setSleepTime 0005                      I2C_BufferRead@ReadAddr 0033  
                     DATAEE_WriteByte@bData 0021                        __end_of_RF_TxPayload 15CF  
                       __end_ofatan@coeff_a 1812                         __end_ofatan@coeff_b 1821  
                           ?_RF_DataIsReady 0070                            ?_SPI1_Initialize 0070  
                         ___lmul@multiplier 0021                __end_of_I2C2_MasterTRBInsert 0A3F  
                          __size_of_RF_Init 0004                              ?_TMR1_CallBack 0070  
                         ?_DATAEE_WriteByte 0021                     _HMC5883L_I2C_BufferRead 146F  
                         ??_TMR2_Initialize 0021                  ?_Timeout_updateCurrentTime 0070  
                        ??_DATAEE_WriteByte 0022                           I2C_ByteWrite@data 0036  
                                _EECON1bits 0195            HMC5883L_I2C_BufferRead@slaveAddr 0042  
                    DOOR_update@closedAngle 0027                    ?_ADC_GetConversionResult 0021  
                     TMR1_ReadTimer@readVal 0028              I2C2_MasterWriteTRBBuild@length 0022  
              __size_of_BMP_readTemperature 02CF                     __size_of_Wireless_sleep 0018  
                   ??_OSCILLATOR_Initialize 0021                            __size_of___aldiv 0082  
                          __size_of___ftadd 00F6                                _setSleepTime 138D  
                          __size_of___ftdiv 00A9                            __size_of___ftneg 0009  
                          __size_of___lldiv 0053                                    ___altoft 0882  
                          __size_of___ftmul 00B4                            __size_of___fttol 009F  
                      __end_of_Storage_save 1549                            __size_of___lwdiv 0035  
                                  ___awtoft 16BF                                    ___ftpack 0AFB  
                   ??_I2C2_FunctionComplete 0070                    _TMR1_SetInterruptHandler 13EC  
         __size_of_Diag_getTempSensorHealth 0003                     __end_of_RF_ReadRegister 1563  
         __size_of_Diag_setTempSensorHealth 0008                   ?_Diag_getTempSensorHealth 0070  
                                  ___lwtoft 14A6                   ?_Diag_setTempSensorHealth 0070  
                     _TMR1_InterruptHandler 0166                 ?_Wireless_checkDataReceived 0070  
                    ??_ADC_IsConversionDone 0021                     _IOCAF2_InterruptHandler 0168  
                               _initialised 00DB                             ___lwdiv@divisor 0021  
                           ___lwdiv@counter 0026                ??_IOCAF2_SetInterruptHandler 0023  
                                  __ptext10 0C45                                    __ptext11 1493  
                                  __ptext20 08BF                                    __ptext12 1643  
                                  __ptext21 1388                                    __ptext13 169F  
                                _T1GCONbits 0019                                    __ptext30 1609  
                                  __ptext22 1383                                    __ptext14 1626  
                                  __ptext31 1599                                    __ptext23 139E  
                                  __ptext15 1549                                    __ptext40 157E  
                                  __ptext32 167F                                    __ptext24 136A  
                                  __ptext16 14D1                                    __ptext41 1377  
                                  __ptext33 14BB                                    __ptext25 143E  
                                  __ptext17 152F                                    __ptext50 1373  
                                  __ptext42 13C9                                    __ptext34 1398  
                                  __ptext26 13B2                                    __ptext18 1704  
                                  __ptext51 13C1                                    __ptext43 14E7  
                                  __ptext35 1408                                    __ptext27 13F5  
                                  __ptext19 136D                                    __ptext60 0DD9  
                                  __ptext52 0B60                                    __ptext44 13EC  
                                  __ptext36 137B                                    __ptext28 1481  
                                  __ptext61 0682                                    __ptext53 0800  
                                  __ptext45 13AB                                    __ptext37 0A9D  
                                  __ptext29 0CBF                                    __ptext70 0846  
                                  __ptext62 16BF                                    __ptext54 0003  
                                  __ptext46 1779                                    __ptext38 17D0  
                                  __ptext71 0A3F                                    __ptext63 0882  
                                  __ptext55 0077                                    __ptext47 13E3  
                                  __ptext39 15EC                                    __ptext72 1516  
                                  __ptext64 0AFB                                    __ptext56 14A6  
                                  __ptext48 13A4                                    __ptext81 13D1  
                                  __ptext73 094A                                    __ptext65 0778  
                                  __ptext57 0D3A                                    __ptext49 1563  
                                  __ptext90 145E                                    __ptext82 1421  
                                  __ptext74 174F                                    __ptext66 0904  
                                  __ptext58 13DA                                    __ptext91 1364  
                                  __ptext83 13FE                                    __ptext75 16E1  
                                  __ptext67 146F                                    __ptext59 0E82  
                                  __ptext84 1366                                    __ptext76 1727  
                                  __ptext68 1367                                    __ptext85 1392  
                                  __ptext77 09EA                                    __ptext69 0BD1  
                                  __ptext86 1414                                    __ptext78 17A4  
                                  __ptext87 1365                                    __ptext79 13B9  
                                  __ptext88 0539                                    __ptext89 15CF  
                  Wireless_packageData@data 00BE                                _SSP1CON1bits 0215  
                              _SSP2CON1bits 021D                                _SSP2CON2bits 021E  
                                _IOCAF2_ISR 1414                 DATAEE_WriteByte@GIEBitValue 0023  
                       RF_RxPayload@payload 0032                        _RF_WriteRegisterData 1609  
                         _HMC5883L_ReadBits 0904                               __size_of_main 01F3  
         __end_of_Timeout_updateCurrentTime 0AFB                  __size_of_RF_ResetStatusIRQ 0020  
                        ?_HMC5883L_ReadBits 0043                  __size_of_ADC_SelectChannel 0010  
                   I2C2_MasterWrite@address 0029                    __size_of_SPI_WriteBuffer 001B  
                          ??_TMR1_ReadTimer 0023                                    int$flags 007E  
                                  _pressure 0128                         ??_HMC5883L_ReadBits 0047  
        __end_of_INTERRUPT_InterruptManager 0037                  _INTERRUPT_InterruptManager 0004  
                __end_of_Timeout_setTimeout 152F                     I2C2_MasterWrite@trBlock 015D  
                              _SSP1STATbits 0214                    ??_Sensor_peripheralSleep 0021  
       __size_of_IOCAF2_SetInterruptHandler 0009                      BMP_readTemperature@tmp 00B9  
             __size_of_I2C2_BusCollisionISR 0001                                 atan@coeff_a 1800  
                               atan@coeff_b 1812                          RF_ReadRegister@reg 0024  
                        RF_ReadRegister@val 0025            __size_of_I2C2_MasterReadTRBBuild 002C  
                ??_Timeout_getGlobalCounter 0025                                  _INTCONbits 000B  
                     Timeout_setTimeout@val 0021                                  _FVRCONbits 0117  
                              _sensorHealth 00E3                      __size_of_Wireless_init 007B  
                     I2C_BufferRead@pBuffer 0031                      __size_of_Wireless_wake 001F  
                           ??_TMR1_CallBack 0070                   ??_HMC5883L_I2C_BufferRead 0041  
                   __size_of_WDT_Initialize 0004           __size_of_I2C2_MasterWriteTRBBuild 0023  
                 __end_of_HMC5883L_ReadBits 094A                   ?_I2C2_MasterWriteTRBBuild 0021  
                                  intlevel1 0000                       ?_RF_WriteRegisterData 0029  
               __end_of_ADC_StartConversion 136D                             _doorClosedAngle 00DD  
                       I2C2_ISR@i2c_address 007A                            ___lldiv@dividend 0025  
                   ?_PIN_MANAGER_Initialize 0070             __end_of_ADC_GetConversionResult 13FE  
                         __CFG_CLKOUTEN$OFF 0000                            ??_ADC_Initialize 0021  
                    I2C2_MasterWrite@length 0028                     ??_Sensor_peripheralWake 0021  
              __end_of_Diag_getSensorHealth 1493                      __size_of_DOOR_resetPos 0003  
                     __size_of_RF_RxPayload 0013                        _I2C2_MasterTRBInsert 09EA  
                             __pstringtext1 1800                               __pstringtext2 1812  
                             __pstringtext3 1821                       __size_of_RF_TxPayload 001B  
                            _FVR_Initialize 1373                            ?_RF_ReadRegister 0070  
              __size_of_SPI_WriteReadBuffer 0020                            ___lldiv@quotient 002A  
                      I2C_BufferRead@status 003B                                ___aldiv@sign 002B  
                    __size_of_SPI_WriteRead 0006                                 ?_IOCAF2_ISR 0070  
            __end_of_PIN_MANAGER_Initialize 17A4                    __size_of_I2C2_MasterRead 0028  
                  __size_of_I2C2_Initialize 001B                          _referenceDirection 013E  
                        __size_of_I2C2_Stop 001D                             _PIN_MANAGER_IOC 1392  
                  __end_of_I2C2_MasterWrite 1779                                _RF_RxPayload 1493  
                         ?_RF_WriteRegister 0023                             _TMR1_Initialize 14E7  
       __size_of_Wireless_checkDataReceived 007A                          main@prevDoorStatus 01CC  
                     __size_of_Storage_save 001A  
