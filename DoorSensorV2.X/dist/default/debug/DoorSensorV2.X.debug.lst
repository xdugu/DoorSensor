

Microchip Technology PIC LITE Macro Assembler V1.45 build -152302408 
                                                                                               Tue Oct 08 22:04:31 2019

Microchip Technology Omniscient Code Generator v1.45 (Free mode) build 201711160504
     1                           	processor	16LF1829
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataBANK1,global,class=CODE,delta=2
     5                           	psect	idataBANK2,global,class=CODE,delta=2
     6                           	psect	stringtext1,global,class=STRCODE,delta=2
     7                           	psect	stringtext2,global,class=STRCODE,delta=2
     8                           	psect	stringtext3,global,class=STRCODE,delta=2
     9                           	psect	nvCOMMON,global,class=COMMON,space=1,delta=1
    10                           	psect	nvBANK2,global,class=BANK2,space=1,delta=1
    11                           	psect	cinit,global,class=CODE,merge=1,delta=2
    12                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
    13                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    14                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1
    15                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1
    16                           	psect	dataBANK2,global,class=BANK2,space=1,delta=1
    17                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1
    18                           	psect	clrtext,global,class=CODE,delta=2
    19                           	psect	cstackBANK3,global,class=BANK3,space=1,delta=1
    20                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    21                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    22                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    23                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    24                           	psect	text1,local,class=CODE,merge=1,delta=2
    25                           	psect	text2,local,class=CODE,merge=1,delta=2,group=2
    26                           	psect	text3,local,class=CODE,merge=1,delta=2,group=2
    27                           	psect	text4,local,class=CODE,merge=1,delta=2
    28                           	psect	text5,local,class=CODE,merge=1,delta=2
    29                           	psect	text6,local,class=CODE,merge=1,delta=2
    30                           	psect	text7,local,class=CODE,merge=1,delta=2
    31                           	psect	text8,local,class=CODE,merge=1,delta=2
    32                           	psect	text9,local,class=CODE,merge=1,delta=2
    33                           	psect	text10,local,class=CODE,merge=1,delta=2
    34                           	psect	text11,local,class=CODE,merge=1,delta=2
    35                           	psect	text12,local,class=CODE,merge=1,delta=2
    36                           	psect	text13,local,class=CODE,merge=1,delta=2
    37                           	psect	text14,local,class=CODE,merge=1,delta=2
    38                           	psect	text15,local,class=CODE,merge=1,delta=2
    39                           	psect	text16,local,class=CODE,merge=1,delta=2
    40                           	psect	text17,local,class=CODE,merge=1,delta=2
    41                           	psect	text18,local,class=CODE,merge=1,delta=2
    42                           	psect	text19,local,class=CODE,merge=1,delta=2
    43                           	psect	text20,local,class=CODE,merge=1,delta=2
    44                           	psect	text21,local,class=CODE,merge=1,delta=2
    45                           	psect	text22,local,class=CODE,merge=1,delta=2
    46                           	psect	text23,local,class=CODE,merge=1,delta=2
    47                           	psect	text24,local,class=CODE,merge=1,delta=2
    48                           	psect	text25,local,class=CODE,merge=1,delta=2
    49                           	psect	text26,local,class=CODE,merge=1,delta=2
    50                           	psect	text27,local,class=CODE,merge=1,delta=2
    51                           	psect	text28,local,class=CODE,merge=1,delta=2
    52                           	psect	text29,local,class=CODE,merge=1,delta=2
    53                           	psect	text30,local,class=CODE,merge=1,delta=2
    54                           	psect	text31,local,class=CODE,merge=1,delta=2
    55                           	psect	text32,local,class=CODE,merge=1,delta=2
    56                           	psect	text33,local,class=CODE,merge=1,delta=2
    57                           	psect	text34,local,class=CODE,merge=1,delta=2
    58                           	psect	text35,local,class=CODE,merge=1,delta=2
    59                           	psect	text36,local,class=CODE,merge=1,delta=2
    60                           	psect	text37,local,class=CODE,merge=1,delta=2
    61                           	psect	text38,local,class=CODE,merge=1,delta=2
    62                           	psect	text39,local,class=CODE,merge=1,delta=2
    63                           	psect	text40,local,class=CODE,merge=1,delta=2
    64                           	psect	text41,local,class=CODE,merge=1,delta=2
    65                           	psect	text42,local,class=CODE,merge=1,delta=2
    66                           	psect	text43,local,class=CODE,merge=1,delta=2
    67                           	psect	text44,local,class=CODE,merge=1,delta=2,group=2
    68                           	psect	text45,local,class=CODE,merge=1,delta=2
    69                           	psect	text46,local,class=CODE,merge=1,delta=2
    70                           	psect	text47,local,class=CODE,merge=1,delta=2
    71                           	psect	text48,local,class=CODE,merge=1,delta=2
    72                           	psect	text49,local,class=CODE,merge=1,delta=2
    73                           	psect	text50,local,class=CODE,merge=1,delta=2
    74                           	psect	text51,local,class=CODE,merge=1,delta=2
    75                           	psect	text52,local,class=CODE,merge=1,delta=2
    76                           	psect	text53,local,class=CODE,merge=1,delta=2
    77                           	psect	text54,local,class=CODE,merge=1,delta=2
    78                           	psect	text55,local,class=CODE,merge=1,delta=2
    79                           	psect	text56,local,class=CODE,merge=1,delta=2
    80                           	psect	text57,local,class=CODE,merge=1,delta=2
    81                           	psect	text58,local,class=CODE,merge=1,delta=2
    82                           	psect	text59,local,class=CODE,merge=1,delta=2
    83                           	psect	text60,local,class=CODE,merge=1,delta=2
    84                           	psect	text61,local,class=CODE,merge=1,delta=2
    85                           	psect	text62,local,class=CODE,merge=1,delta=2,group=2
    86                           	psect	text63,local,class=CODE,merge=1,delta=2,group=2
    87                           	psect	text64,local,class=CODE,merge=1,delta=2,group=2
    88                           	psect	text65,local,class=CODE,merge=1,delta=2,group=2
    89                           	psect	text66,local,class=CODE,merge=1,delta=2,group=2
    90                           	psect	text67,local,class=CODE,merge=1,delta=2,group=2
    91                           	psect	text68,local,class=CODE,merge=1,delta=2,group=2
    92                           	psect	text69,local,class=CODE,merge=1,delta=2,group=2
    93                           	psect	text70,local,class=CODE,merge=1,delta=2,group=2
    94                           	psect	text71,local,class=CODE,merge=1,delta=2,group=2
    95                           	psect	text72,local,class=CODE,merge=1,delta=2
    96                           	psect	text73,local,class=CODE,merge=1,delta=2
    97                           	psect	text74,local,class=CODE,merge=1,delta=2
    98                           	psect	text75,local,class=CODE,merge=1,delta=2
    99                           	psect	text76,local,class=CODE,merge=1,delta=2
   100                           	psect	text77,local,class=CODE,merge=1,delta=2
   101                           	psect	text78,local,class=CODE,merge=1,delta=2
   102                           	psect	text79,local,class=CODE,merge=1,delta=2
   103                           	psect	text80,local,class=CODE,merge=1,delta=2
   104                           	psect	text81,local,class=CODE,merge=1,delta=2
   105                           	psect	text82,local,class=CODE,merge=1,delta=2
   106                           	psect	text83,local,class=CODE,merge=1,delta=2
   107                           	psect	text84,local,class=CODE,merge=1,delta=2
   108                           	psect	text85,local,class=CODE,merge=1,delta=2
   109                           	psect	intentry,global,class=CODE,delta=2
   110                           	psect	text87,local,class=CODE,merge=1,delta=2
   111                           	psect	text88,local,class=CODE,merge=1,delta=2
   112                           	psect	text89,local,class=CODE,merge=1,delta=2
   113                           	psect	text90,local,class=CODE,merge=1,delta=2
   114                           	psect	text91,local,class=CODE,merge=1,delta=2
   115                           	psect	text92,local,class=CODE,merge=1,delta=2
   116                           	psect	text93,local,class=CODE,merge=1,delta=2
   117                           	psect	text94,local,class=CODE,merge=1,delta=2
   118                           	psect	swtext1,local,class=CONST,delta=2
   119                           	psect	text95,local,class=CODE,merge=1,delta=2
   120                           	psect	text96,local,class=CODE,merge=1,delta=2
   121                           	psect	text97,local,class=CODE,merge=1,delta=2
   122                           	dabs	1,0x7E,2
   123  0000                     
   124                           ; Version 1.45
   125                           ; Generated 16/11/2017 GMT
   126                           ; 
   127                           ; Copyright © 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
   128                           ; All rights reserved.
   129                           ; 
   130                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
   131                           ; 
   132                           ; Redistribution and use in source and binary forms, with or without modification, are
   133                           ; permitted provided that the following conditions are met:
   134                           ; 
   135                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
   136                           ;        conditions and the following disclaimer.
   137                           ; 
   138                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
   139                           ;        of conditions and the following disclaimer in the documentation and/or other
   140                           ;        materials provided with the distribution.
   141                           ; 
   142                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
   143                           ;        software without specific prior written permission.
   144                           ; 
   145                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   146                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   147                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   148                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   149                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   150                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   151                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   152                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   153                           ; 
   154                           ; 
   155                           ; Code-generator required, PIC16LF1829 Definitions
   156                           ; 
   157                           ; SFR Addresses
   158  0000                     	;# 
   159  0001                     	;# 
   160  0002                     	;# 
   161  0003                     	;# 
   162  0004                     	;# 
   163  0005                     	;# 
   164  0006                     	;# 
   165  0007                     	;# 
   166  0008                     	;# 
   167  0009                     	;# 
   168  000A                     	;# 
   169  000B                     	;# 
   170  000C                     	;# 
   171  000D                     	;# 
   172  000E                     	;# 
   173  0011                     	;# 
   174  0012                     	;# 
   175  0013                     	;# 
   176  0014                     	;# 
   177  0015                     	;# 
   178  0016                     	;# 
   179  0016                     	;# 
   180  0017                     	;# 
   181  0018                     	;# 
   182  0019                     	;# 
   183  001A                     	;# 
   184  001B                     	;# 
   185  001C                     	;# 
   186  001E                     	;# 
   187  001F                     	;# 
   188  008C                     	;# 
   189  008D                     	;# 
   190  008E                     	;# 
   191  0091                     	;# 
   192  0092                     	;# 
   193  0093                     	;# 
   194  0094                     	;# 
   195  0095                     	;# 
   196  0096                     	;# 
   197  0097                     	;# 
   198  0098                     	;# 
   199  0099                     	;# 
   200  009A                     	;# 
   201  009B                     	;# 
   202  009B                     	;# 
   203  009C                     	;# 
   204  009D                     	;# 
   205  009E                     	;# 
   206  010C                     	;# 
   207  010D                     	;# 
   208  010E                     	;# 
   209  0111                     	;# 
   210  0112                     	;# 
   211  0113                     	;# 
   212  0114                     	;# 
   213  0115                     	;# 
   214  0116                     	;# 
   215  0117                     	;# 
   216  0118                     	;# 
   217  0119                     	;# 
   218  011A                     	;# 
   219  011B                     	;# 
   220  011D                     	;# 
   221  011E                     	;# 
   222  018C                     	;# 
   223  018D                     	;# 
   224  018E                     	;# 
   225  0191                     	;# 
   226  0191                     	;# 
   227  0192                     	;# 
   228  0193                     	;# 
   229  0193                     	;# 
   230  0193                     	;# 
   231  0194                     	;# 
   232  0195                     	;# 
   233  0196                     	;# 
   234  0199                     	;# 
   235  019A                     	;# 
   236  019B                     	;# 
   237  019B                     	;# 
   238  019B                     	;# 
   239  019B                     	;# 
   240  019C                     	;# 
   241  019C                     	;# 
   242  019D                     	;# 
   243  019E                     	;# 
   244  019F                     	;# 
   245  020C                     	;# 
   246  020D                     	;# 
   247  020E                     	;# 
   248  0211                     	;# 
   249  0211                     	;# 
   250  0212                     	;# 
   251  0212                     	;# 
   252  0213                     	;# 
   253  0213                     	;# 
   254  0214                     	;# 
   255  0214                     	;# 
   256  0215                     	;# 
   257  0215                     	;# 
   258  0215                     	;# 
   259  0216                     	;# 
   260  0216                     	;# 
   261  0217                     	;# 
   262  0217                     	;# 
   263  0219                     	;# 
   264  021A                     	;# 
   265  021B                     	;# 
   266  021C                     	;# 
   267  021D                     	;# 
   268  021E                     	;# 
   269  021F                     	;# 
   270  0291                     	;# 
   271  0291                     	;# 
   272  0292                     	;# 
   273  0293                     	;# 
   274  0294                     	;# 
   275  0295                     	;# 
   276  0295                     	;# 
   277  0296                     	;# 
   278  0298                     	;# 
   279  0298                     	;# 
   280  0299                     	;# 
   281  029A                     	;# 
   282  029B                     	;# 
   283  029C                     	;# 
   284  029D                     	;# 
   285  029E                     	;# 
   286  0311                     	;# 
   287  0311                     	;# 
   288  0312                     	;# 
   289  0313                     	;# 
   290  0318                     	;# 
   291  0318                     	;# 
   292  0319                     	;# 
   293  031A                     	;# 
   294  038C                     	;# 
   295  038D                     	;# 
   296  038E                     	;# 
   297  0391                     	;# 
   298  0392                     	;# 
   299  0393                     	;# 
   300  0394                     	;# 
   301  0395                     	;# 
   302  0396                     	;# 
   303  039A                     	;# 
   304  039C                     	;# 
   305  039D                     	;# 
   306  039E                     	;# 
   307  039F                     	;# 
   308  0415                     	;# 
   309  0416                     	;# 
   310  0417                     	;# 
   311  041C                     	;# 
   312  041D                     	;# 
   313  041E                     	;# 
   314  0FE4                     	;# 
   315  0FE5                     	;# 
   316  0FE6                     	;# 
   317  0FE7                     	;# 
   318  0FE8                     	;# 
   319  0FE9                     	;# 
   320  0FEA                     	;# 
   321  0FEB                     	;# 
   322  0FED                     	;# 
   323  0FEE                     	;# 
   324  0FEF                     	;# 
   325  0000                     	;# 
   326  0001                     	;# 
   327  0002                     	;# 
   328  0003                     	;# 
   329  0004                     	;# 
   330  0005                     	;# 
   331  0006                     	;# 
   332  0007                     	;# 
   333  0008                     	;# 
   334  0009                     	;# 
   335  000A                     	;# 
   336  000B                     	;# 
   337  000C                     	;# 
   338  000D                     	;# 
   339  000E                     	;# 
   340  0011                     	;# 
   341  0012                     	;# 
   342  0013                     	;# 
   343  0014                     	;# 
   344  0015                     	;# 
   345  0016                     	;# 
   346  0016                     	;# 
   347  0017                     	;# 
   348  0018                     	;# 
   349  0019                     	;# 
   350  001A                     	;# 
   351  001B                     	;# 
   352  001C                     	;# 
   353  001E                     	;# 
   354  001F                     	;# 
   355  008C                     	;# 
   356  008D                     	;# 
   357  008E                     	;# 
   358  0091                     	;# 
   359  0092                     	;# 
   360  0093                     	;# 
   361  0094                     	;# 
   362  0095                     	;# 
   363  0096                     	;# 
   364  0097                     	;# 
   365  0098                     	;# 
   366  0099                     	;# 
   367  009A                     	;# 
   368  009B                     	;# 
   369  009B                     	;# 
   370  009C                     	;# 
   371  009D                     	;# 
   372  009E                     	;# 
   373  010C                     	;# 
   374  010D                     	;# 
   375  010E                     	;# 
   376  0111                     	;# 
   377  0112                     	;# 
   378  0113                     	;# 
   379  0114                     	;# 
   380  0115                     	;# 
   381  0116                     	;# 
   382  0117                     	;# 
   383  0118                     	;# 
   384  0119                     	;# 
   385  011A                     	;# 
   386  011B                     	;# 
   387  011D                     	;# 
   388  011E                     	;# 
   389  018C                     	;# 
   390  018D                     	;# 
   391  018E                     	;# 
   392  0191                     	;# 
   393  0191                     	;# 
   394  0192                     	;# 
   395  0193                     	;# 
   396  0193                     	;# 
   397  0193                     	;# 
   398  0194                     	;# 
   399  0195                     	;# 
   400  0196                     	;# 
   401  0199                     	;# 
   402  019A                     	;# 
   403  019B                     	;# 
   404  019B                     	;# 
   405  019B                     	;# 
   406  019B                     	;# 
   407  019C                     	;# 
   408  019C                     	;# 
   409  019D                     	;# 
   410  019E                     	;# 
   411  019F                     	;# 
   412  020C                     	;# 
   413  020D                     	;# 
   414  020E                     	;# 
   415  0211                     	;# 
   416  0211                     	;# 
   417  0212                     	;# 
   418  0212                     	;# 
   419  0213                     	;# 
   420  0213                     	;# 
   421  0214                     	;# 
   422  0214                     	;# 
   423  0215                     	;# 
   424  0215                     	;# 
   425  0215                     	;# 
   426  0216                     	;# 
   427  0216                     	;# 
   428  0217                     	;# 
   429  0217                     	;# 
   430  0219                     	;# 
   431  021A                     	;# 
   432  021B                     	;# 
   433  021C                     	;# 
   434  021D                     	;# 
   435  021E                     	;# 
   436  021F                     	;# 
   437  0291                     	;# 
   438  0291                     	;# 
   439  0292                     	;# 
   440  0293                     	;# 
   441  0294                     	;# 
   442  0295                     	;# 
   443  0295                     	;# 
   444  0296                     	;# 
   445  0298                     	;# 
   446  0298                     	;# 
   447  0299                     	;# 
   448  029A                     	;# 
   449  029B                     	;# 
   450  029C                     	;# 
   451  029D                     	;# 
   452  029E                     	;# 
   453  0311                     	;# 
   454  0311                     	;# 
   455  0312                     	;# 
   456  0313                     	;# 
   457  0318                     	;# 
   458  0318                     	;# 
   459  0319                     	;# 
   460  031A                     	;# 
   461  038C                     	;# 
   462  038D                     	;# 
   463  038E                     	;# 
   464  0391                     	;# 
   465  0392                     	;# 
   466  0393                     	;# 
   467  0394                     	;# 
   468  0395                     	;# 
   469  0396                     	;# 
   470  039A                     	;# 
   471  039C                     	;# 
   472  039D                     	;# 
   473  039E                     	;# 
   474  039F                     	;# 
   475  0415                     	;# 
   476  0416                     	;# 
   477  0417                     	;# 
   478  041C                     	;# 
   479  041D                     	;# 
   480  041E                     	;# 
   481  0FE4                     	;# 
   482  0FE5                     	;# 
   483  0FE6                     	;# 
   484  0FE7                     	;# 
   485  0FE8                     	;# 
   486  0FE9                     	;# 
   487  0FEA                     	;# 
   488  0FEB                     	;# 
   489  0FED                     	;# 
   490  0FEE                     	;# 
   491  0FEF                     	;# 
   492  0000                     	;# 
   493  0001                     	;# 
   494  0002                     	;# 
   495  0003                     	;# 
   496  0004                     	;# 
   497  0005                     	;# 
   498  0006                     	;# 
   499  0007                     	;# 
   500  0008                     	;# 
   501  0009                     	;# 
   502  000A                     	;# 
   503  000B                     	;# 
   504  000C                     	;# 
   505  000D                     	;# 
   506  000E                     	;# 
   507  0011                     	;# 
   508  0012                     	;# 
   509  0013                     	;# 
   510  0014                     	;# 
   511  0015                     	;# 
   512  0016                     	;# 
   513  0016                     	;# 
   514  0017                     	;# 
   515  0018                     	;# 
   516  0019                     	;# 
   517  001A                     	;# 
   518  001B                     	;# 
   519  001C                     	;# 
   520  001E                     	;# 
   521  001F                     	;# 
   522  008C                     	;# 
   523  008D                     	;# 
   524  008E                     	;# 
   525  0091                     	;# 
   526  0092                     	;# 
   527  0093                     	;# 
   528  0094                     	;# 
   529  0095                     	;# 
   530  0096                     	;# 
   531  0097                     	;# 
   532  0098                     	;# 
   533  0099                     	;# 
   534  009A                     	;# 
   535  009B                     	;# 
   536  009B                     	;# 
   537  009C                     	;# 
   538  009D                     	;# 
   539  009E                     	;# 
   540  010C                     	;# 
   541  010D                     	;# 
   542  010E                     	;# 
   543  0111                     	;# 
   544  0112                     	;# 
   545  0113                     	;# 
   546  0114                     	;# 
   547  0115                     	;# 
   548  0116                     	;# 
   549  0117                     	;# 
   550  0118                     	;# 
   551  0119                     	;# 
   552  011A                     	;# 
   553  011B                     	;# 
   554  011D                     	;# 
   555  011E                     	;# 
   556  018C                     	;# 
   557  018D                     	;# 
   558  018E                     	;# 
   559  0191                     	;# 
   560  0191                     	;# 
   561  0192                     	;# 
   562  0193                     	;# 
   563  0193                     	;# 
   564  0193                     	;# 
   565  0194                     	;# 
   566  0195                     	;# 
   567  0196                     	;# 
   568  0199                     	;# 
   569  019A                     	;# 
   570  019B                     	;# 
   571  019B                     	;# 
   572  019B                     	;# 
   573  019B                     	;# 
   574  019C                     	;# 
   575  019C                     	;# 
   576  019D                     	;# 
   577  019E                     	;# 
   578  019F                     	;# 
   579  020C                     	;# 
   580  020D                     	;# 
   581  020E                     	;# 
   582  0211                     	;# 
   583  0211                     	;# 
   584  0212                     	;# 
   585  0212                     	;# 
   586  0213                     	;# 
   587  0213                     	;# 
   588  0214                     	;# 
   589  0214                     	;# 
   590  0215                     	;# 
   591  0215                     	;# 
   592  0215                     	;# 
   593  0216                     	;# 
   594  0216                     	;# 
   595  0217                     	;# 
   596  0217                     	;# 
   597  0219                     	;# 
   598  021A                     	;# 
   599  021B                     	;# 
   600  021C                     	;# 
   601  021D                     	;# 
   602  021E                     	;# 
   603  021F                     	;# 
   604  0291                     	;# 
   605  0291                     	;# 
   606  0292                     	;# 
   607  0293                     	;# 
   608  0294                     	;# 
   609  0295                     	;# 
   610  0295                     	;# 
   611  0296                     	;# 
   612  0298                     	;# 
   613  0298                     	;# 
   614  0299                     	;# 
   615  029A                     	;# 
   616  029B                     	;# 
   617  029C                     	;# 
   618  029D                     	;# 
   619  029E                     	;# 
   620  0311                     	;# 
   621  0311                     	;# 
   622  0312                     	;# 
   623  0313                     	;# 
   624  0318                     	;# 
   625  0318                     	;# 
   626  0319                     	;# 
   627  031A                     	;# 
   628  038C                     	;# 
   629  038D                     	;# 
   630  038E                     	;# 
   631  0391                     	;# 
   632  0392                     	;# 
   633  0393                     	;# 
   634  0394                     	;# 
   635  0395                     	;# 
   636  0396                     	;# 
   637  039A                     	;# 
   638  039C                     	;# 
   639  039D                     	;# 
   640  039E                     	;# 
   641  039F                     	;# 
   642  0415                     	;# 
   643  0416                     	;# 
   644  0417                     	;# 
   645  041C                     	;# 
   646  041D                     	;# 
   647  041E                     	;# 
   648  0FE4                     	;# 
   649  0FE5                     	;# 
   650  0FE6                     	;# 
   651  0FE7                     	;# 
   652  0FE8                     	;# 
   653  0FE9                     	;# 
   654  0FEA                     	;# 
   655  0FEB                     	;# 
   656  0FED                     	;# 
   657  0FEE                     	;# 
   658  0FEF                     	;# 
   659  0000                     	;# 
   660  0001                     	;# 
   661  0002                     	;# 
   662  0003                     	;# 
   663  0004                     	;# 
   664  0005                     	;# 
   665  0006                     	;# 
   666  0007                     	;# 
   667  0008                     	;# 
   668  0009                     	;# 
   669  000A                     	;# 
   670  000B                     	;# 
   671  000C                     	;# 
   672  000D                     	;# 
   673  000E                     	;# 
   674  0011                     	;# 
   675  0012                     	;# 
   676  0013                     	;# 
   677  0014                     	;# 
   678  0015                     	;# 
   679  0016                     	;# 
   680  0016                     	;# 
   681  0017                     	;# 
   682  0018                     	;# 
   683  0019                     	;# 
   684  001A                     	;# 
   685  001B                     	;# 
   686  001C                     	;# 
   687  001E                     	;# 
   688  001F                     	;# 
   689  008C                     	;# 
   690  008D                     	;# 
   691  008E                     	;# 
   692  0091                     	;# 
   693  0092                     	;# 
   694  0093                     	;# 
   695  0094                     	;# 
   696  0095                     	;# 
   697  0096                     	;# 
   698  0097                     	;# 
   699  0098                     	;# 
   700  0099                     	;# 
   701  009A                     	;# 
   702  009B                     	;# 
   703  009B                     	;# 
   704  009C                     	;# 
   705  009D                     	;# 
   706  009E                     	;# 
   707  010C                     	;# 
   708  010D                     	;# 
   709  010E                     	;# 
   710  0111                     	;# 
   711  0112                     	;# 
   712  0113                     	;# 
   713  0114                     	;# 
   714  0115                     	;# 
   715  0116                     	;# 
   716  0117                     	;# 
   717  0118                     	;# 
   718  0119                     	;# 
   719  011A                     	;# 
   720  011B                     	;# 
   721  011D                     	;# 
   722  011E                     	;# 
   723  018C                     	;# 
   724  018D                     	;# 
   725  018E                     	;# 
   726  0191                     	;# 
   727  0191                     	;# 
   728  0192                     	;# 
   729  0193                     	;# 
   730  0193                     	;# 
   731  0193                     	;# 
   732  0194                     	;# 
   733  0195                     	;# 
   734  0196                     	;# 
   735  0199                     	;# 
   736  019A                     	;# 
   737  019B                     	;# 
   738  019B                     	;# 
   739  019B                     	;# 
   740  019B                     	;# 
   741  019C                     	;# 
   742  019C                     	;# 
   743  019D                     	;# 
   744  019E                     	;# 
   745  019F                     	;# 
   746  020C                     	;# 
   747  020D                     	;# 
   748  020E                     	;# 
   749  0211                     	;# 
   750  0211                     	;# 
   751  0212                     	;# 
   752  0212                     	;# 
   753  0213                     	;# 
   754  0213                     	;# 
   755  0214                     	;# 
   756  0214                     	;# 
   757  0215                     	;# 
   758  0215                     	;# 
   759  0215                     	;# 
   760  0216                     	;# 
   761  0216                     	;# 
   762  0217                     	;# 
   763  0217                     	;# 
   764  0219                     	;# 
   765  021A                     	;# 
   766  021B                     	;# 
   767  021C                     	;# 
   768  021D                     	;# 
   769  021E                     	;# 
   770  021F                     	;# 
   771  0291                     	;# 
   772  0291                     	;# 
   773  0292                     	;# 
   774  0293                     	;# 
   775  0294                     	;# 
   776  0295                     	;# 
   777  0295                     	;# 
   778  0296                     	;# 
   779  0298                     	;# 
   780  0298                     	;# 
   781  0299                     	;# 
   782  029A                     	;# 
   783  029B                     	;# 
   784  029C                     	;# 
   785  029D                     	;# 
   786  029E                     	;# 
   787  0311                     	;# 
   788  0311                     	;# 
   789  0312                     	;# 
   790  0313                     	;# 
   791  0318                     	;# 
   792  0318                     	;# 
   793  0319                     	;# 
   794  031A                     	;# 
   795  038C                     	;# 
   796  038D                     	;# 
   797  038E                     	;# 
   798  0391                     	;# 
   799  0392                     	;# 
   800  0393                     	;# 
   801  0394                     	;# 
   802  0395                     	;# 
   803  0396                     	;# 
   804  039A                     	;# 
   805  039C                     	;# 
   806  039D                     	;# 
   807  039E                     	;# 
   808  039F                     	;# 
   809  0415                     	;# 
   810  0416                     	;# 
   811  0417                     	;# 
   812  041C                     	;# 
   813  041D                     	;# 
   814  041E                     	;# 
   815  0FE4                     	;# 
   816  0FE5                     	;# 
   817  0FE6                     	;# 
   818  0FE7                     	;# 
   819  0FE8                     	;# 
   820  0FE9                     	;# 
   821  0FEA                     	;# 
   822  0FEB                     	;# 
   823  0FED                     	;# 
   824  0FEE                     	;# 
   825  0FEF                     	;# 
   826  0000                     	;# 
   827  0001                     	;# 
   828  0002                     	;# 
   829  0003                     	;# 
   830  0004                     	;# 
   831  0005                     	;# 
   832  0006                     	;# 
   833  0007                     	;# 
   834  0008                     	;# 
   835  0009                     	;# 
   836  000A                     	;# 
   837  000B                     	;# 
   838  000C                     	;# 
   839  000D                     	;# 
   840  000E                     	;# 
   841  0011                     	;# 
   842  0012                     	;# 
   843  0013                     	;# 
   844  0014                     	;# 
   845  0015                     	;# 
   846  0016                     	;# 
   847  0016                     	;# 
   848  0017                     	;# 
   849  0018                     	;# 
   850  0019                     	;# 
   851  001A                     	;# 
   852  001B                     	;# 
   853  001C                     	;# 
   854  001E                     	;# 
   855  001F                     	;# 
   856  008C                     	;# 
   857  008D                     	;# 
   858  008E                     	;# 
   859  0091                     	;# 
   860  0092                     	;# 
   861  0093                     	;# 
   862  0094                     	;# 
   863  0095                     	;# 
   864  0096                     	;# 
   865  0097                     	;# 
   866  0098                     	;# 
   867  0099                     	;# 
   868  009A                     	;# 
   869  009B                     	;# 
   870  009B                     	;# 
   871  009C                     	;# 
   872  009D                     	;# 
   873  009E                     	;# 
   874  010C                     	;# 
   875  010D                     	;# 
   876  010E                     	;# 
   877  0111                     	;# 
   878  0112                     	;# 
   879  0113                     	;# 
   880  0114                     	;# 
   881  0115                     	;# 
   882  0116                     	;# 
   883  0117                     	;# 
   884  0118                     	;# 
   885  0119                     	;# 
   886  011A                     	;# 
   887  011B                     	;# 
   888  011D                     	;# 
   889  011E                     	;# 
   890  018C                     	;# 
   891  018D                     	;# 
   892  018E                     	;# 
   893  0191                     	;# 
   894  0191                     	;# 
   895  0192                     	;# 
   896  0193                     	;# 
   897  0193                     	;# 
   898  0193                     	;# 
   899  0194                     	;# 
   900  0195                     	;# 
   901  0196                     	;# 
   902  0199                     	;# 
   903  019A                     	;# 
   904  019B                     	;# 
   905  019B                     	;# 
   906  019B                     	;# 
   907  019B                     	;# 
   908  019C                     	;# 
   909  019C                     	;# 
   910  019D                     	;# 
   911  019E                     	;# 
   912  019F                     	;# 
   913  020C                     	;# 
   914  020D                     	;# 
   915  020E                     	;# 
   916  0211                     	;# 
   917  0211                     	;# 
   918  0212                     	;# 
   919  0212                     	;# 
   920  0213                     	;# 
   921  0213                     	;# 
   922  0214                     	;# 
   923  0214                     	;# 
   924  0215                     	;# 
   925  0215                     	;# 
   926  0215                     	;# 
   927  0216                     	;# 
   928  0216                     	;# 
   929  0217                     	;# 
   930  0217                     	;# 
   931  0219                     	;# 
   932  021A                     	;# 
   933  021B                     	;# 
   934  021C                     	;# 
   935  021D                     	;# 
   936  021E                     	;# 
   937  021F                     	;# 
   938  0291                     	;# 
   939  0291                     	;# 
   940  0292                     	;# 
   941  0293                     	;# 
   942  0294                     	;# 
   943  0295                     	;# 
   944  0295                     	;# 
   945  0296                     	;# 
   946  0298                     	;# 
   947  0298                     	;# 
   948  0299                     	;# 
   949  029A                     	;# 
   950  029B                     	;# 
   951  029C                     	;# 
   952  029D                     	;# 
   953  029E                     	;# 
   954  0311                     	;# 
   955  0311                     	;# 
   956  0312                     	;# 
   957  0313                     	;# 
   958  0318                     	;# 
   959  0318                     	;# 
   960  0319                     	;# 
   961  031A                     	;# 
   962  038C                     	;# 
   963  038D                     	;# 
   964  038E                     	;# 
   965  0391                     	;# 
   966  0392                     	;# 
   967  0393                     	;# 
   968  0394                     	;# 
   969  0395                     	;# 
   970  0396                     	;# 
   971  039A                     	;# 
   972  039C                     	;# 
   973  039D                     	;# 
   974  039E                     	;# 
   975  039F                     	;# 
   976  0415                     	;# 
   977  0416                     	;# 
   978  0417                     	;# 
   979  041C                     	;# 
   980  041D                     	;# 
   981  041E                     	;# 
   982  0FE4                     	;# 
   983  0FE5                     	;# 
   984  0FE6                     	;# 
   985  0FE7                     	;# 
   986  0FE8                     	;# 
   987  0FE9                     	;# 
   988  0FEA                     	;# 
   989  0FEB                     	;# 
   990  0FED                     	;# 
   991  0FEE                     	;# 
   992  0FEF                     	;# 
   993  0000                     	;# 
   994  0001                     	;# 
   995  0002                     	;# 
   996  0003                     	;# 
   997  0004                     	;# 
   998  0005                     	;# 
   999  0006                     	;# 
  1000  0007                     	;# 
  1001  0008                     	;# 
  1002  0009                     	;# 
  1003  000A                     	;# 
  1004  000B                     	;# 
  1005  000C                     	;# 
  1006  000D                     	;# 
  1007  000E                     	;# 
  1008  0011                     	;# 
  1009  0012                     	;# 
  1010  0013                     	;# 
  1011  0014                     	;# 
  1012  0015                     	;# 
  1013  0016                     	;# 
  1014  0016                     	;# 
  1015  0017                     	;# 
  1016  0018                     	;# 
  1017  0019                     	;# 
  1018  001A                     	;# 
  1019  001B                     	;# 
  1020  001C                     	;# 
  1021  001E                     	;# 
  1022  001F                     	;# 
  1023  008C                     	;# 
  1024  008D                     	;# 
  1025  008E                     	;# 
  1026  0091                     	;# 
  1027  0092                     	;# 
  1028  0093                     	;# 
  1029  0094                     	;# 
  1030  0095                     	;# 
  1031  0096                     	;# 
  1032  0097                     	;# 
  1033  0098                     	;# 
  1034  0099                     	;# 
  1035  009A                     	;# 
  1036  009B                     	;# 
  1037  009B                     	;# 
  1038  009C                     	;# 
  1039  009D                     	;# 
  1040  009E                     	;# 
  1041  010C                     	;# 
  1042  010D                     	;# 
  1043  010E                     	;# 
  1044  0111                     	;# 
  1045  0112                     	;# 
  1046  0113                     	;# 
  1047  0114                     	;# 
  1048  0115                     	;# 
  1049  0116                     	;# 
  1050  0117                     	;# 
  1051  0118                     	;# 
  1052  0119                     	;# 
  1053  011A                     	;# 
  1054  011B                     	;# 
  1055  011D                     	;# 
  1056  011E                     	;# 
  1057  018C                     	;# 
  1058  018D                     	;# 
  1059  018E                     	;# 
  1060  0191                     	;# 
  1061  0191                     	;# 
  1062  0192                     	;# 
  1063  0193                     	;# 
  1064  0193                     	;# 
  1065  0193                     	;# 
  1066  0194                     	;# 
  1067  0195                     	;# 
  1068  0196                     	;# 
  1069  0199                     	;# 
  1070  019A                     	;# 
  1071  019B                     	;# 
  1072  019B                     	;# 
  1073  019B                     	;# 
  1074  019B                     	;# 
  1075  019C                     	;# 
  1076  019C                     	;# 
  1077  019D                     	;# 
  1078  019E                     	;# 
  1079  019F                     	;# 
  1080  020C                     	;# 
  1081  020D                     	;# 
  1082  020E                     	;# 
  1083  0211                     	;# 
  1084  0211                     	;# 
  1085  0212                     	;# 
  1086  0212                     	;# 
  1087  0213                     	;# 
  1088  0213                     	;# 
  1089  0214                     	;# 
  1090  0214                     	;# 
  1091  0215                     	;# 
  1092  0215                     	;# 
  1093  0215                     	;# 
  1094  0216                     	;# 
  1095  0216                     	;# 
  1096  0217                     	;# 
  1097  0217                     	;# 
  1098  0219                     	;# 
  1099  021A                     	;# 
  1100  021B                     	;# 
  1101  021C                     	;# 
  1102  021D                     	;# 
  1103  021E                     	;# 
  1104  021F                     	;# 
  1105  0291                     	;# 
  1106  0291                     	;# 
  1107  0292                     	;# 
  1108  0293                     	;# 
  1109  0294                     	;# 
  1110  0295                     	;# 
  1111  0295                     	;# 
  1112  0296                     	;# 
  1113  0298                     	;# 
  1114  0298                     	;# 
  1115  0299                     	;# 
  1116  029A                     	;# 
  1117  029B                     	;# 
  1118  029C                     	;# 
  1119  029D                     	;# 
  1120  029E                     	;# 
  1121  0311                     	;# 
  1122  0311                     	;# 
  1123  0312                     	;# 
  1124  0313                     	;# 
  1125  0318                     	;# 
  1126  0318                     	;# 
  1127  0319                     	;# 
  1128  031A                     	;# 
  1129  038C                     	;# 
  1130  038D                     	;# 
  1131  038E                     	;# 
  1132  0391                     	;# 
  1133  0392                     	;# 
  1134  0393                     	;# 
  1135  0394                     	;# 
  1136  0395                     	;# 
  1137  0396                     	;# 
  1138  039A                     	;# 
  1139  039C                     	;# 
  1140  039D                     	;# 
  1141  039E                     	;# 
  1142  039F                     	;# 
  1143  0415                     	;# 
  1144  0416                     	;# 
  1145  0417                     	;# 
  1146  041C                     	;# 
  1147  041D                     	;# 
  1148  041E                     	;# 
  1149  0FE4                     	;# 
  1150  0FE5                     	;# 
  1151  0FE6                     	;# 
  1152  0FE7                     	;# 
  1153  0FE8                     	;# 
  1154  0FE9                     	;# 
  1155  0FEA                     	;# 
  1156  0FEB                     	;# 
  1157  0FED                     	;# 
  1158  0FEE                     	;# 
  1159  0FEF                     	;# 
  1160  0000                     	;# 
  1161  0001                     	;# 
  1162  0002                     	;# 
  1163  0003                     	;# 
  1164  0004                     	;# 
  1165  0005                     	;# 
  1166  0006                     	;# 
  1167  0007                     	;# 
  1168  0008                     	;# 
  1169  0009                     	;# 
  1170  000A                     	;# 
  1171  000B                     	;# 
  1172  000C                     	;# 
  1173  000D                     	;# 
  1174  000E                     	;# 
  1175  0011                     	;# 
  1176  0012                     	;# 
  1177  0013                     	;# 
  1178  0014                     	;# 
  1179  0015                     	;# 
  1180  0016                     	;# 
  1181  0016                     	;# 
  1182  0017                     	;# 
  1183  0018                     	;# 
  1184  0019                     	;# 
  1185  001A                     	;# 
  1186  001B                     	;# 
  1187  001C                     	;# 
  1188  001E                     	;# 
  1189  001F                     	;# 
  1190  008C                     	;# 
  1191  008D                     	;# 
  1192  008E                     	;# 
  1193  0091                     	;# 
  1194  0092                     	;# 
  1195  0093                     	;# 
  1196  0094                     	;# 
  1197  0095                     	;# 
  1198  0096                     	;# 
  1199  0097                     	;# 
  1200  0098                     	;# 
  1201  0099                     	;# 
  1202  009A                     	;# 
  1203  009B                     	;# 
  1204  009B                     	;# 
  1205  009C                     	;# 
  1206  009D                     	;# 
  1207  009E                     	;# 
  1208  010C                     	;# 
  1209  010D                     	;# 
  1210  010E                     	;# 
  1211  0111                     	;# 
  1212  0112                     	;# 
  1213  0113                     	;# 
  1214  0114                     	;# 
  1215  0115                     	;# 
  1216  0116                     	;# 
  1217  0117                     	;# 
  1218  0118                     	;# 
  1219  0119                     	;# 
  1220  011A                     	;# 
  1221  011B                     	;# 
  1222  011D                     	;# 
  1223  011E                     	;# 
  1224  018C                     	;# 
  1225  018D                     	;# 
  1226  018E                     	;# 
  1227  0191                     	;# 
  1228  0191                     	;# 
  1229  0192                     	;# 
  1230  0193                     	;# 
  1231  0193                     	;# 
  1232  0193                     	;# 
  1233  0194                     	;# 
  1234  0195                     	;# 
  1235  0196                     	;# 
  1236  0199                     	;# 
  1237  019A                     	;# 
  1238  019B                     	;# 
  1239  019B                     	;# 
  1240  019B                     	;# 
  1241  019B                     	;# 
  1242  019C                     	;# 
  1243  019C                     	;# 
  1244  019D                     	;# 
  1245  019E                     	;# 
  1246  019F                     	;# 
  1247  020C                     	;# 
  1248  020D                     	;# 
  1249  020E                     	;# 
  1250  0211                     	;# 
  1251  0211                     	;# 
  1252  0212                     	;# 
  1253  0212                     	;# 
  1254  0213                     	;# 
  1255  0213                     	;# 
  1256  0214                     	;# 
  1257  0214                     	;# 
  1258  0215                     	;# 
  1259  0215                     	;# 
  1260  0215                     	;# 
  1261  0216                     	;# 
  1262  0216                     	;# 
  1263  0217                     	;# 
  1264  0217                     	;# 
  1265  0219                     	;# 
  1266  021A                     	;# 
  1267  021B                     	;# 
  1268  021C                     	;# 
  1269  021D                     	;# 
  1270  021E                     	;# 
  1271  021F                     	;# 
  1272  0291                     	;# 
  1273  0291                     	;# 
  1274  0292                     	;# 
  1275  0293                     	;# 
  1276  0294                     	;# 
  1277  0295                     	;# 
  1278  0295                     	;# 
  1279  0296                     	;# 
  1280  0298                     	;# 
  1281  0298                     	;# 
  1282  0299                     	;# 
  1283  029A                     	;# 
  1284  029B                     	;# 
  1285  029C                     	;# 
  1286  029D                     	;# 
  1287  029E                     	;# 
  1288  0311                     	;# 
  1289  0311                     	;# 
  1290  0312                     	;# 
  1291  0313                     	;# 
  1292  0318                     	;# 
  1293  0318                     	;# 
  1294  0319                     	;# 
  1295  031A                     	;# 
  1296  038C                     	;# 
  1297  038D                     	;# 
  1298  038E                     	;# 
  1299  0391                     	;# 
  1300  0392                     	;# 
  1301  0393                     	;# 
  1302  0394                     	;# 
  1303  0395                     	;# 
  1304  0396                     	;# 
  1305  039A                     	;# 
  1306  039C                     	;# 
  1307  039D                     	;# 
  1308  039E                     	;# 
  1309  039F                     	;# 
  1310  0415                     	;# 
  1311  0416                     	;# 
  1312  0417                     	;# 
  1313  041C                     	;# 
  1314  041D                     	;# 
  1315  041E                     	;# 
  1316  0FE4                     	;# 
  1317  0FE5                     	;# 
  1318  0FE6                     	;# 
  1319  0FE7                     	;# 
  1320  0FE8                     	;# 
  1321  0FE9                     	;# 
  1322  0FEA                     	;# 
  1323  0FEB                     	;# 
  1324  0FED                     	;# 
  1325  0FEE                     	;# 
  1326  0FEF                     	;# 
  1327  0000                     	;# 
  1328  0001                     	;# 
  1329  0002                     	;# 
  1330  0003                     	;# 
  1331  0004                     	;# 
  1332  0005                     	;# 
  1333  0006                     	;# 
  1334  0007                     	;# 
  1335  0008                     	;# 
  1336  0009                     	;# 
  1337  000A                     	;# 
  1338  000B                     	;# 
  1339  000C                     	;# 
  1340  000D                     	;# 
  1341  000E                     	;# 
  1342  0011                     	;# 
  1343  0012                     	;# 
  1344  0013                     	;# 
  1345  0014                     	;# 
  1346  0015                     	;# 
  1347  0016                     	;# 
  1348  0016                     	;# 
  1349  0017                     	;# 
  1350  0018                     	;# 
  1351  0019                     	;# 
  1352  001A                     	;# 
  1353  001B                     	;# 
  1354  001C                     	;# 
  1355  001E                     	;# 
  1356  001F                     	;# 
  1357  008C                     	;# 
  1358  008D                     	;# 
  1359  008E                     	;# 
  1360  0091                     	;# 
  1361  0092                     	;# 
  1362  0093                     	;# 
  1363  0094                     	;# 
  1364  0095                     	;# 
  1365  0096                     	;# 
  1366  0097                     	;# 
  1367  0098                     	;# 
  1368  0099                     	;# 
  1369  009A                     	;# 
  1370  009B                     	;# 
  1371  009B                     	;# 
  1372  009C                     	;# 
  1373  009D                     	;# 
  1374  009E                     	;# 
  1375  010C                     	;# 
  1376  010D                     	;# 
  1377  010E                     	;# 
  1378  0111                     	;# 
  1379  0112                     	;# 
  1380  0113                     	;# 
  1381  0114                     	;# 
  1382  0115                     	;# 
  1383  0116                     	;# 
  1384  0117                     	;# 
  1385  0118                     	;# 
  1386  0119                     	;# 
  1387  011A                     	;# 
  1388  011B                     	;# 
  1389  011D                     	;# 
  1390  011E                     	;# 
  1391  018C                     	;# 
  1392  018D                     	;# 
  1393  018E                     	;# 
  1394  0191                     	;# 
  1395  0191                     	;# 
  1396  0192                     	;# 
  1397  0193                     	;# 
  1398  0193                     	;# 
  1399  0193                     	;# 
  1400  0194                     	;# 
  1401  0195                     	;# 
  1402  0196                     	;# 
  1403  0199                     	;# 
  1404  019A                     	;# 
  1405  019B                     	;# 
  1406  019B                     	;# 
  1407  019B                     	;# 
  1408  019B                     	;# 
  1409  019C                     	;# 
  1410  019C                     	;# 
  1411  019D                     	;# 
  1412  019E                     	;# 
  1413  019F                     	;# 
  1414  020C                     	;# 
  1415  020D                     	;# 
  1416  020E                     	;# 
  1417  0211                     	;# 
  1418  0211                     	;# 
  1419  0212                     	;# 
  1420  0212                     	;# 
  1421  0213                     	;# 
  1422  0213                     	;# 
  1423  0214                     	;# 
  1424  0214                     	;# 
  1425  0215                     	;# 
  1426  0215                     	;# 
  1427  0215                     	;# 
  1428  0216                     	;# 
  1429  0216                     	;# 
  1430  0217                     	;# 
  1431  0217                     	;# 
  1432  0219                     	;# 
  1433  021A                     	;# 
  1434  021B                     	;# 
  1435  021C                     	;# 
  1436  021D                     	;# 
  1437  021E                     	;# 
  1438  021F                     	;# 
  1439  0291                     	;# 
  1440  0291                     	;# 
  1441  0292                     	;# 
  1442  0293                     	;# 
  1443  0294                     	;# 
  1444  0295                     	;# 
  1445  0295                     	;# 
  1446  0296                     	;# 
  1447  0298                     	;# 
  1448  0298                     	;# 
  1449  0299                     	;# 
  1450  029A                     	;# 
  1451  029B                     	;# 
  1452  029C                     	;# 
  1453  029D                     	;# 
  1454  029E                     	;# 
  1455  0311                     	;# 
  1456  0311                     	;# 
  1457  0312                     	;# 
  1458  0313                     	;# 
  1459  0318                     	;# 
  1460  0318                     	;# 
  1461  0319                     	;# 
  1462  031A                     	;# 
  1463  038C                     	;# 
  1464  038D                     	;# 
  1465  038E                     	;# 
  1466  0391                     	;# 
  1467  0392                     	;# 
  1468  0393                     	;# 
  1469  0394                     	;# 
  1470  0395                     	;# 
  1471  0396                     	;# 
  1472  039A                     	;# 
  1473  039C                     	;# 
  1474  039D                     	;# 
  1475  039E                     	;# 
  1476  039F                     	;# 
  1477  0415                     	;# 
  1478  0416                     	;# 
  1479  0417                     	;# 
  1480  041C                     	;# 
  1481  041D                     	;# 
  1482  041E                     	;# 
  1483  0FE4                     	;# 
  1484  0FE5                     	;# 
  1485  0FE6                     	;# 
  1486  0FE7                     	;# 
  1487  0FE8                     	;# 
  1488  0FE9                     	;# 
  1489  0FEA                     	;# 
  1490  0FEB                     	;# 
  1491  0FED                     	;# 
  1492  0FEE                     	;# 
  1493  0FEF                     	;# 
  1494  0000                     	;# 
  1495  0001                     	;# 
  1496  0002                     	;# 
  1497  0003                     	;# 
  1498  0004                     	;# 
  1499  0005                     	;# 
  1500  0006                     	;# 
  1501  0007                     	;# 
  1502  0008                     	;# 
  1503  0009                     	;# 
  1504  000A                     	;# 
  1505  000B                     	;# 
  1506  000C                     	;# 
  1507  000D                     	;# 
  1508  000E                     	;# 
  1509  0011                     	;# 
  1510  0012                     	;# 
  1511  0013                     	;# 
  1512  0014                     	;# 
  1513  0015                     	;# 
  1514  0016                     	;# 
  1515  0016                     	;# 
  1516  0017                     	;# 
  1517  0018                     	;# 
  1518  0019                     	;# 
  1519  001A                     	;# 
  1520  001B                     	;# 
  1521  001C                     	;# 
  1522  001E                     	;# 
  1523  001F                     	;# 
  1524  008C                     	;# 
  1525  008D                     	;# 
  1526  008E                     	;# 
  1527  0091                     	;# 
  1528  0092                     	;# 
  1529  0093                     	;# 
  1530  0094                     	;# 
  1531  0095                     	;# 
  1532  0096                     	;# 
  1533  0097                     	;# 
  1534  0098                     	;# 
  1535  0099                     	;# 
  1536  009A                     	;# 
  1537  009B                     	;# 
  1538  009B                     	;# 
  1539  009C                     	;# 
  1540  009D                     	;# 
  1541  009E                     	;# 
  1542  010C                     	;# 
  1543  010D                     	;# 
  1544  010E                     	;# 
  1545  0111                     	;# 
  1546  0112                     	;# 
  1547  0113                     	;# 
  1548  0114                     	;# 
  1549  0115                     	;# 
  1550  0116                     	;# 
  1551  0117                     	;# 
  1552  0118                     	;# 
  1553  0119                     	;# 
  1554  011A                     	;# 
  1555  011B                     	;# 
  1556  011D                     	;# 
  1557  011E                     	;# 
  1558  018C                     	;# 
  1559  018D                     	;# 
  1560  018E                     	;# 
  1561  0191                     	;# 
  1562  0191                     	;# 
  1563  0192                     	;# 
  1564  0193                     	;# 
  1565  0193                     	;# 
  1566  0193                     	;# 
  1567  0194                     	;# 
  1568  0195                     	;# 
  1569  0196                     	;# 
  1570  0199                     	;# 
  1571  019A                     	;# 
  1572  019B                     	;# 
  1573  019B                     	;# 
  1574  019B                     	;# 
  1575  019B                     	;# 
  1576  019C                     	;# 
  1577  019C                     	;# 
  1578  019D                     	;# 
  1579  019E                     	;# 
  1580  019F                     	;# 
  1581  020C                     	;# 
  1582  020D                     	;# 
  1583  020E                     	;# 
  1584  0211                     	;# 
  1585  0211                     	;# 
  1586  0212                     	;# 
  1587  0212                     	;# 
  1588  0213                     	;# 
  1589  0213                     	;# 
  1590  0214                     	;# 
  1591  0214                     	;# 
  1592  0215                     	;# 
  1593  0215                     	;# 
  1594  0215                     	;# 
  1595  0216                     	;# 
  1596  0216                     	;# 
  1597  0217                     	;# 
  1598  0217                     	;# 
  1599  0219                     	;# 
  1600  021A                     	;# 
  1601  021B                     	;# 
  1602  021C                     	;# 
  1603  021D                     	;# 
  1604  021E                     	;# 
  1605  021F                     	;# 
  1606  0291                     	;# 
  1607  0291                     	;# 
  1608  0292                     	;# 
  1609  0293                     	;# 
  1610  0294                     	;# 
  1611  0295                     	;# 
  1612  0295                     	;# 
  1613  0296                     	;# 
  1614  0298                     	;# 
  1615  0298                     	;# 
  1616  0299                     	;# 
  1617  029A                     	;# 
  1618  029B                     	;# 
  1619  029C                     	;# 
  1620  029D                     	;# 
  1621  029E                     	;# 
  1622  0311                     	;# 
  1623  0311                     	;# 
  1624  0312                     	;# 
  1625  0313                     	;# 
  1626  0318                     	;# 
  1627  0318                     	;# 
  1628  0319                     	;# 
  1629  031A                     	;# 
  1630  038C                     	;# 
  1631  038D                     	;# 
  1632  038E                     	;# 
  1633  0391                     	;# 
  1634  0392                     	;# 
  1635  0393                     	;# 
  1636  0394                     	;# 
  1637  0395                     	;# 
  1638  0396                     	;# 
  1639  039A                     	;# 
  1640  039C                     	;# 
  1641  039D                     	;# 
  1642  039E                     	;# 
  1643  039F                     	;# 
  1644  0415                     	;# 
  1645  0416                     	;# 
  1646  0417                     	;# 
  1647  041C                     	;# 
  1648  041D                     	;# 
  1649  041E                     	;# 
  1650  0FE4                     	;# 
  1651  0FE5                     	;# 
  1652  0FE6                     	;# 
  1653  0FE7                     	;# 
  1654  0FE8                     	;# 
  1655  0FE9                     	;# 
  1656  0FEA                     	;# 
  1657  0FEB                     	;# 
  1658  0FED                     	;# 
  1659  0FEE                     	;# 
  1660  0FEF                     	;# 
  1661  0000                     	;# 
  1662  0001                     	;# 
  1663  0002                     	;# 
  1664  0003                     	;# 
  1665  0004                     	;# 
  1666  0005                     	;# 
  1667  0006                     	;# 
  1668  0007                     	;# 
  1669  0008                     	;# 
  1670  0009                     	;# 
  1671  000A                     	;# 
  1672  000B                     	;# 
  1673  000C                     	;# 
  1674  000D                     	;# 
  1675  000E                     	;# 
  1676  0011                     	;# 
  1677  0012                     	;# 
  1678  0013                     	;# 
  1679  0014                     	;# 
  1680  0015                     	;# 
  1681  0016                     	;# 
  1682  0016                     	;# 
  1683  0017                     	;# 
  1684  0018                     	;# 
  1685  0019                     	;# 
  1686  001A                     	;# 
  1687  001B                     	;# 
  1688  001C                     	;# 
  1689  001E                     	;# 
  1690  001F                     	;# 
  1691  008C                     	;# 
  1692  008D                     	;# 
  1693  008E                     	;# 
  1694  0091                     	;# 
  1695  0092                     	;# 
  1696  0093                     	;# 
  1697  0094                     	;# 
  1698  0095                     	;# 
  1699  0096                     	;# 
  1700  0097                     	;# 
  1701  0098                     	;# 
  1702  0099                     	;# 
  1703  009A                     	;# 
  1704  009B                     	;# 
  1705  009B                     	;# 
  1706  009C                     	;# 
  1707  009D                     	;# 
  1708  009E                     	;# 
  1709  010C                     	;# 
  1710  010D                     	;# 
  1711  010E                     	;# 
  1712  0111                     	;# 
  1713  0112                     	;# 
  1714  0113                     	;# 
  1715  0114                     	;# 
  1716  0115                     	;# 
  1717  0116                     	;# 
  1718  0117                     	;# 
  1719  0118                     	;# 
  1720  0119                     	;# 
  1721  011A                     	;# 
  1722  011B                     	;# 
  1723  011D                     	;# 
  1724  011E                     	;# 
  1725  018C                     	;# 
  1726  018D                     	;# 
  1727  018E                     	;# 
  1728  0191                     	;# 
  1729  0191                     	;# 
  1730  0192                     	;# 
  1731  0193                     	;# 
  1732  0193                     	;# 
  1733  0193                     	;# 
  1734  0194                     	;# 
  1735  0195                     	;# 
  1736  0196                     	;# 
  1737  0199                     	;# 
  1738  019A                     	;# 
  1739  019B                     	;# 
  1740  019B                     	;# 
  1741  019B                     	;# 
  1742  019B                     	;# 
  1743  019C                     	;# 
  1744  019C                     	;# 
  1745  019D                     	;# 
  1746  019E                     	;# 
  1747  019F                     	;# 
  1748  020C                     	;# 
  1749  020D                     	;# 
  1750  020E                     	;# 
  1751  0211                     	;# 
  1752  0211                     	;# 
  1753  0212                     	;# 
  1754  0212                     	;# 
  1755  0213                     	;# 
  1756  0213                     	;# 
  1757  0214                     	;# 
  1758  0214                     	;# 
  1759  0215                     	;# 
  1760  0215                     	;# 
  1761  0215                     	;# 
  1762  0216                     	;# 
  1763  0216                     	;# 
  1764  0217                     	;# 
  1765  0217                     	;# 
  1766  0219                     	;# 
  1767  021A                     	;# 
  1768  021B                     	;# 
  1769  021C                     	;# 
  1770  021D                     	;# 
  1771  021E                     	;# 
  1772  021F                     	;# 
  1773  0291                     	;# 
  1774  0291                     	;# 
  1775  0292                     	;# 
  1776  0293                     	;# 
  1777  0294                     	;# 
  1778  0295                     	;# 
  1779  0295                     	;# 
  1780  0296                     	;# 
  1781  0298                     	;# 
  1782  0298                     	;# 
  1783  0299                     	;# 
  1784  029A                     	;# 
  1785  029B                     	;# 
  1786  029C                     	;# 
  1787  029D                     	;# 
  1788  029E                     	;# 
  1789  0311                     	;# 
  1790  0311                     	;# 
  1791  0312                     	;# 
  1792  0313                     	;# 
  1793  0318                     	;# 
  1794  0318                     	;# 
  1795  0319                     	;# 
  1796  031A                     	;# 
  1797  038C                     	;# 
  1798  038D                     	;# 
  1799  038E                     	;# 
  1800  0391                     	;# 
  1801  0392                     	;# 
  1802  0393                     	;# 
  1803  0394                     	;# 
  1804  0395                     	;# 
  1805  0396                     	;# 
  1806  039A                     	;# 
  1807  039C                     	;# 
  1808  039D                     	;# 
  1809  039E                     	;# 
  1810  039F                     	;# 
  1811  0415                     	;# 
  1812  0416                     	;# 
  1813  0417                     	;# 
  1814  041C                     	;# 
  1815  041D                     	;# 
  1816  041E                     	;# 
  1817  0FE4                     	;# 
  1818  0FE5                     	;# 
  1819  0FE6                     	;# 
  1820  0FE7                     	;# 
  1821  0FE8                     	;# 
  1822  0FE9                     	;# 
  1823  0FEA                     	;# 
  1824  0FEB                     	;# 
  1825  0FED                     	;# 
  1826  0FEE                     	;# 
  1827  0FEF                     	;# 
  1828  0000                     	;# 
  1829  0001                     	;# 
  1830  0002                     	;# 
  1831  0003                     	;# 
  1832  0004                     	;# 
  1833  0005                     	;# 
  1834  0006                     	;# 
  1835  0007                     	;# 
  1836  0008                     	;# 
  1837  0009                     	;# 
  1838  000A                     	;# 
  1839  000B                     	;# 
  1840  000C                     	;# 
  1841  000D                     	;# 
  1842  000E                     	;# 
  1843  0011                     	;# 
  1844  0012                     	;# 
  1845  0013                     	;# 
  1846  0014                     	;# 
  1847  0015                     	;# 
  1848  0016                     	;# 
  1849  0016                     	;# 
  1850  0017                     	;# 
  1851  0018                     	;# 
  1852  0019                     	;# 
  1853  001A                     	;# 
  1854  001B                     	;# 
  1855  001C                     	;# 
  1856  001E                     	;# 
  1857  001F                     	;# 
  1858  008C                     	;# 
  1859  008D                     	;# 
  1860  008E                     	;# 
  1861  0091                     	;# 
  1862  0092                     	;# 
  1863  0093                     	;# 
  1864  0094                     	;# 
  1865  0095                     	;# 
  1866  0096                     	;# 
  1867  0097                     	;# 
  1868  0098                     	;# 
  1869  0099                     	;# 
  1870  009A                     	;# 
  1871  009B                     	;# 
  1872  009B                     	;# 
  1873  009C                     	;# 
  1874  009D                     	;# 
  1875  009E                     	;# 
  1876  010C                     	;# 
  1877  010D                     	;# 
  1878  010E                     	;# 
  1879  0111                     	;# 
  1880  0112                     	;# 
  1881  0113                     	;# 
  1882  0114                     	;# 
  1883  0115                     	;# 
  1884  0116                     	;# 
  1885  0117                     	;# 
  1886  0118                     	;# 
  1887  0119                     	;# 
  1888  011A                     	;# 
  1889  011B                     	;# 
  1890  011D                     	;# 
  1891  011E                     	;# 
  1892  018C                     	;# 
  1893  018D                     	;# 
  1894  018E                     	;# 
  1895  0191                     	;# 
  1896  0191                     	;# 
  1897  0192                     	;# 
  1898  0193                     	;# 
  1899  0193                     	;# 
  1900  0193                     	;# 
  1901  0194                     	;# 
  1902  0195                     	;# 
  1903  0196                     	;# 
  1904  0199                     	;# 
  1905  019A                     	;# 
  1906  019B                     	;# 
  1907  019B                     	;# 
  1908  019B                     	;# 
  1909  019B                     	;# 
  1910  019C                     	;# 
  1911  019C                     	;# 
  1912  019D                     	;# 
  1913  019E                     	;# 
  1914  019F                     	;# 
  1915  020C                     	;# 
  1916  020D                     	;# 
  1917  020E                     	;# 
  1918  0211                     	;# 
  1919  0211                     	;# 
  1920  0212                     	;# 
  1921  0212                     	;# 
  1922  0213                     	;# 
  1923  0213                     	;# 
  1924  0214                     	;# 
  1925  0214                     	;# 
  1926  0215                     	;# 
  1927  0215                     	;# 
  1928  0215                     	;# 
  1929  0216                     	;# 
  1930  0216                     	;# 
  1931  0217                     	;# 
  1932  0217                     	;# 
  1933  0219                     	;# 
  1934  021A                     	;# 
  1935  021B                     	;# 
  1936  021C                     	;# 
  1937  021D                     	;# 
  1938  021E                     	;# 
  1939  021F                     	;# 
  1940  0291                     	;# 
  1941  0291                     	;# 
  1942  0292                     	;# 
  1943  0293                     	;# 
  1944  0294                     	;# 
  1945  0295                     	;# 
  1946  0295                     	;# 
  1947  0296                     	;# 
  1948  0298                     	;# 
  1949  0298                     	;# 
  1950  0299                     	;# 
  1951  029A                     	;# 
  1952  029B                     	;# 
  1953  029C                     	;# 
  1954  029D                     	;# 
  1955  029E                     	;# 
  1956  0311                     	;# 
  1957  0311                     	;# 
  1958  0312                     	;# 
  1959  0313                     	;# 
  1960  0318                     	;# 
  1961  0318                     	;# 
  1962  0319                     	;# 
  1963  031A                     	;# 
  1964  038C                     	;# 
  1965  038D                     	;# 
  1966  038E                     	;# 
  1967  0391                     	;# 
  1968  0392                     	;# 
  1969  0393                     	;# 
  1970  0394                     	;# 
  1971  0395                     	;# 
  1972  0396                     	;# 
  1973  039A                     	;# 
  1974  039C                     	;# 
  1975  039D                     	;# 
  1976  039E                     	;# 
  1977  039F                     	;# 
  1978  0415                     	;# 
  1979  0416                     	;# 
  1980  0417                     	;# 
  1981  041C                     	;# 
  1982  041D                     	;# 
  1983  041E                     	;# 
  1984  0FE4                     	;# 
  1985  0FE5                     	;# 
  1986  0FE6                     	;# 
  1987  0FE7                     	;# 
  1988  0FE8                     	;# 
  1989  0FE9                     	;# 
  1990  0FEA                     	;# 
  1991  0FEB                     	;# 
  1992  0FED                     	;# 
  1993  0FEE                     	;# 
  1994  0FEF                     	;# 
  1995  0000                     	;# 
  1996  0001                     	;# 
  1997  0002                     	;# 
  1998  0003                     	;# 
  1999  0004                     	;# 
  2000  0005                     	;# 
  2001  0006                     	;# 
  2002  0007                     	;# 
  2003  0008                     	;# 
  2004  0009                     	;# 
  2005  000A                     	;# 
  2006  000B                     	;# 
  2007  000C                     	;# 
  2008  000D                     	;# 
  2009  000E                     	;# 
  2010  0011                     	;# 
  2011  0012                     	;# 
  2012  0013                     	;# 
  2013  0014                     	;# 
  2014  0015                     	;# 
  2015  0016                     	;# 
  2016  0016                     	;# 
  2017  0017                     	;# 
  2018  0018                     	;# 
  2019  0019                     	;# 
  2020  001A                     	;# 
  2021  001B                     	;# 
  2022  001C                     	;# 
  2023  001E                     	;# 
  2024  001F                     	;# 
  2025  008C                     	;# 
  2026  008D                     	;# 
  2027  008E                     	;# 
  2028  0091                     	;# 
  2029  0092                     	;# 
  2030  0093                     	;# 
  2031  0094                     	;# 
  2032  0095                     	;# 
  2033  0096                     	;# 
  2034  0097                     	;# 
  2035  0098                     	;# 
  2036  0099                     	;# 
  2037  009A                     	;# 
  2038  009B                     	;# 
  2039  009B                     	;# 
  2040  009C                     	;# 
  2041  009D                     	;# 
  2042  009E                     	;# 
  2043  010C                     	;# 
  2044  010D                     	;# 
  2045  010E                     	;# 
  2046  0111                     	;# 
  2047  0112                     	;# 
  2048  0113                     	;# 
  2049  0114                     	;# 
  2050  0115                     	;# 
  2051  0116                     	;# 
  2052  0117                     	;# 
  2053  0118                     	;# 
  2054  0119                     	;# 
  2055  011A                     	;# 
  2056  011B                     	;# 
  2057  011D                     	;# 
  2058  011E                     	;# 
  2059  018C                     	;# 
  2060  018D                     	;# 
  2061  018E                     	;# 
  2062  0191                     	;# 
  2063  0191                     	;# 
  2064  0192                     	;# 
  2065  0193                     	;# 
  2066  0193                     	;# 
  2067  0193                     	;# 
  2068  0194                     	;# 
  2069  0195                     	;# 
  2070  0196                     	;# 
  2071  0199                     	;# 
  2072  019A                     	;# 
  2073  019B                     	;# 
  2074  019B                     	;# 
  2075  019B                     	;# 
  2076  019B                     	;# 
  2077  019C                     	;# 
  2078  019C                     	;# 
  2079  019D                     	;# 
  2080  019E                     	;# 
  2081  019F                     	;# 
  2082  020C                     	;# 
  2083  020D                     	;# 
  2084  020E                     	;# 
  2085  0211                     	;# 
  2086  0211                     	;# 
  2087  0212                     	;# 
  2088  0212                     	;# 
  2089  0213                     	;# 
  2090  0213                     	;# 
  2091  0214                     	;# 
  2092  0214                     	;# 
  2093  0215                     	;# 
  2094  0215                     	;# 
  2095  0215                     	;# 
  2096  0216                     	;# 
  2097  0216                     	;# 
  2098  0217                     	;# 
  2099  0217                     	;# 
  2100  0219                     	;# 
  2101  021A                     	;# 
  2102  021B                     	;# 
  2103  021C                     	;# 
  2104  021D                     	;# 
  2105  021E                     	;# 
  2106  021F                     	;# 
  2107  0291                     	;# 
  2108  0291                     	;# 
  2109  0292                     	;# 
  2110  0293                     	;# 
  2111  0294                     	;# 
  2112  0295                     	;# 
  2113  0295                     	;# 
  2114  0296                     	;# 
  2115  0298                     	;# 
  2116  0298                     	;# 
  2117  0299                     	;# 
  2118  029A                     	;# 
  2119  029B                     	;# 
  2120  029C                     	;# 
  2121  029D                     	;# 
  2122  029E                     	;# 
  2123  0311                     	;# 
  2124  0311                     	;# 
  2125  0312                     	;# 
  2126  0313                     	;# 
  2127  0318                     	;# 
  2128  0318                     	;# 
  2129  0319                     	;# 
  2130  031A                     	;# 
  2131  038C                     	;# 
  2132  038D                     	;# 
  2133  038E                     	;# 
  2134  0391                     	;# 
  2135  0392                     	;# 
  2136  0393                     	;# 
  2137  0394                     	;# 
  2138  0395                     	;# 
  2139  0396                     	;# 
  2140  039A                     	;# 
  2141  039C                     	;# 
  2142  039D                     	;# 
  2143  039E                     	;# 
  2144  039F                     	;# 
  2145  0415                     	;# 
  2146  0416                     	;# 
  2147  0417                     	;# 
  2148  041C                     	;# 
  2149  041D                     	;# 
  2150  041E                     	;# 
  2151  0FE4                     	;# 
  2152  0FE5                     	;# 
  2153  0FE6                     	;# 
  2154  0FE7                     	;# 
  2155  0FE8                     	;# 
  2156  0FE9                     	;# 
  2157  0FEA                     	;# 
  2158  0FEB                     	;# 
  2159  0FED                     	;# 
  2160  0FEE                     	;# 
  2161  0FEF                     	;# 
  2162  0000                     	;# 
  2163  0001                     	;# 
  2164  0002                     	;# 
  2165  0003                     	;# 
  2166  0004                     	;# 
  2167  0005                     	;# 
  2168  0006                     	;# 
  2169  0007                     	;# 
  2170  0008                     	;# 
  2171  0009                     	;# 
  2172  000A                     	;# 
  2173  000B                     	;# 
  2174  000C                     	;# 
  2175  000D                     	;# 
  2176  000E                     	;# 
  2177  0011                     	;# 
  2178  0012                     	;# 
  2179  0013                     	;# 
  2180  0014                     	;# 
  2181  0015                     	;# 
  2182  0016                     	;# 
  2183  0016                     	;# 
  2184  0017                     	;# 
  2185  0018                     	;# 
  2186  0019                     	;# 
  2187  001A                     	;# 
  2188  001B                     	;# 
  2189  001C                     	;# 
  2190  001E                     	;# 
  2191  001F                     	;# 
  2192  008C                     	;# 
  2193  008D                     	;# 
  2194  008E                     	;# 
  2195  0091                     	;# 
  2196  0092                     	;# 
  2197  0093                     	;# 
  2198  0094                     	;# 
  2199  0095                     	;# 
  2200  0096                     	;# 
  2201  0097                     	;# 
  2202  0098                     	;# 
  2203  0099                     	;# 
  2204  009A                     	;# 
  2205  009B                     	;# 
  2206  009B                     	;# 
  2207  009C                     	;# 
  2208  009D                     	;# 
  2209  009E                     	;# 
  2210  010C                     	;# 
  2211  010D                     	;# 
  2212  010E                     	;# 
  2213  0111                     	;# 
  2214  0112                     	;# 
  2215  0113                     	;# 
  2216  0114                     	;# 
  2217  0115                     	;# 
  2218  0116                     	;# 
  2219  0117                     	;# 
  2220  0118                     	;# 
  2221  0119                     	;# 
  2222  011A                     	;# 
  2223  011B                     	;# 
  2224  011D                     	;# 
  2225  011E                     	;# 
  2226  018C                     	;# 
  2227  018D                     	;# 
  2228  018E                     	;# 
  2229  0191                     	;# 
  2230  0191                     	;# 
  2231  0192                     	;# 
  2232  0193                     	;# 
  2233  0193                     	;# 
  2234  0193                     	;# 
  2235  0194                     	;# 
  2236  0195                     	;# 
  2237  0196                     	;# 
  2238  0199                     	;# 
  2239  019A                     	;# 
  2240  019B                     	;# 
  2241  019B                     	;# 
  2242  019B                     	;# 
  2243  019B                     	;# 
  2244  019C                     	;# 
  2245  019C                     	;# 
  2246  019D                     	;# 
  2247  019E                     	;# 
  2248  019F                     	;# 
  2249  020C                     	;# 
  2250  020D                     	;# 
  2251  020E                     	;# 
  2252  0211                     	;# 
  2253  0211                     	;# 
  2254  0212                     	;# 
  2255  0212                     	;# 
  2256  0213                     	;# 
  2257  0213                     	;# 
  2258  0214                     	;# 
  2259  0214                     	;# 
  2260  0215                     	;# 
  2261  0215                     	;# 
  2262  0215                     	;# 
  2263  0216                     	;# 
  2264  0216                     	;# 
  2265  0217                     	;# 
  2266  0217                     	;# 
  2267  0219                     	;# 
  2268  021A                     	;# 
  2269  021B                     	;# 
  2270  021C                     	;# 
  2271  021D                     	;# 
  2272  021E                     	;# 
  2273  021F                     	;# 
  2274  0291                     	;# 
  2275  0291                     	;# 
  2276  0292                     	;# 
  2277  0293                     	;# 
  2278  0294                     	;# 
  2279  0295                     	;# 
  2280  0295                     	;# 
  2281  0296                     	;# 
  2282  0298                     	;# 
  2283  0298                     	;# 
  2284  0299                     	;# 
  2285  029A                     	;# 
  2286  029B                     	;# 
  2287  029C                     	;# 
  2288  029D                     	;# 
  2289  029E                     	;# 
  2290  0311                     	;# 
  2291  0311                     	;# 
  2292  0312                     	;# 
  2293  0313                     	;# 
  2294  0318                     	;# 
  2295  0318                     	;# 
  2296  0319                     	;# 
  2297  031A                     	;# 
  2298  038C                     	;# 
  2299  038D                     	;# 
  2300  038E                     	;# 
  2301  0391                     	;# 
  2302  0392                     	;# 
  2303  0393                     	;# 
  2304  0394                     	;# 
  2305  0395                     	;# 
  2306  0396                     	;# 
  2307  039A                     	;# 
  2308  039C                     	;# 
  2309  039D                     	;# 
  2310  039E                     	;# 
  2311  039F                     	;# 
  2312  0415                     	;# 
  2313  0416                     	;# 
  2314  0417                     	;# 
  2315  041C                     	;# 
  2316  041D                     	;# 
  2317  041E                     	;# 
  2318  0FE4                     	;# 
  2319  0FE5                     	;# 
  2320  0FE6                     	;# 
  2321  0FE7                     	;# 
  2322  0FE8                     	;# 
  2323  0FE9                     	;# 
  2324  0FEA                     	;# 
  2325  0FEB                     	;# 
  2326  0FED                     	;# 
  2327  0FEE                     	;# 
  2328  0FEF                     	;# 
  2329  0000                     	;# 
  2330  0001                     	;# 
  2331  0002                     	;# 
  2332  0003                     	;# 
  2333  0004                     	;# 
  2334  0005                     	;# 
  2335  0006                     	;# 
  2336  0007                     	;# 
  2337  0008                     	;# 
  2338  0009                     	;# 
  2339  000A                     	;# 
  2340  000B                     	;# 
  2341  000C                     	;# 
  2342  000D                     	;# 
  2343  000E                     	;# 
  2344  0011                     	;# 
  2345  0012                     	;# 
  2346  0013                     	;# 
  2347  0014                     	;# 
  2348  0015                     	;# 
  2349  0016                     	;# 
  2350  0016                     	;# 
  2351  0017                     	;# 
  2352  0018                     	;# 
  2353  0019                     	;# 
  2354  001A                     	;# 
  2355  001B                     	;# 
  2356  001C                     	;# 
  2357  001E                     	;# 
  2358  001F                     	;# 
  2359  008C                     	;# 
  2360  008D                     	;# 
  2361  008E                     	;# 
  2362  0091                     	;# 
  2363  0092                     	;# 
  2364  0093                     	;# 
  2365  0094                     	;# 
  2366  0095                     	;# 
  2367  0096                     	;# 
  2368  0097                     	;# 
  2369  0098                     	;# 
  2370  0099                     	;# 
  2371  009A                     	;# 
  2372  009B                     	;# 
  2373  009B                     	;# 
  2374  009C                     	;# 
  2375  009D                     	;# 
  2376  009E                     	;# 
  2377  010C                     	;# 
  2378  010D                     	;# 
  2379  010E                     	;# 
  2380  0111                     	;# 
  2381  0112                     	;# 
  2382  0113                     	;# 
  2383  0114                     	;# 
  2384  0115                     	;# 
  2385  0116                     	;# 
  2386  0117                     	;# 
  2387  0118                     	;# 
  2388  0119                     	;# 
  2389  011A                     	;# 
  2390  011B                     	;# 
  2391  011D                     	;# 
  2392  011E                     	;# 
  2393  018C                     	;# 
  2394  018D                     	;# 
  2395  018E                     	;# 
  2396  0191                     	;# 
  2397  0191                     	;# 
  2398  0192                     	;# 
  2399  0193                     	;# 
  2400  0193                     	;# 
  2401  0193                     	;# 
  2402  0194                     	;# 
  2403  0195                     	;# 
  2404  0196                     	;# 
  2405  0199                     	;# 
  2406  019A                     	;# 
  2407  019B                     	;# 
  2408  019B                     	;# 
  2409  019B                     	;# 
  2410  019B                     	;# 
  2411  019C                     	;# 
  2412  019C                     	;# 
  2413  019D                     	;# 
  2414  019E                     	;# 
  2415  019F                     	;# 
  2416  020C                     	;# 
  2417  020D                     	;# 
  2418  020E                     	;# 
  2419  0211                     	;# 
  2420  0211                     	;# 
  2421  0212                     	;# 
  2422  0212                     	;# 
  2423  0213                     	;# 
  2424  0213                     	;# 
  2425  0214                     	;# 
  2426  0214                     	;# 
  2427  0215                     	;# 
  2428  0215                     	;# 
  2429  0215                     	;# 
  2430  0216                     	;# 
  2431  0216                     	;# 
  2432  0217                     	;# 
  2433  0217                     	;# 
  2434  0219                     	;# 
  2435  021A                     	;# 
  2436  021B                     	;# 
  2437  021C                     	;# 
  2438  021D                     	;# 
  2439  021E                     	;# 
  2440  021F                     	;# 
  2441  0291                     	;# 
  2442  0291                     	;# 
  2443  0292                     	;# 
  2444  0293                     	;# 
  2445  0294                     	;# 
  2446  0295                     	;# 
  2447  0295                     	;# 
  2448  0296                     	;# 
  2449  0298                     	;# 
  2450  0298                     	;# 
  2451  0299                     	;# 
  2452  029A                     	;# 
  2453  029B                     	;# 
  2454  029C                     	;# 
  2455  029D                     	;# 
  2456  029E                     	;# 
  2457  0311                     	;# 
  2458  0311                     	;# 
  2459  0312                     	;# 
  2460  0313                     	;# 
  2461  0318                     	;# 
  2462  0318                     	;# 
  2463  0319                     	;# 
  2464  031A                     	;# 
  2465  038C                     	;# 
  2466  038D                     	;# 
  2467  038E                     	;# 
  2468  0391                     	;# 
  2469  0392                     	;# 
  2470  0393                     	;# 
  2471  0394                     	;# 
  2472  0395                     	;# 
  2473  0396                     	;# 
  2474  039A                     	;# 
  2475  039C                     	;# 
  2476  039D                     	;# 
  2477  039E                     	;# 
  2478  039F                     	;# 
  2479  0415                     	;# 
  2480  0416                     	;# 
  2481  0417                     	;# 
  2482  041C                     	;# 
  2483  041D                     	;# 
  2484  041E                     	;# 
  2485  0FE4                     	;# 
  2486  0FE5                     	;# 
  2487  0FE6                     	;# 
  2488  0FE7                     	;# 
  2489  0FE8                     	;# 
  2490  0FE9                     	;# 
  2491  0FEA                     	;# 
  2492  0FEB                     	;# 
  2493  0FED                     	;# 
  2494  0FEE                     	;# 
  2495  0FEF                     	;# 
  2496  0000                     	;# 
  2497  0001                     	;# 
  2498  0002                     	;# 
  2499  0003                     	;# 
  2500  0004                     	;# 
  2501  0005                     	;# 
  2502  0006                     	;# 
  2503  0007                     	;# 
  2504  0008                     	;# 
  2505  0009                     	;# 
  2506  000A                     	;# 
  2507  000B                     	;# 
  2508  000C                     	;# 
  2509  000D                     	;# 
  2510  000E                     	;# 
  2511  0011                     	;# 
  2512  0012                     	;# 
  2513  0013                     	;# 
  2514  0014                     	;# 
  2515  0015                     	;# 
  2516  0016                     	;# 
  2517  0016                     	;# 
  2518  0017                     	;# 
  2519  0018                     	;# 
  2520  0019                     	;# 
  2521  001A                     	;# 
  2522  001B                     	;# 
  2523  001C                     	;# 
  2524  001E                     	;# 
  2525  001F                     	;# 
  2526  008C                     	;# 
  2527  008D                     	;# 
  2528  008E                     	;# 
  2529  0091                     	;# 
  2530  0092                     	;# 
  2531  0093                     	;# 
  2532  0094                     	;# 
  2533  0095                     	;# 
  2534  0096                     	;# 
  2535  0097                     	;# 
  2536  0098                     	;# 
  2537  0099                     	;# 
  2538  009A                     	;# 
  2539  009B                     	;# 
  2540  009B                     	;# 
  2541  009C                     	;# 
  2542  009D                     	;# 
  2543  009E                     	;# 
  2544  010C                     	;# 
  2545  010D                     	;# 
  2546  010E                     	;# 
  2547  0111                     	;# 
  2548  0112                     	;# 
  2549  0113                     	;# 
  2550  0114                     	;# 
  2551  0115                     	;# 
  2552  0116                     	;# 
  2553  0117                     	;# 
  2554  0118                     	;# 
  2555  0119                     	;# 
  2556  011A                     	;# 
  2557  011B                     	;# 
  2558  011D                     	;# 
  2559  011E                     	;# 
  2560  018C                     	;# 
  2561  018D                     	;# 
  2562  018E                     	;# 
  2563  0191                     	;# 
  2564  0191                     	;# 
  2565  0192                     	;# 
  2566  0193                     	;# 
  2567  0193                     	;# 
  2568  0193                     	;# 
  2569  0194                     	;# 
  2570  0195                     	;# 
  2571  0196                     	;# 
  2572  0199                     	;# 
  2573  019A                     	;# 
  2574  019B                     	;# 
  2575  019B                     	;# 
  2576  019B                     	;# 
  2577  019B                     	;# 
  2578  019C                     	;# 
  2579  019C                     	;# 
  2580  019D                     	;# 
  2581  019E                     	;# 
  2582  019F                     	;# 
  2583  020C                     	;# 
  2584  020D                     	;# 
  2585  020E                     	;# 
  2586  0211                     	;# 
  2587  0211                     	;# 
  2588  0212                     	;# 
  2589  0212                     	;# 
  2590  0213                     	;# 
  2591  0213                     	;# 
  2592  0214                     	;# 
  2593  0214                     	;# 
  2594  0215                     	;# 
  2595  0215                     	;# 
  2596  0215                     	;# 
  2597  0216                     	;# 
  2598  0216                     	;# 
  2599  0217                     	;# 
  2600  0217                     	;# 
  2601  0219                     	;# 
  2602  021A                     	;# 
  2603  021B                     	;# 
  2604  021C                     	;# 
  2605  021D                     	;# 
  2606  021E                     	;# 
  2607  021F                     	;# 
  2608  0291                     	;# 
  2609  0291                     	;# 
  2610  0292                     	;# 
  2611  0293                     	;# 
  2612  0294                     	;# 
  2613  0295                     	;# 
  2614  0295                     	;# 
  2615  0296                     	;# 
  2616  0298                     	;# 
  2617  0298                     	;# 
  2618  0299                     	;# 
  2619  029A                     	;# 
  2620  029B                     	;# 
  2621  029C                     	;# 
  2622  029D                     	;# 
  2623  029E                     	;# 
  2624  0311                     	;# 
  2625  0311                     	;# 
  2626  0312                     	;# 
  2627  0313                     	;# 
  2628  0318                     	;# 
  2629  0318                     	;# 
  2630  0319                     	;# 
  2631  031A                     	;# 
  2632  038C                     	;# 
  2633  038D                     	;# 
  2634  038E                     	;# 
  2635  0391                     	;# 
  2636  0392                     	;# 
  2637  0393                     	;# 
  2638  0394                     	;# 
  2639  0395                     	;# 
  2640  0396                     	;# 
  2641  039A                     	;# 
  2642  039C                     	;# 
  2643  039D                     	;# 
  2644  039E                     	;# 
  2645  039F                     	;# 
  2646  0415                     	;# 
  2647  0416                     	;# 
  2648  0417                     	;# 
  2649  041C                     	;# 
  2650  041D                     	;# 
  2651  041E                     	;# 
  2652  0FE4                     	;# 
  2653  0FE5                     	;# 
  2654  0FE6                     	;# 
  2655  0FE7                     	;# 
  2656  0FE8                     	;# 
  2657  0FE9                     	;# 
  2658  0FEA                     	;# 
  2659  0FEB                     	;# 
  2660  0FED                     	;# 
  2661  0FEE                     	;# 
  2662  0FEF                     	;# 
  2663  0000                     	;# 
  2664  0001                     	;# 
  2665  0002                     	;# 
  2666  0003                     	;# 
  2667  0004                     	;# 
  2668  0005                     	;# 
  2669  0006                     	;# 
  2670  0007                     	;# 
  2671  0008                     	;# 
  2672  0009                     	;# 
  2673  000A                     	;# 
  2674  000B                     	;# 
  2675  000C                     	;# 
  2676  000D                     	;# 
  2677  000E                     	;# 
  2678  0011                     	;# 
  2679  0012                     	;# 
  2680  0013                     	;# 
  2681  0014                     	;# 
  2682  0015                     	;# 
  2683  0016                     	;# 
  2684  0016                     	;# 
  2685  0017                     	;# 
  2686  0018                     	;# 
  2687  0019                     	;# 
  2688  001A                     	;# 
  2689  001B                     	;# 
  2690  001C                     	;# 
  2691  001E                     	;# 
  2692  001F                     	;# 
  2693  008C                     	;# 
  2694  008D                     	;# 
  2695  008E                     	;# 
  2696  0091                     	;# 
  2697  0092                     	;# 
  2698  0093                     	;# 
  2699  0094                     	;# 
  2700  0095                     	;# 
  2701  0096                     	;# 
  2702  0097                     	;# 
  2703  0098                     	;# 
  2704  0099                     	;# 
  2705  009A                     	;# 
  2706  009B                     	;# 
  2707  009B                     	;# 
  2708  009C                     	;# 
  2709  009D                     	;# 
  2710  009E                     	;# 
  2711  010C                     	;# 
  2712  010D                     	;# 
  2713  010E                     	;# 
  2714  0111                     	;# 
  2715  0112                     	;# 
  2716  0113                     	;# 
  2717  0114                     	;# 
  2718  0115                     	;# 
  2719  0116                     	;# 
  2720  0117                     	;# 
  2721  0118                     	;# 
  2722  0119                     	;# 
  2723  011A                     	;# 
  2724  011B                     	;# 
  2725  011D                     	;# 
  2726  011E                     	;# 
  2727  018C                     	;# 
  2728  018D                     	;# 
  2729  018E                     	;# 
  2730  0191                     	;# 
  2731  0191                     	;# 
  2732  0192                     	;# 
  2733  0193                     	;# 
  2734  0193                     	;# 
  2735  0193                     	;# 
  2736  0194                     	;# 
  2737  0195                     	;# 
  2738  0196                     	;# 
  2739  0199                     	;# 
  2740  019A                     	;# 
  2741  019B                     	;# 
  2742  019B                     	;# 
  2743  019B                     	;# 
  2744  019B                     	;# 
  2745  019C                     	;# 
  2746  019C                     	;# 
  2747  019D                     	;# 
  2748  019E                     	;# 
  2749  019F                     	;# 
  2750  020C                     	;# 
  2751  020D                     	;# 
  2752  020E                     	;# 
  2753  0211                     	;# 
  2754  0211                     	;# 
  2755  0212                     	;# 
  2756  0212                     	;# 
  2757  0213                     	;# 
  2758  0213                     	;# 
  2759  0214                     	;# 
  2760  0214                     	;# 
  2761  0215                     	;# 
  2762  0215                     	;# 
  2763  0215                     	;# 
  2764  0216                     	;# 
  2765  0216                     	;# 
  2766  0217                     	;# 
  2767  0217                     	;# 
  2768  0219                     	;# 
  2769  021A                     	;# 
  2770  021B                     	;# 
  2771  021C                     	;# 
  2772  021D                     	;# 
  2773  021E                     	;# 
  2774  021F                     	;# 
  2775  0291                     	;# 
  2776  0291                     	;# 
  2777  0292                     	;# 
  2778  0293                     	;# 
  2779  0294                     	;# 
  2780  0295                     	;# 
  2781  0295                     	;# 
  2782  0296                     	;# 
  2783  0298                     	;# 
  2784  0298                     	;# 
  2785  0299                     	;# 
  2786  029A                     	;# 
  2787  029B                     	;# 
  2788  029C                     	;# 
  2789  029D                     	;# 
  2790  029E                     	;# 
  2791  0311                     	;# 
  2792  0311                     	;# 
  2793  0312                     	;# 
  2794  0313                     	;# 
  2795  0318                     	;# 
  2796  0318                     	;# 
  2797  0319                     	;# 
  2798  031A                     	;# 
  2799  038C                     	;# 
  2800  038D                     	;# 
  2801  038E                     	;# 
  2802  0391                     	;# 
  2803  0392                     	;# 
  2804  0393                     	;# 
  2805  0394                     	;# 
  2806  0395                     	;# 
  2807  0396                     	;# 
  2808  039A                     	;# 
  2809  039C                     	;# 
  2810  039D                     	;# 
  2811  039E                     	;# 
  2812  039F                     	;# 
  2813  0415                     	;# 
  2814  0416                     	;# 
  2815  0417                     	;# 
  2816  041C                     	;# 
  2817  041D                     	;# 
  2818  041E                     	;# 
  2819  0FE4                     	;# 
  2820  0FE5                     	;# 
  2821  0FE6                     	;# 
  2822  0FE7                     	;# 
  2823  0FE8                     	;# 
  2824  0FE9                     	;# 
  2825  0FEA                     	;# 
  2826  0FEB                     	;# 
  2827  0FED                     	;# 
  2828  0FEE                     	;# 
  2829  0FEF                     	;# 
  2830  0000                     	;# 
  2831  0001                     	;# 
  2832  0002                     	;# 
  2833  0003                     	;# 
  2834  0004                     	;# 
  2835  0005                     	;# 
  2836  0006                     	;# 
  2837  0007                     	;# 
  2838  0008                     	;# 
  2839  0009                     	;# 
  2840  000A                     	;# 
  2841  000B                     	;# 
  2842  000C                     	;# 
  2843  000D                     	;# 
  2844  000E                     	;# 
  2845  0011                     	;# 
  2846  0012                     	;# 
  2847  0013                     	;# 
  2848  0014                     	;# 
  2849  0015                     	;# 
  2850  0016                     	;# 
  2851  0016                     	;# 
  2852  0017                     	;# 
  2853  0018                     	;# 
  2854  0019                     	;# 
  2855  001A                     	;# 
  2856  001B                     	;# 
  2857  001C                     	;# 
  2858  001E                     	;# 
  2859  001F                     	;# 
  2860  008C                     	;# 
  2861  008D                     	;# 
  2862  008E                     	;# 
  2863  0091                     	;# 
  2864  0092                     	;# 
  2865  0093                     	;# 
  2866  0094                     	;# 
  2867  0095                     	;# 
  2868  0096                     	;# 
  2869  0097                     	;# 
  2870  0098                     	;# 
  2871  0099                     	;# 
  2872  009A                     	;# 
  2873  009B                     	;# 
  2874  009B                     	;# 
  2875  009C                     	;# 
  2876  009D                     	;# 
  2877  009E                     	;# 
  2878  010C                     	;# 
  2879  010D                     	;# 
  2880  010E                     	;# 
  2881  0111                     	;# 
  2882  0112                     	;# 
  2883  0113                     	;# 
  2884  0114                     	;# 
  2885  0115                     	;# 
  2886  0116                     	;# 
  2887  0117                     	;# 
  2888  0118                     	;# 
  2889  0119                     	;# 
  2890  011A                     	;# 
  2891  011B                     	;# 
  2892  011D                     	;# 
  2893  011E                     	;# 
  2894  018C                     	;# 
  2895  018D                     	;# 
  2896  018E                     	;# 
  2897  0191                     	;# 
  2898  0191                     	;# 
  2899  0192                     	;# 
  2900  0193                     	;# 
  2901  0193                     	;# 
  2902  0193                     	;# 
  2903  0194                     	;# 
  2904  0195                     	;# 
  2905  0196                     	;# 
  2906  0199                     	;# 
  2907  019A                     	;# 
  2908  019B                     	;# 
  2909  019B                     	;# 
  2910  019B                     	;# 
  2911  019B                     	;# 
  2912  019C                     	;# 
  2913  019C                     	;# 
  2914  019D                     	;# 
  2915  019E                     	;# 
  2916  019F                     	;# 
  2917  020C                     	;# 
  2918  020D                     	;# 
  2919  020E                     	;# 
  2920  0211                     	;# 
  2921  0211                     	;# 
  2922  0212                     	;# 
  2923  0212                     	;# 
  2924  0213                     	;# 
  2925  0213                     	;# 
  2926  0214                     	;# 
  2927  0214                     	;# 
  2928  0215                     	;# 
  2929  0215                     	;# 
  2930  0215                     	;# 
  2931  0216                     	;# 
  2932  0216                     	;# 
  2933  0217                     	;# 
  2934  0217                     	;# 
  2935  0219                     	;# 
  2936  021A                     	;# 
  2937  021B                     	;# 
  2938  021C                     	;# 
  2939  021D                     	;# 
  2940  021E                     	;# 
  2941  021F                     	;# 
  2942  0291                     	;# 
  2943  0291                     	;# 
  2944  0292                     	;# 
  2945  0293                     	;# 
  2946  0294                     	;# 
  2947  0295                     	;# 
  2948  0295                     	;# 
  2949  0296                     	;# 
  2950  0298                     	;# 
  2951  0298                     	;# 
  2952  0299                     	;# 
  2953  029A                     	;# 
  2954  029B                     	;# 
  2955  029C                     	;# 
  2956  029D                     	;# 
  2957  029E                     	;# 
  2958  0311                     	;# 
  2959  0311                     	;# 
  2960  0312                     	;# 
  2961  0313                     	;# 
  2962  0318                     	;# 
  2963  0318                     	;# 
  2964  0319                     	;# 
  2965  031A                     	;# 
  2966  038C                     	;# 
  2967  038D                     	;# 
  2968  038E                     	;# 
  2969  0391                     	;# 
  2970  0392                     	;# 
  2971  0393                     	;# 
  2972  0394                     	;# 
  2973  0395                     	;# 
  2974  0396                     	;# 
  2975  039A                     	;# 
  2976  039C                     	;# 
  2977  039D                     	;# 
  2978  039E                     	;# 
  2979  039F                     	;# 
  2980  0415                     	;# 
  2981  0416                     	;# 
  2982  0417                     	;# 
  2983  041C                     	;# 
  2984  041D                     	;# 
  2985  041E                     	;# 
  2986  0FE4                     	;# 
  2987  0FE5                     	;# 
  2988  0FE6                     	;# 
  2989  0FE7                     	;# 
  2990  0FE8                     	;# 
  2991  0FE9                     	;# 
  2992  0FEA                     	;# 
  2993  0FEB                     	;# 
  2994  0FED                     	;# 
  2995  0FEE                     	;# 
  2996  0FEF                     	;# 
  2997  0000                     	;# 
  2998  0001                     	;# 
  2999  0002                     	;# 
  3000  0003                     	;# 
  3001  0004                     	;# 
  3002  0005                     	;# 
  3003  0006                     	;# 
  3004  0007                     	;# 
  3005  0008                     	;# 
  3006  0009                     	;# 
  3007  000A                     	;# 
  3008  000B                     	;# 
  3009  000C                     	;# 
  3010  000D                     	;# 
  3011  000E                     	;# 
  3012  0011                     	;# 
  3013  0012                     	;# 
  3014  0013                     	;# 
  3015  0014                     	;# 
  3016  0015                     	;# 
  3017  0016                     	;# 
  3018  0016                     	;# 
  3019  0017                     	;# 
  3020  0018                     	;# 
  3021  0019                     	;# 
  3022  001A                     	;# 
  3023  001B                     	;# 
  3024  001C                     	;# 
  3025  001E                     	;# 
  3026  001F                     	;# 
  3027  008C                     	;# 
  3028  008D                     	;# 
  3029  008E                     	;# 
  3030  0091                     	;# 
  3031  0092                     	;# 
  3032  0093                     	;# 
  3033  0094                     	;# 
  3034  0095                     	;# 
  3035  0096                     	;# 
  3036  0097                     	;# 
  3037  0098                     	;# 
  3038  0099                     	;# 
  3039  009A                     	;# 
  3040  009B                     	;# 
  3041  009B                     	;# 
  3042  009C                     	;# 
  3043  009D                     	;# 
  3044  009E                     	;# 
  3045  010C                     	;# 
  3046  010D                     	;# 
  3047  010E                     	;# 
  3048  0111                     	;# 
  3049  0112                     	;# 
  3050  0113                     	;# 
  3051  0114                     	;# 
  3052  0115                     	;# 
  3053  0116                     	;# 
  3054  0117                     	;# 
  3055  0118                     	;# 
  3056  0119                     	;# 
  3057  011A                     	;# 
  3058  011B                     	;# 
  3059  011D                     	;# 
  3060  011E                     	;# 
  3061  018C                     	;# 
  3062  018D                     	;# 
  3063  018E                     	;# 
  3064  0191                     	;# 
  3065  0191                     	;# 
  3066  0192                     	;# 
  3067  0193                     	;# 
  3068  0193                     	;# 
  3069  0193                     	;# 
  3070  0194                     	;# 
  3071  0195                     	;# 
  3072  0196                     	;# 
  3073  0199                     	;# 
  3074  019A                     	;# 
  3075  019B                     	;# 
  3076  019B                     	;# 
  3077  019B                     	;# 
  3078  019B                     	;# 
  3079  019C                     	;# 
  3080  019C                     	;# 
  3081  019D                     	;# 
  3082  019E                     	;# 
  3083  019F                     	;# 
  3084  020C                     	;# 
  3085  020D                     	;# 
  3086  020E                     	;# 
  3087  0211                     	;# 
  3088  0211                     	;# 
  3089  0212                     	;# 
  3090  0212                     	;# 
  3091  0213                     	;# 
  3092  0213                     	;# 
  3093  0214                     	;# 
  3094  0214                     	;# 
  3095  0215                     	;# 
  3096  0215                     	;# 
  3097  0215                     	;# 
  3098  0216                     	;# 
  3099  0216                     	;# 
  3100  0217                     	;# 
  3101  0217                     	;# 
  3102  0219                     	;# 
  3103  021A                     	;# 
  3104  021B                     	;# 
  3105  021C                     	;# 
  3106  021D                     	;# 
  3107  021E                     	;# 
  3108  021F                     	;# 
  3109  0291                     	;# 
  3110  0291                     	;# 
  3111  0292                     	;# 
  3112  0293                     	;# 
  3113  0294                     	;# 
  3114  0295                     	;# 
  3115  0295                     	;# 
  3116  0296                     	;# 
  3117  0298                     	;# 
  3118  0298                     	;# 
  3119  0299                     	;# 
  3120  029A                     	;# 
  3121  029B                     	;# 
  3122  029C                     	;# 
  3123  029D                     	;# 
  3124  029E                     	;# 
  3125  0311                     	;# 
  3126  0311                     	;# 
  3127  0312                     	;# 
  3128  0313                     	;# 
  3129  0318                     	;# 
  3130  0318                     	;# 
  3131  0319                     	;# 
  3132  031A                     	;# 
  3133  038C                     	;# 
  3134  038D                     	;# 
  3135  038E                     	;# 
  3136  0391                     	;# 
  3137  0392                     	;# 
  3138  0393                     	;# 
  3139  0394                     	;# 
  3140  0395                     	;# 
  3141  0396                     	;# 
  3142  039A                     	;# 
  3143  039C                     	;# 
  3144  039D                     	;# 
  3145  039E                     	;# 
  3146  039F                     	;# 
  3147  0415                     	;# 
  3148  0416                     	;# 
  3149  0417                     	;# 
  3150  041C                     	;# 
  3151  041D                     	;# 
  3152  041E                     	;# 
  3153  0FE4                     	;# 
  3154  0FE5                     	;# 
  3155  0FE6                     	;# 
  3156  0FE7                     	;# 
  3157  0FE8                     	;# 
  3158  0FE9                     	;# 
  3159  0FEA                     	;# 
  3160  0FEB                     	;# 
  3161  0FED                     	;# 
  3162  0FEE                     	;# 
  3163  0FEF                     	;# 
  3164  0000                     	;# 
  3165  0001                     	;# 
  3166  0002                     	;# 
  3167  0003                     	;# 
  3168  0004                     	;# 
  3169  0005                     	;# 
  3170  0006                     	;# 
  3171  0007                     	;# 
  3172  0008                     	;# 
  3173  0009                     	;# 
  3174  000A                     	;# 
  3175  000B                     	;# 
  3176  000C                     	;# 
  3177  000D                     	;# 
  3178  000E                     	;# 
  3179  0011                     	;# 
  3180  0012                     	;# 
  3181  0013                     	;# 
  3182  0014                     	;# 
  3183  0015                     	;# 
  3184  0016                     	;# 
  3185  0016                     	;# 
  3186  0017                     	;# 
  3187  0018                     	;# 
  3188  0019                     	;# 
  3189  001A                     	;# 
  3190  001B                     	;# 
  3191  001C                     	;# 
  3192  001E                     	;# 
  3193  001F                     	;# 
  3194  008C                     	;# 
  3195  008D                     	;# 
  3196  008E                     	;# 
  3197  0091                     	;# 
  3198  0092                     	;# 
  3199  0093                     	;# 
  3200  0094                     	;# 
  3201  0095                     	;# 
  3202  0096                     	;# 
  3203  0097                     	;# 
  3204  0098                     	;# 
  3205  0099                     	;# 
  3206  009A                     	;# 
  3207  009B                     	;# 
  3208  009B                     	;# 
  3209  009C                     	;# 
  3210  009D                     	;# 
  3211  009E                     	;# 
  3212  010C                     	;# 
  3213  010D                     	;# 
  3214  010E                     	;# 
  3215  0111                     	;# 
  3216  0112                     	;# 
  3217  0113                     	;# 
  3218  0114                     	;# 
  3219  0115                     	;# 
  3220  0116                     	;# 
  3221  0117                     	;# 
  3222  0118                     	;# 
  3223  0119                     	;# 
  3224  011A                     	;# 
  3225  011B                     	;# 
  3226  011D                     	;# 
  3227  011E                     	;# 
  3228  018C                     	;# 
  3229  018D                     	;# 
  3230  018E                     	;# 
  3231  0191                     	;# 
  3232  0191                     	;# 
  3233  0192                     	;# 
  3234  0193                     	;# 
  3235  0193                     	;# 
  3236  0193                     	;# 
  3237  0194                     	;# 
  3238  0195                     	;# 
  3239  0196                     	;# 
  3240  0199                     	;# 
  3241  019A                     	;# 
  3242  019B                     	;# 
  3243  019B                     	;# 
  3244  019B                     	;# 
  3245  019B                     	;# 
  3246  019C                     	;# 
  3247  019C                     	;# 
  3248  019D                     	;# 
  3249  019E                     	;# 
  3250  019F                     	;# 
  3251  020C                     	;# 
  3252  020D                     	;# 
  3253  020E                     	;# 
  3254  0211                     	;# 
  3255  0211                     	;# 
  3256  0212                     	;# 
  3257  0212                     	;# 
  3258  0213                     	;# 
  3259  0213                     	;# 
  3260  0214                     	;# 
  3261  0214                     	;# 
  3262  0215                     	;# 
  3263  0215                     	;# 
  3264  0215                     	;# 
  3265  0216                     	;# 
  3266  0216                     	;# 
  3267  0217                     	;# 
  3268  0217                     	;# 
  3269  0219                     	;# 
  3270  021A                     	;# 
  3271  021B                     	;# 
  3272  021C                     	;# 
  3273  021D                     	;# 
  3274  021E                     	;# 
  3275  021F                     	;# 
  3276  0291                     	;# 
  3277  0291                     	;# 
  3278  0292                     	;# 
  3279  0293                     	;# 
  3280  0294                     	;# 
  3281  0295                     	;# 
  3282  0295                     	;# 
  3283  0296                     	;# 
  3284  0298                     	;# 
  3285  0298                     	;# 
  3286  0299                     	;# 
  3287  029A                     	;# 
  3288  029B                     	;# 
  3289  029C                     	;# 
  3290  029D                     	;# 
  3291  029E                     	;# 
  3292  0311                     	;# 
  3293  0311                     	;# 
  3294  0312                     	;# 
  3295  0313                     	;# 
  3296  0318                     	;# 
  3297  0318                     	;# 
  3298  0319                     	;# 
  3299  031A                     	;# 
  3300  038C                     	;# 
  3301  038D                     	;# 
  3302  038E                     	;# 
  3303  0391                     	;# 
  3304  0392                     	;# 
  3305  0393                     	;# 
  3306  0394                     	;# 
  3307  0395                     	;# 
  3308  0396                     	;# 
  3309  039A                     	;# 
  3310  039C                     	;# 
  3311  039D                     	;# 
  3312  039E                     	;# 
  3313  039F                     	;# 
  3314  0415                     	;# 
  3315  0416                     	;# 
  3316  0417                     	;# 
  3317  041C                     	;# 
  3318  041D                     	;# 
  3319  041E                     	;# 
  3320  0FE4                     	;# 
  3321  0FE5                     	;# 
  3322  0FE6                     	;# 
  3323  0FE7                     	;# 
  3324  0FE8                     	;# 
  3325  0FE9                     	;# 
  3326  0FEA                     	;# 
  3327  0FEB                     	;# 
  3328  0FED                     	;# 
  3329  0FEE                     	;# 
  3330  0FEF                     	;# 
  3331  0000                     	;# 
  3332  0001                     	;# 
  3333  0002                     	;# 
  3334  0003                     	;# 
  3335  0004                     	;# 
  3336  0005                     	;# 
  3337  0006                     	;# 
  3338  0007                     	;# 
  3339  0008                     	;# 
  3340  0009                     	;# 
  3341  000A                     	;# 
  3342  000B                     	;# 
  3343  000C                     	;# 
  3344  000D                     	;# 
  3345  000E                     	;# 
  3346  0011                     	;# 
  3347  0012                     	;# 
  3348  0013                     	;# 
  3349  0014                     	;# 
  3350  0015                     	;# 
  3351  0016                     	;# 
  3352  0016                     	;# 
  3353  0017                     	;# 
  3354  0018                     	;# 
  3355  0019                     	;# 
  3356  001A                     	;# 
  3357  001B                     	;# 
  3358  001C                     	;# 
  3359  001E                     	;# 
  3360  001F                     	;# 
  3361  008C                     	;# 
  3362  008D                     	;# 
  3363  008E                     	;# 
  3364  0091                     	;# 
  3365  0092                     	;# 
  3366  0093                     	;# 
  3367  0094                     	;# 
  3368  0095                     	;# 
  3369  0096                     	;# 
  3370  0097                     	;# 
  3371  0098                     	;# 
  3372  0099                     	;# 
  3373  009A                     	;# 
  3374  009B                     	;# 
  3375  009B                     	;# 
  3376  009C                     	;# 
  3377  009D                     	;# 
  3378  009E                     	;# 
  3379  010C                     	;# 
  3380  010D                     	;# 
  3381  010E                     	;# 
  3382  0111                     	;# 
  3383  0112                     	;# 
  3384  0113                     	;# 
  3385  0114                     	;# 
  3386  0115                     	;# 
  3387  0116                     	;# 
  3388  0117                     	;# 
  3389  0118                     	;# 
  3390  0119                     	;# 
  3391  011A                     	;# 
  3392  011B                     	;# 
  3393  011D                     	;# 
  3394  011E                     	;# 
  3395  018C                     	;# 
  3396  018D                     	;# 
  3397  018E                     	;# 
  3398  0191                     	;# 
  3399  0191                     	;# 
  3400  0192                     	;# 
  3401  0193                     	;# 
  3402  0193                     	;# 
  3403  0193                     	;# 
  3404  0194                     	;# 
  3405  0195                     	;# 
  3406  0196                     	;# 
  3407  0199                     	;# 
  3408  019A                     	;# 
  3409  019B                     	;# 
  3410  019B                     	;# 
  3411  019B                     	;# 
  3412  019B                     	;# 
  3413  019C                     	;# 
  3414  019C                     	;# 
  3415  019D                     	;# 
  3416  019E                     	;# 
  3417  019F                     	;# 
  3418  020C                     	;# 
  3419  020D                     	;# 
  3420  020E                     	;# 
  3421  0211                     	;# 
  3422  0211                     	;# 
  3423  0212                     	;# 
  3424  0212                     	;# 
  3425  0213                     	;# 
  3426  0213                     	;# 
  3427  0214                     	;# 
  3428  0214                     	;# 
  3429  0215                     	;# 
  3430  0215                     	;# 
  3431  0215                     	;# 
  3432  0216                     	;# 
  3433  0216                     	;# 
  3434  0217                     	;# 
  3435  0217                     	;# 
  3436  0219                     	;# 
  3437  021A                     	;# 
  3438  021B                     	;# 
  3439  021C                     	;# 
  3440  021D                     	;# 
  3441  021E                     	;# 
  3442  021F                     	;# 
  3443  0291                     	;# 
  3444  0291                     	;# 
  3445  0292                     	;# 
  3446  0293                     	;# 
  3447  0294                     	;# 
  3448  0295                     	;# 
  3449  0295                     	;# 
  3450  0296                     	;# 
  3451  0298                     	;# 
  3452  0298                     	;# 
  3453  0299                     	;# 
  3454  029A                     	;# 
  3455  029B                     	;# 
  3456  029C                     	;# 
  3457  029D                     	;# 
  3458  029E                     	;# 
  3459  0311                     	;# 
  3460  0311                     	;# 
  3461  0312                     	;# 
  3462  0313                     	;# 
  3463  0318                     	;# 
  3464  0318                     	;# 
  3465  0319                     	;# 
  3466  031A                     	;# 
  3467  038C                     	;# 
  3468  038D                     	;# 
  3469  038E                     	;# 
  3470  0391                     	;# 
  3471  0392                     	;# 
  3472  0393                     	;# 
  3473  0394                     	;# 
  3474  0395                     	;# 
  3475  0396                     	;# 
  3476  039A                     	;# 
  3477  039C                     	;# 
  3478  039D                     	;# 
  3479  039E                     	;# 
  3480  039F                     	;# 
  3481  0415                     	;# 
  3482  0416                     	;# 
  3483  0417                     	;# 
  3484  041C                     	;# 
  3485  041D                     	;# 
  3486  041E                     	;# 
  3487  0FE4                     	;# 
  3488  0FE5                     	;# 
  3489  0FE6                     	;# 
  3490  0FE7                     	;# 
  3491  0FE8                     	;# 
  3492  0FE9                     	;# 
  3493  0FEA                     	;# 
  3494  0FEB                     	;# 
  3495  0FED                     	;# 
  3496  0FEE                     	;# 
  3497  0FEF                     	;# 
  3498  0000                     	;# 
  3499  0001                     	;# 
  3500  0002                     	;# 
  3501  0003                     	;# 
  3502  0004                     	;# 
  3503  0005                     	;# 
  3504  0006                     	;# 
  3505  0007                     	;# 
  3506  0008                     	;# 
  3507  0009                     	;# 
  3508  000A                     	;# 
  3509  000B                     	;# 
  3510  000C                     	;# 
  3511  000D                     	;# 
  3512  000E                     	;# 
  3513  0011                     	;# 
  3514  0012                     	;# 
  3515  0013                     	;# 
  3516  0014                     	;# 
  3517  0015                     	;# 
  3518  0016                     	;# 
  3519  0016                     	;# 
  3520  0017                     	;# 
  3521  0018                     	;# 
  3522  0019                     	;# 
  3523  001A                     	;# 
  3524  001B                     	;# 
  3525  001C                     	;# 
  3526  001E                     	;# 
  3527  001F                     	;# 
  3528  008C                     	;# 
  3529  008D                     	;# 
  3530  008E                     	;# 
  3531  0091                     	;# 
  3532  0092                     	;# 
  3533  0093                     	;# 
  3534  0094                     	;# 
  3535  0095                     	;# 
  3536  0096                     	;# 
  3537  0097                     	;# 
  3538  0098                     	;# 
  3539  0099                     	;# 
  3540  009A                     	;# 
  3541  009B                     	;# 
  3542  009B                     	;# 
  3543  009C                     	;# 
  3544  009D                     	;# 
  3545  009E                     	;# 
  3546  010C                     	;# 
  3547  010D                     	;# 
  3548  010E                     	;# 
  3549  0111                     	;# 
  3550  0112                     	;# 
  3551  0113                     	;# 
  3552  0114                     	;# 
  3553  0115                     	;# 
  3554  0116                     	;# 
  3555  0117                     	;# 
  3556  0118                     	;# 
  3557  0119                     	;# 
  3558  011A                     	;# 
  3559  011B                     	;# 
  3560  011D                     	;# 
  3561  011E                     	;# 
  3562  018C                     	;# 
  3563  018D                     	;# 
  3564  018E                     	;# 
  3565  0191                     	;# 
  3566  0191                     	;# 
  3567  0192                     	;# 
  3568  0193                     	;# 
  3569  0193                     	;# 
  3570  0193                     	;# 
  3571  0194                     	;# 
  3572  0195                     	;# 
  3573  0196                     	;# 
  3574  0199                     	;# 
  3575  019A                     	;# 
  3576  019B                     	;# 
  3577  019B                     	;# 
  3578  019B                     	;# 
  3579  019B                     	;# 
  3580  019C                     	;# 
  3581  019C                     	;# 
  3582  019D                     	;# 
  3583  019E                     	;# 
  3584  019F                     	;# 
  3585  020C                     	;# 
  3586  020D                     	;# 
  3587  020E                     	;# 
  3588  0211                     	;# 
  3589  0211                     	;# 
  3590  0212                     	;# 
  3591  0212                     	;# 
  3592  0213                     	;# 
  3593  0213                     	;# 
  3594  0214                     	;# 
  3595  0214                     	;# 
  3596  0215                     	;# 
  3597  0215                     	;# 
  3598  0215                     	;# 
  3599  0216                     	;# 
  3600  0216                     	;# 
  3601  0217                     	;# 
  3602  0217                     	;# 
  3603  0219                     	;# 
  3604  021A                     	;# 
  3605  021B                     	;# 
  3606  021C                     	;# 
  3607  021D                     	;# 
  3608  021E                     	;# 
  3609  021F                     	;# 
  3610  0291                     	;# 
  3611  0291                     	;# 
  3612  0292                     	;# 
  3613  0293                     	;# 
  3614  0294                     	;# 
  3615  0295                     	;# 
  3616  0295                     	;# 
  3617  0296                     	;# 
  3618  0298                     	;# 
  3619  0298                     	;# 
  3620  0299                     	;# 
  3621  029A                     	;# 
  3622  029B                     	;# 
  3623  029C                     	;# 
  3624  029D                     	;# 
  3625  029E                     	;# 
  3626  0311                     	;# 
  3627  0311                     	;# 
  3628  0312                     	;# 
  3629  0313                     	;# 
  3630  0318                     	;# 
  3631  0318                     	;# 
  3632  0319                     	;# 
  3633  031A                     	;# 
  3634  038C                     	;# 
  3635  038D                     	;# 
  3636  038E                     	;# 
  3637  0391                     	;# 
  3638  0392                     	;# 
  3639  0393                     	;# 
  3640  0394                     	;# 
  3641  0395                     	;# 
  3642  0396                     	;# 
  3643  039A                     	;# 
  3644  039C                     	;# 
  3645  039D                     	;# 
  3646  039E                     	;# 
  3647  039F                     	;# 
  3648  0415                     	;# 
  3649  0416                     	;# 
  3650  0417                     	;# 
  3651  041C                     	;# 
  3652  041D                     	;# 
  3653  041E                     	;# 
  3654  0FE4                     	;# 
  3655  0FE5                     	;# 
  3656  0FE6                     	;# 
  3657  0FE7                     	;# 
  3658  0FE8                     	;# 
  3659  0FE9                     	;# 
  3660  0FEA                     	;# 
  3661  0FEB                     	;# 
  3662  0FED                     	;# 
  3663  0FEE                     	;# 
  3664  0FEF                     	;# 
  3665  0000                     	;# 
  3666  0001                     	;# 
  3667  0002                     	;# 
  3668  0003                     	;# 
  3669  0004                     	;# 
  3670  0005                     	;# 
  3671  0006                     	;# 
  3672  0007                     	;# 
  3673  0008                     	;# 
  3674  0009                     	;# 
  3675  000A                     	;# 
  3676  000B                     	;# 
  3677  000C                     	;# 
  3678  000D                     	;# 
  3679  000E                     	;# 
  3680  0011                     	;# 
  3681  0012                     	;# 
  3682  0013                     	;# 
  3683  0014                     	;# 
  3684  0015                     	;# 
  3685  0016                     	;# 
  3686  0016                     	;# 
  3687  0017                     	;# 
  3688  0018                     	;# 
  3689  0019                     	;# 
  3690  001A                     	;# 
  3691  001B                     	;# 
  3692  001C                     	;# 
  3693  001E                     	;# 
  3694  001F                     	;# 
  3695  008C                     	;# 
  3696  008D                     	;# 
  3697  008E                     	;# 
  3698  0091                     	;# 
  3699  0092                     	;# 
  3700  0093                     	;# 
  3701  0094                     	;# 
  3702  0095                     	;# 
  3703  0096                     	;# 
  3704  0097                     	;# 
  3705  0098                     	;# 
  3706  0099                     	;# 
  3707  009A                     	;# 
  3708  009B                     	;# 
  3709  009B                     	;# 
  3710  009C                     	;# 
  3711  009D                     	;# 
  3712  009E                     	;# 
  3713  010C                     	;# 
  3714  010D                     	;# 
  3715  010E                     	;# 
  3716  0111                     	;# 
  3717  0112                     	;# 
  3718  0113                     	;# 
  3719  0114                     	;# 
  3720  0115                     	;# 
  3721  0116                     	;# 
  3722  0117                     	;# 
  3723  0118                     	;# 
  3724  0119                     	;# 
  3725  011A                     	;# 
  3726  011B                     	;# 
  3727  011D                     	;# 
  3728  011E                     	;# 
  3729  018C                     	;# 
  3730  018D                     	;# 
  3731  018E                     	;# 
  3732  0191                     	;# 
  3733  0191                     	;# 
  3734  0192                     	;# 
  3735  0193                     	;# 
  3736  0193                     	;# 
  3737  0193                     	;# 
  3738  0194                     	;# 
  3739  0195                     	;# 
  3740  0196                     	;# 
  3741  0199                     	;# 
  3742  019A                     	;# 
  3743  019B                     	;# 
  3744  019B                     	;# 
  3745  019B                     	;# 
  3746  019B                     	;# 
  3747  019C                     	;# 
  3748  019C                     	;# 
  3749  019D                     	;# 
  3750  019E                     	;# 
  3751  019F                     	;# 
  3752  020C                     	;# 
  3753  020D                     	;# 
  3754  020E                     	;# 
  3755  0211                     	;# 
  3756  0211                     	;# 
  3757  0212                     	;# 
  3758  0212                     	;# 
  3759  0213                     	;# 
  3760  0213                     	;# 
  3761  0214                     	;# 
  3762  0214                     	;# 
  3763  0215                     	;# 
  3764  0215                     	;# 
  3765  0215                     	;# 
  3766  0216                     	;# 
  3767  0216                     	;# 
  3768  0217                     	;# 
  3769  0217                     	;# 
  3770  0219                     	;# 
  3771  021A                     	;# 
  3772  021B                     	;# 
  3773  021C                     	;# 
  3774  021D                     	;# 
  3775  021E                     	;# 
  3776  021F                     	;# 
  3777  0291                     	;# 
  3778  0291                     	;# 
  3779  0292                     	;# 
  3780  0293                     	;# 
  3781  0294                     	;# 
  3782  0295                     	;# 
  3783  0295                     	;# 
  3784  0296                     	;# 
  3785  0298                     	;# 
  3786  0298                     	;# 
  3787  0299                     	;# 
  3788  029A                     	;# 
  3789  029B                     	;# 
  3790  029C                     	;# 
  3791  029D                     	;# 
  3792  029E                     	;# 
  3793  0311                     	;# 
  3794  0311                     	;# 
  3795  0312                     	;# 
  3796  0313                     	;# 
  3797  0318                     	;# 
  3798  0318                     	;# 
  3799  0319                     	;# 
  3800  031A                     	;# 
  3801  038C                     	;# 
  3802  038D                     	;# 
  3803  038E                     	;# 
  3804  0391                     	;# 
  3805  0392                     	;# 
  3806  0393                     	;# 
  3807  0394                     	;# 
  3808  0395                     	;# 
  3809  0396                     	;# 
  3810  039A                     	;# 
  3811  039C                     	;# 
  3812  039D                     	;# 
  3813  039E                     	;# 
  3814  039F                     	;# 
  3815  0415                     	;# 
  3816  0416                     	;# 
  3817  0417                     	;# 
  3818  041C                     	;# 
  3819  041D                     	;# 
  3820  041E                     	;# 
  3821  0FE4                     	;# 
  3822  0FE5                     	;# 
  3823  0FE6                     	;# 
  3824  0FE7                     	;# 
  3825  0FE8                     	;# 
  3826  0FE9                     	;# 
  3827  0FEA                     	;# 
  3828  0FEB                     	;# 
  3829  0FED                     	;# 
  3830  0FEE                     	;# 
  3831  0FEF                     	;# 
  3832  0000                     	;# 
  3833  0001                     	;# 
  3834  0002                     	;# 
  3835  0003                     	;# 
  3836  0004                     	;# 
  3837  0005                     	;# 
  3838  0006                     	;# 
  3839  0007                     	;# 
  3840  0008                     	;# 
  3841  0009                     	;# 
  3842  000A                     	;# 
  3843  000B                     	;# 
  3844  000C                     	;# 
  3845  000D                     	;# 
  3846  000E                     	;# 
  3847  0011                     	;# 
  3848  0012                     	;# 
  3849  0013                     	;# 
  3850  0014                     	;# 
  3851  0015                     	;# 
  3852  0016                     	;# 
  3853  0016                     	;# 
  3854  0017                     	;# 
  3855  0018                     	;# 
  3856  0019                     	;# 
  3857  001A                     	;# 
  3858  001B                     	;# 
  3859  001C                     	;# 
  3860  001E                     	;# 
  3861  001F                     	;# 
  3862  008C                     	;# 
  3863  008D                     	;# 
  3864  008E                     	;# 
  3865  0091                     	;# 
  3866  0092                     	;# 
  3867  0093                     	;# 
  3868  0094                     	;# 
  3869  0095                     	;# 
  3870  0096                     	;# 
  3871  0097                     	;# 
  3872  0098                     	;# 
  3873  0099                     	;# 
  3874  009A                     	;# 
  3875  009B                     	;# 
  3876  009B                     	;# 
  3877  009C                     	;# 
  3878  009D                     	;# 
  3879  009E                     	;# 
  3880  010C                     	;# 
  3881  010D                     	;# 
  3882  010E                     	;# 
  3883  0111                     	;# 
  3884  0112                     	;# 
  3885  0113                     	;# 
  3886  0114                     	;# 
  3887  0115                     	;# 
  3888  0116                     	;# 
  3889  0117                     	;# 
  3890  0118                     	;# 
  3891  0119                     	;# 
  3892  011A                     	;# 
  3893  011B                     	;# 
  3894  011D                     	;# 
  3895  011E                     	;# 
  3896  018C                     	;# 
  3897  018D                     	;# 
  3898  018E                     	;# 
  3899  0191                     	;# 
  3900  0191                     	;# 
  3901  0192                     	;# 
  3902  0193                     	;# 
  3903  0193                     	;# 
  3904  0193                     	;# 
  3905  0194                     	;# 
  3906  0195                     	;# 
  3907  0196                     	;# 
  3908  0199                     	;# 
  3909  019A                     	;# 
  3910  019B                     	;# 
  3911  019B                     	;# 
  3912  019B                     	;# 
  3913  019B                     	;# 
  3914  019C                     	;# 
  3915  019C                     	;# 
  3916  019D                     	;# 
  3917  019E                     	;# 
  3918  019F                     	;# 
  3919  020C                     	;# 
  3920  020D                     	;# 
  3921  020E                     	;# 
  3922  0211                     	;# 
  3923  0211                     	;# 
  3924  0212                     	;# 
  3925  0212                     	;# 
  3926  0213                     	;# 
  3927  0213                     	;# 
  3928  0214                     	;# 
  3929  0214                     	;# 
  3930  0215                     	;# 
  3931  0215                     	;# 
  3932  0215                     	;# 
  3933  0216                     	;# 
  3934  0216                     	;# 
  3935  0217                     	;# 
  3936  0217                     	;# 
  3937  0219                     	;# 
  3938  021A                     	;# 
  3939  021B                     	;# 
  3940  021C                     	;# 
  3941  021D                     	;# 
  3942  021E                     	;# 
  3943  021F                     	;# 
  3944  0291                     	;# 
  3945  0291                     	;# 
  3946  0292                     	;# 
  3947  0293                     	;# 
  3948  0294                     	;# 
  3949  0295                     	;# 
  3950  0295                     	;# 
  3951  0296                     	;# 
  3952  0298                     	;# 
  3953  0298                     	;# 
  3954  0299                     	;# 
  3955  029A                     	;# 
  3956  029B                     	;# 
  3957  029C                     	;# 
  3958  029D                     	;# 
  3959  029E                     	;# 
  3960  0311                     	;# 
  3961  0311                     	;# 
  3962  0312                     	;# 
  3963  0313                     	;# 
  3964  0318                     	;# 
  3965  0318                     	;# 
  3966  0319                     	;# 
  3967  031A                     	;# 
  3968  038C                     	;# 
  3969  038D                     	;# 
  3970  038E                     	;# 
  3971  0391                     	;# 
  3972  0392                     	;# 
  3973  0393                     	;# 
  3974  0394                     	;# 
  3975  0395                     	;# 
  3976  0396                     	;# 
  3977  039A                     	;# 
  3978  039C                     	;# 
  3979  039D                     	;# 
  3980  039E                     	;# 
  3981  039F                     	;# 
  3982  0415                     	;# 
  3983  0416                     	;# 
  3984  0417                     	;# 
  3985  041C                     	;# 
  3986  041D                     	;# 
  3987  041E                     	;# 
  3988  0FE4                     	;# 
  3989  0FE5                     	;# 
  3990  0FE6                     	;# 
  3991  0FE7                     	;# 
  3992  0FE8                     	;# 
  3993  0FE9                     	;# 
  3994  0FEA                     	;# 
  3995  0FEB                     	;# 
  3996  0FED                     	;# 
  3997  0FEE                     	;# 
  3998  0FEF                     	;# 
  3999                           
  4000                           	psect	idataBANK1
  4001  1297                     __pidataBANK1:	
  4002                           
  4003                           ;initializer for _sensorHealth
  4004  1297  3401               	retlw	1
  4005  1298  3401               	retlw	1
  4006                           
  4007                           ;initializer for _addressSize
  4008  1299  3405               	retlw	5
  4009                           
  4010                           	psect	idataBANK2
  4011  12AA                     __pidataBANK2:	
  4012                           
  4013                           ;initializer for _sensorUpdatePeriod
  4014  12AA  34C0               	retlw	192
  4015  12AB  3427               	retlw	39
  4016  12AC  3409               	retlw	9
  4017  12AD  3400               	retlw	0
  4018                           
  4019                           	psect	stringtext1
  4020  1800                     __pstringtext1:	
  4021  1800                     atan@coeff_a:	
  4022  1800  343C               	retlw	60
  4023  1801  3404               	retlw	4
  4024  1802  3442               	retlw	66
  4025  1803  349F               	retlw	159
  4026  1804  346A               	retlw	106
  4027  1805  3442               	retlw	66
  4028  1806  3490               	retlw	144
  4029  1807  3401               	retlw	1
  4030  1808  3442               	retlw	66
  4031  1809  344D               	retlw	77
  4032  180A  34BB               	retlw	187
  4033  180B  3440               	retlw	64
  4034  180C  34EC               	retlw	236
  4035  180D  3447               	retlw	71
  4036  180E  343E               	retlw	62
  4037  180F  348E               	retlw	142
  4038  1810  341F               	retlw	31
  4039  1811  34BB               	retlw	187
  4040  1812                     __end_ofatan@coeff_a:	
  4041                           
  4042                           	psect	stringtext2
  4043  1812                     __pstringtext2:	
  4044  1812                     atan@coeff_b:	
  4045  1812  343C               	retlw	60
  4046  1813  3404               	retlw	4
  4047  1814  3442               	retlw	66
  4048  1815  345A               	retlw	90
  4049  1816  348B               	retlw	139
  4050  1817  3442               	retlw	66
  4051  1818  3404               	retlw	4
  4052  1819  3444               	retlw	68
  4053  181A  3442               	retlw	66
  4054  181B  349C               	retlw	156
  4055  181C  344F               	retlw	79
  4056  181D  3441               	retlw	65
  4057  181E  3400               	retlw	0
  4058  181F  3480               	retlw	128
  4059  1820  343F               	retlw	63
  4060  1821                     __end_ofatan@coeff_b:	
  4061                           
  4062                           	psect	stringtext3
  4063  1821                     __pstringtext3:	
  4064  1821                     Wireless_init@TADDR:	
  4065  1821  3431               	retlw	49
  4066  1822  3430               	retlw	48
  4067  1823  3430               	retlw	48
  4068  1824  3430               	retlw	48
  4069  1825  3431               	retlw	49
  4070  1826                     __end_ofWireless_init@TADDR:	
  4071                           
  4072                           	psect	nvCOMMON
  4073  007C                     __pnvCOMMON:	
  4074  007C                     _timer1ReloadVal:	
  4075  007C                     	ds	2
  4076                           
  4077                           	psect	nvBANK2
  4078  0166                     __pnvBANK2:	
  4079  0166                     _TMR1_InterruptHandler:	
  4080  0166                     	ds	2
  4081  0168                     _IOCAF2_InterruptHandler:	
  4082  0168                     	ds	2
  4083  000E                     _PORTCbits	set	14
  4084  0019                     _T1GCONbits	set	25
  4085  0018                     _T1CONbits	set	24
  4086  0018                     _T1CON	set	24
  4087  0016                     _TMR1L	set	22
  4088  0017                     _TMR1H	set	23
  4089  0019                     _T1GCON	set	25
  4090  0014                     _PIR4bits	set	20
  4091  001C                     _T2CONbits	set	28
  4092  001C                     _T2CON	set	28
  4093  0011                     _PIR1bits	set	17
  4094  001A                     _TMR2	set	26
  4095  001B                     _PR2	set	27
  4096  000B                     _INTCONbits	set	11
  4097  009D                     _ADCON0bits	set	157
  4098  009C                     _ADRESH	set	156
  4099  009B                     _ADRESL	set	155
  4100  009E                     _ADCON1	set	158
  4101  009D                     _ADCON0	set	157
  4102  0091                     _PIE1bits	set	145
  4103  0094                     _PIE4bits	set	148
  4104  0095                     _OPTION_REGbits	set	149
  4105  008E                     _TRISC	set	142
  4106  008D                     _TRISB	set	141
  4107  008C                     _TRISA	set	140
  4108  0097                     _WDTCON	set	151
  4109  0098                     _OSCTUNE	set	152
  4110  0099                     _OSCCON	set	153
  4111  010E                     _LATCbits	set	270
  4112  0117                     _FVRCONbits	set	279
  4113  0117                     _FVRCON	set	279
  4114  011D                     _APFCON0	set	285
  4115  011E                     _APFCON1	set	286
  4116  010E                     _LATC	set	270
  4117  010D                     _LATB	set	269
  4118  010C                     _LATA	set	268
  4119  0116                     _BORCON	set	278
  4120  0196                     _EECON2	set	406
  4121  0193                     _EEDATL	set	403
  4122  0194                     _EEDATH	set	404
  4123  0195                     _EECON1bits	set	405
  4124  0192                     _EEADRH	set	402
  4125  0191                     _EEADRL	set	401
  4126  018C                     _ANSELA	set	396
  4127  018D                     _ANSELB	set	397
  4128  018E                     _ANSELC	set	398
  4129  020E                     _WPUCbits	set	526
  4130  0214                     _SSP1STATbits	set	532
  4131  0211                     _SSP1BUF	set	529
  4132  0215                     _SSP1CON1bits	set	533
  4133  0212                     _SSP1ADD	set	530
  4134  0215                     _SSP1CON1	set	533
  4135  0214                     _SSP1STAT	set	532
  4136  0219                     _SSP2BUF	set	537
  4137  021E                     _SSP2CON2bits	set	542
  4138  021D                     _SSP2CON1bits	set	541
  4139  021A                     _SSP2ADD	set	538
  4140  021F                     _SSP2CON3	set	543
  4141  021D                     _SSP2CON1	set	541
  4142  021C                     _SSP2STAT	set	540
  4143  020E                     _WPUC	set	526
  4144  020C                     _WPUA	set	524
  4145  020D                     _WPUB	set	525
  4146  0391                     _IOCAPbits	set	913
  4147  0392                     _IOCANbits	set	914
  4148  0393                     _IOCAFbits	set	915
  4149                           
  4150                           ; #config settings
  4151  0000                     
  4152                           	psect	cinit
  4153  0039                     start_initialization:	
  4154  0039                     __initialization:	
  4155                           
  4156                           ; Initialize objects allocated to BANK1
  4157  0039  0021               	movlb	1	; select bank1
  4158  003A  3192  2297  3180   	fcall	__pidataBANK1	;fetch initializer
  4159  003D  00E3               	movwf	__pdataBANK1& (0+127)
  4160  003E  3192  2298  3180   	fcall	__pidataBANK1+1	;fetch initializer
  4161  0041  00E4               	movwf	(__pdataBANK1+1)& (0+127)
  4162  0042  3192  2299  3180   	fcall	__pidataBANK1+2	;fetch initializer
  4163  0045  00E5               	movwf	(__pdataBANK1+2)& (0+127)
  4164                           
  4165                           ; Initialize objects allocated to BANK2
  4166  0046  0022               	movlb	2	; select bank2
  4167  0047  3192  22AA  3180   	fcall	__pidataBANK2	;fetch initializer
  4168  004A  00EA               	movwf	__pdataBANK2& (0+127)
  4169  004B  3192  22AB  3180   	fcall	__pidataBANK2+1	;fetch initializer
  4170  004E  00EB               	movwf	(__pdataBANK2+1)& (0+127)
  4171  004F  3192  22AC  3180   	fcall	__pidataBANK2+2	;fetch initializer
  4172  0052  00EC               	movwf	(__pdataBANK2+2)& (0+127)
  4173  0053  3192  22AD  3180   	fcall	__pidataBANK2+3	;fetch initializer
  4174  0056  00ED               	movwf	(__pdataBANK2+3)& (0+127)
  4175                           
  4176                           ; Clear objects allocated to COMMON
  4177  0057  01F7               	clrf	__pbssCOMMON& (0+127)
  4178  0058  01F8               	clrf	(__pbssCOMMON+1)& (0+127)
  4179  0059  01F9               	clrf	(__pbssCOMMON+2)& (0+127)
  4180  005A  01FA               	clrf	(__pbssCOMMON+3)& (0+127)
  4181  005B  01FB               	clrf	(__pbssCOMMON+4)& (0+127)
  4182                           
  4183                           ; Clear objects allocated to BANK1
  4184  005C  30CA               	movlw	low __pbssBANK1
  4185  005D  0084               	movwf	4
  4186  005E  3000               	movlw	high __pbssBANK1
  4187  005F  0085               	movwf	5
  4188  0060  3019               	movlw	25
  4189  0061  3192  22CF  3180   	fcall	clear_ram0
  4190                           
  4191                           ; Clear objects allocated to BANK2
  4192  0064  3020               	movlw	low __pbssBANK2
  4193  0065  0084               	movwf	4
  4194  0066  3001               	movlw	high __pbssBANK2
  4195  0067  0085               	movwf	5
  4196  0068  3046               	movlw	70
  4197  0069  3192  22CF  3180   	fcall	clear_ram0
  4198                           
  4199                           ; Clear objects allocated to BANK3
  4200  006C  30A0               	movlw	low __pbssBANK3
  4201  006D  0084               	movwf	4
  4202  006E  3001               	movlw	high __pbssBANK3
  4203  006F  0085               	movwf	5
  4204  0070  3030               	movlw	48
  4205  0071  3192  22CF         	fcall	clear_ram0
  4206  0073                     end_of_initialization:	
  4207                           ;End of C runtime variable initialization code
  4208                           
  4209  0073                     __end_of__initialization:	
  4210  0073  107E               	bcf	int$flags,0	;clear compiler interrupt flag (level 1)
  4211  0074  0020               	movlb	0
  4212  0075  3183  2B45         	ljmp	_main	;jump to C main() function
  4213                           
  4214                           	psect	bssCOMMON
  4215  0077                     __pbssCOMMON:	
  4216  0077                     _p_i2c2_current:	
  4217  0077                     	ds	1
  4218  0078                     _p_i2c2_trb_current:	
  4219  0078                     	ds	1
  4220  0079                     _i2c2_state:	
  4221  0079                     	ds	1
  4222  007A                     I2C2_ISR@i2c_address:	
  4223  007A                     	ds	2
  4224                           
  4225                           	psect	bssBANK1
  4226  00CA                     __pbssBANK1:	
  4227  00CA                     _i2c2_object:	
  4228  00CA                     	ds	5
  4229  00CF                     _globalCounter:	
  4230  00CF                     	ds	4
  4231  00D3                     _dig_T1:	
  4232  00D3                     	ds	2
  4233  00D5                     I2C2_ISR@pi2c_buf_ptr:	
  4234  00D5                     	ds	2
  4235  00D7                     DOOR_run@previousDoorState:	
  4236  00D7                     	ds	1
  4237  00D8                     _initialised:	
  4238  00D8                     	ds	1
  4239  00D9                     _doorState:	
  4240  00D9                     	ds	1
  4241  00DA                     Wireless_determineTransmitPower@numOfSuccessfulTransmits:	
  4242  00DA                     	ds	1
  4243  00DB                     Wireless_determineTransmitPower@numOfTransmits:	
  4244  00DB                     	ds	1
  4245  00DC                     _currentTransmitPower:	
  4246  00DC                     	ds	1
  4247  00DD                     _doorClosedAngle:	
  4248  00DD                     	ds	1
  4249  00DE                     _doorOpenAngle:	
  4250  00DE                     	ds	1
  4251  00DF                     _HMC5883Lmode:	
  4252  00DF                     	ds	1
  4253  00E0                     I2C2_ISR@i2c_10bit_address_restart:	
  4254  00E0                     	ds	1
  4255  00E1                     I2C2_ISR@i2c_bytes_left:	
  4256  00E1                     	ds	1
  4257  00E2                     _i2c2_trb_count:	
  4258  00E2                     	ds	1
  4259                           
  4260                           	psect	dataBANK1
  4261  00E3                     __pdataBANK1:	
  4262  00E3                     _sensorHealth:	
  4263  00E3                     	ds	2
  4264  00E5                     _addressSize:	
  4265  00E5                     	ds	1
  4266                           
  4267                           	psect	bssBANK2
  4268  0120                     __pbssBANK2:	
  4269  0120                     _curr:	
  4270  0120                     	ds	4
  4271  0124                     _adc_t:	
  4272  0124                     	ds	4
  4273  0128                     _pressure:	
  4274  0128                     	ds	3
  4275  012B                     _cTemp:	
  4276  012B                     	ds	3
  4277  012E                     _t_fine:	
  4278  012E                     	ds	3
  4279  0131                     _var2:	
  4280  0131                     	ds	3
  4281  0134                     _var1:	
  4282  0134                     	ds	3
  4283  0137                     HMC5883L_TestConnection@F3572:	
  4284  0137                     	ds	3
  4285  013A                     _errno:	
  4286  013A                     	ds	2
  4287  013C                     _timeOut:	
  4288  013C                     	ds	2
  4289  013E                     _referenceDirection:	
  4290  013E                     	ds	2
  4291  0140                     _dig_P9:	
  4292  0140                     	ds	2
  4293  0142                     _dig_P8:	
  4294  0142                     	ds	2
  4295  0144                     _dig_P7:	
  4296  0144                     	ds	2
  4297  0146                     _dig_P6:	
  4298  0146                     	ds	2
  4299  0148                     _dig_P5:	
  4300  0148                     	ds	2
  4301  014A                     _dig_P4:	
  4302  014A                     	ds	2
  4303  014C                     _dig_P3:	
  4304  014C                     	ds	2
  4305  014E                     _dig_P2:	
  4306  014E                     	ds	2
  4307  0150                     _dig_P1:	
  4308  0150                     	ds	2
  4309  0152                     _dig_T4:	
  4310  0152                     	ds	2
  4311  0154                     _dig_T3:	
  4312  0154                     	ds	2
  4313  0156                     _dig_T2:	
  4314  0156                     	ds	2
  4315  0158                     I2C2_MasterRead@trBlock:	
  4316  0158                     	ds	5
  4317  015D                     I2C2_MasterWrite@trBlock:	
  4318  015D                     	ds	5
  4319  0162                     _i2c2_tr_queue:	
  4320  0162                     	ds	4
  4321                           
  4322                           	psect	dataBANK2
  4323  016A                     __pdataBANK2:	
  4324  016A                     _sensorUpdatePeriod:	
  4325  016A                     	ds	4
  4326                           
  4327                           	psect	bssBANK3
  4328  01A0                     __pbssBANK3:	
  4329  01A0                     DOOR_run@doorStateDuration:	
  4330  01A0                     	ds	4
  4331  01A4                     _adc_p:	
  4332  01A4                     	ds	4
  4333  01A8                     _b1:	
  4334  01A8                     	ds	24
  4335  01C0                     _data:	
  4336  01C0                     	ds	8
  4337  01C8                     _heading:	
  4338  01C8                     	ds	8
  4339                           
  4340                           	psect	clrtext
  4341  12CF                     clear_ram0:	
  4342                           ;	Called with FSR0 containing the base address, and
  4343                           ;	WREG with the size to clear
  4344                           
  4345  12CF  0064               	clrwdt	;clear the watchdog before getting into this loop
  4346  12D0                     clrloop0:	
  4347  12D0  0180               	clrf	0	;clear RAM location pointed to by FSR
  4348  12D1  3101               	addfsr 0,1
  4349  12D2  0B89               	decfsz	9,f	;Have we reached the end of clearing yet?
  4350  12D3  2AD0               	goto	clrloop0	;have we reached the end yet?
  4351  12D4  3400               	retlw	0	;all done for this memory range, return
  4352                           
  4353                           	psect	cstackBANK3
  4354  01D0                     __pcstackBANK3:	
  4355  01D0                     main@prevDoorStatus:	
  4356                           
  4357                           ; 1 bytes @ 0x0
  4358  01D0                     	ds	1
  4359  01D1                     main@doorClosedUpdateCounter:	
  4360                           
  4361                           ; 4 bytes @ 0x1
  4362  01D1                     	ds	4
  4363  01D5                     main@dur:	
  4364                           
  4365                           ; 2 bytes @ 0x5
  4366  01D5                     	ds	2
  4367  01D7                     main@doorOpenTime:	
  4368                           
  4369                           ; 4 bytes @ 0x7
  4370  01D7                     	ds	4
  4371  01DB                     main@doorStatus:	
  4372                           
  4373                           ; 1 bytes @ 0xB
  4374  01DB                     	ds	1
  4375                           
  4376                           	psect	cstackBANK1
  4377  00A0                     __pcstackBANK1:	
  4378  00A0                     ___fttol@sign1:	
  4379                           
  4380                           ; 1 bytes @ 0x0
  4381  00A0                     	ds	1
  4382  00A1                     ___fttol@lval:	
  4383                           
  4384                           ; 4 bytes @ 0x1
  4385  00A1                     	ds	4
  4386  00A5                     ___fttol@exp1:	
  4387                           
  4388                           ; 1 bytes @ 0x5
  4389  00A5                     	ds	1
  4390  00A6                     ?_BMP_readTemperature:	
  4391                           
  4392                           ; 3 bytes @ 0x6
  4393  00A6                     	ds	3
  4394  00A9                     ??_BMP_readTemperature:	
  4395                           
  4396                           ; 1 bytes @ 0x9
  4397  00A9                     	ds	12
  4398  00B5                     _BMP_readTemperature$2648:	
  4399                           
  4400                           ; 3 bytes @ 0x15
  4401  00B5                     	ds	3
  4402  00B8                     BMP_readTemperature@status:	
  4403                           
  4404                           ; 1 bytes @ 0x18
  4405  00B8                     	ds	1
  4406  00B9                     BMP_readTemperature@tmp:	
  4407                           
  4408                           ; 1 bytes @ 0x19
  4409  00B9                     	ds	1
  4410  00BA                     ?_Wireless_packageData:	
  4411  00BA                     Wireless_packageData@openTime:	
  4412                           ; 1 bytes @ 0x1A
  4413                           
  4414                           
  4415                           ; 1 bytes @ 0x1A
  4416  00BA                     	ds	1
  4417  00BB                     Wireless_packageData@tempC:	
  4418                           
  4419                           ; 3 bytes @ 0x1B
  4420  00BB                     	ds	3
  4421  00BE                     Wireless_packageData@data:	
  4422                           
  4423                           ; 6 bytes @ 0x1E
  4424  00BE                     	ds	6
  4425  00C4                     Wireless_packageData@var:	
  4426                           
  4427                           ; 1 bytes @ 0x24
  4428  00C4                     	ds	1
  4429  00C5                     Wireless_packageData@status:	
  4430                           
  4431                           ; 1 bytes @ 0x25
  4432  00C5                     	ds	1
  4433  00C6                     Wireless_packageData@t1:	
  4434                           
  4435                           ; 2 bytes @ 0x26
  4436  00C6                     	ds	2
  4437  00C8                     ??_main:	
  4438                           
  4439                           ; 1 bytes @ 0x28
  4440  00C8                     	ds	2
  4441                           
  4442                           	psect	cstackCOMMON
  4443  0070                     __pcstackCOMMON:	
  4444  0070                     ?_PIN_MANAGER_Initialize:	
  4445  0070                     ?_OSCILLATOR_Initialize:	
  4446                           ; 1 bytes @ 0x0
  4447                           
  4448  0070                     ?_WDT_Initialize:	
  4449                           ; 1 bytes @ 0x0
  4450                           
  4451  0070                     ?_SPI1_Initialize:	
  4452                           ; 1 bytes @ 0x0
  4453                           
  4454  0070                     ?_I2C2_Initialize:	
  4455                           ; 1 bytes @ 0x0
  4456                           
  4457  0070                     ?_FVR_Initialize:	
  4458                           ; 1 bytes @ 0x0
  4459                           
  4460  0070                     ?_ADC_Initialize:	
  4461                           ; 1 bytes @ 0x0
  4462                           
  4463  0070                     ?_TMR2_Initialize:	
  4464                           ; 1 bytes @ 0x0
  4465                           
  4466  0070                     ?_TMR1_Initialize:	
  4467                           ; 1 bytes @ 0x0
  4468                           
  4469  0070                     ?_IOCAF2_DefaultInterruptHandler:	
  4470                           ; 1 bytes @ 0x0
  4471                           
  4472  0070                     ??_IOCAF2_DefaultInterruptHandler:	
  4473                           ; 1 bytes @ 0x0
  4474                           
  4475  0070                     ?_IOCAF2_ISR:	
  4476                           ; 1 bytes @ 0x0
  4477                           
  4478  0070                     ??_IOCAF2_ISR:	
  4479                           ; 1 bytes @ 0x0
  4480                           
  4481  0070                     ?_I2C2_BusCollisionISR:	
  4482                           ; 1 bytes @ 0x0
  4483                           
  4484  0070                     ??_I2C2_BusCollisionISR:	
  4485                           ; 1 bytes @ 0x0
  4486                           
  4487  0070                     ?_I2C2_ISR:	
  4488                           ; 1 bytes @ 0x0
  4489                           
  4490  0070                     ?_TMR1_ISR:	
  4491                           ; 1 bytes @ 0x0
  4492                           
  4493  0070                     ??_TMR1_ISR:	
  4494                           ; 1 bytes @ 0x0
  4495                           
  4496  0070                     ?_TMR1_DefaultInterruptHandler:	
  4497                           ; 1 bytes @ 0x0
  4498                           
  4499  0070                     ??_TMR1_DefaultInterruptHandler:	
  4500                           ; 1 bytes @ 0x0
  4501                           
  4502  0070                     ?_TMR1_CallBack:	
  4503                           ; 1 bytes @ 0x0
  4504                           
  4505  0070                     ??_TMR1_CallBack:	
  4506                           ; 1 bytes @ 0x0
  4507                           
  4508  0070                     ?_Timeout_increment:	
  4509                           ; 1 bytes @ 0x0
  4510                           
  4511  0070                     ??_Timeout_increment:	
  4512                           ; 1 bytes @ 0x0
  4513                           
  4514  0070                     ?_I2C2_Stop:	
  4515                           ; 1 bytes @ 0x0
  4516                           
  4517  0070                     ??_I2C2_Stop:	
  4518                           ; 1 bytes @ 0x0
  4519                           
  4520  0070                     ?_I2C2_FunctionComplete:	
  4521                           ; 1 bytes @ 0x0
  4522                           
  4523  0070                     ??_I2C2_FunctionComplete:	
  4524                           ; 1 bytes @ 0x0
  4525                           
  4526  0070                     ?_Sensor_peripheralWake:	
  4527                           ; 1 bytes @ 0x0
  4528                           
  4529  0070                     ?_Sensor_peripheralSleep:	
  4530                           ; 1 bytes @ 0x0
  4531                           
  4532  0070                     ?_Wireless_init:	
  4533                           ; 1 bytes @ 0x0
  4534                           
  4535  0070                     ?_BMP_init:	
  4536                           ; 1 bytes @ 0x0
  4537                           
  4538  0070                     ?_DOOR_init:	
  4539                           ; 1 bytes @ 0x0
  4540                           
  4541  0070                     ?_Wireless_wake:	
  4542                           ; 1 bytes @ 0x0
  4543                           
  4544  0070                     ?_Wireless_determineTransmitPower:	
  4545                           ; 1 bytes @ 0x0
  4546                           
  4547  0070                     ?_Wireless_sleep:	
  4548                           ; 1 bytes @ 0x0
  4549                           
  4550  0070                     ?_Timeout_updateCurrentTime:	
  4551                           ; 1 bytes @ 0x0
  4552                           
  4553  0070                     ?_DOOR_run:	
  4554                           ; 1 bytes @ 0x0
  4555                           
  4556  0070                     ?_Diag_setTempSensorHealth:	
  4557                           ; 1 bytes @ 0x0
  4558                           
  4559  0070                     ?_Diag_getTempSensorHealth:	
  4560                           ; 1 bytes @ 0x0
  4561                           
  4562  0070                     ?_Wireless_changeTransmitPower:	
  4563                           ; 1 bytes @ 0x0
  4564                           
  4565  0070                     ?_Wireless_isDataTransmitSuccessful:	
  4566                           ; 1 bytes @ 0x0
  4567                           
  4568  0070                     ?_Diag_getSensorHealth:	
  4569                           ; 1 bytes @ 0x0
  4570                           
  4571  0070                     ?_Wireless_checkDataReceived:	
  4572                           ; 1 bytes @ 0x0
  4573                           
  4574  0070                     ?_DOOR_resetPos:	
  4575                           ; 1 bytes @ 0x0
  4576                           
  4577  0070                     ?_SYSTEM_Initialize:	
  4578                           ; 1 bytes @ 0x0
  4579                           
  4580  0070                     ?_PIN_MANAGER_IOC:	
  4581                           ; 1 bytes @ 0x0
  4582                           
  4583  0070                     ??_PIN_MANAGER_IOC:	
  4584                           ; 1 bytes @ 0x0
  4585                           
  4586  0070                     ?_INTERRUPT_InterruptManager:	
  4587                           ; 1 bytes @ 0x0
  4588                           
  4589  0070                     ?_ADC_SelectChannel:	
  4590                           ; 1 bytes @ 0x0
  4591                           
  4592  0070                     ?_ADC_StartConversion:	
  4593                           ; 1 bytes @ 0x0
  4594                           
  4595  0070                     ?_ADC_IsConversionDone:	
  4596                           ; 1 bytes @ 0x0
  4597                           
  4598  0070                     ?_FVR_IsOutputReady:	
  4599                           ; 1 bytes @ 0x0
  4600                           
  4601  0070                     ?_SPI1_Exchange8bit:	
  4602                           ; 1 bytes @ 0x0
  4603                           
  4604  0070                     ?_main:	
  4605                           ; 1 bytes @ 0x0
  4606                           
  4607  0070                     ?_SPI_WriteRead:	
  4608                           ; 1 bytes @ 0x0
  4609                           
  4610  0070                     ?_RF_ReadRegister:	
  4611                           ; 1 bytes @ 0x0
  4612                           
  4613  0070                     ?_RF_WriteRead:	
  4614                           ; 1 bytes @ 0x0
  4615                           
  4616  0070                     ?_RF_Write:	
  4617                           ; 1 bytes @ 0x0
  4618                           
  4619  0070                     ?_RF_GetStatus:	
  4620                           ; 1 bytes @ 0x0
  4621                           
  4622  0070                     ?_RF_ResetStatusIRQ:	
  4623                           ; 1 bytes @ 0x0
  4624                           
  4625  0070                     ?_RF_Init:	
  4626                           ; 1 bytes @ 0x0
  4627                           
  4628  0070                     ?_RF_DataIsReady:	
  4629                           ; 1 bytes @ 0x0
  4630                           
  4631  0070                     ?_Timeout_hasExpired:	
  4632                           ; 1 bytes @ 0x0
  4633                           
  4634                           
  4635                           ; 1 bytes @ 0x0
  4636  0070                     	ds	2
  4637  0072                     I2C2_Stop@completion_code:	
  4638                           
  4639                           ; 1 bytes @ 0x2
  4640  0072                     	ds	1
  4641  0073                     ??_I2C2_ISR:	
  4642                           
  4643                           ; 1 bytes @ 0x3
  4644  0073                     	ds	4
  4645                           
  4646                           	psect	cstackBANK0
  4647  0020                     __pcstackBANK0:	
  4648  0020                     ??_INTERRUPT_InterruptManager:	
  4649                           
  4650                           ; 1 bytes @ 0x0
  4651  0020                     	ds	1
  4652  0021                     ??_OSCILLATOR_Initialize:	
  4653  0021                     ??_WDT_Initialize:	
  4654                           ; 1 bytes @ 0x1
  4655                           
  4656  0021                     ??_SPI1_Initialize:	
  4657                           ; 1 bytes @ 0x1
  4658                           
  4659  0021                     ??_I2C2_Initialize:	
  4660                           ; 1 bytes @ 0x1
  4661                           
  4662  0021                     ??_FVR_Initialize:	
  4663                           ; 1 bytes @ 0x1
  4664                           
  4665  0021                     ??_ADC_Initialize:	
  4666                           ; 1 bytes @ 0x1
  4667                           
  4668  0021                     ??_TMR2_Initialize:	
  4669                           ; 1 bytes @ 0x1
  4670                           
  4671  0021                     ?_IOCAF2_SetInterruptHandler:	
  4672                           ; 1 bytes @ 0x1
  4673                           
  4674  0021                     ?_TMR1_SetInterruptHandler:	
  4675                           ; 1 bytes @ 0x1
  4676                           
  4677  0021                     ?_I2C2_MasterWriteTRBBuild:	
  4678                           ; 1 bytes @ 0x1
  4679                           
  4680  0021                     ?_I2C2_MasterTRBInsert:	
  4681                           ; 1 bytes @ 0x1
  4682                           
  4683  0021                     ?_I2C2_MasterReadTRBBuild:	
  4684                           ; 1 bytes @ 0x1
  4685                           
  4686  0021                     ??_Sensor_peripheralWake:	
  4687                           ; 1 bytes @ 0x1
  4688                           
  4689  0021                     ??_Sensor_peripheralSleep:	
  4690                           ; 1 bytes @ 0x1
  4691                           
  4692  0021                     ?_setSleepTime:	
  4693                           ; 1 bytes @ 0x1
  4694                           
  4695  0021                     ??_DOOR_init:	
  4696                           ; 1 bytes @ 0x1
  4697                           
  4698  0021                     ??_DOOR_run:	
  4699                           ; 1 bytes @ 0x1
  4700                           
  4701  0021                     ??_Diag_setTempSensorHealth:	
  4702                           ; 1 bytes @ 0x1
  4703                           
  4704  0021                     ??_Diag_getTempSensorHealth:	
  4705                           ; 1 bytes @ 0x1
  4706                           
  4707  0021                     ??_Diag_getSensorHealth:	
  4708                           ; 1 bytes @ 0x1
  4709                           
  4710  0021                     ??_DOOR_resetPos:	
  4711                           ; 1 bytes @ 0x1
  4712                           
  4713  0021                     ??_ADC_SelectChannel:	
  4714                           ; 1 bytes @ 0x1
  4715                           
  4716  0021                     ??_ADC_StartConversion:	
  4717                           ; 1 bytes @ 0x1
  4718                           
  4719  0021                     ??_ADC_IsConversionDone:	
  4720                           ; 1 bytes @ 0x1
  4721                           
  4722  0021                     ??_FVR_IsOutputReady:	
  4723                           ; 1 bytes @ 0x1
  4724                           
  4725  0021                     ?_DATAEE_WriteByte:	
  4726                           ; 1 bytes @ 0x1
  4727                           
  4728  0021                     ??_SPI1_Exchange8bit:	
  4729                           ; 1 bytes @ 0x1
  4730                           
  4731  0021                     ??_RF_Init:	
  4732                           ; 1 bytes @ 0x1
  4733                           
  4734  0021                     ?_Timeout_setTimeout:	
  4735                           ; 1 bytes @ 0x1
  4736                           
  4737  0021                     ??_Timeout_hasExpired:	
  4738                           ; 1 bytes @ 0x1
  4739                           
  4740  0021                     ?_TMR1_ReadTimer:	
  4741                           ; 1 bytes @ 0x1
  4742                           
  4743  0021                     ?_ADC_GetConversionResult:	
  4744                           ; 2 bytes @ 0x1
  4745                           
  4746  0021                     ?_limit:	
  4747                           ; 2 bytes @ 0x1
  4748                           
  4749  0021                     ?___lwdiv:	
  4750                           ; 2 bytes @ 0x1
  4751                           
  4752  0021                     ?___ftpack:	
  4753                           ; 2 bytes @ 0x1
  4754                           
  4755  0021                     ?_Timeout_getGlobalCounter:	
  4756                           ; 3 bytes @ 0x1
  4757                           
  4758  0021                     ?___lmul:	
  4759                           ; 4 bytes @ 0x1
  4760                           
  4761  0021                     ?___aldiv:	
  4762                           ; 4 bytes @ 0x1
  4763                           
  4764  0021                     ?___lldiv:	
  4765                           ; 4 bytes @ 0x1
  4766                           
  4767  0021                     I2C2_MasterTRBInsert@ptrb_list:	
  4768                           ; 4 bytes @ 0x1
  4769                           
  4770  0021                     I2C2_MasterWriteTRBBuild@pdata:	
  4771                           ; 1 bytes @ 0x1
  4772                           
  4773  0021                     DATAEE_WriteByte@bData:	
  4774                           ; 1 bytes @ 0x1
  4775                           
  4776  0021                     SPI1_Exchange8bit@data:	
  4777                           ; 1 bytes @ 0x1
  4778                           
  4779  0021                     IOCAF2_SetInterruptHandler@InterruptHandler:	
  4780                           ; 1 bytes @ 0x1
  4781                           
  4782  0021                     TMR1_SetInterruptHandler@InterruptHandler:	
  4783                           ; 2 bytes @ 0x1
  4784                           
  4785  0021                     I2C2_MasterReadTRBBuild@pdata:	
  4786                           ; 2 bytes @ 0x1
  4787                           
  4788  0021                     setSleepTime@timeSec:	
  4789                           ; 2 bytes @ 0x1
  4790                           
  4791  0021                     limit@val:	
  4792                           ; 2 bytes @ 0x1
  4793                           
  4794  0021                     Timeout_setTimeout@val:	
  4795                           ; 2 bytes @ 0x1
  4796                           
  4797  0021                     ___lwdiv@divisor:	
  4798                           ; 2 bytes @ 0x1
  4799                           
  4800  0021                     ___ftpack@arg:	
  4801                           ; 2 bytes @ 0x1
  4802                           
  4803  0021                     ___lmul@multiplier:	
  4804                           ; 3 bytes @ 0x1
  4805                           
  4806  0021                     ___aldiv@divisor:	
  4807                           ; 4 bytes @ 0x1
  4808                           
  4809  0021                     ___lldiv@divisor:	
  4810                           ; 4 bytes @ 0x1
  4811                           
  4812                           
  4813                           ; 4 bytes @ 0x1
  4814  0021                     	ds	1
  4815  0022                     ??_DATAEE_WriteByte:	
  4816  0022                     ??_SPI_WriteRead:	
  4817                           ; 1 bytes @ 0x2
  4818                           
  4819  0022                     I2C2_MasterTRBInsert@pflag:	
  4820                           ; 1 bytes @ 0x2
  4821                           
  4822  0022                     I2C2_MasterWriteTRBBuild@length:	
  4823                           ; 1 bytes @ 0x2
  4824                           
  4825  0022                     ADC_SelectChannel@channel:	
  4826                           ; 1 bytes @ 0x2
  4827                           
  4828  0022                     DATAEE_WriteByte@bAdd:	
  4829                           ; 1 bytes @ 0x2
  4830                           
  4831  0022                     SPI_WriteRead@val:	
  4832                           ; 1 bytes @ 0x2
  4833                           
  4834  0022                     Diag_setTempSensorHealth@health:	
  4835                           ; 1 bytes @ 0x2
  4836                           
  4837  0022                     Diag_getSensorHealth@var:	
  4838                           ; 1 bytes @ 0x2
  4839                           
  4840                           
  4841                           ; 1 bytes @ 0x2
  4842  0022                     	ds	1
  4843  0023                     ??_PIN_MANAGER_Initialize:	
  4844  0023                     ??_TMR1_Initialize:	
  4845                           ; 1 bytes @ 0x3
  4846                           
  4847  0023                     ??_IOCAF2_SetInterruptHandler:	
  4848                           ; 1 bytes @ 0x3
  4849                           
  4850  0023                     ??_TMR1_SetInterruptHandler:	
  4851                           ; 1 bytes @ 0x3
  4852                           
  4853  0023                     ??_I2C2_MasterTRBInsert:	
  4854                           ; 1 bytes @ 0x3
  4855                           
  4856  0023                     ??_setSleepTime:	
  4857                           ; 1 bytes @ 0x3
  4858                           
  4859  0023                     ??_SYSTEM_Initialize:	
  4860                           ; 1 bytes @ 0x3
  4861                           
  4862  0023                     ??_TMR1_ReadTimer:	
  4863                           ; 1 bytes @ 0x3
  4864                           
  4865  0023                     ??_ADC_GetConversionResult:	
  4866                           ; 1 bytes @ 0x3
  4867                           
  4868  0023                     ?_SPI_WriteReadBuffer:	
  4869                           ; 1 bytes @ 0x3
  4870                           
  4871  0023                     ?_SPI_WriteBuffer:	
  4872                           ; 1 bytes @ 0x3
  4873                           
  4874  0023                     ?_RF_WriteRegister:	
  4875                           ; 1 bytes @ 0x3
  4876                           
  4877  0023                     ??_RF_ReadRegister:	
  4878                           ; 1 bytes @ 0x3
  4879                           
  4880  0023                     ??_RF_WriteRead:	
  4881                           ; 1 bytes @ 0x3
  4882                           
  4883  0023                     ??_RF_Write:	
  4884                           ; 1 bytes @ 0x3
  4885                           
  4886  0023                     ??_Timeout_setTimeout:	
  4887                           ; 1 bytes @ 0x3
  4888                           
  4889  0023                     I2C2_MasterReadTRBBuild@length:	
  4890                           ; 1 bytes @ 0x3
  4891                           
  4892  0023                     DATAEE_WriteByte@GIEBitValue:	
  4893                           ; 1 bytes @ 0x3
  4894                           
  4895  0023                     SPI_WriteReadBuffer@bufIn:	
  4896                           ; 1 bytes @ 0x3
  4897                           
  4898  0023                     RF_WriteRegister@val:	
  4899                           ; 1 bytes @ 0x3
  4900                           
  4901  0023                     RF_Write@val:	
  4902                           ; 1 bytes @ 0x3
  4903                           
  4904  0023                     I2C2_MasterWriteTRBBuild@address:	
  4905                           ; 1 bytes @ 0x3
  4906                           
  4907  0023                     limit@min:	
  4908                           ; 2 bytes @ 0x3
  4909                           
  4910  0023                     SPI_WriteBuffer@bufOut:	
  4911                           ; 2 bytes @ 0x3
  4912                           
  4913  0023                     ___lwdiv@dividend:	
  4914                           ; 2 bytes @ 0x3
  4915                           
  4916                           
  4917                           ; 2 bytes @ 0x3
  4918  0023                     	ds	1
  4919  0024                     ?_Storage_save:	
  4920  0024                     ??_RF_WriteRegister:	
  4921                           ; 1 bytes @ 0x4
  4922                           
  4923  0024                     I2C2_MasterTRBInsert@count:	
  4924                           ; 1 bytes @ 0x4
  4925                           
  4926  0024                     SPI_WriteReadBuffer@bufSize:	
  4927                           ; 1 bytes @ 0x4
  4928                           
  4929  0024                     RF_WriteRegister@reg:	
  4930                           ; 1 bytes @ 0x4
  4931                           
  4932  0024                     RF_ReadRegister@reg:	
  4933                           ; 1 bytes @ 0x4
  4934                           
  4935  0024                     RF_WriteRead@val:	
  4936                           ; 1 bytes @ 0x4
  4937                           
  4938  0024                     Storage_save@closeAngle:	
  4939                           ; 1 bytes @ 0x4
  4940                           
  4941  0024                     ___ftpack@exp:	
  4942                           ; 1 bytes @ 0x4
  4943                           
  4944  0024                     I2C2_MasterReadTRBBuild@address:	
  4945                           ; 1 bytes @ 0x4
  4946                           
  4947                           
  4948                           ; 2 bytes @ 0x4
  4949  0024                     	ds	1
  4950  0025                     ??_I2C2_MasterWriteTRBBuild:	
  4951  0025                     ??_Timeout_getGlobalCounter:	
  4952                           ; 1 bytes @ 0x5
  4953                           
  4954  0025                     ??_Wireless_isDataTransmitSuccessful:	
  4955                           ; 1 bytes @ 0x5
  4956                           
  4957  0025                     ??_Storage_save:	
  4958                           ; 1 bytes @ 0x5
  4959                           
  4960  0025                     ??_SPI_WriteReadBuffer:	
  4961                           ; 1 bytes @ 0x5
  4962                           
  4963  0025                     ??_RF_GetStatus:	
  4964                           ; 1 bytes @ 0x5
  4965                           
  4966  0025                     ??_RF_ResetStatusIRQ:	
  4967                           ; 1 bytes @ 0x5
  4968                           
  4969  0025                     ??___lwdiv:	
  4970                           ; 1 bytes @ 0x5
  4971                           
  4972  0025                     SPI_WriteBuffer@bufSize:	
  4973                           ; 1 bytes @ 0x5
  4974                           
  4975  0025                     RF_ReadRegister@val:	
  4976                           ; 1 bytes @ 0x5
  4977                           
  4978  0025                     ___ftpack@sign:	
  4979                           ; 1 bytes @ 0x5
  4980                           
  4981  0025                     limit@max:	
  4982                           ; 1 bytes @ 0x5
  4983                           
  4984  0025                     ___lmul@multiplicand:	
  4985                           ; 2 bytes @ 0x5
  4986                           
  4987  0025                     ___aldiv@dividend:	
  4988                           ; 4 bytes @ 0x5
  4989                           
  4990  0025                     ___lldiv@dividend:	
  4991                           ; 4 bytes @ 0x5
  4992                           
  4993                           
  4994                           ; 4 bytes @ 0x5
  4995  0025                     	ds	1
  4996  0026                     ??_I2C2_MasterReadTRBBuild:	
  4997  0026                     ??___ftpack:	
  4998                           ; 1 bytes @ 0x6
  4999                           
  5000  0026                     ??_SPI_WriteBuffer:	
  5001                           ; 1 bytes @ 0x6
  5002                           
  5003  0026                     ??_RF_DataIsReady:	
  5004                           ; 1 bytes @ 0x6
  5005                           
  5006  0026                     RF_ResetStatusIRQ@flags:	
  5007                           ; 1 bytes @ 0x6
  5008                           
  5009  0026                     Wireless_isDataTransmitSuccessful@status:	
  5010                           ; 1 bytes @ 0x6
  5011                           
  5012  0026                     Storage_save@openAngle:	
  5013                           ; 1 bytes @ 0x6
  5014                           
  5015  0026                     ___lwdiv@counter:	
  5016                           ; 1 bytes @ 0x6
  5017                           
  5018                           
  5019                           ; 1 bytes @ 0x6
  5020  0026                     	ds	1
  5021  0027                     ?_DOOR_update:	
  5022  0027                     ??_limit:	
  5023                           ; 1 bytes @ 0x7
  5024                           
  5025  0027                     I2C2_MasterWriteTRBBuild@ptrb:	
  5026                           ; 1 bytes @ 0x7
  5027                           
  5028  0027                     RF_DataIsReady@channel:	
  5029                           ; 1 bytes @ 0x7
  5030                           
  5031  0027                     DOOR_update@closedAngle:	
  5032                           ; 1 bytes @ 0x7
  5033                           
  5034  0027                     ___lwdiv@quotient:	
  5035                           ; 1 bytes @ 0x7
  5036                           
  5037                           
  5038                           ; 2 bytes @ 0x7
  5039  0027                     	ds	1
  5040  0028                     ??_DOOR_update:	
  5041  0028                     ?_I2C2_MasterWrite:	
  5042                           ; 1 bytes @ 0x8
  5043                           
  5044  0028                     I2C2_MasterWrite@length:	
  5045                           ; 1 bytes @ 0x8
  5046                           
  5047  0028                     I2C2_MasterReadTRBBuild@ptrb:	
  5048                           ; 1 bytes @ 0x8
  5049                           
  5050  0028                     SPI_WriteReadBuffer@bufOut:	
  5051                           ; 1 bytes @ 0x8
  5052                           
  5053  0028                     SPI_WriteBuffer@i:	
  5054                           ; 1 bytes @ 0x8
  5055                           
  5056  0028                     RF_DataIsReady@status:	
  5057                           ; 1 bytes @ 0x8
  5058                           
  5059  0028                     TMR1_ReadTimer@readVal:	
  5060                           ; 1 bytes @ 0x8
  5061                           
  5062                           
  5063                           ; 2 bytes @ 0x8
  5064  0028                     	ds	1
  5065  0029                     ?_I2C2_MasterRead:	
  5066  0029                     ?_RF_WriteRegisterData:	
  5067                           ; 1 bytes @ 0x9
  5068                           
  5069  0029                     ??___lmul:	
  5070                           ; 1 bytes @ 0x9
  5071                           
  5072  0029                     ??___aldiv:	
  5073                           ; 1 bytes @ 0x9
  5074                           
  5075  0029                     ??___lldiv:	
  5076                           ; 1 bytes @ 0x9
  5077                           
  5078  0029                     ?___altoft:	
  5079                           ; 1 bytes @ 0x9
  5080                           
  5081  0029                     ?___awtoft:	
  5082                           ; 3 bytes @ 0x9
  5083                           
  5084  0029                     ?___lwtoft:	
  5085                           ; 3 bytes @ 0x9
  5086                           
  5087  0029                     SPI_WriteReadBuffer@i:	
  5088                           ; 3 bytes @ 0x9
  5089                           
  5090  0029                     DOOR_update@openAngle:	
  5091                           ; 1 bytes @ 0x9
  5092                           
  5093  0029                     I2C2_MasterWrite@address:	
  5094                           ; 1 bytes @ 0x9
  5095                           
  5096  0029                     I2C2_MasterRead@pdata:	
  5097                           ; 2 bytes @ 0x9
  5098                           
  5099  0029                     RF_WriteRegisterData@buf:	
  5100                           ; 2 bytes @ 0x9
  5101                           
  5102  0029                     ___awtoft@c:	
  5103                           ; 2 bytes @ 0x9
  5104                           
  5105  0029                     ___lwtoft@c:	
  5106                           ; 2 bytes @ 0x9
  5107                           
  5108  0029                     ___lmul@product:	
  5109                           ; 2 bytes @ 0x9
  5110                           
  5111  0029                     ___altoft@c:	
  5112                           ; 4 bytes @ 0x9
  5113                           
  5114                           
  5115                           ; 4 bytes @ 0x9
  5116  0029                     	ds	1
  5117  002A                     ?_RF_ReadRegisterData:	
  5118  002A                     TMR1_ReadTimer@readValHigh:	
  5119                           ; 1 bytes @ 0xA
  5120                           
  5121  002A                     RF_ReadRegisterData@buf:	
  5122                           ; 1 bytes @ 0xA
  5123                           
  5124  002A                     ___aldiv@counter:	
  5125                           ; 1 bytes @ 0xA
  5126                           
  5127  002A                     ___lldiv@quotient:	
  5128                           ; 1 bytes @ 0xA
  5129                           
  5130                           
  5131                           ; 4 bytes @ 0xA
  5132  002A                     	ds	1
  5133  002B                     TMR1_ReadTimer@readValLow:	
  5134  002B                     I2C2_MasterWrite@pflag:	
  5135                           ; 1 bytes @ 0xB
  5136                           
  5137  002B                     I2C2_MasterRead@length:	
  5138                           ; 1 bytes @ 0xB
  5139                           
  5140  002B                     RF_ReadRegisterData@bufSize:	
  5141                           ; 1 bytes @ 0xB
  5142                           
  5143  002B                     RF_WriteRegisterData@bufSize:	
  5144                           ; 1 bytes @ 0xB
  5145                           
  5146  002B                     ___aldiv@sign:	
  5147                           ; 1 bytes @ 0xB
  5148                           
  5149                           
  5150                           ; 1 bytes @ 0xB
  5151  002B                     	ds	1
  5152  002C                     ??_I2C2_MasterWrite:	
  5153  002C                     ??_RF_ReadRegisterData:	
  5154                           ; 1 bytes @ 0xC
  5155                           
  5156  002C                     ??_RF_WriteRegisterData:	
  5157                           ; 1 bytes @ 0xC
  5158                           
  5159  002C                     ??___awtoft:	
  5160                           ; 1 bytes @ 0xC
  5161                           
  5162  002C                     ??___lwtoft:	
  5163                           ; 1 bytes @ 0xC
  5164                           
  5165  002C                     I2C2_MasterRead@address:	
  5166                           ; 1 bytes @ 0xC
  5167                           
  5168  002C                     ___aldiv@quotient:	
  5169                           ; 2 bytes @ 0xC
  5170                           
  5171                           
  5172                           ; 4 bytes @ 0xC
  5173  002C                     	ds	1
  5174  002D                     ??_Timeout_updateCurrentTime:	
  5175  002D                     ??___altoft:	
  5176                           ; 1 bytes @ 0xD
  5177                           
  5178  002D                     RF_WriteRegisterData@reg:	
  5179                           ; 1 bytes @ 0xD
  5180                           
  5181                           
  5182                           ; 1 bytes @ 0xD
  5183  002D                     	ds	1
  5184  002E                     ??_Wireless_init:	
  5185  002E                     ?_RF_TxPayload:	
  5186                           ; 1 bytes @ 0xE
  5187                           
  5188  002E                     I2C2_MasterWrite@pdata:	
  5189                           ; 1 bytes @ 0xE
  5190                           
  5191  002E                     I2C2_MasterRead@pflag:	
  5192                           ; 1 bytes @ 0xE
  5193                           
  5194  002E                     RF_ReadRegisterData@reg:	
  5195                           ; 1 bytes @ 0xE
  5196                           
  5197  002E                     RF_TxPayload@payloadSize:	
  5198                           ; 1 bytes @ 0xE
  5199                           
  5200  002E                     ___awtoft@sign:	
  5201                           ; 1 bytes @ 0xE
  5202                           
  5203  002E                     ___lldiv@counter:	
  5204                           ; 1 bytes @ 0xE
  5205                           
  5206                           
  5207                           ; 1 bytes @ 0xE
  5208  002E                     	ds	1
  5209  002F                     ??_Wireless_wake:	
  5210  002F                     ??_Wireless_sleep:	
  5211                           ; 1 bytes @ 0xF
  5212                           
  5213  002F                     ?_I2C_ByteWrite:	
  5214                           ; 1 bytes @ 0xF
  5215                           
  5216  002F                     ??_Wireless_changeTransmitPower:	
  5217                           ; 1 bytes @ 0xF
  5218                           
  5219  002F                     ??_I2C2_MasterRead:	
  5220                           ; 1 bytes @ 0xF
  5221                           
  5222  002F                     ??_RF_TxPayload:	
  5223                           ; 1 bytes @ 0xF
  5224                           
  5225  002F                     ?_RF_RxPayload:	
  5226                           ; 1 bytes @ 0xF
  5227                           
  5228  002F                     RF_RxPayload@payloadSize:	
  5229                           ; 1 bytes @ 0xF
  5230                           
  5231  002F                     I2C_ByteWrite@pBuffer:	
  5232                           ; 1 bytes @ 0xF
  5233                           
  5234  002F                     ___altoft@exp:	
  5235                           ; 1 bytes @ 0xF
  5236                           
  5237                           
  5238                           ; 1 bytes @ 0xF
  5239  002F                     	ds	1
  5240  0030                     ??_RF_RxPayload:	
  5241  0030                     RF_TxPayload@payload:	
  5242                           ; 1 bytes @ 0x10
  5243                           
  5244  0030                     Wireless_sleep@reg:	
  5245                           ; 1 bytes @ 0x10
  5246                           
  5247  0030                     Wireless_wake@reg:	
  5248                           ; 1 bytes @ 0x10
  5249                           
  5250  0030                     I2C_ByteWrite@WriteAddr:	
  5251                           ; 1 bytes @ 0x10
  5252                           
  5253  0030                     ___altoft@sign:	
  5254                           ; 1 bytes @ 0x10
  5255                           
  5256                           
  5257                           ; 1 bytes @ 0x10
  5258  0030                     	ds	1
  5259  0031                     ??_I2C_ByteWrite:	
  5260  0031                     ?_I2C_BufferRead:	
  5261                           ; 1 bytes @ 0x11
  5262                           
  5263  0031                     ?_Wireless_sendData:	
  5264                           ; 1 bytes @ 0x11
  5265                           
  5266  0031                     ?___ftdiv:	
  5267                           ; 1 bytes @ 0x11
  5268                           
  5269  0031                     Wireless_sendData@length:	
  5270                           ; 3 bytes @ 0x11
  5271                           
  5272  0031                     I2C_BufferRead@pBuffer:	
  5273                           ; 1 bytes @ 0x11
  5274                           
  5275  0031                     ___ftdiv@f2:	
  5276                           ; 2 bytes @ 0x11
  5277                           
  5278  0031                     Timeout_updateCurrentTime@var:	
  5279                           ; 3 bytes @ 0x11
  5280                           
  5281                           
  5282                           ; 4 bytes @ 0x11
  5283  0031                     	ds	1
  5284  0032                     ??_Wireless_sendData:	
  5285  0032                     RF_RxPayload@payload:	
  5286                           ; 1 bytes @ 0x12
  5287                           
  5288  0032                     Wireless_changeTransmitPower@power:	
  5289                           ; 1 bytes @ 0x12
  5290                           
  5291                           
  5292                           ; 1 bytes @ 0x12
  5293  0032                     	ds	1
  5294  0033                     ??_Wireless_checkDataReceived:	
  5295  0033                     Wireless_changeTransmitPower@val:	
  5296                           ; 1 bytes @ 0x13
  5297                           
  5298  0033                     Wireless_sendData@status:	
  5299                           ; 1 bytes @ 0x13
  5300                           
  5301  0033                     I2C_BufferRead@ReadAddr:	
  5302                           ; 1 bytes @ 0x13
  5303                           
  5304                           
  5305                           ; 1 bytes @ 0x13
  5306  0033                     	ds	1
  5307  0034                     Wireless_sendData@payload:	
  5308  0034                     I2C_BufferRead@NumByteToRead:	
  5309                           ; 1 bytes @ 0x14
  5310                           
  5311  0034                     ___ftdiv@f1:	
  5312                           ; 2 bytes @ 0x14
  5313                           
  5314                           
  5315                           ; 3 bytes @ 0x14
  5316  0034                     	ds	1
  5317  0035                     ??_Wireless_determineTransmitPower:	
  5318  0035                     I2C_ByteWrite@slaveAddr:	
  5319                           ; 1 bytes @ 0x15
  5320                           
  5321                           
  5322                           ; 1 bytes @ 0x15
  5323  0035                     	ds	1
  5324  0036                     ??_I2C_BufferRead:	
  5325  0036                     I2C_ByteWrite@data:	
  5326                           ; 1 bytes @ 0x16
  5327                           
  5328                           
  5329                           ; 2 bytes @ 0x16
  5330  0036                     	ds	1
  5331  0037                     ??___ftdiv:	
  5332  0037                     Wireless_checkDataReceived@data:	
  5333                           ; 1 bytes @ 0x17
  5334                           
  5335                           
  5336                           ; 4 bytes @ 0x17
  5337  0037                     	ds	1
  5338  0038                     Wireless_determineTransmitPower@initialise:	
  5339  0038                     I2C_ByteWrite@status:	
  5340                           ; 1 bytes @ 0x18
  5341                           
  5342                           
  5343                           ; 1 bytes @ 0x18
  5344  0038                     	ds	1
  5345  0039                     Wireless_determineTransmitPower@testPayload:	
  5346                           
  5347                           ; 1 bytes @ 0x19
  5348  0039                     	ds	1
  5349  003A                     Wireless_determineTransmitPower@latestResult:	
  5350  003A                     I2C_BufferRead@slaveAddr:	
  5351                           ; 1 bytes @ 0x1A
  5352                           
  5353                           
  5354                           ; 1 bytes @ 0x1A
  5355  003A                     	ds	1
  5356  003B                     Wireless_checkDataReceived@channel:	
  5357  003B                     I2C_BufferRead@status:	
  5358                           ; 1 bytes @ 0x1B
  5359                           
  5360  003B                     ___ftdiv@cntr:	
  5361                           ; 1 bytes @ 0x1B
  5362                           
  5363                           
  5364                           ; 1 bytes @ 0x1B
  5365  003B                     	ds	1
  5366  003C                     ??_BMP_init:	
  5367  003C                     ?_HMC5883L_I2C_BufferRead:	
  5368                           ; 1 bytes @ 0x1C
  5369                           
  5370  003C                     HMC5883L_I2C_BufferRead@pBuffer:	
  5371                           ; 1 bytes @ 0x1C
  5372                           
  5373  003C                     ___ftdiv@f3:	
  5374                           ; 2 bytes @ 0x1C
  5375                           
  5376                           
  5377                           ; 3 bytes @ 0x1C
  5378  003C                     	ds	2
  5379  003E                     HMC5883L_I2C_BufferRead@ReadAddr:	
  5380                           
  5381                           ; 1 bytes @ 0x1E
  5382  003E                     	ds	1
  5383  003F                     BMP_init@t:	
  5384  003F                     ___ftdiv@exp:	
  5385                           ; 1 bytes @ 0x1F
  5386                           
  5387  003F                     HMC5883L_I2C_BufferRead@NumByteToRead:	
  5388                           ; 1 bytes @ 0x1F
  5389                           
  5390                           
  5391                           ; 2 bytes @ 0x1F
  5392  003F                     	ds	1
  5393  0040                     ___ftdiv@sign:	
  5394                           
  5395                           ; 1 bytes @ 0x20
  5396  0040                     	ds	1
  5397  0041                     ??_HMC5883L_I2C_BufferRead:	
  5398  0041                     ?_Sensor_getSupplyVoltage:	
  5399                           ; 1 bytes @ 0x21
  5400                           
  5401  0041                     ?___ftneg:	
  5402                           ; 3 bytes @ 0x21
  5403                           
  5404  0041                     ___ftneg@f1:	
  5405                           ; 3 bytes @ 0x21
  5406                           
  5407                           
  5408                           ; 3 bytes @ 0x21
  5409  0041                     	ds	1
  5410  0042                     HMC5883L_I2C_BufferRead@slaveAddr:	
  5411                           
  5412                           ; 1 bytes @ 0x22
  5413  0042                     	ds	1
  5414  0043                     ?_HMC5883L_ReadBits:	
  5415  0043                     HMC5883L_ReadBits@regAddr:	
  5416                           ; 1 bytes @ 0x23
  5417                           
  5418                           
  5419                           ; 1 bytes @ 0x23
  5420  0043                     	ds	1
  5421  0044                     ??_Sensor_getSupplyVoltage:	
  5422  0044                     ??___ftneg:	
  5423                           ; 1 bytes @ 0x24
  5424                           
  5425  0044                     HMC5883L_ReadBits@bitStart:	
  5426                           ; 1 bytes @ 0x24
  5427                           
  5428  0044                     Sensor_getSupplyVoltage@voltage:	
  5429                           ; 1 bytes @ 0x24
  5430                           
  5431                           
  5432                           ; 3 bytes @ 0x24
  5433  0044                     	ds	1
  5434  0045                     HMC5883L_ReadBits@length:	
  5435                           
  5436                           ; 1 bytes @ 0x25
  5437  0045                     	ds	1
  5438  0046                     HMC5883L_ReadBits@data:	
  5439                           
  5440                           ; 1 bytes @ 0x26
  5441  0046                     	ds	1
  5442  0047                     ??_HMC5883L_ReadBits:	
  5443  0047                     Sensor_getSupplyVoltage@res:	
  5444                           ; 1 bytes @ 0x27
  5445                           
  5446                           
  5447                           ; 2 bytes @ 0x27
  5448  0047                     	ds	2
  5449  0049                     ?___ftadd:	
  5450  0049                     ___ftadd@f1:	
  5451                           ; 3 bytes @ 0x29
  5452                           
  5453                           
  5454                           ; 3 bytes @ 0x29
  5455  0049                     	ds	1
  5456  004A                     HMC5883L_ReadBits@slaveAddr:	
  5457                           
  5458                           ; 1 bytes @ 0x2A
  5459  004A                     	ds	1
  5460  004B                     HMC5883L_ReadBits@mask:	
  5461                           
  5462                           ; 1 bytes @ 0x2B
  5463  004B                     	ds	1
  5464  004C                     HMC5883L_ReadBits@tmp:	
  5465  004C                     ___ftadd@f2:	
  5466                           ; 1 bytes @ 0x2C
  5467                           
  5468                           
  5469                           ; 3 bytes @ 0x2C
  5470  004C                     	ds	3
  5471  004F                     ??___ftadd:	
  5472                           
  5473                           ; 1 bytes @ 0x2F
  5474  004F                     	ds	4
  5475  0053                     ___ftadd@sign:	
  5476                           
  5477                           ; 1 bytes @ 0x33
  5478  0053                     	ds	1
  5479  0054                     ___ftadd@exp2:	
  5480                           
  5481                           ; 1 bytes @ 0x34
  5482  0054                     	ds	1
  5483  0055                     ___ftadd@exp1:	
  5484                           
  5485                           ; 1 bytes @ 0x35
  5486  0055                     	ds	1
  5487  0056                     ?___ftmul:	
  5488  0056                     ___ftmul@f1:	
  5489                           ; 3 bytes @ 0x36
  5490                           
  5491                           
  5492                           ; 3 bytes @ 0x36
  5493  0056                     	ds	3
  5494  0059                     ___ftmul@f2:	
  5495                           
  5496                           ; 3 bytes @ 0x39
  5497  0059                     	ds	3
  5498  005C                     ??___ftmul:	
  5499                           
  5500                           ; 1 bytes @ 0x3C
  5501  005C                     	ds	4
  5502  0060                     ___ftmul@exp:	
  5503                           
  5504                           ; 1 bytes @ 0x40
  5505  0060                     	ds	1
  5506  0061                     ___ftmul@f3_as_product:	
  5507                           
  5508                           ; 3 bytes @ 0x41
  5509  0061                     	ds	3
  5510  0064                     ___ftmul@cntr:	
  5511                           
  5512                           ; 1 bytes @ 0x44
  5513  0064                     	ds	1
  5514  0065                     ___ftmul@sign:	
  5515                           
  5516                           ; 1 bytes @ 0x45
  5517  0065                     	ds	1
  5518  0066                     ?___fttol:	
  5519  0066                     ___fttol@f1:	
  5520                           ; 4 bytes @ 0x46
  5521                           
  5522                           
  5523                           ; 3 bytes @ 0x46
  5524  0066                     	ds	4
  5525  006A                     ??___fttol:	
  5526                           
  5527                           ; 1 bytes @ 0x4A
  5528  006A                     	ds	4
  5529  006E                     ??_Wireless_packageData:	
  5530                           
  5531                           ; 1 bytes @ 0x4E
  5532  006E                     	ds	1
  5533                           
  5534                           	psect	maintext
  5535  0345                     __pmaintext:	
  5536 ;;
  5537 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
  5538 ;;
  5539 ;; *************** function _main *****************
  5540 ;; Defined at:
  5541 ;;		line 58 in file "main.c"
  5542 ;; Parameters:    Size  Location     Type
  5543 ;;		None
  5544 ;; Auto vars:     Size  Location     Type
  5545 ;;  doorOpenTime    4    7[BANK3 ] unsigned long 
  5546 ;;  doorClosedUp    4    1[BANK3 ] unsigned long 
  5547 ;;  dur             2    5[BANK3 ] unsigned int 
  5548 ;;  doorStatus      1   11[BANK3 ] enum E3332
  5549 ;;  prevDoorStat    1    0[BANK3 ] enum E3332
  5550 ;; Return value:  Size  Location     Type
  5551 ;;                  1    wreg      void 
  5552 ;; Registers used:
  5553 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5554 ;; Tracked objects:
  5555 ;;		On entry : B1F/0
  5556 ;;		On exit  : 0/0
  5557 ;;		Unchanged: 0/0
  5558 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5559 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5560 ;;      Locals:         0       0       0       0      12       0       0       0       0       0       0       0       
      +0       0
  5561 ;;      Temps:          0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
  5562 ;;      Totals:         0       0       2       0      12       0       0       0       0       0       0       0       
      +0       0
  5563 ;;Total ram usage:       14 bytes
  5564 ;; Hardware stack levels required when called:   12
  5565 ;; This function calls:
  5566 ;;		_BMP_init
  5567 ;;		_BMP_readTemperature
  5568 ;;		_DOOR_init
  5569 ;;		_DOOR_run
  5570 ;;		_SYSTEM_Initialize
  5571 ;;		_Sensor_peripheralSleep
  5572 ;;		_Timeout_getGlobalCounter
  5573 ;;		_Timeout_updateCurrentTime
  5574 ;;		_Wireless_determineTransmitPower
  5575 ;;		_Wireless_init
  5576 ;;		_Wireless_packageData
  5577 ;;		_Wireless_sleep
  5578 ;;		_Wireless_wake
  5579 ;;		___lldiv
  5580 ;;		___lwdiv
  5581 ;;		_setSleepTime
  5582 ;; This function is called by:
  5583 ;;		Startup code after reset
  5584 ;; This function uses a non-reentrant model
  5585 ;;
  5586                           
  5587                           
  5588                           ;psect for function _main
  5589  0345                     _main:	
  5590                           
  5591                           ;main.c: 60: DOOR doorStatus=DOOR_CLOSED,prevDoorStatus=DOOR_CLOSED;
  5592                           
  5593                           ;incstack = 0
  5594                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  5595  0345  0023               	movlb	3	; select bank3
  5596  0346  01DB               	clrf	main@doorStatus^(0+384)
  5597  0347  01D0               	clrf	main@prevDoorStatus^(0+384)
  5598                           
  5599                           ;main.c: 61: unsigned long doorClosedUpdateCounter=0;
  5600  0348  3000               	movlw	0
  5601  0349  00D4               	movwf	(main@doorClosedUpdateCounter+3)^(0+384)
  5602  034A  3000               	movlw	0
  5603  034B  00D3               	movwf	(main@doorClosedUpdateCounter+2)^(0+384)
  5604  034C  3000               	movlw	0
  5605  034D  00D2               	movwf	(main@doorClosedUpdateCounter+1)^(0+384)
  5606  034E  3000               	movlw	0
  5607  034F  00D1               	movwf	main@doorClosedUpdateCounter^(0+384)
  5608                           
  5609                           ;main.c: 62: unsigned long doorOpenTime=0;
  5610  0350  3000               	movlw	0
  5611  0351  00DA               	movwf	(main@doorOpenTime+3)^(0+384)
  5612  0352  3000               	movlw	0
  5613  0353  00D9               	movwf	(main@doorOpenTime+2)^(0+384)
  5614  0354  3000               	movlw	0
  5615  0355  00D8               	movwf	(main@doorOpenTime+1)^(0+384)
  5616  0356  3000               	movlw	0
  5617  0357  00D7               	movwf	main@doorOpenTime^(0+384)
  5618                           
  5619                           ;main.c: 63: unsigned int dur=0;
  5620  0358  01D5               	clrf	main@dur^(0+384)
  5621  0359  01D6               	clrf	(main@dur+1)^(0+384)
  5622                           
  5623                           ;main.c: 66: SYSTEM_Initialize();
  5624  035A  3194  24E9  3183   	fcall	_SYSTEM_Initialize
  5625                           
  5626                           ;main.c: 72: (INTCONbits.GIE = 1);
  5627  035D  178B               	bsf	11,7	;volatile
  5628                           
  5629                           ;main.c: 75: (INTCONbits.PEIE = 1);
  5630  035E  170B               	bsf	11,6	;volatile
  5631                           
  5632                           ;main.c: 82: do { WPUCbits.WPUC5 = 1; } while(0);
  5633  035F  0024               	movlb	4	; select bank4
  5634  0360  168E               	bsf	14,5	;volatile
  5635                           
  5636                           ;main.c: 83: _delay((unsigned long)((1000)*(8000000/4000.0)));
  5637  0361  300B               	movlw	11
  5638  0362  0021               	movlb	1	; select bank1
  5639  0363  00C9               	movwf	(??_main^(0+128)+1)
  5640  0364  3026               	movlw	38
  5641  0365  00C8               	movwf	??_main^(0+128)
  5642  0366  305D               	movlw	93
  5643  0367                     u7167:	
  5644  0367  0B89               	decfsz	9,f
  5645  0368  2B67               	goto	u7167
  5646  0369  0BC8               	decfsz	??_main^(0+128),f
  5647  036A  2B67               	goto	u7167
  5648  036B  0BC9               	decfsz	(??_main^(0+128)+1),f
  5649  036C  2B67               	goto	u7167
  5650  036D  3200               	nop2
  5651                           
  5652                           ;main.c: 84: Sensor_peripheralSleep();
  5653  036E  3192  22AE  3183   	fcall	_Sensor_peripheralSleep
  5654                           
  5655                           ;main.c: 85: Wireless_init();
  5656  0371  3187  2783  3183   	fcall	_Wireless_init
  5657                           
  5658                           ;main.c: 86: BMP_init();
  5659  0374  318B  2315  3183   	fcall	_BMP_init
  5660                           
  5661                           ;main.c: 91: setSleepTime(10000/1000);
  5662  0377  300A               	movlw	10
  5663  0378  0020               	movlb	0	; select bank0
  5664  0379  00A1               	movwf	setSleepTime@timeSec
  5665  037A  3000               	movlw	0
  5666  037B  00A2               	movwf	setSleepTime@timeSec+1
  5667  037C  3192  22B8  3183   	fcall	_setSleepTime
  5668                           
  5669                           ;main.c: 93: setSleepTime(10000/1000);
  5670  037F  300A               	movlw	10
  5671  0380  0020               	movlb	0	; select bank0
  5672  0381  00A1               	movwf	setSleepTime@timeSec
  5673  0382  3000               	movlw	0
  5674  0383  00A2               	movwf	setSleepTime@timeSec+1
  5675  0384  3192  22B8  3183   	fcall	_setSleepTime
  5676                           
  5677                           ;main.c: 94: DOOR_init();
  5678  0387  3187  27FE  3183   	fcall	_DOOR_init
  5679                           
  5680                           ;main.c: 95: do { LATCbits.LATC6 = 1; } while(0);
  5681  038A  0022               	movlb	2	; select bank2
  5682  038B  170E               	bsf	14,6	;volatile
  5683                           
  5684                           ;main.c: 96: _delay((unsigned long)((500)*(8000000/4000.0)));
  5685  038C  3006               	movlw	6
  5686  038D  0021               	movlb	1	; select bank1
  5687  038E  00C9               	movwf	(??_main^(0+128)+1)
  5688  038F  3013               	movlw	19
  5689  0390  00C8               	movwf	??_main^(0+128)
  5690  0391  30AD               	movlw	173
  5691  0392                     u7177:	
  5692  0392  0B89               	decfsz	9,f
  5693  0393  2B92               	goto	u7177
  5694  0394  0BC8               	decfsz	??_main^(0+128),f
  5695  0395  2B92               	goto	u7177
  5696  0396  0BC9               	decfsz	(??_main^(0+128)+1),f
  5697  0397  2B92               	goto	u7177
  5698  0398  3200               	nop2
  5699                           
  5700                           ;main.c: 97: do { LATCbits.LATC6 = 0; } while(0);
  5701  0399  0022               	movlb	2	; select bank2
  5702  039A  130E               	bcf	14,6	;volatile
  5703                           
  5704                           ;main.c: 98: Wireless_wake();
  5705  039B  3195  25CB  3183   	fcall	_Wireless_wake
  5706                           
  5707                           ;main.c: 99: Wireless_determineTransmitPower(1);
  5708  039E  3001               	movlw	1
  5709  039F  318D  2524  3183   	fcall	_Wireless_determineTransmitPower
  5710                           
  5711                           ;main.c: 100: Wireless_packageData(doorStatus,doorOpenTime/1000,BMP_readTemperature());
  5712  03A2  3000               	movlw	0
  5713  03A3  0020               	movlb	0	; select bank0
  5714  03A4  00A4               	movwf	___lldiv@divisor+3
  5715  03A5  3000               	movlw	0
  5716  03A6  00A3               	movwf	___lldiv@divisor+2
  5717  03A7  3003               	movlw	3
  5718  03A8  00A2               	movwf	___lldiv@divisor+1
  5719  03A9  30E8               	movlw	232
  5720  03AA  00A1               	movwf	___lldiv@divisor
  5721  03AB  0023               	movlb	3	; select bank3
  5722  03AC  085A               	movf	(main@doorOpenTime+3)^(0+384),w
  5723  03AD  0020               	movlb	0	; select bank0
  5724  03AE  00A8               	movwf	___lldiv@dividend+3
  5725  03AF  0023               	movlb	3	; select bank3
  5726  03B0  0859               	movf	(main@doorOpenTime+2)^(0+384),w
  5727  03B1  0020               	movlb	0	; select bank0
  5728  03B2  00A7               	movwf	___lldiv@dividend+2
  5729  03B3  0023               	movlb	3	; select bank3
  5730  03B4  0858               	movf	(main@doorOpenTime+1)^(0+384),w
  5731  03B5  0020               	movlb	0	; select bank0
  5732  03B6  00A6               	movwf	___lldiv@dividend+1
  5733  03B7  0023               	movlb	3	; select bank3
  5734  03B8  0857               	movf	main@doorOpenTime^(0+384),w
  5735  03B9  0020               	movlb	0	; select bank0
  5736  03BA  00A5               	movwf	___lldiv@dividend
  5737  03BB  3189  214C  3183   	fcall	___lldiv
  5738  03BE  0020               	movlb	0	; select bank0
  5739  03BF  0821               	movf	?___lldiv,w
  5740  03C0  0021               	movlb	1	; select bank1
  5741  03C1  00C8               	movwf	??_main^(0+128)
  5742  03C2  0848               	movf	??_main^(0+128),w
  5743  03C3  00BA               	movwf	Wireless_packageData@openTime^(0+128)
  5744  03C4  3180  2077  3183   	fcall	_BMP_readTemperature
  5745  03C7  0021               	movlb	1	; select bank1
  5746  03C8  0826               	movf	?_BMP_readTemperature^(0+128),w
  5747  03C9  00BB               	movwf	Wireless_packageData@tempC^(0+128)
  5748  03CA  0827               	movf	(?_BMP_readTemperature+1)^(0+128),w
  5749  03CB  00BC               	movwf	(Wireless_packageData@tempC+1)^(0+128)
  5750  03CC  0828               	movf	(?_BMP_readTemperature+2)^(0+128),w
  5751  03CD  00BD               	movwf	(Wireless_packageData@tempC+2)^(0+128)
  5752  03CE  0023               	movlb	3	; select bank3
  5753  03CF  085B               	movf	main@doorStatus^(0+384),w
  5754  03D0  318F  2724  3183   	fcall	_Wireless_packageData
  5755                           
  5756                           ;main.c: 101: Wireless_sleep();
  5757  03D3  3194  2469  3183   	fcall	_Wireless_sleep
  5758  03D6                     l6753:	
  5759                           ;main.c: 103: while (1)
  5760                           
  5761                           
  5762                           ;main.c: 104: {
  5763                           ;main.c: 105: Timeout_updateCurrentTime();
  5764  03D6  318A  2252  3183   	fcall	_Timeout_updateCurrentTime
  5765                           
  5766                           ;main.c: 106: if(PORTCbits.RC5==0)
  5767  03D9  0020               	movlb	0	; select bank0
  5768  03DA  1A8E               	btfsc	14,5	;volatile
  5769  03DB  2C33               	goto	l6769
  5770                           
  5771                           ;main.c: 107: {
  5772                           ;main.c: 109: do { LATCbits.LATC6 = 1; } while(0);
  5773  03DC  0022               	movlb	2	; select bank2
  5774  03DD  170E               	bsf	14,6	;volatile
  5775                           
  5776                           ;main.c: 110: _delay((unsigned long)((500)*(8000000/4000.0)));
  5777  03DE  3006               	movlw	6
  5778  03DF  0021               	movlb	1	; select bank1
  5779  03E0  00C9               	movwf	(??_main^(0+128)+1)
  5780  03E1  3013               	movlw	19
  5781  03E2  00C8               	movwf	??_main^(0+128)
  5782  03E3  30AD               	movlw	173
  5783  03E4                     u7187:	
  5784  03E4  0B89               	decfsz	9,f
  5785  03E5  2BE4               	goto	u7187
  5786  03E6  0BC8               	decfsz	??_main^(0+128),f
  5787  03E7  2BE4               	goto	u7187
  5788  03E8  0BC9               	decfsz	(??_main^(0+128)+1),f
  5789  03E9  2BE4               	goto	u7187
  5790  03EA  3200               	nop2
  5791                           
  5792                           ;main.c: 111: do { LATCbits.LATC6 = 0; } while(0);
  5793  03EB  0022               	movlb	2	; select bank2
  5794  03EC  130E               	bcf	14,6	;volatile
  5795                           
  5796                           ;main.c: 112: Wireless_wake();
  5797  03ED  3195  25CB  3183   	fcall	_Wireless_wake
  5798                           
  5799                           ;main.c: 113: dur = Timeout_getGlobalCounter() - doorOpenTime;
  5800  03F0  0023               	movlb	3	; select bank3
  5801  03F1  0957               	comf	main@doorOpenTime^(0+384),w
  5802  03F2  0021               	movlb	1	; select bank1
  5803  03F3  00C8               	movwf	??_main^(0+128)
  5804  03F4  0023               	movlb	3	; select bank3
  5805  03F5  0958               	comf	(main@doorOpenTime+1)^(0+384),w
  5806  03F6  0021               	movlb	1	; select bank1
  5807  03F7  00C9               	movwf	(??_main^(0+128)+1)
  5808  03F8  0AC8               	incf	??_main^(0+128),f
  5809  03F9  1903               	skipnz
  5810  03FA  0AC9               	incf	(??_main^(0+128)+1),f
  5811  03FB  3193  239E  3183   	fcall	_Timeout_getGlobalCounter
  5812  03FE  0021               	movlb	1	; select bank1
  5813  03FF  0848               	movf	??_main^(0+128),w
  5814  0400  0020               	movlb	0	; select bank0
  5815  0401  0721               	addwf	?_Timeout_getGlobalCounter,w
  5816  0402  0023               	movlb	3	; select bank3
  5817  0403  00D5               	movwf	main@dur^(0+384)
  5818  0404  0021               	movlb	1	; select bank1
  5819  0405  0849               	movf	(??_main+1)^(0+128),w
  5820  0406  0020               	movlb	0	; select bank0
  5821  0407  3D22               	addwfc	?_Timeout_getGlobalCounter+1,w
  5822  0408  0023               	movlb	3	; select bank3
  5823  0409  00D6               	movwf	(main@dur+1)^(0+384)
  5824                           
  5825                           ;main.c: 114: Wireless_packageData(doorStatus,dur/1000,BMP_readTemperature());
  5826  040A  30E8               	movlw	232
  5827  040B  0020               	movlb	0	; select bank0
  5828  040C  00A1               	movwf	___lwdiv@divisor
  5829  040D  3003               	movlw	3
  5830  040E  00A2               	movwf	___lwdiv@divisor+1
  5831  040F  0023               	movlb	3	; select bank3
  5832  0410  0856               	movf	(main@dur+1)^(0+384),w
  5833  0411  0020               	movlb	0	; select bank0
  5834  0412  00A4               	movwf	___lwdiv@dividend+1
  5835  0413  0023               	movlb	3	; select bank3
  5836  0414  0855               	movf	main@dur^(0+384),w
  5837  0415  0020               	movlb	0	; select bank0
  5838  0416  00A3               	movwf	___lwdiv@dividend
  5839  0417  3188  2002  3183   	fcall	___lwdiv
  5840  041A  0020               	movlb	0	; select bank0
  5841  041B  0821               	movf	?___lwdiv,w
  5842  041C  0021               	movlb	1	; select bank1
  5843  041D  00C8               	movwf	??_main^(0+128)
  5844  041E  0848               	movf	??_main^(0+128),w
  5845  041F  00BA               	movwf	Wireless_packageData@openTime^(0+128)
  5846  0420  3180  2077  3183   	fcall	_BMP_readTemperature
  5847  0423  0021               	movlb	1	; select bank1
  5848  0424  0826               	movf	?_BMP_readTemperature^(0+128),w
  5849  0425  00BB               	movwf	Wireless_packageData@tempC^(0+128)
  5850  0426  0827               	movf	(?_BMP_readTemperature+1)^(0+128),w
  5851  0427  00BC               	movwf	(Wireless_packageData@tempC+1)^(0+128)
  5852  0428  0828               	movf	(?_BMP_readTemperature+2)^(0+128),w
  5853  0429  00BD               	movwf	(Wireless_packageData@tempC+2)^(0+128)
  5854  042A  0023               	movlb	3	; select bank3
  5855  042B  085B               	movf	main@doorStatus^(0+384),w
  5856  042C  318F  2724  3183   	fcall	_Wireless_packageData
  5857                           
  5858                           ;main.c: 115: Wireless_sleep();
  5859  042F  3194  2469  3183   	fcall	_Wireless_sleep
  5860                           
  5861                           ;main.c: 116: }
  5862  0432  2C3B               	goto	l6771
  5863  0433                     l6769:	
  5864                           
  5865                           ;main.c: 117: else
  5866                           ;main.c: 118: doorStatus=DOOR_run();
  5867  0433  3192  228E  3183   	fcall	_DOOR_run
  5868  0436  0021               	movlb	1	; select bank1
  5869  0437  00C8               	movwf	??_main^(0+128)
  5870  0438  0848               	movf	??_main^(0+128),w
  5871  0439  0023               	movlb	3	; select bank3
  5872  043A  00DB               	movwf	main@doorStatus^(0+384)
  5873  043B                     l6771:	
  5874                           
  5875                           ;main.c: 121: if((doorStatus!=prevDoorStatus && doorStatus!=DOOR_ERROR))
  5876  043B  0023               	movlb	3	; select bank3
  5877  043C  085B               	movf	main@doorStatus^(0+384),w
  5878  043D  0650               	xorwf	main@prevDoorStatus^(0+384),w
  5879  043E  1903               	skipnz
  5880  043F  2CAC               	goto	l6793
  5881  0440  3002               	movlw	2
  5882  0441  065B               	xorwf	main@doorStatus^(0+384),w
  5883  0442  1903               	btfsc	3,2
  5884  0443  2CAC               	goto	l6793
  5885                           
  5886                           ;main.c: 122: {
  5887                           ;main.c: 123: Wireless_wake();
  5888  0444  3195  25CB  3183   	fcall	_Wireless_wake
  5889                           
  5890                           ;main.c: 124: if(doorStatus==DOOR_OPEN)
  5891  0447  0023               	movlb	3	; select bank3
  5892  0448  035B               	decf	main@doorStatus^(0+384),w
  5893  0449  1D03               	btfss	3,2
  5894  044A  2C4E               	goto	l6783
  5895                           
  5896                           ;main.c: 125: {
  5897                           ;main.c: 126: Wireless_packageData(doorStatus,0,BMP_readTemperature());
  5898  044B  0021               	movlb	1	; select bank1
  5899  044C  01BA               	clrf	Wireless_packageData@openTime^(0+128)
  5900  044D  2C7D               	goto	L4
  5901  044E                     l6783:	
  5902                           ;main.c: 131: }
  5903                           
  5904                           ;main.c: 127: doorOpenTime= Timeout_getGlobalCounter();
  5905                           
  5906                           
  5907                           ;main.c: 132: else
  5908                           ;main.c: 133: {
  5909                           ;main.c: 134: dur = Timeout_getGlobalCounter() - doorOpenTime;
  5910  044E  0957               	comf	main@doorOpenTime^(0+384),w
  5911  044F  0021               	movlb	1	; select bank1
  5912  0450  00C8               	movwf	??_main^(0+128)
  5913  0451  0023               	movlb	3	; select bank3
  5914  0452  0958               	comf	(main@doorOpenTime+1)^(0+384),w
  5915  0453  0021               	movlb	1	; select bank1
  5916  0454  00C9               	movwf	(??_main^(0+128)+1)
  5917  0455  0AC8               	incf	??_main^(0+128),f
  5918  0456  1903               	skipnz
  5919  0457  0AC9               	incf	(??_main^(0+128)+1),f
  5920  0458  3193  239E  3183   	fcall	_Timeout_getGlobalCounter
  5921  045B  0021               	movlb	1	; select bank1
  5922  045C  0848               	movf	??_main^(0+128),w
  5923  045D  0020               	movlb	0	; select bank0
  5924  045E  0721               	addwf	?_Timeout_getGlobalCounter,w
  5925  045F  0023               	movlb	3	; select bank3
  5926  0460  00D5               	movwf	main@dur^(0+384)
  5927  0461  0021               	movlb	1	; select bank1
  5928  0462  0849               	movf	(??_main+1)^(0+128),w
  5929  0463  0020               	movlb	0	; select bank0
  5930  0464  3D22               	addwfc	?_Timeout_getGlobalCounter+1,w
  5931  0465  0023               	movlb	3	; select bank3
  5932  0466  00D6               	movwf	(main@dur+1)^(0+384)
  5933                           
  5934                           ;main.c: 135: Wireless_packageData(doorStatus,dur/1000,BMP_readTemperature());
  5935  0467  30E8               	movlw	232
  5936  0468  0020               	movlb	0	; select bank0
  5937  0469  00A1               	movwf	___lwdiv@divisor
  5938  046A  3003               	movlw	3
  5939  046B  00A2               	movwf	___lwdiv@divisor+1
  5940  046C  0023               	movlb	3	; select bank3
  5941  046D  0856               	movf	(main@dur+1)^(0+384),w
  5942  046E  0020               	movlb	0	; select bank0
  5943  046F  00A4               	movwf	___lwdiv@dividend+1
  5944  0470  0023               	movlb	3	; select bank3
  5945  0471  0855               	movf	main@dur^(0+384),w
  5946  0472  0020               	movlb	0	; select bank0
  5947  0473  00A3               	movwf	___lwdiv@dividend
  5948  0474  3188  2002  3183   	fcall	___lwdiv
  5949  0477  0020               	movlb	0	; select bank0
  5950  0478  0821               	movf	?___lwdiv,w
  5951  0479  0021               	movlb	1	; select bank1
  5952  047A  00C8               	movwf	??_main^(0+128)
  5953  047B  0848               	movf	??_main^(0+128),w
  5954  047C  00BA               	movwf	Wireless_packageData@openTime^(0+128)
  5955  047D                     L4:	
  5956  047D  3180  2077  3183   	fcall	_BMP_readTemperature
  5957  0480  0021               	movlb	1	; select bank1
  5958  0481  0826               	movf	?_BMP_readTemperature^(0+128),w
  5959  0482  00BB               	movwf	Wireless_packageData@tempC^(0+128)
  5960  0483  0827               	movf	(?_BMP_readTemperature+1)^(0+128),w
  5961  0484  00BC               	movwf	(Wireless_packageData@tempC+1)^(0+128)
  5962  0485  0828               	movf	(?_BMP_readTemperature+2)^(0+128),w
  5963  0486  00BD               	movwf	(Wireless_packageData@tempC+2)^(0+128)
  5964  0487  0023               	movlb	3	; select bank3
  5965  0488  085B               	movf	main@doorStatus^(0+384),w
  5966  0489  318F  2724  3183   	fcall	_Wireless_packageData
  5967                           
  5968                           ;main.c: 136: doorOpenTime = Timeout_getGlobalCounter();
  5969  048C  3193  239E  3183   	fcall	_Timeout_getGlobalCounter
  5970  048F  0020               	movlb	0	; select bank0
  5971  0490  0824               	movf	?_Timeout_getGlobalCounter+3,w
  5972  0491  0023               	movlb	3	; select bank3
  5973  0492  00DA               	movwf	(main@doorOpenTime+3)^(0+384)
  5974  0493  0020               	movlb	0	; select bank0
  5975  0494  0823               	movf	?_Timeout_getGlobalCounter+2,w
  5976  0495  0023               	movlb	3	; select bank3
  5977  0496  00D9               	movwf	(main@doorOpenTime+2)^(0+384)
  5978  0497  0020               	movlb	0	; select bank0
  5979  0498  0822               	movf	?_Timeout_getGlobalCounter+1,w
  5980  0499  0023               	movlb	3	; select bank3
  5981  049A  00D8               	movwf	(main@doorOpenTime+1)^(0+384)
  5982  049B  0020               	movlb	0	; select bank0
  5983  049C  0821               	movf	?_Timeout_getGlobalCounter,w
  5984  049D  0023               	movlb	3	; select bank3
  5985  049E  00D7               	movwf	main@doorOpenTime^(0+384)
  5986                           
  5987                           ;main.c: 137: }
  5988                           ;main.c: 138: Wireless_sleep();
  5989  049F  3194  2469  3183   	fcall	_Wireless_sleep
  5990                           
  5991                           ;main.c: 139: doorClosedUpdateCounter=0;
  5992  04A2  3000               	movlw	0
  5993  04A3  0023               	movlb	3	; select bank3
  5994  04A4  00D4               	movwf	(main@doorClosedUpdateCounter+3)^(0+384)
  5995  04A5  3000               	movlw	0
  5996  04A6  00D3               	movwf	(main@doorClosedUpdateCounter+2)^(0+384)
  5997  04A7  3000               	movlw	0
  5998  04A8  00D2               	movwf	(main@doorClosedUpdateCounter+1)^(0+384)
  5999  04A9  3000               	movlw	0
  6000  04AA  00D1               	movwf	main@doorClosedUpdateCounter^(0+384)
  6001                           
  6002                           ;main.c: 140: }
  6003  04AB  2D34               	goto	l6823
  6004  04AC                     l6793:	
  6005                           
  6006                           ;main.c: 141: else if(doorStatus==DOOR_OPEN)
  6007  04AC  035B               	decf	main@doorStatus^(0+384),w
  6008  04AD  1D03               	btfss	3,2
  6009  04AE  2CE9               	goto	l6809
  6010                           
  6011                           ;main.c: 142: {
  6012                           ;main.c: 143: dur = Timeout_getGlobalCounter()-doorOpenTime;
  6013  04AF  0957               	comf	main@doorOpenTime^(0+384),w
  6014  04B0  0021               	movlb	1	; select bank1
  6015  04B1  00C8               	movwf	??_main^(0+128)
  6016  04B2  0023               	movlb	3	; select bank3
  6017  04B3  0958               	comf	(main@doorOpenTime+1)^(0+384),w
  6018  04B4  0021               	movlb	1	; select bank1
  6019  04B5  00C9               	movwf	(??_main^(0+128)+1)
  6020  04B6  0AC8               	incf	??_main^(0+128),f
  6021  04B7  1903               	skipnz
  6022  04B8  0AC9               	incf	(??_main^(0+128)+1),f
  6023  04B9  3193  239E  3183   	fcall	_Timeout_getGlobalCounter
  6024  04BC  0021               	movlb	1	; select bank1
  6025  04BD  0848               	movf	??_main^(0+128),w
  6026  04BE  0020               	movlb	0	; select bank0
  6027  04BF  0721               	addwf	?_Timeout_getGlobalCounter,w
  6028  04C0  0023               	movlb	3	; select bank3
  6029  04C1  00D5               	movwf	main@dur^(0+384)
  6030  04C2  0021               	movlb	1	; select bank1
  6031  04C3  0849               	movf	(??_main+1)^(0+128),w
  6032  04C4  0020               	movlb	0	; select bank0
  6033  04C5  3D22               	addwfc	?_Timeout_getGlobalCounter+1,w
  6034  04C6  0023               	movlb	3	; select bank3
  6035  04C7  00D6               	movwf	(main@dur+1)^(0+384)
  6036                           
  6037                           ;main.c: 144: if(dur>=60000)
  6038  04C8  30EA               	movlw	234
  6039  04C9  0256               	subwf	(main@dur+1)^(0+384),w
  6040  04CA  3060               	movlw	96
  6041  04CB  1903               	skipnz
  6042  04CC  0255               	subwf	main@dur^(0+384),w
  6043  04CD  1C03               	skipc
  6044  04CE  2D34               	goto	l6823
  6045                           
  6046                           ;main.c: 145: {
  6047                           ;main.c: 146: Wireless_wake();
  6048  04CF  3195  25CB  3183   	fcall	_Wireless_wake
  6049                           
  6050                           ;main.c: 147: Wireless_packageData(doorStatus,dur/1000,BMP_readTemperature());
  6051  04D2  30E8               	movlw	232
  6052  04D3  0020               	movlb	0	; select bank0
  6053  04D4  00A1               	movwf	___lwdiv@divisor
  6054  04D5  3003               	movlw	3
  6055  04D6  00A2               	movwf	___lwdiv@divisor+1
  6056  04D7  0023               	movlb	3	; select bank3
  6057  04D8  0856               	movf	(main@dur+1)^(0+384),w
  6058  04D9  0020               	movlb	0	; select bank0
  6059  04DA  00A4               	movwf	___lwdiv@dividend+1
  6060  04DB  0023               	movlb	3	; select bank3
  6061  04DC  0855               	movf	main@dur^(0+384),w
  6062  04DD  0020               	movlb	0	; select bank0
  6063  04DE  00A3               	movwf	___lwdiv@dividend
  6064  04DF  3188  2002  3183   	fcall	___lwdiv
  6065  04E2  0020               	movlb	0	; select bank0
  6066  04E3  0821               	movf	?___lwdiv,w
  6067  04E4  0021               	movlb	1	; select bank1
  6068  04E5  00C8               	movwf	??_main^(0+128)
  6069  04E6  0848               	movf	??_main^(0+128),w
  6070  04E7  00BA               	movwf	Wireless_packageData@openTime^(0+128)
  6071  04E8  2D06               	goto	L5
  6072  04E9                     l6809:	
  6073                           ;main.c: 151: }
  6074                           ;main.c: 153: }
  6075                           
  6076                           ;main.c: 150: doorOpenTime=Timeout_getGlobalCounter();
  6077                           
  6078                           ;main.c: 149: doorClosedUpdateCounter=0;
  6079                           
  6080                           ;main.c: 148: Wireless_sleep();
  6081                           
  6082                           
  6083                           ;main.c: 154: else if(doorClosedUpdateCounter>=sensorUpdatePeriod)
  6084  04E9  0022               	movlb	2	; select bank2
  6085  04EA  086D               	movf	(_sensorUpdatePeriod+3)^(0+256),w
  6086  04EB  0023               	movlb	3	; select bank3
  6087  04EC  0254               	subwf	(main@doorClosedUpdateCounter+3)^(0+384),w
  6088  04ED  1D03               	skipz
  6089  04EE  2CFF               	goto	u6885
  6090  04EF  0022               	movlb	2	; select bank2
  6091  04F0  086C               	movf	(_sensorUpdatePeriod+2)^(0+256),w
  6092  04F1  0023               	movlb	3	; select bank3
  6093  04F2  0253               	subwf	(main@doorClosedUpdateCounter+2)^(0+384),w
  6094  04F3  1D03               	skipz
  6095  04F4  2CFF               	goto	u6885
  6096  04F5  0022               	movlb	2	; select bank2
  6097  04F6  086B               	movf	(_sensorUpdatePeriod+1)^(0+256),w
  6098  04F7  0023               	movlb	3	; select bank3
  6099  04F8  0252               	subwf	(main@doorClosedUpdateCounter+1)^(0+384),w
  6100  04F9  1D03               	skipz
  6101  04FA  2CFF               	goto	u6885
  6102  04FB  0022               	movlb	2	; select bank2
  6103  04FC  086A               	movf	_sensorUpdatePeriod^(0+256),w
  6104  04FD  0023               	movlb	3	; select bank3
  6105  04FE  0251               	subwf	main@doorClosedUpdateCounter^(0+384),w
  6106  04FF                     u6885:	
  6107  04FF  1C03               	skipc
  6108  0500  2D21               	goto	l6821
  6109                           
  6110                           ;main.c: 155: {
  6111                           ;main.c: 156: Wireless_wake();
  6112  0501  3195  25CB  3183   	fcall	_Wireless_wake
  6113                           
  6114                           ;main.c: 157: Wireless_packageData(doorStatus,0,BMP_readTemperature());
  6115  0504  0021               	movlb	1	; select bank1
  6116  0505  01BA               	clrf	Wireless_packageData@openTime^(0+128)
  6117  0506                     L5:	
  6118  0506  3180  2077  3183   	fcall	_BMP_readTemperature
  6119  0509  0021               	movlb	1	; select bank1
  6120  050A  0826               	movf	?_BMP_readTemperature^(0+128),w
  6121  050B  00BB               	movwf	Wireless_packageData@tempC^(0+128)
  6122  050C  0827               	movf	(?_BMP_readTemperature+1)^(0+128),w
  6123  050D  00BC               	movwf	(Wireless_packageData@tempC+1)^(0+128)
  6124  050E  0828               	movf	(?_BMP_readTemperature+2)^(0+128),w
  6125  050F  00BD               	movwf	(Wireless_packageData@tempC+2)^(0+128)
  6126  0510  0023               	movlb	3	; select bank3
  6127  0511  085B               	movf	main@doorStatus^(0+384),w
  6128  0512  318F  2724  3183   	fcall	_Wireless_packageData
  6129                           
  6130                           ;main.c: 158: Wireless_sleep();
  6131  0515  3194  2469  3183   	fcall	_Wireless_sleep
  6132                           
  6133                           ;main.c: 159: doorClosedUpdateCounter=0;
  6134  0518  3000               	movlw	0
  6135  0519  0023               	movlb	3	; select bank3
  6136  051A  00D4               	movwf	(main@doorClosedUpdateCounter+3)^(0+384)
  6137  051B  3000               	movlw	0
  6138  051C  00D3               	movwf	(main@doorClosedUpdateCounter+2)^(0+384)
  6139  051D  3000               	movlw	0
  6140  051E  00D2               	movwf	(main@doorClosedUpdateCounter+1)^(0+384)
  6141  051F  3000               	movlw	0
  6142  0520  00D1               	movwf	main@doorClosedUpdateCounter^(0+384)
  6143  0521                     l6821:	
  6144                           ;main.c: 161: }
  6145                           
  6146                           ;main.c: 160: doorOpenTime = Timeout_getGlobalCounter();
  6147                           
  6148                           
  6149                           ;main.c: 162: else
  6150                           ;main.c: 163: {
  6151                           ;main.c: 165: doorOpenTime=Timeout_getGlobalCounter();
  6152  0521  3193  239E  3183   	fcall	_Timeout_getGlobalCounter
  6153  0524  0020               	movlb	0	; select bank0
  6154  0525  0824               	movf	?_Timeout_getGlobalCounter+3,w
  6155  0526  0023               	movlb	3	; select bank3
  6156  0527  00DA               	movwf	(main@doorOpenTime+3)^(0+384)
  6157  0528  0020               	movlb	0	; select bank0
  6158  0529  0823               	movf	?_Timeout_getGlobalCounter+2,w
  6159  052A  0023               	movlb	3	; select bank3
  6160  052B  00D9               	movwf	(main@doorOpenTime+2)^(0+384)
  6161  052C  0020               	movlb	0	; select bank0
  6162  052D  0822               	movf	?_Timeout_getGlobalCounter+1,w
  6163  052E  0023               	movlb	3	; select bank3
  6164  052F  00D8               	movwf	(main@doorOpenTime+1)^(0+384)
  6165  0530  0020               	movlb	0	; select bank0
  6166  0531  0821               	movf	?_Timeout_getGlobalCounter,w
  6167  0532  0023               	movlb	3	; select bank3
  6168  0533  00D7               	movwf	main@doorOpenTime^(0+384)
  6169  0534                     l6823:	
  6170                           
  6171                           ;main.c: 166: }
  6172                           ;main.c: 168: prevDoorStatus=doorStatus;
  6173  0534  085B               	movf	main@doorStatus^(0+384),w
  6174  0535  0021               	movlb	1	; select bank1
  6175  0536  00C8               	movwf	??_main^(0+128)
  6176  0537  0848               	movf	??_main^(0+128),w
  6177  0538  0023               	movlb	3	; select bank3
  6178  0539  00D0               	movwf	main@prevDoorStatus^(0+384)
  6179                           
  6180                           ;main.c: 169: doorClosedUpdateCounter+=10000;
  6181  053A  3010               	movlw	16
  6182  053B  07D1               	addwf	main@doorClosedUpdateCounter^(0+384),f
  6183  053C  3027               	movlw	39
  6184  053D  3DD2               	addwfc	(main@doorClosedUpdateCounter+1)^(0+384),f
  6185  053E  3000               	movlw	0
  6186  053F  3DD3               	addwfc	(main@doorClosedUpdateCounter+2)^(0+384),f
  6187  0540  3000               	movlw	0
  6188  0541  3DD4               	addwfc	(main@doorClosedUpdateCounter+3)^(0+384),f
  6189  0542  0063               	sleep	;# 
  6190  0543  2BD6               	goto	l6753
  6191  0544                     __end_of_main:	
  6192                           
  6193                           	psect	text1
  6194  12B8                     __ptext1:	
  6195 ;; *************** function _setSleepTime *****************
  6196 ;; Defined at:
  6197 ;;		line 7 in file "common.c"
  6198 ;; Parameters:    Size  Location     Type
  6199 ;;  timeSec         2    1[BANK0 ] unsigned short 
  6200 ;; Auto vars:     Size  Location     Type
  6201 ;;		None
  6202 ;; Return value:  Size  Location     Type
  6203 ;;                  1    wreg      void 
  6204 ;; Registers used:
  6205 ;;		wreg
  6206 ;; Tracked objects:
  6207 ;;		On entry : 0/0
  6208 ;;		On exit  : 0/0
  6209 ;;		Unchanged: 0/0
  6210 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6211 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6212 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6213 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6214 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6215 ;;Total ram usage:        2 bytes
  6216 ;; Hardware stack levels used:    1
  6217 ;; Hardware stack levels required when called:    4
  6218 ;; This function calls:
  6219 ;;		Nothing
  6220 ;; This function is called by:
  6221 ;;		_main
  6222 ;; This function uses a non-reentrant model
  6223 ;;
  6224                           
  6225                           
  6226                           ;psect for function _setSleepTime
  6227  12B8                     _setSleepTime:	
  6228                           
  6229                           ;common.c: 9: timer1ReloadVal=0x6000;
  6230                           
  6231                           ;incstack = 0
  6232                           ; Regs used in _setSleepTime: [wreg]
  6233  12B8  3000               	movlw	0
  6234  12B9  00FC               	movwf	_timer1ReloadVal	;volatile
  6235  12BA  3060               	movlw	96
  6236  12BB  00FD               	movwf	_timer1ReloadVal+1	;volatile
  6237  12BC  0008               	return
  6238  12BD                     __end_of_setSleepTime:	
  6239                           
  6240                           	psect	text2
  6241  0802                     __ptext2:	
  6242 ;; *************** function ___lwdiv *****************
  6243 ;; Defined at:
  6244 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\lwdiv.c"
  6245 ;; Parameters:    Size  Location     Type
  6246 ;;  divisor         2    1[BANK0 ] unsigned int 
  6247 ;;  dividend        2    3[BANK0 ] unsigned int 
  6248 ;; Auto vars:     Size  Location     Type
  6249 ;;  quotient        2    7[BANK0 ] unsigned int 
  6250 ;;  counter         1    6[BANK0 ] unsigned char 
  6251 ;; Return value:  Size  Location     Type
  6252 ;;                  2    1[BANK0 ] unsigned int 
  6253 ;; Registers used:
  6254 ;;		wreg, status,2, status,0
  6255 ;; Tracked objects:
  6256 ;;		On entry : 0/0
  6257 ;;		On exit  : 0/0
  6258 ;;		Unchanged: 0/0
  6259 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6260 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6261 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6262 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6263 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6264 ;;Total ram usage:        8 bytes
  6265 ;; Hardware stack levels used:    1
  6266 ;; Hardware stack levels required when called:    4
  6267 ;; This function calls:
  6268 ;;		Nothing
  6269 ;; This function is called by:
  6270 ;;		_main
  6271 ;; This function uses a non-reentrant model
  6272 ;;
  6273                           
  6274                           
  6275                           ;psect for function ___lwdiv
  6276  0802                     ___lwdiv:	
  6277                           
  6278                           ;incstack = 0
  6279                           ; Regs used in ___lwdiv: [wreg+status,2+status,0]
  6280  0802  0020               	movlb	0	; select bank0
  6281  0803  01A7               	clrf	___lwdiv@quotient
  6282  0804  01A8               	clrf	___lwdiv@quotient+1
  6283  0805  0821               	movf	___lwdiv@divisor,w
  6284  0806  0422               	iorwf	___lwdiv@divisor+1,w
  6285  0807  1903               	btfsc	3,2
  6286  0808  2832               	goto	l6655
  6287  0809  01A6               	clrf	___lwdiv@counter
  6288  080A  0AA6               	incf	___lwdiv@counter,f
  6289  080B                     l6643:	
  6290  080B  1BA2               	btfsc	___lwdiv@divisor+1,7
  6291  080C  2817               	goto	l6645
  6292  080D  3001               	movlw	1
  6293  080E                     u6595:	
  6294  080E  35A1               	lslf	___lwdiv@divisor,f
  6295  080F  0DA2               	rlf	___lwdiv@divisor+1,f
  6296  0810  0B89               	decfsz	9,f
  6297  0811  280E               	goto	u6595
  6298  0812  3001               	movlw	1
  6299  0813  00A5               	movwf	??___lwdiv
  6300  0814  0825               	movf	??___lwdiv,w
  6301  0815  07A6               	addwf	___lwdiv@counter,f
  6302  0816  280B               	goto	l6643
  6303  0817                     l6645:	
  6304  0817  3001               	movlw	1
  6305  0818                     u6615:	
  6306  0818  35A7               	lslf	___lwdiv@quotient,f
  6307  0819  0DA8               	rlf	___lwdiv@quotient+1,f
  6308  081A  0B89               	decfsz	9,f
  6309  081B  2818               	goto	u6615
  6310  081C  0822               	movf	___lwdiv@divisor+1,w
  6311  081D  0224               	subwf	___lwdiv@dividend+1,w
  6312  081E  1D03               	skipz
  6313  081F  2822               	goto	u6625
  6314  0820  0821               	movf	___lwdiv@divisor,w
  6315  0821  0223               	subwf	___lwdiv@dividend,w
  6316  0822                     u6625:	
  6317  0822  1C03               	skipc
  6318  0823  2829               	goto	l6651
  6319  0824  0821               	movf	___lwdiv@divisor,w
  6320  0825  02A3               	subwf	___lwdiv@dividend,f
  6321  0826  0822               	movf	___lwdiv@divisor+1,w
  6322  0827  3BA4               	subwfb	___lwdiv@dividend+1,f
  6323  0828  1427               	bsf	___lwdiv@quotient,0
  6324  0829                     l6651:	
  6325  0829  3001               	movlw	1
  6326  082A                     u6635:	
  6327  082A  36A2               	lsrf	___lwdiv@divisor+1,f
  6328  082B  0CA1               	rrf	___lwdiv@divisor,f
  6329  082C  0B89               	decfsz	9,f
  6330  082D  282A               	goto	u6635
  6331  082E  3001               	movlw	1
  6332  082F  02A6               	subwf	___lwdiv@counter,f
  6333  0830  1D03               	btfss	3,2
  6334  0831  2817               	goto	l6645
  6335  0832                     l6655:	
  6336  0832  0828               	movf	___lwdiv@quotient+1,w
  6337  0833  00A2               	movwf	?___lwdiv+1
  6338  0834  0827               	movf	___lwdiv@quotient,w
  6339  0835  00A1               	movwf	?___lwdiv
  6340  0836  0008               	return
  6341  0837                     __end_of___lwdiv:	
  6342                           
  6343                           	psect	text3
  6344  094C                     __ptext3:	
  6345 ;; *************** function ___lldiv *****************
  6346 ;; Defined at:
  6347 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\lldiv.c"
  6348 ;; Parameters:    Size  Location     Type
  6349 ;;  divisor         4    1[BANK0 ] unsigned long 
  6350 ;;  dividend        4    5[BANK0 ] unsigned long 
  6351 ;; Auto vars:     Size  Location     Type
  6352 ;;  quotient        4   10[BANK0 ] unsigned long 
  6353 ;;  counter         1   14[BANK0 ] unsigned char 
  6354 ;; Return value:  Size  Location     Type
  6355 ;;                  4    1[BANK0 ] unsigned long 
  6356 ;; Registers used:
  6357 ;;		wreg, status,2, status,0
  6358 ;; Tracked objects:
  6359 ;;		On entry : 0/0
  6360 ;;		On exit  : 0/0
  6361 ;;		Unchanged: 0/0
  6362 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6363 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6364 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6365 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6366 ;;      Totals:         0      14       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6367 ;;Total ram usage:       14 bytes
  6368 ;; Hardware stack levels used:    1
  6369 ;; Hardware stack levels required when called:    4
  6370 ;; This function calls:
  6371 ;;		Nothing
  6372 ;; This function is called by:
  6373 ;;		_main
  6374 ;; This function uses a non-reentrant model
  6375 ;;
  6376                           
  6377                           
  6378                           ;psect for function ___lldiv
  6379  094C                     ___lldiv:	
  6380                           
  6381                           ;incstack = 0
  6382                           ; Regs used in ___lldiv: [wreg+status,2+status,0]
  6383  094C  3000               	movlw	0
  6384  094D  0020               	movlb	0	; select bank0
  6385  094E  00AD               	movwf	___lldiv@quotient+3
  6386  094F  3000               	movlw	0
  6387  0950  00AC               	movwf	___lldiv@quotient+2
  6388  0951  3000               	movlw	0
  6389  0952  00AB               	movwf	___lldiv@quotient+1
  6390  0953  3000               	movlw	0
  6391  0954  00AA               	movwf	___lldiv@quotient
  6392  0955  0824               	movf	___lldiv@divisor+3,w
  6393  0956  0423               	iorwf	___lldiv@divisor+2,w
  6394  0957  0422               	iorwf	___lldiv@divisor+1,w
  6395  0958  0421               	iorwf	___lldiv@divisor,w
  6396  0959  1903               	skipnz
  6397  095A  2996               	goto	l6629
  6398  095B  01AE               	clrf	___lldiv@counter
  6399  095C  0AAE               	incf	___lldiv@counter,f
  6400  095D                     l6615:	
  6401  095D  1BA4               	btfsc	___lldiv@divisor+3,7
  6402  095E  296B               	goto	l6617
  6403  095F  3001               	movlw	1
  6404  0960                     u6525:	
  6405  0960  35A1               	lslf	___lldiv@divisor,f
  6406  0961  0DA2               	rlf	___lldiv@divisor+1,f
  6407  0962  0DA3               	rlf	___lldiv@divisor+2,f
  6408  0963  0DA4               	rlf	___lldiv@divisor+3,f
  6409  0964  0B89               	decfsz	9,f
  6410  0965  2960               	goto	u6525
  6411  0966  3001               	movlw	1
  6412  0967  00A9               	movwf	??___lldiv
  6413  0968  0829               	movf	??___lldiv,w
  6414  0969  07AE               	addwf	___lldiv@counter,f
  6415  096A  295D               	goto	l6615
  6416  096B                     l6617:	
  6417  096B  3001               	movlw	1
  6418  096C                     u6545:	
  6419  096C  35AA               	lslf	___lldiv@quotient,f
  6420  096D  0DAB               	rlf	___lldiv@quotient+1,f
  6421  096E  0DAC               	rlf	___lldiv@quotient+2,f
  6422  096F  0DAD               	rlf	___lldiv@quotient+3,f
  6423  0970  0B89               	decfsz	9,f
  6424  0971  296C               	goto	u6545
  6425  0972  0824               	movf	___lldiv@divisor+3,w
  6426  0973  0228               	subwf	___lldiv@dividend+3,w
  6427  0974  1D03               	skipz
  6428  0975  2980               	goto	u6555
  6429  0976  0823               	movf	___lldiv@divisor+2,w
  6430  0977  0227               	subwf	___lldiv@dividend+2,w
  6431  0978  1D03               	skipz
  6432  0979  2980               	goto	u6555
  6433  097A  0822               	movf	___lldiv@divisor+1,w
  6434  097B  0226               	subwf	___lldiv@dividend+1,w
  6435  097C  1D03               	skipz
  6436  097D  2980               	goto	u6555
  6437  097E  0821               	movf	___lldiv@divisor,w
  6438  097F  0225               	subwf	___lldiv@dividend,w
  6439  0980                     u6555:	
  6440  0980  1C03               	skipc
  6441  0981  298B               	goto	l6625
  6442  0982  0821               	movf	___lldiv@divisor,w
  6443  0983  02A5               	subwf	___lldiv@dividend,f
  6444  0984  0822               	movf	___lldiv@divisor+1,w
  6445  0985  3BA6               	subwfb	___lldiv@dividend+1,f
  6446  0986  0823               	movf	___lldiv@divisor+2,w
  6447  0987  3BA7               	subwfb	___lldiv@dividend+2,f
  6448  0988  0824               	movf	___lldiv@divisor+3,w
  6449  0989  3BA8               	subwfb	___lldiv@dividend+3,f
  6450  098A  142A               	bsf	___lldiv@quotient,0
  6451  098B                     l6625:	
  6452  098B  3001               	movlw	1
  6453  098C                     u6565:	
  6454  098C  36A4               	lsrf	___lldiv@divisor+3,f
  6455  098D  0CA3               	rrf	___lldiv@divisor+2,f
  6456  098E  0CA2               	rrf	___lldiv@divisor+1,f
  6457  098F  0CA1               	rrf	___lldiv@divisor,f
  6458  0990  0B89               	decfsz	9,f
  6459  0991  298C               	goto	u6565
  6460  0992  3001               	movlw	1
  6461  0993  02AE               	subwf	___lldiv@counter,f
  6462  0994  1D03               	btfss	3,2
  6463  0995  296B               	goto	l6617
  6464  0996                     l6629:	
  6465  0996  082D               	movf	___lldiv@quotient+3,w
  6466  0997  00A4               	movwf	?___lldiv+3
  6467  0998  082C               	movf	___lldiv@quotient+2,w
  6468  0999  00A3               	movwf	?___lldiv+2
  6469  099A  082B               	movf	___lldiv@quotient+1,w
  6470  099B  00A2               	movwf	?___lldiv+1
  6471  099C  082A               	movf	___lldiv@quotient,w
  6472  099D  00A1               	movwf	?___lldiv
  6473  099E  0008               	return
  6474  099F                     __end_of___lldiv:	
  6475                           
  6476                           	psect	text4
  6477  15CB                     __ptext4:	
  6478 ;; *************** function _Wireless_wake *****************
  6479 ;; Defined at:
  6480 ;;		line 188 in file "wireless.c"
  6481 ;; Parameters:    Size  Location     Type
  6482 ;;		None
  6483 ;; Auto vars:     Size  Location     Type
  6484 ;;  reg             1   16[BANK0 ] unsigned char 
  6485 ;; Return value:  Size  Location     Type
  6486 ;;                  1    wreg      void 
  6487 ;; Registers used:
  6488 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6489 ;; Tracked objects:
  6490 ;;		On entry : 0/0
  6491 ;;		On exit  : 0/0
  6492 ;;		Unchanged: 0/0
  6493 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6494 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6495 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6496 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6497 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6498 ;;Total ram usage:        2 bytes
  6499 ;; Hardware stack levels used:    1
  6500 ;; Hardware stack levels required when called:    8
  6501 ;; This function calls:
  6502 ;;		_RF_ReadRegisterData
  6503 ;;		_RF_WriteRegister
  6504 ;; This function is called by:
  6505 ;;		_main
  6506 ;; This function uses a non-reentrant model
  6507 ;;
  6508                           
  6509                           
  6510                           ;psect for function _Wireless_wake
  6511  15CB                     _Wireless_wake:	
  6512                           
  6513                           ;wireless.c: 190: u8 reg;
  6514                           ;wireless.c: 192: RF_ReadRegisterData(0x00 , &reg, 1);
  6515                           
  6516                           ;incstack = 0
  6517                           ; Regs used in _Wireless_wake: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  6518  15CB  3030               	movlw	(low (Wireless_wake@reg| 0))& (0+255)
  6519  15CC  0020               	movlb	0	; select bank0
  6520  15CD  00AF               	movwf	??_Wireless_wake
  6521  15CE  082F               	movf	??_Wireless_wake,w
  6522  15CF  00AA               	movwf	RF_ReadRegisterData@buf
  6523  15D0  01AB               	clrf	RF_ReadRegisterData@bufSize
  6524  15D1  0AAB               	incf	RF_ReadRegisterData@bufSize,f
  6525  15D2  3000               	movlw	0
  6526  15D3  3195  25AE  3195   	fcall	_RF_ReadRegisterData
  6527                           
  6528                           ;wireless.c: 193: reg|=0b00000010;
  6529  15D6  0020               	movlb	0	; select bank0
  6530  15D7  14B0               	bsf	Wireless_wake@reg,1
  6531                           
  6532                           ;wireless.c: 194: RF_WriteRegister(0x00,reg);
  6533  15D8  0830               	movf	Wireless_wake@reg,w
  6534  15D9  00AF               	movwf	??_Wireless_wake
  6535  15DA  082F               	movf	??_Wireless_wake,w
  6536  15DB  00A3               	movwf	RF_WriteRegister@val
  6537  15DC  3000               	movlw	0
  6538  15DD  3194  2410  3195   	fcall	_RF_WriteRegister
  6539                           
  6540                           ;wireless.c: 195: _delay((unsigned long)((2)*(8000000/4000.0)));
  6541  15E0  3006               	movlw	6
  6542  15E1  0020               	movlb	0	; select bank0
  6543  15E2  00AF               	movwf	??_Wireless_wake
  6544  15E3  3030               	movlw	48
  6545  15E4                     u7197:	
  6546  15E4  0B89               	decfsz	9,f
  6547  15E5  2DE4               	goto	u7197
  6548  15E6  0BAF               	decfsz	??_Wireless_wake,f
  6549  15E7  2DE4               	goto	u7197
  6550  15E8  0000               	nop
  6551  15E9  0008               	return
  6552  15EA                     __end_of_Wireless_wake:	
  6553                           
  6554                           	psect	text5
  6555  1469                     __ptext5:	
  6556 ;; *************** function _Wireless_sleep *****************
  6557 ;; Defined at:
  6558 ;;		line 178 in file "wireless.c"
  6559 ;; Parameters:    Size  Location     Type
  6560 ;;		None
  6561 ;; Auto vars:     Size  Location     Type
  6562 ;;  reg             1   16[BANK0 ] unsigned char 
  6563 ;; Return value:  Size  Location     Type
  6564 ;;                  1    wreg      void 
  6565 ;; Registers used:
  6566 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6567 ;; Tracked objects:
  6568 ;;		On entry : 0/0
  6569 ;;		On exit  : 0/0
  6570 ;;		Unchanged: 0/0
  6571 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6572 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6573 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6574 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6575 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6576 ;;Total ram usage:        2 bytes
  6577 ;; Hardware stack levels used:    1
  6578 ;; Hardware stack levels required when called:    8
  6579 ;; This function calls:
  6580 ;;		_RF_ReadRegisterData
  6581 ;;		_RF_WriteRegister
  6582 ;; This function is called by:
  6583 ;;		_main
  6584 ;; This function uses a non-reentrant model
  6585 ;;
  6586                           
  6587                           
  6588                           ;psect for function _Wireless_sleep
  6589  1469                     _Wireless_sleep:	
  6590                           
  6591                           ;wireless.c: 180: u8 reg;
  6592                           ;wireless.c: 182: RF_ReadRegisterData(0x00 , &reg, 1);
  6593                           
  6594                           ;incstack = 0
  6595                           ; Regs used in _Wireless_sleep: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  6596  1469  3030               	movlw	(low (Wireless_sleep@reg| 0))& (0+255)
  6597  146A  0020               	movlb	0	; select bank0
  6598  146B  00AF               	movwf	??_Wireless_sleep
  6599  146C  082F               	movf	??_Wireless_sleep,w
  6600  146D  00AA               	movwf	RF_ReadRegisterData@buf
  6601  146E  01AB               	clrf	RF_ReadRegisterData@bufSize
  6602  146F  0AAB               	incf	RF_ReadRegisterData@bufSize,f
  6603  1470  3000               	movlw	0
  6604  1471  3195  25AE  3194   	fcall	_RF_ReadRegisterData
  6605                           
  6606                           ;wireless.c: 183: reg&=0b11111101;
  6607  1474  30FD               	movlw	253
  6608  1475  0020               	movlb	0	; select bank0
  6609  1476  00AF               	movwf	??_Wireless_sleep
  6610  1477  082F               	movf	??_Wireless_sleep,w
  6611  1478  05B0               	andwf	Wireless_sleep@reg,f
  6612                           
  6613                           ;wireless.c: 184: RF_WriteRegister(0x00,reg);
  6614  1479  0830               	movf	Wireless_sleep@reg,w
  6615  147A  00AF               	movwf	??_Wireless_sleep
  6616  147B  082F               	movf	??_Wireless_sleep,w
  6617  147C  00A3               	movwf	RF_WriteRegister@val
  6618  147D  3000               	movlw	0
  6619  147E  3194  2410         	fcall	_RF_WriteRegister
  6620  1480  0008               	return
  6621  1481                     __end_of_Wireless_sleep:	
  6622                           
  6623                           	psect	text6
  6624  0F24                     __ptext6:	
  6625 ;; *************** function _Wireless_packageData *****************
  6626 ;; Defined at:
  6627 ;;		line 140 in file "wireless.c"
  6628 ;; Parameters:    Size  Location     Type
  6629 ;;  status          1    wreg     enum E3332
  6630 ;;  openTime        1   26[BANK1 ] unsigned char 
  6631 ;;  tempC           3   27[BANK1 ] float 
  6632 ;; Auto vars:     Size  Location     Type
  6633 ;;  status          1   37[BANK1 ] enum E3332
  6634 ;;  data            6   30[BANK1 ] unsigned char [6]
  6635 ;;  t1              2   38[BANK1 ] unsigned int 
  6636 ;;  var             1   36[BANK1 ] unsigned char 
  6637 ;; Return value:  Size  Location     Type
  6638 ;;                  1    wreg      void 
  6639 ;; Registers used:
  6640 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6641 ;; Tracked objects:
  6642 ;;		On entry : 0/0
  6643 ;;		On exit  : 0/0
  6644 ;;		Unchanged: 0/0
  6645 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6646 ;;      Params:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0
  6647 ;;      Locals:         0       0      10       0       0       0       0       0       0       0       0       0       
      +0       0
  6648 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6649 ;;      Totals:         0       1      14       0       0       0       0       0       0       0       0       0       
      +0       0
  6650 ;;Total ram usage:       15 bytes
  6651 ;; Hardware stack levels used:    1
  6652 ;; Hardware stack levels required when called:   11
  6653 ;; This function calls:
  6654 ;;		_Diag_getSensorHealth
  6655 ;;		_Sensor_getSupplyVoltage
  6656 ;;		_Wireless_checkDataReceived
  6657 ;;		_Wireless_determineTransmitPower
  6658 ;;		_Wireless_sendData
  6659 ;;		___ftadd
  6660 ;;		___ftmul
  6661 ;;		___fttol
  6662 ;; This function is called by:
  6663 ;;		_main
  6664 ;; This function uses a non-reentrant model
  6665 ;;
  6666                           
  6667                           
  6668                           ;psect for function _Wireless_packageData
  6669  0F24                     _Wireless_packageData:	
  6670                           
  6671                           ;incstack = 0
  6672                           ; Regs used in _Wireless_packageData: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6673                           ;Wireless_packageData@status stored from wreg
  6674  0F24  0021               	movlb	1	; select bank1
  6675  0F25  00C5               	movwf	Wireless_packageData@status^(0+128)
  6676                           
  6677                           ;wireless.c: 150: tempC+=50;
  6678  0F26  3000               	movlw	0
  6679  0F27  0020               	movlb	0	; select bank0
  6680  0F28  00C9               	movwf	___ftadd@f1
  6681  0F29  3048               	movlw	72
  6682  0F2A  00CA               	movwf	___ftadd@f1+1
  6683  0F2B  3042               	movlw	66
  6684  0F2C  00CB               	movwf	___ftadd@f1+2
  6685  0F2D  0021               	movlb	1	; select bank1
  6686  0F2E  083B               	movf	Wireless_packageData@tempC^(0+128),w
  6687  0F2F  0020               	movlb	0	; select bank0
  6688  0F30  00CC               	movwf	___ftadd@f2
  6689  0F31  0021               	movlb	1	; select bank1
  6690  0F32  083C               	movf	(Wireless_packageData@tempC+1)^(0+128),w
  6691  0F33  0020               	movlb	0	; select bank0
  6692  0F34  00CD               	movwf	___ftadd@f2+1
  6693  0F35  0021               	movlb	1	; select bank1
  6694  0F36  083D               	movf	(Wireless_packageData@tempC+2)^(0+128),w
  6695  0F37  0020               	movlb	0	; select bank0
  6696  0F38  00CE               	movwf	___ftadd@f2+2
  6697  0F39  3186  268D  318F   	fcall	___ftadd
  6698  0F3C  0020               	movlb	0	; select bank0
  6699  0F3D  0849               	movf	?___ftadd,w
  6700  0F3E  0021               	movlb	1	; select bank1
  6701  0F3F  00BB               	movwf	Wireless_packageData@tempC^(0+128)
  6702  0F40  0020               	movlb	0	; select bank0
  6703  0F41  084A               	movf	?___ftadd+1,w
  6704  0F42  0021               	movlb	1	; select bank1
  6705  0F43  00BC               	movwf	(Wireless_packageData@tempC+1)^(0+128)
  6706  0F44  0020               	movlb	0	; select bank0
  6707  0F45  084B               	movf	?___ftadd+2,w
  6708  0F46  0021               	movlb	1	; select bank1
  6709  0F47  00BD               	movwf	(Wireless_packageData@tempC+2)^(0+128)
  6710                           
  6711                           ;wireless.c: 151: tempC*=10;
  6712  0F48  3000               	movlw	0
  6713  0F49  0020               	movlb	0	; select bank0
  6714  0F4A  00D6               	movwf	___ftmul@f1
  6715  0F4B  3020               	movlw	32
  6716  0F4C  00D7               	movwf	___ftmul@f1+1
  6717  0F4D  3041               	movlw	65
  6718  0F4E  00D8               	movwf	___ftmul@f1+2
  6719  0F4F  0021               	movlb	1	; select bank1
  6720  0F50  083B               	movf	Wireless_packageData@tempC^(0+128),w
  6721  0F51  0020               	movlb	0	; select bank0
  6722  0F52  00D9               	movwf	___ftmul@f2
  6723  0F53  0021               	movlb	1	; select bank1
  6724  0F54  083C               	movf	(Wireless_packageData@tempC+1)^(0+128),w
  6725  0F55  0020               	movlb	0	; select bank0
  6726  0F56  00DA               	movwf	___ftmul@f2+1
  6727  0F57  0021               	movlb	1	; select bank1
  6728  0F58  083D               	movf	(Wireless_packageData@tempC+2)^(0+128),w
  6729  0F59  0020               	movlb	0	; select bank0
  6730  0F5A  00DB               	movwf	___ftmul@f2+2
  6731  0F5B  318E  2670  318F   	fcall	___ftmul
  6732  0F5E  0020               	movlb	0	; select bank0
  6733  0F5F  0856               	movf	?___ftmul,w
  6734  0F60  0021               	movlb	1	; select bank1
  6735  0F61  00BB               	movwf	Wireless_packageData@tempC^(0+128)
  6736  0F62  0020               	movlb	0	; select bank0
  6737  0F63  0857               	movf	?___ftmul+1,w
  6738  0F64  0021               	movlb	1	; select bank1
  6739  0F65  00BC               	movwf	(Wireless_packageData@tempC+1)^(0+128)
  6740  0F66  0020               	movlb	0	; select bank0
  6741  0F67  0858               	movf	?___ftmul+2,w
  6742  0F68  0021               	movlb	1	; select bank1
  6743  0F69  00BD               	movwf	(Wireless_packageData@tempC+2)^(0+128)
  6744                           
  6745                           ;wireless.c: 153: unsigned int t1 = tempC;
  6746  0F6A  083B               	movf	Wireless_packageData@tempC^(0+128),w
  6747  0F6B  0020               	movlb	0	; select bank0
  6748  0F6C  00E6               	movwf	___fttol@f1
  6749  0F6D  0021               	movlb	1	; select bank1
  6750  0F6E  083C               	movf	(Wireless_packageData@tempC+1)^(0+128),w
  6751  0F6F  0020               	movlb	0	; select bank0
  6752  0F70  00E7               	movwf	___fttol@f1+1
  6753  0F71  0021               	movlb	1	; select bank1
  6754  0F72  083D               	movf	(Wireless_packageData@tempC+2)^(0+128),w
  6755  0F73  0020               	movlb	0	; select bank0
  6756  0F74  00E8               	movwf	___fttol@f1+2
  6757  0F75  318C  2485  318F   	fcall	___fttol
  6758  0F78  0020               	movlb	0	; select bank0
  6759  0F79  0867               	movf	?___fttol+1,w
  6760  0F7A  0021               	movlb	1	; select bank1
  6761  0F7B  00C7               	movwf	(Wireless_packageData@t1+1)^(0+128)
  6762  0F7C  0020               	movlb	0	; select bank0
  6763  0F7D  0866               	movf	?___fttol,w
  6764  0F7E  0021               	movlb	1	; select bank1
  6765  0F7F  00C6               	movwf	Wireless_packageData@t1^(0+128)
  6766                           
  6767                           ;wireless.c: 154: char var;
  6768                           ;wireless.c: 155: char data[6];
  6769                           ;wireless.c: 157: status<<=4;
  6770  0F80  0EC5               	swapf	Wireless_packageData@status^(0+128),f
  6771  0F81  30F0               	movlw	240
  6772  0F82  05C5               	andwf	Wireless_packageData@status^(0+128),f
  6773                           
  6774                           ;wireless.c: 158: var=Diag_getSensorHealth();
  6775  0F83  3193  23C1  318F   	fcall	_Diag_getSensorHealth
  6776  0F86  0020               	movlb	0	; select bank0
  6777  0F87  00EE               	movwf	??_Wireless_packageData
  6778  0F88  086E               	movf	??_Wireless_packageData,w
  6779  0F89  0021               	movlb	1	; select bank1
  6780  0F8A  00C4               	movwf	Wireless_packageData@var^(0+128)
  6781                           
  6782                           ;wireless.c: 159: status|=var;
  6783  0F8B  0844               	movf	Wireless_packageData@var^(0+128),w
  6784  0F8C  0020               	movlb	0	; select bank0
  6785  0F8D  00EE               	movwf	??_Wireless_packageData
  6786  0F8E  086E               	movf	??_Wireless_packageData,w
  6787  0F8F  0021               	movlb	1	; select bank1
  6788  0F90  04C5               	iorwf	Wireless_packageData@status^(0+128),f
  6789                           
  6790                           ;wireless.c: 162: data[0]=status;
  6791  0F91  0845               	movf	Wireless_packageData@status^(0+128),w
  6792  0F92  0020               	movlb	0	; select bank0
  6793  0F93  00EE               	movwf	??_Wireless_packageData
  6794  0F94  086E               	movf	??_Wireless_packageData,w
  6795  0F95  0021               	movlb	1	; select bank1
  6796  0F96  00BE               	movwf	Wireless_packageData@data^(0+128)
  6797                           
  6798                           ;wireless.c: 163: data[1]=openTime;
  6799  0F97  083A               	movf	Wireless_packageData@openTime^(0+128),w
  6800  0F98  0020               	movlb	0	; select bank0
  6801  0F99  00EE               	movwf	??_Wireless_packageData
  6802  0F9A  086E               	movf	??_Wireless_packageData,w
  6803  0F9B  0021               	movlb	1	; select bank1
  6804  0F9C  00BF               	movwf	(Wireless_packageData@data^(0+128)+1)
  6805                           
  6806                           ;wireless.c: 164: data[2]=t1>>8;
  6807  0F9D  0847               	movf	(Wireless_packageData@t1+1)^(0+128),w
  6808  0F9E  0020               	movlb	0	; select bank0
  6809  0F9F  00EE               	movwf	??_Wireless_packageData
  6810  0FA0  086E               	movf	??_Wireless_packageData,w
  6811  0FA1  0021               	movlb	1	; select bank1
  6812  0FA2  00C0               	movwf	(Wireless_packageData@data^(0+128)+2)
  6813                           
  6814                           ;wireless.c: 165: data[3]= t1 & 0xFF;
  6815  0FA3  0846               	movf	Wireless_packageData@t1^(0+128),w
  6816  0FA4  0020               	movlb	0	; select bank0
  6817  0FA5  00EE               	movwf	??_Wireless_packageData
  6818  0FA6  086E               	movf	??_Wireless_packageData,w
  6819  0FA7  0021               	movlb	1	; select bank1
  6820  0FA8  00C1               	movwf	(Wireless_packageData@data^(0+128)+3)
  6821                           
  6822                           ;wireless.c: 166: t1=(float)(Sensor_getSupplyVoltage()-1)*100;
  6823  0FA9  3188  2074  318F   	fcall	_Sensor_getSupplyVoltage
  6824  0FAC  0020               	movlb	0	; select bank0
  6825  0FAD  0841               	movf	?_Sensor_getSupplyVoltage,w
  6826  0FAE  00CC               	movwf	___ftadd@f2
  6827  0FAF  0842               	movf	?_Sensor_getSupplyVoltage+1,w
  6828  0FB0  00CD               	movwf	___ftadd@f2+1
  6829  0FB1  0843               	movf	?_Sensor_getSupplyVoltage+2,w
  6830  0FB2  00CE               	movwf	___ftadd@f2+2
  6831  0FB3  3000               	movlw	0
  6832  0FB4  00C9               	movwf	___ftadd@f1
  6833  0FB5  3080               	movlw	128
  6834  0FB6  00CA               	movwf	___ftadd@f1+1
  6835  0FB7  30BF               	movlw	191
  6836  0FB8  00CB               	movwf	___ftadd@f1+2
  6837  0FB9  3186  268D  318F   	fcall	___ftadd
  6838  0FBC  0020               	movlb	0	; select bank0
  6839  0FBD  0849               	movf	?___ftadd,w
  6840  0FBE  00D9               	movwf	___ftmul@f2
  6841  0FBF  084A               	movf	?___ftadd+1,w
  6842  0FC0  00DA               	movwf	___ftmul@f2+1
  6843  0FC1  084B               	movf	?___ftadd+2,w
  6844  0FC2  00DB               	movwf	___ftmul@f2+2
  6845  0FC3  3000               	movlw	0
  6846  0FC4  00D6               	movwf	___ftmul@f1
  6847  0FC5  30C8               	movlw	200
  6848  0FC6  00D7               	movwf	___ftmul@f1+1
  6849  0FC7  3042               	movlw	66
  6850  0FC8  00D8               	movwf	___ftmul@f1+2
  6851  0FC9  318E  2670  318F   	fcall	___ftmul
  6852  0FCC  0020               	movlb	0	; select bank0
  6853  0FCD  0856               	movf	?___ftmul,w
  6854  0FCE  00E6               	movwf	___fttol@f1
  6855  0FCF  0857               	movf	?___ftmul+1,w
  6856  0FD0  00E7               	movwf	___fttol@f1+1
  6857  0FD1  0858               	movf	?___ftmul+2,w
  6858  0FD2  00E8               	movwf	___fttol@f1+2
  6859  0FD3  318C  2485  318F   	fcall	___fttol
  6860  0FD6  0020               	movlb	0	; select bank0
  6861  0FD7  0867               	movf	?___fttol+1,w
  6862  0FD8  0021               	movlb	1	; select bank1
  6863  0FD9  00C7               	movwf	(Wireless_packageData@t1+1)^(0+128)
  6864  0FDA  0020               	movlb	0	; select bank0
  6865  0FDB  0866               	movf	?___fttol,w
  6866  0FDC  0021               	movlb	1	; select bank1
  6867  0FDD  00C6               	movwf	Wireless_packageData@t1^(0+128)
  6868                           
  6869                           ;wireless.c: 167: data[4]=t1;
  6870  0FDE  0846               	movf	Wireless_packageData@t1^(0+128),w
  6871  0FDF  0020               	movlb	0	; select bank0
  6872  0FE0  00EE               	movwf	??_Wireless_packageData
  6873  0FE1  086E               	movf	??_Wireless_packageData,w
  6874  0FE2  0021               	movlb	1	; select bank1
  6875  0FE3  00C2               	movwf	(Wireless_packageData@data^(0+128)+4)
  6876                           
  6877                           ;wireless.c: 168: data[5] = currentTransmitPower;
  6878  0FE4  085C               	movf	_currentTransmitPower^(0+128),w
  6879  0FE5  0020               	movlb	0	; select bank0
  6880  0FE6  00EE               	movwf	??_Wireless_packageData
  6881  0FE7  086E               	movf	??_Wireless_packageData,w
  6882  0FE8  0021               	movlb	1	; select bank1
  6883  0FE9  00C3               	movwf	(Wireless_packageData@data^(0+128)+5)
  6884  0FEA                     l6539:	
  6885                           ;wireless.c: 169: do{
  6886                           
  6887                           
  6888                           ;wireless.c: 170: Wireless_sendData(data, 6);
  6889  0FEA  3006               	movlw	6
  6890  0FEB  0020               	movlb	0	; select bank0
  6891  0FEC  00EE               	movwf	??_Wireless_packageData
  6892  0FED  086E               	movf	??_Wireless_packageData,w
  6893  0FEE  00B1               	movwf	Wireless_sendData@length
  6894  0FEF  30BE               	movlw	(low (Wireless_packageData@data| 0))& (0+255)
  6895  0FF0  3193  23FB  318F   	fcall	_Wireless_sendData
  6896  0FF3                     l1123:	
  6897                           ;wireless.c: 171: while(PORTCbits.RC3);
  6898                           
  6899  0FF3  0020               	movlb	0	; select bank0
  6900  0FF4  198E               	btfsc	14,3	;volatile
  6901  0FF5  2FF3               	goto	l1123
  6902                           
  6903                           ;wireless.c: 172: }
  6904                           ;wireless.c: 173: while(Wireless_determineTransmitPower(0));
  6905  0FF6  3000               	movlw	0
  6906  0FF7  318D  2524  318F   	fcall	_Wireless_determineTransmitPower
  6907  0FFA  3A00               	xorlw	0
  6908  0FFB  1D03               	skipz
  6909  0FFC  2FEA               	goto	l6539
  6910                           
  6911                           ;wireless.c: 174: Wireless_checkDataReceived();
  6912  0FFD  318B  2389         	fcall	_Wireless_checkDataReceived
  6913  0FFF  0008               	return
  6914  1000                     __end_of_Wireless_packageData:	
  6915                           
  6916                           	psect	text7
  6917  0D24                     __ptext7:	
  6918 ;; *************** function _Wireless_determineTransmitPower *****************
  6919 ;; Defined at:
  6920 ;;		line 62 in file "wireless.c"
  6921 ;; Parameters:    Size  Location     Type
  6922 ;;  initialise      1    wreg     unsigned char 
  6923 ;; Auto vars:     Size  Location     Type
  6924 ;;  initialise      1   24[BANK0 ] unsigned char 
  6925 ;;  latestResult    1   26[BANK0 ] unsigned char 
  6926 ;;  testPayload     1   25[BANK0 ] unsigned char 
  6927 ;; Return value:  Size  Location     Type
  6928 ;;                  1    wreg      unsigned char 
  6929 ;; Registers used:
  6930 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6931 ;; Tracked objects:
  6932 ;;		On entry : 0/0
  6933 ;;		On exit  : 0/0
  6934 ;;		Unchanged: 0/0
  6935 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6936 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6937 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6938 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6939 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6940 ;;Total ram usage:        6 bytes
  6941 ;; Hardware stack levels used:    1
  6942 ;; Hardware stack levels required when called:   10
  6943 ;; This function calls:
  6944 ;;		_Wireless_changeTransmitPower
  6945 ;;		_Wireless_isDataTransmitSuccessful
  6946 ;;		_Wireless_sendData
  6947 ;;		_limit
  6948 ;; This function is called by:
  6949 ;;		_main
  6950 ;;		_Wireless_packageData
  6951 ;; This function uses a non-reentrant model
  6952 ;;
  6953                           
  6954                           
  6955                           ;psect for function _Wireless_determineTransmitPower
  6956  0D24                     _Wireless_determineTransmitPower:	
  6957                           
  6958                           ;incstack = 0
  6959                           ; Regs used in _Wireless_determineTransmitPower: [wreg-fsr1h+status,2+status,0+pclath+cs
      +                          tack]
  6960                           ;Wireless_determineTransmitPower@initialise stored from wreg
  6961  0D24  0020               	movlb	0	; select bank0
  6962  0D25  00B8               	movwf	Wireless_determineTransmitPower@initialise
  6963                           
  6964                           ;wireless.c: 64: char testPayload = 0xFF;
  6965  0D26  30FF               	movlw	255
  6966  0D27  00B5               	movwf	??_Wireless_determineTransmitPower
  6967  0D28  0835               	movf	??_Wireless_determineTransmitPower,w
  6968  0D29  00B9               	movwf	Wireless_determineTransmitPower@testPayload
  6969                           
  6970                           ;wireless.c: 65: char latestResult;
  6971                           ;wireless.c: 66: static char numOfTransmits = 0;
  6972                           ;wireless.c: 67: static char numOfSuccessfulTransmits = 0;
  6973                           ;wireless.c: 69: if(initialise){
  6974  0D2A  0838               	movf	Wireless_determineTransmitPower@initialise,w
  6975  0D2B  1903               	btfsc	3,2
  6976  0D2C  2D68               	goto	l6101
  6977                           
  6978                           ;wireless.c: 70: currentTransmitPower = 0;
  6979  0D2D  0021               	movlb	1	; select bank1
  6980  0D2E  01DC               	clrf	_currentTransmitPower^(0+128)
  6981  0D2F                     l6097:	
  6982                           ;wireless.c: 73: for(;currentTransmitPower <= 3; currentTransmitPower++){
  6983                           
  6984  0D2F  3004               	movlw	4
  6985  0D30  025C               	subwf	_currentTransmitPower^(0+128),w
  6986  0D31  1803               	btfsc	3,0
  6987  0D32  2D4E               	goto	l6099
  6988                           
  6989                           ;wireless.c: 74: Wireless_changeTransmitPower(currentTransmitPower);
  6990  0D33  085C               	movf	_currentTransmitPower^(0+128),w
  6991  0D34  3197  2791  318D   	fcall	_Wireless_changeTransmitPower
  6992                           
  6993                           ;wireless.c: 75: Wireless_sendData(&testPayload, 1);
  6994  0D37  0020               	movlb	0	; select bank0
  6995  0D38  01B1               	clrf	Wireless_sendData@length
  6996  0D39  0AB1               	incf	Wireless_sendData@length,f
  6997  0D3A  3039               	movlw	(low (Wireless_determineTransmitPower@testPayload| 0))& (0+255)
  6998  0D3B  3193  23FB  318D   	fcall	_Wireless_sendData
  6999  0D3E                     l1100:	
  7000                           ;wireless.c: 76: while(PORTCbits.RC3);
  7001                           
  7002  0D3E  0020               	movlb	0	; select bank0
  7003  0D3F  198E               	btfsc	14,3	;volatile
  7004  0D40  2D3E               	goto	l1100
  7005                           
  7006                           ;wireless.c: 78: if(Wireless_isDataTransmitSuccessful())
  7007  0D41  3193  2352  318D   	fcall	_Wireless_isDataTransmitSuccessful
  7008  0D44  3A00               	xorlw	0
  7009  0D45  1D03               	btfss	3,2
  7010  0D46  2D4E               	goto	l6099
  7011                           
  7012                           ;wireless.c: 79: break;
  7013  0D47  3001               	movlw	1
  7014  0D48  0020               	movlb	0	; select bank0
  7015  0D49  00B5               	movwf	??_Wireless_determineTransmitPower
  7016  0D4A  0835               	movf	??_Wireless_determineTransmitPower,w
  7017  0D4B  0021               	movlb	1	; select bank1
  7018  0D4C  07DC               	addwf	_currentTransmitPower^(0+128),f
  7019  0D4D  2D2F               	goto	l6097
  7020  0D4E                     l6099:	
  7021                           
  7022                           ;wireless.c: 80: }
  7023                           ;wireless.c: 81: currentTransmitPower = limit( currentTransmitPower, 0, 3);
  7024  0D4E  0021               	movlb	1	; select bank1
  7025  0D4F  085C               	movf	_currentTransmitPower^(0+128),w
  7026  0D50  0020               	movlb	0	; select bank0
  7027  0D51  00B5               	movwf	??_Wireless_determineTransmitPower
  7028  0D52  01B6               	clrf	??_Wireless_determineTransmitPower+1
  7029  0D53  0835               	movf	??_Wireless_determineTransmitPower,w
  7030  0D54  00A1               	movwf	limit@val
  7031  0D55  0836               	movf	??_Wireless_determineTransmitPower+1,w
  7032  0D56  00A2               	movwf	limit@val+1
  7033  0D57  3000               	movlw	0
  7034  0D58  00A3               	movwf	limit@min
  7035  0D59  00A4               	movwf	limit@min+1
  7036  0D5A  3003               	movlw	3
  7037  0D5B  00A5               	movwf	limit@max
  7038  0D5C  3000               	movlw	0
  7039  0D5D  00A6               	movwf	limit@max+1
  7040  0D5E  3196  2692  318D   	fcall	_limit
  7041  0D61  0020               	movlb	0	; select bank0
  7042  0D62  0821               	movf	?_limit,w
  7043  0D63  00B7               	movwf	??_Wireless_determineTransmitPower+2
  7044  0D64  0837               	movf	??_Wireless_determineTransmitPower+2,w
  7045  0D65  0021               	movlb	1	; select bank1
  7046  0D66  00DC               	movwf	_currentTransmitPower^(0+128)
  7047                           
  7048                           ;wireless.c: 82: }else{
  7049  0D67  2DBF               	goto	l6153
  7050  0D68                     l6101:	
  7051                           
  7052                           ;wireless.c: 84: latestResult = Wireless_isDataTransmitSuccessful();
  7053  0D68  3193  2352  318D   	fcall	_Wireless_isDataTransmitSuccessful
  7054  0D6B  0020               	movlb	0	; select bank0
  7055  0D6C  00B5               	movwf	??_Wireless_determineTransmitPower
  7056  0D6D  0835               	movf	??_Wireless_determineTransmitPower,w
  7057  0D6E  00BA               	movwf	Wireless_determineTransmitPower@latestResult
  7058                           
  7059                           ;wireless.c: 85: numOfTransmits++;
  7060  0D6F  3001               	movlw	1
  7061  0D70  00B5               	movwf	??_Wireless_determineTransmitPower
  7062  0D71  0835               	movf	??_Wireless_determineTransmitPower,w
  7063  0D72  0021               	movlb	1	; select bank1
  7064  0D73  07DB               	addwf	Wireless_determineTransmitPower@numOfTransmits^(0+128),f
  7065                           
  7066                           ;wireless.c: 86: numOfSuccessfulTransmits+= latestResult;
  7067  0D74  0020               	movlb	0	; select bank0
  7068  0D75  083A               	movf	Wireless_determineTransmitPower@latestResult,w
  7069  0D76  00B5               	movwf	??_Wireless_determineTransmitPower
  7070  0D77  0835               	movf	??_Wireless_determineTransmitPower,w
  7071  0D78  0021               	movlb	1	; select bank1
  7072  0D79  07DA               	addwf	Wireless_determineTransmitPower@numOfSuccessfulTransmits^(0+128),f
  7073                           
  7074                           ;wireless.c: 88: if(numOfTransmits>=5){
  7075  0D7A  3005               	movlw	5
  7076  0D7B  025B               	subwf	Wireless_determineTransmitPower@numOfTransmits^(0+128),w
  7077  0D7C  1C03               	skipc
  7078  0D7D  2DA9               	goto	l6137
  7079                           
  7080                           ;wireless.c: 90: if(currentTransmitPower > 0 && latestResult && numOfSuccessfulTransmits
      +                           >=4)
  7081  0D7E  085C               	movf	_currentTransmitPower^(0+128),w
  7082  0D7F  1903               	btfsc	3,2
  7083  0D80  2D90               	goto	l6117
  7084  0D81  0020               	movlb	0	; select bank0
  7085  0D82  083A               	movf	Wireless_determineTransmitPower@latestResult,w
  7086  0D83  1903               	btfsc	3,2
  7087  0D84  2D90               	goto	l6117
  7088  0D85  3004               	movlw	4
  7089  0D86  0021               	movlb	1	; select bank1
  7090  0D87  025A               	subwf	Wireless_determineTransmitPower@numOfSuccessfulTransmits^(0+128),w
  7091  0D88  1C03               	skipc
  7092  0D89  2D90               	goto	l6117
  7093                           
  7094                           ;wireless.c: 91: Wireless_changeTransmitPower(--currentTransmitPower);
  7095  0D8A  3001               	movlw	1
  7096  0D8B  02DC               	subwf	_currentTransmitPower^(0+128),f
  7097  0D8C  085C               	movf	_currentTransmitPower^(0+128),w
  7098  0D8D  3197  2791  318D   	fcall	_Wireless_changeTransmitPower
  7099  0D90                     l6117:	
  7100                           
  7101                           ;wireless.c: 93: numOfTransmits = 0;
  7102  0D90  0021               	movlb	1	; select bank1
  7103  0D91  01DB               	clrf	Wireless_determineTransmitPower@numOfTransmits^(0+128)
  7104                           
  7105                           ;wireless.c: 94: numOfSuccessfulTransmits = 0;
  7106  0D92  01DA               	clrf	Wireless_determineTransmitPower@numOfSuccessfulTransmits^(0+128)
  7107                           
  7108                           ;wireless.c: 95: if(!latestResult && currentTransmitPower < 3){
  7109  0D93  0020               	movlb	0	; select bank0
  7110  0D94  083A               	movf	Wireless_determineTransmitPower@latestResult,w
  7111  0D95  1D03               	btfss	3,2
  7112  0D96  2DA7               	goto	l6133
  7113  0D97  3003               	movlw	3
  7114  0D98  0021               	movlb	1	; select bank1
  7115  0D99  025C               	subwf	_currentTransmitPower^(0+128),w
  7116  0D9A  1803               	skipnc
  7117  0D9B  2DA7               	goto	l6133
  7118                           
  7119                           ;wireless.c: 98: Wireless_changeTransmitPower(++currentTransmitPower);
  7120  0D9C  3001               	movlw	1
  7121  0D9D  0020               	movlb	0	; select bank0
  7122  0D9E  00B5               	movwf	??_Wireless_determineTransmitPower
  7123  0D9F  0835               	movf	??_Wireless_determineTransmitPower,w
  7124  0DA0  0021               	movlb	1	; select bank1
  7125  0DA1  07DC               	addwf	_currentTransmitPower^(0+128),f
  7126  0DA2  085C               	movf	_currentTransmitPower^(0+128),w
  7127  0DA3  3197  2791         	fcall	_Wireless_changeTransmitPower
  7128                           
  7129                           ;wireless.c: 99: return 1;
  7130  0DA5  3001               	movlw	1
  7131  0DA6  0008               	return
  7132  0DA7                     l6133:	
  7133                           ;wireless.c: 100: } else return 0;
  7134                           
  7135  0DA7  3000               	movlw	0
  7136  0DA8  0008               	return
  7137  0DA9                     l6137:	
  7138                           ;wireless.c: 102: }else{
  7139                           
  7140                           
  7141                           ;wireless.c: 104: if(!latestResult && currentTransmitPower < 3){
  7142  0DA9  0020               	movlb	0	; select bank0
  7143  0DAA  083A               	movf	Wireless_determineTransmitPower@latestResult,w
  7144  0DAB  1D03               	btfss	3,2
  7145  0DAC  2DBD               	goto	l6149
  7146  0DAD  3003               	movlw	3
  7147  0DAE  0021               	movlb	1	; select bank1
  7148  0DAF  025C               	subwf	_currentTransmitPower^(0+128),w
  7149  0DB0  1803               	skipnc
  7150  0DB1  2DBD               	goto	l6149
  7151                           
  7152                           ;wireless.c: 106: Wireless_changeTransmitPower(++currentTransmitPower);
  7153  0DB2  3001               	movlw	1
  7154  0DB3  0020               	movlb	0	; select bank0
  7155  0DB4  00B5               	movwf	??_Wireless_determineTransmitPower
  7156  0DB5  0835               	movf	??_Wireless_determineTransmitPower,w
  7157  0DB6  0021               	movlb	1	; select bank1
  7158  0DB7  07DC               	addwf	_currentTransmitPower^(0+128),f
  7159  0DB8  085C               	movf	_currentTransmitPower^(0+128),w
  7160  0DB9  3197  2791         	fcall	_Wireless_changeTransmitPower
  7161                           
  7162                           ;wireless.c: 107: return 1;
  7163  0DBB  3001               	movlw	1
  7164  0DBC  0008               	return
  7165  0DBD                     l6149:	
  7166                           ;wireless.c: 108: } else
  7167                           
  7168                           
  7169                           ;wireless.c: 109: return 0;
  7170  0DBD  3000               	movlw	0
  7171  0DBE  0008               	return
  7172  0DBF                     l6153:	
  7173                           
  7174                           ;wireless.c: 111: }
  7175                           ;wireless.c: 112: }
  7176                           ;wireless.c: 115: return !latestResult;
  7177  0DBF  0020               	movlb	0	; select bank0
  7178  0DC0  083A               	movf	Wireless_determineTransmitPower@latestResult,w
  7179  0DC1  1D03               	btfss	3,2
  7180  0DC2  2DC5               	goto	u5600
  7181  0DC3  3001               	movlw	1
  7182  0DC4  0008               	return
  7183  0DC5                     u5600:	
  7184  0DC5  3000               	movlw	0
  7185  0DC6  0008               	return
  7186  0DC7                     __end_of_Wireless_determineTransmitPower:	
  7187                           
  7188                           	psect	text8
  7189  13FB                     __ptext8:	
  7190 ;; *************** function _Wireless_sendData *****************
  7191 ;; Defined at:
  7192 ;;		line 130 in file "wireless.c"
  7193 ;; Parameters:    Size  Location     Type
  7194 ;;  payload         1    wreg     PTR unsigned char 
  7195 ;;		 -> Wireless_packageData@data(6), Wireless_determineTransmitPower@testPayload(1), 
  7196 ;;  length          1   17[BANK0 ] unsigned char 
  7197 ;; Auto vars:     Size  Location     Type
  7198 ;;  payload         1   20[BANK0 ] PTR unsigned char 
  7199 ;;		 -> Wireless_packageData@data(6), Wireless_determineTransmitPower@testPayload(1), 
  7200 ;;  status          1   19[BANK0 ] unsigned char 
  7201 ;; Return value:  Size  Location     Type
  7202 ;;                  1    wreg      void 
  7203 ;; Registers used:
  7204 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  7205 ;; Tracked objects:
  7206 ;;		On entry : 0/0
  7207 ;;		On exit  : 0/0
  7208 ;;		Unchanged: 0/0
  7209 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7210 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7211 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7212 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7213 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7214 ;;Total ram usage:        4 bytes
  7215 ;; Hardware stack levels used:    1
  7216 ;; Hardware stack levels required when called:    9
  7217 ;; This function calls:
  7218 ;;		_RF_GetStatus
  7219 ;;		_RF_ResetStatusIRQ
  7220 ;;		_RF_TxPayload
  7221 ;; This function is called by:
  7222 ;;		_Wireless_determineTransmitPower
  7223 ;;		_Wireless_packageData
  7224 ;; This function uses a non-reentrant model
  7225 ;;
  7226                           
  7227                           
  7228                           ;psect for function _Wireless_sendData
  7229  13FB                     _Wireless_sendData:	
  7230                           
  7231                           ;incstack = 0
  7232                           ; Regs used in _Wireless_sendData: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  7233                           ;Wireless_sendData@payload stored from wreg
  7234  13FB  0020               	movlb	0	; select bank0
  7235  13FC  00B4               	movwf	Wireless_sendData@payload
  7236                           
  7237                           ;wireless.c: 132: char status;
  7238                           ;wireless.c: 134: RF_ResetStatusIRQ(0x40|0x20|0x10);
  7239  13FD  3070               	movlw	112
  7240  13FE  3195  25EA  3193   	fcall	_RF_ResetStatusIRQ
  7241                           
  7242                           ;wireless.c: 135: status = RF_GetStatus();
  7243  1401  3192  22A6  3193   	fcall	_RF_GetStatus
  7244  1404  0020               	movlb	0	; select bank0
  7245  1405  00B2               	movwf	??_Wireless_sendData
  7246  1406  0832               	movf	??_Wireless_sendData,w
  7247  1407  00B3               	movwf	Wireless_sendData@status
  7248                           
  7249                           ;wireless.c: 136: RF_TxPayload(payload, length);
  7250  1408  0831               	movf	Wireless_sendData@length,w
  7251  1409  00B2               	movwf	??_Wireless_sendData
  7252  140A  0832               	movf	??_Wireless_sendData,w
  7253  140B  00AE               	movwf	RF_TxPayload@payloadSize
  7254  140C  0834               	movf	Wireless_sendData@payload,w
  7255  140D  3195  251F         	fcall	_RF_TxPayload
  7256  140F  0008               	return
  7257  1410                     __end_of_Wireless_sendData:	
  7258                           
  7259                           	psect	text9
  7260  151F                     __ptext9:	
  7261 ;; *************** function _RF_TxPayload *****************
  7262 ;; Defined at:
  7263 ;;		line 173 in file "nrf24.c"
  7264 ;; Parameters:    Size  Location     Type
  7265 ;;  payload         1    wreg     PTR unsigned char 
  7266 ;;		 -> Wireless_packageData@data(6), Wireless_determineTransmitPower@testPayload(1), 
  7267 ;;  payloadSize     1   14[BANK0 ] unsigned char 
  7268 ;; Auto vars:     Size  Location     Type
  7269 ;;  payload         1   16[BANK0 ] PTR unsigned char 
  7270 ;;		 -> Wireless_packageData@data(6), Wireless_determineTransmitPower@testPayload(1), 
  7271 ;; Return value:  Size  Location     Type
  7272 ;;                  1    wreg      void 
  7273 ;; Registers used:
  7274 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  7275 ;; Tracked objects:
  7276 ;;		On entry : 0/0
  7277 ;;		On exit  : 0/0
  7278 ;;		Unchanged: 0/0
  7279 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7280 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7281 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7282 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7283 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7284 ;;Total ram usage:        3 bytes
  7285 ;; Hardware stack levels used:    1
  7286 ;; Hardware stack levels required when called:    8
  7287 ;; This function calls:
  7288 ;;		_RF_Write
  7289 ;;		_RF_WriteRegisterData
  7290 ;; This function is called by:
  7291 ;;		_Wireless_sendData
  7292 ;; This function uses a non-reentrant model
  7293 ;;
  7294                           
  7295                           
  7296                           ;psect for function _RF_TxPayload
  7297  151F                     _RF_TxPayload:	
  7298                           
  7299                           ;incstack = 0
  7300                           ; Regs used in _RF_TxPayload: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  7301                           ;RF_TxPayload@payload stored from wreg
  7302  151F  0020               	movlb	0	; select bank0
  7303  1520  00B0               	movwf	RF_TxPayload@payload
  7304                           
  7305                           ;nrf24.c: 174: RF_Write(0xE1);
  7306  1521  30E1               	movlw	225
  7307  1522  3193  237D  3195   	fcall	_RF_Write
  7308                           
  7309                           ;nrf24.c: 175: RF_WriteRegisterData(0xA0, payload, payloadSize);
  7310  1525  0020               	movlb	0	; select bank0
  7311  1526  0830               	movf	RF_TxPayload@payload,w
  7312  1527  00A9               	movwf	RF_WriteRegisterData@buf
  7313  1528  3000               	movlw	0
  7314  1529  00AA               	movwf	RF_WriteRegisterData@buf+1
  7315  152A  082E               	movf	RF_TxPayload@payloadSize,w
  7316  152B  00AF               	movwf	??_RF_TxPayload
  7317  152C  082F               	movf	??_RF_TxPayload,w
  7318  152D  00AB               	movwf	RF_WriteRegisterData@bufSize
  7319  152E  30A0               	movlw	160
  7320  152F  3195  2574  3195   	fcall	_RF_WriteRegisterData
  7321                           
  7322                           ;nrf24.c: 176: do { LATCbits.LATC2 = 1; } while(0);
  7323  1532  0022               	movlb	2	; select bank2
  7324  1533  150E               	bsf	14,2	;volatile
  7325                           
  7326                           ;nrf24.c: 177: _delay((unsigned long)((15)*(8000000/4000000.0)));
  7327  1534  300A               	movlw	10
  7328  1535                     u7207:	
  7329  1535  0B89               	decfsz	9,f
  7330  1536  2D35               	goto	u7207
  7331                           
  7332                           ;nrf24.c: 178: do { LATCbits.LATC2 = 0; } while(0);
  7333  1537  0022               	movlb	2	; select bank2
  7334  1538  110E               	bcf	14,2	;volatile
  7335  1539  0008               	return
  7336  153A                     __end_of_RF_TxPayload:	
  7337                           
  7338                           	psect	text10
  7339  137D                     __ptext10:	
  7340 ;; *************** function _RF_Write *****************
  7341 ;; Defined at:
  7342 ;;		line 139 in file "nrf24.c"
  7343 ;; Parameters:    Size  Location     Type
  7344 ;;  val             1    wreg     unsigned char 
  7345 ;; Auto vars:     Size  Location     Type
  7346 ;;  val             1    3[BANK0 ] unsigned char 
  7347 ;; Return value:  Size  Location     Type
  7348 ;;                  1    wreg      void 
  7349 ;; Registers used:
  7350 ;;		wreg, status,2, status,0, pclath, cstack
  7351 ;; Tracked objects:
  7352 ;;		On entry : 0/0
  7353 ;;		On exit  : 0/0
  7354 ;;		Unchanged: 0/0
  7355 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7356 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7357 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7358 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7359 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7360 ;;Total ram usage:        1 bytes
  7361 ;; Hardware stack levels used:    1
  7362 ;; Hardware stack levels required when called:    6
  7363 ;; This function calls:
  7364 ;;		_SPI_WriteRead
  7365 ;; This function is called by:
  7366 ;;		_RF_TxPayload
  7367 ;; This function uses a non-reentrant model
  7368 ;;
  7369                           
  7370                           
  7371                           ;psect for function _RF_Write
  7372  137D                     _RF_Write:	
  7373                           
  7374                           ;incstack = 0
  7375                           ; Regs used in _RF_Write: [wreg+status,2+status,0+pclath+cstack]
  7376                           ;RF_Write@val stored from wreg
  7377  137D  0020               	movlb	0	; select bank0
  7378  137E  00A3               	movwf	RF_Write@val
  7379                           
  7380                           ;nrf24.c: 140: do { LATCbits.LATC1 = 0; } while(0);
  7381  137F  0022               	movlb	2	; select bank2
  7382  1380  108E               	bcf	14,1	;volatile
  7383                           
  7384                           ;nrf24.c: 141: (void)SPI_WriteRead(val);
  7385  1381  0020               	movlb	0	; select bank0
  7386  1382  0823               	movf	RF_Write@val,w
  7387  1383  3192  22C3  3193   	fcall	_SPI_WriteRead
  7388                           
  7389                           ;nrf24.c: 142: do { LATCbits.LATC1 = 1; } while(0);
  7390  1386  0022               	movlb	2	; select bank2
  7391  1387  148E               	bsf	14,1	;volatile
  7392                           
  7393                           ;nrf24.c: 143: _delay((unsigned long)((10)*(8000000/4000000.0)));
  7394  1388  3006               	movlw	6
  7395  1389                     u7217:	
  7396  1389  0B89               	decfsz	9,f
  7397  138A  2B89               	goto	u7217
  7398  138B  3200               	nop2
  7399  138C  0008               	return
  7400  138D                     __end_of_RF_Write:	
  7401                           
  7402                           	psect	text11
  7403  1352                     __ptext11:	
  7404 ;; *************** function _Wireless_isDataTransmitSuccessful *****************
  7405 ;; Defined at:
  7406 ;;		line 199 in file "wireless.c"
  7407 ;; Parameters:    Size  Location     Type
  7408 ;;		None
  7409 ;; Auto vars:     Size  Location     Type
  7410 ;;  status          1    6[BANK0 ] unsigned char 
  7411 ;; Return value:  Size  Location     Type
  7412 ;;                  1    wreg      unsigned char 
  7413 ;; Registers used:
  7414 ;;		wreg, pclath, cstack
  7415 ;; Tracked objects:
  7416 ;;		On entry : 0/0
  7417 ;;		On exit  : 0/0
  7418 ;;		Unchanged: 0/0
  7419 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7420 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7421 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7422 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7423 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7424 ;;Total ram usage:        2 bytes
  7425 ;; Hardware stack levels used:    1
  7426 ;; Hardware stack levels required when called:    8
  7427 ;; This function calls:
  7428 ;;		_RF_GetStatus
  7429 ;; This function is called by:
  7430 ;;		_Wireless_determineTransmitPower
  7431 ;; This function uses a non-reentrant model
  7432 ;;
  7433                           
  7434                           
  7435                           ;psect for function _Wireless_isDataTransmitSuccessful
  7436  1352                     _Wireless_isDataTransmitSuccessful:	
  7437                           
  7438                           ;wireless.c: 200: char status = RF_GetStatus();
  7439                           
  7440                           ;incstack = 0
  7441                           ; Regs used in _Wireless_isDataTransmitSuccessful: [wreg+pclath+cstack]
  7442  1352  3192  22A6  3193   	fcall	_RF_GetStatus
  7443  1355  0020               	movlb	0	; select bank0
  7444  1356  00A5               	movwf	??_Wireless_isDataTransmitSuccessful
  7445  1357  0825               	movf	??_Wireless_isDataTransmitSuccessful,w
  7446  1358  00A6               	movwf	Wireless_isDataTransmitSuccessful@status
  7447                           
  7448                           ;wireless.c: 201: if(status & 0x20)
  7449  1359  1EA6               	btfss	Wireless_isDataTransmitSuccessful@status,5
  7450  135A  2B5D               	goto	l5871
  7451                           
  7452                           ;wireless.c: 202: return 1;
  7453  135B  3001               	movlw	1
  7454  135C  0008               	return
  7455  135D                     l5871:	
  7456                           
  7457                           ;wireless.c: 203: else
  7458                           ;wireless.c: 204: return 0;
  7459  135D  3000               	movlw	0
  7460  135E  0008               	return
  7461  135F                     __end_of_Wireless_isDataTransmitSuccessful:	
  7462                           
  7463                           	psect	text12
  7464  12A6                     __ptext12:	
  7465 ;; *************** function _RF_GetStatus *****************
  7466 ;; Defined at:
  7467 ;;		line 150 in file "nrf24.c"
  7468 ;; Parameters:    Size  Location     Type
  7469 ;;		None
  7470 ;; Auto vars:     Size  Location     Type
  7471 ;;		None
  7472 ;; Return value:  Size  Location     Type
  7473 ;;                  1    wreg      unsigned char 
  7474 ;; Registers used:
  7475 ;;		wreg, pclath, cstack
  7476 ;; Tracked objects:
  7477 ;;		On entry : 0/0
  7478 ;;		On exit  : 0/0
  7479 ;;		Unchanged: 0/0
  7480 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7481 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7482 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7483 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7484 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7485 ;;Total ram usage:        0 bytes
  7486 ;; Hardware stack levels used:    1
  7487 ;; Hardware stack levels required when called:    7
  7488 ;; This function calls:
  7489 ;;		_RF_WriteRead
  7490 ;; This function is called by:
  7491 ;;		_Wireless_sendData
  7492 ;;		_Wireless_isDataTransmitSuccessful
  7493 ;; This function uses a non-reentrant model
  7494 ;;
  7495                           
  7496                           
  7497                           ;psect for function _RF_GetStatus
  7498  12A6                     _RF_GetStatus:	
  7499                           
  7500                           ;nrf24.c: 151: return RF_WriteRead(0xFF);
  7501                           
  7502                           ;incstack = 0
  7503                           ; Regs used in _RF_GetStatus: [wreg+pclath+cstack]
  7504  12A6  30FF               	movlw	255
  7505  12A7  3194  243C         	fcall	_RF_WriteRead
  7506  12A9  0008               	return
  7507  12AA                     __end_of_RF_GetStatus:	
  7508                           
  7509                           	psect	text13
  7510  143C                     __ptext13:	
  7511 ;; *************** function _RF_WriteRead *****************
  7512 ;; Defined at:
  7513 ;;		line 126 in file "nrf24.c"
  7514 ;; Parameters:    Size  Location     Type
  7515 ;;  val             1    wreg     unsigned char 
  7516 ;; Auto vars:     Size  Location     Type
  7517 ;;  val             1    4[BANK0 ] unsigned char 
  7518 ;; Return value:  Size  Location     Type
  7519 ;;                  1    wreg      unsigned char 
  7520 ;; Registers used:
  7521 ;;		wreg, pclath, cstack
  7522 ;; Tracked objects:
  7523 ;;		On entry : 0/0
  7524 ;;		On exit  : 0/0
  7525 ;;		Unchanged: 0/0
  7526 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7527 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7528 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7529 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7530 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7531 ;;Total ram usage:        2 bytes
  7532 ;; Hardware stack levels used:    1
  7533 ;; Hardware stack levels required when called:    6
  7534 ;; This function calls:
  7535 ;;		_SPI_WriteRead
  7536 ;; This function is called by:
  7537 ;;		_RF_GetStatus
  7538 ;; This function uses a non-reentrant model
  7539 ;;
  7540                           
  7541                           
  7542                           ;psect for function _RF_WriteRead
  7543  143C                     _RF_WriteRead:	
  7544                           
  7545                           ;incstack = 0
  7546                           ; Regs used in _RF_WriteRead: [wreg+pclath+cstack]
  7547                           ;RF_WriteRead@val stored from wreg
  7548  143C  0020               	movlb	0	; select bank0
  7549  143D  00A4               	movwf	RF_WriteRead@val
  7550                           
  7551                           ;nrf24.c: 127: do { LATCbits.LATC1 = 0; } while(0);
  7552  143E  0022               	movlb	2	; select bank2
  7553  143F  108E               	bcf	14,1	;volatile
  7554                           
  7555                           ;nrf24.c: 128: val = SPI_WriteRead(val);
  7556  1440  0020               	movlb	0	; select bank0
  7557  1441  0824               	movf	RF_WriteRead@val,w
  7558  1442  3192  22C3  3194   	fcall	_SPI_WriteRead
  7559  1445  0020               	movlb	0	; select bank0
  7560  1446  00A3               	movwf	??_RF_WriteRead
  7561  1447  0823               	movf	??_RF_WriteRead,w
  7562  1448  00A4               	movwf	RF_WriteRead@val
  7563                           
  7564                           ;nrf24.c: 129: do { LATCbits.LATC1 = 1; } while(0);
  7565  1449  0022               	movlb	2	; select bank2
  7566  144A  148E               	bsf	14,1	;volatile
  7567                           
  7568                           ;nrf24.c: 130: _delay((unsigned long)((10)*(8000000/4000000.0)));
  7569  144B  3006               	movlw	6
  7570  144C                     u7227:	
  7571  144C  0B89               	decfsz	9,f
  7572  144D  2C4C               	goto	u7227
  7573  144E  3200               	nop2
  7574                           
  7575                           ;nrf24.c: 131: return val;
  7576  144F  0020               	movlb	0	; select bank0
  7577  1450  0824               	movf	RF_WriteRead@val,w
  7578  1451  0008               	return
  7579  1452                     __end_of_RF_WriteRead:	
  7580                           
  7581                           	psect	text14
  7582  1791                     __ptext14:	
  7583 ;; *************** function _Wireless_changeTransmitPower *****************
  7584 ;; Defined at:
  7585 ;;		line 117 in file "wireless.c"
  7586 ;; Parameters:    Size  Location     Type
  7587 ;;  power           1    wreg     unsigned char 
  7588 ;; Auto vars:     Size  Location     Type
  7589 ;;  power           1   18[BANK0 ] unsigned char 
  7590 ;;  val             1   19[BANK0 ] unsigned char 
  7591 ;; Return value:  Size  Location     Type
  7592 ;;                  1    wreg      void 
  7593 ;; Registers used:
  7594 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7595 ;; Tracked objects:
  7596 ;;		On entry : 0/0
  7597 ;;		On exit  : 0/0
  7598 ;;		Unchanged: 0/0
  7599 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7600 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7601 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7602 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7603 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7604 ;;Total ram usage:        5 bytes
  7605 ;; Hardware stack levels used:    1
  7606 ;; Hardware stack levels required when called:    8
  7607 ;; This function calls:
  7608 ;;		_RF_ReadRegisterData
  7609 ;;		_RF_WriteRegister
  7610 ;;		_limit
  7611 ;; This function is called by:
  7612 ;;		_Wireless_determineTransmitPower
  7613 ;; This function uses a non-reentrant model
  7614 ;;
  7615                           
  7616                           
  7617                           ;psect for function _Wireless_changeTransmitPower
  7618  1791                     _Wireless_changeTransmitPower:	
  7619                           
  7620                           ;incstack = 0
  7621                           ; Regs used in _Wireless_changeTransmitPower: [wreg+fsr1l+fsr1h+status,2+status,0+pclath
      +                          +cstack]
  7622                           ;Wireless_changeTransmitPower@power stored from wreg
  7623  1791  0020               	movlb	0	; select bank0
  7624  1792  00B2               	movwf	Wireless_changeTransmitPower@power
  7625                           
  7626                           ;wireless.c: 120: u8 val;
  7627                           ;wireless.c: 123: power = limit(power, 0, 3);
  7628  1793  0832               	movf	Wireless_changeTransmitPower@power,w
  7629  1794  00AF               	movwf	??_Wireless_changeTransmitPower
  7630  1795  01B0               	clrf	??_Wireless_changeTransmitPower+1
  7631  1796  082F               	movf	??_Wireless_changeTransmitPower,w
  7632  1797  00A1               	movwf	limit@val
  7633  1798  0830               	movf	??_Wireless_changeTransmitPower+1,w
  7634  1799  00A2               	movwf	limit@val+1
  7635  179A  3000               	movlw	0
  7636  179B  00A3               	movwf	limit@min
  7637  179C  00A4               	movwf	limit@min+1
  7638  179D  3003               	movlw	3
  7639  179E  00A5               	movwf	limit@max
  7640  179F  3000               	movlw	0
  7641  17A0  00A6               	movwf	limit@max+1
  7642  17A1  3196  2692  3197   	fcall	_limit
  7643  17A4  0020               	movlb	0	; select bank0
  7644  17A5  0821               	movf	?_limit,w
  7645  17A6  00B1               	movwf	??_Wireless_changeTransmitPower+2
  7646  17A7  0831               	movf	??_Wireless_changeTransmitPower+2,w
  7647  17A8  00B2               	movwf	Wireless_changeTransmitPower@power
  7648                           
  7649                           ;wireless.c: 124: RF_ReadRegisterData(0x06, &val, 1);
  7650  17A9  3033               	movlw	(low (Wireless_changeTransmitPower@val| 0))& (0+255)
  7651  17AA  00AF               	movwf	??_Wireless_changeTransmitPower
  7652  17AB  082F               	movf	??_Wireless_changeTransmitPower,w
  7653  17AC  00AA               	movwf	RF_ReadRegisterData@buf
  7654  17AD  01AB               	clrf	RF_ReadRegisterData@bufSize
  7655  17AE  0AAB               	incf	RF_ReadRegisterData@bufSize,f
  7656  17AF  3006               	movlw	6
  7657  17B0  3195  25AE  3197   	fcall	_RF_ReadRegisterData
  7658                           
  7659                           ;wireless.c: 126: val &= 0b11111001;
  7660  17B3  30F9               	movlw	249
  7661  17B4  0020               	movlb	0	; select bank0
  7662  17B5  00AF               	movwf	??_Wireless_changeTransmitPower
  7663  17B6  082F               	movf	??_Wireless_changeTransmitPower,w
  7664  17B7  05B3               	andwf	Wireless_changeTransmitPower@val,f
  7665                           
  7666                           ;wireless.c: 127: val |= (power <<1);
  7667  17B8  3532               	lslf	Wireless_changeTransmitPower@power,w
  7668  17B9  00AF               	movwf	??_Wireless_changeTransmitPower
  7669  17BA  082F               	movf	??_Wireless_changeTransmitPower,w
  7670  17BB  04B3               	iorwf	Wireless_changeTransmitPower@val,f
  7671                           
  7672                           ;wireless.c: 128: RF_WriteRegister(0x06, val);
  7673  17BC  0833               	movf	Wireless_changeTransmitPower@val,w
  7674  17BD  00AF               	movwf	??_Wireless_changeTransmitPower
  7675  17BE  082F               	movf	??_Wireless_changeTransmitPower,w
  7676  17BF  00A3               	movwf	RF_WriteRegister@val
  7677  17C0  3006               	movlw	6
  7678  17C1  3194  2410         	fcall	_RF_WriteRegister
  7679  17C3  0008               	return
  7680  17C4                     __end_of_Wireless_changeTransmitPower:	
  7681                           
  7682                           	psect	text15
  7683  1692                     __ptext15:	
  7684 ;; *************** function _limit *****************
  7685 ;; Defined at:
  7686 ;;		line 12 in file "common.c"
  7687 ;; Parameters:    Size  Location     Type
  7688 ;;  val             2    1[BANK0 ] int 
  7689 ;;  min             2    3[BANK0 ] int 
  7690 ;;  max             2    5[BANK0 ] int 
  7691 ;; Auto vars:     Size  Location     Type
  7692 ;;		None
  7693 ;; Return value:  Size  Location     Type
  7694 ;;                  2    1[BANK0 ] int 
  7695 ;; Registers used:
  7696 ;;		wreg
  7697 ;; Tracked objects:
  7698 ;;		On entry : 0/0
  7699 ;;		On exit  : 0/0
  7700 ;;		Unchanged: 0/0
  7701 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7702 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7703 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7704 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7705 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7706 ;;Total ram usage:        7 bytes
  7707 ;; Hardware stack levels used:    1
  7708 ;; Hardware stack levels required when called:    4
  7709 ;; This function calls:
  7710 ;;		Nothing
  7711 ;; This function is called by:
  7712 ;;		_Wireless_determineTransmitPower
  7713 ;;		_Wireless_changeTransmitPower
  7714 ;; This function uses a non-reentrant model
  7715 ;;
  7716                           
  7717                           
  7718                           ;psect for function _limit
  7719  1692                     _limit:	
  7720                           
  7721                           ;common.c: 13: if(val<min)
  7722                           
  7723                           ;incstack = 0
  7724                           ; Regs used in _limit: [wreg]
  7725  1692  0020               	movlb	0	; select bank0
  7726  1693  0822               	movf	limit@val+1,w
  7727  1694  3A80               	xorlw	128
  7728  1695  00A7               	movwf	??_limit
  7729  1696  0824               	movf	limit@min+1,w
  7730  1697  3A80               	xorlw	128
  7731  1698  0227               	subwf	??_limit,w
  7732  1699  1D03               	skipz
  7733  169A  2E9D               	goto	u5135
  7734  169B  0823               	movf	limit@min,w
  7735  169C  0221               	subwf	limit@val,w
  7736  169D                     u5135:	
  7737  169D  1803               	skipnc
  7738  169E  2EA5               	goto	l5675
  7739                           
  7740                           ;common.c: 14: return min;
  7741  169F  0020               	movlb	0	; select bank0
  7742  16A0  0824               	movf	limit@min+1,w
  7743  16A1  00A2               	movwf	?_limit+1
  7744  16A2  0823               	movf	limit@min,w
  7745  16A3  00A1               	movwf	?_limit
  7746  16A4  0008               	return
  7747  16A5                     l5675:	
  7748                           
  7749                           ;common.c: 15: if(val>max)
  7750  16A5  0020               	movlb	0	; select bank0
  7751  16A6  0826               	movf	limit@max+1,w
  7752  16A7  3A80               	xorlw	128
  7753  16A8  00A7               	movwf	??_limit
  7754  16A9  0822               	movf	limit@val+1,w
  7755  16AA  3A80               	xorlw	128
  7756  16AB  0227               	subwf	??_limit,w
  7757  16AC  1D03               	skipz
  7758  16AD  2EB0               	goto	u5145
  7759  16AE  0821               	movf	limit@val,w
  7760  16AF  0225               	subwf	limit@max,w
  7761  16B0                     u5145:	
  7762  16B0  1803               	skipnc
  7763  16B1  0008               	return
  7764                           
  7765                           ;common.c: 16: return max;
  7766  16B2  0020               	movlb	0	; select bank0
  7767  16B3  0826               	movf	limit@max+1,w
  7768  16B4  00A2               	movwf	?_limit+1
  7769  16B5  0825               	movf	limit@max,w
  7770  16B6  00A1               	movwf	?_limit
  7771  16B7  0008               	return
  7772  16B8                     __end_of_limit:	
  7773                           ;common.c: 17: return val;
  7774                           
  7775                           
  7776                           	psect	text16
  7777  0B89                     __ptext16:	
  7778 ;; *************** function _Wireless_checkDataReceived *****************
  7779 ;; Defined at:
  7780 ;;		line 207 in file "wireless.c"
  7781 ;; Parameters:    Size  Location     Type
  7782 ;;		None
  7783 ;; Auto vars:     Size  Location     Type
  7784 ;;  data            4   23[BANK0 ] unsigned char [4]
  7785 ;;  channel         1   27[BANK0 ] unsigned char 
  7786 ;; Return value:  Size  Location     Type
  7787 ;;                  1    wreg      void 
  7788 ;; Registers used:
  7789 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7790 ;; Tracked objects:
  7791 ;;		On entry : 0/0
  7792 ;;		On exit  : 0/0
  7793 ;;		Unchanged: 0/0
  7794 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7795 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7796 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7797 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7798 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7799 ;;Total ram usage:        9 bytes
  7800 ;; Hardware stack levels used:    1
  7801 ;; Hardware stack levels required when called:    9
  7802 ;; This function calls:
  7803 ;;		_DOOR_resetPos
  7804 ;;		_DOOR_update
  7805 ;;		_RF_DataIsReady
  7806 ;;		_RF_RxPayload
  7807 ;;		___lmul
  7808 ;; This function is called by:
  7809 ;;		_Wireless_packageData
  7810 ;; This function uses a non-reentrant model
  7811 ;;
  7812                           
  7813                           
  7814                           ;psect for function _Wireless_checkDataReceived
  7815  0B89                     _Wireless_checkDataReceived:	
  7816  0B89                     l1141:	
  7817                           ;incstack = 0
  7818                           ; Regs used in _Wireless_checkDataReceived: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+c
      +                          stack]
  7819                           ;wireless.c: 214: char channel;
  7820                           ;wireless.c: 215: char data[4];
  7821                           ;wireless.c: 216: do
  7822                           
  7823                           
  7824                           ;wireless.c: 217: {
  7825                           ;wireless.c: 218: if(RF_DataIsReady(&channel))
  7826  0B89  303B               	movlw	(low (Wireless_checkDataReceived@channel| 0))& (0+255)
  7827  0B8A  3195  2591  318B   	fcall	_RF_DataIsReady
  7828  0B8D  3A00               	xorlw	0
  7829  0B8E  1903               	skipnz
  7830  0B8F  2BFB               	goto	l6221
  7831                           
  7832                           ;wireless.c: 219: {
  7833                           ;wireless.c: 220: RF_RxPayload(data, 4);
  7834  0B90  3004               	movlw	4
  7835  0B91  0020               	movlb	0	; select bank0
  7836  0B92  00B3               	movwf	??_Wireless_checkDataReceived
  7837  0B93  0833               	movf	??_Wireless_checkDataReceived,w
  7838  0B94  00AF               	movwf	RF_RxPayload@payloadSize
  7839  0B95  3037               	movlw	(low (Wireless_checkDataReceived@data| 0))& (0+255)
  7840  0B96  3193  23D3  318B   	fcall	_RF_RxPayload
  7841                           
  7842                           ;wireless.c: 221: if(data[0] & 0x01)
  7843  0B99  0020               	movlb	0	; select bank0
  7844  0B9A  1C37               	btfss	Wireless_checkDataReceived@data,0
  7845  0B9B  2BA5               	goto	l6207
  7846                           
  7847                           ;wireless.c: 222: {
  7848                           ;wireless.c: 223: DOOR_update(doorOpenAngle,data[1]);
  7849  0B9C  0838               	movf	Wireless_checkDataReceived@data+1,w
  7850  0B9D  00B3               	movwf	??_Wireless_checkDataReceived
  7851  0B9E  0833               	movf	??_Wireless_checkDataReceived,w
  7852  0B9F  00A7               	movwf	DOOR_update@closedAngle
  7853  0BA0  0021               	movlb	1	; select bank1
  7854  0BA1  085E               	movf	_doorOpenAngle^(0+128),w
  7855  0BA2  3194  2426  318B   	fcall	_DOOR_update
  7856  0BA5                     l6207:	
  7857                           
  7858                           ;wireless.c: 224: }
  7859                           ;wireless.c: 225: if(data[0] & 0x02)
  7860  0BA5  0020               	movlb	0	; select bank0
  7861  0BA6  1CB7               	btfss	Wireless_checkDataReceived@data,1
  7862  0BA7  2BB2               	goto	l6211
  7863                           
  7864                           ;wireless.c: 226: {
  7865                           ;wireless.c: 227: DOOR_update(data[2],doorClosedAngle);
  7866  0BA8  0021               	movlb	1	; select bank1
  7867  0BA9  085D               	movf	_doorClosedAngle^(0+128),w
  7868  0BAA  0020               	movlb	0	; select bank0
  7869  0BAB  00B3               	movwf	??_Wireless_checkDataReceived
  7870  0BAC  0833               	movf	??_Wireless_checkDataReceived,w
  7871  0BAD  00A7               	movwf	DOOR_update@closedAngle
  7872  0BAE  0839               	movf	Wireless_checkDataReceived@data+2,w
  7873  0BAF  3194  2426  318B   	fcall	_DOOR_update
  7874  0BB2                     l6211:	
  7875                           
  7876                           ;wireless.c: 228: }
  7877                           ;wireless.c: 229: if(data[0] & 0x04)
  7878  0BB2  0020               	movlb	0	; select bank0
  7879  0BB3  1D37               	btfss	Wireless_checkDataReceived@data,2
  7880  0BB4  2BF5               	goto	l6217
  7881                           
  7882                           ;wireless.c: 230: {
  7883                           ;wireless.c: 231: sensorUpdatePeriod=data[3];
  7884  0BB5  083A               	movf	Wireless_checkDataReceived@data+3,w
  7885  0BB6  00B3               	movwf	??_Wireless_checkDataReceived
  7886  0BB7  01B4               	clrf	??_Wireless_checkDataReceived+1
  7887  0BB8  01B5               	clrf	??_Wireless_checkDataReceived+2
  7888  0BB9  01B6               	clrf	??_Wireless_checkDataReceived+3
  7889  0BBA  0836               	movf	??_Wireless_checkDataReceived+3,w
  7890  0BBB  0022               	movlb	2	; select bank2
  7891  0BBC  00ED               	movwf	(_sensorUpdatePeriod+3)^(0+256)
  7892  0BBD  0020               	movlb	0	; select bank0
  7893  0BBE  0835               	movf	??_Wireless_checkDataReceived+2,w
  7894  0BBF  0022               	movlb	2	; select bank2
  7895  0BC0  00EC               	movwf	(_sensorUpdatePeriod+2)^(0+256)
  7896  0BC1  0020               	movlb	0	; select bank0
  7897  0BC2  0834               	movf	??_Wireless_checkDataReceived+1,w
  7898  0BC3  0022               	movlb	2	; select bank2
  7899  0BC4  00EB               	movwf	(_sensorUpdatePeriod+1)^(0+256)
  7900  0BC5  0020               	movlb	0	; select bank0
  7901  0BC6  0833               	movf	??_Wireless_checkDataReceived,w
  7902  0BC7  0022               	movlb	2	; select bank2
  7903  0BC8  00EA               	movwf	_sensorUpdatePeriod^(0+256)
  7904                           
  7905                           ;wireless.c: 232: sensorUpdatePeriod*=1000;
  7906  0BC9  3000               	movlw	0
  7907  0BCA  0020               	movlb	0	; select bank0
  7908  0BCB  00A4               	movwf	___lmul@multiplier+3
  7909  0BCC  3000               	movlw	0
  7910  0BCD  00A3               	movwf	___lmul@multiplier+2
  7911  0BCE  3003               	movlw	3
  7912  0BCF  00A2               	movwf	___lmul@multiplier+1
  7913  0BD0  30E8               	movlw	232
  7914  0BD1  00A1               	movwf	___lmul@multiplier
  7915  0BD2  0022               	movlb	2	; select bank2
  7916  0BD3  086D               	movf	(_sensorUpdatePeriod+3)^(0+256),w
  7917  0BD4  0020               	movlb	0	; select bank0
  7918  0BD5  00A8               	movwf	___lmul@multiplicand+3
  7919  0BD6  0022               	movlb	2	; select bank2
  7920  0BD7  086C               	movf	(_sensorUpdatePeriod+2)^(0+256),w
  7921  0BD8  0020               	movlb	0	; select bank0
  7922  0BD9  00A7               	movwf	___lmul@multiplicand+2
  7923  0BDA  0022               	movlb	2	; select bank2
  7924  0BDB  086B               	movf	(_sensorUpdatePeriod+1)^(0+256),w
  7925  0BDC  0020               	movlb	0	; select bank0
  7926  0BDD  00A6               	movwf	___lmul@multiplicand+1
  7927  0BDE  0022               	movlb	2	; select bank2
  7928  0BDF  086A               	movf	_sensorUpdatePeriod^(0+256),w
  7929  0BE0  0020               	movlb	0	; select bank0
  7930  0BE1  00A5               	movwf	___lmul@multiplicand
  7931  0BE2  3197  2761  318B   	fcall	___lmul
  7932  0BE5  0020               	movlb	0	; select bank0
  7933  0BE6  0824               	movf	?___lmul+3,w
  7934  0BE7  0022               	movlb	2	; select bank2
  7935  0BE8  00ED               	movwf	(_sensorUpdatePeriod+3)^(0+256)
  7936  0BE9  0020               	movlb	0	; select bank0
  7937  0BEA  0823               	movf	?___lmul+2,w
  7938  0BEB  0022               	movlb	2	; select bank2
  7939  0BEC  00EC               	movwf	(_sensorUpdatePeriod+2)^(0+256)
  7940  0BED  0020               	movlb	0	; select bank0
  7941  0BEE  0822               	movf	?___lmul+1,w
  7942  0BEF  0022               	movlb	2	; select bank2
  7943  0BF0  00EB               	movwf	(_sensorUpdatePeriod+1)^(0+256)
  7944  0BF1  0020               	movlb	0	; select bank0
  7945  0BF2  0821               	movf	?___lmul,w
  7946  0BF3  0022               	movlb	2	; select bank2
  7947  0BF4  00EA               	movwf	_sensorUpdatePeriod^(0+256)
  7948  0BF5                     l6217:	
  7949                           
  7950                           ;wireless.c: 233: }
  7951                           ;wireless.c: 234: if(data[0] & 0x08)
  7952  0BF5  0020               	movlb	0	; select bank0
  7953  0BF6  1DB7               	btfss	Wireless_checkDataReceived@data,3
  7954  0BF7  2BFB               	goto	l6221
  7955                           
  7956                           ;wireless.c: 235: {
  7957                           ;wireless.c: 236: DOOR_resetPos();
  7958  0BF8  3192  2294  318B   	fcall	_DOOR_resetPos
  7959  0BFB                     l6221:	
  7960                           
  7961                           ;wireless.c: 237: }
  7962                           ;wireless.c: 241: }
  7963                           ;wireless.c: 242: }while(RF_DataIsReady(&channel));
  7964  0BFB  303B               	movlw	(low (Wireless_checkDataReceived@channel| 0))& (0+255)
  7965  0BFC  3195  2591  318B   	fcall	_RF_DataIsReady
  7966  0BFF  3A00               	xorlw	0
  7967  0C00  1903               	btfsc	3,2
  7968  0C01  0008               	return
  7969  0C02  2B89               	goto	l1141
  7970  0C03                     __end_of_Wireless_checkDataReceived:	
  7971                           
  7972                           	psect	text17
  7973  13D3                     __ptext17:	
  7974 ;; *************** function _RF_RxPayload *****************
  7975 ;; Defined at:
  7976 ;;		line 186 in file "nrf24.c"
  7977 ;; Parameters:    Size  Location     Type
  7978 ;;  payload         1    wreg     PTR unsigned char 
  7979 ;;		 -> Wireless_checkDataReceived@data(4), 
  7980 ;;  payloadSize     1   15[BANK0 ] unsigned char 
  7981 ;; Auto vars:     Size  Location     Type
  7982 ;;  payload         1   18[BANK0 ] PTR unsigned char 
  7983 ;;		 -> Wireless_checkDataReceived@data(4), 
  7984 ;; Return value:  Size  Location     Type
  7985 ;;                  1    wreg      void 
  7986 ;; Registers used:
  7987 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7988 ;; Tracked objects:
  7989 ;;		On entry : 0/0
  7990 ;;		On exit  : 0/0
  7991 ;;		Unchanged: 0/0
  7992 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7993 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7994 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7995 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7996 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7997 ;;Total ram usage:        4 bytes
  7998 ;; Hardware stack levels used:    1
  7999 ;; Hardware stack levels required when called:    8
  8000 ;; This function calls:
  8001 ;;		_RF_ReadRegisterData
  8002 ;; This function is called by:
  8003 ;;		_Wireless_checkDataReceived
  8004 ;; This function uses a non-reentrant model
  8005 ;;
  8006                           
  8007                           
  8008                           ;psect for function _RF_RxPayload
  8009  13D3                     _RF_RxPayload:	
  8010                           
  8011                           ;incstack = 0
  8012                           ; Regs used in _RF_RxPayload: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8013                           ;RF_RxPayload@payload stored from wreg
  8014  13D3  0020               	movlb	0	; select bank0
  8015  13D4  00B2               	movwf	RF_RxPayload@payload
  8016                           
  8017                           ;nrf24.c: 187: do { LATCbits.LATC2 = 0; } while(0);
  8018  13D5  0022               	movlb	2	; select bank2
  8019  13D6  110E               	bcf	14,2	;volatile
  8020                           
  8021                           ;nrf24.c: 188: RF_ReadRegisterData(0x61, payload, payloadSize);
  8022  13D7  0020               	movlb	0	; select bank0
  8023  13D8  0832               	movf	RF_RxPayload@payload,w
  8024  13D9  00B0               	movwf	??_RF_RxPayload
  8025  13DA  0830               	movf	??_RF_RxPayload,w
  8026  13DB  00AA               	movwf	RF_ReadRegisterData@buf
  8027  13DC  082F               	movf	RF_RxPayload@payloadSize,w
  8028  13DD  00B1               	movwf	??_RF_RxPayload+1
  8029  13DE  0831               	movf	??_RF_RxPayload+1,w
  8030  13DF  00AB               	movwf	RF_ReadRegisterData@bufSize
  8031  13E0  3061               	movlw	97
  8032  13E1  3195  25AE         	fcall	_RF_ReadRegisterData
  8033                           
  8034                           ;nrf24.c: 189: do { LATCbits.LATC2 = 1; } while(0);
  8035  13E3  0022               	movlb	2	; select bank2
  8036  13E4  150E               	bsf	14,2	;volatile
  8037  13E5  0008               	return
  8038  13E6                     __end_of_RF_RxPayload:	
  8039                           
  8040                           	psect	text18
  8041  15AE                     __ptext18:	
  8042 ;; *************** function _RF_ReadRegisterData *****************
  8043 ;; Defined at:
  8044 ;;		line 99 in file "nrf24.c"
  8045 ;; Parameters:    Size  Location     Type
  8046 ;;  reg             1    wreg     unsigned char 
  8047 ;;  buf             1   10[BANK0 ] PTR unsigned char 
  8048 ;;		 -> Wireless_checkDataReceived@data(4), Wireless_wake@reg(1), Wireless_sleep@reg(1), Wireless_changeTransmitPower@va
      +l(1), 
  8049 ;;  bufSize         1   11[BANK0 ] unsigned char 
  8050 ;; Auto vars:     Size  Location     Type
  8051 ;;  reg             1   14[BANK0 ] unsigned char 
  8052 ;; Return value:  Size  Location     Type
  8053 ;;                  1    wreg      void 
  8054 ;; Registers used:
  8055 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8056 ;; Tracked objects:
  8057 ;;		On entry : 0/0
  8058 ;;		On exit  : 0/0
  8059 ;;		Unchanged: 0/0
  8060 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8061 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8062 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8063 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8064 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8065 ;;Total ram usage:        5 bytes
  8066 ;; Hardware stack levels used:    1
  8067 ;; Hardware stack levels required when called:    7
  8068 ;; This function calls:
  8069 ;;		_SPI_WriteRead
  8070 ;;		_SPI_WriteReadBuffer
  8071 ;; This function is called by:
  8072 ;;		_RF_RxPayload
  8073 ;;		_Wireless_changeTransmitPower
  8074 ;;		_Wireless_sleep
  8075 ;;		_Wireless_wake
  8076 ;; This function uses a non-reentrant model
  8077 ;;
  8078                           
  8079                           
  8080                           ;psect for function _RF_ReadRegisterData
  8081  15AE                     _RF_ReadRegisterData:	
  8082                           
  8083                           ;incstack = 0
  8084                           ; Regs used in _RF_ReadRegisterData: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8085                           ;RF_ReadRegisterData@reg stored from wreg
  8086  15AE  0020               	movlb	0	; select bank0
  8087  15AF  00AE               	movwf	RF_ReadRegisterData@reg
  8088                           
  8089                           ;nrf24.c: 100: do { LATCbits.LATC1 = 0; } while(0);
  8090  15B0  0022               	movlb	2	; select bank2
  8091  15B1  108E               	bcf	14,1	;volatile
  8092                           
  8093                           ;nrf24.c: 101: (void)SPI_WriteRead(0x00|reg);
  8094  15B2  0020               	movlb	0	; select bank0
  8095  15B3  082E               	movf	RF_ReadRegisterData@reg,w
  8096  15B4  3192  22C3  3195   	fcall	_SPI_WriteRead
  8097                           
  8098                           ;nrf24.c: 102: SPI_WriteReadBuffer(buf, buf, bufSize);
  8099  15B7  0020               	movlb	0	; select bank0
  8100  15B8  082A               	movf	RF_ReadRegisterData@buf,w
  8101  15B9  00AC               	movwf	??_RF_ReadRegisterData
  8102  15BA  082C               	movf	??_RF_ReadRegisterData,w
  8103  15BB  00A3               	movwf	SPI_WriteReadBuffer@bufIn
  8104  15BC  082B               	movf	RF_ReadRegisterData@bufSize,w
  8105  15BD  00AD               	movwf	??_RF_ReadRegisterData+1
  8106  15BE  082D               	movf	??_RF_ReadRegisterData+1,w
  8107  15BF  00A4               	movwf	SPI_WriteReadBuffer@bufSize
  8108  15C0  082A               	movf	RF_ReadRegisterData@buf,w
  8109  15C1  3196  260A  3195   	fcall	_SPI_WriteReadBuffer
  8110                           
  8111                           ;nrf24.c: 103: do { LATCbits.LATC1 = 1; } while(0);
  8112  15C4  0022               	movlb	2	; select bank2
  8113  15C5  148E               	bsf	14,1	;volatile
  8114                           
  8115                           ;nrf24.c: 104: _delay((unsigned long)((10)*(8000000/4000000.0)));
  8116  15C6  3006               	movlw	6
  8117  15C7                     u7237:	
  8118  15C7  0B89               	decfsz	9,f
  8119  15C8  2DC7               	goto	u7237
  8120  15C9  3200               	nop2
  8121  15CA  0008               	return
  8122  15CB                     __end_of_RF_ReadRegisterData:	
  8123                           
  8124                           	psect	text19
  8125  160A                     __ptext19:	
  8126 ;; *************** function _SPI_WriteReadBuffer *****************
  8127 ;; Defined at:
  8128 ;;		line 43 in file "nrf24.c"
  8129 ;; Parameters:    Size  Location     Type
  8130 ;;  bufOut          1    wreg     PTR unsigned char 
  8131 ;;		 -> Wireless_checkDataReceived@data(4), Wireless_wake@reg(1), Wireless_sleep@reg(1), Wireless_changeTransmitPower@va
      +l(1), 
  8132 ;;  bufIn           1    3[BANK0 ] PTR unsigned char 
  8133 ;;		 -> Wireless_checkDataReceived@data(4), Wireless_wake@reg(1), Wireless_sleep@reg(1), Wireless_changeTransmitPower@va
      +l(1), 
  8134 ;;  bufSize         1    4[BANK0 ] unsigned char 
  8135 ;; Auto vars:     Size  Location     Type
  8136 ;;  bufOut          1    8[BANK0 ] PTR unsigned char 
  8137 ;;		 -> Wireless_checkDataReceived@data(4), Wireless_wake@reg(1), Wireless_sleep@reg(1), Wireless_changeTransmitPower@va
      +l(1), 
  8138 ;;  i               1    9[BANK0 ] unsigned char 
  8139 ;; Return value:  Size  Location     Type
  8140 ;;                  1    wreg      void 
  8141 ;; Registers used:
  8142 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8143 ;; Tracked objects:
  8144 ;;		On entry : 0/0
  8145 ;;		On exit  : 0/0
  8146 ;;		Unchanged: 0/0
  8147 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8148 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8149 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8150 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8151 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8152 ;;Total ram usage:        7 bytes
  8153 ;; Hardware stack levels used:    1
  8154 ;; Hardware stack levels required when called:    6
  8155 ;; This function calls:
  8156 ;;		_SPI_WriteRead
  8157 ;; This function is called by:
  8158 ;;		_RF_ReadRegisterData
  8159 ;; This function uses a non-reentrant model
  8160 ;;
  8161                           
  8162                           
  8163                           ;psect for function _SPI_WriteReadBuffer
  8164  160A                     _SPI_WriteReadBuffer:	
  8165                           
  8166                           ;incstack = 0
  8167                           ; Regs used in _SPI_WriteReadBuffer: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8168                           ;SPI_WriteReadBuffer@bufOut stored from wreg
  8169  160A  0020               	movlb	0	; select bank0
  8170  160B  00A8               	movwf	SPI_WriteReadBuffer@bufOut
  8171                           
  8172                           ;nrf24.c: 44: uint8_t i;
  8173                           ;nrf24.c: 46: for(i=0;i<bufSize;i++) {
  8174  160C  01A9               	clrf	SPI_WriteReadBuffer@i
  8175  160D                     l5587:	
  8176  160D  0824               	movf	SPI_WriteReadBuffer@bufSize,w
  8177  160E  0229               	subwf	SPI_WriteReadBuffer@i,w
  8178  160F  1803               	btfsc	3,0
  8179  1610  0008               	return
  8180                           
  8181                           ;nrf24.c: 47: bufIn[i] = SPI_WriteRead(bufOut[i]);
  8182  1611  0829               	movf	SPI_WriteReadBuffer@i,w
  8183  1612  0728               	addwf	SPI_WriteReadBuffer@bufOut,w
  8184  1613  00A5               	movwf	??_SPI_WriteReadBuffer
  8185  1614  0825               	movf	??_SPI_WriteReadBuffer,w
  8186  1615  0086               	movwf	6
  8187  1616  0187               	clrf	7
  8188  1617  0801               	movf	1,w
  8189  1618  3192  22C3  3196   	fcall	_SPI_WriteRead
  8190  161B  0020               	movlb	0	; select bank0
  8191  161C  00A6               	movwf	??_SPI_WriteReadBuffer+1
  8192  161D  0829               	movf	SPI_WriteReadBuffer@i,w
  8193  161E  0723               	addwf	SPI_WriteReadBuffer@bufIn,w
  8194  161F  00A7               	movwf	??_SPI_WriteReadBuffer+2
  8195  1620  0827               	movf	??_SPI_WriteReadBuffer+2,w
  8196  1621  0086               	movwf	6
  8197  1622  0187               	clrf	7
  8198  1623  0826               	movf	??_SPI_WriteReadBuffer+1,w
  8199  1624  0081               	movwf	1
  8200  1625  3001               	movlw	1
  8201  1626  00A5               	movwf	??_SPI_WriteReadBuffer
  8202  1627  0825               	movf	??_SPI_WriteReadBuffer,w
  8203  1628  07A9               	addwf	SPI_WriteReadBuffer@i,f
  8204  1629  2E0D               	goto	l5587
  8205  162A                     __end_of_SPI_WriteReadBuffer:	
  8206                           
  8207                           	psect	text20
  8208  1591                     __ptext20:	
  8209 ;; *************** function _RF_DataIsReady *****************
  8210 ;; Defined at:
  8211 ;;		line 202 in file "nrf24.c"
  8212 ;; Parameters:    Size  Location     Type
  8213 ;;  channel         1    wreg     PTR unsigned char 
  8214 ;;		 -> Wireless_checkDataReceived@channel(1), 
  8215 ;; Auto vars:     Size  Location     Type
  8216 ;;  channel         1    7[BANK0 ] PTR unsigned char 
  8217 ;;		 -> Wireless_checkDataReceived@channel(1), 
  8218 ;;  status          1    8[BANK0 ] unsigned char 
  8219 ;; Return value:  Size  Location     Type
  8220 ;;                  1    wreg      unsigned char 
  8221 ;; Registers used:
  8222 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8223 ;; Tracked objects:
  8224 ;;		On entry : 0/0
  8225 ;;		On exit  : 0/0
  8226 ;;		Unchanged: 0/0
  8227 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8228 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8229 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8230 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8231 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8232 ;;Total ram usage:        3 bytes
  8233 ;; Hardware stack levels used:    1
  8234 ;; Hardware stack levels required when called:    7
  8235 ;; This function calls:
  8236 ;;		_RF_ReadRegister
  8237 ;; This function is called by:
  8238 ;;		_Wireless_checkDataReceived
  8239 ;; This function uses a non-reentrant model
  8240 ;;
  8241                           
  8242                           
  8243                           ;psect for function _RF_DataIsReady
  8244  1591                     _RF_DataIsReady:	
  8245                           
  8246                           ;incstack = 0
  8247                           ; Regs used in _RF_DataIsReady: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8248                           ;RF_DataIsReady@channel stored from wreg
  8249  1591  0020               	movlb	0	; select bank0
  8250  1592  00A7               	movwf	RF_DataIsReady@channel
  8251                           
  8252                           ;nrf24.c: 204: char status;
  8253                           ;nrf24.c: 205: status=RF_ReadRegister(0x07);
  8254  1593  3007               	movlw	7
  8255  1594  3194  24B4  3195   	fcall	_RF_ReadRegister
  8256  1597  0020               	movlb	0	; select bank0
  8257  1598  00A6               	movwf	??_RF_DataIsReady
  8258  1599  0826               	movf	??_RF_DataIsReady,w
  8259  159A  00A8               	movwf	RF_DataIsReady@status
  8260                           
  8261                           ;nrf24.c: 206: status&=0x0E;
  8262  159B  300E               	movlw	14
  8263  159C  00A6               	movwf	??_RF_DataIsReady
  8264  159D  0826               	movf	??_RF_DataIsReady,w
  8265  159E  05A8               	andwf	RF_DataIsReady@status,f
  8266                           
  8267                           ;nrf24.c: 207: if(status==0x0E)
  8268  159F  300E               	movlw	14
  8269  15A0  0628               	xorwf	RF_DataIsReady@status,w
  8270  15A1  1D03               	btfss	3,2
  8271  15A2  2DA5               	goto	l5837
  8272                           
  8273                           ;nrf24.c: 208: return 0;
  8274  15A3  3000               	movlw	0
  8275  15A4  0008               	return
  8276  15A5                     l5837:	
  8277                           
  8278                           ;nrf24.c: 209: else
  8279                           ;nrf24.c: 210: *channel=status>>1;
  8280  15A5  3628               	lsrf	RF_DataIsReady@status,w
  8281  15A6  00A6               	movwf	??_RF_DataIsReady
  8282  15A7  0827               	movf	RF_DataIsReady@channel,w
  8283  15A8  0086               	movwf	6
  8284  15A9  0187               	clrf	7
  8285  15AA  0826               	movf	??_RF_DataIsReady,w
  8286  15AB  0081               	movwf	1
  8287                           
  8288                           ;nrf24.c: 211: return 1;
  8289  15AC  3001               	movlw	1
  8290  15AD  0008               	return
  8291  15AE                     __end_of_RF_DataIsReady:	
  8292                           
  8293                           	psect	text21
  8294  14B4                     __ptext21:	
  8295 ;; *************** function _RF_ReadRegister *****************
  8296 ;; Defined at:
  8297 ;;		line 82 in file "nrf24.c"
  8298 ;; Parameters:    Size  Location     Type
  8299 ;;  reg             1    wreg     unsigned char 
  8300 ;; Auto vars:     Size  Location     Type
  8301 ;;  reg             1    4[BANK0 ] unsigned char 
  8302 ;;  val             1    5[BANK0 ] unsigned char 
  8303 ;; Return value:  Size  Location     Type
  8304 ;;                  1    wreg      unsigned char 
  8305 ;; Registers used:
  8306 ;;		wreg, status,2, status,0, pclath, cstack
  8307 ;; Tracked objects:
  8308 ;;		On entry : 0/0
  8309 ;;		On exit  : 0/0
  8310 ;;		Unchanged: 0/0
  8311 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8312 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8313 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8314 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8315 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8316 ;;Total ram usage:        3 bytes
  8317 ;; Hardware stack levels used:    1
  8318 ;; Hardware stack levels required when called:    6
  8319 ;; This function calls:
  8320 ;;		_SPI_WriteRead
  8321 ;; This function is called by:
  8322 ;;		_RF_DataIsReady
  8323 ;; This function uses a non-reentrant model
  8324 ;;
  8325                           
  8326                           
  8327                           ;psect for function _RF_ReadRegister
  8328  14B4                     _RF_ReadRegister:	
  8329                           
  8330                           ;incstack = 0
  8331                           ; Regs used in _RF_ReadRegister: [wreg+status,2+status,0+pclath+cstack]
  8332                           ;RF_ReadRegister@reg stored from wreg
  8333  14B4  0020               	movlb	0	; select bank0
  8334  14B5  00A4               	movwf	RF_ReadRegister@reg
  8335                           
  8336                           ;nrf24.c: 83: uint8_t val;
  8337                           ;nrf24.c: 85: do { LATCbits.LATC1 = 0; } while(0);
  8338  14B6  0022               	movlb	2	; select bank2
  8339  14B7  108E               	bcf	14,1	;volatile
  8340                           
  8341                           ;nrf24.c: 86: (void)SPI_WriteRead(reg);
  8342  14B8  0020               	movlb	0	; select bank0
  8343  14B9  0824               	movf	RF_ReadRegister@reg,w
  8344  14BA  3192  22C3  3194   	fcall	_SPI_WriteRead
  8345                           
  8346                           ;nrf24.c: 87: val = SPI_WriteRead(0);
  8347  14BD  3000               	movlw	0
  8348  14BE  3192  22C3  3194   	fcall	_SPI_WriteRead
  8349  14C1  0020               	movlb	0	; select bank0
  8350  14C2  00A3               	movwf	??_RF_ReadRegister
  8351  14C3  0823               	movf	??_RF_ReadRegister,w
  8352  14C4  00A5               	movwf	RF_ReadRegister@val
  8353                           
  8354                           ;nrf24.c: 88: do { LATCbits.LATC1 = 1; } while(0);
  8355  14C5  0022               	movlb	2	; select bank2
  8356  14C6  148E               	bsf	14,1	;volatile
  8357                           
  8358                           ;nrf24.c: 89: _delay((unsigned long)((10)*(8000000/4000000.0)));
  8359  14C7  3006               	movlw	6
  8360  14C8                     u7247:	
  8361  14C8  0B89               	decfsz	9,f
  8362  14C9  2CC8               	goto	u7247
  8363  14CA  3200               	nop2
  8364                           
  8365                           ;nrf24.c: 90: return val;
  8366  14CB  0020               	movlb	0	; select bank0
  8367  14CC  0825               	movf	RF_ReadRegister@val,w
  8368  14CD  0008               	return
  8369  14CE                     __end_of_RF_ReadRegister:	
  8370                           
  8371                           	psect	text22
  8372  1426                     __ptext22:	
  8373 ;; *************** function _DOOR_update *****************
  8374 ;; Defined at:
  8375 ;;		line 16 in file "doorlogic.c"
  8376 ;; Parameters:    Size  Location     Type
  8377 ;;  openAngle       1    wreg     unsigned char 
  8378 ;;  closedAngle     1    7[BANK0 ] unsigned char 
  8379 ;; Auto vars:     Size  Location     Type
  8380 ;;  openAngle       1    9[BANK0 ] unsigned char 
  8381 ;; Return value:  Size  Location     Type
  8382 ;;                  1    wreg      void 
  8383 ;; Registers used:
  8384 ;;		wreg, status,2, status,0, pclath, cstack
  8385 ;; Tracked objects:
  8386 ;;		On entry : 0/0
  8387 ;;		On exit  : 0/0
  8388 ;;		Unchanged: 0/0
  8389 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8390 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8391 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8392 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8393 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8394 ;;Total ram usage:        3 bytes
  8395 ;; Hardware stack levels used:    1
  8396 ;; Hardware stack levels required when called:    6
  8397 ;; This function calls:
  8398 ;;		_Storage_save
  8399 ;; This function is called by:
  8400 ;;		_Wireless_checkDataReceived
  8401 ;; This function uses a non-reentrant model
  8402 ;;
  8403                           
  8404                           
  8405                           ;psect for function _DOOR_update
  8406  1426                     _DOOR_update:	
  8407                           
  8408                           ;incstack = 0
  8409                           ; Regs used in _DOOR_update: [wreg+status,2+status,0+pclath+cstack]
  8410                           ;DOOR_update@openAngle stored from wreg
  8411  1426  0020               	movlb	0	; select bank0
  8412  1427  00A9               	movwf	DOOR_update@openAngle
  8413                           
  8414                           ;doorlogic.c: 18: doorOpenAngle=openAngle;
  8415  1428  0829               	movf	DOOR_update@openAngle,w
  8416  1429  00A8               	movwf	??_DOOR_update
  8417  142A  0828               	movf	??_DOOR_update,w
  8418  142B  0021               	movlb	1	; select bank1
  8419  142C  00DE               	movwf	_doorOpenAngle^(0+128)
  8420                           
  8421                           ;doorlogic.c: 19: doorClosedAngle=closedAngle;
  8422  142D  0020               	movlb	0	; select bank0
  8423  142E  0827               	movf	DOOR_update@closedAngle,w
  8424  142F  00A8               	movwf	??_DOOR_update
  8425  1430  0828               	movf	??_DOOR_update,w
  8426  1431  0021               	movlb	1	; select bank1
  8427  1432  00DD               	movwf	_doorClosedAngle^(0+128)
  8428                           
  8429                           ;doorlogic.c: 20: Storage_save(openAngle,closedAngle);
  8430  1433  0020               	movlb	0	; select bank0
  8431  1434  0827               	movf	DOOR_update@closedAngle,w
  8432  1435  00A8               	movwf	??_DOOR_update
  8433  1436  0828               	movf	??_DOOR_update,w
  8434  1437  00A4               	movwf	Storage_save@closeAngle
  8435  1438  0829               	movf	DOOR_update@openAngle,w
  8436  1439  3194  249A         	fcall	_Storage_save
  8437  143B  0008               	return
  8438  143C                     __end_of_DOOR_update:	
  8439                           
  8440                           	psect	text23
  8441  149A                     __ptext23:	
  8442 ;; *************** function _Storage_save *****************
  8443 ;; Defined at:
  8444 ;;		line 30 in file "storage.c"
  8445 ;; Parameters:    Size  Location     Type
  8446 ;;  openAngle       1    wreg     unsigned char 
  8447 ;;  closeAngle      1    4[BANK0 ] unsigned char 
  8448 ;; Auto vars:     Size  Location     Type
  8449 ;;  openAngle       1    6[BANK0 ] unsigned char 
  8450 ;; Return value:  Size  Location     Type
  8451 ;;                  1    wreg      void 
  8452 ;; Registers used:
  8453 ;;		wreg, status,2, status,0, pclath, cstack
  8454 ;; Tracked objects:
  8455 ;;		On entry : 0/0
  8456 ;;		On exit  : 0/0
  8457 ;;		Unchanged: 0/0
  8458 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8459 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8460 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8461 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8462 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8463 ;;Total ram usage:        3 bytes
  8464 ;; Hardware stack levels used:    1
  8465 ;; Hardware stack levels required when called:    5
  8466 ;; This function calls:
  8467 ;;		_DATAEE_WriteByte
  8468 ;; This function is called by:
  8469 ;;		_DOOR_update
  8470 ;; This function uses a non-reentrant model
  8471 ;;
  8472                           
  8473                           
  8474                           ;psect for function _Storage_save
  8475  149A                     _Storage_save:	
  8476                           
  8477                           ;incstack = 0
  8478                           ; Regs used in _Storage_save: [wreg+status,2+status,0+pclath+cstack]
  8479                           ;Storage_save@openAngle stored from wreg
  8480  149A  0020               	movlb	0	; select bank0
  8481  149B  00A6               	movwf	Storage_save@openAngle
  8482                           
  8483                           ;storage.c: 32: DATAEE_WriteByte(1, openAngle);
  8484  149C  0826               	movf	Storage_save@openAngle,w
  8485  149D  00A5               	movwf	??_Storage_save
  8486  149E  0825               	movf	??_Storage_save,w
  8487  149F  00A1               	movwf	DATAEE_WriteByte@bData
  8488  14A0  3001               	movlw	1
  8489  14A1  3196  266F  3194   	fcall	_DATAEE_WriteByte
  8490                           
  8491                           ;storage.c: 33: DATAEE_WriteByte(2, closeAngle);
  8492  14A4  0020               	movlb	0	; select bank0
  8493  14A5  0824               	movf	Storage_save@closeAngle,w
  8494  14A6  00A5               	movwf	??_Storage_save
  8495  14A7  0825               	movf	??_Storage_save,w
  8496  14A8  00A1               	movwf	DATAEE_WriteByte@bData
  8497  14A9  3002               	movlw	2
  8498  14AA  3196  266F  3194   	fcall	_DATAEE_WriteByte
  8499                           
  8500                           ;storage.c: 34: DATAEE_WriteByte(0 , 1);
  8501  14AD  0020               	movlb	0	; select bank0
  8502  14AE  01A1               	clrf	DATAEE_WriteByte@bData
  8503  14AF  0AA1               	incf	DATAEE_WriteByte@bData,f
  8504  14B0  3000               	movlw	0
  8505  14B1  3196  266F         	fcall	_DATAEE_WriteByte
  8506  14B3  0008               	return
  8507  14B4                     __end_of_Storage_save:	
  8508                           
  8509                           	psect	text24
  8510  166F                     __ptext24:	
  8511 ;; *************** function _DATAEE_WriteByte *****************
  8512 ;; Defined at:
  8513 ;;		line 186 in file "mcc_generated_files/memory.c"
  8514 ;; Parameters:    Size  Location     Type
  8515 ;;  bAdd            1    wreg     unsigned char 
  8516 ;;  bData           1    1[BANK0 ] unsigned char 
  8517 ;; Auto vars:     Size  Location     Type
  8518 ;;  bAdd            1    2[BANK0 ] unsigned char 
  8519 ;;  GIEBitValue     1    3[BANK0 ] unsigned char 
  8520 ;; Return value:  Size  Location     Type
  8521 ;;                  1    wreg      void 
  8522 ;; Registers used:
  8523 ;;		wreg, status,2, status,0
  8524 ;; Tracked objects:
  8525 ;;		On entry : 0/0
  8526 ;;		On exit  : 0/0
  8527 ;;		Unchanged: 0/0
  8528 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8529 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8530 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8531 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8532 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8533 ;;Total ram usage:        3 bytes
  8534 ;; Hardware stack levels used:    1
  8535 ;; Hardware stack levels required when called:    4
  8536 ;; This function calls:
  8537 ;;		Nothing
  8538 ;; This function is called by:
  8539 ;;		_Storage_save
  8540 ;;		_Storage_load
  8541 ;; This function uses a non-reentrant model
  8542 ;;
  8543                           
  8544                           
  8545                           ;psect for function _DATAEE_WriteByte
  8546  166F                     _DATAEE_WriteByte:	
  8547                           
  8548                           ;incstack = 0
  8549                           ; Regs used in _DATAEE_WriteByte: [wreg+status,2+status,0]
  8550                           ;DATAEE_WriteByte@bAdd stored from wreg
  8551  166F  0020               	movlb	0	; select bank0
  8552  1670  00A2               	movwf	DATAEE_WriteByte@bAdd
  8553                           
  8554                           ;memory.c: 188: uint8_t GIEBitValue = 0;
  8555  1671  01A3               	clrf	DATAEE_WriteByte@GIEBitValue
  8556                           
  8557                           ;memory.c: 190: EEADRL = (uint8_t)(bAdd & 0x0ff);
  8558  1672  0822               	movf	DATAEE_WriteByte@bAdd,w
  8559  1673  0023               	movlb	3	; select bank3
  8560  1674  0091               	movwf	17	;volatile
  8561                           
  8562                           ;memory.c: 191: EEDATL = bData;
  8563  1675  0020               	movlb	0	; select bank0
  8564  1676  0821               	movf	DATAEE_WriteByte@bData,w
  8565  1677  0023               	movlb	3	; select bank3
  8566  1678  0093               	movwf	19	;volatile
  8567                           
  8568                           ;memory.c: 192: EECON1bits.EEPGD = 0;
  8569  1679  1395               	bcf	21,7	;volsfr
  8570                           
  8571                           ;memory.c: 193: EECON1bits.CFGS = 0;
  8572  167A  1315               	bcf	21,6	;volsfr
  8573                           
  8574                           ;memory.c: 194: EECON1bits.WREN = 1;
  8575  167B  1515               	bsf	21,2	;volsfr
  8576                           
  8577                           ;memory.c: 196: GIEBitValue = INTCONbits.GIE;
  8578  167C  3000               	movlw	0
  8579  167D  1B8B               	btfsc	11,7	;volatile
  8580  167E  3001               	movlw	1
  8581  167F  0020               	movlb	0	; select bank0
  8582  1680  00A3               	movwf	DATAEE_WriteByte@GIEBitValue
  8583                           
  8584                           ;memory.c: 197: INTCONbits.GIE = 0;
  8585  1681  138B               	bcf	11,7	;volatile
  8586                           
  8587                           ;memory.c: 198: EECON2 = 0x55;
  8588  1682  3055               	movlw	85
  8589  1683  0023               	movlb	3	; select bank3
  8590  1684  0096               	movwf	22	;volsfr
  8591                           
  8592                           ;memory.c: 199: EECON2 = 0xAA;
  8593  1685  30AA               	movlw	170
  8594  1686  0096               	movwf	22	;volsfr
  8595                           
  8596                           ;memory.c: 200: EECON1bits.WR = 1;
  8597  1687  1495               	bsf	21,1	;volsfr
  8598  1688                     l498:	
  8599                           ;memory.c: 203: {
  8600                           
  8601                           ;memory.c: 202: while (EECON1bits.WR)
  8602                           
  8603  1688  1895               	btfsc	21,1	;volsfr
  8604  1689  2E88               	goto	l498
  8605                           
  8606                           ;memory.c: 204: }
  8607                           ;memory.c: 206: EECON1bits.WREN = 0;
  8608  168A  1115               	bcf	21,2	;volsfr
  8609                           
  8610                           ;memory.c: 207: INTCONbits.GIE = GIEBitValue;
  8611  168B  0020               	movlb	0	; select bank0
  8612  168C  0C23               	rrf	DATAEE_WriteByte@GIEBitValue,w
  8613  168D  1C03               	skipc
  8614  168E  138B               	bcf	11,7	;volatile
  8615  168F  1803               	skipnc
  8616  1690  178B               	bsf	11,7	;volatile
  8617  1691  0008               	return
  8618  1692                     __end_of_DATAEE_WriteByte:	
  8619                           
  8620                           	psect	text25
  8621  1294                     __ptext25:	
  8622 ;; *************** function _DOOR_resetPos *****************
  8623 ;; Defined at:
  8624 ;;		line 94 in file "doorlogic.c"
  8625 ;; Parameters:    Size  Location     Type
  8626 ;;		None
  8627 ;; Auto vars:     Size  Location     Type
  8628 ;;		None
  8629 ;; Return value:  Size  Location     Type
  8630 ;;                  1    wreg      enum E3332
  8631 ;; Registers used:
  8632 ;;		status,2
  8633 ;; Tracked objects:
  8634 ;;		On entry : 0/0
  8635 ;;		On exit  : 0/0
  8636 ;;		Unchanged: 0/0
  8637 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8638 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8639 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8640 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8641 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8642 ;;Total ram usage:        0 bytes
  8643 ;; Hardware stack levels used:    1
  8644 ;; Hardware stack levels required when called:    4
  8645 ;; This function calls:
  8646 ;;		Nothing
  8647 ;; This function is called by:
  8648 ;;		_Wireless_checkDataReceived
  8649 ;; This function uses a non-reentrant model
  8650 ;;
  8651                           
  8652                           
  8653                           ;psect for function _DOOR_resetPos
  8654  1294                     _DOOR_resetPos:	
  8655                           
  8656                           ;doorlogic.c: 96: initialised=0;
  8657                           
  8658                           ;incstack = 0
  8659                           ; Regs used in _DOOR_resetPos: [status,2]
  8660  1294  0021               	movlb	1	; select bank1
  8661  1295  01D8               	clrf	_initialised^(0+128)
  8662  1296  0008               	return
  8663  1297                     __end_of_DOOR_resetPos:	
  8664                           ;doorlogic.c: 97: return(DOOR_CLOSED);
  8665                           ;	Return value of _DOOR_resetPos is never used
  8666                           
  8667                           
  8668                           	psect	text26
  8669  0874                     __ptext26:	
  8670 ;; *************** function _Sensor_getSupplyVoltage *****************
  8671 ;; Defined at:
  8672 ;;		line 6 in file "sensors.c"
  8673 ;; Parameters:    Size  Location     Type
  8674 ;;		None
  8675 ;; Auto vars:     Size  Location     Type
  8676 ;;  voltage         3   36[BANK0 ] float 
  8677 ;;  res             2   39[BANK0 ] unsigned short 
  8678 ;; Return value:  Size  Location     Type
  8679 ;;                  3   33[BANK0 ] float 
  8680 ;; Registers used:
  8681 ;;		wreg, status,2, status,0, pclath, cstack
  8682 ;; Tracked objects:
  8683 ;;		On entry : 0/0
  8684 ;;		On exit  : 0/0
  8685 ;;		Unchanged: 0/0
  8686 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8687 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8688 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8689 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8690 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8691 ;;Total ram usage:        8 bytes
  8692 ;; Hardware stack levels used:    1
  8693 ;; Hardware stack levels required when called:    6
  8694 ;; This function calls:
  8695 ;;		_ADC_GetConversionResult
  8696 ;;		_ADC_IsConversionDone
  8697 ;;		_ADC_SelectChannel
  8698 ;;		_ADC_StartConversion
  8699 ;;		_FVR_IsOutputReady
  8700 ;;		_Sensor_peripheralSleep
  8701 ;;		_Sensor_peripheralWake
  8702 ;;		___ftdiv
  8703 ;;		___lwtoft
  8704 ;; This function is called by:
  8705 ;;		_Wireless_packageData
  8706 ;; This function uses a non-reentrant model
  8707 ;;
  8708                           
  8709                           
  8710                           ;psect for function _Sensor_getSupplyVoltage
  8711  0874                     _Sensor_getSupplyVoltage:	
  8712                           
  8713                           ;sensors.c: 8: u16 res;
  8714                           ;sensors.c: 9: float voltage;
  8715                           ;sensors.c: 11: Sensor_peripheralWake();
  8716                           
  8717                           ;incstack = 0
  8718                           ; Regs used in _Sensor_getSupplyVoltage: [wreg+status,2+status,0+pclath+cstack]
  8719  0874  3192  22B3  3188   	fcall	_Sensor_peripheralWake
  8720  0877                     l6043:	
  8721                           ;sensors.c: 12: while(!FVR_IsOutputReady());
  8722                           
  8723  0877  3192  22C9  3188   	fcall	_FVR_IsOutputReady
  8724  087A  3A00               	xorlw	0
  8725  087B  1903               	skipnz
  8726  087C  2877               	goto	l6043
  8727                           
  8728                           ;sensors.c: 13: ADC_SelectChannel(channel_FVR);
  8729  087D  301F               	movlw	31
  8730  087E  3193  236D  3188   	fcall	_ADC_SelectChannel
  8731                           
  8732                           ;sensors.c: 14: ADC_StartConversion();
  8733  0881  3192  2291  3188   	fcall	_ADC_StartConversion
  8734  0884                     l6049:	
  8735                           ;sensors.c: 15: while(!ADC_IsConversionDone());
  8736                           
  8737  0884  3192  22E3  3188   	fcall	_ADC_IsConversionDone
  8738  0887  3A00               	xorlw	0
  8739  0888  1903               	skipnz
  8740  0889  2884               	goto	l6049
  8741                           
  8742                           ;sensors.c: 16: Sensor_peripheralSleep();
  8743  088A  3192  22AE  3188   	fcall	_Sensor_peripheralSleep
  8744                           
  8745                           ;sensors.c: 17: res=ADC_GetConversionResult();
  8746  088D  3193  2326  3188   	fcall	_ADC_GetConversionResult
  8747  0890  0020               	movlb	0	; select bank0
  8748  0891  0822               	movf	?_ADC_GetConversionResult+1,w
  8749  0892  00C8               	movwf	Sensor_getSupplyVoltage@res+1
  8750  0893  0821               	movf	?_ADC_GetConversionResult,w
  8751  0894  00C7               	movwf	Sensor_getSupplyVoltage@res
  8752                           
  8753                           ;sensors.c: 19: voltage= (float) 1.024 * 1024/(float)res;
  8754  0895  0848               	movf	Sensor_getSupplyVoltage@res+1,w
  8755  0896  00AA               	movwf	___lwtoft@c+1
  8756  0897  0847               	movf	Sensor_getSupplyVoltage@res,w
  8757  0898  00A9               	movwf	___lwtoft@c
  8758  0899  3193  23E6  3188   	fcall	___lwtoft
  8759  089C  0020               	movlb	0	; select bank0
  8760  089D  0829               	movf	?___lwtoft,w
  8761  089E  00B1               	movwf	___ftdiv@f2
  8762  089F  082A               	movf	?___lwtoft+1,w
  8763  08A0  00B2               	movwf	___ftdiv@f2+1
  8764  08A1  082B               	movf	?___lwtoft+2,w
  8765  08A2  00B3               	movwf	___ftdiv@f2+2
  8766  08A3  3012               	movlw	18
  8767  08A4  00B4               	movwf	___ftdiv@f1
  8768  08A5  3083               	movlw	131
  8769  08A6  00B5               	movwf	___ftdiv@f1+1
  8770  08A7  3044               	movlw	68
  8771  08A8  00B6               	movwf	___ftdiv@f1+2
  8772  08A9  318D  25C7         	fcall	___ftdiv
  8773  08AB  0020               	movlb	0	; select bank0
  8774  08AC  0831               	movf	?___ftdiv,w
  8775  08AD  00C4               	movwf	Sensor_getSupplyVoltage@voltage
  8776  08AE  0832               	movf	?___ftdiv+1,w
  8777  08AF  00C5               	movwf	Sensor_getSupplyVoltage@voltage+1
  8778  08B0  0833               	movf	?___ftdiv+2,w
  8779  08B1  00C6               	movwf	Sensor_getSupplyVoltage@voltage+2
  8780                           
  8781                           ;sensors.c: 20: return(voltage);
  8782  08B2  0844               	movf	Sensor_getSupplyVoltage@voltage,w
  8783  08B3  00C1               	movwf	?_Sensor_getSupplyVoltage
  8784  08B4  0845               	movf	Sensor_getSupplyVoltage@voltage+1,w
  8785  08B5  00C2               	movwf	?_Sensor_getSupplyVoltage+1
  8786  08B6  0846               	movf	Sensor_getSupplyVoltage@voltage+2,w
  8787  08B7  00C3               	movwf	?_Sensor_getSupplyVoltage+2
  8788  08B8  0008               	return
  8789  08B9                     __end_of_Sensor_getSupplyVoltage:	
  8790                           
  8791                           	psect	text27
  8792  12B3                     __ptext27:	
  8793 ;; *************** function _Sensor_peripheralWake *****************
  8794 ;; Defined at:
  8795 ;;		line 32 in file "sensors.c"
  8796 ;; Parameters:    Size  Location     Type
  8797 ;;		None
  8798 ;; Auto vars:     Size  Location     Type
  8799 ;;		None
  8800 ;; Return value:  Size  Location     Type
  8801 ;;                  1    wreg      void 
  8802 ;; Registers used:
  8803 ;;		None
  8804 ;; Tracked objects:
  8805 ;;		On entry : 0/0
  8806 ;;		On exit  : 0/0
  8807 ;;		Unchanged: 0/0
  8808 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8809 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8810 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8811 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8812 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8813 ;;Total ram usage:        0 bytes
  8814 ;; Hardware stack levels used:    1
  8815 ;; Hardware stack levels required when called:    4
  8816 ;; This function calls:
  8817 ;;		Nothing
  8818 ;; This function is called by:
  8819 ;;		_Sensor_getSupplyVoltage
  8820 ;; This function uses a non-reentrant model
  8821 ;;
  8822                           
  8823                           
  8824                           ;psect for function _Sensor_peripheralWake
  8825  12B3                     _Sensor_peripheralWake:	
  8826                           
  8827                           ;sensors.c: 34: ADCON0bits.ADON=1;
  8828                           
  8829                           ;incstack = 0
  8830                           ; Regs used in _Sensor_peripheralWake: []
  8831  12B3  0021               	movlb	1	; select bank1
  8832  12B4  141D               	bsf	29,0	;volatile
  8833                           
  8834                           ;sensors.c: 35: FVRCONbits.FVREN=1;
  8835  12B5  0022               	movlb	2	; select bank2
  8836  12B6  1797               	bsf	23,7	;volatile
  8837  12B7  0008               	return
  8838  12B8                     __end_of_Sensor_peripheralWake:	
  8839                           
  8840                           	psect	text28
  8841  12AE                     __ptext28:	
  8842 ;; *************** function _Sensor_peripheralSleep *****************
  8843 ;; Defined at:
  8844 ;;		line 26 in file "sensors.c"
  8845 ;; Parameters:    Size  Location     Type
  8846 ;;		None
  8847 ;; Auto vars:     Size  Location     Type
  8848 ;;		None
  8849 ;; Return value:  Size  Location     Type
  8850 ;;                  1    wreg      void 
  8851 ;; Registers used:
  8852 ;;		None
  8853 ;; Tracked objects:
  8854 ;;		On entry : 0/0
  8855 ;;		On exit  : 0/0
  8856 ;;		Unchanged: 0/0
  8857 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8858 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8859 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8860 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8861 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8862 ;;Total ram usage:        0 bytes
  8863 ;; Hardware stack levels used:    1
  8864 ;; Hardware stack levels required when called:    4
  8865 ;; This function calls:
  8866 ;;		Nothing
  8867 ;; This function is called by:
  8868 ;;		_Sensor_getSupplyVoltage
  8869 ;;		_main
  8870 ;; This function uses a non-reentrant model
  8871 ;;
  8872                           
  8873                           
  8874                           ;psect for function _Sensor_peripheralSleep
  8875  12AE                     _Sensor_peripheralSleep:	
  8876                           
  8877                           ;sensors.c: 28: ADCON0bits.ADON=0;
  8878                           
  8879                           ;incstack = 0
  8880                           ; Regs used in _Sensor_peripheralSleep: []
  8881  12AE  0021               	movlb	1	; select bank1
  8882  12AF  101D               	bcf	29,0	;volatile
  8883                           
  8884                           ;sensors.c: 29: FVRCONbits.FVREN=0;
  8885  12B0  0022               	movlb	2	; select bank2
  8886  12B1  1397               	bcf	23,7	;volatile
  8887  12B2  0008               	return
  8888  12B3                     __end_of_Sensor_peripheralSleep:	
  8889                           
  8890                           	psect	text29
  8891  12C9                     __ptext29:	
  8892 ;; *************** function _FVR_IsOutputReady *****************
  8893 ;; Defined at:
  8894 ;;		line 63 in file "mcc_generated_files/fvr.c"
  8895 ;; Parameters:    Size  Location     Type
  8896 ;;		None
  8897 ;; Auto vars:     Size  Location     Type
  8898 ;;		None
  8899 ;; Return value:  Size  Location     Type
  8900 ;;                  1    wreg      unsigned char 
  8901 ;; Registers used:
  8902 ;;		wreg, status,2, status,0
  8903 ;; Tracked objects:
  8904 ;;		On entry : 0/0
  8905 ;;		On exit  : 0/0
  8906 ;;		Unchanged: 0/0
  8907 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8908 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8909 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8910 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8911 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8912 ;;Total ram usage:        0 bytes
  8913 ;; Hardware stack levels used:    1
  8914 ;; Hardware stack levels required when called:    4
  8915 ;; This function calls:
  8916 ;;		Nothing
  8917 ;; This function is called by:
  8918 ;;		_Sensor_getSupplyVoltage
  8919 ;; This function uses a non-reentrant model
  8920 ;;
  8921                           
  8922                           
  8923                           ;psect for function _FVR_IsOutputReady
  8924  12C9                     _FVR_IsOutputReady:	
  8925                           
  8926                           ;fvr.c: 65: return (FVRCONbits.FVRRDY);
  8927                           
  8928                           ;incstack = 0
  8929                           ; Regs used in _FVR_IsOutputReady: [wreg+status,2+status,0]
  8930  12C9  0022               	movlb	2	; select bank2
  8931  12CA  0E17               	swapf	23,w	;volatile
  8932  12CB  0C89               	rrf	9,f
  8933  12CC  0C89               	rrf	9,f
  8934  12CD  3901               	andlw	1
  8935  12CE  0008               	return
  8936  12CF                     __end_of_FVR_IsOutputReady:	
  8937                           
  8938                           	psect	text30
  8939  1291                     __ptext30:	
  8940 ;; *************** function _ADC_StartConversion *****************
  8941 ;; Defined at:
  8942 ;;		line 88 in file "mcc_generated_files/adc.c"
  8943 ;; Parameters:    Size  Location     Type
  8944 ;;		None
  8945 ;; Auto vars:     Size  Location     Type
  8946 ;;		None
  8947 ;; Return value:  Size  Location     Type
  8948 ;;                  1    wreg      void 
  8949 ;; Registers used:
  8950 ;;		None
  8951 ;; Tracked objects:
  8952 ;;		On entry : 0/0
  8953 ;;		On exit  : 0/0
  8954 ;;		Unchanged: 0/0
  8955 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8956 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8957 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8958 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8959 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8960 ;;Total ram usage:        0 bytes
  8961 ;; Hardware stack levels used:    1
  8962 ;; Hardware stack levels required when called:    4
  8963 ;; This function calls:
  8964 ;;		Nothing
  8965 ;; This function is called by:
  8966 ;;		_Sensor_getSupplyVoltage
  8967 ;; This function uses a non-reentrant model
  8968 ;;
  8969                           
  8970                           
  8971                           ;psect for function _ADC_StartConversion
  8972  1291                     _ADC_StartConversion:	
  8973                           
  8974                           ;adc.c: 91: ADCON0bits.GO_nDONE = 1;
  8975                           
  8976                           ;incstack = 0
  8977                           ; Regs used in _ADC_StartConversion: []
  8978  1291  0021               	movlb	1	; select bank1
  8979  1292  149D               	bsf	29,1	;volatile
  8980  1293  0008               	return
  8981  1294                     __end_of_ADC_StartConversion:	
  8982                           
  8983                           	psect	text31
  8984  136D                     __ptext31:	
  8985 ;; *************** function _ADC_SelectChannel *****************
  8986 ;; Defined at:
  8987 ;;		line 80 in file "mcc_generated_files/adc.c"
  8988 ;; Parameters:    Size  Location     Type
  8989 ;;  channel         1    wreg     enum E2996
  8990 ;; Auto vars:     Size  Location     Type
  8991 ;;  channel         1    2[BANK0 ] enum E2996
  8992 ;; Return value:  Size  Location     Type
  8993 ;;                  1    wreg      void 
  8994 ;; Registers used:
  8995 ;;		wreg, status,2, status,0
  8996 ;; Tracked objects:
  8997 ;;		On entry : 0/0
  8998 ;;		On exit  : 0/0
  8999 ;;		Unchanged: 0/0
  9000 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9001 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9002 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9003 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9004 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9005 ;;Total ram usage:        2 bytes
  9006 ;; Hardware stack levels used:    1
  9007 ;; Hardware stack levels required when called:    4
  9008 ;; This function calls:
  9009 ;;		Nothing
  9010 ;; This function is called by:
  9011 ;;		_Sensor_getSupplyVoltage
  9012 ;; This function uses a non-reentrant model
  9013 ;;
  9014                           
  9015                           
  9016                           ;psect for function _ADC_SelectChannel
  9017  136D                     _ADC_SelectChannel:	
  9018                           
  9019                           ;incstack = 0
  9020                           ; Regs used in _ADC_SelectChannel: [wreg+status,2+status,0]
  9021                           ;ADC_SelectChannel@channel stored from wreg
  9022  136D  0020               	movlb	0	; select bank0
  9023  136E  00A2               	movwf	ADC_SelectChannel@channel
  9024                           
  9025                           ;adc.c: 83: ADCON0bits.CHS = channel;
  9026  136F  0822               	movf	ADC_SelectChannel@channel,w
  9027  1370  00A1               	movwf	??_ADC_SelectChannel
  9028  1371  0DA1               	rlf	??_ADC_SelectChannel,f
  9029  1372  0DA1               	rlf	??_ADC_SelectChannel,f
  9030  1373  0021               	movlb	1	; select bank1
  9031  1374  081D               	movf	29,w	;volatile
  9032  1375  0020               	movlb	0	; select bank0
  9033  1376  0621               	xorwf	??_ADC_SelectChannel,w
  9034  1377  3983               	andlw	-125
  9035  1378  0621               	xorwf	??_ADC_SelectChannel,w
  9036  1379  0021               	movlb	1	; select bank1
  9037  137A  009D               	movwf	29	;volatile
  9038                           
  9039                           ;adc.c: 85: ADCON0bits.ADON = 1;
  9040  137B  141D               	bsf	29,0	;volatile
  9041  137C  0008               	return
  9042  137D                     __end_of_ADC_SelectChannel:	
  9043                           
  9044                           	psect	text32
  9045  12E3                     __ptext32:	
  9046 ;; *************** function _ADC_IsConversionDone *****************
  9047 ;; Defined at:
  9048 ;;		line 95 in file "mcc_generated_files/adc.c"
  9049 ;; Parameters:    Size  Location     Type
  9050 ;;		None
  9051 ;; Auto vars:     Size  Location     Type
  9052 ;;		None
  9053 ;; Return value:  Size  Location     Type
  9054 ;;                  1    wreg      unsigned char 
  9055 ;; Registers used:
  9056 ;;		wreg, status,0
  9057 ;; Tracked objects:
  9058 ;;		On entry : 0/0
  9059 ;;		On exit  : 0/0
  9060 ;;		Unchanged: 0/0
  9061 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9062 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9063 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9064 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9065 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9066 ;;Total ram usage:        0 bytes
  9067 ;; Hardware stack levels used:    1
  9068 ;; Hardware stack levels required when called:    4
  9069 ;; This function calls:
  9070 ;;		Nothing
  9071 ;; This function is called by:
  9072 ;;		_Sensor_getSupplyVoltage
  9073 ;; This function uses a non-reentrant model
  9074 ;;
  9075                           
  9076                           
  9077                           ;psect for function _ADC_IsConversionDone
  9078  12E3                     _ADC_IsConversionDone:	
  9079                           
  9080                           ;adc.c: 98: return ((bool)(!ADCON0bits.GO_nDONE));
  9081                           
  9082                           ;incstack = 0
  9083                           ; Regs used in _ADC_IsConversionDone: [wreg+status,0]
  9084  12E3  1003               	clrc
  9085  12E4  0021               	movlb	1	; select bank1
  9086  12E5  1C9D               	btfss	29,1	;volatile
  9087  12E6  1403               	setc
  9088  12E7  3000               	movlw	0
  9089  12E8  3D09               	addwfc	9,w
  9090  12E9  0008               	return
  9091  12EA                     __end_of_ADC_IsConversionDone:	
  9092                           
  9093                           	psect	text33
  9094  1326                     __ptext33:	
  9095 ;; *************** function _ADC_GetConversionResult *****************
  9096 ;; Defined at:
  9097 ;;		line 101 in file "mcc_generated_files/adc.c"
  9098 ;; Parameters:    Size  Location     Type
  9099 ;;		None
  9100 ;; Auto vars:     Size  Location     Type
  9101 ;;		None
  9102 ;; Return value:  Size  Location     Type
  9103 ;;                  2    1[BANK0 ] unsigned int 
  9104 ;; Registers used:
  9105 ;;		wreg
  9106 ;; Tracked objects:
  9107 ;;		On entry : 0/0
  9108 ;;		On exit  : 0/0
  9109 ;;		Unchanged: 0/0
  9110 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9111 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9112 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9113 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9114 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9115 ;;Total ram usage:        2 bytes
  9116 ;; Hardware stack levels used:    1
  9117 ;; Hardware stack levels required when called:    4
  9118 ;; This function calls:
  9119 ;;		Nothing
  9120 ;; This function is called by:
  9121 ;;		_Sensor_getSupplyVoltage
  9122 ;; This function uses a non-reentrant model
  9123 ;;
  9124                           
  9125                           
  9126                           ;psect for function _ADC_GetConversionResult
  9127  1326                     _ADC_GetConversionResult:	
  9128                           
  9129                           ;adc.c: 104: return ((adc_result_t)((ADRESH << 8) + ADRESL));
  9130                           
  9131                           ;incstack = 0
  9132                           ; Regs used in _ADC_GetConversionResult: [wreg]
  9133  1326  0021               	movlb	1	; select bank1
  9134  1327  081C               	movf	28,w	;volatile
  9135  1328  0020               	movlb	0	; select bank0
  9136  1329  00A2               	movwf	?_ADC_GetConversionResult+1
  9137  132A  0021               	movlb	1	; select bank1
  9138  132B  081B               	movf	27,w	;volatile
  9139  132C  0020               	movlb	0	; select bank0
  9140  132D  00A1               	movwf	?_ADC_GetConversionResult
  9141  132E  0008               	return
  9142  132F                     __end_of_ADC_GetConversionResult:	
  9143                           
  9144                           	psect	text34
  9145  13C1                     __ptext34:	
  9146 ;; *************** function _Diag_getSensorHealth *****************
  9147 ;; Defined at:
  9148 ;;		line 35 in file "diagnostics.c"
  9149 ;; Parameters:    Size  Location     Type
  9150 ;;		None
  9151 ;; Auto vars:     Size  Location     Type
  9152 ;;  var             1    2[BANK0 ] unsigned char 
  9153 ;; Return value:  Size  Location     Type
  9154 ;;                  1    wreg      unsigned char 
  9155 ;; Registers used:
  9156 ;;		wreg, status,2, status,0
  9157 ;; Tracked objects:
  9158 ;;		On entry : 0/0
  9159 ;;		On exit  : 0/0
  9160 ;;		Unchanged: 0/0
  9161 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9162 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9163 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9164 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9165 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9166 ;;Total ram usage:        2 bytes
  9167 ;; Hardware stack levels used:    1
  9168 ;; Hardware stack levels required when called:    4
  9169 ;; This function calls:
  9170 ;;		Nothing
  9171 ;; This function is called by:
  9172 ;;		_Wireless_packageData
  9173 ;; This function uses a non-reentrant model
  9174 ;;
  9175                           
  9176                           
  9177                           ;psect for function _Diag_getSensorHealth
  9178  13C1                     _Diag_getSensorHealth:	
  9179                           
  9180                           ;diagnostics.c: 38: char var=0;
  9181                           
  9182                           ;incstack = 0
  9183                           ; Regs used in _Diag_getSensorHealth: [wreg+status,2+status,0]
  9184  13C1  0020               	movlb	0	; select bank0
  9185  13C2  01A2               	clrf	Diag_getSensorHealth@var
  9186                           
  9187                           ;diagnostics.c: 40: var|=sensorHealth.compassHealth;
  9188  13C3  0021               	movlb	1	; select bank1
  9189  13C4  0864               	movf	(_sensorHealth^(0+128)+1),w
  9190  13C5  0020               	movlb	0	; select bank0
  9191  13C6  00A1               	movwf	??_Diag_getSensorHealth
  9192  13C7  0821               	movf	??_Diag_getSensorHealth,w
  9193  13C8  04A2               	iorwf	Diag_getSensorHealth@var,f
  9194                           
  9195                           ;diagnostics.c: 41: var<<=1;
  9196  13C9  1003               	clrc
  9197  13CA  0DA2               	rlf	Diag_getSensorHealth@var,f
  9198                           
  9199                           ;diagnostics.c: 42: var|=sensorHealth.tempSensorHealth;
  9200  13CB  0021               	movlb	1	; select bank1
  9201  13CC  0863               	movf	_sensorHealth^(0+128),w
  9202  13CD  0020               	movlb	0	; select bank0
  9203  13CE  00A1               	movwf	??_Diag_getSensorHealth
  9204  13CF  0821               	movf	??_Diag_getSensorHealth,w
  9205  13D0  04A2               	iorwf	Diag_getSensorHealth@var,f
  9206                           
  9207                           ;diagnostics.c: 44: return var;
  9208  13D1  0822               	movf	Diag_getSensorHealth@var,w
  9209  13D2  0008               	return
  9210  13D3                     __end_of_Diag_getSensorHealth:	
  9211                           
  9212                           	psect	text35
  9213  0783                     __ptext35:	
  9214 ;; *************** function _Wireless_init *****************
  9215 ;; Defined at:
  9216 ;;		line 20 in file "wireless.c"
  9217 ;; Parameters:    Size  Location     Type
  9218 ;;		None
  9219 ;; Auto vars:     Size  Location     Type
  9220 ;;		None
  9221 ;; Return value:  Size  Location     Type
  9222 ;;                  1    wreg      void 
  9223 ;; Registers used:
  9224 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  9225 ;; Tracked objects:
  9226 ;;		On entry : 0/0
  9227 ;;		On exit  : 0/0
  9228 ;;		Unchanged: 0/0
  9229 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9230 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9231 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9232 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9233 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9234 ;;Total ram usage:        2 bytes
  9235 ;; Hardware stack levels used:    1
  9236 ;; Hardware stack levels required when called:    8
  9237 ;; This function calls:
  9238 ;;		_RF_Init
  9239 ;;		_RF_ResetStatusIRQ
  9240 ;;		_RF_WriteRegister
  9241 ;;		_RF_WriteRegisterData
  9242 ;; This function is called by:
  9243 ;;		_main
  9244 ;; This function uses a non-reentrant model
  9245 ;;
  9246                           
  9247                           
  9248                           ;psect for function _Wireless_init
  9249  0783                     _Wireless_init:	
  9250                           
  9251                           ;wireless.c: 26: static const uint8_t TADDR[5] = "10001";
  9252                           ;wireless.c: 34: _delay((unsigned long)((100)*(8000000/4000.0)));
  9253                           
  9254                           ;incstack = 0
  9255                           ; Regs used in _Wireless_init: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  9256  0783  3002               	movlw	2
  9257  0784  0020               	movlb	0	; select bank0
  9258  0785  00AF               	movwf	??_Wireless_init+1
  9259  0786  3004               	movlw	4
  9260  0787  00AE               	movwf	??_Wireless_init
  9261  0788  30BA               	movlw	186
  9262  0789                     u7257:	
  9263  0789  0B89               	decfsz	9,f
  9264  078A  2F89               	goto	u7257
  9265  078B  0BAE               	decfsz	??_Wireless_init,f
  9266  078C  2F89               	goto	u7257
  9267  078D  0BAF               	decfsz	??_Wireless_init+1,f
  9268  078E  2F89               	goto	u7257
  9269  078F  0000               	nop
  9270                           
  9271                           ;wireless.c: 36: RF_Init();
  9272  0790  3192  22A2  3187   	fcall	_RF_Init
  9273                           
  9274                           ;wireless.c: 38: RF_WriteRegister(0x06, 0x06|0x20);
  9275  0793  3026               	movlw	38
  9276  0794  0020               	movlb	0	; select bank0
  9277  0795  00AE               	movwf	??_Wireless_init
  9278  0796  082E               	movf	??_Wireless_init,w
  9279  0797  00A3               	movwf	RF_WriteRegister@val
  9280  0798  3006               	movlw	6
  9281  0799  3194  2410  3187   	fcall	_RF_WriteRegister
  9282                           
  9283                           ;wireless.c: 39: RF_WriteRegister(0x11, 6);
  9284  079C  3006               	movlw	6
  9285  079D  0020               	movlb	0	; select bank0
  9286  079E  00AE               	movwf	??_Wireless_init
  9287  079F  082E               	movf	??_Wireless_init,w
  9288  07A0  00A3               	movwf	RF_WriteRegister@val
  9289  07A1  3011               	movlw	17
  9290  07A2  3194  2410  3187   	fcall	_RF_WriteRegister
  9291                           
  9292                           ;wireless.c: 40: RF_WriteRegister(0x05, 2);
  9293  07A5  3002               	movlw	2
  9294  07A6  0020               	movlb	0	; select bank0
  9295  07A7  00AE               	movwf	??_Wireless_init
  9296  07A8  082E               	movf	??_Wireless_init,w
  9297  07A9  00A3               	movwf	RF_WriteRegister@val
  9298  07AA  3005               	movlw	5
  9299  07AB  3194  2410  3187   	fcall	_RF_WriteRegister
  9300                           
  9301                           ;wireless.c: 43: RF_WriteRegisterData(0x0A, (uint8_t*)TADDR, sizeof(TADDR));
  9302  07AE  3021               	movlw	low (Wireless_init@TADDR| (0+32768))
  9303  07AF  0020               	movlb	0	; select bank0
  9304  07B0  00A9               	movwf	RF_WriteRegisterData@buf
  9305  07B1  3098               	movlw	high (Wireless_init@TADDR| (0+32768))
  9306  07B2  00AA               	movwf	RF_WriteRegisterData@buf+1
  9307  07B3  3005               	movlw	5
  9308  07B4  00AE               	movwf	??_Wireless_init
  9309  07B5  082E               	movf	??_Wireless_init,w
  9310  07B6  00AB               	movwf	RF_WriteRegisterData@bufSize
  9311  07B7  300A               	movlw	10
  9312  07B8  3195  2574  3187   	fcall	_RF_WriteRegisterData
  9313                           
  9314                           ;wireless.c: 44: RF_WriteRegisterData(0x10, (uint8_t*)TADDR, sizeof(TADDR));
  9315  07BB  3021               	movlw	low (Wireless_init@TADDR| (0+32768))
  9316  07BC  0020               	movlb	0	; select bank0
  9317  07BD  00A9               	movwf	RF_WriteRegisterData@buf
  9318  07BE  3098               	movlw	high (Wireless_init@TADDR| (0+32768))
  9319  07BF  00AA               	movwf	RF_WriteRegisterData@buf+1
  9320  07C0  3005               	movlw	5
  9321  07C1  00AE               	movwf	??_Wireless_init
  9322  07C2  082E               	movf	??_Wireless_init,w
  9323  07C3  00AB               	movwf	RF_WriteRegisterData@bufSize
  9324  07C4  3010               	movlw	16
  9325  07C5  3195  2574  3187   	fcall	_RF_WriteRegisterData
  9326                           
  9327                           ;wireless.c: 47: RF_WriteRegister(0x02, 0x01);
  9328  07C8  0020               	movlb	0	; select bank0
  9329  07C9  01A3               	clrf	RF_WriteRegister@val
  9330  07CA  0AA3               	incf	RF_WriteRegister@val,f
  9331  07CB  3002               	movlw	2
  9332  07CC  3194  2410  3187   	fcall	_RF_WriteRegister
  9333                           
  9334                           ;wireless.c: 50: RF_ResetStatusIRQ(0x40|0x20|0x10);
  9335  07CF  3070               	movlw	112
  9336  07D0  3195  25EA  3187   	fcall	_RF_ResetStatusIRQ
  9337                           
  9338                           ;wireless.c: 52: RF_WriteRegister(0x01, 0x01);
  9339  07D3  0020               	movlb	0	; select bank0
  9340  07D4  01A3               	clrf	RF_WriteRegister@val
  9341  07D5  0AA3               	incf	RF_WriteRegister@val,f
  9342  07D6  3001               	movlw	1
  9343  07D7  3194  2410  3187   	fcall	_RF_WriteRegister
  9344                           
  9345                           ;wireless.c: 53: RF_WriteRegister(0x04, 0xF0|0x01);
  9346  07DA  30F1               	movlw	241
  9347  07DB  0020               	movlb	0	; select bank0
  9348  07DC  00AE               	movwf	??_Wireless_init
  9349  07DD  082E               	movf	??_Wireless_init,w
  9350  07DE  00A3               	movwf	RF_WriteRegister@val
  9351  07DF  3004               	movlw	4
  9352  07E0  3194  2410  3187   	fcall	_RF_WriteRegister
  9353                           
  9354                           ;wireless.c: 54: RF_WriteRegister(0x00, (1<<3)|(1<<2)|(1<<1)|(0));
  9355  07E3  300E               	movlw	14
  9356  07E4  0020               	movlb	0	; select bank0
  9357  07E5  00AE               	movwf	??_Wireless_init
  9358  07E6  082E               	movf	??_Wireless_init,w
  9359  07E7  00A3               	movwf	RF_WriteRegister@val
  9360  07E8  3000               	movlw	0
  9361  07E9  3194  2410  3187   	fcall	_RF_WriteRegister
  9362                           
  9363                           ;wireless.c: 55: RF_WriteRegister(0x1D, (1<<2) | (1<<1));
  9364  07EC  3006               	movlw	6
  9365  07ED  0020               	movlb	0	; select bank0
  9366  07EE  00AE               	movwf	??_Wireless_init
  9367  07EF  082E               	movf	??_Wireless_init,w
  9368  07F0  00A3               	movwf	RF_WriteRegister@val
  9369  07F1  301D               	movlw	29
  9370  07F2  3194  2410  3187   	fcall	_RF_WriteRegister
  9371                           
  9372                           ;wireless.c: 56: RF_WriteRegister(0x1C, (1<<0));
  9373  07F5  0020               	movlb	0	; select bank0
  9374  07F6  01A3               	clrf	RF_WriteRegister@val
  9375  07F7  0AA3               	incf	RF_WriteRegister@val,f
  9376  07F8  301C               	movlw	28
  9377  07F9  3194  2410         	fcall	_RF_WriteRegister
  9378                           
  9379                           ;wireless.c: 57: do { LATCbits.LATC2 = 0; } while(0);
  9380  07FB  0022               	movlb	2	; select bank2
  9381  07FC  110E               	bcf	14,2	;volatile
  9382  07FD  0008               	return
  9383  07FE                     __end_of_Wireless_init:	
  9384                           
  9385                           	psect	text36
  9386  1574                     __ptext36:	
  9387 ;; *************** function _RF_WriteRegisterData *****************
  9388 ;; Defined at:
  9389 ;;		line 113 in file "nrf24.c"
  9390 ;; Parameters:    Size  Location     Type
  9391 ;;  reg             1    wreg     unsigned char 
  9392 ;;  buf             2    9[BANK0 ] PTR unsigned char 
  9393 ;;		 -> Wireless_packageData@data(6), Wireless_determineTransmitPower@testPayload(1), Wireless_init@TADDR(5), 
  9394 ;;  bufSize         1   11[BANK0 ] unsigned char 
  9395 ;; Auto vars:     Size  Location     Type
  9396 ;;  reg             1   13[BANK0 ] unsigned char 
  9397 ;; Return value:  Size  Location     Type
  9398 ;;                  1    wreg      void 
  9399 ;; Registers used:
  9400 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  9401 ;; Tracked objects:
  9402 ;;		On entry : 0/0
  9403 ;;		On exit  : 0/0
  9404 ;;		Unchanged: 0/0
  9405 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9406 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9407 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9408 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9409 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9410 ;;Total ram usage:        5 bytes
  9411 ;; Hardware stack levels used:    1
  9412 ;; Hardware stack levels required when called:    7
  9413 ;; This function calls:
  9414 ;;		_SPI_WriteBuffer
  9415 ;;		_SPI_WriteRead
  9416 ;; This function is called by:
  9417 ;;		_RF_TxPayload
  9418 ;;		_Wireless_init
  9419 ;;		_RF_openWritingPipe
  9420 ;;		_RF_openReadingPipe
  9421 ;; This function uses a non-reentrant model
  9422 ;;
  9423                           
  9424                           
  9425                           ;psect for function _RF_WriteRegisterData
  9426  1574                     _RF_WriteRegisterData:	
  9427                           
  9428                           ;incstack = 0
  9429                           ; Regs used in _RF_WriteRegisterData: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  9430                           ;RF_WriteRegisterData@reg stored from wreg
  9431  1574  0020               	movlb	0	; select bank0
  9432  1575  00AD               	movwf	RF_WriteRegisterData@reg
  9433                           
  9434                           ;nrf24.c: 114: do { LATCbits.LATC1 = 0; } while(0);
  9435  1576  0022               	movlb	2	; select bank2
  9436  1577  108E               	bcf	14,1	;volatile
  9437                           
  9438                           ;nrf24.c: 115: (void)SPI_WriteRead(0x20|reg);
  9439  1578  0020               	movlb	0	; select bank0
  9440  1579  082D               	movf	RF_WriteRegisterData@reg,w
  9441  157A  3820               	iorlw	32
  9442  157B  3192  22C3  3195   	fcall	_SPI_WriteRead
  9443                           
  9444                           ;nrf24.c: 116: SPI_WriteBuffer(buf, bufSize);
  9445  157E  0020               	movlb	0	; select bank0
  9446  157F  082A               	movf	RF_WriteRegisterData@buf+1,w
  9447  1580  00A4               	movwf	SPI_WriteBuffer@bufOut+1
  9448  1581  0829               	movf	RF_WriteRegisterData@buf,w
  9449  1582  00A3               	movwf	SPI_WriteBuffer@bufOut
  9450  1583  082B               	movf	RF_WriteRegisterData@bufSize,w
  9451  1584  00AC               	movwf	??_RF_WriteRegisterData
  9452  1585  082C               	movf	??_RF_WriteRegisterData,w
  9453  1586  00A5               	movwf	SPI_WriteBuffer@bufSize
  9454  1587  3195  2504  3195   	fcall	_SPI_WriteBuffer
  9455                           
  9456                           ;nrf24.c: 117: do { LATCbits.LATC1 = 1; } while(0);
  9457  158A  0022               	movlb	2	; select bank2
  9458  158B  148E               	bsf	14,1	;volatile
  9459                           
  9460                           ;nrf24.c: 118: _delay((unsigned long)((10)*(8000000/4000000.0)));
  9461  158C  3006               	movlw	6
  9462  158D                     u7267:	
  9463  158D  0B89               	decfsz	9,f
  9464  158E  2D8D               	goto	u7267
  9465  158F  3200               	nop2
  9466  1590  0008               	return
  9467  1591                     __end_of_RF_WriteRegisterData:	
  9468                           
  9469                           	psect	text37
  9470  1504                     __ptext37:	
  9471 ;; *************** function _SPI_WriteBuffer *****************
  9472 ;; Defined at:
  9473 ;;		line 56 in file "nrf24.c"
  9474 ;; Parameters:    Size  Location     Type
  9475 ;;  bufOut          2    3[BANK0 ] PTR unsigned char 
  9476 ;;		 -> Wireless_packageData@data(6), Wireless_determineTransmitPower@testPayload(1), Wireless_init@TADDR(5), 
  9477 ;;  bufSize         1    5[BANK0 ] unsigned char 
  9478 ;; Auto vars:     Size  Location     Type
  9479 ;;  i               1    8[BANK0 ] unsigned char 
  9480 ;; Return value:  Size  Location     Type
  9481 ;;                  1    wreg      void 
  9482 ;; Registers used:
  9483 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  9484 ;; Tracked objects:
  9485 ;;		On entry : 0/0
  9486 ;;		On exit  : 0/0
  9487 ;;		Unchanged: 0/0
  9488 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9489 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9490 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9491 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9492 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9493 ;;Total ram usage:        6 bytes
  9494 ;; Hardware stack levels used:    1
  9495 ;; Hardware stack levels required when called:    6
  9496 ;; This function calls:
  9497 ;;		_SPI_WriteRead
  9498 ;; This function is called by:
  9499 ;;		_RF_WriteRegisterData
  9500 ;; This function uses a non-reentrant model
  9501 ;;
  9502                           
  9503                           
  9504                           ;psect for function _SPI_WriteBuffer
  9505  1504                     _SPI_WriteBuffer:	
  9506                           
  9507                           ;nrf24.c: 57: uint8_t i;
  9508                           ;nrf24.c: 59: for(i=0;i<bufSize;i++) {
  9509                           
  9510                           ;incstack = 0
  9511                           ; Regs used in _SPI_WriteBuffer: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  9512  1504  0020               	movlb	0	; select bank0
  9513  1505  01A8               	clrf	SPI_WriteBuffer@i
  9514  1506                     l5547:	
  9515  1506  0825               	movf	SPI_WriteBuffer@bufSize,w
  9516  1507  0228               	subwf	SPI_WriteBuffer@i,w
  9517  1508  1803               	btfsc	3,0
  9518  1509  0008               	return
  9519                           
  9520                           ;nrf24.c: 60: (void)SPI_WriteRead(bufOut[i]);
  9521  150A  0824               	movf	SPI_WriteBuffer@bufOut+1,w
  9522  150B  00A7               	movwf	??_SPI_WriteBuffer+1
  9523  150C  0823               	movf	SPI_WriteBuffer@bufOut,w
  9524  150D  00A6               	movwf	??_SPI_WriteBuffer
  9525  150E  0828               	movf	SPI_WriteBuffer@i,w
  9526  150F  0726               	addwf	??_SPI_WriteBuffer,w
  9527  1510  0084               	movwf	4
  9528  1511  0827               	movf	??_SPI_WriteBuffer+1,w
  9529  1512  1803               	skipnc
  9530  1513  0A27               	incf	??_SPI_WriteBuffer+1,w
  9531  1514  0085               	movwf	5
  9532  1515  0800               	movf	0,w	;code access
  9533  1516  3192  22C3  3195   	fcall	_SPI_WriteRead
  9534  1519  3001               	movlw	1
  9535  151A  0020               	movlb	0	; select bank0
  9536  151B  00A6               	movwf	??_SPI_WriteBuffer
  9537  151C  0826               	movf	??_SPI_WriteBuffer,w
  9538  151D  07A8               	addwf	SPI_WriteBuffer@i,f
  9539  151E  2D06               	goto	l5547
  9540  151F                     __end_of_SPI_WriteBuffer:	
  9541                           
  9542                           	psect	text38
  9543  15EA                     __ptext38:	
  9544 ;; *************** function _RF_ResetStatusIRQ *****************
  9545 ;; Defined at:
  9546 ;;		line 158 in file "nrf24.c"
  9547 ;; Parameters:    Size  Location     Type
  9548 ;;  flags           1    wreg     unsigned char 
  9549 ;; Auto vars:     Size  Location     Type
  9550 ;;  flags           1    6[BANK0 ] unsigned char 
  9551 ;; Return value:  Size  Location     Type
  9552 ;;                  1    wreg      void 
  9553 ;; Registers used:
  9554 ;;		wreg, status,2, status,0, pclath, cstack
  9555 ;; Tracked objects:
  9556 ;;		On entry : 0/0
  9557 ;;		On exit  : 0/0
  9558 ;;		Unchanged: 0/0
  9559 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9560 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9561 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9562 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9563 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9564 ;;Total ram usage:        2 bytes
  9565 ;; Hardware stack levels used:    1
  9566 ;; Hardware stack levels required when called:    7
  9567 ;; This function calls:
  9568 ;;		_RF_WriteRegister
  9569 ;; This function is called by:
  9570 ;;		_Wireless_init
  9571 ;;		_Wireless_sendData
  9572 ;; This function uses a non-reentrant model
  9573 ;;
  9574                           
  9575                           
  9576                           ;psect for function _RF_ResetStatusIRQ
  9577  15EA                     _RF_ResetStatusIRQ:	
  9578                           
  9579                           ;incstack = 0
  9580                           ; Regs used in _RF_ResetStatusIRQ: [wreg+status,2+status,0+pclath+cstack]
  9581                           ;RF_ResetStatusIRQ@flags stored from wreg
  9582  15EA  0020               	movlb	0	; select bank0
  9583  15EB  00A6               	movwf	RF_ResetStatusIRQ@flags
  9584                           
  9585                           ;nrf24.c: 159: _delay((unsigned long)((10)*(8000000/4000000.0)));
  9586  15EC  3006               	movlw	6
  9587  15ED                     u7277:	
  9588  15ED  0B89               	decfsz	9,f
  9589  15EE  2DED               	goto	u7277
  9590  15EF  3200               	nop2
  9591                           
  9592                           ;nrf24.c: 160: do { LATCbits.LATC1 = 0; } while(0);
  9593  15F0  0022               	movlb	2	; select bank2
  9594  15F1  108E               	bcf	14,1	;volatile
  9595                           
  9596                           ;nrf24.c: 161: _delay((unsigned long)((10)*(8000000/4000000.0)));
  9597  15F2  3006               	movlw	6
  9598  15F3                     u7287:	
  9599  15F3  0B89               	decfsz	9,f
  9600  15F4  2DF3               	goto	u7287
  9601  15F5  3200               	nop2
  9602                           
  9603                           ;nrf24.c: 162: RF_WriteRegister(0x07, flags);
  9604  15F6  0020               	movlb	0	; select bank0
  9605  15F7  0826               	movf	RF_ResetStatusIRQ@flags,w
  9606  15F8  00A5               	movwf	??_RF_ResetStatusIRQ
  9607  15F9  0825               	movf	??_RF_ResetStatusIRQ,w
  9608  15FA  00A3               	movwf	RF_WriteRegister@val
  9609  15FB  3007               	movlw	7
  9610  15FC  3194  2410  3195   	fcall	_RF_WriteRegister
  9611                           
  9612                           ;nrf24.c: 163: _delay((unsigned long)((10)*(8000000/4000000.0)));
  9613  15FF  3006               	movlw	6
  9614  1600                     u7297:	
  9615  1600  0B89               	decfsz	9,f
  9616  1601  2E00               	goto	u7297
  9617  1602  3200               	nop2
  9618                           
  9619                           ;nrf24.c: 164: do { LATCbits.LATC1 = 1; } while(0);
  9620  1603  0022               	movlb	2	; select bank2
  9621  1604  148E               	bsf	14,1	;volatile
  9622                           
  9623                           ;nrf24.c: 165: _delay((unsigned long)((10)*(8000000/4000000.0)));
  9624  1605  3006               	movlw	6
  9625  1606                     u7307:	
  9626  1606  0B89               	decfsz	9,f
  9627  1607  2E06               	goto	u7307
  9628  1608  3200               	nop2
  9629  1609  0008               	return
  9630  160A                     __end_of_RF_ResetStatusIRQ:	
  9631                           
  9632                           	psect	text39
  9633  1410                     __ptext39:	
  9634 ;; *************** function _RF_WriteRegister *****************
  9635 ;; Defined at:
  9636 ;;		line 69 in file "nrf24.c"
  9637 ;; Parameters:    Size  Location     Type
  9638 ;;  reg             1    wreg     unsigned char 
  9639 ;;  val             1    3[BANK0 ] unsigned char 
  9640 ;; Auto vars:     Size  Location     Type
  9641 ;;  reg             1    4[BANK0 ] unsigned char 
  9642 ;; Return value:  Size  Location     Type
  9643 ;;                  1    wreg      void 
  9644 ;; Registers used:
  9645 ;;		wreg, status,2, status,0, pclath, cstack
  9646 ;; Tracked objects:
  9647 ;;		On entry : 0/0
  9648 ;;		On exit  : 0/0
  9649 ;;		Unchanged: 0/0
  9650 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9651 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9652 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9653 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9654 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9655 ;;Total ram usage:        2 bytes
  9656 ;; Hardware stack levels used:    1
  9657 ;; Hardware stack levels required when called:    6
  9658 ;; This function calls:
  9659 ;;		_SPI_WriteRead
  9660 ;; This function is called by:
  9661 ;;		_RF_ResetStatusIRQ
  9662 ;;		_Wireless_init
  9663 ;;		_Wireless_changeTransmitPower
  9664 ;;		_Wireless_sleep
  9665 ;;		_Wireless_wake
  9666 ;; This function uses a non-reentrant model
  9667 ;;
  9668                           
  9669                           
  9670                           ;psect for function _RF_WriteRegister
  9671  1410                     _RF_WriteRegister:	
  9672                           
  9673                           ;incstack = 0
  9674                           ; Regs used in _RF_WriteRegister: [wreg+status,2+status,0+pclath+cstack]
  9675                           ;RF_WriteRegister@reg stored from wreg
  9676  1410  0020               	movlb	0	; select bank0
  9677  1411  00A4               	movwf	RF_WriteRegister@reg
  9678                           
  9679                           ;nrf24.c: 70: do { LATCbits.LATC1 = 0; } while(0);
  9680  1412  0022               	movlb	2	; select bank2
  9681  1413  108E               	bcf	14,1	;volatile
  9682                           
  9683                           ;nrf24.c: 71: (void)SPI_WriteRead(0x20|reg);
  9684  1414  0020               	movlb	0	; select bank0
  9685  1415  0824               	movf	RF_WriteRegister@reg,w
  9686  1416  3820               	iorlw	32
  9687  1417  3192  22C3  3194   	fcall	_SPI_WriteRead
  9688                           
  9689                           ;nrf24.c: 72: (void)SPI_WriteRead(val);
  9690  141A  0020               	movlb	0	; select bank0
  9691  141B  0823               	movf	RF_WriteRegister@val,w
  9692  141C  3192  22C3  3194   	fcall	_SPI_WriteRead
  9693                           
  9694                           ;nrf24.c: 73: do { LATCbits.LATC1 = 1; } while(0);
  9695  141F  0022               	movlb	2	; select bank2
  9696  1420  148E               	bsf	14,1	;volatile
  9697                           
  9698                           ;nrf24.c: 74: _delay((unsigned long)((10)*(8000000/4000000.0)));
  9699  1421  3006               	movlw	6
  9700  1422                     u7317:	
  9701  1422  0B89               	decfsz	9,f
  9702  1423  2C22               	goto	u7317
  9703  1424  3200               	nop2
  9704  1425  0008               	return
  9705  1426                     __end_of_RF_WriteRegister:	
  9706                           
  9707                           	psect	text40
  9708  12C3                     __ptext40:	
  9709 ;; *************** function _SPI_WriteRead *****************
  9710 ;; Defined at:
  9711 ;;		line 26 in file "nrf24.c"
  9712 ;; Parameters:    Size  Location     Type
  9713 ;;  val             1    wreg     unsigned char 
  9714 ;; Auto vars:     Size  Location     Type
  9715 ;;  val             1    2[BANK0 ] unsigned char 
  9716 ;; Return value:  Size  Location     Type
  9717 ;;                  1    wreg      unsigned char 
  9718 ;; Registers used:
  9719 ;;		wreg, pclath, cstack
  9720 ;; Tracked objects:
  9721 ;;		On entry : 0/0
  9722 ;;		On exit  : 0/0
  9723 ;;		Unchanged: 0/0
  9724 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9725 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9726 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9727 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9728 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9729 ;;Total ram usage:        1 bytes
  9730 ;; Hardware stack levels used:    1
  9731 ;; Hardware stack levels required when called:    5
  9732 ;; This function calls:
  9733 ;;		_SPI1_Exchange8bit
  9734 ;; This function is called by:
  9735 ;;		_SPI_WriteReadBuffer
  9736 ;;		_SPI_WriteBuffer
  9737 ;;		_RF_WriteRegister
  9738 ;;		_RF_ReadRegister
  9739 ;;		_RF_ReadRegisterData
  9740 ;;		_RF_WriteRegisterData
  9741 ;;		_RF_WriteRead
  9742 ;;		_RF_Write
  9743 ;; This function uses a non-reentrant model
  9744 ;;
  9745                           
  9746                           
  9747                           ;psect for function _SPI_WriteRead
  9748  12C3                     _SPI_WriteRead:	
  9749                           
  9750                           ;incstack = 0
  9751                           ; Regs used in _SPI_WriteRead: [wreg+pclath+cstack]
  9752                           ;SPI_WriteRead@val stored from wreg
  9753  12C3  0020               	movlb	0	; select bank0
  9754  12C4  00A2               	movwf	SPI_WriteRead@val
  9755                           
  9756                           ;nrf24.c: 34: return SPI1_Exchange8bit(val);
  9757  12C5  0822               	movf	SPI_WriteRead@val,w
  9758  12C6  3193  2339         	fcall	_SPI1_Exchange8bit
  9759  12C8  0008               	return
  9760  12C9                     __end_of_SPI_WriteRead:	
  9761                           
  9762                           	psect	text41
  9763  1339                     __ptext41:	
  9764 ;; *************** function _SPI1_Exchange8bit *****************
  9765 ;; Defined at:
  9766 ;;		line 77 in file "mcc_generated_files/spi1.c"
  9767 ;; Parameters:    Size  Location     Type
  9768 ;;  data            1    wreg     unsigned char 
  9769 ;; Auto vars:     Size  Location     Type
  9770 ;;  data            1    1[BANK0 ] unsigned char 
  9771 ;; Return value:  Size  Location     Type
  9772 ;;                  1    wreg      unsigned char 
  9773 ;; Registers used:
  9774 ;;		wreg
  9775 ;; Tracked objects:
  9776 ;;		On entry : 0/0
  9777 ;;		On exit  : 0/0
  9778 ;;		Unchanged: 0/0
  9779 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9780 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9781 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9782 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9783 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9784 ;;Total ram usage:        1 bytes
  9785 ;; Hardware stack levels used:    1
  9786 ;; Hardware stack levels required when called:    4
  9787 ;; This function calls:
  9788 ;;		Nothing
  9789 ;; This function is called by:
  9790 ;;		_SPI_WriteRead
  9791 ;;		_SPI1_Exchange8bitBuffer
  9792 ;; This function uses a non-reentrant model
  9793 ;;
  9794                           
  9795                           
  9796                           ;psect for function _SPI1_Exchange8bit
  9797  1339                     _SPI1_Exchange8bit:	
  9798                           
  9799                           ;incstack = 0
  9800                           ; Regs used in _SPI1_Exchange8bit: [wreg]
  9801                           ;SPI1_Exchange8bit@data stored from wreg
  9802  1339  0020               	movlb	0	; select bank0
  9803  133A  00A1               	movwf	SPI1_Exchange8bit@data
  9804                           
  9805                           ;spi1.c: 80: SSP1CON1bits.WCOL = 0;
  9806  133B  0024               	movlb	4	; select bank4
  9807  133C  1395               	bcf	21,7	;volatile
  9808                           
  9809                           ;spi1.c: 82: SSP1BUF = data;
  9810  133D  0020               	movlb	0	; select bank0
  9811  133E  0821               	movf	SPI1_Exchange8bit@data,w
  9812  133F  0024               	movlb	4	; select bank4
  9813  1340  0091               	movwf	17	;volatile
  9814  1341                     l522:	
  9815                           ;spi1.c: 85: {
  9816                           
  9817                           ;spi1.c: 84: while(SSP1STATbits.BF == 0x0)
  9818                           
  9819  1341  1C14               	btfss	20,0	;volatile
  9820  1342  2B41               	goto	l522
  9821                           
  9822                           ;spi1.c: 86: }
  9823                           ;spi1.c: 88: return (SSP1BUF);
  9824  1343  0811               	movf	17,w	;volatile
  9825  1344  0008               	return
  9826  1345                     __end_of_SPI1_Exchange8bit:	
  9827                           
  9828                           	psect	text42
  9829  12A2                     __ptext42:	
  9830 ;; *************** function _RF_Init *****************
  9831 ;; Defined at:
  9832 ;;		line 195 in file "nrf24.c"
  9833 ;; Parameters:    Size  Location     Type
  9834 ;;		None
  9835 ;; Auto vars:     Size  Location     Type
  9836 ;;		None
  9837 ;; Return value:  Size  Location     Type
  9838 ;;                  1    wreg      void 
  9839 ;; Registers used:
  9840 ;;		None
  9841 ;; Tracked objects:
  9842 ;;		On entry : 0/0
  9843 ;;		On exit  : 0/0
  9844 ;;		Unchanged: 0/0
  9845 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9846 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9847 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9848 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9849 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9850 ;;Total ram usage:        0 bytes
  9851 ;; Hardware stack levels used:    1
  9852 ;; Hardware stack levels required when called:    4
  9853 ;; This function calls:
  9854 ;;		Nothing
  9855 ;; This function is called by:
  9856 ;;		_Wireless_init
  9857 ;; This function uses a non-reentrant model
  9858 ;;
  9859                           
  9860                           
  9861                           ;psect for function _RF_Init
  9862  12A2                     _RF_Init:	
  9863                           
  9864                           ;incstack = 0
  9865                           ; Regs used in _RF_Init: []
  9866                           ;nrf24.c: 196: do { LATCbits.LATC2 = 0; } while(0);
  9867  12A2  0022               	movlb	2	; select bank2
  9868  12A3  110E               	bcf	14,2	;volatile
  9869                           
  9870                           ;nrf24.c: 197: do { LATCbits.LATC1 = 1; } while(0);
  9871  12A4  148E               	bsf	14,1	;volatile
  9872  12A5  0008               	return
  9873  12A6                     __end_of_RF_Init:	
  9874                           
  9875                           	psect	text43
  9876  0A52                     __ptext43:	
  9877 ;; *************** function _Timeout_updateCurrentTime *****************
  9878 ;; Defined at:
  9879 ;;		line 13 in file "timeout.c"
  9880 ;; Parameters:    Size  Location     Type
  9881 ;;		None
  9882 ;; Auto vars:     Size  Location     Type
  9883 ;;  var             4   17[BANK0 ] unsigned long 
  9884 ;; Return value:  Size  Location     Type
  9885 ;;                  1    wreg      void 
  9886 ;; Registers used:
  9887 ;;		wreg, status,2, status,0, pclath, cstack
  9888 ;; Tracked objects:
  9889 ;;		On entry : 0/0
  9890 ;;		On exit  : 0/0
  9891 ;;		Unchanged: 0/0
  9892 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9893 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9894 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9895 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9896 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9897 ;;Total ram usage:        8 bytes
  9898 ;; Hardware stack levels used:    1
  9899 ;; Hardware stack levels required when called:    5
  9900 ;; This function calls:
  9901 ;;		_TMR1_ReadTimer
  9902 ;;		___lmul
  9903 ;; This function is called by:
  9904 ;;		_main
  9905 ;; This function uses a non-reentrant model
  9906 ;;
  9907                           
  9908                           
  9909                           ;psect for function _Timeout_updateCurrentTime
  9910  0A52                     _Timeout_updateCurrentTime:	
  9911                           
  9912                           ;timeout.c: 15: unsigned long var = 10;
  9913                           
  9914                           ;incstack = 0
  9915                           ; Regs used in _Timeout_updateCurrentTime: [wreg+status,2+status,0+pclath+cstack]
  9916  0A52  3000               	movlw	0
  9917  0A53  0020               	movlb	0	; select bank0
  9918  0A54  00B4               	movwf	Timeout_updateCurrentTime@var+3
  9919  0A55  3000               	movlw	0
  9920  0A56  00B3               	movwf	Timeout_updateCurrentTime@var+2
  9921  0A57  3000               	movlw	0
  9922  0A58  00B2               	movwf	Timeout_updateCurrentTime@var+1
  9923  0A59  300A               	movlw	10
  9924  0A5A  00B1               	movwf	Timeout_updateCurrentTime@var
  9925                           
  9926                           ;timeout.c: 16: var = TMR1_ReadTimer();
  9927  0A5B  3195  2557  318A   	fcall	_TMR1_ReadTimer
  9928  0A5E  0020               	movlb	0	; select bank0
  9929  0A5F  0821               	movf	?_TMR1_ReadTimer,w
  9930  0A60  00B1               	movwf	Timeout_updateCurrentTime@var
  9931  0A61  0822               	movf	?_TMR1_ReadTimer+1,w
  9932  0A62  00B2               	movwf	Timeout_updateCurrentTime@var+1
  9933  0A63  01B3               	clrf	Timeout_updateCurrentTime@var+2
  9934  0A64  01B4               	clrf	Timeout_updateCurrentTime@var+3
  9935                           
  9936                           ;timeout.c: 17: var= var - 0x6000;
  9937  0A65  3000               	movlw	0
  9938  0A66  00AD               	movwf	??_Timeout_updateCurrentTime
  9939  0A67  30A0               	movlw	160
  9940  0A68  00AE               	movwf	??_Timeout_updateCurrentTime+1
  9941  0A69  30FF               	movlw	255
  9942  0A6A  00AF               	movwf	??_Timeout_updateCurrentTime+2
  9943  0A6B  30FF               	movlw	255
  9944  0A6C  00B0               	movwf	??_Timeout_updateCurrentTime+3
  9945  0A6D  0831               	movf	Timeout_updateCurrentTime@var,w
  9946  0A6E  07AD               	addwf	??_Timeout_updateCurrentTime,f
  9947  0A6F  0832               	movf	Timeout_updateCurrentTime@var+1,w
  9948  0A70  3DAE               	addwfc	??_Timeout_updateCurrentTime+1,f
  9949  0A71  0833               	movf	Timeout_updateCurrentTime@var+2,w
  9950  0A72  3DAF               	addwfc	??_Timeout_updateCurrentTime+2,f
  9951  0A73  0834               	movf	Timeout_updateCurrentTime@var+3,w
  9952  0A74  3DB0               	addwfc	??_Timeout_updateCurrentTime+3,f
  9953  0A75  0830               	movf	??_Timeout_updateCurrentTime+3,w
  9954  0A76  00B4               	movwf	Timeout_updateCurrentTime@var+3
  9955  0A77  082F               	movf	??_Timeout_updateCurrentTime+2,w
  9956  0A78  00B3               	movwf	Timeout_updateCurrentTime@var+2
  9957  0A79  082E               	movf	??_Timeout_updateCurrentTime+1,w
  9958  0A7A  00B2               	movwf	Timeout_updateCurrentTime@var+1
  9959  0A7B  082D               	movf	??_Timeout_updateCurrentTime,w
  9960  0A7C  00B1               	movwf	Timeout_updateCurrentTime@var
  9961                           
  9962                           ;timeout.c: 18: globalCounter += ((var*1000)/4096);
  9963  0A7D  0834               	movf	Timeout_updateCurrentTime@var+3,w
  9964  0A7E  00A4               	movwf	___lmul@multiplier+3
  9965  0A7F  0833               	movf	Timeout_updateCurrentTime@var+2,w
  9966  0A80  00A3               	movwf	___lmul@multiplier+2
  9967  0A81  0832               	movf	Timeout_updateCurrentTime@var+1,w
  9968  0A82  00A2               	movwf	___lmul@multiplier+1
  9969  0A83  0831               	movf	Timeout_updateCurrentTime@var,w
  9970  0A84  00A1               	movwf	___lmul@multiplier
  9971  0A85  3000               	movlw	0
  9972  0A86  00A8               	movwf	___lmul@multiplicand+3
  9973  0A87  3000               	movlw	0
  9974  0A88  00A7               	movwf	___lmul@multiplicand+2
  9975  0A89  3003               	movlw	3
  9976  0A8A  00A6               	movwf	___lmul@multiplicand+1
  9977  0A8B  30E8               	movlw	232
  9978  0A8C  00A5               	movwf	___lmul@multiplicand
  9979  0A8D  3197  2761  318A   	fcall	___lmul
  9980  0A90  0020               	movlb	0	; select bank0
  9981  0A91  0821               	movf	?___lmul,w
  9982  0A92  00AD               	movwf	??_Timeout_updateCurrentTime
  9983  0A93  0822               	movf	?___lmul+1,w
  9984  0A94  00AE               	movwf	??_Timeout_updateCurrentTime+1
  9985  0A95  0823               	movf	?___lmul+2,w
  9986  0A96  00AF               	movwf	??_Timeout_updateCurrentTime+2
  9987  0A97  0824               	movf	?___lmul+3,w
  9988  0A98  00B0               	movwf	??_Timeout_updateCurrentTime+3
  9989  0A99  300C               	movlw	12
  9990  0A9A                     u6445:	
  9991  0A9A  36B0               	lsrf	??_Timeout_updateCurrentTime+3,f
  9992  0A9B  0CAF               	rrf	??_Timeout_updateCurrentTime+2,f
  9993  0A9C  0CAE               	rrf	??_Timeout_updateCurrentTime+1,f
  9994  0A9D  0CAD               	rrf	??_Timeout_updateCurrentTime,f
  9995  0A9E  0B89               	decfsz	9,f
  9996  0A9F  2A9A               	goto	u6445
  9997  0AA0  082D               	movf	??_Timeout_updateCurrentTime,w
  9998  0AA1  0021               	movlb	1	; select bank1
  9999  0AA2  07CF               	addwf	_globalCounter^(0+128),f	;volatile
 10000  0AA3  0020               	movlb	0	; select bank0
 10001  0AA4  082E               	movf	??_Timeout_updateCurrentTime+1,w
 10002  0AA5  0021               	movlb	1	; select bank1
 10003  0AA6  3DD0               	addwfc	(_globalCounter+1)^(0+128),f	;volatile
 10004  0AA7  0020               	movlb	0	; select bank0
 10005  0AA8  082F               	movf	??_Timeout_updateCurrentTime+2,w
 10006  0AA9  0021               	movlb	1	; select bank1
 10007  0AAA  3DD1               	addwfc	(_globalCounter+2)^(0+128),f	;volatile
 10008  0AAB  0020               	movlb	0	; select bank0
 10009  0AAC  0830               	movf	??_Timeout_updateCurrentTime+3,w
 10010  0AAD  0021               	movlb	1	; select bank1
 10011  0AAE  3DD2               	addwfc	(_globalCounter+3)^(0+128),f	;volatile
 10012  0AAF  0008               	return
 10013  0AB0                     __end_of_Timeout_updateCurrentTime:	
 10014                           
 10015                           	psect	text44
 10016  1761                     __ptext44:	
 10017 ;; *************** function ___lmul *****************
 10018 ;; Defined at:
 10019 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\Umul32.c"
 10020 ;; Parameters:    Size  Location     Type
 10021 ;;  multiplier      4    1[BANK0 ] unsigned long 
 10022 ;;  multiplicand    4    5[BANK0 ] unsigned long 
 10023 ;; Auto vars:     Size  Location     Type
 10024 ;;  product         4    9[BANK0 ] unsigned long 
 10025 ;; Return value:  Size  Location     Type
 10026 ;;                  4    1[BANK0 ] unsigned long 
 10027 ;; Registers used:
 10028 ;;		wreg, status,2, status,0
 10029 ;; Tracked objects:
 10030 ;;		On entry : 0/0
 10031 ;;		On exit  : 0/0
 10032 ;;		Unchanged: 0/0
 10033 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10034 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10035 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10036 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10037 ;;      Totals:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10038 ;;Total ram usage:       12 bytes
 10039 ;; Hardware stack levels used:    1
 10040 ;; Hardware stack levels required when called:    4
 10041 ;; This function calls:
 10042 ;;		Nothing
 10043 ;; This function is called by:
 10044 ;;		_Wireless_checkDataReceived
 10045 ;;		_Timeout_updateCurrentTime
 10046 ;; This function uses a non-reentrant model
 10047 ;;
 10048                           
 10049                           
 10050                           ;psect for function ___lmul
 10051  1761                     ___lmul:	
 10052                           
 10053                           ;incstack = 0
 10054                           ; Regs used in ___lmul: [wreg+status,2+status,0]
 10055  1761  3000               	movlw	0
 10056  1762  0020               	movlb	0	; select bank0
 10057  1763  00AC               	movwf	___lmul@product+3
 10058  1764  3000               	movlw	0
 10059  1765  00AB               	movwf	___lmul@product+2
 10060  1766  3000               	movlw	0
 10061  1767  00AA               	movwf	___lmul@product+1
 10062  1768  3000               	movlw	0
 10063  1769  00A9               	movwf	___lmul@product
 10064  176A                     l5885:	
 10065  176A  1C21               	btfss	___lmul@multiplier,0
 10066  176B  2F74               	goto	l5889
 10067  176C  0825               	movf	___lmul@multiplicand,w
 10068  176D  07A9               	addwf	___lmul@product,f
 10069  176E  0826               	movf	___lmul@multiplicand+1,w
 10070  176F  3DAA               	addwfc	___lmul@product+1,f
 10071  1770  0827               	movf	___lmul@multiplicand+2,w
 10072  1771  3DAB               	addwfc	___lmul@product+2,f
 10073  1772  0828               	movf	___lmul@multiplicand+3,w
 10074  1773  3DAC               	addwfc	___lmul@product+3,f
 10075  1774                     l5889:	
 10076  1774  3001               	movlw	1
 10077  1775                     u5335:	
 10078  1775  35A5               	lslf	___lmul@multiplicand,f
 10079  1776  0DA6               	rlf	___lmul@multiplicand+1,f
 10080  1777  0DA7               	rlf	___lmul@multiplicand+2,f
 10081  1778  0DA8               	rlf	___lmul@multiplicand+3,f
 10082  1779  0B89               	decfsz	9,f
 10083  177A  2F75               	goto	u5335
 10084  177B  3001               	movlw	1
 10085  177C                     u5345:	
 10086  177C  36A4               	lsrf	___lmul@multiplier+3,f
 10087  177D  0CA3               	rrf	___lmul@multiplier+2,f
 10088  177E  0CA2               	rrf	___lmul@multiplier+1,f
 10089  177F  0CA1               	rrf	___lmul@multiplier,f
 10090  1780  0B89               	decfsz	9,f
 10091  1781  2F7C               	goto	u5345
 10092  1782  0824               	movf	___lmul@multiplier+3,w
 10093  1783  0423               	iorwf	___lmul@multiplier+2,w
 10094  1784  0422               	iorwf	___lmul@multiplier+1,w
 10095  1785  0421               	iorwf	___lmul@multiplier,w
 10096  1786  1D03               	skipz
 10097  1787  2F6A               	goto	l5885
 10098  1788  082C               	movf	___lmul@product+3,w
 10099  1789  00A4               	movwf	?___lmul+3
 10100  178A  082B               	movf	___lmul@product+2,w
 10101  178B  00A3               	movwf	?___lmul+2
 10102  178C  082A               	movf	___lmul@product+1,w
 10103  178D  00A2               	movwf	?___lmul+1
 10104  178E  0829               	movf	___lmul@product,w
 10105  178F  00A1               	movwf	?___lmul
 10106  1790  0008               	return
 10107  1791                     __end_of___lmul:	
 10108                           
 10109                           	psect	text45
 10110  1557                     __ptext45:	
 10111 ;; *************** function _TMR1_ReadTimer *****************
 10112 ;; Defined at:
 10113 ;;		line 104 in file "mcc_generated_files/tmr1.c"
 10114 ;; Parameters:    Size  Location     Type
 10115 ;;		None
 10116 ;; Auto vars:     Size  Location     Type
 10117 ;;  readVal         2    8[BANK0 ] unsigned int 
 10118 ;;  readValLow      1   11[BANK0 ] unsigned char 
 10119 ;;  readValHigh     1   10[BANK0 ] unsigned char 
 10120 ;; Return value:  Size  Location     Type
 10121 ;;                  2    1[BANK0 ] unsigned int 
 10122 ;; Registers used:
 10123 ;;		wreg
 10124 ;; Tracked objects:
 10125 ;;		On entry : 0/0
 10126 ;;		On exit  : 0/0
 10127 ;;		Unchanged: 0/0
 10128 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10129 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10130 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10131 ;;      Temps:          0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10132 ;;      Totals:         0      11       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10133 ;;Total ram usage:       11 bytes
 10134 ;; Hardware stack levels used:    1
 10135 ;; Hardware stack levels required when called:    4
 10136 ;; This function calls:
 10137 ;;		Nothing
 10138 ;; This function is called by:
 10139 ;;		_Timeout_updateCurrentTime
 10140 ;; This function uses a non-reentrant model
 10141 ;;
 10142                           
 10143                           
 10144                           ;psect for function _TMR1_ReadTimer
 10145  1557                     _TMR1_ReadTimer:	
 10146                           
 10147                           ;tmr1.c: 106: uint16_t readVal;
 10148                           ;tmr1.c: 107: uint8_t readValHigh;
 10149                           ;tmr1.c: 108: uint8_t readValLow;
 10150                           ;tmr1.c: 110: readValLow = TMR1L;
 10151                           
 10152                           ;incstack = 0
 10153                           ; Regs used in _TMR1_ReadTimer: [wreg]
 10154  1557  0020               	movlb	0	; select bank0
 10155  1558  0816               	movf	22,w	;volatile
 10156  1559  00A3               	movwf	??_TMR1_ReadTimer
 10157  155A  0823               	movf	??_TMR1_ReadTimer,w
 10158  155B  00AB               	movwf	TMR1_ReadTimer@readValLow
 10159                           
 10160                           ;tmr1.c: 111: readValHigh = TMR1H;
 10161  155C  0817               	movf	23,w	;volatile
 10162  155D  00A3               	movwf	??_TMR1_ReadTimer
 10163  155E  0823               	movf	??_TMR1_ReadTimer,w
 10164  155F  00AA               	movwf	TMR1_ReadTimer@readValHigh
 10165                           
 10166                           ;tmr1.c: 113: readVal = ((uint16_t)readValHigh << 8) | readValLow;
 10167  1560  082B               	movf	TMR1_ReadTimer@readValLow,w
 10168  1561  00A3               	movwf	??_TMR1_ReadTimer
 10169  1562  01A4               	clrf	??_TMR1_ReadTimer+1
 10170  1563  082A               	movf	TMR1_ReadTimer@readValHigh,w
 10171  1564  00A5               	movwf	??_TMR1_ReadTimer+2
 10172  1565  01A6               	clrf	??_TMR1_ReadTimer+3
 10173  1566  0825               	movf	??_TMR1_ReadTimer+2,w
 10174  1567  00A6               	movwf	??_TMR1_ReadTimer+3
 10175  1568  01A5               	clrf	??_TMR1_ReadTimer+2
 10176  1569  0823               	movf	??_TMR1_ReadTimer,w
 10177  156A  0425               	iorwf	??_TMR1_ReadTimer+2,w
 10178  156B  00A8               	movwf	TMR1_ReadTimer@readVal
 10179  156C  0824               	movf	??_TMR1_ReadTimer+1,w
 10180  156D  0426               	iorwf	??_TMR1_ReadTimer+3,w
 10181  156E  00A9               	movwf	TMR1_ReadTimer@readVal+1
 10182                           
 10183                           ;tmr1.c: 115: return readVal;
 10184  156F  0829               	movf	TMR1_ReadTimer@readVal+1,w
 10185  1570  00A2               	movwf	?_TMR1_ReadTimer+1
 10186  1571  0828               	movf	TMR1_ReadTimer@readVal,w
 10187  1572  00A1               	movwf	?_TMR1_ReadTimer
 10188  1573  0008               	return
 10189  1574                     __end_of_TMR1_ReadTimer:	
 10190                           
 10191                           	psect	text46
 10192  139E                     __ptext46:	
 10193 ;; *************** function _Timeout_getGlobalCounter *****************
 10194 ;; Defined at:
 10195 ;;		line 21 in file "timeout.c"
 10196 ;; Parameters:    Size  Location     Type
 10197 ;;		None
 10198 ;; Auto vars:     Size  Location     Type
 10199 ;;		None
 10200 ;; Return value:  Size  Location     Type
 10201 ;;                  4    1[BANK0 ] unsigned long 
 10202 ;; Registers used:
 10203 ;;		wreg
 10204 ;; Tracked objects:
 10205 ;;		On entry : 0/0
 10206 ;;		On exit  : 0/0
 10207 ;;		Unchanged: 0/0
 10208 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10209 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10210 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10211 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10212 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10213 ;;Total ram usage:        4 bytes
 10214 ;; Hardware stack levels used:    1
 10215 ;; Hardware stack levels required when called:    4
 10216 ;; This function calls:
 10217 ;;		Nothing
 10218 ;; This function is called by:
 10219 ;;		_main
 10220 ;; This function uses a non-reentrant model
 10221 ;;
 10222                           
 10223                           
 10224                           ;psect for function _Timeout_getGlobalCounter
 10225  139E                     _Timeout_getGlobalCounter:	
 10226                           
 10227                           ;timeout.c: 23: return globalCounter;
 10228                           
 10229                           ;incstack = 0
 10230                           ; Regs used in _Timeout_getGlobalCounter: [wreg]
 10231  139E  0021               	movlb	1	; select bank1
 10232  139F  0852               	movf	(_globalCounter+3)^(0+128),w	;volatile
 10233  13A0  0020               	movlb	0	; select bank0
 10234  13A1  00A4               	movwf	?_Timeout_getGlobalCounter+3
 10235  13A2  0021               	movlb	1	; select bank1
 10236  13A3  0851               	movf	(_globalCounter+2)^(0+128),w	;volatile
 10237  13A4  0020               	movlb	0	; select bank0
 10238  13A5  00A3               	movwf	?_Timeout_getGlobalCounter+2
 10239  13A6  0021               	movlb	1	; select bank1
 10240  13A7  0850               	movf	(_globalCounter+1)^(0+128),w	;volatile
 10241  13A8  0020               	movlb	0	; select bank0
 10242  13A9  00A2               	movwf	?_Timeout_getGlobalCounter+1
 10243  13AA  0021               	movlb	1	; select bank1
 10244  13AB  084F               	movf	_globalCounter^(0+128),w	;volatile
 10245  13AC  0020               	movlb	0	; select bank0
 10246  13AD  00A1               	movwf	?_Timeout_getGlobalCounter
 10247  13AE  0008               	return
 10248  13AF                     __end_of_Timeout_getGlobalCounter:	
 10249                           
 10250                           	psect	text47
 10251  14E9                     __ptext47:	
 10252 ;; *************** function _SYSTEM_Initialize *****************
 10253 ;; Defined at:
 10254 ;;		line 70 in file "mcc_generated_files/mcc.c"
 10255 ;; Parameters:    Size  Location     Type
 10256 ;;		None
 10257 ;; Auto vars:     Size  Location     Type
 10258 ;;		None
 10259 ;; Return value:  Size  Location     Type
 10260 ;;                  1    wreg      void 
 10261 ;; Registers used:
 10262 ;;		wreg, status,2, status,0, pclath, cstack
 10263 ;; Tracked objects:
 10264 ;;		On entry : 0/0
 10265 ;;		On exit  : 0/0
 10266 ;;		Unchanged: 0/0
 10267 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10268 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10269 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10270 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10271 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10272 ;;Total ram usage:        0 bytes
 10273 ;; Hardware stack levels used:    1
 10274 ;; Hardware stack levels required when called:    6
 10275 ;; This function calls:
 10276 ;;		_ADC_Initialize
 10277 ;;		_FVR_Initialize
 10278 ;;		_I2C2_Initialize
 10279 ;;		_OSCILLATOR_Initialize
 10280 ;;		_PIN_MANAGER_Initialize
 10281 ;;		_SPI1_Initialize
 10282 ;;		_TMR1_Initialize
 10283 ;;		_TMR2_Initialize
 10284 ;;		_WDT_Initialize
 10285 ;; This function is called by:
 10286 ;;		_main
 10287 ;; This function uses a non-reentrant model
 10288 ;;
 10289                           
 10290                           
 10291                           ;psect for function _SYSTEM_Initialize
 10292  14E9                     _SYSTEM_Initialize:	
 10293                           
 10294                           ;mcc.c: 73: PIN_MANAGER_Initialize();
 10295                           
 10296                           ;incstack = 0
 10297                           ; Regs used in _SYSTEM_Initialize: [wreg+status,2+status,0+pclath+cstack]
 10298  14E9  3197  270A  3194   	fcall	_PIN_MANAGER_Initialize
 10299                           
 10300                           ;mcc.c: 74: OSCILLATOR_Initialize();
 10301  14EC  3192  22D5  3194   	fcall	_OSCILLATOR_Initialize
 10302                           
 10303                           ;mcc.c: 75: WDT_Initialize();
 10304  14EF  3192  229E  3194   	fcall	_WDT_Initialize
 10305                           
 10306                           ;mcc.c: 76: SPI1_Initialize();
 10307  14F2  3192  22DC  3194   	fcall	_SPI1_Initialize
 10308                           
 10309                           ;mcc.c: 77: I2C2_Initialize();
 10310  14F5  3194  24CE  3194   	fcall	_I2C2_Initialize
 10311                           
 10312                           ;mcc.c: 78: FVR_Initialize();
 10313  14F8  3192  229A  3194   	fcall	_FVR_Initialize
 10314                           
 10315                           ;mcc.c: 79: ADC_Initialize();
 10316  14FB  3192  22F2  3194   	fcall	_ADC_Initialize
 10317                           
 10318                           ;mcc.c: 80: TMR2_Initialize();
 10319  14FE  3192  22FA  3194   	fcall	_TMR2_Initialize
 10320                           
 10321                           ;mcc.c: 81: TMR1_Initialize();
 10322  1501  3194  2452         	fcall	_TMR1_Initialize
 10323  1503  0008               	return
 10324  1504                     __end_of_SYSTEM_Initialize:	
 10325                           
 10326                           	psect	text48
 10327  129E                     __ptext48:	
 10328 ;; *************** function _WDT_Initialize *****************
 10329 ;; Defined at:
 10330 ;;		line 94 in file "mcc_generated_files/mcc.c"
 10331 ;; Parameters:    Size  Location     Type
 10332 ;;		None
 10333 ;; Auto vars:     Size  Location     Type
 10334 ;;		None
 10335 ;; Return value:  Size  Location     Type
 10336 ;;                  1    wreg      void 
 10337 ;; Registers used:
 10338 ;;		wreg
 10339 ;; Tracked objects:
 10340 ;;		On entry : 0/0
 10341 ;;		On exit  : 0/0
 10342 ;;		Unchanged: 0/0
 10343 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10344 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10345 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10346 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10347 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10348 ;;Total ram usage:        0 bytes
 10349 ;; Hardware stack levels used:    1
 10350 ;; Hardware stack levels required when called:    4
 10351 ;; This function calls:
 10352 ;;		Nothing
 10353 ;; This function is called by:
 10354 ;;		_SYSTEM_Initialize
 10355 ;; This function uses a non-reentrant model
 10356 ;;
 10357                           
 10358                           
 10359                           ;psect for function _WDT_Initialize
 10360  129E                     _WDT_Initialize:	
 10361                           
 10362                           ;mcc.c: 97: WDTCON = 0x1A;
 10363                           
 10364                           ;incstack = 0
 10365                           ; Regs used in _WDT_Initialize: [wreg]
 10366  129E  301A               	movlw	26
 10367  129F  0021               	movlb	1	; select bank1
 10368  12A0  0097               	movwf	23	;volatile
 10369  12A1  0008               	return
 10370  12A2                     __end_of_WDT_Initialize:	
 10371                           
 10372                           	psect	text49
 10373  12FA                     __ptext49:	
 10374 ;; *************** function _TMR2_Initialize *****************
 10375 ;; Defined at:
 10376 ;;		line 61 in file "mcc_generated_files/tmr2.c"
 10377 ;; Parameters:    Size  Location     Type
 10378 ;;		None
 10379 ;; Auto vars:     Size  Location     Type
 10380 ;;		None
 10381 ;; Return value:  Size  Location     Type
 10382 ;;                  1    wreg      void 
 10383 ;; Registers used:
 10384 ;;		wreg, status,2
 10385 ;; Tracked objects:
 10386 ;;		On entry : 0/0
 10387 ;;		On exit  : 0/0
 10388 ;;		Unchanged: 0/0
 10389 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10390 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10391 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10392 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10393 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10394 ;;Total ram usage:        0 bytes
 10395 ;; Hardware stack levels used:    1
 10396 ;; Hardware stack levels required when called:    4
 10397 ;; This function calls:
 10398 ;;		Nothing
 10399 ;; This function is called by:
 10400 ;;		_SYSTEM_Initialize
 10401 ;; This function uses a non-reentrant model
 10402 ;;
 10403                           
 10404                           
 10405                           ;psect for function _TMR2_Initialize
 10406  12FA                     _TMR2_Initialize:	
 10407                           
 10408                           ;tmr2.c: 66: PR2 = 0x44;
 10409                           
 10410                           ;incstack = 0
 10411                           ; Regs used in _TMR2_Initialize: [wreg+status,2]
 10412  12FA  3044               	movlw	68
 10413  12FB  0020               	movlb	0	; select bank0
 10414  12FC  009B               	movwf	27	;volatile
 10415                           
 10416                           ;tmr2.c: 69: TMR2 = 0x00;
 10417  12FD  019A               	clrf	26	;volatile
 10418                           
 10419                           ;tmr2.c: 72: PIR1bits.TMR2IF = 0;
 10420  12FE  1091               	bcf	17,1	;volatile
 10421                           
 10422                           ;tmr2.c: 75: T2CON = 0x46;
 10423  12FF  3046               	movlw	70
 10424  1300  009C               	movwf	28	;volatile
 10425  1301  0008               	return
 10426  1302                     __end_of_TMR2_Initialize:	
 10427                           
 10428                           	psect	text50
 10429  1452                     __ptext50:	
 10430 ;; *************** function _TMR1_Initialize *****************
 10431 ;; Defined at:
 10432 ;;		line 63 in file "mcc_generated_files/tmr1.c"
 10433 ;; Parameters:    Size  Location     Type
 10434 ;;		None
 10435 ;; Auto vars:     Size  Location     Type
 10436 ;;		None
 10437 ;; Return value:  Size  Location     Type
 10438 ;;                  1    wreg      void 
 10439 ;; Registers used:
 10440 ;;		wreg, status,2, status,0, pclath, cstack
 10441 ;; Tracked objects:
 10442 ;;		On entry : 0/0
 10443 ;;		On exit  : 0/0
 10444 ;;		Unchanged: 0/0
 10445 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10446 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10447 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10448 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10449 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10450 ;;Total ram usage:        0 bytes
 10451 ;; Hardware stack levels used:    1
 10452 ;; Hardware stack levels required when called:    5
 10453 ;; This function calls:
 10454 ;;		_TMR1_SetInterruptHandler
 10455 ;; This function is called by:
 10456 ;;		_SYSTEM_Initialize
 10457 ;; This function uses a non-reentrant model
 10458 ;;
 10459                           
 10460                           
 10461                           ;psect for function _TMR1_Initialize
 10462  1452                     _TMR1_Initialize:	
 10463                           
 10464                           ;tmr1.c: 68: T1GCON = 0x00;
 10465                           
 10466                           ;incstack = 0
 10467                           ; Regs used in _TMR1_Initialize: [wreg+status,2+status,0+pclath+cstack]
 10468  1452  0020               	movlb	0	; select bank0
 10469  1453  0199               	clrf	25	;volatile
 10470                           
 10471                           ;tmr1.c: 71: TMR1H = 0x60;
 10472  1454  3060               	movlw	96
 10473  1455  0097               	movwf	23	;volatile
 10474                           
 10475                           ;tmr1.c: 74: TMR1L = 0x00;
 10476  1456  0196               	clrf	22	;volatile
 10477                           
 10478                           ;tmr1.c: 77: timer1ReloadVal=(uint16_t)((TMR1H << 8) | TMR1L);
 10479  1457  0817               	movf	23,w	;volatile
 10480  1458  00FD               	movwf	_timer1ReloadVal+1	;volatile
 10481  1459  0816               	movf	22,w	;volatile
 10482  145A  00FC               	movwf	_timer1ReloadVal	;volatile
 10483                           
 10484                           ;tmr1.c: 80: PIR1bits.TMR1IF = 0;
 10485  145B  1011               	bcf	17,0	;volatile
 10486                           
 10487                           ;tmr1.c: 83: PIE1bits.TMR1IE = 1;
 10488  145C  0021               	movlb	1	; select bank1
 10489  145D  1411               	bsf	17,0	;volatile
 10490                           
 10491                           ;tmr1.c: 86: TMR1_SetInterruptHandler(TMR1_DefaultInterruptHandler);
 10492  145E  30FF               	movlw	low _TMR1_DefaultInterruptHandler
 10493  145F  0020               	movlb	0	; select bank0
 10494  1460  00A1               	movwf	TMR1_SetInterruptHandler@InterruptHandler
 10495  1461  3007               	movlw	high _TMR1_DefaultInterruptHandler
 10496  1462  00A2               	movwf	TMR1_SetInterruptHandler@InterruptHandler+1
 10497  1463  3193  231D         	fcall	_TMR1_SetInterruptHandler
 10498                           
 10499                           ;tmr1.c: 89: T1CON = 0xBD;
 10500  1465  30BD               	movlw	189
 10501  1466  0020               	movlb	0	; select bank0
 10502  1467  0098               	movwf	24	;volatile
 10503  1468  0008               	return
 10504  1469                     __end_of_TMR1_Initialize:	
 10505                           
 10506                           	psect	text51
 10507  131D                     __ptext51:	
 10508 ;; *************** function _TMR1_SetInterruptHandler *****************
 10509 ;; Defined at:
 10510 ;;		line 181 in file "mcc_generated_files/tmr1.c"
 10511 ;; Parameters:    Size  Location     Type
 10512 ;;  InterruptHan    2    1[BANK0 ] PTR FTN()void 
 10513 ;;		 -> TMR1_DefaultInterruptHandler(1), 
 10514 ;; Auto vars:     Size  Location     Type
 10515 ;;		None
 10516 ;; Return value:  Size  Location     Type
 10517 ;;                  1    wreg      void 
 10518 ;; Registers used:
 10519 ;;		wreg
 10520 ;; Tracked objects:
 10521 ;;		On entry : 0/0
 10522 ;;		On exit  : 0/0
 10523 ;;		Unchanged: 0/0
 10524 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10525 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10526 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10527 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10528 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10529 ;;Total ram usage:        2 bytes
 10530 ;; Hardware stack levels used:    1
 10531 ;; Hardware stack levels required when called:    4
 10532 ;; This function calls:
 10533 ;;		Nothing
 10534 ;; This function is called by:
 10535 ;;		_TMR1_Initialize
 10536 ;; This function uses a non-reentrant model
 10537 ;;
 10538                           
 10539                           
 10540                           ;psect for function _TMR1_SetInterruptHandler
 10541  131D                     _TMR1_SetInterruptHandler:	
 10542                           
 10543                           ;tmr1.c: 182: TMR1_InterruptHandler = InterruptHandler;
 10544                           
 10545                           ;incstack = 0
 10546                           ; Regs used in _TMR1_SetInterruptHandler: [wreg]
 10547  131D  0020               	movlb	0	; select bank0
 10548  131E  0822               	movf	TMR1_SetInterruptHandler@InterruptHandler+1,w
 10549  131F  0022               	movlb	2	; select bank2
 10550  1320  00E7               	movwf	(_TMR1_InterruptHandler+1)^(0+256)
 10551  1321  0020               	movlb	0	; select bank0
 10552  1322  0821               	movf	TMR1_SetInterruptHandler@InterruptHandler,w
 10553  1323  0022               	movlb	2	; select bank2
 10554  1324  00E6               	movwf	_TMR1_InterruptHandler^(0+256)
 10555  1325  0008               	return
 10556  1326                     __end_of_TMR1_SetInterruptHandler:	
 10557                           
 10558                           	psect	text52
 10559  12DC                     __ptext52:	
 10560 ;; *************** function _SPI1_Initialize *****************
 10561 ;; Defined at:
 10562 ;;		line 63 in file "mcc_generated_files/spi1.c"
 10563 ;; Parameters:    Size  Location     Type
 10564 ;;		None
 10565 ;; Auto vars:     Size  Location     Type
 10566 ;;		None
 10567 ;; Return value:  Size  Location     Type
 10568 ;;                  1    wreg      void 
 10569 ;; Registers used:
 10570 ;;		wreg, status,2
 10571 ;; Tracked objects:
 10572 ;;		On entry : 0/0
 10573 ;;		On exit  : 0/0
 10574 ;;		Unchanged: 0/0
 10575 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10576 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10577 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10578 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10579 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10580 ;;Total ram usage:        0 bytes
 10581 ;; Hardware stack levels used:    1
 10582 ;; Hardware stack levels required when called:    4
 10583 ;; This function calls:
 10584 ;;		Nothing
 10585 ;; This function is called by:
 10586 ;;		_SYSTEM_Initialize
 10587 ;; This function uses a non-reentrant model
 10588 ;;
 10589                           
 10590                           
 10591                           ;psect for function _SPI1_Initialize
 10592  12DC                     _SPI1_Initialize:	
 10593                           
 10594                           ;spi1.c: 68: SSP1STAT = 0x40;
 10595                           
 10596                           ;incstack = 0
 10597                           ; Regs used in _SPI1_Initialize: [wreg+status,2]
 10598  12DC  3040               	movlw	64
 10599  12DD  0024               	movlb	4	; select bank4
 10600  12DE  0094               	movwf	20	;volatile
 10601                           
 10602                           ;spi1.c: 71: SSP1CON1 = 0x20;
 10603  12DF  3020               	movlw	32
 10604  12E0  0095               	movwf	21	;volatile
 10605                           
 10606                           ;spi1.c: 74: SSP1ADD = 0x00;
 10607  12E1  0192               	clrf	18	;volatile
 10608  12E2  0008               	return
 10609  12E3                     __end_of_SPI1_Initialize:	
 10610                           
 10611                           	psect	text53
 10612  170A                     __ptext53:	
 10613 ;; *************** function _PIN_MANAGER_Initialize *****************
 10614 ;; Defined at:
 10615 ;;		line 54 in file "mcc_generated_files/pin_manager.c"
 10616 ;; Parameters:    Size  Location     Type
 10617 ;;		None
 10618 ;; Auto vars:     Size  Location     Type
 10619 ;;		None
 10620 ;; Return value:  Size  Location     Type
 10621 ;;                  1    wreg      void 
 10622 ;; Registers used:
 10623 ;;		wreg, status,2, status,0, pclath, cstack
 10624 ;; Tracked objects:
 10625 ;;		On entry : 0/0
 10626 ;;		On exit  : 0/0
 10627 ;;		Unchanged: 0/0
 10628 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10629 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10630 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10631 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10632 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10633 ;;Total ram usage:        0 bytes
 10634 ;; Hardware stack levels used:    1
 10635 ;; Hardware stack levels required when called:    5
 10636 ;; This function calls:
 10637 ;;		_IOCAF2_SetInterruptHandler
 10638 ;; This function is called by:
 10639 ;;		_SYSTEM_Initialize
 10640 ;; This function uses a non-reentrant model
 10641 ;;
 10642                           
 10643                           
 10644                           ;psect for function _PIN_MANAGER_Initialize
 10645  170A                     _PIN_MANAGER_Initialize:	
 10646                           
 10647                           ;pin_manager.c: 59: LATA = 0x00;
 10648                           
 10649                           ;incstack = 0
 10650                           ; Regs used in _PIN_MANAGER_Initialize: [wreg+status,2+status,0+pclath+cstack]
 10651  170A  0022               	movlb	2	; select bank2
 10652  170B  018C               	clrf	12	;volatile
 10653                           
 10654                           ;pin_manager.c: 60: LATB = 0x00;
 10655  170C  018D               	clrf	13	;volatile
 10656                           
 10657                           ;pin_manager.c: 61: LATC = 0x00;
 10658  170D  018E               	clrf	14	;volatile
 10659                           
 10660                           ;pin_manager.c: 66: TRISA = 0x3F;
 10661  170E  303F               	movlw	63
 10662  170F  0021               	movlb	1	; select bank1
 10663  1710  008C               	movwf	12	;volatile
 10664                           
 10665                           ;pin_manager.c: 67: TRISB = 0xB0;
 10666  1711  30B0               	movlw	176
 10667  1712  008D               	movwf	13	;volatile
 10668                           
 10669                           ;pin_manager.c: 68: TRISC = 0x39;
 10670  1713  3039               	movlw	57
 10671  1714  008E               	movwf	14	;volatile
 10672                           
 10673                           ;pin_manager.c: 73: ANSELC = 0x01;
 10674  1715  3001               	movlw	1
 10675  1716  0023               	movlb	3	; select bank3
 10676  1717  008E               	movwf	14	;volatile
 10677                           
 10678                           ;pin_manager.c: 74: ANSELB = 0x00;
 10679  1718  018D               	clrf	13	;volatile
 10680                           
 10681                           ;pin_manager.c: 75: ANSELA = 0x03;
 10682  1719  3003               	movlw	3
 10683  171A  008C               	movwf	12	;volatile
 10684                           
 10685                           ;pin_manager.c: 80: WPUB = 0x10;
 10686  171B  3010               	movlw	16
 10687  171C  0024               	movlb	4	; select bank4
 10688  171D  008D               	movwf	13	;volatile
 10689                           
 10690                           ;pin_manager.c: 81: WPUA = 0x3F;
 10691  171E  303F               	movlw	63
 10692  171F  008C               	movwf	12	;volatile
 10693                           
 10694                           ;pin_manager.c: 82: WPUC = 0xD1;
 10695  1720  30D1               	movlw	209
 10696  1721  008E               	movwf	14	;volatile
 10697                           
 10698                           ;pin_manager.c: 83: OPTION_REGbits.nWPUEN = 0;
 10699  1722  0021               	movlb	1	; select bank1
 10700  1723  1395               	bcf	21,7	;volatile
 10701                           
 10702                           ;pin_manager.c: 89: APFCON1 = 0x2A;
 10703  1724  302A               	movlw	42
 10704  1725  0022               	movlb	2	; select bank2
 10705  1726  009E               	movwf	30	;volatile
 10706                           
 10707                           ;pin_manager.c: 90: APFCON0 = 0x00;
 10708  1727  019D               	clrf	29	;volatile
 10709                           
 10710                           ;pin_manager.c: 96: IOCAFbits.IOCAF2 = 0;
 10711  1728  0027               	movlb	7	; select bank7
 10712  1729  1113               	bcf	19,2	;volatile
 10713                           
 10714                           ;pin_manager.c: 98: IOCANbits.IOCAN2 = 1;
 10715  172A  1512               	bsf	18,2	;volatile
 10716                           
 10717                           ;pin_manager.c: 100: IOCAPbits.IOCAP2 = 1;
 10718  172B  1511               	bsf	17,2	;volatile
 10719                           
 10720                           ;pin_manager.c: 103: IOCAF2_SetInterruptHandler(IOCAF2_DefaultInterruptHandler);
 10721  172C  3003               	movlw	low _IOCAF2_DefaultInterruptHandler
 10722  172D  0020               	movlb	0	; select bank0
 10723  172E  00A1               	movwf	IOCAF2_SetInterruptHandler@InterruptHandler
 10724  172F  3000               	movlw	high _IOCAF2_DefaultInterruptHandler
 10725  1730  00A2               	movwf	IOCAF2_SetInterruptHandler@InterruptHandler+1
 10726  1731  3193  2314         	fcall	_IOCAF2_SetInterruptHandler
 10727                           
 10728                           ;pin_manager.c: 106: INTCONbits.IOCIE = 1;
 10729  1733  158B               	bsf	11,3	;volatile
 10730  1734  0008               	return
 10731  1735                     __end_of_PIN_MANAGER_Initialize:	
 10732                           
 10733                           	psect	text54
 10734  1314                     __ptext54:	
 10735 ;; *************** function _IOCAF2_SetInterruptHandler *****************
 10736 ;; Defined at:
 10737 ;;		line 139 in file "mcc_generated_files/pin_manager.c"
 10738 ;; Parameters:    Size  Location     Type
 10739 ;;  InterruptHan    2    1[BANK0 ] PTR FTN()void 
 10740 ;;		 -> IOCAF2_DefaultInterruptHandler(1), 
 10741 ;; Auto vars:     Size  Location     Type
 10742 ;;		None
 10743 ;; Return value:  Size  Location     Type
 10744 ;;                  1    wreg      void 
 10745 ;; Registers used:
 10746 ;;		wreg
 10747 ;; Tracked objects:
 10748 ;;		On entry : 0/0
 10749 ;;		On exit  : 0/0
 10750 ;;		Unchanged: 0/0
 10751 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10752 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10753 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10754 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10755 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10756 ;;Total ram usage:        2 bytes
 10757 ;; Hardware stack levels used:    1
 10758 ;; Hardware stack levels required when called:    4
 10759 ;; This function calls:
 10760 ;;		Nothing
 10761 ;; This function is called by:
 10762 ;;		_PIN_MANAGER_Initialize
 10763 ;; This function uses a non-reentrant model
 10764 ;;
 10765                           
 10766                           
 10767                           ;psect for function _IOCAF2_SetInterruptHandler
 10768  1314                     _IOCAF2_SetInterruptHandler:	
 10769                           
 10770                           ;pin_manager.c: 140: IOCAF2_InterruptHandler = InterruptHandler;
 10771                           
 10772                           ;incstack = 0
 10773                           ; Regs used in _IOCAF2_SetInterruptHandler: [wreg]
 10774  1314  0020               	movlb	0	; select bank0
 10775  1315  0822               	movf	IOCAF2_SetInterruptHandler@InterruptHandler+1,w
 10776  1316  0022               	movlb	2	; select bank2
 10777  1317  00E9               	movwf	(_IOCAF2_InterruptHandler+1)^(0+256)
 10778  1318  0020               	movlb	0	; select bank0
 10779  1319  0821               	movf	IOCAF2_SetInterruptHandler@InterruptHandler,w
 10780  131A  0022               	movlb	2	; select bank2
 10781  131B  00E8               	movwf	_IOCAF2_InterruptHandler^(0+256)
 10782  131C  0008               	return
 10783  131D                     __end_of_IOCAF2_SetInterruptHandler:	
 10784                           
 10785                           	psect	text55
 10786  12D5                     __ptext55:	
 10787 ;; *************** function _OSCILLATOR_Initialize *****************
 10788 ;; Defined at:
 10789 ;;		line 84 in file "mcc_generated_files/mcc.c"
 10790 ;; Parameters:    Size  Location     Type
 10791 ;;		None
 10792 ;; Auto vars:     Size  Location     Type
 10793 ;;		None
 10794 ;; Return value:  Size  Location     Type
 10795 ;;                  1    wreg      void 
 10796 ;; Registers used:
 10797 ;;		wreg, status,2
 10798 ;; Tracked objects:
 10799 ;;		On entry : 0/0
 10800 ;;		On exit  : 0/0
 10801 ;;		Unchanged: 0/0
 10802 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10803 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10804 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10805 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10806 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10807 ;;Total ram usage:        0 bytes
 10808 ;; Hardware stack levels used:    1
 10809 ;; Hardware stack levels required when called:    4
 10810 ;; This function calls:
 10811 ;;		Nothing
 10812 ;; This function is called by:
 10813 ;;		_SYSTEM_Initialize
 10814 ;; This function uses a non-reentrant model
 10815 ;;
 10816                           
 10817                           
 10818                           ;psect for function _OSCILLATOR_Initialize
 10819  12D5                     _OSCILLATOR_Initialize:	
 10820                           
 10821                           ;mcc.c: 87: OSCCON = 0x72;
 10822                           
 10823                           ;incstack = 0
 10824                           ; Regs used in _OSCILLATOR_Initialize: [wreg+status,2]
 10825  12D5  3072               	movlw	114
 10826  12D6  0021               	movlb	1	; select bank1
 10827  12D7  0099               	movwf	25	;volatile
 10828                           
 10829                           ;mcc.c: 89: OSCTUNE = 0x00;
 10830  12D8  0198               	clrf	24	;volatile
 10831                           
 10832                           ;mcc.c: 91: BORCON = 0x00;
 10833  12D9  0022               	movlb	2	; select bank2
 10834  12DA  0196               	clrf	22	;volatile
 10835  12DB  0008               	return
 10836  12DC                     __end_of_OSCILLATOR_Initialize:	
 10837                           
 10838                           	psect	text56
 10839  14CE                     __ptext56:	
 10840 ;; *************** function _I2C2_Initialize *****************
 10841 ;; Defined at:
 10842 ;;		line 198 in file "mcc_generated_files/i2c2.c"
 10843 ;; Parameters:    Size  Location     Type
 10844 ;;		None
 10845 ;; Auto vars:     Size  Location     Type
 10846 ;;		None
 10847 ;; Return value:  Size  Location     Type
 10848 ;;                  1    wreg      void 
 10849 ;; Registers used:
 10850 ;;		wreg, status,2
 10851 ;; Tracked objects:
 10852 ;;		On entry : 0/0
 10853 ;;		On exit  : 0/0
 10854 ;;		Unchanged: 0/0
 10855 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10856 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10857 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10858 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10859 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10860 ;;Total ram usage:        1 bytes
 10861 ;; Hardware stack levels used:    1
 10862 ;; Hardware stack levels required when called:    4
 10863 ;; This function calls:
 10864 ;;		Nothing
 10865 ;; This function is called by:
 10866 ;;		_SYSTEM_Initialize
 10867 ;; This function uses a non-reentrant model
 10868 ;;
 10869                           
 10870                           
 10871                           ;psect for function _I2C2_Initialize
 10872  14CE                     _I2C2_Initialize:	
 10873                           
 10874                           ;i2c2.c: 200: i2c2_object.pTrHead = i2c2_tr_queue;
 10875                           
 10876                           ;incstack = 0
 10877                           ; Regs used in _I2C2_Initialize: [wreg+status,2]
 10878  14CE  3062               	movlw	(low (_i2c2_tr_queue| (0+256)))& (0+255)
 10879  14CF  0020               	movlb	0	; select bank0
 10880  14D0  00A1               	movwf	??_I2C2_Initialize
 10881  14D1  0821               	movf	??_I2C2_Initialize,w
 10882  14D2  0021               	movlb	1	; select bank1
 10883  14D3  00CB               	movwf	(low ((_i2c2_object| 0+1)))^(0+128)
 10884                           
 10885                           ;i2c2.c: 201: i2c2_object.pTrTail = i2c2_tr_queue;
 10886  14D4  3062               	movlw	(low (_i2c2_tr_queue| (0+256)))& (0+255)
 10887  14D5  0020               	movlb	0	; select bank0
 10888  14D6  00A1               	movwf	??_I2C2_Initialize
 10889  14D7  0821               	movf	??_I2C2_Initialize,w
 10890  14D8  0021               	movlb	1	; select bank1
 10891  14D9  00CA               	movwf	_i2c2_object^(0+128)
 10892                           
 10893                           ;i2c2.c: 202: i2c2_object.trStatus.s.empty = 1;
 10894  14DA  14CC               	bsf	(_i2c2_object^(0+128)+2),1
 10895                           
 10896                           ;i2c2.c: 203: i2c2_object.trStatus.s.full = 0;
 10897  14DB  104C               	bcf	(_i2c2_object^(0+128)+2),0
 10898                           
 10899                           ;i2c2.c: 205: i2c2_object.i2cErrors = 0;
 10900  14DC  01CE               	clrf	(_i2c2_object^(0+128)+4)
 10901                           
 10902                           ;i2c2.c: 208: SSP2STAT = 0x00;
 10903  14DD  0024               	movlb	4	; select bank4
 10904  14DE  019C               	clrf	28	;volatile
 10905                           
 10906                           ;i2c2.c: 210: SSP2CON1 = 0x28;
 10907  14DF  3028               	movlw	40
 10908  14E0  009D               	movwf	29	;volatile
 10909                           
 10910                           ;i2c2.c: 212: SSP2CON3 = 0x00;
 10911  14E1  019F               	clrf	31	;volatile
 10912                           
 10913                           ;i2c2.c: 214: SSP2ADD = 0x03;
 10914  14E2  3003               	movlw	3
 10915  14E3  009A               	movwf	26	;volatile
 10916                           
 10917                           ;i2c2.c: 218: PIR4bits.SSP2IF = 0;
 10918  14E4  0020               	movlb	0	; select bank0
 10919  14E5  1014               	bcf	20,0	;volatile
 10920                           
 10921                           ;i2c2.c: 220: PIE4bits.SSP2IE = 1;
 10922  14E6  0021               	movlb	1	; select bank1
 10923  14E7  1414               	bsf	20,0	;volatile
 10924  14E8  0008               	return
 10925  14E9                     __end_of_I2C2_Initialize:	
 10926                           
 10927                           	psect	text57
 10928  129A                     __ptext57:	
 10929 ;; *************** function _FVR_Initialize *****************
 10930 ;; Defined at:
 10931 ;;		line 57 in file "mcc_generated_files/fvr.c"
 10932 ;; Parameters:    Size  Location     Type
 10933 ;;		None
 10934 ;; Auto vars:     Size  Location     Type
 10935 ;;		None
 10936 ;; Return value:  Size  Location     Type
 10937 ;;                  1    wreg      void 
 10938 ;; Registers used:
 10939 ;;		wreg
 10940 ;; Tracked objects:
 10941 ;;		On entry : 0/0
 10942 ;;		On exit  : 0/0
 10943 ;;		Unchanged: 0/0
 10944 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10945 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10946 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10947 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10948 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10949 ;;Total ram usage:        0 bytes
 10950 ;; Hardware stack levels used:    1
 10951 ;; Hardware stack levels required when called:    4
 10952 ;; This function calls:
 10953 ;;		Nothing
 10954 ;; This function is called by:
 10955 ;;		_SYSTEM_Initialize
 10956 ;; This function uses a non-reentrant model
 10957 ;;
 10958                           
 10959                           
 10960                           ;psect for function _FVR_Initialize
 10961  129A                     _FVR_Initialize:	
 10962                           
 10963                           ;fvr.c: 60: FVRCON = 0x01;
 10964                           
 10965                           ;incstack = 0
 10966                           ; Regs used in _FVR_Initialize: [wreg]
 10967  129A  3001               	movlw	1
 10968  129B  0022               	movlb	2	; select bank2
 10969  129C  0097               	movwf	23	;volatile
 10970  129D  0008               	return
 10971  129E                     __end_of_FVR_Initialize:	
 10972                           
 10973                           	psect	text58
 10974  12F2                     __ptext58:	
 10975 ;; *************** function _ADC_Initialize *****************
 10976 ;; Defined at:
 10977 ;;		line 62 in file "mcc_generated_files/adc.c"
 10978 ;; Parameters:    Size  Location     Type
 10979 ;;		None
 10980 ;; Auto vars:     Size  Location     Type
 10981 ;;		None
 10982 ;; Return value:  Size  Location     Type
 10983 ;;                  1    wreg      void 
 10984 ;; Registers used:
 10985 ;;		wreg, status,2
 10986 ;; Tracked objects:
 10987 ;;		On entry : 0/0
 10988 ;;		On exit  : 0/0
 10989 ;;		Unchanged: 0/0
 10990 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10991 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10992 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10993 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10994 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10995 ;;Total ram usage:        0 bytes
 10996 ;; Hardware stack levels used:    1
 10997 ;; Hardware stack levels required when called:    4
 10998 ;; This function calls:
 10999 ;;		Nothing
 11000 ;; This function is called by:
 11001 ;;		_SYSTEM_Initialize
 11002 ;; This function uses a non-reentrant model
 11003 ;;
 11004                           
 11005                           
 11006                           ;psect for function _ADC_Initialize
 11007  12F2                     _ADC_Initialize:	
 11008                           
 11009                           ;adc.c: 67: ADCON0 = 0x01;
 11010                           
 11011                           ;incstack = 0
 11012                           ; Regs used in _ADC_Initialize: [wreg+status,2]
 11013  12F2  3001               	movlw	1
 11014  12F3  0021               	movlb	1	; select bank1
 11015  12F4  009D               	movwf	29	;volatile
 11016                           
 11017                           ;adc.c: 70: ADCON1 = 0x90;
 11018  12F5  3090               	movlw	144
 11019  12F6  009E               	movwf	30	;volatile
 11020                           
 11021                           ;adc.c: 73: ADRESL = 0x00;
 11022  12F7  019B               	clrf	27	;volatile
 11023                           
 11024                           ;adc.c: 76: ADRESH = 0x00;
 11025  12F8  019C               	clrf	28	;volatile
 11026  12F9  0008               	return
 11027  12FA                     __end_of_ADC_Initialize:	
 11028                           
 11029                           	psect	text59
 11030  128E                     __ptext59:	
 11031 ;; *************** function _DOOR_run *****************
 11032 ;; Defined at:
 11033 ;;		line 23 in file "doorlogic.c"
 11034 ;; Parameters:    Size  Location     Type
 11035 ;;		None
 11036 ;; Auto vars:     Size  Location     Type
 11037 ;;		None
 11038 ;; Return value:  Size  Location     Type
 11039 ;;                  1    wreg      enum E3332
 11040 ;; Registers used:
 11041 ;;		wreg
 11042 ;; Tracked objects:
 11043 ;;		On entry : 0/0
 11044 ;;		On exit  : 0/0
 11045 ;;		Unchanged: 0/0
 11046 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11047 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11048 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11049 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11050 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11051 ;;Total ram usage:        0 bytes
 11052 ;; Hardware stack levels used:    1
 11053 ;; Hardware stack levels required when called:    4
 11054 ;; This function calls:
 11055 ;;		Nothing
 11056 ;; This function is called by:
 11057 ;;		_main
 11058 ;; This function uses a non-reentrant model
 11059 ;;
 11060                           
 11061                           
 11062                           ;psect for function _DOOR_run
 11063  128E                     _DOOR_run:	
 11064                           
 11065                           ;doorlogic.c: 24: static DOOR previousDoorState = DOOR_CLOSED;
 11066                           ;doorlogic.c: 25: static unsigned long doorStateDuration = 0;
 11067                           ;doorlogic.c: 50: return(doorState);
 11068                           
 11069                           ;incstack = 0
 11070                           ; Regs used in _DOOR_run: [wreg]
 11071  128E  0021               	movlb	1	; select bank1
 11072  128F  0859               	movf	_doorState^(0+128),w
 11073  1290  0008               	return
 11074  1291                     __end_of_DOOR_run:	
 11075                           
 11076                           	psect	text60
 11077  07FE                     __ptext60:	
 11078 ;; *************** function _DOOR_init *****************
 11079 ;; Defined at:
 11080 ;;		line 10 in file "doorlogic.c"
 11081 ;; Parameters:    Size  Location     Type
 11082 ;;		None
 11083 ;; Auto vars:     Size  Location     Type
 11084 ;;		None
 11085 ;; Return value:  Size  Location     Type
 11086 ;;                  1    wreg      void 
 11087 ;; Registers used:
 11088 ;;		None
 11089 ;; Tracked objects:
 11090 ;;		On entry : 0/0
 11091 ;;		On exit  : 0/0
 11092 ;;		Unchanged: 0/0
 11093 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11094 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11095 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11096 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11097 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11098 ;;Total ram usage:        0 bytes
 11099 ;; Hardware stack levels used:    1
 11100 ;; Hardware stack levels required when called:    4
 11101 ;; This function calls:
 11102 ;;		Nothing
 11103 ;; This function is called by:
 11104 ;;		_main
 11105 ;; This function uses a non-reentrant model
 11106 ;;
 11107                           
 11108                           
 11109                           ;psect for function _DOOR_init
 11110  07FE                     _DOOR_init:	
 11111                           
 11112                           ;incstack = 0
 11113                           ; Regs used in _DOOR_init: []
 11114  07FE  0008               	return
 11115  07FF                     __end_of_DOOR_init:	
 11116                           
 11117                           	psect	text61
 11118  0077                     __ptext61:	
 11119 ;; *************** function _BMP_readTemperature *****************
 11120 ;; Defined at:
 11121 ;;		line 72 in file "bmp280.c"
 11122 ;; Parameters:    Size  Location     Type
 11123 ;;		None
 11124 ;; Auto vars:     Size  Location     Type
 11125 ;;  tmp             1   25[BANK1 ] unsigned char 
 11126 ;;  status          1   24[BANK1 ] unsigned char 
 11127 ;; Return value:  Size  Location     Type
 11128 ;;                  3    6[BANK1 ] float 
 11129 ;; Registers used:
 11130 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11131 ;; Tracked objects:
 11132 ;;		On entry : 0/0
 11133 ;;		On exit  : 0/0
 11134 ;;		Unchanged: 0/0
 11135 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11136 ;;      Params:         0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0
 11137 ;;      Locals:         0       0       5       0       0       0       0       0       0       0       0       0       
      +0       0
 11138 ;;      Temps:          0       0      12       0       0       0       0       0       0       0       0       0       
      +0       0
 11139 ;;      Totals:         0       0      20       0       0       0       0       0       0       0       0       0       
      +0       0
 11140 ;;Total ram usage:       20 bytes
 11141 ;; Hardware stack levels used:    1
 11142 ;; Hardware stack levels required when called:    9
 11143 ;; This function calls:
 11144 ;;		_BMP_init
 11145 ;;		_Diag_getTempSensorHealth
 11146 ;;		_Diag_setTempSensorHealth
 11147 ;;		_HMC5883L_ReadBits
 11148 ;;		_I2C_BufferRead
 11149 ;;		_I2C_ByteWrite
 11150 ;;		___aldiv
 11151 ;;		___altoft
 11152 ;;		___awtoft
 11153 ;;		___ftadd
 11154 ;;		___ftdiv
 11155 ;;		___ftmul
 11156 ;;		___ftneg
 11157 ;;		___fttol
 11158 ;;		___lwtoft
 11159 ;; This function is called by:
 11160 ;;		_main
 11161 ;; This function uses a non-reentrant model
 11162 ;;
 11163                           
 11164                           
 11165                           ;psect for function _BMP_readTemperature
 11166  0077                     _BMP_readTemperature:	
 11167                           
 11168                           ;bmp280.c: 74: char tmp=0;
 11169                           
 11170                           ;incstack = 0
 11171                           ; Regs used in _BMP_readTemperature: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 11172  0077  0021               	movlb	1	; select bank1
 11173  0078  01B9               	clrf	BMP_readTemperature@tmp^(0+128)
 11174                           
 11175                           ;bmp280.c: 75: bool status;
 11176                           ;bmp280.c: 77: tmp=0x41;
 11177  0079  3041               	movlw	65
 11178  007A  00A9               	movwf	??_BMP_readTemperature^(0+128)
 11179  007B  0829               	movf	??_BMP_readTemperature^(0+128),w
 11180  007C  00B9               	movwf	BMP_readTemperature@tmp^(0+128)
 11181                           
 11182                           ;bmp280.c: 78: if(Diag_getTempSensorHealth()==0)
 11183  007D  3192  228B  3180   	fcall	_Diag_getTempSensorHealth
 11184  0080  3A00               	xorlw	0
 11185  0081  1D03               	skipz
 11186  0082  2886               	goto	l1026
 11187                           
 11188                           ;bmp280.c: 79: {
 11189                           ;bmp280.c: 80: BMP_init();
 11190  0083  318B  2315  3180   	fcall	_BMP_init
 11191  0086                     l1026:	
 11192                           
 11193                           ;bmp280.c: 81: }
 11194                           ;bmp280.c: 82: I2C_ByteWrite(0x76, &tmp, 0xF4);
 11195  0086  30B9               	movlw	(low (BMP_readTemperature@tmp| 0))& (0+255)
 11196  0087  0021               	movlb	1	; select bank1
 11197  0088  00A9               	movwf	??_BMP_readTemperature^(0+128)
 11198  0089  0829               	movf	??_BMP_readTemperature^(0+128),w
 11199  008A  0020               	movlb	0	; select bank0
 11200  008B  00AF               	movwf	I2C_ByteWrite@pBuffer
 11201  008C  30F4               	movlw	244
 11202  008D  0021               	movlb	1	; select bank1
 11203  008E  00AA               	movwf	(??_BMP_readTemperature+1)^(0+128)
 11204  008F  082A               	movf	(??_BMP_readTemperature+1)^(0+128),w
 11205  0090  0020               	movlb	0	; select bank0
 11206  0091  00B0               	movwf	I2C_ByteWrite@WriteAddr
 11207  0092  3076               	movlw	118
 11208  0093  3197  27C4  3180   	fcall	_I2C_ByteWrite
 11209  0096                     l1027:	
 11210                           ;bmp280.c: 83: do
 11211                           
 11212                           
 11213                           ;bmp280.c: 84: {
 11214                           ;bmp280.c: 85: status=HMC5883L_ReadBits(0x76, 0xF3 , 3, 1, &tmp);
 11215  0096  30F3               	movlw	243
 11216  0097  0021               	movlb	1	; select bank1
 11217  0098  00A9               	movwf	??_BMP_readTemperature^(0+128)
 11218  0099  0829               	movf	??_BMP_readTemperature^(0+128),w
 11219  009A  0020               	movlb	0	; select bank0
 11220  009B  00C3               	movwf	HMC5883L_ReadBits@regAddr
 11221  009C  3003               	movlw	3
 11222  009D  0021               	movlb	1	; select bank1
 11223  009E  00AA               	movwf	(??_BMP_readTemperature+1)^(0+128)
 11224  009F  082A               	movf	(??_BMP_readTemperature+1)^(0+128),w
 11225  00A0  0020               	movlb	0	; select bank0
 11226  00A1  00C4               	movwf	HMC5883L_ReadBits@bitStart
 11227  00A2  01C5               	clrf	HMC5883L_ReadBits@length
 11228  00A3  0AC5               	incf	HMC5883L_ReadBits@length,f
 11229  00A4  30B9               	movlw	(low (BMP_readTemperature@tmp| 0))& (0+255)
 11230  00A5  0021               	movlb	1	; select bank1
 11231  00A6  00AB               	movwf	(??_BMP_readTemperature+2)^(0+128)
 11232  00A7  082B               	movf	(??_BMP_readTemperature+2)^(0+128),w
 11233  00A8  0020               	movlb	0	; select bank0
 11234  00A9  00C6               	movwf	HMC5883L_ReadBits@data
 11235  00AA  3076               	movlw	118
 11236  00AB  3188  20B9  3180   	fcall	_HMC5883L_ReadBits
 11237  00AE  0021               	movlb	1	; select bank1
 11238  00AF  00AC               	movwf	(??_BMP_readTemperature+3)^(0+128)
 11239  00B0  082C               	movf	(??_BMP_readTemperature+3)^(0+128),w
 11240  00B1  00B8               	movwf	BMP_readTemperature@status^(0+128)
 11241                           
 11242                           ;bmp280.c: 86: } while(tmp==0 && status==1);
 11243  00B2  0839               	movf	BMP_readTemperature@tmp^(0+128),w
 11244  00B3  1903               	btfsc	3,2
 11245  00B4  0338               	decf	BMP_readTemperature@status^(0+128),w
 11246  00B5  1903               	btfsc	3,2
 11247  00B6  2896               	goto	l1027
 11248                           
 11249                           ;bmp280.c: 87: if(status==0)
 11250  00B7  0838               	movf	BMP_readTemperature@status^(0+128),w
 11251  00B8  1D03               	btfss	3,2
 11252  00B9  28C5               	goto	l6503
 11253                           
 11254                           ;bmp280.c: 88: {
 11255                           ;bmp280.c: 89: Diag_setTempSensorHealth(0);
 11256  00BA  3000               	movlw	0
 11257  00BB  3192  22EA         	fcall	_Diag_setTempSensorHealth
 11258                           
 11259                           ;bmp280.c: 90: return -55;
 11260  00BD  3000               	movlw	0
 11261  00BE  0021               	movlb	1	; select bank1
 11262  00BF  00A6               	movwf	?_BMP_readTemperature^(0+128)
 11263  00C0  305C               	movlw	92
 11264  00C1  00A7               	movwf	(?_BMP_readTemperature+1)^(0+128)
 11265  00C2  30C2               	movlw	194
 11266  00C3  00A8               	movwf	(?_BMP_readTemperature+2)^(0+128)
 11267  00C4  0008               	return
 11268  00C5                     l6503:	
 11269                           
 11270                           ;bmp280.c: 91: }
 11271                           ;bmp280.c: 93: if(I2C_BufferRead(0x76, data, 0xF7, 8)==0)
 11272  00C5  30C0               	movlw	low _data
 11273  00C6  0020               	movlb	0	; select bank0
 11274  00C7  00B1               	movwf	I2C_BufferRead@pBuffer
 11275  00C8  3001               	movlw	high _data
 11276  00C9  00B2               	movwf	I2C_BufferRead@pBuffer+1
 11277  00CA  30F7               	movlw	247
 11278  00CB  0021               	movlb	1	; select bank1
 11279  00CC  00A9               	movwf	??_BMP_readTemperature^(0+128)
 11280  00CD  0829               	movf	??_BMP_readTemperature^(0+128),w
 11281  00CE  0020               	movlb	0	; select bank0
 11282  00CF  00B3               	movwf	I2C_BufferRead@ReadAddr
 11283  00D0  3008               	movlw	8
 11284  00D1  00B4               	movwf	I2C_BufferRead@NumByteToRead
 11285  00D2  3000               	movlw	0
 11286  00D3  00B5               	movwf	I2C_BufferRead@NumByteToRead+1
 11287  00D4  3076               	movlw	118
 11288  00D5  3189  21F4  3180   	fcall	_I2C_BufferRead
 11289  00D8  3A00               	xorlw	0
 11290  00D9  1D03               	skipz
 11291  00DA  28E6               	goto	l6511
 11292                           
 11293                           ;bmp280.c: 94: {
 11294                           ;bmp280.c: 95: Diag_setTempSensorHealth(0);
 11295  00DB  3000               	movlw	0
 11296  00DC  3192  22EA         	fcall	_Diag_setTempSensorHealth
 11297                           
 11298                           ;bmp280.c: 96: return -55;
 11299  00DE  3000               	movlw	0
 11300  00DF  0021               	movlb	1	; select bank1
 11301  00E0  00A6               	movwf	?_BMP_readTemperature^(0+128)
 11302  00E1  305C               	movlw	92
 11303  00E2  00A7               	movwf	(?_BMP_readTemperature+1)^(0+128)
 11304  00E3  30C2               	movlw	194
 11305  00E4  00A8               	movwf	(?_BMP_readTemperature+2)^(0+128)
 11306  00E5  0008               	return
 11307  00E6                     l6511:	
 11308                           
 11309                           ;bmp280.c: 97: }
 11310                           ;bmp280.c: 101: adc_t = (((long)(data[3] & 0xFF) * 65536) + ((long)(data[4] & 0xFF) * 25
      +                          6) + (long)(data[5] & 0xF0)) / 16;
 11311  00E6  3000               	movlw	0
 11312  00E7  0020               	movlb	0	; select bank0
 11313  00E8  00A4               	movwf	___aldiv@divisor+3
 11314  00E9  3000               	movlw	0
 11315  00EA  00A3               	movwf	___aldiv@divisor+2
 11316  00EB  3000               	movlw	0
 11317  00EC  00A2               	movwf	___aldiv@divisor+1
 11318  00ED  3010               	movlw	16
 11319  00EE  00A1               	movwf	___aldiv@divisor
 11320  00EF  0023               	movlb	3	; select bank3
 11321  00F0  0845               	movf	(_data^(0+384)+5),w
 11322  00F1  39F0               	andlw	240
 11323  00F2  0021               	movlb	1	; select bank1
 11324  00F3  00A9               	movwf	??_BMP_readTemperature^(0+128)
 11325  00F4  01AA               	clrf	(??_BMP_readTemperature^(0+128)+1)
 11326  00F5  01AB               	clrf	(??_BMP_readTemperature^(0+128)+2)
 11327  00F6  01AC               	clrf	(??_BMP_readTemperature^(0+128)+3)
 11328  00F7  0023               	movlb	3	; select bank3
 11329  00F8  0844               	movf	(_data^(0+384)+4),w
 11330  00F9  0021               	movlb	1	; select bank1
 11331  00FA  00AD               	movwf	(??_BMP_readTemperature+4)^(0+128)
 11332  00FB  01AE               	clrf	((??_BMP_readTemperature+4)^(0+128)+1)
 11333  00FC  01AF               	clrf	((??_BMP_readTemperature+4)^(0+128)+2)
 11334  00FD  01B0               	clrf	((??_BMP_readTemperature+4)^(0+128)+3)
 11335  00FE  3008               	movlw	8
 11336  00FF                     u6405:	
 11337  00FF  35AD               	lslf	(??_BMP_readTemperature+4)^(0+128),f
 11338  0100  0DAE               	rlf	((??_BMP_readTemperature+4)^(0+128)+1),f
 11339  0101  0DAF               	rlf	((??_BMP_readTemperature+4)^(0+128)+2),f
 11340  0102  0DB0               	rlf	((??_BMP_readTemperature+4)^(0+128)+3),f
 11341  0103  0B89               	decfsz	9,f
 11342  0104  28FF               	goto	u6405
 11343  0105  0023               	movlb	3	; select bank3
 11344  0106  0843               	movf	(_data^(0+384)+3),w
 11345  0107  0021               	movlb	1	; select bank1
 11346  0108  00B1               	movwf	(??_BMP_readTemperature+8)^(0+128)
 11347  0109  01B2               	clrf	((??_BMP_readTemperature+8)^(0+128)+1)
 11348  010A  01B3               	clrf	((??_BMP_readTemperature+8)^(0+128)+2)
 11349  010B  01B4               	clrf	((??_BMP_readTemperature+8)^(0+128)+3)
 11350  010C  3010               	movlw	16
 11351  010D                     u6415:	
 11352  010D  35B1               	lslf	(??_BMP_readTemperature+8)^(0+128),f
 11353  010E  0DB2               	rlf	((??_BMP_readTemperature+8)^(0+128)+1),f
 11354  010F  0DB3               	rlf	((??_BMP_readTemperature+8)^(0+128)+2),f
 11355  0110  0DB4               	rlf	((??_BMP_readTemperature+8)^(0+128)+3),f
 11356  0111  0B89               	decfsz	9,f
 11357  0112  290D               	goto	u6415
 11358  0113  0831               	movf	(??_BMP_readTemperature+8)^(0+128),w
 11359  0114  07AD               	addwf	(??_BMP_readTemperature+4)^(0+128),f
 11360  0115  0832               	movf	(??_BMP_readTemperature+9)^(0+128),w
 11361  0116  3DAE               	addwfc	((??_BMP_readTemperature+4)^(0+128)+1),f
 11362  0117  0833               	movf	(??_BMP_readTemperature+10)^(0+128),w
 11363  0118  3DAF               	addwfc	((??_BMP_readTemperature+4)^(0+128)+2),f
 11364  0119  0834               	movf	(??_BMP_readTemperature+11)^(0+128),w
 11365  011A  3DB0               	addwfc	((??_BMP_readTemperature+4)^(0+128)+3),f
 11366  011B  082D               	movf	(??_BMP_readTemperature+4)^(0+128),w
 11367  011C  07A9               	addwf	??_BMP_readTemperature^(0+128),f
 11368  011D  082E               	movf	(??_BMP_readTemperature+5)^(0+128),w
 11369  011E  3DAA               	addwfc	(??_BMP_readTemperature^(0+128)+1),f
 11370  011F  082F               	movf	(??_BMP_readTemperature+6)^(0+128),w
 11371  0120  3DAB               	addwfc	(??_BMP_readTemperature^(0+128)+2),f
 11372  0121  0830               	movf	(??_BMP_readTemperature+7)^(0+128),w
 11373  0122  3DAC               	addwfc	(??_BMP_readTemperature^(0+128)+3),f
 11374  0123  082C               	movf	(??_BMP_readTemperature+3)^(0+128),w
 11375  0124  0020               	movlb	0	; select bank0
 11376  0125  00A8               	movwf	___aldiv@dividend+3
 11377  0126  0021               	movlb	1	; select bank1
 11378  0127  082B               	movf	(??_BMP_readTemperature+2)^(0+128),w
 11379  0128  0020               	movlb	0	; select bank0
 11380  0129  00A7               	movwf	___aldiv@dividend+2
 11381  012A  0021               	movlb	1	; select bank1
 11382  012B  082A               	movf	(??_BMP_readTemperature+1)^(0+128),w
 11383  012C  0020               	movlb	0	; select bank0
 11384  012D  00A6               	movwf	___aldiv@dividend+1
 11385  012E  0021               	movlb	1	; select bank1
 11386  012F  0829               	movf	??_BMP_readTemperature^(0+128),w
 11387  0130  0020               	movlb	0	; select bank0
 11388  0131  00A5               	movwf	___aldiv@dividend
 11389  0132  318C  2403  3180   	fcall	___aldiv
 11390  0135  0020               	movlb	0	; select bank0
 11391  0136  0824               	movf	?___aldiv+3,w
 11392  0137  0022               	movlb	2	; select bank2
 11393  0138  00A7               	movwf	(_adc_t+3)^(0+256)
 11394  0139  0020               	movlb	0	; select bank0
 11395  013A  0823               	movf	?___aldiv+2,w
 11396  013B  0022               	movlb	2	; select bank2
 11397  013C  00A6               	movwf	(_adc_t+2)^(0+256)
 11398  013D  0020               	movlb	0	; select bank0
 11399  013E  0822               	movf	?___aldiv+1,w
 11400  013F  0022               	movlb	2	; select bank2
 11401  0140  00A5               	movwf	(_adc_t+1)^(0+256)
 11402  0141  0020               	movlb	0	; select bank0
 11403  0142  0821               	movf	?___aldiv,w
 11404  0143  0022               	movlb	2	; select bank2
 11405  0144  00A4               	movwf	_adc_t^(0+256)
 11406                           
 11407                           ;bmp280.c: 104: var1 = (((double)adc_t) / 16384.0 - ((double)dig_T1) / 1024.0) * ((doubl
      +                          e)dig_T2);
 11408  0145  0857               	movf	(_dig_T2+1)^(0+256),w
 11409  0146  0020               	movlb	0	; select bank0
 11410  0147  00AA               	movwf	___awtoft@c+1
 11411  0148  0022               	movlb	2	; select bank2
 11412  0149  0856               	movf	_dig_T2^(0+256),w
 11413  014A  0020               	movlb	0	; select bank0
 11414  014B  00A9               	movwf	___awtoft@c
 11415  014C  3196  262A  3180   	fcall	___awtoft
 11416  014F  0020               	movlb	0	; select bank0
 11417  0150  0829               	movf	?___awtoft,w
 11418  0151  00D6               	movwf	___ftmul@f1
 11419  0152  082A               	movf	?___awtoft+1,w
 11420  0153  00D7               	movwf	___ftmul@f1+1
 11421  0154  082B               	movf	?___awtoft+2,w
 11422  0155  00D8               	movwf	___ftmul@f1+2
 11423  0156  0021               	movlb	1	; select bank1
 11424  0157  0854               	movf	(_dig_T1+1)^(0+128),w
 11425  0158  0020               	movlb	0	; select bank0
 11426  0159  00AA               	movwf	___lwtoft@c+1
 11427  015A  0021               	movlb	1	; select bank1
 11428  015B  0853               	movf	_dig_T1^(0+128),w
 11429  015C  0020               	movlb	0	; select bank0
 11430  015D  00A9               	movwf	___lwtoft@c
 11431  015E  3193  23E6  3180   	fcall	___lwtoft
 11432  0161  0020               	movlb	0	; select bank0
 11433  0162  0829               	movf	?___lwtoft,w
 11434  0163  00B4               	movwf	___ftdiv@f1
 11435  0164  082A               	movf	?___lwtoft+1,w
 11436  0165  00B5               	movwf	___ftdiv@f1+1
 11437  0166  082B               	movf	?___lwtoft+2,w
 11438  0167  00B6               	movwf	___ftdiv@f1+2
 11439  0168  3000               	movlw	0
 11440  0169  00B1               	movwf	___ftdiv@f2
 11441  016A  3080               	movlw	128
 11442  016B  00B2               	movwf	___ftdiv@f2+1
 11443  016C  3044               	movlw	68
 11444  016D  00B3               	movwf	___ftdiv@f2+2
 11445  016E  318D  25C7  3180   	fcall	___ftdiv
 11446  0171  0020               	movlb	0	; select bank0
 11447  0172  0831               	movf	?___ftdiv,w
 11448  0173  00C1               	movwf	___ftneg@f1
 11449  0174  0832               	movf	?___ftdiv+1,w
 11450  0175  00C2               	movwf	___ftneg@f1+1
 11451  0176  0833               	movf	?___ftdiv+2,w
 11452  0177  00C3               	movwf	___ftneg@f1+2
 11453  0178  3193  230B  3180   	fcall	___ftneg
 11454  017B  0020               	movlb	0	; select bank0
 11455  017C  0841               	movf	?___ftneg,w
 11456  017D  00C9               	movwf	___ftadd@f1
 11457  017E  0842               	movf	?___ftneg+1,w
 11458  017F  00CA               	movwf	___ftadd@f1+1
 11459  0180  0843               	movf	?___ftneg+2,w
 11460  0181  00CB               	movwf	___ftadd@f1+2
 11461  0182  3000               	movlw	0
 11462  0183  00B1               	movwf	___ftdiv@f2
 11463  0184  3080               	movlw	128
 11464  0185  00B2               	movwf	___ftdiv@f2+1
 11465  0186  3046               	movlw	70
 11466  0187  00B3               	movwf	___ftdiv@f2+2
 11467  0188  0022               	movlb	2	; select bank2
 11468  0189  0827               	movf	(_adc_t+3)^(0+256),w
 11469  018A  0020               	movlb	0	; select bank0
 11470  018B  00AC               	movwf	___altoft@c+3
 11471  018C  0022               	movlb	2	; select bank2
 11472  018D  0826               	movf	(_adc_t+2)^(0+256),w
 11473  018E  0020               	movlb	0	; select bank0
 11474  018F  00AB               	movwf	___altoft@c+2
 11475  0190  0022               	movlb	2	; select bank2
 11476  0191  0825               	movf	(_adc_t+1)^(0+256),w
 11477  0192  0020               	movlb	0	; select bank0
 11478  0193  00AA               	movwf	___altoft@c+1
 11479  0194  0022               	movlb	2	; select bank2
 11480  0195  0824               	movf	_adc_t^(0+256),w
 11481  0196  0020               	movlb	0	; select bank0
 11482  0197  00A9               	movwf	___altoft@c
 11483  0198  3188  2037  3180   	fcall	___altoft
 11484  019B  0020               	movlb	0	; select bank0
 11485  019C  0829               	movf	?___altoft,w
 11486  019D  00B4               	movwf	___ftdiv@f1
 11487  019E  082A               	movf	?___altoft+1,w
 11488  019F  00B5               	movwf	___ftdiv@f1+1
 11489  01A0  082B               	movf	?___altoft+2,w
 11490  01A1  00B6               	movwf	___ftdiv@f1+2
 11491  01A2  318D  25C7  3180   	fcall	___ftdiv
 11492  01A5  0020               	movlb	0	; select bank0
 11493  01A6  0831               	movf	?___ftdiv,w
 11494  01A7  00CC               	movwf	___ftadd@f2
 11495  01A8  0832               	movf	?___ftdiv+1,w
 11496  01A9  00CD               	movwf	___ftadd@f2+1
 11497  01AA  0833               	movf	?___ftdiv+2,w
 11498  01AB  00CE               	movwf	___ftadd@f2+2
 11499  01AC  3186  268D  3180   	fcall	___ftadd
 11500  01AF  0020               	movlb	0	; select bank0
 11501  01B0  0849               	movf	?___ftadd,w
 11502  01B1  00D9               	movwf	___ftmul@f2
 11503  01B2  084A               	movf	?___ftadd+1,w
 11504  01B3  00DA               	movwf	___ftmul@f2+1
 11505  01B4  084B               	movf	?___ftadd+2,w
 11506  01B5  00DB               	movwf	___ftmul@f2+2
 11507  01B6  318E  2670  3180   	fcall	___ftmul
 11508  01B9  0020               	movlb	0	; select bank0
 11509  01BA  0856               	movf	?___ftmul,w
 11510  01BB  0022               	movlb	2	; select bank2
 11511  01BC  00B4               	movwf	_var1^(0+256)
 11512  01BD  0020               	movlb	0	; select bank0
 11513  01BE  0857               	movf	?___ftmul+1,w
 11514  01BF  0022               	movlb	2	; select bank2
 11515  01C0  00B5               	movwf	(_var1+1)^(0+256)
 11516  01C1  0020               	movlb	0	; select bank0
 11517  01C2  0858               	movf	?___ftmul+2,w
 11518  01C3  0022               	movlb	2	; select bank2
 11519  01C4  00B6               	movwf	(_var1+2)^(0+256)
 11520                           
 11521                           ;bmp280.c: 105: var2 = ((((double)adc_t) / 131072.0 - ((double)dig_T1) / 8192.0) *
 11522                           ;bmp280.c: 106: (((double)adc_t) / 131072.0 - ((double)dig_T1) / 8192.0)) * ((double)dig
      +                          _T3);
 11523  01C5  0021               	movlb	1	; select bank1
 11524  01C6  0854               	movf	(_dig_T1+1)^(0+128),w
 11525  01C7  0020               	movlb	0	; select bank0
 11526  01C8  00AA               	movwf	___lwtoft@c+1
 11527  01C9  0021               	movlb	1	; select bank1
 11528  01CA  0853               	movf	_dig_T1^(0+128),w
 11529  01CB  0020               	movlb	0	; select bank0
 11530  01CC  00A9               	movwf	___lwtoft@c
 11531  01CD  3193  23E6  3180   	fcall	___lwtoft
 11532  01D0  0020               	movlb	0	; select bank0
 11533  01D1  0829               	movf	?___lwtoft,w
 11534  01D2  00B4               	movwf	___ftdiv@f1
 11535  01D3  082A               	movf	?___lwtoft+1,w
 11536  01D4  00B5               	movwf	___ftdiv@f1+1
 11537  01D5  082B               	movf	?___lwtoft+2,w
 11538  01D6  00B6               	movwf	___ftdiv@f1+2
 11539  01D7  3000               	movlw	0
 11540  01D8  00B1               	movwf	___ftdiv@f2
 11541  01D9  3000               	movlw	0
 11542  01DA  00B2               	movwf	___ftdiv@f2+1
 11543  01DB  3046               	movlw	70
 11544  01DC  00B3               	movwf	___ftdiv@f2+2
 11545  01DD  318D  25C7  3180   	fcall	___ftdiv
 11546  01E0  0020               	movlb	0	; select bank0
 11547  01E1  0831               	movf	?___ftdiv,w
 11548  01E2  00C1               	movwf	___ftneg@f1
 11549  01E3  0832               	movf	?___ftdiv+1,w
 11550  01E4  00C2               	movwf	___ftneg@f1+1
 11551  01E5  0833               	movf	?___ftdiv+2,w
 11552  01E6  00C3               	movwf	___ftneg@f1+2
 11553  01E7  3193  230B  3180   	fcall	___ftneg
 11554  01EA  0020               	movlb	0	; select bank0
 11555  01EB  0841               	movf	?___ftneg,w
 11556  01EC  00C9               	movwf	___ftadd@f1
 11557  01ED  0842               	movf	?___ftneg+1,w
 11558  01EE  00CA               	movwf	___ftadd@f1+1
 11559  01EF  0843               	movf	?___ftneg+2,w
 11560  01F0  00CB               	movwf	___ftadd@f1+2
 11561  01F1  3000               	movlw	0
 11562  01F2  00B1               	movwf	___ftdiv@f2
 11563  01F3  3000               	movlw	0
 11564  01F4  00B2               	movwf	___ftdiv@f2+1
 11565  01F5  3048               	movlw	72
 11566  01F6  00B3               	movwf	___ftdiv@f2+2
 11567  01F7  0022               	movlb	2	; select bank2
 11568  01F8  0827               	movf	(_adc_t+3)^(0+256),w
 11569  01F9  0020               	movlb	0	; select bank0
 11570  01FA  00AC               	movwf	___altoft@c+3
 11571  01FB  0022               	movlb	2	; select bank2
 11572  01FC  0826               	movf	(_adc_t+2)^(0+256),w
 11573  01FD  0020               	movlb	0	; select bank0
 11574  01FE  00AB               	movwf	___altoft@c+2
 11575  01FF  0022               	movlb	2	; select bank2
 11576  0200  0825               	movf	(_adc_t+1)^(0+256),w
 11577  0201  0020               	movlb	0	; select bank0
 11578  0202  00AA               	movwf	___altoft@c+1
 11579  0203  0022               	movlb	2	; select bank2
 11580  0204  0824               	movf	_adc_t^(0+256),w
 11581  0205  0020               	movlb	0	; select bank0
 11582  0206  00A9               	movwf	___altoft@c
 11583  0207  3188  2037  3180   	fcall	___altoft
 11584  020A  0020               	movlb	0	; select bank0
 11585  020B  0829               	movf	?___altoft,w
 11586  020C  00B4               	movwf	___ftdiv@f1
 11587  020D  082A               	movf	?___altoft+1,w
 11588  020E  00B5               	movwf	___ftdiv@f1+1
 11589  020F  082B               	movf	?___altoft+2,w
 11590  0210  00B6               	movwf	___ftdiv@f1+2
 11591  0211  318D  25C7  3180   	fcall	___ftdiv
 11592  0214  0020               	movlb	0	; select bank0
 11593  0215  0831               	movf	?___ftdiv,w
 11594  0216  00CC               	movwf	___ftadd@f2
 11595  0217  0832               	movf	?___ftdiv+1,w
 11596  0218  00CD               	movwf	___ftadd@f2+1
 11597  0219  0833               	movf	?___ftdiv+2,w
 11598  021A  00CE               	movwf	___ftadd@f2+2
 11599  021B  3186  268D  3180   	fcall	___ftadd
 11600  021E  0020               	movlb	0	; select bank0
 11601  021F  0849               	movf	?___ftadd,w
 11602  0220  00D6               	movwf	___ftmul@f1
 11603  0221  084A               	movf	?___ftadd+1,w
 11604  0222  00D7               	movwf	___ftmul@f1+1
 11605  0223  084B               	movf	?___ftadd+2,w
 11606  0224  00D8               	movwf	___ftmul@f1+2
 11607  0225  0021               	movlb	1	; select bank1
 11608  0226  0854               	movf	(_dig_T1+1)^(0+128),w
 11609  0227  0020               	movlb	0	; select bank0
 11610  0228  00AA               	movwf	___lwtoft@c+1
 11611  0229  0021               	movlb	1	; select bank1
 11612  022A  0853               	movf	_dig_T1^(0+128),w
 11613  022B  0020               	movlb	0	; select bank0
 11614  022C  00A9               	movwf	___lwtoft@c
 11615  022D  3193  23E6  3180   	fcall	___lwtoft
 11616  0230  0020               	movlb	0	; select bank0
 11617  0231  0829               	movf	?___lwtoft,w
 11618  0232  00B4               	movwf	___ftdiv@f1
 11619  0233  082A               	movf	?___lwtoft+1,w
 11620  0234  00B5               	movwf	___ftdiv@f1+1
 11621  0235  082B               	movf	?___lwtoft+2,w
 11622  0236  00B6               	movwf	___ftdiv@f1+2
 11623  0237  3000               	movlw	0
 11624  0238  00B1               	movwf	___ftdiv@f2
 11625  0239  3000               	movlw	0
 11626  023A  00B2               	movwf	___ftdiv@f2+1
 11627  023B  3046               	movlw	70
 11628  023C  00B3               	movwf	___ftdiv@f2+2
 11629  023D  318D  25C7  3180   	fcall	___ftdiv
 11630  0240  0020               	movlb	0	; select bank0
 11631  0241  0831               	movf	?___ftdiv,w
 11632  0242  00C1               	movwf	___ftneg@f1
 11633  0243  0832               	movf	?___ftdiv+1,w
 11634  0244  00C2               	movwf	___ftneg@f1+1
 11635  0245  0833               	movf	?___ftdiv+2,w
 11636  0246  00C3               	movwf	___ftneg@f1+2
 11637  0247  3193  230B  3180   	fcall	___ftneg
 11638  024A  0020               	movlb	0	; select bank0
 11639  024B  0841               	movf	?___ftneg,w
 11640  024C  00C9               	movwf	___ftadd@f1
 11641  024D  0842               	movf	?___ftneg+1,w
 11642  024E  00CA               	movwf	___ftadd@f1+1
 11643  024F  0843               	movf	?___ftneg+2,w
 11644  0250  00CB               	movwf	___ftadd@f1+2
 11645  0251  3000               	movlw	0
 11646  0252  00B1               	movwf	___ftdiv@f2
 11647  0253  3000               	movlw	0
 11648  0254  00B2               	movwf	___ftdiv@f2+1
 11649  0255  3048               	movlw	72
 11650  0256  00B3               	movwf	___ftdiv@f2+2
 11651  0257  0022               	movlb	2	; select bank2
 11652  0258  0827               	movf	(_adc_t+3)^(0+256),w
 11653  0259  0020               	movlb	0	; select bank0
 11654  025A  00AC               	movwf	___altoft@c+3
 11655  025B  0022               	movlb	2	; select bank2
 11656  025C  0826               	movf	(_adc_t+2)^(0+256),w
 11657  025D  0020               	movlb	0	; select bank0
 11658  025E  00AB               	movwf	___altoft@c+2
 11659  025F  0022               	movlb	2	; select bank2
 11660  0260  0825               	movf	(_adc_t+1)^(0+256),w
 11661  0261  0020               	movlb	0	; select bank0
 11662  0262  00AA               	movwf	___altoft@c+1
 11663  0263  0022               	movlb	2	; select bank2
 11664  0264  0824               	movf	_adc_t^(0+256),w
 11665  0265  0020               	movlb	0	; select bank0
 11666  0266  00A9               	movwf	___altoft@c
 11667  0267  3188  2037  3180   	fcall	___altoft
 11668  026A  0020               	movlb	0	; select bank0
 11669  026B  0829               	movf	?___altoft,w
 11670  026C  00B4               	movwf	___ftdiv@f1
 11671  026D  082A               	movf	?___altoft+1,w
 11672  026E  00B5               	movwf	___ftdiv@f1+1
 11673  026F  082B               	movf	?___altoft+2,w
 11674  0270  00B6               	movwf	___ftdiv@f1+2
 11675  0271  318D  25C7  3180   	fcall	___ftdiv
 11676  0274  0020               	movlb	0	; select bank0
 11677  0275  0831               	movf	?___ftdiv,w
 11678  0276  00CC               	movwf	___ftadd@f2
 11679  0277  0832               	movf	?___ftdiv+1,w
 11680  0278  00CD               	movwf	___ftadd@f2+1
 11681  0279  0833               	movf	?___ftdiv+2,w
 11682  027A  00CE               	movwf	___ftadd@f2+2
 11683  027B  3186  268D  3180   	fcall	___ftadd
 11684  027E  0020               	movlb	0	; select bank0
 11685  027F  0849               	movf	?___ftadd,w
 11686  0280  00D9               	movwf	___ftmul@f2
 11687  0281  084A               	movf	?___ftadd+1,w
 11688  0282  00DA               	movwf	___ftmul@f2+1
 11689  0283  084B               	movf	?___ftadd+2,w
 11690  0284  00DB               	movwf	___ftmul@f2+2
 11691  0285  318E  2670  3180   	fcall	___ftmul
 11692  0288  0020               	movlb	0	; select bank0
 11693  0289  0856               	movf	?___ftmul,w
 11694  028A  0021               	movlb	1	; select bank1
 11695  028B  00B5               	movwf	_BMP_readTemperature$2648^(0+128)
 11696  028C  0020               	movlb	0	; select bank0
 11697  028D  0857               	movf	?___ftmul+1,w
 11698  028E  0021               	movlb	1	; select bank1
 11699  028F  00B6               	movwf	(_BMP_readTemperature$2648+1)^(0+128)
 11700  0290  0020               	movlb	0	; select bank0
 11701  0291  0858               	movf	?___ftmul+2,w
 11702  0292  0021               	movlb	1	; select bank1
 11703  0293  00B7               	movwf	(_BMP_readTemperature$2648+2)^(0+128)
 11704                           
 11705                           ;bmp280.c: 105: var2 = ((((double)adc_t) / 131072.0 - ((double)dig_T1) / 8192.0) *
 11706                           ;bmp280.c: 106: (((double)adc_t) / 131072.0 - ((double)dig_T1) / 8192.0)) * ((double)dig
      +                          _T3);
 11707  0294  0022               	movlb	2	; select bank2
 11708  0295  0855               	movf	(_dig_T3+1)^(0+256),w
 11709  0296  0020               	movlb	0	; select bank0
 11710  0297  00AA               	movwf	___awtoft@c+1
 11711  0298  0022               	movlb	2	; select bank2
 11712  0299  0854               	movf	_dig_T3^(0+256),w
 11713  029A  0020               	movlb	0	; select bank0
 11714  029B  00A9               	movwf	___awtoft@c
 11715  029C  3196  262A  3180   	fcall	___awtoft
 11716  029F  0020               	movlb	0	; select bank0
 11717  02A0  0829               	movf	?___awtoft,w
 11718  02A1  00D6               	movwf	___ftmul@f1
 11719  02A2  082A               	movf	?___awtoft+1,w
 11720  02A3  00D7               	movwf	___ftmul@f1+1
 11721  02A4  082B               	movf	?___awtoft+2,w
 11722  02A5  00D8               	movwf	___ftmul@f1+2
 11723  02A6  0021               	movlb	1	; select bank1
 11724  02A7  0835               	movf	_BMP_readTemperature$2648^(0+128),w
 11725  02A8  0020               	movlb	0	; select bank0
 11726  02A9  00D9               	movwf	___ftmul@f2
 11727  02AA  0021               	movlb	1	; select bank1
 11728  02AB  0836               	movf	(_BMP_readTemperature$2648+1)^(0+128),w
 11729  02AC  0020               	movlb	0	; select bank0
 11730  02AD  00DA               	movwf	___ftmul@f2+1
 11731  02AE  0021               	movlb	1	; select bank1
 11732  02AF  0837               	movf	(_BMP_readTemperature$2648+2)^(0+128),w
 11733  02B0  0020               	movlb	0	; select bank0
 11734  02B1  00DB               	movwf	___ftmul@f2+2
 11735  02B2  318E  2670  3180   	fcall	___ftmul
 11736  02B5  0020               	movlb	0	; select bank0
 11737  02B6  0856               	movf	?___ftmul,w
 11738  02B7  0022               	movlb	2	; select bank2
 11739  02B8  00B1               	movwf	_var2^(0+256)
 11740  02B9  0020               	movlb	0	; select bank0
 11741  02BA  0857               	movf	?___ftmul+1,w
 11742  02BB  0022               	movlb	2	; select bank2
 11743  02BC  00B2               	movwf	(_var2+1)^(0+256)
 11744  02BD  0020               	movlb	0	; select bank0
 11745  02BE  0858               	movf	?___ftmul+2,w
 11746  02BF  0022               	movlb	2	; select bank2
 11747  02C0  00B3               	movwf	(_var2+2)^(0+256)
 11748                           
 11749                           ;bmp280.c: 107: t_fine = (long)(var1 + var2);
 11750  02C1  0834               	movf	_var1^(0+256),w
 11751  02C2  0020               	movlb	0	; select bank0
 11752  02C3  00CC               	movwf	___ftadd@f2
 11753  02C4  0022               	movlb	2	; select bank2
 11754  02C5  0835               	movf	(_var1+1)^(0+256),w
 11755  02C6  0020               	movlb	0	; select bank0
 11756  02C7  00CD               	movwf	___ftadd@f2+1
 11757  02C8  0022               	movlb	2	; select bank2
 11758  02C9  0836               	movf	(_var1+2)^(0+256),w
 11759  02CA  0020               	movlb	0	; select bank0
 11760  02CB  00CE               	movwf	___ftadd@f2+2
 11761  02CC  0022               	movlb	2	; select bank2
 11762  02CD  0831               	movf	_var2^(0+256),w
 11763  02CE  0020               	movlb	0	; select bank0
 11764  02CF  00C9               	movwf	___ftadd@f1
 11765  02D0  0022               	movlb	2	; select bank2
 11766  02D1  0832               	movf	(_var2+1)^(0+256),w
 11767  02D2  0020               	movlb	0	; select bank0
 11768  02D3  00CA               	movwf	___ftadd@f1+1
 11769  02D4  0022               	movlb	2	; select bank2
 11770  02D5  0833               	movf	(_var2+2)^(0+256),w
 11771  02D6  0020               	movlb	0	; select bank0
 11772  02D7  00CB               	movwf	___ftadd@f1+2
 11773  02D8  3186  268D  3180   	fcall	___ftadd
 11774  02DB  0020               	movlb	0	; select bank0
 11775  02DC  0849               	movf	?___ftadd,w
 11776  02DD  00E6               	movwf	___fttol@f1
 11777  02DE  084A               	movf	?___ftadd+1,w
 11778  02DF  00E7               	movwf	___fttol@f1+1
 11779  02E0  084B               	movf	?___ftadd+2,w
 11780  02E1  00E8               	movwf	___fttol@f1+2
 11781  02E2  318C  2485  3180   	fcall	___fttol
 11782  02E5  0020               	movlb	0	; select bank0
 11783  02E6  0869               	movf	?___fttol+3,w
 11784  02E7  00AC               	movwf	___altoft@c+3
 11785  02E8  0868               	movf	?___fttol+2,w
 11786  02E9  00AB               	movwf	___altoft@c+2
 11787  02EA  0867               	movf	?___fttol+1,w
 11788  02EB  00AA               	movwf	___altoft@c+1
 11789  02EC  0866               	movf	?___fttol,w
 11790  02ED  00A9               	movwf	___altoft@c
 11791  02EE  3188  2037  3180   	fcall	___altoft
 11792  02F1  0020               	movlb	0	; select bank0
 11793  02F2  0829               	movf	?___altoft,w
 11794  02F3  0022               	movlb	2	; select bank2
 11795  02F4  00AE               	movwf	_t_fine^(0+256)
 11796  02F5  0020               	movlb	0	; select bank0
 11797  02F6  082A               	movf	?___altoft+1,w
 11798  02F7  0022               	movlb	2	; select bank2
 11799  02F8  00AF               	movwf	(_t_fine+1)^(0+256)
 11800  02F9  0020               	movlb	0	; select bank0
 11801  02FA  082B               	movf	?___altoft+2,w
 11802  02FB  0022               	movlb	2	; select bank2
 11803  02FC  00B0               	movwf	(_t_fine+2)^(0+256)
 11804                           
 11805                           ;bmp280.c: 108: cTemp = (var1 + var2) / 5120.0;
 11806  02FD  3000               	movlw	0
 11807  02FE  0020               	movlb	0	; select bank0
 11808  02FF  00B1               	movwf	___ftdiv@f2
 11809  0300  30A0               	movlw	160
 11810  0301  00B2               	movwf	___ftdiv@f2+1
 11811  0302  3045               	movlw	69
 11812  0303  00B3               	movwf	___ftdiv@f2+2
 11813  0304  0022               	movlb	2	; select bank2
 11814  0305  0831               	movf	_var2^(0+256),w
 11815  0306  0020               	movlb	0	; select bank0
 11816  0307  00C9               	movwf	___ftadd@f1
 11817  0308  0022               	movlb	2	; select bank2
 11818  0309  0832               	movf	(_var2+1)^(0+256),w
 11819  030A  0020               	movlb	0	; select bank0
 11820  030B  00CA               	movwf	___ftadd@f1+1
 11821  030C  0022               	movlb	2	; select bank2
 11822  030D  0833               	movf	(_var2+2)^(0+256),w
 11823  030E  0020               	movlb	0	; select bank0
 11824  030F  00CB               	movwf	___ftadd@f1+2
 11825  0310  0022               	movlb	2	; select bank2
 11826  0311  0834               	movf	_var1^(0+256),w
 11827  0312  0020               	movlb	0	; select bank0
 11828  0313  00CC               	movwf	___ftadd@f2
 11829  0314  0022               	movlb	2	; select bank2
 11830  0315  0835               	movf	(_var1+1)^(0+256),w
 11831  0316  0020               	movlb	0	; select bank0
 11832  0317  00CD               	movwf	___ftadd@f2+1
 11833  0318  0022               	movlb	2	; select bank2
 11834  0319  0836               	movf	(_var1+2)^(0+256),w
 11835  031A  0020               	movlb	0	; select bank0
 11836  031B  00CE               	movwf	___ftadd@f2+2
 11837  031C  3186  268D  3180   	fcall	___ftadd
 11838  031F  0020               	movlb	0	; select bank0
 11839  0320  0849               	movf	?___ftadd,w
 11840  0321  00B4               	movwf	___ftdiv@f1
 11841  0322  084A               	movf	?___ftadd+1,w
 11842  0323  00B5               	movwf	___ftdiv@f1+1
 11843  0324  084B               	movf	?___ftadd+2,w
 11844  0325  00B6               	movwf	___ftdiv@f1+2
 11845  0326  318D  25C7  3180   	fcall	___ftdiv
 11846  0329  0020               	movlb	0	; select bank0
 11847  032A  0831               	movf	?___ftdiv,w
 11848  032B  0022               	movlb	2	; select bank2
 11849  032C  00AB               	movwf	_cTemp^(0+256)
 11850  032D  0020               	movlb	0	; select bank0
 11851  032E  0832               	movf	?___ftdiv+1,w
 11852  032F  0022               	movlb	2	; select bank2
 11853  0330  00AC               	movwf	(_cTemp+1)^(0+256)
 11854  0331  0020               	movlb	0	; select bank0
 11855  0332  0833               	movf	?___ftdiv+2,w
 11856  0333  0022               	movlb	2	; select bank2
 11857  0334  00AD               	movwf	(_cTemp+2)^(0+256)
 11858                           
 11859                           ;bmp280.c: 123: Diag_setTempSensorHealth(1);
 11860  0335  3001               	movlw	1
 11861  0336  3192  22EA         	fcall	_Diag_setTempSensorHealth
 11862                           
 11863                           ;bmp280.c: 124: return(cTemp);
 11864  0338  0022               	movlb	2	; select bank2
 11865  0339  082B               	movf	_cTemp^(0+256),w
 11866  033A  0021               	movlb	1	; select bank1
 11867  033B  00A6               	movwf	?_BMP_readTemperature^(0+128)
 11868  033C  0022               	movlb	2	; select bank2
 11869  033D  082C               	movf	(_cTemp+1)^(0+256),w
 11870  033E  0021               	movlb	1	; select bank1
 11871  033F  00A7               	movwf	(?_BMP_readTemperature+1)^(0+128)
 11872  0340  0022               	movlb	2	; select bank2
 11873  0341  082D               	movf	(_cTemp+2)^(0+256),w
 11874  0342  0021               	movlb	1	; select bank1
 11875  0343  00A8               	movwf	(?_BMP_readTemperature+2)^(0+128)
 11876  0344  0008               	return
 11877  0345                     __end_of_BMP_readTemperature:	
 11878                           
 11879                           	psect	text62
 11880  13E6                     __ptext62:	
 11881 ;; *************** function ___lwtoft *****************
 11882 ;; Defined at:
 11883 ;;		line 28 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\lwtoft.c"
 11884 ;; Parameters:    Size  Location     Type
 11885 ;;  c               2    9[BANK0 ] unsigned int 
 11886 ;; Auto vars:     Size  Location     Type
 11887 ;;		None
 11888 ;; Return value:  Size  Location     Type
 11889 ;;                  3    9[BANK0 ] float 
 11890 ;; Registers used:
 11891 ;;		wreg, status,2, status,0, pclath, cstack
 11892 ;; Tracked objects:
 11893 ;;		On entry : 0/0
 11894 ;;		On exit  : 0/0
 11895 ;;		Unchanged: 0/0
 11896 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11897 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11898 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11899 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11900 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11901 ;;Total ram usage:        4 bytes
 11902 ;; Hardware stack levels used:    1
 11903 ;; Hardware stack levels required when called:    5
 11904 ;; This function calls:
 11905 ;;		___ftpack
 11906 ;; This function is called by:
 11907 ;;		_Sensor_getSupplyVoltage
 11908 ;;		_BMP_readTemperature
 11909 ;; This function uses a non-reentrant model
 11910 ;;
 11911                           
 11912                           
 11913                           ;psect for function ___lwtoft
 11914  13E6                     ___lwtoft:	
 11915                           
 11916                           ;incstack = 0
 11917                           ; Regs used in ___lwtoft: [wreg+status,2+status,0+pclath+cstack]
 11918  13E6  0020               	movlb	0	; select bank0
 11919  13E7  0829               	movf	___lwtoft@c,w
 11920  13E8  00A1               	movwf	___ftpack@arg
 11921  13E9  082A               	movf	___lwtoft@c+1,w
 11922  13EA  00A2               	movwf	___ftpack@arg+1
 11923  13EB  01A3               	clrf	___ftpack@arg+2
 11924  13EC  308E               	movlw	142
 11925  13ED  00AC               	movwf	??___lwtoft
 11926  13EE  082C               	movf	??___lwtoft,w
 11927  13EF  00A4               	movwf	___ftpack@exp
 11928  13F0  01A5               	clrf	___ftpack@sign
 11929  13F1  318A  22B0         	fcall	___ftpack
 11930  13F3  0020               	movlb	0	; select bank0
 11931  13F4  0821               	movf	?___ftpack,w
 11932  13F5  00A9               	movwf	?___lwtoft
 11933  13F6  0822               	movf	?___ftpack+1,w
 11934  13F7  00AA               	movwf	?___lwtoft+1
 11935  13F8  0823               	movf	?___ftpack+2,w
 11936  13F9  00AB               	movwf	?___lwtoft+2
 11937  13FA  0008               	return
 11938  13FB                     __end_of___lwtoft:	
 11939                           
 11940                           	psect	text63
 11941  0C85                     __ptext63:	
 11942 ;; *************** function ___fttol *****************
 11943 ;; Defined at:
 11944 ;;		line 44 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\fttol.c"
 11945 ;; Parameters:    Size  Location     Type
 11946 ;;  f1              3   70[BANK0 ] float 
 11947 ;; Auto vars:     Size  Location     Type
 11948 ;;  lval            4    1[BANK1 ] unsigned long 
 11949 ;;  exp1            1    5[BANK1 ] unsigned char 
 11950 ;;  sign1           1    0[BANK1 ] unsigned char 
 11951 ;; Return value:  Size  Location     Type
 11952 ;;                  4   70[BANK0 ] long 
 11953 ;; Registers used:
 11954 ;;		wreg, status,2, status,0
 11955 ;; Tracked objects:
 11956 ;;		On entry : 0/0
 11957 ;;		On exit  : 0/0
 11958 ;;		Unchanged: 0/0
 11959 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11960 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11961 ;;      Locals:         0       0       6       0       0       0       0       0       0       0       0       0       
      +0       0
 11962 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11963 ;;      Totals:         0       8       6       0       0       0       0       0       0       0       0       0       
      +0       0
 11964 ;;Total ram usage:       14 bytes
 11965 ;; Hardware stack levels used:    1
 11966 ;; Hardware stack levels required when called:    4
 11967 ;; This function calls:
 11968 ;;		Nothing
 11969 ;; This function is called by:
 11970 ;;		_BMP_readTemperature
 11971 ;;		_Wireless_packageData
 11972 ;;		_HMC5883L_GetCompassDirection
 11973 ;; This function uses a non-reentrant model
 11974 ;;
 11975                           
 11976                           
 11977                           ;psect for function ___fttol
 11978  0C85                     ___fttol:	
 11979                           
 11980                           ;incstack = 0
 11981                           ; Regs used in ___fttol: [wreg+status,2+status,0]
 11982  0C85  0020               	movlb	0	; select bank0
 11983  0C86  0866               	movf	___fttol@f1,w
 11984  0C87  00EA               	movwf	??___fttol
 11985  0C88  0867               	movf	___fttol@f1+1,w
 11986  0C89  00EB               	movwf	??___fttol+1
 11987  0C8A  0868               	movf	___fttol@f1+2,w
 11988  0C8B  00EC               	movwf	??___fttol+2
 11989  0C8C  1003               	clrc
 11990  0C8D  0D6B               	rlf	??___fttol+1,w
 11991  0C8E  0D6C               	rlf	??___fttol+2,w
 11992  0C8F  00ED               	movwf	??___fttol+3
 11993  0C90  086D               	movf	??___fttol+3,w
 11994  0C91  0021               	movlb	1	; select bank1
 11995  0C92  00A5               	movwf	___fttol@exp1^(0+128)
 11996  0C93  0825               	movf	___fttol@exp1^(0+128),w
 11997  0C94  1D03               	btfss	3,2
 11998  0C95  2CA0               	goto	l6425
 11999  0C96  3000               	movlw	0
 12000  0C97  0020               	movlb	0	; select bank0
 12001  0C98  00E9               	movwf	?___fttol+3
 12002  0C99  3000               	movlw	0
 12003  0C9A  00E8               	movwf	?___fttol+2
 12004  0C9B  3000               	movlw	0
 12005  0C9C  00E7               	movwf	?___fttol+1
 12006  0C9D  3000               	movlw	0
 12007  0C9E  00E6               	movwf	?___fttol
 12008  0C9F  0008               	return
 12009  0CA0                     l6425:	
 12010  0CA0  0020               	movlb	0	; select bank0
 12011  0CA1  0866               	movf	___fttol@f1,w
 12012  0CA2  00EA               	movwf	??___fttol
 12013  0CA3  0867               	movf	___fttol@f1+1,w
 12014  0CA4  00EB               	movwf	??___fttol+1
 12015  0CA5  0868               	movf	___fttol@f1+2,w
 12016  0CA6  00EC               	movwf	??___fttol+2
 12017  0CA7  3017               	movlw	23
 12018  0CA8                     u6265:	
 12019  0CA8  36EC               	lsrf	??___fttol+2,f
 12020  0CA9  0CEB               	rrf	??___fttol+1,f
 12021  0CAA  0CEA               	rrf	??___fttol,f
 12022  0CAB  0B89               	decfsz	9,f
 12023  0CAC  2CA8               	goto	u6265
 12024  0CAD  086A               	movf	??___fttol,w
 12025  0CAE  00ED               	movwf	??___fttol+3
 12026  0CAF  086D               	movf	??___fttol+3,w
 12027  0CB0  0021               	movlb	1	; select bank1
 12028  0CB1  00A0               	movwf	___fttol@sign1^(0+128)
 12029  0CB2  0020               	movlb	0	; select bank0
 12030  0CB3  17E7               	bsf	___fttol@f1+1,7
 12031  0CB4  30FF               	movlw	255
 12032  0CB5  05E6               	andwf	___fttol@f1,f
 12033  0CB6  30FF               	movlw	255
 12034  0CB7  05E7               	andwf	___fttol@f1+1,f
 12035  0CB8  3000               	movlw	0
 12036  0CB9  05E8               	andwf	___fttol@f1+2,f
 12037  0CBA  0866               	movf	___fttol@f1,w
 12038  0CBB  0021               	movlb	1	; select bank1
 12039  0CBC  00A1               	movwf	___fttol@lval^(0+128)
 12040  0CBD  0020               	movlb	0	; select bank0
 12041  0CBE  0867               	movf	___fttol@f1+1,w
 12042  0CBF  0021               	movlb	1	; select bank1
 12043  0CC0  00A2               	movwf	(___fttol@lval^(0+128)+1)
 12044  0CC1  0020               	movlb	0	; select bank0
 12045  0CC2  0868               	movf	___fttol@f1+2,w
 12046  0CC3  0021               	movlb	1	; select bank1
 12047  0CC4  00A3               	movwf	(___fttol@lval^(0+128)+2)
 12048  0CC5  01A4               	clrf	(___fttol@lval^(0+128)+3)
 12049  0CC6  308E               	movlw	142
 12050  0CC7  02A5               	subwf	___fttol@exp1^(0+128),f
 12051  0CC8  1FA5               	btfss	___fttol@exp1^(0+128),7
 12052  0CC9  2CEA               	goto	l6445
 12053  0CCA  0825               	movf	___fttol@exp1^(0+128),w
 12054  0CCB  3A80               	xorlw	128
 12055  0CCC  3E8F               	addlw	143
 12056  0CCD  1803               	skipnc
 12057  0CCE  2CD9               	goto	l6443
 12058  0CCF  3000               	movlw	0
 12059  0CD0  0020               	movlb	0	; select bank0
 12060  0CD1  00E9               	movwf	?___fttol+3
 12061  0CD2  3000               	movlw	0
 12062  0CD3  00E8               	movwf	?___fttol+2
 12063  0CD4  3000               	movlw	0
 12064  0CD5  00E7               	movwf	?___fttol+1
 12065  0CD6  3000               	movlw	0
 12066  0CD7  00E6               	movwf	?___fttol
 12067  0CD8  0008               	return
 12068  0CD9                     l6443:	
 12069  0CD9  3001               	movlw	1
 12070  0CDA                     u6295:	
 12071  0CDA  0021               	movlb	1	; select bank1
 12072  0CDB  36A4               	lsrf	(___fttol@lval+3)^(0+128),f
 12073  0CDC  0CA3               	rrf	(___fttol@lval+2)^(0+128),f
 12074  0CDD  0CA2               	rrf	(___fttol@lval+1)^(0+128),f
 12075  0CDE  0CA1               	rrf	___fttol@lval^(0+128),f
 12076  0CDF  0B89               	decfsz	9,f
 12077  0CE0  2CDA               	goto	u6295
 12078  0CE1  3001               	movlw	1
 12079  0CE2  0020               	movlb	0	; select bank0
 12080  0CE3  00EA               	movwf	??___fttol
 12081  0CE4  086A               	movf	??___fttol,w
 12082  0CE5  0021               	movlb	1	; select bank1
 12083  0CE6  07A5               	addwf	___fttol@exp1^(0+128),f
 12084  0CE7  1903               	btfsc	3,2
 12085  0CE8  2D06               	goto	l6453
 12086  0CE9  2CD9               	goto	l6443
 12087  0CEA                     l6445:	
 12088  0CEA  3018               	movlw	24
 12089  0CEB  0225               	subwf	___fttol@exp1^(0+128),w
 12090  0CEC  1C03               	skipc
 12091  0CED  2D02               	goto	l1631
 12092  0CEE  3000               	movlw	0
 12093  0CEF  0020               	movlb	0	; select bank0
 12094  0CF0  00E9               	movwf	?___fttol+3
 12095  0CF1  3000               	movlw	0
 12096  0CF2  00E8               	movwf	?___fttol+2
 12097  0CF3  3000               	movlw	0
 12098  0CF4  00E7               	movwf	?___fttol+1
 12099  0CF5  3000               	movlw	0
 12100  0CF6  00E6               	movwf	?___fttol
 12101  0CF7  0008               	return
 12102  0CF8                     l6451:	
 12103  0CF8  3001               	movlw	1
 12104  0CF9                     u6325:	
 12105  0CF9  0021               	movlb	1	; select bank1
 12106  0CFA  35A1               	lslf	___fttol@lval^(0+128),f
 12107  0CFB  0DA2               	rlf	(___fttol@lval+1)^(0+128),f
 12108  0CFC  0DA3               	rlf	(___fttol@lval+2)^(0+128),f
 12109  0CFD  0DA4               	rlf	(___fttol@lval+3)^(0+128),f
 12110  0CFE  0B89               	decfsz	9,f
 12111  0CFF  2CF9               	goto	u6325
 12112  0D00  3001               	movlw	1
 12113  0D01  02A5               	subwf	___fttol@exp1^(0+128),f
 12114  0D02                     l1631:	
 12115  0D02  0021               	movlb	1	; select bank1
 12116  0D03  0825               	movf	___fttol@exp1^(0+128),w
 12117  0D04  1D03               	btfss	3,2
 12118  0D05  2CF8               	goto	l6451
 12119  0D06                     l6453:	
 12120  0D06  0820               	movf	___fttol@sign1^(0+128),w
 12121  0D07  1903               	btfsc	3,2
 12122  0D08  2D14               	goto	l6457
 12123  0D09  09A1               	comf	___fttol@lval^(0+128),f
 12124  0D0A  09A2               	comf	(___fttol@lval+1)^(0+128),f
 12125  0D0B  09A3               	comf	(___fttol@lval+2)^(0+128),f
 12126  0D0C  09A4               	comf	(___fttol@lval+3)^(0+128),f
 12127  0D0D  0AA1               	incf	___fttol@lval^(0+128),f
 12128  0D0E  1903               	skipnz
 12129  0D0F  0AA2               	incf	(___fttol@lval+1)^(0+128),f
 12130  0D10  1903               	skipnz
 12131  0D11  0AA3               	incf	(___fttol@lval+2)^(0+128),f
 12132  0D12  1903               	skipnz
 12133  0D13  0AA4               	incf	(___fttol@lval+3)^(0+128),f
 12134  0D14                     l6457:	
 12135  0D14  0824               	movf	(___fttol@lval+3)^(0+128),w
 12136  0D15  0020               	movlb	0	; select bank0
 12137  0D16  00E9               	movwf	?___fttol+3
 12138  0D17  0021               	movlb	1	; select bank1
 12139  0D18  0823               	movf	(___fttol@lval+2)^(0+128),w
 12140  0D19  0020               	movlb	0	; select bank0
 12141  0D1A  00E8               	movwf	?___fttol+2
 12142  0D1B  0021               	movlb	1	; select bank1
 12143  0D1C  0822               	movf	(___fttol@lval+1)^(0+128),w
 12144  0D1D  0020               	movlb	0	; select bank0
 12145  0D1E  00E7               	movwf	?___fttol+1
 12146  0D1F  0021               	movlb	1	; select bank1
 12147  0D20  0821               	movf	___fttol@lval^(0+128),w
 12148  0D21  0020               	movlb	0	; select bank0
 12149  0D22  00E6               	movwf	?___fttol
 12150  0D23  0008               	return
 12151  0D24                     __end_of___fttol:	
 12152                           
 12153                           	psect	text64
 12154  130B                     __ptext64:	
 12155 ;; *************** function ___ftneg *****************
 12156 ;; Defined at:
 12157 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\ftneg.c"
 12158 ;; Parameters:    Size  Location     Type
 12159 ;;  f1              3   33[BANK0 ] float 
 12160 ;; Auto vars:     Size  Location     Type
 12161 ;;		None
 12162 ;; Return value:  Size  Location     Type
 12163 ;;                  3   33[BANK0 ] float 
 12164 ;; Registers used:
 12165 ;;		wreg
 12166 ;; Tracked objects:
 12167 ;;		On entry : 0/0
 12168 ;;		On exit  : 0/0
 12169 ;;		Unchanged: 0/0
 12170 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12171 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12172 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12173 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12174 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12175 ;;Total ram usage:        3 bytes
 12176 ;; Hardware stack levels used:    1
 12177 ;; Hardware stack levels required when called:    4
 12178 ;; This function calls:
 12179 ;;		Nothing
 12180 ;; This function is called by:
 12181 ;;		_BMP_readTemperature
 12182 ;; This function uses a non-reentrant model
 12183 ;;
 12184                           
 12185                           
 12186                           ;psect for function ___ftneg
 12187  130B                     ___ftneg:	
 12188                           
 12189                           ;incstack = 0
 12190                           ; Regs used in ___ftneg: [wreg]
 12191  130B  0020               	movlb	0	; select bank0
 12192  130C  0843               	movf	___ftneg@f1+2,w
 12193  130D  0442               	iorwf	___ftneg@f1+1,w
 12194  130E  0441               	iorwf	___ftneg@f1,w
 12195  130F  1903               	skipnz
 12196  1310  0008               	return
 12197  1311  3080               	movlw	128
 12198  1312  06C3               	xorwf	___ftneg@f1+2,f
 12199  1313  0008               	return
 12200  1314                     __end_of___ftneg:	
 12201                           
 12202                           	psect	text65
 12203  0E70                     __ptext65:	
 12204 ;; *************** function ___ftmul *****************
 12205 ;; Defined at:
 12206 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\ftmul.c"
 12207 ;; Parameters:    Size  Location     Type
 12208 ;;  f1              3   54[BANK0 ] float 
 12209 ;;  f2              3   57[BANK0 ] float 
 12210 ;; Auto vars:     Size  Location     Type
 12211 ;;  f3_as_produc    3   65[BANK0 ] unsigned um
 12212 ;;  sign            1   69[BANK0 ] unsigned char 
 12213 ;;  cntr            1   68[BANK0 ] unsigned char 
 12214 ;;  exp             1   64[BANK0 ] unsigned char 
 12215 ;; Return value:  Size  Location     Type
 12216 ;;                  3   54[BANK0 ] float 
 12217 ;; Registers used:
 12218 ;;		wreg, status,2, status,0, pclath, cstack
 12219 ;; Tracked objects:
 12220 ;;		On entry : 0/0
 12221 ;;		On exit  : 0/0
 12222 ;;		Unchanged: 0/0
 12223 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12224 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12225 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12226 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12227 ;;      Totals:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12228 ;;Total ram usage:       16 bytes
 12229 ;; Hardware stack levels used:    1
 12230 ;; Hardware stack levels required when called:    5
 12231 ;; This function calls:
 12232 ;;		___ftpack
 12233 ;; This function is called by:
 12234 ;;		_BMP_readTemperature
 12235 ;;		_Wireless_packageData
 12236 ;;		_HMC5883L_GetCompassDirection
 12237 ;; This function uses a non-reentrant model
 12238 ;;
 12239                           
 12240                           
 12241                           ;psect for function ___ftmul
 12242  0E70                     ___ftmul:	
 12243                           
 12244                           ;incstack = 0
 12245                           ; Regs used in ___ftmul: [wreg+status,2+status,0+pclath+cstack]
 12246  0E70  0020               	movlb	0	; select bank0
 12247  0E71  0856               	movf	___ftmul@f1,w
 12248  0E72  00DC               	movwf	??___ftmul
 12249  0E73  0857               	movf	___ftmul@f1+1,w
 12250  0E74  00DD               	movwf	??___ftmul+1
 12251  0E75  0858               	movf	___ftmul@f1+2,w
 12252  0E76  00DE               	movwf	??___ftmul+2
 12253  0E77  1003               	clrc
 12254  0E78  0D5D               	rlf	??___ftmul+1,w
 12255  0E79  0D5E               	rlf	??___ftmul+2,w
 12256  0E7A  00DF               	movwf	??___ftmul+3
 12257  0E7B  085F               	movf	??___ftmul+3,w
 12258  0E7C  00E0               	movwf	___ftmul@exp
 12259  0E7D  0860               	movf	___ftmul@exp,w
 12260  0E7E  1D03               	btfss	3,2
 12261  0E7F  2E87               	goto	l6367
 12262  0E80  3000               	movlw	0
 12263  0E81  00D6               	movwf	?___ftmul
 12264  0E82  3000               	movlw	0
 12265  0E83  00D7               	movwf	?___ftmul+1
 12266  0E84  3000               	movlw	0
 12267  0E85  00D8               	movwf	?___ftmul+2
 12268  0E86  0008               	return
 12269  0E87                     l6367:	
 12270  0E87  0859               	movf	___ftmul@f2,w
 12271  0E88  00DC               	movwf	??___ftmul
 12272  0E89  085A               	movf	___ftmul@f2+1,w
 12273  0E8A  00DD               	movwf	??___ftmul+1
 12274  0E8B  085B               	movf	___ftmul@f2+2,w
 12275  0E8C  00DE               	movwf	??___ftmul+2
 12276  0E8D  1003               	clrc
 12277  0E8E  0D5D               	rlf	??___ftmul+1,w
 12278  0E8F  0D5E               	rlf	??___ftmul+2,w
 12279  0E90  00DF               	movwf	??___ftmul+3
 12280  0E91  085F               	movf	??___ftmul+3,w
 12281  0E92  00E5               	movwf	___ftmul@sign
 12282  0E93  0865               	movf	___ftmul@sign,w
 12283  0E94  1D03               	btfss	3,2
 12284  0E95  2E9D               	goto	l6373
 12285  0E96  3000               	movlw	0
 12286  0E97  00D6               	movwf	?___ftmul
 12287  0E98  3000               	movlw	0
 12288  0E99  00D7               	movwf	?___ftmul+1
 12289  0E9A  3000               	movlw	0
 12290  0E9B  00D8               	movwf	?___ftmul+2
 12291  0E9C  0008               	return
 12292  0E9D                     l6373:	
 12293  0E9D  0865               	movf	___ftmul@sign,w
 12294  0E9E  3E7B               	addlw	123
 12295  0E9F  00DC               	movwf	??___ftmul
 12296  0EA0  085C               	movf	??___ftmul,w
 12297  0EA1  07E0               	addwf	___ftmul@exp,f
 12298  0EA2  0856               	movf	___ftmul@f1,w
 12299  0EA3  00DC               	movwf	??___ftmul
 12300  0EA4  0857               	movf	___ftmul@f1+1,w
 12301  0EA5  00DD               	movwf	??___ftmul+1
 12302  0EA6  0858               	movf	___ftmul@f1+2,w
 12303  0EA7  00DE               	movwf	??___ftmul+2
 12304  0EA8  3010               	movlw	16
 12305  0EA9                     u6145:	
 12306  0EA9  36DE               	lsrf	??___ftmul+2,f
 12307  0EAA  0CDD               	rrf	??___ftmul+1,f
 12308  0EAB  0CDC               	rrf	??___ftmul,f
 12309  0EAC  0B89               	decfsz	9,f
 12310  0EAD  2EA9               	goto	u6145
 12311  0EAE  085C               	movf	??___ftmul,w
 12312  0EAF  00DF               	movwf	??___ftmul+3
 12313  0EB0  085F               	movf	??___ftmul+3,w
 12314  0EB1  00E5               	movwf	___ftmul@sign
 12315  0EB2  0859               	movf	___ftmul@f2,w
 12316  0EB3  00DC               	movwf	??___ftmul
 12317  0EB4  085A               	movf	___ftmul@f2+1,w
 12318  0EB5  00DD               	movwf	??___ftmul+1
 12319  0EB6  085B               	movf	___ftmul@f2+2,w
 12320  0EB7  00DE               	movwf	??___ftmul+2
 12321  0EB8  3010               	movlw	16
 12322  0EB9                     u6155:	
 12323  0EB9  36DE               	lsrf	??___ftmul+2,f
 12324  0EBA  0CDD               	rrf	??___ftmul+1,f
 12325  0EBB  0CDC               	rrf	??___ftmul,f
 12326  0EBC  0B89               	decfsz	9,f
 12327  0EBD  2EB9               	goto	u6155
 12328  0EBE  085C               	movf	??___ftmul,w
 12329  0EBF  00DF               	movwf	??___ftmul+3
 12330  0EC0  085F               	movf	??___ftmul+3,w
 12331  0EC1  06E5               	xorwf	___ftmul@sign,f
 12332  0EC2  3080               	movlw	128
 12333  0EC3  00DC               	movwf	??___ftmul
 12334  0EC4  085C               	movf	??___ftmul,w
 12335  0EC5  05E5               	andwf	___ftmul@sign,f
 12336  0EC6  17D7               	bsf	___ftmul@f1+1,7
 12337  0EC7  17DA               	bsf	___ftmul@f2+1,7
 12338  0EC8  30FF               	movlw	255
 12339  0EC9  05D9               	andwf	___ftmul@f2,f
 12340  0ECA  30FF               	movlw	255
 12341  0ECB  05DA               	andwf	___ftmul@f2+1,f
 12342  0ECC  3000               	movlw	0
 12343  0ECD  05DB               	andwf	___ftmul@f2+2,f
 12344  0ECE  3000               	movlw	0
 12345  0ECF  00E1               	movwf	___ftmul@f3_as_product
 12346  0ED0  3000               	movlw	0
 12347  0ED1  00E2               	movwf	___ftmul@f3_as_product+1
 12348  0ED2  3000               	movlw	0
 12349  0ED3  00E3               	movwf	___ftmul@f3_as_product+2
 12350  0ED4  3007               	movlw	7
 12351  0ED5  00DC               	movwf	??___ftmul
 12352  0ED6  085C               	movf	??___ftmul,w
 12353  0ED7  00E4               	movwf	___ftmul@cntr
 12354  0ED8                     l6385:	
 12355  0ED8  1C56               	btfss	___ftmul@f1,0
 12356  0ED9  2EE0               	goto	l6389
 12357  0EDA  0859               	movf	___ftmul@f2,w
 12358  0EDB  07E1               	addwf	___ftmul@f3_as_product,f
 12359  0EDC  085A               	movf	___ftmul@f2+1,w
 12360  0EDD  3DE2               	addwfc	___ftmul@f3_as_product+1,f
 12361  0EDE  085B               	movf	___ftmul@f2+2,w
 12362  0EDF  3DE3               	addwfc	___ftmul@f3_as_product+2,f
 12363  0EE0                     l6389:	
 12364  0EE0  3001               	movlw	1
 12365  0EE1                     u6175:	
 12366  0EE1  36D8               	lsrf	___ftmul@f1+2,f
 12367  0EE2  0CD7               	rrf	___ftmul@f1+1,f
 12368  0EE3  0CD6               	rrf	___ftmul@f1,f
 12369  0EE4  0B89               	decfsz	9,f
 12370  0EE5  2EE1               	goto	u6175
 12371  0EE6  3001               	movlw	1
 12372  0EE7                     u6185:	
 12373  0EE7  35D9               	lslf	___ftmul@f2,f
 12374  0EE8  0DDA               	rlf	___ftmul@f2+1,f
 12375  0EE9  0DDB               	rlf	___ftmul@f2+2,f
 12376  0EEA  0B89               	decfsz	9,f
 12377  0EEB  2EE7               	goto	u6185
 12378  0EEC  3001               	movlw	1
 12379  0EED  02E4               	subwf	___ftmul@cntr,f
 12380  0EEE  1D03               	btfss	3,2
 12381  0EEF  2ED8               	goto	l6385
 12382  0EF0  3009               	movlw	9
 12383  0EF1  00DC               	movwf	??___ftmul
 12384  0EF2  085C               	movf	??___ftmul,w
 12385  0EF3  00E4               	movwf	___ftmul@cntr
 12386  0EF4                     l6397:	
 12387  0EF4  1C56               	btfss	___ftmul@f1,0
 12388  0EF5  2EFC               	goto	l6401
 12389  0EF6  0859               	movf	___ftmul@f2,w
 12390  0EF7  07E1               	addwf	___ftmul@f3_as_product,f
 12391  0EF8  085A               	movf	___ftmul@f2+1,w
 12392  0EF9  3DE2               	addwfc	___ftmul@f3_as_product+1,f
 12393  0EFA  085B               	movf	___ftmul@f2+2,w
 12394  0EFB  3DE3               	addwfc	___ftmul@f3_as_product+2,f
 12395  0EFC                     l6401:	
 12396  0EFC  3001               	movlw	1
 12397  0EFD                     u6215:	
 12398  0EFD  36D8               	lsrf	___ftmul@f1+2,f
 12399  0EFE  0CD7               	rrf	___ftmul@f1+1,f
 12400  0EFF  0CD6               	rrf	___ftmul@f1,f
 12401  0F00  0B89               	decfsz	9,f
 12402  0F01  2EFD               	goto	u6215
 12403  0F02  3001               	movlw	1
 12404  0F03                     u6225:	
 12405  0F03  36E3               	lsrf	___ftmul@f3_as_product+2,f
 12406  0F04  0CE2               	rrf	___ftmul@f3_as_product+1,f
 12407  0F05  0CE1               	rrf	___ftmul@f3_as_product,f
 12408  0F06  0B89               	decfsz	9,f
 12409  0F07  2F03               	goto	u6225
 12410  0F08  3001               	movlw	1
 12411  0F09  02E4               	subwf	___ftmul@cntr,f
 12412  0F0A  1D03               	btfss	3,2
 12413  0F0B  2EF4               	goto	l6397
 12414  0F0C  0861               	movf	___ftmul@f3_as_product,w
 12415  0F0D  00A1               	movwf	___ftpack@arg
 12416  0F0E  0862               	movf	___ftmul@f3_as_product+1,w
 12417  0F0F  00A2               	movwf	___ftpack@arg+1
 12418  0F10  0863               	movf	___ftmul@f3_as_product+2,w
 12419  0F11  00A3               	movwf	___ftpack@arg+2
 12420  0F12  0860               	movf	___ftmul@exp,w
 12421  0F13  00DC               	movwf	??___ftmul
 12422  0F14  085C               	movf	??___ftmul,w
 12423  0F15  00A4               	movwf	___ftpack@exp
 12424  0F16  0865               	movf	___ftmul@sign,w
 12425  0F17  00DD               	movwf	??___ftmul+1
 12426  0F18  085D               	movf	??___ftmul+1,w
 12427  0F19  00A5               	movwf	___ftpack@sign
 12428  0F1A  318A  22B0         	fcall	___ftpack
 12429  0F1C  0020               	movlb	0	; select bank0
 12430  0F1D  0821               	movf	?___ftpack,w
 12431  0F1E  00D6               	movwf	?___ftmul
 12432  0F1F  0822               	movf	?___ftpack+1,w
 12433  0F20  00D7               	movwf	?___ftmul+1
 12434  0F21  0823               	movf	?___ftpack+2,w
 12435  0F22  00D8               	movwf	?___ftmul+2
 12436  0F23  0008               	return
 12437  0F24                     __end_of___ftmul:	
 12438                           
 12439                           	psect	text66
 12440  0DC7                     __ptext66:	
 12441 ;; *************** function ___ftdiv *****************
 12442 ;; Defined at:
 12443 ;;		line 56 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\ftdiv.c"
 12444 ;; Parameters:    Size  Location     Type
 12445 ;;  f2              3   17[BANK0 ] float 
 12446 ;;  f1              3   20[BANK0 ] float 
 12447 ;; Auto vars:     Size  Location     Type
 12448 ;;  f3              3   28[BANK0 ] float 
 12449 ;;  sign            1   32[BANK0 ] unsigned char 
 12450 ;;  exp             1   31[BANK0 ] unsigned char 
 12451 ;;  cntr            1   27[BANK0 ] unsigned char 
 12452 ;; Return value:  Size  Location     Type
 12453 ;;                  3   17[BANK0 ] float 
 12454 ;; Registers used:
 12455 ;;		wreg, status,2, status,0, pclath, cstack
 12456 ;; Tracked objects:
 12457 ;;		On entry : 0/0
 12458 ;;		On exit  : 0/0
 12459 ;;		Unchanged: 0/0
 12460 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12461 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12462 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12463 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12464 ;;      Totals:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12465 ;;Total ram usage:       16 bytes
 12466 ;; Hardware stack levels used:    1
 12467 ;; Hardware stack levels required when called:    5
 12468 ;; This function calls:
 12469 ;;		___ftpack
 12470 ;; This function is called by:
 12471 ;;		_Sensor_getSupplyVoltage
 12472 ;;		_BMP_readTemperature
 12473 ;;		_HMC5883L_GetCompassDirection
 12474 ;; This function uses a non-reentrant model
 12475 ;;
 12476                           
 12477                           
 12478                           ;psect for function ___ftdiv
 12479  0DC7                     ___ftdiv:	
 12480                           
 12481                           ;incstack = 0
 12482                           ; Regs used in ___ftdiv: [wreg+status,2+status,0+pclath+cstack]
 12483  0DC7  0020               	movlb	0	; select bank0
 12484  0DC8  0834               	movf	___ftdiv@f1,w
 12485  0DC9  00B7               	movwf	??___ftdiv
 12486  0DCA  0835               	movf	___ftdiv@f1+1,w
 12487  0DCB  00B8               	movwf	??___ftdiv+1
 12488  0DCC  0836               	movf	___ftdiv@f1+2,w
 12489  0DCD  00B9               	movwf	??___ftdiv+2
 12490  0DCE  1003               	clrc
 12491  0DCF  0D38               	rlf	??___ftdiv+1,w
 12492  0DD0  0D39               	rlf	??___ftdiv+2,w
 12493  0DD1  00BA               	movwf	??___ftdiv+3
 12494  0DD2  083A               	movf	??___ftdiv+3,w
 12495  0DD3  00BF               	movwf	___ftdiv@exp
 12496  0DD4  083F               	movf	___ftdiv@exp,w
 12497  0DD5  1D03               	btfss	3,2
 12498  0DD6  2DDE               	goto	l5903
 12499  0DD7  3000               	movlw	0
 12500  0DD8  00B1               	movwf	?___ftdiv
 12501  0DD9  3000               	movlw	0
 12502  0DDA  00B2               	movwf	?___ftdiv+1
 12503  0DDB  3000               	movlw	0
 12504  0DDC  00B3               	movwf	?___ftdiv+2
 12505  0DDD  0008               	return
 12506  0DDE                     l5903:	
 12507  0DDE  0831               	movf	___ftdiv@f2,w
 12508  0DDF  00B7               	movwf	??___ftdiv
 12509  0DE0  0832               	movf	___ftdiv@f2+1,w
 12510  0DE1  00B8               	movwf	??___ftdiv+1
 12511  0DE2  0833               	movf	___ftdiv@f2+2,w
 12512  0DE3  00B9               	movwf	??___ftdiv+2
 12513  0DE4  1003               	clrc
 12514  0DE5  0D38               	rlf	??___ftdiv+1,w
 12515  0DE6  0D39               	rlf	??___ftdiv+2,w
 12516  0DE7  00BA               	movwf	??___ftdiv+3
 12517  0DE8  083A               	movf	??___ftdiv+3,w
 12518  0DE9  00C0               	movwf	___ftdiv@sign
 12519  0DEA  0840               	movf	___ftdiv@sign,w
 12520  0DEB  1D03               	btfss	3,2
 12521  0DEC  2DF4               	goto	l5909
 12522  0DED  3000               	movlw	0
 12523  0DEE  00B1               	movwf	?___ftdiv
 12524  0DEF  3000               	movlw	0
 12525  0DF0  00B2               	movwf	?___ftdiv+1
 12526  0DF1  3000               	movlw	0
 12527  0DF2  00B3               	movwf	?___ftdiv+2
 12528  0DF3  0008               	return
 12529  0DF4                     l5909:	
 12530  0DF4  3000               	movlw	0
 12531  0DF5  00BC               	movwf	___ftdiv@f3
 12532  0DF6  3000               	movlw	0
 12533  0DF7  00BD               	movwf	___ftdiv@f3+1
 12534  0DF8  3000               	movlw	0
 12535  0DF9  00BE               	movwf	___ftdiv@f3+2
 12536  0DFA  3089               	movlw	137
 12537  0DFB  0740               	addwf	___ftdiv@sign,w
 12538  0DFC  00B7               	movwf	??___ftdiv
 12539  0DFD  0837               	movf	??___ftdiv,w
 12540  0DFE  02BF               	subwf	___ftdiv@exp,f
 12541  0DFF  0834               	movf	___ftdiv@f1,w
 12542  0E00  00B7               	movwf	??___ftdiv
 12543  0E01  0835               	movf	___ftdiv@f1+1,w
 12544  0E02  00B8               	movwf	??___ftdiv+1
 12545  0E03  0836               	movf	___ftdiv@f1+2,w
 12546  0E04  00B9               	movwf	??___ftdiv+2
 12547  0E05  3010               	movlw	16
 12548  0E06                     u5385:	
 12549  0E06  36B9               	lsrf	??___ftdiv+2,f
 12550  0E07  0CB8               	rrf	??___ftdiv+1,f
 12551  0E08  0CB7               	rrf	??___ftdiv,f
 12552  0E09  0B89               	decfsz	9,f
 12553  0E0A  2E06               	goto	u5385
 12554  0E0B  0837               	movf	??___ftdiv,w
 12555  0E0C  00BA               	movwf	??___ftdiv+3
 12556  0E0D  083A               	movf	??___ftdiv+3,w
 12557  0E0E  00C0               	movwf	___ftdiv@sign
 12558  0E0F  0831               	movf	___ftdiv@f2,w
 12559  0E10  00B7               	movwf	??___ftdiv
 12560  0E11  0832               	movf	___ftdiv@f2+1,w
 12561  0E12  00B8               	movwf	??___ftdiv+1
 12562  0E13  0833               	movf	___ftdiv@f2+2,w
 12563  0E14  00B9               	movwf	??___ftdiv+2
 12564  0E15  3010               	movlw	16
 12565  0E16                     u5395:	
 12566  0E16  36B9               	lsrf	??___ftdiv+2,f
 12567  0E17  0CB8               	rrf	??___ftdiv+1,f
 12568  0E18  0CB7               	rrf	??___ftdiv,f
 12569  0E19  0B89               	decfsz	9,f
 12570  0E1A  2E16               	goto	u5395
 12571  0E1B  0837               	movf	??___ftdiv,w
 12572  0E1C  00BA               	movwf	??___ftdiv+3
 12573  0E1D  083A               	movf	??___ftdiv+3,w
 12574  0E1E  06C0               	xorwf	___ftdiv@sign,f
 12575  0E1F  3080               	movlw	128
 12576  0E20  00B7               	movwf	??___ftdiv
 12577  0E21  0837               	movf	??___ftdiv,w
 12578  0E22  05C0               	andwf	___ftdiv@sign,f
 12579  0E23  17B5               	bsf	___ftdiv@f1+1,7
 12580  0E24  30FF               	movlw	255
 12581  0E25  05B4               	andwf	___ftdiv@f1,f
 12582  0E26  30FF               	movlw	255
 12583  0E27  05B5               	andwf	___ftdiv@f1+1,f
 12584  0E28  3000               	movlw	0
 12585  0E29  05B6               	andwf	___ftdiv@f1+2,f
 12586  0E2A  17B2               	bsf	___ftdiv@f2+1,7
 12587  0E2B  30FF               	movlw	255
 12588  0E2C  05B1               	andwf	___ftdiv@f2,f
 12589  0E2D  30FF               	movlw	255
 12590  0E2E  05B2               	andwf	___ftdiv@f2+1,f
 12591  0E2F  3000               	movlw	0
 12592  0E30  05B3               	andwf	___ftdiv@f2+2,f
 12593  0E31  3018               	movlw	24
 12594  0E32  00B7               	movwf	??___ftdiv
 12595  0E33  0837               	movf	??___ftdiv,w
 12596  0E34  00BB               	movwf	___ftdiv@cntr
 12597  0E35                     l5923:	
 12598  0E35  3001               	movlw	1
 12599  0E36                     u5405:	
 12600  0E36  35BC               	lslf	___ftdiv@f3,f
 12601  0E37  0DBD               	rlf	___ftdiv@f3+1,f
 12602  0E38  0DBE               	rlf	___ftdiv@f3+2,f
 12603  0E39  0B89               	decfsz	9,f
 12604  0E3A  2E36               	goto	u5405
 12605  0E3B  0833               	movf	___ftdiv@f2+2,w
 12606  0E3C  0236               	subwf	___ftdiv@f1+2,w
 12607  0E3D  1D03               	skipz
 12608  0E3E  2E45               	goto	u5415
 12609  0E3F  0832               	movf	___ftdiv@f2+1,w
 12610  0E40  0235               	subwf	___ftdiv@f1+1,w
 12611  0E41  1D03               	skipz
 12612  0E42  2E45               	goto	u5415
 12613  0E43  0831               	movf	___ftdiv@f2,w
 12614  0E44  0234               	subwf	___ftdiv@f1,w
 12615  0E45                     u5415:	
 12616  0E45  1C03               	skipc
 12617  0E46  2E4E               	goto	l5931
 12618  0E47  0831               	movf	___ftdiv@f2,w
 12619  0E48  02B4               	subwf	___ftdiv@f1,f
 12620  0E49  0832               	movf	___ftdiv@f2+1,w
 12621  0E4A  3BB5               	subwfb	___ftdiv@f1+1,f
 12622  0E4B  0833               	movf	___ftdiv@f2+2,w
 12623  0E4C  3BB6               	subwfb	___ftdiv@f1+2,f
 12624  0E4D  143C               	bsf	___ftdiv@f3,0
 12625  0E4E                     l5931:	
 12626  0E4E  3001               	movlw	1
 12627  0E4F                     u5425:	
 12628  0E4F  35B4               	lslf	___ftdiv@f1,f
 12629  0E50  0DB5               	rlf	___ftdiv@f1+1,f
 12630  0E51  0DB6               	rlf	___ftdiv@f1+2,f
 12631  0E52  0B89               	decfsz	9,f
 12632  0E53  2E4F               	goto	u5425
 12633  0E54  3001               	movlw	1
 12634  0E55  02BB               	subwf	___ftdiv@cntr,f
 12635  0E56  1D03               	btfss	3,2
 12636  0E57  2E35               	goto	l5923
 12637  0E58  083C               	movf	___ftdiv@f3,w
 12638  0E59  00A1               	movwf	___ftpack@arg
 12639  0E5A  083D               	movf	___ftdiv@f3+1,w
 12640  0E5B  00A2               	movwf	___ftpack@arg+1
 12641  0E5C  083E               	movf	___ftdiv@f3+2,w
 12642  0E5D  00A3               	movwf	___ftpack@arg+2
 12643  0E5E  083F               	movf	___ftdiv@exp,w
 12644  0E5F  00B7               	movwf	??___ftdiv
 12645  0E60  0837               	movf	??___ftdiv,w
 12646  0E61  00A4               	movwf	___ftpack@exp
 12647  0E62  0840               	movf	___ftdiv@sign,w
 12648  0E63  00B8               	movwf	??___ftdiv+1
 12649  0E64  0838               	movf	??___ftdiv+1,w
 12650  0E65  00A5               	movwf	___ftpack@sign
 12651  0E66  318A  22B0         	fcall	___ftpack
 12652  0E68  0020               	movlb	0	; select bank0
 12653  0E69  0821               	movf	?___ftpack,w
 12654  0E6A  00B1               	movwf	?___ftdiv
 12655  0E6B  0822               	movf	?___ftpack+1,w
 12656  0E6C  00B2               	movwf	?___ftdiv+1
 12657  0E6D  0823               	movf	?___ftpack+2,w
 12658  0E6E  00B3               	movwf	?___ftdiv+2
 12659  0E6F  0008               	return
 12660  0E70                     __end_of___ftdiv:	
 12661                           
 12662                           	psect	text67
 12663  068D                     __ptext67:	
 12664 ;; *************** function ___ftadd *****************
 12665 ;; Defined at:
 12666 ;;		line 86 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\ftadd.c"
 12667 ;; Parameters:    Size  Location     Type
 12668 ;;  f1              3   41[BANK0 ] float 
 12669 ;;  f2              3   44[BANK0 ] float 
 12670 ;; Auto vars:     Size  Location     Type
 12671 ;;  exp1            1   53[BANK0 ] unsigned char 
 12672 ;;  exp2            1   52[BANK0 ] unsigned char 
 12673 ;;  sign            1   51[BANK0 ] unsigned char 
 12674 ;; Return value:  Size  Location     Type
 12675 ;;                  3   41[BANK0 ] float 
 12676 ;; Registers used:
 12677 ;;		wreg, status,2, status,0, pclath, cstack
 12678 ;; Tracked objects:
 12679 ;;		On entry : 0/0
 12680 ;;		On exit  : 0/0
 12681 ;;		Unchanged: 0/0
 12682 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12683 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12684 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12685 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12686 ;;      Totals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12687 ;;Total ram usage:       13 bytes
 12688 ;; Hardware stack levels used:    1
 12689 ;; Hardware stack levels required when called:    5
 12690 ;; This function calls:
 12691 ;;		___ftpack
 12692 ;; This function is called by:
 12693 ;;		_BMP_readTemperature
 12694 ;;		_Wireless_packageData
 12695 ;;		_HMC5883L_GetCompassDirection
 12696 ;; This function uses a non-reentrant model
 12697 ;;
 12698                           
 12699                           
 12700                           ;psect for function ___ftadd
 12701  068D                     ___ftadd:	
 12702                           
 12703                           ;incstack = 0
 12704                           ; Regs used in ___ftadd: [wreg+status,2+status,0+pclath+cstack]
 12705  068D  0020               	movlb	0	; select bank0
 12706  068E  0849               	movf	___ftadd@f1,w
 12707  068F  00CF               	movwf	??___ftadd
 12708  0690  084A               	movf	___ftadd@f1+1,w
 12709  0691  00D0               	movwf	??___ftadd+1
 12710  0692  084B               	movf	___ftadd@f1+2,w
 12711  0693  00D1               	movwf	??___ftadd+2
 12712  0694  1003               	clrc
 12713  0695  0D50               	rlf	??___ftadd+1,w
 12714  0696  0D51               	rlf	??___ftadd+2,w
 12715  0697  00D2               	movwf	??___ftadd+3
 12716  0698  0852               	movf	??___ftadd+3,w
 12717  0699  00D5               	movwf	___ftadd@exp1
 12718  069A  084C               	movf	___ftadd@f2,w
 12719  069B  00CF               	movwf	??___ftadd
 12720  069C  084D               	movf	___ftadd@f2+1,w
 12721  069D  00D0               	movwf	??___ftadd+1
 12722  069E  084E               	movf	___ftadd@f2+2,w
 12723  069F  00D1               	movwf	??___ftadd+2
 12724  06A0  1003               	clrc
 12725  06A1  0D50               	rlf	??___ftadd+1,w
 12726  06A2  0D51               	rlf	??___ftadd+2,w
 12727  06A3  00D2               	movwf	??___ftadd+3
 12728  06A4  0852               	movf	??___ftadd+3,w
 12729  06A5  00D4               	movwf	___ftadd@exp2
 12730  06A6  0855               	movf	___ftadd@exp1,w
 12731  06A7  1903               	btfsc	3,2
 12732  06A8  2EB5               	goto	l6297
 12733  06A9  0854               	movf	___ftadd@exp2,w
 12734  06AA  0255               	subwf	___ftadd@exp1,w
 12735  06AB  1803               	skipnc
 12736  06AC  2EBC               	goto	l6301
 12737  06AD  0355               	decf	___ftadd@exp1,w
 12738  06AE  3AFF               	xorlw	255
 12739  06AF  0754               	addwf	___ftadd@exp2,w
 12740  06B0  00CF               	movwf	??___ftadd
 12741  06B1  3019               	movlw	25
 12742  06B2  024F               	subwf	??___ftadd,w
 12743  06B3  1C03               	skipc
 12744  06B4  2EBC               	goto	l6301
 12745  06B5                     l6297:	
 12746  06B5  084C               	movf	___ftadd@f2,w
 12747  06B6  00C9               	movwf	?___ftadd
 12748  06B7  084D               	movf	___ftadd@f2+1,w
 12749  06B8  00CA               	movwf	?___ftadd+1
 12750  06B9  084E               	movf	___ftadd@f2+2,w
 12751  06BA  00CB               	movwf	?___ftadd+2
 12752  06BB  0008               	return
 12753  06BC                     l6301:	
 12754  06BC  0854               	movf	___ftadd@exp2,w
 12755  06BD  1903               	btfsc	3,2
 12756  06BE  0008               	return
 12757  06BF  0855               	movf	___ftadd@exp1,w
 12758  06C0  0254               	subwf	___ftadd@exp2,w
 12759  06C1  1803               	skipnc
 12760  06C2  2ECB               	goto	l6307
 12761  06C3  0354               	decf	___ftadd@exp2,w
 12762  06C4  3AFF               	xorlw	255
 12763  06C5  0755               	addwf	___ftadd@exp1,w
 12764  06C6  00CF               	movwf	??___ftadd
 12765  06C7  3019               	movlw	25
 12766  06C8  024F               	subwf	??___ftadd,w
 12767  06C9  1803               	btfsc	3,0
 12768  06CA  0008               	return
 12769  06CB                     l6307:	
 12770  06CB  3006               	movlw	6
 12771  06CC  00CF               	movwf	??___ftadd
 12772  06CD  084F               	movf	??___ftadd,w
 12773  06CE  00D3               	movwf	___ftadd@sign
 12774  06CF  1BCB               	btfsc	___ftadd@f1+2,7
 12775  06D0  17D3               	bsf	___ftadd@sign,7
 12776  06D1  1BCE               	btfsc	___ftadd@f2+2,7
 12777  06D2  1753               	bsf	___ftadd@sign,6
 12778  06D3  17CA               	bsf	___ftadd@f1+1,7
 12779  06D4  30FF               	movlw	255
 12780  06D5  05C9               	andwf	___ftadd@f1,f
 12781  06D6  30FF               	movlw	255
 12782  06D7  05CA               	andwf	___ftadd@f1+1,f
 12783  06D8  3000               	movlw	0
 12784  06D9  05CB               	andwf	___ftadd@f1+2,f
 12785  06DA  17CD               	bsf	___ftadd@f2+1,7
 12786  06DB  30FF               	movlw	255
 12787  06DC  05CC               	andwf	___ftadd@f2,f
 12788  06DD  30FF               	movlw	255
 12789  06DE  05CD               	andwf	___ftadd@f2+1,f
 12790  06DF  3000               	movlw	0
 12791  06E0  05CE               	andwf	___ftadd@f2+2,f
 12792  06E1  0854               	movf	___ftadd@exp2,w
 12793  06E2  0255               	subwf	___ftadd@exp1,w
 12794  06E3  1803               	skipnc
 12795  06E4  2F07               	goto	l6329
 12796  06E5                     l6319:	
 12797  06E5  3001               	movlw	1
 12798  06E6                     u5985:	
 12799  06E6  35CC               	lslf	___ftadd@f2,f
 12800  06E7  0DCD               	rlf	___ftadd@f2+1,f
 12801  06E8  0DCE               	rlf	___ftadd@f2+2,f
 12802  06E9  0B89               	decfsz	9,f
 12803  06EA  2EE6               	goto	u5985
 12804  06EB  3001               	movlw	1
 12805  06EC  02D4               	subwf	___ftadd@exp2,f
 12806  06ED  0854               	movf	___ftadd@exp2,w
 12807  06EE  0655               	xorwf	___ftadd@exp1,w
 12808  06EF  1903               	skipnz
 12809  06F0  2F02               	goto	l6327
 12810  06F1  3001               	movlw	1
 12811  06F2  02D3               	subwf	___ftadd@sign,f
 12812  06F3  0853               	movf	___ftadd@sign,w
 12813  06F4  3907               	andlw	7
 12814  06F5  1903               	btfsc	3,2
 12815  06F6  2F02               	goto	l6327
 12816  06F7  2EE5               	goto	l6319
 12817  06F8                     l6325:	
 12818  06F8  3001               	movlw	1
 12819  06F9                     u6015:	
 12820  06F9  36CB               	lsrf	___ftadd@f1+2,f
 12821  06FA  0CCA               	rrf	___ftadd@f1+1,f
 12822  06FB  0CC9               	rrf	___ftadd@f1,f
 12823  06FC  0B89               	decfsz	9,f
 12824  06FD  2EF9               	goto	u6015
 12825  06FE  3001               	movlw	1
 12826  06FF  00CF               	movwf	??___ftadd
 12827  0700  084F               	movf	??___ftadd,w
 12828  0701  07D5               	addwf	___ftadd@exp1,f
 12829  0702                     l6327:	
 12830  0702  0855               	movf	___ftadd@exp1,w
 12831  0703  0654               	xorwf	___ftadd@exp2,w
 12832  0704  1903               	btfsc	3,2
 12833  0705  2F2C               	goto	l1571
 12834  0706  2EF8               	goto	l6325
 12835  0707                     l6329:	
 12836  0707  0855               	movf	___ftadd@exp1,w
 12837  0708  0254               	subwf	___ftadd@exp2,w
 12838  0709  1803               	skipnc
 12839  070A  2F2C               	goto	l1571
 12840  070B                     l6331:	
 12841  070B  3001               	movlw	1
 12842  070C                     u6045:	
 12843  070C  35C9               	lslf	___ftadd@f1,f
 12844  070D  0DCA               	rlf	___ftadd@f1+1,f
 12845  070E  0DCB               	rlf	___ftadd@f1+2,f
 12846  070F  0B89               	decfsz	9,f
 12847  0710  2F0C               	goto	u6045
 12848  0711  3001               	movlw	1
 12849  0712  02D5               	subwf	___ftadd@exp1,f
 12850  0713  0854               	movf	___ftadd@exp2,w
 12851  0714  0655               	xorwf	___ftadd@exp1,w
 12852  0715  1903               	skipnz
 12853  0716  2F28               	goto	l6339
 12854  0717  3001               	movlw	1
 12855  0718  02D3               	subwf	___ftadd@sign,f
 12856  0719  0853               	movf	___ftadd@sign,w
 12857  071A  3907               	andlw	7
 12858  071B  1903               	btfsc	3,2
 12859  071C  2F28               	goto	l6339
 12860  071D  2F0B               	goto	l6331
 12861  071E                     l6337:	
 12862  071E  3001               	movlw	1
 12863  071F                     u6075:	
 12864  071F  36CE               	lsrf	___ftadd@f2+2,f
 12865  0720  0CCD               	rrf	___ftadd@f2+1,f
 12866  0721  0CCC               	rrf	___ftadd@f2,f
 12867  0722  0B89               	decfsz	9,f
 12868  0723  2F1F               	goto	u6075
 12869  0724  3001               	movlw	1
 12870  0725  00CF               	movwf	??___ftadd
 12871  0726  084F               	movf	??___ftadd,w
 12872  0727  07D4               	addwf	___ftadd@exp2,f
 12873  0728                     l6339:	
 12874  0728  0855               	movf	___ftadd@exp1,w
 12875  0729  0654               	xorwf	___ftadd@exp2,w
 12876  072A  1D03               	skipz
 12877  072B  2F1E               	goto	l6337
 12878  072C                     l1571:	
 12879  072C  1FD3               	btfss	___ftadd@sign,7
 12880  072D  2F3E               	goto	l6343
 12881  072E  30FF               	movlw	255
 12882  072F  06C9               	xorwf	___ftadd@f1,f
 12883  0730  30FF               	movlw	255
 12884  0731  06CA               	xorwf	___ftadd@f1+1,f
 12885  0732  30FF               	movlw	255
 12886  0733  06CB               	xorwf	___ftadd@f1+2,f
 12887  0734  3001               	movlw	1
 12888  0735  07C9               	addwf	___ftadd@f1,f
 12889  0736  3000               	movlw	0
 12890  0737  1803               	skipnc
 12891  0738  3001               	movlw	1
 12892  0739  07CA               	addwf	___ftadd@f1+1,f
 12893  073A  3000               	movlw	0
 12894  073B  1803               	skipnc
 12895  073C  3001               	movlw	1
 12896  073D  07CB               	addwf	___ftadd@f1+2,f
 12897  073E                     l6343:	
 12898  073E  1F53               	btfss	___ftadd@sign,6
 12899  073F  2F50               	goto	l6347
 12900  0740  30FF               	movlw	255
 12901  0741  06CC               	xorwf	___ftadd@f2,f
 12902  0742  30FF               	movlw	255
 12903  0743  06CD               	xorwf	___ftadd@f2+1,f
 12904  0744  30FF               	movlw	255
 12905  0745  06CE               	xorwf	___ftadd@f2+2,f
 12906  0746  3001               	movlw	1
 12907  0747  07CC               	addwf	___ftadd@f2,f
 12908  0748  3000               	movlw	0
 12909  0749  1803               	skipnc
 12910  074A  3001               	movlw	1
 12911  074B  07CD               	addwf	___ftadd@f2+1,f
 12912  074C  3000               	movlw	0
 12913  074D  1803               	skipnc
 12914  074E  3001               	movlw	1
 12915  074F  07CE               	addwf	___ftadd@f2+2,f
 12916  0750                     l6347:	
 12917  0750  01D3               	clrf	___ftadd@sign
 12918  0751  0849               	movf	___ftadd@f1,w
 12919  0752  07CC               	addwf	___ftadd@f2,f
 12920  0753  084A               	movf	___ftadd@f1+1,w
 12921  0754  3DCD               	addwfc	___ftadd@f2+1,f
 12922  0755  084B               	movf	___ftadd@f1+2,w
 12923  0756  3DCE               	addwfc	___ftadd@f2+2,f
 12924  0757  1FCE               	btfss	___ftadd@f2+2,7
 12925  0758  2F6B               	goto	l6357
 12926  0759  30FF               	movlw	255
 12927  075A  06CC               	xorwf	___ftadd@f2,f
 12928  075B  30FF               	movlw	255
 12929  075C  06CD               	xorwf	___ftadd@f2+1,f
 12930  075D  30FF               	movlw	255
 12931  075E  06CE               	xorwf	___ftadd@f2+2,f
 12932  075F  3001               	movlw	1
 12933  0760  07CC               	addwf	___ftadd@f2,f
 12934  0761  3000               	movlw	0
 12935  0762  1803               	skipnc
 12936  0763  3001               	movlw	1
 12937  0764  07CD               	addwf	___ftadd@f2+1,f
 12938  0765  3000               	movlw	0
 12939  0766  1803               	skipnc
 12940  0767  3001               	movlw	1
 12941  0768  07CE               	addwf	___ftadd@f2+2,f
 12942  0769  01D3               	clrf	___ftadd@sign
 12943  076A  0AD3               	incf	___ftadd@sign,f
 12944  076B                     l6357:	
 12945  076B  084C               	movf	___ftadd@f2,w
 12946  076C  00A1               	movwf	___ftpack@arg
 12947  076D  084D               	movf	___ftadd@f2+1,w
 12948  076E  00A2               	movwf	___ftpack@arg+1
 12949  076F  084E               	movf	___ftadd@f2+2,w
 12950  0770  00A3               	movwf	___ftpack@arg+2
 12951  0771  0855               	movf	___ftadd@exp1,w
 12952  0772  00CF               	movwf	??___ftadd
 12953  0773  084F               	movf	??___ftadd,w
 12954  0774  00A4               	movwf	___ftpack@exp
 12955  0775  0853               	movf	___ftadd@sign,w
 12956  0776  00D0               	movwf	??___ftadd+1
 12957  0777  0850               	movf	??___ftadd+1,w
 12958  0778  00A5               	movwf	___ftpack@sign
 12959  0779  318A  22B0         	fcall	___ftpack
 12960  077B  0020               	movlb	0	; select bank0
 12961  077C  0821               	movf	?___ftpack,w
 12962  077D  00C9               	movwf	?___ftadd
 12963  077E  0822               	movf	?___ftpack+1,w
 12964  077F  00CA               	movwf	?___ftadd+1
 12965  0780  0823               	movf	?___ftpack+2,w
 12966  0781  00CB               	movwf	?___ftadd+2
 12967  0782  0008               	return
 12968  0783                     __end_of___ftadd:	
 12969                           
 12970                           	psect	text68
 12971  162A                     __ptext68:	
 12972 ;; *************** function ___awtoft *****************
 12973 ;; Defined at:
 12974 ;;		line 32 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\awtoft.c"
 12975 ;; Parameters:    Size  Location     Type
 12976 ;;  c               2    9[BANK0 ] int 
 12977 ;; Auto vars:     Size  Location     Type
 12978 ;;  sign            1   14[BANK0 ] unsigned char 
 12979 ;; Return value:  Size  Location     Type
 12980 ;;                  3    9[BANK0 ] float 
 12981 ;; Registers used:
 12982 ;;		wreg, status,2, status,0, pclath, cstack
 12983 ;; Tracked objects:
 12984 ;;		On entry : 0/0
 12985 ;;		On exit  : 0/0
 12986 ;;		Unchanged: 0/0
 12987 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12988 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12989 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12990 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12991 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12992 ;;Total ram usage:        6 bytes
 12993 ;; Hardware stack levels used:    1
 12994 ;; Hardware stack levels required when called:    5
 12995 ;; This function calls:
 12996 ;;		___ftpack
 12997 ;; This function is called by:
 12998 ;;		_BMP_readTemperature
 12999 ;;		_HMC5883L_GetCompassDirection
 13000 ;; This function uses a non-reentrant model
 13001 ;;
 13002                           
 13003                           
 13004                           ;psect for function ___awtoft
 13005  162A                     ___awtoft:	
 13006                           
 13007                           ;incstack = 0
 13008                           ; Regs used in ___awtoft: [wreg+status,2+status,0+pclath+cstack]
 13009  162A  0020               	movlb	0	; select bank0
 13010  162B  01AE               	clrf	___awtoft@sign
 13011  162C  1FAA               	btfss	___awtoft@c+1,7
 13012  162D  2E35               	goto	l6287
 13013  162E  09A9               	comf	___awtoft@c,f
 13014  162F  09AA               	comf	___awtoft@c+1,f
 13015  1630  0AA9               	incf	___awtoft@c,f
 13016  1631  1903               	skipnz
 13017  1632  0AAA               	incf	___awtoft@c+1,f
 13018  1633  01AE               	clrf	___awtoft@sign
 13019  1634  0AAE               	incf	___awtoft@sign,f
 13020  1635                     l6287:	
 13021  1635  0829               	movf	___awtoft@c,w
 13022  1636  00A1               	movwf	___ftpack@arg
 13023  1637  082A               	movf	___awtoft@c+1,w
 13024  1638  00A2               	movwf	___ftpack@arg+1
 13025  1639  01A3               	clrf	___ftpack@arg+2
 13026  163A  308E               	movlw	142
 13027  163B  00AC               	movwf	??___awtoft
 13028  163C  082C               	movf	??___awtoft,w
 13029  163D  00A4               	movwf	___ftpack@exp
 13030  163E  082E               	movf	___awtoft@sign,w
 13031  163F  00AD               	movwf	??___awtoft+1
 13032  1640  082D               	movf	??___awtoft+1,w
 13033  1641  00A5               	movwf	___ftpack@sign
 13034  1642  318A  22B0         	fcall	___ftpack
 13035  1644  0020               	movlb	0	; select bank0
 13036  1645  0821               	movf	?___ftpack,w
 13037  1646  00A9               	movwf	?___awtoft
 13038  1647  0822               	movf	?___ftpack+1,w
 13039  1648  00AA               	movwf	?___awtoft+1
 13040  1649  0823               	movf	?___ftpack+2,w
 13041  164A  00AB               	movwf	?___awtoft+2
 13042  164B  0008               	return
 13043  164C                     __end_of___awtoft:	
 13044                           
 13045                           	psect	text69
 13046  0837                     __ptext69:	
 13047 ;; *************** function ___altoft *****************
 13048 ;; Defined at:
 13049 ;;		line 42 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\altoft.c"
 13050 ;; Parameters:    Size  Location     Type
 13051 ;;  c               4    9[BANK0 ] long 
 13052 ;; Auto vars:     Size  Location     Type
 13053 ;;  sign            1   16[BANK0 ] unsigned char 
 13054 ;;  exp             1   15[BANK0 ] unsigned char 
 13055 ;; Return value:  Size  Location     Type
 13056 ;;                  3    9[BANK0 ] float 
 13057 ;; Registers used:
 13058 ;;		wreg, status,2, status,0, pclath, cstack
 13059 ;; Tracked objects:
 13060 ;;		On entry : 0/0
 13061 ;;		On exit  : 0/0
 13062 ;;		Unchanged: 0/0
 13063 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13064 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13065 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13066 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13067 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13068 ;;Total ram usage:        8 bytes
 13069 ;; Hardware stack levels used:    1
 13070 ;; Hardware stack levels required when called:    5
 13071 ;; This function calls:
 13072 ;;		___ftpack
 13073 ;; This function is called by:
 13074 ;;		_BMP_readTemperature
 13075 ;; This function uses a non-reentrant model
 13076 ;;
 13077                           
 13078                           
 13079                           ;psect for function ___altoft
 13080  0837                     ___altoft:	
 13081                           
 13082                           ;incstack = 0
 13083                           ; Regs used in ___altoft: [wreg+status,2+status,0+pclath+cstack]
 13084  0837  0020               	movlb	0	; select bank0
 13085  0838  01B0               	clrf	___altoft@sign
 13086  0839  308E               	movlw	142
 13087  083A  00AD               	movwf	??___altoft
 13088  083B  082D               	movf	??___altoft,w
 13089  083C  00AF               	movwf	___altoft@exp
 13090  083D  1FAC               	btfss	___altoft@c+3,7
 13091  083E  284C               	goto	l6273
 13092  083F  09A9               	comf	___altoft@c,f
 13093  0840  09AA               	comf	___altoft@c+1,f
 13094  0841  09AB               	comf	___altoft@c+2,f
 13095  0842  09AC               	comf	___altoft@c+3,f
 13096  0843  0AA9               	incf	___altoft@c,f
 13097  0844  1903               	skipnz
 13098  0845  0AAA               	incf	___altoft@c+1,f
 13099  0846  1903               	skipnz
 13100  0847  0AAB               	incf	___altoft@c+2,f
 13101  0848  1903               	skipnz
 13102  0849  0AAC               	incf	___altoft@c+3,f
 13103  084A  01B0               	clrf	___altoft@sign
 13104  084B  0AB0               	incf	___altoft@sign,f
 13105  084C                     l6273:	
 13106  084C  30FF               	movlw	255
 13107  084D  052C               	andwf	___altoft@c+3,w
 13108  084E  1903               	btfsc	3,2
 13109  084F  285C               	goto	l6275
 13110  0850  3001               	movlw	1
 13111  0851                     u5865:	
 13112  0851  36AC               	lsrf	___altoft@c+3,f
 13113  0852  0CAB               	rrf	___altoft@c+2,f
 13114  0853  0CAA               	rrf	___altoft@c+1,f
 13115  0854  0CA9               	rrf	___altoft@c,f
 13116  0855  0B89               	decfsz	9,f
 13117  0856  2851               	goto	u5865
 13118  0857  3001               	movlw	1
 13119  0858  00AD               	movwf	??___altoft
 13120  0859  082D               	movf	??___altoft,w
 13121  085A  07AF               	addwf	___altoft@exp,f
 13122  085B  284C               	goto	l6273
 13123  085C                     l6275:	
 13124  085C  0829               	movf	___altoft@c,w
 13125  085D  00A1               	movwf	___ftpack@arg
 13126  085E  082A               	movf	___altoft@c+1,w
 13127  085F  00A2               	movwf	___ftpack@arg+1
 13128  0860  082B               	movf	___altoft@c+2,w
 13129  0861  00A3               	movwf	___ftpack@arg+2
 13130  0862  082F               	movf	___altoft@exp,w
 13131  0863  00AD               	movwf	??___altoft
 13132  0864  082D               	movf	??___altoft,w
 13133  0865  00A4               	movwf	___ftpack@exp
 13134  0866  0830               	movf	___altoft@sign,w
 13135  0867  00AE               	movwf	??___altoft+1
 13136  0868  082E               	movf	??___altoft+1,w
 13137  0869  00A5               	movwf	___ftpack@sign
 13138  086A  318A  22B0         	fcall	___ftpack
 13139  086C  0020               	movlb	0	; select bank0
 13140  086D  0821               	movf	?___ftpack,w
 13141  086E  00A9               	movwf	?___altoft
 13142  086F  0822               	movf	?___ftpack+1,w
 13143  0870  00AA               	movwf	?___altoft+1
 13144  0871  0823               	movf	?___ftpack+2,w
 13145  0872  00AB               	movwf	?___altoft+2
 13146  0873  0008               	return
 13147  0874                     __end_of___altoft:	
 13148                           
 13149                           	psect	text70
 13150  0AB0                     __ptext70:	
 13151 ;; *************** function ___ftpack *****************
 13152 ;; Defined at:
 13153 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\float.c"
 13154 ;; Parameters:    Size  Location     Type
 13155 ;;  arg             3    1[BANK0 ] unsigned um
 13156 ;;  exp             1    4[BANK0 ] unsigned char 
 13157 ;;  sign            1    5[BANK0 ] unsigned char 
 13158 ;; Auto vars:     Size  Location     Type
 13159 ;;		None
 13160 ;; Return value:  Size  Location     Type
 13161 ;;                  3    1[BANK0 ] float 
 13162 ;; Registers used:
 13163 ;;		wreg, status,2, status,0
 13164 ;; Tracked objects:
 13165 ;;		On entry : 0/0
 13166 ;;		On exit  : 0/0
 13167 ;;		Unchanged: 0/0
 13168 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13169 ;;      Params:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13170 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13171 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13172 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13173 ;;Total ram usage:        8 bytes
 13174 ;; Hardware stack levels used:    1
 13175 ;; Hardware stack levels required when called:    4
 13176 ;; This function calls:
 13177 ;;		Nothing
 13178 ;; This function is called by:
 13179 ;;		___altoft
 13180 ;;		___awtoft
 13181 ;;		___ftadd
 13182 ;;		___ftdiv
 13183 ;;		___ftmul
 13184 ;;		___lwtoft
 13185 ;; This function uses a non-reentrant model
 13186 ;;
 13187                           
 13188                           
 13189                           ;psect for function ___ftpack
 13190  0AB0                     ___ftpack:	
 13191                           
 13192                           ;incstack = 0
 13193                           ; Regs used in ___ftpack: [wreg+status,2+status,0]
 13194  0AB0  0020               	movlb	0	; select bank0
 13195  0AB1  0824               	movf	___ftpack@exp,w
 13196  0AB2  1903               	btfsc	3,2
 13197  0AB3  2AB9               	goto	l5733
 13198  0AB4  0823               	movf	___ftpack@arg+2,w
 13199  0AB5  0422               	iorwf	___ftpack@arg+1,w
 13200  0AB6  0421               	iorwf	___ftpack@arg,w
 13201  0AB7  1D03               	skipz
 13202  0AB8  2ACA               	goto	l5739
 13203  0AB9                     l5733:	
 13204  0AB9  3000               	movlw	0
 13205  0ABA  00A1               	movwf	?___ftpack
 13206  0ABB  3000               	movlw	0
 13207  0ABC  00A2               	movwf	?___ftpack+1
 13208  0ABD  3000               	movlw	0
 13209  0ABE  00A3               	movwf	?___ftpack+2
 13210  0ABF  0008               	return
 13211  0AC0                     l5737:	
 13212  0AC0  3001               	movlw	1
 13213  0AC1  00A6               	movwf	??___ftpack
 13214  0AC2  0826               	movf	??___ftpack,w
 13215  0AC3  07A4               	addwf	___ftpack@exp,f
 13216  0AC4  3001               	movlw	1
 13217  0AC5                     u5175:	
 13218  0AC5  36A3               	lsrf	___ftpack@arg+2,f
 13219  0AC6  0CA2               	rrf	___ftpack@arg+1,f
 13220  0AC7  0CA1               	rrf	___ftpack@arg,f
 13221  0AC8  0B89               	decfsz	9,f
 13222  0AC9  2AC5               	goto	u5175
 13223  0ACA                     l5739:	
 13224  0ACA  30FE               	movlw	254
 13225  0ACB  0523               	andwf	___ftpack@arg+2,w
 13226  0ACC  1903               	btfsc	3,2
 13227  0ACD  2AE3               	goto	l1540
 13228  0ACE  2AC0               	goto	l5737
 13229  0ACF                     l5741:	
 13230  0ACF  3001               	movlw	1
 13231  0AD0  00A6               	movwf	??___ftpack
 13232  0AD1  0826               	movf	??___ftpack,w
 13233  0AD2  07A4               	addwf	___ftpack@exp,f
 13234  0AD3  3001               	movlw	1
 13235  0AD4  07A1               	addwf	___ftpack@arg,f
 13236  0AD5  3000               	movlw	0
 13237  0AD6  1803               	skipnc
 13238  0AD7  3001               	movlw	1
 13239  0AD8  07A2               	addwf	___ftpack@arg+1,f
 13240  0AD9  3000               	movlw	0
 13241  0ADA  1803               	skipnc
 13242  0ADB  3001               	movlw	1
 13243  0ADC  07A3               	addwf	___ftpack@arg+2,f
 13244  0ADD  3001               	movlw	1
 13245  0ADE                     u5195:	
 13246  0ADE  36A3               	lsrf	___ftpack@arg+2,f
 13247  0ADF  0CA2               	rrf	___ftpack@arg+1,f
 13248  0AE0  0CA1               	rrf	___ftpack@arg,f
 13249  0AE1  0B89               	decfsz	9,f
 13250  0AE2  2ADE               	goto	u5195
 13251  0AE3                     l1540:	
 13252  0AE3  30FF               	movlw	255
 13253  0AE4  0523               	andwf	___ftpack@arg+2,w
 13254  0AE5  1903               	btfsc	3,2
 13255  0AE6  2AF0               	goto	l5749
 13256  0AE7  2ACF               	goto	l5741
 13257  0AE8                     l5747:	
 13258  0AE8  3001               	movlw	1
 13259  0AE9  02A4               	subwf	___ftpack@exp,f
 13260  0AEA  3001               	movlw	1
 13261  0AEB                     u5215:	
 13262  0AEB  35A1               	lslf	___ftpack@arg,f
 13263  0AEC  0DA2               	rlf	___ftpack@arg+1,f
 13264  0AED  0DA3               	rlf	___ftpack@arg+2,f
 13265  0AEE  0B89               	decfsz	9,f
 13266  0AEF  2AEB               	goto	u5215
 13267  0AF0                     l5749:	
 13268  0AF0  1BA2               	btfsc	___ftpack@arg+1,7
 13269  0AF1  2AF6               	goto	l1547
 13270  0AF2  3002               	movlw	2
 13271  0AF3  0224               	subwf	___ftpack@exp,w
 13272  0AF4  1803               	skipnc
 13273  0AF5  2AE8               	goto	l5747
 13274  0AF6                     l1547:	
 13275  0AF6  1824               	btfsc	___ftpack@exp,0
 13276  0AF7  2AFE               	goto	l1548
 13277  0AF8  30FF               	movlw	255
 13278  0AF9  05A1               	andwf	___ftpack@arg,f
 13279  0AFA  307F               	movlw	127
 13280  0AFB  05A2               	andwf	___ftpack@arg+1,f
 13281  0AFC  30FF               	movlw	255
 13282  0AFD  05A3               	andwf	___ftpack@arg+2,f
 13283  0AFE                     l1548:	
 13284  0AFE  1003               	clrc
 13285  0AFF  0CA4               	rrf	___ftpack@exp,f
 13286  0B00  0824               	movf	___ftpack@exp,w
 13287  0B01  00A6               	movwf	??___ftpack
 13288  0B02  01A7               	clrf	??___ftpack+1
 13289  0B03  01A8               	clrf	??___ftpack+2
 13290  0B04  3010               	movlw	16
 13291  0B05                     u5255:	
 13292  0B05  35A6               	lslf	??___ftpack,f
 13293  0B06  0DA7               	rlf	??___ftpack+1,f
 13294  0B07  0DA8               	rlf	??___ftpack+2,f
 13295  0B08  0B89               	decfsz	9,f
 13296  0B09  2B05               	goto	u5255
 13297  0B0A  0826               	movf	??___ftpack,w
 13298  0B0B  04A1               	iorwf	___ftpack@arg,f
 13299  0B0C  0827               	movf	??___ftpack+1,w
 13300  0B0D  04A2               	iorwf	___ftpack@arg+1,f
 13301  0B0E  0828               	movf	??___ftpack+2,w
 13302  0B0F  04A3               	iorwf	___ftpack@arg+2,f
 13303  0B10  0825               	movf	___ftpack@sign,w
 13304  0B11  1903               	btfsc	3,2
 13305  0B12  0008               	return
 13306  0B13  17A3               	bsf	___ftpack@arg+2,7
 13307  0B14  0008               	return
 13308  0B15                     __end_of___ftpack:	
 13309                           
 13310                           	psect	text71
 13311  0C03                     __ptext71:	
 13312 ;; *************** function ___aldiv *****************
 13313 ;; Defined at:
 13314 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\aldiv.c"
 13315 ;; Parameters:    Size  Location     Type
 13316 ;;  divisor         4    1[BANK0 ] long 
 13317 ;;  dividend        4    5[BANK0 ] long 
 13318 ;; Auto vars:     Size  Location     Type
 13319 ;;  quotient        4   12[BANK0 ] long 
 13320 ;;  sign            1   11[BANK0 ] unsigned char 
 13321 ;;  counter         1   10[BANK0 ] unsigned char 
 13322 ;; Return value:  Size  Location     Type
 13323 ;;                  4    1[BANK0 ] long 
 13324 ;; Registers used:
 13325 ;;		wreg, status,2, status,0
 13326 ;; Tracked objects:
 13327 ;;		On entry : 0/0
 13328 ;;		On exit  : 0/0
 13329 ;;		Unchanged: 0/0
 13330 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13331 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13332 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13333 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13334 ;;      Totals:         0      15       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13335 ;;Total ram usage:       15 bytes
 13336 ;; Hardware stack levels used:    1
 13337 ;; Hardware stack levels required when called:    4
 13338 ;; This function calls:
 13339 ;;		Nothing
 13340 ;; This function is called by:
 13341 ;;		_BMP_readTemperature
 13342 ;; This function uses a non-reentrant model
 13343 ;;
 13344                           
 13345                           
 13346                           ;psect for function ___aldiv
 13347  0C03                     ___aldiv:	
 13348                           
 13349                           ;incstack = 0
 13350                           ; Regs used in ___aldiv: [wreg+status,2+status,0]
 13351  0C03  0020               	movlb	0	; select bank0
 13352  0C04  01AB               	clrf	___aldiv@sign
 13353  0C05  1FA4               	btfss	___aldiv@divisor+3,7
 13354  0C06  2C14               	goto	l1406
 13355  0C07  09A1               	comf	___aldiv@divisor,f
 13356  0C08  09A2               	comf	___aldiv@divisor+1,f
 13357  0C09  09A3               	comf	___aldiv@divisor+2,f
 13358  0C0A  09A4               	comf	___aldiv@divisor+3,f
 13359  0C0B  0AA1               	incf	___aldiv@divisor,f
 13360  0C0C  1903               	skipnz
 13361  0C0D  0AA2               	incf	___aldiv@divisor+1,f
 13362  0C0E  1903               	skipnz
 13363  0C0F  0AA3               	incf	___aldiv@divisor+2,f
 13364  0C10  1903               	skipnz
 13365  0C11  0AA4               	incf	___aldiv@divisor+3,f
 13366  0C12  01AB               	clrf	___aldiv@sign
 13367  0C13  0AAB               	incf	___aldiv@sign,f
 13368  0C14                     l1406:	
 13369  0C14  1FA8               	btfss	___aldiv@dividend+3,7
 13370  0C15  2C25               	goto	l6233
 13371  0C16  09A5               	comf	___aldiv@dividend,f
 13372  0C17  09A6               	comf	___aldiv@dividend+1,f
 13373  0C18  09A7               	comf	___aldiv@dividend+2,f
 13374  0C19  09A8               	comf	___aldiv@dividend+3,f
 13375  0C1A  0AA5               	incf	___aldiv@dividend,f
 13376  0C1B  1903               	skipnz
 13377  0C1C  0AA6               	incf	___aldiv@dividend+1,f
 13378  0C1D  1903               	skipnz
 13379  0C1E  0AA7               	incf	___aldiv@dividend+2,f
 13380  0C1F  1903               	skipnz
 13381  0C20  0AA8               	incf	___aldiv@dividend+3,f
 13382  0C21  3001               	movlw	1
 13383  0C22  00A9               	movwf	??___aldiv
 13384  0C23  0829               	movf	??___aldiv,w
 13385  0C24  06AB               	xorwf	___aldiv@sign,f
 13386  0C25                     l6233:	
 13387  0C25  3000               	movlw	0
 13388  0C26  00AF               	movwf	___aldiv@quotient+3
 13389  0C27  3000               	movlw	0
 13390  0C28  00AE               	movwf	___aldiv@quotient+2
 13391  0C29  3000               	movlw	0
 13392  0C2A  00AD               	movwf	___aldiv@quotient+1
 13393  0C2B  3000               	movlw	0
 13394  0C2C  00AC               	movwf	___aldiv@quotient
 13395  0C2D  0824               	movf	___aldiv@divisor+3,w
 13396  0C2E  0423               	iorwf	___aldiv@divisor+2,w
 13397  0C2F  0422               	iorwf	___aldiv@divisor+1,w
 13398  0C30  0421               	iorwf	___aldiv@divisor,w
 13399  0C31  1903               	skipnz
 13400  0C32  2C6E               	goto	l6255
 13401  0C33  01AA               	clrf	___aldiv@counter
 13402  0C34  0AAA               	incf	___aldiv@counter,f
 13403  0C35                     l6241:	
 13404  0C35  1BA4               	btfsc	___aldiv@divisor+3,7
 13405  0C36  2C43               	goto	l6243
 13406  0C37  3001               	movlw	1
 13407  0C38                     u5785:	
 13408  0C38  35A1               	lslf	___aldiv@divisor,f
 13409  0C39  0DA2               	rlf	___aldiv@divisor+1,f
 13410  0C3A  0DA3               	rlf	___aldiv@divisor+2,f
 13411  0C3B  0DA4               	rlf	___aldiv@divisor+3,f
 13412  0C3C  0B89               	decfsz	9,f
 13413  0C3D  2C38               	goto	u5785
 13414  0C3E  3001               	movlw	1
 13415  0C3F  00A9               	movwf	??___aldiv
 13416  0C40  0829               	movf	??___aldiv,w
 13417  0C41  07AA               	addwf	___aldiv@counter,f
 13418  0C42  2C35               	goto	l6241
 13419  0C43                     l6243:	
 13420  0C43  3001               	movlw	1
 13421  0C44                     u5805:	
 13422  0C44  35AC               	lslf	___aldiv@quotient,f
 13423  0C45  0DAD               	rlf	___aldiv@quotient+1,f
 13424  0C46  0DAE               	rlf	___aldiv@quotient+2,f
 13425  0C47  0DAF               	rlf	___aldiv@quotient+3,f
 13426  0C48  0B89               	decfsz	9,f
 13427  0C49  2C44               	goto	u5805
 13428  0C4A  0824               	movf	___aldiv@divisor+3,w
 13429  0C4B  0228               	subwf	___aldiv@dividend+3,w
 13430  0C4C  1D03               	skipz
 13431  0C4D  2C58               	goto	u5815
 13432  0C4E  0823               	movf	___aldiv@divisor+2,w
 13433  0C4F  0227               	subwf	___aldiv@dividend+2,w
 13434  0C50  1D03               	skipz
 13435  0C51  2C58               	goto	u5815
 13436  0C52  0822               	movf	___aldiv@divisor+1,w
 13437  0C53  0226               	subwf	___aldiv@dividend+1,w
 13438  0C54  1D03               	skipz
 13439  0C55  2C58               	goto	u5815
 13440  0C56  0821               	movf	___aldiv@divisor,w
 13441  0C57  0225               	subwf	___aldiv@dividend,w
 13442  0C58                     u5815:	
 13443  0C58  1C03               	skipc
 13444  0C59  2C63               	goto	l6251
 13445  0C5A  0821               	movf	___aldiv@divisor,w
 13446  0C5B  02A5               	subwf	___aldiv@dividend,f
 13447  0C5C  0822               	movf	___aldiv@divisor+1,w
 13448  0C5D  3BA6               	subwfb	___aldiv@dividend+1,f
 13449  0C5E  0823               	movf	___aldiv@divisor+2,w
 13450  0C5F  3BA7               	subwfb	___aldiv@dividend+2,f
 13451  0C60  0824               	movf	___aldiv@divisor+3,w
 13452  0C61  3BA8               	subwfb	___aldiv@dividend+3,f
 13453  0C62  142C               	bsf	___aldiv@quotient,0
 13454  0C63                     l6251:	
 13455  0C63  3001               	movlw	1
 13456  0C64                     u5825:	
 13457  0C64  36A4               	lsrf	___aldiv@divisor+3,f
 13458  0C65  0CA3               	rrf	___aldiv@divisor+2,f
 13459  0C66  0CA2               	rrf	___aldiv@divisor+1,f
 13460  0C67  0CA1               	rrf	___aldiv@divisor,f
 13461  0C68  0B89               	decfsz	9,f
 13462  0C69  2C64               	goto	u5825
 13463  0C6A  3001               	movlw	1
 13464  0C6B  02AA               	subwf	___aldiv@counter,f
 13465  0C6C  1D03               	btfss	3,2
 13466  0C6D  2C43               	goto	l6243
 13467  0C6E                     l6255:	
 13468  0C6E  082B               	movf	___aldiv@sign,w
 13469  0C6F  1903               	btfsc	3,2
 13470  0C70  2C7C               	goto	l6259
 13471  0C71  09AC               	comf	___aldiv@quotient,f
 13472  0C72  09AD               	comf	___aldiv@quotient+1,f
 13473  0C73  09AE               	comf	___aldiv@quotient+2,f
 13474  0C74  09AF               	comf	___aldiv@quotient+3,f
 13475  0C75  0AAC               	incf	___aldiv@quotient,f
 13476  0C76  1903               	skipnz
 13477  0C77  0AAD               	incf	___aldiv@quotient+1,f
 13478  0C78  1903               	skipnz
 13479  0C79  0AAE               	incf	___aldiv@quotient+2,f
 13480  0C7A  1903               	skipnz
 13481  0C7B  0AAF               	incf	___aldiv@quotient+3,f
 13482  0C7C                     l6259:	
 13483  0C7C  082F               	movf	___aldiv@quotient+3,w
 13484  0C7D  00A4               	movwf	?___aldiv+3
 13485  0C7E  082E               	movf	___aldiv@quotient+2,w
 13486  0C7F  00A3               	movwf	?___aldiv+2
 13487  0C80  082D               	movf	___aldiv@quotient+1,w
 13488  0C81  00A2               	movwf	?___aldiv+1
 13489  0C82  082C               	movf	___aldiv@quotient,w
 13490  0C83  00A1               	movwf	?___aldiv
 13491  0C84  0008               	return
 13492  0C85                     __end_of___aldiv:	
 13493                           
 13494                           	psect	text72
 13495  08B9                     __ptext72:	
 13496 ;; *************** function _HMC5883L_ReadBits *****************
 13497 ;; Defined at:
 13498 ;;		line 418 in file "hmc5883l.c"
 13499 ;; Parameters:    Size  Location     Type
 13500 ;;  slaveAddr       1    wreg     unsigned char 
 13501 ;;  regAddr         1   35[BANK0 ] unsigned char 
 13502 ;;  bitStart        1   36[BANK0 ] unsigned char 
 13503 ;;  length          1   37[BANK0 ] unsigned char 
 13504 ;;  data            1   38[BANK0 ] PTR unsigned char 
 13505 ;;		 -> BMP_readTemperature@tmp(1), HMC5883L_GetHeading@tmp(1), HMC5883L_GetMode@tmp(1), HMC5883L_GetGain@tmp(1), 
 13506 ;;		 -> HMC5883L_GetMeasurementBias@tmp(1), HMC5883L_GetDataRate@tmp(1), HMC5883L_GetSampleAveraging@tmp(1), 
 13507 ;; Auto vars:     Size  Location     Type
 13508 ;;  slaveAddr       1   42[BANK0 ] unsigned char 
 13509 ;;  mask            1   43[BANK0 ] unsigned char 
 13510 ;;  tmp             1   44[BANK0 ] unsigned char 
 13511 ;; Return value:  Size  Location     Type
 13512 ;;                  1    wreg      unsigned char 
 13513 ;; Registers used:
 13514 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13515 ;; Tracked objects:
 13516 ;;		On entry : 0/0
 13517 ;;		On exit  : 0/0
 13518 ;;		Unchanged: 0/0
 13519 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13520 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13521 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13522 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13523 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13524 ;;Total ram usage:       10 bytes
 13525 ;; Hardware stack levels used:    1
 13526 ;; Hardware stack levels required when called:    8
 13527 ;; This function calls:
 13528 ;;		_HMC5883L_I2C_BufferRead
 13529 ;; This function is called by:
 13530 ;;		_BMP_readTemperature
 13531 ;;		_HMC5883L_GetSampleAveraging
 13532 ;;		_HMC5883L_GetDataRate
 13533 ;;		_HMC5883L_GetMeasurementBias
 13534 ;;		_HMC5883L_GetGain
 13535 ;;		_HMC5883L_GetMode
 13536 ;;		_HMC5883L_GetHeading
 13537 ;; This function uses a non-reentrant model
 13538 ;;
 13539                           
 13540                           
 13541                           ;psect for function _HMC5883L_ReadBits
 13542  08B9                     _HMC5883L_ReadBits:	
 13543                           
 13544                           ;incstack = 0
 13545                           ; Regs used in _HMC5883L_ReadBits: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 13546                           ;HMC5883L_ReadBits@slaveAddr stored from wreg
 13547  08B9  0020               	movlb	0	; select bank0
 13548  08BA  00CA               	movwf	HMC5883L_ReadBits@slaveAddr
 13549                           
 13550                           ;hmc5883l.c: 420: uint8_t tmp;
 13551                           ;hmc5883l.c: 422: if(HMC5883L_I2C_BufferRead(slaveAddr, &tmp, regAddr, 1))
 13552  08BB  304C               	movlw	low HMC5883L_ReadBits@tmp
 13553  08BC  00BC               	movwf	HMC5883L_I2C_BufferRead@pBuffer
 13554  08BD  3000               	movlw	high HMC5883L_ReadBits@tmp
 13555  08BE  00BD               	movwf	HMC5883L_I2C_BufferRead@pBuffer+1
 13556  08BF  0843               	movf	HMC5883L_ReadBits@regAddr,w
 13557  08C0  00C7               	movwf	??_HMC5883L_ReadBits
 13558  08C1  0847               	movf	??_HMC5883L_ReadBits,w
 13559  08C2  00BE               	movwf	HMC5883L_I2C_BufferRead@ReadAddr
 13560  08C3  3001               	movlw	1
 13561  08C4  00BF               	movwf	HMC5883L_I2C_BufferRead@NumByteToRead
 13562  08C5  3000               	movlw	0
 13563  08C6  00C0               	movwf	HMC5883L_I2C_BufferRead@NumByteToRead+1
 13564  08C7  084A               	movf	HMC5883L_ReadBits@slaveAddr,w
 13565  08C8  3193  23AF  3188   	fcall	_HMC5883L_I2C_BufferRead
 13566  08CB  3A00               	xorlw	0
 13567  08CC  1903               	skipnz
 13568  08CD  28FD               	goto	l6179
 13569                           
 13570                           ;hmc5883l.c: 423: {
 13571                           ;hmc5883l.c: 424: uint8_t mask = ((1 << length) - 1) << (bitStart - length + 1);
 13572  08CE  3001               	movlw	1
 13573  08CF  0020               	movlb	0	; select bank0
 13574  08D0  00C7               	movwf	??_HMC5883L_ReadBits
 13575  08D1  0A45               	incf	HMC5883L_ReadBits@length,w
 13576  08D2  28D4               	goto	u5664
 13577  08D3                     u5665:	
 13578  08D3  35C7               	lslf	??_HMC5883L_ReadBits,f
 13579  08D4                     u5664:	
 13580  08D4  0B89               	decfsz	9,f
 13581  08D5  28D3               	goto	u5665
 13582  08D6  0847               	movf	??_HMC5883L_ReadBits,w
 13583  08D7  3EFF               	addlw	255
 13584  08D8  00C8               	movwf	??_HMC5883L_ReadBits+1
 13585  08D9  0345               	decf	HMC5883L_ReadBits@length,w
 13586  08DA  3AFF               	xorlw	255
 13587  08DB  0744               	addwf	HMC5883L_ReadBits@bitStart,w
 13588  08DC  3E01               	addlw	1
 13589  08DD  0A89               	incf	9,f
 13590  08DE  28E0               	goto	u5674
 13591  08DF                     u5675:	
 13592  08DF  35C8               	lslf	??_HMC5883L_ReadBits+1,f
 13593  08E0                     u5674:	
 13594  08E0  0B89               	decfsz	9,f
 13595  08E1  28DF               	goto	u5675
 13596  08E2  0848               	movf	??_HMC5883L_ReadBits+1,w
 13597  08E3  00C9               	movwf	??_HMC5883L_ReadBits+2
 13598  08E4  0849               	movf	??_HMC5883L_ReadBits+2,w
 13599  08E5  00CB               	movwf	HMC5883L_ReadBits@mask
 13600                           
 13601                           ;hmc5883l.c: 425: tmp &= mask;
 13602  08E6  084B               	movf	HMC5883L_ReadBits@mask,w
 13603  08E7  00C7               	movwf	??_HMC5883L_ReadBits
 13604  08E8  0847               	movf	??_HMC5883L_ReadBits,w
 13605  08E9  05CC               	andwf	HMC5883L_ReadBits@tmp,f
 13606                           
 13607                           ;hmc5883l.c: 426: tmp >>= (bitStart - length + 1);
 13608  08EA  0345               	decf	HMC5883L_ReadBits@length,w
 13609  08EB  3AFF               	xorlw	255
 13610  08EC  0744               	addwf	HMC5883L_ReadBits@bitStart,w
 13611  08ED  3E01               	addlw	1
 13612  08EE  0A89               	incf	9,f
 13613  08EF  28F2               	goto	u5680
 13614  08F0                     u5685:	
 13615  08F0  1003               	clrc
 13616  08F1  0CCC               	rrf	HMC5883L_ReadBits@tmp,f
 13617  08F2                     u5680:	
 13618  08F2  3EFF               	addlw	-1
 13619  08F3  1D03               	skipz
 13620  08F4  28F0               	goto	u5685
 13621                           
 13622                           ;hmc5883l.c: 427: *data = tmp;
 13623  08F5  084C               	movf	HMC5883L_ReadBits@tmp,w
 13624  08F6  00C7               	movwf	??_HMC5883L_ReadBits
 13625  08F7  0846               	movf	HMC5883L_ReadBits@data,w
 13626  08F8  0086               	movwf	6
 13627  08F9  0187               	clrf	7
 13628  08FA  0847               	movf	??_HMC5883L_ReadBits,w
 13629  08FB  0081               	movwf	1
 13630                           
 13631                           ;hmc5883l.c: 428: }
 13632  08FC  0008               	return
 13633  08FD                     l6179:	
 13634                           
 13635                           ;hmc5883l.c: 429: else return 0;
 13636  08FD  3000               	movlw	0
 13637  08FE  0008               	return
 13638  08FF                     __end_of_HMC5883L_ReadBits:	
 13639                           
 13640                           	psect	text73
 13641  13AF                     __ptext73:	
 13642 ;; *************** function _HMC5883L_I2C_BufferRead *****************
 13643 ;; Defined at:
 13644 ;;		line 471 in file "hmc5883l.c"
 13645 ;; Parameters:    Size  Location     Type
 13646 ;;  slaveAddr       1    wreg     unsigned char 
 13647 ;;  pBuffer         2   28[BANK0 ] PTR unsigned char 
 13648 ;;		 -> HMC5883L_ReadBit@tmp(1), HMC5883L_ReadBits@tmp(1), HMC5883L_WriteBit@tmp(1), HMC5883L_WriteBits@tmp(1), 
 13649 ;;		 -> heading(8), HMC5883L_TestConnection@tmp(3), MPU6050_ReadBit@tmp(1), MPU6050_ReadBits@tmp(1), 
 13650 ;;		 -> MPU6050_WriteBit@tmp(1), MPU6050_WriteBits@tmp(1), MPU6050_GetRawAccel@tempBuffer(6), MPU6050_GetRawAccelGyro@tm
      +pBuffer(14), 
 13651 ;;  ReadAddr        1   30[BANK0 ] unsigned char 
 13652 ;;  NumByteToRea    2   31[BANK0 ] unsigned short 
 13653 ;; Auto vars:     Size  Location     Type
 13654 ;;  slaveAddr       1   34[BANK0 ] unsigned char 
 13655 ;; Return value:  Size  Location     Type
 13656 ;;                  1    wreg      unsigned char 
 13657 ;; Registers used:
 13658 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13659 ;; Tracked objects:
 13660 ;;		On entry : 0/0
 13661 ;;		On exit  : 0/0
 13662 ;;		Unchanged: 0/0
 13663 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13664 ;;      Params:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13665 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13666 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13667 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13668 ;;Total ram usage:        7 bytes
 13669 ;; Hardware stack levels used:    1
 13670 ;; Hardware stack levels required when called:    7
 13671 ;; This function calls:
 13672 ;;		_I2C_BufferRead
 13673 ;; This function is called by:
 13674 ;;		_HMC5883L_ReadBits
 13675 ;;		_MPU6050_I2C_BufferRead
 13676 ;;		_HMC5883L_TestConnection
 13677 ;;		_HMC5883L_GetHeading
 13678 ;;		_HMC5883L_WriteBits
 13679 ;;		_HMC5883L_WriteBit
 13680 ;;		_HMC5883L_ReadBit
 13681 ;; This function uses a non-reentrant model
 13682 ;;
 13683                           
 13684                           
 13685                           ;psect for function _HMC5883L_I2C_BufferRead
 13686  13AF                     _HMC5883L_I2C_BufferRead:	
 13687                           
 13688                           ;incstack = 0
 13689                           ; Regs used in _HMC5883L_I2C_BufferRead: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+csta
      +                          ck]
 13690                           ;HMC5883L_I2C_BufferRead@slaveAddr stored from wreg
 13691  13AF  0020               	movlb	0	; select bank0
 13692  13B0  00C2               	movwf	HMC5883L_I2C_BufferRead@slaveAddr
 13693                           
 13694                           ;hmc5883l.c: 473: return(I2C_BufferRead(slaveAddr,pBuffer,ReadAddr,NumByteToRead));
 13695  13B1  083D               	movf	HMC5883L_I2C_BufferRead@pBuffer+1,w
 13696  13B2  00B2               	movwf	I2C_BufferRead@pBuffer+1
 13697  13B3  083C               	movf	HMC5883L_I2C_BufferRead@pBuffer,w
 13698  13B4  00B1               	movwf	I2C_BufferRead@pBuffer
 13699  13B5  083E               	movf	HMC5883L_I2C_BufferRead@ReadAddr,w
 13700  13B6  00C1               	movwf	??_HMC5883L_I2C_BufferRead
 13701  13B7  0841               	movf	??_HMC5883L_I2C_BufferRead,w
 13702  13B8  00B3               	movwf	I2C_BufferRead@ReadAddr
 13703  13B9  0840               	movf	HMC5883L_I2C_BufferRead@NumByteToRead+1,w
 13704  13BA  00B5               	movwf	I2C_BufferRead@NumByteToRead+1
 13705  13BB  083F               	movf	HMC5883L_I2C_BufferRead@NumByteToRead,w
 13706  13BC  00B4               	movwf	I2C_BufferRead@NumByteToRead
 13707  13BD  0842               	movf	HMC5883L_I2C_BufferRead@slaveAddr,w
 13708  13BE  3189  21F4         	fcall	_I2C_BufferRead
 13709  13C0  0008               	return
 13710  13C1                     __end_of_HMC5883L_I2C_BufferRead:	
 13711                           
 13712                           	psect	text74
 13713  128B                     __ptext74:	
 13714 ;; *************** function _Diag_getTempSensorHealth *****************
 13715 ;; Defined at:
 13716 ;;		line 25 in file "diagnostics.c"
 13717 ;; Parameters:    Size  Location     Type
 13718 ;;		None
 13719 ;; Auto vars:     Size  Location     Type
 13720 ;;		None
 13721 ;; Return value:  Size  Location     Type
 13722 ;;                  1    wreg      unsigned char 
 13723 ;; Registers used:
 13724 ;;		wreg
 13725 ;; Tracked objects:
 13726 ;;		On entry : 0/0
 13727 ;;		On exit  : 0/0
 13728 ;;		Unchanged: 0/0
 13729 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13730 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13731 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13732 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13733 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13734 ;;Total ram usage:        0 bytes
 13735 ;; Hardware stack levels used:    1
 13736 ;; Hardware stack levels required when called:    4
 13737 ;; This function calls:
 13738 ;;		Nothing
 13739 ;; This function is called by:
 13740 ;;		_BMP_readTemperature
 13741 ;; This function uses a non-reentrant model
 13742 ;;
 13743                           
 13744                           
 13745                           ;psect for function _Diag_getTempSensorHealth
 13746  128B                     _Diag_getTempSensorHealth:	
 13747                           
 13748                           ;diagnostics.c: 27: return (sensorHealth.tempSensorHealth);
 13749                           
 13750                           ;incstack = 0
 13751                           ; Regs used in _Diag_getTempSensorHealth: [wreg]
 13752  128B  0021               	movlb	1	; select bank1
 13753  128C  0863               	movf	_sensorHealth^(0+128),w
 13754  128D  0008               	return
 13755  128E                     __end_of_Diag_getTempSensorHealth:	
 13756                           
 13757                           	psect	text75
 13758  0B15                     __ptext75:	
 13759 ;; *************** function _BMP_init *****************
 13760 ;; Defined at:
 13761 ;;		line 39 in file "bmp280.c"
 13762 ;; Parameters:    Size  Location     Type
 13763 ;;		None
 13764 ;; Auto vars:     Size  Location     Type
 13765 ;;  t               1   31[BANK0 ] unsigned char 
 13766 ;; Return value:  Size  Location     Type
 13767 ;;                  1    wreg      void 
 13768 ;; Registers used:
 13769 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13770 ;; Tracked objects:
 13771 ;;		On entry : 0/0
 13772 ;;		On exit  : 0/0
 13773 ;;		Unchanged: 0/0
 13774 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13775 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13776 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13777 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13778 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13779 ;;Total ram usage:        4 bytes
 13780 ;; Hardware stack levels used:    1
 13781 ;; Hardware stack levels required when called:    7
 13782 ;; This function calls:
 13783 ;;		_Diag_setTempSensorHealth
 13784 ;;		_I2C_BufferRead
 13785 ;;		_I2C_ByteWrite
 13786 ;; This function is called by:
 13787 ;;		_main
 13788 ;;		_BMP_readTemperature
 13789 ;; This function uses a non-reentrant model
 13790 ;;
 13791                           
 13792                           
 13793                           ;psect for function _BMP_init
 13794  0B15                     _BMP_init:	
 13795                           
 13796                           ;bmp280.c: 41: char t;
 13797                           ;bmp280.c: 42: t=0x40;
 13798                           
 13799                           ;incstack = 0
 13800                           ; Regs used in _BMP_init: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 13801  0B15  3040               	movlw	64
 13802  0B16  0020               	movlb	0	; select bank0
 13803  0B17  00BC               	movwf	??_BMP_init
 13804  0B18  083C               	movf	??_BMP_init,w
 13805  0B19  00BF               	movwf	BMP_init@t
 13806                           
 13807                           ;bmp280.c: 43: if(I2C_ByteWrite(0x76, &t, 0xF4)==0)
 13808  0B1A  303F               	movlw	(low (BMP_init@t| 0))& (0+255)
 13809  0B1B  00BC               	movwf	??_BMP_init
 13810  0B1C  083C               	movf	??_BMP_init,w
 13811  0B1D  00AF               	movwf	I2C_ByteWrite@pBuffer
 13812  0B1E  30F4               	movlw	244
 13813  0B1F  00BD               	movwf	??_BMP_init+1
 13814  0B20  083D               	movf	??_BMP_init+1,w
 13815  0B21  00B0               	movwf	I2C_ByteWrite@WriteAddr
 13816  0B22  3076               	movlw	118
 13817  0B23  3197  27C4  318B   	fcall	_I2C_ByteWrite
 13818  0B26  3A00               	xorlw	0
 13819  0B27  1D03               	skipz
 13820  0B28  2B2D               	goto	l6069
 13821                           
 13822                           ;bmp280.c: 44: {
 13823                           ;bmp280.c: 45: Diag_setTempSensorHealth(0);
 13824  0B29  3000               	movlw	0
 13825  0B2A  3192  22EA         	fcall	_Diag_setTempSensorHealth
 13826                           
 13827                           ;bmp280.c: 46: return;
 13828  0B2C  0008               	return
 13829  0B2D                     l6069:	
 13830                           
 13831                           ;bmp280.c: 47: }
 13832                           ;bmp280.c: 48: t=0xE0;
 13833  0B2D  30E0               	movlw	224
 13834  0B2E  0020               	movlb	0	; select bank0
 13835  0B2F  00BC               	movwf	??_BMP_init
 13836  0B30  083C               	movf	??_BMP_init,w
 13837  0B31  00BF               	movwf	BMP_init@t
 13838                           
 13839                           ;bmp280.c: 50: if(I2C_BufferRead(0x76, b1, 0x88, 24)==0)
 13840  0B32  30A8               	movlw	low _b1
 13841  0B33  00B1               	movwf	I2C_BufferRead@pBuffer
 13842  0B34  3001               	movlw	high _b1
 13843  0B35  00B2               	movwf	I2C_BufferRead@pBuffer+1
 13844  0B36  3088               	movlw	136
 13845  0B37  00BC               	movwf	??_BMP_init
 13846  0B38  083C               	movf	??_BMP_init,w
 13847  0B39  00B3               	movwf	I2C_BufferRead@ReadAddr
 13848  0B3A  3018               	movlw	24
 13849  0B3B  00B4               	movwf	I2C_BufferRead@NumByteToRead
 13850  0B3C  3000               	movlw	0
 13851  0B3D  00B5               	movwf	I2C_BufferRead@NumByteToRead+1
 13852  0B3E  3076               	movlw	118
 13853  0B3F  3189  21F4  318B   	fcall	_I2C_BufferRead
 13854  0B42  3A00               	xorlw	0
 13855  0B43  1D03               	skipz
 13856  0B44  2B49               	goto	l6077
 13857                           
 13858                           ;bmp280.c: 51: {
 13859                           ;bmp280.c: 52: Diag_setTempSensorHealth(0);
 13860  0B45  3000               	movlw	0
 13861  0B46  3192  22EA         	fcall	_Diag_setTempSensorHealth
 13862                           
 13863                           ;bmp280.c: 53: return;
 13864  0B48  0008               	return
 13865  0B49                     l6077:	
 13866                           
 13867                           ;bmp280.c: 54: }
 13868                           ;bmp280.c: 55: dig_T1 = ((u16)b1[0] & 0xFF) + (((u16)b1[1] & 0xFF) * 256);
 13869  0B49  0023               	movlb	3	; select bank3
 13870  0B4A  0829               	movf	(_b1^(0+384)+1),w
 13871  0B4B  0020               	movlb	0	; select bank0
 13872  0B4C  00BC               	movwf	??_BMP_init
 13873  0B4D  01BD               	clrf	??_BMP_init+1
 13874  0B4E  083C               	movf	??_BMP_init,w
 13875  0B4F  00BD               	movwf	??_BMP_init+1
 13876  0B50  01BC               	clrf	??_BMP_init
 13877  0B51  0023               	movlb	3	; select bank3
 13878  0B52  0828               	movf	_b1^(0+384),w
 13879  0B53  0020               	movlb	0	; select bank0
 13880  0B54  073C               	addwf	??_BMP_init,w
 13881  0B55  0021               	movlb	1	; select bank1
 13882  0B56  00D3               	movwf	_dig_T1^(0+128)
 13883  0B57  0020               	movlb	0	; select bank0
 13884  0B58  083D               	movf	??_BMP_init+1,w
 13885  0B59  1803               	skipnc
 13886  0B5A  0A3D               	incf	??_BMP_init+1,w
 13887  0B5B  0021               	movlb	1	; select bank1
 13888  0B5C  00D4               	movwf	(_dig_T1^(0+128)+1)
 13889                           
 13890                           ;bmp280.c: 56: dig_T2 = (int)b1[2] + ((int)b1[3] * 256);
 13891  0B5D  0023               	movlb	3	; select bank3
 13892  0B5E  082B               	movf	(_b1^(0+384)+3),w
 13893  0B5F  0020               	movlb	0	; select bank0
 13894  0B60  00BC               	movwf	??_BMP_init
 13895  0B61  01BD               	clrf	??_BMP_init+1
 13896  0B62  083C               	movf	??_BMP_init,w
 13897  0B63  00BD               	movwf	??_BMP_init+1
 13898  0B64  01BC               	clrf	??_BMP_init
 13899  0B65  0023               	movlb	3	; select bank3
 13900  0B66  082A               	movf	(_b1^(0+384)+2),w
 13901  0B67  0020               	movlb	0	; select bank0
 13902  0B68  073C               	addwf	??_BMP_init,w
 13903  0B69  0022               	movlb	2	; select bank2
 13904  0B6A  00D6               	movwf	_dig_T2^(0+256)
 13905  0B6B  0020               	movlb	0	; select bank0
 13906  0B6C  083D               	movf	??_BMP_init+1,w
 13907  0B6D  1803               	skipnc
 13908  0B6E  0A3D               	incf	??_BMP_init+1,w
 13909  0B6F  0022               	movlb	2	; select bank2
 13910  0B70  00D7               	movwf	(_dig_T2^(0+256)+1)
 13911                           
 13912                           ;bmp280.c: 57: dig_T3 = (int)b1[4] + ((int)b1[5] * 256);
 13913  0B71  0023               	movlb	3	; select bank3
 13914  0B72  082D               	movf	(_b1^(0+384)+5),w
 13915  0B73  0020               	movlb	0	; select bank0
 13916  0B74  00BC               	movwf	??_BMP_init
 13917  0B75  01BD               	clrf	??_BMP_init+1
 13918  0B76  083C               	movf	??_BMP_init,w
 13919  0B77  00BD               	movwf	??_BMP_init+1
 13920  0B78  01BC               	clrf	??_BMP_init
 13921  0B79  0023               	movlb	3	; select bank3
 13922  0B7A  082C               	movf	(_b1^(0+384)+4),w
 13923  0B7B  0020               	movlb	0	; select bank0
 13924  0B7C  073C               	addwf	??_BMP_init,w
 13925  0B7D  0022               	movlb	2	; select bank2
 13926  0B7E  00D4               	movwf	_dig_T3^(0+256)
 13927  0B7F  0020               	movlb	0	; select bank0
 13928  0B80  083D               	movf	??_BMP_init+1,w
 13929  0B81  1803               	skipnc
 13930  0B82  0A3D               	incf	??_BMP_init+1,w
 13931  0B83  0022               	movlb	2	; select bank2
 13932  0B84  00D5               	movwf	(_dig_T3^(0+256)+1)
 13933                           
 13934                           ;bmp280.c: 69: Diag_setTempSensorHealth(1);
 13935  0B85  3001               	movlw	1
 13936  0B86  3192  22EA         	fcall	_Diag_setTempSensorHealth
 13937  0B88  0008               	return
 13938  0B89                     __end_of_BMP_init:	
 13939                           
 13940                           	psect	text76
 13941  17C4                     __ptext76:	
 13942 ;; *************** function _I2C_ByteWrite *****************
 13943 ;; Defined at:
 13944 ;;		line 3 in file "i2c_wrapper.c"
 13945 ;; Parameters:    Size  Location     Type
 13946 ;;  slaveAddr       1    wreg     unsigned char 
 13947 ;;  pBuffer         1   15[BANK0 ] PTR unsigned char 
 13948 ;;		 -> BMP_readTemperature@tmp(1), BMP_init@t(1), HMC5883L_WriteBit@tmp(1), HMC5883L_WriteBits@tmp(1), 
 13949 ;;		 -> HMC5883L_SetMode@tmp(1), HMC5883L_SetGain@tmp(1), HMC5883L_Initialize@tmp(1), MPU6050_WriteBit@tmp(1), 
 13950 ;;		 -> MPU6050_WriteBits@tmp(1), 
 13951 ;;  WriteAddr       1   16[BANK0 ] unsigned char 
 13952 ;; Auto vars:     Size  Location     Type
 13953 ;;  slaveAddr       1   21[BANK0 ] unsigned char 
 13954 ;;  data            2   22[BANK0 ] unsigned char [2]
 13955 ;;  status          1   24[BANK0 ] enum E3025
 13956 ;; Return value:  Size  Location     Type
 13957 ;;                  1    wreg      unsigned char 
 13958 ;; Registers used:
 13959 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13960 ;; Tracked objects:
 13961 ;;		On entry : 0/0
 13962 ;;		On exit  : 0/0
 13963 ;;		Unchanged: 0/0
 13964 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13965 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13966 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13967 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13968 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13969 ;;Total ram usage:       10 bytes
 13970 ;; Hardware stack levels used:    1
 13971 ;; Hardware stack levels required when called:    6
 13972 ;; This function calls:
 13973 ;;		_I2C2_MasterWrite
 13974 ;;		_Timeout_hasExpired
 13975 ;;		_Timeout_setTimeout
 13976 ;; This function is called by:
 13977 ;;		_BMP_init
 13978 ;;		_BMP_readTemperature
 13979 ;;		_HMC5883L_I2C_ByteWrite
 13980 ;; This function uses a non-reentrant model
 13981 ;;
 13982                           
 13983                           
 13984                           ;psect for function _I2C_ByteWrite
 13985  17C4                     _I2C_ByteWrite:	
 13986                           
 13987                           ;incstack = 0
 13988                           ; Regs used in _I2C_ByteWrite: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 13989                           ;I2C_ByteWrite@slaveAddr stored from wreg
 13990  17C4  0020               	movlb	0	; select bank0
 13991  17C5  00B5               	movwf	I2C_ByteWrite@slaveAddr
 13992                           
 13993                           ;i2c_wrapper.c: 5: u8 data[2];
 13994                           ;i2c_wrapper.c: 6: I2C2_MESSAGE_STATUS status=I2C2_MESSAGE_COMPLETE;
 13995  17C6  01B8               	clrf	I2C_ByteWrite@status
 13996                           
 13997                           ;i2c_wrapper.c: 8: data[0]= WriteAddr;
 13998  17C7  0830               	movf	I2C_ByteWrite@WriteAddr,w
 13999  17C8  00B1               	movwf	??_I2C_ByteWrite
 14000  17C9  0831               	movf	??_I2C_ByteWrite,w
 14001  17CA  00B6               	movwf	I2C_ByteWrite@data
 14002                           
 14003                           ;i2c_wrapper.c: 9: data[1]= *pBuffer;
 14004  17CB  082F               	movf	I2C_ByteWrite@pBuffer,w
 14005  17CC  0086               	movwf	6
 14006  17CD  0187               	clrf	7
 14007  17CE  0801               	movf	1,w
 14008  17CF  00B1               	movwf	??_I2C_ByteWrite
 14009  17D0  0831               	movf	??_I2C_ByteWrite,w
 14010  17D1  00B7               	movwf	I2C_ByteWrite@data+1
 14011                           
 14012                           ;i2c_wrapper.c: 12: I2C2_MasterWrite(data,2,slaveAddr, &status);
 14013  17D2  3002               	movlw	2
 14014  17D3  00B1               	movwf	??_I2C_ByteWrite
 14015  17D4  0831               	movf	??_I2C_ByteWrite,w
 14016  17D5  00A8               	movwf	I2C2_MasterWrite@length
 14017  17D6  0835               	movf	I2C_ByteWrite@slaveAddr,w
 14018  17D7  00B2               	movwf	??_I2C_ByteWrite+1
 14019  17D8  01B3               	clrf	??_I2C_ByteWrite+2
 14020  17D9  0832               	movf	??_I2C_ByteWrite+1,w
 14021  17DA  00A9               	movwf	I2C2_MasterWrite@address
 14022  17DB  0833               	movf	??_I2C_ByteWrite+2,w
 14023  17DC  00AA               	movwf	I2C2_MasterWrite@address+1
 14024  17DD  3038               	movlw	(low (I2C_ByteWrite@status| 0))& (0+255)
 14025  17DE  00B4               	movwf	??_I2C_ByteWrite+3
 14026  17DF  0834               	movf	??_I2C_ByteWrite+3,w
 14027  17E0  00AB               	movwf	I2C2_MasterWrite@pflag
 14028  17E1  3036               	movlw	(low (I2C_ByteWrite@data| 0))& (0+255)
 14029  17E2  3196  26E0  3197   	fcall	_I2C2_MasterWrite
 14030                           
 14031                           ;i2c_wrapper.c: 13: Timeout_setTimeout(200);
 14032  17E5  30C8               	movlw	200
 14033  17E6  0020               	movlb	0	; select bank0
 14034  17E7  00A1               	movwf	Timeout_setTimeout@val
 14035  17E8  3000               	movlw	0
 14036  17E9  00A2               	movwf	Timeout_setTimeout@val+1
 14037  17EA  3194  2481  3197   	fcall	_Timeout_setTimeout
 14038  17ED                     l5805:	
 14039                           ;i2c_wrapper.c: 15: while(status == I2C2_MESSAGE_PENDING && Timeout_hasExpired()==0);
 14040                           
 14041  17ED  3002               	movlw	2
 14042  17EE  0020               	movlb	0	; select bank0
 14043  17EF  0638               	xorwf	I2C_ByteWrite@status,w
 14044  17F0  1D03               	btfss	3,2
 14045  17F1  2FF8               	goto	l5809
 14046  17F2  3188  20FF  3197   	fcall	_Timeout_hasExpired
 14047  17F5  3A00               	xorlw	0
 14048  17F6  1903               	skipnz
 14049  17F7  2FED               	goto	l5805
 14050  17F8                     l5809:	
 14051                           
 14052                           ;i2c_wrapper.c: 17: if (status == I2C2_MESSAGE_COMPLETE)
 14053  17F8  0020               	movlb	0	; select bank0
 14054  17F9  0838               	movf	I2C_ByteWrite@status,w
 14055  17FA  1D03               	btfss	3,2
 14056  17FB  2FFE               	goto	l5817
 14057                           
 14058                           ;i2c_wrapper.c: 18: {
 14059                           ;i2c_wrapper.c: 19: return 1;
 14060  17FC  3001               	movlw	1
 14061                           
 14062                           ;i2c_wrapper.c: 20: }
 14063  17FD  0008               	return
 14064  17FE                     l5817:	
 14065                           
 14066                           ;i2c_wrapper.c: 21: else
 14067                           ;i2c_wrapper.c: 22: {
 14068                           ;i2c_wrapper.c: 23: return 0;
 14069  17FE  3000               	movlw	0
 14070  17FF  0008               	return
 14071  1800                     __end_of_I2C_ByteWrite:	
 14072                           
 14073                           	psect	text77
 14074  09F4                     __ptext77:	
 14075 ;; *************** function _I2C_BufferRead *****************
 14076 ;; Defined at:
 14077 ;;		line 30 in file "i2c_wrapper.c"
 14078 ;; Parameters:    Size  Location     Type
 14079 ;;  slaveAddr       1    wreg     unsigned char 
 14080 ;;  pBuffer         2   17[BANK0 ] PTR unsigned char 
 14081 ;;		 -> data(8), b1(24), HMC5883L_ReadBit@tmp(1), HMC5883L_ReadBits@tmp(1), 
 14082 ;;		 -> HMC5883L_WriteBit@tmp(1), HMC5883L_WriteBits@tmp(1), heading(8), HMC5883L_TestConnection@tmp(3), 
 14083 ;;		 -> MPU6050_ReadBit@tmp(1), MPU6050_ReadBits@tmp(1), MPU6050_WriteBit@tmp(1), MPU6050_WriteBits@tmp(1), 
 14084 ;;		 -> MPU6050_GetRawAccel@tempBuffer(6), MPU6050_GetRawAccelGyro@tmpBuffer(14), 
 14085 ;;  ReadAddr        1   19[BANK0 ] unsigned char 
 14086 ;;  NumByteToRea    2   20[BANK0 ] unsigned short 
 14087 ;; Auto vars:     Size  Location     Type
 14088 ;;  slaveAddr       1   26[BANK0 ] unsigned char 
 14089 ;;  status          1   27[BANK0 ] enum E3025
 14090 ;; Return value:  Size  Location     Type
 14091 ;;                  1    wreg      unsigned char 
 14092 ;; Registers used:
 14093 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14094 ;; Tracked objects:
 14095 ;;		On entry : 0/0
 14096 ;;		On exit  : 0/0
 14097 ;;		Unchanged: 0/0
 14098 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14099 ;;      Params:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14100 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14101 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14102 ;;      Totals:         0      11       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14103 ;;Total ram usage:       11 bytes
 14104 ;; Hardware stack levels used:    1
 14105 ;; Hardware stack levels required when called:    6
 14106 ;; This function calls:
 14107 ;;		_I2C2_MasterRead
 14108 ;;		_I2C2_MasterWrite
 14109 ;;		_Timeout_hasExpired
 14110 ;;		_Timeout_setTimeout
 14111 ;; This function is called by:
 14112 ;;		_HMC5883L_I2C_BufferRead
 14113 ;;		_BMP_init
 14114 ;;		_BMP_readTemperature
 14115 ;; This function uses a non-reentrant model
 14116 ;;
 14117                           
 14118                           
 14119                           ;psect for function _I2C_BufferRead
 14120  09F4                     _I2C_BufferRead:	
 14121                           
 14122                           ;incstack = 0
 14123                           ; Regs used in _I2C_BufferRead: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 14124                           ;I2C_BufferRead@slaveAddr stored from wreg
 14125  09F4  0020               	movlb	0	; select bank0
 14126  09F5  00BA               	movwf	I2C_BufferRead@slaveAddr
 14127                           
 14128                           ;i2c_wrapper.c: 32: I2C2_MESSAGE_STATUS status=I2C2_MESSAGE_COMPLETE;
 14129  09F6  01BB               	clrf	I2C_BufferRead@status
 14130                           
 14131                           ;i2c_wrapper.c: 34: I2C2_MasterWrite(&ReadAddr, 1,slaveAddr, &status);
 14132  09F7  01A8               	clrf	I2C2_MasterWrite@length
 14133  09F8  0AA8               	incf	I2C2_MasterWrite@length,f
 14134  09F9  083A               	movf	I2C_BufferRead@slaveAddr,w
 14135  09FA  00B6               	movwf	??_I2C_BufferRead
 14136  09FB  01B7               	clrf	??_I2C_BufferRead+1
 14137  09FC  0836               	movf	??_I2C_BufferRead,w
 14138  09FD  00A9               	movwf	I2C2_MasterWrite@address
 14139  09FE  0837               	movf	??_I2C_BufferRead+1,w
 14140  09FF  00AA               	movwf	I2C2_MasterWrite@address+1
 14141  0A00  303B               	movlw	(low (I2C_BufferRead@status| 0))& (0+255)
 14142  0A01  00B8               	movwf	??_I2C_BufferRead+2
 14143  0A02  0838               	movf	??_I2C_BufferRead+2,w
 14144  0A03  00AB               	movwf	I2C2_MasterWrite@pflag
 14145  0A04  3033               	movlw	(low (I2C_BufferRead@ReadAddr| 0))& (0+255)
 14146  0A05  3196  26E0  3189   	fcall	_I2C2_MasterWrite
 14147                           
 14148                           ;i2c_wrapper.c: 35: Timeout_setTimeout(200);
 14149  0A08  30C8               	movlw	200
 14150  0A09  0020               	movlb	0	; select bank0
 14151  0A0A  00A1               	movwf	Timeout_setTimeout@val
 14152  0A0B  3000               	movlw	0
 14153  0A0C  00A2               	movwf	Timeout_setTimeout@val+1
 14154  0A0D  3194  2481  3189   	fcall	_Timeout_setTimeout
 14155  0A10                     l5639:	
 14156                           ;i2c_wrapper.c: 38: while(status == I2C2_MESSAGE_PENDING && Timeout_hasExpired()==0);
 14157                           
 14158  0A10  3002               	movlw	2
 14159  0A11  0020               	movlb	0	; select bank0
 14160  0A12  063B               	xorwf	I2C_BufferRead@status,w
 14161  0A13  1D03               	btfss	3,2
 14162  0A14  2A1B               	goto	l5643
 14163  0A15  3188  20FF  3189   	fcall	_Timeout_hasExpired
 14164  0A18  3A00               	xorlw	0
 14165  0A19  1903               	skipnz
 14166  0A1A  2A10               	goto	l5639
 14167  0A1B                     l5643:	
 14168                           
 14169                           ;i2c_wrapper.c: 40: if (status != I2C2_MESSAGE_COMPLETE)
 14170  0A1B  0020               	movlb	0	; select bank0
 14171  0A1C  083B               	movf	I2C_BufferRead@status,w
 14172  0A1D  1903               	btfsc	3,2
 14173  0A1E  2A21               	goto	l5649
 14174                           
 14175                           ;i2c_wrapper.c: 41: {
 14176                           ;i2c_wrapper.c: 42: return 0;
 14177  0A1F  3000               	movlw	0
 14178  0A20  0008               	return
 14179  0A21                     l5649:	
 14180                           
 14181                           ;i2c_wrapper.c: 43: }
 14182                           ;i2c_wrapper.c: 46: I2C2_MasterRead( pBuffer,NumByteToRead,slaveAddr,&status);
 14183  0A21  0832               	movf	I2C_BufferRead@pBuffer+1,w
 14184  0A22  00AA               	movwf	I2C2_MasterRead@pdata+1
 14185  0A23  0831               	movf	I2C_BufferRead@pBuffer,w
 14186  0A24  00A9               	movwf	I2C2_MasterRead@pdata
 14187  0A25  0834               	movf	I2C_BufferRead@NumByteToRead,w
 14188  0A26  00B6               	movwf	??_I2C_BufferRead
 14189  0A27  0836               	movf	??_I2C_BufferRead,w
 14190  0A28  00AB               	movwf	I2C2_MasterRead@length
 14191  0A29  083A               	movf	I2C_BufferRead@slaveAddr,w
 14192  0A2A  00B7               	movwf	??_I2C_BufferRead+1
 14193  0A2B  01B8               	clrf	??_I2C_BufferRead+2
 14194  0A2C  0837               	movf	??_I2C_BufferRead+1,w
 14195  0A2D  00AC               	movwf	I2C2_MasterRead@address
 14196  0A2E  0838               	movf	??_I2C_BufferRead+2,w
 14197  0A2F  00AD               	movwf	I2C2_MasterRead@address+1
 14198  0A30  303B               	movlw	(low (I2C_BufferRead@status| 0))& (0+255)
 14199  0A31  00B9               	movwf	??_I2C_BufferRead+3
 14200  0A32  0839               	movf	??_I2C_BufferRead+3,w
 14201  0A33  00AE               	movwf	I2C2_MasterRead@pflag
 14202  0A34  3196  26B8  3189   	fcall	_I2C2_MasterRead
 14203                           
 14204                           ;i2c_wrapper.c: 47: Timeout_setTimeout(200);
 14205  0A37  30C8               	movlw	200
 14206  0A38  0020               	movlb	0	; select bank0
 14207  0A39  00A1               	movwf	Timeout_setTimeout@val
 14208  0A3A  3000               	movlw	0
 14209  0A3B  00A2               	movwf	Timeout_setTimeout@val+1
 14210  0A3C  3194  2481  3189   	fcall	_Timeout_setTimeout
 14211  0A3F                     l5653:	
 14212                           ;i2c_wrapper.c: 49: while(status == I2C2_MESSAGE_PENDING && Timeout_hasExpired()==0);
 14213                           
 14214  0A3F  3002               	movlw	2
 14215  0A40  0020               	movlb	0	; select bank0
 14216  0A41  063B               	xorwf	I2C_BufferRead@status,w
 14217  0A42  1D03               	btfss	3,2
 14218  0A43  2A4A               	goto	l5657
 14219  0A44  3188  20FF  3189   	fcall	_Timeout_hasExpired
 14220  0A47  3A00               	xorlw	0
 14221  0A48  1903               	skipnz
 14222  0A49  2A3F               	goto	l5653
 14223  0A4A                     l5657:	
 14224                           
 14225                           ;i2c_wrapper.c: 51: if (status == I2C2_MESSAGE_COMPLETE)
 14226  0A4A  0020               	movlb	0	; select bank0
 14227  0A4B  083B               	movf	I2C_BufferRead@status,w
 14228  0A4C  1D03               	btfss	3,2
 14229  0A4D  2A50               	goto	l5665
 14230                           
 14231                           ;i2c_wrapper.c: 52: return 1;
 14232  0A4E  3001               	movlw	1
 14233  0A4F  0008               	return
 14234  0A50                     l5665:	
 14235                           
 14236                           ;i2c_wrapper.c: 53: else
 14237                           ;i2c_wrapper.c: 54: return 0;
 14238  0A50  3000               	movlw	0
 14239  0A51  0008               	return
 14240  0A52                     __end_of_I2C_BufferRead:	
 14241                           
 14242                           	psect	text78
 14243  1481                     __ptext78:	
 14244 ;; *************** function _Timeout_setTimeout *****************
 14245 ;; Defined at:
 14246 ;;		line 26 in file "timeout.c"
 14247 ;; Parameters:    Size  Location     Type
 14248 ;;  val             2    1[BANK0 ] unsigned short 
 14249 ;; Auto vars:     Size  Location     Type
 14250 ;;		None
 14251 ;; Return value:  Size  Location     Type
 14252 ;;                  1    wreg      void 
 14253 ;; Registers used:
 14254 ;;		wreg
 14255 ;; Tracked objects:
 14256 ;;		On entry : 0/0
 14257 ;;		On exit  : 0/0
 14258 ;;		Unchanged: 0/0
 14259 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14260 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14261 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14262 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14263 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14264 ;;Total ram usage:        2 bytes
 14265 ;; Hardware stack levels used:    1
 14266 ;; Hardware stack levels required when called:    4
 14267 ;; This function calls:
 14268 ;;		Nothing
 14269 ;; This function is called by:
 14270 ;;		_I2C_ByteWrite
 14271 ;;		_I2C_BufferRead
 14272 ;; This function uses a non-reentrant model
 14273 ;;
 14274                           
 14275                           
 14276                           ;psect for function _Timeout_setTimeout
 14277  1481                     _Timeout_setTimeout:	
 14278                           
 14279                           ;timeout.c: 28: timeOut=val;
 14280                           
 14281                           ;incstack = 0
 14282                           ; Regs used in _Timeout_setTimeout: [wreg]
 14283  1481  0020               	movlb	0	; select bank0
 14284  1482  0822               	movf	Timeout_setTimeout@val+1,w
 14285  1483  0022               	movlb	2	; select bank2
 14286  1484  00BD               	movwf	(_timeOut+1)^(0+256)
 14287  1485  0020               	movlb	0	; select bank0
 14288  1486  0821               	movf	Timeout_setTimeout@val,w
 14289  1487  0022               	movlb	2	; select bank2
 14290  1488  00BC               	movwf	_timeOut^(0+256)
 14291                           
 14292                           ;timeout.c: 29: curr=globalCounter;
 14293  1489  0021               	movlb	1	; select bank1
 14294  148A  0852               	movf	(_globalCounter+3)^(0+128),w	;volatile
 14295  148B  0022               	movlb	2	; select bank2
 14296  148C  00A3               	movwf	(_curr+3)^(0+256)
 14297  148D  0021               	movlb	1	; select bank1
 14298  148E  0851               	movf	(_globalCounter+2)^(0+128),w	;volatile
 14299  148F  0022               	movlb	2	; select bank2
 14300  1490  00A2               	movwf	(_curr+2)^(0+256)
 14301  1491  0021               	movlb	1	; select bank1
 14302  1492  0850               	movf	(_globalCounter+1)^(0+128),w	;volatile
 14303  1493  0022               	movlb	2	; select bank2
 14304  1494  00A1               	movwf	(_curr+1)^(0+256)
 14305  1495  0021               	movlb	1	; select bank1
 14306  1496  084F               	movf	_globalCounter^(0+128),w	;volatile
 14307  1497  0022               	movlb	2	; select bank2
 14308  1498  00A0               	movwf	_curr^(0+256)
 14309  1499  0008               	return
 14310  149A                     __end_of_Timeout_setTimeout:	
 14311                           
 14312                           	psect	text79
 14313  08FF                     __ptext79:	
 14314 ;; *************** function _Timeout_hasExpired *****************
 14315 ;; Defined at:
 14316 ;;		line 32 in file "timeout.c"
 14317 ;; Parameters:    Size  Location     Type
 14318 ;;		None
 14319 ;; Auto vars:     Size  Location     Type
 14320 ;;		None
 14321 ;; Return value:  Size  Location     Type
 14322 ;;                  1    wreg      unsigned char 
 14323 ;; Registers used:
 14324 ;;		wreg, status,2, status,0
 14325 ;; Tracked objects:
 14326 ;;		On entry : 0/0
 14327 ;;		On exit  : 0/0
 14328 ;;		Unchanged: 0/0
 14329 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14330 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14331 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14332 ;;      Temps:          0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14333 ;;      Totals:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14334 ;;Total ram usage:       12 bytes
 14335 ;; Hardware stack levels used:    1
 14336 ;; Hardware stack levels required when called:    4
 14337 ;; This function calls:
 14338 ;;		Nothing
 14339 ;; This function is called by:
 14340 ;;		_I2C_ByteWrite
 14341 ;;		_I2C_BufferRead
 14342 ;; This function uses a non-reentrant model
 14343 ;;
 14344                           
 14345                           
 14346                           ;psect for function _Timeout_hasExpired
 14347  08FF                     _Timeout_hasExpired:	
 14348                           
 14349                           ;timeout.c: 34: if(globalCounter-curr>timeOut)
 14350                           
 14351                           ;incstack = 0
 14352                           ; Regs used in _Timeout_hasExpired: [wreg+status,2+status,0]
 14353  08FF  0021               	movlb	1	; select bank1
 14354  0900  084F               	movf	_globalCounter^(0+128),w	;volatile
 14355  0901  0020               	movlb	0	; select bank0
 14356  0902  00A1               	movwf	??_Timeout_hasExpired
 14357  0903  0021               	movlb	1	; select bank1
 14358  0904  0850               	movf	(_globalCounter+1)^(0+128),w	;volatile
 14359  0905  0020               	movlb	0	; select bank0
 14360  0906  00A2               	movwf	??_Timeout_hasExpired+1
 14361  0907  0021               	movlb	1	; select bank1
 14362  0908  0851               	movf	(_globalCounter+2)^(0+128),w	;volatile
 14363  0909  0020               	movlb	0	; select bank0
 14364  090A  00A3               	movwf	??_Timeout_hasExpired+2
 14365  090B  0021               	movlb	1	; select bank1
 14366  090C  0852               	movf	(_globalCounter+3)^(0+128),w	;volatile
 14367  090D  0020               	movlb	0	; select bank0
 14368  090E  00A4               	movwf	??_Timeout_hasExpired+3
 14369  090F  0022               	movlb	2	; select bank2
 14370  0910  0920               	comf	_curr^(0+256),w
 14371  0911  0020               	movlb	0	; select bank0
 14372  0912  00A5               	movwf	??_Timeout_hasExpired+4
 14373  0913  0022               	movlb	2	; select bank2
 14374  0914  0921               	comf	(_curr+1)^(0+256),w
 14375  0915  0020               	movlb	0	; select bank0
 14376  0916  00A6               	movwf	??_Timeout_hasExpired+5
 14377  0917  0022               	movlb	2	; select bank2
 14378  0918  0922               	comf	(_curr+2)^(0+256),w
 14379  0919  0020               	movlb	0	; select bank0
 14380  091A  00A7               	movwf	??_Timeout_hasExpired+6
 14381  091B  0022               	movlb	2	; select bank2
 14382  091C  0923               	comf	(_curr+3)^(0+256),w
 14383  091D  0020               	movlb	0	; select bank0
 14384  091E  00A8               	movwf	??_Timeout_hasExpired+7
 14385  091F  0AA5               	incf	??_Timeout_hasExpired+4,f
 14386  0920  1903               	skipnz
 14387  0921  0AA6               	incf	??_Timeout_hasExpired+5,f
 14388  0922  1903               	skipnz
 14389  0923  0AA7               	incf	??_Timeout_hasExpired+6,f
 14390  0924  1903               	skipnz
 14391  0925  0AA8               	incf	??_Timeout_hasExpired+7,f
 14392  0926  0825               	movf	??_Timeout_hasExpired+4,w
 14393  0927  07A1               	addwf	??_Timeout_hasExpired,f
 14394  0928  0826               	movf	??_Timeout_hasExpired+5,w
 14395  0929  3DA2               	addwfc	??_Timeout_hasExpired+1,f
 14396  092A  0827               	movf	??_Timeout_hasExpired+6,w
 14397  092B  3DA3               	addwfc	??_Timeout_hasExpired+2,f
 14398  092C  0828               	movf	??_Timeout_hasExpired+7,w
 14399  092D  3DA4               	addwfc	??_Timeout_hasExpired+3,f
 14400  092E  0022               	movlb	2	; select bank2
 14401  092F  083C               	movf	_timeOut^(0+256),w
 14402  0930  0020               	movlb	0	; select bank0
 14403  0931  00A9               	movwf	??_Timeout_hasExpired+8
 14404  0932  0022               	movlb	2	; select bank2
 14405  0933  083D               	movf	(_timeOut+1)^(0+256),w
 14406  0934  0020               	movlb	0	; select bank0
 14407  0935  00AA               	movwf	??_Timeout_hasExpired+9
 14408  0936  01AB               	clrf	??_Timeout_hasExpired+10
 14409  0937  01AC               	clrf	??_Timeout_hasExpired+11
 14410  0938  0824               	movf	??_Timeout_hasExpired+3,w
 14411  0939  022C               	subwf	??_Timeout_hasExpired+11,w
 14412  093A  1D03               	skipz
 14413  093B  2946               	goto	u5065
 14414  093C  0823               	movf	??_Timeout_hasExpired+2,w
 14415  093D  022B               	subwf	??_Timeout_hasExpired+10,w
 14416  093E  1D03               	skipz
 14417  093F  2946               	goto	u5065
 14418  0940  0822               	movf	??_Timeout_hasExpired+1,w
 14419  0941  022A               	subwf	??_Timeout_hasExpired+9,w
 14420  0942  1D03               	skipz
 14421  0943  2946               	goto	u5065
 14422  0944  0821               	movf	??_Timeout_hasExpired,w
 14423  0945  0229               	subwf	??_Timeout_hasExpired+8,w
 14424  0946                     u5065:	
 14425  0946  1803               	skipnc
 14426  0947  294A               	goto	l5629
 14427                           
 14428                           ;timeout.c: 35: return 1;
 14429  0948  3001               	movlw	1
 14430  0949  0008               	return
 14431  094A                     l5629:	
 14432                           
 14433                           ;timeout.c: 36: else
 14434                           ;timeout.c: 37: return 0;
 14435  094A  3000               	movlw	0
 14436  094B  0008               	return
 14437  094C                     __end_of_Timeout_hasExpired:	
 14438                           
 14439                           	psect	text80
 14440  16E0                     __ptext80:	
 14441 ;; *************** function _I2C2_MasterWrite *****************
 14442 ;; Defined at:
 14443 ;;		line 598 in file "mcc_generated_files/i2c2.c"
 14444 ;; Parameters:    Size  Location     Type
 14445 ;;  pdata           1    wreg     PTR unsigned char 
 14446 ;;		 -> I2C_BufferRead@ReadAddr(1), I2C_ByteWrite@data(2), 
 14447 ;;  length          1    8[BANK0 ] unsigned char 
 14448 ;;  address         2    9[BANK0 ] unsigned int 
 14449 ;;  pflag           1   11[BANK0 ] PTR enum E2993
 14450 ;;		 -> I2C_BufferRead@status(1), I2C_ByteWrite@status(1), 
 14451 ;; Auto vars:     Size  Location     Type
 14452 ;;  pdata           1   14[BANK0 ] PTR unsigned char 
 14453 ;;		 -> I2C_BufferRead@ReadAddr(1), I2C_ByteWrite@data(2), 
 14454 ;; Return value:  Size  Location     Type
 14455 ;;                  1    wreg      void 
 14456 ;; Registers used:
 14457 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14458 ;; Tracked objects:
 14459 ;;		On entry : 0/0
 14460 ;;		On exit  : 0/0
 14461 ;;		Unchanged: 0/0
 14462 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14463 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14464 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14465 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14466 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14467 ;;Total ram usage:        7 bytes
 14468 ;; Hardware stack levels used:    1
 14469 ;; Hardware stack levels required when called:    5
 14470 ;; This function calls:
 14471 ;;		_I2C2_MasterTRBInsert
 14472 ;;		_I2C2_MasterWriteTRBBuild
 14473 ;; This function is called by:
 14474 ;;		_I2C_ByteWrite
 14475 ;;		_I2C_BufferRead
 14476 ;; This function uses a non-reentrant model
 14477 ;;
 14478                           
 14479                           
 14480                           ;psect for function _I2C2_MasterWrite
 14481  16E0                     _I2C2_MasterWrite:	
 14482                           
 14483                           ;incstack = 0
 14484                           ; Regs used in _I2C2_MasterWrite: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 14485                           ;I2C2_MasterWrite@pdata stored from wreg
 14486  16E0  0020               	movlb	0	; select bank0
 14487  16E1  00AE               	movwf	I2C2_MasterWrite@pdata
 14488                           
 14489                           ;i2c2.c: 604: static I2C2_TRANSACTION_REQUEST_BLOCK trBlock;
 14490                           ;i2c2.c: 607: if (i2c2_object.trStatus.s.full != 1)
 14491  16E2  0021               	movlb	1	; select bank1
 14492  16E3  184C               	btfsc	(_i2c2_object^(0+128)+2),0
 14493  16E4  2F03               	goto	l5553
 14494                           
 14495                           ;i2c2.c: 608: {
 14496                           ;i2c2.c: 609: I2C2_MasterWriteTRBBuild(&trBlock, pdata, length, address);
 14497  16E5  0020               	movlb	0	; select bank0
 14498  16E6  082E               	movf	I2C2_MasterWrite@pdata,w
 14499  16E7  00AC               	movwf	??_I2C2_MasterWrite
 14500  16E8  082C               	movf	??_I2C2_MasterWrite,w
 14501  16E9  00A1               	movwf	I2C2_MasterWriteTRBBuild@pdata
 14502  16EA  0828               	movf	I2C2_MasterWrite@length,w
 14503  16EB  00AD               	movwf	??_I2C2_MasterWrite+1
 14504  16EC  082D               	movf	??_I2C2_MasterWrite+1,w
 14505  16ED  00A2               	movwf	I2C2_MasterWriteTRBBuild@length
 14506  16EE  082A               	movf	I2C2_MasterWrite@address+1,w
 14507  16EF  00A4               	movwf	I2C2_MasterWriteTRBBuild@address+1
 14508  16F0  0829               	movf	I2C2_MasterWrite@address,w
 14509  16F1  00A3               	movwf	I2C2_MasterWriteTRBBuild@address
 14510  16F2  305D               	movlw	(low (I2C2_MasterWrite@trBlock| (0+256)))& (0+255)
 14511  16F3  3196  264C  3196   	fcall	_I2C2_MasterWriteTRBBuild
 14512                           
 14513                           ;i2c2.c: 610: I2C2_MasterTRBInsert(1, &trBlock, pflag);
 14514  16F6  305D               	movlw	(low (I2C2_MasterWrite@trBlock| (0+256)))& (0+255)
 14515  16F7  0020               	movlb	0	; select bank0
 14516  16F8  00AC               	movwf	??_I2C2_MasterWrite
 14517  16F9  082C               	movf	??_I2C2_MasterWrite,w
 14518  16FA  00A1               	movwf	I2C2_MasterTRBInsert@ptrb_list
 14519  16FB  082B               	movf	I2C2_MasterWrite@pflag,w
 14520  16FC  00AD               	movwf	??_I2C2_MasterWrite+1
 14521  16FD  082D               	movf	??_I2C2_MasterWrite+1,w
 14522  16FE  00A2               	movwf	I2C2_MasterTRBInsert@pflag
 14523  16FF  3001               	movlw	1
 14524  1700  3189  219F         	fcall	_I2C2_MasterTRBInsert
 14525                           
 14526                           ;i2c2.c: 611: }
 14527  1702  0008               	return
 14528  1703                     l5553:	
 14529                           
 14530                           ;i2c2.c: 612: else
 14531                           ;i2c2.c: 613: {
 14532                           ;i2c2.c: 614: *pflag = I2C2_MESSAGE_FAIL;
 14533  1703  0020               	movlb	0	; select bank0
 14534  1704  082B               	movf	I2C2_MasterWrite@pflag,w
 14535  1705  0086               	movwf	6
 14536  1706  0187               	clrf	7
 14537  1707  0181               	clrf	1
 14538  1708  0A81               	incf	1,f
 14539  1709  0008               	return
 14540  170A                     __end_of_I2C2_MasterWrite:	
 14541                           
 14542                           	psect	text81
 14543  164C                     __ptext81:	
 14544 ;; *************** function _I2C2_MasterWriteTRBBuild *****************
 14545 ;; Defined at:
 14546 ;;		line 708 in file "mcc_generated_files/i2c2.c"
 14547 ;; Parameters:    Size  Location     Type
 14548 ;;  ptrb            1    wreg     PTR struct .
 14549 ;;		 -> I2C2_MasterWrite@trBlock(5), 
 14550 ;;  pdata           1    1[BANK0 ] PTR unsigned char 
 14551 ;;		 -> I2C_BufferRead@ReadAddr(1), I2C_ByteWrite@data(2), 
 14552 ;;  length          1    2[BANK0 ] unsigned char 
 14553 ;;  address         2    3[BANK0 ] unsigned int 
 14554 ;; Auto vars:     Size  Location     Type
 14555 ;;  ptrb            1    7[BANK0 ] PTR struct .
 14556 ;;		 -> I2C2_MasterWrite@trBlock(5), 
 14557 ;; Return value:  Size  Location     Type
 14558 ;;                  1    wreg      void 
 14559 ;; Registers used:
 14560 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 14561 ;; Tracked objects:
 14562 ;;		On entry : 0/0
 14563 ;;		On exit  : 0/0
 14564 ;;		Unchanged: 0/0
 14565 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14566 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14567 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14568 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14569 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14570 ;;Total ram usage:        7 bytes
 14571 ;; Hardware stack levels used:    1
 14572 ;; Hardware stack levels required when called:    4
 14573 ;; This function calls:
 14574 ;;		Nothing
 14575 ;; This function is called by:
 14576 ;;		_I2C2_MasterWrite
 14577 ;; This function uses a non-reentrant model
 14578 ;;
 14579                           
 14580                           
 14581                           ;psect for function _I2C2_MasterWriteTRBBuild
 14582  164C                     _I2C2_MasterWriteTRBBuild:	
 14583                           
 14584                           ;incstack = 0
 14585                           ; Regs used in _I2C2_MasterWriteTRBBuild: [wreg+fsr1l+fsr1h+status,2+status,0]
 14586                           ;I2C2_MasterWriteTRBBuild@ptrb stored from wreg
 14587  164C  0020               	movlb	0	; select bank0
 14588  164D  00A7               	movwf	I2C2_MasterWriteTRBBuild@ptrb
 14589                           
 14590                           ;i2c2.c: 714: ptrb->address = address << 1;
 14591  164E  0824               	movf	I2C2_MasterWriteTRBBuild@address+1,w
 14592  164F  00A6               	movwf	??_I2C2_MasterWriteTRBBuild+1
 14593  1650  0823               	movf	I2C2_MasterWriteTRBBuild@address,w
 14594  1651  00A5               	movwf	??_I2C2_MasterWriteTRBBuild
 14595  1652  35A5               	lslf	??_I2C2_MasterWriteTRBBuild,f
 14596  1653  0DA6               	rlf	??_I2C2_MasterWriteTRBBuild+1,f
 14597  1654  0827               	movf	I2C2_MasterWriteTRBBuild@ptrb,w
 14598  1655  0086               	movwf	6
 14599  1656  3001               	movlw	1	; select bank2/3
 14600  1657  0087               	movwf	7
 14601  1658  0825               	movf	??_I2C2_MasterWriteTRBBuild,w
 14602  1659  3FC0               	movwi [0]fsr1
 14603  165A  0826               	movf	??_I2C2_MasterWriteTRBBuild+1,w
 14604  165B  3FC1               	movwi [1]fsr1
 14605                           
 14606                           ;i2c2.c: 715: ptrb->length = length;
 14607  165C  0822               	movf	I2C2_MasterWriteTRBBuild@length,w
 14608  165D  00A5               	movwf	??_I2C2_MasterWriteTRBBuild
 14609  165E  0827               	movf	I2C2_MasterWriteTRBBuild@ptrb,w
 14610  165F  3E02               	addlw	2
 14611  1660  0086               	movwf	6
 14612  1661  3001               	movlw	1	; select bank2/3
 14613  1662  0087               	movwf	7
 14614  1663  0825               	movf	??_I2C2_MasterWriteTRBBuild,w
 14615  1664  0081               	movwf	1
 14616                           
 14617                           ;i2c2.c: 716: ptrb->pbuffer = pdata;
 14618  1665  0827               	movf	I2C2_MasterWriteTRBBuild@ptrb,w
 14619  1666  3E03               	addlw	3
 14620  1667  0086               	movwf	6
 14621  1668  3001               	movlw	1	; select bank2/3
 14622  1669  0087               	movwf	7
 14623  166A  0821               	movf	I2C2_MasterWriteTRBBuild@pdata,w
 14624  166B  3FC0               	movwi [0]fsr1
 14625  166C  3000               	movlw	0
 14626  166D  3FC1               	movwi [1]fsr1
 14627  166E  0008               	return
 14628  166F                     __end_of_I2C2_MasterWriteTRBBuild:	
 14629                           
 14630                           	psect	text82
 14631  16B8                     __ptext82:	
 14632 ;; *************** function _I2C2_MasterRead *****************
 14633 ;; Defined at:
 14634 ;;		line 619 in file "mcc_generated_files/i2c2.c"
 14635 ;; Parameters:    Size  Location     Type
 14636 ;;  pdata           2    9[BANK0 ] PTR unsigned char 
 14637 ;;		 -> data(8), b1(24), HMC5883L_ReadBit@tmp(1), HMC5883L_ReadBits@tmp(1), 
 14638 ;;		 -> HMC5883L_WriteBit@tmp(1), HMC5883L_WriteBits@tmp(1), heading(8), HMC5883L_TestConnection@tmp(3), 
 14639 ;;		 -> MPU6050_ReadBit@tmp(1), MPU6050_ReadBits@tmp(1), MPU6050_WriteBit@tmp(1), MPU6050_WriteBits@tmp(1), 
 14640 ;;		 -> MPU6050_GetRawAccel@tempBuffer(6), MPU6050_GetRawAccelGyro@tmpBuffer(14), 
 14641 ;;  length          1   11[BANK0 ] unsigned char 
 14642 ;;  address         2   12[BANK0 ] unsigned int 
 14643 ;;  pflag           1   14[BANK0 ] PTR enum E2993
 14644 ;;		 -> I2C_BufferRead@status(1), 
 14645 ;; Auto vars:     Size  Location     Type
 14646 ;;		None
 14647 ;; Return value:  Size  Location     Type
 14648 ;;                  1    wreg      void 
 14649 ;; Registers used:
 14650 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14651 ;; Tracked objects:
 14652 ;;		On entry : 0/0
 14653 ;;		On exit  : 0/0
 14654 ;;		Unchanged: 0/0
 14655 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14656 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14657 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14658 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14659 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14660 ;;Total ram usage:        8 bytes
 14661 ;; Hardware stack levels used:    1
 14662 ;; Hardware stack levels required when called:    5
 14663 ;; This function calls:
 14664 ;;		_I2C2_MasterReadTRBBuild
 14665 ;;		_I2C2_MasterTRBInsert
 14666 ;; This function is called by:
 14667 ;;		_I2C_BufferRead
 14668 ;; This function uses a non-reentrant model
 14669 ;;
 14670                           
 14671                           
 14672                           ;psect for function _I2C2_MasterRead
 14673  16B8                     _I2C2_MasterRead:	
 14674                           
 14675                           ;i2c2.c: 625: static I2C2_TRANSACTION_REQUEST_BLOCK trBlock;
 14676                           ;i2c2.c: 629: if (i2c2_object.trStatus.s.full != 1)
 14677                           
 14678                           ;incstack = 0
 14679                           ; Regs used in _I2C2_MasterRead: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 14680  16B8  0021               	movlb	1	; select bank1
 14681  16B9  184C               	btfsc	(_i2c2_object^(0+128)+2),0
 14682  16BA  2ED9               	goto	l5559
 14683                           
 14684                           ;i2c2.c: 630: {
 14685                           ;i2c2.c: 631: I2C2_MasterReadTRBBuild(&trBlock, pdata, length, address);
 14686  16BB  0020               	movlb	0	; select bank0
 14687  16BC  082A               	movf	I2C2_MasterRead@pdata+1,w
 14688  16BD  00A2               	movwf	I2C2_MasterReadTRBBuild@pdata+1
 14689  16BE  0829               	movf	I2C2_MasterRead@pdata,w
 14690  16BF  00A1               	movwf	I2C2_MasterReadTRBBuild@pdata
 14691  16C0  082B               	movf	I2C2_MasterRead@length,w
 14692  16C1  00AF               	movwf	??_I2C2_MasterRead
 14693  16C2  082F               	movf	??_I2C2_MasterRead,w
 14694  16C3  00A3               	movwf	I2C2_MasterReadTRBBuild@length
 14695  16C4  082D               	movf	I2C2_MasterRead@address+1,w
 14696  16C5  00A5               	movwf	I2C2_MasterReadTRBBuild@address+1
 14697  16C6  082C               	movf	I2C2_MasterRead@address,w
 14698  16C7  00A4               	movwf	I2C2_MasterReadTRBBuild@address
 14699  16C8  3058               	movlw	(low (I2C2_MasterRead@trBlock| (0+256)))& (0+255)
 14700  16C9  3197  2735  3196   	fcall	_I2C2_MasterReadTRBBuild
 14701                           
 14702                           ;i2c2.c: 632: I2C2_MasterTRBInsert(1, &trBlock, pflag);
 14703  16CC  3058               	movlw	(low (I2C2_MasterRead@trBlock| (0+256)))& (0+255)
 14704  16CD  0020               	movlb	0	; select bank0
 14705  16CE  00AF               	movwf	??_I2C2_MasterRead
 14706  16CF  082F               	movf	??_I2C2_MasterRead,w
 14707  16D0  00A1               	movwf	I2C2_MasterTRBInsert@ptrb_list
 14708  16D1  082E               	movf	I2C2_MasterRead@pflag,w
 14709  16D2  00B0               	movwf	??_I2C2_MasterRead+1
 14710  16D3  0830               	movf	??_I2C2_MasterRead+1,w
 14711  16D4  00A2               	movwf	I2C2_MasterTRBInsert@pflag
 14712  16D5  3001               	movlw	1
 14713  16D6  3189  219F         	fcall	_I2C2_MasterTRBInsert
 14714                           
 14715                           ;i2c2.c: 633: }
 14716  16D8  0008               	return
 14717  16D9                     l5559:	
 14718                           
 14719                           ;i2c2.c: 634: else
 14720                           ;i2c2.c: 635: {
 14721                           ;i2c2.c: 636: *pflag = I2C2_MESSAGE_FAIL;
 14722  16D9  0020               	movlb	0	; select bank0
 14723  16DA  082E               	movf	I2C2_MasterRead@pflag,w
 14724  16DB  0086               	movwf	6
 14725  16DC  0187               	clrf	7
 14726  16DD  0181               	clrf	1
 14727  16DE  0A81               	incf	1,f
 14728  16DF  0008               	return
 14729  16E0                     __end_of_I2C2_MasterRead:	
 14730                           
 14731                           	psect	text83
 14732  099F                     __ptext83:	
 14733 ;; *************** function _I2C2_MasterTRBInsert *****************
 14734 ;; Defined at:
 14735 ;;		line 641 in file "mcc_generated_files/i2c2.c"
 14736 ;; Parameters:    Size  Location     Type
 14737 ;;  count           1    wreg     unsigned char 
 14738 ;;  ptrb_list       1    1[BANK0 ] PTR struct .
 14739 ;;		 -> I2C2_MasterRead@trBlock(5), I2C2_MasterWrite@trBlock(5), 
 14740 ;;  pflag           1    2[BANK0 ] PTR enum E2993
 14741 ;;		 -> I2C_BufferRead@status(1), I2C_ByteWrite@status(1), 
 14742 ;; Auto vars:     Size  Location     Type
 14743 ;;  count           1    4[BANK0 ] unsigned char 
 14744 ;; Return value:  Size  Location     Type
 14745 ;;                  1    wreg      void 
 14746 ;; Registers used:
 14747 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 14748 ;; Tracked objects:
 14749 ;;		On entry : 0/0
 14750 ;;		On exit  : 0/0
 14751 ;;		Unchanged: 0/0
 14752 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14753 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14754 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14755 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14756 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14757 ;;Total ram usage:        4 bytes
 14758 ;; Hardware stack levels used:    1
 14759 ;; Hardware stack levels required when called:    4
 14760 ;; This function calls:
 14761 ;;		Nothing
 14762 ;; This function is called by:
 14763 ;;		_I2C2_MasterWrite
 14764 ;;		_I2C2_MasterRead
 14765 ;; This function uses a non-reentrant model
 14766 ;;
 14767                           
 14768                           
 14769                           ;psect for function _I2C2_MasterTRBInsert
 14770  099F                     _I2C2_MasterTRBInsert:	
 14771                           
 14772                           ;incstack = 0
 14773                           ; Regs used in _I2C2_MasterTRBInsert: [wreg+fsr1l+fsr1h+status,2+status,0]
 14774                           ;I2C2_MasterTRBInsert@count stored from wreg
 14775  099F  0020               	movlb	0	; select bank0
 14776  09A0  00A4               	movwf	I2C2_MasterTRBInsert@count
 14777                           
 14778                           ;i2c2.c: 648: if (i2c2_object.trStatus.s.full != 1)
 14779  09A1  0021               	movlb	1	; select bank1
 14780  09A2  184C               	btfsc	(_i2c2_object^(0+128)+2),0
 14781  09A3  29E1               	goto	l5531
 14782                           
 14783                           ;i2c2.c: 649: {
 14784                           ;i2c2.c: 650: *pflag = I2C2_MESSAGE_PENDING;
 14785  09A4  3002               	movlw	2
 14786  09A5  0020               	movlb	0	; select bank0
 14787  09A6  00A3               	movwf	??_I2C2_MasterTRBInsert
 14788  09A7  0822               	movf	I2C2_MasterTRBInsert@pflag,w
 14789  09A8  0086               	movwf	6
 14790  09A9  0187               	clrf	7
 14791  09AA  0823               	movf	??_I2C2_MasterTRBInsert,w
 14792  09AB  0081               	movwf	1
 14793                           
 14794                           ;i2c2.c: 652: i2c2_object.pTrTail->ptrb_list = ptrb_list;
 14795  09AC  0821               	movf	I2C2_MasterTRBInsert@ptrb_list,w
 14796  09AD  00A3               	movwf	??_I2C2_MasterTRBInsert
 14797  09AE  0021               	movlb	1	; select bank1
 14798  09AF  0A4A               	incf	_i2c2_object^(0+128),w
 14799  09B0  0086               	movwf	6
 14800  09B1  3001               	movlw	1	; select bank2/3
 14801  09B2  0087               	movwf	7
 14802  09B3  0020               	movlb	0	; select bank0
 14803  09B4  0823               	movf	??_I2C2_MasterTRBInsert,w
 14804  09B5  0081               	movwf	1
 14805                           
 14806                           ;i2c2.c: 653: i2c2_object.pTrTail->count = count;
 14807  09B6  0824               	movf	I2C2_MasterTRBInsert@count,w
 14808  09B7  00A3               	movwf	??_I2C2_MasterTRBInsert
 14809  09B8  0021               	movlb	1	; select bank1
 14810  09B9  084A               	movf	_i2c2_object^(0+128),w
 14811  09BA  0086               	movwf	6
 14812  09BB  3001               	movlw	1	; select bank2/3
 14813  09BC  0087               	movwf	7
 14814  09BD  0020               	movlb	0	; select bank0
 14815  09BE  0823               	movf	??_I2C2_MasterTRBInsert,w
 14816  09BF  0081               	movwf	1
 14817                           
 14818                           ;i2c2.c: 654: i2c2_object.pTrTail->pTrFlag = pflag;
 14819  09C0  0021               	movlb	1	; select bank1
 14820  09C1  084A               	movf	_i2c2_object^(0+128),w
 14821  09C2  3E02               	addlw	2
 14822  09C3  0086               	movwf	6
 14823  09C4  3001               	movlw	1	; select bank2/3
 14824  09C5  0087               	movwf	7
 14825  09C6  0020               	movlb	0	; select bank0
 14826  09C7  0822               	movf	I2C2_MasterTRBInsert@pflag,w
 14827  09C8  3FC0               	movwi [0]fsr1
 14828  09C9  3000               	movlw	0
 14829  09CA  3FC1               	movwi [1]fsr1
 14830                           
 14831                           ;i2c2.c: 655: i2c2_object.pTrTail++;
 14832  09CB  3004               	movlw	4
 14833  09CC  00A3               	movwf	??_I2C2_MasterTRBInsert
 14834  09CD  0823               	movf	??_I2C2_MasterTRBInsert,w
 14835  09CE  0021               	movlb	1	; select bank1
 14836  09CF  07CA               	addwf	_i2c2_object^(0+128),f
 14837                           
 14838                           ;i2c2.c: 658: if (i2c2_object.pTrTail == (i2c2_tr_queue + 1))
 14839  09D0  084A               	movf	_i2c2_object^(0+128),w
 14840  09D1  3A66               	xorlw	(low ((_i2c2_tr_queue| (0+256)+4)))& (0+255)
 14841  09D2  1D03               	skipz
 14842  09D3  29DA               	goto	l5527
 14843                           
 14844                           ;i2c2.c: 659: {
 14845                           ;i2c2.c: 661: i2c2_object.pTrTail = i2c2_tr_queue;
 14846  09D4  3062               	movlw	(low (_i2c2_tr_queue| (0+256)))& (0+255)
 14847  09D5  0020               	movlb	0	; select bank0
 14848  09D6  00A3               	movwf	??_I2C2_MasterTRBInsert
 14849  09D7  0823               	movf	??_I2C2_MasterTRBInsert,w
 14850  09D8  0021               	movlb	1	; select bank1
 14851  09D9  00CA               	movwf	_i2c2_object^(0+128)
 14852  09DA                     l5527:	
 14853                           
 14854                           ;i2c2.c: 662: }
 14855                           ;i2c2.c: 666: i2c2_object.trStatus.s.empty = 0;
 14856  09DA  10CC               	bcf	(_i2c2_object^(0+128)+2),1
 14857                           
 14858                           ;i2c2.c: 669: if (i2c2_object.pTrHead == i2c2_object.pTrTail)
 14859  09DB  084B               	movf	(low ((_i2c2_object| 0+1)))^(0+128),w
 14860  09DC  064A               	xorwf	_i2c2_object^(0+128),w
 14861  09DD  1D03               	skipz
 14862  09DE  29E7               	goto	l5533
 14863                           
 14864                           ;i2c2.c: 670: {
 14865                           ;i2c2.c: 672: i2c2_object.trStatus.s.full = 1;
 14866  09DF  144C               	bsf	(_i2c2_object^(0+128)+2),0
 14867                           
 14868                           ;i2c2.c: 673: }
 14869                           ;i2c2.c: 675: }
 14870  09E0  29E7               	goto	l5533
 14871  09E1                     l5531:	
 14872                           
 14873                           ;i2c2.c: 676: else
 14874                           ;i2c2.c: 677: {
 14875                           ;i2c2.c: 678: *pflag = I2C2_MESSAGE_FAIL;
 14876  09E1  0020               	movlb	0	; select bank0
 14877  09E2  0822               	movf	I2C2_MasterTRBInsert@pflag,w
 14878  09E3  0086               	movwf	6
 14879  09E4  0187               	clrf	7
 14880  09E5  0181               	clrf	1
 14881  09E6  0A81               	incf	1,f
 14882  09E7                     l5533:	
 14883                           
 14884                           ;i2c2.c: 679: }
 14885                           ;i2c2.c: 682: if (*pflag == I2C2_MESSAGE_PENDING)
 14886  09E7  0020               	movlb	0	; select bank0
 14887  09E8  0822               	movf	I2C2_MasterTRBInsert@pflag,w
 14888  09E9  0086               	movwf	6
 14889  09EA  0187               	clrf	7
 14890  09EB  3002               	movlw	2
 14891  09EC  0601               	xorwf	1,w
 14892  09ED  1D03               	btfss	3,2
 14893  09EE  0008               	return
 14894  09EF                     l358:	
 14895                           ;i2c2.c: 685: while(i2c2_state != S_MASTER_IDLE)
 14896                           
 14897                           ;i2c2.c: 683: {
 14898                           ;i2c2.c: 684: PIR4bits.SSP2IF = 1;
 14899                           
 14900                           
 14901                           ;i2c2.c: 686: {
 14902                           ;i2c2.c: 689: PIR4bits.SSP2IF = 1;
 14903  09EF  1414               	bsf	20,0	;volatile
 14904  09F0  0879               	movf	_i2c2_state,w
 14905  09F1  1903               	btfsc	3,2
 14906  09F2  0008               	return
 14907  09F3  29EF               	goto	l358
 14908  09F4                     __end_of_I2C2_MasterTRBInsert:	
 14909                           
 14910                           	psect	text84
 14911  1735                     __ptext84:	
 14912 ;; *************** function _I2C2_MasterReadTRBBuild *****************
 14913 ;; Defined at:
 14914 ;;		line 695 in file "mcc_generated_files/i2c2.c"
 14915 ;; Parameters:    Size  Location     Type
 14916 ;;  ptrb            1    wreg     PTR struct .
 14917 ;;		 -> I2C2_MasterRead@trBlock(5), 
 14918 ;;  pdata           2    1[BANK0 ] PTR unsigned char 
 14919 ;;		 -> data(8), b1(24), HMC5883L_ReadBit@tmp(1), HMC5883L_ReadBits@tmp(1), 
 14920 ;;		 -> HMC5883L_WriteBit@tmp(1), HMC5883L_WriteBits@tmp(1), heading(8), HMC5883L_TestConnection@tmp(3), 
 14921 ;;		 -> MPU6050_ReadBit@tmp(1), MPU6050_ReadBits@tmp(1), MPU6050_WriteBit@tmp(1), MPU6050_WriteBits@tmp(1), 
 14922 ;;		 -> MPU6050_GetRawAccel@tempBuffer(6), MPU6050_GetRawAccelGyro@tmpBuffer(14), 
 14923 ;;  length          1    3[BANK0 ] unsigned char 
 14924 ;;  address         2    4[BANK0 ] unsigned int 
 14925 ;; Auto vars:     Size  Location     Type
 14926 ;;  ptrb            1    8[BANK0 ] PTR struct .
 14927 ;;		 -> I2C2_MasterRead@trBlock(5), 
 14928 ;; Return value:  Size  Location     Type
 14929 ;;                  1    wreg      void 
 14930 ;; Registers used:
 14931 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 14932 ;; Tracked objects:
 14933 ;;		On entry : 0/0
 14934 ;;		On exit  : 0/0
 14935 ;;		Unchanged: 0/0
 14936 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14937 ;;      Params:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14938 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14939 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14940 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14941 ;;Total ram usage:        8 bytes
 14942 ;; Hardware stack levels used:    1
 14943 ;; Hardware stack levels required when called:    4
 14944 ;; This function calls:
 14945 ;;		Nothing
 14946 ;; This function is called by:
 14947 ;;		_I2C2_MasterRead
 14948 ;; This function uses a non-reentrant model
 14949 ;;
 14950                           
 14951                           
 14952                           ;psect for function _I2C2_MasterReadTRBBuild
 14953  1735                     _I2C2_MasterReadTRBBuild:	
 14954                           
 14955                           ;incstack = 0
 14956                           ; Regs used in _I2C2_MasterReadTRBBuild: [wreg+fsr1l+fsr1h+status,2+status,0]
 14957                           ;I2C2_MasterReadTRBBuild@ptrb stored from wreg
 14958  1735  0020               	movlb	0	; select bank0
 14959  1736  00A8               	movwf	I2C2_MasterReadTRBBuild@ptrb
 14960                           
 14961                           ;i2c2.c: 701: ptrb->address = address << 1;
 14962  1737  0825               	movf	I2C2_MasterReadTRBBuild@address+1,w
 14963  1738  00A7               	movwf	??_I2C2_MasterReadTRBBuild+1
 14964  1739  0824               	movf	I2C2_MasterReadTRBBuild@address,w
 14965  173A  00A6               	movwf	??_I2C2_MasterReadTRBBuild
 14966  173B  35A6               	lslf	??_I2C2_MasterReadTRBBuild,f
 14967  173C  0DA7               	rlf	??_I2C2_MasterReadTRBBuild+1,f
 14968  173D  0828               	movf	I2C2_MasterReadTRBBuild@ptrb,w
 14969  173E  0086               	movwf	6
 14970  173F  3001               	movlw	1	; select bank2/3
 14971  1740  0087               	movwf	7
 14972  1741  0826               	movf	??_I2C2_MasterReadTRBBuild,w
 14973  1742  3FC0               	movwi [0]fsr1
 14974  1743  0827               	movf	??_I2C2_MasterReadTRBBuild+1,w
 14975  1744  3FC1               	movwi [1]fsr1
 14976                           
 14977                           ;i2c2.c: 703: ptrb->address |= 0x01;
 14978  1745  0828               	movf	I2C2_MasterReadTRBBuild@ptrb,w
 14979  1746  0086               	movwf	6
 14980  1747  3001               	movlw	1	; select bank2/3
 14981  1748  0087               	movwf	7
 14982  1749  3001               	movlw	1
 14983  174A  0481               	iorwf	1,f
 14984  174B  3141               	addfsr 1,1
 14985  174C  3000               	movlw	0
 14986  174D  0481               	iorwf	1,f
 14987                           
 14988                           ;i2c2.c: 704: ptrb->length = length;
 14989  174E  0823               	movf	I2C2_MasterReadTRBBuild@length,w
 14990  174F  00A6               	movwf	??_I2C2_MasterReadTRBBuild
 14991  1750  0828               	movf	I2C2_MasterReadTRBBuild@ptrb,w
 14992  1751  3E02               	addlw	2
 14993  1752  0086               	movwf	6
 14994  1753  3001               	movlw	1	; select bank2/3
 14995  1754  0087               	movwf	7
 14996  1755  0826               	movf	??_I2C2_MasterReadTRBBuild,w
 14997  1756  0081               	movwf	1
 14998                           
 14999                           ;i2c2.c: 705: ptrb->pbuffer = pdata;
 15000  1757  0828               	movf	I2C2_MasterReadTRBBuild@ptrb,w
 15001  1758  3E03               	addlw	3
 15002  1759  0086               	movwf	6
 15003  175A  3001               	movlw	1	; select bank2/3
 15004  175B  0087               	movwf	7
 15005  175C  0821               	movf	I2C2_MasterReadTRBBuild@pdata,w
 15006  175D  3FC0               	movwi [0]fsr1
 15007  175E  0822               	movf	I2C2_MasterReadTRBBuild@pdata+1,w
 15008  175F  3FC1               	movwi [1]fsr1
 15009  1760  0008               	return
 15010  1761                     __end_of_I2C2_MasterReadTRBBuild:	
 15011                           
 15012                           	psect	text85
 15013  12EA                     __ptext85:	
 15014 ;; *************** function _Diag_setTempSensorHealth *****************
 15015 ;; Defined at:
 15016 ;;		line 15 in file "diagnostics.c"
 15017 ;; Parameters:    Size  Location     Type
 15018 ;;  health          1    wreg     unsigned char 
 15019 ;; Auto vars:     Size  Location     Type
 15020 ;;  health          1    2[BANK0 ] unsigned char 
 15021 ;; Return value:  Size  Location     Type
 15022 ;;                  1    wreg      void 
 15023 ;; Registers used:
 15024 ;;		wreg
 15025 ;; Tracked objects:
 15026 ;;		On entry : 0/0
 15027 ;;		On exit  : 0/0
 15028 ;;		Unchanged: 0/0
 15029 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15030 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15031 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15032 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15033 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15034 ;;Total ram usage:        2 bytes
 15035 ;; Hardware stack levels used:    1
 15036 ;; Hardware stack levels required when called:    4
 15037 ;; This function calls:
 15038 ;;		Nothing
 15039 ;; This function is called by:
 15040 ;;		_BMP_init
 15041 ;;		_BMP_readTemperature
 15042 ;; This function uses a non-reentrant model
 15043 ;;
 15044                           
 15045                           
 15046                           ;psect for function _Diag_setTempSensorHealth
 15047  12EA                     _Diag_setTempSensorHealth:	
 15048                           
 15049                           ;incstack = 0
 15050                           ; Regs used in _Diag_setTempSensorHealth: [wreg]
 15051                           ;Diag_setTempSensorHealth@health stored from wreg
 15052  12EA  0020               	movlb	0	; select bank0
 15053  12EB  00A2               	movwf	Diag_setTempSensorHealth@health
 15054                           
 15055                           ;diagnostics.c: 17: sensorHealth.tempSensorHealth=health;
 15056  12EC  0822               	movf	Diag_setTempSensorHealth@health,w
 15057  12ED  00A1               	movwf	??_Diag_setTempSensorHealth
 15058  12EE  0821               	movf	??_Diag_setTempSensorHealth,w
 15059  12EF  0021               	movlb	1	; select bank1
 15060  12F0  00E3               	movwf	_sensorHealth^(0+128)
 15061  12F1  0008               	return
 15062  12F2                     __end_of_Diag_setTempSensorHealth:	
 15063                           
 15064                           	psect	intentry
 15065  0004                     __pintentry:	
 15066 ;; *************** function _INTERRUPT_InterruptManager *****************
 15067 ;; Defined at:
 15068 ;;		line 51 in file "mcc_generated_files/interrupt_manager.c"
 15069 ;; Parameters:    Size  Location     Type
 15070 ;;		None
 15071 ;; Auto vars:     Size  Location     Type
 15072 ;;		None
 15073 ;; Return value:  Size  Location     Type
 15074 ;;                  1    wreg      void 
 15075 ;; Registers used:
 15076 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15077 ;; Tracked objects:
 15078 ;;		On entry : 0/0
 15079 ;;		On exit  : 0/0
 15080 ;;		Unchanged: 0/0
 15081 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15082 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15083 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15084 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15085 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15086 ;;Total ram usage:        1 bytes
 15087 ;; Hardware stack levels used:    1
 15088 ;; Hardware stack levels required when called:    3
 15089 ;; This function calls:
 15090 ;;		_I2C2_BusCollisionISR
 15091 ;;		_I2C2_ISR
 15092 ;;		_PIN_MANAGER_IOC
 15093 ;;		_TMR1_ISR
 15094 ;; This function is called by:
 15095 ;;		Interrupt level 1
 15096 ;; This function uses a non-reentrant model
 15097 ;;
 15098                           
 15099  0004                     _INTERRUPT_InterruptManager:	
 15100                           
 15101                           ;incstack = 0
 15102  0004  147E               	bsf	126,0	;set compiler interrupt flag (level 1)
 15103                           
 15104                           ; Regs used in _INTERRUPT_InterruptManager: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 15105  0005  3180               	pagesel	$
 15106  0006  0020               	movlb	0	; select bank0
 15107  0007  087F               	movf	127,w
 15108  0008  00A0               	movwf	??_INTERRUPT_InterruptManager
 15109                           
 15110                           ;interrupt_manager.c: 54: if(INTCONbits.PEIE == 1 && PIE4bits.BCL2IE == 1 && PIR4bits.BC
      +                          L2IF == 1)
 15111  0009  1F0B               	btfss	11,6	;volatile
 15112  000A  2815               	goto	i1l153
 15113  000B  0021               	movlb	1	; select bank1
 15114  000C  1C94               	btfss	20,1	;volatile
 15115  000D  2815               	goto	i1l153
 15116  000E  0020               	movlb	0	; select bank0
 15117  000F  1C94               	btfss	20,1	;volatile
 15118  0010  2815               	goto	i1l153
 15119                           
 15120                           ;interrupt_manager.c: 55: {
 15121                           ;interrupt_manager.c: 56: I2C2_BusCollisionISR();
 15122  0011  3188  2001  3180   	fcall	_I2C2_BusCollisionISR
 15123                           
 15124                           ;interrupt_manager.c: 57: }
 15125  0014  2832               	goto	i1l161
 15126  0015                     i1l153:	
 15127                           
 15128                           ;interrupt_manager.c: 58: else if(INTCONbits.PEIE == 1 && PIE4bits.SSP2IE == 1 && PIR4bi
      +                          ts.SSP2IF == 1)
 15129  0015  1F0B               	btfss	11,6	;volatile
 15130  0016  2821               	goto	i1l155
 15131  0017  0021               	movlb	1	; select bank1
 15132  0018  1C14               	btfss	20,0	;volatile
 15133  0019  2821               	goto	i1l155
 15134  001A  0020               	movlb	0	; select bank0
 15135  001B  1C14               	btfss	20,0	;volatile
 15136  001C  2821               	goto	i1l155
 15137                           
 15138                           ;interrupt_manager.c: 59: {
 15139                           ;interrupt_manager.c: 60: I2C2_ISR();
 15140  001D  3185  2544  3180   	fcall	_I2C2_ISR
 15141                           
 15142                           ;interrupt_manager.c: 61: }
 15143  0020  2832               	goto	i1l161
 15144  0021                     i1l155:	
 15145                           
 15146                           ;interrupt_manager.c: 62: else if(INTCONbits.PEIE == 1 && PIE1bits.TMR1IE == 1 && PIR1bi
      +                          ts.TMR1IF == 1)
 15147  0021  1F0B               	btfss	11,6	;volatile
 15148  0022  282D               	goto	i1l157
 15149  0023  0021               	movlb	1	; select bank1
 15150  0024  1C11               	btfss	17,0	;volatile
 15151  0025  282D               	goto	i1l157
 15152  0026  0020               	movlb	0	; select bank0
 15153  0027  1C11               	btfss	17,0	;volatile
 15154  0028  282D               	goto	i1l157
 15155                           
 15156                           ;interrupt_manager.c: 63: {
 15157                           ;interrupt_manager.c: 64: TMR1_ISR();
 15158  0029  3193  2302  3180   	fcall	_TMR1_ISR
 15159                           
 15160                           ;interrupt_manager.c: 65: }
 15161  002C  2832               	goto	i1l161
 15162  002D                     i1l157:	
 15163                           
 15164                           ;interrupt_manager.c: 66: else if(INTCONbits.IOCIE == 1 && INTCONbits.IOCIF == 1)
 15165  002D  198B               	btfsc	11,3	;volatile
 15166  002E  1C0B               	btfss	11,0	;volatile
 15167  002F  2832               	goto	i1l161
 15168                           
 15169                           ;interrupt_manager.c: 67: {
 15170                           ;interrupt_manager.c: 68: PIN_MANAGER_IOC();
 15171  0030  3192  22BD         	fcall	_PIN_MANAGER_IOC
 15172  0032                     i1l161:	
 15173                           ;interrupt_manager.c: 70: else
 15174                           ;interrupt_manager.c: 71: {
 15175                           
 15176                           ;interrupt_manager.c: 69: }
 15177                           
 15178  0032  0020               	movlb	0	; select bank0
 15179  0033  0820               	movf	??_INTERRUPT_InterruptManager,w
 15180  0034  00FF               	movwf	127
 15181  0035  107E               	bcf	126,0	;clear compiler interrupt flag (level 1)
 15182  0036  0009               	retfie
 15183  0037                     __end_of_INTERRUPT_InterruptManager:	
 15184                           
 15185                           	psect	text87
 15186  1302                     __ptext87:	
 15187 ;; *************** function _TMR1_ISR *****************
 15188 ;; Defined at:
 15189 ;;		line 157 in file "mcc_generated_files/tmr1.c"
 15190 ;; Parameters:    Size  Location     Type
 15191 ;;		None
 15192 ;; Auto vars:     Size  Location     Type
 15193 ;;		None
 15194 ;; Return value:  Size  Location     Type
 15195 ;;                  1    wreg      void 
 15196 ;; Registers used:
 15197 ;;		wreg, status,2, status,0, pclath, cstack
 15198 ;; Tracked objects:
 15199 ;;		On entry : 0/0
 15200 ;;		On exit  : 0/0
 15201 ;;		Unchanged: 0/0
 15202 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15203 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15204 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15205 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15206 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15207 ;;Total ram usage:        0 bytes
 15208 ;; Hardware stack levels used:    1
 15209 ;; Hardware stack levels required when called:    2
 15210 ;; This function calls:
 15211 ;;		_TMR1_CallBack
 15212 ;; This function is called by:
 15213 ;;		_INTERRUPT_InterruptManager
 15214 ;; This function uses a non-reentrant model
 15215 ;;
 15216                           
 15217                           
 15218                           ;psect for function _TMR1_ISR
 15219  1302                     _TMR1_ISR:	
 15220                           
 15221                           ;tmr1.c: 161: PIR1bits.TMR1IF = 0;
 15222                           
 15223                           ;incstack = 0
 15224                           ; Regs used in _TMR1_ISR: [wreg+status,2+status,0+pclath+cstack]
 15225  1302  0020               	movlb	0	; select bank0
 15226  1303  1011               	bcf	17,0	;volatile
 15227                           
 15228                           ;tmr1.c: 163: TMR1H = (timer1ReloadVal >> 8);
 15229  1304  087D               	movf	_timer1ReloadVal+1,w	;volatile
 15230  1305  0097               	movwf	23	;volatile
 15231                           
 15232                           ;tmr1.c: 164: TMR1L = timer1ReloadVal;
 15233  1306  087C               	movf	_timer1ReloadVal,w	;volatile
 15234  1307  0096               	movwf	22	;volatile
 15235                           
 15236                           ;tmr1.c: 168: TMR1_CallBack();
 15237  1308  3193  235F         	fcall	_TMR1_CallBack
 15238  130A  0008               	return
 15239  130B                     __end_of_TMR1_ISR:	
 15240                           
 15241                           	psect	text88
 15242  135F                     __ptext88:	
 15243 ;; *************** function _TMR1_CallBack *****************
 15244 ;; Defined at:
 15245 ;;		line 171 in file "mcc_generated_files/tmr1.c"
 15246 ;; Parameters:    Size  Location     Type
 15247 ;;		None
 15248 ;; Auto vars:     Size  Location     Type
 15249 ;;		None
 15250 ;; Return value:  Size  Location     Type
 15251 ;;                  1    wreg      void 
 15252 ;; Registers used:
 15253 ;;		wreg, status,2, status,0, pclath, cstack
 15254 ;; Tracked objects:
 15255 ;;		On entry : 0/0
 15256 ;;		On exit  : 0/0
 15257 ;;		Unchanged: 0/0
 15258 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15259 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15260 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15261 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15262 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15263 ;;Total ram usage:        0 bytes
 15264 ;; Hardware stack levels used:    1
 15265 ;; Hardware stack levels required when called:    1
 15266 ;; This function calls:
 15267 ;;		Absolute function
 15268 ;;		_TMR1_DefaultInterruptHandler
 15269 ;;		_Timeout_increment
 15270 ;; This function is called by:
 15271 ;;		_TMR1_ISR
 15272 ;; This function uses a non-reentrant model
 15273 ;;
 15274                           
 15275                           
 15276                           ;psect for function _TMR1_CallBack
 15277  135F                     _TMR1_CallBack:	
 15278                           
 15279                           ;tmr1.c: 174: Timeout_increment();
 15280                           
 15281                           ;incstack = 0
 15282                           ; Regs used in _TMR1_CallBack: [wreg+status,2+status,0+pclath+cstack]
 15283  135F  3193  232F  3193   	fcall	_Timeout_increment
 15284                           
 15285                           ;tmr1.c: 175: if(TMR1_InterruptHandler)
 15286  1362  0022               	movlb	2	; select bank2
 15287  1363  0866               	movf	_TMR1_InterruptHandler^(0+256),w
 15288  1364  0467               	iorwf	(_TMR1_InterruptHandler+1)^(0+256),w
 15289  1365  1903               	btfsc	3,2
 15290  1366  0008               	return
 15291                           
 15292                           ;tmr1.c: 176: {
 15293                           ;tmr1.c: 177: TMR1_InterruptHandler();
 15294  1367  0867               	movf	(_TMR1_InterruptHandler+1)^(0+256),w
 15295  1368  008A               	movwf	10
 15296  1369  0866               	movf	_TMR1_InterruptHandler^(0+256),w
 15297  136A  000A               	callw
 15298  136B  3193               	pagesel	$
 15299  136C  0008               	return
 15300  136D                     __end_of_TMR1_CallBack:	
 15301                           
 15302                           	psect	text89
 15303  132F                     __ptext89:	
 15304 ;; *************** function _Timeout_increment *****************
 15305 ;; Defined at:
 15306 ;;		line 8 in file "timeout.c"
 15307 ;; Parameters:    Size  Location     Type
 15308 ;;		None
 15309 ;; Auto vars:     Size  Location     Type
 15310 ;;		None
 15311 ;; Return value:  Size  Location     Type
 15312 ;;                  1    wreg      void 
 15313 ;; Registers used:
 15314 ;;		wreg
 15315 ;; Tracked objects:
 15316 ;;		On entry : 0/0
 15317 ;;		On exit  : 0/0
 15318 ;;		Unchanged: 0/0
 15319 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15320 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15321 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15322 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15323 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15324 ;;Total ram usage:        0 bytes
 15325 ;; Hardware stack levels used:    1
 15326 ;; This function calls:
 15327 ;;		Nothing
 15328 ;; This function is called by:
 15329 ;;		_TMR1_CallBack
 15330 ;; This function uses a non-reentrant model
 15331 ;;
 15332                           
 15333                           
 15334                           ;psect for function _Timeout_increment
 15335  132F                     _Timeout_increment:	
 15336                           
 15337                           ;timeout.c: 10: globalCounter+=10000;
 15338                           
 15339                           ;incstack = 0
 15340                           ; Regs used in _Timeout_increment: [wreg]
 15341  132F  3010               	movlw	16
 15342  1330  0021               	movlb	1	; select bank1
 15343  1331  07CF               	addwf	_globalCounter^(0+128),f	;volatile
 15344  1332  3027               	movlw	39
 15345  1333  3DD0               	addwfc	(_globalCounter+1)^(0+128),f	;volatile
 15346  1334  3000               	movlw	0
 15347  1335  3DD1               	addwfc	(_globalCounter+2)^(0+128),f	;volatile
 15348  1336  3000               	movlw	0
 15349  1337  3DD2               	addwfc	(_globalCounter+3)^(0+128),f	;volatile
 15350  1338  0008               	return
 15351  1339                     __end_of_Timeout_increment:	
 15352                           
 15353                           	psect	text90
 15354  07FF                     __ptext90:	
 15355 ;; *************** function _TMR1_DefaultInterruptHandler *****************
 15356 ;; Defined at:
 15357 ;;		line 185 in file "mcc_generated_files/tmr1.c"
 15358 ;; Parameters:    Size  Location     Type
 15359 ;;		None
 15360 ;; Auto vars:     Size  Location     Type
 15361 ;;		None
 15362 ;; Return value:  Size  Location     Type
 15363 ;;                  1    wreg      void 
 15364 ;; Registers used:
 15365 ;;		None
 15366 ;; Tracked objects:
 15367 ;;		On entry : 0/0
 15368 ;;		On exit  : 0/0
 15369 ;;		Unchanged: 0/0
 15370 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15371 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15372 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15373 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15374 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15375 ;;Total ram usage:        0 bytes
 15376 ;; Hardware stack levels used:    1
 15377 ;; This function calls:
 15378 ;;		Nothing
 15379 ;; This function is called by:
 15380 ;;		_TMR1_Initialize
 15381 ;;		_TMR1_CallBack
 15382 ;; This function uses a non-reentrant model
 15383 ;;
 15384                           
 15385                           
 15386                           ;psect for function _TMR1_DefaultInterruptHandler
 15387  07FF                     _TMR1_DefaultInterruptHandler:	
 15388                           
 15389                           ;incstack = 0
 15390                           ; Regs used in _TMR1_DefaultInterruptHandler: []
 15391  07FF  0008               	return
 15392  0800                     __end_of_TMR1_DefaultInterruptHandler:	
 15393                           
 15394                           	psect	text91
 15395  12BD                     __ptext91:	
 15396 ;; *************** function _PIN_MANAGER_IOC *****************
 15397 ;; Defined at:
 15398 ;;		line 110 in file "mcc_generated_files/pin_manager.c"
 15399 ;; Parameters:    Size  Location     Type
 15400 ;;		None
 15401 ;; Auto vars:     Size  Location     Type
 15402 ;;		None
 15403 ;; Return value:  Size  Location     Type
 15404 ;;                  1    wreg      void 
 15405 ;; Registers used:
 15406 ;;		wreg, status,2, status,0, pclath, cstack
 15407 ;; Tracked objects:
 15408 ;;		On entry : 0/0
 15409 ;;		On exit  : 0/0
 15410 ;;		Unchanged: 0/0
 15411 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15412 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15413 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15414 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15415 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15416 ;;Total ram usage:        0 bytes
 15417 ;; Hardware stack levels used:    1
 15418 ;; Hardware stack levels required when called:    2
 15419 ;; This function calls:
 15420 ;;		_IOCAF2_ISR
 15421 ;; This function is called by:
 15422 ;;		_INTERRUPT_InterruptManager
 15423 ;; This function uses a non-reentrant model
 15424 ;;
 15425                           
 15426                           
 15427                           ;psect for function _PIN_MANAGER_IOC
 15428  12BD                     _PIN_MANAGER_IOC:	
 15429                           
 15430                           ;pin_manager.c: 113: if(IOCAFbits.IOCAF2 == 1)
 15431                           
 15432                           ;incstack = 0
 15433                           ; Regs used in _PIN_MANAGER_IOC: [wreg+status,2+status,0+pclath+cstack]
 15434  12BD  0027               	movlb	7	; select bank7
 15435  12BE  1D13               	btfss	19,2	;volatile
 15436  12BF  0008               	return
 15437                           
 15438                           ;pin_manager.c: 114: {
 15439                           ;pin_manager.c: 115: IOCAF2_ISR();
 15440  12C0  3193  2345         	fcall	_IOCAF2_ISR
 15441  12C2  0008               	return
 15442  12C3                     __end_of_PIN_MANAGER_IOC:	
 15443                           
 15444                           	psect	text92
 15445  1345                     __ptext92:	
 15446 ;; *************** function _IOCAF2_ISR *****************
 15447 ;; Defined at:
 15448 ;;		line 124 in file "mcc_generated_files/pin_manager.c"
 15449 ;; Parameters:    Size  Location     Type
 15450 ;;		None
 15451 ;; Auto vars:     Size  Location     Type
 15452 ;;		None
 15453 ;; Return value:  Size  Location     Type
 15454 ;;                  1    wreg      void 
 15455 ;; Registers used:
 15456 ;;		wreg, status,2, status,0, pclath, cstack
 15457 ;; Tracked objects:
 15458 ;;		On entry : 0/0
 15459 ;;		On exit  : 0/0
 15460 ;;		Unchanged: 0/0
 15461 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15462 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15463 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15464 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15465 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15466 ;;Total ram usage:        0 bytes
 15467 ;; Hardware stack levels used:    1
 15468 ;; Hardware stack levels required when called:    1
 15469 ;; This function calls:
 15470 ;;		Absolute function
 15471 ;;		_IOCAF2_DefaultInterruptHandler
 15472 ;; This function is called by:
 15473 ;;		_PIN_MANAGER_IOC
 15474 ;; This function uses a non-reentrant model
 15475 ;;
 15476                           
 15477                           
 15478                           ;psect for function _IOCAF2_ISR
 15479  1345                     _IOCAF2_ISR:	
 15480                           
 15481                           ;pin_manager.c: 129: if(IOCAF2_InterruptHandler)
 15482                           
 15483                           ;incstack = 0
 15484                           ; Regs used in _IOCAF2_ISR: [wreg+status,2+status,0+pclath+cstack]
 15485  1345  0022               	movlb	2	; select bank2
 15486  1346  0868               	movf	_IOCAF2_InterruptHandler^(0+256),w
 15487  1347  0469               	iorwf	(_IOCAF2_InterruptHandler+1)^(0+256),w
 15488  1348  1903               	btfsc	3,2
 15489  1349  2B4F               	goto	i1l4295
 15490                           
 15491                           ;pin_manager.c: 130: {
 15492                           ;pin_manager.c: 131: IOCAF2_InterruptHandler();
 15493  134A  0869               	movf	(_IOCAF2_InterruptHandler+1)^(0+256),w
 15494  134B  008A               	movwf	10
 15495  134C  0868               	movf	_IOCAF2_InterruptHandler^(0+256),w
 15496  134D  000A               	callw
 15497  134E  3193               	pagesel	$
 15498  134F                     i1l4295:	
 15499                           
 15500                           ;pin_manager.c: 132: }
 15501                           ;pin_manager.c: 133: IOCAFbits.IOCAF2 = 0;
 15502  134F  0027               	movlb	7	; select bank7
 15503  1350  1113               	bcf	19,2	;volatile
 15504  1351  0008               	return
 15505  1352                     __end_of_IOCAF2_ISR:	
 15506                           
 15507                           	psect	text93
 15508  0003                     __ptext93:	
 15509 ;; *************** function _IOCAF2_DefaultInterruptHandler *****************
 15510 ;; Defined at:
 15511 ;;		line 146 in file "mcc_generated_files/pin_manager.c"
 15512 ;; Parameters:    Size  Location     Type
 15513 ;;		None
 15514 ;; Auto vars:     Size  Location     Type
 15515 ;;		None
 15516 ;; Return value:  Size  Location     Type
 15517 ;;                  1    wreg      void 
 15518 ;; Registers used:
 15519 ;;		None
 15520 ;; Tracked objects:
 15521 ;;		On entry : 0/0
 15522 ;;		On exit  : 0/0
 15523 ;;		Unchanged: 0/0
 15524 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15525 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15526 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15527 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15528 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15529 ;;Total ram usage:        0 bytes
 15530 ;; Hardware stack levels used:    1
 15531 ;; This function calls:
 15532 ;;		Nothing
 15533 ;; This function is called by:
 15534 ;;		_PIN_MANAGER_Initialize
 15535 ;;		_IOCAF2_ISR
 15536 ;; This function uses a non-reentrant model
 15537 ;;
 15538                           
 15539                           
 15540                           ;psect for function _IOCAF2_DefaultInterruptHandler
 15541  0003                     _IOCAF2_DefaultInterruptHandler:	
 15542                           
 15543                           ;incstack = 0
 15544                           ; Regs used in _IOCAF2_DefaultInterruptHandler: []
 15545  0003  0008               	return
 15546  0004                     __end_of_IOCAF2_DefaultInterruptHandler:	
 15547                           
 15548                           	psect	text94
 15549  0544                     __ptext94:	
 15550 ;; *************** function _I2C2_ISR *****************
 15551 ;; Defined at:
 15552 ;;		line 233 in file "mcc_generated_files/i2c2.c"
 15553 ;; Parameters:    Size  Location     Type
 15554 ;;		None
 15555 ;; Auto vars:     Size  Location     Type
 15556 ;;		None
 15557 ;; Return value:  Size  Location     Type
 15558 ;;                  1    wreg      void 
 15559 ;; Registers used:
 15560 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15561 ;; Tracked objects:
 15562 ;;		On entry : 0/0
 15563 ;;		On exit  : 0/0
 15564 ;;		Unchanged: 0/0
 15565 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15566 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15567 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15568 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15569 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15570 ;;Total ram usage:        4 bytes
 15571 ;; Hardware stack levels used:    1
 15572 ;; Hardware stack levels required when called:    1
 15573 ;; This function calls:
 15574 ;;		_I2C2_FunctionComplete
 15575 ;;		_I2C2_Stop
 15576 ;; This function is called by:
 15577 ;;		_INTERRUPT_InterruptManager
 15578 ;; This function uses a non-reentrant model
 15579 ;;
 15580                           
 15581                           
 15582                           ;psect for function _I2C2_ISR
 15583  0544                     _I2C2_ISR:	
 15584                           
 15585                           ;i2c2.c: 236: static uint8_t *pi2c_buf_ptr;
 15586                           ;i2c2.c: 237: static uint16_t i2c_address = 0;
 15587                           ;i2c2.c: 238: static uint8_t i2c_bytes_left = 0;
 15588                           ;i2c2.c: 239: static uint8_t i2c_10bit_address_restart = 0;
 15589                           ;i2c2.c: 241: PIR4bits.SSP2IF = 0;
 15590                           
 15591                           ;incstack = 0
 15592                           ; Regs used in _I2C2_ISR: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 15593  0544  0020               	movlb	0	; select bank0
 15594  0545  1014               	bcf	20,0	;volatile
 15595                           
 15596                           ;i2c2.c: 245: if(SSP2CON1bits.WCOL)
 15597  0546  0024               	movlb	4	; select bank4
 15598  0547  1F9D               	btfss	29,7	;volatile
 15599  0548  2E82               	goto	i1l4879
 15600                           
 15601                           ;i2c2.c: 246: {
 15602                           ;i2c2.c: 248: SSP2CON1bits.WCOL = 0;
 15603  0549  139D               	bcf	29,7	;volatile
 15604                           
 15605                           ;i2c2.c: 249: i2c2_state = S_MASTER_IDLE;
 15606  054A  01F9               	clrf	_i2c2_state
 15607                           
 15608                           ;i2c2.c: 250: *(p_i2c2_current->pTrFlag) = I2C2_MESSAGE_FAIL;
 15609  054B  0877               	movf	_p_i2c2_current,w
 15610  054C  3E02               	addlw	2
 15611  054D  0086               	movwf	6
 15612  054E  3001               	movlw	1	; select bank2/3
 15613  054F  0087               	movwf	7
 15614  0550  3F40               	moviw [0]fsr1
 15615  0551  00F3               	movwf	??_I2C2_ISR
 15616  0552  3F41               	moviw [1]fsr1
 15617  0553  00F4               	movwf	??_I2C2_ISR+1
 15618  0554  0873               	movf	??_I2C2_ISR,w
 15619  0555  0086               	movwf	6
 15620  0556  0874               	movf	??_I2C2_ISR+1,w
 15621  0557  0087               	movwf	7
 15622  0558  3001               	movlw	1
 15623  0559  0081               	movwf	1
 15624                           
 15625                           ;i2c2.c: 253: p_i2c2_current = (0);
 15626  055A  01F7               	clrf	_p_i2c2_current
 15627                           
 15628                           ;i2c2.c: 255: return;
 15629  055B  0008               	return
 15630  055C                     i1l288:	
 15631                           ;i2c2.c: 260: {
 15632                           ;i2c2.c: 261: case S_MASTER_IDLE:
 15633                           
 15634                           ;i2c2.c: 256: }
 15635                           ;i2c2.c: 259: switch(i2c2_state)
 15636                           
 15637                           
 15638                           ;i2c2.c: 263: if(i2c2_object.trStatus.s.empty != 1)
 15639  055C  0021               	movlb	1	; select bank1
 15640  055D  18CC               	btfsc	(_i2c2_object^(0+128)+2),1
 15641  055E  0008               	return
 15642                           
 15643                           ;i2c2.c: 264: {
 15644                           ;i2c2.c: 266: p_i2c2_current = i2c2_object.pTrHead;
 15645  055F  084B               	movf	(low ((_i2c2_object| 0+1)))^(0+128),w
 15646  0560  00F3               	movwf	??_I2C2_ISR
 15647  0561  0873               	movf	??_I2C2_ISR,w
 15648  0562  00F7               	movwf	_p_i2c2_current
 15649                           
 15650                           ;i2c2.c: 267: i2c2_trb_count = i2c2_object.pTrHead->count;
 15651  0563  084B               	movf	(low ((_i2c2_object| 0+1)))^(0+128),w
 15652  0564  0086               	movwf	6
 15653  0565  3001               	movlw	1	; select bank2/3
 15654  0566  0087               	movwf	7
 15655  0567  0801               	movf	1,w
 15656  0568  00F3               	movwf	??_I2C2_ISR
 15657  0569  0873               	movf	??_I2C2_ISR,w
 15658  056A  00E2               	movwf	_i2c2_trb_count^(0+128)
 15659                           
 15660                           ;i2c2.c: 268: p_i2c2_trb_current = i2c2_object.pTrHead->ptrb_list;
 15661  056B  084B               	movf	(low ((_i2c2_object| 0+1)))^(0+128),w
 15662  056C  0086               	movwf	6
 15663  056D  3001               	movlw	1	; select bank2/3
 15664  056E  0087               	movwf	7
 15665  056F  3001               	movlw	1	; select bank2/3
 15666  0570  3F41               	moviw [1]fsr1
 15667  0571  00F8               	movwf	_p_i2c2_trb_current
 15668                           
 15669                           ;i2c2.c: 270: i2c2_object.pTrHead++;
 15670  0572  3004               	movlw	4
 15671  0573  00F3               	movwf	??_I2C2_ISR
 15672  0574  0873               	movf	??_I2C2_ISR,w
 15673  0575  07CB               	addwf	(low ((_i2c2_object| 0+1)))^(0+128),f
 15674                           
 15675                           ;i2c2.c: 273: if(i2c2_object.pTrHead == (i2c2_tr_queue + 1))
 15676  0576  084B               	movf	(low ((_i2c2_object| 0+1)))^(0+128),w
 15677  0577  3A66               	xorlw	(low ((_i2c2_tr_queue| (0+256)+4)))& (0+255)
 15678  0578  1D03               	skipz
 15679  0579  2D7E               	goto	i1l4769
 15680                           
 15681                           ;i2c2.c: 274: {
 15682                           ;i2c2.c: 276: i2c2_object.pTrHead = i2c2_tr_queue;
 15683  057A  3062               	movlw	(low (_i2c2_tr_queue| (0+256)))& (0+255)
 15684  057B  00F3               	movwf	??_I2C2_ISR
 15685  057C  0873               	movf	??_I2C2_ISR,w
 15686  057D  00CB               	movwf	(low ((_i2c2_object| 0+1)))^(0+128)
 15687  057E                     i1l4769:	
 15688                           
 15689                           ;i2c2.c: 277: }
 15690                           ;i2c2.c: 281: i2c2_object.trStatus.s.full = 0;
 15691  057E  104C               	bcf	(_i2c2_object^(0+128)+2),0
 15692                           
 15693                           ;i2c2.c: 284: if(i2c2_object.pTrHead == i2c2_object.pTrTail)
 15694  057F  084B               	movf	(low ((_i2c2_object| 0+1)))^(0+128),w
 15695  0580  064A               	xorwf	_i2c2_object^(0+128),w
 15696  0581  1903               	btfsc	3,2
 15697                           
 15698                           ;i2c2.c: 285: {
 15699                           ;i2c2.c: 287: i2c2_object.trStatus.s.empty = 1;
 15700  0582  14CC               	bsf	(_i2c2_object^(0+128)+2),1
 15701                           
 15702                           ;i2c2.c: 288: }
 15703                           ;i2c2.c: 291: SSP2CON2bits.SEN = 1;
 15704  0583  0024               	movlb	4	; select bank4
 15705  0584  141E               	bsf	30,0	;volatile
 15706                           
 15707                           ;i2c2.c: 294: i2c2_state = S_MASTER_SEND_ADDR;
 15708  0585  3002               	movlw	2
 15709  0586  00F3               	movwf	??_I2C2_ISR
 15710  0587  0873               	movf	??_I2C2_ISR,w
 15711  0588  00F9               	movwf	_i2c2_state
 15712                           
 15713                           ;i2c2.c: 295: }
 15714                           ;i2c2.c: 297: break;
 15715  0589  0008               	return
 15716  058A                     i1l293:	
 15717                           ;i2c2.c: 299: case S_MASTER_RESTART:
 15718                           
 15719                           
 15720                           ;i2c2.c: 304: SSP2CON2bits.RSEN = 1;
 15721  058A  0024               	movlb	4	; select bank4
 15722  058B  149E               	bsf	30,1	;volatile
 15723                           
 15724                           ;i2c2.c: 307: i2c2_state = S_MASTER_SEND_ADDR;
 15725  058C  3002               	movlw	2
 15726  058D  00F3               	movwf	??_I2C2_ISR
 15727  058E  0873               	movf	??_I2C2_ISR,w
 15728  058F  00F9               	movwf	_i2c2_state
 15729                           
 15730                           ;i2c2.c: 309: break;
 15731  0590  0008               	return
 15732  0591                     i1l294:	
 15733                           ;i2c2.c: 311: case S_MASTER_SEND_ADDR_10BIT_LSB:
 15734                           
 15735                           
 15736                           ;i2c2.c: 313: if(SSP2CON2bits.ACKSTAT)
 15737  0591  0024               	movlb	4	; select bank4
 15738  0592  1F1E               	btfss	30,6	;volatile
 15739  0593  2D9D               	goto	i1l4781
 15740                           
 15741                           ;i2c2.c: 314: {
 15742                           ;i2c2.c: 315: i2c2_object.i2cErrors++;
 15743  0594  3001               	movlw	1
 15744  0595  00F3               	movwf	??_I2C2_ISR
 15745  0596  0873               	movf	??_I2C2_ISR,w
 15746  0597  0021               	movlb	1	; select bank1
 15747  0598  07CE               	addwf	(_i2c2_object^(0+128)+4),f
 15748                           
 15749                           ;i2c2.c: 316: I2C2_Stop(I2C2_MESSAGE_ADDRESS_NO_ACK);
 15750  0599  3004               	movlw	4
 15751  059A  3195  253A         	fcall	_I2C2_Stop
 15752                           
 15753                           ;i2c2.c: 317: }
 15754  059C  0008               	return
 15755  059D                     i1l4781:	
 15756                           
 15757                           ;i2c2.c: 318: else
 15758                           ;i2c2.c: 319: {
 15759                           ;i2c2.c: 321: SSP2BUF = (i2c_address >> 1) & 0x00FF;
 15760  059D  087B               	movf	I2C2_ISR@i2c_address+1,w
 15761  059E  00F4               	movwf	??_I2C2_ISR+1
 15762  059F  087A               	movf	I2C2_ISR@i2c_address,w
 15763  05A0  00F3               	movwf	??_I2C2_ISR
 15764  05A1  36F4               	lsrf	??_I2C2_ISR+1,f
 15765  05A2  0CF3               	rrf	??_I2C2_ISR,f
 15766  05A3  0873               	movf	??_I2C2_ISR,w
 15767  05A4  0024               	movlb	4	; select bank4
 15768  05A5  0099               	movwf	25	;volatile
 15769                           
 15770                           ;i2c2.c: 324: if(i2c_address & 0x01)
 15771  05A6  1C7A               	btfss	I2C2_ISR@i2c_address,0
 15772  05A7  2DAD               	goto	i1l4787
 15773                           
 15774                           ;i2c2.c: 325: {
 15775                           ;i2c2.c: 328: i2c2_state = S_MASTER_10BIT_RESTART;
 15776  05A8  300B               	movlw	11
 15777  05A9  00F3               	movwf	??_I2C2_ISR
 15778  05AA  0873               	movf	??_I2C2_ISR,w
 15779  05AB  00F9               	movwf	_i2c2_state
 15780                           
 15781                           ;i2c2.c: 329: }
 15782  05AC  0008               	return
 15783  05AD                     i1l4787:	
 15784                           
 15785                           ;i2c2.c: 330: else
 15786                           ;i2c2.c: 331: {
 15787                           ;i2c2.c: 333: i2c2_state = S_MASTER_SEND_DATA;
 15788  05AD  3003               	movlw	3
 15789  05AE  00F3               	movwf	??_I2C2_ISR
 15790  05AF  0873               	movf	??_I2C2_ISR,w
 15791  05B0  00F9               	movwf	_i2c2_state
 15792                           
 15793                           ;i2c2.c: 334: }
 15794                           ;i2c2.c: 335: }
 15795                           ;i2c2.c: 337: break;
 15796  05B1  0008               	return
 15797  05B2                     i1l299:	
 15798                           ;i2c2.c: 339: case S_MASTER_10BIT_RESTART:
 15799                           
 15800                           
 15801                           ;i2c2.c: 341: if(SSP2CON2bits.ACKSTAT)
 15802  05B2  0024               	movlb	4	; select bank4
 15803  05B3  1F1E               	btfss	30,6	;volatile
 15804  05B4  2DBE               	goto	i1l300
 15805                           
 15806                           ;i2c2.c: 342: {
 15807                           ;i2c2.c: 343: i2c2_object.i2cErrors++;
 15808  05B5  3001               	movlw	1
 15809  05B6  00F3               	movwf	??_I2C2_ISR
 15810  05B7  0873               	movf	??_I2C2_ISR,w
 15811  05B8  0021               	movlb	1	; select bank1
 15812  05B9  07CE               	addwf	(_i2c2_object^(0+128)+4),f
 15813                           
 15814                           ;i2c2.c: 344: I2C2_Stop(I2C2_MESSAGE_ADDRESS_NO_ACK);
 15815  05BA  3004               	movlw	4
 15816  05BB  3195  253A         	fcall	_I2C2_Stop
 15817                           
 15818                           ;i2c2.c: 345: }
 15819  05BD  0008               	return
 15820  05BE                     i1l300:	
 15821                           
 15822                           ;i2c2.c: 346: else
 15823                           ;i2c2.c: 347: {
 15824                           ;i2c2.c: 350: SSP2CON2bits.RSEN = 1;
 15825  05BE  149E               	bsf	30,1	;volatile
 15826                           
 15827                           ;i2c2.c: 354: i2c_address = 0x00F0 | ((i2c_address >> 8) & 0x0006);
 15828  05BF  087B               	movf	I2C2_ISR@i2c_address+1,w
 15829  05C0  00F4               	movwf	??_I2C2_ISR+1
 15830  05C1  087A               	movf	I2C2_ISR@i2c_address,w
 15831  05C2  00F3               	movwf	??_I2C2_ISR
 15832  05C3  0874               	movf	??_I2C2_ISR+1,w
 15833  05C4  00F3               	movwf	??_I2C2_ISR
 15834  05C5  01F4               	clrf	??_I2C2_ISR+1
 15835  05C6  3006               	movlw	6
 15836  05C7  0573               	andwf	??_I2C2_ISR,w
 15837  05C8  00F5               	movwf	??_I2C2_ISR+2
 15838  05C9  3000               	movlw	0
 15839  05CA  0574               	andwf	??_I2C2_ISR+1,w
 15840  05CB  00F6               	movwf	??_I2C2_ISR+3
 15841  05CC  30F0               	movlw	240
 15842  05CD  0475               	iorwf	??_I2C2_ISR+2,w
 15843  05CE  00FA               	movwf	I2C2_ISR@i2c_address
 15844  05CF  3000               	movlw	0
 15845  05D0  0476               	iorwf	??_I2C2_ISR+3,w
 15846  05D1  00FB               	movwf	I2C2_ISR@i2c_address+1
 15847                           
 15848                           ;i2c2.c: 357: i2c_address |= 0x0001;
 15849  05D2  147A               	bsf	I2C2_ISR@i2c_address,0
 15850                           
 15851                           ;i2c2.c: 360: i2c_10bit_address_restart = 1;
 15852  05D3  0021               	movlb	1	; select bank1
 15853  05D4  01E0               	clrf	I2C2_ISR@i2c_10bit_address_restart^(0+128)
 15854  05D5  0AE0               	incf	I2C2_ISR@i2c_10bit_address_restart^(0+128),f
 15855                           
 15856                           ;i2c2.c: 363: i2c2_state = S_MASTER_SEND_ADDR;
 15857  05D6  3002               	movlw	2
 15858  05D7  00F3               	movwf	??_I2C2_ISR
 15859  05D8  0873               	movf	??_I2C2_ISR,w
 15860  05D9  00F9               	movwf	_i2c2_state
 15861                           
 15862                           ;i2c2.c: 364: }
 15863                           ;i2c2.c: 366: break;
 15864  05DA  0008               	return
 15865  05DB                     i1l4801:	
 15866                           ;i2c2.c: 368: case S_MASTER_SEND_ADDR:
 15867                           
 15868                           
 15869                           ;i2c2.c: 381: if(i2c_10bit_address_restart != 1)
 15870  05DB  0021               	movlb	1	; select bank1
 15871  05DC  0360               	decf	I2C2_ISR@i2c_10bit_address_restart^(0+128),w
 15872  05DD  1903               	btfsc	3,2
 15873  05DE  2DF7               	goto	i1l4819
 15874                           
 15875                           ;i2c2.c: 382: {
 15876                           ;i2c2.c: 384: i2c_address = p_i2c2_trb_current->address;
 15877  05DF  0878               	movf	_p_i2c2_trb_current,w
 15878  05E0  0086               	movwf	6
 15879  05E1  3001               	movlw	1	; select bank2/3
 15880  05E2  0087               	movwf	7
 15881  05E3  3F40               	moviw [0]fsr1
 15882  05E4  00FA               	movwf	I2C2_ISR@i2c_address
 15883  05E5  3F41               	moviw [1]fsr1
 15884  05E6  00FB               	movwf	I2C2_ISR@i2c_address+1
 15885                           
 15886                           ;i2c2.c: 385: pi2c_buf_ptr = p_i2c2_trb_current->pbuffer;
 15887  05E7  0878               	movf	_p_i2c2_trb_current,w
 15888  05E8  3E03               	addlw	3
 15889  05E9  0086               	movwf	6
 15890  05EA  3001               	movlw	1	; select bank2/3
 15891  05EB  0087               	movwf	7
 15892  05EC  3F40               	moviw [0]fsr1
 15893  05ED  00D5               	movwf	I2C2_ISR@pi2c_buf_ptr^(0+128)
 15894  05EE  3F41               	moviw [1]fsr1
 15895  05EF  00D6               	movwf	(I2C2_ISR@pi2c_buf_ptr+1)^(0+128)
 15896                           
 15897                           ;i2c2.c: 386: i2c_bytes_left = p_i2c2_trb_current->length;
 15898  05F0  0878               	movf	_p_i2c2_trb_current,w
 15899  05F1  0086               	movwf	6
 15900  05F2  3001               	movlw	1	; select bank2/3
 15901  05F3  0087               	movwf	7
 15902  05F4  3001               	movlw	1	; select bank2/3
 15903  05F5  3F42               	moviw [2]fsr1
 15904  05F6  00E1               	movwf	I2C2_ISR@i2c_bytes_left^(0+128)
 15905  05F7                     i1l4819:	
 15906                           ;i2c2.c: 407: }
 15907                           ;i2c2.c: 408: }
 15908                           
 15909                           ;i2c2.c: 406: i2c_10bit_address_restart = 0;
 15910                           
 15911                           ;i2c2.c: 404: i2c2_state = S_MASTER_ACK_ADDR;
 15912                           
 15913                           ;i2c2.c: 400: else
 15914                           ;i2c2.c: 401: {
 15915                           ;i2c2.c: 403: SSP2BUF = i2c_address;
 15916                           
 15917                           ;i2c2.c: 399: }
 15918                           
 15919                           ;i2c2.c: 398: i2c2_state = S_MASTER_SEND_ADDR_10BIT_LSB;
 15920                           
 15921                           ;i2c2.c: 393: {
 15922                           ;i2c2.c: 397: SSP2BUF = 0xF0 | ((i2c_address >> 8) & 0x0006);
 15923                           
 15924                           ;i2c2.c: 391: {
 15925                           ;i2c2.c: 392: if (0 == i2c_10bit_address_restart)
 15926                           
 15927                           ;i2c2.c: 387: }
 15928                           ;i2c2.c: 390: if(!1 && (0x0 != i2c_address))
 15929                           
 15930                           
 15931                           ;i2c2.c: 409: else
 15932                           ;i2c2.c: 410: {
 15933                           ;i2c2.c: 412: SSP2BUF = i2c_address;
 15934  05F7  087A               	movf	I2C2_ISR@i2c_address,w
 15935  05F8  0024               	movlb	4	; select bank4
 15936  05F9  0099               	movwf	25	;volatile
 15937                           
 15938                           ;i2c2.c: 413: if(i2c_address & 0x01)
 15939  05FA  1C7A               	btfss	I2C2_ISR@i2c_address,0
 15940  05FB  2E01               	goto	i1l4825
 15941                           
 15942                           ;i2c2.c: 414: {
 15943                           ;i2c2.c: 416: i2c2_state = S_MASTER_ACK_ADDR;
 15944  05FC  3005               	movlw	5
 15945  05FD  00F3               	movwf	??_I2C2_ISR
 15946  05FE  0873               	movf	??_I2C2_ISR,w
 15947  05FF  00F9               	movwf	_i2c2_state
 15948                           
 15949                           ;i2c2.c: 417: }
 15950  0600  0008               	return
 15951  0601                     i1l4825:	
 15952                           
 15953                           ;i2c2.c: 418: else
 15954                           ;i2c2.c: 419: {
 15955                           ;i2c2.c: 421: i2c2_state = S_MASTER_SEND_DATA;
 15956  0601  3003               	movlw	3
 15957  0602  00F3               	movwf	??_I2C2_ISR
 15958  0603  0873               	movf	??_I2C2_ISR,w
 15959  0604  00F9               	movwf	_i2c2_state
 15960                           
 15961                           ;i2c2.c: 422: }
 15962                           ;i2c2.c: 423: }
 15963                           ;i2c2.c: 424: break;
 15964  0605  0008               	return
 15965  0606                     i1l310:	
 15966                           ;i2c2.c: 426: case S_MASTER_SEND_DATA:
 15967                           
 15968                           
 15969                           ;i2c2.c: 429: if(SSP2CON2bits.ACKSTAT)
 15970  0606  0024               	movlb	4	; select bank4
 15971  0607  1F1E               	btfss	30,6	;volatile
 15972  0608  2E14               	goto	i1l4833
 15973                           
 15974                           ;i2c2.c: 430: {
 15975                           ;i2c2.c: 432: i2c2_object.i2cErrors++;
 15976  0609  3001               	movlw	1
 15977  060A  00F3               	movwf	??_I2C2_ISR
 15978  060B  0873               	movf	??_I2C2_ISR,w
 15979  060C  0021               	movlb	1	; select bank1
 15980  060D  07CE               	addwf	(_i2c2_object^(0+128)+4),f
 15981                           
 15982                           ;i2c2.c: 435: SSP2CON2bits.ACKSTAT = 0;
 15983  060E  0024               	movlb	4	; select bank4
 15984  060F  131E               	bcf	30,6	;volatile
 15985                           
 15986                           ;i2c2.c: 438: I2C2_Stop(I2C2_DATA_NO_ACK);
 15987  0610  3005               	movlw	5
 15988  0611  3195  253A         	fcall	_I2C2_Stop
 15989                           
 15990                           ;i2c2.c: 440: }
 15991  0613  0008               	return
 15992  0614                     i1l4833:	
 15993                           
 15994                           ;i2c2.c: 441: else
 15995                           ;i2c2.c: 442: {
 15996                           ;i2c2.c: 444: if(i2c_bytes_left-- == 0U)
 15997  0614  3001               	movlw	1
 15998  0615  0021               	movlb	1	; select bank1
 15999  0616  02E1               	subwf	I2C2_ISR@i2c_bytes_left^(0+128),f
 16000  0617  0A61               	incf	I2C2_ISR@i2c_bytes_left^(0+128),w
 16001  0618  1D03               	btfss	3,2
 16002  0619  2E2D               	goto	i1l4841
 16003                           
 16004                           ;i2c2.c: 445: {
 16005                           ;i2c2.c: 449: p_i2c2_trb_current++;
 16006  061A  3005               	movlw	5
 16007  061B  00F3               	movwf	??_I2C2_ISR
 16008  061C  0873               	movf	??_I2C2_ISR,w
 16009  061D  07F8               	addwf	_p_i2c2_trb_current,f
 16010                           
 16011                           ;i2c2.c: 452: if(--i2c2_trb_count == 0)
 16012  061E  3001               	movlw	1
 16013  061F  02E2               	subwf	_i2c2_trb_count^(0+128),f
 16014  0620  1D03               	btfss	3,2
 16015  0621  2E26               	goto	i1l314
 16016                           
 16017                           ;i2c2.c: 453: {
 16018                           ;i2c2.c: 454: I2C2_Stop(I2C2_MESSAGE_COMPLETE);
 16019  0622  3000               	movlw	0
 16020  0623  3195  253A         	fcall	_I2C2_Stop
 16021                           
 16022                           ;i2c2.c: 455: }
 16023  0625  0008               	return
 16024  0626                     i1l314:	
 16025                           
 16026                           ;i2c2.c: 456: else
 16027                           ;i2c2.c: 457: {
 16028                           ;i2c2.c: 464: SSP2CON2bits.RSEN = 1;
 16029  0626  0024               	movlb	4	; select bank4
 16030  0627  149E               	bsf	30,1	;volatile
 16031                           
 16032                           ;i2c2.c: 467: i2c2_state = S_MASTER_SEND_ADDR;
 16033  0628  3002               	movlw	2
 16034  0629  00F3               	movwf	??_I2C2_ISR
 16035  062A  0873               	movf	??_I2C2_ISR,w
 16036  062B  00F9               	movwf	_i2c2_state
 16037                           
 16038                           ;i2c2.c: 469: }
 16039                           ;i2c2.c: 470: }
 16040  062C  0008               	return
 16041  062D                     i1l4841:	
 16042                           
 16043                           ;i2c2.c: 471: else
 16044                           ;i2c2.c: 472: {
 16045                           ;i2c2.c: 474: SSP2BUF = *pi2c_buf_ptr++;
 16046  062D  0021               	movlb	1	; select bank1
 16047  062E  0855               	movf	I2C2_ISR@pi2c_buf_ptr^(0+128),w
 16048  062F  0086               	movwf	6
 16049  0630  0856               	movf	(I2C2_ISR@pi2c_buf_ptr+1)^(0+128),w
 16050  0631  0087               	movwf	7
 16051  0632  0801               	movf	1,w
 16052  0633  0024               	movlb	4	; select bank4
 16053  0634  0099               	movwf	25	;volatile
 16054  0635  3001               	movlw	1
 16055  0636  0021               	movlb	1	; select bank1
 16056  0637  07D5               	addwf	I2C2_ISR@pi2c_buf_ptr^(0+128),f
 16057  0638  3000               	movlw	0
 16058  0639  3DD6               	addwfc	(I2C2_ISR@pi2c_buf_ptr+1)^(0+128),f
 16059                           
 16060                           ;i2c2.c: 475: }
 16061                           ;i2c2.c: 476: }
 16062                           ;i2c2.c: 477: break;
 16063  063A  0008               	return
 16064  063B                     i1l317:	
 16065                           ;i2c2.c: 479: case S_MASTER_ACK_ADDR:
 16066                           
 16067                           
 16068                           ;i2c2.c: 482: if(SSP2CON2bits.ACKSTAT)
 16069  063B  0024               	movlb	4	; select bank4
 16070  063C  1F1E               	btfss	30,6	;volatile
 16071  063D  2E49               	goto	i1l318
 16072                           
 16073                           ;i2c2.c: 483: {
 16074                           ;i2c2.c: 486: i2c2_object.i2cErrors++;
 16075  063E  3001               	movlw	1
 16076  063F  00F3               	movwf	??_I2C2_ISR
 16077  0640  0873               	movf	??_I2C2_ISR,w
 16078  0641  0021               	movlb	1	; select bank1
 16079  0642  07CE               	addwf	(_i2c2_object^(0+128)+4),f
 16080                           
 16081                           ;i2c2.c: 489: I2C2_Stop(I2C2_MESSAGE_ADDRESS_NO_ACK);
 16082  0643  3004               	movlw	4
 16083  0644  3195  253A         	fcall	_I2C2_Stop
 16084                           
 16085                           ;i2c2.c: 492: SSP2CON2bits.ACKSTAT = 0;
 16086  0646  0024               	movlb	4	; select bank4
 16087  0647  131E               	bcf	30,6	;volatile
 16088                           
 16089                           ;i2c2.c: 493: }
 16090  0648  0008               	return
 16091  0649                     i1l318:	
 16092                           
 16093                           ;i2c2.c: 494: else
 16094                           ;i2c2.c: 495: {
 16095                           ;i2c2.c: 496: SSP2CON2bits.RCEN = 1;
 16096  0649  159E               	bsf	30,3	;volatile
 16097                           
 16098                           ;i2c2.c: 497: i2c2_state = S_MASTER_ACK_RCV_DATA;
 16099  064A  3008               	movlw	8
 16100  064B  00F3               	movwf	??_I2C2_ISR
 16101  064C  0873               	movf	??_I2C2_ISR,w
 16102  064D  00F9               	movwf	_i2c2_state
 16103                           
 16104                           ;i2c2.c: 498: }
 16105                           ;i2c2.c: 499: break;
 16106  064E  0008               	return
 16107  064F                     i1l4853:	
 16108                           ;i2c2.c: 501: case S_MASTER_RCV_DATA:
 16109                           
 16110                           
 16111                           ;i2c2.c: 506: i2c2_state = S_MASTER_ACK_RCV_DATA;
 16112  064F  3008               	movlw	8
 16113  0650  00F3               	movwf	??_I2C2_ISR
 16114  0651  0873               	movf	??_I2C2_ISR,w
 16115  0652  00F9               	movwf	_i2c2_state
 16116                           
 16117                           ;i2c2.c: 509: SSP2CON2bits.RCEN = 1;
 16118  0653  0024               	movlb	4	; select bank4
 16119  0654  159E               	bsf	30,3	;volatile
 16120                           
 16121                           ;i2c2.c: 511: break;
 16122  0655  0008               	return
 16123  0656                     i1l4857:	
 16124                           ;i2c2.c: 513: case S_MASTER_ACK_RCV_DATA:
 16125                           
 16126                           
 16127                           ;i2c2.c: 516: *pi2c_buf_ptr++ = SSP2BUF;
 16128  0656  0021               	movlb	1	; select bank1
 16129  0657  0855               	movf	I2C2_ISR@pi2c_buf_ptr^(0+128),w
 16130  0658  0086               	movwf	6
 16131  0659  0856               	movf	(I2C2_ISR@pi2c_buf_ptr+1)^(0+128),w
 16132  065A  0087               	movwf	7
 16133  065B  0024               	movlb	4	; select bank4
 16134  065C  0819               	movf	25,w	;volatile
 16135  065D  0081               	movwf	1
 16136  065E  3001               	movlw	1
 16137  065F  0021               	movlb	1	; select bank1
 16138  0660  07D5               	addwf	I2C2_ISR@pi2c_buf_ptr^(0+128),f
 16139  0661  3000               	movlw	0
 16140  0662  3DD6               	addwfc	(I2C2_ISR@pi2c_buf_ptr+1)^(0+128),f
 16141                           
 16142                           ;i2c2.c: 519: if(--i2c_bytes_left)
 16143  0663  3001               	movlw	1
 16144  0664  02E1               	subwf	I2C2_ISR@i2c_bytes_left^(0+128),f
 16145  0665  1903               	btfsc	3,2
 16146  0666  2E6E               	goto	i1l322
 16147                           
 16148                           ;i2c2.c: 520: {
 16149                           ;i2c2.c: 526: SSP2CON2bits.ACKDT = 0;
 16150  0667  0024               	movlb	4	; select bank4
 16151  0668  129E               	bcf	30,5	;volatile
 16152                           
 16153                           ;i2c2.c: 529: i2c2_state = S_MASTER_RCV_DATA;
 16154  0669  3006               	movlw	6
 16155  066A  00F3               	movwf	??_I2C2_ISR
 16156  066B  0873               	movf	??_I2C2_ISR,w
 16157  066C  00F9               	movwf	_i2c2_state
 16158                           
 16159                           ;i2c2.c: 530: }
 16160  066D  2E72               	goto	i1l4869
 16161  066E                     i1l322:	
 16162                           
 16163                           ;i2c2.c: 531: else
 16164                           ;i2c2.c: 532: {
 16165                           ;i2c2.c: 536: SSP2CON2bits.ACKDT = 1;
 16166  066E  0024               	movlb	4	; select bank4
 16167  066F  169E               	bsf	30,5	;volatile
 16168                           
 16169                           ;i2c2.c: 538: I2C2_FunctionComplete();
 16170  0670  3193  238D         	fcall	_I2C2_FunctionComplete
 16171  0672                     i1l4869:	
 16172                           
 16173                           ;i2c2.c: 539: }
 16174                           ;i2c2.c: 542: SSP2CON2bits.ACKEN = 1;
 16175  0672  0024               	movlb	4	; select bank4
 16176  0673  161E               	bsf	30,4	;volatile
 16177                           
 16178                           ;i2c2.c: 543: break;
 16179  0674  0008               	return
 16180  0675                     i1l4871:	
 16181                           ;i2c2.c: 545: case S_MASTER_RCV_STOP:
 16182                           
 16183                           
 16184                           ;i2c2.c: 546: case S_MASTER_SEND_STOP:
 16185                           ;i2c2.c: 549: I2C2_Stop(I2C2_MESSAGE_COMPLETE);
 16186  0675  3000               	movlw	0
 16187  0676  3195  253A         	fcall	_I2C2_Stop
 16188                           
 16189                           ;i2c2.c: 550: break;
 16190  0678  0008               	return
 16191  0679                     i1l4873:	
 16192                           ;i2c2.c: 552: default:
 16193                           
 16194                           
 16195                           ;i2c2.c: 556: i2c2_object.i2cErrors++;
 16196  0679  3001               	movlw	1
 16197  067A  00F3               	movwf	??_I2C2_ISR
 16198  067B  0873               	movf	??_I2C2_ISR,w
 16199  067C  0021               	movlb	1	; select bank1
 16200  067D  07CE               	addwf	(_i2c2_object^(0+128)+4),f
 16201                           
 16202                           ;i2c2.c: 557: I2C2_Stop(I2C2_LOST_STATE);
 16203  067E  3006               	movlw	6
 16204  067F  3195  253A         	fcall	_I2C2_Stop
 16205                           
 16206                           ;i2c2.c: 560: }
 16207                           
 16208                           ;i2c2.c: 558: break;
 16209  0681  0008               	return
 16210  0682                     i1l4879:	
 16211  0682  0879               	movf	_i2c2_state,w
 16212                           
 16213                           ; Switch size 1, requested type "space"
 16214                           ; Number of cases is 11, Range of values is 0 to 11
 16215                           ; switch strategies available:
 16216                           ; Name         Instructions Cycles
 16217                           ; direct_byte           30     6 (fixed)
 16218                           ; simple_byte           34    18 (average)
 16219                           ; jumptable            260     6 (fixed)
 16220                           ;	Chosen strategy is direct_byte
 16221  0683  0084               	movwf	4
 16222  0684  300C               	movlw	12
 16223  0685  0204               	subwf	4,w
 16224  0686  1803               	skipnc
 16225  0687  2E79               	goto	i1l4873
 16226  0688  3190               	movlp	high i1S7069
 16227  0689  3504               	lslf	4,w
 16228  068A  3E00               	addlw	low i1S7069
 16229  068B  0082               	movwf	2
 16230  068C  0008               	return
 16231  068D                     __end_of_I2C2_ISR:	
 16232                           
 16233                           	psect	swtext1
 16234  1000                     __pswtext1:	
 16235  1000                     i1S7069:	
 16236  1000  3185  2D5C         	ljmp	i1l288
 16237  1002  3185  2D8A         	ljmp	i1l293
 16238  1004  3185  2DDB         	ljmp	i1l4801
 16239  1006  3186  2E06         	ljmp	i1l310
 16240  1008  3186  2E75         	ljmp	i1l4871
 16241  100A  3186  2E3B         	ljmp	i1l317
 16242  100C  3186  2E4F         	ljmp	i1l4853
 16243  100E  3186  2E75         	ljmp	i1l4871
 16244  1010  3186  2E56         	ljmp	i1l4857
 16245  1012  3186  2E79         	ljmp	i1l4873
 16246  1014  3185  2D91         	ljmp	i1l294
 16247  1016  3185  2DB2         	ljmp	i1l299
 16248                           
 16249                           	psect	text95
 16250  153A                     __ptext95:	
 16251 ;; *************** function _I2C2_Stop *****************
 16252 ;; Defined at:
 16253 ;;		line 581 in file "mcc_generated_files/i2c2.c"
 16254 ;; Parameters:    Size  Location     Type
 16255 ;;  completion_c    1    wreg     enum E2993
 16256 ;; Auto vars:     Size  Location     Type
 16257 ;;  completion_c    1    2[COMMON] enum E2993
 16258 ;; Return value:  Size  Location     Type
 16259 ;;                  1    wreg      void 
 16260 ;; Registers used:
 16261 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 16262 ;; Tracked objects:
 16263 ;;		On entry : 0/0
 16264 ;;		On exit  : 0/0
 16265 ;;		Unchanged: 0/0
 16266 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16267 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16268 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16269 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16270 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16271 ;;Total ram usage:        3 bytes
 16272 ;; Hardware stack levels used:    1
 16273 ;; This function calls:
 16274 ;;		Nothing
 16275 ;; This function is called by:
 16276 ;;		_I2C2_ISR
 16277 ;; This function uses a non-reentrant model
 16278 ;;
 16279                           
 16280                           
 16281                           ;psect for function _I2C2_Stop
 16282  153A                     _I2C2_Stop:	
 16283                           
 16284                           ;incstack = 0
 16285                           ; Regs used in _I2C2_Stop: [wreg+fsr1l+fsr1h+status,2+status,0]
 16286                           ;I2C2_Stop@completion_code stored from wreg
 16287  153A  00F2               	movwf	I2C2_Stop@completion_code
 16288                           
 16289                           ;i2c2.c: 584: SSP2CON2bits.PEN = 1;
 16290  153B  0024               	movlb	4	; select bank4
 16291  153C  151E               	bsf	30,2	;volatile
 16292                           
 16293                           ;i2c2.c: 587: if (p_i2c2_current->pTrFlag != (0))
 16294  153D  0877               	movf	_p_i2c2_current,w
 16295  153E  3E02               	addlw	2
 16296  153F  0086               	movwf	6
 16297  1540  3001               	movlw	1	; select bank2/3
 16298  1541  0087               	movwf	7
 16299  1542  0016               	moviw fsr1++
 16300  1543  0401               	iorwf	1,w
 16301  1544  1903               	btfsc	3,2
 16302  1545  2D55               	goto	i1l4313
 16303                           
 16304                           ;i2c2.c: 588: {
 16305                           ;i2c2.c: 590: *(p_i2c2_current->pTrFlag) = completion_code;
 16306  1546  0877               	movf	_p_i2c2_current,w
 16307  1547  3E02               	addlw	2
 16308  1548  0086               	movwf	6
 16309  1549  3001               	movlw	1	; select bank2/3
 16310  154A  0087               	movwf	7
 16311  154B  3F40               	moviw [0]fsr1
 16312  154C  00F0               	movwf	??_I2C2_Stop
 16313  154D  3F41               	moviw [1]fsr1
 16314  154E  00F1               	movwf	??_I2C2_Stop+1
 16315  154F  0870               	movf	??_I2C2_Stop,w
 16316  1550  0086               	movwf	6
 16317  1551  0871               	movf	??_I2C2_Stop+1,w
 16318  1552  0087               	movwf	7
 16319  1553  0872               	movf	I2C2_Stop@completion_code,w
 16320  1554  0081               	movwf	1
 16321  1555                     i1l4313:	
 16322                           
 16323                           ;i2c2.c: 591: }
 16324                           ;i2c2.c: 594: i2c2_state = S_MASTER_IDLE;
 16325  1555  01F9               	clrf	_i2c2_state
 16326  1556  0008               	return
 16327  1557                     __end_of_I2C2_Stop:	
 16328                           
 16329                           	psect	text96
 16330  138D                     __ptext96:	
 16331 ;; *************** function _I2C2_FunctionComplete *****************
 16332 ;; Defined at:
 16333 ;;		line 563 in file "mcc_generated_files/i2c2.c"
 16334 ;; Parameters:    Size  Location     Type
 16335 ;;		None
 16336 ;; Auto vars:     Size  Location     Type
 16337 ;;		None
 16338 ;; Return value:  Size  Location     Type
 16339 ;;                  1    wreg      void 
 16340 ;; Registers used:
 16341 ;;		wreg, status,2, status,0
 16342 ;; Tracked objects:
 16343 ;;		On entry : 0/0
 16344 ;;		On exit  : 0/0
 16345 ;;		Unchanged: 0/0
 16346 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16347 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16348 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16349 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16350 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16351 ;;Total ram usage:        1 bytes
 16352 ;; Hardware stack levels used:    1
 16353 ;; This function calls:
 16354 ;;		Nothing
 16355 ;; This function is called by:
 16356 ;;		_I2C2_ISR
 16357 ;; This function uses a non-reentrant model
 16358 ;;
 16359                           
 16360                           
 16361                           ;psect for function _I2C2_FunctionComplete
 16362  138D                     _I2C2_FunctionComplete:	
 16363                           
 16364                           ;i2c2.c: 567: p_i2c2_trb_current++;
 16365                           
 16366                           ;incstack = 0
 16367                           ; Regs used in _I2C2_FunctionComplete: [wreg+status,2+status,0]
 16368  138D  3005               	movlw	5
 16369  138E  00F0               	movwf	??_I2C2_FunctionComplete
 16370  138F  0870               	movf	??_I2C2_FunctionComplete,w
 16371  1390  07F8               	addwf	_p_i2c2_trb_current,f
 16372                           
 16373                           ;i2c2.c: 570: if(--i2c2_trb_count == 0)
 16374  1391  3001               	movlw	1
 16375  1392  0021               	movlb	1	; select bank1
 16376  1393  02E2               	subwf	_i2c2_trb_count^(0+128),f
 16377  1394  1D03               	btfss	3,2
 16378  1395  2B9B               	goto	i1l329
 16379                           
 16380                           ;i2c2.c: 571: {
 16381                           ;i2c2.c: 572: i2c2_state = S_MASTER_SEND_STOP;
 16382  1396  3004               	movlw	4
 16383  1397  00F0               	movwf	??_I2C2_FunctionComplete
 16384  1398  0870               	movf	??_I2C2_FunctionComplete,w
 16385  1399  00F9               	movwf	_i2c2_state
 16386                           
 16387                           ;i2c2.c: 573: }
 16388  139A  0008               	return
 16389  139B                     i1l329:	
 16390                           
 16391                           ;i2c2.c: 574: else
 16392                           ;i2c2.c: 575: {
 16393                           ;i2c2.c: 576: i2c2_state = S_MASTER_RESTART;
 16394  139B  01F9               	clrf	_i2c2_state
 16395  139C  0AF9               	incf	_i2c2_state,f
 16396  139D  0008               	return
 16397  139E                     __end_of_I2C2_FunctionComplete:	
 16398                           
 16399                           	psect	text97
 16400  0801                     __ptext97:	
 16401 ;; *************** function _I2C2_BusCollisionISR *****************
 16402 ;; Defined at:
 16403 ;;		line 729 in file "mcc_generated_files/i2c2.c"
 16404 ;; Parameters:    Size  Location     Type
 16405 ;;		None
 16406 ;; Auto vars:     Size  Location     Type
 16407 ;;		None
 16408 ;; Return value:  Size  Location     Type
 16409 ;;                  1    wreg      void 
 16410 ;; Registers used:
 16411 ;;		None
 16412 ;; Tracked objects:
 16413 ;;		On entry : 0/0
 16414 ;;		On exit  : 0/0
 16415 ;;		Unchanged: 0/0
 16416 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16417 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16418 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16419 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16420 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16421 ;;Total ram usage:        0 bytes
 16422 ;; Hardware stack levels used:    1
 16423 ;; This function calls:
 16424 ;;		Nothing
 16425 ;; This function is called by:
 16426 ;;		_INTERRUPT_InterruptManager
 16427 ;; This function uses a non-reentrant model
 16428 ;;
 16429                           
 16430                           
 16431                           ;psect for function _I2C2_BusCollisionISR
 16432  0801                     _I2C2_BusCollisionISR:	
 16433                           
 16434                           ;incstack = 0
 16435                           ; Regs used in _I2C2_BusCollisionISR: []
 16436  0801  0008               	return
 16437  0802                     __end_of_I2C2_BusCollisionISR:	
 16438  007E                     btemp	set	126	;btemp
 16439  007E                     int$flags	set	126
 16440  007E                     wtemp0	set	126


Data Sizes:
    Strings     0
    Constant    38
    Data        7
    BSS         148
    Persistent  6
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      7      14
    BANK0            80     79      79
    BANK1            80     42      70
    BANK2            80      0      78
    BANK3            80     12      60
    BANK4            80      0       0
    BANK5            80      0       0
    BANK6            80      0       0
    BANK7            80      0       0
    BANK8            80      0       0
    BANK9            80      0       0
    BANK10           80      0       0
    BANK11           80      0       0
    BANK12           48      0       0

Pointer List with Targets:

    i2c2_tr_queue.ptrb_list.pbuffer	PTR unsigned char  size(2) Largest target is 24
		 -> I2C_BufferRead@ReadAddr(BANK0[1]), I2C_BufferRead@status(BANK0[1]), I2C_ByteWrite@data(BANK0[2]), I2C_ByteWrite@status(BANK0[1]), 
		 -> data(BANK3[8]), b1(BANK3[24]), HMC5883L_ReadBit@tmp(COMMON[1]), HMC5883L_ReadBits@tmp(BANK0[1]), 
		 -> HMC5883L_WriteBit@tmp(COMMON[1]), HMC5883L_WriteBits@tmp(COMMON[1]), heading(BANK3[8]), HMC5883L_TestConnection@tmp(COMMON[3]), 
		 -> MPU6050_ReadBit@tmp(COMMON[1]), MPU6050_ReadBits@tmp(COMMON[1]), MPU6050_WriteBit@tmp(COMMON[1]), MPU6050_WriteBits@tmp(COMMON[1]), 
		 -> MPU6050_GetRawAccel@tempBuffer(COMMON[6]), MPU6050_GetRawAccelGyro@tmpBuffer(COMMON[14]), 

    i2c2_tr_queue.pTrFlag	PTR enum E2993 size(2) Largest target is 24
		 -> I2C_BufferRead@ReadAddr(BANK0[1]), I2C_BufferRead@status(BANK0[1]), I2C_ByteWrite@data(BANK0[2]), I2C_ByteWrite@status(BANK0[1]), 
		 -> data(BANK3[8]), b1(BANK3[24]), HMC5883L_ReadBit@tmp(COMMON[1]), HMC5883L_ReadBits@tmp(BANK0[1]), 
		 -> HMC5883L_WriteBit@tmp(COMMON[1]), HMC5883L_WriteBits@tmp(COMMON[1]), heading(BANK3[8]), HMC5883L_TestConnection@tmp(COMMON[3]), 
		 -> MPU6050_ReadBit@tmp(COMMON[1]), MPU6050_ReadBits@tmp(COMMON[1]), MPU6050_WriteBit@tmp(COMMON[1]), MPU6050_WriteBits@tmp(COMMON[1]), 
		 -> MPU6050_GetRawAccel@tempBuffer(COMMON[6]), MPU6050_GetRawAccelGyro@tmpBuffer(COMMON[14]), 

    i2c2_tr_queue.ptrb_list	PTR struct . size(1) Largest target is 5
		 -> I2C2_MasterRead@trBlock(BANK2[5]), I2C2_MasterWrite@trBlock(BANK2[5]), 

    I2C_BufferRead@pBuffer	PTR unsigned char  size(2) Largest target is 24
		 -> data(BANK3[8]), b1(BANK3[24]), HMC5883L_ReadBit@tmp(COMMON[1]), HMC5883L_ReadBits@tmp(BANK0[1]), 
		 -> HMC5883L_WriteBit@tmp(COMMON[1]), HMC5883L_WriteBits@tmp(COMMON[1]), heading(BANK3[8]), HMC5883L_TestConnection@tmp(COMMON[3]), 
		 -> MPU6050_ReadBit@tmp(COMMON[1]), MPU6050_ReadBits@tmp(COMMON[1]), MPU6050_WriteBit@tmp(COMMON[1]), MPU6050_WriteBits@tmp(COMMON[1]), 
		 -> MPU6050_GetRawAccel@tempBuffer(COMMON[6]), MPU6050_GetRawAccelGyro@tmpBuffer(COMMON[14]), 

    I2C_ByteWrite@pBuffer	PTR unsigned char  size(1) Largest target is 1
		 -> BMP_readTemperature@tmp(BANK1[1]), BMP_init@t(BANK0[1]), HMC5883L_WriteBit@tmp(COMMON[1]), HMC5883L_WriteBits@tmp(COMMON[1]), 
		 -> HMC5883L_SetMode@tmp(COMMON[1]), HMC5883L_SetGain@tmp(COMMON[1]), HMC5883L_Initialize@tmp(COMMON[1]), MPU6050_WriteBit@tmp(COMMON[1]), 
		 -> MPU6050_WriteBits@tmp(COMMON[1]), 

    Wireless_sendData@payload	PTR unsigned char  size(1) Largest target is 6
		 -> Wireless_packageData@data(BANK1[6]), Wireless_determineTransmitPower@testPayload(BANK0[1]), 

    RF_DataIsReady@channel	PTR unsigned char  size(1) Largest target is 1
		 -> Wireless_checkDataReceived@channel(BANK0[1]), 

    RF_RxPayload@payload	PTR unsigned char  size(1) Largest target is 4
		 -> Wireless_checkDataReceived@data(BANK0[4]), 

    RF_TxPayload@payload	PTR unsigned char  size(1) Largest target is 6
		 -> Wireless_packageData@data(BANK1[6]), Wireless_determineTransmitPower@testPayload(BANK0[1]), 

    RF_WriteRegisterData@buf	PTR unsigned char  size(2) Largest target is 6
		 -> Wireless_packageData@data(BANK1[6]), Wireless_determineTransmitPower@testPayload(BANK0[1]), Wireless_init@TADDR(CODE[5]), 

    RF_ReadRegisterData@buf	PTR unsigned char  size(1) Largest target is 4
		 -> Wireless_checkDataReceived@data(BANK0[4]), Wireless_wake@reg(BANK0[1]), Wireless_sleep@reg(BANK0[1]), Wireless_changeTransmitPower@val(BANK0[1]), 

    SPI_WriteBuffer@bufOut	PTR unsigned char  size(2) Largest target is 6
		 -> Wireless_packageData@data(BANK1[6]), Wireless_determineTransmitPower@testPayload(BANK0[1]), Wireless_init@TADDR(CODE[5]), 

    SPI_WriteReadBuffer@bufOut	PTR unsigned char  size(1) Largest target is 4
		 -> Wireless_checkDataReceived@data(BANK0[4]), Wireless_wake@reg(BANK0[1]), Wireless_sleep@reg(BANK0[1]), Wireless_changeTransmitPower@val(BANK0[1]), 

    SPI_WriteReadBuffer@bufIn	PTR unsigned char  size(1) Largest target is 4
		 -> Wireless_checkDataReceived@data(BANK0[4]), Wireless_wake@reg(BANK0[1]), Wireless_sleep@reg(BANK0[1]), Wireless_changeTransmitPower@val(BANK0[1]), 

    HMC5883L_I2C_BufferRead@pBuffer	PTR unsigned char  size(2) Largest target is 14
		 -> HMC5883L_ReadBit@tmp(COMMON[1]), HMC5883L_ReadBits@tmp(BANK0[1]), HMC5883L_WriteBit@tmp(COMMON[1]), HMC5883L_WriteBits@tmp(COMMON[1]), 
		 -> heading(BANK3[8]), HMC5883L_TestConnection@tmp(COMMON[3]), MPU6050_ReadBit@tmp(COMMON[1]), MPU6050_ReadBits@tmp(COMMON[1]), 
		 -> MPU6050_WriteBit@tmp(COMMON[1]), MPU6050_WriteBits@tmp(COMMON[1]), MPU6050_GetRawAccel@tempBuffer(COMMON[6]), MPU6050_GetRawAccelGyro@tmpBuffer(COMMON[14]), 

    HMC5883L_ReadBits@data	PTR unsigned char  size(1) Largest target is 1
		 -> BMP_readTemperature@tmp(BANK1[1]), HMC5883L_GetHeading@tmp(COMMON[1]), HMC5883L_GetMode@tmp(COMMON[1]), HMC5883L_GetGain@tmp(COMMON[1]), 
		 -> HMC5883L_GetMeasurementBias@tmp(COMMON[1]), HMC5883L_GetDataRate@tmp(COMMON[1]), HMC5883L_GetSampleAveraging@tmp(COMMON[1]), 

    I2C2_MasterWriteTRBBuild@pdata	PTR unsigned char  size(1) Largest target is 2
		 -> I2C_BufferRead@ReadAddr(BANK0[1]), I2C_ByteWrite@data(BANK0[2]), 

    I2C2_MasterWriteTRBBuild@ptrb.pbuffer	PTR unsigned char  size(2) Largest target is 24
		 -> I2C_BufferRead@ReadAddr(BANK0[1]), I2C_BufferRead@status(BANK0[1]), I2C_ByteWrite@data(BANK0[2]), I2C_ByteWrite@status(BANK0[1]), 
		 -> data(BANK3[8]), b1(BANK3[24]), HMC5883L_ReadBit@tmp(COMMON[1]), HMC5883L_ReadBits@tmp(BANK0[1]), 
		 -> HMC5883L_WriteBit@tmp(COMMON[1]), HMC5883L_WriteBits@tmp(COMMON[1]), heading(BANK3[8]), HMC5883L_TestConnection@tmp(COMMON[3]), 
		 -> MPU6050_ReadBit@tmp(COMMON[1]), MPU6050_ReadBits@tmp(COMMON[1]), MPU6050_WriteBit@tmp(COMMON[1]), MPU6050_WriteBits@tmp(COMMON[1]), 
		 -> MPU6050_GetRawAccel@tempBuffer(COMMON[6]), MPU6050_GetRawAccelGyro@tmpBuffer(COMMON[14]), 

    I2C2_MasterWriteTRBBuild@ptrb	PTR struct . size(1) Largest target is 5
		 -> I2C2_MasterWrite@trBlock(BANK2[5]), 

    I2C2_MasterReadTRBBuild@pdata	PTR unsigned char  size(2) Largest target is 24
		 -> data(BANK3[8]), b1(BANK3[24]), HMC5883L_ReadBit@tmp(COMMON[1]), HMC5883L_ReadBits@tmp(BANK0[1]), 
		 -> HMC5883L_WriteBit@tmp(COMMON[1]), HMC5883L_WriteBits@tmp(COMMON[1]), heading(BANK3[8]), HMC5883L_TestConnection@tmp(COMMON[3]), 
		 -> MPU6050_ReadBit@tmp(COMMON[1]), MPU6050_ReadBits@tmp(COMMON[1]), MPU6050_WriteBit@tmp(COMMON[1]), MPU6050_WriteBits@tmp(COMMON[1]), 
		 -> MPU6050_GetRawAccel@tempBuffer(COMMON[6]), MPU6050_GetRawAccelGyro@tmpBuffer(COMMON[14]), 

    I2C2_MasterReadTRBBuild@ptrb.pbuffer	PTR unsigned char  size(2) Largest target is 24
		 -> I2C_BufferRead@ReadAddr(BANK0[1]), I2C_BufferRead@status(BANK0[1]), I2C_ByteWrite@data(BANK0[2]), I2C_ByteWrite@status(BANK0[1]), 
		 -> data(BANK3[8]), b1(BANK3[24]), HMC5883L_ReadBit@tmp(COMMON[1]), HMC5883L_ReadBits@tmp(BANK0[1]), 
		 -> HMC5883L_WriteBit@tmp(COMMON[1]), HMC5883L_WriteBits@tmp(COMMON[1]), heading(BANK3[8]), HMC5883L_TestConnection@tmp(COMMON[3]), 
		 -> MPU6050_ReadBit@tmp(COMMON[1]), MPU6050_ReadBits@tmp(COMMON[1]), MPU6050_WriteBit@tmp(COMMON[1]), MPU6050_WriteBits@tmp(COMMON[1]), 
		 -> MPU6050_GetRawAccel@tempBuffer(COMMON[6]), MPU6050_GetRawAccelGyro@tmpBuffer(COMMON[14]), 

    I2C2_MasterReadTRBBuild@ptrb	PTR struct . size(1) Largest target is 5
		 -> I2C2_MasterRead@trBlock(BANK2[5]), 

    i2c2_object.pTrTail.ptrb_list.pbuffer	PTR unsigned char  size(2) Largest target is 24
		 -> I2C_BufferRead@ReadAddr(BANK0[1]), I2C_BufferRead@status(BANK0[1]), I2C_ByteWrite@data(BANK0[2]), I2C_ByteWrite@status(BANK0[1]), 
		 -> data(BANK3[8]), b1(BANK3[24]), HMC5883L_ReadBit@tmp(COMMON[1]), HMC5883L_ReadBits@tmp(BANK0[1]), 
		 -> HMC5883L_WriteBit@tmp(COMMON[1]), HMC5883L_WriteBits@tmp(COMMON[1]), heading(BANK3[8]), HMC5883L_TestConnection@tmp(COMMON[3]), 
		 -> MPU6050_ReadBit@tmp(COMMON[1]), MPU6050_ReadBits@tmp(COMMON[1]), MPU6050_WriteBit@tmp(COMMON[1]), MPU6050_WriteBits@tmp(COMMON[1]), 
		 -> MPU6050_GetRawAccel@tempBuffer(COMMON[6]), MPU6050_GetRawAccelGyro@tmpBuffer(COMMON[14]), 

    i2c2_object.pTrTail.pTrFlag	PTR enum E2993 size(2) Largest target is 24
		 -> I2C_BufferRead@ReadAddr(BANK0[1]), I2C_BufferRead@status(BANK0[1]), I2C_ByteWrite@data(BANK0[2]), I2C_ByteWrite@status(BANK0[1]), 
		 -> data(BANK3[8]), b1(BANK3[24]), HMC5883L_ReadBit@tmp(COMMON[1]), HMC5883L_ReadBits@tmp(BANK0[1]), 
		 -> HMC5883L_WriteBit@tmp(COMMON[1]), HMC5883L_WriteBits@tmp(COMMON[1]), heading(BANK3[8]), HMC5883L_TestConnection@tmp(COMMON[3]), 
		 -> MPU6050_ReadBit@tmp(COMMON[1]), MPU6050_ReadBits@tmp(COMMON[1]), MPU6050_WriteBit@tmp(COMMON[1]), MPU6050_WriteBits@tmp(COMMON[1]), 
		 -> MPU6050_GetRawAccel@tempBuffer(COMMON[6]), MPU6050_GetRawAccelGyro@tmpBuffer(COMMON[14]), 

    i2c2_object.pTrTail.ptrb_list	PTR struct . size(1) Largest target is 5
		 -> I2C2_MasterRead@trBlock(BANK2[5]), I2C2_MasterWrite@trBlock(BANK2[5]), 

    I2C2_MasterTRBInsert@ptrb_list	PTR struct . size(1) Largest target is 5
		 -> I2C2_MasterRead@trBlock(BANK2[5]), I2C2_MasterWrite@trBlock(BANK2[5]), 

    I2C2_MasterTRBInsert@pflag	PTR enum E2993 size(1) Largest target is 1
		 -> I2C_BufferRead@status(BANK0[1]), I2C_ByteWrite@status(BANK0[1]), 

    I2C2_MasterRead@pflag	PTR enum E2993 size(1) Largest target is 1
		 -> I2C_BufferRead@status(BANK0[1]), 

    I2C2_MasterRead@pdata	PTR unsigned char  size(2) Largest target is 24
		 -> data(BANK3[8]), b1(BANK3[24]), HMC5883L_ReadBit@tmp(COMMON[1]), HMC5883L_ReadBits@tmp(BANK0[1]), 
		 -> HMC5883L_WriteBit@tmp(COMMON[1]), HMC5883L_WriteBits@tmp(COMMON[1]), heading(BANK3[8]), HMC5883L_TestConnection@tmp(COMMON[3]), 
		 -> MPU6050_ReadBit@tmp(COMMON[1]), MPU6050_ReadBits@tmp(COMMON[1]), MPU6050_WriteBit@tmp(COMMON[1]), MPU6050_WriteBits@tmp(COMMON[1]), 
		 -> MPU6050_GetRawAccel@tempBuffer(COMMON[6]), MPU6050_GetRawAccelGyro@tmpBuffer(COMMON[14]), 

    F3105.pbuffer	PTR unsigned char  size(2) Largest target is 24
		 -> I2C_BufferRead@ReadAddr(BANK0[1]), I2C_BufferRead@status(BANK0[1]), I2C_ByteWrite@data(BANK0[2]), I2C_ByteWrite@status(BANK0[1]), 
		 -> data(BANK3[8]), b1(BANK3[24]), HMC5883L_ReadBit@tmp(COMMON[1]), HMC5883L_ReadBits@tmp(BANK0[1]), 
		 -> HMC5883L_WriteBit@tmp(COMMON[1]), HMC5883L_WriteBits@tmp(COMMON[1]), heading(BANK3[8]), HMC5883L_TestConnection@tmp(COMMON[3]), 
		 -> MPU6050_ReadBit@tmp(COMMON[1]), MPU6050_ReadBits@tmp(COMMON[1]), MPU6050_WriteBit@tmp(COMMON[1]), MPU6050_WriteBits@tmp(COMMON[1]), 
		 -> MPU6050_GetRawAccel@tempBuffer(COMMON[6]), MPU6050_GetRawAccelGyro@tmpBuffer(COMMON[14]), 

    I2C2_MasterWrite@pflag	PTR enum E2993 size(1) Largest target is 1
		 -> I2C_BufferRead@status(BANK0[1]), I2C_ByteWrite@status(BANK0[1]), 

    I2C2_MasterWrite@pdata	PTR unsigned char  size(1) Largest target is 2
		 -> I2C_BufferRead@ReadAddr(BANK0[1]), I2C_ByteWrite@data(BANK0[2]), 

    F3100.pbuffer	PTR unsigned char  size(2) Largest target is 24
		 -> I2C_BufferRead@ReadAddr(BANK0[1]), I2C_BufferRead@status(BANK0[1]), I2C_ByteWrite@data(BANK0[2]), I2C_ByteWrite@status(BANK0[1]), 
		 -> data(BANK3[8]), b1(BANK3[24]), HMC5883L_ReadBit@tmp(COMMON[1]), HMC5883L_ReadBits@tmp(BANK0[1]), 
		 -> HMC5883L_WriteBit@tmp(COMMON[1]), HMC5883L_WriteBits@tmp(COMMON[1]), heading(BANK3[8]), HMC5883L_TestConnection@tmp(COMMON[3]), 
		 -> MPU6050_ReadBit@tmp(COMMON[1]), MPU6050_ReadBits@tmp(COMMON[1]), MPU6050_WriteBit@tmp(COMMON[1]), MPU6050_WriteBits@tmp(COMMON[1]), 
		 -> MPU6050_GetRawAccel@tempBuffer(COMMON[6]), MPU6050_GetRawAccelGyro@tmpBuffer(COMMON[14]), 

    I2C2_ISR@pi2c_buf_ptr	PTR unsigned char  size(2) Largest target is 24
		 -> I2C_BufferRead@ReadAddr(BANK0[1]), I2C_BufferRead@status(BANK0[1]), I2C_ByteWrite@data(BANK0[2]), I2C_ByteWrite@status(BANK0[1]), 
		 -> data(BANK3[8]), b1(BANK3[24]), HMC5883L_ReadBit@tmp(COMMON[1]), HMC5883L_ReadBits@tmp(BANK0[1]), 
		 -> HMC5883L_WriteBit@tmp(COMMON[1]), HMC5883L_WriteBits@tmp(COMMON[1]), heading(BANK3[8]), HMC5883L_TestConnection@tmp(COMMON[3]), 
		 -> MPU6050_ReadBit@tmp(COMMON[1]), MPU6050_ReadBits@tmp(COMMON[1]), MPU6050_WriteBit@tmp(COMMON[1]), MPU6050_WriteBits@tmp(COMMON[1]), 
		 -> MPU6050_GetRawAccel@tempBuffer(COMMON[6]), MPU6050_GetRawAccelGyro@tmpBuffer(COMMON[14]), NULL(NULL[0]), 

    p_i2c2_trb_current.pbuffer	PTR unsigned char  size(2) Largest target is 24
		 -> I2C_BufferRead@ReadAddr(BANK0[1]), I2C_BufferRead@status(BANK0[1]), I2C_ByteWrite@data(BANK0[2]), I2C_ByteWrite@status(BANK0[1]), 
		 -> data(BANK3[8]), b1(BANK3[24]), HMC5883L_ReadBit@tmp(COMMON[1]), HMC5883L_ReadBits@tmp(BANK0[1]), 
		 -> HMC5883L_WriteBit@tmp(COMMON[1]), HMC5883L_WriteBits@tmp(COMMON[1]), heading(BANK3[8]), HMC5883L_TestConnection@tmp(COMMON[3]), 
		 -> MPU6050_ReadBit@tmp(COMMON[1]), MPU6050_ReadBits@tmp(COMMON[1]), MPU6050_WriteBit@tmp(COMMON[1]), MPU6050_WriteBits@tmp(COMMON[1]), 
		 -> MPU6050_GetRawAccel@tempBuffer(COMMON[6]), MPU6050_GetRawAccelGyro@tmpBuffer(COMMON[14]), 

    p_i2c2_trb_current	PTR struct . size(1) Largest target is 5
		 -> I2C2_MasterRead@trBlock(BANK2[5]), I2C2_MasterWrite@trBlock(BANK2[5]), NULL(NULL[0]), 

    i2c2_object.pTrHead.pTrFlag	PTR enum E2993 size(2) Largest target is 24
		 -> I2C_BufferRead@ReadAddr(BANK0[1]), I2C_BufferRead@status(BANK0[1]), I2C_ByteWrite@data(BANK0[2]), I2C_ByteWrite@status(BANK0[1]), 
		 -> data(BANK3[8]), b1(BANK3[24]), HMC5883L_ReadBit@tmp(COMMON[1]), HMC5883L_ReadBits@tmp(BANK0[1]), 
		 -> HMC5883L_WriteBit@tmp(COMMON[1]), HMC5883L_WriteBits@tmp(COMMON[1]), heading(BANK3[8]), HMC5883L_TestConnection@tmp(COMMON[3]), 
		 -> MPU6050_ReadBit@tmp(COMMON[1]), MPU6050_ReadBits@tmp(COMMON[1]), MPU6050_WriteBit@tmp(COMMON[1]), MPU6050_WriteBits@tmp(COMMON[1]), 
		 -> MPU6050_GetRawAccel@tempBuffer(COMMON[6]), MPU6050_GetRawAccelGyro@tmpBuffer(COMMON[14]), 

    i2c2_object.pTrHead.ptrb_list	PTR struct . size(1) Largest target is 5
		 -> I2C2_MasterRead@trBlock(BANK2[5]), I2C2_MasterWrite@trBlock(BANK2[5]), 

    S587$pbuffer	PTR unsigned char  size(2) Largest target is 24
		 -> I2C_BufferRead@ReadAddr(BANK0[1]), I2C_BufferRead@status(BANK0[1]), I2C_ByteWrite@data(BANK0[2]), I2C_ByteWrite@status(BANK0[1]), 
		 -> data(BANK3[8]), b1(BANK3[24]), HMC5883L_ReadBit@tmp(COMMON[1]), HMC5883L_ReadBits@tmp(BANK0[1]), 
		 -> HMC5883L_WriteBit@tmp(COMMON[1]), HMC5883L_WriteBits@tmp(COMMON[1]), heading(BANK3[8]), HMC5883L_TestConnection@tmp(COMMON[3]), 
		 -> MPU6050_ReadBit@tmp(COMMON[1]), MPU6050_ReadBits@tmp(COMMON[1]), MPU6050_WriteBit@tmp(COMMON[1]), MPU6050_WriteBits@tmp(COMMON[1]), 
		 -> MPU6050_GetRawAccel@tempBuffer(COMMON[6]), MPU6050_GetRawAccelGyro@tmpBuffer(COMMON[14]), 

    p_i2c2_current.pbuffer	PTR unsigned char  size(2) Largest target is 24
		 -> I2C_BufferRead@ReadAddr(BANK0[1]), I2C_BufferRead@status(BANK0[1]), I2C_ByteWrite@data(BANK0[2]), I2C_ByteWrite@status(BANK0[1]), 
		 -> data(BANK3[8]), b1(BANK3[24]), HMC5883L_ReadBit@tmp(COMMON[1]), HMC5883L_ReadBits@tmp(BANK0[1]), 
		 -> HMC5883L_WriteBit@tmp(COMMON[1]), HMC5883L_WriteBits@tmp(COMMON[1]), heading(BANK3[8]), HMC5883L_TestConnection@tmp(COMMON[3]), 
		 -> MPU6050_ReadBit@tmp(COMMON[1]), MPU6050_ReadBits@tmp(COMMON[1]), MPU6050_WriteBit@tmp(COMMON[1]), MPU6050_WriteBits@tmp(COMMON[1]), 
		 -> MPU6050_GetRawAccel@tempBuffer(COMMON[6]), MPU6050_GetRawAccelGyro@tmpBuffer(COMMON[14]), 

    S599$pTrFlag	PTR enum E2993 size(2) Largest target is 24
		 -> I2C_BufferRead@ReadAddr(BANK0[1]), I2C_BufferRead@status(BANK0[1]), I2C_ByteWrite@data(BANK0[2]), I2C_ByteWrite@status(BANK0[1]), 
		 -> data(BANK3[8]), b1(BANK3[24]), HMC5883L_ReadBit@tmp(COMMON[1]), HMC5883L_ReadBits@tmp(BANK0[1]), 
		 -> HMC5883L_WriteBit@tmp(COMMON[1]), HMC5883L_WriteBits@tmp(COMMON[1]), heading(BANK3[8]), HMC5883L_TestConnection@tmp(COMMON[3]), 
		 -> MPU6050_ReadBit@tmp(COMMON[1]), MPU6050_ReadBits@tmp(COMMON[1]), MPU6050_WriteBit@tmp(COMMON[1]), MPU6050_WriteBits@tmp(COMMON[1]), 
		 -> MPU6050_GetRawAccel@tempBuffer(COMMON[6]), MPU6050_GetRawAccelGyro@tmpBuffer(COMMON[14]), 

    p_i2c2_current.pTrFlag	PTR enum E2993 size(2) Largest target is 24
		 -> I2C_BufferRead@ReadAddr(BANK0[1]), I2C_BufferRead@status(BANK0[1]), I2C_ByteWrite@data(BANK0[2]), I2C_ByteWrite@status(BANK0[1]), 
		 -> data(BANK3[8]), b1(BANK3[24]), HMC5883L_ReadBit@tmp(COMMON[1]), HMC5883L_ReadBits@tmp(BANK0[1]), 
		 -> HMC5883L_WriteBit@tmp(COMMON[1]), HMC5883L_WriteBits@tmp(COMMON[1]), heading(BANK3[8]), HMC5883L_TestConnection@tmp(COMMON[3]), 
		 -> MPU6050_ReadBit@tmp(COMMON[1]), MPU6050_ReadBits@tmp(COMMON[1]), MPU6050_WriteBit@tmp(COMMON[1]), MPU6050_WriteBits@tmp(COMMON[1]), 
		 -> MPU6050_GetRawAccel@tempBuffer(COMMON[6]), MPU6050_GetRawAccelGyro@tmpBuffer(COMMON[14]), 

    S599$ptrb_list	PTR struct . size(1) Largest target is 5
		 -> I2C2_MasterRead@trBlock(BANK2[5]), I2C2_MasterWrite@trBlock(BANK2[5]), 

    p_i2c2_current.ptrb_list	PTR struct . size(1) Largest target is 5
		 -> I2C2_MasterRead@trBlock(BANK2[5]), I2C2_MasterWrite@trBlock(BANK2[5]), 

    p_i2c2_current	PTR struct . size(1) Largest target is 5
		 -> i2c2_tr_queue(BANK2[4]), NULL(NULL[0]), 

    S610$pTrHead	PTR struct . size(1) Largest target is 5
		 -> i2c2_tr_queue(BANK2[4]), 

    i2c2_object.pTrHead	PTR struct . size(1) Largest target is 5
		 -> i2c2_tr_queue(BANK2[4]), 

    S610$pTrTail	PTR struct . size(1) Largest target is 5
		 -> i2c2_tr_queue(BANK2[4]), 

    i2c2_object.pTrTail	PTR struct . size(1) Largest target is 5
		 -> i2c2_tr_queue(BANK2[4]), 

    TMR1_SetInterruptHandler@InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> TMR1_DefaultInterruptHandler(), 

    TMR1_InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> TMR1_DefaultInterruptHandler(), Absolute function(), 

    IOCAF2_SetInterruptHandler@InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> IOCAF2_DefaultInterruptHandler(), 

    IOCAF2_InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), IOCAF2_DefaultInterruptHandler(), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _INTERRUPT_InterruptManager in COMMON

    _INTERRUPT_InterruptManager->_I2C2_ISR
    _I2C2_ISR->_I2C2_Stop

Critical Paths under _main in BANK0

    _main->_Wireless_packageData
    _Wireless_wake->_RF_ReadRegisterData
    _Wireless_sleep->_RF_ReadRegisterData
    _Wireless_packageData->___fttol
    _Wireless_determineTransmitPower->_Wireless_sendData
    _Wireless_sendData->_RF_TxPayload
    _RF_TxPayload->_RF_WriteRegisterData
    _RF_Write->_SPI_WriteRead
    _RF_GetStatus->_RF_WriteRead
    _RF_WriteRead->_SPI_WriteRead
    _Wireless_changeTransmitPower->_RF_ReadRegisterData
    _Wireless_checkDataReceived->_RF_RxPayload
    _RF_RxPayload->_RF_ReadRegisterData
    _RF_ReadRegisterData->_SPI_WriteReadBuffer
    _SPI_WriteReadBuffer->_SPI_WriteRead
    _RF_DataIsReady->_RF_ReadRegister
    _RF_ReadRegister->_SPI_WriteRead
    _DOOR_update->_Storage_save
    _Storage_save->_DATAEE_WriteByte
    _Sensor_getSupplyVoltage->___ftdiv
    _Wireless_init->_RF_WriteRegisterData
    _RF_WriteRegisterData->_SPI_WriteBuffer
    _SPI_WriteBuffer->_SPI_WriteRead
    _RF_ResetStatusIRQ->_RF_WriteRegister
    _RF_WriteRegister->_SPI_WriteRead
    _SPI_WriteRead->_SPI1_Exchange8bit
    _Timeout_updateCurrentTime->___lmul
    _TMR1_Initialize->_TMR1_SetInterruptHandler
    _PIN_MANAGER_Initialize->_IOCAF2_SetInterruptHandler
    _BMP_readTemperature->___fttol
    ___lwtoft->___ftpack
    ___fttol->___ftmul
    ___ftneg->___ftdiv
    ___ftmul->___ftadd
    ___ftdiv->___altoft
    ___ftadd->_Sensor_getSupplyVoltage
    ___awtoft->___ftpack
    ___altoft->___ftpack
    ___altoft->___ftpack
    _HMC5883L_ReadBits->_HMC5883L_I2C_BufferRead
    _HMC5883L_I2C_BufferRead->_I2C_BufferRead
    _BMP_init->_I2C_BufferRead
    _I2C_ByteWrite->_I2C2_MasterWrite
    _I2C_BufferRead->_I2C2_MasterRead
    _I2C2_MasterWrite->_I2C2_MasterWriteTRBBuild
    _I2C2_MasterRead->_I2C2_MasterReadTRBBuild

Critical Paths under _INTERRUPT_InterruptManager in BANK0

    None.

Critical Paths under _main in BANK1

    _main->_Wireless_packageData
    _Wireless_packageData->_BMP_readTemperature
    _BMP_readTemperature->___fttol

Critical Paths under _INTERRUPT_InterruptManager in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK12

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                14    14      0  108382
                                             40 BANK1      2     2      0
                                              0 BANK3     12    12      0
                           _BMP_init
                _BMP_readTemperature
                          _DOOR_init
                           _DOOR_run
                  _SYSTEM_Initialize
             _Sensor_peripheralSleep
           _Timeout_getGlobalCounter
          _Timeout_updateCurrentTime
    _Wireless_determineTransmitPower
                      _Wireless_init
               _Wireless_packageData
                     _Wireless_sleep
                      _Wireless_wake
                            ___lldiv
                            ___lwdiv
                       _setSleepTime
 ---------------------------------------------------------------------------------
 (1) _setSleepTime                                         2     0      2     154
                                              1 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (1) ___lwdiv                                              8     4      4     703
                                              1 BANK0      8     4      4
 ---------------------------------------------------------------------------------
 (1) ___lldiv                                             14     6      8     395
                                              1 BANK0     14     6      8
 ---------------------------------------------------------------------------------
 (1) _Wireless_wake                                        2     2      0    2442
                                             15 BANK0      2     2      0
                _RF_ReadRegisterData
                   _RF_WriteRegister
 ---------------------------------------------------------------------------------
 (1) _Wireless_sleep                                       2     2      0    2442
                                             15 BANK0      2     2      0
                _RF_ReadRegisterData
                   _RF_WriteRegister
 ---------------------------------------------------------------------------------
 (1) _Wireless_packageData                                15    11      4   33911
                                             78 BANK0      1     1      0
                                             26 BANK1     14    10      4
                _BMP_readTemperature (ARG)
               _Diag_getSensorHealth
            _Sensor_getSupplyVoltage
         _Wireless_checkDataReceived
    _Wireless_determineTransmitPower
                  _Wireless_sendData
                            ___ftadd
                            ___ftmul
                            ___fttol
                            ___lldiv (ARG)
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (2) _Wireless_determineTransmitPower                      6     6      0    7359
                                             21 BANK0      6     6      0
       _Wireless_changeTransmitPower
  _Wireless_isDataTransmitSuccessful
                  _Wireless_sendData
                              _limit
 ---------------------------------------------------------------------------------
 (2) _Wireless_sendData                                    4     3      1    3104
                                             17 BANK0      4     3      1
                       _RF_GetStatus
                  _RF_ResetStatusIRQ
                       _RF_TxPayload
 ---------------------------------------------------------------------------------
 (3) _RF_TxPayload                                         3     2      1    1536
                                             14 BANK0      3     2      1
                           _RF_Write
               _RF_WriteRegisterData
 ---------------------------------------------------------------------------------
 (4) _RF_Write                                             1     1      0      93
                                              3 BANK0      1     1      0
                      _SPI_WriteRead
 ---------------------------------------------------------------------------------
 (3) _Wireless_isDataTransmitSuccessful                    2     2      0     161
                                              5 BANK0      2     2      0
                       _RF_GetStatus
 ---------------------------------------------------------------------------------
 (3) _RF_GetStatus                                         0     0      0     127
                       _RF_WriteRead
 ---------------------------------------------------------------------------------
 (4) _RF_WriteRead                                         2     2      0     127
                                              3 BANK0      2     2      0
                      _SPI_WriteRead
 ---------------------------------------------------------------------------------
 (3) _Wireless_changeTransmitPower                         5     5      0    3189
                                             15 BANK0      5     5      0
                _RF_ReadRegisterData
                   _RF_WriteRegister
                              _limit
 ---------------------------------------------------------------------------------
 (3) _limit                                                7     1      6     679
                                              1 BANK0      7     1      6
 ---------------------------------------------------------------------------------
 (2) _Wireless_checkDataReceived                           9     9      0    3463
                                             19 BANK0      9     9      0
                      _DOOR_resetPos
                        _DOOR_update
                     _RF_DataIsReady
                       _RF_RxPayload
                             ___lmul
 ---------------------------------------------------------------------------------
 (3) _RF_RxPayload                                         4     3      1    1415
                                             15 BANK0      4     3      1
                _RF_ReadRegisterData
 ---------------------------------------------------------------------------------
 (2) _RF_ReadRegisterData                                  5     3      2    1243
                                             10 BANK0      5     3      2
                      _SPI_WriteRead
                _SPI_WriteReadBuffer
 ---------------------------------------------------------------------------------
 (3) _SPI_WriteReadBuffer                                  7     5      2     441
                                              3 BANK0      7     5      2
                      _SPI_WriteRead
 ---------------------------------------------------------------------------------
 (3) _RF_DataIsReady                                       3     3      0     292
                                              6 BANK0      3     3      0
                    _RF_ReadRegister
 ---------------------------------------------------------------------------------
 (4) _RF_ReadRegister                                      3     3      0     127
                                              3 BANK0      3     3      0
                      _SPI_WriteRead
 ---------------------------------------------------------------------------------
 (3) _DOOR_update                                          3     2      1     978
                                              7 BANK0      3     2      1
                       _Storage_save
 ---------------------------------------------------------------------------------
 (4) _Storage_save                                         3     2      1     700
                                              4 BANK0      3     2      1
                   _DATAEE_WriteByte
 ---------------------------------------------------------------------------------
 (5) _DATAEE_WriteByte                                     3     2      1     561
                                              1 BANK0      3     2      1
 ---------------------------------------------------------------------------------
 (3) _DOOR_resetPos                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _Sensor_getSupplyVoltage                              8     5      3    7868
                                             33 BANK0      8     5      3
            _ADC_GetConversionResult
               _ADC_IsConversionDone
                  _ADC_SelectChannel
                _ADC_StartConversion
                  _FVR_IsOutputReady
             _Sensor_peripheralSleep
              _Sensor_peripheralWake
                            ___ftdiv
                           ___lwtoft
 ---------------------------------------------------------------------------------
 (3) _Sensor_peripheralWake                                0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _Sensor_peripheralSleep                               0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _FVR_IsOutputReady                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _ADC_StartConversion                                  0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _ADC_SelectChannel                                    2     2      0      31
                                              1 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (3) _ADC_IsConversionDone                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _ADC_GetConversionResult                              2     0      2       0
                                              1 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (2) _Diag_getSensorHealth                                 2     2      0      43
                                              1 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _Wireless_init                                        2     2      0    3552
                                             14 BANK0      2     2      0
                            _RF_Init
                  _RF_ResetStatusIRQ
                   _RF_WriteRegister
               _RF_WriteRegisterData
 ---------------------------------------------------------------------------------
 (4) _RF_WriteRegisterData                                 5     2      3    1271
                                              9 BANK0      5     2      3
                    _SPI_WriteBuffer
                      _SPI_WriteRead
 ---------------------------------------------------------------------------------
 (5) _SPI_WriteBuffer                                      6     3      3     346
                                              3 BANK0      6     3      3
                      _SPI_WriteRead
 ---------------------------------------------------------------------------------
 (3) _RF_ResetStatusIRQ                                    2     2      0    1156
                                              5 BANK0      2     2      0
                   _RF_WriteRegister
 ---------------------------------------------------------------------------------
 (2) _RF_WriteRegister                                     2     1      1    1125
                                              3 BANK0      2     1      1
                      _SPI_WriteRead
 ---------------------------------------------------------------------------------
 (3) _SPI_WriteRead                                        1     1      0      62
                                              2 BANK0      1     1      0
                  _SPI1_Exchange8bit
 ---------------------------------------------------------------------------------
 (4) _SPI1_Exchange8bit                                    1     1      0      31
                                              1 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _RF_Init                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Timeout_updateCurrentTime                            8     8      0     617
                                             13 BANK0      8     8      0
                     _TMR1_ReadTimer
                             ___lmul
 ---------------------------------------------------------------------------------
 (3) ___lmul                                              12     4      8     444
                                              1 BANK0     12     4      8
 ---------------------------------------------------------------------------------
 (2) _TMR1_ReadTimer                                      11     9      2     102
                                              1 BANK0     11     9      2
 ---------------------------------------------------------------------------------
 (1) _Timeout_getGlobalCounter                             4     0      4       0
                                              1 BANK0      4     0      4
 ---------------------------------------------------------------------------------
 (1) _SYSTEM_Initialize                                    0     0      0     216
                     _ADC_Initialize
                     _FVR_Initialize
                    _I2C2_Initialize
              _OSCILLATOR_Initialize
             _PIN_MANAGER_Initialize
                    _SPI1_Initialize
                    _TMR1_Initialize
                    _TMR2_Initialize
                     _WDT_Initialize
 ---------------------------------------------------------------------------------
 (2) _WDT_Initialize                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _TMR2_Initialize                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _TMR1_Initialize                                      0     0      0     108
           _TMR1_SetInterruptHandler
 ---------------------------------------------------------------------------------
 (3) _TMR1_SetInterruptHandler                             2     0      2     108
                                              1 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (2) _SPI1_Initialize                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _PIN_MANAGER_Initialize                               0     0      0     108
         _IOCAF2_SetInterruptHandler
 ---------------------------------------------------------------------------------
 (3) _IOCAF2_SetInterruptHandler                           2     0      2     108
                                              1 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (2) _OSCILLATOR_Initialize                                0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _I2C2_Initialize                                      1     1      0       0
                                              1 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _FVR_Initialize                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _ADC_Initialize                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _DOOR_run                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _DOOR_init                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _BMP_readTemperature                                 20    17      3   48745
                                              6 BANK1     20    17      3
                           _BMP_init
           _Diag_getTempSensorHealth
           _Diag_setTempSensorHealth
                  _HMC5883L_ReadBits
                     _I2C_BufferRead
                      _I2C_ByteWrite
                            ___aldiv
                           ___altoft
                           ___awtoft
                            ___ftadd
                            ___ftdiv
                            ___ftmul
                            ___ftneg
                            ___fttol
                           ___lwtoft
 ---------------------------------------------------------------------------------
 (3) ___lwtoft                                             4     1      3    2923
                                              9 BANK0      4     1      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (2) ___fttol                                             14    10      4     679
                                             70 BANK0      8     4      4
                                              0 BANK1      6     6      0
            _Sensor_getSupplyVoltage (ARG)
                           ___altoft (ARG)
                            ___ftadd (ARG)
                            ___ftmul (ARG)
 ---------------------------------------------------------------------------------
 (2) ___ftneg                                              3     0      3     524
                                             33 BANK0      3     0      3
                            ___ftdiv (ARG)
                           ___lwtoft (ARG)
 ---------------------------------------------------------------------------------
 (2) ___ftmul                                             16    10      6    4338
                                             54 BANK0     16    10      6
            _Sensor_getSupplyVoltage (ARG)
                           ___altoft (ARG)
                           ___awtoft (ARG)
                            ___ftadd (ARG)
                            ___ftdiv (ARG)
                            ___ftneg (ARG)
                           ___ftpack
                           ___lwtoft (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftdiv                                             16    10      6    4846
                                             17 BANK0     16    10      6
                           ___altoft (ARG)
                           ___ftpack
                           ___ftpack (ARG)
                           ___lwtoft (ARG)
 ---------------------------------------------------------------------------------
 (2) ___ftadd                                             13     7      6    5611
                                             41 BANK0     13     7      6
            _Sensor_getSupplyVoltage (ARG)
                           ___altoft (ARG)
                            ___ftdiv (ARG)
                            ___ftneg (ARG)
                           ___ftpack
                           ___lwtoft (ARG)
 ---------------------------------------------------------------------------------
 (2) ___awtoft                                             6     3      3    3025
                                              9 BANK0      6     3      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (2) ___altoft                                             8     4      4    3096
                                              9 BANK0      8     4      4
                           ___ftpack
                           ___ftpack (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftpack                                             8     3      5    2584
                                              1 BANK0      8     3      5
 ---------------------------------------------------------------------------------
 (2) ___aldiv                                             15     7      8     599
                                              1 BANK0     15     7      8
 ---------------------------------------------------------------------------------
 (2) _HMC5883L_ReadBits                                   10     6      4    8661
                                             35 BANK0     10     6      4
            _HMC5883L_I2C_BufferRead
 ---------------------------------------------------------------------------------
 (3) _HMC5883L_I2C_BufferRead                              7     2      5    6134
                                             28 BANK0      7     2      5
                     _I2C_BufferRead
 ---------------------------------------------------------------------------------
 (2) _Diag_getTempSensorHealth                             0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _BMP_init                                             4     4      0    7138
                                             28 BANK0      4     4      0
           _Diag_setTempSensorHealth
                     _I2C_BufferRead
                      _I2C_ByteWrite
 ---------------------------------------------------------------------------------
 (2) _I2C_ByteWrite                                       10     8      2    2674
                                             15 BANK0     10     8      2
                   _I2C2_MasterWrite
                 _Timeout_hasExpired
                 _Timeout_setTimeout
 ---------------------------------------------------------------------------------
 (2) _I2C_BufferRead                                      11     6      5    4393
                                             17 BANK0     11     6      5
                    _I2C2_MasterRead
                   _I2C2_MasterWrite
                 _Timeout_hasExpired
                 _Timeout_setTimeout
 ---------------------------------------------------------------------------------
 (3) _Timeout_setTimeout                                   2     0      2     262
                                              1 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (3) _Timeout_hasExpired                                  12    12      0       0
                                              1 BANK0     12    12      0
 ---------------------------------------------------------------------------------
 (3) _I2C2_MasterWrite                                     7     3      4    1627
                                              8 BANK0      7     3      4
               _I2C2_MasterTRBInsert
           _I2C2_MasterWriteTRBBuild
 ---------------------------------------------------------------------------------
 (4) _I2C2_MasterWriteTRBBuild                             7     3      4     450
                                              1 BANK0      7     3      4
 ---------------------------------------------------------------------------------
 (3) _I2C2_MasterRead                                      8     2      6    1398
                                              9 BANK0      8     2      6
            _I2C2_MasterReadTRBBuild
               _I2C2_MasterTRBInsert
 ---------------------------------------------------------------------------------
 (4) _I2C2_MasterTRBInsert                                 4     2      2     494
                                              1 BANK0      4     2      2
 ---------------------------------------------------------------------------------
 (4) _I2C2_MasterReadTRBBuild                              8     3      5     481
                                              1 BANK0      8     3      5
 ---------------------------------------------------------------------------------
 (2) _Diag_setTempSensorHealth                             2     2      0      31
                                              1 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (9) _INTERRUPT_InterruptManager                           1     1      0      22
                                              0 BANK0      1     1      0
               _I2C2_BusCollisionISR
                           _I2C2_ISR
                    _PIN_MANAGER_IOC
                           _TMR1_ISR
 ---------------------------------------------------------------------------------
 (10) _TMR1_ISR                                            0     0      0       0
                      _TMR1_CallBack
 ---------------------------------------------------------------------------------
 (11) _TMR1_CallBack                                       0     0      0       0
                   Absolute function *
       _TMR1_DefaultInterruptHandler *
                  _Timeout_increment
 ---------------------------------------------------------------------------------
 (12) _Timeout_increment                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (12) _TMR1_DefaultInterruptHandler                        0     0      0       0
 ---------------------------------------------------------------------------------
 (10) _PIN_MANAGER_IOC                                     0     0      0       0
                         _IOCAF2_ISR
 ---------------------------------------------------------------------------------
 (11) _IOCAF2_ISR                                          0     0      0       0
                   Absolute function *
     _IOCAF2_DefaultInterruptHandler *
 ---------------------------------------------------------------------------------
 (12) _IOCAF2_DefaultInterruptHandler                      0     0      0       0
 ---------------------------------------------------------------------------------
 (12) Absolute function(Fake)                              0     0      0       0
 ---------------------------------------------------------------------------------
 (10) _I2C2_ISR                                            4     4      0      22
                                              3 COMMON     4     4      0
              _I2C2_FunctionComplete
                          _I2C2_Stop
 ---------------------------------------------------------------------------------
 (11) _I2C2_Stop                                           3     3      0      22
                                              0 COMMON     3     3      0
 ---------------------------------------------------------------------------------
 (11) _I2C2_FunctionComplete                               1     1      0       0
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (10) _I2C2_BusCollisionISR                                0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 12
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _BMP_init
     _Diag_setTempSensorHealth
     _I2C_BufferRead
       _I2C2_MasterRead
         _I2C2_MasterReadTRBBuild
         _I2C2_MasterTRBInsert
       _I2C2_MasterWrite
         _I2C2_MasterTRBInsert
         _I2C2_MasterWriteTRBBuild
       _Timeout_hasExpired
       _Timeout_setTimeout
     _I2C_ByteWrite
       _I2C2_MasterWrite
         _I2C2_MasterTRBInsert
         _I2C2_MasterWriteTRBBuild
       _Timeout_hasExpired
       _Timeout_setTimeout
   _BMP_readTemperature
     _BMP_init
       _Diag_setTempSensorHealth
       _I2C_BufferRead
         _I2C2_MasterRead
           _I2C2_MasterReadTRBBuild
           _I2C2_MasterTRBInsert
         _I2C2_MasterWrite
           _I2C2_MasterTRBInsert
           _I2C2_MasterWriteTRBBuild
         _Timeout_hasExpired
         _Timeout_setTimeout
       _I2C_ByteWrite
         _I2C2_MasterWrite
           _I2C2_MasterTRBInsert
           _I2C2_MasterWriteTRBBuild
         _Timeout_hasExpired
         _Timeout_setTimeout
     _Diag_getTempSensorHealth
     _Diag_setTempSensorHealth
     _HMC5883L_ReadBits
       _HMC5883L_I2C_BufferRead
         _I2C_BufferRead
           _I2C2_MasterRead
             _I2C2_MasterReadTRBBuild
             _I2C2_MasterTRBInsert
           _I2C2_MasterWrite
             _I2C2_MasterTRBInsert
             _I2C2_MasterWriteTRBBuild
           _Timeout_hasExpired
           _Timeout_setTimeout
     _I2C_BufferRead
       _I2C2_MasterRead
         _I2C2_MasterReadTRBBuild
         _I2C2_MasterTRBInsert
       _I2C2_MasterWrite
         _I2C2_MasterTRBInsert
         _I2C2_MasterWriteTRBBuild
       _Timeout_hasExpired
       _Timeout_setTimeout
     _I2C_ByteWrite
       _I2C2_MasterWrite
         _I2C2_MasterTRBInsert
         _I2C2_MasterWriteTRBBuild
       _Timeout_hasExpired
       _Timeout_setTimeout
     ___aldiv
     ___altoft
       ___ftpack
       ___ftpack (ARG)
     ___awtoft
       ___ftpack
     ___ftadd
       _Sensor_getSupplyVoltage (ARG)
         _ADC_GetConversionResult
         _ADC_IsConversionDone
         _ADC_SelectChannel
         _ADC_StartConversion
         _FVR_IsOutputReady
         _Sensor_peripheralSleep
         _Sensor_peripheralWake
         ___ftdiv
           ___altoft (ARG)
             ___ftpack
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
         ___lwtoft
           ___ftpack
       ___altoft (ARG)
         ___ftpack
         ___ftpack (ARG)
       ___ftdiv (ARG)
         ___altoft (ARG)
           ___ftpack
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
       ___ftneg (ARG)
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
         ___lwtoft (ARG)
           ___ftpack
       ___ftpack (ARG)
       ___lwtoft (ARG)
         ___ftpack
     ___ftdiv
       ___altoft (ARG)
         ___ftpack
         ___ftpack (ARG)
       ___ftpack (ARG)
       ___ftpack (ARG)
       ___lwtoft (ARG)
         ___ftpack
     ___ftmul
       _Sensor_getSupplyVoltage (ARG)
         _ADC_GetConversionResult
         _ADC_IsConversionDone
         _ADC_SelectChannel
         _ADC_StartConversion
         _FVR_IsOutputReady
         _Sensor_peripheralSleep
         _Sensor_peripheralWake
         ___ftdiv
           ___altoft (ARG)
             ___ftpack
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
         ___lwtoft
           ___ftpack
       ___altoft (ARG)
         ___ftpack
         ___ftpack (ARG)
       ___awtoft (ARG)
         ___ftpack
       ___ftadd (ARG)
         _Sensor_getSupplyVoltage (ARG)
           _ADC_GetConversionResult
           _ADC_IsConversionDone
           _ADC_SelectChannel
           _ADC_StartConversion
           _FVR_IsOutputReady
           _Sensor_peripheralSleep
           _Sensor_peripheralWake
           ___ftdiv
             ___altoft (ARG)
               ___ftpack
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
           ___lwtoft
             ___ftpack
         ___altoft (ARG)
           ___ftpack
           ___ftpack (ARG)
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
         ___ftneg (ARG)
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
           ___lwtoft (ARG)
             ___ftpack
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
       ___ftdiv (ARG)
         ___altoft (ARG)
           ___ftpack
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
       ___ftneg (ARG)
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
         ___lwtoft (ARG)
           ___ftpack
       ___ftpack (ARG)
       ___lwtoft (ARG)
         ___ftpack
     ___ftneg
       ___ftdiv (ARG)
         ___altoft (ARG)
           ___ftpack
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
       ___lwtoft (ARG)
         ___ftpack
     ___fttol
       _Sensor_getSupplyVoltage (ARG)
         _ADC_GetConversionResult
         _ADC_IsConversionDone
         _ADC_SelectChannel
         _ADC_StartConversion
         _FVR_IsOutputReady
         _Sensor_peripheralSleep
         _Sensor_peripheralWake
         ___ftdiv
           ___altoft (ARG)
             ___ftpack
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
         ___lwtoft
           ___ftpack
       ___altoft (ARG)
         ___ftpack
         ___ftpack (ARG)
       ___ftadd (ARG)
         _Sensor_getSupplyVoltage (ARG)
           _ADC_GetConversionResult
           _ADC_IsConversionDone
           _ADC_SelectChannel
           _ADC_StartConversion
           _FVR_IsOutputReady
           _Sensor_peripheralSleep
           _Sensor_peripheralWake
           ___ftdiv
             ___altoft (ARG)
               ___ftpack
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
           ___lwtoft
             ___ftpack
         ___altoft (ARG)
           ___ftpack
           ___ftpack (ARG)
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
         ___ftneg (ARG)
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
           ___lwtoft (ARG)
             ___ftpack
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
       ___ftmul (ARG)
         _Sensor_getSupplyVoltage (ARG)
           _ADC_GetConversionResult
           _ADC_IsConversionDone
           _ADC_SelectChannel
           _ADC_StartConversion
           _FVR_IsOutputReady
           _Sensor_peripheralSleep
           _Sensor_peripheralWake
           ___ftdiv
             ___altoft (ARG)
               ___ftpack
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
           ___lwtoft
             ___ftpack
         ___altoft (ARG)
           ___ftpack
           ___ftpack (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           _Sensor_getSupplyVoltage (ARG)
             _ADC_GetConversionResult
             _ADC_IsConversionDone
             _ADC_SelectChannel
             _ADC_StartConversion
             _FVR_IsOutputReady
             _Sensor_peripheralSleep
             _Sensor_peripheralWake
             ___ftdiv
               ___altoft (ARG)
                 ___ftpack
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
             ___lwtoft
               ___ftpack
           ___altoft (ARG)
             ___ftpack
             ___ftpack (ARG)
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
           ___ftneg (ARG)
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
             ___lwtoft (ARG)
               ___ftpack
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
         ___ftneg (ARG)
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
           ___lwtoft (ARG)
             ___ftpack
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
     ___lwtoft
       ___ftpack
   _DOOR_init
   _DOOR_run
   _SYSTEM_Initialize
     _ADC_Initialize
     _FVR_Initialize
     _I2C2_Initialize
     _OSCILLATOR_Initialize
     _PIN_MANAGER_Initialize
       _IOCAF2_SetInterruptHandler
     _SPI1_Initialize
     _TMR1_Initialize
       _TMR1_SetInterruptHandler
     _TMR2_Initialize
     _WDT_Initialize
   _Sensor_peripheralSleep
   _Timeout_getGlobalCounter
   _Timeout_updateCurrentTime
     _TMR1_ReadTimer
     ___lmul
   _Wireless_determineTransmitPower
     _Wireless_changeTransmitPower
       _RF_ReadRegisterData
         _SPI_WriteRead
           _SPI1_Exchange8bit
         _SPI_WriteReadBuffer
           _SPI_WriteRead
             _SPI1_Exchange8bit
       _RF_WriteRegister
         _SPI_WriteRead
           _SPI1_Exchange8bit
       _limit
     _Wireless_isDataTransmitSuccessful
       _RF_GetStatus
         _RF_WriteRead
           _SPI_WriteRead
             _SPI1_Exchange8bit
     _Wireless_sendData
       _RF_GetStatus
         _RF_WriteRead
           _SPI_WriteRead
             _SPI1_Exchange8bit
       _RF_ResetStatusIRQ
         _RF_WriteRegister
           _SPI_WriteRead
             _SPI1_Exchange8bit
       _RF_TxPayload
         _RF_Write
           _SPI_WriteRead
             _SPI1_Exchange8bit
         _RF_WriteRegisterData
           _SPI_WriteBuffer
             _SPI_WriteRead
               _SPI1_Exchange8bit
           _SPI_WriteRead
             _SPI1_Exchange8bit
     _limit
   _Wireless_init
     _RF_Init
     _RF_ResetStatusIRQ
       _RF_WriteRegister
         _SPI_WriteRead
           _SPI1_Exchange8bit
     _RF_WriteRegister
       _SPI_WriteRead
         _SPI1_Exchange8bit
     _RF_WriteRegisterData
       _SPI_WriteBuffer
         _SPI_WriteRead
           _SPI1_Exchange8bit
       _SPI_WriteRead
         _SPI1_Exchange8bit
   _Wireless_packageData
     _BMP_readTemperature (ARG)
       _BMP_init
         _Diag_setTempSensorHealth
         _I2C_BufferRead
           _I2C2_MasterRead
             _I2C2_MasterReadTRBBuild
             _I2C2_MasterTRBInsert
           _I2C2_MasterWrite
             _I2C2_MasterTRBInsert
             _I2C2_MasterWriteTRBBuild
           _Timeout_hasExpired
           _Timeout_setTimeout
         _I2C_ByteWrite
           _I2C2_MasterWrite
             _I2C2_MasterTRBInsert
             _I2C2_MasterWriteTRBBuild
           _Timeout_hasExpired
           _Timeout_setTimeout
       _Diag_getTempSensorHealth
       _Diag_setTempSensorHealth
       _HMC5883L_ReadBits
         _HMC5883L_I2C_BufferRead
           _I2C_BufferRead
             _I2C2_MasterRead
               _I2C2_MasterReadTRBBuild
               _I2C2_MasterTRBInsert
             _I2C2_MasterWrite
               _I2C2_MasterTRBInsert
               _I2C2_MasterWriteTRBBuild
             _Timeout_hasExpired
             _Timeout_setTimeout
       _I2C_BufferRead
         _I2C2_MasterRead
           _I2C2_MasterReadTRBBuild
           _I2C2_MasterTRBInsert
         _I2C2_MasterWrite
           _I2C2_MasterTRBInsert
           _I2C2_MasterWriteTRBBuild
         _Timeout_hasExpired
         _Timeout_setTimeout
       _I2C_ByteWrite
         _I2C2_MasterWrite
           _I2C2_MasterTRBInsert
           _I2C2_MasterWriteTRBBuild
         _Timeout_hasExpired
         _Timeout_setTimeout
       ___aldiv
       ___altoft
         ___ftpack
         ___ftpack (ARG)
       ___awtoft
         ___ftpack
       ___ftadd
         _Sensor_getSupplyVoltage (ARG)
           _ADC_GetConversionResult
           _ADC_IsConversionDone
           _ADC_SelectChannel
           _ADC_StartConversion
           _FVR_IsOutputReady
           _Sensor_peripheralSleep
           _Sensor_peripheralWake
           ___ftdiv
             ___altoft (ARG)
               ___ftpack
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
           ___lwtoft
             ___ftpack
         ___altoft (ARG)
           ___ftpack
           ___ftpack (ARG)
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
         ___ftneg (ARG)
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
           ___lwtoft (ARG)
             ___ftpack
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
       ___ftdiv
         ___altoft (ARG)
           ___ftpack
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
       ___ftmul
         _Sensor_getSupplyVoltage (ARG)
           _ADC_GetConversionResult
           _ADC_IsConversionDone
           _ADC_SelectChannel
           _ADC_StartConversion
           _FVR_IsOutputReady
           _Sensor_peripheralSleep
           _Sensor_peripheralWake
           ___ftdiv
             ___altoft (ARG)
               ___ftpack
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
           ___lwtoft
             ___ftpack
         ___altoft (ARG)
           ___ftpack
           ___ftpack (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           _Sensor_getSupplyVoltage (ARG)
             _ADC_GetConversionResult
             _ADC_IsConversionDone
             _ADC_SelectChannel
             _ADC_StartConversion
             _FVR_IsOutputReady
             _Sensor_peripheralSleep
             _Sensor_peripheralWake
             ___ftdiv
               ___altoft (ARG)
                 ___ftpack
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
             ___lwtoft
               ___ftpack
           ___altoft (ARG)
             ___ftpack
             ___ftpack (ARG)
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
           ___ftneg (ARG)
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
             ___lwtoft (ARG)
               ___ftpack
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
         ___ftneg (ARG)
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
           ___lwtoft (ARG)
             ___ftpack
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
       ___ftneg
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
         ___lwtoft (ARG)
           ___ftpack
       ___fttol
         _Sensor_getSupplyVoltage (ARG)
           _ADC_GetConversionResult
           _ADC_IsConversionDone
           _ADC_SelectChannel
           _ADC_StartConversion
           _FVR_IsOutputReady
           _Sensor_peripheralSleep
           _Sensor_peripheralWake
           ___ftdiv
             ___altoft (ARG)
               ___ftpack
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
           ___lwtoft
             ___ftpack
         ___altoft (ARG)
           ___ftpack
           ___ftpack (ARG)
         ___ftadd (ARG)
           _Sensor_getSupplyVoltage (ARG)
             _ADC_GetConversionResult
             _ADC_IsConversionDone
             _ADC_SelectChannel
             _ADC_StartConversion
             _FVR_IsOutputReady
             _Sensor_peripheralSleep
             _Sensor_peripheralWake
             ___ftdiv
               ___altoft (ARG)
                 ___ftpack
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
             ___lwtoft
               ___ftpack
           ___altoft (ARG)
             ___ftpack
             ___ftpack (ARG)
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
           ___ftneg (ARG)
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
             ___lwtoft (ARG)
               ___ftpack
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
         ___ftmul (ARG)
           _Sensor_getSupplyVoltage (ARG)
             _ADC_GetConversionResult
             _ADC_IsConversionDone
             _ADC_SelectChannel
             _ADC_StartConversion
             _FVR_IsOutputReady
             _Sensor_peripheralSleep
             _Sensor_peripheralWake
             ___ftdiv
               ___altoft (ARG)
                 ___ftpack
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
             ___lwtoft
               ___ftpack
           ___altoft (ARG)
             ___ftpack
             ___ftpack (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             _Sensor_getSupplyVoltage (ARG)
               _ADC_GetConversionResult
               _ADC_IsConversionDone
               _ADC_SelectChannel
               _ADC_StartConversion
               _FVR_IsOutputReady
               _Sensor_peripheralSleep
               _Sensor_peripheralWake
               ___ftdiv
                 ___altoft (ARG)
                   ___ftpack
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
               ___lwtoft
                 ___ftpack
             ___altoft (ARG)
               ___ftpack
               ___ftpack (ARG)
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
             ___ftneg (ARG)
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
           ___ftneg (ARG)
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
             ___lwtoft (ARG)
               ___ftpack
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
       ___lwtoft
         ___ftpack
     _Diag_getSensorHealth (ARG)
     _Sensor_getSupplyVoltage (ARG)
       _ADC_GetConversionResult
       _ADC_IsConversionDone
       _ADC_SelectChannel
       _ADC_StartConversion
       _FVR_IsOutputReady
       _Sensor_peripheralSleep
       _Sensor_peripheralWake
       ___ftdiv
         ___altoft (ARG)
           ___ftpack
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
       ___lwtoft
         ___ftpack
     _Wireless_checkDataReceived (ARG)
       _DOOR_resetPos
       _DOOR_update
         _Storage_save
           _DATAEE_WriteByte
       _RF_DataIsReady
         _RF_ReadRegister
           _SPI_WriteRead
             _SPI1_Exchange8bit
       _RF_RxPayload
         _RF_ReadRegisterData
           _SPI_WriteRead
             _SPI1_Exchange8bit
           _SPI_WriteReadBuffer
             _SPI_WriteRead
               _SPI1_Exchange8bit
       ___lmul
     _Wireless_determineTransmitPower (ARG)
       _Wireless_changeTransmitPower
         _RF_ReadRegisterData
           _SPI_WriteRead
             _SPI1_Exchange8bit
           _SPI_WriteReadBuffer
             _SPI_WriteRead
               _SPI1_Exchange8bit
         _RF_WriteRegister
           _SPI_WriteRead
             _SPI1_Exchange8bit
         _limit
       _Wireless_isDataTransmitSuccessful
         _RF_GetStatus
           _RF_WriteRead
             _SPI_WriteRead
               _SPI1_Exchange8bit
       _Wireless_sendData
         _RF_GetStatus
           _RF_WriteRead
             _SPI_WriteRead
               _SPI1_Exchange8bit
         _RF_ResetStatusIRQ
           _RF_WriteRegister
             _SPI_WriteRead
               _SPI1_Exchange8bit
         _RF_TxPayload
           _RF_Write
             _SPI_WriteRead
               _SPI1_Exchange8bit
           _RF_WriteRegisterData
             _SPI_WriteBuffer
               _SPI_WriteRead
                 _SPI1_Exchange8bit
             _SPI_WriteRead
               _SPI1_Exchange8bit
       _limit
     _Wireless_sendData (ARG)
       _RF_GetStatus
         _RF_WriteRead
           _SPI_WriteRead
             _SPI1_Exchange8bit
       _RF_ResetStatusIRQ
         _RF_WriteRegister
           _SPI_WriteRead
             _SPI1_Exchange8bit
       _RF_TxPayload
         _RF_Write
           _SPI_WriteRead
             _SPI1_Exchange8bit
         _RF_WriteRegisterData
           _SPI_WriteBuffer
             _SPI_WriteRead
               _SPI1_Exchange8bit
           _SPI_WriteRead
             _SPI1_Exchange8bit
     ___ftadd (ARG)
       _Sensor_getSupplyVoltage (ARG)
         _ADC_GetConversionResult
         _ADC_IsConversionDone
         _ADC_SelectChannel
         _ADC_StartConversion
         _FVR_IsOutputReady
         _Sensor_peripheralSleep
         _Sensor_peripheralWake
         ___ftdiv
           ___altoft (ARG)
             ___ftpack
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
         ___lwtoft
           ___ftpack
       ___altoft (ARG)
         ___ftpack
         ___ftpack (ARG)
       ___ftdiv (ARG)
         ___altoft (ARG)
           ___ftpack
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
       ___ftneg (ARG)
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
         ___lwtoft (ARG)
           ___ftpack
       ___ftpack (ARG)
       ___lwtoft (ARG)
         ___ftpack
     ___ftmul (ARG)
       _Sensor_getSupplyVoltage (ARG)
         _ADC_GetConversionResult
         _ADC_IsConversionDone
         _ADC_SelectChannel
         _ADC_StartConversion
         _FVR_IsOutputReady
         _Sensor_peripheralSleep
         _Sensor_peripheralWake
         ___ftdiv
           ___altoft (ARG)
             ___ftpack
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
         ___lwtoft
           ___ftpack
       ___altoft (ARG)
         ___ftpack
         ___ftpack (ARG)
       ___awtoft (ARG)
         ___ftpack
       ___ftadd (ARG)
         _Sensor_getSupplyVoltage (ARG)
           _ADC_GetConversionResult
           _ADC_IsConversionDone
           _ADC_SelectChannel
           _ADC_StartConversion
           _FVR_IsOutputReady
           _Sensor_peripheralSleep
           _Sensor_peripheralWake
           ___ftdiv
             ___altoft (ARG)
               ___ftpack
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
           ___lwtoft
             ___ftpack
         ___altoft (ARG)
           ___ftpack
           ___ftpack (ARG)
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
         ___ftneg (ARG)
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
           ___lwtoft (ARG)
             ___ftpack
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
       ___ftdiv (ARG)
         ___altoft (ARG)
           ___ftpack
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
       ___ftneg (ARG)
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
         ___lwtoft (ARG)
           ___ftpack
       ___ftpack (ARG)
       ___lwtoft (ARG)
         ___ftpack
     ___fttol (ARG)
       _Sensor_getSupplyVoltage (ARG)
         _ADC_GetConversionResult
         _ADC_IsConversionDone
         _ADC_SelectChannel
         _ADC_StartConversion
         _FVR_IsOutputReady
         _Sensor_peripheralSleep
         _Sensor_peripheralWake
         ___ftdiv
           ___altoft (ARG)
             ___ftpack
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
         ___lwtoft
           ___ftpack
       ___altoft (ARG)
         ___ftpack
         ___ftpack (ARG)
       ___ftadd (ARG)
         _Sensor_getSupplyVoltage (ARG)
           _ADC_GetConversionResult
           _ADC_IsConversionDone
           _ADC_SelectChannel
           _ADC_StartConversion
           _FVR_IsOutputReady
           _Sensor_peripheralSleep
           _Sensor_peripheralWake
           ___ftdiv
             ___altoft (ARG)
               ___ftpack
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
           ___lwtoft
             ___ftpack
         ___altoft (ARG)
           ___ftpack
           ___ftpack (ARG)
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
         ___ftneg (ARG)
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
           ___lwtoft (ARG)
             ___ftpack
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
       ___ftmul (ARG)
         _Sensor_getSupplyVoltage (ARG)
           _ADC_GetConversionResult
           _ADC_IsConversionDone
           _ADC_SelectChannel
           _ADC_StartConversion
           _FVR_IsOutputReady
           _Sensor_peripheralSleep
           _Sensor_peripheralWake
           ___ftdiv
             ___altoft (ARG)
               ___ftpack
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
           ___lwtoft
             ___ftpack
         ___altoft (ARG)
           ___ftpack
           ___ftpack (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           _Sensor_getSupplyVoltage (ARG)
             _ADC_GetConversionResult
             _ADC_IsConversionDone
             _ADC_SelectChannel
             _ADC_StartConversion
             _FVR_IsOutputReady
             _Sensor_peripheralSleep
             _Sensor_peripheralWake
             ___ftdiv
               ___altoft (ARG)
                 ___ftpack
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
             ___lwtoft
               ___ftpack
           ___altoft (ARG)
             ___ftpack
             ___ftpack (ARG)
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
           ___ftneg (ARG)
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
             ___lwtoft (ARG)
               ___ftpack
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
         ___ftneg (ARG)
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
           ___lwtoft (ARG)
             ___ftpack
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
     ___lldiv (ARG)
     ___lwdiv (ARG)
   _Wireless_sleep
     _RF_ReadRegisterData
       _SPI_WriteRead
         _SPI1_Exchange8bit
       _SPI_WriteReadBuffer
         _SPI_WriteRead
           _SPI1_Exchange8bit
     _RF_WriteRegister
       _SPI_WriteRead
         _SPI1_Exchange8bit
   _Wireless_wake
     _RF_ReadRegisterData
       _SPI_WriteRead
         _SPI1_Exchange8bit
       _SPI_WriteReadBuffer
         _SPI_WriteRead
           _SPI1_Exchange8bit
     _RF_WriteRegister
       _SPI_WriteRead
         _SPI1_Exchange8bit
   ___lldiv
   ___lwdiv
   _setSleepTime

 _INTERRUPT_InterruptManager (ROOT)
   _I2C2_BusCollisionISR
   _I2C2_ISR
     _I2C2_FunctionComplete
     _I2C2_Stop
   _PIN_MANAGER_IOC
     _IOCAF2_ISR
       Absolute function(Fake) *
       _IOCAF2_DefaultInterruptHandler *
   _TMR1_ISR
     _TMR1_CallBack
       Absolute function(Fake) *
       _TMR1_DefaultInterruptHandler *
       _Timeout_increment *

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             3F0      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      7       E       2      100.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50     4F      4F       5       98.8%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BANK1               50     2A      46       7       87.5%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BITBANK2            50      0       0       8        0.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BANK2               50      0      4E       9       97.5%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BITBANK3            50      0       0      10        0.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BANK3               50      C      3C      11       75.0%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BITBANK4            50      0       0      12        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BANK4               50      0       0      13        0.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BITBANK5            50      0       0      14        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BANK5               50      0       0      15        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BITBANK6            50      0       0      16        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BANK6               50      0       0      17        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BITBANK7            50      0       0      18        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BANK7               50      0       0      19        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
ABS                  0      0     12D      20        0.0%
BITBANK8            50      0       0      21        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BANK8               50      0       0      22        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITBANK9            50      0       0      23        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BANK9               50      0       0      24        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITBANK10           50      0       0      25        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BANK10              50      0       0      26        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITBANK11           50      0       0      27        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BANK11              50      0       0      28        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITBANK12           30      0       0      29        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BANK12              30      0       0      30        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
DATA                 0      0     12D      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V1.45 build -152302408 
Symbol Table                                                                                   Tue Oct 08 22:04:31 2019

                                          _Wireless_init 0783  
                                      _SPI1_Exchange8bit 1339  
                                          _Wireless_wake 15CB  
                                     ??_RF_WriteRegister 0024  
                                           _RF_TxPayload 151F  
                                           ___altoft@exp 002F  
                                         _Wireless_sleep 1469  
                                                      pc 0002  
                           __end_of_Wireless_packageData 1000  
                                     ?_SPI1_Exchange8bit 0070  
                                            __CFG_CP$OFF 0000  
                                  ?_I2C2_MasterTRBInsert 0021  
                                          ___altoft@sign 0030  
                                                     _b1 01A8  
                           __size_of_RF_ReadRegisterData 001D  
                                 __end_of_FVR_Initialize 129E  
                                    RF_TxPayload@payload 0030  
                                      ??_SPI_WriteBuffer 0026  
                        __size_of_Sensor_peripheralSleep 0005  
                         I2C2_MasterReadTRBBuild@address 0024  
                        HMC5883L_I2C_BufferRead@ReadAddr 003E  
                                           ___ftadd@exp1 0055  
                                           ___ftadd@exp2 0054  
                                          _doorOpenAngle 00DE  
                                            __CFG_LVP$ON 0000  
                                           ___ftadd@sign 0053  
                                                    l522 1341  
                                                    l358 09EF  
                                                    l498 1688  
                                                    _PR2 001B  
                                       ??_RF_DataIsReady 0026  
                                           __CFG_CPD$OFF 0000  
                                        _timer1ReloadVal 007C  
                                    ??_SPI1_Exchange8bit 0021  
                                           ?_DOOR_update 0027  
                                        _TMR2_Initialize 12FA  
                                           __CFG_BORV$LO 0000  
                                                    wreg 0009  
                                           _RF_WriteRead 143C  
                         HMC5883L_I2C_BufferRead@pBuffer 003C  
                                           __CFG_IESO$ON 0000  
                     __end_of_IOCAF2_SetInterruptHandler 131D  
                             _IOCAF2_SetInterruptHandler 1314  
                                          _globalCounter 00CF  
                                      _Wireless_sendData 13FB  
                                    _BMP_readTemperature 0077  
                                 ??_RF_WriteRegisterData 002C  
                                          _DOOR_resetPos 1294  
                                           ___ftdiv@cntr 003B  
                                       __end_of_I2C2_ISR 068D  
                                     ?_Wireless_sendData 0031  
                                           ___ftdiv@sign 0040  
                                 RF_ResetStatusIRQ@flags 0026  
                                                   l1100 0D3E  
                                                   l1026 0086  
                                                   l1027 0096  
                                                   l1123 0FF3  
                                                   l1141 0B89  
                                                   l1406 0C14  
                                                   l1540 0AE3  
                                                   l1631 0D02  
                                                   l1547 0AF6  
                                                   l1571 072C  
                                                   l1548 0AFE  
                                                   l6101 0D68  
                                                   l6043 0877  
                                                   l6211 0BB2  
                                                   l6301 06BC  
                                                   l6221 0BFB  
                                                   l6133 0DA7  
                                                   l6117 0D90  
                                                   l6207 0BA5  
                                                   l6241 0C35  
                                                   l6233 0C25  
                                                   l6401 0EFC  
                                                   l6049 0884  
                                                   l6217 0BF5  
                                                   l6137 0DA9  
                                                   l6153 0DBF  
                                                   l5531 09E1  
                                                   l6251 0C63  
                                                   l6243 0C43  
                                                   l6331 070B  
                                                   l6307 06CB  
                                                   l5533 09E7  
                                                   l6077 0B49  
                                                   l6069 0B2D  
                                                   l6325 06F8  
                                                   l6149 0DBD  
                                                   l5527 09DA  
                                                   l6255 0C6E  
                                                   l6343 073E  
                                                   l6327 0702  
                                                   l6319 06E5  
                                                   l6511 00E6  
                                                   l6503 00C5  
                                                   l5553 1703  
                                                   l6273 084C  
                                                   l6337 071E  
                                                   l6329 0707  
                                                   l6425 0CA0  
                                                   l6097 0D2F  
                                                   l5643 0A1B  
                                                   l6179 08FD  
                                                   l6259 0C7C  
                                                   l6275 085C  
                                                   l6347 0750  
                                                   l6339 0728  
                                                   l6451 0CF8  
                                                   l6443 0CD9  
                                                   l5547 1506  
                                                   l6099 0D4E  
                                                   l5629 094A  
                                                   l5653 0A3F  
                                                   l5805 17ED  
                                                   l5741 0ACF  
                                                   l5733 0AB9  
                                                   l6357 076B  
                                                   l6373 0E9D  
                                                   l6453 0D06  
                                                   l6445 0CEA  
                                                   l5559 16D9  
                                                   l5639 0A10  
                                                   l6287 1635  
                                                   l5903 0DDE  
                                                   l6367 0E87  
                                                   l6615 095D  
                                                   l5665 0A50  
                                                   l5657 0A4A  
                                                   l5649 0A21  
                                                   l5817 17FE  
                                                   l5809 17F8  
                                                   l5737 0AC0  
                                                   l6297 06B5  
                                                   l6385 0ED8  
                                                   l6457 0D14  
                                                   l6625 098B  
                                                   l6617 096B  
                                                   l5747 0AE8  
                                                   l5739 0ACA  
                                                   l5931 0E4E  
                                                   l5923 0E35  
                                                   l5587 160D  
                                                   l5675 16A5  
                                                   l6539 0FEA  
                                                   l6651 0829  
                                                   l6643 080B  
                                                   l5749 0AF0  
                                                   l5909 0DF4  
                                                   l6397 0EF4  
                                                   l6389 0EE0  
                                                   l5837 15A5  
                                                   l6629 0996  
                                                   l6645 0817  
                                                   l6821 0521  
                                                   l5871 135D  
                                                   l6655 0832  
                                                   l6823 0534  
                                                   l6809 04E9  
                                                   l6753 03D6  
                                                   l6771 043B  
                                                   l5885 176A  
                                                   l6783 044E  
                                                   l5889 1774  
                                                   l6793 04AC  
                                                   l6769 0433  
                             __size_of_HMC5883L_ReadBits 0046  
                                                   _LATA 010C  
                                                   _LATB 010D  
                                                   _LATC 010E  
                                                   u5215 0AEB  
                                                   u6015 06F9  
                                                   u5135 169D  
                                                   u5065 0946  
                                                   u5145 16B0  
                                                   u6045 070C  
                                                   u5405 0E36  
                                                   u5255 0B05  
                                                   u5175 0AC5  
                                                   u5415 0E45  
                                                   u6215 0EFD  
                                                   u5335 1775  
                                                   u5600 0DC5  
                                                   u5425 0E4F  
                                                   u6225 0F03  
                                                   u6145 0EA9  
                                                   u5345 177C  
                                                   u5195 0ADE  
                                                   u6075 071F  
                                                   u6155 0EB9  
                                                   u6325 0CF9  
                                                   u6405 00FF  
                                                   u6175 0EE1  
                                                   u6415 010D  
                                                   u7207 1535  
                                                   u5385 0E06  
                                                   u6185 0EE7  
                                                   u6265 0CA8  
                                                   u7217 1389  
                                                   u5395 0E16  
                                                   u7307 1606  
                                                   u7227 144C  
                                                   u5805 0C44  
                                                   u6445 0A9A  
                                                   u7317 1422  
                                                   u7237 15C7  
                                                   u6525 0960  
                                                   u5815 0C58  
                                                   u6295 0CDA  
                                                   u7247 14C8  
                                                   u6615 0818  
                                                   u7167 0367  
                                                   u5680 08F2  
                                                   u5664 08D4  
                                                   u5665 08D3  
                                                   u5825 0C64  
                                                   u7257 0789  
                                                   u6545 096C  
                                                   u6625 0822  
                                                   u7177 0392  
                                                   u5674 08E0  
                                                   u5675 08DF  
                                                   u7267 158D  
                                                   u6555 0980  
                                                   u6635 082A  
                                                   u7187 03E4  
                                                   u5685 08F0  
                                                   u7277 15ED  
                                                   u7197 15E4  
                                                   u6565 098C  
                                                   u7287 15F3  
                                                   u5785 0C38  
                                                   u5865 0851  
                                                   u7297 1600  
                                                   u6595 080E  
                                                   u5985 06E6  
                                                   u6885 04FF  
                                                   _TMR2 001A  
                                                   _WPUA 020C  
                                                   _WPUB 020D  
                                                   _WPUC 020E  
                                           __CFG_WRT$OFF 0000  
                                           _Storage_save 149A  
                                          __CFG_FCMEN$ON 0000  
                                                   _data 01C0  
                                                   _main 0345  
                                     _Timeout_hasExpired 08FF  
                                                   _curr 0120  
                                           ___ftpack@arg 0021  
                                                   _var1 0134  
                                                   _var2 0131  
                                           ___ftpack@exp 0024  
                                        __end_of_RF_Init 12A6  
                                                   fsr0h 0005  
                                                   fsr1h 0007  
                                                   indf0 0000  
                                                   fsr0l 0004  
                                                   indf1 0001  
                                                   fsr1l 0006  
                                                   btemp 007E  
                            ??_Timeout_updateCurrentTime 002D  
                            I2C2_MasterReadTRBBuild@ptrb 0028  
                                          __CFG_BOREN$ON 0000  
                                    ??_Wireless_sendData 0032  
                            RF_WriteRegisterData@bufSize 002B  
                                     __size_of_DOOR_init 0001  
                                                   start 0037  
                                      _Timeout_increment 132F  
                              __end_of_SPI1_Exchange8bit 1345  
                               ?_Sensor_getSupplyVoltage 0041  
                       __end_of_Diag_getTempSensorHealth 128E  
                       __end_of_Diag_setTempSensorHealth 12F2  
                                 __end_of_Wireless_sleep 1481  
                              HMC5883L_ReadBits@bitStart 0044  
                                         ?_Wireless_init 0070  
                             ??_TMR1_SetInterruptHandler 0023  
                                         ?_Wireless_wake 0070  
                                          _SPI_WriteRead 12C3  
                                          __CFG_MCLRE$ON 0000  
                                           ___ftmul@cntr 0064  
                                     ?_Timeout_increment 0070  
                                           ___ftmul@sign 0065  
                                    ?_Timeout_hasExpired 0070  
                                   ?_BMP_readTemperature 00A6  
                                           ___fttol@exp1 00A5  
                              __size_of_DATAEE_WriteByte 0023  
                                           ___fttol@lval 00A1  
                                       __end_of_BMP_init 0B89  
                                             _i2c2_state 0079  
                                       __end_of_DOOR_run 1291  
                                        ?_FVR_Initialize 0070  
                         __size_of_OSCILLATOR_Initialize 0007  
                                    __size_of_IOCAF2_ISR 000D  
                          __end_of_OSCILLATOR_Initialize 12DC  
                                    ??_Timeout_increment 0070  
                                _I2C2_MasterReadTRBBuild 1735  
                                        __end_of___aldiv 0C85  
                                                  ?_main 0070  
                                        __end_of___ftadd 0783  
                                      __end_of_I2C2_Stop 1557  
                                        __end_of___ftdiv 0E70  
                                        __end_of___ftneg 1314  
                                        __end_of___lldiv 099F  
                                        __end_of___ftmul 0F24  
                                                  _T1CON 0018  
                                        __end_of___fttol 0D24  
                                                  _T2CON 001C  
                                        __end_of___lwdiv 0837  
                                                  i1l300 05BE  
                         __size_of_I2C2_FunctionComplete 0011  
                                                  i1l310 0606  
                                                  i1l161 0032  
                                                  i1l153 0015  
                                                  i1l322 066E  
                                                  i1l314 0626  
                                                  i1l155 0021  
                                                  i1l317 063B  
                                                  i1l157 002D  
                                                  i1l318 0649  
                                                  i1l329 139B  
                                                  i1l293 058A  
                                                  i1l294 0591  
                                                  i1l288 055C  
                                                  i1l299 05B2  
                          __end_of_I2C2_FunctionComplete 139E  
                              __end_of_Wireless_sendData 1410  
                                    setSleepTime@timeSec 0021  
                                                  _TMR1H 0017  
                                                  _TMR1L 0016  
                                                  _TRISA 008C  
                                                  _TRISB 008D  
                                                  _TRISC 008E  
                       __size_of_ADC_GetConversionResult 0009  
                                    ___lmul@multiplicand 0025  
                                   ??_Timeout_hasExpired 0021  
                                       __end_of_TMR1_ISR 130B  
                                                  _cTemp 012B  
                                                  _adc_p 01A4  
                                                  _adc_t 0124  
                                         ?_DOOR_resetPos 0070  
                                 __size_of_I2C_ByteWrite 003C  
                                          ___awtoft@sign 002E  
                                __end_of_PIN_MANAGER_IOC 12C3  
                                         _WDT_Initialize 129E  
                                                  _errno 013A  
                                                  _limit 1692  
                                          ___ftpack@sign 0025  
                           I2C2_MasterReadTRBBuild@pdata 0021  
                                   _Diag_getSensorHealth 13C1  
                                __end_of_TMR1_Initialize 1469  
                                       __end_of_RF_Write 138D  
                                                  pclath 000A  
                                 _Sensor_peripheralSleep 12AE  
                                   RF_DataIsReady@status 0028  
                              __end_of_Timeout_increment 1339  
                                                  status 0003  
                                                  wtemp0 007E  
                               __size_of_SPI1_Initialize 0007  
                                         ?_SPI_WriteRead 0070  
                                        ?_Wireless_sleep 0070  
                                      ??_I2C2_MasterRead 002F  
                                RF_WriteRegisterData@buf 0029  
                                RF_WriteRegisterData@reg 002D  
                                  ??_BMP_readTemperature 00A9  
                                    RF_WriteRegister@reg 0024  
                                      ??_I2C2_Initialize 0021  
                                        __initialization 0039  
                                    RF_WriteRegister@val 0023  
                             Wireless_packageData@status 00C5  
                                           __end_of_main 0544  
                                 ??_I2C2_MasterTRBInsert 0023  
                                __end_of_TMR2_Initialize 1302  
                            ?_INTERRUPT_InterruptManager 0070  
                       __end_of_I2C2_MasterWriteTRBBuild 166F  
                                                 ??_main 00C8  
                                          ___fttol@sign1 00A0  
                              _Timeout_updateCurrentTime 0A52  
                                            _i2c2_object 00CA  
                                         __CFG_PLLEN$OFF 0000  
                                      __end_of_DOOR_init 07FF  
                                 __end_of_WDT_Initialize 12A2  
                                __size_of_I2C_BufferRead 005E  
                          __size_of_ADC_IsConversionDone 0007  
                                                 _ADCON0 009D  
                                                 _ADCON1 009E  
                                     _Timeout_setTimeout 1481  
                                       __end_of___altoft 0874  
                                                 ?_limit 0021  
                                              ??_RF_Init 0021  
                                                 i1S7069 1000  
                                                 _ADRESH 009C  
                                                 _EEADRH 0192  
                                                 _ADRESL 009B  
                                                 _EEADRL 0191  
                                                 _EEDATH 0194  
                                                 _EEDATL 0193  
                                                 _EECON2 0196  
                                    I2C_ByteWrite@status 0038  
                                  ?_Diag_getSensorHealth 0070  
                                       __end_of___awtoft 164C  
                                                 _ANSELA 018C  
                                                 _ANSELB 018D  
                                                 _ANSELC 018E  
                                       __end_of___ftpack 0B15  
                                                 _BORCON 0116  
                                                 _T1GCON 0019  
                                   _Wireless_packageData 0F24  
                           __end_of_I2C2_BusCollisionISR 0802  
                                                 i1l4313 1555  
                                                 i1l4295 134F  
                                                 i1l4801 05DB  
                                                 i1l4841 062D  
                                                 i1l4833 0614  
                                                 i1l4825 0601  
                                                 i1l4819 05F7  
                                                 i1l4853 064F  
                                                 i1l4781 059D  
                                                 i1l4871 0675  
                                                 i1l4873 0679  
                                                 i1l4857 0656  
                                                 i1l4769 057E  
                                                 i1l4787 05AD  
                                                 i1l4869 0672  
                                                 i1l4879 0682  
                                                 _FVRCON 0117  
                        __end_of_Sensor_getSupplyVoltage 08B9  
                               _BMP_readTemperature$2648 00B5  
                                       __end_of___lwtoft 13FB  
                                                 _OSCCON 0099  
                                                 _WDTCON 0097  
                                    ?_Timeout_setTimeout 0021  
                                  I2C2_MasterRead@length 002B  
                                  SPI1_Exchange8bit@data 0021  
                                        ??_Wireless_init 002E  
                                        ??_Wireless_wake 002F  
                                    _SPI_WriteReadBuffer 160A  
                             __size_of_SPI1_Exchange8bit 000C  
                                         __CFG_PWRTE$OFF 0000  
                             HMC5883L_ReadBits@slaveAddr 004A  
                                       Wireless_wake@reg 0030  
                                       SPI_WriteBuffer@i 0028  
                   __end_of_TMR1_DefaultInterruptHandler 0800  
                  __size_of_TMR1_DefaultInterruptHandler 0001  
                           _TMR1_DefaultInterruptHandler 07FF  
                                          _I2C_ByteWrite 17C4  
                                   HMC5883L_ReadBits@tmp 004C  
                                  RF_DataIsReady@channel 0027  
                                                 ___lmul 1761  
                                              ??___aldiv 0029  
                                                 _dig_P1 0150  
                                                 _dig_P2 014E  
                                                 _dig_P3 014C  
                                                 _dig_P4 014A  
                                                 _dig_P5 0148  
                                                 _dig_P6 0146  
                                                 _dig_P7 0144  
                                                 _dig_P8 0142  
                                                 _dig_P9 0140  
                                                 _dig_T1 00D3  
                                                 _dig_T2 0156  
                                                 _dig_T3 0154  
                                                 _dig_T4 0152  
                                              ??___ftadd 004F  
                                         _p_i2c2_current 0077  
                                         __CFG_STVREN$ON 0000  
                              ??_I2C2_MasterReadTRBBuild 0026  
                                              ??___ftdiv 0037  
                                              ??___ftneg 0044  
                      Wireless_changeTransmitPower@power 0032  
                                              ??___lldiv 0029  
                                       SPI_WriteRead@val 0022  
                                              ??___ftmul 005C  
                                              ??___fttol 006A  
                                 RF_ReadRegisterData@buf 002A  
                               _Diag_getTempSensorHealth 128B  
                                 RF_ReadRegisterData@reg 002E  
                                              ??___lwdiv 0025  
                               _Diag_setTempSensorHealth 12EA  
Wireless_determineTransmitPower@numOfSuccessfulTransmits 00DA  
                         __size_of_Sensor_peripheralWake 0005  
                                                 _t_fine 012E  
                                              ?_I2C2_ISR 0070  
                          __end_of_Sensor_peripheralWake 12B8  
                               I2C2_Stop@completion_code 0072  
                                           _HMC5883Lmode 00DF  
                                   ??_Timeout_setTimeout 0023  
                          I2C2_MasterReadTRBBuild@length 0023  
                                  ___ftmul@f3_as_product 0061  
                                   ?_SPI_WriteReadBuffer 0023  
                             __size_of_Wireless_sendData 0015  
                                        ??_DOOR_resetPos 0021  
                                RF_TxPayload@payloadSize 002E  
                                        ?_WDT_Initialize 0070  
                                     _sensorUpdatePeriod 016A  
                                   __size_of_DOOR_update 0016  
               TMR1_SetInterruptHandler@InterruptHandler 0021  
             IOCAF2_SetInterruptHandler@InterruptHandler 0021  
                                   DOOR_update@openAngle 0029  
                                       ?_PIN_MANAGER_IOC 0070  
                                  ?_Wireless_packageData 00BA  
                                           ??_IOCAF2_ISR 0070  
                               HMC5883L_ReadBits@regAddr 0043  
                                  __end_of_TMR1_CallBack 136D  
                                    _RF_ReadRegisterData 15AE  
                                       ?_TMR1_Initialize 0070  
                                      _SYSTEM_Initialize 14E9  
                                __end_of__initialization 0073  
                                             ___altoft@c 0029  
                             __size_of_Timeout_increment 000A  
                                              ?_BMP_init 0070  
                                              ?_DOOR_run 0070  
                                             ___ftadd@f1 0049  
                                             ___ftadd@f2 004C  
                                        ??_SPI_WriteRead 0022  
                                     ?_SYSTEM_Initialize 0070  
                      __size_of_Timeout_getGlobalCounter 0011  
                                             ___ftdiv@f1 0034  
                                             ___ftdiv@f2 0031  
                                             ___ftdiv@f3 003C  
                              ?_Timeout_getGlobalCounter 0021  
                                      ?_I2C2_MasterWrite 0028  
                                        _SPI_WriteBuffer 1504  
                                             ___ftneg@f1 0041  
                                             ___awtoft@c 0029  
                                         ?_I2C_ByteWrite 002F  
                                             ___ftmul@f1 0056  
                                             ___ftmul@f2 0059  
                                              BMP_init@t 003F  
                                     ??_I2C2_MasterWrite 002C  
                                             ___fttol@f1 0066  
                           __size_of_ADC_StartConversion 0003  
                                         __pcstackCOMMON 0070  
          Wireless_determineTransmitPower@numOfTransmits 00DB  
                              Wireless_packageData@tempC 00BB  
                            I2C_BufferRead@NumByteToRead 0034  
                                           __pidataBANK1 1297  
                                           __pidataBANK2 12AA  
                                    ??_SYSTEM_Initialize 0023  
                                 I2C_ByteWrite@WriteAddr 0030  
                                              ?_TMR1_ISR 0070  
                          ?_TMR1_DefaultInterruptHandler 0070  
                                       _DATAEE_WriteByte 166F  
                                          __end_of_limit 16B8  
                                      ??_SPI1_Initialize 0021  
                                   ?_RF_ReadRegisterData 002A  
                                         _i2c2_trb_count 00E2  
                                             ??_I2C2_ISR 0073  
                                       ?_TMR2_Initialize 0070  
                                              ?_RF_Write 0070  
                                     __end_of_IOCAF2_ISR 1352  
                                             ___lwtoft@c 0029  
                                  ??_SPI_WriteReadBuffer 0025  
                                _ADC_GetConversionResult 1326  
                              __size_of_RF_WriteRegister 0016  
                                         _OPTION_REGbits 0095  
                               ?_HMC5883L_I2C_BufferRead 003C  
                                 Storage_save@closeAngle 0024  
                                __size_of_TMR1_ReadTimer 001D  
                               _I2C2_MasterWriteTRBBuild 164C  
                            ?_IOCAF2_SetInterruptHandler 0021  
                       ??_IOCAF2_DefaultInterruptHandler 0070  
                        ?_IOCAF2_DefaultInterruptHandler 0070  
                              DOOR_run@doorStateDuration 01A0  
                                 ??_Diag_getSensorHealth 0021  
                           I2C2_MasterWriteTRBBuild@ptrb 0027  
                                                ??_limit 0027  
                              __end_of_SYSTEM_Initialize 1504  
                               __size_of_RF_ReadRegister 001A  
                                             __pbssBANK1 00CA  
                                             __pbssBANK2 0120  
                                             __pbssBANK3 01A0  
                                             ??_BMP_init 003C  
                                             ??_DOOR_run 0021  
                                             __pnvCOMMON 007C  
                                   I2C_ByteWrite@pBuffer 002F  
                              SPI_WriteReadBuffer@bufOut 0028  
                                       ??_FVR_Initialize 0021  
                                             __pmaintext 0345  
                                  SPI_WriteBuffer@bufOut 0023  
                                   SPI_WriteReadBuffer@i 0029  
                                                ?___lmul 0021  
                                Diag_getSensorHealth@var 0022  
                                             ??_TMR1_ISR 0070  
                                  ??_RF_ReadRegisterData 002C  
                                             __pintentry 0004  
                                          ?_setSleepTime 0021  
                                              ?___altoft 0029  
                                         ___lmul@product 0029  
                                         main@doorStatus 01DB  
                                              ?___awtoft 0029  
                                              ?___ftpack 0021  
                                                _APFCON0 011D  
                                                _APFCON1 011E  
                                   _I2C2_BusCollisionISR 0801  
                                             ??_RF_Write 0023  
                              DOOR_run@previousDoorState 00D7  
                                __size_of_ADC_Initialize 0008  
                                              ?___lwtoft 0029  
                       __size_of_Sensor_getSupplyVoltage 0045  
                         Wireless_checkDataReceived@data 0037  
                           ??_Wireless_checkDataReceived 0033  
                                         _I2C_BufferRead 09F4  
                      I2C2_ISR@i2c_10bit_address_restart 00E0  
                                 I2C2_MasterRead@address 002C  
                                              _I2C2_Stop 153A  
                               SPI_WriteReadBuffer@bufIn 0023  
                                                _OSCTUNE 0098  
                                ?_Sensor_peripheralSleep 0070  
                                                _SSP1ADD 0212  
                                                _SSP2ADD 021A  
                                                _SSP1BUF 0211  
                                 ??_Wireless_packageData 006E  
                                                _SSP2BUF 0219  
                                 I2C_ByteWrite@slaveAddr 0035  
                                                _RF_Init 12A2  
                     __size_of_Timeout_updateCurrentTime 005E  
                   __end_of_Wireless_changeTransmitPower 17C4  
                  __size_of_Wireless_changeTransmitPower 0033  
                           _Wireless_changeTransmitPower 1791  
                                        _I2C2_MasterRead 16B8  
                                __end_of_SPI_WriteBuffer 151F  
                                       main@doorOpenTime 01D7  
                                        _I2C2_Initialize 14CE  
                          __size_of_RF_WriteRegisterData 001D  
                                       ??_Wireless_sleep 002F  
                                   DATAEE_WriteByte@bAdd 0022  
                                 I2C2_MasterRead@trBlock 0158  
                                        ??_I2C_ByteWrite 0031  
                                      Wireless_sleep@reg 0030  
                                  HMC5883L_ReadBits@data 0046  
                                                ___aldiv 0C03  
                                  HMC5883L_ReadBits@mask 004B  
                                         ??_setSleepTime 0023  
                                        __size_of___lmul 0030  
                                                ___ftadd 068D  
                                                ___ftdiv 0DC7  
                                                ___ftneg 130B  
                                                ___lldiv 094C  
                                                ___ftmul 0E70  
                                                ___fttol 0C85  
                                                ___lwdiv 0802  
                                             ??___altoft 002D  
                              ??_ADC_GetConversionResult 0023  
                        __end_of_HMC5883L_I2C_BufferRead 13C1  
                                  ?_I2C2_BusCollisionISR 0070  
                                             ??___awtoft 002C  
                                             ??___ftpack 0026  
                               TMR1_ReadTimer@readValLow 002B  
                                                _heading 01C8  
                              I2C2_MasterTRBInsert@count 0024  
                                                __ptext1 12B8  
                                                __ptext2 0802  
                                                __ptext3 094C  
                                                __ptext4 15CB  
                                                __ptext5 1469  
                                                __ptext6 0F24  
                                                __ptext7 0D24  
                                                __ptext8 13FB  
                                                __ptext9 151F  
                              I2C2_MasterTRBInsert@pflag 0022  
                                Wireless_packageData@var 00C4  
                                 __end_of_I2C_BufferRead 0A52  
                                             ??___lwtoft 002C  
                         ??_TMR1_DefaultInterruptHandler 0070  
                              TMR1_ReadTimer@readValHigh 002A  
                                              _T1CONbits 0018  
                                  _OSCILLATOR_Initialize 12D5  
                                              _T2CONbits 001C  
                             __end_ofWireless_init@TADDR 1826  
                         __end_of_Sensor_peripheralSleep 12B3  
                      __size_of_TMR1_SetInterruptHandler 0009  
                                       ___aldiv@dividend 0025  
                               ??_PIN_MANAGER_Initialize 0023  
                              ?_TMR1_SetInterruptHandler 0021  
                                              _IOCAFbits 0393  
                            main@doorClosedUpdateCounter 01D1  
                                              _IOCANbits 0392  
                                             ?_I2C2_Stop 0070  
                                              _IOCAPbits 0391  
                                  _I2C2_FunctionComplete 138D  
                                                _timeOut 013C  
                            __size_of_Timeout_hasExpired 004D  
                                              _DOOR_init 07FE  
                             __size_of_SYSTEM_Initialize 001B  
                                                main@dur 01D5  
                                                clrloop0 12D0  
                                   end_of_initialization 0073  
                                __size_of_RF_DataIsReady 001D  
                          ?_Wireless_changeTransmitPower 0070  
                            __end_of_BMP_readTemperature 0345  
                             ??_Diag_getTempSensorHealth 0021  
                             ??_Diag_setTempSensorHealth 0021  
                                      _FVR_IsOutputReady 12C9  
                                      ??_RF_ReadRegister 0023  
                                        ___lldiv@divisor 0021  
                           __end_of_ADC_IsConversionDone 12EA  
                                        ___lldiv@counter 002E  
                                     ?_FVR_IsOutputReady 0070  
                                          ?_RF_GetStatus 0070  
                                  I2C2_MasterWrite@pdata 002E  
                                     _p_i2c2_trb_current 0078  
                                  I2C2_MasterWrite@pflag 002B  
                                       ___aldiv@quotient 002C  
                                 I2C2_ISR@i2c_bytes_left 00E1  
                Wireless_isDataTransmitSuccessful@status 0026  
                          __size_of_I2C2_MasterTRBInsert 0055  
                                    ??_FVR_IsOutputReady 0021  
                             Sensor_getSupplyVoltage@res 0047  
                                       ??_WDT_Initialize 0021  
                                              _PORTCbits 000E  
                                        ?_I2C_BufferRead 0031  
                                      __size_of_I2C2_ISR 0149  
                                       _RF_WriteRegister 1410  
                                __end_of_I2C2_MasterRead 16E0  
                                       __CFG_FOSC$INTOSC 0000  
                                __end_of_I2C2_Initialize 14E9  
                                         _TMR1_ReadTimer 1557  
                       __end_of_Timeout_getGlobalCounter 13AF  
                                    _ADC_StartConversion 1291  
                           Timeout_updateCurrentTime@var 0031  
                                             ?_DOOR_init 0070  
                               __end_of_DATAEE_WriteByte 1692  
                                       ?_SPI_WriteBuffer 0023  
                              __end_of_FVR_IsOutputReady 12CF  
                                            ___ftdiv@exp 003F  
                                        _SPI1_Initialize 12DC  
                             RF_ReadRegisterData@bufSize 002B  
                           HMC5883L_TestConnection@F3572 0137  
                                          ?_RF_RxPayload 002F  
              Wireless_determineTransmitPower@initialise 0038  
                                      __size_of_BMP_init 0074  
                           Wireless_packageData@openTime 00BA  
                                      __size_of_DOOR_run 0003  
                                  __end_of_Wireless_init 07FE  
                                         ??_RF_GetStatus 0025  
                                  __end_of_Wireless_wake 15EA  
                                            ___ftmul@exp 0060  
                                   ?_ADC_StartConversion 0070  
                                          ?_RF_TxPayload 002E  
                                   _currentTransmitPower 00DC  
                                 ??_I2C2_BusCollisionISR 0070  
                                         __end_of___lmul 1791  
                             ??_I2C2_MasterWriteTRBBuild 0025  
                                      __size_of_TMR1_ISR 0009  
                                _Sensor_getSupplyVoltage 0874  
                                         _ADC_Initialize 12F2  
                                 ?_OSCILLATOR_Initialize 0070  
                                 __end_of_TMR1_ReadTimer 1574  
                     __end_of_Wireless_checkDataReceived 0C03  
                             _Wireless_checkDataReceived 0B89  
                            __size_of_Timeout_setTimeout 0019  
                              __size_of_I2C2_MasterWrite 002A  
                                  _Sensor_peripheralWake 12B3  
                                        RF_WriteRead@val 0024  
                                          ??_DOOR_update 0028  
                                      __size_of_RF_Write 0010  
                                          ?_RF_WriteRead 0070  
                                 ?_I2C2_FunctionComplete 0070  
                                    start_initialization 0039  
                                RF_RxPayload@payloadSize 002F  
                                            ??_I2C2_Stop 0070  
                        __size_of_PIN_MANAGER_Initialize 002B  
                                  __end_of_DOOR_resetPos 1297  
                                   __end_of_setSleepTime 12BD  
                                          ?_Storage_save 0024  
                       __size_of_HMC5883L_I2C_BufferRead 0012  
                                         ??_RF_RxPayload 0030  
                        I2C2_MasterWriteTRBBuild@address 0023  
                                            _addressSize 00E5  
                               __size_of_PIN_MANAGER_IOC 0006  
                                  __end_of_SPI_WriteRead 12C9  
                                   I2C2_MasterRead@pdata 0029  
                 __end_of_IOCAF2_DefaultInterruptHandler 0004  
                __size_of_IOCAF2_DefaultInterruptHandler 0001  
                         _IOCAF2_DefaultInterruptHandler 0003  
                               ?_I2C2_MasterReadTRBBuild 0021  
                         Sensor_getSupplyVoltage@voltage 0044  
                                   I2C2_MasterRead@pflag 002E  
                                            RF_Write@val 0023  
                         ??_Wireless_changeTransmitPower 002F  
                                         ??_RF_TxPayload 002F  
                                  ??_ADC_StartConversion 0021  
                               __size_of_TMR1_Initialize 0017  
                                               ??___lmul 0029  
                            __end_of_SPI_WriteReadBuffer 162A  
                          I2C2_MasterWriteTRBBuild@pdata 0021  
                                   I2C2_ISR@pi2c_buf_ptr 00D5  
                                 __end_of_ADC_Initialize 12FA  
                                            __pdataBANK1 00E3  
                                            __pdataBANK2 016A  
                                 __size_of_TMR1_CallBack 000E  
                                        ?_TMR1_ReadTimer 0021  
                                      __size_of___altoft 003D  
                                HMC5883L_ReadBits@length 0045  
                                         ??_RF_WriteRead 0023  
                                      __size_of___awtoft 0022  
                                      __size_of___ftpack 0065  
                                       ?_I2C2_MasterRead 0029  
                                            __pbssCOMMON 0077  
                                       ?_I2C2_Initialize 0070  
                                              ___latbits 0002  
                                      __size_of___lwtoft 0015  
                                          __pcstackBANK0 0020  
                                          __pcstackBANK1 00A0  
                                          __pcstackBANK3 01D0  
                                   _ADC_IsConversionDone 12E3  
                               __size_of_TMR2_Initialize 0008  
                                __end_of_SPI1_Initialize 12E3  
                                            ??_DOOR_init 0021  
                                               ?_RF_Init 0070  
                                          _i2c2_tr_queue 0162  
                                         ??_Storage_save 0025  
                          __size_of_Diag_getSensorHealth 0012  
                      Wireless_checkDataReceived@channel 003B  
                                    __end_of_DOOR_update 143C  
                                         _RF_DataIsReady 1591  
                               _Timeout_getGlobalCounter 139E  
                             __size_of_FVR_IsOutputReady 0006  
                             SPI_WriteReadBuffer@bufSize 0024  
                                              __pnvBANK2 0166  
                            __end_of_RF_ReadRegisterData 15CB  
                              BMP_readTemperature@status 00B8  
                   HMC5883L_I2C_BufferRead@NumByteToRead 003F  
                                       ___lwdiv@dividend 0023  
                                 _PIN_MANAGER_Initialize 170A  
              __end_of_Wireless_isDataTransmitSuccessful 135F  
             __size_of_Wireless_isDataTransmitSuccessful 000D  
                    ??_Wireless_isDataTransmitSuccessful 0025  
                     ?_Wireless_isDataTransmitSuccessful 0070  
                      _Wireless_isDataTransmitSuccessful 1352  
                                      _RF_ResetStatusIRQ 15EA  
                                 SPI_WriteBuffer@bufSize 0025  
                                      _ADC_SelectChannel 136D  
                               Wireless_sendData@payload 0034  
                       __end_of_TMR1_SetInterruptHandler 1326  
                                               ?___aldiv 0021  
                              ??_Sensor_getSupplyVoltage 0044  
                                               ?___ftadd 0049  
                                               ?___ftdiv 0031  
                                               ?___ftneg 0041  
                                               ?___lldiv 0021  
                                               ?___ftmul 0056  
                                               ?___fttol 0066  
                                               ?___lwdiv 0021  
                                     ?_RF_ResetStatusIRQ 0070  
                                        ?_ADC_Initialize 0070  
                           __end_of_RF_WriteRegisterData 1591  
                                     ?_ADC_SelectChannel 0070  
                                               _I2C2_ISR 0544  
                           ??_INTERRUPT_InterruptManager 0020  
                                 ?_Sensor_peripheralWake 0070  
                                              __pswtext1 1000  
                                  Storage_save@openAngle 0026  
                                              _doorState 00D9  
                                    ??_RF_ResetStatusIRQ 0025  
                                    ??_ADC_SelectChannel 0021  
                                  ?_ADC_IsConversionDone 0070  
                                I2C_BufferRead@slaveAddr 003A  
                                       __CFG_WDTE$NSLEEP 0000  
                                   __end_of_RF_GetStatus 12AA  
                                        _RF_ReadRegister 14B4  
                                 __end_of_RF_DataIsReady 15AE  
                                       ___lwdiv@quotient 0027  
                                         __size_of_limit 0026  
                                 Wireless_packageData@t1 00C6  
                          __size_of_Wireless_packageData 00DC  
                        __end_of_I2C2_MasterReadTRBBuild 1761  
                                          _TMR1_CallBack 135F  
                                        ___aldiv@divisor 0021  
                                        ___aldiv@counter 002A  
                                               _BMP_init 0B15  
                                               _DOOR_run 128E  
                                               _LATCbits 010E  
                                     Wireless_init@TADDR 1821  
                                              clear_ram0 12CF  
                               __end_of_RF_WriteRegister 1426  
                                               _PIE1bits 0091  
                                               _PIE4bits 0094  
                              __end_of_RF_ResetStatusIRQ 160A  
                              __end_of_ADC_SelectChannel 137D  
                    __size_of_INTERRUPT_InterruptManager 0033  
                                  __end_of_I2C_ByteWrite 1800  
                                               _PIR1bits 0011  
                                               _PIR4bits 0014  
                                               _SSP1CON1 0215  
                                               _SSP2CON1 021D  
                                               _SSP2CON3 021F  
                                       ??_I2C_BufferRead 0036  
                                               _TMR1_ISR 1302  
                                               _SSP1STAT 0214  
                                               _SSP2STAT 021C  
                                      ??_PIN_MANAGER_IOC 0070  
                          I2C2_MasterTRBInsert@ptrb_list 0021  
                                      ??_TMR1_Initialize 0023  
                                               _RF_Write 137D  
                                             _ADCON0bits 009D  
                                       _I2C2_MasterWrite 16E0  
                               ADC_SelectChannel@channel 0022  
                                __size_of_FVR_Initialize 0004  
                                   __end_of_RF_RxPayload 13E6  
                             __end_of_Timeout_hasExpired 094C  
                                               _WPUCbits 020E  
                         Diag_setTempSensorHealth@health 0022  
                                            _DOOR_update 1426  
                                  __size_of_setSleepTime 0005  
                                 I2C_BufferRead@ReadAddr 0033  
                                  DATAEE_WriteByte@bData 0021  
                                   __end_of_RF_TxPayload 153A  
                                    __end_ofatan@coeff_a 1812  
                                    __end_ofatan@coeff_b 1821  
                                        ?_RF_DataIsReady 0070  
             Wireless_determineTransmitPower@testPayload 0039  
                                       ?_SPI1_Initialize 0070  
                                      ___lmul@multiplier 0021  
                           __end_of_I2C2_MasterTRBInsert 09F4  
                                       __size_of_RF_Init 0004  
                                         ?_TMR1_CallBack 0070  
                                      ?_DATAEE_WriteByte 0021  
                                _HMC5883L_I2C_BufferRead 13AF  
                                      ??_TMR2_Initialize 0021  
                             ?_Timeout_updateCurrentTime 0070  
                                     ??_DATAEE_WriteByte 0022  
                                      I2C_ByteWrite@data 0036  
                                             _EECON1bits 0195  
                                   __end_of_RF_WriteRead 1452  
                       HMC5883L_I2C_BufferRead@slaveAddr 0042  
                                 DOOR_update@closedAngle 0027  
                               ?_ADC_GetConversionResult 0021  
                                  TMR1_ReadTimer@readVal 0028  
                         I2C2_MasterWriteTRBBuild@length 0022  
                           __size_of_BMP_readTemperature 02CE  
                                __size_of_Wireless_sleep 0018  
                                ??_OSCILLATOR_Initialize 0021  
                                       __size_of___aldiv 0082  
                                       __size_of___ftadd 00F6  
                                           _setSleepTime 12B8  
                                       __size_of___ftdiv 00A9  
                                       __size_of___ftneg 0009  
                                       __size_of___lldiv 0053  
                                               ___altoft 0837  
                                       __size_of___ftmul 00B4  
                                       __size_of___fttol 009F  
                                   __end_of_Storage_save 14B4  
                                       __size_of___lwdiv 0035  
            Wireless_determineTransmitPower@latestResult 003A  
                                               ___awtoft 162A  
                                               ___ftpack 0AB0  
                                ??_I2C2_FunctionComplete 0070  
                               _TMR1_SetInterruptHandler 131D  
                      __size_of_Diag_getTempSensorHealth 0003  
                                __end_of_RF_ReadRegister 14CE  
                      __size_of_Diag_setTempSensorHealth 0008  
                              ?_Diag_getTempSensorHealth 0070  
                                               ___lwtoft 13E6  
                              ?_Diag_setTempSensorHealth 0070  
                                  _TMR1_InterruptHandler 0166  
                            ?_Wireless_checkDataReceived 0070  
                                 ??_ADC_IsConversionDone 0021  
                                _IOCAF2_InterruptHandler 0168  
                                Wireless_sendData@length 0031  
                                            _initialised 00D8  
                                        ___lwdiv@divisor 0021  
                                        ___lwdiv@counter 0026  
                           ??_IOCAF2_SetInterruptHandler 0023  
                                               __ptext10 137D  
                                               __ptext11 1352  
                                               __ptext20 1591  
                                               __ptext12 12A6  
                                               __ptext21 14B4  
                                               __ptext13 143C  
                                             _T1GCONbits 0019  
                                               __ptext30 1291  
                                               __ptext22 1426  
                                               __ptext14 1791  
                                               __ptext31 136D  
                                               __ptext23 149A  
                                               __ptext15 1692  
                                               __ptext40 12C3  
                                               __ptext32 12E3  
                                               __ptext24 166F  
                                               __ptext16 0B89  
                                               __ptext41 1339  
                                               __ptext33 1326  
                                               __ptext25 1294  
                                               __ptext17 13D3  
                                               __ptext50 1452  
                                               __ptext42 12A2  
                                               __ptext34 13C1  
                                               __ptext26 0874  
                                               __ptext18 15AE  
                                               __ptext51 131D  
                                               __ptext43 0A52  
                                               __ptext35 0783  
                                               __ptext27 12B3  
                                               __ptext19 160A  
                                               __ptext60 07FE  
                                               __ptext52 12DC  
                                               __ptext44 1761  
                                               __ptext36 1574  
                                               __ptext28 12AE  
                                               __ptext61 0077  
                                               __ptext53 170A  
                                               __ptext45 1557  
                                               __ptext37 1504  
                                               __ptext29 12C9  
                                               __ptext70 0AB0  
                                               __ptext62 13E6  
                                               __ptext54 1314  
                                               __ptext46 139E  
                                               __ptext38 15EA  
                                               __ptext71 0C03  
                                               __ptext63 0C85  
                                               __ptext55 12D5  
                                               __ptext47 14E9  
                                               __ptext39 1410  
                                               __ptext80 16E0  
                                               __ptext72 08B9  
                                               __ptext64 130B  
                                               __ptext56 14CE  
                                               __ptext48 129E  
                                               __ptext81 164C  
                                               __ptext73 13AF  
                                               __ptext65 0E70  
                                               __ptext57 129A  
                                               __ptext49 12FA  
                                               __ptext90 07FF  
                                               __ptext82 16B8  
                                               __ptext74 128B  
                                               __ptext66 0DC7  
                                               __ptext58 12F2  
                                               __ptext91 12BD  
                                               __ptext83 099F  
                                               __ptext75 0B15  
                                               __ptext67 068D  
                                               __ptext59 128E  
                                               __ptext92 1345  
                                               __ptext84 1735  
                                               __ptext76 17C4  
                                               __ptext68 162A  
                                               __ptext93 0003  
                                               __ptext85 12EA  
                                               __ptext77 09F4  
                                               __ptext69 0837  
                                               __ptext94 0544  
                                               __ptext78 1481  
                                               __ptext95 153A  
                                               __ptext87 1302  
                                               __ptext79 08FF  
                                               __ptext96 138D  
                                               __ptext88 135F  
                                               __ptext97 0801  
                                               __ptext89 132F  
                               Wireless_packageData@data 00BE  
                                           _SSP1CON1bits 0215  
                                Wireless_sendData@status 0033  
                                           _SSP2CON1bits 021D  
                                           _SSP2CON2bits 021E  
                                             _IOCAF2_ISR 1345  
                            DATAEE_WriteByte@GIEBitValue 0023  
                                    RF_RxPayload@payload 0032  
                                   _RF_WriteRegisterData 1574  
                                      _HMC5883L_ReadBits 08B9  
                                          __size_of_main 01FF  
                      __end_of_Timeout_updateCurrentTime 0AB0  
                        Wireless_changeTransmitPower@val 0033  
                             __size_of_RF_ResetStatusIRQ 0020  
                                     ?_HMC5883L_ReadBits 0043  
                             __size_of_ADC_SelectChannel 0010  
                                I2C2_MasterWrite@address 0029  
                               __size_of_SPI_WriteBuffer 001B  
                                       ??_TMR1_ReadTimer 0023  
                                               int$flags 007E  
                                               _pressure 0128  
                                    ??_HMC5883L_ReadBits 0047  
                     __end_of_INTERRUPT_InterruptManager 0037  
                             _INTERRUPT_InterruptManager 0004  
                             __end_of_Timeout_setTimeout 149A  
                                I2C2_MasterWrite@trBlock 015D  
                                           _SSP1STATbits 0214  
                               ??_Sensor_peripheralSleep 0021  
                    __size_of_IOCAF2_SetInterruptHandler 0009  
                                 BMP_readTemperature@tmp 00B9  
                          __size_of_I2C2_BusCollisionISR 0001  
                                            atan@coeff_a 1800  
                                            atan@coeff_b 1812  
                                  __size_of_RF_GetStatus 0004  
                                     RF_ReadRegister@reg 0024  
                                     RF_ReadRegister@val 0025  
                       __size_of_I2C2_MasterReadTRBBuild 002C  
                             ??_Timeout_getGlobalCounter 0025  
                                             _INTCONbits 000B  
                                  Timeout_setTimeout@val 0021  
                __end_of_Wireless_determineTransmitPower 0DC7  
               __size_of_Wireless_determineTransmitPower 00A3  
                      ??_Wireless_determineTransmitPower 0035  
                       ?_Wireless_determineTransmitPower 0070  
                        _Wireless_determineTransmitPower 0D24  
                                             _FVRCONbits 0117  
                                           _sensorHealth 00E3  
                                 __size_of_Wireless_init 007B  
                                               limit@max 0025  
                                               limit@min 0023  
                                               limit@val 0021  
                                  I2C_BufferRead@pBuffer 0031  
                                 __size_of_Wireless_wake 001F  
                                        ??_TMR1_CallBack 0070  
                              ??_HMC5883L_I2C_BufferRead 0041  
                                __size_of_WDT_Initialize 0004  
                      __size_of_I2C2_MasterWriteTRBBuild 0023  
                              __end_of_HMC5883L_ReadBits 08FF  
                              ?_I2C2_MasterWriteTRBBuild 0021  
                                               intlevel1 0000  
                                  ?_RF_WriteRegisterData 0029  
                            __end_of_ADC_StartConversion 1294  
                                        _doorClosedAngle 00DD  
                                    I2C2_ISR@i2c_address 007A  
                                       ___lldiv@dividend 0025  
                                ?_PIN_MANAGER_Initialize 0070  
                        __end_of_ADC_GetConversionResult 132F  
                                      __CFG_CLKOUTEN$OFF 0000  
                                       ??_ADC_Initialize 0021  
                                           _RF_GetStatus 12A6  
                                 I2C2_MasterWrite@length 0028  
                                ??_Sensor_peripheralWake 0021  
                           __end_of_Diag_getSensorHealth 13D3  
                                 __size_of_DOOR_resetPos 0003  
                                  __size_of_RF_RxPayload 0013  
                                   _I2C2_MasterTRBInsert 099F  
                                          __pstringtext1 1800  
                                          __pstringtext2 1812  
                                          __pstringtext3 1821  
                                  __size_of_RF_TxPayload 001B  
                                         _FVR_Initialize 129A  
                                       ?_RF_ReadRegister 0070  
                           __size_of_SPI_WriteReadBuffer 0020  
                                       ___lldiv@quotient 002A  
                                   I2C_BufferRead@status 003B  
                                           ___aldiv@sign 002B  
                                 __size_of_SPI_WriteRead 0006  
                                            ?_IOCAF2_ISR 0070  
                         __end_of_PIN_MANAGER_Initialize 1735  
                                  __size_of_RF_WriteRead 0016  
                               __size_of_I2C2_MasterRead 0028  
                               __size_of_I2C2_Initialize 001B  
                                     _referenceDirection 013E  
                                     __size_of_I2C2_Stop 001D  
                                        _PIN_MANAGER_IOC 12BD  
                               __end_of_I2C2_MasterWrite 170A  
                                           _RF_RxPayload 13D3  
                                      ?_RF_WriteRegister 0023  
                                        _TMR1_Initialize 1452  
                    __size_of_Wireless_checkDataReceived 007A  
                                     main@prevDoorStatus 01D0  
                                  __size_of_Storage_save 001A  
