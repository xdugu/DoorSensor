

Microchip Technology PIC LITE Macro Assembler V1.45 build -152302408 
                                                                                               Wed Oct 09 21:53:03 2019

Microchip Technology Omniscient Code Generator v1.45 (Free mode) build 201711160504
     1                           	processor	16LF1829
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataBANK1,global,class=CODE,delta=2
     5                           	psect	idataBANK2,global,class=CODE,delta=2
     6                           	psect	stringtext1,global,class=STRCODE,delta=2
     7                           	psect	stringtext2,global,class=STRCODE,delta=2
     8                           	psect	stringtext3,global,class=STRCODE,delta=2
     9                           	psect	nvCOMMON,global,class=COMMON,space=1,delta=1
    10                           	psect	nvBANK2,global,class=BANK2,space=1,delta=1
    11                           	psect	cinit,global,class=CODE,merge=1,delta=2
    12                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
    13                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    14                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1
    15                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1
    16                           	psect	dataBANK2,global,class=BANK2,space=1,delta=1
    17                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1
    18                           	psect	clrtext,global,class=CODE,delta=2
    19                           	psect	cstackBANK3,global,class=BANK3,space=1,delta=1
    20                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    21                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    22                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    23                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    24                           	psect	text1,local,class=CODE,merge=1,delta=2
    25                           	psect	text2,local,class=CODE,merge=1,delta=2,group=2
    26                           	psect	text3,local,class=CODE,merge=1,delta=2,group=2
    27                           	psect	text4,local,class=CODE,merge=1,delta=2
    28                           	psect	text5,local,class=CODE,merge=1,delta=2
    29                           	psect	text6,local,class=CODE,merge=1,delta=2
    30                           	psect	text7,local,class=CODE,merge=1,delta=2
    31                           	psect	text8,local,class=CODE,merge=1,delta=2
    32                           	psect	text9,local,class=CODE,merge=1,delta=2
    33                           	psect	text10,local,class=CODE,merge=1,delta=2
    34                           	psect	text11,local,class=CODE,merge=1,delta=2
    35                           	psect	text12,local,class=CODE,merge=1,delta=2
    36                           	psect	text13,local,class=CODE,merge=1,delta=2
    37                           	psect	text14,local,class=CODE,merge=1,delta=2
    38                           	psect	text15,local,class=CODE,merge=1,delta=2
    39                           	psect	text16,local,class=CODE,merge=1,delta=2
    40                           	psect	text17,local,class=CODE,merge=1,delta=2
    41                           	psect	text18,local,class=CODE,merge=1,delta=2
    42                           	psect	text19,local,class=CODE,merge=1,delta=2
    43                           	psect	text20,local,class=CODE,merge=1,delta=2
    44                           	psect	text21,local,class=CODE,merge=1,delta=2
    45                           	psect	text22,local,class=CODE,merge=1,delta=2
    46                           	psect	text23,local,class=CODE,merge=1,delta=2
    47                           	psect	text24,local,class=CODE,merge=1,delta=2
    48                           	psect	text25,local,class=CODE,merge=1,delta=2
    49                           	psect	text26,local,class=CODE,merge=1,delta=2
    50                           	psect	text27,local,class=CODE,merge=1,delta=2
    51                           	psect	text28,local,class=CODE,merge=1,delta=2
    52                           	psect	text29,local,class=CODE,merge=1,delta=2
    53                           	psect	text30,local,class=CODE,merge=1,delta=2
    54                           	psect	text31,local,class=CODE,merge=1,delta=2
    55                           	psect	text32,local,class=CODE,merge=1,delta=2
    56                           	psect	text33,local,class=CODE,merge=1,delta=2
    57                           	psect	text34,local,class=CODE,merge=1,delta=2
    58                           	psect	text35,local,class=CODE,merge=1,delta=2
    59                           	psect	text36,local,class=CODE,merge=1,delta=2
    60                           	psect	text37,local,class=CODE,merge=1,delta=2
    61                           	psect	text38,local,class=CODE,merge=1,delta=2
    62                           	psect	text39,local,class=CODE,merge=1,delta=2
    63                           	psect	text40,local,class=CODE,merge=1,delta=2,group=2
    64                           	psect	text41,local,class=CODE,merge=1,delta=2
    65                           	psect	text42,local,class=CODE,merge=1,delta=2
    66                           	psect	text43,local,class=CODE,merge=1,delta=2
    67                           	psect	text44,local,class=CODE,merge=1,delta=2
    68                           	psect	text45,local,class=CODE,merge=1,delta=2
    69                           	psect	text46,local,class=CODE,merge=1,delta=2
    70                           	psect	text47,local,class=CODE,merge=1,delta=2
    71                           	psect	text48,local,class=CODE,merge=1,delta=2
    72                           	psect	text49,local,class=CODE,merge=1,delta=2
    73                           	psect	text50,local,class=CODE,merge=1,delta=2
    74                           	psect	text51,local,class=CODE,merge=1,delta=2
    75                           	psect	text52,local,class=CODE,merge=1,delta=2
    76                           	psect	text53,local,class=CODE,merge=1,delta=2
    77                           	psect	text54,local,class=CODE,merge=1,delta=2
    78                           	psect	text55,local,class=CODE,merge=1,delta=2
    79                           	psect	text56,local,class=CODE,merge=1,delta=2
    80                           	psect	text57,local,class=CODE,merge=1,delta=2
    81                           	psect	text58,local,class=CODE,merge=1,delta=2,group=2
    82                           	psect	text59,local,class=CODE,merge=1,delta=2,group=2
    83                           	psect	text60,local,class=CODE,merge=1,delta=2,group=2
    84                           	psect	text61,local,class=CODE,merge=1,delta=2,group=2
    85                           	psect	text62,local,class=CODE,merge=1,delta=2,group=2
    86                           	psect	text63,local,class=CODE,merge=1,delta=2,group=2
    87                           	psect	text64,local,class=CODE,merge=1,delta=2,group=2
    88                           	psect	text65,local,class=CODE,merge=1,delta=2,group=2
    89                           	psect	text66,local,class=CODE,merge=1,delta=2,group=2
    90                           	psect	text67,local,class=CODE,merge=1,delta=2,group=2
    91                           	psect	text68,local,class=CODE,merge=1,delta=2
    92                           	psect	text69,local,class=CODE,merge=1,delta=2
    93                           	psect	text70,local,class=CODE,merge=1,delta=2
    94                           	psect	text71,local,class=CODE,merge=1,delta=2
    95                           	psect	text72,local,class=CODE,merge=1,delta=2
    96                           	psect	text73,local,class=CODE,merge=1,delta=2
    97                           	psect	text74,local,class=CODE,merge=1,delta=2
    98                           	psect	text75,local,class=CODE,merge=1,delta=2
    99                           	psect	text76,local,class=CODE,merge=1,delta=2
   100                           	psect	text77,local,class=CODE,merge=1,delta=2
   101                           	psect	text78,local,class=CODE,merge=1,delta=2
   102                           	psect	text79,local,class=CODE,merge=1,delta=2
   103                           	psect	text80,local,class=CODE,merge=1,delta=2
   104                           	psect	text81,local,class=CODE,merge=1,delta=2
   105                           	psect	intentry,global,class=CODE,delta=2
   106                           	psect	text83,local,class=CODE,merge=1,delta=2
   107                           	psect	text84,local,class=CODE,merge=1,delta=2
   108                           	psect	text85,local,class=CODE,merge=1,delta=2
   109                           	psect	text86,local,class=CODE,merge=1,delta=2
   110                           	psect	text87,local,class=CODE,merge=1,delta=2
   111                           	psect	text88,local,class=CODE,merge=1,delta=2
   112                           	psect	text89,local,class=CODE,merge=1,delta=2
   113                           	psect	text90,local,class=CODE,merge=1,delta=2
   114                           	psect	swtext1,local,class=CONST,delta=2
   115                           	psect	text91,local,class=CODE,merge=1,delta=2
   116                           	psect	text92,local,class=CODE,merge=1,delta=2
   117                           	psect	text93,local,class=CODE,merge=1,delta=2
   118                           	dabs	1,0x7E,2
   119  0000                     
   120                           ; Version 1.45
   121                           ; Generated 16/11/2017 GMT
   122                           ; 
   123                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
   124                           ; All rights reserved.
   125                           ; 
   126                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
   127                           ; 
   128                           ; Redistribution and use in source and binary forms, with or without modification, are
   129                           ; permitted provided that the following conditions are met:
   130                           ; 
   131                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
   132                           ;        conditions and the following disclaimer.
   133                           ; 
   134                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
   135                           ;        of conditions and the following disclaimer in the documentation and/or other
   136                           ;        materials provided with the distribution.
   137                           ; 
   138                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
   139                           ;        software without specific prior written permission.
   140                           ; 
   141                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   142                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   143                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   144                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   145                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   146                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   147                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   148                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   149                           ; 
   150                           ; 
   151                           ; Code-generator required, PIC16LF1829 Definitions
   152                           ; 
   153                           ; SFR Addresses
   154  0000                     	;# 
   155  0001                     	;# 
   156  0002                     	;# 
   157  0003                     	;# 
   158  0004                     	;# 
   159  0005                     	;# 
   160  0006                     	;# 
   161  0007                     	;# 
   162  0008                     	;# 
   163  0009                     	;# 
   164  000A                     	;# 
   165  000B                     	;# 
   166  000C                     	;# 
   167  000D                     	;# 
   168  000E                     	;# 
   169  0011                     	;# 
   170  0012                     	;# 
   171  0013                     	;# 
   172  0014                     	;# 
   173  0015                     	;# 
   174  0016                     	;# 
   175  0016                     	;# 
   176  0017                     	;# 
   177  0018                     	;# 
   178  0019                     	;# 
   179  001A                     	;# 
   180  001B                     	;# 
   181  001C                     	;# 
   182  001E                     	;# 
   183  001F                     	;# 
   184  008C                     	;# 
   185  008D                     	;# 
   186  008E                     	;# 
   187  0091                     	;# 
   188  0092                     	;# 
   189  0093                     	;# 
   190  0094                     	;# 
   191  0095                     	;# 
   192  0096                     	;# 
   193  0097                     	;# 
   194  0098                     	;# 
   195  0099                     	;# 
   196  009A                     	;# 
   197  009B                     	;# 
   198  009B                     	;# 
   199  009C                     	;# 
   200  009D                     	;# 
   201  009E                     	;# 
   202  010C                     	;# 
   203  010D                     	;# 
   204  010E                     	;# 
   205  0111                     	;# 
   206  0112                     	;# 
   207  0113                     	;# 
   208  0114                     	;# 
   209  0115                     	;# 
   210  0116                     	;# 
   211  0117                     	;# 
   212  0118                     	;# 
   213  0119                     	;# 
   214  011A                     	;# 
   215  011B                     	;# 
   216  011D                     	;# 
   217  011E                     	;# 
   218  018C                     	;# 
   219  018D                     	;# 
   220  018E                     	;# 
   221  0191                     	;# 
   222  0191                     	;# 
   223  0192                     	;# 
   224  0193                     	;# 
   225  0193                     	;# 
   226  0193                     	;# 
   227  0194                     	;# 
   228  0195                     	;# 
   229  0196                     	;# 
   230  0199                     	;# 
   231  019A                     	;# 
   232  019B                     	;# 
   233  019B                     	;# 
   234  019B                     	;# 
   235  019B                     	;# 
   236  019C                     	;# 
   237  019C                     	;# 
   238  019D                     	;# 
   239  019E                     	;# 
   240  019F                     	;# 
   241  020C                     	;# 
   242  020D                     	;# 
   243  020E                     	;# 
   244  0211                     	;# 
   245  0211                     	;# 
   246  0212                     	;# 
   247  0212                     	;# 
   248  0213                     	;# 
   249  0213                     	;# 
   250  0214                     	;# 
   251  0214                     	;# 
   252  0215                     	;# 
   253  0215                     	;# 
   254  0215                     	;# 
   255  0216                     	;# 
   256  0216                     	;# 
   257  0217                     	;# 
   258  0217                     	;# 
   259  0219                     	;# 
   260  021A                     	;# 
   261  021B                     	;# 
   262  021C                     	;# 
   263  021D                     	;# 
   264  021E                     	;# 
   265  021F                     	;# 
   266  0291                     	;# 
   267  0291                     	;# 
   268  0292                     	;# 
   269  0293                     	;# 
   270  0294                     	;# 
   271  0295                     	;# 
   272  0295                     	;# 
   273  0296                     	;# 
   274  0298                     	;# 
   275  0298                     	;# 
   276  0299                     	;# 
   277  029A                     	;# 
   278  029B                     	;# 
   279  029C                     	;# 
   280  029D                     	;# 
   281  029E                     	;# 
   282  0311                     	;# 
   283  0311                     	;# 
   284  0312                     	;# 
   285  0313                     	;# 
   286  0318                     	;# 
   287  0318                     	;# 
   288  0319                     	;# 
   289  031A                     	;# 
   290  038C                     	;# 
   291  038D                     	;# 
   292  038E                     	;# 
   293  0391                     	;# 
   294  0392                     	;# 
   295  0393                     	;# 
   296  0394                     	;# 
   297  0395                     	;# 
   298  0396                     	;# 
   299  039A                     	;# 
   300  039C                     	;# 
   301  039D                     	;# 
   302  039E                     	;# 
   303  039F                     	;# 
   304  0415                     	;# 
   305  0416                     	;# 
   306  0417                     	;# 
   307  041C                     	;# 
   308  041D                     	;# 
   309  041E                     	;# 
   310  0FE4                     	;# 
   311  0FE5                     	;# 
   312  0FE6                     	;# 
   313  0FE7                     	;# 
   314  0FE8                     	;# 
   315  0FE9                     	;# 
   316  0FEA                     	;# 
   317  0FEB                     	;# 
   318  0FED                     	;# 
   319  0FEE                     	;# 
   320  0FEF                     	;# 
   321  0000                     	;# 
   322  0001                     	;# 
   323  0002                     	;# 
   324  0003                     	;# 
   325  0004                     	;# 
   326  0005                     	;# 
   327  0006                     	;# 
   328  0007                     	;# 
   329  0008                     	;# 
   330  0009                     	;# 
   331  000A                     	;# 
   332  000B                     	;# 
   333  000C                     	;# 
   334  000D                     	;# 
   335  000E                     	;# 
   336  0011                     	;# 
   337  0012                     	;# 
   338  0013                     	;# 
   339  0014                     	;# 
   340  0015                     	;# 
   341  0016                     	;# 
   342  0016                     	;# 
   343  0017                     	;# 
   344  0018                     	;# 
   345  0019                     	;# 
   346  001A                     	;# 
   347  001B                     	;# 
   348  001C                     	;# 
   349  001E                     	;# 
   350  001F                     	;# 
   351  008C                     	;# 
   352  008D                     	;# 
   353  008E                     	;# 
   354  0091                     	;# 
   355  0092                     	;# 
   356  0093                     	;# 
   357  0094                     	;# 
   358  0095                     	;# 
   359  0096                     	;# 
   360  0097                     	;# 
   361  0098                     	;# 
   362  0099                     	;# 
   363  009A                     	;# 
   364  009B                     	;# 
   365  009B                     	;# 
   366  009C                     	;# 
   367  009D                     	;# 
   368  009E                     	;# 
   369  010C                     	;# 
   370  010D                     	;# 
   371  010E                     	;# 
   372  0111                     	;# 
   373  0112                     	;# 
   374  0113                     	;# 
   375  0114                     	;# 
   376  0115                     	;# 
   377  0116                     	;# 
   378  0117                     	;# 
   379  0118                     	;# 
   380  0119                     	;# 
   381  011A                     	;# 
   382  011B                     	;# 
   383  011D                     	;# 
   384  011E                     	;# 
   385  018C                     	;# 
   386  018D                     	;# 
   387  018E                     	;# 
   388  0191                     	;# 
   389  0191                     	;# 
   390  0192                     	;# 
   391  0193                     	;# 
   392  0193                     	;# 
   393  0193                     	;# 
   394  0194                     	;# 
   395  0195                     	;# 
   396  0196                     	;# 
   397  0199                     	;# 
   398  019A                     	;# 
   399  019B                     	;# 
   400  019B                     	;# 
   401  019B                     	;# 
   402  019B                     	;# 
   403  019C                     	;# 
   404  019C                     	;# 
   405  019D                     	;# 
   406  019E                     	;# 
   407  019F                     	;# 
   408  020C                     	;# 
   409  020D                     	;# 
   410  020E                     	;# 
   411  0211                     	;# 
   412  0211                     	;# 
   413  0212                     	;# 
   414  0212                     	;# 
   415  0213                     	;# 
   416  0213                     	;# 
   417  0214                     	;# 
   418  0214                     	;# 
   419  0215                     	;# 
   420  0215                     	;# 
   421  0215                     	;# 
   422  0216                     	;# 
   423  0216                     	;# 
   424  0217                     	;# 
   425  0217                     	;# 
   426  0219                     	;# 
   427  021A                     	;# 
   428  021B                     	;# 
   429  021C                     	;# 
   430  021D                     	;# 
   431  021E                     	;# 
   432  021F                     	;# 
   433  0291                     	;# 
   434  0291                     	;# 
   435  0292                     	;# 
   436  0293                     	;# 
   437  0294                     	;# 
   438  0295                     	;# 
   439  0295                     	;# 
   440  0296                     	;# 
   441  0298                     	;# 
   442  0298                     	;# 
   443  0299                     	;# 
   444  029A                     	;# 
   445  029B                     	;# 
   446  029C                     	;# 
   447  029D                     	;# 
   448  029E                     	;# 
   449  0311                     	;# 
   450  0311                     	;# 
   451  0312                     	;# 
   452  0313                     	;# 
   453  0318                     	;# 
   454  0318                     	;# 
   455  0319                     	;# 
   456  031A                     	;# 
   457  038C                     	;# 
   458  038D                     	;# 
   459  038E                     	;# 
   460  0391                     	;# 
   461  0392                     	;# 
   462  0393                     	;# 
   463  0394                     	;# 
   464  0395                     	;# 
   465  0396                     	;# 
   466  039A                     	;# 
   467  039C                     	;# 
   468  039D                     	;# 
   469  039E                     	;# 
   470  039F                     	;# 
   471  0415                     	;# 
   472  0416                     	;# 
   473  0417                     	;# 
   474  041C                     	;# 
   475  041D                     	;# 
   476  041E                     	;# 
   477  0FE4                     	;# 
   478  0FE5                     	;# 
   479  0FE6                     	;# 
   480  0FE7                     	;# 
   481  0FE8                     	;# 
   482  0FE9                     	;# 
   483  0FEA                     	;# 
   484  0FEB                     	;# 
   485  0FED                     	;# 
   486  0FEE                     	;# 
   487  0FEF                     	;# 
   488  0000                     	;# 
   489  0001                     	;# 
   490  0002                     	;# 
   491  0003                     	;# 
   492  0004                     	;# 
   493  0005                     	;# 
   494  0006                     	;# 
   495  0007                     	;# 
   496  0008                     	;# 
   497  0009                     	;# 
   498  000A                     	;# 
   499  000B                     	;# 
   500  000C                     	;# 
   501  000D                     	;# 
   502  000E                     	;# 
   503  0011                     	;# 
   504  0012                     	;# 
   505  0013                     	;# 
   506  0014                     	;# 
   507  0015                     	;# 
   508  0016                     	;# 
   509  0016                     	;# 
   510  0017                     	;# 
   511  0018                     	;# 
   512  0019                     	;# 
   513  001A                     	;# 
   514  001B                     	;# 
   515  001C                     	;# 
   516  001E                     	;# 
   517  001F                     	;# 
   518  008C                     	;# 
   519  008D                     	;# 
   520  008E                     	;# 
   521  0091                     	;# 
   522  0092                     	;# 
   523  0093                     	;# 
   524  0094                     	;# 
   525  0095                     	;# 
   526  0096                     	;# 
   527  0097                     	;# 
   528  0098                     	;# 
   529  0099                     	;# 
   530  009A                     	;# 
   531  009B                     	;# 
   532  009B                     	;# 
   533  009C                     	;# 
   534  009D                     	;# 
   535  009E                     	;# 
   536  010C                     	;# 
   537  010D                     	;# 
   538  010E                     	;# 
   539  0111                     	;# 
   540  0112                     	;# 
   541  0113                     	;# 
   542  0114                     	;# 
   543  0115                     	;# 
   544  0116                     	;# 
   545  0117                     	;# 
   546  0118                     	;# 
   547  0119                     	;# 
   548  011A                     	;# 
   549  011B                     	;# 
   550  011D                     	;# 
   551  011E                     	;# 
   552  018C                     	;# 
   553  018D                     	;# 
   554  018E                     	;# 
   555  0191                     	;# 
   556  0191                     	;# 
   557  0192                     	;# 
   558  0193                     	;# 
   559  0193                     	;# 
   560  0193                     	;# 
   561  0194                     	;# 
   562  0195                     	;# 
   563  0196                     	;# 
   564  0199                     	;# 
   565  019A                     	;# 
   566  019B                     	;# 
   567  019B                     	;# 
   568  019B                     	;# 
   569  019B                     	;# 
   570  019C                     	;# 
   571  019C                     	;# 
   572  019D                     	;# 
   573  019E                     	;# 
   574  019F                     	;# 
   575  020C                     	;# 
   576  020D                     	;# 
   577  020E                     	;# 
   578  0211                     	;# 
   579  0211                     	;# 
   580  0212                     	;# 
   581  0212                     	;# 
   582  0213                     	;# 
   583  0213                     	;# 
   584  0214                     	;# 
   585  0214                     	;# 
   586  0215                     	;# 
   587  0215                     	;# 
   588  0215                     	;# 
   589  0216                     	;# 
   590  0216                     	;# 
   591  0217                     	;# 
   592  0217                     	;# 
   593  0219                     	;# 
   594  021A                     	;# 
   595  021B                     	;# 
   596  021C                     	;# 
   597  021D                     	;# 
   598  021E                     	;# 
   599  021F                     	;# 
   600  0291                     	;# 
   601  0291                     	;# 
   602  0292                     	;# 
   603  0293                     	;# 
   604  0294                     	;# 
   605  0295                     	;# 
   606  0295                     	;# 
   607  0296                     	;# 
   608  0298                     	;# 
   609  0298                     	;# 
   610  0299                     	;# 
   611  029A                     	;# 
   612  029B                     	;# 
   613  029C                     	;# 
   614  029D                     	;# 
   615  029E                     	;# 
   616  0311                     	;# 
   617  0311                     	;# 
   618  0312                     	;# 
   619  0313                     	;# 
   620  0318                     	;# 
   621  0318                     	;# 
   622  0319                     	;# 
   623  031A                     	;# 
   624  038C                     	;# 
   625  038D                     	;# 
   626  038E                     	;# 
   627  0391                     	;# 
   628  0392                     	;# 
   629  0393                     	;# 
   630  0394                     	;# 
   631  0395                     	;# 
   632  0396                     	;# 
   633  039A                     	;# 
   634  039C                     	;# 
   635  039D                     	;# 
   636  039E                     	;# 
   637  039F                     	;# 
   638  0415                     	;# 
   639  0416                     	;# 
   640  0417                     	;# 
   641  041C                     	;# 
   642  041D                     	;# 
   643  041E                     	;# 
   644  0FE4                     	;# 
   645  0FE5                     	;# 
   646  0FE6                     	;# 
   647  0FE7                     	;# 
   648  0FE8                     	;# 
   649  0FE9                     	;# 
   650  0FEA                     	;# 
   651  0FEB                     	;# 
   652  0FED                     	;# 
   653  0FEE                     	;# 
   654  0FEF                     	;# 
   655  0000                     	;# 
   656  0001                     	;# 
   657  0002                     	;# 
   658  0003                     	;# 
   659  0004                     	;# 
   660  0005                     	;# 
   661  0006                     	;# 
   662  0007                     	;# 
   663  0008                     	;# 
   664  0009                     	;# 
   665  000A                     	;# 
   666  000B                     	;# 
   667  000C                     	;# 
   668  000D                     	;# 
   669  000E                     	;# 
   670  0011                     	;# 
   671  0012                     	;# 
   672  0013                     	;# 
   673  0014                     	;# 
   674  0015                     	;# 
   675  0016                     	;# 
   676  0016                     	;# 
   677  0017                     	;# 
   678  0018                     	;# 
   679  0019                     	;# 
   680  001A                     	;# 
   681  001B                     	;# 
   682  001C                     	;# 
   683  001E                     	;# 
   684  001F                     	;# 
   685  008C                     	;# 
   686  008D                     	;# 
   687  008E                     	;# 
   688  0091                     	;# 
   689  0092                     	;# 
   690  0093                     	;# 
   691  0094                     	;# 
   692  0095                     	;# 
   693  0096                     	;# 
   694  0097                     	;# 
   695  0098                     	;# 
   696  0099                     	;# 
   697  009A                     	;# 
   698  009B                     	;# 
   699  009B                     	;# 
   700  009C                     	;# 
   701  009D                     	;# 
   702  009E                     	;# 
   703  010C                     	;# 
   704  010D                     	;# 
   705  010E                     	;# 
   706  0111                     	;# 
   707  0112                     	;# 
   708  0113                     	;# 
   709  0114                     	;# 
   710  0115                     	;# 
   711  0116                     	;# 
   712  0117                     	;# 
   713  0118                     	;# 
   714  0119                     	;# 
   715  011A                     	;# 
   716  011B                     	;# 
   717  011D                     	;# 
   718  011E                     	;# 
   719  018C                     	;# 
   720  018D                     	;# 
   721  018E                     	;# 
   722  0191                     	;# 
   723  0191                     	;# 
   724  0192                     	;# 
   725  0193                     	;# 
   726  0193                     	;# 
   727  0193                     	;# 
   728  0194                     	;# 
   729  0195                     	;# 
   730  0196                     	;# 
   731  0199                     	;# 
   732  019A                     	;# 
   733  019B                     	;# 
   734  019B                     	;# 
   735  019B                     	;# 
   736  019B                     	;# 
   737  019C                     	;# 
   738  019C                     	;# 
   739  019D                     	;# 
   740  019E                     	;# 
   741  019F                     	;# 
   742  020C                     	;# 
   743  020D                     	;# 
   744  020E                     	;# 
   745  0211                     	;# 
   746  0211                     	;# 
   747  0212                     	;# 
   748  0212                     	;# 
   749  0213                     	;# 
   750  0213                     	;# 
   751  0214                     	;# 
   752  0214                     	;# 
   753  0215                     	;# 
   754  0215                     	;# 
   755  0215                     	;# 
   756  0216                     	;# 
   757  0216                     	;# 
   758  0217                     	;# 
   759  0217                     	;# 
   760  0219                     	;# 
   761  021A                     	;# 
   762  021B                     	;# 
   763  021C                     	;# 
   764  021D                     	;# 
   765  021E                     	;# 
   766  021F                     	;# 
   767  0291                     	;# 
   768  0291                     	;# 
   769  0292                     	;# 
   770  0293                     	;# 
   771  0294                     	;# 
   772  0295                     	;# 
   773  0295                     	;# 
   774  0296                     	;# 
   775  0298                     	;# 
   776  0298                     	;# 
   777  0299                     	;# 
   778  029A                     	;# 
   779  029B                     	;# 
   780  029C                     	;# 
   781  029D                     	;# 
   782  029E                     	;# 
   783  0311                     	;# 
   784  0311                     	;# 
   785  0312                     	;# 
   786  0313                     	;# 
   787  0318                     	;# 
   788  0318                     	;# 
   789  0319                     	;# 
   790  031A                     	;# 
   791  038C                     	;# 
   792  038D                     	;# 
   793  038E                     	;# 
   794  0391                     	;# 
   795  0392                     	;# 
   796  0393                     	;# 
   797  0394                     	;# 
   798  0395                     	;# 
   799  0396                     	;# 
   800  039A                     	;# 
   801  039C                     	;# 
   802  039D                     	;# 
   803  039E                     	;# 
   804  039F                     	;# 
   805  0415                     	;# 
   806  0416                     	;# 
   807  0417                     	;# 
   808  041C                     	;# 
   809  041D                     	;# 
   810  041E                     	;# 
   811  0FE4                     	;# 
   812  0FE5                     	;# 
   813  0FE6                     	;# 
   814  0FE7                     	;# 
   815  0FE8                     	;# 
   816  0FE9                     	;# 
   817  0FEA                     	;# 
   818  0FEB                     	;# 
   819  0FED                     	;# 
   820  0FEE                     	;# 
   821  0FEF                     	;# 
   822  0000                     	;# 
   823  0001                     	;# 
   824  0002                     	;# 
   825  0003                     	;# 
   826  0004                     	;# 
   827  0005                     	;# 
   828  0006                     	;# 
   829  0007                     	;# 
   830  0008                     	;# 
   831  0009                     	;# 
   832  000A                     	;# 
   833  000B                     	;# 
   834  000C                     	;# 
   835  000D                     	;# 
   836  000E                     	;# 
   837  0011                     	;# 
   838  0012                     	;# 
   839  0013                     	;# 
   840  0014                     	;# 
   841  0015                     	;# 
   842  0016                     	;# 
   843  0016                     	;# 
   844  0017                     	;# 
   845  0018                     	;# 
   846  0019                     	;# 
   847  001A                     	;# 
   848  001B                     	;# 
   849  001C                     	;# 
   850  001E                     	;# 
   851  001F                     	;# 
   852  008C                     	;# 
   853  008D                     	;# 
   854  008E                     	;# 
   855  0091                     	;# 
   856  0092                     	;# 
   857  0093                     	;# 
   858  0094                     	;# 
   859  0095                     	;# 
   860  0096                     	;# 
   861  0097                     	;# 
   862  0098                     	;# 
   863  0099                     	;# 
   864  009A                     	;# 
   865  009B                     	;# 
   866  009B                     	;# 
   867  009C                     	;# 
   868  009D                     	;# 
   869  009E                     	;# 
   870  010C                     	;# 
   871  010D                     	;# 
   872  010E                     	;# 
   873  0111                     	;# 
   874  0112                     	;# 
   875  0113                     	;# 
   876  0114                     	;# 
   877  0115                     	;# 
   878  0116                     	;# 
   879  0117                     	;# 
   880  0118                     	;# 
   881  0119                     	;# 
   882  011A                     	;# 
   883  011B                     	;# 
   884  011D                     	;# 
   885  011E                     	;# 
   886  018C                     	;# 
   887  018D                     	;# 
   888  018E                     	;# 
   889  0191                     	;# 
   890  0191                     	;# 
   891  0192                     	;# 
   892  0193                     	;# 
   893  0193                     	;# 
   894  0193                     	;# 
   895  0194                     	;# 
   896  0195                     	;# 
   897  0196                     	;# 
   898  0199                     	;# 
   899  019A                     	;# 
   900  019B                     	;# 
   901  019B                     	;# 
   902  019B                     	;# 
   903  019B                     	;# 
   904  019C                     	;# 
   905  019C                     	;# 
   906  019D                     	;# 
   907  019E                     	;# 
   908  019F                     	;# 
   909  020C                     	;# 
   910  020D                     	;# 
   911  020E                     	;# 
   912  0211                     	;# 
   913  0211                     	;# 
   914  0212                     	;# 
   915  0212                     	;# 
   916  0213                     	;# 
   917  0213                     	;# 
   918  0214                     	;# 
   919  0214                     	;# 
   920  0215                     	;# 
   921  0215                     	;# 
   922  0215                     	;# 
   923  0216                     	;# 
   924  0216                     	;# 
   925  0217                     	;# 
   926  0217                     	;# 
   927  0219                     	;# 
   928  021A                     	;# 
   929  021B                     	;# 
   930  021C                     	;# 
   931  021D                     	;# 
   932  021E                     	;# 
   933  021F                     	;# 
   934  0291                     	;# 
   935  0291                     	;# 
   936  0292                     	;# 
   937  0293                     	;# 
   938  0294                     	;# 
   939  0295                     	;# 
   940  0295                     	;# 
   941  0296                     	;# 
   942  0298                     	;# 
   943  0298                     	;# 
   944  0299                     	;# 
   945  029A                     	;# 
   946  029B                     	;# 
   947  029C                     	;# 
   948  029D                     	;# 
   949  029E                     	;# 
   950  0311                     	;# 
   951  0311                     	;# 
   952  0312                     	;# 
   953  0313                     	;# 
   954  0318                     	;# 
   955  0318                     	;# 
   956  0319                     	;# 
   957  031A                     	;# 
   958  038C                     	;# 
   959  038D                     	;# 
   960  038E                     	;# 
   961  0391                     	;# 
   962  0392                     	;# 
   963  0393                     	;# 
   964  0394                     	;# 
   965  0395                     	;# 
   966  0396                     	;# 
   967  039A                     	;# 
   968  039C                     	;# 
   969  039D                     	;# 
   970  039E                     	;# 
   971  039F                     	;# 
   972  0415                     	;# 
   973  0416                     	;# 
   974  0417                     	;# 
   975  041C                     	;# 
   976  041D                     	;# 
   977  041E                     	;# 
   978  0FE4                     	;# 
   979  0FE5                     	;# 
   980  0FE6                     	;# 
   981  0FE7                     	;# 
   982  0FE8                     	;# 
   983  0FE9                     	;# 
   984  0FEA                     	;# 
   985  0FEB                     	;# 
   986  0FED                     	;# 
   987  0FEE                     	;# 
   988  0FEF                     	;# 
   989  0000                     	;# 
   990  0001                     	;# 
   991  0002                     	;# 
   992  0003                     	;# 
   993  0004                     	;# 
   994  0005                     	;# 
   995  0006                     	;# 
   996  0007                     	;# 
   997  0008                     	;# 
   998  0009                     	;# 
   999  000A                     	;# 
  1000  000B                     	;# 
  1001  000C                     	;# 
  1002  000D                     	;# 
  1003  000E                     	;# 
  1004  0011                     	;# 
  1005  0012                     	;# 
  1006  0013                     	;# 
  1007  0014                     	;# 
  1008  0015                     	;# 
  1009  0016                     	;# 
  1010  0016                     	;# 
  1011  0017                     	;# 
  1012  0018                     	;# 
  1013  0019                     	;# 
  1014  001A                     	;# 
  1015  001B                     	;# 
  1016  001C                     	;# 
  1017  001E                     	;# 
  1018  001F                     	;# 
  1019  008C                     	;# 
  1020  008D                     	;# 
  1021  008E                     	;# 
  1022  0091                     	;# 
  1023  0092                     	;# 
  1024  0093                     	;# 
  1025  0094                     	;# 
  1026  0095                     	;# 
  1027  0096                     	;# 
  1028  0097                     	;# 
  1029  0098                     	;# 
  1030  0099                     	;# 
  1031  009A                     	;# 
  1032  009B                     	;# 
  1033  009B                     	;# 
  1034  009C                     	;# 
  1035  009D                     	;# 
  1036  009E                     	;# 
  1037  010C                     	;# 
  1038  010D                     	;# 
  1039  010E                     	;# 
  1040  0111                     	;# 
  1041  0112                     	;# 
  1042  0113                     	;# 
  1043  0114                     	;# 
  1044  0115                     	;# 
  1045  0116                     	;# 
  1046  0117                     	;# 
  1047  0118                     	;# 
  1048  0119                     	;# 
  1049  011A                     	;# 
  1050  011B                     	;# 
  1051  011D                     	;# 
  1052  011E                     	;# 
  1053  018C                     	;# 
  1054  018D                     	;# 
  1055  018E                     	;# 
  1056  0191                     	;# 
  1057  0191                     	;# 
  1058  0192                     	;# 
  1059  0193                     	;# 
  1060  0193                     	;# 
  1061  0193                     	;# 
  1062  0194                     	;# 
  1063  0195                     	;# 
  1064  0196                     	;# 
  1065  0199                     	;# 
  1066  019A                     	;# 
  1067  019B                     	;# 
  1068  019B                     	;# 
  1069  019B                     	;# 
  1070  019B                     	;# 
  1071  019C                     	;# 
  1072  019C                     	;# 
  1073  019D                     	;# 
  1074  019E                     	;# 
  1075  019F                     	;# 
  1076  020C                     	;# 
  1077  020D                     	;# 
  1078  020E                     	;# 
  1079  0211                     	;# 
  1080  0211                     	;# 
  1081  0212                     	;# 
  1082  0212                     	;# 
  1083  0213                     	;# 
  1084  0213                     	;# 
  1085  0214                     	;# 
  1086  0214                     	;# 
  1087  0215                     	;# 
  1088  0215                     	;# 
  1089  0215                     	;# 
  1090  0216                     	;# 
  1091  0216                     	;# 
  1092  0217                     	;# 
  1093  0217                     	;# 
  1094  0219                     	;# 
  1095  021A                     	;# 
  1096  021B                     	;# 
  1097  021C                     	;# 
  1098  021D                     	;# 
  1099  021E                     	;# 
  1100  021F                     	;# 
  1101  0291                     	;# 
  1102  0291                     	;# 
  1103  0292                     	;# 
  1104  0293                     	;# 
  1105  0294                     	;# 
  1106  0295                     	;# 
  1107  0295                     	;# 
  1108  0296                     	;# 
  1109  0298                     	;# 
  1110  0298                     	;# 
  1111  0299                     	;# 
  1112  029A                     	;# 
  1113  029B                     	;# 
  1114  029C                     	;# 
  1115  029D                     	;# 
  1116  029E                     	;# 
  1117  0311                     	;# 
  1118  0311                     	;# 
  1119  0312                     	;# 
  1120  0313                     	;# 
  1121  0318                     	;# 
  1122  0318                     	;# 
  1123  0319                     	;# 
  1124  031A                     	;# 
  1125  038C                     	;# 
  1126  038D                     	;# 
  1127  038E                     	;# 
  1128  0391                     	;# 
  1129  0392                     	;# 
  1130  0393                     	;# 
  1131  0394                     	;# 
  1132  0395                     	;# 
  1133  0396                     	;# 
  1134  039A                     	;# 
  1135  039C                     	;# 
  1136  039D                     	;# 
  1137  039E                     	;# 
  1138  039F                     	;# 
  1139  0415                     	;# 
  1140  0416                     	;# 
  1141  0417                     	;# 
  1142  041C                     	;# 
  1143  041D                     	;# 
  1144  041E                     	;# 
  1145  0FE4                     	;# 
  1146  0FE5                     	;# 
  1147  0FE6                     	;# 
  1148  0FE7                     	;# 
  1149  0FE8                     	;# 
  1150  0FE9                     	;# 
  1151  0FEA                     	;# 
  1152  0FEB                     	;# 
  1153  0FED                     	;# 
  1154  0FEE                     	;# 
  1155  0FEF                     	;# 
  1156  0000                     	;# 
  1157  0001                     	;# 
  1158  0002                     	;# 
  1159  0003                     	;# 
  1160  0004                     	;# 
  1161  0005                     	;# 
  1162  0006                     	;# 
  1163  0007                     	;# 
  1164  0008                     	;# 
  1165  0009                     	;# 
  1166  000A                     	;# 
  1167  000B                     	;# 
  1168  000C                     	;# 
  1169  000D                     	;# 
  1170  000E                     	;# 
  1171  0011                     	;# 
  1172  0012                     	;# 
  1173  0013                     	;# 
  1174  0014                     	;# 
  1175  0015                     	;# 
  1176  0016                     	;# 
  1177  0016                     	;# 
  1178  0017                     	;# 
  1179  0018                     	;# 
  1180  0019                     	;# 
  1181  001A                     	;# 
  1182  001B                     	;# 
  1183  001C                     	;# 
  1184  001E                     	;# 
  1185  001F                     	;# 
  1186  008C                     	;# 
  1187  008D                     	;# 
  1188  008E                     	;# 
  1189  0091                     	;# 
  1190  0092                     	;# 
  1191  0093                     	;# 
  1192  0094                     	;# 
  1193  0095                     	;# 
  1194  0096                     	;# 
  1195  0097                     	;# 
  1196  0098                     	;# 
  1197  0099                     	;# 
  1198  009A                     	;# 
  1199  009B                     	;# 
  1200  009B                     	;# 
  1201  009C                     	;# 
  1202  009D                     	;# 
  1203  009E                     	;# 
  1204  010C                     	;# 
  1205  010D                     	;# 
  1206  010E                     	;# 
  1207  0111                     	;# 
  1208  0112                     	;# 
  1209  0113                     	;# 
  1210  0114                     	;# 
  1211  0115                     	;# 
  1212  0116                     	;# 
  1213  0117                     	;# 
  1214  0118                     	;# 
  1215  0119                     	;# 
  1216  011A                     	;# 
  1217  011B                     	;# 
  1218  011D                     	;# 
  1219  011E                     	;# 
  1220  018C                     	;# 
  1221  018D                     	;# 
  1222  018E                     	;# 
  1223  0191                     	;# 
  1224  0191                     	;# 
  1225  0192                     	;# 
  1226  0193                     	;# 
  1227  0193                     	;# 
  1228  0193                     	;# 
  1229  0194                     	;# 
  1230  0195                     	;# 
  1231  0196                     	;# 
  1232  0199                     	;# 
  1233  019A                     	;# 
  1234  019B                     	;# 
  1235  019B                     	;# 
  1236  019B                     	;# 
  1237  019B                     	;# 
  1238  019C                     	;# 
  1239  019C                     	;# 
  1240  019D                     	;# 
  1241  019E                     	;# 
  1242  019F                     	;# 
  1243  020C                     	;# 
  1244  020D                     	;# 
  1245  020E                     	;# 
  1246  0211                     	;# 
  1247  0211                     	;# 
  1248  0212                     	;# 
  1249  0212                     	;# 
  1250  0213                     	;# 
  1251  0213                     	;# 
  1252  0214                     	;# 
  1253  0214                     	;# 
  1254  0215                     	;# 
  1255  0215                     	;# 
  1256  0215                     	;# 
  1257  0216                     	;# 
  1258  0216                     	;# 
  1259  0217                     	;# 
  1260  0217                     	;# 
  1261  0219                     	;# 
  1262  021A                     	;# 
  1263  021B                     	;# 
  1264  021C                     	;# 
  1265  021D                     	;# 
  1266  021E                     	;# 
  1267  021F                     	;# 
  1268  0291                     	;# 
  1269  0291                     	;# 
  1270  0292                     	;# 
  1271  0293                     	;# 
  1272  0294                     	;# 
  1273  0295                     	;# 
  1274  0295                     	;# 
  1275  0296                     	;# 
  1276  0298                     	;# 
  1277  0298                     	;# 
  1278  0299                     	;# 
  1279  029A                     	;# 
  1280  029B                     	;# 
  1281  029C                     	;# 
  1282  029D                     	;# 
  1283  029E                     	;# 
  1284  0311                     	;# 
  1285  0311                     	;# 
  1286  0312                     	;# 
  1287  0313                     	;# 
  1288  0318                     	;# 
  1289  0318                     	;# 
  1290  0319                     	;# 
  1291  031A                     	;# 
  1292  038C                     	;# 
  1293  038D                     	;# 
  1294  038E                     	;# 
  1295  0391                     	;# 
  1296  0392                     	;# 
  1297  0393                     	;# 
  1298  0394                     	;# 
  1299  0395                     	;# 
  1300  0396                     	;# 
  1301  039A                     	;# 
  1302  039C                     	;# 
  1303  039D                     	;# 
  1304  039E                     	;# 
  1305  039F                     	;# 
  1306  0415                     	;# 
  1307  0416                     	;# 
  1308  0417                     	;# 
  1309  041C                     	;# 
  1310  041D                     	;# 
  1311  041E                     	;# 
  1312  0FE4                     	;# 
  1313  0FE5                     	;# 
  1314  0FE6                     	;# 
  1315  0FE7                     	;# 
  1316  0FE8                     	;# 
  1317  0FE9                     	;# 
  1318  0FEA                     	;# 
  1319  0FEB                     	;# 
  1320  0FED                     	;# 
  1321  0FEE                     	;# 
  1322  0FEF                     	;# 
  1323  0000                     	;# 
  1324  0001                     	;# 
  1325  0002                     	;# 
  1326  0003                     	;# 
  1327  0004                     	;# 
  1328  0005                     	;# 
  1329  0006                     	;# 
  1330  0007                     	;# 
  1331  0008                     	;# 
  1332  0009                     	;# 
  1333  000A                     	;# 
  1334  000B                     	;# 
  1335  000C                     	;# 
  1336  000D                     	;# 
  1337  000E                     	;# 
  1338  0011                     	;# 
  1339  0012                     	;# 
  1340  0013                     	;# 
  1341  0014                     	;# 
  1342  0015                     	;# 
  1343  0016                     	;# 
  1344  0016                     	;# 
  1345  0017                     	;# 
  1346  0018                     	;# 
  1347  0019                     	;# 
  1348  001A                     	;# 
  1349  001B                     	;# 
  1350  001C                     	;# 
  1351  001E                     	;# 
  1352  001F                     	;# 
  1353  008C                     	;# 
  1354  008D                     	;# 
  1355  008E                     	;# 
  1356  0091                     	;# 
  1357  0092                     	;# 
  1358  0093                     	;# 
  1359  0094                     	;# 
  1360  0095                     	;# 
  1361  0096                     	;# 
  1362  0097                     	;# 
  1363  0098                     	;# 
  1364  0099                     	;# 
  1365  009A                     	;# 
  1366  009B                     	;# 
  1367  009B                     	;# 
  1368  009C                     	;# 
  1369  009D                     	;# 
  1370  009E                     	;# 
  1371  010C                     	;# 
  1372  010D                     	;# 
  1373  010E                     	;# 
  1374  0111                     	;# 
  1375  0112                     	;# 
  1376  0113                     	;# 
  1377  0114                     	;# 
  1378  0115                     	;# 
  1379  0116                     	;# 
  1380  0117                     	;# 
  1381  0118                     	;# 
  1382  0119                     	;# 
  1383  011A                     	;# 
  1384  011B                     	;# 
  1385  011D                     	;# 
  1386  011E                     	;# 
  1387  018C                     	;# 
  1388  018D                     	;# 
  1389  018E                     	;# 
  1390  0191                     	;# 
  1391  0191                     	;# 
  1392  0192                     	;# 
  1393  0193                     	;# 
  1394  0193                     	;# 
  1395  0193                     	;# 
  1396  0194                     	;# 
  1397  0195                     	;# 
  1398  0196                     	;# 
  1399  0199                     	;# 
  1400  019A                     	;# 
  1401  019B                     	;# 
  1402  019B                     	;# 
  1403  019B                     	;# 
  1404  019B                     	;# 
  1405  019C                     	;# 
  1406  019C                     	;# 
  1407  019D                     	;# 
  1408  019E                     	;# 
  1409  019F                     	;# 
  1410  020C                     	;# 
  1411  020D                     	;# 
  1412  020E                     	;# 
  1413  0211                     	;# 
  1414  0211                     	;# 
  1415  0212                     	;# 
  1416  0212                     	;# 
  1417  0213                     	;# 
  1418  0213                     	;# 
  1419  0214                     	;# 
  1420  0214                     	;# 
  1421  0215                     	;# 
  1422  0215                     	;# 
  1423  0215                     	;# 
  1424  0216                     	;# 
  1425  0216                     	;# 
  1426  0217                     	;# 
  1427  0217                     	;# 
  1428  0219                     	;# 
  1429  021A                     	;# 
  1430  021B                     	;# 
  1431  021C                     	;# 
  1432  021D                     	;# 
  1433  021E                     	;# 
  1434  021F                     	;# 
  1435  0291                     	;# 
  1436  0291                     	;# 
  1437  0292                     	;# 
  1438  0293                     	;# 
  1439  0294                     	;# 
  1440  0295                     	;# 
  1441  0295                     	;# 
  1442  0296                     	;# 
  1443  0298                     	;# 
  1444  0298                     	;# 
  1445  0299                     	;# 
  1446  029A                     	;# 
  1447  029B                     	;# 
  1448  029C                     	;# 
  1449  029D                     	;# 
  1450  029E                     	;# 
  1451  0311                     	;# 
  1452  0311                     	;# 
  1453  0312                     	;# 
  1454  0313                     	;# 
  1455  0318                     	;# 
  1456  0318                     	;# 
  1457  0319                     	;# 
  1458  031A                     	;# 
  1459  038C                     	;# 
  1460  038D                     	;# 
  1461  038E                     	;# 
  1462  0391                     	;# 
  1463  0392                     	;# 
  1464  0393                     	;# 
  1465  0394                     	;# 
  1466  0395                     	;# 
  1467  0396                     	;# 
  1468  039A                     	;# 
  1469  039C                     	;# 
  1470  039D                     	;# 
  1471  039E                     	;# 
  1472  039F                     	;# 
  1473  0415                     	;# 
  1474  0416                     	;# 
  1475  0417                     	;# 
  1476  041C                     	;# 
  1477  041D                     	;# 
  1478  041E                     	;# 
  1479  0FE4                     	;# 
  1480  0FE5                     	;# 
  1481  0FE6                     	;# 
  1482  0FE7                     	;# 
  1483  0FE8                     	;# 
  1484  0FE9                     	;# 
  1485  0FEA                     	;# 
  1486  0FEB                     	;# 
  1487  0FED                     	;# 
  1488  0FEE                     	;# 
  1489  0FEF                     	;# 
  1490  0000                     	;# 
  1491  0001                     	;# 
  1492  0002                     	;# 
  1493  0003                     	;# 
  1494  0004                     	;# 
  1495  0005                     	;# 
  1496  0006                     	;# 
  1497  0007                     	;# 
  1498  0008                     	;# 
  1499  0009                     	;# 
  1500  000A                     	;# 
  1501  000B                     	;# 
  1502  000C                     	;# 
  1503  000D                     	;# 
  1504  000E                     	;# 
  1505  0011                     	;# 
  1506  0012                     	;# 
  1507  0013                     	;# 
  1508  0014                     	;# 
  1509  0015                     	;# 
  1510  0016                     	;# 
  1511  0016                     	;# 
  1512  0017                     	;# 
  1513  0018                     	;# 
  1514  0019                     	;# 
  1515  001A                     	;# 
  1516  001B                     	;# 
  1517  001C                     	;# 
  1518  001E                     	;# 
  1519  001F                     	;# 
  1520  008C                     	;# 
  1521  008D                     	;# 
  1522  008E                     	;# 
  1523  0091                     	;# 
  1524  0092                     	;# 
  1525  0093                     	;# 
  1526  0094                     	;# 
  1527  0095                     	;# 
  1528  0096                     	;# 
  1529  0097                     	;# 
  1530  0098                     	;# 
  1531  0099                     	;# 
  1532  009A                     	;# 
  1533  009B                     	;# 
  1534  009B                     	;# 
  1535  009C                     	;# 
  1536  009D                     	;# 
  1537  009E                     	;# 
  1538  010C                     	;# 
  1539  010D                     	;# 
  1540  010E                     	;# 
  1541  0111                     	;# 
  1542  0112                     	;# 
  1543  0113                     	;# 
  1544  0114                     	;# 
  1545  0115                     	;# 
  1546  0116                     	;# 
  1547  0117                     	;# 
  1548  0118                     	;# 
  1549  0119                     	;# 
  1550  011A                     	;# 
  1551  011B                     	;# 
  1552  011D                     	;# 
  1553  011E                     	;# 
  1554  018C                     	;# 
  1555  018D                     	;# 
  1556  018E                     	;# 
  1557  0191                     	;# 
  1558  0191                     	;# 
  1559  0192                     	;# 
  1560  0193                     	;# 
  1561  0193                     	;# 
  1562  0193                     	;# 
  1563  0194                     	;# 
  1564  0195                     	;# 
  1565  0196                     	;# 
  1566  0199                     	;# 
  1567  019A                     	;# 
  1568  019B                     	;# 
  1569  019B                     	;# 
  1570  019B                     	;# 
  1571  019B                     	;# 
  1572  019C                     	;# 
  1573  019C                     	;# 
  1574  019D                     	;# 
  1575  019E                     	;# 
  1576  019F                     	;# 
  1577  020C                     	;# 
  1578  020D                     	;# 
  1579  020E                     	;# 
  1580  0211                     	;# 
  1581  0211                     	;# 
  1582  0212                     	;# 
  1583  0212                     	;# 
  1584  0213                     	;# 
  1585  0213                     	;# 
  1586  0214                     	;# 
  1587  0214                     	;# 
  1588  0215                     	;# 
  1589  0215                     	;# 
  1590  0215                     	;# 
  1591  0216                     	;# 
  1592  0216                     	;# 
  1593  0217                     	;# 
  1594  0217                     	;# 
  1595  0219                     	;# 
  1596  021A                     	;# 
  1597  021B                     	;# 
  1598  021C                     	;# 
  1599  021D                     	;# 
  1600  021E                     	;# 
  1601  021F                     	;# 
  1602  0291                     	;# 
  1603  0291                     	;# 
  1604  0292                     	;# 
  1605  0293                     	;# 
  1606  0294                     	;# 
  1607  0295                     	;# 
  1608  0295                     	;# 
  1609  0296                     	;# 
  1610  0298                     	;# 
  1611  0298                     	;# 
  1612  0299                     	;# 
  1613  029A                     	;# 
  1614  029B                     	;# 
  1615  029C                     	;# 
  1616  029D                     	;# 
  1617  029E                     	;# 
  1618  0311                     	;# 
  1619  0311                     	;# 
  1620  0312                     	;# 
  1621  0313                     	;# 
  1622  0318                     	;# 
  1623  0318                     	;# 
  1624  0319                     	;# 
  1625  031A                     	;# 
  1626  038C                     	;# 
  1627  038D                     	;# 
  1628  038E                     	;# 
  1629  0391                     	;# 
  1630  0392                     	;# 
  1631  0393                     	;# 
  1632  0394                     	;# 
  1633  0395                     	;# 
  1634  0396                     	;# 
  1635  039A                     	;# 
  1636  039C                     	;# 
  1637  039D                     	;# 
  1638  039E                     	;# 
  1639  039F                     	;# 
  1640  0415                     	;# 
  1641  0416                     	;# 
  1642  0417                     	;# 
  1643  041C                     	;# 
  1644  041D                     	;# 
  1645  041E                     	;# 
  1646  0FE4                     	;# 
  1647  0FE5                     	;# 
  1648  0FE6                     	;# 
  1649  0FE7                     	;# 
  1650  0FE8                     	;# 
  1651  0FE9                     	;# 
  1652  0FEA                     	;# 
  1653  0FEB                     	;# 
  1654  0FED                     	;# 
  1655  0FEE                     	;# 
  1656  0FEF                     	;# 
  1657  0000                     	;# 
  1658  0001                     	;# 
  1659  0002                     	;# 
  1660  0003                     	;# 
  1661  0004                     	;# 
  1662  0005                     	;# 
  1663  0006                     	;# 
  1664  0007                     	;# 
  1665  0008                     	;# 
  1666  0009                     	;# 
  1667  000A                     	;# 
  1668  000B                     	;# 
  1669  000C                     	;# 
  1670  000D                     	;# 
  1671  000E                     	;# 
  1672  0011                     	;# 
  1673  0012                     	;# 
  1674  0013                     	;# 
  1675  0014                     	;# 
  1676  0015                     	;# 
  1677  0016                     	;# 
  1678  0016                     	;# 
  1679  0017                     	;# 
  1680  0018                     	;# 
  1681  0019                     	;# 
  1682  001A                     	;# 
  1683  001B                     	;# 
  1684  001C                     	;# 
  1685  001E                     	;# 
  1686  001F                     	;# 
  1687  008C                     	;# 
  1688  008D                     	;# 
  1689  008E                     	;# 
  1690  0091                     	;# 
  1691  0092                     	;# 
  1692  0093                     	;# 
  1693  0094                     	;# 
  1694  0095                     	;# 
  1695  0096                     	;# 
  1696  0097                     	;# 
  1697  0098                     	;# 
  1698  0099                     	;# 
  1699  009A                     	;# 
  1700  009B                     	;# 
  1701  009B                     	;# 
  1702  009C                     	;# 
  1703  009D                     	;# 
  1704  009E                     	;# 
  1705  010C                     	;# 
  1706  010D                     	;# 
  1707  010E                     	;# 
  1708  0111                     	;# 
  1709  0112                     	;# 
  1710  0113                     	;# 
  1711  0114                     	;# 
  1712  0115                     	;# 
  1713  0116                     	;# 
  1714  0117                     	;# 
  1715  0118                     	;# 
  1716  0119                     	;# 
  1717  011A                     	;# 
  1718  011B                     	;# 
  1719  011D                     	;# 
  1720  011E                     	;# 
  1721  018C                     	;# 
  1722  018D                     	;# 
  1723  018E                     	;# 
  1724  0191                     	;# 
  1725  0191                     	;# 
  1726  0192                     	;# 
  1727  0193                     	;# 
  1728  0193                     	;# 
  1729  0193                     	;# 
  1730  0194                     	;# 
  1731  0195                     	;# 
  1732  0196                     	;# 
  1733  0199                     	;# 
  1734  019A                     	;# 
  1735  019B                     	;# 
  1736  019B                     	;# 
  1737  019B                     	;# 
  1738  019B                     	;# 
  1739  019C                     	;# 
  1740  019C                     	;# 
  1741  019D                     	;# 
  1742  019E                     	;# 
  1743  019F                     	;# 
  1744  020C                     	;# 
  1745  020D                     	;# 
  1746  020E                     	;# 
  1747  0211                     	;# 
  1748  0211                     	;# 
  1749  0212                     	;# 
  1750  0212                     	;# 
  1751  0213                     	;# 
  1752  0213                     	;# 
  1753  0214                     	;# 
  1754  0214                     	;# 
  1755  0215                     	;# 
  1756  0215                     	;# 
  1757  0215                     	;# 
  1758  0216                     	;# 
  1759  0216                     	;# 
  1760  0217                     	;# 
  1761  0217                     	;# 
  1762  0219                     	;# 
  1763  021A                     	;# 
  1764  021B                     	;# 
  1765  021C                     	;# 
  1766  021D                     	;# 
  1767  021E                     	;# 
  1768  021F                     	;# 
  1769  0291                     	;# 
  1770  0291                     	;# 
  1771  0292                     	;# 
  1772  0293                     	;# 
  1773  0294                     	;# 
  1774  0295                     	;# 
  1775  0295                     	;# 
  1776  0296                     	;# 
  1777  0298                     	;# 
  1778  0298                     	;# 
  1779  0299                     	;# 
  1780  029A                     	;# 
  1781  029B                     	;# 
  1782  029C                     	;# 
  1783  029D                     	;# 
  1784  029E                     	;# 
  1785  0311                     	;# 
  1786  0311                     	;# 
  1787  0312                     	;# 
  1788  0313                     	;# 
  1789  0318                     	;# 
  1790  0318                     	;# 
  1791  0319                     	;# 
  1792  031A                     	;# 
  1793  038C                     	;# 
  1794  038D                     	;# 
  1795  038E                     	;# 
  1796  0391                     	;# 
  1797  0392                     	;# 
  1798  0393                     	;# 
  1799  0394                     	;# 
  1800  0395                     	;# 
  1801  0396                     	;# 
  1802  039A                     	;# 
  1803  039C                     	;# 
  1804  039D                     	;# 
  1805  039E                     	;# 
  1806  039F                     	;# 
  1807  0415                     	;# 
  1808  0416                     	;# 
  1809  0417                     	;# 
  1810  041C                     	;# 
  1811  041D                     	;# 
  1812  041E                     	;# 
  1813  0FE4                     	;# 
  1814  0FE5                     	;# 
  1815  0FE6                     	;# 
  1816  0FE7                     	;# 
  1817  0FE8                     	;# 
  1818  0FE9                     	;# 
  1819  0FEA                     	;# 
  1820  0FEB                     	;# 
  1821  0FED                     	;# 
  1822  0FEE                     	;# 
  1823  0FEF                     	;# 
  1824  0000                     	;# 
  1825  0001                     	;# 
  1826  0002                     	;# 
  1827  0003                     	;# 
  1828  0004                     	;# 
  1829  0005                     	;# 
  1830  0006                     	;# 
  1831  0007                     	;# 
  1832  0008                     	;# 
  1833  0009                     	;# 
  1834  000A                     	;# 
  1835  000B                     	;# 
  1836  000C                     	;# 
  1837  000D                     	;# 
  1838  000E                     	;# 
  1839  0011                     	;# 
  1840  0012                     	;# 
  1841  0013                     	;# 
  1842  0014                     	;# 
  1843  0015                     	;# 
  1844  0016                     	;# 
  1845  0016                     	;# 
  1846  0017                     	;# 
  1847  0018                     	;# 
  1848  0019                     	;# 
  1849  001A                     	;# 
  1850  001B                     	;# 
  1851  001C                     	;# 
  1852  001E                     	;# 
  1853  001F                     	;# 
  1854  008C                     	;# 
  1855  008D                     	;# 
  1856  008E                     	;# 
  1857  0091                     	;# 
  1858  0092                     	;# 
  1859  0093                     	;# 
  1860  0094                     	;# 
  1861  0095                     	;# 
  1862  0096                     	;# 
  1863  0097                     	;# 
  1864  0098                     	;# 
  1865  0099                     	;# 
  1866  009A                     	;# 
  1867  009B                     	;# 
  1868  009B                     	;# 
  1869  009C                     	;# 
  1870  009D                     	;# 
  1871  009E                     	;# 
  1872  010C                     	;# 
  1873  010D                     	;# 
  1874  010E                     	;# 
  1875  0111                     	;# 
  1876  0112                     	;# 
  1877  0113                     	;# 
  1878  0114                     	;# 
  1879  0115                     	;# 
  1880  0116                     	;# 
  1881  0117                     	;# 
  1882  0118                     	;# 
  1883  0119                     	;# 
  1884  011A                     	;# 
  1885  011B                     	;# 
  1886  011D                     	;# 
  1887  011E                     	;# 
  1888  018C                     	;# 
  1889  018D                     	;# 
  1890  018E                     	;# 
  1891  0191                     	;# 
  1892  0191                     	;# 
  1893  0192                     	;# 
  1894  0193                     	;# 
  1895  0193                     	;# 
  1896  0193                     	;# 
  1897  0194                     	;# 
  1898  0195                     	;# 
  1899  0196                     	;# 
  1900  0199                     	;# 
  1901  019A                     	;# 
  1902  019B                     	;# 
  1903  019B                     	;# 
  1904  019B                     	;# 
  1905  019B                     	;# 
  1906  019C                     	;# 
  1907  019C                     	;# 
  1908  019D                     	;# 
  1909  019E                     	;# 
  1910  019F                     	;# 
  1911  020C                     	;# 
  1912  020D                     	;# 
  1913  020E                     	;# 
  1914  0211                     	;# 
  1915  0211                     	;# 
  1916  0212                     	;# 
  1917  0212                     	;# 
  1918  0213                     	;# 
  1919  0213                     	;# 
  1920  0214                     	;# 
  1921  0214                     	;# 
  1922  0215                     	;# 
  1923  0215                     	;# 
  1924  0215                     	;# 
  1925  0216                     	;# 
  1926  0216                     	;# 
  1927  0217                     	;# 
  1928  0217                     	;# 
  1929  0219                     	;# 
  1930  021A                     	;# 
  1931  021B                     	;# 
  1932  021C                     	;# 
  1933  021D                     	;# 
  1934  021E                     	;# 
  1935  021F                     	;# 
  1936  0291                     	;# 
  1937  0291                     	;# 
  1938  0292                     	;# 
  1939  0293                     	;# 
  1940  0294                     	;# 
  1941  0295                     	;# 
  1942  0295                     	;# 
  1943  0296                     	;# 
  1944  0298                     	;# 
  1945  0298                     	;# 
  1946  0299                     	;# 
  1947  029A                     	;# 
  1948  029B                     	;# 
  1949  029C                     	;# 
  1950  029D                     	;# 
  1951  029E                     	;# 
  1952  0311                     	;# 
  1953  0311                     	;# 
  1954  0312                     	;# 
  1955  0313                     	;# 
  1956  0318                     	;# 
  1957  0318                     	;# 
  1958  0319                     	;# 
  1959  031A                     	;# 
  1960  038C                     	;# 
  1961  038D                     	;# 
  1962  038E                     	;# 
  1963  0391                     	;# 
  1964  0392                     	;# 
  1965  0393                     	;# 
  1966  0394                     	;# 
  1967  0395                     	;# 
  1968  0396                     	;# 
  1969  039A                     	;# 
  1970  039C                     	;# 
  1971  039D                     	;# 
  1972  039E                     	;# 
  1973  039F                     	;# 
  1974  0415                     	;# 
  1975  0416                     	;# 
  1976  0417                     	;# 
  1977  041C                     	;# 
  1978  041D                     	;# 
  1979  041E                     	;# 
  1980  0FE4                     	;# 
  1981  0FE5                     	;# 
  1982  0FE6                     	;# 
  1983  0FE7                     	;# 
  1984  0FE8                     	;# 
  1985  0FE9                     	;# 
  1986  0FEA                     	;# 
  1987  0FEB                     	;# 
  1988  0FED                     	;# 
  1989  0FEE                     	;# 
  1990  0FEF                     	;# 
  1991  0000                     	;# 
  1992  0001                     	;# 
  1993  0002                     	;# 
  1994  0003                     	;# 
  1995  0004                     	;# 
  1996  0005                     	;# 
  1997  0006                     	;# 
  1998  0007                     	;# 
  1999  0008                     	;# 
  2000  0009                     	;# 
  2001  000A                     	;# 
  2002  000B                     	;# 
  2003  000C                     	;# 
  2004  000D                     	;# 
  2005  000E                     	;# 
  2006  0011                     	;# 
  2007  0012                     	;# 
  2008  0013                     	;# 
  2009  0014                     	;# 
  2010  0015                     	;# 
  2011  0016                     	;# 
  2012  0016                     	;# 
  2013  0017                     	;# 
  2014  0018                     	;# 
  2015  0019                     	;# 
  2016  001A                     	;# 
  2017  001B                     	;# 
  2018  001C                     	;# 
  2019  001E                     	;# 
  2020  001F                     	;# 
  2021  008C                     	;# 
  2022  008D                     	;# 
  2023  008E                     	;# 
  2024  0091                     	;# 
  2025  0092                     	;# 
  2026  0093                     	;# 
  2027  0094                     	;# 
  2028  0095                     	;# 
  2029  0096                     	;# 
  2030  0097                     	;# 
  2031  0098                     	;# 
  2032  0099                     	;# 
  2033  009A                     	;# 
  2034  009B                     	;# 
  2035  009B                     	;# 
  2036  009C                     	;# 
  2037  009D                     	;# 
  2038  009E                     	;# 
  2039  010C                     	;# 
  2040  010D                     	;# 
  2041  010E                     	;# 
  2042  0111                     	;# 
  2043  0112                     	;# 
  2044  0113                     	;# 
  2045  0114                     	;# 
  2046  0115                     	;# 
  2047  0116                     	;# 
  2048  0117                     	;# 
  2049  0118                     	;# 
  2050  0119                     	;# 
  2051  011A                     	;# 
  2052  011B                     	;# 
  2053  011D                     	;# 
  2054  011E                     	;# 
  2055  018C                     	;# 
  2056  018D                     	;# 
  2057  018E                     	;# 
  2058  0191                     	;# 
  2059  0191                     	;# 
  2060  0192                     	;# 
  2061  0193                     	;# 
  2062  0193                     	;# 
  2063  0193                     	;# 
  2064  0194                     	;# 
  2065  0195                     	;# 
  2066  0196                     	;# 
  2067  0199                     	;# 
  2068  019A                     	;# 
  2069  019B                     	;# 
  2070  019B                     	;# 
  2071  019B                     	;# 
  2072  019B                     	;# 
  2073  019C                     	;# 
  2074  019C                     	;# 
  2075  019D                     	;# 
  2076  019E                     	;# 
  2077  019F                     	;# 
  2078  020C                     	;# 
  2079  020D                     	;# 
  2080  020E                     	;# 
  2081  0211                     	;# 
  2082  0211                     	;# 
  2083  0212                     	;# 
  2084  0212                     	;# 
  2085  0213                     	;# 
  2086  0213                     	;# 
  2087  0214                     	;# 
  2088  0214                     	;# 
  2089  0215                     	;# 
  2090  0215                     	;# 
  2091  0215                     	;# 
  2092  0216                     	;# 
  2093  0216                     	;# 
  2094  0217                     	;# 
  2095  0217                     	;# 
  2096  0219                     	;# 
  2097  021A                     	;# 
  2098  021B                     	;# 
  2099  021C                     	;# 
  2100  021D                     	;# 
  2101  021E                     	;# 
  2102  021F                     	;# 
  2103  0291                     	;# 
  2104  0291                     	;# 
  2105  0292                     	;# 
  2106  0293                     	;# 
  2107  0294                     	;# 
  2108  0295                     	;# 
  2109  0295                     	;# 
  2110  0296                     	;# 
  2111  0298                     	;# 
  2112  0298                     	;# 
  2113  0299                     	;# 
  2114  029A                     	;# 
  2115  029B                     	;# 
  2116  029C                     	;# 
  2117  029D                     	;# 
  2118  029E                     	;# 
  2119  0311                     	;# 
  2120  0311                     	;# 
  2121  0312                     	;# 
  2122  0313                     	;# 
  2123  0318                     	;# 
  2124  0318                     	;# 
  2125  0319                     	;# 
  2126  031A                     	;# 
  2127  038C                     	;# 
  2128  038D                     	;# 
  2129  038E                     	;# 
  2130  0391                     	;# 
  2131  0392                     	;# 
  2132  0393                     	;# 
  2133  0394                     	;# 
  2134  0395                     	;# 
  2135  0396                     	;# 
  2136  039A                     	;# 
  2137  039C                     	;# 
  2138  039D                     	;# 
  2139  039E                     	;# 
  2140  039F                     	;# 
  2141  0415                     	;# 
  2142  0416                     	;# 
  2143  0417                     	;# 
  2144  041C                     	;# 
  2145  041D                     	;# 
  2146  041E                     	;# 
  2147  0FE4                     	;# 
  2148  0FE5                     	;# 
  2149  0FE6                     	;# 
  2150  0FE7                     	;# 
  2151  0FE8                     	;# 
  2152  0FE9                     	;# 
  2153  0FEA                     	;# 
  2154  0FEB                     	;# 
  2155  0FED                     	;# 
  2156  0FEE                     	;# 
  2157  0FEF                     	;# 
  2158  0000                     	;# 
  2159  0001                     	;# 
  2160  0002                     	;# 
  2161  0003                     	;# 
  2162  0004                     	;# 
  2163  0005                     	;# 
  2164  0006                     	;# 
  2165  0007                     	;# 
  2166  0008                     	;# 
  2167  0009                     	;# 
  2168  000A                     	;# 
  2169  000B                     	;# 
  2170  000C                     	;# 
  2171  000D                     	;# 
  2172  000E                     	;# 
  2173  0011                     	;# 
  2174  0012                     	;# 
  2175  0013                     	;# 
  2176  0014                     	;# 
  2177  0015                     	;# 
  2178  0016                     	;# 
  2179  0016                     	;# 
  2180  0017                     	;# 
  2181  0018                     	;# 
  2182  0019                     	;# 
  2183  001A                     	;# 
  2184  001B                     	;# 
  2185  001C                     	;# 
  2186  001E                     	;# 
  2187  001F                     	;# 
  2188  008C                     	;# 
  2189  008D                     	;# 
  2190  008E                     	;# 
  2191  0091                     	;# 
  2192  0092                     	;# 
  2193  0093                     	;# 
  2194  0094                     	;# 
  2195  0095                     	;# 
  2196  0096                     	;# 
  2197  0097                     	;# 
  2198  0098                     	;# 
  2199  0099                     	;# 
  2200  009A                     	;# 
  2201  009B                     	;# 
  2202  009B                     	;# 
  2203  009C                     	;# 
  2204  009D                     	;# 
  2205  009E                     	;# 
  2206  010C                     	;# 
  2207  010D                     	;# 
  2208  010E                     	;# 
  2209  0111                     	;# 
  2210  0112                     	;# 
  2211  0113                     	;# 
  2212  0114                     	;# 
  2213  0115                     	;# 
  2214  0116                     	;# 
  2215  0117                     	;# 
  2216  0118                     	;# 
  2217  0119                     	;# 
  2218  011A                     	;# 
  2219  011B                     	;# 
  2220  011D                     	;# 
  2221  011E                     	;# 
  2222  018C                     	;# 
  2223  018D                     	;# 
  2224  018E                     	;# 
  2225  0191                     	;# 
  2226  0191                     	;# 
  2227  0192                     	;# 
  2228  0193                     	;# 
  2229  0193                     	;# 
  2230  0193                     	;# 
  2231  0194                     	;# 
  2232  0195                     	;# 
  2233  0196                     	;# 
  2234  0199                     	;# 
  2235  019A                     	;# 
  2236  019B                     	;# 
  2237  019B                     	;# 
  2238  019B                     	;# 
  2239  019B                     	;# 
  2240  019C                     	;# 
  2241  019C                     	;# 
  2242  019D                     	;# 
  2243  019E                     	;# 
  2244  019F                     	;# 
  2245  020C                     	;# 
  2246  020D                     	;# 
  2247  020E                     	;# 
  2248  0211                     	;# 
  2249  0211                     	;# 
  2250  0212                     	;# 
  2251  0212                     	;# 
  2252  0213                     	;# 
  2253  0213                     	;# 
  2254  0214                     	;# 
  2255  0214                     	;# 
  2256  0215                     	;# 
  2257  0215                     	;# 
  2258  0215                     	;# 
  2259  0216                     	;# 
  2260  0216                     	;# 
  2261  0217                     	;# 
  2262  0217                     	;# 
  2263  0219                     	;# 
  2264  021A                     	;# 
  2265  021B                     	;# 
  2266  021C                     	;# 
  2267  021D                     	;# 
  2268  021E                     	;# 
  2269  021F                     	;# 
  2270  0291                     	;# 
  2271  0291                     	;# 
  2272  0292                     	;# 
  2273  0293                     	;# 
  2274  0294                     	;# 
  2275  0295                     	;# 
  2276  0295                     	;# 
  2277  0296                     	;# 
  2278  0298                     	;# 
  2279  0298                     	;# 
  2280  0299                     	;# 
  2281  029A                     	;# 
  2282  029B                     	;# 
  2283  029C                     	;# 
  2284  029D                     	;# 
  2285  029E                     	;# 
  2286  0311                     	;# 
  2287  0311                     	;# 
  2288  0312                     	;# 
  2289  0313                     	;# 
  2290  0318                     	;# 
  2291  0318                     	;# 
  2292  0319                     	;# 
  2293  031A                     	;# 
  2294  038C                     	;# 
  2295  038D                     	;# 
  2296  038E                     	;# 
  2297  0391                     	;# 
  2298  0392                     	;# 
  2299  0393                     	;# 
  2300  0394                     	;# 
  2301  0395                     	;# 
  2302  0396                     	;# 
  2303  039A                     	;# 
  2304  039C                     	;# 
  2305  039D                     	;# 
  2306  039E                     	;# 
  2307  039F                     	;# 
  2308  0415                     	;# 
  2309  0416                     	;# 
  2310  0417                     	;# 
  2311  041C                     	;# 
  2312  041D                     	;# 
  2313  041E                     	;# 
  2314  0FE4                     	;# 
  2315  0FE5                     	;# 
  2316  0FE6                     	;# 
  2317  0FE7                     	;# 
  2318  0FE8                     	;# 
  2319  0FE9                     	;# 
  2320  0FEA                     	;# 
  2321  0FEB                     	;# 
  2322  0FED                     	;# 
  2323  0FEE                     	;# 
  2324  0FEF                     	;# 
  2325  0000                     	;# 
  2326  0001                     	;# 
  2327  0002                     	;# 
  2328  0003                     	;# 
  2329  0004                     	;# 
  2330  0005                     	;# 
  2331  0006                     	;# 
  2332  0007                     	;# 
  2333  0008                     	;# 
  2334  0009                     	;# 
  2335  000A                     	;# 
  2336  000B                     	;# 
  2337  000C                     	;# 
  2338  000D                     	;# 
  2339  000E                     	;# 
  2340  0011                     	;# 
  2341  0012                     	;# 
  2342  0013                     	;# 
  2343  0014                     	;# 
  2344  0015                     	;# 
  2345  0016                     	;# 
  2346  0016                     	;# 
  2347  0017                     	;# 
  2348  0018                     	;# 
  2349  0019                     	;# 
  2350  001A                     	;# 
  2351  001B                     	;# 
  2352  001C                     	;# 
  2353  001E                     	;# 
  2354  001F                     	;# 
  2355  008C                     	;# 
  2356  008D                     	;# 
  2357  008E                     	;# 
  2358  0091                     	;# 
  2359  0092                     	;# 
  2360  0093                     	;# 
  2361  0094                     	;# 
  2362  0095                     	;# 
  2363  0096                     	;# 
  2364  0097                     	;# 
  2365  0098                     	;# 
  2366  0099                     	;# 
  2367  009A                     	;# 
  2368  009B                     	;# 
  2369  009B                     	;# 
  2370  009C                     	;# 
  2371  009D                     	;# 
  2372  009E                     	;# 
  2373  010C                     	;# 
  2374  010D                     	;# 
  2375  010E                     	;# 
  2376  0111                     	;# 
  2377  0112                     	;# 
  2378  0113                     	;# 
  2379  0114                     	;# 
  2380  0115                     	;# 
  2381  0116                     	;# 
  2382  0117                     	;# 
  2383  0118                     	;# 
  2384  0119                     	;# 
  2385  011A                     	;# 
  2386  011B                     	;# 
  2387  011D                     	;# 
  2388  011E                     	;# 
  2389  018C                     	;# 
  2390  018D                     	;# 
  2391  018E                     	;# 
  2392  0191                     	;# 
  2393  0191                     	;# 
  2394  0192                     	;# 
  2395  0193                     	;# 
  2396  0193                     	;# 
  2397  0193                     	;# 
  2398  0194                     	;# 
  2399  0195                     	;# 
  2400  0196                     	;# 
  2401  0199                     	;# 
  2402  019A                     	;# 
  2403  019B                     	;# 
  2404  019B                     	;# 
  2405  019B                     	;# 
  2406  019B                     	;# 
  2407  019C                     	;# 
  2408  019C                     	;# 
  2409  019D                     	;# 
  2410  019E                     	;# 
  2411  019F                     	;# 
  2412  020C                     	;# 
  2413  020D                     	;# 
  2414  020E                     	;# 
  2415  0211                     	;# 
  2416  0211                     	;# 
  2417  0212                     	;# 
  2418  0212                     	;# 
  2419  0213                     	;# 
  2420  0213                     	;# 
  2421  0214                     	;# 
  2422  0214                     	;# 
  2423  0215                     	;# 
  2424  0215                     	;# 
  2425  0215                     	;# 
  2426  0216                     	;# 
  2427  0216                     	;# 
  2428  0217                     	;# 
  2429  0217                     	;# 
  2430  0219                     	;# 
  2431  021A                     	;# 
  2432  021B                     	;# 
  2433  021C                     	;# 
  2434  021D                     	;# 
  2435  021E                     	;# 
  2436  021F                     	;# 
  2437  0291                     	;# 
  2438  0291                     	;# 
  2439  0292                     	;# 
  2440  0293                     	;# 
  2441  0294                     	;# 
  2442  0295                     	;# 
  2443  0295                     	;# 
  2444  0296                     	;# 
  2445  0298                     	;# 
  2446  0298                     	;# 
  2447  0299                     	;# 
  2448  029A                     	;# 
  2449  029B                     	;# 
  2450  029C                     	;# 
  2451  029D                     	;# 
  2452  029E                     	;# 
  2453  0311                     	;# 
  2454  0311                     	;# 
  2455  0312                     	;# 
  2456  0313                     	;# 
  2457  0318                     	;# 
  2458  0318                     	;# 
  2459  0319                     	;# 
  2460  031A                     	;# 
  2461  038C                     	;# 
  2462  038D                     	;# 
  2463  038E                     	;# 
  2464  0391                     	;# 
  2465  0392                     	;# 
  2466  0393                     	;# 
  2467  0394                     	;# 
  2468  0395                     	;# 
  2469  0396                     	;# 
  2470  039A                     	;# 
  2471  039C                     	;# 
  2472  039D                     	;# 
  2473  039E                     	;# 
  2474  039F                     	;# 
  2475  0415                     	;# 
  2476  0416                     	;# 
  2477  0417                     	;# 
  2478  041C                     	;# 
  2479  041D                     	;# 
  2480  041E                     	;# 
  2481  0FE4                     	;# 
  2482  0FE5                     	;# 
  2483  0FE6                     	;# 
  2484  0FE7                     	;# 
  2485  0FE8                     	;# 
  2486  0FE9                     	;# 
  2487  0FEA                     	;# 
  2488  0FEB                     	;# 
  2489  0FED                     	;# 
  2490  0FEE                     	;# 
  2491  0FEF                     	;# 
  2492  0000                     	;# 
  2493  0001                     	;# 
  2494  0002                     	;# 
  2495  0003                     	;# 
  2496  0004                     	;# 
  2497  0005                     	;# 
  2498  0006                     	;# 
  2499  0007                     	;# 
  2500  0008                     	;# 
  2501  0009                     	;# 
  2502  000A                     	;# 
  2503  000B                     	;# 
  2504  000C                     	;# 
  2505  000D                     	;# 
  2506  000E                     	;# 
  2507  0011                     	;# 
  2508  0012                     	;# 
  2509  0013                     	;# 
  2510  0014                     	;# 
  2511  0015                     	;# 
  2512  0016                     	;# 
  2513  0016                     	;# 
  2514  0017                     	;# 
  2515  0018                     	;# 
  2516  0019                     	;# 
  2517  001A                     	;# 
  2518  001B                     	;# 
  2519  001C                     	;# 
  2520  001E                     	;# 
  2521  001F                     	;# 
  2522  008C                     	;# 
  2523  008D                     	;# 
  2524  008E                     	;# 
  2525  0091                     	;# 
  2526  0092                     	;# 
  2527  0093                     	;# 
  2528  0094                     	;# 
  2529  0095                     	;# 
  2530  0096                     	;# 
  2531  0097                     	;# 
  2532  0098                     	;# 
  2533  0099                     	;# 
  2534  009A                     	;# 
  2535  009B                     	;# 
  2536  009B                     	;# 
  2537  009C                     	;# 
  2538  009D                     	;# 
  2539  009E                     	;# 
  2540  010C                     	;# 
  2541  010D                     	;# 
  2542  010E                     	;# 
  2543  0111                     	;# 
  2544  0112                     	;# 
  2545  0113                     	;# 
  2546  0114                     	;# 
  2547  0115                     	;# 
  2548  0116                     	;# 
  2549  0117                     	;# 
  2550  0118                     	;# 
  2551  0119                     	;# 
  2552  011A                     	;# 
  2553  011B                     	;# 
  2554  011D                     	;# 
  2555  011E                     	;# 
  2556  018C                     	;# 
  2557  018D                     	;# 
  2558  018E                     	;# 
  2559  0191                     	;# 
  2560  0191                     	;# 
  2561  0192                     	;# 
  2562  0193                     	;# 
  2563  0193                     	;# 
  2564  0193                     	;# 
  2565  0194                     	;# 
  2566  0195                     	;# 
  2567  0196                     	;# 
  2568  0199                     	;# 
  2569  019A                     	;# 
  2570  019B                     	;# 
  2571  019B                     	;# 
  2572  019B                     	;# 
  2573  019B                     	;# 
  2574  019C                     	;# 
  2575  019C                     	;# 
  2576  019D                     	;# 
  2577  019E                     	;# 
  2578  019F                     	;# 
  2579  020C                     	;# 
  2580  020D                     	;# 
  2581  020E                     	;# 
  2582  0211                     	;# 
  2583  0211                     	;# 
  2584  0212                     	;# 
  2585  0212                     	;# 
  2586  0213                     	;# 
  2587  0213                     	;# 
  2588  0214                     	;# 
  2589  0214                     	;# 
  2590  0215                     	;# 
  2591  0215                     	;# 
  2592  0215                     	;# 
  2593  0216                     	;# 
  2594  0216                     	;# 
  2595  0217                     	;# 
  2596  0217                     	;# 
  2597  0219                     	;# 
  2598  021A                     	;# 
  2599  021B                     	;# 
  2600  021C                     	;# 
  2601  021D                     	;# 
  2602  021E                     	;# 
  2603  021F                     	;# 
  2604  0291                     	;# 
  2605  0291                     	;# 
  2606  0292                     	;# 
  2607  0293                     	;# 
  2608  0294                     	;# 
  2609  0295                     	;# 
  2610  0295                     	;# 
  2611  0296                     	;# 
  2612  0298                     	;# 
  2613  0298                     	;# 
  2614  0299                     	;# 
  2615  029A                     	;# 
  2616  029B                     	;# 
  2617  029C                     	;# 
  2618  029D                     	;# 
  2619  029E                     	;# 
  2620  0311                     	;# 
  2621  0311                     	;# 
  2622  0312                     	;# 
  2623  0313                     	;# 
  2624  0318                     	;# 
  2625  0318                     	;# 
  2626  0319                     	;# 
  2627  031A                     	;# 
  2628  038C                     	;# 
  2629  038D                     	;# 
  2630  038E                     	;# 
  2631  0391                     	;# 
  2632  0392                     	;# 
  2633  0393                     	;# 
  2634  0394                     	;# 
  2635  0395                     	;# 
  2636  0396                     	;# 
  2637  039A                     	;# 
  2638  039C                     	;# 
  2639  039D                     	;# 
  2640  039E                     	;# 
  2641  039F                     	;# 
  2642  0415                     	;# 
  2643  0416                     	;# 
  2644  0417                     	;# 
  2645  041C                     	;# 
  2646  041D                     	;# 
  2647  041E                     	;# 
  2648  0FE4                     	;# 
  2649  0FE5                     	;# 
  2650  0FE6                     	;# 
  2651  0FE7                     	;# 
  2652  0FE8                     	;# 
  2653  0FE9                     	;# 
  2654  0FEA                     	;# 
  2655  0FEB                     	;# 
  2656  0FED                     	;# 
  2657  0FEE                     	;# 
  2658  0FEF                     	;# 
  2659  0000                     	;# 
  2660  0001                     	;# 
  2661  0002                     	;# 
  2662  0003                     	;# 
  2663  0004                     	;# 
  2664  0005                     	;# 
  2665  0006                     	;# 
  2666  0007                     	;# 
  2667  0008                     	;# 
  2668  0009                     	;# 
  2669  000A                     	;# 
  2670  000B                     	;# 
  2671  000C                     	;# 
  2672  000D                     	;# 
  2673  000E                     	;# 
  2674  0011                     	;# 
  2675  0012                     	;# 
  2676  0013                     	;# 
  2677  0014                     	;# 
  2678  0015                     	;# 
  2679  0016                     	;# 
  2680  0016                     	;# 
  2681  0017                     	;# 
  2682  0018                     	;# 
  2683  0019                     	;# 
  2684  001A                     	;# 
  2685  001B                     	;# 
  2686  001C                     	;# 
  2687  001E                     	;# 
  2688  001F                     	;# 
  2689  008C                     	;# 
  2690  008D                     	;# 
  2691  008E                     	;# 
  2692  0091                     	;# 
  2693  0092                     	;# 
  2694  0093                     	;# 
  2695  0094                     	;# 
  2696  0095                     	;# 
  2697  0096                     	;# 
  2698  0097                     	;# 
  2699  0098                     	;# 
  2700  0099                     	;# 
  2701  009A                     	;# 
  2702  009B                     	;# 
  2703  009B                     	;# 
  2704  009C                     	;# 
  2705  009D                     	;# 
  2706  009E                     	;# 
  2707  010C                     	;# 
  2708  010D                     	;# 
  2709  010E                     	;# 
  2710  0111                     	;# 
  2711  0112                     	;# 
  2712  0113                     	;# 
  2713  0114                     	;# 
  2714  0115                     	;# 
  2715  0116                     	;# 
  2716  0117                     	;# 
  2717  0118                     	;# 
  2718  0119                     	;# 
  2719  011A                     	;# 
  2720  011B                     	;# 
  2721  011D                     	;# 
  2722  011E                     	;# 
  2723  018C                     	;# 
  2724  018D                     	;# 
  2725  018E                     	;# 
  2726  0191                     	;# 
  2727  0191                     	;# 
  2728  0192                     	;# 
  2729  0193                     	;# 
  2730  0193                     	;# 
  2731  0193                     	;# 
  2732  0194                     	;# 
  2733  0195                     	;# 
  2734  0196                     	;# 
  2735  0199                     	;# 
  2736  019A                     	;# 
  2737  019B                     	;# 
  2738  019B                     	;# 
  2739  019B                     	;# 
  2740  019B                     	;# 
  2741  019C                     	;# 
  2742  019C                     	;# 
  2743  019D                     	;# 
  2744  019E                     	;# 
  2745  019F                     	;# 
  2746  020C                     	;# 
  2747  020D                     	;# 
  2748  020E                     	;# 
  2749  0211                     	;# 
  2750  0211                     	;# 
  2751  0212                     	;# 
  2752  0212                     	;# 
  2753  0213                     	;# 
  2754  0213                     	;# 
  2755  0214                     	;# 
  2756  0214                     	;# 
  2757  0215                     	;# 
  2758  0215                     	;# 
  2759  0215                     	;# 
  2760  0216                     	;# 
  2761  0216                     	;# 
  2762  0217                     	;# 
  2763  0217                     	;# 
  2764  0219                     	;# 
  2765  021A                     	;# 
  2766  021B                     	;# 
  2767  021C                     	;# 
  2768  021D                     	;# 
  2769  021E                     	;# 
  2770  021F                     	;# 
  2771  0291                     	;# 
  2772  0291                     	;# 
  2773  0292                     	;# 
  2774  0293                     	;# 
  2775  0294                     	;# 
  2776  0295                     	;# 
  2777  0295                     	;# 
  2778  0296                     	;# 
  2779  0298                     	;# 
  2780  0298                     	;# 
  2781  0299                     	;# 
  2782  029A                     	;# 
  2783  029B                     	;# 
  2784  029C                     	;# 
  2785  029D                     	;# 
  2786  029E                     	;# 
  2787  0311                     	;# 
  2788  0311                     	;# 
  2789  0312                     	;# 
  2790  0313                     	;# 
  2791  0318                     	;# 
  2792  0318                     	;# 
  2793  0319                     	;# 
  2794  031A                     	;# 
  2795  038C                     	;# 
  2796  038D                     	;# 
  2797  038E                     	;# 
  2798  0391                     	;# 
  2799  0392                     	;# 
  2800  0393                     	;# 
  2801  0394                     	;# 
  2802  0395                     	;# 
  2803  0396                     	;# 
  2804  039A                     	;# 
  2805  039C                     	;# 
  2806  039D                     	;# 
  2807  039E                     	;# 
  2808  039F                     	;# 
  2809  0415                     	;# 
  2810  0416                     	;# 
  2811  0417                     	;# 
  2812  041C                     	;# 
  2813  041D                     	;# 
  2814  041E                     	;# 
  2815  0FE4                     	;# 
  2816  0FE5                     	;# 
  2817  0FE6                     	;# 
  2818  0FE7                     	;# 
  2819  0FE8                     	;# 
  2820  0FE9                     	;# 
  2821  0FEA                     	;# 
  2822  0FEB                     	;# 
  2823  0FED                     	;# 
  2824  0FEE                     	;# 
  2825  0FEF                     	;# 
  2826  0000                     	;# 
  2827  0001                     	;# 
  2828  0002                     	;# 
  2829  0003                     	;# 
  2830  0004                     	;# 
  2831  0005                     	;# 
  2832  0006                     	;# 
  2833  0007                     	;# 
  2834  0008                     	;# 
  2835  0009                     	;# 
  2836  000A                     	;# 
  2837  000B                     	;# 
  2838  000C                     	;# 
  2839  000D                     	;# 
  2840  000E                     	;# 
  2841  0011                     	;# 
  2842  0012                     	;# 
  2843  0013                     	;# 
  2844  0014                     	;# 
  2845  0015                     	;# 
  2846  0016                     	;# 
  2847  0016                     	;# 
  2848  0017                     	;# 
  2849  0018                     	;# 
  2850  0019                     	;# 
  2851  001A                     	;# 
  2852  001B                     	;# 
  2853  001C                     	;# 
  2854  001E                     	;# 
  2855  001F                     	;# 
  2856  008C                     	;# 
  2857  008D                     	;# 
  2858  008E                     	;# 
  2859  0091                     	;# 
  2860  0092                     	;# 
  2861  0093                     	;# 
  2862  0094                     	;# 
  2863  0095                     	;# 
  2864  0096                     	;# 
  2865  0097                     	;# 
  2866  0098                     	;# 
  2867  0099                     	;# 
  2868  009A                     	;# 
  2869  009B                     	;# 
  2870  009B                     	;# 
  2871  009C                     	;# 
  2872  009D                     	;# 
  2873  009E                     	;# 
  2874  010C                     	;# 
  2875  010D                     	;# 
  2876  010E                     	;# 
  2877  0111                     	;# 
  2878  0112                     	;# 
  2879  0113                     	;# 
  2880  0114                     	;# 
  2881  0115                     	;# 
  2882  0116                     	;# 
  2883  0117                     	;# 
  2884  0118                     	;# 
  2885  0119                     	;# 
  2886  011A                     	;# 
  2887  011B                     	;# 
  2888  011D                     	;# 
  2889  011E                     	;# 
  2890  018C                     	;# 
  2891  018D                     	;# 
  2892  018E                     	;# 
  2893  0191                     	;# 
  2894  0191                     	;# 
  2895  0192                     	;# 
  2896  0193                     	;# 
  2897  0193                     	;# 
  2898  0193                     	;# 
  2899  0194                     	;# 
  2900  0195                     	;# 
  2901  0196                     	;# 
  2902  0199                     	;# 
  2903  019A                     	;# 
  2904  019B                     	;# 
  2905  019B                     	;# 
  2906  019B                     	;# 
  2907  019B                     	;# 
  2908  019C                     	;# 
  2909  019C                     	;# 
  2910  019D                     	;# 
  2911  019E                     	;# 
  2912  019F                     	;# 
  2913  020C                     	;# 
  2914  020D                     	;# 
  2915  020E                     	;# 
  2916  0211                     	;# 
  2917  0211                     	;# 
  2918  0212                     	;# 
  2919  0212                     	;# 
  2920  0213                     	;# 
  2921  0213                     	;# 
  2922  0214                     	;# 
  2923  0214                     	;# 
  2924  0215                     	;# 
  2925  0215                     	;# 
  2926  0215                     	;# 
  2927  0216                     	;# 
  2928  0216                     	;# 
  2929  0217                     	;# 
  2930  0217                     	;# 
  2931  0219                     	;# 
  2932  021A                     	;# 
  2933  021B                     	;# 
  2934  021C                     	;# 
  2935  021D                     	;# 
  2936  021E                     	;# 
  2937  021F                     	;# 
  2938  0291                     	;# 
  2939  0291                     	;# 
  2940  0292                     	;# 
  2941  0293                     	;# 
  2942  0294                     	;# 
  2943  0295                     	;# 
  2944  0295                     	;# 
  2945  0296                     	;# 
  2946  0298                     	;# 
  2947  0298                     	;# 
  2948  0299                     	;# 
  2949  029A                     	;# 
  2950  029B                     	;# 
  2951  029C                     	;# 
  2952  029D                     	;# 
  2953  029E                     	;# 
  2954  0311                     	;# 
  2955  0311                     	;# 
  2956  0312                     	;# 
  2957  0313                     	;# 
  2958  0318                     	;# 
  2959  0318                     	;# 
  2960  0319                     	;# 
  2961  031A                     	;# 
  2962  038C                     	;# 
  2963  038D                     	;# 
  2964  038E                     	;# 
  2965  0391                     	;# 
  2966  0392                     	;# 
  2967  0393                     	;# 
  2968  0394                     	;# 
  2969  0395                     	;# 
  2970  0396                     	;# 
  2971  039A                     	;# 
  2972  039C                     	;# 
  2973  039D                     	;# 
  2974  039E                     	;# 
  2975  039F                     	;# 
  2976  0415                     	;# 
  2977  0416                     	;# 
  2978  0417                     	;# 
  2979  041C                     	;# 
  2980  041D                     	;# 
  2981  041E                     	;# 
  2982  0FE4                     	;# 
  2983  0FE5                     	;# 
  2984  0FE6                     	;# 
  2985  0FE7                     	;# 
  2986  0FE8                     	;# 
  2987  0FE9                     	;# 
  2988  0FEA                     	;# 
  2989  0FEB                     	;# 
  2990  0FED                     	;# 
  2991  0FEE                     	;# 
  2992  0FEF                     	;# 
  2993  0000                     	;# 
  2994  0001                     	;# 
  2995  0002                     	;# 
  2996  0003                     	;# 
  2997  0004                     	;# 
  2998  0005                     	;# 
  2999  0006                     	;# 
  3000  0007                     	;# 
  3001  0008                     	;# 
  3002  0009                     	;# 
  3003  000A                     	;# 
  3004  000B                     	;# 
  3005  000C                     	;# 
  3006  000D                     	;# 
  3007  000E                     	;# 
  3008  0011                     	;# 
  3009  0012                     	;# 
  3010  0013                     	;# 
  3011  0014                     	;# 
  3012  0015                     	;# 
  3013  0016                     	;# 
  3014  0016                     	;# 
  3015  0017                     	;# 
  3016  0018                     	;# 
  3017  0019                     	;# 
  3018  001A                     	;# 
  3019  001B                     	;# 
  3020  001C                     	;# 
  3021  001E                     	;# 
  3022  001F                     	;# 
  3023  008C                     	;# 
  3024  008D                     	;# 
  3025  008E                     	;# 
  3026  0091                     	;# 
  3027  0092                     	;# 
  3028  0093                     	;# 
  3029  0094                     	;# 
  3030  0095                     	;# 
  3031  0096                     	;# 
  3032  0097                     	;# 
  3033  0098                     	;# 
  3034  0099                     	;# 
  3035  009A                     	;# 
  3036  009B                     	;# 
  3037  009B                     	;# 
  3038  009C                     	;# 
  3039  009D                     	;# 
  3040  009E                     	;# 
  3041  010C                     	;# 
  3042  010D                     	;# 
  3043  010E                     	;# 
  3044  0111                     	;# 
  3045  0112                     	;# 
  3046  0113                     	;# 
  3047  0114                     	;# 
  3048  0115                     	;# 
  3049  0116                     	;# 
  3050  0117                     	;# 
  3051  0118                     	;# 
  3052  0119                     	;# 
  3053  011A                     	;# 
  3054  011B                     	;# 
  3055  011D                     	;# 
  3056  011E                     	;# 
  3057  018C                     	;# 
  3058  018D                     	;# 
  3059  018E                     	;# 
  3060  0191                     	;# 
  3061  0191                     	;# 
  3062  0192                     	;# 
  3063  0193                     	;# 
  3064  0193                     	;# 
  3065  0193                     	;# 
  3066  0194                     	;# 
  3067  0195                     	;# 
  3068  0196                     	;# 
  3069  0199                     	;# 
  3070  019A                     	;# 
  3071  019B                     	;# 
  3072  019B                     	;# 
  3073  019B                     	;# 
  3074  019B                     	;# 
  3075  019C                     	;# 
  3076  019C                     	;# 
  3077  019D                     	;# 
  3078  019E                     	;# 
  3079  019F                     	;# 
  3080  020C                     	;# 
  3081  020D                     	;# 
  3082  020E                     	;# 
  3083  0211                     	;# 
  3084  0211                     	;# 
  3085  0212                     	;# 
  3086  0212                     	;# 
  3087  0213                     	;# 
  3088  0213                     	;# 
  3089  0214                     	;# 
  3090  0214                     	;# 
  3091  0215                     	;# 
  3092  0215                     	;# 
  3093  0215                     	;# 
  3094  0216                     	;# 
  3095  0216                     	;# 
  3096  0217                     	;# 
  3097  0217                     	;# 
  3098  0219                     	;# 
  3099  021A                     	;# 
  3100  021B                     	;# 
  3101  021C                     	;# 
  3102  021D                     	;# 
  3103  021E                     	;# 
  3104  021F                     	;# 
  3105  0291                     	;# 
  3106  0291                     	;# 
  3107  0292                     	;# 
  3108  0293                     	;# 
  3109  0294                     	;# 
  3110  0295                     	;# 
  3111  0295                     	;# 
  3112  0296                     	;# 
  3113  0298                     	;# 
  3114  0298                     	;# 
  3115  0299                     	;# 
  3116  029A                     	;# 
  3117  029B                     	;# 
  3118  029C                     	;# 
  3119  029D                     	;# 
  3120  029E                     	;# 
  3121  0311                     	;# 
  3122  0311                     	;# 
  3123  0312                     	;# 
  3124  0313                     	;# 
  3125  0318                     	;# 
  3126  0318                     	;# 
  3127  0319                     	;# 
  3128  031A                     	;# 
  3129  038C                     	;# 
  3130  038D                     	;# 
  3131  038E                     	;# 
  3132  0391                     	;# 
  3133  0392                     	;# 
  3134  0393                     	;# 
  3135  0394                     	;# 
  3136  0395                     	;# 
  3137  0396                     	;# 
  3138  039A                     	;# 
  3139  039C                     	;# 
  3140  039D                     	;# 
  3141  039E                     	;# 
  3142  039F                     	;# 
  3143  0415                     	;# 
  3144  0416                     	;# 
  3145  0417                     	;# 
  3146  041C                     	;# 
  3147  041D                     	;# 
  3148  041E                     	;# 
  3149  0FE4                     	;# 
  3150  0FE5                     	;# 
  3151  0FE6                     	;# 
  3152  0FE7                     	;# 
  3153  0FE8                     	;# 
  3154  0FE9                     	;# 
  3155  0FEA                     	;# 
  3156  0FEB                     	;# 
  3157  0FED                     	;# 
  3158  0FEE                     	;# 
  3159  0FEF                     	;# 
  3160  0000                     	;# 
  3161  0001                     	;# 
  3162  0002                     	;# 
  3163  0003                     	;# 
  3164  0004                     	;# 
  3165  0005                     	;# 
  3166  0006                     	;# 
  3167  0007                     	;# 
  3168  0008                     	;# 
  3169  0009                     	;# 
  3170  000A                     	;# 
  3171  000B                     	;# 
  3172  000C                     	;# 
  3173  000D                     	;# 
  3174  000E                     	;# 
  3175  0011                     	;# 
  3176  0012                     	;# 
  3177  0013                     	;# 
  3178  0014                     	;# 
  3179  0015                     	;# 
  3180  0016                     	;# 
  3181  0016                     	;# 
  3182  0017                     	;# 
  3183  0018                     	;# 
  3184  0019                     	;# 
  3185  001A                     	;# 
  3186  001B                     	;# 
  3187  001C                     	;# 
  3188  001E                     	;# 
  3189  001F                     	;# 
  3190  008C                     	;# 
  3191  008D                     	;# 
  3192  008E                     	;# 
  3193  0091                     	;# 
  3194  0092                     	;# 
  3195  0093                     	;# 
  3196  0094                     	;# 
  3197  0095                     	;# 
  3198  0096                     	;# 
  3199  0097                     	;# 
  3200  0098                     	;# 
  3201  0099                     	;# 
  3202  009A                     	;# 
  3203  009B                     	;# 
  3204  009B                     	;# 
  3205  009C                     	;# 
  3206  009D                     	;# 
  3207  009E                     	;# 
  3208  010C                     	;# 
  3209  010D                     	;# 
  3210  010E                     	;# 
  3211  0111                     	;# 
  3212  0112                     	;# 
  3213  0113                     	;# 
  3214  0114                     	;# 
  3215  0115                     	;# 
  3216  0116                     	;# 
  3217  0117                     	;# 
  3218  0118                     	;# 
  3219  0119                     	;# 
  3220  011A                     	;# 
  3221  011B                     	;# 
  3222  011D                     	;# 
  3223  011E                     	;# 
  3224  018C                     	;# 
  3225  018D                     	;# 
  3226  018E                     	;# 
  3227  0191                     	;# 
  3228  0191                     	;# 
  3229  0192                     	;# 
  3230  0193                     	;# 
  3231  0193                     	;# 
  3232  0193                     	;# 
  3233  0194                     	;# 
  3234  0195                     	;# 
  3235  0196                     	;# 
  3236  0199                     	;# 
  3237  019A                     	;# 
  3238  019B                     	;# 
  3239  019B                     	;# 
  3240  019B                     	;# 
  3241  019B                     	;# 
  3242  019C                     	;# 
  3243  019C                     	;# 
  3244  019D                     	;# 
  3245  019E                     	;# 
  3246  019F                     	;# 
  3247  020C                     	;# 
  3248  020D                     	;# 
  3249  020E                     	;# 
  3250  0211                     	;# 
  3251  0211                     	;# 
  3252  0212                     	;# 
  3253  0212                     	;# 
  3254  0213                     	;# 
  3255  0213                     	;# 
  3256  0214                     	;# 
  3257  0214                     	;# 
  3258  0215                     	;# 
  3259  0215                     	;# 
  3260  0215                     	;# 
  3261  0216                     	;# 
  3262  0216                     	;# 
  3263  0217                     	;# 
  3264  0217                     	;# 
  3265  0219                     	;# 
  3266  021A                     	;# 
  3267  021B                     	;# 
  3268  021C                     	;# 
  3269  021D                     	;# 
  3270  021E                     	;# 
  3271  021F                     	;# 
  3272  0291                     	;# 
  3273  0291                     	;# 
  3274  0292                     	;# 
  3275  0293                     	;# 
  3276  0294                     	;# 
  3277  0295                     	;# 
  3278  0295                     	;# 
  3279  0296                     	;# 
  3280  0298                     	;# 
  3281  0298                     	;# 
  3282  0299                     	;# 
  3283  029A                     	;# 
  3284  029B                     	;# 
  3285  029C                     	;# 
  3286  029D                     	;# 
  3287  029E                     	;# 
  3288  0311                     	;# 
  3289  0311                     	;# 
  3290  0312                     	;# 
  3291  0313                     	;# 
  3292  0318                     	;# 
  3293  0318                     	;# 
  3294  0319                     	;# 
  3295  031A                     	;# 
  3296  038C                     	;# 
  3297  038D                     	;# 
  3298  038E                     	;# 
  3299  0391                     	;# 
  3300  0392                     	;# 
  3301  0393                     	;# 
  3302  0394                     	;# 
  3303  0395                     	;# 
  3304  0396                     	;# 
  3305  039A                     	;# 
  3306  039C                     	;# 
  3307  039D                     	;# 
  3308  039E                     	;# 
  3309  039F                     	;# 
  3310  0415                     	;# 
  3311  0416                     	;# 
  3312  0417                     	;# 
  3313  041C                     	;# 
  3314  041D                     	;# 
  3315  041E                     	;# 
  3316  0FE4                     	;# 
  3317  0FE5                     	;# 
  3318  0FE6                     	;# 
  3319  0FE7                     	;# 
  3320  0FE8                     	;# 
  3321  0FE9                     	;# 
  3322  0FEA                     	;# 
  3323  0FEB                     	;# 
  3324  0FED                     	;# 
  3325  0FEE                     	;# 
  3326  0FEF                     	;# 
  3327  0000                     	;# 
  3328  0001                     	;# 
  3329  0002                     	;# 
  3330  0003                     	;# 
  3331  0004                     	;# 
  3332  0005                     	;# 
  3333  0006                     	;# 
  3334  0007                     	;# 
  3335  0008                     	;# 
  3336  0009                     	;# 
  3337  000A                     	;# 
  3338  000B                     	;# 
  3339  000C                     	;# 
  3340  000D                     	;# 
  3341  000E                     	;# 
  3342  0011                     	;# 
  3343  0012                     	;# 
  3344  0013                     	;# 
  3345  0014                     	;# 
  3346  0015                     	;# 
  3347  0016                     	;# 
  3348  0016                     	;# 
  3349  0017                     	;# 
  3350  0018                     	;# 
  3351  0019                     	;# 
  3352  001A                     	;# 
  3353  001B                     	;# 
  3354  001C                     	;# 
  3355  001E                     	;# 
  3356  001F                     	;# 
  3357  008C                     	;# 
  3358  008D                     	;# 
  3359  008E                     	;# 
  3360  0091                     	;# 
  3361  0092                     	;# 
  3362  0093                     	;# 
  3363  0094                     	;# 
  3364  0095                     	;# 
  3365  0096                     	;# 
  3366  0097                     	;# 
  3367  0098                     	;# 
  3368  0099                     	;# 
  3369  009A                     	;# 
  3370  009B                     	;# 
  3371  009B                     	;# 
  3372  009C                     	;# 
  3373  009D                     	;# 
  3374  009E                     	;# 
  3375  010C                     	;# 
  3376  010D                     	;# 
  3377  010E                     	;# 
  3378  0111                     	;# 
  3379  0112                     	;# 
  3380  0113                     	;# 
  3381  0114                     	;# 
  3382  0115                     	;# 
  3383  0116                     	;# 
  3384  0117                     	;# 
  3385  0118                     	;# 
  3386  0119                     	;# 
  3387  011A                     	;# 
  3388  011B                     	;# 
  3389  011D                     	;# 
  3390  011E                     	;# 
  3391  018C                     	;# 
  3392  018D                     	;# 
  3393  018E                     	;# 
  3394  0191                     	;# 
  3395  0191                     	;# 
  3396  0192                     	;# 
  3397  0193                     	;# 
  3398  0193                     	;# 
  3399  0193                     	;# 
  3400  0194                     	;# 
  3401  0195                     	;# 
  3402  0196                     	;# 
  3403  0199                     	;# 
  3404  019A                     	;# 
  3405  019B                     	;# 
  3406  019B                     	;# 
  3407  019B                     	;# 
  3408  019B                     	;# 
  3409  019C                     	;# 
  3410  019C                     	;# 
  3411  019D                     	;# 
  3412  019E                     	;# 
  3413  019F                     	;# 
  3414  020C                     	;# 
  3415  020D                     	;# 
  3416  020E                     	;# 
  3417  0211                     	;# 
  3418  0211                     	;# 
  3419  0212                     	;# 
  3420  0212                     	;# 
  3421  0213                     	;# 
  3422  0213                     	;# 
  3423  0214                     	;# 
  3424  0214                     	;# 
  3425  0215                     	;# 
  3426  0215                     	;# 
  3427  0215                     	;# 
  3428  0216                     	;# 
  3429  0216                     	;# 
  3430  0217                     	;# 
  3431  0217                     	;# 
  3432  0219                     	;# 
  3433  021A                     	;# 
  3434  021B                     	;# 
  3435  021C                     	;# 
  3436  021D                     	;# 
  3437  021E                     	;# 
  3438  021F                     	;# 
  3439  0291                     	;# 
  3440  0291                     	;# 
  3441  0292                     	;# 
  3442  0293                     	;# 
  3443  0294                     	;# 
  3444  0295                     	;# 
  3445  0295                     	;# 
  3446  0296                     	;# 
  3447  0298                     	;# 
  3448  0298                     	;# 
  3449  0299                     	;# 
  3450  029A                     	;# 
  3451  029B                     	;# 
  3452  029C                     	;# 
  3453  029D                     	;# 
  3454  029E                     	;# 
  3455  0311                     	;# 
  3456  0311                     	;# 
  3457  0312                     	;# 
  3458  0313                     	;# 
  3459  0318                     	;# 
  3460  0318                     	;# 
  3461  0319                     	;# 
  3462  031A                     	;# 
  3463  038C                     	;# 
  3464  038D                     	;# 
  3465  038E                     	;# 
  3466  0391                     	;# 
  3467  0392                     	;# 
  3468  0393                     	;# 
  3469  0394                     	;# 
  3470  0395                     	;# 
  3471  0396                     	;# 
  3472  039A                     	;# 
  3473  039C                     	;# 
  3474  039D                     	;# 
  3475  039E                     	;# 
  3476  039F                     	;# 
  3477  0415                     	;# 
  3478  0416                     	;# 
  3479  0417                     	;# 
  3480  041C                     	;# 
  3481  041D                     	;# 
  3482  041E                     	;# 
  3483  0FE4                     	;# 
  3484  0FE5                     	;# 
  3485  0FE6                     	;# 
  3486  0FE7                     	;# 
  3487  0FE8                     	;# 
  3488  0FE9                     	;# 
  3489  0FEA                     	;# 
  3490  0FEB                     	;# 
  3491  0FED                     	;# 
  3492  0FEE                     	;# 
  3493  0FEF                     	;# 
  3494  0000                     	;# 
  3495  0001                     	;# 
  3496  0002                     	;# 
  3497  0003                     	;# 
  3498  0004                     	;# 
  3499  0005                     	;# 
  3500  0006                     	;# 
  3501  0007                     	;# 
  3502  0008                     	;# 
  3503  0009                     	;# 
  3504  000A                     	;# 
  3505  000B                     	;# 
  3506  000C                     	;# 
  3507  000D                     	;# 
  3508  000E                     	;# 
  3509  0011                     	;# 
  3510  0012                     	;# 
  3511  0013                     	;# 
  3512  0014                     	;# 
  3513  0015                     	;# 
  3514  0016                     	;# 
  3515  0016                     	;# 
  3516  0017                     	;# 
  3517  0018                     	;# 
  3518  0019                     	;# 
  3519  001A                     	;# 
  3520  001B                     	;# 
  3521  001C                     	;# 
  3522  001E                     	;# 
  3523  001F                     	;# 
  3524  008C                     	;# 
  3525  008D                     	;# 
  3526  008E                     	;# 
  3527  0091                     	;# 
  3528  0092                     	;# 
  3529  0093                     	;# 
  3530  0094                     	;# 
  3531  0095                     	;# 
  3532  0096                     	;# 
  3533  0097                     	;# 
  3534  0098                     	;# 
  3535  0099                     	;# 
  3536  009A                     	;# 
  3537  009B                     	;# 
  3538  009B                     	;# 
  3539  009C                     	;# 
  3540  009D                     	;# 
  3541  009E                     	;# 
  3542  010C                     	;# 
  3543  010D                     	;# 
  3544  010E                     	;# 
  3545  0111                     	;# 
  3546  0112                     	;# 
  3547  0113                     	;# 
  3548  0114                     	;# 
  3549  0115                     	;# 
  3550  0116                     	;# 
  3551  0117                     	;# 
  3552  0118                     	;# 
  3553  0119                     	;# 
  3554  011A                     	;# 
  3555  011B                     	;# 
  3556  011D                     	;# 
  3557  011E                     	;# 
  3558  018C                     	;# 
  3559  018D                     	;# 
  3560  018E                     	;# 
  3561  0191                     	;# 
  3562  0191                     	;# 
  3563  0192                     	;# 
  3564  0193                     	;# 
  3565  0193                     	;# 
  3566  0193                     	;# 
  3567  0194                     	;# 
  3568  0195                     	;# 
  3569  0196                     	;# 
  3570  0199                     	;# 
  3571  019A                     	;# 
  3572  019B                     	;# 
  3573  019B                     	;# 
  3574  019B                     	;# 
  3575  019B                     	;# 
  3576  019C                     	;# 
  3577  019C                     	;# 
  3578  019D                     	;# 
  3579  019E                     	;# 
  3580  019F                     	;# 
  3581  020C                     	;# 
  3582  020D                     	;# 
  3583  020E                     	;# 
  3584  0211                     	;# 
  3585  0211                     	;# 
  3586  0212                     	;# 
  3587  0212                     	;# 
  3588  0213                     	;# 
  3589  0213                     	;# 
  3590  0214                     	;# 
  3591  0214                     	;# 
  3592  0215                     	;# 
  3593  0215                     	;# 
  3594  0215                     	;# 
  3595  0216                     	;# 
  3596  0216                     	;# 
  3597  0217                     	;# 
  3598  0217                     	;# 
  3599  0219                     	;# 
  3600  021A                     	;# 
  3601  021B                     	;# 
  3602  021C                     	;# 
  3603  021D                     	;# 
  3604  021E                     	;# 
  3605  021F                     	;# 
  3606  0291                     	;# 
  3607  0291                     	;# 
  3608  0292                     	;# 
  3609  0293                     	;# 
  3610  0294                     	;# 
  3611  0295                     	;# 
  3612  0295                     	;# 
  3613  0296                     	;# 
  3614  0298                     	;# 
  3615  0298                     	;# 
  3616  0299                     	;# 
  3617  029A                     	;# 
  3618  029B                     	;# 
  3619  029C                     	;# 
  3620  029D                     	;# 
  3621  029E                     	;# 
  3622  0311                     	;# 
  3623  0311                     	;# 
  3624  0312                     	;# 
  3625  0313                     	;# 
  3626  0318                     	;# 
  3627  0318                     	;# 
  3628  0319                     	;# 
  3629  031A                     	;# 
  3630  038C                     	;# 
  3631  038D                     	;# 
  3632  038E                     	;# 
  3633  0391                     	;# 
  3634  0392                     	;# 
  3635  0393                     	;# 
  3636  0394                     	;# 
  3637  0395                     	;# 
  3638  0396                     	;# 
  3639  039A                     	;# 
  3640  039C                     	;# 
  3641  039D                     	;# 
  3642  039E                     	;# 
  3643  039F                     	;# 
  3644  0415                     	;# 
  3645  0416                     	;# 
  3646  0417                     	;# 
  3647  041C                     	;# 
  3648  041D                     	;# 
  3649  041E                     	;# 
  3650  0FE4                     	;# 
  3651  0FE5                     	;# 
  3652  0FE6                     	;# 
  3653  0FE7                     	;# 
  3654  0FE8                     	;# 
  3655  0FE9                     	;# 
  3656  0FEA                     	;# 
  3657  0FEB                     	;# 
  3658  0FED                     	;# 
  3659  0FEE                     	;# 
  3660  0FEF                     	;# 
  3661  0000                     	;# 
  3662  0001                     	;# 
  3663  0002                     	;# 
  3664  0003                     	;# 
  3665  0004                     	;# 
  3666  0005                     	;# 
  3667  0006                     	;# 
  3668  0007                     	;# 
  3669  0008                     	;# 
  3670  0009                     	;# 
  3671  000A                     	;# 
  3672  000B                     	;# 
  3673  000C                     	;# 
  3674  000D                     	;# 
  3675  000E                     	;# 
  3676  0011                     	;# 
  3677  0012                     	;# 
  3678  0013                     	;# 
  3679  0014                     	;# 
  3680  0015                     	;# 
  3681  0016                     	;# 
  3682  0016                     	;# 
  3683  0017                     	;# 
  3684  0018                     	;# 
  3685  0019                     	;# 
  3686  001A                     	;# 
  3687  001B                     	;# 
  3688  001C                     	;# 
  3689  001E                     	;# 
  3690  001F                     	;# 
  3691  008C                     	;# 
  3692  008D                     	;# 
  3693  008E                     	;# 
  3694  0091                     	;# 
  3695  0092                     	;# 
  3696  0093                     	;# 
  3697  0094                     	;# 
  3698  0095                     	;# 
  3699  0096                     	;# 
  3700  0097                     	;# 
  3701  0098                     	;# 
  3702  0099                     	;# 
  3703  009A                     	;# 
  3704  009B                     	;# 
  3705  009B                     	;# 
  3706  009C                     	;# 
  3707  009D                     	;# 
  3708  009E                     	;# 
  3709  010C                     	;# 
  3710  010D                     	;# 
  3711  010E                     	;# 
  3712  0111                     	;# 
  3713  0112                     	;# 
  3714  0113                     	;# 
  3715  0114                     	;# 
  3716  0115                     	;# 
  3717  0116                     	;# 
  3718  0117                     	;# 
  3719  0118                     	;# 
  3720  0119                     	;# 
  3721  011A                     	;# 
  3722  011B                     	;# 
  3723  011D                     	;# 
  3724  011E                     	;# 
  3725  018C                     	;# 
  3726  018D                     	;# 
  3727  018E                     	;# 
  3728  0191                     	;# 
  3729  0191                     	;# 
  3730  0192                     	;# 
  3731  0193                     	;# 
  3732  0193                     	;# 
  3733  0193                     	;# 
  3734  0194                     	;# 
  3735  0195                     	;# 
  3736  0196                     	;# 
  3737  0199                     	;# 
  3738  019A                     	;# 
  3739  019B                     	;# 
  3740  019B                     	;# 
  3741  019B                     	;# 
  3742  019B                     	;# 
  3743  019C                     	;# 
  3744  019C                     	;# 
  3745  019D                     	;# 
  3746  019E                     	;# 
  3747  019F                     	;# 
  3748  020C                     	;# 
  3749  020D                     	;# 
  3750  020E                     	;# 
  3751  0211                     	;# 
  3752  0211                     	;# 
  3753  0212                     	;# 
  3754  0212                     	;# 
  3755  0213                     	;# 
  3756  0213                     	;# 
  3757  0214                     	;# 
  3758  0214                     	;# 
  3759  0215                     	;# 
  3760  0215                     	;# 
  3761  0215                     	;# 
  3762  0216                     	;# 
  3763  0216                     	;# 
  3764  0217                     	;# 
  3765  0217                     	;# 
  3766  0219                     	;# 
  3767  021A                     	;# 
  3768  021B                     	;# 
  3769  021C                     	;# 
  3770  021D                     	;# 
  3771  021E                     	;# 
  3772  021F                     	;# 
  3773  0291                     	;# 
  3774  0291                     	;# 
  3775  0292                     	;# 
  3776  0293                     	;# 
  3777  0294                     	;# 
  3778  0295                     	;# 
  3779  0295                     	;# 
  3780  0296                     	;# 
  3781  0298                     	;# 
  3782  0298                     	;# 
  3783  0299                     	;# 
  3784  029A                     	;# 
  3785  029B                     	;# 
  3786  029C                     	;# 
  3787  029D                     	;# 
  3788  029E                     	;# 
  3789  0311                     	;# 
  3790  0311                     	;# 
  3791  0312                     	;# 
  3792  0313                     	;# 
  3793  0318                     	;# 
  3794  0318                     	;# 
  3795  0319                     	;# 
  3796  031A                     	;# 
  3797  038C                     	;# 
  3798  038D                     	;# 
  3799  038E                     	;# 
  3800  0391                     	;# 
  3801  0392                     	;# 
  3802  0393                     	;# 
  3803  0394                     	;# 
  3804  0395                     	;# 
  3805  0396                     	;# 
  3806  039A                     	;# 
  3807  039C                     	;# 
  3808  039D                     	;# 
  3809  039E                     	;# 
  3810  039F                     	;# 
  3811  0415                     	;# 
  3812  0416                     	;# 
  3813  0417                     	;# 
  3814  041C                     	;# 
  3815  041D                     	;# 
  3816  041E                     	;# 
  3817  0FE4                     	;# 
  3818  0FE5                     	;# 
  3819  0FE6                     	;# 
  3820  0FE7                     	;# 
  3821  0FE8                     	;# 
  3822  0FE9                     	;# 
  3823  0FEA                     	;# 
  3824  0FEB                     	;# 
  3825  0FED                     	;# 
  3826  0FEE                     	;# 
  3827  0FEF                     	;# 
  3828  0000                     	;# 
  3829  0001                     	;# 
  3830  0002                     	;# 
  3831  0003                     	;# 
  3832  0004                     	;# 
  3833  0005                     	;# 
  3834  0006                     	;# 
  3835  0007                     	;# 
  3836  0008                     	;# 
  3837  0009                     	;# 
  3838  000A                     	;# 
  3839  000B                     	;# 
  3840  000C                     	;# 
  3841  000D                     	;# 
  3842  000E                     	;# 
  3843  0011                     	;# 
  3844  0012                     	;# 
  3845  0013                     	;# 
  3846  0014                     	;# 
  3847  0015                     	;# 
  3848  0016                     	;# 
  3849  0016                     	;# 
  3850  0017                     	;# 
  3851  0018                     	;# 
  3852  0019                     	;# 
  3853  001A                     	;# 
  3854  001B                     	;# 
  3855  001C                     	;# 
  3856  001E                     	;# 
  3857  001F                     	;# 
  3858  008C                     	;# 
  3859  008D                     	;# 
  3860  008E                     	;# 
  3861  0091                     	;# 
  3862  0092                     	;# 
  3863  0093                     	;# 
  3864  0094                     	;# 
  3865  0095                     	;# 
  3866  0096                     	;# 
  3867  0097                     	;# 
  3868  0098                     	;# 
  3869  0099                     	;# 
  3870  009A                     	;# 
  3871  009B                     	;# 
  3872  009B                     	;# 
  3873  009C                     	;# 
  3874  009D                     	;# 
  3875  009E                     	;# 
  3876  010C                     	;# 
  3877  010D                     	;# 
  3878  010E                     	;# 
  3879  0111                     	;# 
  3880  0112                     	;# 
  3881  0113                     	;# 
  3882  0114                     	;# 
  3883  0115                     	;# 
  3884  0116                     	;# 
  3885  0117                     	;# 
  3886  0118                     	;# 
  3887  0119                     	;# 
  3888  011A                     	;# 
  3889  011B                     	;# 
  3890  011D                     	;# 
  3891  011E                     	;# 
  3892  018C                     	;# 
  3893  018D                     	;# 
  3894  018E                     	;# 
  3895  0191                     	;# 
  3896  0191                     	;# 
  3897  0192                     	;# 
  3898  0193                     	;# 
  3899  0193                     	;# 
  3900  0193                     	;# 
  3901  0194                     	;# 
  3902  0195                     	;# 
  3903  0196                     	;# 
  3904  0199                     	;# 
  3905  019A                     	;# 
  3906  019B                     	;# 
  3907  019B                     	;# 
  3908  019B                     	;# 
  3909  019B                     	;# 
  3910  019C                     	;# 
  3911  019C                     	;# 
  3912  019D                     	;# 
  3913  019E                     	;# 
  3914  019F                     	;# 
  3915  020C                     	;# 
  3916  020D                     	;# 
  3917  020E                     	;# 
  3918  0211                     	;# 
  3919  0211                     	;# 
  3920  0212                     	;# 
  3921  0212                     	;# 
  3922  0213                     	;# 
  3923  0213                     	;# 
  3924  0214                     	;# 
  3925  0214                     	;# 
  3926  0215                     	;# 
  3927  0215                     	;# 
  3928  0215                     	;# 
  3929  0216                     	;# 
  3930  0216                     	;# 
  3931  0217                     	;# 
  3932  0217                     	;# 
  3933  0219                     	;# 
  3934  021A                     	;# 
  3935  021B                     	;# 
  3936  021C                     	;# 
  3937  021D                     	;# 
  3938  021E                     	;# 
  3939  021F                     	;# 
  3940  0291                     	;# 
  3941  0291                     	;# 
  3942  0292                     	;# 
  3943  0293                     	;# 
  3944  0294                     	;# 
  3945  0295                     	;# 
  3946  0295                     	;# 
  3947  0296                     	;# 
  3948  0298                     	;# 
  3949  0298                     	;# 
  3950  0299                     	;# 
  3951  029A                     	;# 
  3952  029B                     	;# 
  3953  029C                     	;# 
  3954  029D                     	;# 
  3955  029E                     	;# 
  3956  0311                     	;# 
  3957  0311                     	;# 
  3958  0312                     	;# 
  3959  0313                     	;# 
  3960  0318                     	;# 
  3961  0318                     	;# 
  3962  0319                     	;# 
  3963  031A                     	;# 
  3964  038C                     	;# 
  3965  038D                     	;# 
  3966  038E                     	;# 
  3967  0391                     	;# 
  3968  0392                     	;# 
  3969  0393                     	;# 
  3970  0394                     	;# 
  3971  0395                     	;# 
  3972  0396                     	;# 
  3973  039A                     	;# 
  3974  039C                     	;# 
  3975  039D                     	;# 
  3976  039E                     	;# 
  3977  039F                     	;# 
  3978  0415                     	;# 
  3979  0416                     	;# 
  3980  0417                     	;# 
  3981  041C                     	;# 
  3982  041D                     	;# 
  3983  041E                     	;# 
  3984  0FE4                     	;# 
  3985  0FE5                     	;# 
  3986  0FE6                     	;# 
  3987  0FE7                     	;# 
  3988  0FE8                     	;# 
  3989  0FE9                     	;# 
  3990  0FEA                     	;# 
  3991  0FEB                     	;# 
  3992  0FED                     	;# 
  3993  0FEE                     	;# 
  3994  0FEF                     	;# 
  3995                           
  3996                           	psect	idataBANK1
  3997  0003                     __pidataBANK1:	
  3998                           
  3999                           ;initializer for _addressSize
  4000  0003  3405               	retlw	5
  4001                           
  4002                           	psect	idataBANK2
  4003  1315                     __pidataBANK2:	
  4004                           
  4005                           ;initializer for _sensorUpdatePeriod
  4006  1315  34C0               	retlw	192
  4007  1316  3427               	retlw	39
  4008  1317  3409               	retlw	9
  4009  1318  3400               	retlw	0
  4010                           
  4011                           ;initializer for _sensorHealth
  4012  1319  3401               	retlw	1
  4013  131A  3401               	retlw	1
  4014                           
  4015                           	psect	stringtext1
  4016  1800                     __pstringtext1:	
  4017  1800                     atan@coeff_a:	
  4018  1800  343C               	retlw	60
  4019  1801  3404               	retlw	4
  4020  1802  3442               	retlw	66
  4021  1803  349F               	retlw	159
  4022  1804  346A               	retlw	106
  4023  1805  3442               	retlw	66
  4024  1806  3490               	retlw	144
  4025  1807  3401               	retlw	1
  4026  1808  3442               	retlw	66
  4027  1809  344D               	retlw	77
  4028  180A  34BB               	retlw	187
  4029  180B  3440               	retlw	64
  4030  180C  34EC               	retlw	236
  4031  180D  3447               	retlw	71
  4032  180E  343E               	retlw	62
  4033  180F  348E               	retlw	142
  4034  1810  341F               	retlw	31
  4035  1811  34BB               	retlw	187
  4036  1812                     __end_ofatan@coeff_a:	
  4037                           
  4038                           	psect	stringtext2
  4039  1812                     __pstringtext2:	
  4040  1812                     atan@coeff_b:	
  4041  1812  343C               	retlw	60
  4042  1813  3404               	retlw	4
  4043  1814  3442               	retlw	66
  4044  1815  345A               	retlw	90
  4045  1816  348B               	retlw	139
  4046  1817  3442               	retlw	66
  4047  1818  3404               	retlw	4
  4048  1819  3444               	retlw	68
  4049  181A  3442               	retlw	66
  4050  181B  349C               	retlw	156
  4051  181C  344F               	retlw	79
  4052  181D  3441               	retlw	65
  4053  181E  3400               	retlw	0
  4054  181F  3480               	retlw	128
  4055  1820  343F               	retlw	63
  4056  1821                     __end_ofatan@coeff_b:	
  4057                           
  4058                           	psect	stringtext3
  4059  1821                     __pstringtext3:	
  4060  1821                     Wireless_init@TADDR:	
  4061  1821  3432               	retlw	50
  4062  1822  3430               	retlw	48
  4063  1823  3430               	retlw	48
  4064  1824  3430               	retlw	48
  4065  1825  3431               	retlw	49
  4066  1826                     __end_ofWireless_init@TADDR:	
  4067                           
  4068                           	psect	nvCOMMON
  4069  007C                     __pnvCOMMON:	
  4070  007C                     _timer1ReloadVal:	
  4071  007C                     	ds	2
  4072                           
  4073                           	psect	nvBANK2
  4074  016C                     __pnvBANK2:	
  4075  016C                     _TMR1_InterruptHandler:	
  4076  016C                     	ds	2
  4077  016E                     _IOCAF2_InterruptHandler:	
  4078  016E                     	ds	2
  4079  000E                     _PORTCbits	set	14
  4080  0019                     _T1GCONbits	set	25
  4081  0018                     _T1CONbits	set	24
  4082  0018                     _T1CON	set	24
  4083  0016                     _TMR1L	set	22
  4084  0017                     _TMR1H	set	23
  4085  0019                     _T1GCON	set	25
  4086  0014                     _PIR4bits	set	20
  4087  001C                     _T2CONbits	set	28
  4088  001C                     _T2CON	set	28
  4089  0011                     _PIR1bits	set	17
  4090  001A                     _TMR2	set	26
  4091  001B                     _PR2	set	27
  4092  000B                     _INTCONbits	set	11
  4093  009D                     _ADCON0bits	set	157
  4094  009C                     _ADRESH	set	156
  4095  009B                     _ADRESL	set	155
  4096  009E                     _ADCON1	set	158
  4097  009D                     _ADCON0	set	157
  4098  0091                     _PIE1bits	set	145
  4099  0094                     _PIE4bits	set	148
  4100  0095                     _OPTION_REGbits	set	149
  4101  008E                     _TRISC	set	142
  4102  008D                     _TRISB	set	141
  4103  008C                     _TRISA	set	140
  4104  0097                     _WDTCON	set	151
  4105  0098                     _OSCTUNE	set	152
  4106  0099                     _OSCCON	set	153
  4107  010E                     _LATCbits	set	270
  4108  0117                     _FVRCONbits	set	279
  4109  0117                     _FVRCON	set	279
  4110  011D                     _APFCON0	set	285
  4111  011E                     _APFCON1	set	286
  4112  010E                     _LATC	set	270
  4113  010D                     _LATB	set	269
  4114  010C                     _LATA	set	268
  4115  0116                     _BORCON	set	278
  4116  0196                     _EECON2	set	406
  4117  0193                     _EEDATL	set	403
  4118  0194                     _EEDATH	set	404
  4119  0195                     _EECON1bits	set	405
  4120  0192                     _EEADRH	set	402
  4121  0191                     _EEADRL	set	401
  4122  018C                     _ANSELA	set	396
  4123  018D                     _ANSELB	set	397
  4124  018E                     _ANSELC	set	398
  4125  020E                     _WPUCbits	set	526
  4126  0214                     _SSP1STATbits	set	532
  4127  0211                     _SSP1BUF	set	529
  4128  0215                     _SSP1CON1bits	set	533
  4129  0212                     _SSP1ADD	set	530
  4130  0215                     _SSP1CON1	set	533
  4131  0214                     _SSP1STAT	set	532
  4132  0219                     _SSP2BUF	set	537
  4133  021E                     _SSP2CON2bits	set	542
  4134  021D                     _SSP2CON1bits	set	541
  4135  021A                     _SSP2ADD	set	538
  4136  021F                     _SSP2CON3	set	543
  4137  021D                     _SSP2CON1	set	541
  4138  021C                     _SSP2STAT	set	540
  4139  020E                     _WPUC	set	526
  4140  020C                     _WPUA	set	524
  4141  020D                     _WPUB	set	525
  4142  0391                     _IOCAPbits	set	913
  4143  0392                     _IOCANbits	set	914
  4144  0393                     _IOCAFbits	set	915
  4145                           
  4146                           ; #config settings
  4147  0000                     
  4148                           	psect	cinit
  4149  0039                     start_initialization:	
  4150  0039                     __initialization:	
  4151                           
  4152                           ; Initialize objects allocated to BANK1
  4153  0039  0021               	movlb	1	; select bank1
  4154  003A  3180  2003  3180   	fcall	__pidataBANK1	;fetch initializer
  4155  003D  00E6               	movwf	__pdataBANK1& (0+127)
  4156                           
  4157                           ; Initialize objects allocated to BANK2
  4158  003E  3015               	movlw	low __pidataBANK2
  4159  003F  0084               	movwf	4
  4160  0040  3093               	movlw	(high __pidataBANK2)| (0+128)
  4161  0041  0085               	movwf	5
  4162  0042  0022               	movlb	2	; select bank2
  4163  0043  0012               	moviw fsr0++
  4164  0044  00E6               	movwf	__pdataBANK2& (0+127)
  4165  0045  0012               	moviw fsr0++
  4166  0046  00E7               	movwf	(__pdataBANK2+1)& (0+127)
  4167  0047  0012               	moviw fsr0++
  4168  0048  00E8               	movwf	(__pdataBANK2+2)& (0+127)
  4169  0049  0012               	moviw fsr0++
  4170  004A  00E9               	movwf	(__pdataBANK2+3)& (0+127)
  4171  004B  0012               	moviw fsr0++
  4172  004C  00EA               	movwf	(__pdataBANK2+4)& (0+127)
  4173  004D  0012               	moviw fsr0++
  4174  004E  00EB               	movwf	(__pdataBANK2+5)& (0+127)
  4175                           
  4176                           ; Clear objects allocated to COMMON
  4177  004F  01F7               	clrf	__pbssCOMMON& (0+127)
  4178  0050  01F8               	clrf	(__pbssCOMMON+1)& (0+127)
  4179  0051  01F9               	clrf	(__pbssCOMMON+2)& (0+127)
  4180  0052  01FA               	clrf	(__pbssCOMMON+3)& (0+127)
  4181  0053  01FB               	clrf	(__pbssCOMMON+4)& (0+127)
  4182                           
  4183                           ; Clear objects allocated to BANK1
  4184  0054  30CD               	movlw	low __pbssBANK1
  4185  0055  0084               	movwf	4
  4186  0056  3000               	movlw	high __pbssBANK1
  4187  0057  0085               	movwf	5
  4188  0058  3019               	movlw	25
  4189  0059  3193  230F  3180   	fcall	clear_ram0
  4190                           
  4191                           ; Clear objects allocated to BANK2
  4192  005C  3020               	movlw	low __pbssBANK2
  4193  005D  0084               	movwf	4
  4194  005E  3001               	movlw	high __pbssBANK2
  4195  005F  0085               	movwf	5
  4196  0060  3046               	movlw	70
  4197  0061  3193  230F  3180   	fcall	clear_ram0
  4198                           
  4199                           ; Clear objects allocated to BANK3
  4200  0064  30A0               	movlw	low __pbssBANK3
  4201  0065  0084               	movwf	4
  4202  0066  3001               	movlw	high __pbssBANK3
  4203  0067  0085               	movwf	5
  4204  0068  3030               	movlw	48
  4205  0069  3193  230F         	fcall	clear_ram0
  4206  006B                     end_of_initialization:	
  4207                           ;End of C runtime variable initialization code
  4208                           
  4209  006B                     __end_of__initialization:	
  4210  006B  107E               	bcf	int$flags,0	;clear compiler interrupt flag (level 1)
  4211  006C  0020               	movlb	0
  4212  006D  3183  2B3D         	ljmp	_main	;jump to C main() function
  4213                           
  4214                           	psect	bssCOMMON
  4215  0077                     __pbssCOMMON:	
  4216  0077                     _p_i2c2_current:	
  4217  0077                     	ds	1
  4218  0078                     _p_i2c2_trb_current:	
  4219  0078                     	ds	1
  4220  0079                     _i2c2_state:	
  4221  0079                     	ds	1
  4222  007A                     I2C2_ISR@i2c_address:	
  4223  007A                     	ds	2
  4224                           
  4225                           	psect	bssBANK1
  4226  00CD                     __pbssBANK1:	
  4227  00CD                     _i2c2_object:	
  4228  00CD                     	ds	5
  4229  00D2                     _globalCounter:	
  4230  00D2                     	ds	4
  4231  00D6                     _dig_T1:	
  4232  00D6                     	ds	2
  4233  00D8                     I2C2_ISR@pi2c_buf_ptr:	
  4234  00D8                     	ds	2
  4235  00DA                     DOOR_run@previousDoorState:	
  4236  00DA                     	ds	1
  4237  00DB                     _initialised:	
  4238  00DB                     	ds	1
  4239  00DC                     _doorState:	
  4240  00DC                     	ds	1
  4241  00DD                     _doorClosedAngle:	
  4242  00DD                     	ds	1
  4243  00DE                     _doorOpenAngle:	
  4244  00DE                     	ds	1
  4245  00DF                     Wireless_determineTransmitPower@numOfSuccessfulTransmits:	
  4246  00DF                     	ds	1
  4247  00E0                     Wireless_determineTransmitPower@numOfTransmits:	
  4248  00E0                     	ds	1
  4249  00E1                     _currentTransmitPower:	
  4250  00E1                     	ds	1
  4251  00E2                     _HMC5883Lmode:	
  4252  00E2                     	ds	1
  4253  00E3                     I2C2_ISR@i2c_10bit_address_restart:	
  4254  00E3                     	ds	1
  4255  00E4                     I2C2_ISR@i2c_bytes_left:	
  4256  00E4                     	ds	1
  4257  00E5                     _i2c2_trb_count:	
  4258  00E5                     	ds	1
  4259                           
  4260                           	psect	dataBANK1
  4261  00E6                     __pdataBANK1:	
  4262  00E6                     _addressSize:	
  4263  00E6                     	ds	1
  4264                           
  4265                           	psect	bssBANK2
  4266  0120                     __pbssBANK2:	
  4267  0120                     _curr:	
  4268  0120                     	ds	4
  4269  0124                     _adc_t:	
  4270  0124                     	ds	4
  4271  0128                     _pressure:	
  4272  0128                     	ds	3
  4273  012B                     _cTemp:	
  4274  012B                     	ds	3
  4275  012E                     _t_fine:	
  4276  012E                     	ds	3
  4277  0131                     _var2:	
  4278  0131                     	ds	3
  4279  0134                     _var1:	
  4280  0134                     	ds	3
  4281  0137                     HMC5883L_TestConnection@F3572:	
  4282  0137                     	ds	3
  4283  013A                     _errno:	
  4284  013A                     	ds	2
  4285  013C                     _timeOut:	
  4286  013C                     	ds	2
  4287  013E                     _referenceDirection:	
  4288  013E                     	ds	2
  4289  0140                     _dig_P9:	
  4290  0140                     	ds	2
  4291  0142                     _dig_P8:	
  4292  0142                     	ds	2
  4293  0144                     _dig_P7:	
  4294  0144                     	ds	2
  4295  0146                     _dig_P6:	
  4296  0146                     	ds	2
  4297  0148                     _dig_P5:	
  4298  0148                     	ds	2
  4299  014A                     _dig_P4:	
  4300  014A                     	ds	2
  4301  014C                     _dig_P3:	
  4302  014C                     	ds	2
  4303  014E                     _dig_P2:	
  4304  014E                     	ds	2
  4305  0150                     _dig_P1:	
  4306  0150                     	ds	2
  4307  0152                     _dig_T4:	
  4308  0152                     	ds	2
  4309  0154                     _dig_T3:	
  4310  0154                     	ds	2
  4311  0156                     _dig_T2:	
  4312  0156                     	ds	2
  4313  0158                     I2C2_MasterRead@trBlock:	
  4314  0158                     	ds	5
  4315  015D                     I2C2_MasterWrite@trBlock:	
  4316  015D                     	ds	5
  4317  0162                     _i2c2_tr_queue:	
  4318  0162                     	ds	4
  4319                           
  4320                           	psect	dataBANK2
  4321  0166                     __pdataBANK2:	
  4322  0166                     _sensorUpdatePeriod:	
  4323  0166                     	ds	4
  4324  016A                     _sensorHealth:	
  4325  016A                     	ds	2
  4326                           
  4327                           	psect	bssBANK3
  4328  01A0                     __pbssBANK3:	
  4329  01A0                     DOOR_run@doorStateDuration:	
  4330  01A0                     	ds	4
  4331  01A4                     _adc_p:	
  4332  01A4                     	ds	4
  4333  01A8                     _b1:	
  4334  01A8                     	ds	24
  4335  01C0                     _data:	
  4336  01C0                     	ds	8
  4337  01C8                     _heading:	
  4338  01C8                     	ds	8
  4339                           
  4340                           	psect	clrtext
  4341  130F                     clear_ram0:	
  4342                           ;	Called with FSR0 containing the base address, and
  4343                           ;	WREG with the size to clear
  4344                           
  4345  130F  0064               	clrwdt	;clear the watchdog before getting into this loop
  4346  1310                     clrloop0:	
  4347  1310  0180               	clrf	0	;clear RAM location pointed to by FSR
  4348  1311  3101               	addfsr 0,1
  4349  1312  0B89               	decfsz	9,f	;Have we reached the end of clearing yet?
  4350  1313  2B10               	goto	clrloop0	;have we reached the end yet?
  4351  1314  3400               	retlw	0	;all done for this memory range, return
  4352                           
  4353                           	psect	cstackBANK3
  4354  01D0                     __pcstackBANK3:	
  4355  01D0                     main@prevDoorStatus:	
  4356                           
  4357                           ; 1 bytes @ 0x0
  4358  01D0                     	ds	1
  4359  01D1                     main@doorClosedUpdateCounter:	
  4360                           
  4361                           ; 4 bytes @ 0x1
  4362  01D1                     	ds	4
  4363  01D5                     main@dur:	
  4364                           
  4365                           ; 2 bytes @ 0x5
  4366  01D5                     	ds	2
  4367  01D7                     main@doorOpenTime:	
  4368                           
  4369                           ; 4 bytes @ 0x7
  4370  01D7                     	ds	4
  4371  01DB                     main@doorStatus:	
  4372                           
  4373                           ; 1 bytes @ 0xB
  4374  01DB                     	ds	1
  4375                           
  4376                           	psect	cstackBANK1
  4377  00A0                     __pcstackBANK1:	
  4378  00A0                     ___fttol@sign1:	
  4379                           
  4380                           ; 1 bytes @ 0x0
  4381  00A0                     	ds	1
  4382  00A1                     ___fttol@lval:	
  4383                           
  4384                           ; 4 bytes @ 0x1
  4385  00A1                     	ds	4
  4386  00A5                     ___fttol@exp1:	
  4387                           
  4388                           ; 1 bytes @ 0x5
  4389  00A5                     	ds	1
  4390  00A6                     ?_BMP_readTemperature:	
  4391                           
  4392                           ; 3 bytes @ 0x6
  4393  00A6                     	ds	3
  4394  00A9                     ??_BMP_readTemperature:	
  4395                           
  4396                           ; 1 bytes @ 0x9
  4397  00A9                     	ds	12
  4398  00B5                     _BMP_readTemperature$2642:	
  4399                           
  4400                           ; 3 bytes @ 0x15
  4401  00B5                     	ds	3
  4402  00B8                     BMP_readTemperature@status:	
  4403                           
  4404                           ; 1 bytes @ 0x18
  4405  00B8                     	ds	1
  4406  00B9                     BMP_readTemperature@tmp:	
  4407                           
  4408                           ; 1 bytes @ 0x19
  4409  00B9                     	ds	1
  4410  00BA                     ?_Wireless_packageData:	
  4411  00BA                     Wireless_packageData@openTime:	
  4412                           ; 1 bytes @ 0x1A
  4413                           
  4414                           
  4415                           ; 1 bytes @ 0x1A
  4416  00BA                     	ds	1
  4417  00BB                     Wireless_packageData@tempC:	
  4418                           
  4419                           ; 3 bytes @ 0x1B
  4420  00BB                     	ds	3
  4421  00BE                     ??_Wireless_packageData:	
  4422                           
  4423                           ; 1 bytes @ 0x1E
  4424  00BE                     	ds	2
  4425  00C0                     Wireless_packageData@data:	
  4426                           
  4427                           ; 7 bytes @ 0x20
  4428  00C0                     	ds	7
  4429  00C7                     Wireless_packageData@var:	
  4430                           
  4431                           ; 1 bytes @ 0x27
  4432  00C7                     	ds	1
  4433  00C8                     Wireless_packageData@status:	
  4434                           
  4435                           ; 1 bytes @ 0x28
  4436  00C8                     	ds	1
  4437  00C9                     Wireless_packageData@t1:	
  4438                           
  4439                           ; 2 bytes @ 0x29
  4440  00C9                     	ds	2
  4441  00CB                     ??_main:	
  4442                           
  4443                           ; 1 bytes @ 0x2B
  4444  00CB                     	ds	2
  4445                           
  4446                           	psect	cstackCOMMON
  4447  0070                     __pcstackCOMMON:	
  4448  0070                     ?_PIN_MANAGER_Initialize:	
  4449  0070                     ?_OSCILLATOR_Initialize:	
  4450                           ; 1 bytes @ 0x0
  4451                           
  4452  0070                     ?_WDT_Initialize:	
  4453                           ; 1 bytes @ 0x0
  4454                           
  4455  0070                     ?_SPI1_Initialize:	
  4456                           ; 1 bytes @ 0x0
  4457                           
  4458  0070                     ?_I2C2_Initialize:	
  4459                           ; 1 bytes @ 0x0
  4460                           
  4461  0070                     ?_FVR_Initialize:	
  4462                           ; 1 bytes @ 0x0
  4463                           
  4464  0070                     ?_ADC_Initialize:	
  4465                           ; 1 bytes @ 0x0
  4466                           
  4467  0070                     ?_TMR2_Initialize:	
  4468                           ; 1 bytes @ 0x0
  4469                           
  4470  0070                     ?_TMR1_Initialize:	
  4471                           ; 1 bytes @ 0x0
  4472                           
  4473  0070                     ?_IOCAF2_DefaultInterruptHandler:	
  4474                           ; 1 bytes @ 0x0
  4475                           
  4476  0070                     ??_IOCAF2_DefaultInterruptHandler:	
  4477                           ; 1 bytes @ 0x0
  4478                           
  4479  0070                     ?_IOCAF2_ISR:	
  4480                           ; 1 bytes @ 0x0
  4481                           
  4482  0070                     ??_IOCAF2_ISR:	
  4483                           ; 1 bytes @ 0x0
  4484                           
  4485  0070                     ?_I2C2_BusCollisionISR:	
  4486                           ; 1 bytes @ 0x0
  4487                           
  4488  0070                     ??_I2C2_BusCollisionISR:	
  4489                           ; 1 bytes @ 0x0
  4490                           
  4491  0070                     ?_I2C2_ISR:	
  4492                           ; 1 bytes @ 0x0
  4493                           
  4494  0070                     ?_TMR1_ISR:	
  4495                           ; 1 bytes @ 0x0
  4496                           
  4497  0070                     ??_TMR1_ISR:	
  4498                           ; 1 bytes @ 0x0
  4499                           
  4500  0070                     ?_TMR1_DefaultInterruptHandler:	
  4501                           ; 1 bytes @ 0x0
  4502                           
  4503  0070                     ??_TMR1_DefaultInterruptHandler:	
  4504                           ; 1 bytes @ 0x0
  4505                           
  4506  0070                     ?_TMR1_CallBack:	
  4507                           ; 1 bytes @ 0x0
  4508                           
  4509  0070                     ??_TMR1_CallBack:	
  4510                           ; 1 bytes @ 0x0
  4511                           
  4512  0070                     ?_Timeout_increment:	
  4513                           ; 1 bytes @ 0x0
  4514                           
  4515  0070                     ??_Timeout_increment:	
  4516                           ; 1 bytes @ 0x0
  4517                           
  4518  0070                     ?_I2C2_Stop:	
  4519                           ; 1 bytes @ 0x0
  4520                           
  4521  0070                     ??_I2C2_Stop:	
  4522                           ; 1 bytes @ 0x0
  4523                           
  4524  0070                     ?_I2C2_FunctionComplete:	
  4525                           ; 1 bytes @ 0x0
  4526                           
  4527  0070                     ??_I2C2_FunctionComplete:	
  4528                           ; 1 bytes @ 0x0
  4529                           
  4530  0070                     ?_Sensor_peripheralWake:	
  4531                           ; 1 bytes @ 0x0
  4532                           
  4533  0070                     ?_Sensor_peripheralSleep:	
  4534                           ; 1 bytes @ 0x0
  4535                           
  4536  0070                     ?_Wireless_init:	
  4537                           ; 1 bytes @ 0x0
  4538                           
  4539  0070                     ?_BMP_init:	
  4540                           ; 1 bytes @ 0x0
  4541                           
  4542  0070                     ?_DOOR_init:	
  4543                           ; 1 bytes @ 0x0
  4544                           
  4545  0070                     ?_Wireless_wake:	
  4546                           ; 1 bytes @ 0x0
  4547                           
  4548  0070                     ?_Wireless_determineTransmitPower:	
  4549                           ; 1 bytes @ 0x0
  4550                           
  4551  0070                     ?_Wireless_sleep:	
  4552                           ; 1 bytes @ 0x0
  4553                           
  4554  0070                     ?_Timeout_updateCurrentTime:	
  4555                           ; 1 bytes @ 0x0
  4556                           
  4557  0070                     ?_DOOR_run:	
  4558                           ; 1 bytes @ 0x0
  4559                           
  4560  0070                     ?_Diag_setTempSensorHealth:	
  4561                           ; 1 bytes @ 0x0
  4562                           
  4563  0070                     ?_Diag_getTempSensorHealth:	
  4564                           ; 1 bytes @ 0x0
  4565                           
  4566  0070                     ?_Wireless_changeTransmitPower:	
  4567                           ; 1 bytes @ 0x0
  4568                           
  4569  0070                     ?_Wireless_isDataTransmitSuccessful:	
  4570                           ; 1 bytes @ 0x0
  4571                           
  4572  0070                     ?_Diag_getSensorHealth:	
  4573                           ; 1 bytes @ 0x0
  4574                           
  4575  0070                     ?_Wireless_checkDataReceived:	
  4576                           ; 1 bytes @ 0x0
  4577                           
  4578  0070                     ?_SYSTEM_Initialize:	
  4579                           ; 1 bytes @ 0x0
  4580                           
  4581  0070                     ?_PIN_MANAGER_IOC:	
  4582                           ; 1 bytes @ 0x0
  4583                           
  4584  0070                     ??_PIN_MANAGER_IOC:	
  4585                           ; 1 bytes @ 0x0
  4586                           
  4587  0070                     ?_INTERRUPT_InterruptManager:	
  4588                           ; 1 bytes @ 0x0
  4589                           
  4590  0070                     ?_ADC_SelectChannel:	
  4591                           ; 1 bytes @ 0x0
  4592                           
  4593  0070                     ?_ADC_StartConversion:	
  4594                           ; 1 bytes @ 0x0
  4595                           
  4596  0070                     ?_ADC_IsConversionDone:	
  4597                           ; 1 bytes @ 0x0
  4598                           
  4599  0070                     ?_FVR_IsOutputReady:	
  4600                           ; 1 bytes @ 0x0
  4601                           
  4602  0070                     ?_SPI1_Exchange8bit:	
  4603                           ; 1 bytes @ 0x0
  4604                           
  4605  0070                     ?_main:	
  4606                           ; 1 bytes @ 0x0
  4607                           
  4608  0070                     ?_SPI_WriteRead:	
  4609                           ; 1 bytes @ 0x0
  4610                           
  4611  0070                     ?_RF_ReadRegister:	
  4612                           ; 1 bytes @ 0x0
  4613                           
  4614  0070                     ?_RF_WriteRead:	
  4615                           ; 1 bytes @ 0x0
  4616                           
  4617  0070                     ?_RF_Write:	
  4618                           ; 1 bytes @ 0x0
  4619                           
  4620  0070                     ?_RF_GetStatus:	
  4621                           ; 1 bytes @ 0x0
  4622                           
  4623  0070                     ?_RF_ResetStatusIRQ:	
  4624                           ; 1 bytes @ 0x0
  4625                           
  4626  0070                     ?_RF_Init:	
  4627                           ; 1 bytes @ 0x0
  4628                           
  4629  0070                     ?_RF_DataIsReady:	
  4630                           ; 1 bytes @ 0x0
  4631                           
  4632  0070                     ?_Timeout_hasExpired:	
  4633                           ; 1 bytes @ 0x0
  4634                           
  4635                           
  4636                           ; 1 bytes @ 0x0
  4637  0070                     	ds	2
  4638  0072                     I2C2_Stop@completion_code:	
  4639                           
  4640                           ; 1 bytes @ 0x2
  4641  0072                     	ds	1
  4642  0073                     ??_I2C2_ISR:	
  4643                           
  4644                           ; 1 bytes @ 0x3
  4645  0073                     	ds	4
  4646                           
  4647                           	psect	cstackBANK0
  4648  0020                     __pcstackBANK0:	
  4649  0020                     ??_INTERRUPT_InterruptManager:	
  4650                           
  4651                           ; 1 bytes @ 0x0
  4652  0020                     	ds	1
  4653  0021                     ??_OSCILLATOR_Initialize:	
  4654  0021                     ??_WDT_Initialize:	
  4655                           ; 1 bytes @ 0x1
  4656                           
  4657  0021                     ??_SPI1_Initialize:	
  4658                           ; 1 bytes @ 0x1
  4659                           
  4660  0021                     ??_I2C2_Initialize:	
  4661                           ; 1 bytes @ 0x1
  4662                           
  4663  0021                     ??_FVR_Initialize:	
  4664                           ; 1 bytes @ 0x1
  4665                           
  4666  0021                     ??_ADC_Initialize:	
  4667                           ; 1 bytes @ 0x1
  4668                           
  4669  0021                     ??_TMR2_Initialize:	
  4670                           ; 1 bytes @ 0x1
  4671                           
  4672  0021                     ?_IOCAF2_SetInterruptHandler:	
  4673                           ; 1 bytes @ 0x1
  4674                           
  4675  0021                     ?_TMR1_SetInterruptHandler:	
  4676                           ; 1 bytes @ 0x1
  4677                           
  4678  0021                     ?_I2C2_MasterWriteTRBBuild:	
  4679                           ; 1 bytes @ 0x1
  4680                           
  4681  0021                     ?_I2C2_MasterTRBInsert:	
  4682                           ; 1 bytes @ 0x1
  4683                           
  4684  0021                     ?_I2C2_MasterReadTRBBuild:	
  4685                           ; 1 bytes @ 0x1
  4686                           
  4687  0021                     ??_Sensor_peripheralWake:	
  4688                           ; 1 bytes @ 0x1
  4689                           
  4690  0021                     ??_Sensor_peripheralSleep:	
  4691                           ; 1 bytes @ 0x1
  4692                           
  4693  0021                     ?_setSleepTime:	
  4694                           ; 1 bytes @ 0x1
  4695                           
  4696  0021                     ??_DOOR_init:	
  4697                           ; 1 bytes @ 0x1
  4698                           
  4699  0021                     ??_DOOR_run:	
  4700                           ; 1 bytes @ 0x1
  4701                           
  4702  0021                     ??_Diag_setTempSensorHealth:	
  4703                           ; 1 bytes @ 0x1
  4704                           
  4705  0021                     ??_Diag_getTempSensorHealth:	
  4706                           ; 1 bytes @ 0x1
  4707                           
  4708  0021                     ??_Diag_getSensorHealth:	
  4709                           ; 1 bytes @ 0x1
  4710                           
  4711  0021                     ??_ADC_SelectChannel:	
  4712                           ; 1 bytes @ 0x1
  4713                           
  4714  0021                     ??_ADC_StartConversion:	
  4715                           ; 1 bytes @ 0x1
  4716                           
  4717  0021                     ??_ADC_IsConversionDone:	
  4718                           ; 1 bytes @ 0x1
  4719                           
  4720  0021                     ??_FVR_IsOutputReady:	
  4721                           ; 1 bytes @ 0x1
  4722                           
  4723  0021                     ??_SPI1_Exchange8bit:	
  4724                           ; 1 bytes @ 0x1
  4725                           
  4726  0021                     ??_RF_Init:	
  4727                           ; 1 bytes @ 0x1
  4728                           
  4729  0021                     ?_Timeout_setTimeout:	
  4730                           ; 1 bytes @ 0x1
  4731                           
  4732  0021                     ??_Timeout_hasExpired:	
  4733                           ; 1 bytes @ 0x1
  4734                           
  4735  0021                     ?_TMR1_ReadTimer:	
  4736                           ; 1 bytes @ 0x1
  4737                           
  4738  0021                     ?_ADC_GetConversionResult:	
  4739                           ; 2 bytes @ 0x1
  4740                           
  4741  0021                     ?_limit:	
  4742                           ; 2 bytes @ 0x1
  4743                           
  4744  0021                     ?___lwdiv:	
  4745                           ; 2 bytes @ 0x1
  4746                           
  4747  0021                     ?___ftpack:	
  4748                           ; 2 bytes @ 0x1
  4749                           
  4750  0021                     ?_Timeout_getGlobalCounter:	
  4751                           ; 3 bytes @ 0x1
  4752                           
  4753  0021                     ?___lmul:	
  4754                           ; 4 bytes @ 0x1
  4755                           
  4756  0021                     ?___aldiv:	
  4757                           ; 4 bytes @ 0x1
  4758                           
  4759  0021                     ?___lldiv:	
  4760                           ; 4 bytes @ 0x1
  4761                           
  4762  0021                     I2C2_MasterTRBInsert@ptrb_list:	
  4763                           ; 4 bytes @ 0x1
  4764                           
  4765  0021                     I2C2_MasterWriteTRBBuild@pdata:	
  4766                           ; 1 bytes @ 0x1
  4767                           
  4768  0021                     SPI1_Exchange8bit@data:	
  4769                           ; 1 bytes @ 0x1
  4770                           
  4771  0021                     IOCAF2_SetInterruptHandler@InterruptHandler:	
  4772                           ; 1 bytes @ 0x1
  4773                           
  4774  0021                     TMR1_SetInterruptHandler@InterruptHandler:	
  4775                           ; 2 bytes @ 0x1
  4776                           
  4777  0021                     I2C2_MasterReadTRBBuild@pdata:	
  4778                           ; 2 bytes @ 0x1
  4779                           
  4780  0021                     setSleepTime@timeSec:	
  4781                           ; 2 bytes @ 0x1
  4782                           
  4783  0021                     limit@val:	
  4784                           ; 2 bytes @ 0x1
  4785                           
  4786  0021                     Timeout_setTimeout@val:	
  4787                           ; 2 bytes @ 0x1
  4788                           
  4789  0021                     ___lwdiv@divisor:	
  4790                           ; 2 bytes @ 0x1
  4791                           
  4792  0021                     ___ftpack@arg:	
  4793                           ; 2 bytes @ 0x1
  4794                           
  4795  0021                     ___lmul@multiplier:	
  4796                           ; 3 bytes @ 0x1
  4797                           
  4798  0021                     ___aldiv@divisor:	
  4799                           ; 4 bytes @ 0x1
  4800                           
  4801  0021                     ___lldiv@divisor:	
  4802                           ; 4 bytes @ 0x1
  4803                           
  4804                           
  4805                           ; 4 bytes @ 0x1
  4806  0021                     	ds	1
  4807  0022                     ??_SPI_WriteRead:	
  4808  0022                     I2C2_MasterTRBInsert@pflag:	
  4809                           ; 1 bytes @ 0x2
  4810                           
  4811  0022                     I2C2_MasterWriteTRBBuild@length:	
  4812                           ; 1 bytes @ 0x2
  4813                           
  4814  0022                     ADC_SelectChannel@channel:	
  4815                           ; 1 bytes @ 0x2
  4816                           
  4817  0022                     SPI_WriteRead@val:	
  4818                           ; 1 bytes @ 0x2
  4819                           
  4820  0022                     Diag_setTempSensorHealth@health:	
  4821                           ; 1 bytes @ 0x2
  4822                           
  4823  0022                     Diag_getSensorHealth@var:	
  4824                           ; 1 bytes @ 0x2
  4825                           
  4826                           
  4827                           ; 1 bytes @ 0x2
  4828  0022                     	ds	1
  4829  0023                     ??_PIN_MANAGER_Initialize:	
  4830  0023                     ??_TMR1_Initialize:	
  4831                           ; 1 bytes @ 0x3
  4832                           
  4833  0023                     ??_IOCAF2_SetInterruptHandler:	
  4834                           ; 1 bytes @ 0x3
  4835                           
  4836  0023                     ??_TMR1_SetInterruptHandler:	
  4837                           ; 1 bytes @ 0x3
  4838                           
  4839  0023                     ??_I2C2_MasterTRBInsert:	
  4840                           ; 1 bytes @ 0x3
  4841                           
  4842  0023                     ??_setSleepTime:	
  4843                           ; 1 bytes @ 0x3
  4844                           
  4845  0023                     ??_SYSTEM_Initialize:	
  4846                           ; 1 bytes @ 0x3
  4847                           
  4848  0023                     ??_TMR1_ReadTimer:	
  4849                           ; 1 bytes @ 0x3
  4850                           
  4851  0023                     ??_ADC_GetConversionResult:	
  4852                           ; 1 bytes @ 0x3
  4853                           
  4854  0023                     ?_SPI_WriteReadBuffer:	
  4855                           ; 1 bytes @ 0x3
  4856                           
  4857  0023                     ?_SPI_WriteBuffer:	
  4858                           ; 1 bytes @ 0x3
  4859                           
  4860  0023                     ?_RF_WriteRegister:	
  4861                           ; 1 bytes @ 0x3
  4862                           
  4863  0023                     ??_RF_ReadRegister:	
  4864                           ; 1 bytes @ 0x3
  4865                           
  4866  0023                     ??_RF_WriteRead:	
  4867                           ; 1 bytes @ 0x3
  4868                           
  4869  0023                     ??_RF_Write:	
  4870                           ; 1 bytes @ 0x3
  4871                           
  4872  0023                     ??_Timeout_setTimeout:	
  4873                           ; 1 bytes @ 0x3
  4874                           
  4875  0023                     I2C2_MasterReadTRBBuild@length:	
  4876                           ; 1 bytes @ 0x3
  4877                           
  4878  0023                     SPI_WriteReadBuffer@bufIn:	
  4879                           ; 1 bytes @ 0x3
  4880                           
  4881  0023                     RF_WriteRegister@val:	
  4882                           ; 1 bytes @ 0x3
  4883                           
  4884  0023                     RF_Write@val:	
  4885                           ; 1 bytes @ 0x3
  4886                           
  4887  0023                     I2C2_MasterWriteTRBBuild@address:	
  4888                           ; 1 bytes @ 0x3
  4889                           
  4890  0023                     limit@min:	
  4891                           ; 2 bytes @ 0x3
  4892                           
  4893  0023                     SPI_WriteBuffer@bufOut:	
  4894                           ; 2 bytes @ 0x3
  4895                           
  4896  0023                     ___lwdiv@dividend:	
  4897                           ; 2 bytes @ 0x3
  4898                           
  4899                           
  4900                           ; 2 bytes @ 0x3
  4901  0023                     	ds	1
  4902  0024                     ??_RF_WriteRegister:	
  4903  0024                     I2C2_MasterTRBInsert@count:	
  4904                           ; 1 bytes @ 0x4
  4905                           
  4906  0024                     SPI_WriteReadBuffer@bufSize:	
  4907                           ; 1 bytes @ 0x4
  4908                           
  4909  0024                     RF_WriteRegister@reg:	
  4910                           ; 1 bytes @ 0x4
  4911                           
  4912  0024                     RF_ReadRegister@reg:	
  4913                           ; 1 bytes @ 0x4
  4914                           
  4915  0024                     RF_WriteRead@val:	
  4916                           ; 1 bytes @ 0x4
  4917                           
  4918  0024                     ___ftpack@exp:	
  4919                           ; 1 bytes @ 0x4
  4920                           
  4921  0024                     I2C2_MasterReadTRBBuild@address:	
  4922                           ; 1 bytes @ 0x4
  4923                           
  4924                           
  4925                           ; 2 bytes @ 0x4
  4926  0024                     	ds	1
  4927  0025                     ??_I2C2_MasterWriteTRBBuild:	
  4928  0025                     ??_Timeout_getGlobalCounter:	
  4929                           ; 1 bytes @ 0x5
  4930                           
  4931  0025                     ??_Wireless_isDataTransmitSuccessful:	
  4932                           ; 1 bytes @ 0x5
  4933                           
  4934  0025                     ??_SPI_WriteReadBuffer:	
  4935                           ; 1 bytes @ 0x5
  4936                           
  4937  0025                     ??_RF_GetStatus:	
  4938                           ; 1 bytes @ 0x5
  4939                           
  4940  0025                     ??_RF_ResetStatusIRQ:	
  4941                           ; 1 bytes @ 0x5
  4942                           
  4943  0025                     ??___lwdiv:	
  4944                           ; 1 bytes @ 0x5
  4945                           
  4946  0025                     SPI_WriteBuffer@bufSize:	
  4947                           ; 1 bytes @ 0x5
  4948                           
  4949  0025                     RF_ReadRegister@val:	
  4950                           ; 1 bytes @ 0x5
  4951                           
  4952  0025                     ___ftpack@sign:	
  4953                           ; 1 bytes @ 0x5
  4954                           
  4955  0025                     limit@max:	
  4956                           ; 1 bytes @ 0x5
  4957                           
  4958  0025                     ___lmul@multiplicand:	
  4959                           ; 2 bytes @ 0x5
  4960                           
  4961  0025                     ___aldiv@dividend:	
  4962                           ; 4 bytes @ 0x5
  4963                           
  4964  0025                     ___lldiv@dividend:	
  4965                           ; 4 bytes @ 0x5
  4966                           
  4967                           
  4968                           ; 4 bytes @ 0x5
  4969  0025                     	ds	1
  4970  0026                     ??_I2C2_MasterReadTRBBuild:	
  4971  0026                     ??___ftpack:	
  4972                           ; 1 bytes @ 0x6
  4973                           
  4974  0026                     ??_SPI_WriteBuffer:	
  4975                           ; 1 bytes @ 0x6
  4976                           
  4977  0026                     ??_RF_DataIsReady:	
  4978                           ; 1 bytes @ 0x6
  4979                           
  4980  0026                     RF_ResetStatusIRQ@flags:	
  4981                           ; 1 bytes @ 0x6
  4982                           
  4983  0026                     Wireless_isDataTransmitSuccessful@status:	
  4984                           ; 1 bytes @ 0x6
  4985                           
  4986  0026                     ___lwdiv@counter:	
  4987                           ; 1 bytes @ 0x6
  4988                           
  4989                           
  4990                           ; 1 bytes @ 0x6
  4991  0026                     	ds	1
  4992  0027                     ??_limit:	
  4993  0027                     I2C2_MasterWriteTRBBuild@ptrb:	
  4994                           ; 1 bytes @ 0x7
  4995                           
  4996  0027                     RF_DataIsReady@channel:	
  4997                           ; 1 bytes @ 0x7
  4998                           
  4999  0027                     ___lwdiv@quotient:	
  5000                           ; 1 bytes @ 0x7
  5001                           
  5002                           
  5003                           ; 2 bytes @ 0x7
  5004  0027                     	ds	1
  5005  0028                     ?_I2C2_MasterWrite:	
  5006  0028                     I2C2_MasterWrite@length:	
  5007                           ; 1 bytes @ 0x8
  5008                           
  5009  0028                     I2C2_MasterReadTRBBuild@ptrb:	
  5010                           ; 1 bytes @ 0x8
  5011                           
  5012  0028                     SPI_WriteReadBuffer@bufOut:	
  5013                           ; 1 bytes @ 0x8
  5014                           
  5015  0028                     SPI_WriteBuffer@i:	
  5016                           ; 1 bytes @ 0x8
  5017                           
  5018  0028                     RF_DataIsReady@status:	
  5019                           ; 1 bytes @ 0x8
  5020                           
  5021  0028                     TMR1_ReadTimer@readVal:	
  5022                           ; 1 bytes @ 0x8
  5023                           
  5024                           
  5025                           ; 2 bytes @ 0x8
  5026  0028                     	ds	1
  5027  0029                     ?_I2C2_MasterRead:	
  5028  0029                     ?_RF_WriteRegisterData:	
  5029                           ; 1 bytes @ 0x9
  5030                           
  5031  0029                     ??___lmul:	
  5032                           ; 1 bytes @ 0x9
  5033                           
  5034  0029                     ??___aldiv:	
  5035                           ; 1 bytes @ 0x9
  5036                           
  5037  0029                     ??___lldiv:	
  5038                           ; 1 bytes @ 0x9
  5039                           
  5040  0029                     ?___altoft:	
  5041                           ; 1 bytes @ 0x9
  5042                           
  5043  0029                     ?___awtoft:	
  5044                           ; 3 bytes @ 0x9
  5045                           
  5046  0029                     ?___lwtoft:	
  5047                           ; 3 bytes @ 0x9
  5048                           
  5049  0029                     SPI_WriteReadBuffer@i:	
  5050                           ; 3 bytes @ 0x9
  5051                           
  5052  0029                     I2C2_MasterWrite@address:	
  5053                           ; 1 bytes @ 0x9
  5054                           
  5055  0029                     I2C2_MasterRead@pdata:	
  5056                           ; 2 bytes @ 0x9
  5057                           
  5058  0029                     RF_WriteRegisterData@buf:	
  5059                           ; 2 bytes @ 0x9
  5060                           
  5061  0029                     ___awtoft@c:	
  5062                           ; 2 bytes @ 0x9
  5063                           
  5064  0029                     ___lwtoft@c:	
  5065                           ; 2 bytes @ 0x9
  5066                           
  5067  0029                     ___lmul@product:	
  5068                           ; 2 bytes @ 0x9
  5069                           
  5070  0029                     ___altoft@c:	
  5071                           ; 4 bytes @ 0x9
  5072                           
  5073                           
  5074                           ; 4 bytes @ 0x9
  5075  0029                     	ds	1
  5076  002A                     ?_RF_ReadRegisterData:	
  5077  002A                     TMR1_ReadTimer@readValHigh:	
  5078                           ; 1 bytes @ 0xA
  5079                           
  5080  002A                     RF_ReadRegisterData@buf:	
  5081                           ; 1 bytes @ 0xA
  5082                           
  5083  002A                     ___aldiv@counter:	
  5084                           ; 1 bytes @ 0xA
  5085                           
  5086  002A                     ___lldiv@quotient:	
  5087                           ; 1 bytes @ 0xA
  5088                           
  5089                           
  5090                           ; 4 bytes @ 0xA
  5091  002A                     	ds	1
  5092  002B                     TMR1_ReadTimer@readValLow:	
  5093  002B                     I2C2_MasterWrite@pflag:	
  5094                           ; 1 bytes @ 0xB
  5095                           
  5096  002B                     I2C2_MasterRead@length:	
  5097                           ; 1 bytes @ 0xB
  5098                           
  5099  002B                     RF_ReadRegisterData@bufSize:	
  5100                           ; 1 bytes @ 0xB
  5101                           
  5102  002B                     RF_WriteRegisterData@bufSize:	
  5103                           ; 1 bytes @ 0xB
  5104                           
  5105  002B                     ___aldiv@sign:	
  5106                           ; 1 bytes @ 0xB
  5107                           
  5108                           
  5109                           ; 1 bytes @ 0xB
  5110  002B                     	ds	1
  5111  002C                     ??_I2C2_MasterWrite:	
  5112  002C                     ??_RF_ReadRegisterData:	
  5113                           ; 1 bytes @ 0xC
  5114                           
  5115  002C                     ??_RF_WriteRegisterData:	
  5116                           ; 1 bytes @ 0xC
  5117                           
  5118  002C                     ??___awtoft:	
  5119                           ; 1 bytes @ 0xC
  5120                           
  5121  002C                     ??___lwtoft:	
  5122                           ; 1 bytes @ 0xC
  5123                           
  5124  002C                     I2C2_MasterRead@address:	
  5125                           ; 1 bytes @ 0xC
  5126                           
  5127  002C                     ___aldiv@quotient:	
  5128                           ; 2 bytes @ 0xC
  5129                           
  5130                           
  5131                           ; 4 bytes @ 0xC
  5132  002C                     	ds	1
  5133  002D                     ??_Timeout_updateCurrentTime:	
  5134  002D                     ??___altoft:	
  5135                           ; 1 bytes @ 0xD
  5136                           
  5137  002D                     RF_WriteRegisterData@reg:	
  5138                           ; 1 bytes @ 0xD
  5139                           
  5140                           
  5141                           ; 1 bytes @ 0xD
  5142  002D                     	ds	1
  5143  002E                     ??_Wireless_init:	
  5144  002E                     ?_RF_TxPayload:	
  5145                           ; 1 bytes @ 0xE
  5146                           
  5147  002E                     I2C2_MasterWrite@pdata:	
  5148                           ; 1 bytes @ 0xE
  5149                           
  5150  002E                     I2C2_MasterRead@pflag:	
  5151                           ; 1 bytes @ 0xE
  5152                           
  5153  002E                     RF_ReadRegisterData@reg:	
  5154                           ; 1 bytes @ 0xE
  5155                           
  5156  002E                     RF_TxPayload@payloadSize:	
  5157                           ; 1 bytes @ 0xE
  5158                           
  5159  002E                     ___awtoft@sign:	
  5160                           ; 1 bytes @ 0xE
  5161                           
  5162  002E                     ___lldiv@counter:	
  5163                           ; 1 bytes @ 0xE
  5164                           
  5165                           
  5166                           ; 1 bytes @ 0xE
  5167  002E                     	ds	1
  5168  002F                     ??_Wireless_wake:	
  5169  002F                     ??_Wireless_sleep:	
  5170                           ; 1 bytes @ 0xF
  5171                           
  5172  002F                     ?_I2C_ByteWrite:	
  5173                           ; 1 bytes @ 0xF
  5174                           
  5175  002F                     ??_Wireless_changeTransmitPower:	
  5176                           ; 1 bytes @ 0xF
  5177                           
  5178  002F                     ??_I2C2_MasterRead:	
  5179                           ; 1 bytes @ 0xF
  5180                           
  5181  002F                     ??_RF_TxPayload:	
  5182                           ; 1 bytes @ 0xF
  5183                           
  5184  002F                     ?_RF_RxPayload:	
  5185                           ; 1 bytes @ 0xF
  5186                           
  5187  002F                     RF_RxPayload@payloadSize:	
  5188                           ; 1 bytes @ 0xF
  5189                           
  5190  002F                     I2C_ByteWrite@pBuffer:	
  5191                           ; 1 bytes @ 0xF
  5192                           
  5193  002F                     ___altoft@exp:	
  5194                           ; 1 bytes @ 0xF
  5195                           
  5196                           
  5197                           ; 1 bytes @ 0xF
  5198  002F                     	ds	1
  5199  0030                     ??_RF_RxPayload:	
  5200  0030                     RF_TxPayload@payload:	
  5201                           ; 1 bytes @ 0x10
  5202                           
  5203  0030                     Wireless_sleep@reg:	
  5204                           ; 1 bytes @ 0x10
  5205                           
  5206  0030                     Wireless_wake@reg:	
  5207                           ; 1 bytes @ 0x10
  5208                           
  5209  0030                     I2C_ByteWrite@WriteAddr:	
  5210                           ; 1 bytes @ 0x10
  5211                           
  5212  0030                     ___altoft@sign:	
  5213                           ; 1 bytes @ 0x10
  5214                           
  5215                           
  5216                           ; 1 bytes @ 0x10
  5217  0030                     	ds	1
  5218  0031                     ??_I2C_ByteWrite:	
  5219  0031                     ?_I2C_BufferRead:	
  5220                           ; 1 bytes @ 0x11
  5221                           
  5222  0031                     ?_Wireless_sendData:	
  5223                           ; 1 bytes @ 0x11
  5224                           
  5225  0031                     ?___ftdiv:	
  5226                           ; 1 bytes @ 0x11
  5227                           
  5228  0031                     Wireless_sendData@length:	
  5229                           ; 3 bytes @ 0x11
  5230                           
  5231  0031                     I2C_BufferRead@pBuffer:	
  5232                           ; 1 bytes @ 0x11
  5233                           
  5234  0031                     ___ftdiv@f2:	
  5235                           ; 2 bytes @ 0x11
  5236                           
  5237  0031                     Timeout_updateCurrentTime@var:	
  5238                           ; 3 bytes @ 0x11
  5239                           
  5240                           
  5241                           ; 4 bytes @ 0x11
  5242  0031                     	ds	1
  5243  0032                     ??_Wireless_sendData:	
  5244  0032                     RF_RxPayload@payload:	
  5245                           ; 1 bytes @ 0x12
  5246                           
  5247  0032                     Wireless_changeTransmitPower@power:	
  5248                           ; 1 bytes @ 0x12
  5249                           
  5250                           
  5251                           ; 1 bytes @ 0x12
  5252  0032                     	ds	1
  5253  0033                     ??_Wireless_checkDataReceived:	
  5254  0033                     Wireless_changeTransmitPower@val:	
  5255                           ; 1 bytes @ 0x13
  5256                           
  5257  0033                     Wireless_sendData@status:	
  5258                           ; 1 bytes @ 0x13
  5259                           
  5260  0033                     I2C_BufferRead@ReadAddr:	
  5261                           ; 1 bytes @ 0x13
  5262                           
  5263                           
  5264                           ; 1 bytes @ 0x13
  5265  0033                     	ds	1
  5266  0034                     Wireless_sendData@payload:	
  5267  0034                     I2C_BufferRead@NumByteToRead:	
  5268                           ; 1 bytes @ 0x14
  5269                           
  5270  0034                     ___ftdiv@f1:	
  5271                           ; 2 bytes @ 0x14
  5272                           
  5273                           
  5274                           ; 3 bytes @ 0x14
  5275  0034                     	ds	1
  5276  0035                     ??_Wireless_determineTransmitPower:	
  5277  0035                     I2C_ByteWrite@slaveAddr:	
  5278                           ; 1 bytes @ 0x15
  5279                           
  5280                           
  5281                           ; 1 bytes @ 0x15
  5282  0035                     	ds	1
  5283  0036                     ??_I2C_BufferRead:	
  5284  0036                     I2C_ByteWrite@data:	
  5285                           ; 1 bytes @ 0x16
  5286                           
  5287                           
  5288                           ; 2 bytes @ 0x16
  5289  0036                     	ds	1
  5290  0037                     ??___ftdiv:	
  5291  0037                     Wireless_checkDataReceived@data:	
  5292                           ; 1 bytes @ 0x17
  5293                           
  5294                           
  5295                           ; 2 bytes @ 0x17
  5296  0037                     	ds	1
  5297  0038                     Wireless_determineTransmitPower@initialise:	
  5298  0038                     I2C_ByteWrite@status:	
  5299                           ; 1 bytes @ 0x18
  5300                           
  5301                           
  5302                           ; 1 bytes @ 0x18
  5303  0038                     	ds	1
  5304  0039                     Wireless_determineTransmitPower@testPayload:	
  5305  0039                     Wireless_checkDataReceived@channel:	
  5306                           ; 1 bytes @ 0x19
  5307                           
  5308                           
  5309                           ; 1 bytes @ 0x19
  5310  0039                     	ds	1
  5311  003A                     Wireless_determineTransmitPower@latestResult:	
  5312  003A                     I2C_BufferRead@slaveAddr:	
  5313                           ; 1 bytes @ 0x1A
  5314                           
  5315                           
  5316                           ; 1 bytes @ 0x1A
  5317  003A                     	ds	1
  5318  003B                     I2C_BufferRead@status:	
  5319  003B                     ___ftdiv@cntr:	
  5320                           ; 1 bytes @ 0x1B
  5321                           
  5322                           
  5323                           ; 1 bytes @ 0x1B
  5324  003B                     	ds	1
  5325  003C                     ??_BMP_init:	
  5326  003C                     ?_HMC5883L_I2C_BufferRead:	
  5327                           ; 1 bytes @ 0x1C
  5328                           
  5329  003C                     HMC5883L_I2C_BufferRead@pBuffer:	
  5330                           ; 1 bytes @ 0x1C
  5331                           
  5332  003C                     ___ftdiv@f3:	
  5333                           ; 2 bytes @ 0x1C
  5334                           
  5335                           
  5336                           ; 3 bytes @ 0x1C
  5337  003C                     	ds	2
  5338  003E                     HMC5883L_I2C_BufferRead@ReadAddr:	
  5339                           
  5340                           ; 1 bytes @ 0x1E
  5341  003E                     	ds	1
  5342  003F                     BMP_init@t:	
  5343  003F                     ___ftdiv@exp:	
  5344                           ; 1 bytes @ 0x1F
  5345                           
  5346  003F                     HMC5883L_I2C_BufferRead@NumByteToRead:	
  5347                           ; 1 bytes @ 0x1F
  5348                           
  5349                           
  5350                           ; 2 bytes @ 0x1F
  5351  003F                     	ds	1
  5352  0040                     ___ftdiv@sign:	
  5353                           
  5354                           ; 1 bytes @ 0x20
  5355  0040                     	ds	1
  5356  0041                     ??_HMC5883L_I2C_BufferRead:	
  5357  0041                     ?_Sensor_getSupplyVoltage:	
  5358                           ; 1 bytes @ 0x21
  5359                           
  5360  0041                     ?___ftneg:	
  5361                           ; 3 bytes @ 0x21
  5362                           
  5363  0041                     ___ftneg@f1:	
  5364                           ; 3 bytes @ 0x21
  5365                           
  5366                           
  5367                           ; 3 bytes @ 0x21
  5368  0041                     	ds	1
  5369  0042                     HMC5883L_I2C_BufferRead@slaveAddr:	
  5370                           
  5371                           ; 1 bytes @ 0x22
  5372  0042                     	ds	1
  5373  0043                     ?_HMC5883L_ReadBits:	
  5374  0043                     HMC5883L_ReadBits@regAddr:	
  5375                           ; 1 bytes @ 0x23
  5376                           
  5377                           
  5378                           ; 1 bytes @ 0x23
  5379  0043                     	ds	1
  5380  0044                     ??_Sensor_getSupplyVoltage:	
  5381  0044                     ??___ftneg:	
  5382                           ; 1 bytes @ 0x24
  5383                           
  5384  0044                     HMC5883L_ReadBits@bitStart:	
  5385                           ; 1 bytes @ 0x24
  5386                           
  5387  0044                     Sensor_getSupplyVoltage@voltage:	
  5388                           ; 1 bytes @ 0x24
  5389                           
  5390                           
  5391                           ; 3 bytes @ 0x24
  5392  0044                     	ds	1
  5393  0045                     HMC5883L_ReadBits@length:	
  5394                           
  5395                           ; 1 bytes @ 0x25
  5396  0045                     	ds	1
  5397  0046                     HMC5883L_ReadBits@data:	
  5398                           
  5399                           ; 1 bytes @ 0x26
  5400  0046                     	ds	1
  5401  0047                     ??_HMC5883L_ReadBits:	
  5402  0047                     Sensor_getSupplyVoltage@res:	
  5403                           ; 1 bytes @ 0x27
  5404                           
  5405                           
  5406                           ; 2 bytes @ 0x27
  5407  0047                     	ds	2
  5408  0049                     ?___ftadd:	
  5409  0049                     ___ftadd@f1:	
  5410                           ; 3 bytes @ 0x29
  5411                           
  5412                           
  5413                           ; 3 bytes @ 0x29
  5414  0049                     	ds	1
  5415  004A                     HMC5883L_ReadBits@slaveAddr:	
  5416                           
  5417                           ; 1 bytes @ 0x2A
  5418  004A                     	ds	1
  5419  004B                     HMC5883L_ReadBits@mask:	
  5420                           
  5421                           ; 1 bytes @ 0x2B
  5422  004B                     	ds	1
  5423  004C                     HMC5883L_ReadBits@tmp:	
  5424  004C                     ___ftadd@f2:	
  5425                           ; 1 bytes @ 0x2C
  5426                           
  5427                           
  5428                           ; 3 bytes @ 0x2C
  5429  004C                     	ds	3
  5430  004F                     ??___ftadd:	
  5431                           
  5432                           ; 1 bytes @ 0x2F
  5433  004F                     	ds	4
  5434  0053                     ___ftadd@sign:	
  5435                           
  5436                           ; 1 bytes @ 0x33
  5437  0053                     	ds	1
  5438  0054                     ___ftadd@exp2:	
  5439                           
  5440                           ; 1 bytes @ 0x34
  5441  0054                     	ds	1
  5442  0055                     ___ftadd@exp1:	
  5443                           
  5444                           ; 1 bytes @ 0x35
  5445  0055                     	ds	1
  5446  0056                     ?___ftmul:	
  5447  0056                     ___ftmul@f1:	
  5448                           ; 3 bytes @ 0x36
  5449                           
  5450                           
  5451                           ; 3 bytes @ 0x36
  5452  0056                     	ds	3
  5453  0059                     ___ftmul@f2:	
  5454                           
  5455                           ; 3 bytes @ 0x39
  5456  0059                     	ds	3
  5457  005C                     ??___ftmul:	
  5458                           
  5459                           ; 1 bytes @ 0x3C
  5460  005C                     	ds	4
  5461  0060                     ___ftmul@exp:	
  5462                           
  5463                           ; 1 bytes @ 0x40
  5464  0060                     	ds	1
  5465  0061                     ___ftmul@f3_as_product:	
  5466                           
  5467                           ; 3 bytes @ 0x41
  5468  0061                     	ds	3
  5469  0064                     ___ftmul@cntr:	
  5470                           
  5471                           ; 1 bytes @ 0x44
  5472  0064                     	ds	1
  5473  0065                     ___ftmul@sign:	
  5474                           
  5475                           ; 1 bytes @ 0x45
  5476  0065                     	ds	1
  5477  0066                     ?___fttol:	
  5478  0066                     ___fttol@f1:	
  5479                           ; 4 bytes @ 0x46
  5480                           
  5481                           
  5482                           ; 3 bytes @ 0x46
  5483  0066                     	ds	4
  5484  006A                     ??___fttol:	
  5485                           
  5486                           ; 1 bytes @ 0x4A
  5487  006A                     	ds	4
  5488                           
  5489                           	psect	maintext
  5490  033D                     __pmaintext:	
  5491 ;;
  5492 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
  5493 ;;
  5494 ;; *************** function _main *****************
  5495 ;; Defined at:
  5496 ;;		line 58 in file "main.c"
  5497 ;; Parameters:    Size  Location     Type
  5498 ;;		None
  5499 ;; Auto vars:     Size  Location     Type
  5500 ;;  doorOpenTime    4    7[BANK3 ] unsigned long 
  5501 ;;  doorClosedUp    4    1[BANK3 ] unsigned long 
  5502 ;;  dur             2    5[BANK3 ] unsigned int 
  5503 ;;  doorStatus      1   11[BANK3 ] enum E3332
  5504 ;;  prevDoorStat    1    0[BANK3 ] enum E3332
  5505 ;; Return value:  Size  Location     Type
  5506 ;;                  1    wreg      void 
  5507 ;; Registers used:
  5508 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5509 ;; Tracked objects:
  5510 ;;		On entry : B1F/0
  5511 ;;		On exit  : 0/0
  5512 ;;		Unchanged: 0/0
  5513 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5514 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5515 ;;      Locals:         0       0       0       0      12       0       0       0       0       0       0       0       
      +0       0
  5516 ;;      Temps:          0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
  5517 ;;      Totals:         0       0       2       0      12       0       0       0       0       0       0       0       
      +0       0
  5518 ;;Total ram usage:       14 bytes
  5519 ;; Hardware stack levels required when called:   12
  5520 ;; This function calls:
  5521 ;;		_BMP_init
  5522 ;;		_BMP_readTemperature
  5523 ;;		_DOOR_init
  5524 ;;		_DOOR_run
  5525 ;;		_SYSTEM_Initialize
  5526 ;;		_Sensor_peripheralSleep
  5527 ;;		_Timeout_getGlobalCounter
  5528 ;;		_Timeout_updateCurrentTime
  5529 ;;		_Wireless_determineTransmitPower
  5530 ;;		_Wireless_init
  5531 ;;		_Wireless_packageData
  5532 ;;		_Wireless_sleep
  5533 ;;		_Wireless_wake
  5534 ;;		___lldiv
  5535 ;;		___lwdiv
  5536 ;;		_setSleepTime
  5537 ;; This function is called by:
  5538 ;;		Startup code after reset
  5539 ;; This function uses a non-reentrant model
  5540 ;;
  5541                           
  5542                           
  5543                           ;psect for function _main
  5544  033D                     _main:	
  5545                           
  5546                           ;main.c: 60: DOOR doorStatus=DOOR_CLOSED,prevDoorStatus=DOOR_CLOSED;
  5547                           
  5548                           ;incstack = 0
  5549                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  5550  033D  0023               	movlb	3	; select bank3
  5551  033E  01DB               	clrf	main@doorStatus^(0+384)
  5552  033F  01D0               	clrf	main@prevDoorStatus^(0+384)
  5553                           
  5554                           ;main.c: 61: unsigned long doorClosedUpdateCounter=0;
  5555  0340  3000               	movlw	0
  5556  0341  00D4               	movwf	(main@doorClosedUpdateCounter+3)^(0+384)
  5557  0342  3000               	movlw	0
  5558  0343  00D3               	movwf	(main@doorClosedUpdateCounter+2)^(0+384)
  5559  0344  3000               	movlw	0
  5560  0345  00D2               	movwf	(main@doorClosedUpdateCounter+1)^(0+384)
  5561  0346  3000               	movlw	0
  5562  0347  00D1               	movwf	main@doorClosedUpdateCounter^(0+384)
  5563                           
  5564                           ;main.c: 62: unsigned long doorOpenTime=0;
  5565  0348  3000               	movlw	0
  5566  0349  00DA               	movwf	(main@doorOpenTime+3)^(0+384)
  5567  034A  3000               	movlw	0
  5568  034B  00D9               	movwf	(main@doorOpenTime+2)^(0+384)
  5569  034C  3000               	movlw	0
  5570  034D  00D8               	movwf	(main@doorOpenTime+1)^(0+384)
  5571  034E  3000               	movlw	0
  5572  034F  00D7               	movwf	main@doorOpenTime^(0+384)
  5573                           
  5574                           ;main.c: 63: unsigned int dur=0;
  5575  0350  01D5               	clrf	main@dur^(0+384)
  5576  0351  01D6               	clrf	(main@dur+1)^(0+384)
  5577                           
  5578                           ;main.c: 66: SYSTEM_Initialize();
  5579  0352  3194  24FF  3183   	fcall	_SYSTEM_Initialize
  5580                           
  5581                           ;main.c: 72: (INTCONbits.GIE = 1);
  5582  0355  178B               	bsf	11,7	;volatile
  5583                           
  5584                           ;main.c: 75: (INTCONbits.PEIE = 1);
  5585  0356  170B               	bsf	11,6	;volatile
  5586                           
  5587                           ;main.c: 82: do { WPUCbits.WPUC5 = 1; } while(0);
  5588  0357  0024               	movlb	4	; select bank4
  5589  0358  168E               	bsf	14,5	;volatile
  5590                           
  5591                           ;main.c: 83: _delay((unsigned long)((1000)*(8000000/4000.0)));
  5592  0359  300B               	movlw	11
  5593  035A  0021               	movlb	1	; select bank1
  5594  035B  00CC               	movwf	(??_main^(0+128)+1)
  5595  035C  3026               	movlw	38
  5596  035D  00CB               	movwf	??_main^(0+128)
  5597  035E  305D               	movlw	93
  5598  035F                     u7087:	
  5599  035F  0B89               	decfsz	9,f
  5600  0360  2B5F               	goto	u7087
  5601  0361  0BCB               	decfsz	??_main^(0+128),f
  5602  0362  2B5F               	goto	u7087
  5603  0363  0BCC               	decfsz	(??_main^(0+128)+1),f
  5604  0364  2B5F               	goto	u7087
  5605  0365  3200               	nop2
  5606                           
  5607                           ;main.c: 84: Sensor_peripheralSleep();
  5608  0366  3192  22EE  3183   	fcall	_Sensor_peripheralSleep
  5609                           
  5610                           ;main.c: 85: Wireless_init();
  5611  0369  318B  23F0  3183   	fcall	_Wireless_init
  5612                           
  5613                           ;main.c: 86: BMP_init();
  5614  036C  318B  2307  3183   	fcall	_BMP_init
  5615                           
  5616                           ;main.c: 93: setSleepTime(10000/1000);
  5617  036F  300A               	movlw	10
  5618  0370  0020               	movlb	0	; select bank0
  5619  0371  00A1               	movwf	setSleepTime@timeSec
  5620  0372  3000               	movlw	0
  5621  0373  00A2               	movwf	setSleepTime@timeSec+1
  5622  0374  3192  22F8  3183   	fcall	_setSleepTime
  5623                           
  5624                           ;main.c: 94: DOOR_init();
  5625  0377  3180  2002  3183   	fcall	_DOOR_init
  5626                           
  5627                           ;main.c: 95: do { LATCbits.LATC6 = 1; } while(0);
  5628  037A  0022               	movlb	2	; select bank2
  5629  037B  170E               	bsf	14,6	;volatile
  5630                           
  5631                           ;main.c: 96: _delay((unsigned long)((500)*(8000000/4000.0)));
  5632  037C  3006               	movlw	6
  5633  037D  0021               	movlb	1	; select bank1
  5634  037E  00CC               	movwf	(??_main^(0+128)+1)
  5635  037F  3013               	movlw	19
  5636  0380  00CB               	movwf	??_main^(0+128)
  5637  0381  30AD               	movlw	173
  5638  0382                     u7097:	
  5639  0382  0B89               	decfsz	9,f
  5640  0383  2B82               	goto	u7097
  5641  0384  0BCB               	decfsz	??_main^(0+128),f
  5642  0385  2B82               	goto	u7097
  5643  0386  0BCC               	decfsz	(??_main^(0+128)+1),f
  5644  0387  2B82               	goto	u7097
  5645  0388  3200               	nop2
  5646                           
  5647                           ;main.c: 97: do { LATCbits.LATC6 = 0; } while(0);
  5648  0389  0022               	movlb	2	; select bank2
  5649  038A  130E               	bcf	14,6	;volatile
  5650                           
  5651                           ;main.c: 98: Wireless_wake();
  5652  038B  3195  25E1  3183   	fcall	_Wireless_wake
  5653                           
  5654                           ;main.c: 99: Wireless_determineTransmitPower(1);
  5655  038E  3001               	movlw	1
  5656  038F  318D  250A  3183   	fcall	_Wireless_determineTransmitPower
  5657                           
  5658                           ;main.c: 100: Wireless_packageData(doorStatus,doorOpenTime/1000,BMP_readTemperature());
  5659  0392  3000               	movlw	0
  5660  0393  0020               	movlb	0	; select bank0
  5661  0394  00A4               	movwf	___lldiv@divisor+3
  5662  0395  3000               	movlw	0
  5663  0396  00A3               	movwf	___lldiv@divisor+2
  5664  0397  3003               	movlw	3
  5665  0398  00A2               	movwf	___lldiv@divisor+1
  5666  0399  30E8               	movlw	232
  5667  039A  00A1               	movwf	___lldiv@divisor
  5668  039B  0023               	movlb	3	; select bank3
  5669  039C  085A               	movf	(main@doorOpenTime+3)^(0+384),w
  5670  039D  0020               	movlb	0	; select bank0
  5671  039E  00A8               	movwf	___lldiv@dividend+3
  5672  039F  0023               	movlb	3	; select bank3
  5673  03A0  0859               	movf	(main@doorOpenTime+2)^(0+384),w
  5674  03A1  0020               	movlb	0	; select bank0
  5675  03A2  00A7               	movwf	___lldiv@dividend+2
  5676  03A3  0023               	movlb	3	; select bank3
  5677  03A4  0858               	movf	(main@doorOpenTime+1)^(0+384),w
  5678  03A5  0020               	movlb	0	; select bank0
  5679  03A6  00A6               	movwf	___lldiv@dividend+1
  5680  03A7  0023               	movlb	3	; select bank3
  5681  03A8  0857               	movf	main@doorOpenTime^(0+384),w
  5682  03A9  0020               	movlb	0	; select bank0
  5683  03AA  00A5               	movwf	___lldiv@dividend
  5684  03AB  3189  213E  3183   	fcall	___lldiv
  5685  03AE  0020               	movlb	0	; select bank0
  5686  03AF  0821               	movf	?___lldiv,w
  5687  03B0  0021               	movlb	1	; select bank1
  5688  03B1  00CB               	movwf	??_main^(0+128)
  5689  03B2  084B               	movf	??_main^(0+128),w
  5690  03B3  00BA               	movwf	Wireless_packageData@openTime^(0+128)
  5691  03B4  3180  206F  3183   	fcall	_BMP_readTemperature
  5692  03B7  0021               	movlb	1	; select bank1
  5693  03B8  0826               	movf	?_BMP_readTemperature^(0+128),w
  5694  03B9  00BB               	movwf	Wireless_packageData@tempC^(0+128)
  5695  03BA  0827               	movf	(?_BMP_readTemperature+1)^(0+128),w
  5696  03BB  00BC               	movwf	(Wireless_packageData@tempC+1)^(0+128)
  5697  03BC  0828               	movf	(?_BMP_readTemperature+2)^(0+128),w
  5698  03BD  00BD               	movwf	(Wireless_packageData@tempC+2)^(0+128)
  5699  03BE  0023               	movlb	3	; select bank3
  5700  03BF  085B               	movf	main@doorStatus^(0+384),w
  5701  03C0  3186  267D  3183   	fcall	_Wireless_packageData
  5702                           
  5703                           ;main.c: 101: Wireless_sleep();
  5704  03C3  3194  2499  3183   	fcall	_Wireless_sleep
  5705  03C6                     l6679:	
  5706                           ;main.c: 103: while (1)
  5707                           
  5708                           
  5709                           ;main.c: 104: {
  5710                           ;main.c: 105: Timeout_updateCurrentTime();
  5711  03C6  318A  2244  3183   	fcall	_Timeout_updateCurrentTime
  5712                           
  5713                           ;main.c: 106: if(PORTCbits.RC5==0)
  5714  03C9  0020               	movlb	0	; select bank0
  5715  03CA  1A8E               	btfsc	14,5	;volatile
  5716  03CB  2C23               	goto	l6695
  5717                           
  5718                           ;main.c: 107: {
  5719                           ;main.c: 109: do { LATCbits.LATC6 = 1; } while(0);
  5720  03CC  0022               	movlb	2	; select bank2
  5721  03CD  170E               	bsf	14,6	;volatile
  5722                           
  5723                           ;main.c: 110: _delay((unsigned long)((500)*(8000000/4000.0)));
  5724  03CE  3006               	movlw	6
  5725  03CF  0021               	movlb	1	; select bank1
  5726  03D0  00CC               	movwf	(??_main^(0+128)+1)
  5727  03D1  3013               	movlw	19
  5728  03D2  00CB               	movwf	??_main^(0+128)
  5729  03D3  30AD               	movlw	173
  5730  03D4                     u7107:	
  5731  03D4  0B89               	decfsz	9,f
  5732  03D5  2BD4               	goto	u7107
  5733  03D6  0BCB               	decfsz	??_main^(0+128),f
  5734  03D7  2BD4               	goto	u7107
  5735  03D8  0BCC               	decfsz	(??_main^(0+128)+1),f
  5736  03D9  2BD4               	goto	u7107
  5737  03DA  3200               	nop2
  5738                           
  5739                           ;main.c: 111: do { LATCbits.LATC6 = 0; } while(0);
  5740  03DB  0022               	movlb	2	; select bank2
  5741  03DC  130E               	bcf	14,6	;volatile
  5742                           
  5743                           ;main.c: 112: Wireless_wake();
  5744  03DD  3195  25E1  3183   	fcall	_Wireless_wake
  5745                           
  5746                           ;main.c: 113: dur = Timeout_getGlobalCounter() - doorOpenTime;
  5747  03E0  0023               	movlb	3	; select bank3
  5748  03E1  0957               	comf	main@doorOpenTime^(0+384),w
  5749  03E2  0021               	movlb	1	; select bank1
  5750  03E3  00CB               	movwf	??_main^(0+128)
  5751  03E4  0023               	movlb	3	; select bank3
  5752  03E5  0958               	comf	(main@doorOpenTime+1)^(0+384),w
  5753  03E6  0021               	movlb	1	; select bank1
  5754  03E7  00CC               	movwf	(??_main^(0+128)+1)
  5755  03E8  0ACB               	incf	??_main^(0+128),f
  5756  03E9  1903               	skipnz
  5757  03EA  0ACC               	incf	(??_main^(0+128)+1),f
  5758  03EB  3193  23E4  3183   	fcall	_Timeout_getGlobalCounter
  5759  03EE  0021               	movlb	1	; select bank1
  5760  03EF  084B               	movf	??_main^(0+128),w
  5761  03F0  0020               	movlb	0	; select bank0
  5762  03F1  0721               	addwf	?_Timeout_getGlobalCounter,w
  5763  03F2  0023               	movlb	3	; select bank3
  5764  03F3  00D5               	movwf	main@dur^(0+384)
  5765  03F4  0021               	movlb	1	; select bank1
  5766  03F5  084C               	movf	(??_main+1)^(0+128),w
  5767  03F6  0020               	movlb	0	; select bank0
  5768  03F7  3D22               	addwfc	?_Timeout_getGlobalCounter+1,w
  5769  03F8  0023               	movlb	3	; select bank3
  5770  03F9  00D6               	movwf	(main@dur+1)^(0+384)
  5771                           
  5772                           ;main.c: 114: Wireless_packageData(doorStatus,dur/1000,BMP_readTemperature());
  5773  03FA  30E8               	movlw	232
  5774  03FB  0020               	movlb	0	; select bank0
  5775  03FC  00A1               	movwf	___lwdiv@divisor
  5776  03FD  3003               	movlw	3
  5777  03FE  00A2               	movwf	___lwdiv@divisor+1
  5778  03FF  0023               	movlb	3	; select bank3
  5779  0400  0856               	movf	(main@dur+1)^(0+384),w
  5780  0401  0020               	movlb	0	; select bank0
  5781  0402  00A4               	movwf	___lwdiv@dividend+1
  5782  0403  0023               	movlb	3	; select bank3
  5783  0404  0855               	movf	main@dur^(0+384),w
  5784  0405  0020               	movlb	0	; select bank0
  5785  0406  00A3               	movwf	___lwdiv@dividend
  5786  0407  3197  278F  3183   	fcall	___lwdiv
  5787  040A  0020               	movlb	0	; select bank0
  5788  040B  0821               	movf	?___lwdiv,w
  5789  040C  0021               	movlb	1	; select bank1
  5790  040D  00CB               	movwf	??_main^(0+128)
  5791  040E  084B               	movf	??_main^(0+128),w
  5792  040F  00BA               	movwf	Wireless_packageData@openTime^(0+128)
  5793  0410  3180  206F  3183   	fcall	_BMP_readTemperature
  5794  0413  0021               	movlb	1	; select bank1
  5795  0414  0826               	movf	?_BMP_readTemperature^(0+128),w
  5796  0415  00BB               	movwf	Wireless_packageData@tempC^(0+128)
  5797  0416  0827               	movf	(?_BMP_readTemperature+1)^(0+128),w
  5798  0417  00BC               	movwf	(Wireless_packageData@tempC+1)^(0+128)
  5799  0418  0828               	movf	(?_BMP_readTemperature+2)^(0+128),w
  5800  0419  00BD               	movwf	(Wireless_packageData@tempC+2)^(0+128)
  5801  041A  0023               	movlb	3	; select bank3
  5802  041B  085B               	movf	main@doorStatus^(0+384),w
  5803  041C  3186  267D  3183   	fcall	_Wireless_packageData
  5804                           
  5805                           ;main.c: 115: Wireless_sleep();
  5806  041F  3194  2499  3183   	fcall	_Wireless_sleep
  5807                           
  5808                           ;main.c: 116: }
  5809  0422  2C2B               	goto	l6697
  5810  0423                     l6695:	
  5811                           
  5812                           ;main.c: 117: else
  5813                           ;main.c: 118: doorStatus=DOOR_run();
  5814  0423  3192  22D8  3183   	fcall	_DOOR_run
  5815  0426  0021               	movlb	1	; select bank1
  5816  0427  00CB               	movwf	??_main^(0+128)
  5817  0428  084B               	movf	??_main^(0+128),w
  5818  0429  0023               	movlb	3	; select bank3
  5819  042A  00DB               	movwf	main@doorStatus^(0+384)
  5820  042B                     l6697:	
  5821                           
  5822                           ;main.c: 121: if((doorStatus!=prevDoorStatus && doorStatus!=DOOR_ERROR))
  5823  042B  0023               	movlb	3	; select bank3
  5824  042C  085B               	movf	main@doorStatus^(0+384),w
  5825  042D  0650               	xorwf	main@prevDoorStatus^(0+384),w
  5826  042E  1903               	skipnz
  5827  042F  2C9C               	goto	l6719
  5828  0430  3002               	movlw	2
  5829  0431  065B               	xorwf	main@doorStatus^(0+384),w
  5830  0432  1903               	btfsc	3,2
  5831  0433  2C9C               	goto	l6719
  5832                           
  5833                           ;main.c: 122: {
  5834                           ;main.c: 123: Wireless_wake();
  5835  0434  3195  25E1  3183   	fcall	_Wireless_wake
  5836                           
  5837                           ;main.c: 124: if(doorStatus==DOOR_OPEN)
  5838  0437  0023               	movlb	3	; select bank3
  5839  0438  035B               	decf	main@doorStatus^(0+384),w
  5840  0439  1D03               	btfss	3,2
  5841  043A  2C3E               	goto	l6709
  5842                           
  5843                           ;main.c: 125: {
  5844                           ;main.c: 126: Wireless_packageData(doorStatus,0,BMP_readTemperature());
  5845  043B  0021               	movlb	1	; select bank1
  5846  043C  01BA               	clrf	Wireless_packageData@openTime^(0+128)
  5847  043D  2C6D               	goto	L4
  5848  043E                     l6709:	
  5849                           ;main.c: 131: }
  5850                           
  5851                           ;main.c: 127: doorOpenTime= Timeout_getGlobalCounter();
  5852                           
  5853                           
  5854                           ;main.c: 132: else
  5855                           ;main.c: 133: {
  5856                           ;main.c: 134: dur = Timeout_getGlobalCounter() - doorOpenTime;
  5857  043E  0957               	comf	main@doorOpenTime^(0+384),w
  5858  043F  0021               	movlb	1	; select bank1
  5859  0440  00CB               	movwf	??_main^(0+128)
  5860  0441  0023               	movlb	3	; select bank3
  5861  0442  0958               	comf	(main@doorOpenTime+1)^(0+384),w
  5862  0443  0021               	movlb	1	; select bank1
  5863  0444  00CC               	movwf	(??_main^(0+128)+1)
  5864  0445  0ACB               	incf	??_main^(0+128),f
  5865  0446  1903               	skipnz
  5866  0447  0ACC               	incf	(??_main^(0+128)+1),f
  5867  0448  3193  23E4  3183   	fcall	_Timeout_getGlobalCounter
  5868  044B  0021               	movlb	1	; select bank1
  5869  044C  084B               	movf	??_main^(0+128),w
  5870  044D  0020               	movlb	0	; select bank0
  5871  044E  0721               	addwf	?_Timeout_getGlobalCounter,w
  5872  044F  0023               	movlb	3	; select bank3
  5873  0450  00D5               	movwf	main@dur^(0+384)
  5874  0451  0021               	movlb	1	; select bank1
  5875  0452  084C               	movf	(??_main+1)^(0+128),w
  5876  0453  0020               	movlb	0	; select bank0
  5877  0454  3D22               	addwfc	?_Timeout_getGlobalCounter+1,w
  5878  0455  0023               	movlb	3	; select bank3
  5879  0456  00D6               	movwf	(main@dur+1)^(0+384)
  5880                           
  5881                           ;main.c: 135: Wireless_packageData(doorStatus,dur/1000,BMP_readTemperature());
  5882  0457  30E8               	movlw	232
  5883  0458  0020               	movlb	0	; select bank0
  5884  0459  00A1               	movwf	___lwdiv@divisor
  5885  045A  3003               	movlw	3
  5886  045B  00A2               	movwf	___lwdiv@divisor+1
  5887  045C  0023               	movlb	3	; select bank3
  5888  045D  0856               	movf	(main@dur+1)^(0+384),w
  5889  045E  0020               	movlb	0	; select bank0
  5890  045F  00A4               	movwf	___lwdiv@dividend+1
  5891  0460  0023               	movlb	3	; select bank3
  5892  0461  0855               	movf	main@dur^(0+384),w
  5893  0462  0020               	movlb	0	; select bank0
  5894  0463  00A3               	movwf	___lwdiv@dividend
  5895  0464  3197  278F  3183   	fcall	___lwdiv
  5896  0467  0020               	movlb	0	; select bank0
  5897  0468  0821               	movf	?___lwdiv,w
  5898  0469  0021               	movlb	1	; select bank1
  5899  046A  00CB               	movwf	??_main^(0+128)
  5900  046B  084B               	movf	??_main^(0+128),w
  5901  046C  00BA               	movwf	Wireless_packageData@openTime^(0+128)
  5902  046D                     L4:	
  5903  046D  3180  206F  3183   	fcall	_BMP_readTemperature
  5904  0470  0021               	movlb	1	; select bank1
  5905  0471  0826               	movf	?_BMP_readTemperature^(0+128),w
  5906  0472  00BB               	movwf	Wireless_packageData@tempC^(0+128)
  5907  0473  0827               	movf	(?_BMP_readTemperature+1)^(0+128),w
  5908  0474  00BC               	movwf	(Wireless_packageData@tempC+1)^(0+128)
  5909  0475  0828               	movf	(?_BMP_readTemperature+2)^(0+128),w
  5910  0476  00BD               	movwf	(Wireless_packageData@tempC+2)^(0+128)
  5911  0477  0023               	movlb	3	; select bank3
  5912  0478  085B               	movf	main@doorStatus^(0+384),w
  5913  0479  3186  267D  3183   	fcall	_Wireless_packageData
  5914                           
  5915                           ;main.c: 136: doorOpenTime = Timeout_getGlobalCounter();
  5916  047C  3193  23E4  3183   	fcall	_Timeout_getGlobalCounter
  5917  047F  0020               	movlb	0	; select bank0
  5918  0480  0824               	movf	?_Timeout_getGlobalCounter+3,w
  5919  0481  0023               	movlb	3	; select bank3
  5920  0482  00DA               	movwf	(main@doorOpenTime+3)^(0+384)
  5921  0483  0020               	movlb	0	; select bank0
  5922  0484  0823               	movf	?_Timeout_getGlobalCounter+2,w
  5923  0485  0023               	movlb	3	; select bank3
  5924  0486  00D9               	movwf	(main@doorOpenTime+2)^(0+384)
  5925  0487  0020               	movlb	0	; select bank0
  5926  0488  0822               	movf	?_Timeout_getGlobalCounter+1,w
  5927  0489  0023               	movlb	3	; select bank3
  5928  048A  00D8               	movwf	(main@doorOpenTime+1)^(0+384)
  5929  048B  0020               	movlb	0	; select bank0
  5930  048C  0821               	movf	?_Timeout_getGlobalCounter,w
  5931  048D  0023               	movlb	3	; select bank3
  5932  048E  00D7               	movwf	main@doorOpenTime^(0+384)
  5933                           
  5934                           ;main.c: 137: }
  5935                           ;main.c: 138: Wireless_sleep();
  5936  048F  3194  2499  3183   	fcall	_Wireless_sleep
  5937                           
  5938                           ;main.c: 139: doorClosedUpdateCounter=0;
  5939  0492  3000               	movlw	0
  5940  0493  0023               	movlb	3	; select bank3
  5941  0494  00D4               	movwf	(main@doorClosedUpdateCounter+3)^(0+384)
  5942  0495  3000               	movlw	0
  5943  0496  00D3               	movwf	(main@doorClosedUpdateCounter+2)^(0+384)
  5944  0497  3000               	movlw	0
  5945  0498  00D2               	movwf	(main@doorClosedUpdateCounter+1)^(0+384)
  5946  0499  3000               	movlw	0
  5947  049A  00D1               	movwf	main@doorClosedUpdateCounter^(0+384)
  5948                           
  5949                           ;main.c: 140: }
  5950  049B  2D24               	goto	l6749
  5951  049C                     l6719:	
  5952                           
  5953                           ;main.c: 141: else if(doorStatus==DOOR_OPEN)
  5954  049C  035B               	decf	main@doorStatus^(0+384),w
  5955  049D  1D03               	btfss	3,2
  5956  049E  2CD9               	goto	l6735
  5957                           
  5958                           ;main.c: 142: {
  5959                           ;main.c: 143: dur = Timeout_getGlobalCounter()-doorOpenTime;
  5960  049F  0957               	comf	main@doorOpenTime^(0+384),w
  5961  04A0  0021               	movlb	1	; select bank1
  5962  04A1  00CB               	movwf	??_main^(0+128)
  5963  04A2  0023               	movlb	3	; select bank3
  5964  04A3  0958               	comf	(main@doorOpenTime+1)^(0+384),w
  5965  04A4  0021               	movlb	1	; select bank1
  5966  04A5  00CC               	movwf	(??_main^(0+128)+1)
  5967  04A6  0ACB               	incf	??_main^(0+128),f
  5968  04A7  1903               	skipnz
  5969  04A8  0ACC               	incf	(??_main^(0+128)+1),f
  5970  04A9  3193  23E4  3183   	fcall	_Timeout_getGlobalCounter
  5971  04AC  0021               	movlb	1	; select bank1
  5972  04AD  084B               	movf	??_main^(0+128),w
  5973  04AE  0020               	movlb	0	; select bank0
  5974  04AF  0721               	addwf	?_Timeout_getGlobalCounter,w
  5975  04B0  0023               	movlb	3	; select bank3
  5976  04B1  00D5               	movwf	main@dur^(0+384)
  5977  04B2  0021               	movlb	1	; select bank1
  5978  04B3  084C               	movf	(??_main+1)^(0+128),w
  5979  04B4  0020               	movlb	0	; select bank0
  5980  04B5  3D22               	addwfc	?_Timeout_getGlobalCounter+1,w
  5981  04B6  0023               	movlb	3	; select bank3
  5982  04B7  00D6               	movwf	(main@dur+1)^(0+384)
  5983                           
  5984                           ;main.c: 144: if(dur>=60000)
  5985  04B8  30EA               	movlw	234
  5986  04B9  0256               	subwf	(main@dur+1)^(0+384),w
  5987  04BA  3060               	movlw	96
  5988  04BB  1903               	skipnz
  5989  04BC  0255               	subwf	main@dur^(0+384),w
  5990  04BD  1C03               	skipc
  5991  04BE  2D24               	goto	l6749
  5992                           
  5993                           ;main.c: 145: {
  5994                           ;main.c: 146: Wireless_wake();
  5995  04BF  3195  25E1  3183   	fcall	_Wireless_wake
  5996                           
  5997                           ;main.c: 147: Wireless_packageData(doorStatus,dur/1000,BMP_readTemperature());
  5998  04C2  30E8               	movlw	232
  5999  04C3  0020               	movlb	0	; select bank0
  6000  04C4  00A1               	movwf	___lwdiv@divisor
  6001  04C5  3003               	movlw	3
  6002  04C6  00A2               	movwf	___lwdiv@divisor+1
  6003  04C7  0023               	movlb	3	; select bank3
  6004  04C8  0856               	movf	(main@dur+1)^(0+384),w
  6005  04C9  0020               	movlb	0	; select bank0
  6006  04CA  00A4               	movwf	___lwdiv@dividend+1
  6007  04CB  0023               	movlb	3	; select bank3
  6008  04CC  0855               	movf	main@dur^(0+384),w
  6009  04CD  0020               	movlb	0	; select bank0
  6010  04CE  00A3               	movwf	___lwdiv@dividend
  6011  04CF  3197  278F  3183   	fcall	___lwdiv
  6012  04D2  0020               	movlb	0	; select bank0
  6013  04D3  0821               	movf	?___lwdiv,w
  6014  04D4  0021               	movlb	1	; select bank1
  6015  04D5  00CB               	movwf	??_main^(0+128)
  6016  04D6  084B               	movf	??_main^(0+128),w
  6017  04D7  00BA               	movwf	Wireless_packageData@openTime^(0+128)
  6018  04D8  2CF6               	goto	L5
  6019  04D9                     l6735:	
  6020                           ;main.c: 151: }
  6021                           ;main.c: 153: }
  6022                           
  6023                           ;main.c: 150: doorOpenTime=Timeout_getGlobalCounter();
  6024                           
  6025                           ;main.c: 149: doorClosedUpdateCounter=0;
  6026                           
  6027                           ;main.c: 148: Wireless_sleep();
  6028                           
  6029                           
  6030                           ;main.c: 154: else if(doorClosedUpdateCounter>=sensorUpdatePeriod)
  6031  04D9  0022               	movlb	2	; select bank2
  6032  04DA  0869               	movf	(_sensorUpdatePeriod+3)^(0+256),w
  6033  04DB  0023               	movlb	3	; select bank3
  6034  04DC  0254               	subwf	(main@doorClosedUpdateCounter+3)^(0+384),w
  6035  04DD  1D03               	skipz
  6036  04DE  2CEF               	goto	u6815
  6037  04DF  0022               	movlb	2	; select bank2
  6038  04E0  0868               	movf	(_sensorUpdatePeriod+2)^(0+256),w
  6039  04E1  0023               	movlb	3	; select bank3
  6040  04E2  0253               	subwf	(main@doorClosedUpdateCounter+2)^(0+384),w
  6041  04E3  1D03               	skipz
  6042  04E4  2CEF               	goto	u6815
  6043  04E5  0022               	movlb	2	; select bank2
  6044  04E6  0867               	movf	(_sensorUpdatePeriod+1)^(0+256),w
  6045  04E7  0023               	movlb	3	; select bank3
  6046  04E8  0252               	subwf	(main@doorClosedUpdateCounter+1)^(0+384),w
  6047  04E9  1D03               	skipz
  6048  04EA  2CEF               	goto	u6815
  6049  04EB  0022               	movlb	2	; select bank2
  6050  04EC  0866               	movf	_sensorUpdatePeriod^(0+256),w
  6051  04ED  0023               	movlb	3	; select bank3
  6052  04EE  0251               	subwf	main@doorClosedUpdateCounter^(0+384),w
  6053  04EF                     u6815:	
  6054  04EF  1C03               	skipc
  6055  04F0  2D11               	goto	l6747
  6056                           
  6057                           ;main.c: 155: {
  6058                           ;main.c: 156: Wireless_wake();
  6059  04F1  3195  25E1  3183   	fcall	_Wireless_wake
  6060                           
  6061                           ;main.c: 157: Wireless_packageData(doorStatus,0,BMP_readTemperature());
  6062  04F4  0021               	movlb	1	; select bank1
  6063  04F5  01BA               	clrf	Wireless_packageData@openTime^(0+128)
  6064  04F6                     L5:	
  6065  04F6  3180  206F  3183   	fcall	_BMP_readTemperature
  6066  04F9  0021               	movlb	1	; select bank1
  6067  04FA  0826               	movf	?_BMP_readTemperature^(0+128),w
  6068  04FB  00BB               	movwf	Wireless_packageData@tempC^(0+128)
  6069  04FC  0827               	movf	(?_BMP_readTemperature+1)^(0+128),w
  6070  04FD  00BC               	movwf	(Wireless_packageData@tempC+1)^(0+128)
  6071  04FE  0828               	movf	(?_BMP_readTemperature+2)^(0+128),w
  6072  04FF  00BD               	movwf	(Wireless_packageData@tempC+2)^(0+128)
  6073  0500  0023               	movlb	3	; select bank3
  6074  0501  085B               	movf	main@doorStatus^(0+384),w
  6075  0502  3186  267D  3183   	fcall	_Wireless_packageData
  6076                           
  6077                           ;main.c: 158: Wireless_sleep();
  6078  0505  3194  2499  3183   	fcall	_Wireless_sleep
  6079                           
  6080                           ;main.c: 159: doorClosedUpdateCounter=0;
  6081  0508  3000               	movlw	0
  6082  0509  0023               	movlb	3	; select bank3
  6083  050A  00D4               	movwf	(main@doorClosedUpdateCounter+3)^(0+384)
  6084  050B  3000               	movlw	0
  6085  050C  00D3               	movwf	(main@doorClosedUpdateCounter+2)^(0+384)
  6086  050D  3000               	movlw	0
  6087  050E  00D2               	movwf	(main@doorClosedUpdateCounter+1)^(0+384)
  6088  050F  3000               	movlw	0
  6089  0510  00D1               	movwf	main@doorClosedUpdateCounter^(0+384)
  6090  0511                     l6747:	
  6091                           ;main.c: 161: }
  6092                           
  6093                           ;main.c: 160: doorOpenTime = Timeout_getGlobalCounter();
  6094                           
  6095                           
  6096                           ;main.c: 162: else
  6097                           ;main.c: 163: {
  6098                           ;main.c: 165: doorOpenTime=Timeout_getGlobalCounter();
  6099  0511  3193  23E4  3183   	fcall	_Timeout_getGlobalCounter
  6100  0514  0020               	movlb	0	; select bank0
  6101  0515  0824               	movf	?_Timeout_getGlobalCounter+3,w
  6102  0516  0023               	movlb	3	; select bank3
  6103  0517  00DA               	movwf	(main@doorOpenTime+3)^(0+384)
  6104  0518  0020               	movlb	0	; select bank0
  6105  0519  0823               	movf	?_Timeout_getGlobalCounter+2,w
  6106  051A  0023               	movlb	3	; select bank3
  6107  051B  00D9               	movwf	(main@doorOpenTime+2)^(0+384)
  6108  051C  0020               	movlb	0	; select bank0
  6109  051D  0822               	movf	?_Timeout_getGlobalCounter+1,w
  6110  051E  0023               	movlb	3	; select bank3
  6111  051F  00D8               	movwf	(main@doorOpenTime+1)^(0+384)
  6112  0520  0020               	movlb	0	; select bank0
  6113  0521  0821               	movf	?_Timeout_getGlobalCounter,w
  6114  0522  0023               	movlb	3	; select bank3
  6115  0523  00D7               	movwf	main@doorOpenTime^(0+384)
  6116  0524                     l6749:	
  6117                           
  6118                           ;main.c: 166: }
  6119                           ;main.c: 168: prevDoorStatus=doorStatus;
  6120  0524  085B               	movf	main@doorStatus^(0+384),w
  6121  0525  0021               	movlb	1	; select bank1
  6122  0526  00CB               	movwf	??_main^(0+128)
  6123  0527  084B               	movf	??_main^(0+128),w
  6124  0528  0023               	movlb	3	; select bank3
  6125  0529  00D0               	movwf	main@prevDoorStatus^(0+384)
  6126                           
  6127                           ;main.c: 169: doorClosedUpdateCounter+=10000;
  6128  052A  3010               	movlw	16
  6129  052B  07D1               	addwf	main@doorClosedUpdateCounter^(0+384),f
  6130  052C  3027               	movlw	39
  6131  052D  3DD2               	addwfc	(main@doorClosedUpdateCounter+1)^(0+384),f
  6132  052E  3000               	movlw	0
  6133  052F  3DD3               	addwfc	(main@doorClosedUpdateCounter+2)^(0+384),f
  6134  0530  3000               	movlw	0
  6135  0531  3DD4               	addwfc	(main@doorClosedUpdateCounter+3)^(0+384),f
  6136  0532  0063               	sleep	;# 
  6137  0533  2BC6               	goto	l6679
  6138  0534                     __end_of_main:	
  6139                           
  6140                           	psect	text1
  6141  12F8                     __ptext1:	
  6142 ;; *************** function _setSleepTime *****************
  6143 ;; Defined at:
  6144 ;;		line 7 in file "common.c"
  6145 ;; Parameters:    Size  Location     Type
  6146 ;;  timeSec         2    1[BANK0 ] unsigned short 
  6147 ;; Auto vars:     Size  Location     Type
  6148 ;;		None
  6149 ;; Return value:  Size  Location     Type
  6150 ;;                  1    wreg      void 
  6151 ;; Registers used:
  6152 ;;		wreg
  6153 ;; Tracked objects:
  6154 ;;		On entry : 0/0
  6155 ;;		On exit  : 0/0
  6156 ;;		Unchanged: 0/0
  6157 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6158 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6159 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6160 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6161 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6162 ;;Total ram usage:        2 bytes
  6163 ;; Hardware stack levels used:    1
  6164 ;; Hardware stack levels required when called:    4
  6165 ;; This function calls:
  6166 ;;		Nothing
  6167 ;; This function is called by:
  6168 ;;		_main
  6169 ;; This function uses a non-reentrant model
  6170 ;;
  6171                           
  6172                           
  6173                           ;psect for function _setSleepTime
  6174  12F8                     _setSleepTime:	
  6175                           
  6176                           ;common.c: 9: timer1ReloadVal=0x6000;
  6177                           
  6178                           ;incstack = 0
  6179                           ; Regs used in _setSleepTime: [wreg]
  6180  12F8  3000               	movlw	0
  6181  12F9  00FC               	movwf	_timer1ReloadVal	;volatile
  6182  12FA  3060               	movlw	96
  6183  12FB  00FD               	movwf	_timer1ReloadVal+1	;volatile
  6184  12FC  0008               	return
  6185  12FD                     __end_of_setSleepTime:	
  6186                           
  6187                           	psect	text2
  6188  178F                     __ptext2:	
  6189 ;; *************** function ___lwdiv *****************
  6190 ;; Defined at:
  6191 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\lwdiv.c"
  6192 ;; Parameters:    Size  Location     Type
  6193 ;;  divisor         2    1[BANK0 ] unsigned int 
  6194 ;;  dividend        2    3[BANK0 ] unsigned int 
  6195 ;; Auto vars:     Size  Location     Type
  6196 ;;  quotient        2    7[BANK0 ] unsigned int 
  6197 ;;  counter         1    6[BANK0 ] unsigned char 
  6198 ;; Return value:  Size  Location     Type
  6199 ;;                  2    1[BANK0 ] unsigned int 
  6200 ;; Registers used:
  6201 ;;		wreg, status,2, status,0
  6202 ;; Tracked objects:
  6203 ;;		On entry : 0/0
  6204 ;;		On exit  : 0/0
  6205 ;;		Unchanged: 0/0
  6206 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6207 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6208 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6209 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6210 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6211 ;;Total ram usage:        8 bytes
  6212 ;; Hardware stack levels used:    1
  6213 ;; Hardware stack levels required when called:    4
  6214 ;; This function calls:
  6215 ;;		Nothing
  6216 ;; This function is called by:
  6217 ;;		_main
  6218 ;; This function uses a non-reentrant model
  6219 ;;
  6220                           
  6221                           
  6222                           ;psect for function ___lwdiv
  6223  178F                     ___lwdiv:	
  6224                           
  6225                           ;incstack = 0
  6226                           ; Regs used in ___lwdiv: [wreg+status,2+status,0]
  6227  178F  0020               	movlb	0	; select bank0
  6228  1790  01A7               	clrf	___lwdiv@quotient
  6229  1791  01A8               	clrf	___lwdiv@quotient+1
  6230  1792  0821               	movf	___lwdiv@divisor,w
  6231  1793  0422               	iorwf	___lwdiv@divisor+1,w
  6232  1794  1903               	btfsc	3,2
  6233  1795  2FBF               	goto	l6583
  6234  1796  01A6               	clrf	___lwdiv@counter
  6235  1797  0AA6               	incf	___lwdiv@counter,f
  6236  1798                     l6571:	
  6237  1798  1BA2               	btfsc	___lwdiv@divisor+1,7
  6238  1799  2FA4               	goto	l6573
  6239  179A  3001               	movlw	1
  6240  179B                     u6525:	
  6241  179B  35A1               	lslf	___lwdiv@divisor,f
  6242  179C  0DA2               	rlf	___lwdiv@divisor+1,f
  6243  179D  0B89               	decfsz	9,f
  6244  179E  2F9B               	goto	u6525
  6245  179F  3001               	movlw	1
  6246  17A0  00A5               	movwf	??___lwdiv
  6247  17A1  0825               	movf	??___lwdiv,w
  6248  17A2  07A6               	addwf	___lwdiv@counter,f
  6249  17A3  2F98               	goto	l6571
  6250  17A4                     l6573:	
  6251  17A4  3001               	movlw	1
  6252  17A5                     u6545:	
  6253  17A5  35A7               	lslf	___lwdiv@quotient,f
  6254  17A6  0DA8               	rlf	___lwdiv@quotient+1,f
  6255  17A7  0B89               	decfsz	9,f
  6256  17A8  2FA5               	goto	u6545
  6257  17A9  0822               	movf	___lwdiv@divisor+1,w
  6258  17AA  0224               	subwf	___lwdiv@dividend+1,w
  6259  17AB  1D03               	skipz
  6260  17AC  2FAF               	goto	u6555
  6261  17AD  0821               	movf	___lwdiv@divisor,w
  6262  17AE  0223               	subwf	___lwdiv@dividend,w
  6263  17AF                     u6555:	
  6264  17AF  1C03               	skipc
  6265  17B0  2FB6               	goto	l6579
  6266  17B1  0821               	movf	___lwdiv@divisor,w
  6267  17B2  02A3               	subwf	___lwdiv@dividend,f
  6268  17B3  0822               	movf	___lwdiv@divisor+1,w
  6269  17B4  3BA4               	subwfb	___lwdiv@dividend+1,f
  6270  17B5  1427               	bsf	___lwdiv@quotient,0
  6271  17B6                     l6579:	
  6272  17B6  3001               	movlw	1
  6273  17B7                     u6565:	
  6274  17B7  36A2               	lsrf	___lwdiv@divisor+1,f
  6275  17B8  0CA1               	rrf	___lwdiv@divisor,f
  6276  17B9  0B89               	decfsz	9,f
  6277  17BA  2FB7               	goto	u6565
  6278  17BB  3001               	movlw	1
  6279  17BC  02A6               	subwf	___lwdiv@counter,f
  6280  17BD  1D03               	btfss	3,2
  6281  17BE  2FA4               	goto	l6573
  6282  17BF                     l6583:	
  6283  17BF  0828               	movf	___lwdiv@quotient+1,w
  6284  17C0  00A2               	movwf	?___lwdiv+1
  6285  17C1  0827               	movf	___lwdiv@quotient,w
  6286  17C2  00A1               	movwf	?___lwdiv
  6287  17C3  0008               	return
  6288  17C4                     __end_of___lwdiv:	
  6289                           
  6290                           	psect	text3
  6291  093E                     __ptext3:	
  6292 ;; *************** function ___lldiv *****************
  6293 ;; Defined at:
  6294 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\lldiv.c"
  6295 ;; Parameters:    Size  Location     Type
  6296 ;;  divisor         4    1[BANK0 ] unsigned long 
  6297 ;;  dividend        4    5[BANK0 ] unsigned long 
  6298 ;; Auto vars:     Size  Location     Type
  6299 ;;  quotient        4   10[BANK0 ] unsigned long 
  6300 ;;  counter         1   14[BANK0 ] unsigned char 
  6301 ;; Return value:  Size  Location     Type
  6302 ;;                  4    1[BANK0 ] unsigned long 
  6303 ;; Registers used:
  6304 ;;		wreg, status,2, status,0
  6305 ;; Tracked objects:
  6306 ;;		On entry : 0/0
  6307 ;;		On exit  : 0/0
  6308 ;;		Unchanged: 0/0
  6309 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6310 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6311 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6312 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6313 ;;      Totals:         0      14       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6314 ;;Total ram usage:       14 bytes
  6315 ;; Hardware stack levels used:    1
  6316 ;; Hardware stack levels required when called:    4
  6317 ;; This function calls:
  6318 ;;		Nothing
  6319 ;; This function is called by:
  6320 ;;		_main
  6321 ;; This function uses a non-reentrant model
  6322 ;;
  6323                           
  6324                           
  6325                           ;psect for function ___lldiv
  6326  093E                     ___lldiv:	
  6327                           
  6328                           ;incstack = 0
  6329                           ; Regs used in ___lldiv: [wreg+status,2+status,0]
  6330  093E  3000               	movlw	0
  6331  093F  0020               	movlb	0	; select bank0
  6332  0940  00AD               	movwf	___lldiv@quotient+3
  6333  0941  3000               	movlw	0
  6334  0942  00AC               	movwf	___lldiv@quotient+2
  6335  0943  3000               	movlw	0
  6336  0944  00AB               	movwf	___lldiv@quotient+1
  6337  0945  3000               	movlw	0
  6338  0946  00AA               	movwf	___lldiv@quotient
  6339  0947  0824               	movf	___lldiv@divisor+3,w
  6340  0948  0423               	iorwf	___lldiv@divisor+2,w
  6341  0949  0422               	iorwf	___lldiv@divisor+1,w
  6342  094A  0421               	iorwf	___lldiv@divisor,w
  6343  094B  1903               	skipnz
  6344  094C  2988               	goto	l6557
  6345  094D  01AE               	clrf	___lldiv@counter
  6346  094E  0AAE               	incf	___lldiv@counter,f
  6347  094F                     l6543:	
  6348  094F  1BA4               	btfsc	___lldiv@divisor+3,7
  6349  0950  295D               	goto	l6545
  6350  0951  3001               	movlw	1
  6351  0952                     u6455:	
  6352  0952  35A1               	lslf	___lldiv@divisor,f
  6353  0953  0DA2               	rlf	___lldiv@divisor+1,f
  6354  0954  0DA3               	rlf	___lldiv@divisor+2,f
  6355  0955  0DA4               	rlf	___lldiv@divisor+3,f
  6356  0956  0B89               	decfsz	9,f
  6357  0957  2952               	goto	u6455
  6358  0958  3001               	movlw	1
  6359  0959  00A9               	movwf	??___lldiv
  6360  095A  0829               	movf	??___lldiv,w
  6361  095B  07AE               	addwf	___lldiv@counter,f
  6362  095C  294F               	goto	l6543
  6363  095D                     l6545:	
  6364  095D  3001               	movlw	1
  6365  095E                     u6475:	
  6366  095E  35AA               	lslf	___lldiv@quotient,f
  6367  095F  0DAB               	rlf	___lldiv@quotient+1,f
  6368  0960  0DAC               	rlf	___lldiv@quotient+2,f
  6369  0961  0DAD               	rlf	___lldiv@quotient+3,f
  6370  0962  0B89               	decfsz	9,f
  6371  0963  295E               	goto	u6475
  6372  0964  0824               	movf	___lldiv@divisor+3,w
  6373  0965  0228               	subwf	___lldiv@dividend+3,w
  6374  0966  1D03               	skipz
  6375  0967  2972               	goto	u6485
  6376  0968  0823               	movf	___lldiv@divisor+2,w
  6377  0969  0227               	subwf	___lldiv@dividend+2,w
  6378  096A  1D03               	skipz
  6379  096B  2972               	goto	u6485
  6380  096C  0822               	movf	___lldiv@divisor+1,w
  6381  096D  0226               	subwf	___lldiv@dividend+1,w
  6382  096E  1D03               	skipz
  6383  096F  2972               	goto	u6485
  6384  0970  0821               	movf	___lldiv@divisor,w
  6385  0971  0225               	subwf	___lldiv@dividend,w
  6386  0972                     u6485:	
  6387  0972  1C03               	skipc
  6388  0973  297D               	goto	l6553
  6389  0974  0821               	movf	___lldiv@divisor,w
  6390  0975  02A5               	subwf	___lldiv@dividend,f
  6391  0976  0822               	movf	___lldiv@divisor+1,w
  6392  0977  3BA6               	subwfb	___lldiv@dividend+1,f
  6393  0978  0823               	movf	___lldiv@divisor+2,w
  6394  0979  3BA7               	subwfb	___lldiv@dividend+2,f
  6395  097A  0824               	movf	___lldiv@divisor+3,w
  6396  097B  3BA8               	subwfb	___lldiv@dividend+3,f
  6397  097C  142A               	bsf	___lldiv@quotient,0
  6398  097D                     l6553:	
  6399  097D  3001               	movlw	1
  6400  097E                     u6495:	
  6401  097E  36A4               	lsrf	___lldiv@divisor+3,f
  6402  097F  0CA3               	rrf	___lldiv@divisor+2,f
  6403  0980  0CA2               	rrf	___lldiv@divisor+1,f
  6404  0981  0CA1               	rrf	___lldiv@divisor,f
  6405  0982  0B89               	decfsz	9,f
  6406  0983  297E               	goto	u6495
  6407  0984  3001               	movlw	1
  6408  0985  02AE               	subwf	___lldiv@counter,f
  6409  0986  1D03               	btfss	3,2
  6410  0987  295D               	goto	l6545
  6411  0988                     l6557:	
  6412  0988  082D               	movf	___lldiv@quotient+3,w
  6413  0989  00A4               	movwf	?___lldiv+3
  6414  098A  082C               	movf	___lldiv@quotient+2,w
  6415  098B  00A3               	movwf	?___lldiv+2
  6416  098C  082B               	movf	___lldiv@quotient+1,w
  6417  098D  00A2               	movwf	?___lldiv+1
  6418  098E  082A               	movf	___lldiv@quotient,w
  6419  098F  00A1               	movwf	?___lldiv
  6420  0990  0008               	return
  6421  0991                     __end_of___lldiv:	
  6422                           
  6423                           	psect	text4
  6424  15E1                     __ptext4:	
  6425 ;; *************** function _Wireless_wake *****************
  6426 ;; Defined at:
  6427 ;;		line 192 in file "wireless.c"
  6428 ;; Parameters:    Size  Location     Type
  6429 ;;		None
  6430 ;; Auto vars:     Size  Location     Type
  6431 ;;  reg             1   16[BANK0 ] unsigned char 
  6432 ;; Return value:  Size  Location     Type
  6433 ;;                  1    wreg      void 
  6434 ;; Registers used:
  6435 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6436 ;; Tracked objects:
  6437 ;;		On entry : 0/0
  6438 ;;		On exit  : 0/0
  6439 ;;		Unchanged: 0/0
  6440 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6441 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6442 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6443 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6444 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6445 ;;Total ram usage:        2 bytes
  6446 ;; Hardware stack levels used:    1
  6447 ;; Hardware stack levels required when called:    8
  6448 ;; This function calls:
  6449 ;;		_RF_ReadRegisterData
  6450 ;;		_RF_WriteRegister
  6451 ;; This function is called by:
  6452 ;;		_main
  6453 ;; This function uses a non-reentrant model
  6454 ;;
  6455                           
  6456                           
  6457                           ;psect for function _Wireless_wake
  6458  15E1                     _Wireless_wake:	
  6459                           
  6460                           ;wireless.c: 194: u8 reg;
  6461                           ;wireless.c: 196: RF_ReadRegisterData(0x00 , &reg, 1);
  6462                           
  6463                           ;incstack = 0
  6464                           ; Regs used in _Wireless_wake: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  6465  15E1  3030               	movlw	(low (Wireless_wake@reg| 0))& (0+255)
  6466  15E2  0020               	movlb	0	; select bank0
  6467  15E3  00AF               	movwf	??_Wireless_wake
  6468  15E4  082F               	movf	??_Wireless_wake,w
  6469  15E5  00AA               	movwf	RF_ReadRegisterData@buf
  6470  15E6  01AB               	clrf	RF_ReadRegisterData@bufSize
  6471  15E7  0AAB               	incf	RF_ReadRegisterData@bufSize,f
  6472  15E8  3000               	movlw	0
  6473  15E9  3195  25C4  3195   	fcall	_RF_ReadRegisterData
  6474                           
  6475                           ;wireless.c: 197: reg|=0b00000010;
  6476  15EC  0020               	movlb	0	; select bank0
  6477  15ED  14B0               	bsf	Wireless_wake@reg,1
  6478                           
  6479                           ;wireless.c: 198: RF_WriteRegister(0x00,reg);
  6480  15EE  0830               	movf	Wireless_wake@reg,w
  6481  15EF  00AF               	movwf	??_Wireless_wake
  6482  15F0  082F               	movf	??_Wireless_wake,w
  6483  15F1  00A3               	movwf	RF_WriteRegister@val
  6484  15F2  3000               	movlw	0
  6485  15F3  3194  2456  3195   	fcall	_RF_WriteRegister
  6486                           
  6487                           ;wireless.c: 199: _delay((unsigned long)((2)*(8000000/4000.0)));
  6488  15F6  3006               	movlw	6
  6489  15F7  0020               	movlb	0	; select bank0
  6490  15F8  00AF               	movwf	??_Wireless_wake
  6491  15F9  3030               	movlw	48
  6492  15FA                     u7117:	
  6493  15FA  0B89               	decfsz	9,f
  6494  15FB  2DFA               	goto	u7117
  6495  15FC  0BAF               	decfsz	??_Wireless_wake,f
  6496  15FD  2DFA               	goto	u7117
  6497  15FE  0000               	nop
  6498  15FF  0008               	return
  6499  1600                     __end_of_Wireless_wake:	
  6500                           
  6501                           	psect	text5
  6502  1499                     __ptext5:	
  6503 ;; *************** function _Wireless_sleep *****************
  6504 ;; Defined at:
  6505 ;;		line 182 in file "wireless.c"
  6506 ;; Parameters:    Size  Location     Type
  6507 ;;		None
  6508 ;; Auto vars:     Size  Location     Type
  6509 ;;  reg             1   16[BANK0 ] unsigned char 
  6510 ;; Return value:  Size  Location     Type
  6511 ;;                  1    wreg      void 
  6512 ;; Registers used:
  6513 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6514 ;; Tracked objects:
  6515 ;;		On entry : 0/0
  6516 ;;		On exit  : 0/0
  6517 ;;		Unchanged: 0/0
  6518 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6519 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6520 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6521 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6522 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6523 ;;Total ram usage:        2 bytes
  6524 ;; Hardware stack levels used:    1
  6525 ;; Hardware stack levels required when called:    8
  6526 ;; This function calls:
  6527 ;;		_RF_ReadRegisterData
  6528 ;;		_RF_WriteRegister
  6529 ;; This function is called by:
  6530 ;;		_main
  6531 ;; This function uses a non-reentrant model
  6532 ;;
  6533                           
  6534                           
  6535                           ;psect for function _Wireless_sleep
  6536  1499                     _Wireless_sleep:	
  6537                           
  6538                           ;wireless.c: 184: u8 reg;
  6539                           ;wireless.c: 186: RF_ReadRegisterData(0x00 , &reg, 1);
  6540                           
  6541                           ;incstack = 0
  6542                           ; Regs used in _Wireless_sleep: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  6543  1499  3030               	movlw	(low (Wireless_sleep@reg| 0))& (0+255)
  6544  149A  0020               	movlb	0	; select bank0
  6545  149B  00AF               	movwf	??_Wireless_sleep
  6546  149C  082F               	movf	??_Wireless_sleep,w
  6547  149D  00AA               	movwf	RF_ReadRegisterData@buf
  6548  149E  01AB               	clrf	RF_ReadRegisterData@bufSize
  6549  149F  0AAB               	incf	RF_ReadRegisterData@bufSize,f
  6550  14A0  3000               	movlw	0
  6551  14A1  3195  25C4  3194   	fcall	_RF_ReadRegisterData
  6552                           
  6553                           ;wireless.c: 187: reg&=0b11111101;
  6554  14A4  30FD               	movlw	253
  6555  14A5  0020               	movlb	0	; select bank0
  6556  14A6  00AF               	movwf	??_Wireless_sleep
  6557  14A7  082F               	movf	??_Wireless_sleep,w
  6558  14A8  05B0               	andwf	Wireless_sleep@reg,f
  6559                           
  6560                           ;wireless.c: 188: RF_WriteRegister(0x00,reg);
  6561  14A9  0830               	movf	Wireless_sleep@reg,w
  6562  14AA  00AF               	movwf	??_Wireless_sleep
  6563  14AB  082F               	movf	??_Wireless_sleep,w
  6564  14AC  00A3               	movwf	RF_WriteRegister@val
  6565  14AD  3000               	movlw	0
  6566  14AE  3194  2456         	fcall	_RF_WriteRegister
  6567  14B0  0008               	return
  6568  14B1                     __end_of_Wireless_sleep:	
  6569                           
  6570                           	psect	text6
  6571  067D                     __ptext6:	
  6572 ;; *************** function _Wireless_packageData *****************
  6573 ;; Defined at:
  6574 ;;		line 140 in file "wireless.c"
  6575 ;; Parameters:    Size  Location     Type
  6576 ;;  status          1    wreg     enum E3332
  6577 ;;  openTime        1   26[BANK1 ] unsigned char 
  6578 ;;  tempC           3   27[BANK1 ] float 
  6579 ;; Auto vars:     Size  Location     Type
  6580 ;;  status          1   40[BANK1 ] enum E3332
  6581 ;;  data            7   32[BANK1 ] unsigned char [7]
  6582 ;;  t1              2   41[BANK1 ] unsigned int 
  6583 ;;  var             1   39[BANK1 ] unsigned char 
  6584 ;; Return value:  Size  Location     Type
  6585 ;;                  1    wreg      void 
  6586 ;; Registers used:
  6587 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6588 ;; Tracked objects:
  6589 ;;		On entry : 0/0
  6590 ;;		On exit  : 0/0
  6591 ;;		Unchanged: 0/0
  6592 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6593 ;;      Params:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0
  6594 ;;      Locals:         0       0      11       0       0       0       0       0       0       0       0       0       
      +0       0
  6595 ;;      Temps:          0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
  6596 ;;      Totals:         0       0      17       0       0       0       0       0       0       0       0       0       
      +0       0
  6597 ;;Total ram usage:       17 bytes
  6598 ;; Hardware stack levels used:    1
  6599 ;; Hardware stack levels required when called:   11
  6600 ;; This function calls:
  6601 ;;		_Diag_getSensorHealth
  6602 ;;		_Sensor_getSupplyVoltage
  6603 ;;		_Wireless_checkDataReceived
  6604 ;;		_Wireless_determineTransmitPower
  6605 ;;		_Wireless_sendData
  6606 ;;		___aldiv
  6607 ;;		___ftadd
  6608 ;;		___ftmul
  6609 ;;		___fttol
  6610 ;; This function is called by:
  6611 ;;		_main
  6612 ;; This function uses a non-reentrant model
  6613 ;;
  6614                           
  6615                           
  6616                           ;psect for function _Wireless_packageData
  6617  067D                     _Wireless_packageData:	
  6618                           
  6619                           ;incstack = 0
  6620                           ; Regs used in _Wireless_packageData: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6621                           ;Wireless_packageData@status stored from wreg
  6622  067D  0021               	movlb	1	; select bank1
  6623  067E  00C8               	movwf	Wireless_packageData@status^(0+128)
  6624                           
  6625                           ;wireless.c: 150: tempC+=50;
  6626  067F  3000               	movlw	0
  6627  0680  0020               	movlb	0	; select bank0
  6628  0681  00C9               	movwf	___ftadd@f1
  6629  0682  3048               	movlw	72
  6630  0683  00CA               	movwf	___ftadd@f1+1
  6631  0684  3042               	movlw	66
  6632  0685  00CB               	movwf	___ftadd@f1+2
  6633  0686  0021               	movlb	1	; select bank1
  6634  0687  083B               	movf	Wireless_packageData@tempC^(0+128),w
  6635  0688  0020               	movlb	0	; select bank0
  6636  0689  00CC               	movwf	___ftadd@f2
  6637  068A  0021               	movlb	1	; select bank1
  6638  068B  083C               	movf	(Wireless_packageData@tempC+1)^(0+128),w
  6639  068C  0020               	movlb	0	; select bank0
  6640  068D  00CD               	movwf	___ftadd@f2+1
  6641  068E  0021               	movlb	1	; select bank1
  6642  068F  083D               	movf	(Wireless_packageData@tempC+2)^(0+128),w
  6643  0690  0020               	movlb	0	; select bank0
  6644  0691  00CE               	movwf	___ftadd@f2+2
  6645  0692  318F  270A  3186   	fcall	___ftadd
  6646  0695  0020               	movlb	0	; select bank0
  6647  0696  0849               	movf	?___ftadd,w
  6648  0697  0021               	movlb	1	; select bank1
  6649  0698  00BB               	movwf	Wireless_packageData@tempC^(0+128)
  6650  0699  0020               	movlb	0	; select bank0
  6651  069A  084A               	movf	?___ftadd+1,w
  6652  069B  0021               	movlb	1	; select bank1
  6653  069C  00BC               	movwf	(Wireless_packageData@tempC+1)^(0+128)
  6654  069D  0020               	movlb	0	; select bank0
  6655  069E  084B               	movf	?___ftadd+2,w
  6656  069F  0021               	movlb	1	; select bank1
  6657  06A0  00BD               	movwf	(Wireless_packageData@tempC+2)^(0+128)
  6658                           
  6659                           ;wireless.c: 151: tempC*=10;
  6660  06A1  3000               	movlw	0
  6661  06A2  0020               	movlb	0	; select bank0
  6662  06A3  00D6               	movwf	___ftmul@f1
  6663  06A4  3020               	movlw	32
  6664  06A5  00D7               	movwf	___ftmul@f1+1
  6665  06A6  3041               	movlw	65
  6666  06A7  00D8               	movwf	___ftmul@f1+2
  6667  06A8  0021               	movlb	1	; select bank1
  6668  06A9  083B               	movf	Wireless_packageData@tempC^(0+128),w
  6669  06AA  0020               	movlb	0	; select bank0
  6670  06AB  00D9               	movwf	___ftmul@f2
  6671  06AC  0021               	movlb	1	; select bank1
  6672  06AD  083C               	movf	(Wireless_packageData@tempC+1)^(0+128),w
  6673  06AE  0020               	movlb	0	; select bank0
  6674  06AF  00DA               	movwf	___ftmul@f2+1
  6675  06B0  0021               	movlb	1	; select bank1
  6676  06B1  083D               	movf	(Wireless_packageData@tempC+2)^(0+128),w
  6677  06B2  0020               	movlb	0	; select bank0
  6678  06B3  00DB               	movwf	___ftmul@f2+2
  6679  06B4  318E  2656  3186   	fcall	___ftmul
  6680  06B7  0020               	movlb	0	; select bank0
  6681  06B8  0856               	movf	?___ftmul,w
  6682  06B9  0021               	movlb	1	; select bank1
  6683  06BA  00BB               	movwf	Wireless_packageData@tempC^(0+128)
  6684  06BB  0020               	movlb	0	; select bank0
  6685  06BC  0857               	movf	?___ftmul+1,w
  6686  06BD  0021               	movlb	1	; select bank1
  6687  06BE  00BC               	movwf	(Wireless_packageData@tempC+1)^(0+128)
  6688  06BF  0020               	movlb	0	; select bank0
  6689  06C0  0858               	movf	?___ftmul+2,w
  6690  06C1  0021               	movlb	1	; select bank1
  6691  06C2  00BD               	movwf	(Wireless_packageData@tempC+2)^(0+128)
  6692                           
  6693                           ;wireless.c: 153: unsigned int t1 = tempC;
  6694  06C3  083B               	movf	Wireless_packageData@tempC^(0+128),w
  6695  06C4  0020               	movlb	0	; select bank0
  6696  06C5  00E6               	movwf	___fttol@f1
  6697  06C6  0021               	movlb	1	; select bank1
  6698  06C7  083C               	movf	(Wireless_packageData@tempC+1)^(0+128),w
  6699  06C8  0020               	movlb	0	; select bank0
  6700  06C9  00E7               	movwf	___fttol@f1+1
  6701  06CA  0021               	movlb	1	; select bank1
  6702  06CB  083D               	movf	(Wireless_packageData@tempC+2)^(0+128),w
  6703  06CC  0020               	movlb	0	; select bank0
  6704  06CD  00E8               	movwf	___fttol@f1+2
  6705  06CE  318C  246B  3186   	fcall	___fttol
  6706  06D1  0020               	movlb	0	; select bank0
  6707  06D2  0867               	movf	?___fttol+1,w
  6708  06D3  0021               	movlb	1	; select bank1
  6709  06D4  00CA               	movwf	(Wireless_packageData@t1+1)^(0+128)
  6710  06D5  0020               	movlb	0	; select bank0
  6711  06D6  0866               	movf	?___fttol,w
  6712  06D7  0021               	movlb	1	; select bank1
  6713  06D8  00C9               	movwf	Wireless_packageData@t1^(0+128)
  6714                           
  6715                           ;wireless.c: 154: char var;
  6716                           ;wireless.c: 155: char data[7];
  6717                           ;wireless.c: 157: status<<=4;
  6718  06D9  0EC8               	swapf	Wireless_packageData@status^(0+128),f
  6719  06DA  30F0               	movlw	240
  6720  06DB  05C8               	andwf	Wireless_packageData@status^(0+128),f
  6721                           
  6722                           ;wireless.c: 158: var=Diag_getSensorHealth();
  6723  06DC  3194  2407  3186   	fcall	_Diag_getSensorHealth
  6724  06DF  0021               	movlb	1	; select bank1
  6725  06E0  00BE               	movwf	??_Wireless_packageData^(0+128)
  6726  06E1  083E               	movf	??_Wireless_packageData^(0+128),w
  6727  06E2  00C7               	movwf	Wireless_packageData@var^(0+128)
  6728                           
  6729                           ;wireless.c: 159: status|=var;
  6730  06E3  0847               	movf	Wireless_packageData@var^(0+128),w
  6731  06E4  00BE               	movwf	??_Wireless_packageData^(0+128)
  6732  06E5  083E               	movf	??_Wireless_packageData^(0+128),w
  6733  06E6  04C8               	iorwf	Wireless_packageData@status^(0+128),f
  6734                           
  6735                           ;wireless.c: 160: status| = (currentTransmitPower<<2);
  6736  06E7  0861               	movf	_currentTransmitPower^(0+128),w
  6737  06E8  00BE               	movwf	??_Wireless_packageData^(0+128)
  6738  06E9  3001               	movlw	1
  6739  06EA                     u6345:	
  6740  06EA  35BE               	lslf	??_Wireless_packageData^(0+128),f
  6741  06EB  3EFF               	addlw	-1
  6742  06EC  1D03               	skipz
  6743  06ED  2EEA               	goto	u6345
  6744  06EE  353E               	lslf	??_Wireless_packageData^(0+128),w
  6745  06EF  00BF               	movwf	(??_Wireless_packageData+1)^(0+128)
  6746  06F0  083F               	movf	(??_Wireless_packageData+1)^(0+128),w
  6747  06F1  04C8               	iorwf	Wireless_packageData@status^(0+128),f
  6748                           
  6749                           ;wireless.c: 163: data[0]=status;
  6750  06F2  0848               	movf	Wireless_packageData@status^(0+128),w
  6751  06F3  00BE               	movwf	??_Wireless_packageData^(0+128)
  6752  06F4  083E               	movf	??_Wireless_packageData^(0+128),w
  6753  06F5  00C0               	movwf	Wireless_packageData@data^(0+128)
  6754                           
  6755                           ;wireless.c: 164: data[1]=openTime;
  6756  06F6  083A               	movf	Wireless_packageData@openTime^(0+128),w
  6757  06F7  00BE               	movwf	??_Wireless_packageData^(0+128)
  6758  06F8  083E               	movf	??_Wireless_packageData^(0+128),w
  6759  06F9  00C1               	movwf	(Wireless_packageData@data^(0+128)+1)
  6760                           
  6761                           ;wireless.c: 165: data[2]=t1>>8;
  6762  06FA  084A               	movf	(Wireless_packageData@t1+1)^(0+128),w
  6763  06FB  00BE               	movwf	??_Wireless_packageData^(0+128)
  6764  06FC  083E               	movf	??_Wireless_packageData^(0+128),w
  6765  06FD  00C2               	movwf	(Wireless_packageData@data^(0+128)+2)
  6766                           
  6767                           ;wireless.c: 166: data[3]= t1 & 0xFF;
  6768  06FE  0849               	movf	Wireless_packageData@t1^(0+128),w
  6769  06FF  00BE               	movwf	??_Wireless_packageData^(0+128)
  6770  0700  083E               	movf	??_Wireless_packageData^(0+128),w
  6771  0701  00C3               	movwf	(Wireless_packageData@data^(0+128)+3)
  6772                           
  6773                           ;wireless.c: 167: t1=(float)(Sensor_getSupplyVoltage()-1)*100;
  6774  0702  3188  2066  3186   	fcall	_Sensor_getSupplyVoltage
  6775  0705  0020               	movlb	0	; select bank0
  6776  0706  0841               	movf	?_Sensor_getSupplyVoltage,w
  6777  0707  00CC               	movwf	___ftadd@f2
  6778  0708  0842               	movf	?_Sensor_getSupplyVoltage+1,w
  6779  0709  00CD               	movwf	___ftadd@f2+1
  6780  070A  0843               	movf	?_Sensor_getSupplyVoltage+2,w
  6781  070B  00CE               	movwf	___ftadd@f2+2
  6782  070C  3000               	movlw	0
  6783  070D  00C9               	movwf	___ftadd@f1
  6784  070E  3080               	movlw	128
  6785  070F  00CA               	movwf	___ftadd@f1+1
  6786  0710  30BF               	movlw	191
  6787  0711  00CB               	movwf	___ftadd@f1+2
  6788  0712  318F  270A  3186   	fcall	___ftadd
  6789  0715  0020               	movlb	0	; select bank0
  6790  0716  0849               	movf	?___ftadd,w
  6791  0717  00D9               	movwf	___ftmul@f2
  6792  0718  084A               	movf	?___ftadd+1,w
  6793  0719  00DA               	movwf	___ftmul@f2+1
  6794  071A  084B               	movf	?___ftadd+2,w
  6795  071B  00DB               	movwf	___ftmul@f2+2
  6796  071C  3000               	movlw	0
  6797  071D  00D6               	movwf	___ftmul@f1
  6798  071E  30C8               	movlw	200
  6799  071F  00D7               	movwf	___ftmul@f1+1
  6800  0720  3042               	movlw	66
  6801  0721  00D8               	movwf	___ftmul@f1+2
  6802  0722  318E  2656  3186   	fcall	___ftmul
  6803  0725  0020               	movlb	0	; select bank0
  6804  0726  0856               	movf	?___ftmul,w
  6805  0727  00E6               	movwf	___fttol@f1
  6806  0728  0857               	movf	?___ftmul+1,w
  6807  0729  00E7               	movwf	___fttol@f1+1
  6808  072A  0858               	movf	?___ftmul+2,w
  6809  072B  00E8               	movwf	___fttol@f1+2
  6810  072C  318C  246B  3186   	fcall	___fttol
  6811  072F  0020               	movlb	0	; select bank0
  6812  0730  0867               	movf	?___fttol+1,w
  6813  0731  0021               	movlb	1	; select bank1
  6814  0732  00CA               	movwf	(Wireless_packageData@t1+1)^(0+128)
  6815  0733  0020               	movlb	0	; select bank0
  6816  0734  0866               	movf	?___fttol,w
  6817  0735  0021               	movlb	1	; select bank1
  6818  0736  00C9               	movwf	Wireless_packageData@t1^(0+128)
  6819                           
  6820                           ;wireless.c: 168: data[4]=t1;
  6821  0737  0849               	movf	Wireless_packageData@t1^(0+128),w
  6822  0738  00BE               	movwf	??_Wireless_packageData^(0+128)
  6823  0739  083E               	movf	??_Wireless_packageData^(0+128),w
  6824  073A  00C4               	movwf	(Wireless_packageData@data^(0+128)+4)
  6825                           
  6826                           ;wireless.c: 169: t1 = sensorUpdatePeriod/1000;
  6827  073B  3000               	movlw	0
  6828  073C  0020               	movlb	0	; select bank0
  6829  073D  00A4               	movwf	___aldiv@divisor+3
  6830  073E  3000               	movlw	0
  6831  073F  00A3               	movwf	___aldiv@divisor+2
  6832  0740  3003               	movlw	3
  6833  0741  00A2               	movwf	___aldiv@divisor+1
  6834  0742  30E8               	movlw	232
  6835  0743  00A1               	movwf	___aldiv@divisor
  6836  0744  0022               	movlb	2	; select bank2
  6837  0745  0869               	movf	(_sensorUpdatePeriod+3)^(0+256),w
  6838  0746  0020               	movlb	0	; select bank0
  6839  0747  00A8               	movwf	___aldiv@dividend+3
  6840  0748  0022               	movlb	2	; select bank2
  6841  0749  0868               	movf	(_sensorUpdatePeriod+2)^(0+256),w
  6842  074A  0020               	movlb	0	; select bank0
  6843  074B  00A7               	movwf	___aldiv@dividend+2
  6844  074C  0022               	movlb	2	; select bank2
  6845  074D  0867               	movf	(_sensorUpdatePeriod+1)^(0+256),w
  6846  074E  0020               	movlb	0	; select bank0
  6847  074F  00A6               	movwf	___aldiv@dividend+1
  6848  0750  0022               	movlb	2	; select bank2
  6849  0751  0866               	movf	_sensorUpdatePeriod^(0+256),w
  6850  0752  0020               	movlb	0	; select bank0
  6851  0753  00A5               	movwf	___aldiv@dividend
  6852  0754  3187  277E  3186   	fcall	___aldiv
  6853  0757  0020               	movlb	0	; select bank0
  6854  0758  0822               	movf	?___aldiv+1,w
  6855  0759  0021               	movlb	1	; select bank1
  6856  075A  00CA               	movwf	(Wireless_packageData@t1+1)^(0+128)
  6857  075B  0020               	movlb	0	; select bank0
  6858  075C  0821               	movf	?___aldiv,w
  6859  075D  0021               	movlb	1	; select bank1
  6860  075E  00C9               	movwf	Wireless_packageData@t1^(0+128)
  6861                           
  6862                           ;wireless.c: 171: data[5] = t1 >>8;
  6863  075F  084A               	movf	(Wireless_packageData@t1+1)^(0+128),w
  6864  0760  00BE               	movwf	??_Wireless_packageData^(0+128)
  6865  0761  083E               	movf	??_Wireless_packageData^(0+128),w
  6866  0762  00C5               	movwf	(Wireless_packageData@data^(0+128)+5)
  6867                           
  6868                           ;wireless.c: 172: data[6] = t1 & 0xFF;
  6869  0763  0849               	movf	Wireless_packageData@t1^(0+128),w
  6870  0764  00BE               	movwf	??_Wireless_packageData^(0+128)
  6871  0765  083E               	movf	??_Wireless_packageData^(0+128),w
  6872  0766  00C6               	movwf	(Wireless_packageData@data^(0+128)+6)
  6873  0767                     l6467:	
  6874                           ;wireless.c: 173: do{
  6875                           
  6876                           
  6877                           ;wireless.c: 174: Wireless_sendData(data, 7);
  6878  0767  3007               	movlw	7
  6879  0768  0021               	movlb	1	; select bank1
  6880  0769  00BE               	movwf	??_Wireless_packageData^(0+128)
  6881  076A  083E               	movf	??_Wireless_packageData^(0+128),w
  6882  076B  0020               	movlb	0	; select bank0
  6883  076C  00B1               	movwf	Wireless_sendData@length
  6884  076D  30C0               	movlw	(low (Wireless_packageData@data| 0))& (0+255)
  6885  076E  3194  2441  3186   	fcall	_Wireless_sendData
  6886  0771                     l1115:	
  6887                           ;wireless.c: 175: while(PORTCbits.RC3);
  6888                           
  6889  0771  0020               	movlb	0	; select bank0
  6890  0772  198E               	btfsc	14,3	;volatile
  6891  0773  2F71               	goto	l1115
  6892                           
  6893                           ;wireless.c: 176: }
  6894                           ;wireless.c: 177: while(Wireless_determineTransmitPower(0));
  6895  0774  3000               	movlw	0
  6896  0775  318D  250A  3186   	fcall	_Wireless_determineTransmitPower
  6897  0778  3A00               	xorlw	0
  6898  0779  1D03               	skipz
  6899  077A  2F67               	goto	l6467
  6900                           
  6901                           ;wireless.c: 178: Wireless_checkDataReceived();
  6902  077B  318B  237B         	fcall	_Wireless_checkDataReceived
  6903  077D  0008               	return
  6904  077E                     __end_of_Wireless_packageData:	
  6905                           
  6906                           	psect	text7
  6907  0D0A                     __ptext7:	
  6908 ;; *************** function _Wireless_determineTransmitPower *****************
  6909 ;; Defined at:
  6910 ;;		line 62 in file "wireless.c"
  6911 ;; Parameters:    Size  Location     Type
  6912 ;;  initialise      1    wreg     unsigned char 
  6913 ;; Auto vars:     Size  Location     Type
  6914 ;;  initialise      1   24[BANK0 ] unsigned char 
  6915 ;;  latestResult    1   26[BANK0 ] unsigned char 
  6916 ;;  testPayload     1   25[BANK0 ] unsigned char 
  6917 ;; Return value:  Size  Location     Type
  6918 ;;                  1    wreg      unsigned char 
  6919 ;; Registers used:
  6920 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6921 ;; Tracked objects:
  6922 ;;		On entry : 0/0
  6923 ;;		On exit  : 0/0
  6924 ;;		Unchanged: 0/0
  6925 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6926 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6927 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6928 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6929 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6930 ;;Total ram usage:        6 bytes
  6931 ;; Hardware stack levels used:    1
  6932 ;; Hardware stack levels required when called:   10
  6933 ;; This function calls:
  6934 ;;		_Wireless_changeTransmitPower
  6935 ;;		_Wireless_isDataTransmitSuccessful
  6936 ;;		_Wireless_sendData
  6937 ;;		_limit
  6938 ;; This function is called by:
  6939 ;;		_main
  6940 ;;		_Wireless_packageData
  6941 ;; This function uses a non-reentrant model
  6942 ;;
  6943                           
  6944                           
  6945                           ;psect for function _Wireless_determineTransmitPower
  6946  0D0A                     _Wireless_determineTransmitPower:	
  6947                           
  6948                           ;incstack = 0
  6949                           ; Regs used in _Wireless_determineTransmitPower: [wreg-fsr1h+status,2+status,0+pclath+cs
      +                          tack]
  6950                           ;Wireless_determineTransmitPower@initialise stored from wreg
  6951  0D0A  0020               	movlb	0	; select bank0
  6952  0D0B  00B8               	movwf	Wireless_determineTransmitPower@initialise
  6953                           
  6954                           ;wireless.c: 64: char testPayload = 0xFF;
  6955  0D0C  30FF               	movlw	255
  6956  0D0D  00B5               	movwf	??_Wireless_determineTransmitPower
  6957  0D0E  0835               	movf	??_Wireless_determineTransmitPower,w
  6958  0D0F  00B9               	movwf	Wireless_determineTransmitPower@testPayload
  6959                           
  6960                           ;wireless.c: 65: char latestResult;
  6961                           ;wireless.c: 66: static char numOfTransmits = 0;
  6962                           ;wireless.c: 67: static char numOfSuccessfulTransmits = 0;
  6963                           ;wireless.c: 69: if(initialise){
  6964  0D10  0838               	movf	Wireless_determineTransmitPower@initialise,w
  6965  0D11  1903               	btfsc	3,2
  6966  0D12  2D4E               	goto	l6039
  6967                           
  6968                           ;wireless.c: 70: currentTransmitPower = 0;
  6969  0D13  0021               	movlb	1	; select bank1
  6970  0D14  01E1               	clrf	_currentTransmitPower^(0+128)
  6971  0D15                     l6035:	
  6972                           ;wireless.c: 73: for(;currentTransmitPower <= 3; currentTransmitPower++){
  6973                           
  6974  0D15  3004               	movlw	4
  6975  0D16  0261               	subwf	_currentTransmitPower^(0+128),w
  6976  0D17  1803               	btfsc	3,0
  6977  0D18  2D34               	goto	l6037
  6978                           
  6979                           ;wireless.c: 74: Wireless_changeTransmitPower(currentTransmitPower);
  6980  0D19  0861               	movf	_currentTransmitPower^(0+128),w
  6981  0D1A  3197  275C  318D   	fcall	_Wireless_changeTransmitPower
  6982                           
  6983                           ;wireless.c: 75: Wireless_sendData(&testPayload, 1);
  6984  0D1D  0020               	movlb	0	; select bank0
  6985  0D1E  01B1               	clrf	Wireless_sendData@length
  6986  0D1F  0AB1               	incf	Wireless_sendData@length,f
  6987  0D20  3039               	movlw	(low (Wireless_determineTransmitPower@testPayload| 0))& (0+255)
  6988  0D21  3194  2441  318D   	fcall	_Wireless_sendData
  6989  0D24                     l1092:	
  6990                           ;wireless.c: 76: while(PORTCbits.RC3);
  6991                           
  6992  0D24  0020               	movlb	0	; select bank0
  6993  0D25  198E               	btfsc	14,3	;volatile
  6994  0D26  2D24               	goto	l1092
  6995                           
  6996                           ;wireless.c: 78: if(Wireless_isDataTransmitSuccessful())
  6997  0D27  3193  2398  318D   	fcall	_Wireless_isDataTransmitSuccessful
  6998  0D2A  3A00               	xorlw	0
  6999  0D2B  1D03               	btfss	3,2
  7000  0D2C  2D34               	goto	l6037
  7001                           
  7002                           ;wireless.c: 79: break;
  7003  0D2D  3001               	movlw	1
  7004  0D2E  0020               	movlb	0	; select bank0
  7005  0D2F  00B5               	movwf	??_Wireless_determineTransmitPower
  7006  0D30  0835               	movf	??_Wireless_determineTransmitPower,w
  7007  0D31  0021               	movlb	1	; select bank1
  7008  0D32  07E1               	addwf	_currentTransmitPower^(0+128),f
  7009  0D33  2D15               	goto	l6035
  7010  0D34                     l6037:	
  7011                           
  7012                           ;wireless.c: 80: }
  7013                           ;wireless.c: 81: currentTransmitPower = limit( currentTransmitPower, 0, 3);
  7014  0D34  0021               	movlb	1	; select bank1
  7015  0D35  0861               	movf	_currentTransmitPower^(0+128),w
  7016  0D36  0020               	movlb	0	; select bank0
  7017  0D37  00B5               	movwf	??_Wireless_determineTransmitPower
  7018  0D38  01B6               	clrf	??_Wireless_determineTransmitPower+1
  7019  0D39  0835               	movf	??_Wireless_determineTransmitPower,w
  7020  0D3A  00A1               	movwf	limit@val
  7021  0D3B  0836               	movf	??_Wireless_determineTransmitPower+1,w
  7022  0D3C  00A2               	movwf	limit@val+1
  7023  0D3D  3000               	movlw	0
  7024  0D3E  00A3               	movwf	limit@min
  7025  0D3F  00A4               	movwf	limit@min+1
  7026  0D40  3003               	movlw	3
  7027  0D41  00A5               	movwf	limit@max
  7028  0D42  3000               	movlw	0
  7029  0D43  00A6               	movwf	limit@max+1
  7030  0D44  3196  2685  318D   	fcall	_limit
  7031  0D47  0020               	movlb	0	; select bank0
  7032  0D48  0821               	movf	?_limit,w
  7033  0D49  00B7               	movwf	??_Wireless_determineTransmitPower+2
  7034  0D4A  0837               	movf	??_Wireless_determineTransmitPower+2,w
  7035  0D4B  0021               	movlb	1	; select bank1
  7036  0D4C  00E1               	movwf	_currentTransmitPower^(0+128)
  7037                           
  7038                           ;wireless.c: 82: }else{
  7039  0D4D  2DA5               	goto	l6091
  7040  0D4E                     l6039:	
  7041                           
  7042                           ;wireless.c: 84: latestResult = Wireless_isDataTransmitSuccessful();
  7043  0D4E  3193  2398  318D   	fcall	_Wireless_isDataTransmitSuccessful
  7044  0D51  0020               	movlb	0	; select bank0
  7045  0D52  00B5               	movwf	??_Wireless_determineTransmitPower
  7046  0D53  0835               	movf	??_Wireless_determineTransmitPower,w
  7047  0D54  00BA               	movwf	Wireless_determineTransmitPower@latestResult
  7048                           
  7049                           ;wireless.c: 85: numOfTransmits++;
  7050  0D55  3001               	movlw	1
  7051  0D56  00B5               	movwf	??_Wireless_determineTransmitPower
  7052  0D57  0835               	movf	??_Wireless_determineTransmitPower,w
  7053  0D58  0021               	movlb	1	; select bank1
  7054  0D59  07E0               	addwf	Wireless_determineTransmitPower@numOfTransmits^(0+128),f
  7055                           
  7056                           ;wireless.c: 86: numOfSuccessfulTransmits+= latestResult;
  7057  0D5A  0020               	movlb	0	; select bank0
  7058  0D5B  083A               	movf	Wireless_determineTransmitPower@latestResult,w
  7059  0D5C  00B5               	movwf	??_Wireless_determineTransmitPower
  7060  0D5D  0835               	movf	??_Wireless_determineTransmitPower,w
  7061  0D5E  0021               	movlb	1	; select bank1
  7062  0D5F  07DF               	addwf	Wireless_determineTransmitPower@numOfSuccessfulTransmits^(0+128),f
  7063                           
  7064                           ;wireless.c: 88: if(numOfTransmits>=5){
  7065  0D60  3005               	movlw	5
  7066  0D61  0260               	subwf	Wireless_determineTransmitPower@numOfTransmits^(0+128),w
  7067  0D62  1C03               	skipc
  7068  0D63  2D8F               	goto	l6075
  7069                           
  7070                           ;wireless.c: 90: if(currentTransmitPower > 0 && latestResult && numOfSuccessfulTransmits
      +                           >=4)
  7071  0D64  0861               	movf	_currentTransmitPower^(0+128),w
  7072  0D65  1903               	btfsc	3,2
  7073  0D66  2D76               	goto	l6055
  7074  0D67  0020               	movlb	0	; select bank0
  7075  0D68  083A               	movf	Wireless_determineTransmitPower@latestResult,w
  7076  0D69  1903               	btfsc	3,2
  7077  0D6A  2D76               	goto	l6055
  7078  0D6B  3004               	movlw	4
  7079  0D6C  0021               	movlb	1	; select bank1
  7080  0D6D  025F               	subwf	Wireless_determineTransmitPower@numOfSuccessfulTransmits^(0+128),w
  7081  0D6E  1C03               	skipc
  7082  0D6F  2D76               	goto	l6055
  7083                           
  7084                           ;wireless.c: 91: Wireless_changeTransmitPower(--currentTransmitPower);
  7085  0D70  3001               	movlw	1
  7086  0D71  02E1               	subwf	_currentTransmitPower^(0+128),f
  7087  0D72  0861               	movf	_currentTransmitPower^(0+128),w
  7088  0D73  3197  275C  318D   	fcall	_Wireless_changeTransmitPower
  7089  0D76                     l6055:	
  7090                           
  7091                           ;wireless.c: 93: numOfTransmits = 0;
  7092  0D76  0021               	movlb	1	; select bank1
  7093  0D77  01E0               	clrf	Wireless_determineTransmitPower@numOfTransmits^(0+128)
  7094                           
  7095                           ;wireless.c: 94: numOfSuccessfulTransmits = 0;
  7096  0D78  01DF               	clrf	Wireless_determineTransmitPower@numOfSuccessfulTransmits^(0+128)
  7097                           
  7098                           ;wireless.c: 95: if(!latestResult && currentTransmitPower < 3){
  7099  0D79  0020               	movlb	0	; select bank0
  7100  0D7A  083A               	movf	Wireless_determineTransmitPower@latestResult,w
  7101  0D7B  1D03               	btfss	3,2
  7102  0D7C  2D8D               	goto	l6071
  7103  0D7D  3003               	movlw	3
  7104  0D7E  0021               	movlb	1	; select bank1
  7105  0D7F  0261               	subwf	_currentTransmitPower^(0+128),w
  7106  0D80  1803               	skipnc
  7107  0D81  2D8D               	goto	l6071
  7108                           
  7109                           ;wireless.c: 98: Wireless_changeTransmitPower(++currentTransmitPower);
  7110  0D82  3001               	movlw	1
  7111  0D83  0020               	movlb	0	; select bank0
  7112  0D84  00B5               	movwf	??_Wireless_determineTransmitPower
  7113  0D85  0835               	movf	??_Wireless_determineTransmitPower,w
  7114  0D86  0021               	movlb	1	; select bank1
  7115  0D87  07E1               	addwf	_currentTransmitPower^(0+128),f
  7116  0D88  0861               	movf	_currentTransmitPower^(0+128),w
  7117  0D89  3197  275C         	fcall	_Wireless_changeTransmitPower
  7118                           
  7119                           ;wireless.c: 99: return 1;
  7120  0D8B  3001               	movlw	1
  7121  0D8C  0008               	return
  7122  0D8D                     l6071:	
  7123                           ;wireless.c: 100: } else return 0;
  7124                           
  7125  0D8D  3000               	movlw	0
  7126  0D8E  0008               	return
  7127  0D8F                     l6075:	
  7128                           ;wireless.c: 102: }else{
  7129                           
  7130                           
  7131                           ;wireless.c: 104: if(!latestResult && currentTransmitPower < 3){
  7132  0D8F  0020               	movlb	0	; select bank0
  7133  0D90  083A               	movf	Wireless_determineTransmitPower@latestResult,w
  7134  0D91  1D03               	btfss	3,2
  7135  0D92  2DA3               	goto	l6087
  7136  0D93  3003               	movlw	3
  7137  0D94  0021               	movlb	1	; select bank1
  7138  0D95  0261               	subwf	_currentTransmitPower^(0+128),w
  7139  0D96  1803               	skipnc
  7140  0D97  2DA3               	goto	l6087
  7141                           
  7142                           ;wireless.c: 106: Wireless_changeTransmitPower(++currentTransmitPower);
  7143  0D98  3001               	movlw	1
  7144  0D99  0020               	movlb	0	; select bank0
  7145  0D9A  00B5               	movwf	??_Wireless_determineTransmitPower
  7146  0D9B  0835               	movf	??_Wireless_determineTransmitPower,w
  7147  0D9C  0021               	movlb	1	; select bank1
  7148  0D9D  07E1               	addwf	_currentTransmitPower^(0+128),f
  7149  0D9E  0861               	movf	_currentTransmitPower^(0+128),w
  7150  0D9F  3197  275C         	fcall	_Wireless_changeTransmitPower
  7151                           
  7152                           ;wireless.c: 107: return 1;
  7153  0DA1  3001               	movlw	1
  7154  0DA2  0008               	return
  7155  0DA3                     l6087:	
  7156                           ;wireless.c: 108: } else
  7157                           
  7158                           
  7159                           ;wireless.c: 109: return 0;
  7160  0DA3  3000               	movlw	0
  7161  0DA4  0008               	return
  7162  0DA5                     l6091:	
  7163                           
  7164                           ;wireless.c: 111: }
  7165                           ;wireless.c: 112: }
  7166                           ;wireless.c: 115: return !latestResult;
  7167  0DA5  0020               	movlb	0	; select bank0
  7168  0DA6  083A               	movf	Wireless_determineTransmitPower@latestResult,w
  7169  0DA7  1D03               	btfss	3,2
  7170  0DA8  2DAB               	goto	u5550
  7171  0DA9  3001               	movlw	1
  7172  0DAA  0008               	return
  7173  0DAB                     u5550:	
  7174  0DAB  3000               	movlw	0
  7175  0DAC  0008               	return
  7176  0DAD                     __end_of_Wireless_determineTransmitPower:	
  7177                           
  7178                           	psect	text8
  7179  1441                     __ptext8:	
  7180 ;; *************** function _Wireless_sendData *****************
  7181 ;; Defined at:
  7182 ;;		line 130 in file "wireless.c"
  7183 ;; Parameters:    Size  Location     Type
  7184 ;;  payload         1    wreg     PTR unsigned char 
  7185 ;;		 -> Wireless_packageData@data(7), Wireless_determineTransmitPower@testPayload(1), 
  7186 ;;  length          1   17[BANK0 ] unsigned char 
  7187 ;; Auto vars:     Size  Location     Type
  7188 ;;  payload         1   20[BANK0 ] PTR unsigned char 
  7189 ;;		 -> Wireless_packageData@data(7), Wireless_determineTransmitPower@testPayload(1), 
  7190 ;;  status          1   19[BANK0 ] unsigned char 
  7191 ;; Return value:  Size  Location     Type
  7192 ;;                  1    wreg      void 
  7193 ;; Registers used:
  7194 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  7195 ;; Tracked objects:
  7196 ;;		On entry : 0/0
  7197 ;;		On exit  : 0/0
  7198 ;;		Unchanged: 0/0
  7199 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7200 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7201 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7202 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7203 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7204 ;;Total ram usage:        4 bytes
  7205 ;; Hardware stack levels used:    1
  7206 ;; Hardware stack levels required when called:    9
  7207 ;; This function calls:
  7208 ;;		_RF_GetStatus
  7209 ;;		_RF_ResetStatusIRQ
  7210 ;;		_RF_TxPayload
  7211 ;; This function is called by:
  7212 ;;		_Wireless_determineTransmitPower
  7213 ;;		_Wireless_packageData
  7214 ;; This function uses a non-reentrant model
  7215 ;;
  7216                           
  7217                           
  7218                           ;psect for function _Wireless_sendData
  7219  1441                     _Wireless_sendData:	
  7220                           
  7221                           ;incstack = 0
  7222                           ; Regs used in _Wireless_sendData: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  7223                           ;Wireless_sendData@payload stored from wreg
  7224  1441  0020               	movlb	0	; select bank0
  7225  1442  00B4               	movwf	Wireless_sendData@payload
  7226                           
  7227                           ;wireless.c: 132: char status;
  7228                           ;wireless.c: 134: RF_ResetStatusIRQ(0x40|0x20|0x10);
  7229  1443  3070               	movlw	112
  7230  1444  3196  2600  3194   	fcall	_RF_ResetStatusIRQ
  7231                           
  7232                           ;wireless.c: 135: status = RF_GetStatus();
  7233  1447  3192  22EA  3194   	fcall	_RF_GetStatus
  7234  144A  0020               	movlb	0	; select bank0
  7235  144B  00B2               	movwf	??_Wireless_sendData
  7236  144C  0832               	movf	??_Wireless_sendData,w
  7237  144D  00B3               	movwf	Wireless_sendData@status
  7238                           
  7239                           ;wireless.c: 136: RF_TxPayload(payload, length);
  7240  144E  0831               	movf	Wireless_sendData@length,w
  7241  144F  00B2               	movwf	??_Wireless_sendData
  7242  1450  0832               	movf	??_Wireless_sendData,w
  7243  1451  00AE               	movwf	RF_TxPayload@payloadSize
  7244  1452  0834               	movf	Wireless_sendData@payload,w
  7245  1453  3195  2535         	fcall	_RF_TxPayload
  7246  1455  0008               	return
  7247  1456                     __end_of_Wireless_sendData:	
  7248                           
  7249                           	psect	text9
  7250  1535                     __ptext9:	
  7251 ;; *************** function _RF_TxPayload *****************
  7252 ;; Defined at:
  7253 ;;		line 173 in file "nrf24.c"
  7254 ;; Parameters:    Size  Location     Type
  7255 ;;  payload         1    wreg     PTR unsigned char 
  7256 ;;		 -> Wireless_packageData@data(7), Wireless_determineTransmitPower@testPayload(1), 
  7257 ;;  payloadSize     1   14[BANK0 ] unsigned char 
  7258 ;; Auto vars:     Size  Location     Type
  7259 ;;  payload         1   16[BANK0 ] PTR unsigned char 
  7260 ;;		 -> Wireless_packageData@data(7), Wireless_determineTransmitPower@testPayload(1), 
  7261 ;; Return value:  Size  Location     Type
  7262 ;;                  1    wreg      void 
  7263 ;; Registers used:
  7264 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  7265 ;; Tracked objects:
  7266 ;;		On entry : 0/0
  7267 ;;		On exit  : 0/0
  7268 ;;		Unchanged: 0/0
  7269 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7270 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7271 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7272 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7273 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7274 ;;Total ram usage:        3 bytes
  7275 ;; Hardware stack levels used:    1
  7276 ;; Hardware stack levels required when called:    8
  7277 ;; This function calls:
  7278 ;;		_RF_Write
  7279 ;;		_RF_WriteRegisterData
  7280 ;; This function is called by:
  7281 ;;		_Wireless_sendData
  7282 ;; This function uses a non-reentrant model
  7283 ;;
  7284                           
  7285                           
  7286                           ;psect for function _RF_TxPayload
  7287  1535                     _RF_TxPayload:	
  7288                           
  7289                           ;incstack = 0
  7290                           ; Regs used in _RF_TxPayload: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  7291                           ;RF_TxPayload@payload stored from wreg
  7292  1535  0020               	movlb	0	; select bank0
  7293  1536  00B0               	movwf	RF_TxPayload@payload
  7294                           
  7295                           ;nrf24.c: 174: RF_Write(0xE1);
  7296  1537  30E1               	movlw	225
  7297  1538  3193  23C3  3195   	fcall	_RF_Write
  7298                           
  7299                           ;nrf24.c: 175: RF_WriteRegisterData(0xA0, payload, payloadSize);
  7300  153B  0020               	movlb	0	; select bank0
  7301  153C  0830               	movf	RF_TxPayload@payload,w
  7302  153D  00A9               	movwf	RF_WriteRegisterData@buf
  7303  153E  3000               	movlw	0
  7304  153F  00AA               	movwf	RF_WriteRegisterData@buf+1
  7305  1540  082E               	movf	RF_TxPayload@payloadSize,w
  7306  1541  00AF               	movwf	??_RF_TxPayload
  7307  1542  082F               	movf	??_RF_TxPayload,w
  7308  1543  00AB               	movwf	RF_WriteRegisterData@bufSize
  7309  1544  30A0               	movlw	160
  7310  1545  3195  258A  3195   	fcall	_RF_WriteRegisterData
  7311                           
  7312                           ;nrf24.c: 176: do { LATCbits.LATC2 = 1; } while(0);
  7313  1548  0022               	movlb	2	; select bank2
  7314  1549  150E               	bsf	14,2	;volatile
  7315                           
  7316                           ;nrf24.c: 177: _delay((unsigned long)((15)*(8000000/4000000.0)));
  7317  154A  300A               	movlw	10
  7318  154B                     u7127:	
  7319  154B  0B89               	decfsz	9,f
  7320  154C  2D4B               	goto	u7127
  7321                           
  7322                           ;nrf24.c: 178: do { LATCbits.LATC2 = 0; } while(0);
  7323  154D  0022               	movlb	2	; select bank2
  7324  154E  110E               	bcf	14,2	;volatile
  7325  154F  0008               	return
  7326  1550                     __end_of_RF_TxPayload:	
  7327                           
  7328                           	psect	text10
  7329  13C3                     __ptext10:	
  7330 ;; *************** function _RF_Write *****************
  7331 ;; Defined at:
  7332 ;;		line 139 in file "nrf24.c"
  7333 ;; Parameters:    Size  Location     Type
  7334 ;;  val             1    wreg     unsigned char 
  7335 ;; Auto vars:     Size  Location     Type
  7336 ;;  val             1    3[BANK0 ] unsigned char 
  7337 ;; Return value:  Size  Location     Type
  7338 ;;                  1    wreg      void 
  7339 ;; Registers used:
  7340 ;;		wreg, status,2, status,0, pclath, cstack
  7341 ;; Tracked objects:
  7342 ;;		On entry : 0/0
  7343 ;;		On exit  : 0/0
  7344 ;;		Unchanged: 0/0
  7345 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7346 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7347 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7348 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7349 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7350 ;;Total ram usage:        1 bytes
  7351 ;; Hardware stack levels used:    1
  7352 ;; Hardware stack levels required when called:    6
  7353 ;; This function calls:
  7354 ;;		_SPI_WriteRead
  7355 ;; This function is called by:
  7356 ;;		_RF_TxPayload
  7357 ;; This function uses a non-reentrant model
  7358 ;;
  7359                           
  7360                           
  7361                           ;psect for function _RF_Write
  7362  13C3                     _RF_Write:	
  7363                           
  7364                           ;incstack = 0
  7365                           ; Regs used in _RF_Write: [wreg+status,2+status,0+pclath+cstack]
  7366                           ;RF_Write@val stored from wreg
  7367  13C3  0020               	movlb	0	; select bank0
  7368  13C4  00A3               	movwf	RF_Write@val
  7369                           
  7370                           ;nrf24.c: 140: do { LATCbits.LATC1 = 0; } while(0);
  7371  13C5  0022               	movlb	2	; select bank2
  7372  13C6  108E               	bcf	14,1	;volatile
  7373                           
  7374                           ;nrf24.c: 141: (void)SPI_WriteRead(val);
  7375  13C7  0020               	movlb	0	; select bank0
  7376  13C8  0823               	movf	RF_Write@val,w
  7377  13C9  3193  2303  3193   	fcall	_SPI_WriteRead
  7378                           
  7379                           ;nrf24.c: 142: do { LATCbits.LATC1 = 1; } while(0);
  7380  13CC  0022               	movlb	2	; select bank2
  7381  13CD  148E               	bsf	14,1	;volatile
  7382                           
  7383                           ;nrf24.c: 143: _delay((unsigned long)((10)*(8000000/4000000.0)));
  7384  13CE  3006               	movlw	6
  7385  13CF                     u7137:	
  7386  13CF  0B89               	decfsz	9,f
  7387  13D0  2BCF               	goto	u7137
  7388  13D1  3200               	nop2
  7389  13D2  0008               	return
  7390  13D3                     __end_of_RF_Write:	
  7391                           
  7392                           	psect	text11
  7393  1398                     __ptext11:	
  7394 ;; *************** function _Wireless_isDataTransmitSuccessful *****************
  7395 ;; Defined at:
  7396 ;;		line 203 in file "wireless.c"
  7397 ;; Parameters:    Size  Location     Type
  7398 ;;		None
  7399 ;; Auto vars:     Size  Location     Type
  7400 ;;  status          1    6[BANK0 ] unsigned char 
  7401 ;; Return value:  Size  Location     Type
  7402 ;;                  1    wreg      unsigned char 
  7403 ;; Registers used:
  7404 ;;		wreg, pclath, cstack
  7405 ;; Tracked objects:
  7406 ;;		On entry : 0/0
  7407 ;;		On exit  : 0/0
  7408 ;;		Unchanged: 0/0
  7409 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7410 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7411 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7412 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7413 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7414 ;;Total ram usage:        2 bytes
  7415 ;; Hardware stack levels used:    1
  7416 ;; Hardware stack levels required when called:    8
  7417 ;; This function calls:
  7418 ;;		_RF_GetStatus
  7419 ;; This function is called by:
  7420 ;;		_Wireless_determineTransmitPower
  7421 ;; This function uses a non-reentrant model
  7422 ;;
  7423                           
  7424                           
  7425                           ;psect for function _Wireless_isDataTransmitSuccessful
  7426  1398                     _Wireless_isDataTransmitSuccessful:	
  7427                           
  7428                           ;wireless.c: 204: char status = RF_GetStatus();
  7429                           
  7430                           ;incstack = 0
  7431                           ; Regs used in _Wireless_isDataTransmitSuccessful: [wreg+pclath+cstack]
  7432  1398  3192  22EA  3193   	fcall	_RF_GetStatus
  7433  139B  0020               	movlb	0	; select bank0
  7434  139C  00A5               	movwf	??_Wireless_isDataTransmitSuccessful
  7435  139D  0825               	movf	??_Wireless_isDataTransmitSuccessful,w
  7436  139E  00A6               	movwf	Wireless_isDataTransmitSuccessful@status
  7437                           
  7438                           ;wireless.c: 205: if(status & 0x20)
  7439  139F  1EA6               	btfss	Wireless_isDataTransmitSuccessful@status,5
  7440  13A0  2BA3               	goto	l5817
  7441                           
  7442                           ;wireless.c: 206: return 1;
  7443  13A1  3001               	movlw	1
  7444  13A2  0008               	return
  7445  13A3                     l5817:	
  7446                           
  7447                           ;wireless.c: 207: else
  7448                           ;wireless.c: 208: return 0;
  7449  13A3  3000               	movlw	0
  7450  13A4  0008               	return
  7451  13A5                     __end_of_Wireless_isDataTransmitSuccessful:	
  7452                           
  7453                           	psect	text12
  7454  12EA                     __ptext12:	
  7455 ;; *************** function _RF_GetStatus *****************
  7456 ;; Defined at:
  7457 ;;		line 150 in file "nrf24.c"
  7458 ;; Parameters:    Size  Location     Type
  7459 ;;		None
  7460 ;; Auto vars:     Size  Location     Type
  7461 ;;		None
  7462 ;; Return value:  Size  Location     Type
  7463 ;;                  1    wreg      unsigned char 
  7464 ;; Registers used:
  7465 ;;		wreg, pclath, cstack
  7466 ;; Tracked objects:
  7467 ;;		On entry : 0/0
  7468 ;;		On exit  : 0/0
  7469 ;;		Unchanged: 0/0
  7470 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7471 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7472 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7473 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7474 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7475 ;;Total ram usage:        0 bytes
  7476 ;; Hardware stack levels used:    1
  7477 ;; Hardware stack levels required when called:    7
  7478 ;; This function calls:
  7479 ;;		_RF_WriteRead
  7480 ;; This function is called by:
  7481 ;;		_Wireless_sendData
  7482 ;;		_Wireless_isDataTransmitSuccessful
  7483 ;; This function uses a non-reentrant model
  7484 ;;
  7485                           
  7486                           
  7487                           ;psect for function _RF_GetStatus
  7488  12EA                     _RF_GetStatus:	
  7489                           
  7490                           ;nrf24.c: 151: return RF_WriteRead(0xFF);
  7491                           
  7492                           ;incstack = 0
  7493                           ; Regs used in _RF_GetStatus: [wreg+pclath+cstack]
  7494  12EA  30FF               	movlw	255
  7495  12EB  3194  246C         	fcall	_RF_WriteRead
  7496  12ED  0008               	return
  7497  12EE                     __end_of_RF_GetStatus:	
  7498                           
  7499                           	psect	text13
  7500  146C                     __ptext13:	
  7501 ;; *************** function _RF_WriteRead *****************
  7502 ;; Defined at:
  7503 ;;		line 126 in file "nrf24.c"
  7504 ;; Parameters:    Size  Location     Type
  7505 ;;  val             1    wreg     unsigned char 
  7506 ;; Auto vars:     Size  Location     Type
  7507 ;;  val             1    4[BANK0 ] unsigned char 
  7508 ;; Return value:  Size  Location     Type
  7509 ;;                  1    wreg      unsigned char 
  7510 ;; Registers used:
  7511 ;;		wreg, pclath, cstack
  7512 ;; Tracked objects:
  7513 ;;		On entry : 0/0
  7514 ;;		On exit  : 0/0
  7515 ;;		Unchanged: 0/0
  7516 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7517 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7518 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7519 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7520 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7521 ;;Total ram usage:        2 bytes
  7522 ;; Hardware stack levels used:    1
  7523 ;; Hardware stack levels required when called:    6
  7524 ;; This function calls:
  7525 ;;		_SPI_WriteRead
  7526 ;; This function is called by:
  7527 ;;		_RF_GetStatus
  7528 ;; This function uses a non-reentrant model
  7529 ;;
  7530                           
  7531                           
  7532                           ;psect for function _RF_WriteRead
  7533  146C                     _RF_WriteRead:	
  7534                           
  7535                           ;incstack = 0
  7536                           ; Regs used in _RF_WriteRead: [wreg+pclath+cstack]
  7537                           ;RF_WriteRead@val stored from wreg
  7538  146C  0020               	movlb	0	; select bank0
  7539  146D  00A4               	movwf	RF_WriteRead@val
  7540                           
  7541                           ;nrf24.c: 127: do { LATCbits.LATC1 = 0; } while(0);
  7542  146E  0022               	movlb	2	; select bank2
  7543  146F  108E               	bcf	14,1	;volatile
  7544                           
  7545                           ;nrf24.c: 128: val = SPI_WriteRead(val);
  7546  1470  0020               	movlb	0	; select bank0
  7547  1471  0824               	movf	RF_WriteRead@val,w
  7548  1472  3193  2303  3194   	fcall	_SPI_WriteRead
  7549  1475  0020               	movlb	0	; select bank0
  7550  1476  00A3               	movwf	??_RF_WriteRead
  7551  1477  0823               	movf	??_RF_WriteRead,w
  7552  1478  00A4               	movwf	RF_WriteRead@val
  7553                           
  7554                           ;nrf24.c: 129: do { LATCbits.LATC1 = 1; } while(0);
  7555  1479  0022               	movlb	2	; select bank2
  7556  147A  148E               	bsf	14,1	;volatile
  7557                           
  7558                           ;nrf24.c: 130: _delay((unsigned long)((10)*(8000000/4000000.0)));
  7559  147B  3006               	movlw	6
  7560  147C                     u7147:	
  7561  147C  0B89               	decfsz	9,f
  7562  147D  2C7C               	goto	u7147
  7563  147E  3200               	nop2
  7564                           
  7565                           ;nrf24.c: 131: return val;
  7566  147F  0020               	movlb	0	; select bank0
  7567  1480  0824               	movf	RF_WriteRead@val,w
  7568  1481  0008               	return
  7569  1482                     __end_of_RF_WriteRead:	
  7570                           
  7571                           	psect	text14
  7572  175C                     __ptext14:	
  7573 ;; *************** function _Wireless_changeTransmitPower *****************
  7574 ;; Defined at:
  7575 ;;		line 117 in file "wireless.c"
  7576 ;; Parameters:    Size  Location     Type
  7577 ;;  power           1    wreg     unsigned char 
  7578 ;; Auto vars:     Size  Location     Type
  7579 ;;  power           1   18[BANK0 ] unsigned char 
  7580 ;;  val             1   19[BANK0 ] unsigned char 
  7581 ;; Return value:  Size  Location     Type
  7582 ;;                  1    wreg      void 
  7583 ;; Registers used:
  7584 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7585 ;; Tracked objects:
  7586 ;;		On entry : 0/0
  7587 ;;		On exit  : 0/0
  7588 ;;		Unchanged: 0/0
  7589 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7590 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7591 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7592 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7593 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7594 ;;Total ram usage:        5 bytes
  7595 ;; Hardware stack levels used:    1
  7596 ;; Hardware stack levels required when called:    8
  7597 ;; This function calls:
  7598 ;;		_RF_ReadRegisterData
  7599 ;;		_RF_WriteRegister
  7600 ;;		_limit
  7601 ;; This function is called by:
  7602 ;;		_Wireless_determineTransmitPower
  7603 ;; This function uses a non-reentrant model
  7604 ;;
  7605                           
  7606                           
  7607                           ;psect for function _Wireless_changeTransmitPower
  7608  175C                     _Wireless_changeTransmitPower:	
  7609                           
  7610                           ;incstack = 0
  7611                           ; Regs used in _Wireless_changeTransmitPower: [wreg+fsr1l+fsr1h+status,2+status,0+pclath
      +                          +cstack]
  7612                           ;Wireless_changeTransmitPower@power stored from wreg
  7613  175C  0020               	movlb	0	; select bank0
  7614  175D  00B2               	movwf	Wireless_changeTransmitPower@power
  7615                           
  7616                           ;wireless.c: 120: u8 val;
  7617                           ;wireless.c: 123: power = limit(power, 0, 3);
  7618  175E  0832               	movf	Wireless_changeTransmitPower@power,w
  7619  175F  00AF               	movwf	??_Wireless_changeTransmitPower
  7620  1760  01B0               	clrf	??_Wireless_changeTransmitPower+1
  7621  1761  082F               	movf	??_Wireless_changeTransmitPower,w
  7622  1762  00A1               	movwf	limit@val
  7623  1763  0830               	movf	??_Wireless_changeTransmitPower+1,w
  7624  1764  00A2               	movwf	limit@val+1
  7625  1765  3000               	movlw	0
  7626  1766  00A3               	movwf	limit@min
  7627  1767  00A4               	movwf	limit@min+1
  7628  1768  3003               	movlw	3
  7629  1769  00A5               	movwf	limit@max
  7630  176A  3000               	movlw	0
  7631  176B  00A6               	movwf	limit@max+1
  7632  176C  3196  2685  3197   	fcall	_limit
  7633  176F  0020               	movlb	0	; select bank0
  7634  1770  0821               	movf	?_limit,w
  7635  1771  00B1               	movwf	??_Wireless_changeTransmitPower+2
  7636  1772  0831               	movf	??_Wireless_changeTransmitPower+2,w
  7637  1773  00B2               	movwf	Wireless_changeTransmitPower@power
  7638                           
  7639                           ;wireless.c: 124: RF_ReadRegisterData(0x06, &val, 1);
  7640  1774  3033               	movlw	(low (Wireless_changeTransmitPower@val| 0))& (0+255)
  7641  1775  00AF               	movwf	??_Wireless_changeTransmitPower
  7642  1776  082F               	movf	??_Wireless_changeTransmitPower,w
  7643  1777  00AA               	movwf	RF_ReadRegisterData@buf
  7644  1778  01AB               	clrf	RF_ReadRegisterData@bufSize
  7645  1779  0AAB               	incf	RF_ReadRegisterData@bufSize,f
  7646  177A  3006               	movlw	6
  7647  177B  3195  25C4  3197   	fcall	_RF_ReadRegisterData
  7648                           
  7649                           ;wireless.c: 126: val &= 0b11111001;
  7650  177E  30F9               	movlw	249
  7651  177F  0020               	movlb	0	; select bank0
  7652  1780  00AF               	movwf	??_Wireless_changeTransmitPower
  7653  1781  082F               	movf	??_Wireless_changeTransmitPower,w
  7654  1782  05B3               	andwf	Wireless_changeTransmitPower@val,f
  7655                           
  7656                           ;wireless.c: 127: val |= (power <<1);
  7657  1783  3532               	lslf	Wireless_changeTransmitPower@power,w
  7658  1784  00AF               	movwf	??_Wireless_changeTransmitPower
  7659  1785  082F               	movf	??_Wireless_changeTransmitPower,w
  7660  1786  04B3               	iorwf	Wireless_changeTransmitPower@val,f
  7661                           
  7662                           ;wireless.c: 128: RF_WriteRegister(0x06, val);
  7663  1787  0833               	movf	Wireless_changeTransmitPower@val,w
  7664  1788  00AF               	movwf	??_Wireless_changeTransmitPower
  7665  1789  082F               	movf	??_Wireless_changeTransmitPower,w
  7666  178A  00A3               	movwf	RF_WriteRegister@val
  7667  178B  3006               	movlw	6
  7668  178C  3194  2456         	fcall	_RF_WriteRegister
  7669  178E  0008               	return
  7670  178F                     __end_of_Wireless_changeTransmitPower:	
  7671                           
  7672                           	psect	text15
  7673  1685                     __ptext15:	
  7674 ;; *************** function _limit *****************
  7675 ;; Defined at:
  7676 ;;		line 12 in file "common.c"
  7677 ;; Parameters:    Size  Location     Type
  7678 ;;  val             2    1[BANK0 ] int 
  7679 ;;  min             2    3[BANK0 ] int 
  7680 ;;  max             2    5[BANK0 ] int 
  7681 ;; Auto vars:     Size  Location     Type
  7682 ;;		None
  7683 ;; Return value:  Size  Location     Type
  7684 ;;                  2    1[BANK0 ] int 
  7685 ;; Registers used:
  7686 ;;		wreg
  7687 ;; Tracked objects:
  7688 ;;		On entry : 0/0
  7689 ;;		On exit  : 0/0
  7690 ;;		Unchanged: 0/0
  7691 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7692 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7693 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7694 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7695 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7696 ;;Total ram usage:        7 bytes
  7697 ;; Hardware stack levels used:    1
  7698 ;; Hardware stack levels required when called:    4
  7699 ;; This function calls:
  7700 ;;		Nothing
  7701 ;; This function is called by:
  7702 ;;		_Wireless_determineTransmitPower
  7703 ;;		_Wireless_changeTransmitPower
  7704 ;; This function uses a non-reentrant model
  7705 ;;
  7706                           
  7707                           
  7708                           ;psect for function _limit
  7709  1685                     _limit:	
  7710                           
  7711                           ;common.c: 13: if(val<min)
  7712                           
  7713                           ;incstack = 0
  7714                           ; Regs used in _limit: [wreg]
  7715  1685  0020               	movlb	0	; select bank0
  7716  1686  0822               	movf	limit@val+1,w
  7717  1687  3A80               	xorlw	128
  7718  1688  00A7               	movwf	??_limit
  7719  1689  0824               	movf	limit@min+1,w
  7720  168A  3A80               	xorlw	128
  7721  168B  0227               	subwf	??_limit,w
  7722  168C  1D03               	skipz
  7723  168D  2E90               	goto	u5085
  7724  168E  0823               	movf	limit@min,w
  7725  168F  0221               	subwf	limit@val,w
  7726  1690                     u5085:	
  7727  1690  1803               	skipnc
  7728  1691  2E98               	goto	l5623
  7729                           
  7730                           ;common.c: 14: return min;
  7731  1692  0020               	movlb	0	; select bank0
  7732  1693  0824               	movf	limit@min+1,w
  7733  1694  00A2               	movwf	?_limit+1
  7734  1695  0823               	movf	limit@min,w
  7735  1696  00A1               	movwf	?_limit
  7736  1697  0008               	return
  7737  1698                     l5623:	
  7738                           
  7739                           ;common.c: 15: if(val>max)
  7740  1698  0020               	movlb	0	; select bank0
  7741  1699  0826               	movf	limit@max+1,w
  7742  169A  3A80               	xorlw	128
  7743  169B  00A7               	movwf	??_limit
  7744  169C  0822               	movf	limit@val+1,w
  7745  169D  3A80               	xorlw	128
  7746  169E  0227               	subwf	??_limit,w
  7747  169F  1D03               	skipz
  7748  16A0  2EA3               	goto	u5095
  7749  16A1  0821               	movf	limit@val,w
  7750  16A2  0225               	subwf	limit@max,w
  7751  16A3                     u5095:	
  7752  16A3  1803               	skipnc
  7753  16A4  0008               	return
  7754                           
  7755                           ;common.c: 16: return max;
  7756  16A5  0020               	movlb	0	; select bank0
  7757  16A6  0826               	movf	limit@max+1,w
  7758  16A7  00A2               	movwf	?_limit+1
  7759  16A8  0825               	movf	limit@max,w
  7760  16A9  00A1               	movwf	?_limit
  7761  16AA  0008               	return
  7762  16AB                     __end_of_limit:	
  7763                           ;common.c: 17: return val;
  7764                           
  7765                           
  7766                           	psect	text16
  7767  0B7B                     __ptext16:	
  7768 ;; *************** function _Wireless_checkDataReceived *****************
  7769 ;; Defined at:
  7770 ;;		line 211 in file "wireless.c"
  7771 ;; Parameters:    Size  Location     Type
  7772 ;;		None
  7773 ;; Auto vars:     Size  Location     Type
  7774 ;;  data            2   23[BANK0 ] unsigned char [2]
  7775 ;;  channel         1   25[BANK0 ] unsigned char 
  7776 ;; Return value:  Size  Location     Type
  7777 ;;                  1    wreg      void 
  7778 ;; Registers used:
  7779 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7780 ;; Tracked objects:
  7781 ;;		On entry : 0/0
  7782 ;;		On exit  : 0/0
  7783 ;;		Unchanged: 0/0
  7784 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7785 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7786 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7787 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7788 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7789 ;;Total ram usage:        7 bytes
  7790 ;; Hardware stack levels used:    1
  7791 ;; Hardware stack levels required when called:    9
  7792 ;; This function calls:
  7793 ;;		_RF_DataIsReady
  7794 ;;		_RF_RxPayload
  7795 ;;		___lmul
  7796 ;; This function is called by:
  7797 ;;		_Wireless_packageData
  7798 ;; This function uses a non-reentrant model
  7799 ;;
  7800                           
  7801                           
  7802                           ;psect for function _Wireless_checkDataReceived
  7803  0B7B                     _Wireless_checkDataReceived:	
  7804  0B7B                     l1133:	
  7805                           ;incstack = 0
  7806                           ; Regs used in _Wireless_checkDataReceived: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+c
      +                          stack]
  7807                           ;wireless.c: 218: char channel;
  7808                           ;wireless.c: 219: char data[2];
  7809                           ;wireless.c: 220: do
  7810                           
  7811                           
  7812                           ;wireless.c: 221: {
  7813                           ;wireless.c: 222: if(RF_DataIsReady(&channel))
  7814  0B7B  3039               	movlw	(low (Wireless_checkDataReceived@channel| 0))& (0+255)
  7815  0B7C  3195  25A7  318B   	fcall	_RF_DataIsReady
  7816  0B7F  3A00               	xorlw	0
  7817  0B80  1903               	skipnz
  7818  0B81  2BE8               	goto	l6149
  7819                           
  7820                           ;wireless.c: 223: {
  7821                           ;wireless.c: 224: RF_RxPayload(data, 2);
  7822  0B82  3002               	movlw	2
  7823  0B83  0020               	movlb	0	; select bank0
  7824  0B84  00B3               	movwf	??_Wireless_checkDataReceived
  7825  0B85  0833               	movf	??_Wireless_checkDataReceived,w
  7826  0B86  00AF               	movwf	RF_RxPayload@payloadSize
  7827  0B87  3037               	movlw	(low (Wireless_checkDataReceived@data| 0))& (0+255)
  7828  0B88  3194  2419  318B   	fcall	_RF_RxPayload
  7829                           
  7830                           ;wireless.c: 225: sensorUpdatePeriod = data[0];
  7831  0B8B  0020               	movlb	0	; select bank0
  7832  0B8C  0837               	movf	Wireless_checkDataReceived@data,w
  7833  0B8D  00B3               	movwf	??_Wireless_checkDataReceived
  7834  0B8E  01B4               	clrf	??_Wireless_checkDataReceived+1
  7835  0B8F  01B5               	clrf	??_Wireless_checkDataReceived+2
  7836  0B90  01B6               	clrf	??_Wireless_checkDataReceived+3
  7837  0B91  0836               	movf	??_Wireless_checkDataReceived+3,w
  7838  0B92  0022               	movlb	2	; select bank2
  7839  0B93  00E9               	movwf	(_sensorUpdatePeriod+3)^(0+256)
  7840  0B94  0020               	movlb	0	; select bank0
  7841  0B95  0835               	movf	??_Wireless_checkDataReceived+2,w
  7842  0B96  0022               	movlb	2	; select bank2
  7843  0B97  00E8               	movwf	(_sensorUpdatePeriod+2)^(0+256)
  7844  0B98  0020               	movlb	0	; select bank0
  7845  0B99  0834               	movf	??_Wireless_checkDataReceived+1,w
  7846  0B9A  0022               	movlb	2	; select bank2
  7847  0B9B  00E7               	movwf	(_sensorUpdatePeriod+1)^(0+256)
  7848  0B9C  0020               	movlb	0	; select bank0
  7849  0B9D  0833               	movf	??_Wireless_checkDataReceived,w
  7850  0B9E  0022               	movlb	2	; select bank2
  7851  0B9F  00E6               	movwf	_sensorUpdatePeriod^(0+256)
  7852                           
  7853                           ;wireless.c: 226: sensorUpdatePeriod << = 8;
  7854  0BA0  3008               	movlw	8
  7855  0BA1                     u5655:	
  7856  0BA1  35E6               	lslf	_sensorUpdatePeriod^(0+256),f
  7857  0BA2  0DE7               	rlf	(_sensorUpdatePeriod+1)^(0+256),f
  7858  0BA3  0DE8               	rlf	(_sensorUpdatePeriod+2)^(0+256),f
  7859  0BA4  0DE9               	rlf	(_sensorUpdatePeriod+3)^(0+256),f
  7860  0BA5  0B89               	decfsz	9,f
  7861  0BA6  2BA1               	goto	u5655
  7862                           
  7863                           ;wireless.c: 227: sensorUpdatePeriod |= data[1];
  7864  0BA7  0020               	movlb	0	; select bank0
  7865  0BA8  0838               	movf	Wireless_checkDataReceived@data+1,w
  7866  0BA9  00B3               	movwf	??_Wireless_checkDataReceived
  7867  0BAA  01B4               	clrf	??_Wireless_checkDataReceived+1
  7868  0BAB  01B5               	clrf	??_Wireless_checkDataReceived+2
  7869  0BAC  01B6               	clrf	??_Wireless_checkDataReceived+3
  7870  0BAD  0833               	movf	??_Wireless_checkDataReceived,w
  7871  0BAE  0022               	movlb	2	; select bank2
  7872  0BAF  04E6               	iorwf	_sensorUpdatePeriod^(0+256),f
  7873  0BB0  0020               	movlb	0	; select bank0
  7874  0BB1  0834               	movf	??_Wireless_checkDataReceived+1,w
  7875  0BB2  0022               	movlb	2	; select bank2
  7876  0BB3  04E7               	iorwf	(_sensorUpdatePeriod+1)^(0+256),f
  7877  0BB4  0020               	movlb	0	; select bank0
  7878  0BB5  0835               	movf	??_Wireless_checkDataReceived+2,w
  7879  0BB6  0022               	movlb	2	; select bank2
  7880  0BB7  04E8               	iorwf	(_sensorUpdatePeriod+2)^(0+256),f
  7881  0BB8  0020               	movlb	0	; select bank0
  7882  0BB9  0836               	movf	??_Wireless_checkDataReceived+3,w
  7883  0BBA  0022               	movlb	2	; select bank2
  7884  0BBB  04E9               	iorwf	(_sensorUpdatePeriod+3)^(0+256),f
  7885                           
  7886                           ;wireless.c: 228: sensorUpdatePeriod *=1000;
  7887  0BBC  3000               	movlw	0
  7888  0BBD  0020               	movlb	0	; select bank0
  7889  0BBE  00A4               	movwf	___lmul@multiplier+3
  7890  0BBF  3000               	movlw	0
  7891  0BC0  00A3               	movwf	___lmul@multiplier+2
  7892  0BC1  3003               	movlw	3
  7893  0BC2  00A2               	movwf	___lmul@multiplier+1
  7894  0BC3  30E8               	movlw	232
  7895  0BC4  00A1               	movwf	___lmul@multiplier
  7896  0BC5  0022               	movlb	2	; select bank2
  7897  0BC6  0869               	movf	(_sensorUpdatePeriod+3)^(0+256),w
  7898  0BC7  0020               	movlb	0	; select bank0
  7899  0BC8  00A8               	movwf	___lmul@multiplicand+3
  7900  0BC9  0022               	movlb	2	; select bank2
  7901  0BCA  0868               	movf	(_sensorUpdatePeriod+2)^(0+256),w
  7902  0BCB  0020               	movlb	0	; select bank0
  7903  0BCC  00A7               	movwf	___lmul@multiplicand+2
  7904  0BCD  0022               	movlb	2	; select bank2
  7905  0BCE  0867               	movf	(_sensorUpdatePeriod+1)^(0+256),w
  7906  0BCF  0020               	movlb	0	; select bank0
  7907  0BD0  00A6               	movwf	___lmul@multiplicand+1
  7908  0BD1  0022               	movlb	2	; select bank2
  7909  0BD2  0866               	movf	_sensorUpdatePeriod^(0+256),w
  7910  0BD3  0020               	movlb	0	; select bank0
  7911  0BD4  00A5               	movwf	___lmul@multiplicand
  7912  0BD5  3197  272C  318B   	fcall	___lmul
  7913  0BD8  0020               	movlb	0	; select bank0
  7914  0BD9  0824               	movf	?___lmul+3,w
  7915  0BDA  0022               	movlb	2	; select bank2
  7916  0BDB  00E9               	movwf	(_sensorUpdatePeriod+3)^(0+256)
  7917  0BDC  0020               	movlb	0	; select bank0
  7918  0BDD  0823               	movf	?___lmul+2,w
  7919  0BDE  0022               	movlb	2	; select bank2
  7920  0BDF  00E8               	movwf	(_sensorUpdatePeriod+2)^(0+256)
  7921  0BE0  0020               	movlb	0	; select bank0
  7922  0BE1  0822               	movf	?___lmul+1,w
  7923  0BE2  0022               	movlb	2	; select bank2
  7924  0BE3  00E7               	movwf	(_sensorUpdatePeriod+1)^(0+256)
  7925  0BE4  0020               	movlb	0	; select bank0
  7926  0BE5  0821               	movf	?___lmul,w
  7927  0BE6  0022               	movlb	2	; select bank2
  7928  0BE7  00E6               	movwf	_sensorUpdatePeriod^(0+256)
  7929  0BE8                     l6149:	
  7930                           
  7931                           ;wireless.c: 232: }
  7932                           ;wireless.c: 233: }while(RF_DataIsReady(&channel));
  7933  0BE8  3039               	movlw	(low (Wireless_checkDataReceived@channel| 0))& (0+255)
  7934  0BE9  3195  25A7  318B   	fcall	_RF_DataIsReady
  7935  0BEC  3A00               	xorlw	0
  7936  0BED  1903               	btfsc	3,2
  7937  0BEE  0008               	return
  7938  0BEF  2B7B               	goto	l1133
  7939  0BF0                     __end_of_Wireless_checkDataReceived:	
  7940                           
  7941                           	psect	text17
  7942  1419                     __ptext17:	
  7943 ;; *************** function _RF_RxPayload *****************
  7944 ;; Defined at:
  7945 ;;		line 186 in file "nrf24.c"
  7946 ;; Parameters:    Size  Location     Type
  7947 ;;  payload         1    wreg     PTR unsigned char 
  7948 ;;		 -> Wireless_checkDataReceived@data(2), 
  7949 ;;  payloadSize     1   15[BANK0 ] unsigned char 
  7950 ;; Auto vars:     Size  Location     Type
  7951 ;;  payload         1   18[BANK0 ] PTR unsigned char 
  7952 ;;		 -> Wireless_checkDataReceived@data(2), 
  7953 ;; Return value:  Size  Location     Type
  7954 ;;                  1    wreg      void 
  7955 ;; Registers used:
  7956 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7957 ;; Tracked objects:
  7958 ;;		On entry : 0/0
  7959 ;;		On exit  : 0/0
  7960 ;;		Unchanged: 0/0
  7961 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7962 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7963 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7964 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7965 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7966 ;;Total ram usage:        4 bytes
  7967 ;; Hardware stack levels used:    1
  7968 ;; Hardware stack levels required when called:    8
  7969 ;; This function calls:
  7970 ;;		_RF_ReadRegisterData
  7971 ;; This function is called by:
  7972 ;;		_Wireless_checkDataReceived
  7973 ;; This function uses a non-reentrant model
  7974 ;;
  7975                           
  7976                           
  7977                           ;psect for function _RF_RxPayload
  7978  1419                     _RF_RxPayload:	
  7979                           
  7980                           ;incstack = 0
  7981                           ; Regs used in _RF_RxPayload: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  7982                           ;RF_RxPayload@payload stored from wreg
  7983  1419  0020               	movlb	0	; select bank0
  7984  141A  00B2               	movwf	RF_RxPayload@payload
  7985                           
  7986                           ;nrf24.c: 187: do { LATCbits.LATC2 = 0; } while(0);
  7987  141B  0022               	movlb	2	; select bank2
  7988  141C  110E               	bcf	14,2	;volatile
  7989                           
  7990                           ;nrf24.c: 188: RF_ReadRegisterData(0x61, payload, payloadSize);
  7991  141D  0020               	movlb	0	; select bank0
  7992  141E  0832               	movf	RF_RxPayload@payload,w
  7993  141F  00B0               	movwf	??_RF_RxPayload
  7994  1420  0830               	movf	??_RF_RxPayload,w
  7995  1421  00AA               	movwf	RF_ReadRegisterData@buf
  7996  1422  082F               	movf	RF_RxPayload@payloadSize,w
  7997  1423  00B1               	movwf	??_RF_RxPayload+1
  7998  1424  0831               	movf	??_RF_RxPayload+1,w
  7999  1425  00AB               	movwf	RF_ReadRegisterData@bufSize
  8000  1426  3061               	movlw	97
  8001  1427  3195  25C4         	fcall	_RF_ReadRegisterData
  8002                           
  8003                           ;nrf24.c: 189: do { LATCbits.LATC2 = 1; } while(0);
  8004  1429  0022               	movlb	2	; select bank2
  8005  142A  150E               	bsf	14,2	;volatile
  8006  142B  0008               	return
  8007  142C                     __end_of_RF_RxPayload:	
  8008                           
  8009                           	psect	text18
  8010  15C4                     __ptext18:	
  8011 ;; *************** function _RF_ReadRegisterData *****************
  8012 ;; Defined at:
  8013 ;;		line 99 in file "nrf24.c"
  8014 ;; Parameters:    Size  Location     Type
  8015 ;;  reg             1    wreg     unsigned char 
  8016 ;;  buf             1   10[BANK0 ] PTR unsigned char 
  8017 ;;		 -> Wireless_checkDataReceived@data(2), Wireless_wake@reg(1), Wireless_sleep@reg(1), Wireless_changeTransmitPower@va
      +l(1), 
  8018 ;;  bufSize         1   11[BANK0 ] unsigned char 
  8019 ;; Auto vars:     Size  Location     Type
  8020 ;;  reg             1   14[BANK0 ] unsigned char 
  8021 ;; Return value:  Size  Location     Type
  8022 ;;                  1    wreg      void 
  8023 ;; Registers used:
  8024 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8025 ;; Tracked objects:
  8026 ;;		On entry : 0/0
  8027 ;;		On exit  : 0/0
  8028 ;;		Unchanged: 0/0
  8029 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8030 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8031 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8032 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8033 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8034 ;;Total ram usage:        5 bytes
  8035 ;; Hardware stack levels used:    1
  8036 ;; Hardware stack levels required when called:    7
  8037 ;; This function calls:
  8038 ;;		_SPI_WriteRead
  8039 ;;		_SPI_WriteReadBuffer
  8040 ;; This function is called by:
  8041 ;;		_RF_RxPayload
  8042 ;;		_Wireless_changeTransmitPower
  8043 ;;		_Wireless_sleep
  8044 ;;		_Wireless_wake
  8045 ;; This function uses a non-reentrant model
  8046 ;;
  8047                           
  8048                           
  8049                           ;psect for function _RF_ReadRegisterData
  8050  15C4                     _RF_ReadRegisterData:	
  8051                           
  8052                           ;incstack = 0
  8053                           ; Regs used in _RF_ReadRegisterData: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8054                           ;RF_ReadRegisterData@reg stored from wreg
  8055  15C4  0020               	movlb	0	; select bank0
  8056  15C5  00AE               	movwf	RF_ReadRegisterData@reg
  8057                           
  8058                           ;nrf24.c: 100: do { LATCbits.LATC1 = 0; } while(0);
  8059  15C6  0022               	movlb	2	; select bank2
  8060  15C7  108E               	bcf	14,1	;volatile
  8061                           
  8062                           ;nrf24.c: 101: (void)SPI_WriteRead(0x00|reg);
  8063  15C8  0020               	movlb	0	; select bank0
  8064  15C9  082E               	movf	RF_ReadRegisterData@reg,w
  8065  15CA  3193  2303  3195   	fcall	_SPI_WriteRead
  8066                           
  8067                           ;nrf24.c: 102: SPI_WriteReadBuffer(buf, buf, bufSize);
  8068  15CD  0020               	movlb	0	; select bank0
  8069  15CE  082A               	movf	RF_ReadRegisterData@buf,w
  8070  15CF  00AC               	movwf	??_RF_ReadRegisterData
  8071  15D0  082C               	movf	??_RF_ReadRegisterData,w
  8072  15D1  00A3               	movwf	SPI_WriteReadBuffer@bufIn
  8073  15D2  082B               	movf	RF_ReadRegisterData@bufSize,w
  8074  15D3  00AD               	movwf	??_RF_ReadRegisterData+1
  8075  15D4  082D               	movf	??_RF_ReadRegisterData+1,w
  8076  15D5  00A4               	movwf	SPI_WriteReadBuffer@bufSize
  8077  15D6  082A               	movf	RF_ReadRegisterData@buf,w
  8078  15D7  3196  2620  3195   	fcall	_SPI_WriteReadBuffer
  8079                           
  8080                           ;nrf24.c: 103: do { LATCbits.LATC1 = 1; } while(0);
  8081  15DA  0022               	movlb	2	; select bank2
  8082  15DB  148E               	bsf	14,1	;volatile
  8083                           
  8084                           ;nrf24.c: 104: _delay((unsigned long)((10)*(8000000/4000000.0)));
  8085  15DC  3006               	movlw	6
  8086  15DD                     u7157:	
  8087  15DD  0B89               	decfsz	9,f
  8088  15DE  2DDD               	goto	u7157
  8089  15DF  3200               	nop2
  8090  15E0  0008               	return
  8091  15E1                     __end_of_RF_ReadRegisterData:	
  8092                           
  8093                           	psect	text19
  8094  1620                     __ptext19:	
  8095 ;; *************** function _SPI_WriteReadBuffer *****************
  8096 ;; Defined at:
  8097 ;;		line 43 in file "nrf24.c"
  8098 ;; Parameters:    Size  Location     Type
  8099 ;;  bufOut          1    wreg     PTR unsigned char 
  8100 ;;		 -> Wireless_checkDataReceived@data(2), Wireless_wake@reg(1), Wireless_sleep@reg(1), Wireless_changeTransmitPower@va
      +l(1), 
  8101 ;;  bufIn           1    3[BANK0 ] PTR unsigned char 
  8102 ;;		 -> Wireless_checkDataReceived@data(2), Wireless_wake@reg(1), Wireless_sleep@reg(1), Wireless_changeTransmitPower@va
      +l(1), 
  8103 ;;  bufSize         1    4[BANK0 ] unsigned char 
  8104 ;; Auto vars:     Size  Location     Type
  8105 ;;  bufOut          1    8[BANK0 ] PTR unsigned char 
  8106 ;;		 -> Wireless_checkDataReceived@data(2), Wireless_wake@reg(1), Wireless_sleep@reg(1), Wireless_changeTransmitPower@va
      +l(1), 
  8107 ;;  i               1    9[BANK0 ] unsigned char 
  8108 ;; Return value:  Size  Location     Type
  8109 ;;                  1    wreg      void 
  8110 ;; Registers used:
  8111 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8112 ;; Tracked objects:
  8113 ;;		On entry : 0/0
  8114 ;;		On exit  : 0/0
  8115 ;;		Unchanged: 0/0
  8116 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8117 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8118 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8119 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8120 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8121 ;;Total ram usage:        7 bytes
  8122 ;; Hardware stack levels used:    1
  8123 ;; Hardware stack levels required when called:    6
  8124 ;; This function calls:
  8125 ;;		_SPI_WriteRead
  8126 ;; This function is called by:
  8127 ;;		_RF_ReadRegisterData
  8128 ;; This function uses a non-reentrant model
  8129 ;;
  8130                           
  8131                           
  8132                           ;psect for function _SPI_WriteReadBuffer
  8133  1620                     _SPI_WriteReadBuffer:	
  8134                           
  8135                           ;incstack = 0
  8136                           ; Regs used in _SPI_WriteReadBuffer: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8137                           ;SPI_WriteReadBuffer@bufOut stored from wreg
  8138  1620  0020               	movlb	0	; select bank0
  8139  1621  00A8               	movwf	SPI_WriteReadBuffer@bufOut
  8140                           
  8141                           ;nrf24.c: 44: uint8_t i;
  8142                           ;nrf24.c: 46: for(i=0;i<bufSize;i++) {
  8143  1622  01A9               	clrf	SPI_WriteReadBuffer@i
  8144  1623                     l5535:	
  8145  1623  0824               	movf	SPI_WriteReadBuffer@bufSize,w
  8146  1624  0229               	subwf	SPI_WriteReadBuffer@i,w
  8147  1625  1803               	btfsc	3,0
  8148  1626  0008               	return
  8149                           
  8150                           ;nrf24.c: 47: bufIn[i] = SPI_WriteRead(bufOut[i]);
  8151  1627  0829               	movf	SPI_WriteReadBuffer@i,w
  8152  1628  0728               	addwf	SPI_WriteReadBuffer@bufOut,w
  8153  1629  00A5               	movwf	??_SPI_WriteReadBuffer
  8154  162A  0825               	movf	??_SPI_WriteReadBuffer,w
  8155  162B  0086               	movwf	6
  8156  162C  0187               	clrf	7
  8157  162D  0801               	movf	1,w
  8158  162E  3193  2303  3196   	fcall	_SPI_WriteRead
  8159  1631  0020               	movlb	0	; select bank0
  8160  1632  00A6               	movwf	??_SPI_WriteReadBuffer+1
  8161  1633  0829               	movf	SPI_WriteReadBuffer@i,w
  8162  1634  0723               	addwf	SPI_WriteReadBuffer@bufIn,w
  8163  1635  00A7               	movwf	??_SPI_WriteReadBuffer+2
  8164  1636  0827               	movf	??_SPI_WriteReadBuffer+2,w
  8165  1637  0086               	movwf	6
  8166  1638  0187               	clrf	7
  8167  1639  0826               	movf	??_SPI_WriteReadBuffer+1,w
  8168  163A  0081               	movwf	1
  8169  163B  3001               	movlw	1
  8170  163C  00A5               	movwf	??_SPI_WriteReadBuffer
  8171  163D  0825               	movf	??_SPI_WriteReadBuffer,w
  8172  163E  07A9               	addwf	SPI_WriteReadBuffer@i,f
  8173  163F  2E23               	goto	l5535
  8174  1640                     __end_of_SPI_WriteReadBuffer:	
  8175                           
  8176                           	psect	text20
  8177  15A7                     __ptext20:	
  8178 ;; *************** function _RF_DataIsReady *****************
  8179 ;; Defined at:
  8180 ;;		line 202 in file "nrf24.c"
  8181 ;; Parameters:    Size  Location     Type
  8182 ;;  channel         1    wreg     PTR unsigned char 
  8183 ;;		 -> Wireless_checkDataReceived@channel(1), 
  8184 ;; Auto vars:     Size  Location     Type
  8185 ;;  channel         1    7[BANK0 ] PTR unsigned char 
  8186 ;;		 -> Wireless_checkDataReceived@channel(1), 
  8187 ;;  status          1    8[BANK0 ] unsigned char 
  8188 ;; Return value:  Size  Location     Type
  8189 ;;                  1    wreg      unsigned char 
  8190 ;; Registers used:
  8191 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8192 ;; Tracked objects:
  8193 ;;		On entry : 0/0
  8194 ;;		On exit  : 0/0
  8195 ;;		Unchanged: 0/0
  8196 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8197 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8198 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8199 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8200 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8201 ;;Total ram usage:        3 bytes
  8202 ;; Hardware stack levels used:    1
  8203 ;; Hardware stack levels required when called:    7
  8204 ;; This function calls:
  8205 ;;		_RF_ReadRegister
  8206 ;; This function is called by:
  8207 ;;		_Wireless_checkDataReceived
  8208 ;; This function uses a non-reentrant model
  8209 ;;
  8210                           
  8211                           
  8212                           ;psect for function _RF_DataIsReady
  8213  15A7                     _RF_DataIsReady:	
  8214                           
  8215                           ;incstack = 0
  8216                           ; Regs used in _RF_DataIsReady: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8217                           ;RF_DataIsReady@channel stored from wreg
  8218  15A7  0020               	movlb	0	; select bank0
  8219  15A8  00A7               	movwf	RF_DataIsReady@channel
  8220                           
  8221                           ;nrf24.c: 204: char status;
  8222                           ;nrf24.c: 205: status=RF_ReadRegister(0x07);
  8223  15A9  3007               	movlw	7
  8224  15AA  3194  24CA  3195   	fcall	_RF_ReadRegister
  8225  15AD  0020               	movlb	0	; select bank0
  8226  15AE  00A6               	movwf	??_RF_DataIsReady
  8227  15AF  0826               	movf	??_RF_DataIsReady,w
  8228  15B0  00A8               	movwf	RF_DataIsReady@status
  8229                           
  8230                           ;nrf24.c: 206: status&=0x0E;
  8231  15B1  300E               	movlw	14
  8232  15B2  00A6               	movwf	??_RF_DataIsReady
  8233  15B3  0826               	movf	??_RF_DataIsReady,w
  8234  15B4  05A8               	andwf	RF_DataIsReady@status,f
  8235                           
  8236                           ;nrf24.c: 207: if(status==0x0E)
  8237  15B5  300E               	movlw	14
  8238  15B6  0628               	xorwf	RF_DataIsReady@status,w
  8239  15B7  1D03               	btfss	3,2
  8240  15B8  2DBB               	goto	l5783
  8241                           
  8242                           ;nrf24.c: 208: return 0;
  8243  15B9  3000               	movlw	0
  8244  15BA  0008               	return
  8245  15BB                     l5783:	
  8246                           
  8247                           ;nrf24.c: 209: else
  8248                           ;nrf24.c: 210: *channel=status>>1;
  8249  15BB  3628               	lsrf	RF_DataIsReady@status,w
  8250  15BC  00A6               	movwf	??_RF_DataIsReady
  8251  15BD  0827               	movf	RF_DataIsReady@channel,w
  8252  15BE  0086               	movwf	6
  8253  15BF  0187               	clrf	7
  8254  15C0  0826               	movf	??_RF_DataIsReady,w
  8255  15C1  0081               	movwf	1
  8256                           
  8257                           ;nrf24.c: 211: return 1;
  8258  15C2  3001               	movlw	1
  8259  15C3  0008               	return
  8260  15C4                     __end_of_RF_DataIsReady:	
  8261                           
  8262                           	psect	text21
  8263  14CA                     __ptext21:	
  8264 ;; *************** function _RF_ReadRegister *****************
  8265 ;; Defined at:
  8266 ;;		line 82 in file "nrf24.c"
  8267 ;; Parameters:    Size  Location     Type
  8268 ;;  reg             1    wreg     unsigned char 
  8269 ;; Auto vars:     Size  Location     Type
  8270 ;;  reg             1    4[BANK0 ] unsigned char 
  8271 ;;  val             1    5[BANK0 ] unsigned char 
  8272 ;; Return value:  Size  Location     Type
  8273 ;;                  1    wreg      unsigned char 
  8274 ;; Registers used:
  8275 ;;		wreg, status,2, status,0, pclath, cstack
  8276 ;; Tracked objects:
  8277 ;;		On entry : 0/0
  8278 ;;		On exit  : 0/0
  8279 ;;		Unchanged: 0/0
  8280 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8281 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8282 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8283 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8284 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8285 ;;Total ram usage:        3 bytes
  8286 ;; Hardware stack levels used:    1
  8287 ;; Hardware stack levels required when called:    6
  8288 ;; This function calls:
  8289 ;;		_SPI_WriteRead
  8290 ;; This function is called by:
  8291 ;;		_RF_DataIsReady
  8292 ;; This function uses a non-reentrant model
  8293 ;;
  8294                           
  8295                           
  8296                           ;psect for function _RF_ReadRegister
  8297  14CA                     _RF_ReadRegister:	
  8298                           
  8299                           ;incstack = 0
  8300                           ; Regs used in _RF_ReadRegister: [wreg+status,2+status,0+pclath+cstack]
  8301                           ;RF_ReadRegister@reg stored from wreg
  8302  14CA  0020               	movlb	0	; select bank0
  8303  14CB  00A4               	movwf	RF_ReadRegister@reg
  8304                           
  8305                           ;nrf24.c: 83: uint8_t val;
  8306                           ;nrf24.c: 85: do { LATCbits.LATC1 = 0; } while(0);
  8307  14CC  0022               	movlb	2	; select bank2
  8308  14CD  108E               	bcf	14,1	;volatile
  8309                           
  8310                           ;nrf24.c: 86: (void)SPI_WriteRead(reg);
  8311  14CE  0020               	movlb	0	; select bank0
  8312  14CF  0824               	movf	RF_ReadRegister@reg,w
  8313  14D0  3193  2303  3194   	fcall	_SPI_WriteRead
  8314                           
  8315                           ;nrf24.c: 87: val = SPI_WriteRead(0);
  8316  14D3  3000               	movlw	0
  8317  14D4  3193  2303  3194   	fcall	_SPI_WriteRead
  8318  14D7  0020               	movlb	0	; select bank0
  8319  14D8  00A3               	movwf	??_RF_ReadRegister
  8320  14D9  0823               	movf	??_RF_ReadRegister,w
  8321  14DA  00A5               	movwf	RF_ReadRegister@val
  8322                           
  8323                           ;nrf24.c: 88: do { LATCbits.LATC1 = 1; } while(0);
  8324  14DB  0022               	movlb	2	; select bank2
  8325  14DC  148E               	bsf	14,1	;volatile
  8326                           
  8327                           ;nrf24.c: 89: _delay((unsigned long)((10)*(8000000/4000000.0)));
  8328  14DD  3006               	movlw	6
  8329  14DE                     u7167:	
  8330  14DE  0B89               	decfsz	9,f
  8331  14DF  2CDE               	goto	u7167
  8332  14E0  3200               	nop2
  8333                           
  8334                           ;nrf24.c: 90: return val;
  8335  14E1  0020               	movlb	0	; select bank0
  8336  14E2  0825               	movf	RF_ReadRegister@val,w
  8337  14E3  0008               	return
  8338  14E4                     __end_of_RF_ReadRegister:	
  8339                           
  8340                           	psect	text22
  8341  0866                     __ptext22:	
  8342 ;; *************** function _Sensor_getSupplyVoltage *****************
  8343 ;; Defined at:
  8344 ;;		line 6 in file "sensors.c"
  8345 ;; Parameters:    Size  Location     Type
  8346 ;;		None
  8347 ;; Auto vars:     Size  Location     Type
  8348 ;;  voltage         3   36[BANK0 ] float 
  8349 ;;  res             2   39[BANK0 ] unsigned short 
  8350 ;; Return value:  Size  Location     Type
  8351 ;;                  3   33[BANK0 ] float 
  8352 ;; Registers used:
  8353 ;;		wreg, status,2, status,0, pclath, cstack
  8354 ;; Tracked objects:
  8355 ;;		On entry : 0/0
  8356 ;;		On exit  : 0/0
  8357 ;;		Unchanged: 0/0
  8358 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8359 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8360 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8361 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8362 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8363 ;;Total ram usage:        8 bytes
  8364 ;; Hardware stack levels used:    1
  8365 ;; Hardware stack levels required when called:    6
  8366 ;; This function calls:
  8367 ;;		_ADC_GetConversionResult
  8368 ;;		_ADC_IsConversionDone
  8369 ;;		_ADC_SelectChannel
  8370 ;;		_ADC_StartConversion
  8371 ;;		_FVR_IsOutputReady
  8372 ;;		_Sensor_peripheralSleep
  8373 ;;		_Sensor_peripheralWake
  8374 ;;		___ftdiv
  8375 ;;		___lwtoft
  8376 ;; This function is called by:
  8377 ;;		_Wireless_packageData
  8378 ;; This function uses a non-reentrant model
  8379 ;;
  8380                           
  8381                           
  8382                           ;psect for function _Sensor_getSupplyVoltage
  8383  0866                     _Sensor_getSupplyVoltage:	
  8384                           
  8385                           ;sensors.c: 8: u16 res;
  8386                           ;sensors.c: 9: float voltage;
  8387                           ;sensors.c: 11: Sensor_peripheralWake();
  8388                           
  8389                           ;incstack = 0
  8390                           ; Regs used in _Sensor_getSupplyVoltage: [wreg+status,2+status,0+pclath+cstack]
  8391  0866  3192  22F3  3188   	fcall	_Sensor_peripheralWake
  8392  0869                     l5981:	
  8393                           ;sensors.c: 12: while(!FVR_IsOutputReady());
  8394                           
  8395  0869  3193  2309  3188   	fcall	_FVR_IsOutputReady
  8396  086C  3A00               	xorlw	0
  8397  086D  1903               	skipnz
  8398  086E  2869               	goto	l5981
  8399                           
  8400                           ;sensors.c: 13: ADC_SelectChannel(channel_FVR);
  8401  086F  301F               	movlw	31
  8402  0870  3193  23B3  3188   	fcall	_ADC_SelectChannel
  8403                           
  8404                           ;sensors.c: 14: ADC_StartConversion();
  8405  0873  3192  22DB  3188   	fcall	_ADC_StartConversion
  8406  0876                     l5987:	
  8407                           ;sensors.c: 15: while(!ADC_IsConversionDone());
  8408                           
  8409  0876  3193  2329  3188   	fcall	_ADC_IsConversionDone
  8410  0879  3A00               	xorlw	0
  8411  087A  1903               	skipnz
  8412  087B  2876               	goto	l5987
  8413                           
  8414                           ;sensors.c: 16: Sensor_peripheralSleep();
  8415  087C  3192  22EE  3188   	fcall	_Sensor_peripheralSleep
  8416                           
  8417                           ;sensors.c: 17: res=ADC_GetConversionResult();
  8418  087F  3193  236C  3188   	fcall	_ADC_GetConversionResult
  8419  0882  0020               	movlb	0	; select bank0
  8420  0883  0822               	movf	?_ADC_GetConversionResult+1,w
  8421  0884  00C8               	movwf	Sensor_getSupplyVoltage@res+1
  8422  0885  0821               	movf	?_ADC_GetConversionResult,w
  8423  0886  00C7               	movwf	Sensor_getSupplyVoltage@res
  8424                           
  8425                           ;sensors.c: 19: voltage= (float) 1.024 * 1024/(float)res;
  8426  0887  0848               	movf	Sensor_getSupplyVoltage@res+1,w
  8427  0888  00AA               	movwf	___lwtoft@c+1
  8428  0889  0847               	movf	Sensor_getSupplyVoltage@res,w
  8429  088A  00A9               	movwf	___lwtoft@c
  8430  088B  3194  242C  3188   	fcall	___lwtoft
  8431  088E  0020               	movlb	0	; select bank0
  8432  088F  0829               	movf	?___lwtoft,w
  8433  0890  00B1               	movwf	___ftdiv@f2
  8434  0891  082A               	movf	?___lwtoft+1,w
  8435  0892  00B2               	movwf	___ftdiv@f2+1
  8436  0893  082B               	movf	?___lwtoft+2,w
  8437  0894  00B3               	movwf	___ftdiv@f2+2
  8438  0895  3012               	movlw	18
  8439  0896  00B4               	movwf	___ftdiv@f1
  8440  0897  3083               	movlw	131
  8441  0898  00B5               	movwf	___ftdiv@f1+1
  8442  0899  3044               	movlw	68
  8443  089A  00B6               	movwf	___ftdiv@f1+2
  8444  089B  318D  25AD         	fcall	___ftdiv
  8445  089D  0020               	movlb	0	; select bank0
  8446  089E  0831               	movf	?___ftdiv,w
  8447  089F  00C4               	movwf	Sensor_getSupplyVoltage@voltage
  8448  08A0  0832               	movf	?___ftdiv+1,w
  8449  08A1  00C5               	movwf	Sensor_getSupplyVoltage@voltage+1
  8450  08A2  0833               	movf	?___ftdiv+2,w
  8451  08A3  00C6               	movwf	Sensor_getSupplyVoltage@voltage+2
  8452                           
  8453                           ;sensors.c: 20: return(voltage);
  8454  08A4  0844               	movf	Sensor_getSupplyVoltage@voltage,w
  8455  08A5  00C1               	movwf	?_Sensor_getSupplyVoltage
  8456  08A6  0845               	movf	Sensor_getSupplyVoltage@voltage+1,w
  8457  08A7  00C2               	movwf	?_Sensor_getSupplyVoltage+1
  8458  08A8  0846               	movf	Sensor_getSupplyVoltage@voltage+2,w
  8459  08A9  00C3               	movwf	?_Sensor_getSupplyVoltage+2
  8460  08AA  0008               	return
  8461  08AB                     __end_of_Sensor_getSupplyVoltage:	
  8462                           
  8463                           	psect	text23
  8464  12F3                     __ptext23:	
  8465 ;; *************** function _Sensor_peripheralWake *****************
  8466 ;; Defined at:
  8467 ;;		line 32 in file "sensors.c"
  8468 ;; Parameters:    Size  Location     Type
  8469 ;;		None
  8470 ;; Auto vars:     Size  Location     Type
  8471 ;;		None
  8472 ;; Return value:  Size  Location     Type
  8473 ;;                  1    wreg      void 
  8474 ;; Registers used:
  8475 ;;		None
  8476 ;; Tracked objects:
  8477 ;;		On entry : 0/0
  8478 ;;		On exit  : 0/0
  8479 ;;		Unchanged: 0/0
  8480 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8481 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8482 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8483 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8484 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8485 ;;Total ram usage:        0 bytes
  8486 ;; Hardware stack levels used:    1
  8487 ;; Hardware stack levels required when called:    4
  8488 ;; This function calls:
  8489 ;;		Nothing
  8490 ;; This function is called by:
  8491 ;;		_Sensor_getSupplyVoltage
  8492 ;; This function uses a non-reentrant model
  8493 ;;
  8494                           
  8495                           
  8496                           ;psect for function _Sensor_peripheralWake
  8497  12F3                     _Sensor_peripheralWake:	
  8498                           
  8499                           ;sensors.c: 34: ADCON0bits.ADON=1;
  8500                           
  8501                           ;incstack = 0
  8502                           ; Regs used in _Sensor_peripheralWake: []
  8503  12F3  0021               	movlb	1	; select bank1
  8504  12F4  141D               	bsf	29,0	;volatile
  8505                           
  8506                           ;sensors.c: 35: FVRCONbits.FVREN=1;
  8507  12F5  0022               	movlb	2	; select bank2
  8508  12F6  1797               	bsf	23,7	;volatile
  8509  12F7  0008               	return
  8510  12F8                     __end_of_Sensor_peripheralWake:	
  8511                           
  8512                           	psect	text24
  8513  12EE                     __ptext24:	
  8514 ;; *************** function _Sensor_peripheralSleep *****************
  8515 ;; Defined at:
  8516 ;;		line 26 in file "sensors.c"
  8517 ;; Parameters:    Size  Location     Type
  8518 ;;		None
  8519 ;; Auto vars:     Size  Location     Type
  8520 ;;		None
  8521 ;; Return value:  Size  Location     Type
  8522 ;;                  1    wreg      void 
  8523 ;; Registers used:
  8524 ;;		None
  8525 ;; Tracked objects:
  8526 ;;		On entry : 0/0
  8527 ;;		On exit  : 0/0
  8528 ;;		Unchanged: 0/0
  8529 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8530 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8531 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8532 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8533 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8534 ;;Total ram usage:        0 bytes
  8535 ;; Hardware stack levels used:    1
  8536 ;; Hardware stack levels required when called:    4
  8537 ;; This function calls:
  8538 ;;		Nothing
  8539 ;; This function is called by:
  8540 ;;		_Sensor_getSupplyVoltage
  8541 ;;		_main
  8542 ;; This function uses a non-reentrant model
  8543 ;;
  8544                           
  8545                           
  8546                           ;psect for function _Sensor_peripheralSleep
  8547  12EE                     _Sensor_peripheralSleep:	
  8548                           
  8549                           ;sensors.c: 28: ADCON0bits.ADON=0;
  8550                           
  8551                           ;incstack = 0
  8552                           ; Regs used in _Sensor_peripheralSleep: []
  8553  12EE  0021               	movlb	1	; select bank1
  8554  12EF  101D               	bcf	29,0	;volatile
  8555                           
  8556                           ;sensors.c: 29: FVRCONbits.FVREN=0;
  8557  12F0  0022               	movlb	2	; select bank2
  8558  12F1  1397               	bcf	23,7	;volatile
  8559  12F2  0008               	return
  8560  12F3                     __end_of_Sensor_peripheralSleep:	
  8561                           
  8562                           	psect	text25
  8563  1309                     __ptext25:	
  8564 ;; *************** function _FVR_IsOutputReady *****************
  8565 ;; Defined at:
  8566 ;;		line 63 in file "mcc_generated_files/fvr.c"
  8567 ;; Parameters:    Size  Location     Type
  8568 ;;		None
  8569 ;; Auto vars:     Size  Location     Type
  8570 ;;		None
  8571 ;; Return value:  Size  Location     Type
  8572 ;;                  1    wreg      unsigned char 
  8573 ;; Registers used:
  8574 ;;		wreg, status,2, status,0
  8575 ;; Tracked objects:
  8576 ;;		On entry : 0/0
  8577 ;;		On exit  : 0/0
  8578 ;;		Unchanged: 0/0
  8579 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8580 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8581 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8582 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8583 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8584 ;;Total ram usage:        0 bytes
  8585 ;; Hardware stack levels used:    1
  8586 ;; Hardware stack levels required when called:    4
  8587 ;; This function calls:
  8588 ;;		Nothing
  8589 ;; This function is called by:
  8590 ;;		_Sensor_getSupplyVoltage
  8591 ;; This function uses a non-reentrant model
  8592 ;;
  8593                           
  8594                           
  8595                           ;psect for function _FVR_IsOutputReady
  8596  1309                     _FVR_IsOutputReady:	
  8597                           
  8598                           ;fvr.c: 65: return (FVRCONbits.FVRRDY);
  8599                           
  8600                           ;incstack = 0
  8601                           ; Regs used in _FVR_IsOutputReady: [wreg+status,2+status,0]
  8602  1309  0022               	movlb	2	; select bank2
  8603  130A  0E17               	swapf	23,w	;volatile
  8604  130B  0C89               	rrf	9,f
  8605  130C  0C89               	rrf	9,f
  8606  130D  3901               	andlw	1
  8607  130E  0008               	return
  8608  130F                     __end_of_FVR_IsOutputReady:	
  8609                           
  8610                           	psect	text26
  8611  12DB                     __ptext26:	
  8612 ;; *************** function _ADC_StartConversion *****************
  8613 ;; Defined at:
  8614 ;;		line 88 in file "mcc_generated_files/adc.c"
  8615 ;; Parameters:    Size  Location     Type
  8616 ;;		None
  8617 ;; Auto vars:     Size  Location     Type
  8618 ;;		None
  8619 ;; Return value:  Size  Location     Type
  8620 ;;                  1    wreg      void 
  8621 ;; Registers used:
  8622 ;;		None
  8623 ;; Tracked objects:
  8624 ;;		On entry : 0/0
  8625 ;;		On exit  : 0/0
  8626 ;;		Unchanged: 0/0
  8627 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8628 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8629 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8630 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8631 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8632 ;;Total ram usage:        0 bytes
  8633 ;; Hardware stack levels used:    1
  8634 ;; Hardware stack levels required when called:    4
  8635 ;; This function calls:
  8636 ;;		Nothing
  8637 ;; This function is called by:
  8638 ;;		_Sensor_getSupplyVoltage
  8639 ;; This function uses a non-reentrant model
  8640 ;;
  8641                           
  8642                           
  8643                           ;psect for function _ADC_StartConversion
  8644  12DB                     _ADC_StartConversion:	
  8645                           
  8646                           ;adc.c: 91: ADCON0bits.GO_nDONE = 1;
  8647                           
  8648                           ;incstack = 0
  8649                           ; Regs used in _ADC_StartConversion: []
  8650  12DB  0021               	movlb	1	; select bank1
  8651  12DC  149D               	bsf	29,1	;volatile
  8652  12DD  0008               	return
  8653  12DE                     __end_of_ADC_StartConversion:	
  8654                           
  8655                           	psect	text27
  8656  13B3                     __ptext27:	
  8657 ;; *************** function _ADC_SelectChannel *****************
  8658 ;; Defined at:
  8659 ;;		line 80 in file "mcc_generated_files/adc.c"
  8660 ;; Parameters:    Size  Location     Type
  8661 ;;  channel         1    wreg     enum E2996
  8662 ;; Auto vars:     Size  Location     Type
  8663 ;;  channel         1    2[BANK0 ] enum E2996
  8664 ;; Return value:  Size  Location     Type
  8665 ;;                  1    wreg      void 
  8666 ;; Registers used:
  8667 ;;		wreg, status,2, status,0
  8668 ;; Tracked objects:
  8669 ;;		On entry : 0/0
  8670 ;;		On exit  : 0/0
  8671 ;;		Unchanged: 0/0
  8672 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8673 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8674 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8675 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8676 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8677 ;;Total ram usage:        2 bytes
  8678 ;; Hardware stack levels used:    1
  8679 ;; Hardware stack levels required when called:    4
  8680 ;; This function calls:
  8681 ;;		Nothing
  8682 ;; This function is called by:
  8683 ;;		_Sensor_getSupplyVoltage
  8684 ;; This function uses a non-reentrant model
  8685 ;;
  8686                           
  8687                           
  8688                           ;psect for function _ADC_SelectChannel
  8689  13B3                     _ADC_SelectChannel:	
  8690                           
  8691                           ;incstack = 0
  8692                           ; Regs used in _ADC_SelectChannel: [wreg+status,2+status,0]
  8693                           ;ADC_SelectChannel@channel stored from wreg
  8694  13B3  0020               	movlb	0	; select bank0
  8695  13B4  00A2               	movwf	ADC_SelectChannel@channel
  8696                           
  8697                           ;adc.c: 83: ADCON0bits.CHS = channel;
  8698  13B5  0822               	movf	ADC_SelectChannel@channel,w
  8699  13B6  00A1               	movwf	??_ADC_SelectChannel
  8700  13B7  0DA1               	rlf	??_ADC_SelectChannel,f
  8701  13B8  0DA1               	rlf	??_ADC_SelectChannel,f
  8702  13B9  0021               	movlb	1	; select bank1
  8703  13BA  081D               	movf	29,w	;volatile
  8704  13BB  0020               	movlb	0	; select bank0
  8705  13BC  0621               	xorwf	??_ADC_SelectChannel,w
  8706  13BD  3983               	andlw	-125
  8707  13BE  0621               	xorwf	??_ADC_SelectChannel,w
  8708  13BF  0021               	movlb	1	; select bank1
  8709  13C0  009D               	movwf	29	;volatile
  8710                           
  8711                           ;adc.c: 85: ADCON0bits.ADON = 1;
  8712  13C1  141D               	bsf	29,0	;volatile
  8713  13C2  0008               	return
  8714  13C3                     __end_of_ADC_SelectChannel:	
  8715                           
  8716                           	psect	text28
  8717  1329                     __ptext28:	
  8718 ;; *************** function _ADC_IsConversionDone *****************
  8719 ;; Defined at:
  8720 ;;		line 95 in file "mcc_generated_files/adc.c"
  8721 ;; Parameters:    Size  Location     Type
  8722 ;;		None
  8723 ;; Auto vars:     Size  Location     Type
  8724 ;;		None
  8725 ;; Return value:  Size  Location     Type
  8726 ;;                  1    wreg      unsigned char 
  8727 ;; Registers used:
  8728 ;;		wreg, status,0
  8729 ;; Tracked objects:
  8730 ;;		On entry : 0/0
  8731 ;;		On exit  : 0/0
  8732 ;;		Unchanged: 0/0
  8733 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8734 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8735 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8736 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8737 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8738 ;;Total ram usage:        0 bytes
  8739 ;; Hardware stack levels used:    1
  8740 ;; Hardware stack levels required when called:    4
  8741 ;; This function calls:
  8742 ;;		Nothing
  8743 ;; This function is called by:
  8744 ;;		_Sensor_getSupplyVoltage
  8745 ;; This function uses a non-reentrant model
  8746 ;;
  8747                           
  8748                           
  8749                           ;psect for function _ADC_IsConversionDone
  8750  1329                     _ADC_IsConversionDone:	
  8751                           
  8752                           ;adc.c: 98: return ((bool)(!ADCON0bits.GO_nDONE));
  8753                           
  8754                           ;incstack = 0
  8755                           ; Regs used in _ADC_IsConversionDone: [wreg+status,0]
  8756  1329  1003               	clrc
  8757  132A  0021               	movlb	1	; select bank1
  8758  132B  1C9D               	btfss	29,1	;volatile
  8759  132C  1403               	setc
  8760  132D  3000               	movlw	0
  8761  132E  3D09               	addwfc	9,w
  8762  132F  0008               	return
  8763  1330                     __end_of_ADC_IsConversionDone:	
  8764                           
  8765                           	psect	text29
  8766  136C                     __ptext29:	
  8767 ;; *************** function _ADC_GetConversionResult *****************
  8768 ;; Defined at:
  8769 ;;		line 101 in file "mcc_generated_files/adc.c"
  8770 ;; Parameters:    Size  Location     Type
  8771 ;;		None
  8772 ;; Auto vars:     Size  Location     Type
  8773 ;;		None
  8774 ;; Return value:  Size  Location     Type
  8775 ;;                  2    1[BANK0 ] unsigned int 
  8776 ;; Registers used:
  8777 ;;		wreg
  8778 ;; Tracked objects:
  8779 ;;		On entry : 0/0
  8780 ;;		On exit  : 0/0
  8781 ;;		Unchanged: 0/0
  8782 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8783 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8784 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8785 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8786 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8787 ;;Total ram usage:        2 bytes
  8788 ;; Hardware stack levels used:    1
  8789 ;; Hardware stack levels required when called:    4
  8790 ;; This function calls:
  8791 ;;		Nothing
  8792 ;; This function is called by:
  8793 ;;		_Sensor_getSupplyVoltage
  8794 ;; This function uses a non-reentrant model
  8795 ;;
  8796                           
  8797                           
  8798                           ;psect for function _ADC_GetConversionResult
  8799  136C                     _ADC_GetConversionResult:	
  8800                           
  8801                           ;adc.c: 104: return ((adc_result_t)((ADRESH << 8) + ADRESL));
  8802                           
  8803                           ;incstack = 0
  8804                           ; Regs used in _ADC_GetConversionResult: [wreg]
  8805  136C  0021               	movlb	1	; select bank1
  8806  136D  081C               	movf	28,w	;volatile
  8807  136E  0020               	movlb	0	; select bank0
  8808  136F  00A2               	movwf	?_ADC_GetConversionResult+1
  8809  1370  0021               	movlb	1	; select bank1
  8810  1371  081B               	movf	27,w	;volatile
  8811  1372  0020               	movlb	0	; select bank0
  8812  1373  00A1               	movwf	?_ADC_GetConversionResult
  8813  1374  0008               	return
  8814  1375                     __end_of_ADC_GetConversionResult:	
  8815                           
  8816                           	psect	text30
  8817  1407                     __ptext30:	
  8818 ;; *************** function _Diag_getSensorHealth *****************
  8819 ;; Defined at:
  8820 ;;		line 35 in file "diagnostics.c"
  8821 ;; Parameters:    Size  Location     Type
  8822 ;;		None
  8823 ;; Auto vars:     Size  Location     Type
  8824 ;;  var             1    2[BANK0 ] unsigned char 
  8825 ;; Return value:  Size  Location     Type
  8826 ;;                  1    wreg      unsigned char 
  8827 ;; Registers used:
  8828 ;;		wreg, status,2, status,0
  8829 ;; Tracked objects:
  8830 ;;		On entry : 0/0
  8831 ;;		On exit  : 0/0
  8832 ;;		Unchanged: 0/0
  8833 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8834 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8835 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8836 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8837 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8838 ;;Total ram usage:        2 bytes
  8839 ;; Hardware stack levels used:    1
  8840 ;; Hardware stack levels required when called:    4
  8841 ;; This function calls:
  8842 ;;		Nothing
  8843 ;; This function is called by:
  8844 ;;		_Wireless_packageData
  8845 ;; This function uses a non-reentrant model
  8846 ;;
  8847                           
  8848                           
  8849                           ;psect for function _Diag_getSensorHealth
  8850  1407                     _Diag_getSensorHealth:	
  8851                           
  8852                           ;diagnostics.c: 38: char var=0;
  8853                           
  8854                           ;incstack = 0
  8855                           ; Regs used in _Diag_getSensorHealth: [wreg+status,2+status,0]
  8856  1407  0020               	movlb	0	; select bank0
  8857  1408  01A2               	clrf	Diag_getSensorHealth@var
  8858                           
  8859                           ;diagnostics.c: 40: var|=sensorHealth.compassHealth;
  8860  1409  0022               	movlb	2	; select bank2
  8861  140A  086B               	movf	(_sensorHealth^(0+256)+1),w
  8862  140B  0020               	movlb	0	; select bank0
  8863  140C  00A1               	movwf	??_Diag_getSensorHealth
  8864  140D  0821               	movf	??_Diag_getSensorHealth,w
  8865  140E  04A2               	iorwf	Diag_getSensorHealth@var,f
  8866                           
  8867                           ;diagnostics.c: 41: var<<=1;
  8868  140F  1003               	clrc
  8869  1410  0DA2               	rlf	Diag_getSensorHealth@var,f
  8870                           
  8871                           ;diagnostics.c: 42: var|=sensorHealth.tempSensorHealth;
  8872  1411  0022               	movlb	2	; select bank2
  8873  1412  086A               	movf	_sensorHealth^(0+256),w
  8874  1413  0020               	movlb	0	; select bank0
  8875  1414  00A1               	movwf	??_Diag_getSensorHealth
  8876  1415  0821               	movf	??_Diag_getSensorHealth,w
  8877  1416  04A2               	iorwf	Diag_getSensorHealth@var,f
  8878                           
  8879                           ;diagnostics.c: 44: return var;
  8880  1417  0822               	movf	Diag_getSensorHealth@var,w
  8881  1418  0008               	return
  8882  1419                     __end_of_Diag_getSensorHealth:	
  8883                           
  8884                           	psect	text31
  8885  0BF0                     __ptext31:	
  8886 ;; *************** function _Wireless_init *****************
  8887 ;; Defined at:
  8888 ;;		line 20 in file "wireless.c"
  8889 ;; Parameters:    Size  Location     Type
  8890 ;;		None
  8891 ;; Auto vars:     Size  Location     Type
  8892 ;;		None
  8893 ;; Return value:  Size  Location     Type
  8894 ;;                  1    wreg      void 
  8895 ;; Registers used:
  8896 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  8897 ;; Tracked objects:
  8898 ;;		On entry : 0/0
  8899 ;;		On exit  : 0/0
  8900 ;;		Unchanged: 0/0
  8901 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8902 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8903 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8904 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8905 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8906 ;;Total ram usage:        2 bytes
  8907 ;; Hardware stack levels used:    1
  8908 ;; Hardware stack levels required when called:    8
  8909 ;; This function calls:
  8910 ;;		_RF_Init
  8911 ;;		_RF_ResetStatusIRQ
  8912 ;;		_RF_WriteRegister
  8913 ;;		_RF_WriteRegisterData
  8914 ;; This function is called by:
  8915 ;;		_main
  8916 ;; This function uses a non-reentrant model
  8917 ;;
  8918                           
  8919                           
  8920                           ;psect for function _Wireless_init
  8921  0BF0                     _Wireless_init:	
  8922                           
  8923                           ;wireless.c: 30: static const uint8_t TADDR[5] = "20001";
  8924                           ;wireless.c: 34: _delay((unsigned long)((100)*(8000000/4000.0)));
  8925                           
  8926                           ;incstack = 0
  8927                           ; Regs used in _Wireless_init: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  8928  0BF0  3002               	movlw	2
  8929  0BF1  0020               	movlb	0	; select bank0
  8930  0BF2  00AF               	movwf	??_Wireless_init+1
  8931  0BF3  3004               	movlw	4
  8932  0BF4  00AE               	movwf	??_Wireless_init
  8933  0BF5  30BA               	movlw	186
  8934  0BF6                     u7177:	
  8935  0BF6  0B89               	decfsz	9,f
  8936  0BF7  2BF6               	goto	u7177
  8937  0BF8  0BAE               	decfsz	??_Wireless_init,f
  8938  0BF9  2BF6               	goto	u7177
  8939  0BFA  0BAF               	decfsz	??_Wireless_init+1,f
  8940  0BFB  2BF6               	goto	u7177
  8941  0BFC  0000               	nop
  8942                           
  8943                           ;wireless.c: 36: RF_Init();
  8944  0BFD  3192  22E6  318B   	fcall	_RF_Init
  8945                           
  8946                           ;wireless.c: 38: RF_WriteRegister(0x06, 0x06|0x20);
  8947  0C00  3026               	movlw	38
  8948  0C01  0020               	movlb	0	; select bank0
  8949  0C02  00AE               	movwf	??_Wireless_init
  8950  0C03  082E               	movf	??_Wireless_init,w
  8951  0C04  00A3               	movwf	RF_WriteRegister@val
  8952  0C05  3006               	movlw	6
  8953  0C06  3194  2456  318B   	fcall	_RF_WriteRegister
  8954                           
  8955                           ;wireless.c: 39: RF_WriteRegister(0x11, 7);
  8956  0C09  3007               	movlw	7
  8957  0C0A  0020               	movlb	0	; select bank0
  8958  0C0B  00AE               	movwf	??_Wireless_init
  8959  0C0C  082E               	movf	??_Wireless_init,w
  8960  0C0D  00A3               	movwf	RF_WriteRegister@val
  8961  0C0E  3011               	movlw	17
  8962  0C0F  3194  2456  318B   	fcall	_RF_WriteRegister
  8963                           
  8964                           ;wireless.c: 40: RF_WriteRegister(0x05, 2);
  8965  0C12  3002               	movlw	2
  8966  0C13  0020               	movlb	0	; select bank0
  8967  0C14  00AE               	movwf	??_Wireless_init
  8968  0C15  082E               	movf	??_Wireless_init,w
  8969  0C16  00A3               	movwf	RF_WriteRegister@val
  8970  0C17  3005               	movlw	5
  8971  0C18  3194  2456  318B   	fcall	_RF_WriteRegister
  8972                           
  8973                           ;wireless.c: 43: RF_WriteRegisterData(0x0A, (uint8_t*)TADDR, sizeof(TADDR));
  8974  0C1B  3021               	movlw	low (Wireless_init@TADDR| (0+32768))
  8975  0C1C  0020               	movlb	0	; select bank0
  8976  0C1D  00A9               	movwf	RF_WriteRegisterData@buf
  8977  0C1E  3098               	movlw	high (Wireless_init@TADDR| (0+32768))
  8978  0C1F  00AA               	movwf	RF_WriteRegisterData@buf+1
  8979  0C20  3005               	movlw	5
  8980  0C21  00AE               	movwf	??_Wireless_init
  8981  0C22  082E               	movf	??_Wireless_init,w
  8982  0C23  00AB               	movwf	RF_WriteRegisterData@bufSize
  8983  0C24  300A               	movlw	10
  8984  0C25  3195  258A  318B   	fcall	_RF_WriteRegisterData
  8985                           
  8986                           ;wireless.c: 44: RF_WriteRegisterData(0x10, (uint8_t*)TADDR, sizeof(TADDR));
  8987  0C28  3021               	movlw	low (Wireless_init@TADDR| (0+32768))
  8988  0C29  0020               	movlb	0	; select bank0
  8989  0C2A  00A9               	movwf	RF_WriteRegisterData@buf
  8990  0C2B  3098               	movlw	high (Wireless_init@TADDR| (0+32768))
  8991  0C2C  00AA               	movwf	RF_WriteRegisterData@buf+1
  8992  0C2D  3005               	movlw	5
  8993  0C2E  00AE               	movwf	??_Wireless_init
  8994  0C2F  082E               	movf	??_Wireless_init,w
  8995  0C30  00AB               	movwf	RF_WriteRegisterData@bufSize
  8996  0C31  3010               	movlw	16
  8997  0C32  3195  258A  318B   	fcall	_RF_WriteRegisterData
  8998                           
  8999                           ;wireless.c: 47: RF_WriteRegister(0x02, 0x01);
  9000  0C35  0020               	movlb	0	; select bank0
  9001  0C36  01A3               	clrf	RF_WriteRegister@val
  9002  0C37  0AA3               	incf	RF_WriteRegister@val,f
  9003  0C38  3002               	movlw	2
  9004  0C39  3194  2456  318B   	fcall	_RF_WriteRegister
  9005                           
  9006                           ;wireless.c: 50: RF_ResetStatusIRQ(0x40|0x20|0x10);
  9007  0C3C  3070               	movlw	112
  9008  0C3D  3196  2600  318B   	fcall	_RF_ResetStatusIRQ
  9009                           
  9010                           ;wireless.c: 52: RF_WriteRegister(0x01, 0x01);
  9011  0C40  0020               	movlb	0	; select bank0
  9012  0C41  01A3               	clrf	RF_WriteRegister@val
  9013  0C42  0AA3               	incf	RF_WriteRegister@val,f
  9014  0C43  3001               	movlw	1
  9015  0C44  3194  2456  318B   	fcall	_RF_WriteRegister
  9016                           
  9017                           ;wireless.c: 53: RF_WriteRegister(0x04, 0xF0|0x01);
  9018  0C47  30F1               	movlw	241
  9019  0C48  0020               	movlb	0	; select bank0
  9020  0C49  00AE               	movwf	??_Wireless_init
  9021  0C4A  082E               	movf	??_Wireless_init,w
  9022  0C4B  00A3               	movwf	RF_WriteRegister@val
  9023  0C4C  3004               	movlw	4
  9024  0C4D  3194  2456  318B   	fcall	_RF_WriteRegister
  9025                           
  9026                           ;wireless.c: 54: RF_WriteRegister(0x00, (1<<3)|(1<<2)|(1<<1)|(0));
  9027  0C50  300E               	movlw	14
  9028  0C51  0020               	movlb	0	; select bank0
  9029  0C52  00AE               	movwf	??_Wireless_init
  9030  0C53  082E               	movf	??_Wireless_init,w
  9031  0C54  00A3               	movwf	RF_WriteRegister@val
  9032  0C55  3000               	movlw	0
  9033  0C56  3194  2456  318B   	fcall	_RF_WriteRegister
  9034                           
  9035                           ;wireless.c: 55: RF_WriteRegister(0x1D, (1<<2) | (1<<1));
  9036  0C59  3006               	movlw	6
  9037  0C5A  0020               	movlb	0	; select bank0
  9038  0C5B  00AE               	movwf	??_Wireless_init
  9039  0C5C  082E               	movf	??_Wireless_init,w
  9040  0C5D  00A3               	movwf	RF_WriteRegister@val
  9041  0C5E  301D               	movlw	29
  9042  0C5F  3194  2456  318B   	fcall	_RF_WriteRegister
  9043                           
  9044                           ;wireless.c: 56: RF_WriteRegister(0x1C, (1<<0));
  9045  0C62  0020               	movlb	0	; select bank0
  9046  0C63  01A3               	clrf	RF_WriteRegister@val
  9047  0C64  0AA3               	incf	RF_WriteRegister@val,f
  9048  0C65  301C               	movlw	28
  9049  0C66  3194  2456         	fcall	_RF_WriteRegister
  9050                           
  9051                           ;wireless.c: 57: do { LATCbits.LATC2 = 0; } while(0);
  9052  0C68  0022               	movlb	2	; select bank2
  9053  0C69  110E               	bcf	14,2	;volatile
  9054  0C6A  0008               	return
  9055  0C6B                     __end_of_Wireless_init:	
  9056                           
  9057                           	psect	text32
  9058  158A                     __ptext32:	
  9059 ;; *************** function _RF_WriteRegisterData *****************
  9060 ;; Defined at:
  9061 ;;		line 113 in file "nrf24.c"
  9062 ;; Parameters:    Size  Location     Type
  9063 ;;  reg             1    wreg     unsigned char 
  9064 ;;  buf             2    9[BANK0 ] PTR unsigned char 
  9065 ;;		 -> Wireless_packageData@data(7), Wireless_determineTransmitPower@testPayload(1), Wireless_init@TADDR(5), 
  9066 ;;  bufSize         1   11[BANK0 ] unsigned char 
  9067 ;; Auto vars:     Size  Location     Type
  9068 ;;  reg             1   13[BANK0 ] unsigned char 
  9069 ;; Return value:  Size  Location     Type
  9070 ;;                  1    wreg      void 
  9071 ;; Registers used:
  9072 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  9073 ;; Tracked objects:
  9074 ;;		On entry : 0/0
  9075 ;;		On exit  : 0/0
  9076 ;;		Unchanged: 0/0
  9077 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9078 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9079 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9080 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9081 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9082 ;;Total ram usage:        5 bytes
  9083 ;; Hardware stack levels used:    1
  9084 ;; Hardware stack levels required when called:    7
  9085 ;; This function calls:
  9086 ;;		_SPI_WriteBuffer
  9087 ;;		_SPI_WriteRead
  9088 ;; This function is called by:
  9089 ;;		_RF_TxPayload
  9090 ;;		_Wireless_init
  9091 ;;		_RF_openWritingPipe
  9092 ;;		_RF_openReadingPipe
  9093 ;; This function uses a non-reentrant model
  9094 ;;
  9095                           
  9096                           
  9097                           ;psect for function _RF_WriteRegisterData
  9098  158A                     _RF_WriteRegisterData:	
  9099                           
  9100                           ;incstack = 0
  9101                           ; Regs used in _RF_WriteRegisterData: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  9102                           ;RF_WriteRegisterData@reg stored from wreg
  9103  158A  0020               	movlb	0	; select bank0
  9104  158B  00AD               	movwf	RF_WriteRegisterData@reg
  9105                           
  9106                           ;nrf24.c: 114: do { LATCbits.LATC1 = 0; } while(0);
  9107  158C  0022               	movlb	2	; select bank2
  9108  158D  108E               	bcf	14,1	;volatile
  9109                           
  9110                           ;nrf24.c: 115: (void)SPI_WriteRead(0x20|reg);
  9111  158E  0020               	movlb	0	; select bank0
  9112  158F  082D               	movf	RF_WriteRegisterData@reg,w
  9113  1590  3820               	iorlw	32
  9114  1591  3193  2303  3195   	fcall	_SPI_WriteRead
  9115                           
  9116                           ;nrf24.c: 116: SPI_WriteBuffer(buf, bufSize);
  9117  1594  0020               	movlb	0	; select bank0
  9118  1595  082A               	movf	RF_WriteRegisterData@buf+1,w
  9119  1596  00A4               	movwf	SPI_WriteBuffer@bufOut+1
  9120  1597  0829               	movf	RF_WriteRegisterData@buf,w
  9121  1598  00A3               	movwf	SPI_WriteBuffer@bufOut
  9122  1599  082B               	movf	RF_WriteRegisterData@bufSize,w
  9123  159A  00AC               	movwf	??_RF_WriteRegisterData
  9124  159B  082C               	movf	??_RF_WriteRegisterData,w
  9125  159C  00A5               	movwf	SPI_WriteBuffer@bufSize
  9126  159D  3195  251A  3195   	fcall	_SPI_WriteBuffer
  9127                           
  9128                           ;nrf24.c: 117: do { LATCbits.LATC1 = 1; } while(0);
  9129  15A0  0022               	movlb	2	; select bank2
  9130  15A1  148E               	bsf	14,1	;volatile
  9131                           
  9132                           ;nrf24.c: 118: _delay((unsigned long)((10)*(8000000/4000000.0)));
  9133  15A2  3006               	movlw	6
  9134  15A3                     u7187:	
  9135  15A3  0B89               	decfsz	9,f
  9136  15A4  2DA3               	goto	u7187
  9137  15A5  3200               	nop2
  9138  15A6  0008               	return
  9139  15A7                     __end_of_RF_WriteRegisterData:	
  9140                           
  9141                           	psect	text33
  9142  151A                     __ptext33:	
  9143 ;; *************** function _SPI_WriteBuffer *****************
  9144 ;; Defined at:
  9145 ;;		line 56 in file "nrf24.c"
  9146 ;; Parameters:    Size  Location     Type
  9147 ;;  bufOut          2    3[BANK0 ] PTR unsigned char 
  9148 ;;		 -> Wireless_packageData@data(7), Wireless_determineTransmitPower@testPayload(1), Wireless_init@TADDR(5), 
  9149 ;;  bufSize         1    5[BANK0 ] unsigned char 
  9150 ;; Auto vars:     Size  Location     Type
  9151 ;;  i               1    8[BANK0 ] unsigned char 
  9152 ;; Return value:  Size  Location     Type
  9153 ;;                  1    wreg      void 
  9154 ;; Registers used:
  9155 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  9156 ;; Tracked objects:
  9157 ;;		On entry : 0/0
  9158 ;;		On exit  : 0/0
  9159 ;;		Unchanged: 0/0
  9160 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9161 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9162 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9163 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9164 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9165 ;;Total ram usage:        6 bytes
  9166 ;; Hardware stack levels used:    1
  9167 ;; Hardware stack levels required when called:    6
  9168 ;; This function calls:
  9169 ;;		_SPI_WriteRead
  9170 ;; This function is called by:
  9171 ;;		_RF_WriteRegisterData
  9172 ;; This function uses a non-reentrant model
  9173 ;;
  9174                           
  9175                           
  9176                           ;psect for function _SPI_WriteBuffer
  9177  151A                     _SPI_WriteBuffer:	
  9178                           
  9179                           ;nrf24.c: 57: uint8_t i;
  9180                           ;nrf24.c: 59: for(i=0;i<bufSize;i++) {
  9181                           
  9182                           ;incstack = 0
  9183                           ; Regs used in _SPI_WriteBuffer: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  9184  151A  0020               	movlb	0	; select bank0
  9185  151B  01A8               	clrf	SPI_WriteBuffer@i
  9186  151C                     l5515:	
  9187  151C  0825               	movf	SPI_WriteBuffer@bufSize,w
  9188  151D  0228               	subwf	SPI_WriteBuffer@i,w
  9189  151E  1803               	btfsc	3,0
  9190  151F  0008               	return
  9191                           
  9192                           ;nrf24.c: 60: (void)SPI_WriteRead(bufOut[i]);
  9193  1520  0824               	movf	SPI_WriteBuffer@bufOut+1,w
  9194  1521  00A7               	movwf	??_SPI_WriteBuffer+1
  9195  1522  0823               	movf	SPI_WriteBuffer@bufOut,w
  9196  1523  00A6               	movwf	??_SPI_WriteBuffer
  9197  1524  0828               	movf	SPI_WriteBuffer@i,w
  9198  1525  0726               	addwf	??_SPI_WriteBuffer,w
  9199  1526  0084               	movwf	4
  9200  1527  0827               	movf	??_SPI_WriteBuffer+1,w
  9201  1528  1803               	skipnc
  9202  1529  0A27               	incf	??_SPI_WriteBuffer+1,w
  9203  152A  0085               	movwf	5
  9204  152B  0800               	movf	0,w	;code access
  9205  152C  3193  2303  3195   	fcall	_SPI_WriteRead
  9206  152F  3001               	movlw	1
  9207  1530  0020               	movlb	0	; select bank0
  9208  1531  00A6               	movwf	??_SPI_WriteBuffer
  9209  1532  0826               	movf	??_SPI_WriteBuffer,w
  9210  1533  07A8               	addwf	SPI_WriteBuffer@i,f
  9211  1534  2D1C               	goto	l5515
  9212  1535                     __end_of_SPI_WriteBuffer:	
  9213                           
  9214                           	psect	text34
  9215  1600                     __ptext34:	
  9216 ;; *************** function _RF_ResetStatusIRQ *****************
  9217 ;; Defined at:
  9218 ;;		line 158 in file "nrf24.c"
  9219 ;; Parameters:    Size  Location     Type
  9220 ;;  flags           1    wreg     unsigned char 
  9221 ;; Auto vars:     Size  Location     Type
  9222 ;;  flags           1    6[BANK0 ] unsigned char 
  9223 ;; Return value:  Size  Location     Type
  9224 ;;                  1    wreg      void 
  9225 ;; Registers used:
  9226 ;;		wreg, status,2, status,0, pclath, cstack
  9227 ;; Tracked objects:
  9228 ;;		On entry : 0/0
  9229 ;;		On exit  : 0/0
  9230 ;;		Unchanged: 0/0
  9231 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9232 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9233 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9234 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9235 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9236 ;;Total ram usage:        2 bytes
  9237 ;; Hardware stack levels used:    1
  9238 ;; Hardware stack levels required when called:    7
  9239 ;; This function calls:
  9240 ;;		_RF_WriteRegister
  9241 ;; This function is called by:
  9242 ;;		_Wireless_init
  9243 ;;		_Wireless_sendData
  9244 ;; This function uses a non-reentrant model
  9245 ;;
  9246                           
  9247                           
  9248                           ;psect for function _RF_ResetStatusIRQ
  9249  1600                     _RF_ResetStatusIRQ:	
  9250                           
  9251                           ;incstack = 0
  9252                           ; Regs used in _RF_ResetStatusIRQ: [wreg+status,2+status,0+pclath+cstack]
  9253                           ;RF_ResetStatusIRQ@flags stored from wreg
  9254  1600  0020               	movlb	0	; select bank0
  9255  1601  00A6               	movwf	RF_ResetStatusIRQ@flags
  9256                           
  9257                           ;nrf24.c: 159: _delay((unsigned long)((10)*(8000000/4000000.0)));
  9258  1602  3006               	movlw	6
  9259  1603                     u7197:	
  9260  1603  0B89               	decfsz	9,f
  9261  1604  2E03               	goto	u7197
  9262  1605  3200               	nop2
  9263                           
  9264                           ;nrf24.c: 160: do { LATCbits.LATC1 = 0; } while(0);
  9265  1606  0022               	movlb	2	; select bank2
  9266  1607  108E               	bcf	14,1	;volatile
  9267                           
  9268                           ;nrf24.c: 161: _delay((unsigned long)((10)*(8000000/4000000.0)));
  9269  1608  3006               	movlw	6
  9270  1609                     u7207:	
  9271  1609  0B89               	decfsz	9,f
  9272  160A  2E09               	goto	u7207
  9273  160B  3200               	nop2
  9274                           
  9275                           ;nrf24.c: 162: RF_WriteRegister(0x07, flags);
  9276  160C  0020               	movlb	0	; select bank0
  9277  160D  0826               	movf	RF_ResetStatusIRQ@flags,w
  9278  160E  00A5               	movwf	??_RF_ResetStatusIRQ
  9279  160F  0825               	movf	??_RF_ResetStatusIRQ,w
  9280  1610  00A3               	movwf	RF_WriteRegister@val
  9281  1611  3007               	movlw	7
  9282  1612  3194  2456  3196   	fcall	_RF_WriteRegister
  9283                           
  9284                           ;nrf24.c: 163: _delay((unsigned long)((10)*(8000000/4000000.0)));
  9285  1615  3006               	movlw	6
  9286  1616                     u7217:	
  9287  1616  0B89               	decfsz	9,f
  9288  1617  2E16               	goto	u7217
  9289  1618  3200               	nop2
  9290                           
  9291                           ;nrf24.c: 164: do { LATCbits.LATC1 = 1; } while(0);
  9292  1619  0022               	movlb	2	; select bank2
  9293  161A  148E               	bsf	14,1	;volatile
  9294                           
  9295                           ;nrf24.c: 165: _delay((unsigned long)((10)*(8000000/4000000.0)));
  9296  161B  3006               	movlw	6
  9297  161C                     u7227:	
  9298  161C  0B89               	decfsz	9,f
  9299  161D  2E1C               	goto	u7227
  9300  161E  3200               	nop2
  9301  161F  0008               	return
  9302  1620                     __end_of_RF_ResetStatusIRQ:	
  9303                           
  9304                           	psect	text35
  9305  1456                     __ptext35:	
  9306 ;; *************** function _RF_WriteRegister *****************
  9307 ;; Defined at:
  9308 ;;		line 69 in file "nrf24.c"
  9309 ;; Parameters:    Size  Location     Type
  9310 ;;  reg             1    wreg     unsigned char 
  9311 ;;  val             1    3[BANK0 ] unsigned char 
  9312 ;; Auto vars:     Size  Location     Type
  9313 ;;  reg             1    4[BANK0 ] unsigned char 
  9314 ;; Return value:  Size  Location     Type
  9315 ;;                  1    wreg      void 
  9316 ;; Registers used:
  9317 ;;		wreg, status,2, status,0, pclath, cstack
  9318 ;; Tracked objects:
  9319 ;;		On entry : 0/0
  9320 ;;		On exit  : 0/0
  9321 ;;		Unchanged: 0/0
  9322 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9323 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9324 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9325 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9326 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9327 ;;Total ram usage:        2 bytes
  9328 ;; Hardware stack levels used:    1
  9329 ;; Hardware stack levels required when called:    6
  9330 ;; This function calls:
  9331 ;;		_SPI_WriteRead
  9332 ;; This function is called by:
  9333 ;;		_RF_ResetStatusIRQ
  9334 ;;		_Wireless_init
  9335 ;;		_Wireless_changeTransmitPower
  9336 ;;		_Wireless_sleep
  9337 ;;		_Wireless_wake
  9338 ;; This function uses a non-reentrant model
  9339 ;;
  9340                           
  9341                           
  9342                           ;psect for function _RF_WriteRegister
  9343  1456                     _RF_WriteRegister:	
  9344                           
  9345                           ;incstack = 0
  9346                           ; Regs used in _RF_WriteRegister: [wreg+status,2+status,0+pclath+cstack]
  9347                           ;RF_WriteRegister@reg stored from wreg
  9348  1456  0020               	movlb	0	; select bank0
  9349  1457  00A4               	movwf	RF_WriteRegister@reg
  9350                           
  9351                           ;nrf24.c: 70: do { LATCbits.LATC1 = 0; } while(0);
  9352  1458  0022               	movlb	2	; select bank2
  9353  1459  108E               	bcf	14,1	;volatile
  9354                           
  9355                           ;nrf24.c: 71: (void)SPI_WriteRead(0x20|reg);
  9356  145A  0020               	movlb	0	; select bank0
  9357  145B  0824               	movf	RF_WriteRegister@reg,w
  9358  145C  3820               	iorlw	32
  9359  145D  3193  2303  3194   	fcall	_SPI_WriteRead
  9360                           
  9361                           ;nrf24.c: 72: (void)SPI_WriteRead(val);
  9362  1460  0020               	movlb	0	; select bank0
  9363  1461  0823               	movf	RF_WriteRegister@val,w
  9364  1462  3193  2303  3194   	fcall	_SPI_WriteRead
  9365                           
  9366                           ;nrf24.c: 73: do { LATCbits.LATC1 = 1; } while(0);
  9367  1465  0022               	movlb	2	; select bank2
  9368  1466  148E               	bsf	14,1	;volatile
  9369                           
  9370                           ;nrf24.c: 74: _delay((unsigned long)((10)*(8000000/4000000.0)));
  9371  1467  3006               	movlw	6
  9372  1468                     u7237:	
  9373  1468  0B89               	decfsz	9,f
  9374  1469  2C68               	goto	u7237
  9375  146A  3200               	nop2
  9376  146B  0008               	return
  9377  146C                     __end_of_RF_WriteRegister:	
  9378                           
  9379                           	psect	text36
  9380  1303                     __ptext36:	
  9381 ;; *************** function _SPI_WriteRead *****************
  9382 ;; Defined at:
  9383 ;;		line 26 in file "nrf24.c"
  9384 ;; Parameters:    Size  Location     Type
  9385 ;;  val             1    wreg     unsigned char 
  9386 ;; Auto vars:     Size  Location     Type
  9387 ;;  val             1    2[BANK0 ] unsigned char 
  9388 ;; Return value:  Size  Location     Type
  9389 ;;                  1    wreg      unsigned char 
  9390 ;; Registers used:
  9391 ;;		wreg, pclath, cstack
  9392 ;; Tracked objects:
  9393 ;;		On entry : 0/0
  9394 ;;		On exit  : 0/0
  9395 ;;		Unchanged: 0/0
  9396 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9397 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9398 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9399 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9400 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9401 ;;Total ram usage:        1 bytes
  9402 ;; Hardware stack levels used:    1
  9403 ;; Hardware stack levels required when called:    5
  9404 ;; This function calls:
  9405 ;;		_SPI1_Exchange8bit
  9406 ;; This function is called by:
  9407 ;;		_SPI_WriteReadBuffer
  9408 ;;		_SPI_WriteBuffer
  9409 ;;		_RF_WriteRegister
  9410 ;;		_RF_ReadRegister
  9411 ;;		_RF_ReadRegisterData
  9412 ;;		_RF_WriteRegisterData
  9413 ;;		_RF_WriteRead
  9414 ;;		_RF_Write
  9415 ;; This function uses a non-reentrant model
  9416 ;;
  9417                           
  9418                           
  9419                           ;psect for function _SPI_WriteRead
  9420  1303                     _SPI_WriteRead:	
  9421                           
  9422                           ;incstack = 0
  9423                           ; Regs used in _SPI_WriteRead: [wreg+pclath+cstack]
  9424                           ;SPI_WriteRead@val stored from wreg
  9425  1303  0020               	movlb	0	; select bank0
  9426  1304  00A2               	movwf	SPI_WriteRead@val
  9427                           
  9428                           ;nrf24.c: 34: return SPI1_Exchange8bit(val);
  9429  1305  0822               	movf	SPI_WriteRead@val,w
  9430  1306  3193  237F         	fcall	_SPI1_Exchange8bit
  9431  1308  0008               	return
  9432  1309                     __end_of_SPI_WriteRead:	
  9433                           
  9434                           	psect	text37
  9435  137F                     __ptext37:	
  9436 ;; *************** function _SPI1_Exchange8bit *****************
  9437 ;; Defined at:
  9438 ;;		line 77 in file "mcc_generated_files/spi1.c"
  9439 ;; Parameters:    Size  Location     Type
  9440 ;;  data            1    wreg     unsigned char 
  9441 ;; Auto vars:     Size  Location     Type
  9442 ;;  data            1    1[BANK0 ] unsigned char 
  9443 ;; Return value:  Size  Location     Type
  9444 ;;                  1    wreg      unsigned char 
  9445 ;; Registers used:
  9446 ;;		wreg
  9447 ;; Tracked objects:
  9448 ;;		On entry : 0/0
  9449 ;;		On exit  : 0/0
  9450 ;;		Unchanged: 0/0
  9451 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9452 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9453 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9454 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9455 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9456 ;;Total ram usage:        1 bytes
  9457 ;; Hardware stack levels used:    1
  9458 ;; Hardware stack levels required when called:    4
  9459 ;; This function calls:
  9460 ;;		Nothing
  9461 ;; This function is called by:
  9462 ;;		_SPI_WriteRead
  9463 ;;		_SPI1_Exchange8bitBuffer
  9464 ;; This function uses a non-reentrant model
  9465 ;;
  9466                           
  9467                           
  9468                           ;psect for function _SPI1_Exchange8bit
  9469  137F                     _SPI1_Exchange8bit:	
  9470                           
  9471                           ;incstack = 0
  9472                           ; Regs used in _SPI1_Exchange8bit: [wreg]
  9473                           ;SPI1_Exchange8bit@data stored from wreg
  9474  137F  0020               	movlb	0	; select bank0
  9475  1380  00A1               	movwf	SPI1_Exchange8bit@data
  9476                           
  9477                           ;spi1.c: 80: SSP1CON1bits.WCOL = 0;
  9478  1381  0024               	movlb	4	; select bank4
  9479  1382  1395               	bcf	21,7	;volatile
  9480                           
  9481                           ;spi1.c: 82: SSP1BUF = data;
  9482  1383  0020               	movlb	0	; select bank0
  9483  1384  0821               	movf	SPI1_Exchange8bit@data,w
  9484  1385  0024               	movlb	4	; select bank4
  9485  1386  0091               	movwf	17	;volatile
  9486  1387                     l522:	
  9487                           ;spi1.c: 85: {
  9488                           
  9489                           ;spi1.c: 84: while(SSP1STATbits.BF == 0x0)
  9490                           
  9491  1387  1C14               	btfss	20,0	;volatile
  9492  1388  2B87               	goto	l522
  9493                           
  9494                           ;spi1.c: 86: }
  9495                           ;spi1.c: 88: return (SSP1BUF);
  9496  1389  0811               	movf	17,w	;volatile
  9497  138A  0008               	return
  9498  138B                     __end_of_SPI1_Exchange8bit:	
  9499                           
  9500                           	psect	text38
  9501  12E6                     __ptext38:	
  9502 ;; *************** function _RF_Init *****************
  9503 ;; Defined at:
  9504 ;;		line 195 in file "nrf24.c"
  9505 ;; Parameters:    Size  Location     Type
  9506 ;;		None
  9507 ;; Auto vars:     Size  Location     Type
  9508 ;;		None
  9509 ;; Return value:  Size  Location     Type
  9510 ;;                  1    wreg      void 
  9511 ;; Registers used:
  9512 ;;		None
  9513 ;; Tracked objects:
  9514 ;;		On entry : 0/0
  9515 ;;		On exit  : 0/0
  9516 ;;		Unchanged: 0/0
  9517 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9518 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9519 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9520 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9521 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9522 ;;Total ram usage:        0 bytes
  9523 ;; Hardware stack levels used:    1
  9524 ;; Hardware stack levels required when called:    4
  9525 ;; This function calls:
  9526 ;;		Nothing
  9527 ;; This function is called by:
  9528 ;;		_Wireless_init
  9529 ;; This function uses a non-reentrant model
  9530 ;;
  9531                           
  9532                           
  9533                           ;psect for function _RF_Init
  9534  12E6                     _RF_Init:	
  9535                           
  9536                           ;incstack = 0
  9537                           ; Regs used in _RF_Init: []
  9538                           ;nrf24.c: 196: do { LATCbits.LATC2 = 0; } while(0);
  9539  12E6  0022               	movlb	2	; select bank2
  9540  12E7  110E               	bcf	14,2	;volatile
  9541                           
  9542                           ;nrf24.c: 197: do { LATCbits.LATC1 = 1; } while(0);
  9543  12E8  148E               	bsf	14,1	;volatile
  9544  12E9  0008               	return
  9545  12EA                     __end_of_RF_Init:	
  9546                           
  9547                           	psect	text39
  9548  0A44                     __ptext39:	
  9549 ;; *************** function _Timeout_updateCurrentTime *****************
  9550 ;; Defined at:
  9551 ;;		line 13 in file "timeout.c"
  9552 ;; Parameters:    Size  Location     Type
  9553 ;;		None
  9554 ;; Auto vars:     Size  Location     Type
  9555 ;;  var             4   17[BANK0 ] unsigned long 
  9556 ;; Return value:  Size  Location     Type
  9557 ;;                  1    wreg      void 
  9558 ;; Registers used:
  9559 ;;		wreg, status,2, status,0, pclath, cstack
  9560 ;; Tracked objects:
  9561 ;;		On entry : 0/0
  9562 ;;		On exit  : 0/0
  9563 ;;		Unchanged: 0/0
  9564 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9565 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9566 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9567 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9568 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9569 ;;Total ram usage:        8 bytes
  9570 ;; Hardware stack levels used:    1
  9571 ;; Hardware stack levels required when called:    5
  9572 ;; This function calls:
  9573 ;;		_TMR1_ReadTimer
  9574 ;;		___lmul
  9575 ;; This function is called by:
  9576 ;;		_main
  9577 ;; This function uses a non-reentrant model
  9578 ;;
  9579                           
  9580                           
  9581                           ;psect for function _Timeout_updateCurrentTime
  9582  0A44                     _Timeout_updateCurrentTime:	
  9583                           
  9584                           ;timeout.c: 15: unsigned long var = 10;
  9585                           
  9586                           ;incstack = 0
  9587                           ; Regs used in _Timeout_updateCurrentTime: [wreg+status,2+status,0+pclath+cstack]
  9588  0A44  3000               	movlw	0
  9589  0A45  0020               	movlb	0	; select bank0
  9590  0A46  00B4               	movwf	Timeout_updateCurrentTime@var+3
  9591  0A47  3000               	movlw	0
  9592  0A48  00B3               	movwf	Timeout_updateCurrentTime@var+2
  9593  0A49  3000               	movlw	0
  9594  0A4A  00B2               	movwf	Timeout_updateCurrentTime@var+1
  9595  0A4B  300A               	movlw	10
  9596  0A4C  00B1               	movwf	Timeout_updateCurrentTime@var
  9597                           
  9598                           ;timeout.c: 16: var = TMR1_ReadTimer();
  9599  0A4D  3195  256D  318A   	fcall	_TMR1_ReadTimer
  9600  0A50  0020               	movlb	0	; select bank0
  9601  0A51  0821               	movf	?_TMR1_ReadTimer,w
  9602  0A52  00B1               	movwf	Timeout_updateCurrentTime@var
  9603  0A53  0822               	movf	?_TMR1_ReadTimer+1,w
  9604  0A54  00B2               	movwf	Timeout_updateCurrentTime@var+1
  9605  0A55  01B3               	clrf	Timeout_updateCurrentTime@var+2
  9606  0A56  01B4               	clrf	Timeout_updateCurrentTime@var+3
  9607                           
  9608                           ;timeout.c: 17: var= var - 0x6000;
  9609  0A57  3000               	movlw	0
  9610  0A58  00AD               	movwf	??_Timeout_updateCurrentTime
  9611  0A59  30A0               	movlw	160
  9612  0A5A  00AE               	movwf	??_Timeout_updateCurrentTime+1
  9613  0A5B  30FF               	movlw	255
  9614  0A5C  00AF               	movwf	??_Timeout_updateCurrentTime+2
  9615  0A5D  30FF               	movlw	255
  9616  0A5E  00B0               	movwf	??_Timeout_updateCurrentTime+3
  9617  0A5F  0831               	movf	Timeout_updateCurrentTime@var,w
  9618  0A60  07AD               	addwf	??_Timeout_updateCurrentTime,f
  9619  0A61  0832               	movf	Timeout_updateCurrentTime@var+1,w
  9620  0A62  3DAE               	addwfc	??_Timeout_updateCurrentTime+1,f
  9621  0A63  0833               	movf	Timeout_updateCurrentTime@var+2,w
  9622  0A64  3DAF               	addwfc	??_Timeout_updateCurrentTime+2,f
  9623  0A65  0834               	movf	Timeout_updateCurrentTime@var+3,w
  9624  0A66  3DB0               	addwfc	??_Timeout_updateCurrentTime+3,f
  9625  0A67  0830               	movf	??_Timeout_updateCurrentTime+3,w
  9626  0A68  00B4               	movwf	Timeout_updateCurrentTime@var+3
  9627  0A69  082F               	movf	??_Timeout_updateCurrentTime+2,w
  9628  0A6A  00B3               	movwf	Timeout_updateCurrentTime@var+2
  9629  0A6B  082E               	movf	??_Timeout_updateCurrentTime+1,w
  9630  0A6C  00B2               	movwf	Timeout_updateCurrentTime@var+1
  9631  0A6D  082D               	movf	??_Timeout_updateCurrentTime,w
  9632  0A6E  00B1               	movwf	Timeout_updateCurrentTime@var
  9633                           
  9634                           ;timeout.c: 18: globalCounter += ((var*1000)/4096);
  9635  0A6F  0834               	movf	Timeout_updateCurrentTime@var+3,w
  9636  0A70  00A4               	movwf	___lmul@multiplier+3
  9637  0A71  0833               	movf	Timeout_updateCurrentTime@var+2,w
  9638  0A72  00A3               	movwf	___lmul@multiplier+2
  9639  0A73  0832               	movf	Timeout_updateCurrentTime@var+1,w
  9640  0A74  00A2               	movwf	___lmul@multiplier+1
  9641  0A75  0831               	movf	Timeout_updateCurrentTime@var,w
  9642  0A76  00A1               	movwf	___lmul@multiplier
  9643  0A77  3000               	movlw	0
  9644  0A78  00A8               	movwf	___lmul@multiplicand+3
  9645  0A79  3000               	movlw	0
  9646  0A7A  00A7               	movwf	___lmul@multiplicand+2
  9647  0A7B  3003               	movlw	3
  9648  0A7C  00A6               	movwf	___lmul@multiplicand+1
  9649  0A7D  30E8               	movlw	232
  9650  0A7E  00A5               	movwf	___lmul@multiplicand
  9651  0A7F  3197  272C  318A   	fcall	___lmul
  9652  0A82  0020               	movlb	0	; select bank0
  9653  0A83  0821               	movf	?___lmul,w
  9654  0A84  00AD               	movwf	??_Timeout_updateCurrentTime
  9655  0A85  0822               	movf	?___lmul+1,w
  9656  0A86  00AE               	movwf	??_Timeout_updateCurrentTime+1
  9657  0A87  0823               	movf	?___lmul+2,w
  9658  0A88  00AF               	movwf	??_Timeout_updateCurrentTime+2
  9659  0A89  0824               	movf	?___lmul+3,w
  9660  0A8A  00B0               	movwf	??_Timeout_updateCurrentTime+3
  9661  0A8B  300C               	movlw	12
  9662  0A8C                     u6375:	
  9663  0A8C  36B0               	lsrf	??_Timeout_updateCurrentTime+3,f
  9664  0A8D  0CAF               	rrf	??_Timeout_updateCurrentTime+2,f
  9665  0A8E  0CAE               	rrf	??_Timeout_updateCurrentTime+1,f
  9666  0A8F  0CAD               	rrf	??_Timeout_updateCurrentTime,f
  9667  0A90  0B89               	decfsz	9,f
  9668  0A91  2A8C               	goto	u6375
  9669  0A92  082D               	movf	??_Timeout_updateCurrentTime,w
  9670  0A93  0021               	movlb	1	; select bank1
  9671  0A94  07D2               	addwf	_globalCounter^(0+128),f	;volatile
  9672  0A95  0020               	movlb	0	; select bank0
  9673  0A96  082E               	movf	??_Timeout_updateCurrentTime+1,w
  9674  0A97  0021               	movlb	1	; select bank1
  9675  0A98  3DD3               	addwfc	(_globalCounter+1)^(0+128),f	;volatile
  9676  0A99  0020               	movlb	0	; select bank0
  9677  0A9A  082F               	movf	??_Timeout_updateCurrentTime+2,w
  9678  0A9B  0021               	movlb	1	; select bank1
  9679  0A9C  3DD4               	addwfc	(_globalCounter+2)^(0+128),f	;volatile
  9680  0A9D  0020               	movlb	0	; select bank0
  9681  0A9E  0830               	movf	??_Timeout_updateCurrentTime+3,w
  9682  0A9F  0021               	movlb	1	; select bank1
  9683  0AA0  3DD5               	addwfc	(_globalCounter+3)^(0+128),f	;volatile
  9684  0AA1  0008               	return
  9685  0AA2                     __end_of_Timeout_updateCurrentTime:	
  9686                           
  9687                           	psect	text40
  9688  172C                     __ptext40:	
  9689 ;; *************** function ___lmul *****************
  9690 ;; Defined at:
  9691 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\Umul32.c"
  9692 ;; Parameters:    Size  Location     Type
  9693 ;;  multiplier      4    1[BANK0 ] unsigned long 
  9694 ;;  multiplicand    4    5[BANK0 ] unsigned long 
  9695 ;; Auto vars:     Size  Location     Type
  9696 ;;  product         4    9[BANK0 ] unsigned long 
  9697 ;; Return value:  Size  Location     Type
  9698 ;;                  4    1[BANK0 ] unsigned long 
  9699 ;; Registers used:
  9700 ;;		wreg, status,2, status,0
  9701 ;; Tracked objects:
  9702 ;;		On entry : 0/0
  9703 ;;		On exit  : 0/0
  9704 ;;		Unchanged: 0/0
  9705 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9706 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9707 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9708 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9709 ;;      Totals:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9710 ;;Total ram usage:       12 bytes
  9711 ;; Hardware stack levels used:    1
  9712 ;; Hardware stack levels required when called:    4
  9713 ;; This function calls:
  9714 ;;		Nothing
  9715 ;; This function is called by:
  9716 ;;		_Wireless_checkDataReceived
  9717 ;;		_Timeout_updateCurrentTime
  9718 ;; This function uses a non-reentrant model
  9719 ;;
  9720                           
  9721                           
  9722                           ;psect for function ___lmul
  9723  172C                     ___lmul:	
  9724                           
  9725                           ;incstack = 0
  9726                           ; Regs used in ___lmul: [wreg+status,2+status,0]
  9727  172C  3000               	movlw	0
  9728  172D  0020               	movlb	0	; select bank0
  9729  172E  00AC               	movwf	___lmul@product+3
  9730  172F  3000               	movlw	0
  9731  1730  00AB               	movwf	___lmul@product+2
  9732  1731  3000               	movlw	0
  9733  1732  00AA               	movwf	___lmul@product+1
  9734  1733  3000               	movlw	0
  9735  1734  00A9               	movwf	___lmul@product
  9736  1735                     l5823:	
  9737  1735  1C21               	btfss	___lmul@multiplier,0
  9738  1736  2F3F               	goto	l5827
  9739  1737  0825               	movf	___lmul@multiplicand,w
  9740  1738  07A9               	addwf	___lmul@product,f
  9741  1739  0826               	movf	___lmul@multiplicand+1,w
  9742  173A  3DAA               	addwfc	___lmul@product+1,f
  9743  173B  0827               	movf	___lmul@multiplicand+2,w
  9744  173C  3DAB               	addwfc	___lmul@product+2,f
  9745  173D  0828               	movf	___lmul@multiplicand+3,w
  9746  173E  3DAC               	addwfc	___lmul@product+3,f
  9747  173F                     l5827:	
  9748  173F  3001               	movlw	1
  9749  1740                     u5285:	
  9750  1740  35A5               	lslf	___lmul@multiplicand,f
  9751  1741  0DA6               	rlf	___lmul@multiplicand+1,f
  9752  1742  0DA7               	rlf	___lmul@multiplicand+2,f
  9753  1743  0DA8               	rlf	___lmul@multiplicand+3,f
  9754  1744  0B89               	decfsz	9,f
  9755  1745  2F40               	goto	u5285
  9756  1746  3001               	movlw	1
  9757  1747                     u5295:	
  9758  1747  36A4               	lsrf	___lmul@multiplier+3,f
  9759  1748  0CA3               	rrf	___lmul@multiplier+2,f
  9760  1749  0CA2               	rrf	___lmul@multiplier+1,f
  9761  174A  0CA1               	rrf	___lmul@multiplier,f
  9762  174B  0B89               	decfsz	9,f
  9763  174C  2F47               	goto	u5295
  9764  174D  0824               	movf	___lmul@multiplier+3,w
  9765  174E  0423               	iorwf	___lmul@multiplier+2,w
  9766  174F  0422               	iorwf	___lmul@multiplier+1,w
  9767  1750  0421               	iorwf	___lmul@multiplier,w
  9768  1751  1D03               	skipz
  9769  1752  2F35               	goto	l5823
  9770  1753  082C               	movf	___lmul@product+3,w
  9771  1754  00A4               	movwf	?___lmul+3
  9772  1755  082B               	movf	___lmul@product+2,w
  9773  1756  00A3               	movwf	?___lmul+2
  9774  1757  082A               	movf	___lmul@product+1,w
  9775  1758  00A2               	movwf	?___lmul+1
  9776  1759  0829               	movf	___lmul@product,w
  9777  175A  00A1               	movwf	?___lmul
  9778  175B  0008               	return
  9779  175C                     __end_of___lmul:	
  9780                           
  9781                           	psect	text41
  9782  156D                     __ptext41:	
  9783 ;; *************** function _TMR1_ReadTimer *****************
  9784 ;; Defined at:
  9785 ;;		line 104 in file "mcc_generated_files/tmr1.c"
  9786 ;; Parameters:    Size  Location     Type
  9787 ;;		None
  9788 ;; Auto vars:     Size  Location     Type
  9789 ;;  readVal         2    8[BANK0 ] unsigned int 
  9790 ;;  readValLow      1   11[BANK0 ] unsigned char 
  9791 ;;  readValHigh     1   10[BANK0 ] unsigned char 
  9792 ;; Return value:  Size  Location     Type
  9793 ;;                  2    1[BANK0 ] unsigned int 
  9794 ;; Registers used:
  9795 ;;		wreg
  9796 ;; Tracked objects:
  9797 ;;		On entry : 0/0
  9798 ;;		On exit  : 0/0
  9799 ;;		Unchanged: 0/0
  9800 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9801 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9802 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9803 ;;      Temps:          0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9804 ;;      Totals:         0      11       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9805 ;;Total ram usage:       11 bytes
  9806 ;; Hardware stack levels used:    1
  9807 ;; Hardware stack levels required when called:    4
  9808 ;; This function calls:
  9809 ;;		Nothing
  9810 ;; This function is called by:
  9811 ;;		_Timeout_updateCurrentTime
  9812 ;; This function uses a non-reentrant model
  9813 ;;
  9814                           
  9815                           
  9816                           ;psect for function _TMR1_ReadTimer
  9817  156D                     _TMR1_ReadTimer:	
  9818                           
  9819                           ;tmr1.c: 106: uint16_t readVal;
  9820                           ;tmr1.c: 107: uint8_t readValHigh;
  9821                           ;tmr1.c: 108: uint8_t readValLow;
  9822                           ;tmr1.c: 110: readValLow = TMR1L;
  9823                           
  9824                           ;incstack = 0
  9825                           ; Regs used in _TMR1_ReadTimer: [wreg]
  9826  156D  0020               	movlb	0	; select bank0
  9827  156E  0816               	movf	22,w	;volatile
  9828  156F  00A3               	movwf	??_TMR1_ReadTimer
  9829  1570  0823               	movf	??_TMR1_ReadTimer,w
  9830  1571  00AB               	movwf	TMR1_ReadTimer@readValLow
  9831                           
  9832                           ;tmr1.c: 111: readValHigh = TMR1H;
  9833  1572  0817               	movf	23,w	;volatile
  9834  1573  00A3               	movwf	??_TMR1_ReadTimer
  9835  1574  0823               	movf	??_TMR1_ReadTimer,w
  9836  1575  00AA               	movwf	TMR1_ReadTimer@readValHigh
  9837                           
  9838                           ;tmr1.c: 113: readVal = ((uint16_t)readValHigh << 8) | readValLow;
  9839  1576  082B               	movf	TMR1_ReadTimer@readValLow,w
  9840  1577  00A3               	movwf	??_TMR1_ReadTimer
  9841  1578  01A4               	clrf	??_TMR1_ReadTimer+1
  9842  1579  082A               	movf	TMR1_ReadTimer@readValHigh,w
  9843  157A  00A5               	movwf	??_TMR1_ReadTimer+2
  9844  157B  01A6               	clrf	??_TMR1_ReadTimer+3
  9845  157C  0825               	movf	??_TMR1_ReadTimer+2,w
  9846  157D  00A6               	movwf	??_TMR1_ReadTimer+3
  9847  157E  01A5               	clrf	??_TMR1_ReadTimer+2
  9848  157F  0823               	movf	??_TMR1_ReadTimer,w
  9849  1580  0425               	iorwf	??_TMR1_ReadTimer+2,w
  9850  1581  00A8               	movwf	TMR1_ReadTimer@readVal
  9851  1582  0824               	movf	??_TMR1_ReadTimer+1,w
  9852  1583  0426               	iorwf	??_TMR1_ReadTimer+3,w
  9853  1584  00A9               	movwf	TMR1_ReadTimer@readVal+1
  9854                           
  9855                           ;tmr1.c: 115: return readVal;
  9856  1585  0829               	movf	TMR1_ReadTimer@readVal+1,w
  9857  1586  00A2               	movwf	?_TMR1_ReadTimer+1
  9858  1587  0828               	movf	TMR1_ReadTimer@readVal,w
  9859  1588  00A1               	movwf	?_TMR1_ReadTimer
  9860  1589  0008               	return
  9861  158A                     __end_of_TMR1_ReadTimer:	
  9862                           
  9863                           	psect	text42
  9864  13E4                     __ptext42:	
  9865 ;; *************** function _Timeout_getGlobalCounter *****************
  9866 ;; Defined at:
  9867 ;;		line 21 in file "timeout.c"
  9868 ;; Parameters:    Size  Location     Type
  9869 ;;		None
  9870 ;; Auto vars:     Size  Location     Type
  9871 ;;		None
  9872 ;; Return value:  Size  Location     Type
  9873 ;;                  4    1[BANK0 ] unsigned long 
  9874 ;; Registers used:
  9875 ;;		wreg
  9876 ;; Tracked objects:
  9877 ;;		On entry : 0/0
  9878 ;;		On exit  : 0/0
  9879 ;;		Unchanged: 0/0
  9880 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9881 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9882 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9883 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9884 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9885 ;;Total ram usage:        4 bytes
  9886 ;; Hardware stack levels used:    1
  9887 ;; Hardware stack levels required when called:    4
  9888 ;; This function calls:
  9889 ;;		Nothing
  9890 ;; This function is called by:
  9891 ;;		_main
  9892 ;; This function uses a non-reentrant model
  9893 ;;
  9894                           
  9895                           
  9896                           ;psect for function _Timeout_getGlobalCounter
  9897  13E4                     _Timeout_getGlobalCounter:	
  9898                           
  9899                           ;timeout.c: 23: return globalCounter;
  9900                           
  9901                           ;incstack = 0
  9902                           ; Regs used in _Timeout_getGlobalCounter: [wreg]
  9903  13E4  0021               	movlb	1	; select bank1
  9904  13E5  0855               	movf	(_globalCounter+3)^(0+128),w	;volatile
  9905  13E6  0020               	movlb	0	; select bank0
  9906  13E7  00A4               	movwf	?_Timeout_getGlobalCounter+3
  9907  13E8  0021               	movlb	1	; select bank1
  9908  13E9  0854               	movf	(_globalCounter+2)^(0+128),w	;volatile
  9909  13EA  0020               	movlb	0	; select bank0
  9910  13EB  00A3               	movwf	?_Timeout_getGlobalCounter+2
  9911  13EC  0021               	movlb	1	; select bank1
  9912  13ED  0853               	movf	(_globalCounter+1)^(0+128),w	;volatile
  9913  13EE  0020               	movlb	0	; select bank0
  9914  13EF  00A2               	movwf	?_Timeout_getGlobalCounter+1
  9915  13F0  0021               	movlb	1	; select bank1
  9916  13F1  0852               	movf	_globalCounter^(0+128),w	;volatile
  9917  13F2  0020               	movlb	0	; select bank0
  9918  13F3  00A1               	movwf	?_Timeout_getGlobalCounter
  9919  13F4  0008               	return
  9920  13F5                     __end_of_Timeout_getGlobalCounter:	
  9921                           
  9922                           	psect	text43
  9923  14FF                     __ptext43:	
  9924 ;; *************** function _SYSTEM_Initialize *****************
  9925 ;; Defined at:
  9926 ;;		line 70 in file "mcc_generated_files/mcc.c"
  9927 ;; Parameters:    Size  Location     Type
  9928 ;;		None
  9929 ;; Auto vars:     Size  Location     Type
  9930 ;;		None
  9931 ;; Return value:  Size  Location     Type
  9932 ;;                  1    wreg      void 
  9933 ;; Registers used:
  9934 ;;		wreg, status,2, status,0, pclath, cstack
  9935 ;; Tracked objects:
  9936 ;;		On entry : 0/0
  9937 ;;		On exit  : 0/0
  9938 ;;		Unchanged: 0/0
  9939 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9940 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9941 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9942 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9943 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9944 ;;Total ram usage:        0 bytes
  9945 ;; Hardware stack levels used:    1
  9946 ;; Hardware stack levels required when called:    6
  9947 ;; This function calls:
  9948 ;;		_ADC_Initialize
  9949 ;;		_FVR_Initialize
  9950 ;;		_I2C2_Initialize
  9951 ;;		_OSCILLATOR_Initialize
  9952 ;;		_PIN_MANAGER_Initialize
  9953 ;;		_SPI1_Initialize
  9954 ;;		_TMR1_Initialize
  9955 ;;		_TMR2_Initialize
  9956 ;;		_WDT_Initialize
  9957 ;; This function is called by:
  9958 ;;		_main
  9959 ;; This function uses a non-reentrant model
  9960 ;;
  9961                           
  9962                           
  9963                           ;psect for function _SYSTEM_Initialize
  9964  14FF                     _SYSTEM_Initialize:	
  9965                           
  9966                           ;mcc.c: 73: PIN_MANAGER_Initialize();
  9967                           
  9968                           ;incstack = 0
  9969                           ; Regs used in _SYSTEM_Initialize: [wreg+status,2+status,0+pclath+cstack]
  9970  14FF  3196  26D5  3194   	fcall	_PIN_MANAGER_Initialize
  9971                           
  9972                           ;mcc.c: 74: OSCILLATOR_Initialize();
  9973  1502  3193  231B  3194   	fcall	_OSCILLATOR_Initialize
  9974                           
  9975                           ;mcc.c: 75: WDT_Initialize();
  9976  1505  3192  22E2  3194   	fcall	_WDT_Initialize
  9977                           
  9978                           ;mcc.c: 76: SPI1_Initialize();
  9979  1508  3193  2322  3194   	fcall	_SPI1_Initialize
  9980                           
  9981                           ;mcc.c: 77: I2C2_Initialize();
  9982  150B  3194  24E4  3194   	fcall	_I2C2_Initialize
  9983                           
  9984                           ;mcc.c: 78: FVR_Initialize();
  9985  150E  3192  22DE  3194   	fcall	_FVR_Initialize
  9986                           
  9987                           ;mcc.c: 79: ADC_Initialize();
  9988  1511  3193  2338  3194   	fcall	_ADC_Initialize
  9989                           
  9990                           ;mcc.c: 80: TMR2_Initialize();
  9991  1514  3193  2340  3194   	fcall	_TMR2_Initialize
  9992                           
  9993                           ;mcc.c: 81: TMR1_Initialize();
  9994  1517  3194  2482         	fcall	_TMR1_Initialize
  9995  1519  0008               	return
  9996  151A                     __end_of_SYSTEM_Initialize:	
  9997                           
  9998                           	psect	text44
  9999  12E2                     __ptext44:	
 10000 ;; *************** function _WDT_Initialize *****************
 10001 ;; Defined at:
 10002 ;;		line 94 in file "mcc_generated_files/mcc.c"
 10003 ;; Parameters:    Size  Location     Type
 10004 ;;		None
 10005 ;; Auto vars:     Size  Location     Type
 10006 ;;		None
 10007 ;; Return value:  Size  Location     Type
 10008 ;;                  1    wreg      void 
 10009 ;; Registers used:
 10010 ;;		wreg
 10011 ;; Tracked objects:
 10012 ;;		On entry : 0/0
 10013 ;;		On exit  : 0/0
 10014 ;;		Unchanged: 0/0
 10015 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10016 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10017 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10018 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10019 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10020 ;;Total ram usage:        0 bytes
 10021 ;; Hardware stack levels used:    1
 10022 ;; Hardware stack levels required when called:    4
 10023 ;; This function calls:
 10024 ;;		Nothing
 10025 ;; This function is called by:
 10026 ;;		_SYSTEM_Initialize
 10027 ;; This function uses a non-reentrant model
 10028 ;;
 10029                           
 10030                           
 10031                           ;psect for function _WDT_Initialize
 10032  12E2                     _WDT_Initialize:	
 10033                           
 10034                           ;mcc.c: 97: WDTCON = 0x1A;
 10035                           
 10036                           ;incstack = 0
 10037                           ; Regs used in _WDT_Initialize: [wreg]
 10038  12E2  301A               	movlw	26
 10039  12E3  0021               	movlb	1	; select bank1
 10040  12E4  0097               	movwf	23	;volatile
 10041  12E5  0008               	return
 10042  12E6                     __end_of_WDT_Initialize:	
 10043                           
 10044                           	psect	text45
 10045  1340                     __ptext45:	
 10046 ;; *************** function _TMR2_Initialize *****************
 10047 ;; Defined at:
 10048 ;;		line 61 in file "mcc_generated_files/tmr2.c"
 10049 ;; Parameters:    Size  Location     Type
 10050 ;;		None
 10051 ;; Auto vars:     Size  Location     Type
 10052 ;;		None
 10053 ;; Return value:  Size  Location     Type
 10054 ;;                  1    wreg      void 
 10055 ;; Registers used:
 10056 ;;		wreg, status,2
 10057 ;; Tracked objects:
 10058 ;;		On entry : 0/0
 10059 ;;		On exit  : 0/0
 10060 ;;		Unchanged: 0/0
 10061 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10062 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10063 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10064 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10065 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10066 ;;Total ram usage:        0 bytes
 10067 ;; Hardware stack levels used:    1
 10068 ;; Hardware stack levels required when called:    4
 10069 ;; This function calls:
 10070 ;;		Nothing
 10071 ;; This function is called by:
 10072 ;;		_SYSTEM_Initialize
 10073 ;; This function uses a non-reentrant model
 10074 ;;
 10075                           
 10076                           
 10077                           ;psect for function _TMR2_Initialize
 10078  1340                     _TMR2_Initialize:	
 10079                           
 10080                           ;tmr2.c: 66: PR2 = 0x44;
 10081                           
 10082                           ;incstack = 0
 10083                           ; Regs used in _TMR2_Initialize: [wreg+status,2]
 10084  1340  3044               	movlw	68
 10085  1341  0020               	movlb	0	; select bank0
 10086  1342  009B               	movwf	27	;volatile
 10087                           
 10088                           ;tmr2.c: 69: TMR2 = 0x00;
 10089  1343  019A               	clrf	26	;volatile
 10090                           
 10091                           ;tmr2.c: 72: PIR1bits.TMR2IF = 0;
 10092  1344  1091               	bcf	17,1	;volatile
 10093                           
 10094                           ;tmr2.c: 75: T2CON = 0x46;
 10095  1345  3046               	movlw	70
 10096  1346  009C               	movwf	28	;volatile
 10097  1347  0008               	return
 10098  1348                     __end_of_TMR2_Initialize:	
 10099                           
 10100                           	psect	text46
 10101  1482                     __ptext46:	
 10102 ;; *************** function _TMR1_Initialize *****************
 10103 ;; Defined at:
 10104 ;;		line 63 in file "mcc_generated_files/tmr1.c"
 10105 ;; Parameters:    Size  Location     Type
 10106 ;;		None
 10107 ;; Auto vars:     Size  Location     Type
 10108 ;;		None
 10109 ;; Return value:  Size  Location     Type
 10110 ;;                  1    wreg      void 
 10111 ;; Registers used:
 10112 ;;		wreg, status,2, status,0, pclath, cstack
 10113 ;; Tracked objects:
 10114 ;;		On entry : 0/0
 10115 ;;		On exit  : 0/0
 10116 ;;		Unchanged: 0/0
 10117 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10118 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10119 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10120 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10121 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10122 ;;Total ram usage:        0 bytes
 10123 ;; Hardware stack levels used:    1
 10124 ;; Hardware stack levels required when called:    5
 10125 ;; This function calls:
 10126 ;;		_TMR1_SetInterruptHandler
 10127 ;; This function is called by:
 10128 ;;		_SYSTEM_Initialize
 10129 ;; This function uses a non-reentrant model
 10130 ;;
 10131                           
 10132                           
 10133                           ;psect for function _TMR1_Initialize
 10134  1482                     _TMR1_Initialize:	
 10135                           
 10136                           ;tmr1.c: 68: T1GCON = 0x00;
 10137                           
 10138                           ;incstack = 0
 10139                           ; Regs used in _TMR1_Initialize: [wreg+status,2+status,0+pclath+cstack]
 10140  1482  0020               	movlb	0	; select bank0
 10141  1483  0199               	clrf	25	;volatile
 10142                           
 10143                           ;tmr1.c: 71: TMR1H = 0x60;
 10144  1484  3060               	movlw	96
 10145  1485  0097               	movwf	23	;volatile
 10146                           
 10147                           ;tmr1.c: 74: TMR1L = 0x00;
 10148  1486  0196               	clrf	22	;volatile
 10149                           
 10150                           ;tmr1.c: 77: timer1ReloadVal=(uint16_t)((TMR1H << 8) | TMR1L);
 10151  1487  0817               	movf	23,w	;volatile
 10152  1488  00FD               	movwf	_timer1ReloadVal+1	;volatile
 10153  1489  0816               	movf	22,w	;volatile
 10154  148A  00FC               	movwf	_timer1ReloadVal	;volatile
 10155                           
 10156                           ;tmr1.c: 80: PIR1bits.TMR1IF = 0;
 10157  148B  1011               	bcf	17,0	;volatile
 10158                           
 10159                           ;tmr1.c: 83: PIE1bits.TMR1IE = 1;
 10160  148C  0021               	movlb	1	; select bank1
 10161  148D  1411               	bsf	17,0	;volatile
 10162                           
 10163                           ;tmr1.c: 86: TMR1_SetInterruptHandler(TMR1_DefaultInterruptHandler);
 10164  148E  3000               	movlw	low _TMR1_DefaultInterruptHandler
 10165  148F  0020               	movlb	0	; select bank0
 10166  1490  00A1               	movwf	TMR1_SetInterruptHandler@InterruptHandler
 10167  1491  3008               	movlw	high _TMR1_DefaultInterruptHandler
 10168  1492  00A2               	movwf	TMR1_SetInterruptHandler@InterruptHandler+1
 10169  1493  3193  2363         	fcall	_TMR1_SetInterruptHandler
 10170                           
 10171                           ;tmr1.c: 89: T1CON = 0xBD;
 10172  1495  30BD               	movlw	189
 10173  1496  0020               	movlb	0	; select bank0
 10174  1497  0098               	movwf	24	;volatile
 10175  1498  0008               	return
 10176  1499                     __end_of_TMR1_Initialize:	
 10177                           
 10178                           	psect	text47
 10179  1363                     __ptext47:	
 10180 ;; *************** function _TMR1_SetInterruptHandler *****************
 10181 ;; Defined at:
 10182 ;;		line 181 in file "mcc_generated_files/tmr1.c"
 10183 ;; Parameters:    Size  Location     Type
 10184 ;;  InterruptHan    2    1[BANK0 ] PTR FTN()void 
 10185 ;;		 -> TMR1_DefaultInterruptHandler(1), 
 10186 ;; Auto vars:     Size  Location     Type
 10187 ;;		None
 10188 ;; Return value:  Size  Location     Type
 10189 ;;                  1    wreg      void 
 10190 ;; Registers used:
 10191 ;;		wreg
 10192 ;; Tracked objects:
 10193 ;;		On entry : 0/0
 10194 ;;		On exit  : 0/0
 10195 ;;		Unchanged: 0/0
 10196 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10197 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10198 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10199 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10200 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10201 ;;Total ram usage:        2 bytes
 10202 ;; Hardware stack levels used:    1
 10203 ;; Hardware stack levels required when called:    4
 10204 ;; This function calls:
 10205 ;;		Nothing
 10206 ;; This function is called by:
 10207 ;;		_TMR1_Initialize
 10208 ;; This function uses a non-reentrant model
 10209 ;;
 10210                           
 10211                           
 10212                           ;psect for function _TMR1_SetInterruptHandler
 10213  1363                     _TMR1_SetInterruptHandler:	
 10214                           
 10215                           ;tmr1.c: 182: TMR1_InterruptHandler = InterruptHandler;
 10216                           
 10217                           ;incstack = 0
 10218                           ; Regs used in _TMR1_SetInterruptHandler: [wreg]
 10219  1363  0020               	movlb	0	; select bank0
 10220  1364  0822               	movf	TMR1_SetInterruptHandler@InterruptHandler+1,w
 10221  1365  0022               	movlb	2	; select bank2
 10222  1366  00ED               	movwf	(_TMR1_InterruptHandler+1)^(0+256)
 10223  1367  0020               	movlb	0	; select bank0
 10224  1368  0821               	movf	TMR1_SetInterruptHandler@InterruptHandler,w
 10225  1369  0022               	movlb	2	; select bank2
 10226  136A  00EC               	movwf	_TMR1_InterruptHandler^(0+256)
 10227  136B  0008               	return
 10228  136C                     __end_of_TMR1_SetInterruptHandler:	
 10229                           
 10230                           	psect	text48
 10231  1322                     __ptext48:	
 10232 ;; *************** function _SPI1_Initialize *****************
 10233 ;; Defined at:
 10234 ;;		line 63 in file "mcc_generated_files/spi1.c"
 10235 ;; Parameters:    Size  Location     Type
 10236 ;;		None
 10237 ;; Auto vars:     Size  Location     Type
 10238 ;;		None
 10239 ;; Return value:  Size  Location     Type
 10240 ;;                  1    wreg      void 
 10241 ;; Registers used:
 10242 ;;		wreg, status,2
 10243 ;; Tracked objects:
 10244 ;;		On entry : 0/0
 10245 ;;		On exit  : 0/0
 10246 ;;		Unchanged: 0/0
 10247 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10248 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10249 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10250 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10251 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10252 ;;Total ram usage:        0 bytes
 10253 ;; Hardware stack levels used:    1
 10254 ;; Hardware stack levels required when called:    4
 10255 ;; This function calls:
 10256 ;;		Nothing
 10257 ;; This function is called by:
 10258 ;;		_SYSTEM_Initialize
 10259 ;; This function uses a non-reentrant model
 10260 ;;
 10261                           
 10262                           
 10263                           ;psect for function _SPI1_Initialize
 10264  1322                     _SPI1_Initialize:	
 10265                           
 10266                           ;spi1.c: 68: SSP1STAT = 0x40;
 10267                           
 10268                           ;incstack = 0
 10269                           ; Regs used in _SPI1_Initialize: [wreg+status,2]
 10270  1322  3040               	movlw	64
 10271  1323  0024               	movlb	4	; select bank4
 10272  1324  0094               	movwf	20	;volatile
 10273                           
 10274                           ;spi1.c: 71: SSP1CON1 = 0x20;
 10275  1325  3020               	movlw	32
 10276  1326  0095               	movwf	21	;volatile
 10277                           
 10278                           ;spi1.c: 74: SSP1ADD = 0x00;
 10279  1327  0192               	clrf	18	;volatile
 10280  1328  0008               	return
 10281  1329                     __end_of_SPI1_Initialize:	
 10282                           
 10283                           	psect	text49
 10284  16D5                     __ptext49:	
 10285 ;; *************** function _PIN_MANAGER_Initialize *****************
 10286 ;; Defined at:
 10287 ;;		line 54 in file "mcc_generated_files/pin_manager.c"
 10288 ;; Parameters:    Size  Location     Type
 10289 ;;		None
 10290 ;; Auto vars:     Size  Location     Type
 10291 ;;		None
 10292 ;; Return value:  Size  Location     Type
 10293 ;;                  1    wreg      void 
 10294 ;; Registers used:
 10295 ;;		wreg, status,2, status,0, pclath, cstack
 10296 ;; Tracked objects:
 10297 ;;		On entry : 0/0
 10298 ;;		On exit  : 0/0
 10299 ;;		Unchanged: 0/0
 10300 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10301 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10302 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10303 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10304 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10305 ;;Total ram usage:        0 bytes
 10306 ;; Hardware stack levels used:    1
 10307 ;; Hardware stack levels required when called:    5
 10308 ;; This function calls:
 10309 ;;		_IOCAF2_SetInterruptHandler
 10310 ;; This function is called by:
 10311 ;;		_SYSTEM_Initialize
 10312 ;; This function uses a non-reentrant model
 10313 ;;
 10314                           
 10315                           
 10316                           ;psect for function _PIN_MANAGER_Initialize
 10317  16D5                     _PIN_MANAGER_Initialize:	
 10318                           
 10319                           ;pin_manager.c: 59: LATA = 0x00;
 10320                           
 10321                           ;incstack = 0
 10322                           ; Regs used in _PIN_MANAGER_Initialize: [wreg+status,2+status,0+pclath+cstack]
 10323  16D5  0022               	movlb	2	; select bank2
 10324  16D6  018C               	clrf	12	;volatile
 10325                           
 10326                           ;pin_manager.c: 60: LATB = 0x00;
 10327  16D7  018D               	clrf	13	;volatile
 10328                           
 10329                           ;pin_manager.c: 61: LATC = 0x00;
 10330  16D8  018E               	clrf	14	;volatile
 10331                           
 10332                           ;pin_manager.c: 66: TRISA = 0x3F;
 10333  16D9  303F               	movlw	63
 10334  16DA  0021               	movlb	1	; select bank1
 10335  16DB  008C               	movwf	12	;volatile
 10336                           
 10337                           ;pin_manager.c: 67: TRISB = 0xB0;
 10338  16DC  30B0               	movlw	176
 10339  16DD  008D               	movwf	13	;volatile
 10340                           
 10341                           ;pin_manager.c: 68: TRISC = 0x39;
 10342  16DE  3039               	movlw	57
 10343  16DF  008E               	movwf	14	;volatile
 10344                           
 10345                           ;pin_manager.c: 73: ANSELC = 0x01;
 10346  16E0  3001               	movlw	1
 10347  16E1  0023               	movlb	3	; select bank3
 10348  16E2  008E               	movwf	14	;volatile
 10349                           
 10350                           ;pin_manager.c: 74: ANSELB = 0x00;
 10351  16E3  018D               	clrf	13	;volatile
 10352                           
 10353                           ;pin_manager.c: 75: ANSELA = 0x03;
 10354  16E4  3003               	movlw	3
 10355  16E5  008C               	movwf	12	;volatile
 10356                           
 10357                           ;pin_manager.c: 80: WPUB = 0x10;
 10358  16E6  3010               	movlw	16
 10359  16E7  0024               	movlb	4	; select bank4
 10360  16E8  008D               	movwf	13	;volatile
 10361                           
 10362                           ;pin_manager.c: 81: WPUA = 0x3F;
 10363  16E9  303F               	movlw	63
 10364  16EA  008C               	movwf	12	;volatile
 10365                           
 10366                           ;pin_manager.c: 82: WPUC = 0xD1;
 10367  16EB  30D1               	movlw	209
 10368  16EC  008E               	movwf	14	;volatile
 10369                           
 10370                           ;pin_manager.c: 83: OPTION_REGbits.nWPUEN = 0;
 10371  16ED  0021               	movlb	1	; select bank1
 10372  16EE  1395               	bcf	21,7	;volatile
 10373                           
 10374                           ;pin_manager.c: 89: APFCON1 = 0x2A;
 10375  16EF  302A               	movlw	42
 10376  16F0  0022               	movlb	2	; select bank2
 10377  16F1  009E               	movwf	30	;volatile
 10378                           
 10379                           ;pin_manager.c: 90: APFCON0 = 0x00;
 10380  16F2  019D               	clrf	29	;volatile
 10381                           
 10382                           ;pin_manager.c: 96: IOCAFbits.IOCAF2 = 0;
 10383  16F3  0027               	movlb	7	; select bank7
 10384  16F4  1113               	bcf	19,2	;volatile
 10385                           
 10386                           ;pin_manager.c: 98: IOCANbits.IOCAN2 = 1;
 10387  16F5  1512               	bsf	18,2	;volatile
 10388                           
 10389                           ;pin_manager.c: 100: IOCAPbits.IOCAP2 = 1;
 10390  16F6  1511               	bsf	17,2	;volatile
 10391                           
 10392                           ;pin_manager.c: 103: IOCAF2_SetInterruptHandler(IOCAF2_DefaultInterruptHandler);
 10393  16F7  30D4               	movlw	low _IOCAF2_DefaultInterruptHandler
 10394  16F8  0020               	movlb	0	; select bank0
 10395  16F9  00A1               	movwf	IOCAF2_SetInterruptHandler@InterruptHandler
 10396  16FA  3012               	movlw	high _IOCAF2_DefaultInterruptHandler
 10397  16FB  00A2               	movwf	IOCAF2_SetInterruptHandler@InterruptHandler+1
 10398  16FC  3193  235A         	fcall	_IOCAF2_SetInterruptHandler
 10399                           
 10400                           ;pin_manager.c: 106: INTCONbits.IOCIE = 1;
 10401  16FE  158B               	bsf	11,3	;volatile
 10402  16FF  0008               	return
 10403  1700                     __end_of_PIN_MANAGER_Initialize:	
 10404                           
 10405                           	psect	text50
 10406  135A                     __ptext50:	
 10407 ;; *************** function _IOCAF2_SetInterruptHandler *****************
 10408 ;; Defined at:
 10409 ;;		line 139 in file "mcc_generated_files/pin_manager.c"
 10410 ;; Parameters:    Size  Location     Type
 10411 ;;  InterruptHan    2    1[BANK0 ] PTR FTN()void 
 10412 ;;		 -> IOCAF2_DefaultInterruptHandler(1), 
 10413 ;; Auto vars:     Size  Location     Type
 10414 ;;		None
 10415 ;; Return value:  Size  Location     Type
 10416 ;;                  1    wreg      void 
 10417 ;; Registers used:
 10418 ;;		wreg
 10419 ;; Tracked objects:
 10420 ;;		On entry : 0/0
 10421 ;;		On exit  : 0/0
 10422 ;;		Unchanged: 0/0
 10423 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10424 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10425 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10426 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10427 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10428 ;;Total ram usage:        2 bytes
 10429 ;; Hardware stack levels used:    1
 10430 ;; Hardware stack levels required when called:    4
 10431 ;; This function calls:
 10432 ;;		Nothing
 10433 ;; This function is called by:
 10434 ;;		_PIN_MANAGER_Initialize
 10435 ;; This function uses a non-reentrant model
 10436 ;;
 10437                           
 10438                           
 10439                           ;psect for function _IOCAF2_SetInterruptHandler
 10440  135A                     _IOCAF2_SetInterruptHandler:	
 10441                           
 10442                           ;pin_manager.c: 140: IOCAF2_InterruptHandler = InterruptHandler;
 10443                           
 10444                           ;incstack = 0
 10445                           ; Regs used in _IOCAF2_SetInterruptHandler: [wreg]
 10446  135A  0020               	movlb	0	; select bank0
 10447  135B  0822               	movf	IOCAF2_SetInterruptHandler@InterruptHandler+1,w
 10448  135C  0022               	movlb	2	; select bank2
 10449  135D  00EF               	movwf	(_IOCAF2_InterruptHandler+1)^(0+256)
 10450  135E  0020               	movlb	0	; select bank0
 10451  135F  0821               	movf	IOCAF2_SetInterruptHandler@InterruptHandler,w
 10452  1360  0022               	movlb	2	; select bank2
 10453  1361  00EE               	movwf	_IOCAF2_InterruptHandler^(0+256)
 10454  1362  0008               	return
 10455  1363                     __end_of_IOCAF2_SetInterruptHandler:	
 10456                           
 10457                           	psect	text51
 10458  131B                     __ptext51:	
 10459 ;; *************** function _OSCILLATOR_Initialize *****************
 10460 ;; Defined at:
 10461 ;;		line 84 in file "mcc_generated_files/mcc.c"
 10462 ;; Parameters:    Size  Location     Type
 10463 ;;		None
 10464 ;; Auto vars:     Size  Location     Type
 10465 ;;		None
 10466 ;; Return value:  Size  Location     Type
 10467 ;;                  1    wreg      void 
 10468 ;; Registers used:
 10469 ;;		wreg, status,2
 10470 ;; Tracked objects:
 10471 ;;		On entry : 0/0
 10472 ;;		On exit  : 0/0
 10473 ;;		Unchanged: 0/0
 10474 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10475 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10476 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10477 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10478 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10479 ;;Total ram usage:        0 bytes
 10480 ;; Hardware stack levels used:    1
 10481 ;; Hardware stack levels required when called:    4
 10482 ;; This function calls:
 10483 ;;		Nothing
 10484 ;; This function is called by:
 10485 ;;		_SYSTEM_Initialize
 10486 ;; This function uses a non-reentrant model
 10487 ;;
 10488                           
 10489                           
 10490                           ;psect for function _OSCILLATOR_Initialize
 10491  131B                     _OSCILLATOR_Initialize:	
 10492                           
 10493                           ;mcc.c: 87: OSCCON = 0x72;
 10494                           
 10495                           ;incstack = 0
 10496                           ; Regs used in _OSCILLATOR_Initialize: [wreg+status,2]
 10497  131B  3072               	movlw	114
 10498  131C  0021               	movlb	1	; select bank1
 10499  131D  0099               	movwf	25	;volatile
 10500                           
 10501                           ;mcc.c: 89: OSCTUNE = 0x00;
 10502  131E  0198               	clrf	24	;volatile
 10503                           
 10504                           ;mcc.c: 91: BORCON = 0x00;
 10505  131F  0022               	movlb	2	; select bank2
 10506  1320  0196               	clrf	22	;volatile
 10507  1321  0008               	return
 10508  1322                     __end_of_OSCILLATOR_Initialize:	
 10509                           
 10510                           	psect	text52
 10511  14E4                     __ptext52:	
 10512 ;; *************** function _I2C2_Initialize *****************
 10513 ;; Defined at:
 10514 ;;		line 198 in file "mcc_generated_files/i2c2.c"
 10515 ;; Parameters:    Size  Location     Type
 10516 ;;		None
 10517 ;; Auto vars:     Size  Location     Type
 10518 ;;		None
 10519 ;; Return value:  Size  Location     Type
 10520 ;;                  1    wreg      void 
 10521 ;; Registers used:
 10522 ;;		wreg, status,2
 10523 ;; Tracked objects:
 10524 ;;		On entry : 0/0
 10525 ;;		On exit  : 0/0
 10526 ;;		Unchanged: 0/0
 10527 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10528 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10529 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10530 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10531 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10532 ;;Total ram usage:        1 bytes
 10533 ;; Hardware stack levels used:    1
 10534 ;; Hardware stack levels required when called:    4
 10535 ;; This function calls:
 10536 ;;		Nothing
 10537 ;; This function is called by:
 10538 ;;		_SYSTEM_Initialize
 10539 ;; This function uses a non-reentrant model
 10540 ;;
 10541                           
 10542                           
 10543                           ;psect for function _I2C2_Initialize
 10544  14E4                     _I2C2_Initialize:	
 10545                           
 10546                           ;i2c2.c: 200: i2c2_object.pTrHead = i2c2_tr_queue;
 10547                           
 10548                           ;incstack = 0
 10549                           ; Regs used in _I2C2_Initialize: [wreg+status,2]
 10550  14E4  3062               	movlw	(low (_i2c2_tr_queue| (0+256)))& (0+255)
 10551  14E5  0020               	movlb	0	; select bank0
 10552  14E6  00A1               	movwf	??_I2C2_Initialize
 10553  14E7  0821               	movf	??_I2C2_Initialize,w
 10554  14E8  0021               	movlb	1	; select bank1
 10555  14E9  00CE               	movwf	(low ((_i2c2_object| 0+1)))^(0+128)
 10556                           
 10557                           ;i2c2.c: 201: i2c2_object.pTrTail = i2c2_tr_queue;
 10558  14EA  3062               	movlw	(low (_i2c2_tr_queue| (0+256)))& (0+255)
 10559  14EB  0020               	movlb	0	; select bank0
 10560  14EC  00A1               	movwf	??_I2C2_Initialize
 10561  14ED  0821               	movf	??_I2C2_Initialize,w
 10562  14EE  0021               	movlb	1	; select bank1
 10563  14EF  00CD               	movwf	_i2c2_object^(0+128)
 10564                           
 10565                           ;i2c2.c: 202: i2c2_object.trStatus.s.empty = 1;
 10566  14F0  14CF               	bsf	(_i2c2_object^(0+128)+2),1
 10567                           
 10568                           ;i2c2.c: 203: i2c2_object.trStatus.s.full = 0;
 10569  14F1  104F               	bcf	(_i2c2_object^(0+128)+2),0
 10570                           
 10571                           ;i2c2.c: 205: i2c2_object.i2cErrors = 0;
 10572  14F2  01D1               	clrf	(_i2c2_object^(0+128)+4)
 10573                           
 10574                           ;i2c2.c: 208: SSP2STAT = 0x00;
 10575  14F3  0024               	movlb	4	; select bank4
 10576  14F4  019C               	clrf	28	;volatile
 10577                           
 10578                           ;i2c2.c: 210: SSP2CON1 = 0x28;
 10579  14F5  3028               	movlw	40
 10580  14F6  009D               	movwf	29	;volatile
 10581                           
 10582                           ;i2c2.c: 212: SSP2CON3 = 0x00;
 10583  14F7  019F               	clrf	31	;volatile
 10584                           
 10585                           ;i2c2.c: 214: SSP2ADD = 0x03;
 10586  14F8  3003               	movlw	3
 10587  14F9  009A               	movwf	26	;volatile
 10588                           
 10589                           ;i2c2.c: 218: PIR4bits.SSP2IF = 0;
 10590  14FA  0020               	movlb	0	; select bank0
 10591  14FB  1014               	bcf	20,0	;volatile
 10592                           
 10593                           ;i2c2.c: 220: PIE4bits.SSP2IE = 1;
 10594  14FC  0021               	movlb	1	; select bank1
 10595  14FD  1414               	bsf	20,0	;volatile
 10596  14FE  0008               	return
 10597  14FF                     __end_of_I2C2_Initialize:	
 10598                           
 10599                           	psect	text53
 10600  12DE                     __ptext53:	
 10601 ;; *************** function _FVR_Initialize *****************
 10602 ;; Defined at:
 10603 ;;		line 57 in file "mcc_generated_files/fvr.c"
 10604 ;; Parameters:    Size  Location     Type
 10605 ;;		None
 10606 ;; Auto vars:     Size  Location     Type
 10607 ;;		None
 10608 ;; Return value:  Size  Location     Type
 10609 ;;                  1    wreg      void 
 10610 ;; Registers used:
 10611 ;;		wreg
 10612 ;; Tracked objects:
 10613 ;;		On entry : 0/0
 10614 ;;		On exit  : 0/0
 10615 ;;		Unchanged: 0/0
 10616 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10617 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10618 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10619 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10620 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10621 ;;Total ram usage:        0 bytes
 10622 ;; Hardware stack levels used:    1
 10623 ;; Hardware stack levels required when called:    4
 10624 ;; This function calls:
 10625 ;;		Nothing
 10626 ;; This function is called by:
 10627 ;;		_SYSTEM_Initialize
 10628 ;; This function uses a non-reentrant model
 10629 ;;
 10630                           
 10631                           
 10632                           ;psect for function _FVR_Initialize
 10633  12DE                     _FVR_Initialize:	
 10634                           
 10635                           ;fvr.c: 60: FVRCON = 0x01;
 10636                           
 10637                           ;incstack = 0
 10638                           ; Regs used in _FVR_Initialize: [wreg]
 10639  12DE  3001               	movlw	1
 10640  12DF  0022               	movlb	2	; select bank2
 10641  12E0  0097               	movwf	23	;volatile
 10642  12E1  0008               	return
 10643  12E2                     __end_of_FVR_Initialize:	
 10644                           
 10645                           	psect	text54
 10646  1338                     __ptext54:	
 10647 ;; *************** function _ADC_Initialize *****************
 10648 ;; Defined at:
 10649 ;;		line 62 in file "mcc_generated_files/adc.c"
 10650 ;; Parameters:    Size  Location     Type
 10651 ;;		None
 10652 ;; Auto vars:     Size  Location     Type
 10653 ;;		None
 10654 ;; Return value:  Size  Location     Type
 10655 ;;                  1    wreg      void 
 10656 ;; Registers used:
 10657 ;;		wreg, status,2
 10658 ;; Tracked objects:
 10659 ;;		On entry : 0/0
 10660 ;;		On exit  : 0/0
 10661 ;;		Unchanged: 0/0
 10662 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10663 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10664 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10665 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10666 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10667 ;;Total ram usage:        0 bytes
 10668 ;; Hardware stack levels used:    1
 10669 ;; Hardware stack levels required when called:    4
 10670 ;; This function calls:
 10671 ;;		Nothing
 10672 ;; This function is called by:
 10673 ;;		_SYSTEM_Initialize
 10674 ;; This function uses a non-reentrant model
 10675 ;;
 10676                           
 10677                           
 10678                           ;psect for function _ADC_Initialize
 10679  1338                     _ADC_Initialize:	
 10680                           
 10681                           ;adc.c: 67: ADCON0 = 0x01;
 10682                           
 10683                           ;incstack = 0
 10684                           ; Regs used in _ADC_Initialize: [wreg+status,2]
 10685  1338  3001               	movlw	1
 10686  1339  0021               	movlb	1	; select bank1
 10687  133A  009D               	movwf	29	;volatile
 10688                           
 10689                           ;adc.c: 70: ADCON1 = 0x90;
 10690  133B  3090               	movlw	144
 10691  133C  009E               	movwf	30	;volatile
 10692                           
 10693                           ;adc.c: 73: ADRESL = 0x00;
 10694  133D  019B               	clrf	27	;volatile
 10695                           
 10696                           ;adc.c: 76: ADRESH = 0x00;
 10697  133E  019C               	clrf	28	;volatile
 10698  133F  0008               	return
 10699  1340                     __end_of_ADC_Initialize:	
 10700                           
 10701                           	psect	text55
 10702  12D8                     __ptext55:	
 10703 ;; *************** function _DOOR_run *****************
 10704 ;; Defined at:
 10705 ;;		line 23 in file "doorlogic.c"
 10706 ;; Parameters:    Size  Location     Type
 10707 ;;		None
 10708 ;; Auto vars:     Size  Location     Type
 10709 ;;		None
 10710 ;; Return value:  Size  Location     Type
 10711 ;;                  1    wreg      enum E3332
 10712 ;; Registers used:
 10713 ;;		wreg
 10714 ;; Tracked objects:
 10715 ;;		On entry : 0/0
 10716 ;;		On exit  : 0/0
 10717 ;;		Unchanged: 0/0
 10718 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10719 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10720 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10721 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10722 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10723 ;;Total ram usage:        0 bytes
 10724 ;; Hardware stack levels used:    1
 10725 ;; Hardware stack levels required when called:    4
 10726 ;; This function calls:
 10727 ;;		Nothing
 10728 ;; This function is called by:
 10729 ;;		_main
 10730 ;; This function uses a non-reentrant model
 10731 ;;
 10732                           
 10733                           
 10734                           ;psect for function _DOOR_run
 10735  12D8                     _DOOR_run:	
 10736                           
 10737                           ;doorlogic.c: 24: static DOOR previousDoorState = DOOR_CLOSED;
 10738                           ;doorlogic.c: 25: static unsigned long doorStateDuration = 0;
 10739                           ;doorlogic.c: 50: return(doorState);
 10740                           
 10741                           ;incstack = 0
 10742                           ; Regs used in _DOOR_run: [wreg]
 10743  12D8  0021               	movlb	1	; select bank1
 10744  12D9  085C               	movf	_doorState^(0+128),w
 10745  12DA  0008               	return
 10746  12DB                     __end_of_DOOR_run:	
 10747                           
 10748                           	psect	text56
 10749  0002                     __ptext56:	
 10750 ;; *************** function _DOOR_init *****************
 10751 ;; Defined at:
 10752 ;;		line 10 in file "doorlogic.c"
 10753 ;; Parameters:    Size  Location     Type
 10754 ;;		None
 10755 ;; Auto vars:     Size  Location     Type
 10756 ;;		None
 10757 ;; Return value:  Size  Location     Type
 10758 ;;                  1    wreg      void 
 10759 ;; Registers used:
 10760 ;;		None
 10761 ;; Tracked objects:
 10762 ;;		On entry : 0/0
 10763 ;;		On exit  : 0/0
 10764 ;;		Unchanged: 0/0
 10765 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10766 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10767 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10768 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10769 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10770 ;;Total ram usage:        0 bytes
 10771 ;; Hardware stack levels used:    1
 10772 ;; Hardware stack levels required when called:    4
 10773 ;; This function calls:
 10774 ;;		Nothing
 10775 ;; This function is called by:
 10776 ;;		_main
 10777 ;; This function uses a non-reentrant model
 10778 ;;
 10779                           
 10780                           
 10781                           ;psect for function _DOOR_init
 10782  0002                     _DOOR_init:	
 10783                           
 10784                           ;incstack = 0
 10785                           ; Regs used in _DOOR_init: []
 10786  0002  0008               	return
 10787  0003                     __end_of_DOOR_init:	
 10788                           
 10789                           	psect	text57
 10790  006F                     __ptext57:	
 10791 ;; *************** function _BMP_readTemperature *****************
 10792 ;; Defined at:
 10793 ;;		line 72 in file "bmp280.c"
 10794 ;; Parameters:    Size  Location     Type
 10795 ;;		None
 10796 ;; Auto vars:     Size  Location     Type
 10797 ;;  tmp             1   25[BANK1 ] unsigned char 
 10798 ;;  status          1   24[BANK1 ] unsigned char 
 10799 ;; Return value:  Size  Location     Type
 10800 ;;                  3    6[BANK1 ] float 
 10801 ;; Registers used:
 10802 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10803 ;; Tracked objects:
 10804 ;;		On entry : 0/0
 10805 ;;		On exit  : 0/0
 10806 ;;		Unchanged: 0/0
 10807 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10808 ;;      Params:         0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0
 10809 ;;      Locals:         0       0       5       0       0       0       0       0       0       0       0       0       
      +0       0
 10810 ;;      Temps:          0       0      12       0       0       0       0       0       0       0       0       0       
      +0       0
 10811 ;;      Totals:         0       0      20       0       0       0       0       0       0       0       0       0       
      +0       0
 10812 ;;Total ram usage:       20 bytes
 10813 ;; Hardware stack levels used:    1
 10814 ;; Hardware stack levels required when called:    9
 10815 ;; This function calls:
 10816 ;;		_BMP_init
 10817 ;;		_Diag_getTempSensorHealth
 10818 ;;		_Diag_setTempSensorHealth
 10819 ;;		_HMC5883L_ReadBits
 10820 ;;		_I2C_BufferRead
 10821 ;;		_I2C_ByteWrite
 10822 ;;		___aldiv
 10823 ;;		___altoft
 10824 ;;		___awtoft
 10825 ;;		___ftadd
 10826 ;;		___ftdiv
 10827 ;;		___ftmul
 10828 ;;		___ftneg
 10829 ;;		___fttol
 10830 ;;		___lwtoft
 10831 ;; This function is called by:
 10832 ;;		_main
 10833 ;; This function uses a non-reentrant model
 10834 ;;
 10835                           
 10836                           
 10837                           ;psect for function _BMP_readTemperature
 10838  006F                     _BMP_readTemperature:	
 10839                           
 10840                           ;bmp280.c: 74: char tmp=0;
 10841                           
 10842                           ;incstack = 0
 10843                           ; Regs used in _BMP_readTemperature: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 10844  006F  0021               	movlb	1	; select bank1
 10845  0070  01B9               	clrf	BMP_readTemperature@tmp^(0+128)
 10846                           
 10847                           ;bmp280.c: 75: bool status;
 10848                           ;bmp280.c: 77: tmp=0x41;
 10849  0071  3041               	movlw	65
 10850  0072  00A9               	movwf	??_BMP_readTemperature^(0+128)
 10851  0073  0829               	movf	??_BMP_readTemperature^(0+128),w
 10852  0074  00B9               	movwf	BMP_readTemperature@tmp^(0+128)
 10853                           
 10854                           ;bmp280.c: 78: if(Diag_getTempSensorHealth()==0)
 10855  0075  3192  22D5  3180   	fcall	_Diag_getTempSensorHealth
 10856  0078  3A00               	xorlw	0
 10857  0079  1D03               	skipz
 10858  007A  287E               	goto	l1026
 10859                           
 10860                           ;bmp280.c: 79: {
 10861                           ;bmp280.c: 80: BMP_init();
 10862  007B  318B  2307  3180   	fcall	_BMP_init
 10863  007E                     l1026:	
 10864                           
 10865                           ;bmp280.c: 81: }
 10866                           ;bmp280.c: 82: I2C_ByteWrite(0x76, &tmp, 0xF4);
 10867  007E  30B9               	movlw	(low (BMP_readTemperature@tmp| 0))& (0+255)
 10868  007F  0021               	movlb	1	; select bank1
 10869  0080  00A9               	movwf	??_BMP_readTemperature^(0+128)
 10870  0081  0829               	movf	??_BMP_readTemperature^(0+128),w
 10871  0082  0020               	movlb	0	; select bank0
 10872  0083  00AF               	movwf	I2C_ByteWrite@pBuffer
 10873  0084  30F4               	movlw	244
 10874  0085  0021               	movlb	1	; select bank1
 10875  0086  00AA               	movwf	(??_BMP_readTemperature+1)^(0+128)
 10876  0087  082A               	movf	(??_BMP_readTemperature+1)^(0+128),w
 10877  0088  0020               	movlb	0	; select bank0
 10878  0089  00B0               	movwf	I2C_ByteWrite@WriteAddr
 10879  008A  3076               	movlw	118
 10880  008B  3197  27C4  3180   	fcall	_I2C_ByteWrite
 10881  008E                     l1027:	
 10882                           ;bmp280.c: 83: do
 10883                           
 10884                           
 10885                           ;bmp280.c: 84: {
 10886                           ;bmp280.c: 85: status=HMC5883L_ReadBits(0x76, 0xF3 , 3, 1, &tmp);
 10887  008E  30F3               	movlw	243
 10888  008F  0021               	movlb	1	; select bank1
 10889  0090  00A9               	movwf	??_BMP_readTemperature^(0+128)
 10890  0091  0829               	movf	??_BMP_readTemperature^(0+128),w
 10891  0092  0020               	movlb	0	; select bank0
 10892  0093  00C3               	movwf	HMC5883L_ReadBits@regAddr
 10893  0094  3003               	movlw	3
 10894  0095  0021               	movlb	1	; select bank1
 10895  0096  00AA               	movwf	(??_BMP_readTemperature+1)^(0+128)
 10896  0097  082A               	movf	(??_BMP_readTemperature+1)^(0+128),w
 10897  0098  0020               	movlb	0	; select bank0
 10898  0099  00C4               	movwf	HMC5883L_ReadBits@bitStart
 10899  009A  01C5               	clrf	HMC5883L_ReadBits@length
 10900  009B  0AC5               	incf	HMC5883L_ReadBits@length,f
 10901  009C  30B9               	movlw	(low (BMP_readTemperature@tmp| 0))& (0+255)
 10902  009D  0021               	movlb	1	; select bank1
 10903  009E  00AB               	movwf	(??_BMP_readTemperature+2)^(0+128)
 10904  009F  082B               	movf	(??_BMP_readTemperature+2)^(0+128),w
 10905  00A0  0020               	movlb	0	; select bank0
 10906  00A1  00C6               	movwf	HMC5883L_ReadBits@data
 10907  00A2  3076               	movlw	118
 10908  00A3  3188  20AB  3180   	fcall	_HMC5883L_ReadBits
 10909  00A6  0021               	movlb	1	; select bank1
 10910  00A7  00AC               	movwf	(??_BMP_readTemperature+3)^(0+128)
 10911  00A8  082C               	movf	(??_BMP_readTemperature+3)^(0+128),w
 10912  00A9  00B8               	movwf	BMP_readTemperature@status^(0+128)
 10913                           
 10914                           ;bmp280.c: 86: } while(tmp==0 && status==1);
 10915  00AA  0839               	movf	BMP_readTemperature@tmp^(0+128),w
 10916  00AB  1903               	btfsc	3,2
 10917  00AC  0338               	decf	BMP_readTemperature@status^(0+128),w
 10918  00AD  1903               	btfsc	3,2
 10919  00AE  288E               	goto	l1027
 10920                           
 10921                           ;bmp280.c: 87: if(status==0)
 10922  00AF  0838               	movf	BMP_readTemperature@status^(0+128),w
 10923  00B0  1D03               	btfss	3,2
 10924  00B1  28BD               	goto	l6431
 10925                           
 10926                           ;bmp280.c: 88: {
 10927                           ;bmp280.c: 89: Diag_setTempSensorHealth(0);
 10928  00B2  3000               	movlw	0
 10929  00B3  3193  2330         	fcall	_Diag_setTempSensorHealth
 10930                           
 10931                           ;bmp280.c: 90: return -55;
 10932  00B5  3000               	movlw	0
 10933  00B6  0021               	movlb	1	; select bank1
 10934  00B7  00A6               	movwf	?_BMP_readTemperature^(0+128)
 10935  00B8  305C               	movlw	92
 10936  00B9  00A7               	movwf	(?_BMP_readTemperature+1)^(0+128)
 10937  00BA  30C2               	movlw	194
 10938  00BB  00A8               	movwf	(?_BMP_readTemperature+2)^(0+128)
 10939  00BC  0008               	return
 10940  00BD                     l6431:	
 10941                           
 10942                           ;bmp280.c: 91: }
 10943                           ;bmp280.c: 93: if(I2C_BufferRead(0x76, data, 0xF7, 8)==0)
 10944  00BD  30C0               	movlw	low _data
 10945  00BE  0020               	movlb	0	; select bank0
 10946  00BF  00B1               	movwf	I2C_BufferRead@pBuffer
 10947  00C0  3001               	movlw	high _data
 10948  00C1  00B2               	movwf	I2C_BufferRead@pBuffer+1
 10949  00C2  30F7               	movlw	247
 10950  00C3  0021               	movlb	1	; select bank1
 10951  00C4  00A9               	movwf	??_BMP_readTemperature^(0+128)
 10952  00C5  0829               	movf	??_BMP_readTemperature^(0+128),w
 10953  00C6  0020               	movlb	0	; select bank0
 10954  00C7  00B3               	movwf	I2C_BufferRead@ReadAddr
 10955  00C8  3008               	movlw	8
 10956  00C9  00B4               	movwf	I2C_BufferRead@NumByteToRead
 10957  00CA  3000               	movlw	0
 10958  00CB  00B5               	movwf	I2C_BufferRead@NumByteToRead+1
 10959  00CC  3076               	movlw	118
 10960  00CD  3189  21E6  3180   	fcall	_I2C_BufferRead
 10961  00D0  3A00               	xorlw	0
 10962  00D1  1D03               	skipz
 10963  00D2  28DE               	goto	l6439
 10964                           
 10965                           ;bmp280.c: 94: {
 10966                           ;bmp280.c: 95: Diag_setTempSensorHealth(0);
 10967  00D3  3000               	movlw	0
 10968  00D4  3193  2330         	fcall	_Diag_setTempSensorHealth
 10969                           
 10970                           ;bmp280.c: 96: return -55;
 10971  00D6  3000               	movlw	0
 10972  00D7  0021               	movlb	1	; select bank1
 10973  00D8  00A6               	movwf	?_BMP_readTemperature^(0+128)
 10974  00D9  305C               	movlw	92
 10975  00DA  00A7               	movwf	(?_BMP_readTemperature+1)^(0+128)
 10976  00DB  30C2               	movlw	194
 10977  00DC  00A8               	movwf	(?_BMP_readTemperature+2)^(0+128)
 10978  00DD  0008               	return
 10979  00DE                     l6439:	
 10980                           
 10981                           ;bmp280.c: 97: }
 10982                           ;bmp280.c: 101: adc_t = (((long)(data[3] & 0xFF) * 65536) + ((long)(data[4] & 0xFF) * 25
      +                          6) + (long)(data[5] & 0xF0)) / 16;
 10983  00DE  3000               	movlw	0
 10984  00DF  0020               	movlb	0	; select bank0
 10985  00E0  00A4               	movwf	___aldiv@divisor+3
 10986  00E1  3000               	movlw	0
 10987  00E2  00A3               	movwf	___aldiv@divisor+2
 10988  00E3  3000               	movlw	0
 10989  00E4  00A2               	movwf	___aldiv@divisor+1
 10990  00E5  3010               	movlw	16
 10991  00E6  00A1               	movwf	___aldiv@divisor
 10992  00E7  0023               	movlb	3	; select bank3
 10993  00E8  0845               	movf	(_data^(0+384)+5),w
 10994  00E9  39F0               	andlw	240
 10995  00EA  0021               	movlb	1	; select bank1
 10996  00EB  00A9               	movwf	??_BMP_readTemperature^(0+128)
 10997  00EC  01AA               	clrf	(??_BMP_readTemperature^(0+128)+1)
 10998  00ED  01AB               	clrf	(??_BMP_readTemperature^(0+128)+2)
 10999  00EE  01AC               	clrf	(??_BMP_readTemperature^(0+128)+3)
 11000  00EF  0023               	movlb	3	; select bank3
 11001  00F0  0844               	movf	(_data^(0+384)+4),w
 11002  00F1  0021               	movlb	1	; select bank1
 11003  00F2  00AD               	movwf	(??_BMP_readTemperature+4)^(0+128)
 11004  00F3  01AE               	clrf	((??_BMP_readTemperature+4)^(0+128)+1)
 11005  00F4  01AF               	clrf	((??_BMP_readTemperature+4)^(0+128)+2)
 11006  00F5  01B0               	clrf	((??_BMP_readTemperature+4)^(0+128)+3)
 11007  00F6  3008               	movlw	8
 11008  00F7                     u6325:	
 11009  00F7  35AD               	lslf	(??_BMP_readTemperature+4)^(0+128),f
 11010  00F8  0DAE               	rlf	((??_BMP_readTemperature+4)^(0+128)+1),f
 11011  00F9  0DAF               	rlf	((??_BMP_readTemperature+4)^(0+128)+2),f
 11012  00FA  0DB0               	rlf	((??_BMP_readTemperature+4)^(0+128)+3),f
 11013  00FB  0B89               	decfsz	9,f
 11014  00FC  28F7               	goto	u6325
 11015  00FD  0023               	movlb	3	; select bank3
 11016  00FE  0843               	movf	(_data^(0+384)+3),w
 11017  00FF  0021               	movlb	1	; select bank1
 11018  0100  00B1               	movwf	(??_BMP_readTemperature+8)^(0+128)
 11019  0101  01B2               	clrf	((??_BMP_readTemperature+8)^(0+128)+1)
 11020  0102  01B3               	clrf	((??_BMP_readTemperature+8)^(0+128)+2)
 11021  0103  01B4               	clrf	((??_BMP_readTemperature+8)^(0+128)+3)
 11022  0104  3010               	movlw	16
 11023  0105                     u6335:	
 11024  0105  35B1               	lslf	(??_BMP_readTemperature+8)^(0+128),f
 11025  0106  0DB2               	rlf	((??_BMP_readTemperature+8)^(0+128)+1),f
 11026  0107  0DB3               	rlf	((??_BMP_readTemperature+8)^(0+128)+2),f
 11027  0108  0DB4               	rlf	((??_BMP_readTemperature+8)^(0+128)+3),f
 11028  0109  0B89               	decfsz	9,f
 11029  010A  2905               	goto	u6335
 11030  010B  0831               	movf	(??_BMP_readTemperature+8)^(0+128),w
 11031  010C  07AD               	addwf	(??_BMP_readTemperature+4)^(0+128),f
 11032  010D  0832               	movf	(??_BMP_readTemperature+9)^(0+128),w
 11033  010E  3DAE               	addwfc	((??_BMP_readTemperature+4)^(0+128)+1),f
 11034  010F  0833               	movf	(??_BMP_readTemperature+10)^(0+128),w
 11035  0110  3DAF               	addwfc	((??_BMP_readTemperature+4)^(0+128)+2),f
 11036  0111  0834               	movf	(??_BMP_readTemperature+11)^(0+128),w
 11037  0112  3DB0               	addwfc	((??_BMP_readTemperature+4)^(0+128)+3),f
 11038  0113  082D               	movf	(??_BMP_readTemperature+4)^(0+128),w
 11039  0114  07A9               	addwf	??_BMP_readTemperature^(0+128),f
 11040  0115  082E               	movf	(??_BMP_readTemperature+5)^(0+128),w
 11041  0116  3DAA               	addwfc	(??_BMP_readTemperature^(0+128)+1),f
 11042  0117  082F               	movf	(??_BMP_readTemperature+6)^(0+128),w
 11043  0118  3DAB               	addwfc	(??_BMP_readTemperature^(0+128)+2),f
 11044  0119  0830               	movf	(??_BMP_readTemperature+7)^(0+128),w
 11045  011A  3DAC               	addwfc	(??_BMP_readTemperature^(0+128)+3),f
 11046  011B  082C               	movf	(??_BMP_readTemperature+3)^(0+128),w
 11047  011C  0020               	movlb	0	; select bank0
 11048  011D  00A8               	movwf	___aldiv@dividend+3
 11049  011E  0021               	movlb	1	; select bank1
 11050  011F  082B               	movf	(??_BMP_readTemperature+2)^(0+128),w
 11051  0120  0020               	movlb	0	; select bank0
 11052  0121  00A7               	movwf	___aldiv@dividend+2
 11053  0122  0021               	movlb	1	; select bank1
 11054  0123  082A               	movf	(??_BMP_readTemperature+1)^(0+128),w
 11055  0124  0020               	movlb	0	; select bank0
 11056  0125  00A6               	movwf	___aldiv@dividend+1
 11057  0126  0021               	movlb	1	; select bank1
 11058  0127  0829               	movf	??_BMP_readTemperature^(0+128),w
 11059  0128  0020               	movlb	0	; select bank0
 11060  0129  00A5               	movwf	___aldiv@dividend
 11061  012A  3187  277E  3180   	fcall	___aldiv
 11062  012D  0020               	movlb	0	; select bank0
 11063  012E  0824               	movf	?___aldiv+3,w
 11064  012F  0022               	movlb	2	; select bank2
 11065  0130  00A7               	movwf	(_adc_t+3)^(0+256)
 11066  0131  0020               	movlb	0	; select bank0
 11067  0132  0823               	movf	?___aldiv+2,w
 11068  0133  0022               	movlb	2	; select bank2
 11069  0134  00A6               	movwf	(_adc_t+2)^(0+256)
 11070  0135  0020               	movlb	0	; select bank0
 11071  0136  0822               	movf	?___aldiv+1,w
 11072  0137  0022               	movlb	2	; select bank2
 11073  0138  00A5               	movwf	(_adc_t+1)^(0+256)
 11074  0139  0020               	movlb	0	; select bank0
 11075  013A  0821               	movf	?___aldiv,w
 11076  013B  0022               	movlb	2	; select bank2
 11077  013C  00A4               	movwf	_adc_t^(0+256)
 11078                           
 11079                           ;bmp280.c: 104: var1 = (((double)adc_t) / 16384.0 - ((double)dig_T1) / 1024.0) * ((doubl
      +                          e)dig_T2);
 11080  013D  0857               	movf	(_dig_T2+1)^(0+256),w
 11081  013E  0020               	movlb	0	; select bank0
 11082  013F  00AA               	movwf	___awtoft@c+1
 11083  0140  0022               	movlb	2	; select bank2
 11084  0141  0856               	movf	_dig_T2^(0+256),w
 11085  0142  0020               	movlb	0	; select bank0
 11086  0143  00A9               	movwf	___awtoft@c
 11087  0144  3196  2640  3180   	fcall	___awtoft
 11088  0147  0020               	movlb	0	; select bank0
 11089  0148  0829               	movf	?___awtoft,w
 11090  0149  00D6               	movwf	___ftmul@f1
 11091  014A  082A               	movf	?___awtoft+1,w
 11092  014B  00D7               	movwf	___ftmul@f1+1
 11093  014C  082B               	movf	?___awtoft+2,w
 11094  014D  00D8               	movwf	___ftmul@f1+2
 11095  014E  0021               	movlb	1	; select bank1
 11096  014F  0857               	movf	(_dig_T1+1)^(0+128),w
 11097  0150  0020               	movlb	0	; select bank0
 11098  0151  00AA               	movwf	___lwtoft@c+1
 11099  0152  0021               	movlb	1	; select bank1
 11100  0153  0856               	movf	_dig_T1^(0+128),w
 11101  0154  0020               	movlb	0	; select bank0
 11102  0155  00A9               	movwf	___lwtoft@c
 11103  0156  3194  242C  3180   	fcall	___lwtoft
 11104  0159  0020               	movlb	0	; select bank0
 11105  015A  0829               	movf	?___lwtoft,w
 11106  015B  00B4               	movwf	___ftdiv@f1
 11107  015C  082A               	movf	?___lwtoft+1,w
 11108  015D  00B5               	movwf	___ftdiv@f1+1
 11109  015E  082B               	movf	?___lwtoft+2,w
 11110  015F  00B6               	movwf	___ftdiv@f1+2
 11111  0160  3000               	movlw	0
 11112  0161  00B1               	movwf	___ftdiv@f2
 11113  0162  3080               	movlw	128
 11114  0163  00B2               	movwf	___ftdiv@f2+1
 11115  0164  3044               	movlw	68
 11116  0165  00B3               	movwf	___ftdiv@f2+2
 11117  0166  318D  25AD  3180   	fcall	___ftdiv
 11118  0169  0020               	movlb	0	; select bank0
 11119  016A  0831               	movf	?___ftdiv,w
 11120  016B  00C1               	movwf	___ftneg@f1
 11121  016C  0832               	movf	?___ftdiv+1,w
 11122  016D  00C2               	movwf	___ftneg@f1+1
 11123  016E  0833               	movf	?___ftdiv+2,w
 11124  016F  00C3               	movwf	___ftneg@f1+2
 11125  0170  3193  2351  3180   	fcall	___ftneg
 11126  0173  0020               	movlb	0	; select bank0
 11127  0174  0841               	movf	?___ftneg,w
 11128  0175  00C9               	movwf	___ftadd@f1
 11129  0176  0842               	movf	?___ftneg+1,w
 11130  0177  00CA               	movwf	___ftadd@f1+1
 11131  0178  0843               	movf	?___ftneg+2,w
 11132  0179  00CB               	movwf	___ftadd@f1+2
 11133  017A  3000               	movlw	0
 11134  017B  00B1               	movwf	___ftdiv@f2
 11135  017C  3080               	movlw	128
 11136  017D  00B2               	movwf	___ftdiv@f2+1
 11137  017E  3046               	movlw	70
 11138  017F  00B3               	movwf	___ftdiv@f2+2
 11139  0180  0022               	movlb	2	; select bank2
 11140  0181  0827               	movf	(_adc_t+3)^(0+256),w
 11141  0182  0020               	movlb	0	; select bank0
 11142  0183  00AC               	movwf	___altoft@c+3
 11143  0184  0022               	movlb	2	; select bank2
 11144  0185  0826               	movf	(_adc_t+2)^(0+256),w
 11145  0186  0020               	movlb	0	; select bank0
 11146  0187  00AB               	movwf	___altoft@c+2
 11147  0188  0022               	movlb	2	; select bank2
 11148  0189  0825               	movf	(_adc_t+1)^(0+256),w
 11149  018A  0020               	movlb	0	; select bank0
 11150  018B  00AA               	movwf	___altoft@c+1
 11151  018C  0022               	movlb	2	; select bank2
 11152  018D  0824               	movf	_adc_t^(0+256),w
 11153  018E  0020               	movlb	0	; select bank0
 11154  018F  00A9               	movwf	___altoft@c
 11155  0190  3188  2029  3180   	fcall	___altoft
 11156  0193  0020               	movlb	0	; select bank0
 11157  0194  0829               	movf	?___altoft,w
 11158  0195  00B4               	movwf	___ftdiv@f1
 11159  0196  082A               	movf	?___altoft+1,w
 11160  0197  00B5               	movwf	___ftdiv@f1+1
 11161  0198  082B               	movf	?___altoft+2,w
 11162  0199  00B6               	movwf	___ftdiv@f1+2
 11163  019A  318D  25AD  3180   	fcall	___ftdiv
 11164  019D  0020               	movlb	0	; select bank0
 11165  019E  0831               	movf	?___ftdiv,w
 11166  019F  00CC               	movwf	___ftadd@f2
 11167  01A0  0832               	movf	?___ftdiv+1,w
 11168  01A1  00CD               	movwf	___ftadd@f2+1
 11169  01A2  0833               	movf	?___ftdiv+2,w
 11170  01A3  00CE               	movwf	___ftadd@f2+2
 11171  01A4  318F  270A  3180   	fcall	___ftadd
 11172  01A7  0020               	movlb	0	; select bank0
 11173  01A8  0849               	movf	?___ftadd,w
 11174  01A9  00D9               	movwf	___ftmul@f2
 11175  01AA  084A               	movf	?___ftadd+1,w
 11176  01AB  00DA               	movwf	___ftmul@f2+1
 11177  01AC  084B               	movf	?___ftadd+2,w
 11178  01AD  00DB               	movwf	___ftmul@f2+2
 11179  01AE  318E  2656  3180   	fcall	___ftmul
 11180  01B1  0020               	movlb	0	; select bank0
 11181  01B2  0856               	movf	?___ftmul,w
 11182  01B3  0022               	movlb	2	; select bank2
 11183  01B4  00B4               	movwf	_var1^(0+256)
 11184  01B5  0020               	movlb	0	; select bank0
 11185  01B6  0857               	movf	?___ftmul+1,w
 11186  01B7  0022               	movlb	2	; select bank2
 11187  01B8  00B5               	movwf	(_var1+1)^(0+256)
 11188  01B9  0020               	movlb	0	; select bank0
 11189  01BA  0858               	movf	?___ftmul+2,w
 11190  01BB  0022               	movlb	2	; select bank2
 11191  01BC  00B6               	movwf	(_var1+2)^(0+256)
 11192                           
 11193                           ;bmp280.c: 105: var2 = ((((double)adc_t) / 131072.0 - ((double)dig_T1) / 8192.0) *
 11194                           ;bmp280.c: 106: (((double)adc_t) / 131072.0 - ((double)dig_T1) / 8192.0)) * ((double)dig
      +                          _T3);
 11195  01BD  0021               	movlb	1	; select bank1
 11196  01BE  0857               	movf	(_dig_T1+1)^(0+128),w
 11197  01BF  0020               	movlb	0	; select bank0
 11198  01C0  00AA               	movwf	___lwtoft@c+1
 11199  01C1  0021               	movlb	1	; select bank1
 11200  01C2  0856               	movf	_dig_T1^(0+128),w
 11201  01C3  0020               	movlb	0	; select bank0
 11202  01C4  00A9               	movwf	___lwtoft@c
 11203  01C5  3194  242C  3180   	fcall	___lwtoft
 11204  01C8  0020               	movlb	0	; select bank0
 11205  01C9  0829               	movf	?___lwtoft,w
 11206  01CA  00B4               	movwf	___ftdiv@f1
 11207  01CB  082A               	movf	?___lwtoft+1,w
 11208  01CC  00B5               	movwf	___ftdiv@f1+1
 11209  01CD  082B               	movf	?___lwtoft+2,w
 11210  01CE  00B6               	movwf	___ftdiv@f1+2
 11211  01CF  3000               	movlw	0
 11212  01D0  00B1               	movwf	___ftdiv@f2
 11213  01D1  3000               	movlw	0
 11214  01D2  00B2               	movwf	___ftdiv@f2+1
 11215  01D3  3046               	movlw	70
 11216  01D4  00B3               	movwf	___ftdiv@f2+2
 11217  01D5  318D  25AD  3180   	fcall	___ftdiv
 11218  01D8  0020               	movlb	0	; select bank0
 11219  01D9  0831               	movf	?___ftdiv,w
 11220  01DA  00C1               	movwf	___ftneg@f1
 11221  01DB  0832               	movf	?___ftdiv+1,w
 11222  01DC  00C2               	movwf	___ftneg@f1+1
 11223  01DD  0833               	movf	?___ftdiv+2,w
 11224  01DE  00C3               	movwf	___ftneg@f1+2
 11225  01DF  3193  2351  3180   	fcall	___ftneg
 11226  01E2  0020               	movlb	0	; select bank0
 11227  01E3  0841               	movf	?___ftneg,w
 11228  01E4  00C9               	movwf	___ftadd@f1
 11229  01E5  0842               	movf	?___ftneg+1,w
 11230  01E6  00CA               	movwf	___ftadd@f1+1
 11231  01E7  0843               	movf	?___ftneg+2,w
 11232  01E8  00CB               	movwf	___ftadd@f1+2
 11233  01E9  3000               	movlw	0
 11234  01EA  00B1               	movwf	___ftdiv@f2
 11235  01EB  3000               	movlw	0
 11236  01EC  00B2               	movwf	___ftdiv@f2+1
 11237  01ED  3048               	movlw	72
 11238  01EE  00B3               	movwf	___ftdiv@f2+2
 11239  01EF  0022               	movlb	2	; select bank2
 11240  01F0  0827               	movf	(_adc_t+3)^(0+256),w
 11241  01F1  0020               	movlb	0	; select bank0
 11242  01F2  00AC               	movwf	___altoft@c+3
 11243  01F3  0022               	movlb	2	; select bank2
 11244  01F4  0826               	movf	(_adc_t+2)^(0+256),w
 11245  01F5  0020               	movlb	0	; select bank0
 11246  01F6  00AB               	movwf	___altoft@c+2
 11247  01F7  0022               	movlb	2	; select bank2
 11248  01F8  0825               	movf	(_adc_t+1)^(0+256),w
 11249  01F9  0020               	movlb	0	; select bank0
 11250  01FA  00AA               	movwf	___altoft@c+1
 11251  01FB  0022               	movlb	2	; select bank2
 11252  01FC  0824               	movf	_adc_t^(0+256),w
 11253  01FD  0020               	movlb	0	; select bank0
 11254  01FE  00A9               	movwf	___altoft@c
 11255  01FF  3188  2029  3180   	fcall	___altoft
 11256  0202  0020               	movlb	0	; select bank0
 11257  0203  0829               	movf	?___altoft,w
 11258  0204  00B4               	movwf	___ftdiv@f1
 11259  0205  082A               	movf	?___altoft+1,w
 11260  0206  00B5               	movwf	___ftdiv@f1+1
 11261  0207  082B               	movf	?___altoft+2,w
 11262  0208  00B6               	movwf	___ftdiv@f1+2
 11263  0209  318D  25AD  3180   	fcall	___ftdiv
 11264  020C  0020               	movlb	0	; select bank0
 11265  020D  0831               	movf	?___ftdiv,w
 11266  020E  00CC               	movwf	___ftadd@f2
 11267  020F  0832               	movf	?___ftdiv+1,w
 11268  0210  00CD               	movwf	___ftadd@f2+1
 11269  0211  0833               	movf	?___ftdiv+2,w
 11270  0212  00CE               	movwf	___ftadd@f2+2
 11271  0213  318F  270A  3180   	fcall	___ftadd
 11272  0216  0020               	movlb	0	; select bank0
 11273  0217  0849               	movf	?___ftadd,w
 11274  0218  00D6               	movwf	___ftmul@f1
 11275  0219  084A               	movf	?___ftadd+1,w
 11276  021A  00D7               	movwf	___ftmul@f1+1
 11277  021B  084B               	movf	?___ftadd+2,w
 11278  021C  00D8               	movwf	___ftmul@f1+2
 11279  021D  0021               	movlb	1	; select bank1
 11280  021E  0857               	movf	(_dig_T1+1)^(0+128),w
 11281  021F  0020               	movlb	0	; select bank0
 11282  0220  00AA               	movwf	___lwtoft@c+1
 11283  0221  0021               	movlb	1	; select bank1
 11284  0222  0856               	movf	_dig_T1^(0+128),w
 11285  0223  0020               	movlb	0	; select bank0
 11286  0224  00A9               	movwf	___lwtoft@c
 11287  0225  3194  242C  3180   	fcall	___lwtoft
 11288  0228  0020               	movlb	0	; select bank0
 11289  0229  0829               	movf	?___lwtoft,w
 11290  022A  00B4               	movwf	___ftdiv@f1
 11291  022B  082A               	movf	?___lwtoft+1,w
 11292  022C  00B5               	movwf	___ftdiv@f1+1
 11293  022D  082B               	movf	?___lwtoft+2,w
 11294  022E  00B6               	movwf	___ftdiv@f1+2
 11295  022F  3000               	movlw	0
 11296  0230  00B1               	movwf	___ftdiv@f2
 11297  0231  3000               	movlw	0
 11298  0232  00B2               	movwf	___ftdiv@f2+1
 11299  0233  3046               	movlw	70
 11300  0234  00B3               	movwf	___ftdiv@f2+2
 11301  0235  318D  25AD  3180   	fcall	___ftdiv
 11302  0238  0020               	movlb	0	; select bank0
 11303  0239  0831               	movf	?___ftdiv,w
 11304  023A  00C1               	movwf	___ftneg@f1
 11305  023B  0832               	movf	?___ftdiv+1,w
 11306  023C  00C2               	movwf	___ftneg@f1+1
 11307  023D  0833               	movf	?___ftdiv+2,w
 11308  023E  00C3               	movwf	___ftneg@f1+2
 11309  023F  3193  2351  3180   	fcall	___ftneg
 11310  0242  0020               	movlb	0	; select bank0
 11311  0243  0841               	movf	?___ftneg,w
 11312  0244  00C9               	movwf	___ftadd@f1
 11313  0245  0842               	movf	?___ftneg+1,w
 11314  0246  00CA               	movwf	___ftadd@f1+1
 11315  0247  0843               	movf	?___ftneg+2,w
 11316  0248  00CB               	movwf	___ftadd@f1+2
 11317  0249  3000               	movlw	0
 11318  024A  00B1               	movwf	___ftdiv@f2
 11319  024B  3000               	movlw	0
 11320  024C  00B2               	movwf	___ftdiv@f2+1
 11321  024D  3048               	movlw	72
 11322  024E  00B3               	movwf	___ftdiv@f2+2
 11323  024F  0022               	movlb	2	; select bank2
 11324  0250  0827               	movf	(_adc_t+3)^(0+256),w
 11325  0251  0020               	movlb	0	; select bank0
 11326  0252  00AC               	movwf	___altoft@c+3
 11327  0253  0022               	movlb	2	; select bank2
 11328  0254  0826               	movf	(_adc_t+2)^(0+256),w
 11329  0255  0020               	movlb	0	; select bank0
 11330  0256  00AB               	movwf	___altoft@c+2
 11331  0257  0022               	movlb	2	; select bank2
 11332  0258  0825               	movf	(_adc_t+1)^(0+256),w
 11333  0259  0020               	movlb	0	; select bank0
 11334  025A  00AA               	movwf	___altoft@c+1
 11335  025B  0022               	movlb	2	; select bank2
 11336  025C  0824               	movf	_adc_t^(0+256),w
 11337  025D  0020               	movlb	0	; select bank0
 11338  025E  00A9               	movwf	___altoft@c
 11339  025F  3188  2029  3180   	fcall	___altoft
 11340  0262  0020               	movlb	0	; select bank0
 11341  0263  0829               	movf	?___altoft,w
 11342  0264  00B4               	movwf	___ftdiv@f1
 11343  0265  082A               	movf	?___altoft+1,w
 11344  0266  00B5               	movwf	___ftdiv@f1+1
 11345  0267  082B               	movf	?___altoft+2,w
 11346  0268  00B6               	movwf	___ftdiv@f1+2
 11347  0269  318D  25AD  3180   	fcall	___ftdiv
 11348  026C  0020               	movlb	0	; select bank0
 11349  026D  0831               	movf	?___ftdiv,w
 11350  026E  00CC               	movwf	___ftadd@f2
 11351  026F  0832               	movf	?___ftdiv+1,w
 11352  0270  00CD               	movwf	___ftadd@f2+1
 11353  0271  0833               	movf	?___ftdiv+2,w
 11354  0272  00CE               	movwf	___ftadd@f2+2
 11355  0273  318F  270A  3180   	fcall	___ftadd
 11356  0276  0020               	movlb	0	; select bank0
 11357  0277  0849               	movf	?___ftadd,w
 11358  0278  00D9               	movwf	___ftmul@f2
 11359  0279  084A               	movf	?___ftadd+1,w
 11360  027A  00DA               	movwf	___ftmul@f2+1
 11361  027B  084B               	movf	?___ftadd+2,w
 11362  027C  00DB               	movwf	___ftmul@f2+2
 11363  027D  318E  2656  3180   	fcall	___ftmul
 11364  0280  0020               	movlb	0	; select bank0
 11365  0281  0856               	movf	?___ftmul,w
 11366  0282  0021               	movlb	1	; select bank1
 11367  0283  00B5               	movwf	_BMP_readTemperature$2642^(0+128)
 11368  0284  0020               	movlb	0	; select bank0
 11369  0285  0857               	movf	?___ftmul+1,w
 11370  0286  0021               	movlb	1	; select bank1
 11371  0287  00B6               	movwf	(_BMP_readTemperature$2642+1)^(0+128)
 11372  0288  0020               	movlb	0	; select bank0
 11373  0289  0858               	movf	?___ftmul+2,w
 11374  028A  0021               	movlb	1	; select bank1
 11375  028B  00B7               	movwf	(_BMP_readTemperature$2642+2)^(0+128)
 11376                           
 11377                           ;bmp280.c: 105: var2 = ((((double)adc_t) / 131072.0 - ((double)dig_T1) / 8192.0) *
 11378                           ;bmp280.c: 106: (((double)adc_t) / 131072.0 - ((double)dig_T1) / 8192.0)) * ((double)dig
      +                          _T3);
 11379  028C  0022               	movlb	2	; select bank2
 11380  028D  0855               	movf	(_dig_T3+1)^(0+256),w
 11381  028E  0020               	movlb	0	; select bank0
 11382  028F  00AA               	movwf	___awtoft@c+1
 11383  0290  0022               	movlb	2	; select bank2
 11384  0291  0854               	movf	_dig_T3^(0+256),w
 11385  0292  0020               	movlb	0	; select bank0
 11386  0293  00A9               	movwf	___awtoft@c
 11387  0294  3196  2640  3180   	fcall	___awtoft
 11388  0297  0020               	movlb	0	; select bank0
 11389  0298  0829               	movf	?___awtoft,w
 11390  0299  00D6               	movwf	___ftmul@f1
 11391  029A  082A               	movf	?___awtoft+1,w
 11392  029B  00D7               	movwf	___ftmul@f1+1
 11393  029C  082B               	movf	?___awtoft+2,w
 11394  029D  00D8               	movwf	___ftmul@f1+2
 11395  029E  0021               	movlb	1	; select bank1
 11396  029F  0835               	movf	_BMP_readTemperature$2642^(0+128),w
 11397  02A0  0020               	movlb	0	; select bank0
 11398  02A1  00D9               	movwf	___ftmul@f2
 11399  02A2  0021               	movlb	1	; select bank1
 11400  02A3  0836               	movf	(_BMP_readTemperature$2642+1)^(0+128),w
 11401  02A4  0020               	movlb	0	; select bank0
 11402  02A5  00DA               	movwf	___ftmul@f2+1
 11403  02A6  0021               	movlb	1	; select bank1
 11404  02A7  0837               	movf	(_BMP_readTemperature$2642+2)^(0+128),w
 11405  02A8  0020               	movlb	0	; select bank0
 11406  02A9  00DB               	movwf	___ftmul@f2+2
 11407  02AA  318E  2656  3180   	fcall	___ftmul
 11408  02AD  0020               	movlb	0	; select bank0
 11409  02AE  0856               	movf	?___ftmul,w
 11410  02AF  0022               	movlb	2	; select bank2
 11411  02B0  00B1               	movwf	_var2^(0+256)
 11412  02B1  0020               	movlb	0	; select bank0
 11413  02B2  0857               	movf	?___ftmul+1,w
 11414  02B3  0022               	movlb	2	; select bank2
 11415  02B4  00B2               	movwf	(_var2+1)^(0+256)
 11416  02B5  0020               	movlb	0	; select bank0
 11417  02B6  0858               	movf	?___ftmul+2,w
 11418  02B7  0022               	movlb	2	; select bank2
 11419  02B8  00B3               	movwf	(_var2+2)^(0+256)
 11420                           
 11421                           ;bmp280.c: 107: t_fine = (long)(var1 + var2);
 11422  02B9  0834               	movf	_var1^(0+256),w
 11423  02BA  0020               	movlb	0	; select bank0
 11424  02BB  00CC               	movwf	___ftadd@f2
 11425  02BC  0022               	movlb	2	; select bank2
 11426  02BD  0835               	movf	(_var1+1)^(0+256),w
 11427  02BE  0020               	movlb	0	; select bank0
 11428  02BF  00CD               	movwf	___ftadd@f2+1
 11429  02C0  0022               	movlb	2	; select bank2
 11430  02C1  0836               	movf	(_var1+2)^(0+256),w
 11431  02C2  0020               	movlb	0	; select bank0
 11432  02C3  00CE               	movwf	___ftadd@f2+2
 11433  02C4  0022               	movlb	2	; select bank2
 11434  02C5  0831               	movf	_var2^(0+256),w
 11435  02C6  0020               	movlb	0	; select bank0
 11436  02C7  00C9               	movwf	___ftadd@f1
 11437  02C8  0022               	movlb	2	; select bank2
 11438  02C9  0832               	movf	(_var2+1)^(0+256),w
 11439  02CA  0020               	movlb	0	; select bank0
 11440  02CB  00CA               	movwf	___ftadd@f1+1
 11441  02CC  0022               	movlb	2	; select bank2
 11442  02CD  0833               	movf	(_var2+2)^(0+256),w
 11443  02CE  0020               	movlb	0	; select bank0
 11444  02CF  00CB               	movwf	___ftadd@f1+2
 11445  02D0  318F  270A  3180   	fcall	___ftadd
 11446  02D3  0020               	movlb	0	; select bank0
 11447  02D4  0849               	movf	?___ftadd,w
 11448  02D5  00E6               	movwf	___fttol@f1
 11449  02D6  084A               	movf	?___ftadd+1,w
 11450  02D7  00E7               	movwf	___fttol@f1+1
 11451  02D8  084B               	movf	?___ftadd+2,w
 11452  02D9  00E8               	movwf	___fttol@f1+2
 11453  02DA  318C  246B  3180   	fcall	___fttol
 11454  02DD  0020               	movlb	0	; select bank0
 11455  02DE  0869               	movf	?___fttol+3,w
 11456  02DF  00AC               	movwf	___altoft@c+3
 11457  02E0  0868               	movf	?___fttol+2,w
 11458  02E1  00AB               	movwf	___altoft@c+2
 11459  02E2  0867               	movf	?___fttol+1,w
 11460  02E3  00AA               	movwf	___altoft@c+1
 11461  02E4  0866               	movf	?___fttol,w
 11462  02E5  00A9               	movwf	___altoft@c
 11463  02E6  3188  2029  3180   	fcall	___altoft
 11464  02E9  0020               	movlb	0	; select bank0
 11465  02EA  0829               	movf	?___altoft,w
 11466  02EB  0022               	movlb	2	; select bank2
 11467  02EC  00AE               	movwf	_t_fine^(0+256)
 11468  02ED  0020               	movlb	0	; select bank0
 11469  02EE  082A               	movf	?___altoft+1,w
 11470  02EF  0022               	movlb	2	; select bank2
 11471  02F0  00AF               	movwf	(_t_fine+1)^(0+256)
 11472  02F1  0020               	movlb	0	; select bank0
 11473  02F2  082B               	movf	?___altoft+2,w
 11474  02F3  0022               	movlb	2	; select bank2
 11475  02F4  00B0               	movwf	(_t_fine+2)^(0+256)
 11476                           
 11477                           ;bmp280.c: 108: cTemp = (var1 + var2) / 5120.0;
 11478  02F5  3000               	movlw	0
 11479  02F6  0020               	movlb	0	; select bank0
 11480  02F7  00B1               	movwf	___ftdiv@f2
 11481  02F8  30A0               	movlw	160
 11482  02F9  00B2               	movwf	___ftdiv@f2+1
 11483  02FA  3045               	movlw	69
 11484  02FB  00B3               	movwf	___ftdiv@f2+2
 11485  02FC  0022               	movlb	2	; select bank2
 11486  02FD  0831               	movf	_var2^(0+256),w
 11487  02FE  0020               	movlb	0	; select bank0
 11488  02FF  00C9               	movwf	___ftadd@f1
 11489  0300  0022               	movlb	2	; select bank2
 11490  0301  0832               	movf	(_var2+1)^(0+256),w
 11491  0302  0020               	movlb	0	; select bank0
 11492  0303  00CA               	movwf	___ftadd@f1+1
 11493  0304  0022               	movlb	2	; select bank2
 11494  0305  0833               	movf	(_var2+2)^(0+256),w
 11495  0306  0020               	movlb	0	; select bank0
 11496  0307  00CB               	movwf	___ftadd@f1+2
 11497  0308  0022               	movlb	2	; select bank2
 11498  0309  0834               	movf	_var1^(0+256),w
 11499  030A  0020               	movlb	0	; select bank0
 11500  030B  00CC               	movwf	___ftadd@f2
 11501  030C  0022               	movlb	2	; select bank2
 11502  030D  0835               	movf	(_var1+1)^(0+256),w
 11503  030E  0020               	movlb	0	; select bank0
 11504  030F  00CD               	movwf	___ftadd@f2+1
 11505  0310  0022               	movlb	2	; select bank2
 11506  0311  0836               	movf	(_var1+2)^(0+256),w
 11507  0312  0020               	movlb	0	; select bank0
 11508  0313  00CE               	movwf	___ftadd@f2+2
 11509  0314  318F  270A  3180   	fcall	___ftadd
 11510  0317  0020               	movlb	0	; select bank0
 11511  0318  0849               	movf	?___ftadd,w
 11512  0319  00B4               	movwf	___ftdiv@f1
 11513  031A  084A               	movf	?___ftadd+1,w
 11514  031B  00B5               	movwf	___ftdiv@f1+1
 11515  031C  084B               	movf	?___ftadd+2,w
 11516  031D  00B6               	movwf	___ftdiv@f1+2
 11517  031E  318D  25AD  3180   	fcall	___ftdiv
 11518  0321  0020               	movlb	0	; select bank0
 11519  0322  0831               	movf	?___ftdiv,w
 11520  0323  0022               	movlb	2	; select bank2
 11521  0324  00AB               	movwf	_cTemp^(0+256)
 11522  0325  0020               	movlb	0	; select bank0
 11523  0326  0832               	movf	?___ftdiv+1,w
 11524  0327  0022               	movlb	2	; select bank2
 11525  0328  00AC               	movwf	(_cTemp+1)^(0+256)
 11526  0329  0020               	movlb	0	; select bank0
 11527  032A  0833               	movf	?___ftdiv+2,w
 11528  032B  0022               	movlb	2	; select bank2
 11529  032C  00AD               	movwf	(_cTemp+2)^(0+256)
 11530                           
 11531                           ;bmp280.c: 123: Diag_setTempSensorHealth(1);
 11532  032D  3001               	movlw	1
 11533  032E  3193  2330         	fcall	_Diag_setTempSensorHealth
 11534                           
 11535                           ;bmp280.c: 124: return(cTemp);
 11536  0330  0022               	movlb	2	; select bank2
 11537  0331  082B               	movf	_cTemp^(0+256),w
 11538  0332  0021               	movlb	1	; select bank1
 11539  0333  00A6               	movwf	?_BMP_readTemperature^(0+128)
 11540  0334  0022               	movlb	2	; select bank2
 11541  0335  082C               	movf	(_cTemp+1)^(0+256),w
 11542  0336  0021               	movlb	1	; select bank1
 11543  0337  00A7               	movwf	(?_BMP_readTemperature+1)^(0+128)
 11544  0338  0022               	movlb	2	; select bank2
 11545  0339  082D               	movf	(_cTemp+2)^(0+256),w
 11546  033A  0021               	movlb	1	; select bank1
 11547  033B  00A8               	movwf	(?_BMP_readTemperature+2)^(0+128)
 11548  033C  0008               	return
 11549  033D                     __end_of_BMP_readTemperature:	
 11550                           
 11551                           	psect	text58
 11552  142C                     __ptext58:	
 11553 ;; *************** function ___lwtoft *****************
 11554 ;; Defined at:
 11555 ;;		line 28 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\lwtoft.c"
 11556 ;; Parameters:    Size  Location     Type
 11557 ;;  c               2    9[BANK0 ] unsigned int 
 11558 ;; Auto vars:     Size  Location     Type
 11559 ;;		None
 11560 ;; Return value:  Size  Location     Type
 11561 ;;                  3    9[BANK0 ] float 
 11562 ;; Registers used:
 11563 ;;		wreg, status,2, status,0, pclath, cstack
 11564 ;; Tracked objects:
 11565 ;;		On entry : 0/0
 11566 ;;		On exit  : 0/0
 11567 ;;		Unchanged: 0/0
 11568 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11569 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11570 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11571 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11572 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11573 ;;Total ram usage:        4 bytes
 11574 ;; Hardware stack levels used:    1
 11575 ;; Hardware stack levels required when called:    5
 11576 ;; This function calls:
 11577 ;;		___ftpack
 11578 ;; This function is called by:
 11579 ;;		_Sensor_getSupplyVoltage
 11580 ;;		_BMP_readTemperature
 11581 ;; This function uses a non-reentrant model
 11582 ;;
 11583                           
 11584                           
 11585                           ;psect for function ___lwtoft
 11586  142C                     ___lwtoft:	
 11587                           
 11588                           ;incstack = 0
 11589                           ; Regs used in ___lwtoft: [wreg+status,2+status,0+pclath+cstack]
 11590  142C  0020               	movlb	0	; select bank0
 11591  142D  0829               	movf	___lwtoft@c,w
 11592  142E  00A1               	movwf	___ftpack@arg
 11593  142F  082A               	movf	___lwtoft@c+1,w
 11594  1430  00A2               	movwf	___ftpack@arg+1
 11595  1431  01A3               	clrf	___ftpack@arg+2
 11596  1432  308E               	movlw	142
 11597  1433  00AC               	movwf	??___lwtoft
 11598  1434  082C               	movf	??___lwtoft,w
 11599  1435  00A4               	movwf	___ftpack@exp
 11600  1436  01A5               	clrf	___ftpack@sign
 11601  1437  318A  22A2         	fcall	___ftpack
 11602  1439  0020               	movlb	0	; select bank0
 11603  143A  0821               	movf	?___ftpack,w
 11604  143B  00A9               	movwf	?___lwtoft
 11605  143C  0822               	movf	?___ftpack+1,w
 11606  143D  00AA               	movwf	?___lwtoft+1
 11607  143E  0823               	movf	?___ftpack+2,w
 11608  143F  00AB               	movwf	?___lwtoft+2
 11609  1440  0008               	return
 11610  1441                     __end_of___lwtoft:	
 11611                           
 11612                           	psect	text59
 11613  0C6B                     __ptext59:	
 11614 ;; *************** function ___fttol *****************
 11615 ;; Defined at:
 11616 ;;		line 44 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\fttol.c"
 11617 ;; Parameters:    Size  Location     Type
 11618 ;;  f1              3   70[BANK0 ] float 
 11619 ;; Auto vars:     Size  Location     Type
 11620 ;;  lval            4    1[BANK1 ] unsigned long 
 11621 ;;  exp1            1    5[BANK1 ] unsigned char 
 11622 ;;  sign1           1    0[BANK1 ] unsigned char 
 11623 ;; Return value:  Size  Location     Type
 11624 ;;                  4   70[BANK0 ] long 
 11625 ;; Registers used:
 11626 ;;		wreg, status,2, status,0
 11627 ;; Tracked objects:
 11628 ;;		On entry : 0/0
 11629 ;;		On exit  : 0/0
 11630 ;;		Unchanged: 0/0
 11631 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11632 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11633 ;;      Locals:         0       0       6       0       0       0       0       0       0       0       0       0       
      +0       0
 11634 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11635 ;;      Totals:         0       8       6       0       0       0       0       0       0       0       0       0       
      +0       0
 11636 ;;Total ram usage:       14 bytes
 11637 ;; Hardware stack levels used:    1
 11638 ;; Hardware stack levels required when called:    4
 11639 ;; This function calls:
 11640 ;;		Nothing
 11641 ;; This function is called by:
 11642 ;;		_BMP_readTemperature
 11643 ;;		_Wireless_packageData
 11644 ;;		_HMC5883L_GetCompassDirection
 11645 ;; This function uses a non-reentrant model
 11646 ;;
 11647                           
 11648                           
 11649                           ;psect for function ___fttol
 11650  0C6B                     ___fttol:	
 11651                           
 11652                           ;incstack = 0
 11653                           ; Regs used in ___fttol: [wreg+status,2+status,0]
 11654  0C6B  0020               	movlb	0	; select bank0
 11655  0C6C  0866               	movf	___fttol@f1,w
 11656  0C6D  00EA               	movwf	??___fttol
 11657  0C6E  0867               	movf	___fttol@f1+1,w
 11658  0C6F  00EB               	movwf	??___fttol+1
 11659  0C70  0868               	movf	___fttol@f1+2,w
 11660  0C71  00EC               	movwf	??___fttol+2
 11661  0C72  1003               	clrc
 11662  0C73  0D6B               	rlf	??___fttol+1,w
 11663  0C74  0D6C               	rlf	??___fttol+2,w
 11664  0C75  00ED               	movwf	??___fttol+3
 11665  0C76  086D               	movf	??___fttol+3,w
 11666  0C77  0021               	movlb	1	; select bank1
 11667  0C78  00A5               	movwf	___fttol@exp1^(0+128)
 11668  0C79  0825               	movf	___fttol@exp1^(0+128),w
 11669  0C7A  1D03               	btfss	3,2
 11670  0C7B  2C86               	goto	l6353
 11671  0C7C  3000               	movlw	0
 11672  0C7D  0020               	movlb	0	; select bank0
 11673  0C7E  00E9               	movwf	?___fttol+3
 11674  0C7F  3000               	movlw	0
 11675  0C80  00E8               	movwf	?___fttol+2
 11676  0C81  3000               	movlw	0
 11677  0C82  00E7               	movwf	?___fttol+1
 11678  0C83  3000               	movlw	0
 11679  0C84  00E6               	movwf	?___fttol
 11680  0C85  0008               	return
 11681  0C86                     l6353:	
 11682  0C86  0020               	movlb	0	; select bank0
 11683  0C87  0866               	movf	___fttol@f1,w
 11684  0C88  00EA               	movwf	??___fttol
 11685  0C89  0867               	movf	___fttol@f1+1,w
 11686  0C8A  00EB               	movwf	??___fttol+1
 11687  0C8B  0868               	movf	___fttol@f1+2,w
 11688  0C8C  00EC               	movwf	??___fttol+2
 11689  0C8D  3017               	movlw	23
 11690  0C8E                     u6185:	
 11691  0C8E  36EC               	lsrf	??___fttol+2,f
 11692  0C8F  0CEB               	rrf	??___fttol+1,f
 11693  0C90  0CEA               	rrf	??___fttol,f
 11694  0C91  0B89               	decfsz	9,f
 11695  0C92  2C8E               	goto	u6185
 11696  0C93  086A               	movf	??___fttol,w
 11697  0C94  00ED               	movwf	??___fttol+3
 11698  0C95  086D               	movf	??___fttol+3,w
 11699  0C96  0021               	movlb	1	; select bank1
 11700  0C97  00A0               	movwf	___fttol@sign1^(0+128)
 11701  0C98  0020               	movlb	0	; select bank0
 11702  0C99  17E7               	bsf	___fttol@f1+1,7
 11703  0C9A  30FF               	movlw	255
 11704  0C9B  05E6               	andwf	___fttol@f1,f
 11705  0C9C  30FF               	movlw	255
 11706  0C9D  05E7               	andwf	___fttol@f1+1,f
 11707  0C9E  3000               	movlw	0
 11708  0C9F  05E8               	andwf	___fttol@f1+2,f
 11709  0CA0  0866               	movf	___fttol@f1,w
 11710  0CA1  0021               	movlb	1	; select bank1
 11711  0CA2  00A1               	movwf	___fttol@lval^(0+128)
 11712  0CA3  0020               	movlb	0	; select bank0
 11713  0CA4  0867               	movf	___fttol@f1+1,w
 11714  0CA5  0021               	movlb	1	; select bank1
 11715  0CA6  00A2               	movwf	(___fttol@lval^(0+128)+1)
 11716  0CA7  0020               	movlb	0	; select bank0
 11717  0CA8  0868               	movf	___fttol@f1+2,w
 11718  0CA9  0021               	movlb	1	; select bank1
 11719  0CAA  00A3               	movwf	(___fttol@lval^(0+128)+2)
 11720  0CAB  01A4               	clrf	(___fttol@lval^(0+128)+3)
 11721  0CAC  308E               	movlw	142
 11722  0CAD  02A5               	subwf	___fttol@exp1^(0+128),f
 11723  0CAE  1FA5               	btfss	___fttol@exp1^(0+128),7
 11724  0CAF  2CD0               	goto	l6373
 11725  0CB0  0825               	movf	___fttol@exp1^(0+128),w
 11726  0CB1  3A80               	xorlw	128
 11727  0CB2  3E8F               	addlw	143
 11728  0CB3  1803               	skipnc
 11729  0CB4  2CBF               	goto	l6371
 11730  0CB5  3000               	movlw	0
 11731  0CB6  0020               	movlb	0	; select bank0
 11732  0CB7  00E9               	movwf	?___fttol+3
 11733  0CB8  3000               	movlw	0
 11734  0CB9  00E8               	movwf	?___fttol+2
 11735  0CBA  3000               	movlw	0
 11736  0CBB  00E7               	movwf	?___fttol+1
 11737  0CBC  3000               	movlw	0
 11738  0CBD  00E6               	movwf	?___fttol
 11739  0CBE  0008               	return
 11740  0CBF                     l6371:	
 11741  0CBF  3001               	movlw	1
 11742  0CC0                     u6215:	
 11743  0CC0  0021               	movlb	1	; select bank1
 11744  0CC1  36A4               	lsrf	(___fttol@lval+3)^(0+128),f
 11745  0CC2  0CA3               	rrf	(___fttol@lval+2)^(0+128),f
 11746  0CC3  0CA2               	rrf	(___fttol@lval+1)^(0+128),f
 11747  0CC4  0CA1               	rrf	___fttol@lval^(0+128),f
 11748  0CC5  0B89               	decfsz	9,f
 11749  0CC6  2CC0               	goto	u6215
 11750  0CC7  3001               	movlw	1
 11751  0CC8  0020               	movlb	0	; select bank0
 11752  0CC9  00EA               	movwf	??___fttol
 11753  0CCA  086A               	movf	??___fttol,w
 11754  0CCB  0021               	movlb	1	; select bank1
 11755  0CCC  07A5               	addwf	___fttol@exp1^(0+128),f
 11756  0CCD  1903               	btfsc	3,2
 11757  0CCE  2CEC               	goto	l6381
 11758  0CCF  2CBF               	goto	l6371
 11759  0CD0                     l6373:	
 11760  0CD0  3018               	movlw	24
 11761  0CD1  0225               	subwf	___fttol@exp1^(0+128),w
 11762  0CD2  1C03               	skipc
 11763  0CD3  2CE8               	goto	l1619
 11764  0CD4  3000               	movlw	0
 11765  0CD5  0020               	movlb	0	; select bank0
 11766  0CD6  00E9               	movwf	?___fttol+3
 11767  0CD7  3000               	movlw	0
 11768  0CD8  00E8               	movwf	?___fttol+2
 11769  0CD9  3000               	movlw	0
 11770  0CDA  00E7               	movwf	?___fttol+1
 11771  0CDB  3000               	movlw	0
 11772  0CDC  00E6               	movwf	?___fttol
 11773  0CDD  0008               	return
 11774  0CDE                     l6379:	
 11775  0CDE  3001               	movlw	1
 11776  0CDF                     u6245:	
 11777  0CDF  0021               	movlb	1	; select bank1
 11778  0CE0  35A1               	lslf	___fttol@lval^(0+128),f
 11779  0CE1  0DA2               	rlf	(___fttol@lval+1)^(0+128),f
 11780  0CE2  0DA3               	rlf	(___fttol@lval+2)^(0+128),f
 11781  0CE3  0DA4               	rlf	(___fttol@lval+3)^(0+128),f
 11782  0CE4  0B89               	decfsz	9,f
 11783  0CE5  2CDF               	goto	u6245
 11784  0CE6  3001               	movlw	1
 11785  0CE7  02A5               	subwf	___fttol@exp1^(0+128),f
 11786  0CE8                     l1619:	
 11787  0CE8  0021               	movlb	1	; select bank1
 11788  0CE9  0825               	movf	___fttol@exp1^(0+128),w
 11789  0CEA  1D03               	btfss	3,2
 11790  0CEB  2CDE               	goto	l6379
 11791  0CEC                     l6381:	
 11792  0CEC  0820               	movf	___fttol@sign1^(0+128),w
 11793  0CED  1903               	btfsc	3,2
 11794  0CEE  2CFA               	goto	l6385
 11795  0CEF  09A1               	comf	___fttol@lval^(0+128),f
 11796  0CF0  09A2               	comf	(___fttol@lval+1)^(0+128),f
 11797  0CF1  09A3               	comf	(___fttol@lval+2)^(0+128),f
 11798  0CF2  09A4               	comf	(___fttol@lval+3)^(0+128),f
 11799  0CF3  0AA1               	incf	___fttol@lval^(0+128),f
 11800  0CF4  1903               	skipnz
 11801  0CF5  0AA2               	incf	(___fttol@lval+1)^(0+128),f
 11802  0CF6  1903               	skipnz
 11803  0CF7  0AA3               	incf	(___fttol@lval+2)^(0+128),f
 11804  0CF8  1903               	skipnz
 11805  0CF9  0AA4               	incf	(___fttol@lval+3)^(0+128),f
 11806  0CFA                     l6385:	
 11807  0CFA  0824               	movf	(___fttol@lval+3)^(0+128),w
 11808  0CFB  0020               	movlb	0	; select bank0
 11809  0CFC  00E9               	movwf	?___fttol+3
 11810  0CFD  0021               	movlb	1	; select bank1
 11811  0CFE  0823               	movf	(___fttol@lval+2)^(0+128),w
 11812  0CFF  0020               	movlb	0	; select bank0
 11813  0D00  00E8               	movwf	?___fttol+2
 11814  0D01  0021               	movlb	1	; select bank1
 11815  0D02  0822               	movf	(___fttol@lval+1)^(0+128),w
 11816  0D03  0020               	movlb	0	; select bank0
 11817  0D04  00E7               	movwf	?___fttol+1
 11818  0D05  0021               	movlb	1	; select bank1
 11819  0D06  0821               	movf	___fttol@lval^(0+128),w
 11820  0D07  0020               	movlb	0	; select bank0
 11821  0D08  00E6               	movwf	?___fttol
 11822  0D09  0008               	return
 11823  0D0A                     __end_of___fttol:	
 11824                           
 11825                           	psect	text60
 11826  1351                     __ptext60:	
 11827 ;; *************** function ___ftneg *****************
 11828 ;; Defined at:
 11829 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\ftneg.c"
 11830 ;; Parameters:    Size  Location     Type
 11831 ;;  f1              3   33[BANK0 ] float 
 11832 ;; Auto vars:     Size  Location     Type
 11833 ;;		None
 11834 ;; Return value:  Size  Location     Type
 11835 ;;                  3   33[BANK0 ] float 
 11836 ;; Registers used:
 11837 ;;		wreg
 11838 ;; Tracked objects:
 11839 ;;		On entry : 0/0
 11840 ;;		On exit  : 0/0
 11841 ;;		Unchanged: 0/0
 11842 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11843 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11844 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11845 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11846 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11847 ;;Total ram usage:        3 bytes
 11848 ;; Hardware stack levels used:    1
 11849 ;; Hardware stack levels required when called:    4
 11850 ;; This function calls:
 11851 ;;		Nothing
 11852 ;; This function is called by:
 11853 ;;		_BMP_readTemperature
 11854 ;; This function uses a non-reentrant model
 11855 ;;
 11856                           
 11857                           
 11858                           ;psect for function ___ftneg
 11859  1351                     ___ftneg:	
 11860                           
 11861                           ;incstack = 0
 11862                           ; Regs used in ___ftneg: [wreg]
 11863  1351  0020               	movlb	0	; select bank0
 11864  1352  0843               	movf	___ftneg@f1+2,w
 11865  1353  0442               	iorwf	___ftneg@f1+1,w
 11866  1354  0441               	iorwf	___ftneg@f1,w
 11867  1355  1903               	skipnz
 11868  1356  0008               	return
 11869  1357  3080               	movlw	128
 11870  1358  06C3               	xorwf	___ftneg@f1+2,f
 11871  1359  0008               	return
 11872  135A                     __end_of___ftneg:	
 11873                           
 11874                           	psect	text61
 11875  0E56                     __ptext61:	
 11876 ;; *************** function ___ftmul *****************
 11877 ;; Defined at:
 11878 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\ftmul.c"
 11879 ;; Parameters:    Size  Location     Type
 11880 ;;  f1              3   54[BANK0 ] float 
 11881 ;;  f2              3   57[BANK0 ] float 
 11882 ;; Auto vars:     Size  Location     Type
 11883 ;;  f3_as_produc    3   65[BANK0 ] unsigned um
 11884 ;;  sign            1   69[BANK0 ] unsigned char 
 11885 ;;  cntr            1   68[BANK0 ] unsigned char 
 11886 ;;  exp             1   64[BANK0 ] unsigned char 
 11887 ;; Return value:  Size  Location     Type
 11888 ;;                  3   54[BANK0 ] float 
 11889 ;; Registers used:
 11890 ;;		wreg, status,2, status,0, pclath, cstack
 11891 ;; Tracked objects:
 11892 ;;		On entry : 0/0
 11893 ;;		On exit  : 0/0
 11894 ;;		Unchanged: 0/0
 11895 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11896 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11897 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11898 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11899 ;;      Totals:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11900 ;;Total ram usage:       16 bytes
 11901 ;; Hardware stack levels used:    1
 11902 ;; Hardware stack levels required when called:    5
 11903 ;; This function calls:
 11904 ;;		___ftpack
 11905 ;; This function is called by:
 11906 ;;		_BMP_readTemperature
 11907 ;;		_Wireless_packageData
 11908 ;;		_HMC5883L_GetCompassDirection
 11909 ;; This function uses a non-reentrant model
 11910 ;;
 11911                           
 11912                           
 11913                           ;psect for function ___ftmul
 11914  0E56                     ___ftmul:	
 11915                           
 11916                           ;incstack = 0
 11917                           ; Regs used in ___ftmul: [wreg+status,2+status,0+pclath+cstack]
 11918  0E56  0020               	movlb	0	; select bank0
 11919  0E57  0856               	movf	___ftmul@f1,w
 11920  0E58  00DC               	movwf	??___ftmul
 11921  0E59  0857               	movf	___ftmul@f1+1,w
 11922  0E5A  00DD               	movwf	??___ftmul+1
 11923  0E5B  0858               	movf	___ftmul@f1+2,w
 11924  0E5C  00DE               	movwf	??___ftmul+2
 11925  0E5D  1003               	clrc
 11926  0E5E  0D5D               	rlf	??___ftmul+1,w
 11927  0E5F  0D5E               	rlf	??___ftmul+2,w
 11928  0E60  00DF               	movwf	??___ftmul+3
 11929  0E61  085F               	movf	??___ftmul+3,w
 11930  0E62  00E0               	movwf	___ftmul@exp
 11931  0E63  0860               	movf	___ftmul@exp,w
 11932  0E64  1D03               	btfss	3,2
 11933  0E65  2E6D               	goto	l6295
 11934  0E66  3000               	movlw	0
 11935  0E67  00D6               	movwf	?___ftmul
 11936  0E68  3000               	movlw	0
 11937  0E69  00D7               	movwf	?___ftmul+1
 11938  0E6A  3000               	movlw	0
 11939  0E6B  00D8               	movwf	?___ftmul+2
 11940  0E6C  0008               	return
 11941  0E6D                     l6295:	
 11942  0E6D  0859               	movf	___ftmul@f2,w
 11943  0E6E  00DC               	movwf	??___ftmul
 11944  0E6F  085A               	movf	___ftmul@f2+1,w
 11945  0E70  00DD               	movwf	??___ftmul+1
 11946  0E71  085B               	movf	___ftmul@f2+2,w
 11947  0E72  00DE               	movwf	??___ftmul+2
 11948  0E73  1003               	clrc
 11949  0E74  0D5D               	rlf	??___ftmul+1,w
 11950  0E75  0D5E               	rlf	??___ftmul+2,w
 11951  0E76  00DF               	movwf	??___ftmul+3
 11952  0E77  085F               	movf	??___ftmul+3,w
 11953  0E78  00E5               	movwf	___ftmul@sign
 11954  0E79  0865               	movf	___ftmul@sign,w
 11955  0E7A  1D03               	btfss	3,2
 11956  0E7B  2E83               	goto	l6301
 11957  0E7C  3000               	movlw	0
 11958  0E7D  00D6               	movwf	?___ftmul
 11959  0E7E  3000               	movlw	0
 11960  0E7F  00D7               	movwf	?___ftmul+1
 11961  0E80  3000               	movlw	0
 11962  0E81  00D8               	movwf	?___ftmul+2
 11963  0E82  0008               	return
 11964  0E83                     l6301:	
 11965  0E83  0865               	movf	___ftmul@sign,w
 11966  0E84  3E7B               	addlw	123
 11967  0E85  00DC               	movwf	??___ftmul
 11968  0E86  085C               	movf	??___ftmul,w
 11969  0E87  07E0               	addwf	___ftmul@exp,f
 11970  0E88  0856               	movf	___ftmul@f1,w
 11971  0E89  00DC               	movwf	??___ftmul
 11972  0E8A  0857               	movf	___ftmul@f1+1,w
 11973  0E8B  00DD               	movwf	??___ftmul+1
 11974  0E8C  0858               	movf	___ftmul@f1+2,w
 11975  0E8D  00DE               	movwf	??___ftmul+2
 11976  0E8E  3010               	movlw	16
 11977  0E8F                     u6065:	
 11978  0E8F  36DE               	lsrf	??___ftmul+2,f
 11979  0E90  0CDD               	rrf	??___ftmul+1,f
 11980  0E91  0CDC               	rrf	??___ftmul,f
 11981  0E92  0B89               	decfsz	9,f
 11982  0E93  2E8F               	goto	u6065
 11983  0E94  085C               	movf	??___ftmul,w
 11984  0E95  00DF               	movwf	??___ftmul+3
 11985  0E96  085F               	movf	??___ftmul+3,w
 11986  0E97  00E5               	movwf	___ftmul@sign
 11987  0E98  0859               	movf	___ftmul@f2,w
 11988  0E99  00DC               	movwf	??___ftmul
 11989  0E9A  085A               	movf	___ftmul@f2+1,w
 11990  0E9B  00DD               	movwf	??___ftmul+1
 11991  0E9C  085B               	movf	___ftmul@f2+2,w
 11992  0E9D  00DE               	movwf	??___ftmul+2
 11993  0E9E  3010               	movlw	16
 11994  0E9F                     u6075:	
 11995  0E9F  36DE               	lsrf	??___ftmul+2,f
 11996  0EA0  0CDD               	rrf	??___ftmul+1,f
 11997  0EA1  0CDC               	rrf	??___ftmul,f
 11998  0EA2  0B89               	decfsz	9,f
 11999  0EA3  2E9F               	goto	u6075
 12000  0EA4  085C               	movf	??___ftmul,w
 12001  0EA5  00DF               	movwf	??___ftmul+3
 12002  0EA6  085F               	movf	??___ftmul+3,w
 12003  0EA7  06E5               	xorwf	___ftmul@sign,f
 12004  0EA8  3080               	movlw	128
 12005  0EA9  00DC               	movwf	??___ftmul
 12006  0EAA  085C               	movf	??___ftmul,w
 12007  0EAB  05E5               	andwf	___ftmul@sign,f
 12008  0EAC  17D7               	bsf	___ftmul@f1+1,7
 12009  0EAD  17DA               	bsf	___ftmul@f2+1,7
 12010  0EAE  30FF               	movlw	255
 12011  0EAF  05D9               	andwf	___ftmul@f2,f
 12012  0EB0  30FF               	movlw	255
 12013  0EB1  05DA               	andwf	___ftmul@f2+1,f
 12014  0EB2  3000               	movlw	0
 12015  0EB3  05DB               	andwf	___ftmul@f2+2,f
 12016  0EB4  3000               	movlw	0
 12017  0EB5  00E1               	movwf	___ftmul@f3_as_product
 12018  0EB6  3000               	movlw	0
 12019  0EB7  00E2               	movwf	___ftmul@f3_as_product+1
 12020  0EB8  3000               	movlw	0
 12021  0EB9  00E3               	movwf	___ftmul@f3_as_product+2
 12022  0EBA  3007               	movlw	7
 12023  0EBB  00DC               	movwf	??___ftmul
 12024  0EBC  085C               	movf	??___ftmul,w
 12025  0EBD  00E4               	movwf	___ftmul@cntr
 12026  0EBE                     l6313:	
 12027  0EBE  1C56               	btfss	___ftmul@f1,0
 12028  0EBF  2EC6               	goto	l6317
 12029  0EC0  0859               	movf	___ftmul@f2,w
 12030  0EC1  07E1               	addwf	___ftmul@f3_as_product,f
 12031  0EC2  085A               	movf	___ftmul@f2+1,w
 12032  0EC3  3DE2               	addwfc	___ftmul@f3_as_product+1,f
 12033  0EC4  085B               	movf	___ftmul@f2+2,w
 12034  0EC5  3DE3               	addwfc	___ftmul@f3_as_product+2,f
 12035  0EC6                     l6317:	
 12036  0EC6  3001               	movlw	1
 12037  0EC7                     u6095:	
 12038  0EC7  36D8               	lsrf	___ftmul@f1+2,f
 12039  0EC8  0CD7               	rrf	___ftmul@f1+1,f
 12040  0EC9  0CD6               	rrf	___ftmul@f1,f
 12041  0ECA  0B89               	decfsz	9,f
 12042  0ECB  2EC7               	goto	u6095
 12043  0ECC  3001               	movlw	1
 12044  0ECD                     u6105:	
 12045  0ECD  35D9               	lslf	___ftmul@f2,f
 12046  0ECE  0DDA               	rlf	___ftmul@f2+1,f
 12047  0ECF  0DDB               	rlf	___ftmul@f2+2,f
 12048  0ED0  0B89               	decfsz	9,f
 12049  0ED1  2ECD               	goto	u6105
 12050  0ED2  3001               	movlw	1
 12051  0ED3  02E4               	subwf	___ftmul@cntr,f
 12052  0ED4  1D03               	btfss	3,2
 12053  0ED5  2EBE               	goto	l6313
 12054  0ED6  3009               	movlw	9
 12055  0ED7  00DC               	movwf	??___ftmul
 12056  0ED8  085C               	movf	??___ftmul,w
 12057  0ED9  00E4               	movwf	___ftmul@cntr
 12058  0EDA                     l6325:	
 12059  0EDA  1C56               	btfss	___ftmul@f1,0
 12060  0EDB  2EE2               	goto	l6329
 12061  0EDC  0859               	movf	___ftmul@f2,w
 12062  0EDD  07E1               	addwf	___ftmul@f3_as_product,f
 12063  0EDE  085A               	movf	___ftmul@f2+1,w
 12064  0EDF  3DE2               	addwfc	___ftmul@f3_as_product+1,f
 12065  0EE0  085B               	movf	___ftmul@f2+2,w
 12066  0EE1  3DE3               	addwfc	___ftmul@f3_as_product+2,f
 12067  0EE2                     l6329:	
 12068  0EE2  3001               	movlw	1
 12069  0EE3                     u6135:	
 12070  0EE3  36D8               	lsrf	___ftmul@f1+2,f
 12071  0EE4  0CD7               	rrf	___ftmul@f1+1,f
 12072  0EE5  0CD6               	rrf	___ftmul@f1,f
 12073  0EE6  0B89               	decfsz	9,f
 12074  0EE7  2EE3               	goto	u6135
 12075  0EE8  3001               	movlw	1
 12076  0EE9                     u6145:	
 12077  0EE9  36E3               	lsrf	___ftmul@f3_as_product+2,f
 12078  0EEA  0CE2               	rrf	___ftmul@f3_as_product+1,f
 12079  0EEB  0CE1               	rrf	___ftmul@f3_as_product,f
 12080  0EEC  0B89               	decfsz	9,f
 12081  0EED  2EE9               	goto	u6145
 12082  0EEE  3001               	movlw	1
 12083  0EEF  02E4               	subwf	___ftmul@cntr,f
 12084  0EF0  1D03               	btfss	3,2
 12085  0EF1  2EDA               	goto	l6325
 12086  0EF2  0861               	movf	___ftmul@f3_as_product,w
 12087  0EF3  00A1               	movwf	___ftpack@arg
 12088  0EF4  0862               	movf	___ftmul@f3_as_product+1,w
 12089  0EF5  00A2               	movwf	___ftpack@arg+1
 12090  0EF6  0863               	movf	___ftmul@f3_as_product+2,w
 12091  0EF7  00A3               	movwf	___ftpack@arg+2
 12092  0EF8  0860               	movf	___ftmul@exp,w
 12093  0EF9  00DC               	movwf	??___ftmul
 12094  0EFA  085C               	movf	??___ftmul,w
 12095  0EFB  00A4               	movwf	___ftpack@exp
 12096  0EFC  0865               	movf	___ftmul@sign,w
 12097  0EFD  00DD               	movwf	??___ftmul+1
 12098  0EFE  085D               	movf	??___ftmul+1,w
 12099  0EFF  00A5               	movwf	___ftpack@sign
 12100  0F00  318A  22A2         	fcall	___ftpack
 12101  0F02  0020               	movlb	0	; select bank0
 12102  0F03  0821               	movf	?___ftpack,w
 12103  0F04  00D6               	movwf	?___ftmul
 12104  0F05  0822               	movf	?___ftpack+1,w
 12105  0F06  00D7               	movwf	?___ftmul+1
 12106  0F07  0823               	movf	?___ftpack+2,w
 12107  0F08  00D8               	movwf	?___ftmul+2
 12108  0F09  0008               	return
 12109  0F0A                     __end_of___ftmul:	
 12110                           
 12111                           	psect	text62
 12112  0DAD                     __ptext62:	
 12113 ;; *************** function ___ftdiv *****************
 12114 ;; Defined at:
 12115 ;;		line 56 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\ftdiv.c"
 12116 ;; Parameters:    Size  Location     Type
 12117 ;;  f2              3   17[BANK0 ] float 
 12118 ;;  f1              3   20[BANK0 ] float 
 12119 ;; Auto vars:     Size  Location     Type
 12120 ;;  f3              3   28[BANK0 ] float 
 12121 ;;  sign            1   32[BANK0 ] unsigned char 
 12122 ;;  exp             1   31[BANK0 ] unsigned char 
 12123 ;;  cntr            1   27[BANK0 ] unsigned char 
 12124 ;; Return value:  Size  Location     Type
 12125 ;;                  3   17[BANK0 ] float 
 12126 ;; Registers used:
 12127 ;;		wreg, status,2, status,0, pclath, cstack
 12128 ;; Tracked objects:
 12129 ;;		On entry : 0/0
 12130 ;;		On exit  : 0/0
 12131 ;;		Unchanged: 0/0
 12132 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12133 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12134 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12135 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12136 ;;      Totals:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12137 ;;Total ram usage:       16 bytes
 12138 ;; Hardware stack levels used:    1
 12139 ;; Hardware stack levels required when called:    5
 12140 ;; This function calls:
 12141 ;;		___ftpack
 12142 ;; This function is called by:
 12143 ;;		_Sensor_getSupplyVoltage
 12144 ;;		_BMP_readTemperature
 12145 ;;		_HMC5883L_GetCompassDirection
 12146 ;; This function uses a non-reentrant model
 12147 ;;
 12148                           
 12149                           
 12150                           ;psect for function ___ftdiv
 12151  0DAD                     ___ftdiv:	
 12152                           
 12153                           ;incstack = 0
 12154                           ; Regs used in ___ftdiv: [wreg+status,2+status,0+pclath+cstack]
 12155  0DAD  0020               	movlb	0	; select bank0
 12156  0DAE  0834               	movf	___ftdiv@f1,w
 12157  0DAF  00B7               	movwf	??___ftdiv
 12158  0DB0  0835               	movf	___ftdiv@f1+1,w
 12159  0DB1  00B8               	movwf	??___ftdiv+1
 12160  0DB2  0836               	movf	___ftdiv@f1+2,w
 12161  0DB3  00B9               	movwf	??___ftdiv+2
 12162  0DB4  1003               	clrc
 12163  0DB5  0D38               	rlf	??___ftdiv+1,w
 12164  0DB6  0D39               	rlf	??___ftdiv+2,w
 12165  0DB7  00BA               	movwf	??___ftdiv+3
 12166  0DB8  083A               	movf	??___ftdiv+3,w
 12167  0DB9  00BF               	movwf	___ftdiv@exp
 12168  0DBA  083F               	movf	___ftdiv@exp,w
 12169  0DBB  1D03               	btfss	3,2
 12170  0DBC  2DC4               	goto	l5841
 12171  0DBD  3000               	movlw	0
 12172  0DBE  00B1               	movwf	?___ftdiv
 12173  0DBF  3000               	movlw	0
 12174  0DC0  00B2               	movwf	?___ftdiv+1
 12175  0DC1  3000               	movlw	0
 12176  0DC2  00B3               	movwf	?___ftdiv+2
 12177  0DC3  0008               	return
 12178  0DC4                     l5841:	
 12179  0DC4  0831               	movf	___ftdiv@f2,w
 12180  0DC5  00B7               	movwf	??___ftdiv
 12181  0DC6  0832               	movf	___ftdiv@f2+1,w
 12182  0DC7  00B8               	movwf	??___ftdiv+1
 12183  0DC8  0833               	movf	___ftdiv@f2+2,w
 12184  0DC9  00B9               	movwf	??___ftdiv+2
 12185  0DCA  1003               	clrc
 12186  0DCB  0D38               	rlf	??___ftdiv+1,w
 12187  0DCC  0D39               	rlf	??___ftdiv+2,w
 12188  0DCD  00BA               	movwf	??___ftdiv+3
 12189  0DCE  083A               	movf	??___ftdiv+3,w
 12190  0DCF  00C0               	movwf	___ftdiv@sign
 12191  0DD0  0840               	movf	___ftdiv@sign,w
 12192  0DD1  1D03               	btfss	3,2
 12193  0DD2  2DDA               	goto	l5847
 12194  0DD3  3000               	movlw	0
 12195  0DD4  00B1               	movwf	?___ftdiv
 12196  0DD5  3000               	movlw	0
 12197  0DD6  00B2               	movwf	?___ftdiv+1
 12198  0DD7  3000               	movlw	0
 12199  0DD8  00B3               	movwf	?___ftdiv+2
 12200  0DD9  0008               	return
 12201  0DDA                     l5847:	
 12202  0DDA  3000               	movlw	0
 12203  0DDB  00BC               	movwf	___ftdiv@f3
 12204  0DDC  3000               	movlw	0
 12205  0DDD  00BD               	movwf	___ftdiv@f3+1
 12206  0DDE  3000               	movlw	0
 12207  0DDF  00BE               	movwf	___ftdiv@f3+2
 12208  0DE0  3089               	movlw	137
 12209  0DE1  0740               	addwf	___ftdiv@sign,w
 12210  0DE2  00B7               	movwf	??___ftdiv
 12211  0DE3  0837               	movf	??___ftdiv,w
 12212  0DE4  02BF               	subwf	___ftdiv@exp,f
 12213  0DE5  0834               	movf	___ftdiv@f1,w
 12214  0DE6  00B7               	movwf	??___ftdiv
 12215  0DE7  0835               	movf	___ftdiv@f1+1,w
 12216  0DE8  00B8               	movwf	??___ftdiv+1
 12217  0DE9  0836               	movf	___ftdiv@f1+2,w
 12218  0DEA  00B9               	movwf	??___ftdiv+2
 12219  0DEB  3010               	movlw	16
 12220  0DEC                     u5335:	
 12221  0DEC  36B9               	lsrf	??___ftdiv+2,f
 12222  0DED  0CB8               	rrf	??___ftdiv+1,f
 12223  0DEE  0CB7               	rrf	??___ftdiv,f
 12224  0DEF  0B89               	decfsz	9,f
 12225  0DF0  2DEC               	goto	u5335
 12226  0DF1  0837               	movf	??___ftdiv,w
 12227  0DF2  00BA               	movwf	??___ftdiv+3
 12228  0DF3  083A               	movf	??___ftdiv+3,w
 12229  0DF4  00C0               	movwf	___ftdiv@sign
 12230  0DF5  0831               	movf	___ftdiv@f2,w
 12231  0DF6  00B7               	movwf	??___ftdiv
 12232  0DF7  0832               	movf	___ftdiv@f2+1,w
 12233  0DF8  00B8               	movwf	??___ftdiv+1
 12234  0DF9  0833               	movf	___ftdiv@f2+2,w
 12235  0DFA  00B9               	movwf	??___ftdiv+2
 12236  0DFB  3010               	movlw	16
 12237  0DFC                     u5345:	
 12238  0DFC  36B9               	lsrf	??___ftdiv+2,f
 12239  0DFD  0CB8               	rrf	??___ftdiv+1,f
 12240  0DFE  0CB7               	rrf	??___ftdiv,f
 12241  0DFF  0B89               	decfsz	9,f
 12242  0E00  2DFC               	goto	u5345
 12243  0E01  0837               	movf	??___ftdiv,w
 12244  0E02  00BA               	movwf	??___ftdiv+3
 12245  0E03  083A               	movf	??___ftdiv+3,w
 12246  0E04  06C0               	xorwf	___ftdiv@sign,f
 12247  0E05  3080               	movlw	128
 12248  0E06  00B7               	movwf	??___ftdiv
 12249  0E07  0837               	movf	??___ftdiv,w
 12250  0E08  05C0               	andwf	___ftdiv@sign,f
 12251  0E09  17B5               	bsf	___ftdiv@f1+1,7
 12252  0E0A  30FF               	movlw	255
 12253  0E0B  05B4               	andwf	___ftdiv@f1,f
 12254  0E0C  30FF               	movlw	255
 12255  0E0D  05B5               	andwf	___ftdiv@f1+1,f
 12256  0E0E  3000               	movlw	0
 12257  0E0F  05B6               	andwf	___ftdiv@f1+2,f
 12258  0E10  17B2               	bsf	___ftdiv@f2+1,7
 12259  0E11  30FF               	movlw	255
 12260  0E12  05B1               	andwf	___ftdiv@f2,f
 12261  0E13  30FF               	movlw	255
 12262  0E14  05B2               	andwf	___ftdiv@f2+1,f
 12263  0E15  3000               	movlw	0
 12264  0E16  05B3               	andwf	___ftdiv@f2+2,f
 12265  0E17  3018               	movlw	24
 12266  0E18  00B7               	movwf	??___ftdiv
 12267  0E19  0837               	movf	??___ftdiv,w
 12268  0E1A  00BB               	movwf	___ftdiv@cntr
 12269  0E1B                     l5861:	
 12270  0E1B  3001               	movlw	1
 12271  0E1C                     u5355:	
 12272  0E1C  35BC               	lslf	___ftdiv@f3,f
 12273  0E1D  0DBD               	rlf	___ftdiv@f3+1,f
 12274  0E1E  0DBE               	rlf	___ftdiv@f3+2,f
 12275  0E1F  0B89               	decfsz	9,f
 12276  0E20  2E1C               	goto	u5355
 12277  0E21  0833               	movf	___ftdiv@f2+2,w
 12278  0E22  0236               	subwf	___ftdiv@f1+2,w
 12279  0E23  1D03               	skipz
 12280  0E24  2E2B               	goto	u5365
 12281  0E25  0832               	movf	___ftdiv@f2+1,w
 12282  0E26  0235               	subwf	___ftdiv@f1+1,w
 12283  0E27  1D03               	skipz
 12284  0E28  2E2B               	goto	u5365
 12285  0E29  0831               	movf	___ftdiv@f2,w
 12286  0E2A  0234               	subwf	___ftdiv@f1,w
 12287  0E2B                     u5365:	
 12288  0E2B  1C03               	skipc
 12289  0E2C  2E34               	goto	l5869
 12290  0E2D  0831               	movf	___ftdiv@f2,w
 12291  0E2E  02B4               	subwf	___ftdiv@f1,f
 12292  0E2F  0832               	movf	___ftdiv@f2+1,w
 12293  0E30  3BB5               	subwfb	___ftdiv@f1+1,f
 12294  0E31  0833               	movf	___ftdiv@f2+2,w
 12295  0E32  3BB6               	subwfb	___ftdiv@f1+2,f
 12296  0E33  143C               	bsf	___ftdiv@f3,0
 12297  0E34                     l5869:	
 12298  0E34  3001               	movlw	1
 12299  0E35                     u5375:	
 12300  0E35  35B4               	lslf	___ftdiv@f1,f
 12301  0E36  0DB5               	rlf	___ftdiv@f1+1,f
 12302  0E37  0DB6               	rlf	___ftdiv@f1+2,f
 12303  0E38  0B89               	decfsz	9,f
 12304  0E39  2E35               	goto	u5375
 12305  0E3A  3001               	movlw	1
 12306  0E3B  02BB               	subwf	___ftdiv@cntr,f
 12307  0E3C  1D03               	btfss	3,2
 12308  0E3D  2E1B               	goto	l5861
 12309  0E3E  083C               	movf	___ftdiv@f3,w
 12310  0E3F  00A1               	movwf	___ftpack@arg
 12311  0E40  083D               	movf	___ftdiv@f3+1,w
 12312  0E41  00A2               	movwf	___ftpack@arg+1
 12313  0E42  083E               	movf	___ftdiv@f3+2,w
 12314  0E43  00A3               	movwf	___ftpack@arg+2
 12315  0E44  083F               	movf	___ftdiv@exp,w
 12316  0E45  00B7               	movwf	??___ftdiv
 12317  0E46  0837               	movf	??___ftdiv,w
 12318  0E47  00A4               	movwf	___ftpack@exp
 12319  0E48  0840               	movf	___ftdiv@sign,w
 12320  0E49  00B8               	movwf	??___ftdiv+1
 12321  0E4A  0838               	movf	??___ftdiv+1,w
 12322  0E4B  00A5               	movwf	___ftpack@sign
 12323  0E4C  318A  22A2         	fcall	___ftpack
 12324  0E4E  0020               	movlb	0	; select bank0
 12325  0E4F  0821               	movf	?___ftpack,w
 12326  0E50  00B1               	movwf	?___ftdiv
 12327  0E51  0822               	movf	?___ftpack+1,w
 12328  0E52  00B2               	movwf	?___ftdiv+1
 12329  0E53  0823               	movf	?___ftpack+2,w
 12330  0E54  00B3               	movwf	?___ftdiv+2
 12331  0E55  0008               	return
 12332  0E56                     __end_of___ftdiv:	
 12333                           
 12334                           	psect	text63
 12335  0F0A                     __ptext63:	
 12336 ;; *************** function ___ftadd *****************
 12337 ;; Defined at:
 12338 ;;		line 86 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\ftadd.c"
 12339 ;; Parameters:    Size  Location     Type
 12340 ;;  f1              3   41[BANK0 ] float 
 12341 ;;  f2              3   44[BANK0 ] float 
 12342 ;; Auto vars:     Size  Location     Type
 12343 ;;  exp1            1   53[BANK0 ] unsigned char 
 12344 ;;  exp2            1   52[BANK0 ] unsigned char 
 12345 ;;  sign            1   51[BANK0 ] unsigned char 
 12346 ;; Return value:  Size  Location     Type
 12347 ;;                  3   41[BANK0 ] float 
 12348 ;; Registers used:
 12349 ;;		wreg, status,2, status,0, pclath, cstack
 12350 ;; Tracked objects:
 12351 ;;		On entry : 0/0
 12352 ;;		On exit  : 0/0
 12353 ;;		Unchanged: 0/0
 12354 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12355 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12356 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12357 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12358 ;;      Totals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12359 ;;Total ram usage:       13 bytes
 12360 ;; Hardware stack levels used:    1
 12361 ;; Hardware stack levels required when called:    5
 12362 ;; This function calls:
 12363 ;;		___ftpack
 12364 ;; This function is called by:
 12365 ;;		_BMP_readTemperature
 12366 ;;		_Wireless_packageData
 12367 ;;		_HMC5883L_GetCompassDirection
 12368 ;; This function uses a non-reentrant model
 12369 ;;
 12370                           
 12371                           
 12372                           ;psect for function ___ftadd
 12373  0F0A                     ___ftadd:	
 12374                           
 12375                           ;incstack = 0
 12376                           ; Regs used in ___ftadd: [wreg+status,2+status,0+pclath+cstack]
 12377  0F0A  0020               	movlb	0	; select bank0
 12378  0F0B  0849               	movf	___ftadd@f1,w
 12379  0F0C  00CF               	movwf	??___ftadd
 12380  0F0D  084A               	movf	___ftadd@f1+1,w
 12381  0F0E  00D0               	movwf	??___ftadd+1
 12382  0F0F  084B               	movf	___ftadd@f1+2,w
 12383  0F10  00D1               	movwf	??___ftadd+2
 12384  0F11  1003               	clrc
 12385  0F12  0D50               	rlf	??___ftadd+1,w
 12386  0F13  0D51               	rlf	??___ftadd+2,w
 12387  0F14  00D2               	movwf	??___ftadd+3
 12388  0F15  0852               	movf	??___ftadd+3,w
 12389  0F16  00D5               	movwf	___ftadd@exp1
 12390  0F17  084C               	movf	___ftadd@f2,w
 12391  0F18  00CF               	movwf	??___ftadd
 12392  0F19  084D               	movf	___ftadd@f2+1,w
 12393  0F1A  00D0               	movwf	??___ftadd+1
 12394  0F1B  084E               	movf	___ftadd@f2+2,w
 12395  0F1C  00D1               	movwf	??___ftadd+2
 12396  0F1D  1003               	clrc
 12397  0F1E  0D50               	rlf	??___ftadd+1,w
 12398  0F1F  0D51               	rlf	??___ftadd+2,w
 12399  0F20  00D2               	movwf	??___ftadd+3
 12400  0F21  0852               	movf	??___ftadd+3,w
 12401  0F22  00D4               	movwf	___ftadd@exp2
 12402  0F23  0855               	movf	___ftadd@exp1,w
 12403  0F24  1903               	btfsc	3,2
 12404  0F25  2F32               	goto	l6225
 12405  0F26  0854               	movf	___ftadd@exp2,w
 12406  0F27  0255               	subwf	___ftadd@exp1,w
 12407  0F28  1803               	skipnc
 12408  0F29  2F39               	goto	l6229
 12409  0F2A  0355               	decf	___ftadd@exp1,w
 12410  0F2B  3AFF               	xorlw	255
 12411  0F2C  0754               	addwf	___ftadd@exp2,w
 12412  0F2D  00CF               	movwf	??___ftadd
 12413  0F2E  3019               	movlw	25
 12414  0F2F  024F               	subwf	??___ftadd,w
 12415  0F30  1C03               	skipc
 12416  0F31  2F39               	goto	l6229
 12417  0F32                     l6225:	
 12418  0F32  084C               	movf	___ftadd@f2,w
 12419  0F33  00C9               	movwf	?___ftadd
 12420  0F34  084D               	movf	___ftadd@f2+1,w
 12421  0F35  00CA               	movwf	?___ftadd+1
 12422  0F36  084E               	movf	___ftadd@f2+2,w
 12423  0F37  00CB               	movwf	?___ftadd+2
 12424  0F38  0008               	return
 12425  0F39                     l6229:	
 12426  0F39  0854               	movf	___ftadd@exp2,w
 12427  0F3A  1903               	btfsc	3,2
 12428  0F3B  0008               	return
 12429  0F3C  0855               	movf	___ftadd@exp1,w
 12430  0F3D  0254               	subwf	___ftadd@exp2,w
 12431  0F3E  1803               	skipnc
 12432  0F3F  2F48               	goto	l6235
 12433  0F40  0354               	decf	___ftadd@exp2,w
 12434  0F41  3AFF               	xorlw	255
 12435  0F42  0755               	addwf	___ftadd@exp1,w
 12436  0F43  00CF               	movwf	??___ftadd
 12437  0F44  3019               	movlw	25
 12438  0F45  024F               	subwf	??___ftadd,w
 12439  0F46  1803               	btfsc	3,0
 12440  0F47  0008               	return
 12441  0F48                     l6235:	
 12442  0F48  3006               	movlw	6
 12443  0F49  00CF               	movwf	??___ftadd
 12444  0F4A  084F               	movf	??___ftadd,w
 12445  0F4B  00D3               	movwf	___ftadd@sign
 12446  0F4C  1BCB               	btfsc	___ftadd@f1+2,7
 12447  0F4D  17D3               	bsf	___ftadd@sign,7
 12448  0F4E  1BCE               	btfsc	___ftadd@f2+2,7
 12449  0F4F  1753               	bsf	___ftadd@sign,6
 12450  0F50  17CA               	bsf	___ftadd@f1+1,7
 12451  0F51  30FF               	movlw	255
 12452  0F52  05C9               	andwf	___ftadd@f1,f
 12453  0F53  30FF               	movlw	255
 12454  0F54  05CA               	andwf	___ftadd@f1+1,f
 12455  0F55  3000               	movlw	0
 12456  0F56  05CB               	andwf	___ftadd@f1+2,f
 12457  0F57  17CD               	bsf	___ftadd@f2+1,7
 12458  0F58  30FF               	movlw	255
 12459  0F59  05CC               	andwf	___ftadd@f2,f
 12460  0F5A  30FF               	movlw	255
 12461  0F5B  05CD               	andwf	___ftadd@f2+1,f
 12462  0F5C  3000               	movlw	0
 12463  0F5D  05CE               	andwf	___ftadd@f2+2,f
 12464  0F5E  0854               	movf	___ftadd@exp2,w
 12465  0F5F  0255               	subwf	___ftadd@exp1,w
 12466  0F60  1803               	skipnc
 12467  0F61  2F84               	goto	l6257
 12468  0F62                     l6247:	
 12469  0F62  3001               	movlw	1
 12470  0F63                     u5905:	
 12471  0F63  35CC               	lslf	___ftadd@f2,f
 12472  0F64  0DCD               	rlf	___ftadd@f2+1,f
 12473  0F65  0DCE               	rlf	___ftadd@f2+2,f
 12474  0F66  0B89               	decfsz	9,f
 12475  0F67  2F63               	goto	u5905
 12476  0F68  3001               	movlw	1
 12477  0F69  02D4               	subwf	___ftadd@exp2,f
 12478  0F6A  0854               	movf	___ftadd@exp2,w
 12479  0F6B  0655               	xorwf	___ftadd@exp1,w
 12480  0F6C  1903               	skipnz
 12481  0F6D  2F7F               	goto	l6255
 12482  0F6E  3001               	movlw	1
 12483  0F6F  02D3               	subwf	___ftadd@sign,f
 12484  0F70  0853               	movf	___ftadd@sign,w
 12485  0F71  3907               	andlw	7
 12486  0F72  1903               	btfsc	3,2
 12487  0F73  2F7F               	goto	l6255
 12488  0F74  2F62               	goto	l6247
 12489  0F75                     l6253:	
 12490  0F75  3001               	movlw	1
 12491  0F76                     u5935:	
 12492  0F76  36CB               	lsrf	___ftadd@f1+2,f
 12493  0F77  0CCA               	rrf	___ftadd@f1+1,f
 12494  0F78  0CC9               	rrf	___ftadd@f1,f
 12495  0F79  0B89               	decfsz	9,f
 12496  0F7A  2F76               	goto	u5935
 12497  0F7B  3001               	movlw	1
 12498  0F7C  00CF               	movwf	??___ftadd
 12499  0F7D  084F               	movf	??___ftadd,w
 12500  0F7E  07D5               	addwf	___ftadd@exp1,f
 12501  0F7F                     l6255:	
 12502  0F7F  0855               	movf	___ftadd@exp1,w
 12503  0F80  0654               	xorwf	___ftadd@exp2,w
 12504  0F81  1903               	btfsc	3,2
 12505  0F82  2FA9               	goto	l1559
 12506  0F83  2F75               	goto	l6253
 12507  0F84                     l6257:	
 12508  0F84  0855               	movf	___ftadd@exp1,w
 12509  0F85  0254               	subwf	___ftadd@exp2,w
 12510  0F86  1803               	skipnc
 12511  0F87  2FA9               	goto	l1559
 12512  0F88                     l6259:	
 12513  0F88  3001               	movlw	1
 12514  0F89                     u5965:	
 12515  0F89  35C9               	lslf	___ftadd@f1,f
 12516  0F8A  0DCA               	rlf	___ftadd@f1+1,f
 12517  0F8B  0DCB               	rlf	___ftadd@f1+2,f
 12518  0F8C  0B89               	decfsz	9,f
 12519  0F8D  2F89               	goto	u5965
 12520  0F8E  3001               	movlw	1
 12521  0F8F  02D5               	subwf	___ftadd@exp1,f
 12522  0F90  0854               	movf	___ftadd@exp2,w
 12523  0F91  0655               	xorwf	___ftadd@exp1,w
 12524  0F92  1903               	skipnz
 12525  0F93  2FA5               	goto	l6267
 12526  0F94  3001               	movlw	1
 12527  0F95  02D3               	subwf	___ftadd@sign,f
 12528  0F96  0853               	movf	___ftadd@sign,w
 12529  0F97  3907               	andlw	7
 12530  0F98  1903               	btfsc	3,2
 12531  0F99  2FA5               	goto	l6267
 12532  0F9A  2F88               	goto	l6259
 12533  0F9B                     l6265:	
 12534  0F9B  3001               	movlw	1
 12535  0F9C                     u5995:	
 12536  0F9C  36CE               	lsrf	___ftadd@f2+2,f
 12537  0F9D  0CCD               	rrf	___ftadd@f2+1,f
 12538  0F9E  0CCC               	rrf	___ftadd@f2,f
 12539  0F9F  0B89               	decfsz	9,f
 12540  0FA0  2F9C               	goto	u5995
 12541  0FA1  3001               	movlw	1
 12542  0FA2  00CF               	movwf	??___ftadd
 12543  0FA3  084F               	movf	??___ftadd,w
 12544  0FA4  07D4               	addwf	___ftadd@exp2,f
 12545  0FA5                     l6267:	
 12546  0FA5  0855               	movf	___ftadd@exp1,w
 12547  0FA6  0654               	xorwf	___ftadd@exp2,w
 12548  0FA7  1D03               	skipz
 12549  0FA8  2F9B               	goto	l6265
 12550  0FA9                     l1559:	
 12551  0FA9  1FD3               	btfss	___ftadd@sign,7
 12552  0FAA  2FBB               	goto	l6271
 12553  0FAB  30FF               	movlw	255
 12554  0FAC  06C9               	xorwf	___ftadd@f1,f
 12555  0FAD  30FF               	movlw	255
 12556  0FAE  06CA               	xorwf	___ftadd@f1+1,f
 12557  0FAF  30FF               	movlw	255
 12558  0FB0  06CB               	xorwf	___ftadd@f1+2,f
 12559  0FB1  3001               	movlw	1
 12560  0FB2  07C9               	addwf	___ftadd@f1,f
 12561  0FB3  3000               	movlw	0
 12562  0FB4  1803               	skipnc
 12563  0FB5  3001               	movlw	1
 12564  0FB6  07CA               	addwf	___ftadd@f1+1,f
 12565  0FB7  3000               	movlw	0
 12566  0FB8  1803               	skipnc
 12567  0FB9  3001               	movlw	1
 12568  0FBA  07CB               	addwf	___ftadd@f1+2,f
 12569  0FBB                     l6271:	
 12570  0FBB  1F53               	btfss	___ftadd@sign,6
 12571  0FBC  2FCD               	goto	l6275
 12572  0FBD  30FF               	movlw	255
 12573  0FBE  06CC               	xorwf	___ftadd@f2,f
 12574  0FBF  30FF               	movlw	255
 12575  0FC0  06CD               	xorwf	___ftadd@f2+1,f
 12576  0FC1  30FF               	movlw	255
 12577  0FC2  06CE               	xorwf	___ftadd@f2+2,f
 12578  0FC3  3001               	movlw	1
 12579  0FC4  07CC               	addwf	___ftadd@f2,f
 12580  0FC5  3000               	movlw	0
 12581  0FC6  1803               	skipnc
 12582  0FC7  3001               	movlw	1
 12583  0FC8  07CD               	addwf	___ftadd@f2+1,f
 12584  0FC9  3000               	movlw	0
 12585  0FCA  1803               	skipnc
 12586  0FCB  3001               	movlw	1
 12587  0FCC  07CE               	addwf	___ftadd@f2+2,f
 12588  0FCD                     l6275:	
 12589  0FCD  01D3               	clrf	___ftadd@sign
 12590  0FCE  0849               	movf	___ftadd@f1,w
 12591  0FCF  07CC               	addwf	___ftadd@f2,f
 12592  0FD0  084A               	movf	___ftadd@f1+1,w
 12593  0FD1  3DCD               	addwfc	___ftadd@f2+1,f
 12594  0FD2  084B               	movf	___ftadd@f1+2,w
 12595  0FD3  3DCE               	addwfc	___ftadd@f2+2,f
 12596  0FD4  1FCE               	btfss	___ftadd@f2+2,7
 12597  0FD5  2FE8               	goto	l6285
 12598  0FD6  30FF               	movlw	255
 12599  0FD7  06CC               	xorwf	___ftadd@f2,f
 12600  0FD8  30FF               	movlw	255
 12601  0FD9  06CD               	xorwf	___ftadd@f2+1,f
 12602  0FDA  30FF               	movlw	255
 12603  0FDB  06CE               	xorwf	___ftadd@f2+2,f
 12604  0FDC  3001               	movlw	1
 12605  0FDD  07CC               	addwf	___ftadd@f2,f
 12606  0FDE  3000               	movlw	0
 12607  0FDF  1803               	skipnc
 12608  0FE0  3001               	movlw	1
 12609  0FE1  07CD               	addwf	___ftadd@f2+1,f
 12610  0FE2  3000               	movlw	0
 12611  0FE3  1803               	skipnc
 12612  0FE4  3001               	movlw	1
 12613  0FE5  07CE               	addwf	___ftadd@f2+2,f
 12614  0FE6  01D3               	clrf	___ftadd@sign
 12615  0FE7  0AD3               	incf	___ftadd@sign,f
 12616  0FE8                     l6285:	
 12617  0FE8  084C               	movf	___ftadd@f2,w
 12618  0FE9  00A1               	movwf	___ftpack@arg
 12619  0FEA  084D               	movf	___ftadd@f2+1,w
 12620  0FEB  00A2               	movwf	___ftpack@arg+1
 12621  0FEC  084E               	movf	___ftadd@f2+2,w
 12622  0FED  00A3               	movwf	___ftpack@arg+2
 12623  0FEE  0855               	movf	___ftadd@exp1,w
 12624  0FEF  00CF               	movwf	??___ftadd
 12625  0FF0  084F               	movf	??___ftadd,w
 12626  0FF1  00A4               	movwf	___ftpack@exp
 12627  0FF2  0853               	movf	___ftadd@sign,w
 12628  0FF3  00D0               	movwf	??___ftadd+1
 12629  0FF4  0850               	movf	??___ftadd+1,w
 12630  0FF5  00A5               	movwf	___ftpack@sign
 12631  0FF6  318A  22A2         	fcall	___ftpack
 12632  0FF8  0020               	movlb	0	; select bank0
 12633  0FF9  0821               	movf	?___ftpack,w
 12634  0FFA  00C9               	movwf	?___ftadd
 12635  0FFB  0822               	movf	?___ftpack+1,w
 12636  0FFC  00CA               	movwf	?___ftadd+1
 12637  0FFD  0823               	movf	?___ftpack+2,w
 12638  0FFE  00CB               	movwf	?___ftadd+2
 12639  0FFF  0008               	return
 12640  1000                     __end_of___ftadd:	
 12641                           
 12642                           	psect	text64
 12643  1640                     __ptext64:	
 12644 ;; *************** function ___awtoft *****************
 12645 ;; Defined at:
 12646 ;;		line 32 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\awtoft.c"
 12647 ;; Parameters:    Size  Location     Type
 12648 ;;  c               2    9[BANK0 ] int 
 12649 ;; Auto vars:     Size  Location     Type
 12650 ;;  sign            1   14[BANK0 ] unsigned char 
 12651 ;; Return value:  Size  Location     Type
 12652 ;;                  3    9[BANK0 ] float 
 12653 ;; Registers used:
 12654 ;;		wreg, status,2, status,0, pclath, cstack
 12655 ;; Tracked objects:
 12656 ;;		On entry : 0/0
 12657 ;;		On exit  : 0/0
 12658 ;;		Unchanged: 0/0
 12659 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12660 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12661 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12662 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12663 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12664 ;;Total ram usage:        6 bytes
 12665 ;; Hardware stack levels used:    1
 12666 ;; Hardware stack levels required when called:    5
 12667 ;; This function calls:
 12668 ;;		___ftpack
 12669 ;; This function is called by:
 12670 ;;		_BMP_readTemperature
 12671 ;;		_HMC5883L_GetCompassDirection
 12672 ;; This function uses a non-reentrant model
 12673 ;;
 12674                           
 12675                           
 12676                           ;psect for function ___awtoft
 12677  1640                     ___awtoft:	
 12678                           
 12679                           ;incstack = 0
 12680                           ; Regs used in ___awtoft: [wreg+status,2+status,0+pclath+cstack]
 12681  1640  0020               	movlb	0	; select bank0
 12682  1641  01AE               	clrf	___awtoft@sign
 12683  1642  1FAA               	btfss	___awtoft@c+1,7
 12684  1643  2E4B               	goto	l6215
 12685  1644  09A9               	comf	___awtoft@c,f
 12686  1645  09AA               	comf	___awtoft@c+1,f
 12687  1646  0AA9               	incf	___awtoft@c,f
 12688  1647  1903               	skipnz
 12689  1648  0AAA               	incf	___awtoft@c+1,f
 12690  1649  01AE               	clrf	___awtoft@sign
 12691  164A  0AAE               	incf	___awtoft@sign,f
 12692  164B                     l6215:	
 12693  164B  0829               	movf	___awtoft@c,w
 12694  164C  00A1               	movwf	___ftpack@arg
 12695  164D  082A               	movf	___awtoft@c+1,w
 12696  164E  00A2               	movwf	___ftpack@arg+1
 12697  164F  01A3               	clrf	___ftpack@arg+2
 12698  1650  308E               	movlw	142
 12699  1651  00AC               	movwf	??___awtoft
 12700  1652  082C               	movf	??___awtoft,w
 12701  1653  00A4               	movwf	___ftpack@exp
 12702  1654  082E               	movf	___awtoft@sign,w
 12703  1655  00AD               	movwf	??___awtoft+1
 12704  1656  082D               	movf	??___awtoft+1,w
 12705  1657  00A5               	movwf	___ftpack@sign
 12706  1658  318A  22A2         	fcall	___ftpack
 12707  165A  0020               	movlb	0	; select bank0
 12708  165B  0821               	movf	?___ftpack,w
 12709  165C  00A9               	movwf	?___awtoft
 12710  165D  0822               	movf	?___ftpack+1,w
 12711  165E  00AA               	movwf	?___awtoft+1
 12712  165F  0823               	movf	?___ftpack+2,w
 12713  1660  00AB               	movwf	?___awtoft+2
 12714  1661  0008               	return
 12715  1662                     __end_of___awtoft:	
 12716                           
 12717                           	psect	text65
 12718  0829                     __ptext65:	
 12719 ;; *************** function ___altoft *****************
 12720 ;; Defined at:
 12721 ;;		line 42 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\altoft.c"
 12722 ;; Parameters:    Size  Location     Type
 12723 ;;  c               4    9[BANK0 ] long 
 12724 ;; Auto vars:     Size  Location     Type
 12725 ;;  sign            1   16[BANK0 ] unsigned char 
 12726 ;;  exp             1   15[BANK0 ] unsigned char 
 12727 ;; Return value:  Size  Location     Type
 12728 ;;                  3    9[BANK0 ] float 
 12729 ;; Registers used:
 12730 ;;		wreg, status,2, status,0, pclath, cstack
 12731 ;; Tracked objects:
 12732 ;;		On entry : 0/0
 12733 ;;		On exit  : 0/0
 12734 ;;		Unchanged: 0/0
 12735 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12736 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12737 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12738 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12739 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12740 ;;Total ram usage:        8 bytes
 12741 ;; Hardware stack levels used:    1
 12742 ;; Hardware stack levels required when called:    5
 12743 ;; This function calls:
 12744 ;;		___ftpack
 12745 ;; This function is called by:
 12746 ;;		_BMP_readTemperature
 12747 ;; This function uses a non-reentrant model
 12748 ;;
 12749                           
 12750                           
 12751                           ;psect for function ___altoft
 12752  0829                     ___altoft:	
 12753                           
 12754                           ;incstack = 0
 12755                           ; Regs used in ___altoft: [wreg+status,2+status,0+pclath+cstack]
 12756  0829  0020               	movlb	0	; select bank0
 12757  082A  01B0               	clrf	___altoft@sign
 12758  082B  308E               	movlw	142
 12759  082C  00AD               	movwf	??___altoft
 12760  082D  082D               	movf	??___altoft,w
 12761  082E  00AF               	movwf	___altoft@exp
 12762  082F  1FAC               	btfss	___altoft@c+3,7
 12763  0830  283E               	goto	l6201
 12764  0831  09A9               	comf	___altoft@c,f
 12765  0832  09AA               	comf	___altoft@c+1,f
 12766  0833  09AB               	comf	___altoft@c+2,f
 12767  0834  09AC               	comf	___altoft@c+3,f
 12768  0835  0AA9               	incf	___altoft@c,f
 12769  0836  1903               	skipnz
 12770  0837  0AAA               	incf	___altoft@c+1,f
 12771  0838  1903               	skipnz
 12772  0839  0AAB               	incf	___altoft@c+2,f
 12773  083A  1903               	skipnz
 12774  083B  0AAC               	incf	___altoft@c+3,f
 12775  083C  01B0               	clrf	___altoft@sign
 12776  083D  0AB0               	incf	___altoft@sign,f
 12777  083E                     l6201:	
 12778  083E  30FF               	movlw	255
 12779  083F  052C               	andwf	___altoft@c+3,w
 12780  0840  1903               	btfsc	3,2
 12781  0841  284E               	goto	l6203
 12782  0842  3001               	movlw	1
 12783  0843                     u5785:	
 12784  0843  36AC               	lsrf	___altoft@c+3,f
 12785  0844  0CAB               	rrf	___altoft@c+2,f
 12786  0845  0CAA               	rrf	___altoft@c+1,f
 12787  0846  0CA9               	rrf	___altoft@c,f
 12788  0847  0B89               	decfsz	9,f
 12789  0848  2843               	goto	u5785
 12790  0849  3001               	movlw	1
 12791  084A  00AD               	movwf	??___altoft
 12792  084B  082D               	movf	??___altoft,w
 12793  084C  07AF               	addwf	___altoft@exp,f
 12794  084D  283E               	goto	l6201
 12795  084E                     l6203:	
 12796  084E  0829               	movf	___altoft@c,w
 12797  084F  00A1               	movwf	___ftpack@arg
 12798  0850  082A               	movf	___altoft@c+1,w
 12799  0851  00A2               	movwf	___ftpack@arg+1
 12800  0852  082B               	movf	___altoft@c+2,w
 12801  0853  00A3               	movwf	___ftpack@arg+2
 12802  0854  082F               	movf	___altoft@exp,w
 12803  0855  00AD               	movwf	??___altoft
 12804  0856  082D               	movf	??___altoft,w
 12805  0857  00A4               	movwf	___ftpack@exp
 12806  0858  0830               	movf	___altoft@sign,w
 12807  0859  00AE               	movwf	??___altoft+1
 12808  085A  082E               	movf	??___altoft+1,w
 12809  085B  00A5               	movwf	___ftpack@sign
 12810  085C  318A  22A2         	fcall	___ftpack
 12811  085E  0020               	movlb	0	; select bank0
 12812  085F  0821               	movf	?___ftpack,w
 12813  0860  00A9               	movwf	?___altoft
 12814  0861  0822               	movf	?___ftpack+1,w
 12815  0862  00AA               	movwf	?___altoft+1
 12816  0863  0823               	movf	?___ftpack+2,w
 12817  0864  00AB               	movwf	?___altoft+2
 12818  0865  0008               	return
 12819  0866                     __end_of___altoft:	
 12820                           
 12821                           	psect	text66
 12822  0AA2                     __ptext66:	
 12823 ;; *************** function ___ftpack *****************
 12824 ;; Defined at:
 12825 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\float.c"
 12826 ;; Parameters:    Size  Location     Type
 12827 ;;  arg             3    1[BANK0 ] unsigned um
 12828 ;;  exp             1    4[BANK0 ] unsigned char 
 12829 ;;  sign            1    5[BANK0 ] unsigned char 
 12830 ;; Auto vars:     Size  Location     Type
 12831 ;;		None
 12832 ;; Return value:  Size  Location     Type
 12833 ;;                  3    1[BANK0 ] float 
 12834 ;; Registers used:
 12835 ;;		wreg, status,2, status,0
 12836 ;; Tracked objects:
 12837 ;;		On entry : 0/0
 12838 ;;		On exit  : 0/0
 12839 ;;		Unchanged: 0/0
 12840 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12841 ;;      Params:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12842 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12843 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12844 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12845 ;;Total ram usage:        8 bytes
 12846 ;; Hardware stack levels used:    1
 12847 ;; Hardware stack levels required when called:    4
 12848 ;; This function calls:
 12849 ;;		Nothing
 12850 ;; This function is called by:
 12851 ;;		___altoft
 12852 ;;		___awtoft
 12853 ;;		___ftadd
 12854 ;;		___ftdiv
 12855 ;;		___ftmul
 12856 ;;		___lwtoft
 12857 ;; This function uses a non-reentrant model
 12858 ;;
 12859                           
 12860                           
 12861                           ;psect for function ___ftpack
 12862  0AA2                     ___ftpack:	
 12863                           
 12864                           ;incstack = 0
 12865                           ; Regs used in ___ftpack: [wreg+status,2+status,0]
 12866  0AA2  0020               	movlb	0	; select bank0
 12867  0AA3  0824               	movf	___ftpack@exp,w
 12868  0AA4  1903               	btfsc	3,2
 12869  0AA5  2AAB               	goto	l5679
 12870  0AA6  0823               	movf	___ftpack@arg+2,w
 12871  0AA7  0422               	iorwf	___ftpack@arg+1,w
 12872  0AA8  0421               	iorwf	___ftpack@arg,w
 12873  0AA9  1D03               	skipz
 12874  0AAA  2ABC               	goto	l5685
 12875  0AAB                     l5679:	
 12876  0AAB  3000               	movlw	0
 12877  0AAC  00A1               	movwf	?___ftpack
 12878  0AAD  3000               	movlw	0
 12879  0AAE  00A2               	movwf	?___ftpack+1
 12880  0AAF  3000               	movlw	0
 12881  0AB0  00A3               	movwf	?___ftpack+2
 12882  0AB1  0008               	return
 12883  0AB2                     l5683:	
 12884  0AB2  3001               	movlw	1
 12885  0AB3  00A6               	movwf	??___ftpack
 12886  0AB4  0826               	movf	??___ftpack,w
 12887  0AB5  07A4               	addwf	___ftpack@exp,f
 12888  0AB6  3001               	movlw	1
 12889  0AB7                     u5125:	
 12890  0AB7  36A3               	lsrf	___ftpack@arg+2,f
 12891  0AB8  0CA2               	rrf	___ftpack@arg+1,f
 12892  0AB9  0CA1               	rrf	___ftpack@arg,f
 12893  0ABA  0B89               	decfsz	9,f
 12894  0ABB  2AB7               	goto	u5125
 12895  0ABC                     l5685:	
 12896  0ABC  30FE               	movlw	254
 12897  0ABD  0523               	andwf	___ftpack@arg+2,w
 12898  0ABE  1903               	btfsc	3,2
 12899  0ABF  2AD5               	goto	l1528
 12900  0AC0  2AB2               	goto	l5683
 12901  0AC1                     l5687:	
 12902  0AC1  3001               	movlw	1
 12903  0AC2  00A6               	movwf	??___ftpack
 12904  0AC3  0826               	movf	??___ftpack,w
 12905  0AC4  07A4               	addwf	___ftpack@exp,f
 12906  0AC5  3001               	movlw	1
 12907  0AC6  07A1               	addwf	___ftpack@arg,f
 12908  0AC7  3000               	movlw	0
 12909  0AC8  1803               	skipnc
 12910  0AC9  3001               	movlw	1
 12911  0ACA  07A2               	addwf	___ftpack@arg+1,f
 12912  0ACB  3000               	movlw	0
 12913  0ACC  1803               	skipnc
 12914  0ACD  3001               	movlw	1
 12915  0ACE  07A3               	addwf	___ftpack@arg+2,f
 12916  0ACF  3001               	movlw	1
 12917  0AD0                     u5145:	
 12918  0AD0  36A3               	lsrf	___ftpack@arg+2,f
 12919  0AD1  0CA2               	rrf	___ftpack@arg+1,f
 12920  0AD2  0CA1               	rrf	___ftpack@arg,f
 12921  0AD3  0B89               	decfsz	9,f
 12922  0AD4  2AD0               	goto	u5145
 12923  0AD5                     l1528:	
 12924  0AD5  30FF               	movlw	255
 12925  0AD6  0523               	andwf	___ftpack@arg+2,w
 12926  0AD7  1903               	btfsc	3,2
 12927  0AD8  2AE2               	goto	l5695
 12928  0AD9  2AC1               	goto	l5687
 12929  0ADA                     l5693:	
 12930  0ADA  3001               	movlw	1
 12931  0ADB  02A4               	subwf	___ftpack@exp,f
 12932  0ADC  3001               	movlw	1
 12933  0ADD                     u5165:	
 12934  0ADD  35A1               	lslf	___ftpack@arg,f
 12935  0ADE  0DA2               	rlf	___ftpack@arg+1,f
 12936  0ADF  0DA3               	rlf	___ftpack@arg+2,f
 12937  0AE0  0B89               	decfsz	9,f
 12938  0AE1  2ADD               	goto	u5165
 12939  0AE2                     l5695:	
 12940  0AE2  1BA2               	btfsc	___ftpack@arg+1,7
 12941  0AE3  2AE8               	goto	l1535
 12942  0AE4  3002               	movlw	2
 12943  0AE5  0224               	subwf	___ftpack@exp,w
 12944  0AE6  1803               	skipnc
 12945  0AE7  2ADA               	goto	l5693
 12946  0AE8                     l1535:	
 12947  0AE8  1824               	btfsc	___ftpack@exp,0
 12948  0AE9  2AF0               	goto	l1536
 12949  0AEA  30FF               	movlw	255
 12950  0AEB  05A1               	andwf	___ftpack@arg,f
 12951  0AEC  307F               	movlw	127
 12952  0AED  05A2               	andwf	___ftpack@arg+1,f
 12953  0AEE  30FF               	movlw	255
 12954  0AEF  05A3               	andwf	___ftpack@arg+2,f
 12955  0AF0                     l1536:	
 12956  0AF0  1003               	clrc
 12957  0AF1  0CA4               	rrf	___ftpack@exp,f
 12958  0AF2  0824               	movf	___ftpack@exp,w
 12959  0AF3  00A6               	movwf	??___ftpack
 12960  0AF4  01A7               	clrf	??___ftpack+1
 12961  0AF5  01A8               	clrf	??___ftpack+2
 12962  0AF6  3010               	movlw	16
 12963  0AF7                     u5205:	
 12964  0AF7  35A6               	lslf	??___ftpack,f
 12965  0AF8  0DA7               	rlf	??___ftpack+1,f
 12966  0AF9  0DA8               	rlf	??___ftpack+2,f
 12967  0AFA  0B89               	decfsz	9,f
 12968  0AFB  2AF7               	goto	u5205
 12969  0AFC  0826               	movf	??___ftpack,w
 12970  0AFD  04A1               	iorwf	___ftpack@arg,f
 12971  0AFE  0827               	movf	??___ftpack+1,w
 12972  0AFF  04A2               	iorwf	___ftpack@arg+1,f
 12973  0B00  0828               	movf	??___ftpack+2,w
 12974  0B01  04A3               	iorwf	___ftpack@arg+2,f
 12975  0B02  0825               	movf	___ftpack@sign,w
 12976  0B03  1903               	btfsc	3,2
 12977  0B04  0008               	return
 12978  0B05  17A3               	bsf	___ftpack@arg+2,7
 12979  0B06  0008               	return
 12980  0B07                     __end_of___ftpack:	
 12981                           
 12982                           	psect	text67
 12983  077E                     __ptext67:	
 12984 ;; *************** function ___aldiv *****************
 12985 ;; Defined at:
 12986 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\aldiv.c"
 12987 ;; Parameters:    Size  Location     Type
 12988 ;;  divisor         4    1[BANK0 ] long 
 12989 ;;  dividend        4    5[BANK0 ] long 
 12990 ;; Auto vars:     Size  Location     Type
 12991 ;;  quotient        4   12[BANK0 ] long 
 12992 ;;  sign            1   11[BANK0 ] unsigned char 
 12993 ;;  counter         1   10[BANK0 ] unsigned char 
 12994 ;; Return value:  Size  Location     Type
 12995 ;;                  4    1[BANK0 ] long 
 12996 ;; Registers used:
 12997 ;;		wreg, status,2, status,0
 12998 ;; Tracked objects:
 12999 ;;		On entry : 0/0
 13000 ;;		On exit  : 0/0
 13001 ;;		Unchanged: 0/0
 13002 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13003 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13004 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13005 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13006 ;;      Totals:         0      15       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13007 ;;Total ram usage:       15 bytes
 13008 ;; Hardware stack levels used:    1
 13009 ;; Hardware stack levels required when called:    4
 13010 ;; This function calls:
 13011 ;;		Nothing
 13012 ;; This function is called by:
 13013 ;;		_BMP_readTemperature
 13014 ;;		_Wireless_packageData
 13015 ;; This function uses a non-reentrant model
 13016 ;;
 13017                           
 13018                           
 13019                           ;psect for function ___aldiv
 13020  077E                     ___aldiv:	
 13021                           
 13022                           ;incstack = 0
 13023                           ; Regs used in ___aldiv: [wreg+status,2+status,0]
 13024  077E  0020               	movlb	0	; select bank0
 13025  077F  01AB               	clrf	___aldiv@sign
 13026  0780  1FA4               	btfss	___aldiv@divisor+3,7
 13027  0781  2F8F               	goto	l1394
 13028  0782  09A1               	comf	___aldiv@divisor,f
 13029  0783  09A2               	comf	___aldiv@divisor+1,f
 13030  0784  09A3               	comf	___aldiv@divisor+2,f
 13031  0785  09A4               	comf	___aldiv@divisor+3,f
 13032  0786  0AA1               	incf	___aldiv@divisor,f
 13033  0787  1903               	skipnz
 13034  0788  0AA2               	incf	___aldiv@divisor+1,f
 13035  0789  1903               	skipnz
 13036  078A  0AA3               	incf	___aldiv@divisor+2,f
 13037  078B  1903               	skipnz
 13038  078C  0AA4               	incf	___aldiv@divisor+3,f
 13039  078D  01AB               	clrf	___aldiv@sign
 13040  078E  0AAB               	incf	___aldiv@sign,f
 13041  078F                     l1394:	
 13042  078F  1FA8               	btfss	___aldiv@dividend+3,7
 13043  0790  2FA0               	goto	l6161
 13044  0791  09A5               	comf	___aldiv@dividend,f
 13045  0792  09A6               	comf	___aldiv@dividend+1,f
 13046  0793  09A7               	comf	___aldiv@dividend+2,f
 13047  0794  09A8               	comf	___aldiv@dividend+3,f
 13048  0795  0AA5               	incf	___aldiv@dividend,f
 13049  0796  1903               	skipnz
 13050  0797  0AA6               	incf	___aldiv@dividend+1,f
 13051  0798  1903               	skipnz
 13052  0799  0AA7               	incf	___aldiv@dividend+2,f
 13053  079A  1903               	skipnz
 13054  079B  0AA8               	incf	___aldiv@dividend+3,f
 13055  079C  3001               	movlw	1
 13056  079D  00A9               	movwf	??___aldiv
 13057  079E  0829               	movf	??___aldiv,w
 13058  079F  06AB               	xorwf	___aldiv@sign,f
 13059  07A0                     l6161:	
 13060  07A0  3000               	movlw	0
 13061  07A1  00AF               	movwf	___aldiv@quotient+3
 13062  07A2  3000               	movlw	0
 13063  07A3  00AE               	movwf	___aldiv@quotient+2
 13064  07A4  3000               	movlw	0
 13065  07A5  00AD               	movwf	___aldiv@quotient+1
 13066  07A6  3000               	movlw	0
 13067  07A7  00AC               	movwf	___aldiv@quotient
 13068  07A8  0824               	movf	___aldiv@divisor+3,w
 13069  07A9  0423               	iorwf	___aldiv@divisor+2,w
 13070  07AA  0422               	iorwf	___aldiv@divisor+1,w
 13071  07AB  0421               	iorwf	___aldiv@divisor,w
 13072  07AC  1903               	skipnz
 13073  07AD  2FE9               	goto	l6183
 13074  07AE  01AA               	clrf	___aldiv@counter
 13075  07AF  0AAA               	incf	___aldiv@counter,f
 13076  07B0                     l6169:	
 13077  07B0  1BA4               	btfsc	___aldiv@divisor+3,7
 13078  07B1  2FBE               	goto	l6171
 13079  07B2  3001               	movlw	1
 13080  07B3                     u5705:	
 13081  07B3  35A1               	lslf	___aldiv@divisor,f
 13082  07B4  0DA2               	rlf	___aldiv@divisor+1,f
 13083  07B5  0DA3               	rlf	___aldiv@divisor+2,f
 13084  07B6  0DA4               	rlf	___aldiv@divisor+3,f
 13085  07B7  0B89               	decfsz	9,f
 13086  07B8  2FB3               	goto	u5705
 13087  07B9  3001               	movlw	1
 13088  07BA  00A9               	movwf	??___aldiv
 13089  07BB  0829               	movf	??___aldiv,w
 13090  07BC  07AA               	addwf	___aldiv@counter,f
 13091  07BD  2FB0               	goto	l6169
 13092  07BE                     l6171:	
 13093  07BE  3001               	movlw	1
 13094  07BF                     u5725:	
 13095  07BF  35AC               	lslf	___aldiv@quotient,f
 13096  07C0  0DAD               	rlf	___aldiv@quotient+1,f
 13097  07C1  0DAE               	rlf	___aldiv@quotient+2,f
 13098  07C2  0DAF               	rlf	___aldiv@quotient+3,f
 13099  07C3  0B89               	decfsz	9,f
 13100  07C4  2FBF               	goto	u5725
 13101  07C5  0824               	movf	___aldiv@divisor+3,w
 13102  07C6  0228               	subwf	___aldiv@dividend+3,w
 13103  07C7  1D03               	skipz
 13104  07C8  2FD3               	goto	u5735
 13105  07C9  0823               	movf	___aldiv@divisor+2,w
 13106  07CA  0227               	subwf	___aldiv@dividend+2,w
 13107  07CB  1D03               	skipz
 13108  07CC  2FD3               	goto	u5735
 13109  07CD  0822               	movf	___aldiv@divisor+1,w
 13110  07CE  0226               	subwf	___aldiv@dividend+1,w
 13111  07CF  1D03               	skipz
 13112  07D0  2FD3               	goto	u5735
 13113  07D1  0821               	movf	___aldiv@divisor,w
 13114  07D2  0225               	subwf	___aldiv@dividend,w
 13115  07D3                     u5735:	
 13116  07D3  1C03               	skipc
 13117  07D4  2FDE               	goto	l6179
 13118  07D5  0821               	movf	___aldiv@divisor,w
 13119  07D6  02A5               	subwf	___aldiv@dividend,f
 13120  07D7  0822               	movf	___aldiv@divisor+1,w
 13121  07D8  3BA6               	subwfb	___aldiv@dividend+1,f
 13122  07D9  0823               	movf	___aldiv@divisor+2,w
 13123  07DA  3BA7               	subwfb	___aldiv@dividend+2,f
 13124  07DB  0824               	movf	___aldiv@divisor+3,w
 13125  07DC  3BA8               	subwfb	___aldiv@dividend+3,f
 13126  07DD  142C               	bsf	___aldiv@quotient,0
 13127  07DE                     l6179:	
 13128  07DE  3001               	movlw	1
 13129  07DF                     u5745:	
 13130  07DF  36A4               	lsrf	___aldiv@divisor+3,f
 13131  07E0  0CA3               	rrf	___aldiv@divisor+2,f
 13132  07E1  0CA2               	rrf	___aldiv@divisor+1,f
 13133  07E2  0CA1               	rrf	___aldiv@divisor,f
 13134  07E3  0B89               	decfsz	9,f
 13135  07E4  2FDF               	goto	u5745
 13136  07E5  3001               	movlw	1
 13137  07E6  02AA               	subwf	___aldiv@counter,f
 13138  07E7  1D03               	btfss	3,2
 13139  07E8  2FBE               	goto	l6171
 13140  07E9                     l6183:	
 13141  07E9  082B               	movf	___aldiv@sign,w
 13142  07EA  1903               	btfsc	3,2
 13143  07EB  2FF7               	goto	l6187
 13144  07EC  09AC               	comf	___aldiv@quotient,f
 13145  07ED  09AD               	comf	___aldiv@quotient+1,f
 13146  07EE  09AE               	comf	___aldiv@quotient+2,f
 13147  07EF  09AF               	comf	___aldiv@quotient+3,f
 13148  07F0  0AAC               	incf	___aldiv@quotient,f
 13149  07F1  1903               	skipnz
 13150  07F2  0AAD               	incf	___aldiv@quotient+1,f
 13151  07F3  1903               	skipnz
 13152  07F4  0AAE               	incf	___aldiv@quotient+2,f
 13153  07F5  1903               	skipnz
 13154  07F6  0AAF               	incf	___aldiv@quotient+3,f
 13155  07F7                     l6187:	
 13156  07F7  082F               	movf	___aldiv@quotient+3,w
 13157  07F8  00A4               	movwf	?___aldiv+3
 13158  07F9  082E               	movf	___aldiv@quotient+2,w
 13159  07FA  00A3               	movwf	?___aldiv+2
 13160  07FB  082D               	movf	___aldiv@quotient+1,w
 13161  07FC  00A2               	movwf	?___aldiv+1
 13162  07FD  082C               	movf	___aldiv@quotient,w
 13163  07FE  00A1               	movwf	?___aldiv
 13164  07FF  0008               	return
 13165  0800                     __end_of___aldiv:	
 13166                           
 13167                           	psect	text68
 13168  08AB                     __ptext68:	
 13169 ;; *************** function _HMC5883L_ReadBits *****************
 13170 ;; Defined at:
 13171 ;;		line 418 in file "hmc5883l.c"
 13172 ;; Parameters:    Size  Location     Type
 13173 ;;  slaveAddr       1    wreg     unsigned char 
 13174 ;;  regAddr         1   35[BANK0 ] unsigned char 
 13175 ;;  bitStart        1   36[BANK0 ] unsigned char 
 13176 ;;  length          1   37[BANK0 ] unsigned char 
 13177 ;;  data            1   38[BANK0 ] PTR unsigned char 
 13178 ;;		 -> BMP_readTemperature@tmp(1), HMC5883L_GetHeading@tmp(1), HMC5883L_GetMode@tmp(1), HMC5883L_GetGain@tmp(1), 
 13179 ;;		 -> HMC5883L_GetMeasurementBias@tmp(1), HMC5883L_GetDataRate@tmp(1), HMC5883L_GetSampleAveraging@tmp(1), 
 13180 ;; Auto vars:     Size  Location     Type
 13181 ;;  slaveAddr       1   42[BANK0 ] unsigned char 
 13182 ;;  mask            1   43[BANK0 ] unsigned char 
 13183 ;;  tmp             1   44[BANK0 ] unsigned char 
 13184 ;; Return value:  Size  Location     Type
 13185 ;;                  1    wreg      unsigned char 
 13186 ;; Registers used:
 13187 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13188 ;; Tracked objects:
 13189 ;;		On entry : 0/0
 13190 ;;		On exit  : 0/0
 13191 ;;		Unchanged: 0/0
 13192 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13193 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13194 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13195 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13196 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13197 ;;Total ram usage:       10 bytes
 13198 ;; Hardware stack levels used:    1
 13199 ;; Hardware stack levels required when called:    8
 13200 ;; This function calls:
 13201 ;;		_HMC5883L_I2C_BufferRead
 13202 ;; This function is called by:
 13203 ;;		_BMP_readTemperature
 13204 ;;		_HMC5883L_GetSampleAveraging
 13205 ;;		_HMC5883L_GetDataRate
 13206 ;;		_HMC5883L_GetMeasurementBias
 13207 ;;		_HMC5883L_GetGain
 13208 ;;		_HMC5883L_GetMode
 13209 ;;		_HMC5883L_GetHeading
 13210 ;; This function uses a non-reentrant model
 13211 ;;
 13212                           
 13213                           
 13214                           ;psect for function _HMC5883L_ReadBits
 13215  08AB                     _HMC5883L_ReadBits:	
 13216                           
 13217                           ;incstack = 0
 13218                           ; Regs used in _HMC5883L_ReadBits: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 13219                           ;HMC5883L_ReadBits@slaveAddr stored from wreg
 13220  08AB  0020               	movlb	0	; select bank0
 13221  08AC  00CA               	movwf	HMC5883L_ReadBits@slaveAddr
 13222                           
 13223                           ;hmc5883l.c: 420: uint8_t tmp;
 13224                           ;hmc5883l.c: 422: if(HMC5883L_I2C_BufferRead(slaveAddr, &tmp, regAddr, 1))
 13225  08AD  304C               	movlw	low HMC5883L_ReadBits@tmp
 13226  08AE  00BC               	movwf	HMC5883L_I2C_BufferRead@pBuffer
 13227  08AF  3000               	movlw	high HMC5883L_ReadBits@tmp
 13228  08B0  00BD               	movwf	HMC5883L_I2C_BufferRead@pBuffer+1
 13229  08B1  0843               	movf	HMC5883L_ReadBits@regAddr,w
 13230  08B2  00C7               	movwf	??_HMC5883L_ReadBits
 13231  08B3  0847               	movf	??_HMC5883L_ReadBits,w
 13232  08B4  00BE               	movwf	HMC5883L_I2C_BufferRead@ReadAddr
 13233  08B5  3001               	movlw	1
 13234  08B6  00BF               	movwf	HMC5883L_I2C_BufferRead@NumByteToRead
 13235  08B7  3000               	movlw	0
 13236  08B8  00C0               	movwf	HMC5883L_I2C_BufferRead@NumByteToRead+1
 13237  08B9  084A               	movf	HMC5883L_ReadBits@slaveAddr,w
 13238  08BA  3193  23F5  3188   	fcall	_HMC5883L_I2C_BufferRead
 13239  08BD  3A00               	xorlw	0
 13240  08BE  1903               	skipnz
 13241  08BF  28EF               	goto	l6117
 13242                           
 13243                           ;hmc5883l.c: 423: {
 13244                           ;hmc5883l.c: 424: uint8_t mask = ((1 << length) - 1) << (bitStart - length + 1);
 13245  08C0  3001               	movlw	1
 13246  08C1  0020               	movlb	0	; select bank0
 13247  08C2  00C7               	movwf	??_HMC5883L_ReadBits
 13248  08C3  0A45               	incf	HMC5883L_ReadBits@length,w
 13249  08C4  28C6               	goto	u5614
 13250  08C5                     u5615:	
 13251  08C5  35C7               	lslf	??_HMC5883L_ReadBits,f
 13252  08C6                     u5614:	
 13253  08C6  0B89               	decfsz	9,f
 13254  08C7  28C5               	goto	u5615
 13255  08C8  0847               	movf	??_HMC5883L_ReadBits,w
 13256  08C9  3EFF               	addlw	255
 13257  08CA  00C8               	movwf	??_HMC5883L_ReadBits+1
 13258  08CB  0345               	decf	HMC5883L_ReadBits@length,w
 13259  08CC  3AFF               	xorlw	255
 13260  08CD  0744               	addwf	HMC5883L_ReadBits@bitStart,w
 13261  08CE  3E01               	addlw	1
 13262  08CF  0A89               	incf	9,f
 13263  08D0  28D2               	goto	u5624
 13264  08D1                     u5625:	
 13265  08D1  35C8               	lslf	??_HMC5883L_ReadBits+1,f
 13266  08D2                     u5624:	
 13267  08D2  0B89               	decfsz	9,f
 13268  08D3  28D1               	goto	u5625
 13269  08D4  0848               	movf	??_HMC5883L_ReadBits+1,w
 13270  08D5  00C9               	movwf	??_HMC5883L_ReadBits+2
 13271  08D6  0849               	movf	??_HMC5883L_ReadBits+2,w
 13272  08D7  00CB               	movwf	HMC5883L_ReadBits@mask
 13273                           
 13274                           ;hmc5883l.c: 425: tmp &= mask;
 13275  08D8  084B               	movf	HMC5883L_ReadBits@mask,w
 13276  08D9  00C7               	movwf	??_HMC5883L_ReadBits
 13277  08DA  0847               	movf	??_HMC5883L_ReadBits,w
 13278  08DB  05CC               	andwf	HMC5883L_ReadBits@tmp,f
 13279                           
 13280                           ;hmc5883l.c: 426: tmp >>= (bitStart - length + 1);
 13281  08DC  0345               	decf	HMC5883L_ReadBits@length,w
 13282  08DD  3AFF               	xorlw	255
 13283  08DE  0744               	addwf	HMC5883L_ReadBits@bitStart,w
 13284  08DF  3E01               	addlw	1
 13285  08E0  0A89               	incf	9,f
 13286  08E1  28E4               	goto	u5630
 13287  08E2                     u5635:	
 13288  08E2  1003               	clrc
 13289  08E3  0CCC               	rrf	HMC5883L_ReadBits@tmp,f
 13290  08E4                     u5630:	
 13291  08E4  3EFF               	addlw	-1
 13292  08E5  1D03               	skipz
 13293  08E6  28E2               	goto	u5635
 13294                           
 13295                           ;hmc5883l.c: 427: *data = tmp;
 13296  08E7  084C               	movf	HMC5883L_ReadBits@tmp,w
 13297  08E8  00C7               	movwf	??_HMC5883L_ReadBits
 13298  08E9  0846               	movf	HMC5883L_ReadBits@data,w
 13299  08EA  0086               	movwf	6
 13300  08EB  0187               	clrf	7
 13301  08EC  0847               	movf	??_HMC5883L_ReadBits,w
 13302  08ED  0081               	movwf	1
 13303                           
 13304                           ;hmc5883l.c: 428: }
 13305  08EE  0008               	return
 13306  08EF                     l6117:	
 13307                           
 13308                           ;hmc5883l.c: 429: else return 0;
 13309  08EF  3000               	movlw	0
 13310  08F0  0008               	return
 13311  08F1                     __end_of_HMC5883L_ReadBits:	
 13312                           
 13313                           	psect	text69
 13314  13F5                     __ptext69:	
 13315 ;; *************** function _HMC5883L_I2C_BufferRead *****************
 13316 ;; Defined at:
 13317 ;;		line 471 in file "hmc5883l.c"
 13318 ;; Parameters:    Size  Location     Type
 13319 ;;  slaveAddr       1    wreg     unsigned char 
 13320 ;;  pBuffer         2   28[BANK0 ] PTR unsigned char 
 13321 ;;		 -> HMC5883L_ReadBit@tmp(1), HMC5883L_ReadBits@tmp(1), HMC5883L_WriteBit@tmp(1), HMC5883L_WriteBits@tmp(1), 
 13322 ;;		 -> heading(8), HMC5883L_TestConnection@tmp(3), MPU6050_ReadBit@tmp(1), MPU6050_ReadBits@tmp(1), 
 13323 ;;		 -> MPU6050_WriteBit@tmp(1), MPU6050_WriteBits@tmp(1), MPU6050_GetRawAccel@tempBuffer(6), MPU6050_GetRawAccelGyro@tm
      +pBuffer(14), 
 13324 ;;  ReadAddr        1   30[BANK0 ] unsigned char 
 13325 ;;  NumByteToRea    2   31[BANK0 ] unsigned short 
 13326 ;; Auto vars:     Size  Location     Type
 13327 ;;  slaveAddr       1   34[BANK0 ] unsigned char 
 13328 ;; Return value:  Size  Location     Type
 13329 ;;                  1    wreg      unsigned char 
 13330 ;; Registers used:
 13331 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13332 ;; Tracked objects:
 13333 ;;		On entry : 0/0
 13334 ;;		On exit  : 0/0
 13335 ;;		Unchanged: 0/0
 13336 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13337 ;;      Params:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13338 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13339 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13340 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13341 ;;Total ram usage:        7 bytes
 13342 ;; Hardware stack levels used:    1
 13343 ;; Hardware stack levels required when called:    7
 13344 ;; This function calls:
 13345 ;;		_I2C_BufferRead
 13346 ;; This function is called by:
 13347 ;;		_HMC5883L_ReadBits
 13348 ;;		_MPU6050_I2C_BufferRead
 13349 ;;		_HMC5883L_TestConnection
 13350 ;;		_HMC5883L_GetHeading
 13351 ;;		_HMC5883L_WriteBits
 13352 ;;		_HMC5883L_WriteBit
 13353 ;;		_HMC5883L_ReadBit
 13354 ;; This function uses a non-reentrant model
 13355 ;;
 13356                           
 13357                           
 13358                           ;psect for function _HMC5883L_I2C_BufferRead
 13359  13F5                     _HMC5883L_I2C_BufferRead:	
 13360                           
 13361                           ;incstack = 0
 13362                           ; Regs used in _HMC5883L_I2C_BufferRead: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+csta
      +                          ck]
 13363                           ;HMC5883L_I2C_BufferRead@slaveAddr stored from wreg
 13364  13F5  0020               	movlb	0	; select bank0
 13365  13F6  00C2               	movwf	HMC5883L_I2C_BufferRead@slaveAddr
 13366                           
 13367                           ;hmc5883l.c: 473: return(I2C_BufferRead(slaveAddr,pBuffer,ReadAddr,NumByteToRead));
 13368  13F7  083D               	movf	HMC5883L_I2C_BufferRead@pBuffer+1,w
 13369  13F8  00B2               	movwf	I2C_BufferRead@pBuffer+1
 13370  13F9  083C               	movf	HMC5883L_I2C_BufferRead@pBuffer,w
 13371  13FA  00B1               	movwf	I2C_BufferRead@pBuffer
 13372  13FB  083E               	movf	HMC5883L_I2C_BufferRead@ReadAddr,w
 13373  13FC  00C1               	movwf	??_HMC5883L_I2C_BufferRead
 13374  13FD  0841               	movf	??_HMC5883L_I2C_BufferRead,w
 13375  13FE  00B3               	movwf	I2C_BufferRead@ReadAddr
 13376  13FF  0840               	movf	HMC5883L_I2C_BufferRead@NumByteToRead+1,w
 13377  1400  00B5               	movwf	I2C_BufferRead@NumByteToRead+1
 13378  1401  083F               	movf	HMC5883L_I2C_BufferRead@NumByteToRead,w
 13379  1402  00B4               	movwf	I2C_BufferRead@NumByteToRead
 13380  1403  0842               	movf	HMC5883L_I2C_BufferRead@slaveAddr,w
 13381  1404  3189  21E6         	fcall	_I2C_BufferRead
 13382  1406  0008               	return
 13383  1407                     __end_of_HMC5883L_I2C_BufferRead:	
 13384                           
 13385                           	psect	text70
 13386  12D5                     __ptext70:	
 13387 ;; *************** function _Diag_getTempSensorHealth *****************
 13388 ;; Defined at:
 13389 ;;		line 25 in file "diagnostics.c"
 13390 ;; Parameters:    Size  Location     Type
 13391 ;;		None
 13392 ;; Auto vars:     Size  Location     Type
 13393 ;;		None
 13394 ;; Return value:  Size  Location     Type
 13395 ;;                  1    wreg      unsigned char 
 13396 ;; Registers used:
 13397 ;;		wreg
 13398 ;; Tracked objects:
 13399 ;;		On entry : 0/0
 13400 ;;		On exit  : 0/0
 13401 ;;		Unchanged: 0/0
 13402 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13403 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13404 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13405 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13406 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13407 ;;Total ram usage:        0 bytes
 13408 ;; Hardware stack levels used:    1
 13409 ;; Hardware stack levels required when called:    4
 13410 ;; This function calls:
 13411 ;;		Nothing
 13412 ;; This function is called by:
 13413 ;;		_BMP_readTemperature
 13414 ;; This function uses a non-reentrant model
 13415 ;;
 13416                           
 13417                           
 13418                           ;psect for function _Diag_getTempSensorHealth
 13419  12D5                     _Diag_getTempSensorHealth:	
 13420                           
 13421                           ;diagnostics.c: 27: return (sensorHealth.tempSensorHealth);
 13422                           
 13423                           ;incstack = 0
 13424                           ; Regs used in _Diag_getTempSensorHealth: [wreg]
 13425  12D5  0022               	movlb	2	; select bank2
 13426  12D6  086A               	movf	_sensorHealth^(0+256),w
 13427  12D7  0008               	return
 13428  12D8                     __end_of_Diag_getTempSensorHealth:	
 13429                           
 13430                           	psect	text71
 13431  0B07                     __ptext71:	
 13432 ;; *************** function _BMP_init *****************
 13433 ;; Defined at:
 13434 ;;		line 39 in file "bmp280.c"
 13435 ;; Parameters:    Size  Location     Type
 13436 ;;		None
 13437 ;; Auto vars:     Size  Location     Type
 13438 ;;  t               1   31[BANK0 ] unsigned char 
 13439 ;; Return value:  Size  Location     Type
 13440 ;;                  1    wreg      void 
 13441 ;; Registers used:
 13442 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13443 ;; Tracked objects:
 13444 ;;		On entry : 0/0
 13445 ;;		On exit  : 0/0
 13446 ;;		Unchanged: 0/0
 13447 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13448 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13449 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13450 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13451 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13452 ;;Total ram usage:        4 bytes
 13453 ;; Hardware stack levels used:    1
 13454 ;; Hardware stack levels required when called:    7
 13455 ;; This function calls:
 13456 ;;		_Diag_setTempSensorHealth
 13457 ;;		_I2C_BufferRead
 13458 ;;		_I2C_ByteWrite
 13459 ;; This function is called by:
 13460 ;;		_main
 13461 ;;		_BMP_readTemperature
 13462 ;; This function uses a non-reentrant model
 13463 ;;
 13464                           
 13465                           
 13466                           ;psect for function _BMP_init
 13467  0B07                     _BMP_init:	
 13468                           
 13469                           ;bmp280.c: 41: char t;
 13470                           ;bmp280.c: 42: t=0x40;
 13471                           
 13472                           ;incstack = 0
 13473                           ; Regs used in _BMP_init: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 13474  0B07  3040               	movlw	64
 13475  0B08  0020               	movlb	0	; select bank0
 13476  0B09  00BC               	movwf	??_BMP_init
 13477  0B0A  083C               	movf	??_BMP_init,w
 13478  0B0B  00BF               	movwf	BMP_init@t
 13479                           
 13480                           ;bmp280.c: 43: if(I2C_ByteWrite(0x76, &t, 0xF4)==0)
 13481  0B0C  303F               	movlw	(low (BMP_init@t| 0))& (0+255)
 13482  0B0D  00BC               	movwf	??_BMP_init
 13483  0B0E  083C               	movf	??_BMP_init,w
 13484  0B0F  00AF               	movwf	I2C_ByteWrite@pBuffer
 13485  0B10  30F4               	movlw	244
 13486  0B11  00BD               	movwf	??_BMP_init+1
 13487  0B12  083D               	movf	??_BMP_init+1,w
 13488  0B13  00B0               	movwf	I2C_ByteWrite@WriteAddr
 13489  0B14  3076               	movlw	118
 13490  0B15  3197  27C4  318B   	fcall	_I2C_ByteWrite
 13491  0B18  3A00               	xorlw	0
 13492  0B19  1D03               	skipz
 13493  0B1A  2B1F               	goto	l6007
 13494                           
 13495                           ;bmp280.c: 44: {
 13496                           ;bmp280.c: 45: Diag_setTempSensorHealth(0);
 13497  0B1B  3000               	movlw	0
 13498  0B1C  3193  2330         	fcall	_Diag_setTempSensorHealth
 13499                           
 13500                           ;bmp280.c: 46: return;
 13501  0B1E  0008               	return
 13502  0B1F                     l6007:	
 13503                           
 13504                           ;bmp280.c: 47: }
 13505                           ;bmp280.c: 48: t=0xE0;
 13506  0B1F  30E0               	movlw	224
 13507  0B20  0020               	movlb	0	; select bank0
 13508  0B21  00BC               	movwf	??_BMP_init
 13509  0B22  083C               	movf	??_BMP_init,w
 13510  0B23  00BF               	movwf	BMP_init@t
 13511                           
 13512                           ;bmp280.c: 50: if(I2C_BufferRead(0x76, b1, 0x88, 24)==0)
 13513  0B24  30A8               	movlw	low _b1
 13514  0B25  00B1               	movwf	I2C_BufferRead@pBuffer
 13515  0B26  3001               	movlw	high _b1
 13516  0B27  00B2               	movwf	I2C_BufferRead@pBuffer+1
 13517  0B28  3088               	movlw	136
 13518  0B29  00BC               	movwf	??_BMP_init
 13519  0B2A  083C               	movf	??_BMP_init,w
 13520  0B2B  00B3               	movwf	I2C_BufferRead@ReadAddr
 13521  0B2C  3018               	movlw	24
 13522  0B2D  00B4               	movwf	I2C_BufferRead@NumByteToRead
 13523  0B2E  3000               	movlw	0
 13524  0B2F  00B5               	movwf	I2C_BufferRead@NumByteToRead+1
 13525  0B30  3076               	movlw	118
 13526  0B31  3189  21E6  318B   	fcall	_I2C_BufferRead
 13527  0B34  3A00               	xorlw	0
 13528  0B35  1D03               	skipz
 13529  0B36  2B3B               	goto	l6015
 13530                           
 13531                           ;bmp280.c: 51: {
 13532                           ;bmp280.c: 52: Diag_setTempSensorHealth(0);
 13533  0B37  3000               	movlw	0
 13534  0B38  3193  2330         	fcall	_Diag_setTempSensorHealth
 13535                           
 13536                           ;bmp280.c: 53: return;
 13537  0B3A  0008               	return
 13538  0B3B                     l6015:	
 13539                           
 13540                           ;bmp280.c: 54: }
 13541                           ;bmp280.c: 55: dig_T1 = ((u16)b1[0] & 0xFF) + (((u16)b1[1] & 0xFF) * 256);
 13542  0B3B  0023               	movlb	3	; select bank3
 13543  0B3C  0829               	movf	(_b1^(0+384)+1),w
 13544  0B3D  0020               	movlb	0	; select bank0
 13545  0B3E  00BC               	movwf	??_BMP_init
 13546  0B3F  01BD               	clrf	??_BMP_init+1
 13547  0B40  083C               	movf	??_BMP_init,w
 13548  0B41  00BD               	movwf	??_BMP_init+1
 13549  0B42  01BC               	clrf	??_BMP_init
 13550  0B43  0023               	movlb	3	; select bank3
 13551  0B44  0828               	movf	_b1^(0+384),w
 13552  0B45  0020               	movlb	0	; select bank0
 13553  0B46  073C               	addwf	??_BMP_init,w
 13554  0B47  0021               	movlb	1	; select bank1
 13555  0B48  00D6               	movwf	_dig_T1^(0+128)
 13556  0B49  0020               	movlb	0	; select bank0
 13557  0B4A  083D               	movf	??_BMP_init+1,w
 13558  0B4B  1803               	skipnc
 13559  0B4C  0A3D               	incf	??_BMP_init+1,w
 13560  0B4D  0021               	movlb	1	; select bank1
 13561  0B4E  00D7               	movwf	(_dig_T1^(0+128)+1)
 13562                           
 13563                           ;bmp280.c: 56: dig_T2 = (int)b1[2] + ((int)b1[3] * 256);
 13564  0B4F  0023               	movlb	3	; select bank3
 13565  0B50  082B               	movf	(_b1^(0+384)+3),w
 13566  0B51  0020               	movlb	0	; select bank0
 13567  0B52  00BC               	movwf	??_BMP_init
 13568  0B53  01BD               	clrf	??_BMP_init+1
 13569  0B54  083C               	movf	??_BMP_init,w
 13570  0B55  00BD               	movwf	??_BMP_init+1
 13571  0B56  01BC               	clrf	??_BMP_init
 13572  0B57  0023               	movlb	3	; select bank3
 13573  0B58  082A               	movf	(_b1^(0+384)+2),w
 13574  0B59  0020               	movlb	0	; select bank0
 13575  0B5A  073C               	addwf	??_BMP_init,w
 13576  0B5B  0022               	movlb	2	; select bank2
 13577  0B5C  00D6               	movwf	_dig_T2^(0+256)
 13578  0B5D  0020               	movlb	0	; select bank0
 13579  0B5E  083D               	movf	??_BMP_init+1,w
 13580  0B5F  1803               	skipnc
 13581  0B60  0A3D               	incf	??_BMP_init+1,w
 13582  0B61  0022               	movlb	2	; select bank2
 13583  0B62  00D7               	movwf	(_dig_T2^(0+256)+1)
 13584                           
 13585                           ;bmp280.c: 57: dig_T3 = (int)b1[4] + ((int)b1[5] * 256);
 13586  0B63  0023               	movlb	3	; select bank3
 13587  0B64  082D               	movf	(_b1^(0+384)+5),w
 13588  0B65  0020               	movlb	0	; select bank0
 13589  0B66  00BC               	movwf	??_BMP_init
 13590  0B67  01BD               	clrf	??_BMP_init+1
 13591  0B68  083C               	movf	??_BMP_init,w
 13592  0B69  00BD               	movwf	??_BMP_init+1
 13593  0B6A  01BC               	clrf	??_BMP_init
 13594  0B6B  0023               	movlb	3	; select bank3
 13595  0B6C  082C               	movf	(_b1^(0+384)+4),w
 13596  0B6D  0020               	movlb	0	; select bank0
 13597  0B6E  073C               	addwf	??_BMP_init,w
 13598  0B6F  0022               	movlb	2	; select bank2
 13599  0B70  00D4               	movwf	_dig_T3^(0+256)
 13600  0B71  0020               	movlb	0	; select bank0
 13601  0B72  083D               	movf	??_BMP_init+1,w
 13602  0B73  1803               	skipnc
 13603  0B74  0A3D               	incf	??_BMP_init+1,w
 13604  0B75  0022               	movlb	2	; select bank2
 13605  0B76  00D5               	movwf	(_dig_T3^(0+256)+1)
 13606                           
 13607                           ;bmp280.c: 69: Diag_setTempSensorHealth(1);
 13608  0B77  3001               	movlw	1
 13609  0B78  3193  2330         	fcall	_Diag_setTempSensorHealth
 13610  0B7A  0008               	return
 13611  0B7B                     __end_of_BMP_init:	
 13612                           
 13613                           	psect	text72
 13614  17C4                     __ptext72:	
 13615 ;; *************** function _I2C_ByteWrite *****************
 13616 ;; Defined at:
 13617 ;;		line 3 in file "i2c_wrapper.c"
 13618 ;; Parameters:    Size  Location     Type
 13619 ;;  slaveAddr       1    wreg     unsigned char 
 13620 ;;  pBuffer         1   15[BANK0 ] PTR unsigned char 
 13621 ;;		 -> BMP_readTemperature@tmp(1), BMP_init@t(1), HMC5883L_WriteBit@tmp(1), HMC5883L_WriteBits@tmp(1), 
 13622 ;;		 -> HMC5883L_SetMode@tmp(1), HMC5883L_SetGain@tmp(1), HMC5883L_Initialize@tmp(1), MPU6050_WriteBit@tmp(1), 
 13623 ;;		 -> MPU6050_WriteBits@tmp(1), 
 13624 ;;  WriteAddr       1   16[BANK0 ] unsigned char 
 13625 ;; Auto vars:     Size  Location     Type
 13626 ;;  slaveAddr       1   21[BANK0 ] unsigned char 
 13627 ;;  data            2   22[BANK0 ] unsigned char [2]
 13628 ;;  status          1   24[BANK0 ] enum E3025
 13629 ;; Return value:  Size  Location     Type
 13630 ;;                  1    wreg      unsigned char 
 13631 ;; Registers used:
 13632 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13633 ;; Tracked objects:
 13634 ;;		On entry : 0/0
 13635 ;;		On exit  : 0/0
 13636 ;;		Unchanged: 0/0
 13637 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13638 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13639 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13640 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13641 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13642 ;;Total ram usage:       10 bytes
 13643 ;; Hardware stack levels used:    1
 13644 ;; Hardware stack levels required when called:    6
 13645 ;; This function calls:
 13646 ;;		_I2C2_MasterWrite
 13647 ;;		_Timeout_hasExpired
 13648 ;;		_Timeout_setTimeout
 13649 ;; This function is called by:
 13650 ;;		_BMP_init
 13651 ;;		_BMP_readTemperature
 13652 ;;		_HMC5883L_I2C_ByteWrite
 13653 ;; This function uses a non-reentrant model
 13654 ;;
 13655                           
 13656                           
 13657                           ;psect for function _I2C_ByteWrite
 13658  17C4                     _I2C_ByteWrite:	
 13659                           
 13660                           ;incstack = 0
 13661                           ; Regs used in _I2C_ByteWrite: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 13662                           ;I2C_ByteWrite@slaveAddr stored from wreg
 13663  17C4  0020               	movlb	0	; select bank0
 13664  17C5  00B5               	movwf	I2C_ByteWrite@slaveAddr
 13665                           
 13666                           ;i2c_wrapper.c: 5: u8 data[2];
 13667                           ;i2c_wrapper.c: 6: I2C2_MESSAGE_STATUS status=I2C2_MESSAGE_COMPLETE;
 13668  17C6  01B8               	clrf	I2C_ByteWrite@status
 13669                           
 13670                           ;i2c_wrapper.c: 8: data[0]= WriteAddr;
 13671  17C7  0830               	movf	I2C_ByteWrite@WriteAddr,w
 13672  17C8  00B1               	movwf	??_I2C_ByteWrite
 13673  17C9  0831               	movf	??_I2C_ByteWrite,w
 13674  17CA  00B6               	movwf	I2C_ByteWrite@data
 13675                           
 13676                           ;i2c_wrapper.c: 9: data[1]= *pBuffer;
 13677  17CB  082F               	movf	I2C_ByteWrite@pBuffer,w
 13678  17CC  0086               	movwf	6
 13679  17CD  0187               	clrf	7
 13680  17CE  0801               	movf	1,w
 13681  17CF  00B1               	movwf	??_I2C_ByteWrite
 13682  17D0  0831               	movf	??_I2C_ByteWrite,w
 13683  17D1  00B7               	movwf	I2C_ByteWrite@data+1
 13684                           
 13685                           ;i2c_wrapper.c: 12: I2C2_MasterWrite(data,2,slaveAddr, &status);
 13686  17D2  3002               	movlw	2
 13687  17D3  00B1               	movwf	??_I2C_ByteWrite
 13688  17D4  0831               	movf	??_I2C_ByteWrite,w
 13689  17D5  00A8               	movwf	I2C2_MasterWrite@length
 13690  17D6  0835               	movf	I2C_ByteWrite@slaveAddr,w
 13691  17D7  00B2               	movwf	??_I2C_ByteWrite+1
 13692  17D8  01B3               	clrf	??_I2C_ByteWrite+2
 13693  17D9  0832               	movf	??_I2C_ByteWrite+1,w
 13694  17DA  00A9               	movwf	I2C2_MasterWrite@address
 13695  17DB  0833               	movf	??_I2C_ByteWrite+2,w
 13696  17DC  00AA               	movwf	I2C2_MasterWrite@address+1
 13697  17DD  3038               	movlw	(low (I2C_ByteWrite@status| 0))& (0+255)
 13698  17DE  00B4               	movwf	??_I2C_ByteWrite+3
 13699  17DF  0834               	movf	??_I2C_ByteWrite+3,w
 13700  17E0  00AB               	movwf	I2C2_MasterWrite@pflag
 13701  17E1  3036               	movlw	(low (I2C_ByteWrite@data| 0))& (0+255)
 13702  17E2  3196  26AB  3197   	fcall	_I2C2_MasterWrite
 13703                           
 13704                           ;i2c_wrapper.c: 13: Timeout_setTimeout(200);
 13705  17E5  30C8               	movlw	200
 13706  17E6  0020               	movlb	0	; select bank0
 13707  17E7  00A1               	movwf	Timeout_setTimeout@val
 13708  17E8  3000               	movlw	0
 13709  17E9  00A2               	movwf	Timeout_setTimeout@val+1
 13710  17EA  3194  24B1  3197   	fcall	_Timeout_setTimeout
 13711  17ED                     l5751:	
 13712                           ;i2c_wrapper.c: 15: while(status == I2C2_MESSAGE_PENDING && Timeout_hasExpired()==0);
 13713                           
 13714  17ED  3002               	movlw	2
 13715  17EE  0020               	movlb	0	; select bank0
 13716  17EF  0638               	xorwf	I2C_ByteWrite@status,w
 13717  17F0  1D03               	btfss	3,2
 13718  17F1  2FF8               	goto	l5755
 13719  17F2  3188  20F1  3197   	fcall	_Timeout_hasExpired
 13720  17F5  3A00               	xorlw	0
 13721  17F6  1903               	skipnz
 13722  17F7  2FED               	goto	l5751
 13723  17F8                     l5755:	
 13724                           
 13725                           ;i2c_wrapper.c: 17: if (status == I2C2_MESSAGE_COMPLETE)
 13726  17F8  0020               	movlb	0	; select bank0
 13727  17F9  0838               	movf	I2C_ByteWrite@status,w
 13728  17FA  1D03               	btfss	3,2
 13729  17FB  2FFE               	goto	l5763
 13730                           
 13731                           ;i2c_wrapper.c: 18: {
 13732                           ;i2c_wrapper.c: 19: return 1;
 13733  17FC  3001               	movlw	1
 13734                           
 13735                           ;i2c_wrapper.c: 20: }
 13736  17FD  0008               	return
 13737  17FE                     l5763:	
 13738                           
 13739                           ;i2c_wrapper.c: 21: else
 13740                           ;i2c_wrapper.c: 22: {
 13741                           ;i2c_wrapper.c: 23: return 0;
 13742  17FE  3000               	movlw	0
 13743  17FF  0008               	return
 13744  1800                     __end_of_I2C_ByteWrite:	
 13745                           
 13746                           	psect	text73
 13747  09E6                     __ptext73:	
 13748 ;; *************** function _I2C_BufferRead *****************
 13749 ;; Defined at:
 13750 ;;		line 30 in file "i2c_wrapper.c"
 13751 ;; Parameters:    Size  Location     Type
 13752 ;;  slaveAddr       1    wreg     unsigned char 
 13753 ;;  pBuffer         2   17[BANK0 ] PTR unsigned char 
 13754 ;;		 -> data(8), b1(24), HMC5883L_ReadBit@tmp(1), HMC5883L_ReadBits@tmp(1), 
 13755 ;;		 -> HMC5883L_WriteBit@tmp(1), HMC5883L_WriteBits@tmp(1), heading(8), HMC5883L_TestConnection@tmp(3), 
 13756 ;;		 -> MPU6050_ReadBit@tmp(1), MPU6050_ReadBits@tmp(1), MPU6050_WriteBit@tmp(1), MPU6050_WriteBits@tmp(1), 
 13757 ;;		 -> MPU6050_GetRawAccel@tempBuffer(6), MPU6050_GetRawAccelGyro@tmpBuffer(14), 
 13758 ;;  ReadAddr        1   19[BANK0 ] unsigned char 
 13759 ;;  NumByteToRea    2   20[BANK0 ] unsigned short 
 13760 ;; Auto vars:     Size  Location     Type
 13761 ;;  slaveAddr       1   26[BANK0 ] unsigned char 
 13762 ;;  status          1   27[BANK0 ] enum E3025
 13763 ;; Return value:  Size  Location     Type
 13764 ;;                  1    wreg      unsigned char 
 13765 ;; Registers used:
 13766 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13767 ;; Tracked objects:
 13768 ;;		On entry : 0/0
 13769 ;;		On exit  : 0/0
 13770 ;;		Unchanged: 0/0
 13771 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13772 ;;      Params:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13773 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13774 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13775 ;;      Totals:         0      11       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13776 ;;Total ram usage:       11 bytes
 13777 ;; Hardware stack levels used:    1
 13778 ;; Hardware stack levels required when called:    6
 13779 ;; This function calls:
 13780 ;;		_I2C2_MasterRead
 13781 ;;		_I2C2_MasterWrite
 13782 ;;		_Timeout_hasExpired
 13783 ;;		_Timeout_setTimeout
 13784 ;; This function is called by:
 13785 ;;		_HMC5883L_I2C_BufferRead
 13786 ;;		_BMP_init
 13787 ;;		_BMP_readTemperature
 13788 ;; This function uses a non-reentrant model
 13789 ;;
 13790                           
 13791                           
 13792                           ;psect for function _I2C_BufferRead
 13793  09E6                     _I2C_BufferRead:	
 13794                           
 13795                           ;incstack = 0
 13796                           ; Regs used in _I2C_BufferRead: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 13797                           ;I2C_BufferRead@slaveAddr stored from wreg
 13798  09E6  0020               	movlb	0	; select bank0
 13799  09E7  00BA               	movwf	I2C_BufferRead@slaveAddr
 13800                           
 13801                           ;i2c_wrapper.c: 32: I2C2_MESSAGE_STATUS status=I2C2_MESSAGE_COMPLETE;
 13802  09E8  01BB               	clrf	I2C_BufferRead@status
 13803                           
 13804                           ;i2c_wrapper.c: 34: I2C2_MasterWrite(&ReadAddr, 1,slaveAddr, &status);
 13805  09E9  01A8               	clrf	I2C2_MasterWrite@length
 13806  09EA  0AA8               	incf	I2C2_MasterWrite@length,f
 13807  09EB  083A               	movf	I2C_BufferRead@slaveAddr,w
 13808  09EC  00B6               	movwf	??_I2C_BufferRead
 13809  09ED  01B7               	clrf	??_I2C_BufferRead+1
 13810  09EE  0836               	movf	??_I2C_BufferRead,w
 13811  09EF  00A9               	movwf	I2C2_MasterWrite@address
 13812  09F0  0837               	movf	??_I2C_BufferRead+1,w
 13813  09F1  00AA               	movwf	I2C2_MasterWrite@address+1
 13814  09F2  303B               	movlw	(low (I2C_BufferRead@status| 0))& (0+255)
 13815  09F3  00B8               	movwf	??_I2C_BufferRead+2
 13816  09F4  0838               	movf	??_I2C_BufferRead+2,w
 13817  09F5  00AB               	movwf	I2C2_MasterWrite@pflag
 13818  09F6  3033               	movlw	(low (I2C_BufferRead@ReadAddr| 0))& (0+255)
 13819  09F7  3196  26AB  3189   	fcall	_I2C2_MasterWrite
 13820                           
 13821                           ;i2c_wrapper.c: 35: Timeout_setTimeout(200);
 13822  09FA  30C8               	movlw	200
 13823  09FB  0020               	movlb	0	; select bank0
 13824  09FC  00A1               	movwf	Timeout_setTimeout@val
 13825  09FD  3000               	movlw	0
 13826  09FE  00A2               	movwf	Timeout_setTimeout@val+1
 13827  09FF  3194  24B1  3189   	fcall	_Timeout_setTimeout
 13828  0A02                     l5587:	
 13829                           ;i2c_wrapper.c: 38: while(status == I2C2_MESSAGE_PENDING && Timeout_hasExpired()==0);
 13830                           
 13831  0A02  3002               	movlw	2
 13832  0A03  0020               	movlb	0	; select bank0
 13833  0A04  063B               	xorwf	I2C_BufferRead@status,w
 13834  0A05  1D03               	btfss	3,2
 13835  0A06  2A0D               	goto	l5591
 13836  0A07  3188  20F1  3189   	fcall	_Timeout_hasExpired
 13837  0A0A  3A00               	xorlw	0
 13838  0A0B  1903               	skipnz
 13839  0A0C  2A02               	goto	l5587
 13840  0A0D                     l5591:	
 13841                           
 13842                           ;i2c_wrapper.c: 40: if (status != I2C2_MESSAGE_COMPLETE)
 13843  0A0D  0020               	movlb	0	; select bank0
 13844  0A0E  083B               	movf	I2C_BufferRead@status,w
 13845  0A0F  1903               	btfsc	3,2
 13846  0A10  2A13               	goto	l5597
 13847                           
 13848                           ;i2c_wrapper.c: 41: {
 13849                           ;i2c_wrapper.c: 42: return 0;
 13850  0A11  3000               	movlw	0
 13851  0A12  0008               	return
 13852  0A13                     l5597:	
 13853                           
 13854                           ;i2c_wrapper.c: 43: }
 13855                           ;i2c_wrapper.c: 46: I2C2_MasterRead( pBuffer,NumByteToRead,slaveAddr,&status);
 13856  0A13  0832               	movf	I2C_BufferRead@pBuffer+1,w
 13857  0A14  00AA               	movwf	I2C2_MasterRead@pdata+1
 13858  0A15  0831               	movf	I2C_BufferRead@pBuffer,w
 13859  0A16  00A9               	movwf	I2C2_MasterRead@pdata
 13860  0A17  0834               	movf	I2C_BufferRead@NumByteToRead,w
 13861  0A18  00B6               	movwf	??_I2C_BufferRead
 13862  0A19  0836               	movf	??_I2C_BufferRead,w
 13863  0A1A  00AB               	movwf	I2C2_MasterRead@length
 13864  0A1B  083A               	movf	I2C_BufferRead@slaveAddr,w
 13865  0A1C  00B7               	movwf	??_I2C_BufferRead+1
 13866  0A1D  01B8               	clrf	??_I2C_BufferRead+2
 13867  0A1E  0837               	movf	??_I2C_BufferRead+1,w
 13868  0A1F  00AC               	movwf	I2C2_MasterRead@address
 13869  0A20  0838               	movf	??_I2C_BufferRead+2,w
 13870  0A21  00AD               	movwf	I2C2_MasterRead@address+1
 13871  0A22  303B               	movlw	(low (I2C_BufferRead@status| 0))& (0+255)
 13872  0A23  00B9               	movwf	??_I2C_BufferRead+3
 13873  0A24  0839               	movf	??_I2C_BufferRead+3,w
 13874  0A25  00AE               	movwf	I2C2_MasterRead@pflag
 13875  0A26  3188  2001  3189   	fcall	_I2C2_MasterRead
 13876                           
 13877                           ;i2c_wrapper.c: 47: Timeout_setTimeout(200);
 13878  0A29  30C8               	movlw	200
 13879  0A2A  0020               	movlb	0	; select bank0
 13880  0A2B  00A1               	movwf	Timeout_setTimeout@val
 13881  0A2C  3000               	movlw	0
 13882  0A2D  00A2               	movwf	Timeout_setTimeout@val+1
 13883  0A2E  3194  24B1  3189   	fcall	_Timeout_setTimeout
 13884  0A31                     l5601:	
 13885                           ;i2c_wrapper.c: 49: while(status == I2C2_MESSAGE_PENDING && Timeout_hasExpired()==0);
 13886                           
 13887  0A31  3002               	movlw	2
 13888  0A32  0020               	movlb	0	; select bank0
 13889  0A33  063B               	xorwf	I2C_BufferRead@status,w
 13890  0A34  1D03               	btfss	3,2
 13891  0A35  2A3C               	goto	l5605
 13892  0A36  3188  20F1  3189   	fcall	_Timeout_hasExpired
 13893  0A39  3A00               	xorlw	0
 13894  0A3A  1903               	skipnz
 13895  0A3B  2A31               	goto	l5601
 13896  0A3C                     l5605:	
 13897                           
 13898                           ;i2c_wrapper.c: 51: if (status == I2C2_MESSAGE_COMPLETE)
 13899  0A3C  0020               	movlb	0	; select bank0
 13900  0A3D  083B               	movf	I2C_BufferRead@status,w
 13901  0A3E  1D03               	btfss	3,2
 13902  0A3F  2A42               	goto	l5613
 13903                           
 13904                           ;i2c_wrapper.c: 52: return 1;
 13905  0A40  3001               	movlw	1
 13906  0A41  0008               	return
 13907  0A42                     l5613:	
 13908                           
 13909                           ;i2c_wrapper.c: 53: else
 13910                           ;i2c_wrapper.c: 54: return 0;
 13911  0A42  3000               	movlw	0
 13912  0A43  0008               	return
 13913  0A44                     __end_of_I2C_BufferRead:	
 13914                           
 13915                           	psect	text74
 13916  14B1                     __ptext74:	
 13917 ;; *************** function _Timeout_setTimeout *****************
 13918 ;; Defined at:
 13919 ;;		line 26 in file "timeout.c"
 13920 ;; Parameters:    Size  Location     Type
 13921 ;;  val             2    1[BANK0 ] unsigned short 
 13922 ;; Auto vars:     Size  Location     Type
 13923 ;;		None
 13924 ;; Return value:  Size  Location     Type
 13925 ;;                  1    wreg      void 
 13926 ;; Registers used:
 13927 ;;		wreg
 13928 ;; Tracked objects:
 13929 ;;		On entry : 0/0
 13930 ;;		On exit  : 0/0
 13931 ;;		Unchanged: 0/0
 13932 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13933 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13934 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13935 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13936 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13937 ;;Total ram usage:        2 bytes
 13938 ;; Hardware stack levels used:    1
 13939 ;; Hardware stack levels required when called:    4
 13940 ;; This function calls:
 13941 ;;		Nothing
 13942 ;; This function is called by:
 13943 ;;		_I2C_ByteWrite
 13944 ;;		_I2C_BufferRead
 13945 ;; This function uses a non-reentrant model
 13946 ;;
 13947                           
 13948                           
 13949                           ;psect for function _Timeout_setTimeout
 13950  14B1                     _Timeout_setTimeout:	
 13951                           
 13952                           ;timeout.c: 28: timeOut=val;
 13953                           
 13954                           ;incstack = 0
 13955                           ; Regs used in _Timeout_setTimeout: [wreg]
 13956  14B1  0020               	movlb	0	; select bank0
 13957  14B2  0822               	movf	Timeout_setTimeout@val+1,w
 13958  14B3  0022               	movlb	2	; select bank2
 13959  14B4  00BD               	movwf	(_timeOut+1)^(0+256)
 13960  14B5  0020               	movlb	0	; select bank0
 13961  14B6  0821               	movf	Timeout_setTimeout@val,w
 13962  14B7  0022               	movlb	2	; select bank2
 13963  14B8  00BC               	movwf	_timeOut^(0+256)
 13964                           
 13965                           ;timeout.c: 29: curr=globalCounter;
 13966  14B9  0021               	movlb	1	; select bank1
 13967  14BA  0855               	movf	(_globalCounter+3)^(0+128),w	;volatile
 13968  14BB  0022               	movlb	2	; select bank2
 13969  14BC  00A3               	movwf	(_curr+3)^(0+256)
 13970  14BD  0021               	movlb	1	; select bank1
 13971  14BE  0854               	movf	(_globalCounter+2)^(0+128),w	;volatile
 13972  14BF  0022               	movlb	2	; select bank2
 13973  14C0  00A2               	movwf	(_curr+2)^(0+256)
 13974  14C1  0021               	movlb	1	; select bank1
 13975  14C2  0853               	movf	(_globalCounter+1)^(0+128),w	;volatile
 13976  14C3  0022               	movlb	2	; select bank2
 13977  14C4  00A1               	movwf	(_curr+1)^(0+256)
 13978  14C5  0021               	movlb	1	; select bank1
 13979  14C6  0852               	movf	_globalCounter^(0+128),w	;volatile
 13980  14C7  0022               	movlb	2	; select bank2
 13981  14C8  00A0               	movwf	_curr^(0+256)
 13982  14C9  0008               	return
 13983  14CA                     __end_of_Timeout_setTimeout:	
 13984                           
 13985                           	psect	text75
 13986  08F1                     __ptext75:	
 13987 ;; *************** function _Timeout_hasExpired *****************
 13988 ;; Defined at:
 13989 ;;		line 32 in file "timeout.c"
 13990 ;; Parameters:    Size  Location     Type
 13991 ;;		None
 13992 ;; Auto vars:     Size  Location     Type
 13993 ;;		None
 13994 ;; Return value:  Size  Location     Type
 13995 ;;                  1    wreg      unsigned char 
 13996 ;; Registers used:
 13997 ;;		wreg, status,2, status,0
 13998 ;; Tracked objects:
 13999 ;;		On entry : 0/0
 14000 ;;		On exit  : 0/0
 14001 ;;		Unchanged: 0/0
 14002 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14003 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14004 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14005 ;;      Temps:          0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14006 ;;      Totals:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14007 ;;Total ram usage:       12 bytes
 14008 ;; Hardware stack levels used:    1
 14009 ;; Hardware stack levels required when called:    4
 14010 ;; This function calls:
 14011 ;;		Nothing
 14012 ;; This function is called by:
 14013 ;;		_I2C_ByteWrite
 14014 ;;		_I2C_BufferRead
 14015 ;; This function uses a non-reentrant model
 14016 ;;
 14017                           
 14018                           
 14019                           ;psect for function _Timeout_hasExpired
 14020  08F1                     _Timeout_hasExpired:	
 14021                           
 14022                           ;timeout.c: 34: if(globalCounter-curr>timeOut)
 14023                           
 14024                           ;incstack = 0
 14025                           ; Regs used in _Timeout_hasExpired: [wreg+status,2+status,0]
 14026  08F1  0021               	movlb	1	; select bank1
 14027  08F2  0852               	movf	_globalCounter^(0+128),w	;volatile
 14028  08F3  0020               	movlb	0	; select bank0
 14029  08F4  00A1               	movwf	??_Timeout_hasExpired
 14030  08F5  0021               	movlb	1	; select bank1
 14031  08F6  0853               	movf	(_globalCounter+1)^(0+128),w	;volatile
 14032  08F7  0020               	movlb	0	; select bank0
 14033  08F8  00A2               	movwf	??_Timeout_hasExpired+1
 14034  08F9  0021               	movlb	1	; select bank1
 14035  08FA  0854               	movf	(_globalCounter+2)^(0+128),w	;volatile
 14036  08FB  0020               	movlb	0	; select bank0
 14037  08FC  00A3               	movwf	??_Timeout_hasExpired+2
 14038  08FD  0021               	movlb	1	; select bank1
 14039  08FE  0855               	movf	(_globalCounter+3)^(0+128),w	;volatile
 14040  08FF  0020               	movlb	0	; select bank0
 14041  0900  00A4               	movwf	??_Timeout_hasExpired+3
 14042  0901  0022               	movlb	2	; select bank2
 14043  0902  0920               	comf	_curr^(0+256),w
 14044  0903  0020               	movlb	0	; select bank0
 14045  0904  00A5               	movwf	??_Timeout_hasExpired+4
 14046  0905  0022               	movlb	2	; select bank2
 14047  0906  0921               	comf	(_curr+1)^(0+256),w
 14048  0907  0020               	movlb	0	; select bank0
 14049  0908  00A6               	movwf	??_Timeout_hasExpired+5
 14050  0909  0022               	movlb	2	; select bank2
 14051  090A  0922               	comf	(_curr+2)^(0+256),w
 14052  090B  0020               	movlb	0	; select bank0
 14053  090C  00A7               	movwf	??_Timeout_hasExpired+6
 14054  090D  0022               	movlb	2	; select bank2
 14055  090E  0923               	comf	(_curr+3)^(0+256),w
 14056  090F  0020               	movlb	0	; select bank0
 14057  0910  00A8               	movwf	??_Timeout_hasExpired+7
 14058  0911  0AA5               	incf	??_Timeout_hasExpired+4,f
 14059  0912  1903               	skipnz
 14060  0913  0AA6               	incf	??_Timeout_hasExpired+5,f
 14061  0914  1903               	skipnz
 14062  0915  0AA7               	incf	??_Timeout_hasExpired+6,f
 14063  0916  1903               	skipnz
 14064  0917  0AA8               	incf	??_Timeout_hasExpired+7,f
 14065  0918  0825               	movf	??_Timeout_hasExpired+4,w
 14066  0919  07A1               	addwf	??_Timeout_hasExpired,f
 14067  091A  0826               	movf	??_Timeout_hasExpired+5,w
 14068  091B  3DA2               	addwfc	??_Timeout_hasExpired+1,f
 14069  091C  0827               	movf	??_Timeout_hasExpired+6,w
 14070  091D  3DA3               	addwfc	??_Timeout_hasExpired+2,f
 14071  091E  0828               	movf	??_Timeout_hasExpired+7,w
 14072  091F  3DA4               	addwfc	??_Timeout_hasExpired+3,f
 14073  0920  0022               	movlb	2	; select bank2
 14074  0921  083C               	movf	_timeOut^(0+256),w
 14075  0922  0020               	movlb	0	; select bank0
 14076  0923  00A9               	movwf	??_Timeout_hasExpired+8
 14077  0924  0022               	movlb	2	; select bank2
 14078  0925  083D               	movf	(_timeOut+1)^(0+256),w
 14079  0926  0020               	movlb	0	; select bank0
 14080  0927  00AA               	movwf	??_Timeout_hasExpired+9
 14081  0928  01AB               	clrf	??_Timeout_hasExpired+10
 14082  0929  01AC               	clrf	??_Timeout_hasExpired+11
 14083  092A  0824               	movf	??_Timeout_hasExpired+3,w
 14084  092B  022C               	subwf	??_Timeout_hasExpired+11,w
 14085  092C  1D03               	skipz
 14086  092D  2938               	goto	u5015
 14087  092E  0823               	movf	??_Timeout_hasExpired+2,w
 14088  092F  022B               	subwf	??_Timeout_hasExpired+10,w
 14089  0930  1D03               	skipz
 14090  0931  2938               	goto	u5015
 14091  0932  0822               	movf	??_Timeout_hasExpired+1,w
 14092  0933  022A               	subwf	??_Timeout_hasExpired+9,w
 14093  0934  1D03               	skipz
 14094  0935  2938               	goto	u5015
 14095  0936  0821               	movf	??_Timeout_hasExpired,w
 14096  0937  0229               	subwf	??_Timeout_hasExpired+8,w
 14097  0938                     u5015:	
 14098  0938  1803               	skipnc
 14099  0939  293C               	goto	l5577
 14100                           
 14101                           ;timeout.c: 35: return 1;
 14102  093A  3001               	movlw	1
 14103  093B  0008               	return
 14104  093C                     l5577:	
 14105                           
 14106                           ;timeout.c: 36: else
 14107                           ;timeout.c: 37: return 0;
 14108  093C  3000               	movlw	0
 14109  093D  0008               	return
 14110  093E                     __end_of_Timeout_hasExpired:	
 14111                           
 14112                           	psect	text76
 14113  16AB                     __ptext76:	
 14114 ;; *************** function _I2C2_MasterWrite *****************
 14115 ;; Defined at:
 14116 ;;		line 598 in file "mcc_generated_files/i2c2.c"
 14117 ;; Parameters:    Size  Location     Type
 14118 ;;  pdata           1    wreg     PTR unsigned char 
 14119 ;;		 -> I2C_BufferRead@ReadAddr(1), I2C_ByteWrite@data(2), 
 14120 ;;  length          1    8[BANK0 ] unsigned char 
 14121 ;;  address         2    9[BANK0 ] unsigned int 
 14122 ;;  pflag           1   11[BANK0 ] PTR enum E2993
 14123 ;;		 -> I2C_BufferRead@status(1), I2C_ByteWrite@status(1), 
 14124 ;; Auto vars:     Size  Location     Type
 14125 ;;  pdata           1   14[BANK0 ] PTR unsigned char 
 14126 ;;		 -> I2C_BufferRead@ReadAddr(1), I2C_ByteWrite@data(2), 
 14127 ;; Return value:  Size  Location     Type
 14128 ;;                  1    wreg      void 
 14129 ;; Registers used:
 14130 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14131 ;; Tracked objects:
 14132 ;;		On entry : 0/0
 14133 ;;		On exit  : 0/0
 14134 ;;		Unchanged: 0/0
 14135 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14136 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14137 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14138 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14139 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14140 ;;Total ram usage:        7 bytes
 14141 ;; Hardware stack levels used:    1
 14142 ;; Hardware stack levels required when called:    5
 14143 ;; This function calls:
 14144 ;;		_I2C2_MasterTRBInsert
 14145 ;;		_I2C2_MasterWriteTRBBuild
 14146 ;; This function is called by:
 14147 ;;		_I2C_ByteWrite
 14148 ;;		_I2C_BufferRead
 14149 ;; This function uses a non-reentrant model
 14150 ;;
 14151                           
 14152                           
 14153                           ;psect for function _I2C2_MasterWrite
 14154  16AB                     _I2C2_MasterWrite:	
 14155                           
 14156                           ;incstack = 0
 14157                           ; Regs used in _I2C2_MasterWrite: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 14158                           ;I2C2_MasterWrite@pdata stored from wreg
 14159  16AB  0020               	movlb	0	; select bank0
 14160  16AC  00AE               	movwf	I2C2_MasterWrite@pdata
 14161                           
 14162                           ;i2c2.c: 604: static I2C2_TRANSACTION_REQUEST_BLOCK trBlock;
 14163                           ;i2c2.c: 607: if (i2c2_object.trStatus.s.full != 1)
 14164  16AD  0021               	movlb	1	; select bank1
 14165  16AE  184F               	btfsc	(_i2c2_object^(0+128)+2),0
 14166  16AF  2ECE               	goto	l5521
 14167                           
 14168                           ;i2c2.c: 608: {
 14169                           ;i2c2.c: 609: I2C2_MasterWriteTRBBuild(&trBlock, pdata, length, address);
 14170  16B0  0020               	movlb	0	; select bank0
 14171  16B1  082E               	movf	I2C2_MasterWrite@pdata,w
 14172  16B2  00AC               	movwf	??_I2C2_MasterWrite
 14173  16B3  082C               	movf	??_I2C2_MasterWrite,w
 14174  16B4  00A1               	movwf	I2C2_MasterWriteTRBBuild@pdata
 14175  16B5  0828               	movf	I2C2_MasterWrite@length,w
 14176  16B6  00AD               	movwf	??_I2C2_MasterWrite+1
 14177  16B7  082D               	movf	??_I2C2_MasterWrite+1,w
 14178  16B8  00A2               	movwf	I2C2_MasterWriteTRBBuild@length
 14179  16B9  082A               	movf	I2C2_MasterWrite@address+1,w
 14180  16BA  00A4               	movwf	I2C2_MasterWriteTRBBuild@address+1
 14181  16BB  0829               	movf	I2C2_MasterWrite@address,w
 14182  16BC  00A3               	movwf	I2C2_MasterWriteTRBBuild@address
 14183  16BD  305D               	movlw	(low (I2C2_MasterWrite@trBlock| (0+256)))& (0+255)
 14184  16BE  3196  2662  3196   	fcall	_I2C2_MasterWriteTRBBuild
 14185                           
 14186                           ;i2c2.c: 610: I2C2_MasterTRBInsert(1, &trBlock, pflag);
 14187  16C1  305D               	movlw	(low (I2C2_MasterWrite@trBlock| (0+256)))& (0+255)
 14188  16C2  0020               	movlb	0	; select bank0
 14189  16C3  00AC               	movwf	??_I2C2_MasterWrite
 14190  16C4  082C               	movf	??_I2C2_MasterWrite,w
 14191  16C5  00A1               	movwf	I2C2_MasterTRBInsert@ptrb_list
 14192  16C6  082B               	movf	I2C2_MasterWrite@pflag,w
 14193  16C7  00AD               	movwf	??_I2C2_MasterWrite+1
 14194  16C8  082D               	movf	??_I2C2_MasterWrite+1,w
 14195  16C9  00A2               	movwf	I2C2_MasterTRBInsert@pflag
 14196  16CA  3001               	movlw	1
 14197  16CB  3189  2191         	fcall	_I2C2_MasterTRBInsert
 14198                           
 14199                           ;i2c2.c: 611: }
 14200  16CD  0008               	return
 14201  16CE                     l5521:	
 14202                           
 14203                           ;i2c2.c: 612: else
 14204                           ;i2c2.c: 613: {
 14205                           ;i2c2.c: 614: *pflag = I2C2_MESSAGE_FAIL;
 14206  16CE  0020               	movlb	0	; select bank0
 14207  16CF  082B               	movf	I2C2_MasterWrite@pflag,w
 14208  16D0  0086               	movwf	6
 14209  16D1  0187               	clrf	7
 14210  16D2  0181               	clrf	1
 14211  16D3  0A81               	incf	1,f
 14212  16D4  0008               	return
 14213  16D5                     __end_of_I2C2_MasterWrite:	
 14214                           
 14215                           	psect	text77
 14216  1662                     __ptext77:	
 14217 ;; *************** function _I2C2_MasterWriteTRBBuild *****************
 14218 ;; Defined at:
 14219 ;;		line 708 in file "mcc_generated_files/i2c2.c"
 14220 ;; Parameters:    Size  Location     Type
 14221 ;;  ptrb            1    wreg     PTR struct .
 14222 ;;		 -> I2C2_MasterWrite@trBlock(5), 
 14223 ;;  pdata           1    1[BANK0 ] PTR unsigned char 
 14224 ;;		 -> I2C_BufferRead@ReadAddr(1), I2C_ByteWrite@data(2), 
 14225 ;;  length          1    2[BANK0 ] unsigned char 
 14226 ;;  address         2    3[BANK0 ] unsigned int 
 14227 ;; Auto vars:     Size  Location     Type
 14228 ;;  ptrb            1    7[BANK0 ] PTR struct .
 14229 ;;		 -> I2C2_MasterWrite@trBlock(5), 
 14230 ;; Return value:  Size  Location     Type
 14231 ;;                  1    wreg      void 
 14232 ;; Registers used:
 14233 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 14234 ;; Tracked objects:
 14235 ;;		On entry : 0/0
 14236 ;;		On exit  : 0/0
 14237 ;;		Unchanged: 0/0
 14238 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14239 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14240 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14241 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14242 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14243 ;;Total ram usage:        7 bytes
 14244 ;; Hardware stack levels used:    1
 14245 ;; Hardware stack levels required when called:    4
 14246 ;; This function calls:
 14247 ;;		Nothing
 14248 ;; This function is called by:
 14249 ;;		_I2C2_MasterWrite
 14250 ;; This function uses a non-reentrant model
 14251 ;;
 14252                           
 14253                           
 14254                           ;psect for function _I2C2_MasterWriteTRBBuild
 14255  1662                     _I2C2_MasterWriteTRBBuild:	
 14256                           
 14257                           ;incstack = 0
 14258                           ; Regs used in _I2C2_MasterWriteTRBBuild: [wreg+fsr1l+fsr1h+status,2+status,0]
 14259                           ;I2C2_MasterWriteTRBBuild@ptrb stored from wreg
 14260  1662  0020               	movlb	0	; select bank0
 14261  1663  00A7               	movwf	I2C2_MasterWriteTRBBuild@ptrb
 14262                           
 14263                           ;i2c2.c: 714: ptrb->address = address << 1;
 14264  1664  0824               	movf	I2C2_MasterWriteTRBBuild@address+1,w
 14265  1665  00A6               	movwf	??_I2C2_MasterWriteTRBBuild+1
 14266  1666  0823               	movf	I2C2_MasterWriteTRBBuild@address,w
 14267  1667  00A5               	movwf	??_I2C2_MasterWriteTRBBuild
 14268  1668  35A5               	lslf	??_I2C2_MasterWriteTRBBuild,f
 14269  1669  0DA6               	rlf	??_I2C2_MasterWriteTRBBuild+1,f
 14270  166A  0827               	movf	I2C2_MasterWriteTRBBuild@ptrb,w
 14271  166B  0086               	movwf	6
 14272  166C  3001               	movlw	1	; select bank2/3
 14273  166D  0087               	movwf	7
 14274  166E  0825               	movf	??_I2C2_MasterWriteTRBBuild,w
 14275  166F  3FC0               	movwi [0]fsr1
 14276  1670  0826               	movf	??_I2C2_MasterWriteTRBBuild+1,w
 14277  1671  3FC1               	movwi [1]fsr1
 14278                           
 14279                           ;i2c2.c: 715: ptrb->length = length;
 14280  1672  0822               	movf	I2C2_MasterWriteTRBBuild@length,w
 14281  1673  00A5               	movwf	??_I2C2_MasterWriteTRBBuild
 14282  1674  0827               	movf	I2C2_MasterWriteTRBBuild@ptrb,w
 14283  1675  3E02               	addlw	2
 14284  1676  0086               	movwf	6
 14285  1677  3001               	movlw	1	; select bank2/3
 14286  1678  0087               	movwf	7
 14287  1679  0825               	movf	??_I2C2_MasterWriteTRBBuild,w
 14288  167A  0081               	movwf	1
 14289                           
 14290                           ;i2c2.c: 716: ptrb->pbuffer = pdata;
 14291  167B  0827               	movf	I2C2_MasterWriteTRBBuild@ptrb,w
 14292  167C  3E03               	addlw	3
 14293  167D  0086               	movwf	6
 14294  167E  3001               	movlw	1	; select bank2/3
 14295  167F  0087               	movwf	7
 14296  1680  0821               	movf	I2C2_MasterWriteTRBBuild@pdata,w
 14297  1681  3FC0               	movwi [0]fsr1
 14298  1682  3000               	movlw	0
 14299  1683  3FC1               	movwi [1]fsr1
 14300  1684  0008               	return
 14301  1685                     __end_of_I2C2_MasterWriteTRBBuild:	
 14302                           
 14303                           	psect	text78
 14304  0801                     __ptext78:	
 14305 ;; *************** function _I2C2_MasterRead *****************
 14306 ;; Defined at:
 14307 ;;		line 619 in file "mcc_generated_files/i2c2.c"
 14308 ;; Parameters:    Size  Location     Type
 14309 ;;  pdata           2    9[BANK0 ] PTR unsigned char 
 14310 ;;		 -> data(8), b1(24), HMC5883L_ReadBit@tmp(1), HMC5883L_ReadBits@tmp(1), 
 14311 ;;		 -> HMC5883L_WriteBit@tmp(1), HMC5883L_WriteBits@tmp(1), heading(8), HMC5883L_TestConnection@tmp(3), 
 14312 ;;		 -> MPU6050_ReadBit@tmp(1), MPU6050_ReadBits@tmp(1), MPU6050_WriteBit@tmp(1), MPU6050_WriteBits@tmp(1), 
 14313 ;;		 -> MPU6050_GetRawAccel@tempBuffer(6), MPU6050_GetRawAccelGyro@tmpBuffer(14), 
 14314 ;;  length          1   11[BANK0 ] unsigned char 
 14315 ;;  address         2   12[BANK0 ] unsigned int 
 14316 ;;  pflag           1   14[BANK0 ] PTR enum E2993
 14317 ;;		 -> I2C_BufferRead@status(1), 
 14318 ;; Auto vars:     Size  Location     Type
 14319 ;;		None
 14320 ;; Return value:  Size  Location     Type
 14321 ;;                  1    wreg      void 
 14322 ;; Registers used:
 14323 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14324 ;; Tracked objects:
 14325 ;;		On entry : 0/0
 14326 ;;		On exit  : 0/0
 14327 ;;		Unchanged: 0/0
 14328 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14329 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14330 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14331 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14332 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14333 ;;Total ram usage:        8 bytes
 14334 ;; Hardware stack levels used:    1
 14335 ;; Hardware stack levels required when called:    5
 14336 ;; This function calls:
 14337 ;;		_I2C2_MasterReadTRBBuild
 14338 ;;		_I2C2_MasterTRBInsert
 14339 ;; This function is called by:
 14340 ;;		_I2C_BufferRead
 14341 ;; This function uses a non-reentrant model
 14342 ;;
 14343                           
 14344                           
 14345                           ;psect for function _I2C2_MasterRead
 14346  0801                     _I2C2_MasterRead:	
 14347                           
 14348                           ;i2c2.c: 625: static I2C2_TRANSACTION_REQUEST_BLOCK trBlock;
 14349                           ;i2c2.c: 629: if (i2c2_object.trStatus.s.full != 1)
 14350                           
 14351                           ;incstack = 0
 14352                           ; Regs used in _I2C2_MasterRead: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 14353  0801  0021               	movlb	1	; select bank1
 14354  0802  184F               	btfsc	(_i2c2_object^(0+128)+2),0
 14355  0803  2822               	goto	l5527
 14356                           
 14357                           ;i2c2.c: 630: {
 14358                           ;i2c2.c: 631: I2C2_MasterReadTRBBuild(&trBlock, pdata, length, address);
 14359  0804  0020               	movlb	0	; select bank0
 14360  0805  082A               	movf	I2C2_MasterRead@pdata+1,w
 14361  0806  00A2               	movwf	I2C2_MasterReadTRBBuild@pdata+1
 14362  0807  0829               	movf	I2C2_MasterRead@pdata,w
 14363  0808  00A1               	movwf	I2C2_MasterReadTRBBuild@pdata
 14364  0809  082B               	movf	I2C2_MasterRead@length,w
 14365  080A  00AF               	movwf	??_I2C2_MasterRead
 14366  080B  082F               	movf	??_I2C2_MasterRead,w
 14367  080C  00A3               	movwf	I2C2_MasterReadTRBBuild@length
 14368  080D  082D               	movf	I2C2_MasterRead@address+1,w
 14369  080E  00A5               	movwf	I2C2_MasterReadTRBBuild@address+1
 14370  080F  082C               	movf	I2C2_MasterRead@address,w
 14371  0810  00A4               	movwf	I2C2_MasterReadTRBBuild@address
 14372  0811  3058               	movlw	(low (I2C2_MasterRead@trBlock| (0+256)))& (0+255)
 14373  0812  3197  2700  3188   	fcall	_I2C2_MasterReadTRBBuild
 14374                           
 14375                           ;i2c2.c: 632: I2C2_MasterTRBInsert(1, &trBlock, pflag);
 14376  0815  3058               	movlw	(low (I2C2_MasterRead@trBlock| (0+256)))& (0+255)
 14377  0816  0020               	movlb	0	; select bank0
 14378  0817  00AF               	movwf	??_I2C2_MasterRead
 14379  0818  082F               	movf	??_I2C2_MasterRead,w
 14380  0819  00A1               	movwf	I2C2_MasterTRBInsert@ptrb_list
 14381  081A  082E               	movf	I2C2_MasterRead@pflag,w
 14382  081B  00B0               	movwf	??_I2C2_MasterRead+1
 14383  081C  0830               	movf	??_I2C2_MasterRead+1,w
 14384  081D  00A2               	movwf	I2C2_MasterTRBInsert@pflag
 14385  081E  3001               	movlw	1
 14386  081F  3189  2191         	fcall	_I2C2_MasterTRBInsert
 14387                           
 14388                           ;i2c2.c: 633: }
 14389  0821  0008               	return
 14390  0822                     l5527:	
 14391                           
 14392                           ;i2c2.c: 634: else
 14393                           ;i2c2.c: 635: {
 14394                           ;i2c2.c: 636: *pflag = I2C2_MESSAGE_FAIL;
 14395  0822  0020               	movlb	0	; select bank0
 14396  0823  082E               	movf	I2C2_MasterRead@pflag,w
 14397  0824  0086               	movwf	6
 14398  0825  0187               	clrf	7
 14399  0826  0181               	clrf	1
 14400  0827  0A81               	incf	1,f
 14401  0828  0008               	return
 14402  0829                     __end_of_I2C2_MasterRead:	
 14403                           
 14404                           	psect	text79
 14405  0991                     __ptext79:	
 14406 ;; *************** function _I2C2_MasterTRBInsert *****************
 14407 ;; Defined at:
 14408 ;;		line 641 in file "mcc_generated_files/i2c2.c"
 14409 ;; Parameters:    Size  Location     Type
 14410 ;;  count           1    wreg     unsigned char 
 14411 ;;  ptrb_list       1    1[BANK0 ] PTR struct .
 14412 ;;		 -> I2C2_MasterRead@trBlock(5), I2C2_MasterWrite@trBlock(5), 
 14413 ;;  pflag           1    2[BANK0 ] PTR enum E2993
 14414 ;;		 -> I2C_BufferRead@status(1), I2C_ByteWrite@status(1), 
 14415 ;; Auto vars:     Size  Location     Type
 14416 ;;  count           1    4[BANK0 ] unsigned char 
 14417 ;; Return value:  Size  Location     Type
 14418 ;;                  1    wreg      void 
 14419 ;; Registers used:
 14420 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 14421 ;; Tracked objects:
 14422 ;;		On entry : 0/0
 14423 ;;		On exit  : 0/0
 14424 ;;		Unchanged: 0/0
 14425 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14426 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14427 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14428 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14429 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14430 ;;Total ram usage:        4 bytes
 14431 ;; Hardware stack levels used:    1
 14432 ;; Hardware stack levels required when called:    4
 14433 ;; This function calls:
 14434 ;;		Nothing
 14435 ;; This function is called by:
 14436 ;;		_I2C2_MasterWrite
 14437 ;;		_I2C2_MasterRead
 14438 ;; This function uses a non-reentrant model
 14439 ;;
 14440                           
 14441                           
 14442                           ;psect for function _I2C2_MasterTRBInsert
 14443  0991                     _I2C2_MasterTRBInsert:	
 14444                           
 14445                           ;incstack = 0
 14446                           ; Regs used in _I2C2_MasterTRBInsert: [wreg+fsr1l+fsr1h+status,2+status,0]
 14447                           ;I2C2_MasterTRBInsert@count stored from wreg
 14448  0991  0020               	movlb	0	; select bank0
 14449  0992  00A4               	movwf	I2C2_MasterTRBInsert@count
 14450                           
 14451                           ;i2c2.c: 648: if (i2c2_object.trStatus.s.full != 1)
 14452  0993  0021               	movlb	1	; select bank1
 14453  0994  184F               	btfsc	(_i2c2_object^(0+128)+2),0
 14454  0995  29D3               	goto	l5499
 14455                           
 14456                           ;i2c2.c: 649: {
 14457                           ;i2c2.c: 650: *pflag = I2C2_MESSAGE_PENDING;
 14458  0996  3002               	movlw	2
 14459  0997  0020               	movlb	0	; select bank0
 14460  0998  00A3               	movwf	??_I2C2_MasterTRBInsert
 14461  0999  0822               	movf	I2C2_MasterTRBInsert@pflag,w
 14462  099A  0086               	movwf	6
 14463  099B  0187               	clrf	7
 14464  099C  0823               	movf	??_I2C2_MasterTRBInsert,w
 14465  099D  0081               	movwf	1
 14466                           
 14467                           ;i2c2.c: 652: i2c2_object.pTrTail->ptrb_list = ptrb_list;
 14468  099E  0821               	movf	I2C2_MasterTRBInsert@ptrb_list,w
 14469  099F  00A3               	movwf	??_I2C2_MasterTRBInsert
 14470  09A0  0021               	movlb	1	; select bank1
 14471  09A1  0A4D               	incf	_i2c2_object^(0+128),w
 14472  09A2  0086               	movwf	6
 14473  09A3  3001               	movlw	1	; select bank2/3
 14474  09A4  0087               	movwf	7
 14475  09A5  0020               	movlb	0	; select bank0
 14476  09A6  0823               	movf	??_I2C2_MasterTRBInsert,w
 14477  09A7  0081               	movwf	1
 14478                           
 14479                           ;i2c2.c: 653: i2c2_object.pTrTail->count = count;
 14480  09A8  0824               	movf	I2C2_MasterTRBInsert@count,w
 14481  09A9  00A3               	movwf	??_I2C2_MasterTRBInsert
 14482  09AA  0021               	movlb	1	; select bank1
 14483  09AB  084D               	movf	_i2c2_object^(0+128),w
 14484  09AC  0086               	movwf	6
 14485  09AD  3001               	movlw	1	; select bank2/3
 14486  09AE  0087               	movwf	7
 14487  09AF  0020               	movlb	0	; select bank0
 14488  09B0  0823               	movf	??_I2C2_MasterTRBInsert,w
 14489  09B1  0081               	movwf	1
 14490                           
 14491                           ;i2c2.c: 654: i2c2_object.pTrTail->pTrFlag = pflag;
 14492  09B2  0021               	movlb	1	; select bank1
 14493  09B3  084D               	movf	_i2c2_object^(0+128),w
 14494  09B4  3E02               	addlw	2
 14495  09B5  0086               	movwf	6
 14496  09B6  3001               	movlw	1	; select bank2/3
 14497  09B7  0087               	movwf	7
 14498  09B8  0020               	movlb	0	; select bank0
 14499  09B9  0822               	movf	I2C2_MasterTRBInsert@pflag,w
 14500  09BA  3FC0               	movwi [0]fsr1
 14501  09BB  3000               	movlw	0
 14502  09BC  3FC1               	movwi [1]fsr1
 14503                           
 14504                           ;i2c2.c: 655: i2c2_object.pTrTail++;
 14505  09BD  3004               	movlw	4
 14506  09BE  00A3               	movwf	??_I2C2_MasterTRBInsert
 14507  09BF  0823               	movf	??_I2C2_MasterTRBInsert,w
 14508  09C0  0021               	movlb	1	; select bank1
 14509  09C1  07CD               	addwf	_i2c2_object^(0+128),f
 14510                           
 14511                           ;i2c2.c: 658: if (i2c2_object.pTrTail == (i2c2_tr_queue + 1))
 14512  09C2  084D               	movf	_i2c2_object^(0+128),w
 14513  09C3  3A66               	xorlw	(low ((_i2c2_tr_queue| (0+256)+4)))& (0+255)
 14514  09C4  1D03               	skipz
 14515  09C5  29CC               	goto	l5495
 14516                           
 14517                           ;i2c2.c: 659: {
 14518                           ;i2c2.c: 661: i2c2_object.pTrTail = i2c2_tr_queue;
 14519  09C6  3062               	movlw	(low (_i2c2_tr_queue| (0+256)))& (0+255)
 14520  09C7  0020               	movlb	0	; select bank0
 14521  09C8  00A3               	movwf	??_I2C2_MasterTRBInsert
 14522  09C9  0823               	movf	??_I2C2_MasterTRBInsert,w
 14523  09CA  0021               	movlb	1	; select bank1
 14524  09CB  00CD               	movwf	_i2c2_object^(0+128)
 14525  09CC                     l5495:	
 14526                           
 14527                           ;i2c2.c: 662: }
 14528                           ;i2c2.c: 666: i2c2_object.trStatus.s.empty = 0;
 14529  09CC  10CF               	bcf	(_i2c2_object^(0+128)+2),1
 14530                           
 14531                           ;i2c2.c: 669: if (i2c2_object.pTrHead == i2c2_object.pTrTail)
 14532  09CD  084E               	movf	(low ((_i2c2_object| 0+1)))^(0+128),w
 14533  09CE  064D               	xorwf	_i2c2_object^(0+128),w
 14534  09CF  1D03               	skipz
 14535  09D0  29D9               	goto	l5501
 14536                           
 14537                           ;i2c2.c: 670: {
 14538                           ;i2c2.c: 672: i2c2_object.trStatus.s.full = 1;
 14539  09D1  144F               	bsf	(_i2c2_object^(0+128)+2),0
 14540                           
 14541                           ;i2c2.c: 673: }
 14542                           ;i2c2.c: 675: }
 14543  09D2  29D9               	goto	l5501
 14544  09D3                     l5499:	
 14545                           
 14546                           ;i2c2.c: 676: else
 14547                           ;i2c2.c: 677: {
 14548                           ;i2c2.c: 678: *pflag = I2C2_MESSAGE_FAIL;
 14549  09D3  0020               	movlb	0	; select bank0
 14550  09D4  0822               	movf	I2C2_MasterTRBInsert@pflag,w
 14551  09D5  0086               	movwf	6
 14552  09D6  0187               	clrf	7
 14553  09D7  0181               	clrf	1
 14554  09D8  0A81               	incf	1,f
 14555  09D9                     l5501:	
 14556                           
 14557                           ;i2c2.c: 679: }
 14558                           ;i2c2.c: 682: if (*pflag == I2C2_MESSAGE_PENDING)
 14559  09D9  0020               	movlb	0	; select bank0
 14560  09DA  0822               	movf	I2C2_MasterTRBInsert@pflag,w
 14561  09DB  0086               	movwf	6
 14562  09DC  0187               	clrf	7
 14563  09DD  3002               	movlw	2
 14564  09DE  0601               	xorwf	1,w
 14565  09DF  1D03               	btfss	3,2
 14566  09E0  0008               	return
 14567  09E1                     l358:	
 14568                           ;i2c2.c: 685: while(i2c2_state != S_MASTER_IDLE)
 14569                           
 14570                           ;i2c2.c: 683: {
 14571                           ;i2c2.c: 684: PIR4bits.SSP2IF = 1;
 14572                           
 14573                           
 14574                           ;i2c2.c: 686: {
 14575                           ;i2c2.c: 689: PIR4bits.SSP2IF = 1;
 14576  09E1  1414               	bsf	20,0	;volatile
 14577  09E2  0879               	movf	_i2c2_state,w
 14578  09E3  1903               	btfsc	3,2
 14579  09E4  0008               	return
 14580  09E5  29E1               	goto	l358
 14581  09E6                     __end_of_I2C2_MasterTRBInsert:	
 14582                           
 14583                           	psect	text80
 14584  1700                     __ptext80:	
 14585 ;; *************** function _I2C2_MasterReadTRBBuild *****************
 14586 ;; Defined at:
 14587 ;;		line 695 in file "mcc_generated_files/i2c2.c"
 14588 ;; Parameters:    Size  Location     Type
 14589 ;;  ptrb            1    wreg     PTR struct .
 14590 ;;		 -> I2C2_MasterRead@trBlock(5), 
 14591 ;;  pdata           2    1[BANK0 ] PTR unsigned char 
 14592 ;;		 -> data(8), b1(24), HMC5883L_ReadBit@tmp(1), HMC5883L_ReadBits@tmp(1), 
 14593 ;;		 -> HMC5883L_WriteBit@tmp(1), HMC5883L_WriteBits@tmp(1), heading(8), HMC5883L_TestConnection@tmp(3), 
 14594 ;;		 -> MPU6050_ReadBit@tmp(1), MPU6050_ReadBits@tmp(1), MPU6050_WriteBit@tmp(1), MPU6050_WriteBits@tmp(1), 
 14595 ;;		 -> MPU6050_GetRawAccel@tempBuffer(6), MPU6050_GetRawAccelGyro@tmpBuffer(14), 
 14596 ;;  length          1    3[BANK0 ] unsigned char 
 14597 ;;  address         2    4[BANK0 ] unsigned int 
 14598 ;; Auto vars:     Size  Location     Type
 14599 ;;  ptrb            1    8[BANK0 ] PTR struct .
 14600 ;;		 -> I2C2_MasterRead@trBlock(5), 
 14601 ;; Return value:  Size  Location     Type
 14602 ;;                  1    wreg      void 
 14603 ;; Registers used:
 14604 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 14605 ;; Tracked objects:
 14606 ;;		On entry : 0/0
 14607 ;;		On exit  : 0/0
 14608 ;;		Unchanged: 0/0
 14609 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14610 ;;      Params:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14611 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14612 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14613 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14614 ;;Total ram usage:        8 bytes
 14615 ;; Hardware stack levels used:    1
 14616 ;; Hardware stack levels required when called:    4
 14617 ;; This function calls:
 14618 ;;		Nothing
 14619 ;; This function is called by:
 14620 ;;		_I2C2_MasterRead
 14621 ;; This function uses a non-reentrant model
 14622 ;;
 14623                           
 14624                           
 14625                           ;psect for function _I2C2_MasterReadTRBBuild
 14626  1700                     _I2C2_MasterReadTRBBuild:	
 14627                           
 14628                           ;incstack = 0
 14629                           ; Regs used in _I2C2_MasterReadTRBBuild: [wreg+fsr1l+fsr1h+status,2+status,0]
 14630                           ;I2C2_MasterReadTRBBuild@ptrb stored from wreg
 14631  1700  0020               	movlb	0	; select bank0
 14632  1701  00A8               	movwf	I2C2_MasterReadTRBBuild@ptrb
 14633                           
 14634                           ;i2c2.c: 701: ptrb->address = address << 1;
 14635  1702  0825               	movf	I2C2_MasterReadTRBBuild@address+1,w
 14636  1703  00A7               	movwf	??_I2C2_MasterReadTRBBuild+1
 14637  1704  0824               	movf	I2C2_MasterReadTRBBuild@address,w
 14638  1705  00A6               	movwf	??_I2C2_MasterReadTRBBuild
 14639  1706  35A6               	lslf	??_I2C2_MasterReadTRBBuild,f
 14640  1707  0DA7               	rlf	??_I2C2_MasterReadTRBBuild+1,f
 14641  1708  0828               	movf	I2C2_MasterReadTRBBuild@ptrb,w
 14642  1709  0086               	movwf	6
 14643  170A  3001               	movlw	1	; select bank2/3
 14644  170B  0087               	movwf	7
 14645  170C  0826               	movf	??_I2C2_MasterReadTRBBuild,w
 14646  170D  3FC0               	movwi [0]fsr1
 14647  170E  0827               	movf	??_I2C2_MasterReadTRBBuild+1,w
 14648  170F  3FC1               	movwi [1]fsr1
 14649                           
 14650                           ;i2c2.c: 703: ptrb->address |= 0x01;
 14651  1710  0828               	movf	I2C2_MasterReadTRBBuild@ptrb,w
 14652  1711  0086               	movwf	6
 14653  1712  3001               	movlw	1	; select bank2/3
 14654  1713  0087               	movwf	7
 14655  1714  3001               	movlw	1
 14656  1715  0481               	iorwf	1,f
 14657  1716  3141               	addfsr 1,1
 14658  1717  3000               	movlw	0
 14659  1718  0481               	iorwf	1,f
 14660                           
 14661                           ;i2c2.c: 704: ptrb->length = length;
 14662  1719  0823               	movf	I2C2_MasterReadTRBBuild@length,w
 14663  171A  00A6               	movwf	??_I2C2_MasterReadTRBBuild
 14664  171B  0828               	movf	I2C2_MasterReadTRBBuild@ptrb,w
 14665  171C  3E02               	addlw	2
 14666  171D  0086               	movwf	6
 14667  171E  3001               	movlw	1	; select bank2/3
 14668  171F  0087               	movwf	7
 14669  1720  0826               	movf	??_I2C2_MasterReadTRBBuild,w
 14670  1721  0081               	movwf	1
 14671                           
 14672                           ;i2c2.c: 705: ptrb->pbuffer = pdata;
 14673  1722  0828               	movf	I2C2_MasterReadTRBBuild@ptrb,w
 14674  1723  3E03               	addlw	3
 14675  1724  0086               	movwf	6
 14676  1725  3001               	movlw	1	; select bank2/3
 14677  1726  0087               	movwf	7
 14678  1727  0821               	movf	I2C2_MasterReadTRBBuild@pdata,w
 14679  1728  3FC0               	movwi [0]fsr1
 14680  1729  0822               	movf	I2C2_MasterReadTRBBuild@pdata+1,w
 14681  172A  3FC1               	movwi [1]fsr1
 14682  172B  0008               	return
 14683  172C                     __end_of_I2C2_MasterReadTRBBuild:	
 14684                           
 14685                           	psect	text81
 14686  1330                     __ptext81:	
 14687 ;; *************** function _Diag_setTempSensorHealth *****************
 14688 ;; Defined at:
 14689 ;;		line 15 in file "diagnostics.c"
 14690 ;; Parameters:    Size  Location     Type
 14691 ;;  health          1    wreg     unsigned char 
 14692 ;; Auto vars:     Size  Location     Type
 14693 ;;  health          1    2[BANK0 ] unsigned char 
 14694 ;; Return value:  Size  Location     Type
 14695 ;;                  1    wreg      void 
 14696 ;; Registers used:
 14697 ;;		wreg
 14698 ;; Tracked objects:
 14699 ;;		On entry : 0/0
 14700 ;;		On exit  : 0/0
 14701 ;;		Unchanged: 0/0
 14702 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14703 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14704 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14705 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14706 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14707 ;;Total ram usage:        2 bytes
 14708 ;; Hardware stack levels used:    1
 14709 ;; Hardware stack levels required when called:    4
 14710 ;; This function calls:
 14711 ;;		Nothing
 14712 ;; This function is called by:
 14713 ;;		_BMP_init
 14714 ;;		_BMP_readTemperature
 14715 ;; This function uses a non-reentrant model
 14716 ;;
 14717                           
 14718                           
 14719                           ;psect for function _Diag_setTempSensorHealth
 14720  1330                     _Diag_setTempSensorHealth:	
 14721                           
 14722                           ;incstack = 0
 14723                           ; Regs used in _Diag_setTempSensorHealth: [wreg]
 14724                           ;Diag_setTempSensorHealth@health stored from wreg
 14725  1330  0020               	movlb	0	; select bank0
 14726  1331  00A2               	movwf	Diag_setTempSensorHealth@health
 14727                           
 14728                           ;diagnostics.c: 17: sensorHealth.tempSensorHealth=health;
 14729  1332  0822               	movf	Diag_setTempSensorHealth@health,w
 14730  1333  00A1               	movwf	??_Diag_setTempSensorHealth
 14731  1334  0821               	movf	??_Diag_setTempSensorHealth,w
 14732  1335  0022               	movlb	2	; select bank2
 14733  1336  00EA               	movwf	_sensorHealth^(0+256)
 14734  1337  0008               	return
 14735  1338                     __end_of_Diag_setTempSensorHealth:	
 14736                           
 14737                           	psect	intentry
 14738  0004                     __pintentry:	
 14739 ;; *************** function _INTERRUPT_InterruptManager *****************
 14740 ;; Defined at:
 14741 ;;		line 51 in file "mcc_generated_files/interrupt_manager.c"
 14742 ;; Parameters:    Size  Location     Type
 14743 ;;		None
 14744 ;; Auto vars:     Size  Location     Type
 14745 ;;		None
 14746 ;; Return value:  Size  Location     Type
 14747 ;;                  1    wreg      void 
 14748 ;; Registers used:
 14749 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14750 ;; Tracked objects:
 14751 ;;		On entry : 0/0
 14752 ;;		On exit  : 0/0
 14753 ;;		Unchanged: 0/0
 14754 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14755 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14756 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14757 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14758 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14759 ;;Total ram usage:        1 bytes
 14760 ;; Hardware stack levels used:    1
 14761 ;; Hardware stack levels required when called:    3
 14762 ;; This function calls:
 14763 ;;		_I2C2_BusCollisionISR
 14764 ;;		_I2C2_ISR
 14765 ;;		_PIN_MANAGER_IOC
 14766 ;;		_TMR1_ISR
 14767 ;; This function is called by:
 14768 ;;		Interrupt level 1
 14769 ;; This function uses a non-reentrant model
 14770 ;;
 14771                           
 14772  0004                     _INTERRUPT_InterruptManager:	
 14773                           
 14774                           ;incstack = 0
 14775  0004  147E               	bsf	126,0	;set compiler interrupt flag (level 1)
 14776                           
 14777                           ; Regs used in _INTERRUPT_InterruptManager: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 14778  0005  3180               	pagesel	$
 14779  0006  0020               	movlb	0	; select bank0
 14780  0007  087F               	movf	127,w
 14781  0008  00A0               	movwf	??_INTERRUPT_InterruptManager
 14782                           
 14783                           ;interrupt_manager.c: 54: if(INTCONbits.PEIE == 1 && PIE4bits.BCL2IE == 1 && PIR4bits.BC
      +                          L2IF == 1)
 14784  0009  1F0B               	btfss	11,6	;volatile
 14785  000A  2815               	goto	i1l153
 14786  000B  0021               	movlb	1	; select bank1
 14787  000C  1C94               	btfss	20,1	;volatile
 14788  000D  2815               	goto	i1l153
 14789  000E  0020               	movlb	0	; select bank0
 14790  000F  1C94               	btfss	20,1	;volatile
 14791  0010  2815               	goto	i1l153
 14792                           
 14793                           ;interrupt_manager.c: 55: {
 14794                           ;interrupt_manager.c: 56: I2C2_BusCollisionISR();
 14795  0011  3192  22D3  3180   	fcall	_I2C2_BusCollisionISR
 14796                           
 14797                           ;interrupt_manager.c: 57: }
 14798  0014  2832               	goto	i1l161
 14799  0015                     i1l153:	
 14800                           
 14801                           ;interrupt_manager.c: 58: else if(INTCONbits.PEIE == 1 && PIE4bits.SSP2IE == 1 && PIR4bi
      +                          ts.SSP2IF == 1)
 14802  0015  1F0B               	btfss	11,6	;volatile
 14803  0016  2821               	goto	i1l155
 14804  0017  0021               	movlb	1	; select bank1
 14805  0018  1C14               	btfss	20,0	;volatile
 14806  0019  2821               	goto	i1l155
 14807  001A  0020               	movlb	0	; select bank0
 14808  001B  1C14               	btfss	20,0	;volatile
 14809  001C  2821               	goto	i1l155
 14810                           
 14811                           ;interrupt_manager.c: 59: {
 14812                           ;interrupt_manager.c: 60: I2C2_ISR();
 14813  001D  3185  2534  3180   	fcall	_I2C2_ISR
 14814                           
 14815                           ;interrupt_manager.c: 61: }
 14816  0020  2832               	goto	i1l161
 14817  0021                     i1l155:	
 14818                           
 14819                           ;interrupt_manager.c: 62: else if(INTCONbits.PEIE == 1 && PIE1bits.TMR1IE == 1 && PIR1bi
      +                          ts.TMR1IF == 1)
 14820  0021  1F0B               	btfss	11,6	;volatile
 14821  0022  282D               	goto	i1l157
 14822  0023  0021               	movlb	1	; select bank1
 14823  0024  1C11               	btfss	17,0	;volatile
 14824  0025  282D               	goto	i1l157
 14825  0026  0020               	movlb	0	; select bank0
 14826  0027  1C11               	btfss	17,0	;volatile
 14827  0028  282D               	goto	i1l157
 14828                           
 14829                           ;interrupt_manager.c: 63: {
 14830                           ;interrupt_manager.c: 64: TMR1_ISR();
 14831  0029  3193  2348  3180   	fcall	_TMR1_ISR
 14832                           
 14833                           ;interrupt_manager.c: 65: }
 14834  002C  2832               	goto	i1l161
 14835  002D                     i1l157:	
 14836                           
 14837                           ;interrupt_manager.c: 66: else if(INTCONbits.IOCIE == 1 && INTCONbits.IOCIF == 1)
 14838  002D  198B               	btfsc	11,3	;volatile
 14839  002E  1C0B               	btfss	11,0	;volatile
 14840  002F  2832               	goto	i1l161
 14841                           
 14842                           ;interrupt_manager.c: 67: {
 14843                           ;interrupt_manager.c: 68: PIN_MANAGER_IOC();
 14844  0030  3192  22FD         	fcall	_PIN_MANAGER_IOC
 14845  0032                     i1l161:	
 14846                           ;interrupt_manager.c: 70: else
 14847                           ;interrupt_manager.c: 71: {
 14848                           
 14849                           ;interrupt_manager.c: 69: }
 14850                           
 14851  0032  0020               	movlb	0	; select bank0
 14852  0033  0820               	movf	??_INTERRUPT_InterruptManager,w
 14853  0034  00FF               	movwf	127
 14854  0035  107E               	bcf	126,0	;clear compiler interrupt flag (level 1)
 14855  0036  0009               	retfie
 14856  0037                     __end_of_INTERRUPT_InterruptManager:	
 14857                           
 14858                           	psect	text83
 14859  1348                     __ptext83:	
 14860 ;; *************** function _TMR1_ISR *****************
 14861 ;; Defined at:
 14862 ;;		line 157 in file "mcc_generated_files/tmr1.c"
 14863 ;; Parameters:    Size  Location     Type
 14864 ;;		None
 14865 ;; Auto vars:     Size  Location     Type
 14866 ;;		None
 14867 ;; Return value:  Size  Location     Type
 14868 ;;                  1    wreg      void 
 14869 ;; Registers used:
 14870 ;;		wreg, status,2, status,0, pclath, cstack
 14871 ;; Tracked objects:
 14872 ;;		On entry : 0/0
 14873 ;;		On exit  : 0/0
 14874 ;;		Unchanged: 0/0
 14875 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14876 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14877 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14878 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14879 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14880 ;;Total ram usage:        0 bytes
 14881 ;; Hardware stack levels used:    1
 14882 ;; Hardware stack levels required when called:    2
 14883 ;; This function calls:
 14884 ;;		_TMR1_CallBack
 14885 ;; This function is called by:
 14886 ;;		_INTERRUPT_InterruptManager
 14887 ;; This function uses a non-reentrant model
 14888 ;;
 14889                           
 14890                           
 14891                           ;psect for function _TMR1_ISR
 14892  1348                     _TMR1_ISR:	
 14893                           
 14894                           ;tmr1.c: 161: PIR1bits.TMR1IF = 0;
 14895                           
 14896                           ;incstack = 0
 14897                           ; Regs used in _TMR1_ISR: [wreg+status,2+status,0+pclath+cstack]
 14898  1348  0020               	movlb	0	; select bank0
 14899  1349  1011               	bcf	17,0	;volatile
 14900                           
 14901                           ;tmr1.c: 163: TMR1H = (timer1ReloadVal >> 8);
 14902  134A  087D               	movf	_timer1ReloadVal+1,w	;volatile
 14903  134B  0097               	movwf	23	;volatile
 14904                           
 14905                           ;tmr1.c: 164: TMR1L = timer1ReloadVal;
 14906  134C  087C               	movf	_timer1ReloadVal,w	;volatile
 14907  134D  0096               	movwf	22	;volatile
 14908                           
 14909                           ;tmr1.c: 168: TMR1_CallBack();
 14910  134E  3193  23A5         	fcall	_TMR1_CallBack
 14911  1350  0008               	return
 14912  1351                     __end_of_TMR1_ISR:	
 14913                           
 14914                           	psect	text84
 14915  13A5                     __ptext84:	
 14916 ;; *************** function _TMR1_CallBack *****************
 14917 ;; Defined at:
 14918 ;;		line 171 in file "mcc_generated_files/tmr1.c"
 14919 ;; Parameters:    Size  Location     Type
 14920 ;;		None
 14921 ;; Auto vars:     Size  Location     Type
 14922 ;;		None
 14923 ;; Return value:  Size  Location     Type
 14924 ;;                  1    wreg      void 
 14925 ;; Registers used:
 14926 ;;		wreg, status,2, status,0, pclath, cstack
 14927 ;; Tracked objects:
 14928 ;;		On entry : 0/0
 14929 ;;		On exit  : 0/0
 14930 ;;		Unchanged: 0/0
 14931 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14932 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14933 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14934 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14935 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14936 ;;Total ram usage:        0 bytes
 14937 ;; Hardware stack levels used:    1
 14938 ;; Hardware stack levels required when called:    1
 14939 ;; This function calls:
 14940 ;;		Absolute function
 14941 ;;		_TMR1_DefaultInterruptHandler
 14942 ;;		_Timeout_increment
 14943 ;; This function is called by:
 14944 ;;		_TMR1_ISR
 14945 ;; This function uses a non-reentrant model
 14946 ;;
 14947                           
 14948                           
 14949                           ;psect for function _TMR1_CallBack
 14950  13A5                     _TMR1_CallBack:	
 14951                           
 14952                           ;tmr1.c: 174: Timeout_increment();
 14953                           
 14954                           ;incstack = 0
 14955                           ; Regs used in _TMR1_CallBack: [wreg+status,2+status,0+pclath+cstack]
 14956  13A5  3193  2375  3193   	fcall	_Timeout_increment
 14957                           
 14958                           ;tmr1.c: 175: if(TMR1_InterruptHandler)
 14959  13A8  0022               	movlb	2	; select bank2
 14960  13A9  086C               	movf	_TMR1_InterruptHandler^(0+256),w
 14961  13AA  046D               	iorwf	(_TMR1_InterruptHandler+1)^(0+256),w
 14962  13AB  1903               	btfsc	3,2
 14963  13AC  0008               	return
 14964                           
 14965                           ;tmr1.c: 176: {
 14966                           ;tmr1.c: 177: TMR1_InterruptHandler();
 14967  13AD  086D               	movf	(_TMR1_InterruptHandler+1)^(0+256),w
 14968  13AE  008A               	movwf	10
 14969  13AF  086C               	movf	_TMR1_InterruptHandler^(0+256),w
 14970  13B0  000A               	callw
 14971  13B1  3193               	pagesel	$
 14972  13B2  0008               	return
 14973  13B3                     __end_of_TMR1_CallBack:	
 14974                           
 14975                           	psect	text85
 14976  1375                     __ptext85:	
 14977 ;; *************** function _Timeout_increment *****************
 14978 ;; Defined at:
 14979 ;;		line 8 in file "timeout.c"
 14980 ;; Parameters:    Size  Location     Type
 14981 ;;		None
 14982 ;; Auto vars:     Size  Location     Type
 14983 ;;		None
 14984 ;; Return value:  Size  Location     Type
 14985 ;;                  1    wreg      void 
 14986 ;; Registers used:
 14987 ;;		wreg
 14988 ;; Tracked objects:
 14989 ;;		On entry : 0/0
 14990 ;;		On exit  : 0/0
 14991 ;;		Unchanged: 0/0
 14992 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14993 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14994 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14995 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14996 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14997 ;;Total ram usage:        0 bytes
 14998 ;; Hardware stack levels used:    1
 14999 ;; This function calls:
 15000 ;;		Nothing
 15001 ;; This function is called by:
 15002 ;;		_TMR1_CallBack
 15003 ;; This function uses a non-reentrant model
 15004 ;;
 15005                           
 15006                           
 15007                           ;psect for function _Timeout_increment
 15008  1375                     _Timeout_increment:	
 15009                           
 15010                           ;timeout.c: 10: globalCounter+=10000;
 15011                           
 15012                           ;incstack = 0
 15013                           ; Regs used in _Timeout_increment: [wreg]
 15014  1375  3010               	movlw	16
 15015  1376  0021               	movlb	1	; select bank1
 15016  1377  07D2               	addwf	_globalCounter^(0+128),f	;volatile
 15017  1378  3027               	movlw	39
 15018  1379  3DD3               	addwfc	(_globalCounter+1)^(0+128),f	;volatile
 15019  137A  3000               	movlw	0
 15020  137B  3DD4               	addwfc	(_globalCounter+2)^(0+128),f	;volatile
 15021  137C  3000               	movlw	0
 15022  137D  3DD5               	addwfc	(_globalCounter+3)^(0+128),f	;volatile
 15023  137E  0008               	return
 15024  137F                     __end_of_Timeout_increment:	
 15025                           
 15026                           	psect	text86
 15027  0800                     __ptext86:	
 15028 ;; *************** function _TMR1_DefaultInterruptHandler *****************
 15029 ;; Defined at:
 15030 ;;		line 185 in file "mcc_generated_files/tmr1.c"
 15031 ;; Parameters:    Size  Location     Type
 15032 ;;		None
 15033 ;; Auto vars:     Size  Location     Type
 15034 ;;		None
 15035 ;; Return value:  Size  Location     Type
 15036 ;;                  1    wreg      void 
 15037 ;; Registers used:
 15038 ;;		None
 15039 ;; Tracked objects:
 15040 ;;		On entry : 0/0
 15041 ;;		On exit  : 0/0
 15042 ;;		Unchanged: 0/0
 15043 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15044 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15045 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15046 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15047 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15048 ;;Total ram usage:        0 bytes
 15049 ;; Hardware stack levels used:    1
 15050 ;; This function calls:
 15051 ;;		Nothing
 15052 ;; This function is called by:
 15053 ;;		_TMR1_Initialize
 15054 ;;		_TMR1_CallBack
 15055 ;; This function uses a non-reentrant model
 15056 ;;
 15057                           
 15058                           
 15059                           ;psect for function _TMR1_DefaultInterruptHandler
 15060  0800                     _TMR1_DefaultInterruptHandler:	
 15061                           
 15062                           ;incstack = 0
 15063                           ; Regs used in _TMR1_DefaultInterruptHandler: []
 15064  0800  0008               	return
 15065  0801                     __end_of_TMR1_DefaultInterruptHandler:	
 15066                           
 15067                           	psect	text87
 15068  12FD                     __ptext87:	
 15069 ;; *************** function _PIN_MANAGER_IOC *****************
 15070 ;; Defined at:
 15071 ;;		line 110 in file "mcc_generated_files/pin_manager.c"
 15072 ;; Parameters:    Size  Location     Type
 15073 ;;		None
 15074 ;; Auto vars:     Size  Location     Type
 15075 ;;		None
 15076 ;; Return value:  Size  Location     Type
 15077 ;;                  1    wreg      void 
 15078 ;; Registers used:
 15079 ;;		wreg, status,2, status,0, pclath, cstack
 15080 ;; Tracked objects:
 15081 ;;		On entry : 0/0
 15082 ;;		On exit  : 0/0
 15083 ;;		Unchanged: 0/0
 15084 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15085 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15086 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15087 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15088 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15089 ;;Total ram usage:        0 bytes
 15090 ;; Hardware stack levels used:    1
 15091 ;; Hardware stack levels required when called:    2
 15092 ;; This function calls:
 15093 ;;		_IOCAF2_ISR
 15094 ;; This function is called by:
 15095 ;;		_INTERRUPT_InterruptManager
 15096 ;; This function uses a non-reentrant model
 15097 ;;
 15098                           
 15099                           
 15100                           ;psect for function _PIN_MANAGER_IOC
 15101  12FD                     _PIN_MANAGER_IOC:	
 15102                           
 15103                           ;pin_manager.c: 113: if(IOCAFbits.IOCAF2 == 1)
 15104                           
 15105                           ;incstack = 0
 15106                           ; Regs used in _PIN_MANAGER_IOC: [wreg+status,2+status,0+pclath+cstack]
 15107  12FD  0027               	movlb	7	; select bank7
 15108  12FE  1D13               	btfss	19,2	;volatile
 15109  12FF  0008               	return
 15110                           
 15111                           ;pin_manager.c: 114: {
 15112                           ;pin_manager.c: 115: IOCAF2_ISR();
 15113  1300  3193  238B         	fcall	_IOCAF2_ISR
 15114  1302  0008               	return
 15115  1303                     __end_of_PIN_MANAGER_IOC:	
 15116                           
 15117                           	psect	text88
 15118  138B                     __ptext88:	
 15119 ;; *************** function _IOCAF2_ISR *****************
 15120 ;; Defined at:
 15121 ;;		line 124 in file "mcc_generated_files/pin_manager.c"
 15122 ;; Parameters:    Size  Location     Type
 15123 ;;		None
 15124 ;; Auto vars:     Size  Location     Type
 15125 ;;		None
 15126 ;; Return value:  Size  Location     Type
 15127 ;;                  1    wreg      void 
 15128 ;; Registers used:
 15129 ;;		wreg, status,2, status,0, pclath, cstack
 15130 ;; Tracked objects:
 15131 ;;		On entry : 0/0
 15132 ;;		On exit  : 0/0
 15133 ;;		Unchanged: 0/0
 15134 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15135 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15136 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15137 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15138 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15139 ;;Total ram usage:        0 bytes
 15140 ;; Hardware stack levels used:    1
 15141 ;; Hardware stack levels required when called:    1
 15142 ;; This function calls:
 15143 ;;		Absolute function
 15144 ;;		_IOCAF2_DefaultInterruptHandler
 15145 ;; This function is called by:
 15146 ;;		_PIN_MANAGER_IOC
 15147 ;; This function uses a non-reentrant model
 15148 ;;
 15149                           
 15150                           
 15151                           ;psect for function _IOCAF2_ISR
 15152  138B                     _IOCAF2_ISR:	
 15153                           
 15154                           ;pin_manager.c: 129: if(IOCAF2_InterruptHandler)
 15155                           
 15156                           ;incstack = 0
 15157                           ; Regs used in _IOCAF2_ISR: [wreg+status,2+status,0+pclath+cstack]
 15158  138B  0022               	movlb	2	; select bank2
 15159  138C  086E               	movf	_IOCAF2_InterruptHandler^(0+256),w
 15160  138D  046F               	iorwf	(_IOCAF2_InterruptHandler+1)^(0+256),w
 15161  138E  1903               	btfsc	3,2
 15162  138F  2B95               	goto	i1l4245
 15163                           
 15164                           ;pin_manager.c: 130: {
 15165                           ;pin_manager.c: 131: IOCAF2_InterruptHandler();
 15166  1390  086F               	movf	(_IOCAF2_InterruptHandler+1)^(0+256),w
 15167  1391  008A               	movwf	10
 15168  1392  086E               	movf	_IOCAF2_InterruptHandler^(0+256),w
 15169  1393  000A               	callw
 15170  1394  3193               	pagesel	$
 15171  1395                     i1l4245:	
 15172                           
 15173                           ;pin_manager.c: 132: }
 15174                           ;pin_manager.c: 133: IOCAFbits.IOCAF2 = 0;
 15175  1395  0027               	movlb	7	; select bank7
 15176  1396  1113               	bcf	19,2	;volatile
 15177  1397  0008               	return
 15178  1398                     __end_of_IOCAF2_ISR:	
 15179                           
 15180                           	psect	text89
 15181  12D4                     __ptext89:	
 15182 ;; *************** function _IOCAF2_DefaultInterruptHandler *****************
 15183 ;; Defined at:
 15184 ;;		line 146 in file "mcc_generated_files/pin_manager.c"
 15185 ;; Parameters:    Size  Location     Type
 15186 ;;		None
 15187 ;; Auto vars:     Size  Location     Type
 15188 ;;		None
 15189 ;; Return value:  Size  Location     Type
 15190 ;;                  1    wreg      void 
 15191 ;; Registers used:
 15192 ;;		None
 15193 ;; Tracked objects:
 15194 ;;		On entry : 0/0
 15195 ;;		On exit  : 0/0
 15196 ;;		Unchanged: 0/0
 15197 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15198 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15199 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15200 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15201 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15202 ;;Total ram usage:        0 bytes
 15203 ;; Hardware stack levels used:    1
 15204 ;; This function calls:
 15205 ;;		Nothing
 15206 ;; This function is called by:
 15207 ;;		_PIN_MANAGER_Initialize
 15208 ;;		_IOCAF2_ISR
 15209 ;; This function uses a non-reentrant model
 15210 ;;
 15211                           
 15212                           
 15213                           ;psect for function _IOCAF2_DefaultInterruptHandler
 15214  12D4                     _IOCAF2_DefaultInterruptHandler:	
 15215                           
 15216                           ;incstack = 0
 15217                           ; Regs used in _IOCAF2_DefaultInterruptHandler: []
 15218  12D4  0008               	return
 15219  12D5                     __end_of_IOCAF2_DefaultInterruptHandler:	
 15220                           
 15221                           	psect	text90
 15222  0534                     __ptext90:	
 15223 ;; *************** function _I2C2_ISR *****************
 15224 ;; Defined at:
 15225 ;;		line 233 in file "mcc_generated_files/i2c2.c"
 15226 ;; Parameters:    Size  Location     Type
 15227 ;;		None
 15228 ;; Auto vars:     Size  Location     Type
 15229 ;;		None
 15230 ;; Return value:  Size  Location     Type
 15231 ;;                  1    wreg      void 
 15232 ;; Registers used:
 15233 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15234 ;; Tracked objects:
 15235 ;;		On entry : 0/0
 15236 ;;		On exit  : 0/0
 15237 ;;		Unchanged: 0/0
 15238 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15239 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15240 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15241 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15242 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15243 ;;Total ram usage:        4 bytes
 15244 ;; Hardware stack levels used:    1
 15245 ;; Hardware stack levels required when called:    1
 15246 ;; This function calls:
 15247 ;;		_I2C2_FunctionComplete
 15248 ;;		_I2C2_Stop
 15249 ;; This function is called by:
 15250 ;;		_INTERRUPT_InterruptManager
 15251 ;; This function uses a non-reentrant model
 15252 ;;
 15253                           
 15254                           
 15255                           ;psect for function _I2C2_ISR
 15256  0534                     _I2C2_ISR:	
 15257                           
 15258                           ;i2c2.c: 236: static uint8_t *pi2c_buf_ptr;
 15259                           ;i2c2.c: 237: static uint16_t i2c_address = 0;
 15260                           ;i2c2.c: 238: static uint8_t i2c_bytes_left = 0;
 15261                           ;i2c2.c: 239: static uint8_t i2c_10bit_address_restart = 0;
 15262                           ;i2c2.c: 241: PIR4bits.SSP2IF = 0;
 15263                           
 15264                           ;incstack = 0
 15265                           ; Regs used in _I2C2_ISR: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 15266  0534  0020               	movlb	0	; select bank0
 15267  0535  1014               	bcf	20,0	;volatile
 15268                           
 15269                           ;i2c2.c: 245: if(SSP2CON1bits.WCOL)
 15270  0536  0024               	movlb	4	; select bank4
 15271  0537  1F9D               	btfss	29,7	;volatile
 15272  0538  2E72               	goto	i1l4819
 15273                           
 15274                           ;i2c2.c: 246: {
 15275                           ;i2c2.c: 248: SSP2CON1bits.WCOL = 0;
 15276  0539  139D               	bcf	29,7	;volatile
 15277                           
 15278                           ;i2c2.c: 249: i2c2_state = S_MASTER_IDLE;
 15279  053A  01F9               	clrf	_i2c2_state
 15280                           
 15281                           ;i2c2.c: 250: *(p_i2c2_current->pTrFlag) = I2C2_MESSAGE_FAIL;
 15282  053B  0877               	movf	_p_i2c2_current,w
 15283  053C  3E02               	addlw	2
 15284  053D  0086               	movwf	6
 15285  053E  3001               	movlw	1	; select bank2/3
 15286  053F  0087               	movwf	7
 15287  0540  3F40               	moviw [0]fsr1
 15288  0541  00F3               	movwf	??_I2C2_ISR
 15289  0542  3F41               	moviw [1]fsr1
 15290  0543  00F4               	movwf	??_I2C2_ISR+1
 15291  0544  0873               	movf	??_I2C2_ISR,w
 15292  0545  0086               	movwf	6
 15293  0546  0874               	movf	??_I2C2_ISR+1,w
 15294  0547  0087               	movwf	7
 15295  0548  3001               	movlw	1
 15296  0549  0081               	movwf	1
 15297                           
 15298                           ;i2c2.c: 253: p_i2c2_current = (0);
 15299  054A  01F7               	clrf	_p_i2c2_current
 15300                           
 15301                           ;i2c2.c: 255: return;
 15302  054B  0008               	return
 15303  054C                     i1l288:	
 15304                           ;i2c2.c: 260: {
 15305                           ;i2c2.c: 261: case S_MASTER_IDLE:
 15306                           
 15307                           ;i2c2.c: 256: }
 15308                           ;i2c2.c: 259: switch(i2c2_state)
 15309                           
 15310                           
 15311                           ;i2c2.c: 263: if(i2c2_object.trStatus.s.empty != 1)
 15312  054C  0021               	movlb	1	; select bank1
 15313  054D  18CF               	btfsc	(_i2c2_object^(0+128)+2),1
 15314  054E  0008               	return
 15315                           
 15316                           ;i2c2.c: 264: {
 15317                           ;i2c2.c: 266: p_i2c2_current = i2c2_object.pTrHead;
 15318  054F  084E               	movf	(low ((_i2c2_object| 0+1)))^(0+128),w
 15319  0550  00F3               	movwf	??_I2C2_ISR
 15320  0551  0873               	movf	??_I2C2_ISR,w
 15321  0552  00F7               	movwf	_p_i2c2_current
 15322                           
 15323                           ;i2c2.c: 267: i2c2_trb_count = i2c2_object.pTrHead->count;
 15324  0553  084E               	movf	(low ((_i2c2_object| 0+1)))^(0+128),w
 15325  0554  0086               	movwf	6
 15326  0555  3001               	movlw	1	; select bank2/3
 15327  0556  0087               	movwf	7
 15328  0557  0801               	movf	1,w
 15329  0558  00F3               	movwf	??_I2C2_ISR
 15330  0559  0873               	movf	??_I2C2_ISR,w
 15331  055A  00E5               	movwf	_i2c2_trb_count^(0+128)
 15332                           
 15333                           ;i2c2.c: 268: p_i2c2_trb_current = i2c2_object.pTrHead->ptrb_list;
 15334  055B  084E               	movf	(low ((_i2c2_object| 0+1)))^(0+128),w
 15335  055C  0086               	movwf	6
 15336  055D  3001               	movlw	1	; select bank2/3
 15337  055E  0087               	movwf	7
 15338  055F  3001               	movlw	1	; select bank2/3
 15339  0560  3F41               	moviw [1]fsr1
 15340  0561  00F8               	movwf	_p_i2c2_trb_current
 15341                           
 15342                           ;i2c2.c: 270: i2c2_object.pTrHead++;
 15343  0562  3004               	movlw	4
 15344  0563  00F3               	movwf	??_I2C2_ISR
 15345  0564  0873               	movf	??_I2C2_ISR,w
 15346  0565  07CE               	addwf	(low ((_i2c2_object| 0+1)))^(0+128),f
 15347                           
 15348                           ;i2c2.c: 273: if(i2c2_object.pTrHead == (i2c2_tr_queue + 1))
 15349  0566  084E               	movf	(low ((_i2c2_object| 0+1)))^(0+128),w
 15350  0567  3A66               	xorlw	(low ((_i2c2_tr_queue| (0+256)+4)))& (0+255)
 15351  0568  1D03               	skipz
 15352  0569  2D6E               	goto	i1l4709
 15353                           
 15354                           ;i2c2.c: 274: {
 15355                           ;i2c2.c: 276: i2c2_object.pTrHead = i2c2_tr_queue;
 15356  056A  3062               	movlw	(low (_i2c2_tr_queue| (0+256)))& (0+255)
 15357  056B  00F3               	movwf	??_I2C2_ISR
 15358  056C  0873               	movf	??_I2C2_ISR,w
 15359  056D  00CE               	movwf	(low ((_i2c2_object| 0+1)))^(0+128)
 15360  056E                     i1l4709:	
 15361                           
 15362                           ;i2c2.c: 277: }
 15363                           ;i2c2.c: 281: i2c2_object.trStatus.s.full = 0;
 15364  056E  104F               	bcf	(_i2c2_object^(0+128)+2),0
 15365                           
 15366                           ;i2c2.c: 284: if(i2c2_object.pTrHead == i2c2_object.pTrTail)
 15367  056F  084E               	movf	(low ((_i2c2_object| 0+1)))^(0+128),w
 15368  0570  064D               	xorwf	_i2c2_object^(0+128),w
 15369  0571  1903               	btfsc	3,2
 15370                           
 15371                           ;i2c2.c: 285: {
 15372                           ;i2c2.c: 287: i2c2_object.trStatus.s.empty = 1;
 15373  0572  14CF               	bsf	(_i2c2_object^(0+128)+2),1
 15374                           
 15375                           ;i2c2.c: 288: }
 15376                           ;i2c2.c: 291: SSP2CON2bits.SEN = 1;
 15377  0573  0024               	movlb	4	; select bank4
 15378  0574  141E               	bsf	30,0	;volatile
 15379                           
 15380                           ;i2c2.c: 294: i2c2_state = S_MASTER_SEND_ADDR;
 15381  0575  3002               	movlw	2
 15382  0576  00F3               	movwf	??_I2C2_ISR
 15383  0577  0873               	movf	??_I2C2_ISR,w
 15384  0578  00F9               	movwf	_i2c2_state
 15385                           
 15386                           ;i2c2.c: 295: }
 15387                           ;i2c2.c: 297: break;
 15388  0579  0008               	return
 15389  057A                     i1l293:	
 15390                           ;i2c2.c: 299: case S_MASTER_RESTART:
 15391                           
 15392                           
 15393                           ;i2c2.c: 304: SSP2CON2bits.RSEN = 1;
 15394  057A  0024               	movlb	4	; select bank4
 15395  057B  149E               	bsf	30,1	;volatile
 15396                           
 15397                           ;i2c2.c: 307: i2c2_state = S_MASTER_SEND_ADDR;
 15398  057C  3002               	movlw	2
 15399  057D  00F3               	movwf	??_I2C2_ISR
 15400  057E  0873               	movf	??_I2C2_ISR,w
 15401  057F  00F9               	movwf	_i2c2_state
 15402                           
 15403                           ;i2c2.c: 309: break;
 15404  0580  0008               	return
 15405  0581                     i1l294:	
 15406                           ;i2c2.c: 311: case S_MASTER_SEND_ADDR_10BIT_LSB:
 15407                           
 15408                           
 15409                           ;i2c2.c: 313: if(SSP2CON2bits.ACKSTAT)
 15410  0581  0024               	movlb	4	; select bank4
 15411  0582  1F1E               	btfss	30,6	;volatile
 15412  0583  2D8D               	goto	i1l4721
 15413                           
 15414                           ;i2c2.c: 314: {
 15415                           ;i2c2.c: 315: i2c2_object.i2cErrors++;
 15416  0584  3001               	movlw	1
 15417  0585  00F3               	movwf	??_I2C2_ISR
 15418  0586  0873               	movf	??_I2C2_ISR,w
 15419  0587  0021               	movlb	1	; select bank1
 15420  0588  07D1               	addwf	(_i2c2_object^(0+128)+4),f
 15421                           
 15422                           ;i2c2.c: 316: I2C2_Stop(I2C2_MESSAGE_ADDRESS_NO_ACK);
 15423  0589  3004               	movlw	4
 15424  058A  3195  2550         	fcall	_I2C2_Stop
 15425                           
 15426                           ;i2c2.c: 317: }
 15427  058C  0008               	return
 15428  058D                     i1l4721:	
 15429                           
 15430                           ;i2c2.c: 318: else
 15431                           ;i2c2.c: 319: {
 15432                           ;i2c2.c: 321: SSP2BUF = (i2c_address >> 1) & 0x00FF;
 15433  058D  087B               	movf	I2C2_ISR@i2c_address+1,w
 15434  058E  00F4               	movwf	??_I2C2_ISR+1
 15435  058F  087A               	movf	I2C2_ISR@i2c_address,w
 15436  0590  00F3               	movwf	??_I2C2_ISR
 15437  0591  36F4               	lsrf	??_I2C2_ISR+1,f
 15438  0592  0CF3               	rrf	??_I2C2_ISR,f
 15439  0593  0873               	movf	??_I2C2_ISR,w
 15440  0594  0024               	movlb	4	; select bank4
 15441  0595  0099               	movwf	25	;volatile
 15442                           
 15443                           ;i2c2.c: 324: if(i2c_address & 0x01)
 15444  0596  1C7A               	btfss	I2C2_ISR@i2c_address,0
 15445  0597  2D9D               	goto	i1l4727
 15446                           
 15447                           ;i2c2.c: 325: {
 15448                           ;i2c2.c: 328: i2c2_state = S_MASTER_10BIT_RESTART;
 15449  0598  300B               	movlw	11
 15450  0599  00F3               	movwf	??_I2C2_ISR
 15451  059A  0873               	movf	??_I2C2_ISR,w
 15452  059B  00F9               	movwf	_i2c2_state
 15453                           
 15454                           ;i2c2.c: 329: }
 15455  059C  0008               	return
 15456  059D                     i1l4727:	
 15457                           
 15458                           ;i2c2.c: 330: else
 15459                           ;i2c2.c: 331: {
 15460                           ;i2c2.c: 333: i2c2_state = S_MASTER_SEND_DATA;
 15461  059D  3003               	movlw	3
 15462  059E  00F3               	movwf	??_I2C2_ISR
 15463  059F  0873               	movf	??_I2C2_ISR,w
 15464  05A0  00F9               	movwf	_i2c2_state
 15465                           
 15466                           ;i2c2.c: 334: }
 15467                           ;i2c2.c: 335: }
 15468                           ;i2c2.c: 337: break;
 15469  05A1  0008               	return
 15470  05A2                     i1l299:	
 15471                           ;i2c2.c: 339: case S_MASTER_10BIT_RESTART:
 15472                           
 15473                           
 15474                           ;i2c2.c: 341: if(SSP2CON2bits.ACKSTAT)
 15475  05A2  0024               	movlb	4	; select bank4
 15476  05A3  1F1E               	btfss	30,6	;volatile
 15477  05A4  2DAE               	goto	i1l300
 15478                           
 15479                           ;i2c2.c: 342: {
 15480                           ;i2c2.c: 343: i2c2_object.i2cErrors++;
 15481  05A5  3001               	movlw	1
 15482  05A6  00F3               	movwf	??_I2C2_ISR
 15483  05A7  0873               	movf	??_I2C2_ISR,w
 15484  05A8  0021               	movlb	1	; select bank1
 15485  05A9  07D1               	addwf	(_i2c2_object^(0+128)+4),f
 15486                           
 15487                           ;i2c2.c: 344: I2C2_Stop(I2C2_MESSAGE_ADDRESS_NO_ACK);
 15488  05AA  3004               	movlw	4
 15489  05AB  3195  2550         	fcall	_I2C2_Stop
 15490                           
 15491                           ;i2c2.c: 345: }
 15492  05AD  0008               	return
 15493  05AE                     i1l300:	
 15494                           
 15495                           ;i2c2.c: 346: else
 15496                           ;i2c2.c: 347: {
 15497                           ;i2c2.c: 350: SSP2CON2bits.RSEN = 1;
 15498  05AE  149E               	bsf	30,1	;volatile
 15499                           
 15500                           ;i2c2.c: 354: i2c_address = 0x00F0 | ((i2c_address >> 8) & 0x0006);
 15501  05AF  087B               	movf	I2C2_ISR@i2c_address+1,w
 15502  05B0  00F4               	movwf	??_I2C2_ISR+1
 15503  05B1  087A               	movf	I2C2_ISR@i2c_address,w
 15504  05B2  00F3               	movwf	??_I2C2_ISR
 15505  05B3  0874               	movf	??_I2C2_ISR+1,w
 15506  05B4  00F3               	movwf	??_I2C2_ISR
 15507  05B5  01F4               	clrf	??_I2C2_ISR+1
 15508  05B6  3006               	movlw	6
 15509  05B7  0573               	andwf	??_I2C2_ISR,w
 15510  05B8  00F5               	movwf	??_I2C2_ISR+2
 15511  05B9  3000               	movlw	0
 15512  05BA  0574               	andwf	??_I2C2_ISR+1,w
 15513  05BB  00F6               	movwf	??_I2C2_ISR+3
 15514  05BC  30F0               	movlw	240
 15515  05BD  0475               	iorwf	??_I2C2_ISR+2,w
 15516  05BE  00FA               	movwf	I2C2_ISR@i2c_address
 15517  05BF  3000               	movlw	0
 15518  05C0  0476               	iorwf	??_I2C2_ISR+3,w
 15519  05C1  00FB               	movwf	I2C2_ISR@i2c_address+1
 15520                           
 15521                           ;i2c2.c: 357: i2c_address |= 0x0001;
 15522  05C2  147A               	bsf	I2C2_ISR@i2c_address,0
 15523                           
 15524                           ;i2c2.c: 360: i2c_10bit_address_restart = 1;
 15525  05C3  0021               	movlb	1	; select bank1
 15526  05C4  01E3               	clrf	I2C2_ISR@i2c_10bit_address_restart^(0+128)
 15527  05C5  0AE3               	incf	I2C2_ISR@i2c_10bit_address_restart^(0+128),f
 15528                           
 15529                           ;i2c2.c: 363: i2c2_state = S_MASTER_SEND_ADDR;
 15530  05C6  3002               	movlw	2
 15531  05C7  00F3               	movwf	??_I2C2_ISR
 15532  05C8  0873               	movf	??_I2C2_ISR,w
 15533  05C9  00F9               	movwf	_i2c2_state
 15534                           
 15535                           ;i2c2.c: 364: }
 15536                           ;i2c2.c: 366: break;
 15537  05CA  0008               	return
 15538  05CB                     i1l4741:	
 15539                           ;i2c2.c: 368: case S_MASTER_SEND_ADDR:
 15540                           
 15541                           
 15542                           ;i2c2.c: 381: if(i2c_10bit_address_restart != 1)
 15543  05CB  0021               	movlb	1	; select bank1
 15544  05CC  0363               	decf	I2C2_ISR@i2c_10bit_address_restart^(0+128),w
 15545  05CD  1903               	btfsc	3,2
 15546  05CE  2DE7               	goto	i1l4759
 15547                           
 15548                           ;i2c2.c: 382: {
 15549                           ;i2c2.c: 384: i2c_address = p_i2c2_trb_current->address;
 15550  05CF  0878               	movf	_p_i2c2_trb_current,w
 15551  05D0  0086               	movwf	6
 15552  05D1  3001               	movlw	1	; select bank2/3
 15553  05D2  0087               	movwf	7
 15554  05D3  3F40               	moviw [0]fsr1
 15555  05D4  00FA               	movwf	I2C2_ISR@i2c_address
 15556  05D5  3F41               	moviw [1]fsr1
 15557  05D6  00FB               	movwf	I2C2_ISR@i2c_address+1
 15558                           
 15559                           ;i2c2.c: 385: pi2c_buf_ptr = p_i2c2_trb_current->pbuffer;
 15560  05D7  0878               	movf	_p_i2c2_trb_current,w
 15561  05D8  3E03               	addlw	3
 15562  05D9  0086               	movwf	6
 15563  05DA  3001               	movlw	1	; select bank2/3
 15564  05DB  0087               	movwf	7
 15565  05DC  3F40               	moviw [0]fsr1
 15566  05DD  00D8               	movwf	I2C2_ISR@pi2c_buf_ptr^(0+128)
 15567  05DE  3F41               	moviw [1]fsr1
 15568  05DF  00D9               	movwf	(I2C2_ISR@pi2c_buf_ptr+1)^(0+128)
 15569                           
 15570                           ;i2c2.c: 386: i2c_bytes_left = p_i2c2_trb_current->length;
 15571  05E0  0878               	movf	_p_i2c2_trb_current,w
 15572  05E1  0086               	movwf	6
 15573  05E2  3001               	movlw	1	; select bank2/3
 15574  05E3  0087               	movwf	7
 15575  05E4  3001               	movlw	1	; select bank2/3
 15576  05E5  3F42               	moviw [2]fsr1
 15577  05E6  00E4               	movwf	I2C2_ISR@i2c_bytes_left^(0+128)
 15578  05E7                     i1l4759:	
 15579                           ;i2c2.c: 407: }
 15580                           ;i2c2.c: 408: }
 15581                           
 15582                           ;i2c2.c: 406: i2c_10bit_address_restart = 0;
 15583                           
 15584                           ;i2c2.c: 404: i2c2_state = S_MASTER_ACK_ADDR;
 15585                           
 15586                           ;i2c2.c: 400: else
 15587                           ;i2c2.c: 401: {
 15588                           ;i2c2.c: 403: SSP2BUF = i2c_address;
 15589                           
 15590                           ;i2c2.c: 399: }
 15591                           
 15592                           ;i2c2.c: 398: i2c2_state = S_MASTER_SEND_ADDR_10BIT_LSB;
 15593                           
 15594                           ;i2c2.c: 393: {
 15595                           ;i2c2.c: 397: SSP2BUF = 0xF0 | ((i2c_address >> 8) & 0x0006);
 15596                           
 15597                           ;i2c2.c: 391: {
 15598                           ;i2c2.c: 392: if (0 == i2c_10bit_address_restart)
 15599                           
 15600                           ;i2c2.c: 387: }
 15601                           ;i2c2.c: 390: if(!1 && (0x0 != i2c_address))
 15602                           
 15603                           
 15604                           ;i2c2.c: 409: else
 15605                           ;i2c2.c: 410: {
 15606                           ;i2c2.c: 412: SSP2BUF = i2c_address;
 15607  05E7  087A               	movf	I2C2_ISR@i2c_address,w
 15608  05E8  0024               	movlb	4	; select bank4
 15609  05E9  0099               	movwf	25	;volatile
 15610                           
 15611                           ;i2c2.c: 413: if(i2c_address & 0x01)
 15612  05EA  1C7A               	btfss	I2C2_ISR@i2c_address,0
 15613  05EB  2DF1               	goto	i1l4765
 15614                           
 15615                           ;i2c2.c: 414: {
 15616                           ;i2c2.c: 416: i2c2_state = S_MASTER_ACK_ADDR;
 15617  05EC  3005               	movlw	5
 15618  05ED  00F3               	movwf	??_I2C2_ISR
 15619  05EE  0873               	movf	??_I2C2_ISR,w
 15620  05EF  00F9               	movwf	_i2c2_state
 15621                           
 15622                           ;i2c2.c: 417: }
 15623  05F0  0008               	return
 15624  05F1                     i1l4765:	
 15625                           
 15626                           ;i2c2.c: 418: else
 15627                           ;i2c2.c: 419: {
 15628                           ;i2c2.c: 421: i2c2_state = S_MASTER_SEND_DATA;
 15629  05F1  3003               	movlw	3
 15630  05F2  00F3               	movwf	??_I2C2_ISR
 15631  05F3  0873               	movf	??_I2C2_ISR,w
 15632  05F4  00F9               	movwf	_i2c2_state
 15633                           
 15634                           ;i2c2.c: 422: }
 15635                           ;i2c2.c: 423: }
 15636                           ;i2c2.c: 424: break;
 15637  05F5  0008               	return
 15638  05F6                     i1l310:	
 15639                           ;i2c2.c: 426: case S_MASTER_SEND_DATA:
 15640                           
 15641                           
 15642                           ;i2c2.c: 429: if(SSP2CON2bits.ACKSTAT)
 15643  05F6  0024               	movlb	4	; select bank4
 15644  05F7  1F1E               	btfss	30,6	;volatile
 15645  05F8  2E04               	goto	i1l4773
 15646                           
 15647                           ;i2c2.c: 430: {
 15648                           ;i2c2.c: 432: i2c2_object.i2cErrors++;
 15649  05F9  3001               	movlw	1
 15650  05FA  00F3               	movwf	??_I2C2_ISR
 15651  05FB  0873               	movf	??_I2C2_ISR,w
 15652  05FC  0021               	movlb	1	; select bank1
 15653  05FD  07D1               	addwf	(_i2c2_object^(0+128)+4),f
 15654                           
 15655                           ;i2c2.c: 435: SSP2CON2bits.ACKSTAT = 0;
 15656  05FE  0024               	movlb	4	; select bank4
 15657  05FF  131E               	bcf	30,6	;volatile
 15658                           
 15659                           ;i2c2.c: 438: I2C2_Stop(I2C2_DATA_NO_ACK);
 15660  0600  3005               	movlw	5
 15661  0601  3195  2550         	fcall	_I2C2_Stop
 15662                           
 15663                           ;i2c2.c: 440: }
 15664  0603  0008               	return
 15665  0604                     i1l4773:	
 15666                           
 15667                           ;i2c2.c: 441: else
 15668                           ;i2c2.c: 442: {
 15669                           ;i2c2.c: 444: if(i2c_bytes_left-- == 0U)
 15670  0604  3001               	movlw	1
 15671  0605  0021               	movlb	1	; select bank1
 15672  0606  02E4               	subwf	I2C2_ISR@i2c_bytes_left^(0+128),f
 15673  0607  0A64               	incf	I2C2_ISR@i2c_bytes_left^(0+128),w
 15674  0608  1D03               	btfss	3,2
 15675  0609  2E1D               	goto	i1l4781
 15676                           
 15677                           ;i2c2.c: 445: {
 15678                           ;i2c2.c: 449: p_i2c2_trb_current++;
 15679  060A  3005               	movlw	5
 15680  060B  00F3               	movwf	??_I2C2_ISR
 15681  060C  0873               	movf	??_I2C2_ISR,w
 15682  060D  07F8               	addwf	_p_i2c2_trb_current,f
 15683                           
 15684                           ;i2c2.c: 452: if(--i2c2_trb_count == 0)
 15685  060E  3001               	movlw	1
 15686  060F  02E5               	subwf	_i2c2_trb_count^(0+128),f
 15687  0610  1D03               	btfss	3,2
 15688  0611  2E16               	goto	i1l314
 15689                           
 15690                           ;i2c2.c: 453: {
 15691                           ;i2c2.c: 454: I2C2_Stop(I2C2_MESSAGE_COMPLETE);
 15692  0612  3000               	movlw	0
 15693  0613  3195  2550         	fcall	_I2C2_Stop
 15694                           
 15695                           ;i2c2.c: 455: }
 15696  0615  0008               	return
 15697  0616                     i1l314:	
 15698                           
 15699                           ;i2c2.c: 456: else
 15700                           ;i2c2.c: 457: {
 15701                           ;i2c2.c: 464: SSP2CON2bits.RSEN = 1;
 15702  0616  0024               	movlb	4	; select bank4
 15703  0617  149E               	bsf	30,1	;volatile
 15704                           
 15705                           ;i2c2.c: 467: i2c2_state = S_MASTER_SEND_ADDR;
 15706  0618  3002               	movlw	2
 15707  0619  00F3               	movwf	??_I2C2_ISR
 15708  061A  0873               	movf	??_I2C2_ISR,w
 15709  061B  00F9               	movwf	_i2c2_state
 15710                           
 15711                           ;i2c2.c: 469: }
 15712                           ;i2c2.c: 470: }
 15713  061C  0008               	return
 15714  061D                     i1l4781:	
 15715                           
 15716                           ;i2c2.c: 471: else
 15717                           ;i2c2.c: 472: {
 15718                           ;i2c2.c: 474: SSP2BUF = *pi2c_buf_ptr++;
 15719  061D  0021               	movlb	1	; select bank1
 15720  061E  0858               	movf	I2C2_ISR@pi2c_buf_ptr^(0+128),w
 15721  061F  0086               	movwf	6
 15722  0620  0859               	movf	(I2C2_ISR@pi2c_buf_ptr+1)^(0+128),w
 15723  0621  0087               	movwf	7
 15724  0622  0801               	movf	1,w
 15725  0623  0024               	movlb	4	; select bank4
 15726  0624  0099               	movwf	25	;volatile
 15727  0625  3001               	movlw	1
 15728  0626  0021               	movlb	1	; select bank1
 15729  0627  07D8               	addwf	I2C2_ISR@pi2c_buf_ptr^(0+128),f
 15730  0628  3000               	movlw	0
 15731  0629  3DD9               	addwfc	(I2C2_ISR@pi2c_buf_ptr+1)^(0+128),f
 15732                           
 15733                           ;i2c2.c: 475: }
 15734                           ;i2c2.c: 476: }
 15735                           ;i2c2.c: 477: break;
 15736  062A  0008               	return
 15737  062B                     i1l317:	
 15738                           ;i2c2.c: 479: case S_MASTER_ACK_ADDR:
 15739                           
 15740                           
 15741                           ;i2c2.c: 482: if(SSP2CON2bits.ACKSTAT)
 15742  062B  0024               	movlb	4	; select bank4
 15743  062C  1F1E               	btfss	30,6	;volatile
 15744  062D  2E39               	goto	i1l318
 15745                           
 15746                           ;i2c2.c: 483: {
 15747                           ;i2c2.c: 486: i2c2_object.i2cErrors++;
 15748  062E  3001               	movlw	1
 15749  062F  00F3               	movwf	??_I2C2_ISR
 15750  0630  0873               	movf	??_I2C2_ISR,w
 15751  0631  0021               	movlb	1	; select bank1
 15752  0632  07D1               	addwf	(_i2c2_object^(0+128)+4),f
 15753                           
 15754                           ;i2c2.c: 489: I2C2_Stop(I2C2_MESSAGE_ADDRESS_NO_ACK);
 15755  0633  3004               	movlw	4
 15756  0634  3195  2550         	fcall	_I2C2_Stop
 15757                           
 15758                           ;i2c2.c: 492: SSP2CON2bits.ACKSTAT = 0;
 15759  0636  0024               	movlb	4	; select bank4
 15760  0637  131E               	bcf	30,6	;volatile
 15761                           
 15762                           ;i2c2.c: 493: }
 15763  0638  0008               	return
 15764  0639                     i1l318:	
 15765                           
 15766                           ;i2c2.c: 494: else
 15767                           ;i2c2.c: 495: {
 15768                           ;i2c2.c: 496: SSP2CON2bits.RCEN = 1;
 15769  0639  159E               	bsf	30,3	;volatile
 15770                           
 15771                           ;i2c2.c: 497: i2c2_state = S_MASTER_ACK_RCV_DATA;
 15772  063A  3008               	movlw	8
 15773  063B  00F3               	movwf	??_I2C2_ISR
 15774  063C  0873               	movf	??_I2C2_ISR,w
 15775  063D  00F9               	movwf	_i2c2_state
 15776                           
 15777                           ;i2c2.c: 498: }
 15778                           ;i2c2.c: 499: break;
 15779  063E  0008               	return
 15780  063F                     i1l4793:	
 15781                           ;i2c2.c: 501: case S_MASTER_RCV_DATA:
 15782                           
 15783                           
 15784                           ;i2c2.c: 506: i2c2_state = S_MASTER_ACK_RCV_DATA;
 15785  063F  3008               	movlw	8
 15786  0640  00F3               	movwf	??_I2C2_ISR
 15787  0641  0873               	movf	??_I2C2_ISR,w
 15788  0642  00F9               	movwf	_i2c2_state
 15789                           
 15790                           ;i2c2.c: 509: SSP2CON2bits.RCEN = 1;
 15791  0643  0024               	movlb	4	; select bank4
 15792  0644  159E               	bsf	30,3	;volatile
 15793                           
 15794                           ;i2c2.c: 511: break;
 15795  0645  0008               	return
 15796  0646                     i1l4797:	
 15797                           ;i2c2.c: 513: case S_MASTER_ACK_RCV_DATA:
 15798                           
 15799                           
 15800                           ;i2c2.c: 516: *pi2c_buf_ptr++ = SSP2BUF;
 15801  0646  0021               	movlb	1	; select bank1
 15802  0647  0858               	movf	I2C2_ISR@pi2c_buf_ptr^(0+128),w
 15803  0648  0086               	movwf	6
 15804  0649  0859               	movf	(I2C2_ISR@pi2c_buf_ptr+1)^(0+128),w
 15805  064A  0087               	movwf	7
 15806  064B  0024               	movlb	4	; select bank4
 15807  064C  0819               	movf	25,w	;volatile
 15808  064D  0081               	movwf	1
 15809  064E  3001               	movlw	1
 15810  064F  0021               	movlb	1	; select bank1
 15811  0650  07D8               	addwf	I2C2_ISR@pi2c_buf_ptr^(0+128),f
 15812  0651  3000               	movlw	0
 15813  0652  3DD9               	addwfc	(I2C2_ISR@pi2c_buf_ptr+1)^(0+128),f
 15814                           
 15815                           ;i2c2.c: 519: if(--i2c_bytes_left)
 15816  0653  3001               	movlw	1
 15817  0654  02E4               	subwf	I2C2_ISR@i2c_bytes_left^(0+128),f
 15818  0655  1903               	btfsc	3,2
 15819  0656  2E5E               	goto	i1l322
 15820                           
 15821                           ;i2c2.c: 520: {
 15822                           ;i2c2.c: 526: SSP2CON2bits.ACKDT = 0;
 15823  0657  0024               	movlb	4	; select bank4
 15824  0658  129E               	bcf	30,5	;volatile
 15825                           
 15826                           ;i2c2.c: 529: i2c2_state = S_MASTER_RCV_DATA;
 15827  0659  3006               	movlw	6
 15828  065A  00F3               	movwf	??_I2C2_ISR
 15829  065B  0873               	movf	??_I2C2_ISR,w
 15830  065C  00F9               	movwf	_i2c2_state
 15831                           
 15832                           ;i2c2.c: 530: }
 15833  065D  2E62               	goto	i1l4809
 15834  065E                     i1l322:	
 15835                           
 15836                           ;i2c2.c: 531: else
 15837                           ;i2c2.c: 532: {
 15838                           ;i2c2.c: 536: SSP2CON2bits.ACKDT = 1;
 15839  065E  0024               	movlb	4	; select bank4
 15840  065F  169E               	bsf	30,5	;volatile
 15841                           
 15842                           ;i2c2.c: 538: I2C2_FunctionComplete();
 15843  0660  3193  23D3         	fcall	_I2C2_FunctionComplete
 15844  0662                     i1l4809:	
 15845                           
 15846                           ;i2c2.c: 539: }
 15847                           ;i2c2.c: 542: SSP2CON2bits.ACKEN = 1;
 15848  0662  0024               	movlb	4	; select bank4
 15849  0663  161E               	bsf	30,4	;volatile
 15850                           
 15851                           ;i2c2.c: 543: break;
 15852  0664  0008               	return
 15853  0665                     i1l4811:	
 15854                           ;i2c2.c: 545: case S_MASTER_RCV_STOP:
 15855                           
 15856                           
 15857                           ;i2c2.c: 546: case S_MASTER_SEND_STOP:
 15858                           ;i2c2.c: 549: I2C2_Stop(I2C2_MESSAGE_COMPLETE);
 15859  0665  3000               	movlw	0
 15860  0666  3195  2550         	fcall	_I2C2_Stop
 15861                           
 15862                           ;i2c2.c: 550: break;
 15863  0668  0008               	return
 15864  0669                     i1l4813:	
 15865                           ;i2c2.c: 552: default:
 15866                           
 15867                           
 15868                           ;i2c2.c: 556: i2c2_object.i2cErrors++;
 15869  0669  3001               	movlw	1
 15870  066A  00F3               	movwf	??_I2C2_ISR
 15871  066B  0873               	movf	??_I2C2_ISR,w
 15872  066C  0021               	movlb	1	; select bank1
 15873  066D  07D1               	addwf	(_i2c2_object^(0+128)+4),f
 15874                           
 15875                           ;i2c2.c: 557: I2C2_Stop(I2C2_LOST_STATE);
 15876  066E  3006               	movlw	6
 15877  066F  3195  2550         	fcall	_I2C2_Stop
 15878                           
 15879                           ;i2c2.c: 560: }
 15880                           
 15881                           ;i2c2.c: 558: break;
 15882  0671  0008               	return
 15883  0672                     i1l4819:	
 15884  0672  0879               	movf	_i2c2_state,w
 15885                           
 15886                           ; Switch size 1, requested type "space"
 15887                           ; Number of cases is 11, Range of values is 0 to 11
 15888                           ; switch strategies available:
 15889                           ; Name         Instructions Cycles
 15890                           ; direct_byte           30     6 (fixed)
 15891                           ; simple_byte           34    18 (average)
 15892                           ; jumptable            260     6 (fixed)
 15893                           ;	Chosen strategy is direct_byte
 15894  0673  0084               	movwf	4
 15895  0674  300C               	movlw	12
 15896  0675  0204               	subwf	4,w
 15897  0676  1803               	skipnc
 15898  0677  2E69               	goto	i1l4813
 15899  0678  3190               	movlp	high i1S6987
 15900  0679  3504               	lslf	4,w
 15901  067A  3E00               	addlw	low i1S6987
 15902  067B  0082               	movwf	2
 15903  067C  0008               	return
 15904  067D                     __end_of_I2C2_ISR:	
 15905                           
 15906                           	psect	swtext1
 15907  1000                     __pswtext1:	
 15908  1000                     i1S6987:	
 15909  1000  3185  2D4C         	ljmp	i1l288
 15910  1002  3185  2D7A         	ljmp	i1l293
 15911  1004  3185  2DCB         	ljmp	i1l4741
 15912  1006  3185  2DF6         	ljmp	i1l310
 15913  1008  3186  2E65         	ljmp	i1l4811
 15914  100A  3186  2E2B         	ljmp	i1l317
 15915  100C  3186  2E3F         	ljmp	i1l4793
 15916  100E  3186  2E65         	ljmp	i1l4811
 15917  1010  3186  2E46         	ljmp	i1l4797
 15918  1012  3186  2E69         	ljmp	i1l4813
 15919  1014  3185  2D81         	ljmp	i1l294
 15920  1016  3185  2DA2         	ljmp	i1l299
 15921                           
 15922                           	psect	text91
 15923  1550                     __ptext91:	
 15924 ;; *************** function _I2C2_Stop *****************
 15925 ;; Defined at:
 15926 ;;		line 581 in file "mcc_generated_files/i2c2.c"
 15927 ;; Parameters:    Size  Location     Type
 15928 ;;  completion_c    1    wreg     enum E2993
 15929 ;; Auto vars:     Size  Location     Type
 15930 ;;  completion_c    1    2[COMMON] enum E2993
 15931 ;; Return value:  Size  Location     Type
 15932 ;;                  1    wreg      void 
 15933 ;; Registers used:
 15934 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 15935 ;; Tracked objects:
 15936 ;;		On entry : 0/0
 15937 ;;		On exit  : 0/0
 15938 ;;		Unchanged: 0/0
 15939 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15940 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15941 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15942 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15943 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15944 ;;Total ram usage:        3 bytes
 15945 ;; Hardware stack levels used:    1
 15946 ;; This function calls:
 15947 ;;		Nothing
 15948 ;; This function is called by:
 15949 ;;		_I2C2_ISR
 15950 ;; This function uses a non-reentrant model
 15951 ;;
 15952                           
 15953                           
 15954                           ;psect for function _I2C2_Stop
 15955  1550                     _I2C2_Stop:	
 15956                           
 15957                           ;incstack = 0
 15958                           ; Regs used in _I2C2_Stop: [wreg+fsr1l+fsr1h+status,2+status,0]
 15959                           ;I2C2_Stop@completion_code stored from wreg
 15960  1550  00F2               	movwf	I2C2_Stop@completion_code
 15961                           
 15962                           ;i2c2.c: 584: SSP2CON2bits.PEN = 1;
 15963  1551  0024               	movlb	4	; select bank4
 15964  1552  151E               	bsf	30,2	;volatile
 15965                           
 15966                           ;i2c2.c: 587: if (p_i2c2_current->pTrFlag != (0))
 15967  1553  0877               	movf	_p_i2c2_current,w
 15968  1554  3E02               	addlw	2
 15969  1555  0086               	movwf	6
 15970  1556  3001               	movlw	1	; select bank2/3
 15971  1557  0087               	movwf	7
 15972  1558  0016               	moviw fsr1++
 15973  1559  0401               	iorwf	1,w
 15974  155A  1903               	btfsc	3,2
 15975  155B  2D6B               	goto	i1l4263
 15976                           
 15977                           ;i2c2.c: 588: {
 15978                           ;i2c2.c: 590: *(p_i2c2_current->pTrFlag) = completion_code;
 15979  155C  0877               	movf	_p_i2c2_current,w
 15980  155D  3E02               	addlw	2
 15981  155E  0086               	movwf	6
 15982  155F  3001               	movlw	1	; select bank2/3
 15983  1560  0087               	movwf	7
 15984  1561  3F40               	moviw [0]fsr1
 15985  1562  00F0               	movwf	??_I2C2_Stop
 15986  1563  3F41               	moviw [1]fsr1
 15987  1564  00F1               	movwf	??_I2C2_Stop+1
 15988  1565  0870               	movf	??_I2C2_Stop,w
 15989  1566  0086               	movwf	6
 15990  1567  0871               	movf	??_I2C2_Stop+1,w
 15991  1568  0087               	movwf	7
 15992  1569  0872               	movf	I2C2_Stop@completion_code,w
 15993  156A  0081               	movwf	1
 15994  156B                     i1l4263:	
 15995                           
 15996                           ;i2c2.c: 591: }
 15997                           ;i2c2.c: 594: i2c2_state = S_MASTER_IDLE;
 15998  156B  01F9               	clrf	_i2c2_state
 15999  156C  0008               	return
 16000  156D                     __end_of_I2C2_Stop:	
 16001                           
 16002                           	psect	text92
 16003  13D3                     __ptext92:	
 16004 ;; *************** function _I2C2_FunctionComplete *****************
 16005 ;; Defined at:
 16006 ;;		line 563 in file "mcc_generated_files/i2c2.c"
 16007 ;; Parameters:    Size  Location     Type
 16008 ;;		None
 16009 ;; Auto vars:     Size  Location     Type
 16010 ;;		None
 16011 ;; Return value:  Size  Location     Type
 16012 ;;                  1    wreg      void 
 16013 ;; Registers used:
 16014 ;;		wreg, status,2, status,0
 16015 ;; Tracked objects:
 16016 ;;		On entry : 0/0
 16017 ;;		On exit  : 0/0
 16018 ;;		Unchanged: 0/0
 16019 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16020 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16021 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16022 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16023 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16024 ;;Total ram usage:        1 bytes
 16025 ;; Hardware stack levels used:    1
 16026 ;; This function calls:
 16027 ;;		Nothing
 16028 ;; This function is called by:
 16029 ;;		_I2C2_ISR
 16030 ;; This function uses a non-reentrant model
 16031 ;;
 16032                           
 16033                           
 16034                           ;psect for function _I2C2_FunctionComplete
 16035  13D3                     _I2C2_FunctionComplete:	
 16036                           
 16037                           ;i2c2.c: 567: p_i2c2_trb_current++;
 16038                           
 16039                           ;incstack = 0
 16040                           ; Regs used in _I2C2_FunctionComplete: [wreg+status,2+status,0]
 16041  13D3  3005               	movlw	5
 16042  13D4  00F0               	movwf	??_I2C2_FunctionComplete
 16043  13D5  0870               	movf	??_I2C2_FunctionComplete,w
 16044  13D6  07F8               	addwf	_p_i2c2_trb_current,f
 16045                           
 16046                           ;i2c2.c: 570: if(--i2c2_trb_count == 0)
 16047  13D7  3001               	movlw	1
 16048  13D8  0021               	movlb	1	; select bank1
 16049  13D9  02E5               	subwf	_i2c2_trb_count^(0+128),f
 16050  13DA  1D03               	btfss	3,2
 16051  13DB  2BE1               	goto	i1l329
 16052                           
 16053                           ;i2c2.c: 571: {
 16054                           ;i2c2.c: 572: i2c2_state = S_MASTER_SEND_STOP;
 16055  13DC  3004               	movlw	4
 16056  13DD  00F0               	movwf	??_I2C2_FunctionComplete
 16057  13DE  0870               	movf	??_I2C2_FunctionComplete,w
 16058  13DF  00F9               	movwf	_i2c2_state
 16059                           
 16060                           ;i2c2.c: 573: }
 16061  13E0  0008               	return
 16062  13E1                     i1l329:	
 16063                           
 16064                           ;i2c2.c: 574: else
 16065                           ;i2c2.c: 575: {
 16066                           ;i2c2.c: 576: i2c2_state = S_MASTER_RESTART;
 16067  13E1  01F9               	clrf	_i2c2_state
 16068  13E2  0AF9               	incf	_i2c2_state,f
 16069  13E3  0008               	return
 16070  13E4                     __end_of_I2C2_FunctionComplete:	
 16071                           
 16072                           	psect	text93
 16073  12D3                     __ptext93:	
 16074 ;; *************** function _I2C2_BusCollisionISR *****************
 16075 ;; Defined at:
 16076 ;;		line 729 in file "mcc_generated_files/i2c2.c"
 16077 ;; Parameters:    Size  Location     Type
 16078 ;;		None
 16079 ;; Auto vars:     Size  Location     Type
 16080 ;;		None
 16081 ;; Return value:  Size  Location     Type
 16082 ;;                  1    wreg      void 
 16083 ;; Registers used:
 16084 ;;		None
 16085 ;; Tracked objects:
 16086 ;;		On entry : 0/0
 16087 ;;		On exit  : 0/0
 16088 ;;		Unchanged: 0/0
 16089 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16090 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16091 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16092 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16093 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16094 ;;Total ram usage:        0 bytes
 16095 ;; Hardware stack levels used:    1
 16096 ;; This function calls:
 16097 ;;		Nothing
 16098 ;; This function is called by:
 16099 ;;		_INTERRUPT_InterruptManager
 16100 ;; This function uses a non-reentrant model
 16101 ;;
 16102                           
 16103                           
 16104                           ;psect for function _I2C2_BusCollisionISR
 16105  12D3                     _I2C2_BusCollisionISR:	
 16106                           
 16107                           ;incstack = 0
 16108                           ; Regs used in _I2C2_BusCollisionISR: []
 16109  12D3  0008               	return
 16110  12D4                     __end_of_I2C2_BusCollisionISR:	
 16111  007E                     btemp	set	126	;btemp
 16112  007E                     int$flags	set	126
 16113  007E                     wtemp0	set	126


Data Sizes:
    Strings     0
    Constant    38
    Data        7
    BSS         148
    Persistent  6
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      7      14
    BANK0            80     78      78
    BANK1            80     45      71
    BANK2            80      0      80
    BANK3            80     12      60
    BANK4            80      0       0
    BANK5            80      0       0
    BANK6            80      0       0
    BANK7            80      0       0
    BANK8            80      0       0
    BANK9            80      0       0
    BANK10           80      0       0
    BANK11           80      0       0
    BANK12           48      0       0

Pointer List with Targets:

    i2c2_tr_queue.ptrb_list.pbuffer	PTR unsigned char  size(2) Largest target is 24
		 -> I2C_BufferRead@ReadAddr(BANK0[1]), I2C_BufferRead@status(BANK0[1]), I2C_ByteWrite@data(BANK0[2]), I2C_ByteWrite@status(BANK0[1]), 
		 -> data(BANK3[8]), b1(BANK3[24]), HMC5883L_ReadBit@tmp(COMMON[1]), HMC5883L_ReadBits@tmp(BANK0[1]), 
		 -> HMC5883L_WriteBit@tmp(COMMON[1]), HMC5883L_WriteBits@tmp(COMMON[1]), heading(BANK3[8]), HMC5883L_TestConnection@tmp(COMMON[3]), 
		 -> MPU6050_ReadBit@tmp(COMMON[1]), MPU6050_ReadBits@tmp(COMMON[1]), MPU6050_WriteBit@tmp(COMMON[1]), MPU6050_WriteBits@tmp(COMMON[1]), 
		 -> MPU6050_GetRawAccel@tempBuffer(COMMON[6]), MPU6050_GetRawAccelGyro@tmpBuffer(COMMON[14]), 

    i2c2_tr_queue.pTrFlag	PTR enum E2993 size(2) Largest target is 24
		 -> I2C_BufferRead@ReadAddr(BANK0[1]), I2C_BufferRead@status(BANK0[1]), I2C_ByteWrite@data(BANK0[2]), I2C_ByteWrite@status(BANK0[1]), 
		 -> data(BANK3[8]), b1(BANK3[24]), HMC5883L_ReadBit@tmp(COMMON[1]), HMC5883L_ReadBits@tmp(BANK0[1]), 
		 -> HMC5883L_WriteBit@tmp(COMMON[1]), HMC5883L_WriteBits@tmp(COMMON[1]), heading(BANK3[8]), HMC5883L_TestConnection@tmp(COMMON[3]), 
		 -> MPU6050_ReadBit@tmp(COMMON[1]), MPU6050_ReadBits@tmp(COMMON[1]), MPU6050_WriteBit@tmp(COMMON[1]), MPU6050_WriteBits@tmp(COMMON[1]), 
		 -> MPU6050_GetRawAccel@tempBuffer(COMMON[6]), MPU6050_GetRawAccelGyro@tmpBuffer(COMMON[14]), 

    i2c2_tr_queue.ptrb_list	PTR struct . size(1) Largest target is 5
		 -> I2C2_MasterRead@trBlock(BANK2[5]), I2C2_MasterWrite@trBlock(BANK2[5]), 

    I2C_BufferRead@pBuffer	PTR unsigned char  size(2) Largest target is 24
		 -> data(BANK3[8]), b1(BANK3[24]), HMC5883L_ReadBit@tmp(COMMON[1]), HMC5883L_ReadBits@tmp(BANK0[1]), 
		 -> HMC5883L_WriteBit@tmp(COMMON[1]), HMC5883L_WriteBits@tmp(COMMON[1]), heading(BANK3[8]), HMC5883L_TestConnection@tmp(COMMON[3]), 
		 -> MPU6050_ReadBit@tmp(COMMON[1]), MPU6050_ReadBits@tmp(COMMON[1]), MPU6050_WriteBit@tmp(COMMON[1]), MPU6050_WriteBits@tmp(COMMON[1]), 
		 -> MPU6050_GetRawAccel@tempBuffer(COMMON[6]), MPU6050_GetRawAccelGyro@tmpBuffer(COMMON[14]), 

    I2C_ByteWrite@pBuffer	PTR unsigned char  size(1) Largest target is 1
		 -> BMP_readTemperature@tmp(BANK1[1]), BMP_init@t(BANK0[1]), HMC5883L_WriteBit@tmp(COMMON[1]), HMC5883L_WriteBits@tmp(COMMON[1]), 
		 -> HMC5883L_SetMode@tmp(COMMON[1]), HMC5883L_SetGain@tmp(COMMON[1]), HMC5883L_Initialize@tmp(COMMON[1]), MPU6050_WriteBit@tmp(COMMON[1]), 
		 -> MPU6050_WriteBits@tmp(COMMON[1]), 

    Wireless_sendData@payload	PTR unsigned char  size(1) Largest target is 7
		 -> Wireless_packageData@data(BANK1[7]), Wireless_determineTransmitPower@testPayload(BANK0[1]), 

    RF_DataIsReady@channel	PTR unsigned char  size(1) Largest target is 1
		 -> Wireless_checkDataReceived@channel(BANK0[1]), 

    RF_RxPayload@payload	PTR unsigned char  size(1) Largest target is 2
		 -> Wireless_checkDataReceived@data(BANK0[2]), 

    RF_TxPayload@payload	PTR unsigned char  size(1) Largest target is 7
		 -> Wireless_packageData@data(BANK1[7]), Wireless_determineTransmitPower@testPayload(BANK0[1]), 

    RF_WriteRegisterData@buf	PTR unsigned char  size(2) Largest target is 7
		 -> Wireless_packageData@data(BANK1[7]), Wireless_determineTransmitPower@testPayload(BANK0[1]), Wireless_init@TADDR(CODE[5]), 

    RF_ReadRegisterData@buf	PTR unsigned char  size(1) Largest target is 2
		 -> Wireless_checkDataReceived@data(BANK0[2]), Wireless_wake@reg(BANK0[1]), Wireless_sleep@reg(BANK0[1]), Wireless_changeTransmitPower@val(BANK0[1]), 

    SPI_WriteBuffer@bufOut	PTR unsigned char  size(2) Largest target is 7
		 -> Wireless_packageData@data(BANK1[7]), Wireless_determineTransmitPower@testPayload(BANK0[1]), Wireless_init@TADDR(CODE[5]), 

    SPI_WriteReadBuffer@bufOut	PTR unsigned char  size(1) Largest target is 2
		 -> Wireless_checkDataReceived@data(BANK0[2]), Wireless_wake@reg(BANK0[1]), Wireless_sleep@reg(BANK0[1]), Wireless_changeTransmitPower@val(BANK0[1]), 

    SPI_WriteReadBuffer@bufIn	PTR unsigned char  size(1) Largest target is 2
		 -> Wireless_checkDataReceived@data(BANK0[2]), Wireless_wake@reg(BANK0[1]), Wireless_sleep@reg(BANK0[1]), Wireless_changeTransmitPower@val(BANK0[1]), 

    HMC5883L_I2C_BufferRead@pBuffer	PTR unsigned char  size(2) Largest target is 14
		 -> HMC5883L_ReadBit@tmp(COMMON[1]), HMC5883L_ReadBits@tmp(BANK0[1]), HMC5883L_WriteBit@tmp(COMMON[1]), HMC5883L_WriteBits@tmp(COMMON[1]), 
		 -> heading(BANK3[8]), HMC5883L_TestConnection@tmp(COMMON[3]), MPU6050_ReadBit@tmp(COMMON[1]), MPU6050_ReadBits@tmp(COMMON[1]), 
		 -> MPU6050_WriteBit@tmp(COMMON[1]), MPU6050_WriteBits@tmp(COMMON[1]), MPU6050_GetRawAccel@tempBuffer(COMMON[6]), MPU6050_GetRawAccelGyro@tmpBuffer(COMMON[14]), 

    HMC5883L_ReadBits@data	PTR unsigned char  size(1) Largest target is 1
		 -> BMP_readTemperature@tmp(BANK1[1]), HMC5883L_GetHeading@tmp(COMMON[1]), HMC5883L_GetMode@tmp(COMMON[1]), HMC5883L_GetGain@tmp(COMMON[1]), 
		 -> HMC5883L_GetMeasurementBias@tmp(COMMON[1]), HMC5883L_GetDataRate@tmp(COMMON[1]), HMC5883L_GetSampleAveraging@tmp(COMMON[1]), 

    I2C2_MasterWriteTRBBuild@pdata	PTR unsigned char  size(1) Largest target is 2
		 -> I2C_BufferRead@ReadAddr(BANK0[1]), I2C_ByteWrite@data(BANK0[2]), 

    I2C2_MasterWriteTRBBuild@ptrb.pbuffer	PTR unsigned char  size(2) Largest target is 24
		 -> I2C_BufferRead@ReadAddr(BANK0[1]), I2C_BufferRead@status(BANK0[1]), I2C_ByteWrite@data(BANK0[2]), I2C_ByteWrite@status(BANK0[1]), 
		 -> data(BANK3[8]), b1(BANK3[24]), HMC5883L_ReadBit@tmp(COMMON[1]), HMC5883L_ReadBits@tmp(BANK0[1]), 
		 -> HMC5883L_WriteBit@tmp(COMMON[1]), HMC5883L_WriteBits@tmp(COMMON[1]), heading(BANK3[8]), HMC5883L_TestConnection@tmp(COMMON[3]), 
		 -> MPU6050_ReadBit@tmp(COMMON[1]), MPU6050_ReadBits@tmp(COMMON[1]), MPU6050_WriteBit@tmp(COMMON[1]), MPU6050_WriteBits@tmp(COMMON[1]), 
		 -> MPU6050_GetRawAccel@tempBuffer(COMMON[6]), MPU6050_GetRawAccelGyro@tmpBuffer(COMMON[14]), 

    I2C2_MasterWriteTRBBuild@ptrb	PTR struct . size(1) Largest target is 5
		 -> I2C2_MasterWrite@trBlock(BANK2[5]), 

    I2C2_MasterReadTRBBuild@pdata	PTR unsigned char  size(2) Largest target is 24
		 -> data(BANK3[8]), b1(BANK3[24]), HMC5883L_ReadBit@tmp(COMMON[1]), HMC5883L_ReadBits@tmp(BANK0[1]), 
		 -> HMC5883L_WriteBit@tmp(COMMON[1]), HMC5883L_WriteBits@tmp(COMMON[1]), heading(BANK3[8]), HMC5883L_TestConnection@tmp(COMMON[3]), 
		 -> MPU6050_ReadBit@tmp(COMMON[1]), MPU6050_ReadBits@tmp(COMMON[1]), MPU6050_WriteBit@tmp(COMMON[1]), MPU6050_WriteBits@tmp(COMMON[1]), 
		 -> MPU6050_GetRawAccel@tempBuffer(COMMON[6]), MPU6050_GetRawAccelGyro@tmpBuffer(COMMON[14]), 

    I2C2_MasterReadTRBBuild@ptrb.pbuffer	PTR unsigned char  size(2) Largest target is 24
		 -> I2C_BufferRead@ReadAddr(BANK0[1]), I2C_BufferRead@status(BANK0[1]), I2C_ByteWrite@data(BANK0[2]), I2C_ByteWrite@status(BANK0[1]), 
		 -> data(BANK3[8]), b1(BANK3[24]), HMC5883L_ReadBit@tmp(COMMON[1]), HMC5883L_ReadBits@tmp(BANK0[1]), 
		 -> HMC5883L_WriteBit@tmp(COMMON[1]), HMC5883L_WriteBits@tmp(COMMON[1]), heading(BANK3[8]), HMC5883L_TestConnection@tmp(COMMON[3]), 
		 -> MPU6050_ReadBit@tmp(COMMON[1]), MPU6050_ReadBits@tmp(COMMON[1]), MPU6050_WriteBit@tmp(COMMON[1]), MPU6050_WriteBits@tmp(COMMON[1]), 
		 -> MPU6050_GetRawAccel@tempBuffer(COMMON[6]), MPU6050_GetRawAccelGyro@tmpBuffer(COMMON[14]), 

    I2C2_MasterReadTRBBuild@ptrb	PTR struct . size(1) Largest target is 5
		 -> I2C2_MasterRead@trBlock(BANK2[5]), 

    i2c2_object.pTrTail.ptrb_list.pbuffer	PTR unsigned char  size(2) Largest target is 24
		 -> I2C_BufferRead@ReadAddr(BANK0[1]), I2C_BufferRead@status(BANK0[1]), I2C_ByteWrite@data(BANK0[2]), I2C_ByteWrite@status(BANK0[1]), 
		 -> data(BANK3[8]), b1(BANK3[24]), HMC5883L_ReadBit@tmp(COMMON[1]), HMC5883L_ReadBits@tmp(BANK0[1]), 
		 -> HMC5883L_WriteBit@tmp(COMMON[1]), HMC5883L_WriteBits@tmp(COMMON[1]), heading(BANK3[8]), HMC5883L_TestConnection@tmp(COMMON[3]), 
		 -> MPU6050_ReadBit@tmp(COMMON[1]), MPU6050_ReadBits@tmp(COMMON[1]), MPU6050_WriteBit@tmp(COMMON[1]), MPU6050_WriteBits@tmp(COMMON[1]), 
		 -> MPU6050_GetRawAccel@tempBuffer(COMMON[6]), MPU6050_GetRawAccelGyro@tmpBuffer(COMMON[14]), 

    i2c2_object.pTrTail.pTrFlag	PTR enum E2993 size(2) Largest target is 24
		 -> I2C_BufferRead@ReadAddr(BANK0[1]), I2C_BufferRead@status(BANK0[1]), I2C_ByteWrite@data(BANK0[2]), I2C_ByteWrite@status(BANK0[1]), 
		 -> data(BANK3[8]), b1(BANK3[24]), HMC5883L_ReadBit@tmp(COMMON[1]), HMC5883L_ReadBits@tmp(BANK0[1]), 
		 -> HMC5883L_WriteBit@tmp(COMMON[1]), HMC5883L_WriteBits@tmp(COMMON[1]), heading(BANK3[8]), HMC5883L_TestConnection@tmp(COMMON[3]), 
		 -> MPU6050_ReadBit@tmp(COMMON[1]), MPU6050_ReadBits@tmp(COMMON[1]), MPU6050_WriteBit@tmp(COMMON[1]), MPU6050_WriteBits@tmp(COMMON[1]), 
		 -> MPU6050_GetRawAccel@tempBuffer(COMMON[6]), MPU6050_GetRawAccelGyro@tmpBuffer(COMMON[14]), 

    i2c2_object.pTrTail.ptrb_list	PTR struct . size(1) Largest target is 5
		 -> I2C2_MasterRead@trBlock(BANK2[5]), I2C2_MasterWrite@trBlock(BANK2[5]), 

    I2C2_MasterTRBInsert@ptrb_list	PTR struct . size(1) Largest target is 5
		 -> I2C2_MasterRead@trBlock(BANK2[5]), I2C2_MasterWrite@trBlock(BANK2[5]), 

    I2C2_MasterTRBInsert@pflag	PTR enum E2993 size(1) Largest target is 1
		 -> I2C_BufferRead@status(BANK0[1]), I2C_ByteWrite@status(BANK0[1]), 

    I2C2_MasterRead@pflag	PTR enum E2993 size(1) Largest target is 1
		 -> I2C_BufferRead@status(BANK0[1]), 

    I2C2_MasterRead@pdata	PTR unsigned char  size(2) Largest target is 24
		 -> data(BANK3[8]), b1(BANK3[24]), HMC5883L_ReadBit@tmp(COMMON[1]), HMC5883L_ReadBits@tmp(BANK0[1]), 
		 -> HMC5883L_WriteBit@tmp(COMMON[1]), HMC5883L_WriteBits@tmp(COMMON[1]), heading(BANK3[8]), HMC5883L_TestConnection@tmp(COMMON[3]), 
		 -> MPU6050_ReadBit@tmp(COMMON[1]), MPU6050_ReadBits@tmp(COMMON[1]), MPU6050_WriteBit@tmp(COMMON[1]), MPU6050_WriteBits@tmp(COMMON[1]), 
		 -> MPU6050_GetRawAccel@tempBuffer(COMMON[6]), MPU6050_GetRawAccelGyro@tmpBuffer(COMMON[14]), 

    F3105.pbuffer	PTR unsigned char  size(2) Largest target is 24
		 -> I2C_BufferRead@ReadAddr(BANK0[1]), I2C_BufferRead@status(BANK0[1]), I2C_ByteWrite@data(BANK0[2]), I2C_ByteWrite@status(BANK0[1]), 
		 -> data(BANK3[8]), b1(BANK3[24]), HMC5883L_ReadBit@tmp(COMMON[1]), HMC5883L_ReadBits@tmp(BANK0[1]), 
		 -> HMC5883L_WriteBit@tmp(COMMON[1]), HMC5883L_WriteBits@tmp(COMMON[1]), heading(BANK3[8]), HMC5883L_TestConnection@tmp(COMMON[3]), 
		 -> MPU6050_ReadBit@tmp(COMMON[1]), MPU6050_ReadBits@tmp(COMMON[1]), MPU6050_WriteBit@tmp(COMMON[1]), MPU6050_WriteBits@tmp(COMMON[1]), 
		 -> MPU6050_GetRawAccel@tempBuffer(COMMON[6]), MPU6050_GetRawAccelGyro@tmpBuffer(COMMON[14]), 

    I2C2_MasterWrite@pflag	PTR enum E2993 size(1) Largest target is 1
		 -> I2C_BufferRead@status(BANK0[1]), I2C_ByteWrite@status(BANK0[1]), 

    I2C2_MasterWrite@pdata	PTR unsigned char  size(1) Largest target is 2
		 -> I2C_BufferRead@ReadAddr(BANK0[1]), I2C_ByteWrite@data(BANK0[2]), 

    F3100.pbuffer	PTR unsigned char  size(2) Largest target is 24
		 -> I2C_BufferRead@ReadAddr(BANK0[1]), I2C_BufferRead@status(BANK0[1]), I2C_ByteWrite@data(BANK0[2]), I2C_ByteWrite@status(BANK0[1]), 
		 -> data(BANK3[8]), b1(BANK3[24]), HMC5883L_ReadBit@tmp(COMMON[1]), HMC5883L_ReadBits@tmp(BANK0[1]), 
		 -> HMC5883L_WriteBit@tmp(COMMON[1]), HMC5883L_WriteBits@tmp(COMMON[1]), heading(BANK3[8]), HMC5883L_TestConnection@tmp(COMMON[3]), 
		 -> MPU6050_ReadBit@tmp(COMMON[1]), MPU6050_ReadBits@tmp(COMMON[1]), MPU6050_WriteBit@tmp(COMMON[1]), MPU6050_WriteBits@tmp(COMMON[1]), 
		 -> MPU6050_GetRawAccel@tempBuffer(COMMON[6]), MPU6050_GetRawAccelGyro@tmpBuffer(COMMON[14]), 

    I2C2_ISR@pi2c_buf_ptr	PTR unsigned char  size(2) Largest target is 24
		 -> I2C_BufferRead@ReadAddr(BANK0[1]), I2C_BufferRead@status(BANK0[1]), I2C_ByteWrite@data(BANK0[2]), I2C_ByteWrite@status(BANK0[1]), 
		 -> data(BANK3[8]), b1(BANK3[24]), HMC5883L_ReadBit@tmp(COMMON[1]), HMC5883L_ReadBits@tmp(BANK0[1]), 
		 -> HMC5883L_WriteBit@tmp(COMMON[1]), HMC5883L_WriteBits@tmp(COMMON[1]), heading(BANK3[8]), HMC5883L_TestConnection@tmp(COMMON[3]), 
		 -> MPU6050_ReadBit@tmp(COMMON[1]), MPU6050_ReadBits@tmp(COMMON[1]), MPU6050_WriteBit@tmp(COMMON[1]), MPU6050_WriteBits@tmp(COMMON[1]), 
		 -> MPU6050_GetRawAccel@tempBuffer(COMMON[6]), MPU6050_GetRawAccelGyro@tmpBuffer(COMMON[14]), NULL(NULL[0]), 

    p_i2c2_trb_current.pbuffer	PTR unsigned char  size(2) Largest target is 24
		 -> I2C_BufferRead@ReadAddr(BANK0[1]), I2C_BufferRead@status(BANK0[1]), I2C_ByteWrite@data(BANK0[2]), I2C_ByteWrite@status(BANK0[1]), 
		 -> data(BANK3[8]), b1(BANK3[24]), HMC5883L_ReadBit@tmp(COMMON[1]), HMC5883L_ReadBits@tmp(BANK0[1]), 
		 -> HMC5883L_WriteBit@tmp(COMMON[1]), HMC5883L_WriteBits@tmp(COMMON[1]), heading(BANK3[8]), HMC5883L_TestConnection@tmp(COMMON[3]), 
		 -> MPU6050_ReadBit@tmp(COMMON[1]), MPU6050_ReadBits@tmp(COMMON[1]), MPU6050_WriteBit@tmp(COMMON[1]), MPU6050_WriteBits@tmp(COMMON[1]), 
		 -> MPU6050_GetRawAccel@tempBuffer(COMMON[6]), MPU6050_GetRawAccelGyro@tmpBuffer(COMMON[14]), 

    p_i2c2_trb_current	PTR struct . size(1) Largest target is 5
		 -> I2C2_MasterRead@trBlock(BANK2[5]), I2C2_MasterWrite@trBlock(BANK2[5]), NULL(NULL[0]), 

    i2c2_object.pTrHead.pTrFlag	PTR enum E2993 size(2) Largest target is 24
		 -> I2C_BufferRead@ReadAddr(BANK0[1]), I2C_BufferRead@status(BANK0[1]), I2C_ByteWrite@data(BANK0[2]), I2C_ByteWrite@status(BANK0[1]), 
		 -> data(BANK3[8]), b1(BANK3[24]), HMC5883L_ReadBit@tmp(COMMON[1]), HMC5883L_ReadBits@tmp(BANK0[1]), 
		 -> HMC5883L_WriteBit@tmp(COMMON[1]), HMC5883L_WriteBits@tmp(COMMON[1]), heading(BANK3[8]), HMC5883L_TestConnection@tmp(COMMON[3]), 
		 -> MPU6050_ReadBit@tmp(COMMON[1]), MPU6050_ReadBits@tmp(COMMON[1]), MPU6050_WriteBit@tmp(COMMON[1]), MPU6050_WriteBits@tmp(COMMON[1]), 
		 -> MPU6050_GetRawAccel@tempBuffer(COMMON[6]), MPU6050_GetRawAccelGyro@tmpBuffer(COMMON[14]), 

    i2c2_object.pTrHead.ptrb_list	PTR struct . size(1) Largest target is 5
		 -> I2C2_MasterRead@trBlock(BANK2[5]), I2C2_MasterWrite@trBlock(BANK2[5]), 

    S587$pbuffer	PTR unsigned char  size(2) Largest target is 24
		 -> I2C_BufferRead@ReadAddr(BANK0[1]), I2C_BufferRead@status(BANK0[1]), I2C_ByteWrite@data(BANK0[2]), I2C_ByteWrite@status(BANK0[1]), 
		 -> data(BANK3[8]), b1(BANK3[24]), HMC5883L_ReadBit@tmp(COMMON[1]), HMC5883L_ReadBits@tmp(BANK0[1]), 
		 -> HMC5883L_WriteBit@tmp(COMMON[1]), HMC5883L_WriteBits@tmp(COMMON[1]), heading(BANK3[8]), HMC5883L_TestConnection@tmp(COMMON[3]), 
		 -> MPU6050_ReadBit@tmp(COMMON[1]), MPU6050_ReadBits@tmp(COMMON[1]), MPU6050_WriteBit@tmp(COMMON[1]), MPU6050_WriteBits@tmp(COMMON[1]), 
		 -> MPU6050_GetRawAccel@tempBuffer(COMMON[6]), MPU6050_GetRawAccelGyro@tmpBuffer(COMMON[14]), 

    p_i2c2_current.pbuffer	PTR unsigned char  size(2) Largest target is 24
		 -> I2C_BufferRead@ReadAddr(BANK0[1]), I2C_BufferRead@status(BANK0[1]), I2C_ByteWrite@data(BANK0[2]), I2C_ByteWrite@status(BANK0[1]), 
		 -> data(BANK3[8]), b1(BANK3[24]), HMC5883L_ReadBit@tmp(COMMON[1]), HMC5883L_ReadBits@tmp(BANK0[1]), 
		 -> HMC5883L_WriteBit@tmp(COMMON[1]), HMC5883L_WriteBits@tmp(COMMON[1]), heading(BANK3[8]), HMC5883L_TestConnection@tmp(COMMON[3]), 
		 -> MPU6050_ReadBit@tmp(COMMON[1]), MPU6050_ReadBits@tmp(COMMON[1]), MPU6050_WriteBit@tmp(COMMON[1]), MPU6050_WriteBits@tmp(COMMON[1]), 
		 -> MPU6050_GetRawAccel@tempBuffer(COMMON[6]), MPU6050_GetRawAccelGyro@tmpBuffer(COMMON[14]), 

    S599$pTrFlag	PTR enum E2993 size(2) Largest target is 24
		 -> I2C_BufferRead@ReadAddr(BANK0[1]), I2C_BufferRead@status(BANK0[1]), I2C_ByteWrite@data(BANK0[2]), I2C_ByteWrite@status(BANK0[1]), 
		 -> data(BANK3[8]), b1(BANK3[24]), HMC5883L_ReadBit@tmp(COMMON[1]), HMC5883L_ReadBits@tmp(BANK0[1]), 
		 -> HMC5883L_WriteBit@tmp(COMMON[1]), HMC5883L_WriteBits@tmp(COMMON[1]), heading(BANK3[8]), HMC5883L_TestConnection@tmp(COMMON[3]), 
		 -> MPU6050_ReadBit@tmp(COMMON[1]), MPU6050_ReadBits@tmp(COMMON[1]), MPU6050_WriteBit@tmp(COMMON[1]), MPU6050_WriteBits@tmp(COMMON[1]), 
		 -> MPU6050_GetRawAccel@tempBuffer(COMMON[6]), MPU6050_GetRawAccelGyro@tmpBuffer(COMMON[14]), 

    p_i2c2_current.pTrFlag	PTR enum E2993 size(2) Largest target is 24
		 -> I2C_BufferRead@ReadAddr(BANK0[1]), I2C_BufferRead@status(BANK0[1]), I2C_ByteWrite@data(BANK0[2]), I2C_ByteWrite@status(BANK0[1]), 
		 -> data(BANK3[8]), b1(BANK3[24]), HMC5883L_ReadBit@tmp(COMMON[1]), HMC5883L_ReadBits@tmp(BANK0[1]), 
		 -> HMC5883L_WriteBit@tmp(COMMON[1]), HMC5883L_WriteBits@tmp(COMMON[1]), heading(BANK3[8]), HMC5883L_TestConnection@tmp(COMMON[3]), 
		 -> MPU6050_ReadBit@tmp(COMMON[1]), MPU6050_ReadBits@tmp(COMMON[1]), MPU6050_WriteBit@tmp(COMMON[1]), MPU6050_WriteBits@tmp(COMMON[1]), 
		 -> MPU6050_GetRawAccel@tempBuffer(COMMON[6]), MPU6050_GetRawAccelGyro@tmpBuffer(COMMON[14]), 

    S599$ptrb_list	PTR struct . size(1) Largest target is 5
		 -> I2C2_MasterRead@trBlock(BANK2[5]), I2C2_MasterWrite@trBlock(BANK2[5]), 

    p_i2c2_current.ptrb_list	PTR struct . size(1) Largest target is 5
		 -> I2C2_MasterRead@trBlock(BANK2[5]), I2C2_MasterWrite@trBlock(BANK2[5]), 

    p_i2c2_current	PTR struct . size(1) Largest target is 5
		 -> i2c2_tr_queue(BANK2[4]), NULL(NULL[0]), 

    S610$pTrHead	PTR struct . size(1) Largest target is 5
		 -> i2c2_tr_queue(BANK2[4]), 

    i2c2_object.pTrHead	PTR struct . size(1) Largest target is 5
		 -> i2c2_tr_queue(BANK2[4]), 

    S610$pTrTail	PTR struct . size(1) Largest target is 5
		 -> i2c2_tr_queue(BANK2[4]), 

    i2c2_object.pTrTail	PTR struct . size(1) Largest target is 5
		 -> i2c2_tr_queue(BANK2[4]), 

    TMR1_SetInterruptHandler@InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> TMR1_DefaultInterruptHandler(), 

    TMR1_InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> TMR1_DefaultInterruptHandler(), Absolute function(), 

    IOCAF2_SetInterruptHandler@InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> IOCAF2_DefaultInterruptHandler(), 

    IOCAF2_InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), IOCAF2_DefaultInterruptHandler(), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _INTERRUPT_InterruptManager in COMMON

    _INTERRUPT_InterruptManager->_I2C2_ISR
    _I2C2_ISR->_I2C2_Stop

Critical Paths under _main in BANK0

    _Wireless_wake->_RF_ReadRegisterData
    _Wireless_sleep->_RF_ReadRegisterData
    _Wireless_packageData->___fttol
    _Wireless_determineTransmitPower->_Wireless_sendData
    _Wireless_sendData->_RF_TxPayload
    _RF_TxPayload->_RF_WriteRegisterData
    _RF_Write->_SPI_WriteRead
    _RF_GetStatus->_RF_WriteRead
    _RF_WriteRead->_SPI_WriteRead
    _Wireless_changeTransmitPower->_RF_ReadRegisterData
    _Wireless_checkDataReceived->_RF_RxPayload
    _RF_RxPayload->_RF_ReadRegisterData
    _RF_ReadRegisterData->_SPI_WriteReadBuffer
    _SPI_WriteReadBuffer->_SPI_WriteRead
    _RF_DataIsReady->_RF_ReadRegister
    _RF_ReadRegister->_SPI_WriteRead
    _Sensor_getSupplyVoltage->___ftdiv
    _Wireless_init->_RF_WriteRegisterData
    _RF_WriteRegisterData->_SPI_WriteBuffer
    _SPI_WriteBuffer->_SPI_WriteRead
    _RF_ResetStatusIRQ->_RF_WriteRegister
    _RF_WriteRegister->_SPI_WriteRead
    _SPI_WriteRead->_SPI1_Exchange8bit
    _Timeout_updateCurrentTime->___lmul
    _TMR1_Initialize->_TMR1_SetInterruptHandler
    _PIN_MANAGER_Initialize->_IOCAF2_SetInterruptHandler
    _BMP_readTemperature->___fttol
    ___lwtoft->___ftpack
    ___fttol->___ftmul
    ___ftneg->___ftdiv
    ___ftmul->___ftadd
    ___ftdiv->___altoft
    ___ftadd->_Sensor_getSupplyVoltage
    ___awtoft->___ftpack
    ___altoft->___ftpack
    ___altoft->___ftpack
    _HMC5883L_ReadBits->_HMC5883L_I2C_BufferRead
    _HMC5883L_I2C_BufferRead->_I2C_BufferRead
    _BMP_init->_I2C_BufferRead
    _I2C_ByteWrite->_I2C2_MasterWrite
    _I2C_BufferRead->_I2C2_MasterRead
    _I2C2_MasterWrite->_I2C2_MasterWriteTRBBuild
    _I2C2_MasterRead->_I2C2_MasterReadTRBBuild

Critical Paths under _INTERRUPT_InterruptManager in BANK0

    None.

Critical Paths under _main in BANK1

    _main->_Wireless_packageData
    _Wireless_packageData->_BMP_readTemperature
    _BMP_readTemperature->___fttol

Critical Paths under _INTERRUPT_InterruptManager in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK12

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                14    14      0  108178
                                             43 BANK1      2     2      0
                                              0 BANK3     12    12      0
                           _BMP_init
                _BMP_readTemperature
                          _DOOR_init
                           _DOOR_run
                  _SYSTEM_Initialize
             _Sensor_peripheralSleep
           _Timeout_getGlobalCounter
          _Timeout_updateCurrentTime
    _Wireless_determineTransmitPower
                      _Wireless_init
               _Wireless_packageData
                     _Wireless_sleep
                      _Wireless_wake
                            ___lldiv
                            ___lwdiv
                       _setSleepTime
 ---------------------------------------------------------------------------------
 (1) _setSleepTime                                         2     0      2      77
                                              1 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (1) ___lwdiv                                              8     4      4     703
                                              1 BANK0      8     4      4
 ---------------------------------------------------------------------------------
 (1) ___lldiv                                             14     6      8     395
                                              1 BANK0     14     6      8
 ---------------------------------------------------------------------------------
 (1) _Wireless_wake                                        2     2      0    2442
                                             15 BANK0      2     2      0
                _RF_ReadRegisterData
                   _RF_WriteRegister
 ---------------------------------------------------------------------------------
 (1) _Wireless_sleep                                       2     2      0    2442
                                             15 BANK0      2     2      0
                _RF_ReadRegisterData
                   _RF_WriteRegister
 ---------------------------------------------------------------------------------
 (1) _Wireless_packageData                                17    13      4   33630
                                             26 BANK1     17    13      4
                _BMP_readTemperature (ARG)
               _Diag_getSensorHealth
            _Sensor_getSupplyVoltage
         _Wireless_checkDataReceived
    _Wireless_determineTransmitPower
                  _Wireless_sendData
                            ___aldiv
                            ___ftadd
                            ___ftmul
                            ___fttol
                            ___lldiv (ARG)
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (2) _Wireless_determineTransmitPower                      6     6      0    7359
                                             21 BANK0      6     6      0
       _Wireless_changeTransmitPower
  _Wireless_isDataTransmitSuccessful
                  _Wireless_sendData
                              _limit
 ---------------------------------------------------------------------------------
 (2) _Wireless_sendData                                    4     3      1    3104
                                             17 BANK0      4     3      1
                       _RF_GetStatus
                  _RF_ResetStatusIRQ
                       _RF_TxPayload
 ---------------------------------------------------------------------------------
 (3) _RF_TxPayload                                         3     2      1    1536
                                             14 BANK0      3     2      1
                           _RF_Write
               _RF_WriteRegisterData
 ---------------------------------------------------------------------------------
 (4) _RF_Write                                             1     1      0      93
                                              3 BANK0      1     1      0
                      _SPI_WriteRead
 ---------------------------------------------------------------------------------
 (3) _Wireless_isDataTransmitSuccessful                    2     2      0     161
                                              5 BANK0      2     2      0
                       _RF_GetStatus
 ---------------------------------------------------------------------------------
 (3) _RF_GetStatus                                         0     0      0     127
                       _RF_WriteRead
 ---------------------------------------------------------------------------------
 (4) _RF_WriteRead                                         2     2      0     127
                                              3 BANK0      2     2      0
                      _SPI_WriteRead
 ---------------------------------------------------------------------------------
 (3) _Wireless_changeTransmitPower                         5     5      0    3189
                                             15 BANK0      5     5      0
                _RF_ReadRegisterData
                   _RF_WriteRegister
                              _limit
 ---------------------------------------------------------------------------------
 (3) _limit                                                7     1      6     679
                                              1 BANK0      7     1      6
 ---------------------------------------------------------------------------------
 (2) _Wireless_checkDataReceived                           7     7      0    2324
                                             19 BANK0      7     7      0
                     _RF_DataIsReady
                       _RF_RxPayload
                             ___lmul
 ---------------------------------------------------------------------------------
 (3) _RF_RxPayload                                         4     3      1    1415
                                             15 BANK0      4     3      1
                _RF_ReadRegisterData
 ---------------------------------------------------------------------------------
 (2) _RF_ReadRegisterData                                  5     3      2    1243
                                             10 BANK0      5     3      2
                      _SPI_WriteRead
                _SPI_WriteReadBuffer
 ---------------------------------------------------------------------------------
 (3) _SPI_WriteReadBuffer                                  7     5      2     441
                                              3 BANK0      7     5      2
                      _SPI_WriteRead
 ---------------------------------------------------------------------------------
 (3) _RF_DataIsReady                                       3     3      0     292
                                              6 BANK0      3     3      0
                    _RF_ReadRegister
 ---------------------------------------------------------------------------------
 (4) _RF_ReadRegister                                      3     3      0     127
                                              3 BANK0      3     3      0
                      _SPI_WriteRead
 ---------------------------------------------------------------------------------
 (2) _Sensor_getSupplyVoltage                              8     5      3    7868
                                             33 BANK0      8     5      3
            _ADC_GetConversionResult
               _ADC_IsConversionDone
                  _ADC_SelectChannel
                _ADC_StartConversion
                  _FVR_IsOutputReady
             _Sensor_peripheralSleep
              _Sensor_peripheralWake
                            ___ftdiv
                           ___lwtoft
 ---------------------------------------------------------------------------------
 (3) _Sensor_peripheralWake                                0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _Sensor_peripheralSleep                               0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _FVR_IsOutputReady                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _ADC_StartConversion                                  0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _ADC_SelectChannel                                    2     2      0      31
                                              1 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (3) _ADC_IsConversionDone                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _ADC_GetConversionResult                              2     0      2       0
                                              1 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (2) _Diag_getSensorHealth                                 2     2      0      43
                                              1 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _Wireless_init                                        2     2      0    3552
                                             14 BANK0      2     2      0
                            _RF_Init
                  _RF_ResetStatusIRQ
                   _RF_WriteRegister
               _RF_WriteRegisterData
 ---------------------------------------------------------------------------------
 (4) _RF_WriteRegisterData                                 5     2      3    1271
                                              9 BANK0      5     2      3
                    _SPI_WriteBuffer
                      _SPI_WriteRead
 ---------------------------------------------------------------------------------
 (5) _SPI_WriteBuffer                                      6     3      3     346
                                              3 BANK0      6     3      3
                      _SPI_WriteRead
 ---------------------------------------------------------------------------------
 (3) _RF_ResetStatusIRQ                                    2     2      0    1156
                                              5 BANK0      2     2      0
                   _RF_WriteRegister
 ---------------------------------------------------------------------------------
 (2) _RF_WriteRegister                                     2     1      1    1125
                                              3 BANK0      2     1      1
                      _SPI_WriteRead
 ---------------------------------------------------------------------------------
 (3) _SPI_WriteRead                                        1     1      0      62
                                              2 BANK0      1     1      0
                  _SPI1_Exchange8bit
 ---------------------------------------------------------------------------------
 (4) _SPI1_Exchange8bit                                    1     1      0      31
                                              1 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _RF_Init                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Timeout_updateCurrentTime                            8     8      0     617
                                             13 BANK0      8     8      0
                     _TMR1_ReadTimer
                             ___lmul
 ---------------------------------------------------------------------------------
 (3) ___lmul                                              12     4      8     444
                                              1 BANK0     12     4      8
 ---------------------------------------------------------------------------------
 (2) _TMR1_ReadTimer                                      11     9      2     102
                                              1 BANK0     11     9      2
 ---------------------------------------------------------------------------------
 (1) _Timeout_getGlobalCounter                             4     0      4       0
                                              1 BANK0      4     0      4
 ---------------------------------------------------------------------------------
 (1) _SYSTEM_Initialize                                    0     0      0     216
                     _ADC_Initialize
                     _FVR_Initialize
                    _I2C2_Initialize
              _OSCILLATOR_Initialize
             _PIN_MANAGER_Initialize
                    _SPI1_Initialize
                    _TMR1_Initialize
                    _TMR2_Initialize
                     _WDT_Initialize
 ---------------------------------------------------------------------------------
 (2) _WDT_Initialize                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _TMR2_Initialize                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _TMR1_Initialize                                      0     0      0     108
           _TMR1_SetInterruptHandler
 ---------------------------------------------------------------------------------
 (3) _TMR1_SetInterruptHandler                             2     0      2     108
                                              1 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (2) _SPI1_Initialize                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _PIN_MANAGER_Initialize                               0     0      0     108
         _IOCAF2_SetInterruptHandler
 ---------------------------------------------------------------------------------
 (3) _IOCAF2_SetInterruptHandler                           2     0      2     108
                                              1 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (2) _OSCILLATOR_Initialize                                0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _I2C2_Initialize                                      1     1      0       0
                                              1 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _FVR_Initialize                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _ADC_Initialize                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _DOOR_run                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _DOOR_init                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _BMP_readTemperature                                 20    17      3   48899
                                              6 BANK1     20    17      3
                           _BMP_init
           _Diag_getTempSensorHealth
           _Diag_setTempSensorHealth
                  _HMC5883L_ReadBits
                     _I2C_BufferRead
                      _I2C_ByteWrite
                            ___aldiv
                           ___altoft
                           ___awtoft
                            ___ftadd
                            ___ftdiv
                            ___ftmul
                            ___ftneg
                            ___fttol
                           ___lwtoft
 ---------------------------------------------------------------------------------
 (3) ___lwtoft                                             4     1      3    2923
                                              9 BANK0      4     1      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (2) ___fttol                                             14    10      4     679
                                             70 BANK0      8     4      4
                                              0 BANK1      6     6      0
            _Sensor_getSupplyVoltage (ARG)
                           ___altoft (ARG)
                            ___ftadd (ARG)
                            ___ftmul (ARG)
 ---------------------------------------------------------------------------------
 (2) ___ftneg                                              3     0      3     524
                                             33 BANK0      3     0      3
                            ___ftdiv (ARG)
                           ___lwtoft (ARG)
 ---------------------------------------------------------------------------------
 (2) ___ftmul                                             16    10      6    4338
                                             54 BANK0     16    10      6
            _Sensor_getSupplyVoltage (ARG)
                           ___altoft (ARG)
                           ___awtoft (ARG)
                            ___ftadd (ARG)
                            ___ftdiv (ARG)
                            ___ftneg (ARG)
                           ___ftpack
                           ___lwtoft (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftdiv                                             16    10      6    4846
                                             17 BANK0     16    10      6
                           ___altoft (ARG)
                           ___ftpack
                           ___ftpack (ARG)
                           ___lwtoft (ARG)
 ---------------------------------------------------------------------------------
 (2) ___ftadd                                             13     7      6    5611
                                             41 BANK0     13     7      6
            _Sensor_getSupplyVoltage (ARG)
                           ___altoft (ARG)
                            ___ftdiv (ARG)
                            ___ftneg (ARG)
                           ___ftpack
                           ___lwtoft (ARG)
 ---------------------------------------------------------------------------------
 (2) ___awtoft                                             6     3      3    3025
                                              9 BANK0      6     3      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (2) ___altoft                                             8     4      4    3096
                                              9 BANK0      8     4      4
                           ___ftpack
                           ___ftpack (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftpack                                             8     3      5    2584
                                              1 BANK0      8     3      5
 ---------------------------------------------------------------------------------
 (2) ___aldiv                                             15     7      8     753
                                              1 BANK0     15     7      8
 ---------------------------------------------------------------------------------
 (2) _HMC5883L_ReadBits                                   10     6      4    8661
                                             35 BANK0     10     6      4
            _HMC5883L_I2C_BufferRead
 ---------------------------------------------------------------------------------
 (3) _HMC5883L_I2C_BufferRead                              7     2      5    6134
                                             28 BANK0      7     2      5
                     _I2C_BufferRead
 ---------------------------------------------------------------------------------
 (2) _Diag_getTempSensorHealth                             0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _BMP_init                                             4     4      0    7138
                                             28 BANK0      4     4      0
           _Diag_setTempSensorHealth
                     _I2C_BufferRead
                      _I2C_ByteWrite
 ---------------------------------------------------------------------------------
 (2) _I2C_ByteWrite                                       10     8      2    2674
                                             15 BANK0     10     8      2
                   _I2C2_MasterWrite
                 _Timeout_hasExpired
                 _Timeout_setTimeout
 ---------------------------------------------------------------------------------
 (2) _I2C_BufferRead                                      11     6      5    4393
                                             17 BANK0     11     6      5
                    _I2C2_MasterRead
                   _I2C2_MasterWrite
                 _Timeout_hasExpired
                 _Timeout_setTimeout
 ---------------------------------------------------------------------------------
 (3) _Timeout_setTimeout                                   2     0      2     262
                                              1 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (3) _Timeout_hasExpired                                  12    12      0       0
                                              1 BANK0     12    12      0
 ---------------------------------------------------------------------------------
 (3) _I2C2_MasterWrite                                     7     3      4    1627
                                              8 BANK0      7     3      4
               _I2C2_MasterTRBInsert
           _I2C2_MasterWriteTRBBuild
 ---------------------------------------------------------------------------------
 (4) _I2C2_MasterWriteTRBBuild                             7     3      4     450
                                              1 BANK0      7     3      4
 ---------------------------------------------------------------------------------
 (3) _I2C2_MasterRead                                      8     2      6    1398
                                              9 BANK0      8     2      6
            _I2C2_MasterReadTRBBuild
               _I2C2_MasterTRBInsert
 ---------------------------------------------------------------------------------
 (4) _I2C2_MasterTRBInsert                                 4     2      2     494
                                              1 BANK0      4     2      2
 ---------------------------------------------------------------------------------
 (4) _I2C2_MasterReadTRBBuild                              8     3      5     481
                                              1 BANK0      8     3      5
 ---------------------------------------------------------------------------------
 (2) _Diag_setTempSensorHealth                             2     2      0      31
                                              1 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (9) _INTERRUPT_InterruptManager                           1     1      0      22
                                              0 BANK0      1     1      0
               _I2C2_BusCollisionISR
                           _I2C2_ISR
                    _PIN_MANAGER_IOC
                           _TMR1_ISR
 ---------------------------------------------------------------------------------
 (10) _TMR1_ISR                                            0     0      0       0
                      _TMR1_CallBack
 ---------------------------------------------------------------------------------
 (11) _TMR1_CallBack                                       0     0      0       0
                   Absolute function *
       _TMR1_DefaultInterruptHandler *
                  _Timeout_increment
 ---------------------------------------------------------------------------------
 (12) _Timeout_increment                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (12) _TMR1_DefaultInterruptHandler                        0     0      0       0
 ---------------------------------------------------------------------------------
 (10) _PIN_MANAGER_IOC                                     0     0      0       0
                         _IOCAF2_ISR
 ---------------------------------------------------------------------------------
 (11) _IOCAF2_ISR                                          0     0      0       0
                   Absolute function *
     _IOCAF2_DefaultInterruptHandler *
 ---------------------------------------------------------------------------------
 (12) _IOCAF2_DefaultInterruptHandler                      0     0      0       0
 ---------------------------------------------------------------------------------
 (12) Absolute function(Fake)                              0     0      0       0
 ---------------------------------------------------------------------------------
 (10) _I2C2_ISR                                            4     4      0      22
                                              3 COMMON     4     4      0
              _I2C2_FunctionComplete
                          _I2C2_Stop
 ---------------------------------------------------------------------------------
 (11) _I2C2_Stop                                           3     3      0      22
                                              0 COMMON     3     3      0
 ---------------------------------------------------------------------------------
 (11) _I2C2_FunctionComplete                               1     1      0       0
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (10) _I2C2_BusCollisionISR                                0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 12
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _BMP_init
     _Diag_setTempSensorHealth
     _I2C_BufferRead
       _I2C2_MasterRead
         _I2C2_MasterReadTRBBuild
         _I2C2_MasterTRBInsert
       _I2C2_MasterWrite
         _I2C2_MasterTRBInsert
         _I2C2_MasterWriteTRBBuild
       _Timeout_hasExpired
       _Timeout_setTimeout
     _I2C_ByteWrite
       _I2C2_MasterWrite
         _I2C2_MasterTRBInsert
         _I2C2_MasterWriteTRBBuild
       _Timeout_hasExpired
       _Timeout_setTimeout
   _BMP_readTemperature
     _BMP_init
       _Diag_setTempSensorHealth
       _I2C_BufferRead
         _I2C2_MasterRead
           _I2C2_MasterReadTRBBuild
           _I2C2_MasterTRBInsert
         _I2C2_MasterWrite
           _I2C2_MasterTRBInsert
           _I2C2_MasterWriteTRBBuild
         _Timeout_hasExpired
         _Timeout_setTimeout
       _I2C_ByteWrite
         _I2C2_MasterWrite
           _I2C2_MasterTRBInsert
           _I2C2_MasterWriteTRBBuild
         _Timeout_hasExpired
         _Timeout_setTimeout
     _Diag_getTempSensorHealth
     _Diag_setTempSensorHealth
     _HMC5883L_ReadBits
       _HMC5883L_I2C_BufferRead
         _I2C_BufferRead
           _I2C2_MasterRead
             _I2C2_MasterReadTRBBuild
             _I2C2_MasterTRBInsert
           _I2C2_MasterWrite
             _I2C2_MasterTRBInsert
             _I2C2_MasterWriteTRBBuild
           _Timeout_hasExpired
           _Timeout_setTimeout
     _I2C_BufferRead
       _I2C2_MasterRead
         _I2C2_MasterReadTRBBuild
         _I2C2_MasterTRBInsert
       _I2C2_MasterWrite
         _I2C2_MasterTRBInsert
         _I2C2_MasterWriteTRBBuild
       _Timeout_hasExpired
       _Timeout_setTimeout
     _I2C_ByteWrite
       _I2C2_MasterWrite
         _I2C2_MasterTRBInsert
         _I2C2_MasterWriteTRBBuild
       _Timeout_hasExpired
       _Timeout_setTimeout
     ___aldiv
     ___altoft
       ___ftpack
       ___ftpack (ARG)
     ___awtoft
       ___ftpack
     ___ftadd
       _Sensor_getSupplyVoltage (ARG)
         _ADC_GetConversionResult
         _ADC_IsConversionDone
         _ADC_SelectChannel
         _ADC_StartConversion
         _FVR_IsOutputReady
         _Sensor_peripheralSleep
         _Sensor_peripheralWake
         ___ftdiv
           ___altoft (ARG)
             ___ftpack
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
         ___lwtoft
           ___ftpack
       ___altoft (ARG)
         ___ftpack
         ___ftpack (ARG)
       ___ftdiv (ARG)
         ___altoft (ARG)
           ___ftpack
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
       ___ftneg (ARG)
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
         ___lwtoft (ARG)
           ___ftpack
       ___ftpack (ARG)
       ___lwtoft (ARG)
         ___ftpack
     ___ftdiv
       ___altoft (ARG)
         ___ftpack
         ___ftpack (ARG)
       ___ftpack (ARG)
       ___ftpack (ARG)
       ___lwtoft (ARG)
         ___ftpack
     ___ftmul
       _Sensor_getSupplyVoltage (ARG)
         _ADC_GetConversionResult
         _ADC_IsConversionDone
         _ADC_SelectChannel
         _ADC_StartConversion
         _FVR_IsOutputReady
         _Sensor_peripheralSleep
         _Sensor_peripheralWake
         ___ftdiv
           ___altoft (ARG)
             ___ftpack
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
         ___lwtoft
           ___ftpack
       ___altoft (ARG)
         ___ftpack
         ___ftpack (ARG)
       ___awtoft (ARG)
         ___ftpack
       ___ftadd (ARG)
         _Sensor_getSupplyVoltage (ARG)
           _ADC_GetConversionResult
           _ADC_IsConversionDone
           _ADC_SelectChannel
           _ADC_StartConversion
           _FVR_IsOutputReady
           _Sensor_peripheralSleep
           _Sensor_peripheralWake
           ___ftdiv
             ___altoft (ARG)
               ___ftpack
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
           ___lwtoft
             ___ftpack
         ___altoft (ARG)
           ___ftpack
           ___ftpack (ARG)
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
         ___ftneg (ARG)
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
           ___lwtoft (ARG)
             ___ftpack
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
       ___ftdiv (ARG)
         ___altoft (ARG)
           ___ftpack
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
       ___ftneg (ARG)
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
         ___lwtoft (ARG)
           ___ftpack
       ___ftpack (ARG)
       ___lwtoft (ARG)
         ___ftpack
     ___ftneg
       ___ftdiv (ARG)
         ___altoft (ARG)
           ___ftpack
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
       ___lwtoft (ARG)
         ___ftpack
     ___fttol
       _Sensor_getSupplyVoltage (ARG)
         _ADC_GetConversionResult
         _ADC_IsConversionDone
         _ADC_SelectChannel
         _ADC_StartConversion
         _FVR_IsOutputReady
         _Sensor_peripheralSleep
         _Sensor_peripheralWake
         ___ftdiv
           ___altoft (ARG)
             ___ftpack
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
         ___lwtoft
           ___ftpack
       ___altoft (ARG)
         ___ftpack
         ___ftpack (ARG)
       ___ftadd (ARG)
         _Sensor_getSupplyVoltage (ARG)
           _ADC_GetConversionResult
           _ADC_IsConversionDone
           _ADC_SelectChannel
           _ADC_StartConversion
           _FVR_IsOutputReady
           _Sensor_peripheralSleep
           _Sensor_peripheralWake
           ___ftdiv
             ___altoft (ARG)
               ___ftpack
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
           ___lwtoft
             ___ftpack
         ___altoft (ARG)
           ___ftpack
           ___ftpack (ARG)
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
         ___ftneg (ARG)
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
           ___lwtoft (ARG)
             ___ftpack
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
       ___ftmul (ARG)
         _Sensor_getSupplyVoltage (ARG)
           _ADC_GetConversionResult
           _ADC_IsConversionDone
           _ADC_SelectChannel
           _ADC_StartConversion
           _FVR_IsOutputReady
           _Sensor_peripheralSleep
           _Sensor_peripheralWake
           ___ftdiv
             ___altoft (ARG)
               ___ftpack
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
           ___lwtoft
             ___ftpack
         ___altoft (ARG)
           ___ftpack
           ___ftpack (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           _Sensor_getSupplyVoltage (ARG)
             _ADC_GetConversionResult
             _ADC_IsConversionDone
             _ADC_SelectChannel
             _ADC_StartConversion
             _FVR_IsOutputReady
             _Sensor_peripheralSleep
             _Sensor_peripheralWake
             ___ftdiv
               ___altoft (ARG)
                 ___ftpack
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
             ___lwtoft
               ___ftpack
           ___altoft (ARG)
             ___ftpack
             ___ftpack (ARG)
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
           ___ftneg (ARG)
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
             ___lwtoft (ARG)
               ___ftpack
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
         ___ftneg (ARG)
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
           ___lwtoft (ARG)
             ___ftpack
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
     ___lwtoft
       ___ftpack
   _DOOR_init
   _DOOR_run
   _SYSTEM_Initialize
     _ADC_Initialize
     _FVR_Initialize
     _I2C2_Initialize
     _OSCILLATOR_Initialize
     _PIN_MANAGER_Initialize
       _IOCAF2_SetInterruptHandler
     _SPI1_Initialize
     _TMR1_Initialize
       _TMR1_SetInterruptHandler
     _TMR2_Initialize
     _WDT_Initialize
   _Sensor_peripheralSleep
   _Timeout_getGlobalCounter
   _Timeout_updateCurrentTime
     _TMR1_ReadTimer
     ___lmul
   _Wireless_determineTransmitPower
     _Wireless_changeTransmitPower
       _RF_ReadRegisterData
         _SPI_WriteRead
           _SPI1_Exchange8bit
         _SPI_WriteReadBuffer
           _SPI_WriteRead
             _SPI1_Exchange8bit
       _RF_WriteRegister
         _SPI_WriteRead
           _SPI1_Exchange8bit
       _limit
     _Wireless_isDataTransmitSuccessful
       _RF_GetStatus
         _RF_WriteRead
           _SPI_WriteRead
             _SPI1_Exchange8bit
     _Wireless_sendData
       _RF_GetStatus
         _RF_WriteRead
           _SPI_WriteRead
             _SPI1_Exchange8bit
       _RF_ResetStatusIRQ
         _RF_WriteRegister
           _SPI_WriteRead
             _SPI1_Exchange8bit
       _RF_TxPayload
         _RF_Write
           _SPI_WriteRead
             _SPI1_Exchange8bit
         _RF_WriteRegisterData
           _SPI_WriteBuffer
             _SPI_WriteRead
               _SPI1_Exchange8bit
           _SPI_WriteRead
             _SPI1_Exchange8bit
     _limit
   _Wireless_init
     _RF_Init
     _RF_ResetStatusIRQ
       _RF_WriteRegister
         _SPI_WriteRead
           _SPI1_Exchange8bit
     _RF_WriteRegister
       _SPI_WriteRead
         _SPI1_Exchange8bit
     _RF_WriteRegisterData
       _SPI_WriteBuffer
         _SPI_WriteRead
           _SPI1_Exchange8bit
       _SPI_WriteRead
         _SPI1_Exchange8bit
   _Wireless_packageData
     _BMP_readTemperature (ARG)
       _BMP_init
         _Diag_setTempSensorHealth
         _I2C_BufferRead
           _I2C2_MasterRead
             _I2C2_MasterReadTRBBuild
             _I2C2_MasterTRBInsert
           _I2C2_MasterWrite
             _I2C2_MasterTRBInsert
             _I2C2_MasterWriteTRBBuild
           _Timeout_hasExpired
           _Timeout_setTimeout
         _I2C_ByteWrite
           _I2C2_MasterWrite
             _I2C2_MasterTRBInsert
             _I2C2_MasterWriteTRBBuild
           _Timeout_hasExpired
           _Timeout_setTimeout
       _Diag_getTempSensorHealth
       _Diag_setTempSensorHealth
       _HMC5883L_ReadBits
         _HMC5883L_I2C_BufferRead
           _I2C_BufferRead
             _I2C2_MasterRead
               _I2C2_MasterReadTRBBuild
               _I2C2_MasterTRBInsert
             _I2C2_MasterWrite
               _I2C2_MasterTRBInsert
               _I2C2_MasterWriteTRBBuild
             _Timeout_hasExpired
             _Timeout_setTimeout
       _I2C_BufferRead
         _I2C2_MasterRead
           _I2C2_MasterReadTRBBuild
           _I2C2_MasterTRBInsert
         _I2C2_MasterWrite
           _I2C2_MasterTRBInsert
           _I2C2_MasterWriteTRBBuild
         _Timeout_hasExpired
         _Timeout_setTimeout
       _I2C_ByteWrite
         _I2C2_MasterWrite
           _I2C2_MasterTRBInsert
           _I2C2_MasterWriteTRBBuild
         _Timeout_hasExpired
         _Timeout_setTimeout
       ___aldiv
       ___altoft
         ___ftpack
         ___ftpack (ARG)
       ___awtoft
         ___ftpack
       ___ftadd
         _Sensor_getSupplyVoltage (ARG)
           _ADC_GetConversionResult
           _ADC_IsConversionDone
           _ADC_SelectChannel
           _ADC_StartConversion
           _FVR_IsOutputReady
           _Sensor_peripheralSleep
           _Sensor_peripheralWake
           ___ftdiv
             ___altoft (ARG)
               ___ftpack
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
           ___lwtoft
             ___ftpack
         ___altoft (ARG)
           ___ftpack
           ___ftpack (ARG)
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
         ___ftneg (ARG)
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
           ___lwtoft (ARG)
             ___ftpack
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
       ___ftdiv
         ___altoft (ARG)
           ___ftpack
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
       ___ftmul
         _Sensor_getSupplyVoltage (ARG)
           _ADC_GetConversionResult
           _ADC_IsConversionDone
           _ADC_SelectChannel
           _ADC_StartConversion
           _FVR_IsOutputReady
           _Sensor_peripheralSleep
           _Sensor_peripheralWake
           ___ftdiv
             ___altoft (ARG)
               ___ftpack
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
           ___lwtoft
             ___ftpack
         ___altoft (ARG)
           ___ftpack
           ___ftpack (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           _Sensor_getSupplyVoltage (ARG)
             _ADC_GetConversionResult
             _ADC_IsConversionDone
             _ADC_SelectChannel
             _ADC_StartConversion
             _FVR_IsOutputReady
             _Sensor_peripheralSleep
             _Sensor_peripheralWake
             ___ftdiv
               ___altoft (ARG)
                 ___ftpack
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
             ___lwtoft
               ___ftpack
           ___altoft (ARG)
             ___ftpack
             ___ftpack (ARG)
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
           ___ftneg (ARG)
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
             ___lwtoft (ARG)
               ___ftpack
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
         ___ftneg (ARG)
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
           ___lwtoft (ARG)
             ___ftpack
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
       ___ftneg
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
         ___lwtoft (ARG)
           ___ftpack
       ___fttol
         _Sensor_getSupplyVoltage (ARG)
           _ADC_GetConversionResult
           _ADC_IsConversionDone
           _ADC_SelectChannel
           _ADC_StartConversion
           _FVR_IsOutputReady
           _Sensor_peripheralSleep
           _Sensor_peripheralWake
           ___ftdiv
             ___altoft (ARG)
               ___ftpack
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
           ___lwtoft
             ___ftpack
         ___altoft (ARG)
           ___ftpack
           ___ftpack (ARG)
         ___ftadd (ARG)
           _Sensor_getSupplyVoltage (ARG)
             _ADC_GetConversionResult
             _ADC_IsConversionDone
             _ADC_SelectChannel
             _ADC_StartConversion
             _FVR_IsOutputReady
             _Sensor_peripheralSleep
             _Sensor_peripheralWake
             ___ftdiv
               ___altoft (ARG)
                 ___ftpack
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
             ___lwtoft
               ___ftpack
           ___altoft (ARG)
             ___ftpack
             ___ftpack (ARG)
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
           ___ftneg (ARG)
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
             ___lwtoft (ARG)
               ___ftpack
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
         ___ftmul (ARG)
           _Sensor_getSupplyVoltage (ARG)
             _ADC_GetConversionResult
             _ADC_IsConversionDone
             _ADC_SelectChannel
             _ADC_StartConversion
             _FVR_IsOutputReady
             _Sensor_peripheralSleep
             _Sensor_peripheralWake
             ___ftdiv
               ___altoft (ARG)
                 ___ftpack
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
             ___lwtoft
               ___ftpack
           ___altoft (ARG)
             ___ftpack
             ___ftpack (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             _Sensor_getSupplyVoltage (ARG)
               _ADC_GetConversionResult
               _ADC_IsConversionDone
               _ADC_SelectChannel
               _ADC_StartConversion
               _FVR_IsOutputReady
               _Sensor_peripheralSleep
               _Sensor_peripheralWake
               ___ftdiv
                 ___altoft (ARG)
                   ___ftpack
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
               ___lwtoft
                 ___ftpack
             ___altoft (ARG)
               ___ftpack
               ___ftpack (ARG)
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
             ___ftneg (ARG)
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
           ___ftneg (ARG)
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
             ___lwtoft (ARG)
               ___ftpack
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
       ___lwtoft
         ___ftpack
     _Diag_getSensorHealth (ARG)
     _Sensor_getSupplyVoltage (ARG)
       _ADC_GetConversionResult
       _ADC_IsConversionDone
       _ADC_SelectChannel
       _ADC_StartConversion
       _FVR_IsOutputReady
       _Sensor_peripheralSleep
       _Sensor_peripheralWake
       ___ftdiv
         ___altoft (ARG)
           ___ftpack
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
       ___lwtoft
         ___ftpack
     _Wireless_checkDataReceived (ARG)
       _RF_DataIsReady
         _RF_ReadRegister
           _SPI_WriteRead
             _SPI1_Exchange8bit
       _RF_RxPayload
         _RF_ReadRegisterData
           _SPI_WriteRead
             _SPI1_Exchange8bit
           _SPI_WriteReadBuffer
             _SPI_WriteRead
               _SPI1_Exchange8bit
       ___lmul
     _Wireless_determineTransmitPower (ARG)
       _Wireless_changeTransmitPower
         _RF_ReadRegisterData
           _SPI_WriteRead
             _SPI1_Exchange8bit
           _SPI_WriteReadBuffer
             _SPI_WriteRead
               _SPI1_Exchange8bit
         _RF_WriteRegister
           _SPI_WriteRead
             _SPI1_Exchange8bit
         _limit
       _Wireless_isDataTransmitSuccessful
         _RF_GetStatus
           _RF_WriteRead
             _SPI_WriteRead
               _SPI1_Exchange8bit
       _Wireless_sendData
         _RF_GetStatus
           _RF_WriteRead
             _SPI_WriteRead
               _SPI1_Exchange8bit
         _RF_ResetStatusIRQ
           _RF_WriteRegister
             _SPI_WriteRead
               _SPI1_Exchange8bit
         _RF_TxPayload
           _RF_Write
             _SPI_WriteRead
               _SPI1_Exchange8bit
           _RF_WriteRegisterData
             _SPI_WriteBuffer
               _SPI_WriteRead
                 _SPI1_Exchange8bit
             _SPI_WriteRead
               _SPI1_Exchange8bit
       _limit
     _Wireless_sendData (ARG)
       _RF_GetStatus
         _RF_WriteRead
           _SPI_WriteRead
             _SPI1_Exchange8bit
       _RF_ResetStatusIRQ
         _RF_WriteRegister
           _SPI_WriteRead
             _SPI1_Exchange8bit
       _RF_TxPayload
         _RF_Write
           _SPI_WriteRead
             _SPI1_Exchange8bit
         _RF_WriteRegisterData
           _SPI_WriteBuffer
             _SPI_WriteRead
               _SPI1_Exchange8bit
           _SPI_WriteRead
             _SPI1_Exchange8bit
     ___aldiv (ARG)
     ___ftadd (ARG)
       _Sensor_getSupplyVoltage (ARG)
         _ADC_GetConversionResult
         _ADC_IsConversionDone
         _ADC_SelectChannel
         _ADC_StartConversion
         _FVR_IsOutputReady
         _Sensor_peripheralSleep
         _Sensor_peripheralWake
         ___ftdiv
           ___altoft (ARG)
             ___ftpack
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
         ___lwtoft
           ___ftpack
       ___altoft (ARG)
         ___ftpack
         ___ftpack (ARG)
       ___ftdiv (ARG)
         ___altoft (ARG)
           ___ftpack
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
       ___ftneg (ARG)
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
         ___lwtoft (ARG)
           ___ftpack
       ___ftpack (ARG)
       ___lwtoft (ARG)
         ___ftpack
     ___ftmul (ARG)
       _Sensor_getSupplyVoltage (ARG)
         _ADC_GetConversionResult
         _ADC_IsConversionDone
         _ADC_SelectChannel
         _ADC_StartConversion
         _FVR_IsOutputReady
         _Sensor_peripheralSleep
         _Sensor_peripheralWake
         ___ftdiv
           ___altoft (ARG)
             ___ftpack
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
         ___lwtoft
           ___ftpack
       ___altoft (ARG)
         ___ftpack
         ___ftpack (ARG)
       ___awtoft (ARG)
         ___ftpack
       ___ftadd (ARG)
         _Sensor_getSupplyVoltage (ARG)
           _ADC_GetConversionResult
           _ADC_IsConversionDone
           _ADC_SelectChannel
           _ADC_StartConversion
           _FVR_IsOutputReady
           _Sensor_peripheralSleep
           _Sensor_peripheralWake
           ___ftdiv
             ___altoft (ARG)
               ___ftpack
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
           ___lwtoft
             ___ftpack
         ___altoft (ARG)
           ___ftpack
           ___ftpack (ARG)
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
         ___ftneg (ARG)
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
           ___lwtoft (ARG)
             ___ftpack
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
       ___ftdiv (ARG)
         ___altoft (ARG)
           ___ftpack
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
       ___ftneg (ARG)
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
         ___lwtoft (ARG)
           ___ftpack
       ___ftpack (ARG)
       ___lwtoft (ARG)
         ___ftpack
     ___fttol (ARG)
       _Sensor_getSupplyVoltage (ARG)
         _ADC_GetConversionResult
         _ADC_IsConversionDone
         _ADC_SelectChannel
         _ADC_StartConversion
         _FVR_IsOutputReady
         _Sensor_peripheralSleep
         _Sensor_peripheralWake
         ___ftdiv
           ___altoft (ARG)
             ___ftpack
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
         ___lwtoft
           ___ftpack
       ___altoft (ARG)
         ___ftpack
         ___ftpack (ARG)
       ___ftadd (ARG)
         _Sensor_getSupplyVoltage (ARG)
           _ADC_GetConversionResult
           _ADC_IsConversionDone
           _ADC_SelectChannel
           _ADC_StartConversion
           _FVR_IsOutputReady
           _Sensor_peripheralSleep
           _Sensor_peripheralWake
           ___ftdiv
             ___altoft (ARG)
               ___ftpack
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
           ___lwtoft
             ___ftpack
         ___altoft (ARG)
           ___ftpack
           ___ftpack (ARG)
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
         ___ftneg (ARG)
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
           ___lwtoft (ARG)
             ___ftpack
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
       ___ftmul (ARG)
         _Sensor_getSupplyVoltage (ARG)
           _ADC_GetConversionResult
           _ADC_IsConversionDone
           _ADC_SelectChannel
           _ADC_StartConversion
           _FVR_IsOutputReady
           _Sensor_peripheralSleep
           _Sensor_peripheralWake
           ___ftdiv
             ___altoft (ARG)
               ___ftpack
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
           ___lwtoft
             ___ftpack
         ___altoft (ARG)
           ___ftpack
           ___ftpack (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           _Sensor_getSupplyVoltage (ARG)
             _ADC_GetConversionResult
             _ADC_IsConversionDone
             _ADC_SelectChannel
             _ADC_StartConversion
             _FVR_IsOutputReady
             _Sensor_peripheralSleep
             _Sensor_peripheralWake
             ___ftdiv
               ___altoft (ARG)
                 ___ftpack
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
             ___lwtoft
               ___ftpack
           ___altoft (ARG)
             ___ftpack
             ___ftpack (ARG)
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
           ___ftneg (ARG)
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
             ___lwtoft (ARG)
               ___ftpack
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
         ___ftneg (ARG)
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
           ___lwtoft (ARG)
             ___ftpack
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
     ___lldiv (ARG)
     ___lwdiv (ARG)
   _Wireless_sleep
     _RF_ReadRegisterData
       _SPI_WriteRead
         _SPI1_Exchange8bit
       _SPI_WriteReadBuffer
         _SPI_WriteRead
           _SPI1_Exchange8bit
     _RF_WriteRegister
       _SPI_WriteRead
         _SPI1_Exchange8bit
   _Wireless_wake
     _RF_ReadRegisterData
       _SPI_WriteRead
         _SPI1_Exchange8bit
       _SPI_WriteReadBuffer
         _SPI_WriteRead
           _SPI1_Exchange8bit
     _RF_WriteRegister
       _SPI_WriteRead
         _SPI1_Exchange8bit
   ___lldiv
   ___lwdiv
   _setSleepTime

 _INTERRUPT_InterruptManager (ROOT)
   _I2C2_BusCollisionISR
   _I2C2_ISR
     _I2C2_FunctionComplete
     _I2C2_Stop
   _PIN_MANAGER_IOC
     _IOCAF2_ISR
       Absolute function(Fake) *
       _IOCAF2_DefaultInterruptHandler *
   _TMR1_ISR
     _TMR1_CallBack
       Absolute function(Fake) *
       _TMR1_DefaultInterruptHandler *
       _Timeout_increment *

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             3F0      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      7       E       2      100.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50     4E      4E       5       97.5%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BANK1               50     2D      47       7       88.8%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BITBANK2            50      0       0       8        0.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BANK2               50      0      50       9      100.0%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BITBANK3            50      0       0      10        0.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BANK3               50      C      3C      11       75.0%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BITBANK4            50      0       0      12        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BANK4               50      0       0      13        0.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BITBANK5            50      0       0      14        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BANK5               50      0       0      15        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BITBANK6            50      0       0      16        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BANK6               50      0       0      17        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BITBANK7            50      0       0      18        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BANK7               50      0       0      19        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
ABS                  0      0     12F      20        0.0%
BITBANK8            50      0       0      21        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BANK8               50      0       0      22        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITBANK9            50      0       0      23        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BANK9               50      0       0      24        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITBANK10           50      0       0      25        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BANK10              50      0       0      26        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITBANK11           50      0       0      27        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BANK11              50      0       0      28        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITBANK12           30      0       0      29        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BANK12              30      0       0      30        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
DATA                 0      0     12F      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V1.45 build -152302408 
Symbol Table                                                                                   Wed Oct 09 21:53:03 2019

                                          _Wireless_init 0BF0  
                                      _SPI1_Exchange8bit 137F  
                                          _Wireless_wake 15E1  
                                     ??_RF_WriteRegister 0024  
                                           _RF_TxPayload 1535  
                                           ___altoft@exp 002F  
                                         _Wireless_sleep 1499  
                                                      pc 0002  
                           __end_of_Wireless_packageData 077E  
                                     ?_SPI1_Exchange8bit 0070  
                                            __CFG_CP$OFF 0000  
                                  ?_I2C2_MasterTRBInsert 0021  
                                          ___altoft@sign 0030  
                                                     _b1 01A8  
                           __size_of_RF_ReadRegisterData 001D  
                                 __end_of_FVR_Initialize 12E2  
                                    RF_TxPayload@payload 0030  
                                      ??_SPI_WriteBuffer 0026  
                        __size_of_Sensor_peripheralSleep 0005  
                         I2C2_MasterReadTRBBuild@address 0024  
                        HMC5883L_I2C_BufferRead@ReadAddr 003E  
                                           ___ftadd@exp1 0055  
                                           ___ftadd@exp2 0054  
                                          _doorOpenAngle 00DE  
                                            __CFG_LVP$ON 0000  
                                           ___ftadd@sign 0053  
                                                    l522 1387  
                                                    l358 09E1  
                                                    _PR2 001B  
                                       ??_RF_DataIsReady 0026  
                                           __CFG_CPD$OFF 0000  
                                        _timer1ReloadVal 007C  
                                    ??_SPI1_Exchange8bit 0021  
                                        _TMR2_Initialize 1340  
                                           __CFG_BORV$LO 0000  
                                                    wreg 0009  
                                           _RF_WriteRead 146C  
                         HMC5883L_I2C_BufferRead@pBuffer 003C  
                                           __CFG_IESO$ON 0000  
                     __end_of_IOCAF2_SetInterruptHandler 1363  
                             _IOCAF2_SetInterruptHandler 135A  
                                          _globalCounter 00D2  
                                      _Wireless_sendData 1441  
                                    _BMP_readTemperature 006F  
                                 ??_RF_WriteRegisterData 002C  
                                           ___ftdiv@cntr 003B  
                                       __end_of_I2C2_ISR 067D  
                                     ?_Wireless_sendData 0031  
                                           ___ftdiv@sign 0040  
                                 RF_ResetStatusIRQ@flags 0026  
                                                   l1026 007E  
                                                   l1027 008E  
                                                   l1115 0771  
                                                   l1133 0B7B  
                                                   l1092 0D24  
                                                   l1535 0AE8  
                                                   l1536 0AF0  
                                                   l1528 0AD5  
                                                   l1394 078F  
                                                   l1619 0CE8  
                                                   l1559 0FA9  
                                                   l6015 0B3B  
                                                   l6007 0B1F  
                                                   l6201 083E  
                                                   l6203 084E  
                                                   l6035 0D15  
                                                   l5501 09D9  
                                                   l6117 08EF  
                                                   l6301 0E83  
                                                   l6037 0D34  
                                                   l6215 164B  
                                                   l6071 0D8D  
                                                   l6055 0D76  
                                                   l6039 0D4E  
                                                   l5521 16CE  
                                                   l5601 0A31  
                                                   l6161 07A0  
                                                   l6225 0F32  
                                                   l6313 0EBE  
                                                   l6171 07BE  
                                                   l6235 0F48  
                                                   l5515 151C  
                                                   l6075 0D8F  
                                                   l6091 0DA5  
                                                   l5613 0A42  
                                                   l5605 0A3C  
                                                   l6253 0F75  
                                                   l6229 0F39  
                                                   l6325 0EDA  
                                                   l6317 0EC6  
                                                   l6149 0BE8  
                                                   l5527 0822  
                                                   l6183 07E9  
                                                   l6271 0FBB  
                                                   l6255 0F7F  
                                                   l6247 0F62  
                                                   l6431 00BD  
                                                   l5535 1623  
                                                   l5623 1698  
                                                   l6087 0DA3  
                                                   l6169 07B0  
                                                   l6265 0F9B  
                                                   l6257 0F84  
                                                   l6329 0EE2  
                                                   l6353 0C86  
                                                   l6187 07F7  
                                                   l6179 07DE  
                                                   l6275 0FCD  
                                                   l6267 0FA5  
                                                   l6259 0F88  
                                                   l6371 0CBF  
                                                   l6285 0FE8  
                                                   l6381 0CEC  
                                                   l6373 0CD0  
                                                   l5495 09CC  
                                                   l5591 0A0D  
                                                   l5751 17ED  
                                                   l6295 0E6D  
                                                   l6439 00DE  
                                                   l5823 1735  
                                                   l6543 094F  
                                                   l5577 093C  
                                                   l5841 0DC4  
                                                   l6385 0CFA  
                                                   l5817 13A3  
                                                   l6553 097D  
                                                   l6545 095D  
                                                   l5499 09D3  
                                                   l5587 0A02  
                                                   l5763 17FE  
                                                   l5755 17F8  
                                                   l5683 0AB2  
                                                   l6379 0CDE  
                                                   l5827 173F  
                                                   l6467 0767  
                                                   l6571 1798  
                                                   l5597 0A13  
                                                   l5693 0ADA  
                                                   l5685 0ABC  
                                                   l5861 0E1B  
                                                   l6557 0988  
                                                   l6573 17A4  
                                                   l6709 043E  
                                                   l5695 0AE2  
                                                   l5687 0AC1  
                                                   l5679 0AAB  
                                                   l5847 0DDA  
                                                   l5783 15BB  
                                                   l6583 17BF  
                                                   l6735 04D9  
                                                   l6719 049C  
                                                   l6579 17B6  
                                                   l6747 0511  
                                                   l5869 0E34  
                                                   l5981 0869  
                                                   l6749 0524  
                                                   l6695 0423  
                                                   l6679 03C6  
                                                   l6697 042B  
                                                   l5987 0876  
                             __size_of_HMC5883L_ReadBits 0046  
                                                   _LATA 010C  
                                                   _LATB 010D  
                                                   _LATC 010E  
                                                   u5015 0938  
                                                   u5205 0AF7  
                                                   u5125 0AB7  
                                                   u5145 0AD0  
                                                   u6105 0ECD  
                                                   u5165 0ADD  
                                                   u5085 1690  
                                                   u5335 0DEC  
                                                   u6135 0EE3  
                                                   u6215 0CC0  
                                                   u5095 16A3  
                                                   u5345 0DFC  
                                                   u6145 0EE9  
                                                   u6065 0E8F  
                                                   u5355 0E1C  
                                                   u6075 0E9F  
                                                   u7107 03D4  
                                                   u5365 0E2B  
                                                   u6245 0CDF  
                                                   u6325 00F7  
                                                   u5285 1740  
                                                   u7117 15FA  
                                                   u5630 08E4  
                                                   u5614 08C6  
                                                   u5550 0DAB  
                                                   u5615 08C5  
                                                   u5375 0E35  
                                                   u6095 0EC7  
                                                   u6335 0105  
                                                   u5295 1747  
                                                   u7207 1609  
                                                   u7127 154B  
                                                   u5624 08D2  
                                                   u5625 08D1  
                                                   u5705 07B3  
                                                   u6185 0C8E  
                                                   u7217 1616  
                                                   u7137 13CF  
                                                   u6345 06EA  
                                                   u5635 08E2  
                                                   u7227 161C  
                                                   u7147 147C  
                                                   u5725 07BF  
                                                   u7237 1468  
                                                   u7157 15DD  
                                                   u6525 179B  
                                                   u5735 07D3  
                                                   u6375 0A8C  
                                                   u7167 14DE  
                                                   u5655 0BA1  
                                                   u6455 0952  
                                                   u7087 035F  
                                                   u5745 07DF  
                                                   u5905 0F63  
                                                   u7177 0BF6  
                                                   u6545 17A5  
                                                   u7097 0382  
                                                   u7187 15A3  
                                                   u6475 095E  
                                                   u6555 17AF  
                                                   u7197 1603  
                                                   u6485 0972  
                                                   u6565 17B7  
                                                   u5935 0F76  
                                                   u6495 097E  
                                                   u6815 04EF  
                                                   u5785 0843  
                                                   u5965 0F89  
                                                   u5995 0F9C  
                                                   _TMR2 001A  
                                                   _WPUA 020C  
                                                   _WPUB 020D  
                                                   _WPUC 020E  
                                           __CFG_WRT$OFF 0000  
                                          __CFG_FCMEN$ON 0000  
                                                   _data 01C0  
                                                   _main 033D  
                                     _Timeout_hasExpired 08F1  
                                                   _curr 0120  
                                           ___ftpack@arg 0021  
                                                   _var1 0134  
                                                   _var2 0131  
                                           ___ftpack@exp 0024  
                                        __end_of_RF_Init 12EA  
                                                   fsr0h 0005  
                                                   fsr1h 0007  
                                                   indf0 0000  
                                                   fsr0l 0004  
                                                   indf1 0001  
                                                   fsr1l 0006  
                                                   btemp 007E  
                            ??_Timeout_updateCurrentTime 002D  
                            I2C2_MasterReadTRBBuild@ptrb 0028  
                                          __CFG_BOREN$ON 0000  
                                    ??_Wireless_sendData 0032  
                            RF_WriteRegisterData@bufSize 002B  
                                     __size_of_DOOR_init 0001  
                                                   start 0037  
                                      _Timeout_increment 1375  
                              __end_of_SPI1_Exchange8bit 138B  
                               ?_Sensor_getSupplyVoltage 0041  
                       __end_of_Diag_getTempSensorHealth 12D8  
                       __end_of_Diag_setTempSensorHealth 1338  
                                 __end_of_Wireless_sleep 14B1  
                              HMC5883L_ReadBits@bitStart 0044  
                                         ?_Wireless_init 0070  
                             ??_TMR1_SetInterruptHandler 0023  
                                         ?_Wireless_wake 0070  
                                          _SPI_WriteRead 1303  
                                          __CFG_MCLRE$ON 0000  
                                           ___ftmul@cntr 0064  
                                     ?_Timeout_increment 0070  
                                           ___ftmul@sign 0065  
                                    ?_Timeout_hasExpired 0070  
                                   ?_BMP_readTemperature 00A6  
                                           ___fttol@exp1 00A5  
                                           ___fttol@lval 00A1  
                                       __end_of_BMP_init 0B7B  
                                             _i2c2_state 0079  
                                       __end_of_DOOR_run 12DB  
                                        ?_FVR_Initialize 0070  
                         __size_of_OSCILLATOR_Initialize 0007  
                                    __size_of_IOCAF2_ISR 000D  
                          __end_of_OSCILLATOR_Initialize 1322  
                                    ??_Timeout_increment 0070  
                                _I2C2_MasterReadTRBBuild 1700  
                                        __end_of___aldiv 0800  
                                                  ?_main 0070  
                                        __end_of___ftadd 1000  
                                      __end_of_I2C2_Stop 156D  
                                        __end_of___ftdiv 0E56  
                                        __end_of___ftneg 135A  
                                        __end_of___lldiv 0991  
                                        __end_of___ftmul 0F0A  
                                                  _T1CON 0018  
                                        __end_of___fttol 0D0A  
                                                  _T2CON 001C  
                                        __end_of___lwdiv 17C4  
                                                  i1l300 05AE  
                         __size_of_I2C2_FunctionComplete 0011  
                                                  i1l310 05F6  
                                                  i1l161 0032  
                                                  i1l153 0015  
                                                  i1l322 065E  
                                                  i1l314 0616  
                                                  i1l155 0021  
                                                  i1l317 062B  
                                                  i1l157 002D  
                                                  i1l318 0639  
                                                  i1l329 13E1  
                                                  i1l293 057A  
                                                  i1l294 0581  
                                                  i1l288 054C  
                                                  i1l299 05A2  
                          __end_of_I2C2_FunctionComplete 13E4  
                              __end_of_Wireless_sendData 1456  
                                    setSleepTime@timeSec 0021  
                                                  _TMR1H 0017  
                                                  _TMR1L 0016  
                                                  _TRISA 008C  
                                                  _TRISB 008D  
                                                  _TRISC 008E  
                       __size_of_ADC_GetConversionResult 0009  
                                    ___lmul@multiplicand 0025  
                                   ??_Timeout_hasExpired 0021  
                                       __end_of_TMR1_ISR 1351  
                                                  _cTemp 012B  
                                                  _adc_p 01A4  
                                                  _adc_t 0124  
                                 __size_of_I2C_ByteWrite 003C  
                                          ___awtoft@sign 002E  
                                __end_of_PIN_MANAGER_IOC 1303  
                                         _WDT_Initialize 12E2  
                                                  _errno 013A  
                                                  _limit 1685  
                                          ___ftpack@sign 0025  
                           I2C2_MasterReadTRBBuild@pdata 0021  
                                   _Diag_getSensorHealth 1407  
                                __end_of_TMR1_Initialize 1499  
                                       __end_of_RF_Write 13D3  
                                                  pclath 000A  
                                 _Sensor_peripheralSleep 12EE  
                                   RF_DataIsReady@status 0028  
                              __end_of_Timeout_increment 137F  
                                                  status 0003  
                                                  wtemp0 007E  
                               __size_of_SPI1_Initialize 0007  
                                         ?_SPI_WriteRead 0070  
                                        ?_Wireless_sleep 0070  
                                      ??_I2C2_MasterRead 002F  
                                RF_WriteRegisterData@buf 0029  
                                RF_WriteRegisterData@reg 002D  
                                  ??_BMP_readTemperature 00A9  
                                    RF_WriteRegister@reg 0024  
                                      ??_I2C2_Initialize 0021  
                                        __initialization 0039  
                                    RF_WriteRegister@val 0023  
                             Wireless_packageData@status 00C8  
                                           __end_of_main 0534  
                                 ??_I2C2_MasterTRBInsert 0023  
                                __end_of_TMR2_Initialize 1348  
                            ?_INTERRUPT_InterruptManager 0070  
                       __end_of_I2C2_MasterWriteTRBBuild 1685  
                                                 ??_main 00CB  
                                          ___fttol@sign1 00A0  
                              _Timeout_updateCurrentTime 0A44  
                                            _i2c2_object 00CD  
                                         __CFG_PLLEN$OFF 0000  
                                      __end_of_DOOR_init 0003  
                                 __end_of_WDT_Initialize 12E6  
                                __size_of_I2C_BufferRead 005E  
                          __size_of_ADC_IsConversionDone 0007  
                                                 _ADCON0 009D  
                                                 _ADCON1 009E  
                                     _Timeout_setTimeout 14B1  
                                       __end_of___altoft 0866  
                                                 ?_limit 0021  
                                              ??_RF_Init 0021  
                                                 _ADRESH 009C  
                                                 _EEADRH 0192  
                                                 _ADRESL 009B  
                                                 _EEADRL 0191  
                                                 _EEDATH 0194  
                                                 _EEDATL 0193  
                                                 i1S6987 1000  
                                                 _EECON2 0196  
                                    I2C_ByteWrite@status 0038  
                                  ?_Diag_getSensorHealth 0070  
                                       __end_of___awtoft 1662  
                                                 _ANSELA 018C  
                                                 _ANSELB 018D  
                                                 _ANSELC 018E  
                                       __end_of___ftpack 0B07  
                                                 _BORCON 0116  
                                                 _T1GCON 0019  
                                   _Wireless_packageData 067D  
                           __end_of_I2C2_BusCollisionISR 12D4  
                                                 i1l4245 1395  
                                                 i1l4263 156B  
                                                 i1l4721 058D  
                                                 i1l4811 0665  
                                                 i1l4813 0669  
                                                 i1l4741 05CB  
                                                 i1l4709 056E  
                                                 i1l4727 059D  
                                                 i1l4809 0662  
                                                 i1l4819 0672  
                                                 i1l4781 061D  
                                                 i1l4773 0604  
                                                 i1l4765 05F1  
                                                 i1l4759 05E7  
                                                 i1l4793 063F  
                                                 i1l4797 0646  
                                                 _FVRCON 0117  
                        __end_of_Sensor_getSupplyVoltage 08AB  
                               _BMP_readTemperature$2642 00B5  
                                       __end_of___lwtoft 1441  
                                                 _OSCCON 0099  
                                                 _WDTCON 0097  
                                    ?_Timeout_setTimeout 0021  
                                  I2C2_MasterRead@length 002B  
                                  SPI1_Exchange8bit@data 0021  
                                        ??_Wireless_init 002E  
                                        ??_Wireless_wake 002F  
                                    _SPI_WriteReadBuffer 1620  
                             __size_of_SPI1_Exchange8bit 000C  
                                         __CFG_PWRTE$OFF 0000  
                             HMC5883L_ReadBits@slaveAddr 004A  
                                       Wireless_wake@reg 0030  
                                       SPI_WriteBuffer@i 0028  
                   __end_of_TMR1_DefaultInterruptHandler 0801  
                  __size_of_TMR1_DefaultInterruptHandler 0001  
                           _TMR1_DefaultInterruptHandler 0800  
                                          _I2C_ByteWrite 17C4  
                                   HMC5883L_ReadBits@tmp 004C  
                                  RF_DataIsReady@channel 0027  
                                                 ___lmul 172C  
                                              ??___aldiv 0029  
                                                 _dig_P1 0150  
                                                 _dig_P2 014E  
                                                 _dig_P3 014C  
                                                 _dig_P4 014A  
                                                 _dig_P5 0148  
                                                 _dig_P6 0146  
                                                 _dig_P7 0144  
                                                 _dig_P8 0142  
                                                 _dig_P9 0140  
                                                 _dig_T1 00D6  
                                                 _dig_T2 0156  
                                                 _dig_T3 0154  
                                                 _dig_T4 0152  
                                              ??___ftadd 004F  
                                         _p_i2c2_current 0077  
                                         __CFG_STVREN$ON 0000  
                              ??_I2C2_MasterReadTRBBuild 0026  
                                              ??___ftdiv 0037  
                                              ??___ftneg 0044  
                      Wireless_changeTransmitPower@power 0032  
                                              ??___lldiv 0029  
                                       SPI_WriteRead@val 0022  
                                              ??___ftmul 005C  
                                              ??___fttol 006A  
                                 RF_ReadRegisterData@buf 002A  
                               _Diag_getTempSensorHealth 12D5  
                                 RF_ReadRegisterData@reg 002E  
                                              ??___lwdiv 0025  
                               _Diag_setTempSensorHealth 1330  
Wireless_determineTransmitPower@numOfSuccessfulTransmits 00DF  
                         __size_of_Sensor_peripheralWake 0005  
                                                 _t_fine 012E  
                                              ?_I2C2_ISR 0070  
                          __end_of_Sensor_peripheralWake 12F8  
                               I2C2_Stop@completion_code 0072  
                                           _HMC5883Lmode 00E2  
                                   ??_Timeout_setTimeout 0023  
                          I2C2_MasterReadTRBBuild@length 0023  
                                  ___ftmul@f3_as_product 0061  
                                   ?_SPI_WriteReadBuffer 0023  
                             __size_of_Wireless_sendData 0015  
                                RF_TxPayload@payloadSize 002E  
                                        ?_WDT_Initialize 0070  
                                     _sensorUpdatePeriod 0166  
               TMR1_SetInterruptHandler@InterruptHandler 0021  
             IOCAF2_SetInterruptHandler@InterruptHandler 0021  
                                       ?_PIN_MANAGER_IOC 0070  
                                  ?_Wireless_packageData 00BA  
                                           ??_IOCAF2_ISR 0070  
                               HMC5883L_ReadBits@regAddr 0043  
                                  __end_of_TMR1_CallBack 13B3  
                                    _RF_ReadRegisterData 15C4  
                                       ?_TMR1_Initialize 0070  
                                      _SYSTEM_Initialize 14FF  
                                __end_of__initialization 006B  
                                             ___altoft@c 0029  
                             __size_of_Timeout_increment 000A  
                                              ?_BMP_init 0070  
                                              ?_DOOR_run 0070  
                                             ___ftadd@f1 0049  
                                             ___ftadd@f2 004C  
                                        ??_SPI_WriteRead 0022  
                                     ?_SYSTEM_Initialize 0070  
                      __size_of_Timeout_getGlobalCounter 0011  
                                             ___ftdiv@f1 0034  
                                             ___ftdiv@f2 0031  
                                             ___ftdiv@f3 003C  
                              ?_Timeout_getGlobalCounter 0021  
                                      ?_I2C2_MasterWrite 0028  
                                        _SPI_WriteBuffer 151A  
                                             ___ftneg@f1 0041  
                                             ___awtoft@c 0029  
                                         ?_I2C_ByteWrite 002F  
                                             ___ftmul@f1 0056  
                                             ___ftmul@f2 0059  
                                              BMP_init@t 003F  
                                     ??_I2C2_MasterWrite 002C  
                                             ___fttol@f1 0066  
                           __size_of_ADC_StartConversion 0003  
                                         __pcstackCOMMON 0070  
          Wireless_determineTransmitPower@numOfTransmits 00E0  
                              Wireless_packageData@tempC 00BB  
                            I2C_BufferRead@NumByteToRead 0034  
                                           __pidataBANK1 0003  
                                           __pidataBANK2 1315  
                                    ??_SYSTEM_Initialize 0023  
                                 I2C_ByteWrite@WriteAddr 0030  
                                              ?_TMR1_ISR 0070  
                          ?_TMR1_DefaultInterruptHandler 0070  
                                          __end_of_limit 16AB  
                                      ??_SPI1_Initialize 0021  
                                   ?_RF_ReadRegisterData 002A  
                                         _i2c2_trb_count 00E5  
                                             ??_I2C2_ISR 0073  
                                       ?_TMR2_Initialize 0070  
                                              ?_RF_Write 0070  
                                     __end_of_IOCAF2_ISR 1398  
                                             ___lwtoft@c 0029  
                                  ??_SPI_WriteReadBuffer 0025  
                                _ADC_GetConversionResult 136C  
                              __size_of_RF_WriteRegister 0016  
                                         _OPTION_REGbits 0095  
                               ?_HMC5883L_I2C_BufferRead 003C  
                                __size_of_TMR1_ReadTimer 001D  
                               _I2C2_MasterWriteTRBBuild 1662  
                            ?_IOCAF2_SetInterruptHandler 0021  
                       ??_IOCAF2_DefaultInterruptHandler 0070  
                        ?_IOCAF2_DefaultInterruptHandler 0070  
                              DOOR_run@doorStateDuration 01A0  
                                 ??_Diag_getSensorHealth 0021  
                           I2C2_MasterWriteTRBBuild@ptrb 0027  
                                                ??_limit 0027  
                              __end_of_SYSTEM_Initialize 151A  
                               __size_of_RF_ReadRegister 001A  
                                             __pbssBANK1 00CD  
                                             __pbssBANK2 0120  
                                             __pbssBANK3 01A0  
                                             ??_BMP_init 003C  
                                             ??_DOOR_run 0021  
                                             __pnvCOMMON 007C  
                                   I2C_ByteWrite@pBuffer 002F  
                              SPI_WriteReadBuffer@bufOut 0028  
                                       ??_FVR_Initialize 0021  
                                             __pmaintext 033D  
                                  SPI_WriteBuffer@bufOut 0023  
                                   SPI_WriteReadBuffer@i 0029  
                                                ?___lmul 0021  
                                Diag_getSensorHealth@var 0022  
                                             ??_TMR1_ISR 0070  
                                  ??_RF_ReadRegisterData 002C  
                                             __pintentry 0004  
                                          ?_setSleepTime 0021  
                                              ?___altoft 0029  
                                         ___lmul@product 0029  
                                         main@doorStatus 01DB  
                                              ?___awtoft 0029  
                                              ?___ftpack 0021  
                                                _APFCON0 011D  
                                                _APFCON1 011E  
                                   _I2C2_BusCollisionISR 12D3  
                                             ??_RF_Write 0023  
                              DOOR_run@previousDoorState 00DA  
                                __size_of_ADC_Initialize 0008  
                                              ?___lwtoft 0029  
                       __size_of_Sensor_getSupplyVoltage 0045  
                         Wireless_checkDataReceived@data 0037  
                           ??_Wireless_checkDataReceived 0033  
                                         _I2C_BufferRead 09E6  
                      I2C2_ISR@i2c_10bit_address_restart 00E3  
                                 I2C2_MasterRead@address 002C  
                                              _I2C2_Stop 1550  
                               SPI_WriteReadBuffer@bufIn 0023  
                                                _OSCTUNE 0098  
                                ?_Sensor_peripheralSleep 0070  
                                                _SSP1ADD 0212  
                                                _SSP2ADD 021A  
                                                _SSP1BUF 0211  
                                 ??_Wireless_packageData 00BE  
                                                _SSP2BUF 0219  
                                 I2C_ByteWrite@slaveAddr 0035  
                                                _RF_Init 12E6  
                     __size_of_Timeout_updateCurrentTime 005E  
                   __end_of_Wireless_changeTransmitPower 178F  
                  __size_of_Wireless_changeTransmitPower 0033  
                           _Wireless_changeTransmitPower 175C  
                                        _I2C2_MasterRead 0801  
                                __end_of_SPI_WriteBuffer 1535  
                                       main@doorOpenTime 01D7  
                                        _I2C2_Initialize 14E4  
                          __size_of_RF_WriteRegisterData 001D  
                                       ??_Wireless_sleep 002F  
                                 I2C2_MasterRead@trBlock 0158  
                                        ??_I2C_ByteWrite 0031  
                                      Wireless_sleep@reg 0030  
                                  HMC5883L_ReadBits@data 0046  
                                                ___aldiv 077E  
                                  HMC5883L_ReadBits@mask 004B  
                                         ??_setSleepTime 0023  
                                        __size_of___lmul 0030  
                                                ___ftadd 0F0A  
                                                ___ftdiv 0DAD  
                                                ___ftneg 1351  
                                                ___lldiv 093E  
                                                ___ftmul 0E56  
                                                ___fttol 0C6B  
                                                ___lwdiv 178F  
                                             ??___altoft 002D  
                              ??_ADC_GetConversionResult 0023  
                        __end_of_HMC5883L_I2C_BufferRead 1407  
                                  ?_I2C2_BusCollisionISR 0070  
                                             ??___awtoft 002C  
                                             ??___ftpack 0026  
                               TMR1_ReadTimer@readValLow 002B  
                                                _heading 01C8  
                              I2C2_MasterTRBInsert@count 0024  
                                                __ptext1 12F8  
                                                __ptext2 178F  
                                                __ptext3 093E  
                                                __ptext4 15E1  
                                                __ptext5 1499  
                                                __ptext6 067D  
                                                __ptext7 0D0A  
                                                __ptext8 1441  
                                                __ptext9 1535  
                              I2C2_MasterTRBInsert@pflag 0022  
                                Wireless_packageData@var 00C7  
                                 __end_of_I2C_BufferRead 0A44  
                                             ??___lwtoft 002C  
                         ??_TMR1_DefaultInterruptHandler 0070  
                              TMR1_ReadTimer@readValHigh 002A  
                                              _T1CONbits 0018  
                                  _OSCILLATOR_Initialize 131B  
                                              _T2CONbits 001C  
                             __end_ofWireless_init@TADDR 1826  
                         __end_of_Sensor_peripheralSleep 12F3  
                      __size_of_TMR1_SetInterruptHandler 0009  
                                       ___aldiv@dividend 0025  
                               ??_PIN_MANAGER_Initialize 0023  
                              ?_TMR1_SetInterruptHandler 0021  
                                              _IOCAFbits 0393  
                            main@doorClosedUpdateCounter 01D1  
                                              _IOCANbits 0392  
                                             ?_I2C2_Stop 0070  
                                              _IOCAPbits 0391  
                                  _I2C2_FunctionComplete 13D3  
                                                _timeOut 013C  
                            __size_of_Timeout_hasExpired 004D  
                                              _DOOR_init 0002  
                             __size_of_SYSTEM_Initialize 001B  
                                                main@dur 01D5  
                                                clrloop0 1310  
                                   end_of_initialization 006B  
                                __size_of_RF_DataIsReady 001D  
                          ?_Wireless_changeTransmitPower 0070  
                            __end_of_BMP_readTemperature 033D  
                             ??_Diag_getTempSensorHealth 0021  
                             ??_Diag_setTempSensorHealth 0021  
                                      _FVR_IsOutputReady 1309  
                                      ??_RF_ReadRegister 0023  
                                        ___lldiv@divisor 0021  
                           __end_of_ADC_IsConversionDone 1330  
                                        ___lldiv@counter 002E  
                                     ?_FVR_IsOutputReady 0070  
                                          ?_RF_GetStatus 0070  
                                  I2C2_MasterWrite@pdata 002E  
                                     _p_i2c2_trb_current 0078  
                                  I2C2_MasterWrite@pflag 002B  
                                       ___aldiv@quotient 002C  
                                 I2C2_ISR@i2c_bytes_left 00E4  
                Wireless_isDataTransmitSuccessful@status 0026  
                          __size_of_I2C2_MasterTRBInsert 0055  
                                    ??_FVR_IsOutputReady 0021  
                             Sensor_getSupplyVoltage@res 0047  
                                       ??_WDT_Initialize 0021  
                                              _PORTCbits 000E  
                                        ?_I2C_BufferRead 0031  
                                      __size_of_I2C2_ISR 0149  
                                       _RF_WriteRegister 1456  
                                __end_of_I2C2_MasterRead 0829  
                                       __CFG_FOSC$INTOSC 0000  
                                __end_of_I2C2_Initialize 14FF  
                                         _TMR1_ReadTimer 156D  
                       __end_of_Timeout_getGlobalCounter 13F5  
                                    _ADC_StartConversion 12DB  
                           Timeout_updateCurrentTime@var 0031  
                                             ?_DOOR_init 0070  
                                       ?_SPI_WriteBuffer 0023  
                              __end_of_FVR_IsOutputReady 130F  
                                            ___ftdiv@exp 003F  
                                        _SPI1_Initialize 1322  
                             RF_ReadRegisterData@bufSize 002B  
                           HMC5883L_TestConnection@F3572 0137  
                                          ?_RF_RxPayload 002F  
              Wireless_determineTransmitPower@initialise 0038  
                                      __size_of_BMP_init 0074  
                           Wireless_packageData@openTime 00BA  
                                      __size_of_DOOR_run 0003  
                                  __end_of_Wireless_init 0C6B  
                                         ??_RF_GetStatus 0025  
                                  __end_of_Wireless_wake 1600  
                                            ___ftmul@exp 0060  
                                   ?_ADC_StartConversion 0070  
                                          ?_RF_TxPayload 002E  
                                   _currentTransmitPower 00E1  
                                 ??_I2C2_BusCollisionISR 0070  
                                         __end_of___lmul 175C  
                             ??_I2C2_MasterWriteTRBBuild 0025  
                                      __size_of_TMR1_ISR 0009  
                                _Sensor_getSupplyVoltage 0866  
                                         _ADC_Initialize 1338  
                                 ?_OSCILLATOR_Initialize 0070  
                                 __end_of_TMR1_ReadTimer 158A  
                     __end_of_Wireless_checkDataReceived 0BF0  
                             _Wireless_checkDataReceived 0B7B  
                            __size_of_Timeout_setTimeout 0019  
                              __size_of_I2C2_MasterWrite 002A  
                                  _Sensor_peripheralWake 12F3  
                                        RF_WriteRead@val 0024  
                                      __size_of_RF_Write 0010  
                                          ?_RF_WriteRead 0070  
                                 ?_I2C2_FunctionComplete 0070  
                                    start_initialization 0039  
                                RF_RxPayload@payloadSize 002F  
                                            ??_I2C2_Stop 0070  
                        __size_of_PIN_MANAGER_Initialize 002B  
                                   __end_of_setSleepTime 12FD  
                       __size_of_HMC5883L_I2C_BufferRead 0012  
                                         ??_RF_RxPayload 0030  
                        I2C2_MasterWriteTRBBuild@address 0023  
                                            _addressSize 00E6  
                               __size_of_PIN_MANAGER_IOC 0006  
                                  __end_of_SPI_WriteRead 1309  
                                   I2C2_MasterRead@pdata 0029  
                 __end_of_IOCAF2_DefaultInterruptHandler 12D5  
                __size_of_IOCAF2_DefaultInterruptHandler 0001  
                         _IOCAF2_DefaultInterruptHandler 12D4  
                               ?_I2C2_MasterReadTRBBuild 0021  
                         Sensor_getSupplyVoltage@voltage 0044  
                                   I2C2_MasterRead@pflag 002E  
                                            RF_Write@val 0023  
                         ??_Wireless_changeTransmitPower 002F  
                                         ??_RF_TxPayload 002F  
                                  ??_ADC_StartConversion 0021  
                               __size_of_TMR1_Initialize 0017  
                                               ??___lmul 0029  
                            __end_of_SPI_WriteReadBuffer 1640  
                          I2C2_MasterWriteTRBBuild@pdata 0021  
                                   I2C2_ISR@pi2c_buf_ptr 00D8  
                                 __end_of_ADC_Initialize 1340  
                                            __pdataBANK1 00E6  
                                            __pdataBANK2 0166  
                                 __size_of_TMR1_CallBack 000E  
                                        ?_TMR1_ReadTimer 0021  
                                      __size_of___altoft 003D  
                                HMC5883L_ReadBits@length 0045  
                                         ??_RF_WriteRead 0023  
                                      __size_of___awtoft 0022  
                                      __size_of___ftpack 0065  
                                       ?_I2C2_MasterRead 0029  
                                            __pbssCOMMON 0077  
                                       ?_I2C2_Initialize 0070  
                                              ___latbits 0002  
                                      __size_of___lwtoft 0015  
                                          __pcstackBANK0 0020  
                                          __pcstackBANK1 00A0  
                                          __pcstackBANK3 01D0  
                                   _ADC_IsConversionDone 1329  
                               __size_of_TMR2_Initialize 0008  
                                __end_of_SPI1_Initialize 1329  
                                            ??_DOOR_init 0021  
                                               ?_RF_Init 0070  
                                          _i2c2_tr_queue 0162  
                          __size_of_Diag_getSensorHealth 0012  
                      Wireless_checkDataReceived@channel 0039  
                                         _RF_DataIsReady 15A7  
                               _Timeout_getGlobalCounter 13E4  
                             __size_of_FVR_IsOutputReady 0006  
                             SPI_WriteReadBuffer@bufSize 0024  
                                              __pnvBANK2 016C  
                            __end_of_RF_ReadRegisterData 15E1  
                              BMP_readTemperature@status 00B8  
                   HMC5883L_I2C_BufferRead@NumByteToRead 003F  
                                       ___lwdiv@dividend 0023  
                                 _PIN_MANAGER_Initialize 16D5  
              __end_of_Wireless_isDataTransmitSuccessful 13A5  
             __size_of_Wireless_isDataTransmitSuccessful 000D  
                    ??_Wireless_isDataTransmitSuccessful 0025  
                     ?_Wireless_isDataTransmitSuccessful 0070  
                      _Wireless_isDataTransmitSuccessful 1398  
                                      _RF_ResetStatusIRQ 1600  
                                 SPI_WriteBuffer@bufSize 0025  
                                      _ADC_SelectChannel 13B3  
                               Wireless_sendData@payload 0034  
                       __end_of_TMR1_SetInterruptHandler 136C  
                                               ?___aldiv 0021  
                              ??_Sensor_getSupplyVoltage 0044  
                                               ?___ftadd 0049  
                                               ?___ftdiv 0031  
                                               ?___ftneg 0041  
                                               ?___lldiv 0021  
                                               ?___ftmul 0056  
                                               ?___fttol 0066  
                                               ?___lwdiv 0021  
                                     ?_RF_ResetStatusIRQ 0070  
                                        ?_ADC_Initialize 0070  
                           __end_of_RF_WriteRegisterData 15A7  
                                     ?_ADC_SelectChannel 0070  
                                               _I2C2_ISR 0534  
                           ??_INTERRUPT_InterruptManager 0020  
                                 ?_Sensor_peripheralWake 0070  
                                              __pswtext1 1000  
                                              _doorState 00DC  
                                    ??_RF_ResetStatusIRQ 0025  
                                    ??_ADC_SelectChannel 0021  
                                  ?_ADC_IsConversionDone 0070  
                                I2C_BufferRead@slaveAddr 003A  
                                       __CFG_WDTE$NSLEEP 0000  
                                   __end_of_RF_GetStatus 12EE  
                                        _RF_ReadRegister 14CA  
                                 __end_of_RF_DataIsReady 15C4  
                                       ___lwdiv@quotient 0027  
                                         __size_of_limit 0026  
                                 Wireless_packageData@t1 00C9  
                          __size_of_Wireless_packageData 0101  
                        __end_of_I2C2_MasterReadTRBBuild 172C  
                                          _TMR1_CallBack 13A5  
                                        ___aldiv@divisor 0021  
                                        ___aldiv@counter 002A  
                                               _BMP_init 0B07  
                                               _DOOR_run 12D8  
                                               _LATCbits 010E  
                                     Wireless_init@TADDR 1821  
                                              clear_ram0 130F  
                               __end_of_RF_WriteRegister 146C  
                                               _PIE1bits 0091  
                                               _PIE4bits 0094  
                              __end_of_RF_ResetStatusIRQ 1620  
                              __end_of_ADC_SelectChannel 13C3  
                    __size_of_INTERRUPT_InterruptManager 0033  
                                  __end_of_I2C_ByteWrite 1800  
                                               _PIR1bits 0011  
                                               _PIR4bits 0014  
                                               _SSP1CON1 0215  
                                               _SSP2CON1 021D  
                                               _SSP2CON3 021F  
                                       ??_I2C_BufferRead 0036  
                                               _TMR1_ISR 1348  
                                               _SSP1STAT 0214  
                                               _SSP2STAT 021C  
                                      ??_PIN_MANAGER_IOC 0070  
                          I2C2_MasterTRBInsert@ptrb_list 0021  
                                      ??_TMR1_Initialize 0023  
                                               _RF_Write 13C3  
                                             _ADCON0bits 009D  
                                       _I2C2_MasterWrite 16AB  
                               ADC_SelectChannel@channel 0022  
                                __size_of_FVR_Initialize 0004  
                                   __end_of_RF_RxPayload 142C  
                             __end_of_Timeout_hasExpired 093E  
                                               _WPUCbits 020E  
                         Diag_setTempSensorHealth@health 0022  
                                  __size_of_setSleepTime 0005  
                                 I2C_BufferRead@ReadAddr 0033  
                                   __end_of_RF_TxPayload 1550  
                                    __end_ofatan@coeff_a 1812  
                                    __end_ofatan@coeff_b 1821  
                                        ?_RF_DataIsReady 0070  
             Wireless_determineTransmitPower@testPayload 0039  
                                       ?_SPI1_Initialize 0070  
                                      ___lmul@multiplier 0021  
                           __end_of_I2C2_MasterTRBInsert 09E6  
                                       __size_of_RF_Init 0004  
                                         ?_TMR1_CallBack 0070  
                                _HMC5883L_I2C_BufferRead 13F5  
                                      ??_TMR2_Initialize 0021  
                             ?_Timeout_updateCurrentTime 0070  
                                      I2C_ByteWrite@data 0036  
                                             _EECON1bits 0195  
                                   __end_of_RF_WriteRead 1482  
                       HMC5883L_I2C_BufferRead@slaveAddr 0042  
                               ?_ADC_GetConversionResult 0021  
                                  TMR1_ReadTimer@readVal 0028  
                         I2C2_MasterWriteTRBBuild@length 0022  
                           __size_of_BMP_readTemperature 02CE  
                                __size_of_Wireless_sleep 0018  
                                ??_OSCILLATOR_Initialize 0021  
                                       __size_of___aldiv 0082  
                                       __size_of___ftadd 00F6  
                                           _setSleepTime 12F8  
                                       __size_of___ftdiv 00A9  
                                       __size_of___ftneg 0009  
                                       __size_of___lldiv 0053  
                                               ___altoft 0829  
                                       __size_of___ftmul 00B4  
                                       __size_of___fttol 009F  
                                       __size_of___lwdiv 0035  
            Wireless_determineTransmitPower@latestResult 003A  
                                               ___awtoft 1640  
                                               ___ftpack 0AA2  
                                ??_I2C2_FunctionComplete 0070  
                               _TMR1_SetInterruptHandler 1363  
                      __size_of_Diag_getTempSensorHealth 0003  
                                __end_of_RF_ReadRegister 14E4  
                      __size_of_Diag_setTempSensorHealth 0008  
                              ?_Diag_getTempSensorHealth 0070  
                                               ___lwtoft 142C  
                              ?_Diag_setTempSensorHealth 0070  
                                  _TMR1_InterruptHandler 016C  
                            ?_Wireless_checkDataReceived 0070  
                                 ??_ADC_IsConversionDone 0021  
                                _IOCAF2_InterruptHandler 016E  
                                Wireless_sendData@length 0031  
                                            _initialised 00DB  
                                        ___lwdiv@divisor 0021  
                                        ___lwdiv@counter 0026  
                           ??_IOCAF2_SetInterruptHandler 0023  
                                               __ptext10 13C3  
                                               __ptext11 1398  
                                               __ptext20 15A7  
                                               __ptext12 12EA  
                                               __ptext21 14CA  
                                               __ptext13 146C  
                                             _T1GCONbits 0019  
                                               __ptext30 1407  
                                               __ptext22 0866  
                                               __ptext14 175C  
                                               __ptext31 0BF0  
                                               __ptext23 12F3  
                                               __ptext15 1685  
                                               __ptext40 172C  
                                               __ptext32 158A  
                                               __ptext24 12EE  
                                               __ptext16 0B7B  
                                               __ptext41 156D  
                                               __ptext33 151A  
                                               __ptext25 1309  
                                               __ptext17 1419  
                                               __ptext50 135A  
                                               __ptext42 13E4  
                                               __ptext34 1600  
                                               __ptext26 12DB  
                                               __ptext18 15C4  
                                               __ptext51 131B  
                                               __ptext43 14FF  
                                               __ptext35 1456  
                                               __ptext27 13B3  
                                               __ptext19 1620  
                                               __ptext60 1351  
                                               __ptext52 14E4  
                                               __ptext44 12E2  
                                               __ptext36 1303  
                                               __ptext28 1329  
                                               __ptext61 0E56  
                                               __ptext53 12DE  
                                               __ptext45 1340  
                                               __ptext37 137F  
                                               __ptext29 136C  
                                               __ptext70 12D5  
                                               __ptext62 0DAD  
                                               __ptext54 1338  
                                               __ptext46 1482  
                                               __ptext38 12E6  
                                               __ptext71 0B07  
                                               __ptext63 0F0A  
                                               __ptext55 12D8  
                                               __ptext47 1363  
                                               __ptext39 0A44  
                                               __ptext80 1700  
                                               __ptext72 17C4  
                                               __ptext64 1640  
                                               __ptext56 0002  
                                               __ptext48 1322  
                                               __ptext81 1330  
                                               __ptext73 09E6  
                                               __ptext65 0829  
                                               __ptext57 006F  
                                               __ptext49 16D5  
                                               __ptext90 0534  
                                               __ptext74 14B1  
                                               __ptext66 0AA2  
                                               __ptext58 142C  
                                               __ptext91 1550  
                                               __ptext83 1348  
                                               __ptext75 08F1  
                                               __ptext67 077E  
                                               __ptext59 0C6B  
                                               __ptext92 13D3  
                                               __ptext84 13A5  
                                               __ptext76 16AB  
                                               __ptext68 08AB  
                                               __ptext93 12D3  
                                               __ptext85 1375  
                                               __ptext77 1662  
                                               __ptext69 13F5  
                                               __ptext86 0800  
                                               __ptext78 0801  
                                               __ptext87 12FD  
                                               __ptext79 0991  
                                               __ptext88 138B  
                                               __ptext89 12D4  
                               Wireless_packageData@data 00C0  
                                           _SSP1CON1bits 0215  
                                Wireless_sendData@status 0033  
                                           _SSP2CON1bits 021D  
                                           _SSP2CON2bits 021E  
                                             _IOCAF2_ISR 138B  
                                    RF_RxPayload@payload 0032  
                                   _RF_WriteRegisterData 158A  
                                      _HMC5883L_ReadBits 08AB  
                                          __size_of_main 01F7  
                      __end_of_Timeout_updateCurrentTime 0AA2  
                        Wireless_changeTransmitPower@val 0033  
                             __size_of_RF_ResetStatusIRQ 0020  
                                     ?_HMC5883L_ReadBits 0043  
                             __size_of_ADC_SelectChannel 0010  
                                I2C2_MasterWrite@address 0029  
                               __size_of_SPI_WriteBuffer 001B  
                                       ??_TMR1_ReadTimer 0023  
                                               int$flags 007E  
                                               _pressure 0128  
                                    ??_HMC5883L_ReadBits 0047  
                     __end_of_INTERRUPT_InterruptManager 0037  
                             _INTERRUPT_InterruptManager 0004  
                             __end_of_Timeout_setTimeout 14CA  
                                I2C2_MasterWrite@trBlock 015D  
                                           _SSP1STATbits 0214  
                               ??_Sensor_peripheralSleep 0021  
                    __size_of_IOCAF2_SetInterruptHandler 0009  
                                 BMP_readTemperature@tmp 00B9  
                          __size_of_I2C2_BusCollisionISR 0001  
                                            atan@coeff_a 1800  
                                            atan@coeff_b 1812  
                                  __size_of_RF_GetStatus 0004  
                                     RF_ReadRegister@reg 0024  
                                     RF_ReadRegister@val 0025  
                       __size_of_I2C2_MasterReadTRBBuild 002C  
                             ??_Timeout_getGlobalCounter 0025  
                                             _INTCONbits 000B  
                                  Timeout_setTimeout@val 0021  
                __end_of_Wireless_determineTransmitPower 0DAD  
               __size_of_Wireless_determineTransmitPower 00A3  
                      ??_Wireless_determineTransmitPower 0035  
                       ?_Wireless_determineTransmitPower 0070  
                        _Wireless_determineTransmitPower 0D0A  
                                             _FVRCONbits 0117  
                                           _sensorHealth 016A  
                                 __size_of_Wireless_init 007B  
                                               limit@max 0025  
                                               limit@min 0023  
                                               limit@val 0021  
                                  I2C_BufferRead@pBuffer 0031  
                                 __size_of_Wireless_wake 001F  
                                        ??_TMR1_CallBack 0070  
                              ??_HMC5883L_I2C_BufferRead 0041  
                                __size_of_WDT_Initialize 0004  
                      __size_of_I2C2_MasterWriteTRBBuild 0023  
                              __end_of_HMC5883L_ReadBits 08F1  
                              ?_I2C2_MasterWriteTRBBuild 0021  
                                               intlevel1 0000  
                                  ?_RF_WriteRegisterData 0029  
                            __end_of_ADC_StartConversion 12DE  
                                        _doorClosedAngle 00DD  
                                    I2C2_ISR@i2c_address 007A  
                                       ___lldiv@dividend 0025  
                                ?_PIN_MANAGER_Initialize 0070  
                        __end_of_ADC_GetConversionResult 1375  
                                      __CFG_CLKOUTEN$OFF 0000  
                                       ??_ADC_Initialize 0021  
                                           _RF_GetStatus 12EA  
                                 I2C2_MasterWrite@length 0028  
                                ??_Sensor_peripheralWake 0021  
                           __end_of_Diag_getSensorHealth 1419  
                                  __size_of_RF_RxPayload 0013  
                                   _I2C2_MasterTRBInsert 0991  
                                          __pstringtext1 1800  
                                          __pstringtext2 1812  
                                          __pstringtext3 1821  
                                  __size_of_RF_TxPayload 001B  
                                         _FVR_Initialize 12DE  
                                       ?_RF_ReadRegister 0070  
                           __size_of_SPI_WriteReadBuffer 0020  
                                       ___lldiv@quotient 002A  
                                   I2C_BufferRead@status 003B  
                                           ___aldiv@sign 002B  
                                 __size_of_SPI_WriteRead 0006  
                                            ?_IOCAF2_ISR 0070  
                         __end_of_PIN_MANAGER_Initialize 1700  
                                  __size_of_RF_WriteRead 0016  
                               __size_of_I2C2_MasterRead 0028  
                               __size_of_I2C2_Initialize 001B  
                                     _referenceDirection 013E  
                                     __size_of_I2C2_Stop 001D  
                                        _PIN_MANAGER_IOC 12FD  
                               __end_of_I2C2_MasterWrite 16D5  
                                           _RF_RxPayload 1419  
                                      ?_RF_WriteRegister 0023  
                                        _TMR1_Initialize 1482  
                    __size_of_Wireless_checkDataReceived 0075  
                                     main@prevDoorStatus 01D0  
