

Microchip Technology PIC LITE Macro Assembler V1.45 build -152302408 
                                                                                               Sat Jan 13 00:56:39 2018

Microchip Technology Omniscient Code Generator v1.45 (Free mode) build 201711160504
     1                           	processor	16LF1829
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataBANK1,global,class=CODE,delta=2
     5                           	psect	idataBANK2,global,class=CODE,delta=2
     6                           	psect	stringtext1,global,class=STRCODE,delta=2
     7                           	psect	stringtext2,global,class=STRCODE,delta=2
     8                           	psect	stringtext3,global,class=STRCODE,delta=2
     9                           	psect	nvCOMMON,global,class=COMMON,space=1,delta=1
    10                           	psect	nvBANK2,global,class=BANK2,space=1,delta=1
    11                           	psect	cinit,global,class=CODE,merge=1,delta=2
    12                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
    13                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    14                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1
    15                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1
    16                           	psect	dataBANK2,global,class=BANK2,space=1,delta=1
    17                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1
    18                           	psect	clrtext,global,class=CODE,delta=2
    19                           	psect	cstackBANK3,global,class=BANK3,space=1,delta=1
    20                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    21                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    22                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    23                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    24                           	psect	text1,local,class=CODE,merge=1,delta=2,group=2
    25                           	psect	text2,local,class=CODE,merge=1,delta=2
    26                           	psect	text3,local,class=CODE,merge=1,delta=2
    27                           	psect	text4,local,class=CODE,merge=1,delta=2
    28                           	psect	text5,local,class=CODE,merge=1,delta=2,group=2
    29                           	psect	text6,local,class=CODE,merge=1,delta=2
    30                           	psect	text7,local,class=CODE,merge=1,delta=2
    31                           	psect	text8,local,class=CODE,merge=1,delta=2
    32                           	psect	text9,local,class=CODE,merge=1,delta=2
    33                           	psect	text10,local,class=CODE,merge=1,delta=2,group=2
    34                           	psect	text11,local,class=CODE,merge=1,delta=2
    35                           	psect	text12,local,class=CODE,merge=1,delta=2
    36                           	psect	text13,local,class=CODE,merge=1,delta=2
    37                           	psect	text14,local,class=CODE,merge=1,delta=2
    38                           	psect	text15,local,class=CODE,merge=1,delta=2
    39                           	psect	text16,local,class=CODE,merge=1,delta=2
    40                           	psect	text17,local,class=CODE,merge=1,delta=2
    41                           	psect	text18,local,class=CODE,merge=1,delta=2
    42                           	psect	text19,local,class=CODE,merge=1,delta=2
    43                           	psect	text20,local,class=CODE,merge=1,delta=2
    44                           	psect	text21,local,class=CODE,merge=1,delta=2
    45                           	psect	text22,local,class=CODE,merge=1,delta=2
    46                           	psect	text23,local,class=CODE,merge=1,delta=2
    47                           	psect	text24,local,class=CODE,merge=1,delta=2
    48                           	psect	text25,local,class=CODE,merge=1,delta=2
    49                           	psect	text26,local,class=CODE,merge=1,delta=2
    50                           	psect	text27,local,class=CODE,merge=1,delta=2
    51                           	psect	text28,local,class=CODE,merge=1,delta=2
    52                           	psect	text29,local,class=CODE,merge=1,delta=2
    53                           	psect	text30,local,class=CODE,merge=1,delta=2
    54                           	psect	text31,local,class=CODE,merge=1,delta=2
    55                           	psect	text32,local,class=CODE,merge=1,delta=2
    56                           	psect	text33,local,class=CODE,merge=1,delta=2
    57                           	psect	text34,local,class=CODE,merge=1,delta=2
    58                           	psect	text35,local,class=CODE,merge=1,delta=2
    59                           	psect	text36,local,class=CODE,merge=1,delta=2
    60                           	psect	text37,local,class=CODE,merge=1,delta=2
    61                           	psect	text38,local,class=CODE,merge=1,delta=2
    62                           	psect	text39,local,class=CODE,merge=1,delta=2
    63                           	psect	text40,local,class=CODE,merge=1,delta=2
    64                           	psect	text41,local,class=CODE,merge=1,delta=2
    65                           	psect	text42,local,class=CODE,merge=1,delta=2
    66                           	psect	text43,local,class=CODE,merge=1,delta=2
    67                           	psect	text44,local,class=CODE,merge=1,delta=2
    68                           	psect	text45,local,class=CODE,merge=1,delta=2
    69                           	psect	text46,local,class=CODE,merge=1,delta=2
    70                           	psect	text47,local,class=CODE,merge=1,delta=2
    71                           	psect	text48,local,class=CODE,merge=1,delta=2
    72                           	psect	text49,local,class=CODE,merge=1,delta=2,group=2
    73                           	psect	text50,local,class=CODE,merge=1,delta=2
    74                           	psect	text51,local,class=CODE,merge=1,delta=2
    75                           	psect	text52,local,class=CODE,merge=1,delta=2
    76                           	psect	text53,local,class=CODE,merge=1,delta=2
    77                           	psect	text54,local,class=CODE,merge=1,delta=2,group=2
    78                           	psect	text55,local,class=CODE,merge=1,delta=2,group=2
    79                           	psect	text56,local,class=CODE,merge=1,delta=2,group=2
    80                           	psect	text57,local,class=CODE,merge=1,delta=2,group=2
    81                           	psect	text58,local,class=CODE,merge=1,delta=2,group=2
    82                           	psect	text59,local,class=CODE,merge=1,delta=2,group=2
    83                           	psect	text60,local,class=CODE,merge=1,delta=2,group=2
    84                           	psect	text61,local,class=CODE,merge=1,delta=2
    85                           	psect	text62,local,class=CODE,merge=1,delta=2
    86                           	psect	text63,local,class=CODE,merge=1,delta=2
    87                           	psect	text64,local,class=CODE,merge=1,delta=2
    88                           	psect	text65,local,class=CODE,merge=1,delta=2
    89                           	psect	text66,local,class=CODE,merge=1,delta=2
    90                           	psect	text67,local,class=CODE,merge=1,delta=2
    91                           	psect	text68,local,class=CODE,merge=1,delta=2
    92                           	psect	text69,local,class=CODE,merge=1,delta=2
    93                           	psect	text70,local,class=CODE,merge=1,delta=2
    94                           	psect	text71,local,class=CODE,merge=1,delta=2
    95                           	psect	text72,local,class=CODE,merge=1,delta=2,group=2
    96                           	psect	text73,local,class=CODE,merge=1,delta=2,group=2
    97                           	psect	text74,local,class=CODE,merge=1,delta=2,group=2
    98                           	psect	text75,local,class=CODE,merge=1,delta=2,group=2
    99                           	psect	text76,local,class=CODE,merge=1,delta=2,group=2
   100                           	psect	text77,local,class=CODE,merge=1,delta=2,group=2
   101                           	psect	text78,local,class=CODE,merge=1,delta=2,group=2
   102                           	psect	text79,local,class=CODE,merge=1,delta=2,group=2
   103                           	psect	text80,local,class=CODE,merge=1,delta=2,group=2
   104                           	psect	text81,local,class=CODE,merge=1,delta=2,group=2
   105                           	psect	text82,local,class=CODE,merge=1,delta=2
   106                           	psect	text83,local,class=CODE,merge=1,delta=2
   107                           	psect	text84,local,class=CODE,merge=1,delta=2
   108                           	psect	text85,local,class=CODE,merge=1,delta=2
   109                           	psect	text86,local,class=CODE,merge=1,delta=2
   110                           	psect	text87,local,class=CODE,merge=1,delta=2
   111                           	psect	text88,local,class=CODE,merge=1,delta=2
   112                           	psect	text89,local,class=CODE,merge=1,delta=2
   113                           	psect	text90,local,class=CODE,merge=1,delta=2
   114                           	psect	text91,local,class=CODE,merge=1,delta=2
   115                           	psect	text92,local,class=CODE,merge=1,delta=2
   116                           	psect	text93,local,class=CODE,merge=1,delta=2
   117                           	psect	text94,local,class=CODE,merge=1,delta=2
   118                           	psect	text95,local,class=CODE,merge=1,delta=2
   119                           	psect	intentry,global,class=CODE,delta=2
   120                           	psect	text97,local,class=CODE,merge=1,delta=2
   121                           	psect	text98,local,class=CODE,merge=1,delta=2
   122                           	psect	text99,local,class=CODE,merge=1,delta=2
   123                           	psect	text100,local,class=CODE,merge=1,delta=2
   124                           	psect	text101,local,class=CODE,merge=1,delta=2
   125                           	psect	text102,local,class=CODE,merge=1,delta=2
   126                           	psect	text103,local,class=CODE,merge=1,delta=2
   127                           	psect	text104,local,class=CODE,merge=1,delta=2
   128                           	psect	swtext1,local,class=CONST,delta=2
   129                           	psect	text105,local,class=CODE,merge=1,delta=2
   130                           	psect	text106,local,class=CODE,merge=1,delta=2
   131                           	psect	text107,local,class=CODE,merge=1,delta=2
   132                           	dabs	1,0x7E,2
   133  0000                     
   134                           ; Version 1.45
   135                           ; Generated 16/11/2017 GMT
   136                           ; 
   137                           ; Copyright © 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
   138                           ; All rights reserved.
   139                           ; 
   140                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
   141                           ; 
   142                           ; Redistribution and use in source and binary forms, with or without modification, are
   143                           ; permitted provided that the following conditions are met:
   144                           ; 
   145                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
   146                           ;        conditions and the following disclaimer.
   147                           ; 
   148                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
   149                           ;        of conditions and the following disclaimer in the documentation and/or other
   150                           ;        materials provided with the distribution.
   151                           ; 
   152                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
   153                           ;        software without specific prior written permission.
   154                           ; 
   155                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   156                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   157                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   158                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   159                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   160                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   161                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   162                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   163                           ; 
   164                           ; 
   165                           ; Code-generator required, PIC16LF1829 Definitions
   166                           ; 
   167                           ; SFR Addresses
   168  0000                     	;# 
   169  0001                     	;# 
   170  0002                     	;# 
   171  0003                     	;# 
   172  0004                     	;# 
   173  0005                     	;# 
   174  0006                     	;# 
   175  0007                     	;# 
   176  0008                     	;# 
   177  0009                     	;# 
   178  000A                     	;# 
   179  000B                     	;# 
   180  000C                     	;# 
   181  000D                     	;# 
   182  000E                     	;# 
   183  0011                     	;# 
   184  0012                     	;# 
   185  0013                     	;# 
   186  0014                     	;# 
   187  0015                     	;# 
   188  0016                     	;# 
   189  0016                     	;# 
   190  0017                     	;# 
   191  0018                     	;# 
   192  0019                     	;# 
   193  001A                     	;# 
   194  001B                     	;# 
   195  001C                     	;# 
   196  001E                     	;# 
   197  001F                     	;# 
   198  008C                     	;# 
   199  008D                     	;# 
   200  008E                     	;# 
   201  0091                     	;# 
   202  0092                     	;# 
   203  0093                     	;# 
   204  0094                     	;# 
   205  0095                     	;# 
   206  0096                     	;# 
   207  0097                     	;# 
   208  0098                     	;# 
   209  0099                     	;# 
   210  009A                     	;# 
   211  009B                     	;# 
   212  009B                     	;# 
   213  009C                     	;# 
   214  009D                     	;# 
   215  009E                     	;# 
   216  010C                     	;# 
   217  010D                     	;# 
   218  010E                     	;# 
   219  0111                     	;# 
   220  0112                     	;# 
   221  0113                     	;# 
   222  0114                     	;# 
   223  0115                     	;# 
   224  0116                     	;# 
   225  0117                     	;# 
   226  0118                     	;# 
   227  0119                     	;# 
   228  011A                     	;# 
   229  011B                     	;# 
   230  011D                     	;# 
   231  011E                     	;# 
   232  018C                     	;# 
   233  018D                     	;# 
   234  018E                     	;# 
   235  0191                     	;# 
   236  0191                     	;# 
   237  0192                     	;# 
   238  0193                     	;# 
   239  0193                     	;# 
   240  0193                     	;# 
   241  0194                     	;# 
   242  0195                     	;# 
   243  0196                     	;# 
   244  0199                     	;# 
   245  019A                     	;# 
   246  019B                     	;# 
   247  019B                     	;# 
   248  019B                     	;# 
   249  019B                     	;# 
   250  019C                     	;# 
   251  019C                     	;# 
   252  019D                     	;# 
   253  019E                     	;# 
   254  019F                     	;# 
   255  020C                     	;# 
   256  020D                     	;# 
   257  020E                     	;# 
   258  0211                     	;# 
   259  0211                     	;# 
   260  0212                     	;# 
   261  0212                     	;# 
   262  0213                     	;# 
   263  0213                     	;# 
   264  0214                     	;# 
   265  0214                     	;# 
   266  0215                     	;# 
   267  0215                     	;# 
   268  0215                     	;# 
   269  0216                     	;# 
   270  0216                     	;# 
   271  0217                     	;# 
   272  0217                     	;# 
   273  0219                     	;# 
   274  021A                     	;# 
   275  021B                     	;# 
   276  021C                     	;# 
   277  021D                     	;# 
   278  021E                     	;# 
   279  021F                     	;# 
   280  0291                     	;# 
   281  0291                     	;# 
   282  0292                     	;# 
   283  0293                     	;# 
   284  0294                     	;# 
   285  0295                     	;# 
   286  0295                     	;# 
   287  0296                     	;# 
   288  0298                     	;# 
   289  0298                     	;# 
   290  0299                     	;# 
   291  029A                     	;# 
   292  029B                     	;# 
   293  029C                     	;# 
   294  029D                     	;# 
   295  029E                     	;# 
   296  0311                     	;# 
   297  0311                     	;# 
   298  0312                     	;# 
   299  0313                     	;# 
   300  0318                     	;# 
   301  0318                     	;# 
   302  0319                     	;# 
   303  031A                     	;# 
   304  038C                     	;# 
   305  038D                     	;# 
   306  038E                     	;# 
   307  0391                     	;# 
   308  0392                     	;# 
   309  0393                     	;# 
   310  0394                     	;# 
   311  0395                     	;# 
   312  0396                     	;# 
   313  039A                     	;# 
   314  039C                     	;# 
   315  039D                     	;# 
   316  039E                     	;# 
   317  039F                     	;# 
   318  0415                     	;# 
   319  0416                     	;# 
   320  0417                     	;# 
   321  041C                     	;# 
   322  041D                     	;# 
   323  041E                     	;# 
   324  0FE4                     	;# 
   325  0FE5                     	;# 
   326  0FE6                     	;# 
   327  0FE7                     	;# 
   328  0FE8                     	;# 
   329  0FE9                     	;# 
   330  0FEA                     	;# 
   331  0FEB                     	;# 
   332  0FED                     	;# 
   333  0FEE                     	;# 
   334  0FEF                     	;# 
   335  0000                     	;# 
   336  0001                     	;# 
   337  0002                     	;# 
   338  0003                     	;# 
   339  0004                     	;# 
   340  0005                     	;# 
   341  0006                     	;# 
   342  0007                     	;# 
   343  0008                     	;# 
   344  0009                     	;# 
   345  000A                     	;# 
   346  000B                     	;# 
   347  000C                     	;# 
   348  000D                     	;# 
   349  000E                     	;# 
   350  0011                     	;# 
   351  0012                     	;# 
   352  0013                     	;# 
   353  0014                     	;# 
   354  0015                     	;# 
   355  0016                     	;# 
   356  0016                     	;# 
   357  0017                     	;# 
   358  0018                     	;# 
   359  0019                     	;# 
   360  001A                     	;# 
   361  001B                     	;# 
   362  001C                     	;# 
   363  001E                     	;# 
   364  001F                     	;# 
   365  008C                     	;# 
   366  008D                     	;# 
   367  008E                     	;# 
   368  0091                     	;# 
   369  0092                     	;# 
   370  0093                     	;# 
   371  0094                     	;# 
   372  0095                     	;# 
   373  0096                     	;# 
   374  0097                     	;# 
   375  0098                     	;# 
   376  0099                     	;# 
   377  009A                     	;# 
   378  009B                     	;# 
   379  009B                     	;# 
   380  009C                     	;# 
   381  009D                     	;# 
   382  009E                     	;# 
   383  010C                     	;# 
   384  010D                     	;# 
   385  010E                     	;# 
   386  0111                     	;# 
   387  0112                     	;# 
   388  0113                     	;# 
   389  0114                     	;# 
   390  0115                     	;# 
   391  0116                     	;# 
   392  0117                     	;# 
   393  0118                     	;# 
   394  0119                     	;# 
   395  011A                     	;# 
   396  011B                     	;# 
   397  011D                     	;# 
   398  011E                     	;# 
   399  018C                     	;# 
   400  018D                     	;# 
   401  018E                     	;# 
   402  0191                     	;# 
   403  0191                     	;# 
   404  0192                     	;# 
   405  0193                     	;# 
   406  0193                     	;# 
   407  0193                     	;# 
   408  0194                     	;# 
   409  0195                     	;# 
   410  0196                     	;# 
   411  0199                     	;# 
   412  019A                     	;# 
   413  019B                     	;# 
   414  019B                     	;# 
   415  019B                     	;# 
   416  019B                     	;# 
   417  019C                     	;# 
   418  019C                     	;# 
   419  019D                     	;# 
   420  019E                     	;# 
   421  019F                     	;# 
   422  020C                     	;# 
   423  020D                     	;# 
   424  020E                     	;# 
   425  0211                     	;# 
   426  0211                     	;# 
   427  0212                     	;# 
   428  0212                     	;# 
   429  0213                     	;# 
   430  0213                     	;# 
   431  0214                     	;# 
   432  0214                     	;# 
   433  0215                     	;# 
   434  0215                     	;# 
   435  0215                     	;# 
   436  0216                     	;# 
   437  0216                     	;# 
   438  0217                     	;# 
   439  0217                     	;# 
   440  0219                     	;# 
   441  021A                     	;# 
   442  021B                     	;# 
   443  021C                     	;# 
   444  021D                     	;# 
   445  021E                     	;# 
   446  021F                     	;# 
   447  0291                     	;# 
   448  0291                     	;# 
   449  0292                     	;# 
   450  0293                     	;# 
   451  0294                     	;# 
   452  0295                     	;# 
   453  0295                     	;# 
   454  0296                     	;# 
   455  0298                     	;# 
   456  0298                     	;# 
   457  0299                     	;# 
   458  029A                     	;# 
   459  029B                     	;# 
   460  029C                     	;# 
   461  029D                     	;# 
   462  029E                     	;# 
   463  0311                     	;# 
   464  0311                     	;# 
   465  0312                     	;# 
   466  0313                     	;# 
   467  0318                     	;# 
   468  0318                     	;# 
   469  0319                     	;# 
   470  031A                     	;# 
   471  038C                     	;# 
   472  038D                     	;# 
   473  038E                     	;# 
   474  0391                     	;# 
   475  0392                     	;# 
   476  0393                     	;# 
   477  0394                     	;# 
   478  0395                     	;# 
   479  0396                     	;# 
   480  039A                     	;# 
   481  039C                     	;# 
   482  039D                     	;# 
   483  039E                     	;# 
   484  039F                     	;# 
   485  0415                     	;# 
   486  0416                     	;# 
   487  0417                     	;# 
   488  041C                     	;# 
   489  041D                     	;# 
   490  041E                     	;# 
   491  0FE4                     	;# 
   492  0FE5                     	;# 
   493  0FE6                     	;# 
   494  0FE7                     	;# 
   495  0FE8                     	;# 
   496  0FE9                     	;# 
   497  0FEA                     	;# 
   498  0FEB                     	;# 
   499  0FED                     	;# 
   500  0FEE                     	;# 
   501  0FEF                     	;# 
   502  0000                     	;# 
   503  0001                     	;# 
   504  0002                     	;# 
   505  0003                     	;# 
   506  0004                     	;# 
   507  0005                     	;# 
   508  0006                     	;# 
   509  0007                     	;# 
   510  0008                     	;# 
   511  0009                     	;# 
   512  000A                     	;# 
   513  000B                     	;# 
   514  000C                     	;# 
   515  000D                     	;# 
   516  000E                     	;# 
   517  0011                     	;# 
   518  0012                     	;# 
   519  0013                     	;# 
   520  0014                     	;# 
   521  0015                     	;# 
   522  0016                     	;# 
   523  0016                     	;# 
   524  0017                     	;# 
   525  0018                     	;# 
   526  0019                     	;# 
   527  001A                     	;# 
   528  001B                     	;# 
   529  001C                     	;# 
   530  001E                     	;# 
   531  001F                     	;# 
   532  008C                     	;# 
   533  008D                     	;# 
   534  008E                     	;# 
   535  0091                     	;# 
   536  0092                     	;# 
   537  0093                     	;# 
   538  0094                     	;# 
   539  0095                     	;# 
   540  0096                     	;# 
   541  0097                     	;# 
   542  0098                     	;# 
   543  0099                     	;# 
   544  009A                     	;# 
   545  009B                     	;# 
   546  009B                     	;# 
   547  009C                     	;# 
   548  009D                     	;# 
   549  009E                     	;# 
   550  010C                     	;# 
   551  010D                     	;# 
   552  010E                     	;# 
   553  0111                     	;# 
   554  0112                     	;# 
   555  0113                     	;# 
   556  0114                     	;# 
   557  0115                     	;# 
   558  0116                     	;# 
   559  0117                     	;# 
   560  0118                     	;# 
   561  0119                     	;# 
   562  011A                     	;# 
   563  011B                     	;# 
   564  011D                     	;# 
   565  011E                     	;# 
   566  018C                     	;# 
   567  018D                     	;# 
   568  018E                     	;# 
   569  0191                     	;# 
   570  0191                     	;# 
   571  0192                     	;# 
   572  0193                     	;# 
   573  0193                     	;# 
   574  0193                     	;# 
   575  0194                     	;# 
   576  0195                     	;# 
   577  0196                     	;# 
   578  0199                     	;# 
   579  019A                     	;# 
   580  019B                     	;# 
   581  019B                     	;# 
   582  019B                     	;# 
   583  019B                     	;# 
   584  019C                     	;# 
   585  019C                     	;# 
   586  019D                     	;# 
   587  019E                     	;# 
   588  019F                     	;# 
   589  020C                     	;# 
   590  020D                     	;# 
   591  020E                     	;# 
   592  0211                     	;# 
   593  0211                     	;# 
   594  0212                     	;# 
   595  0212                     	;# 
   596  0213                     	;# 
   597  0213                     	;# 
   598  0214                     	;# 
   599  0214                     	;# 
   600  0215                     	;# 
   601  0215                     	;# 
   602  0215                     	;# 
   603  0216                     	;# 
   604  0216                     	;# 
   605  0217                     	;# 
   606  0217                     	;# 
   607  0219                     	;# 
   608  021A                     	;# 
   609  021B                     	;# 
   610  021C                     	;# 
   611  021D                     	;# 
   612  021E                     	;# 
   613  021F                     	;# 
   614  0291                     	;# 
   615  0291                     	;# 
   616  0292                     	;# 
   617  0293                     	;# 
   618  0294                     	;# 
   619  0295                     	;# 
   620  0295                     	;# 
   621  0296                     	;# 
   622  0298                     	;# 
   623  0298                     	;# 
   624  0299                     	;# 
   625  029A                     	;# 
   626  029B                     	;# 
   627  029C                     	;# 
   628  029D                     	;# 
   629  029E                     	;# 
   630  0311                     	;# 
   631  0311                     	;# 
   632  0312                     	;# 
   633  0313                     	;# 
   634  0318                     	;# 
   635  0318                     	;# 
   636  0319                     	;# 
   637  031A                     	;# 
   638  038C                     	;# 
   639  038D                     	;# 
   640  038E                     	;# 
   641  0391                     	;# 
   642  0392                     	;# 
   643  0393                     	;# 
   644  0394                     	;# 
   645  0395                     	;# 
   646  0396                     	;# 
   647  039A                     	;# 
   648  039C                     	;# 
   649  039D                     	;# 
   650  039E                     	;# 
   651  039F                     	;# 
   652  0415                     	;# 
   653  0416                     	;# 
   654  0417                     	;# 
   655  041C                     	;# 
   656  041D                     	;# 
   657  041E                     	;# 
   658  0FE4                     	;# 
   659  0FE5                     	;# 
   660  0FE6                     	;# 
   661  0FE7                     	;# 
   662  0FE8                     	;# 
   663  0FE9                     	;# 
   664  0FEA                     	;# 
   665  0FEB                     	;# 
   666  0FED                     	;# 
   667  0FEE                     	;# 
   668  0FEF                     	;# 
   669  0000                     	;# 
   670  0001                     	;# 
   671  0002                     	;# 
   672  0003                     	;# 
   673  0004                     	;# 
   674  0005                     	;# 
   675  0006                     	;# 
   676  0007                     	;# 
   677  0008                     	;# 
   678  0009                     	;# 
   679  000A                     	;# 
   680  000B                     	;# 
   681  000C                     	;# 
   682  000D                     	;# 
   683  000E                     	;# 
   684  0011                     	;# 
   685  0012                     	;# 
   686  0013                     	;# 
   687  0014                     	;# 
   688  0015                     	;# 
   689  0016                     	;# 
   690  0016                     	;# 
   691  0017                     	;# 
   692  0018                     	;# 
   693  0019                     	;# 
   694  001A                     	;# 
   695  001B                     	;# 
   696  001C                     	;# 
   697  001E                     	;# 
   698  001F                     	;# 
   699  008C                     	;# 
   700  008D                     	;# 
   701  008E                     	;# 
   702  0091                     	;# 
   703  0092                     	;# 
   704  0093                     	;# 
   705  0094                     	;# 
   706  0095                     	;# 
   707  0096                     	;# 
   708  0097                     	;# 
   709  0098                     	;# 
   710  0099                     	;# 
   711  009A                     	;# 
   712  009B                     	;# 
   713  009B                     	;# 
   714  009C                     	;# 
   715  009D                     	;# 
   716  009E                     	;# 
   717  010C                     	;# 
   718  010D                     	;# 
   719  010E                     	;# 
   720  0111                     	;# 
   721  0112                     	;# 
   722  0113                     	;# 
   723  0114                     	;# 
   724  0115                     	;# 
   725  0116                     	;# 
   726  0117                     	;# 
   727  0118                     	;# 
   728  0119                     	;# 
   729  011A                     	;# 
   730  011B                     	;# 
   731  011D                     	;# 
   732  011E                     	;# 
   733  018C                     	;# 
   734  018D                     	;# 
   735  018E                     	;# 
   736  0191                     	;# 
   737  0191                     	;# 
   738  0192                     	;# 
   739  0193                     	;# 
   740  0193                     	;# 
   741  0193                     	;# 
   742  0194                     	;# 
   743  0195                     	;# 
   744  0196                     	;# 
   745  0199                     	;# 
   746  019A                     	;# 
   747  019B                     	;# 
   748  019B                     	;# 
   749  019B                     	;# 
   750  019B                     	;# 
   751  019C                     	;# 
   752  019C                     	;# 
   753  019D                     	;# 
   754  019E                     	;# 
   755  019F                     	;# 
   756  020C                     	;# 
   757  020D                     	;# 
   758  020E                     	;# 
   759  0211                     	;# 
   760  0211                     	;# 
   761  0212                     	;# 
   762  0212                     	;# 
   763  0213                     	;# 
   764  0213                     	;# 
   765  0214                     	;# 
   766  0214                     	;# 
   767  0215                     	;# 
   768  0215                     	;# 
   769  0215                     	;# 
   770  0216                     	;# 
   771  0216                     	;# 
   772  0217                     	;# 
   773  0217                     	;# 
   774  0219                     	;# 
   775  021A                     	;# 
   776  021B                     	;# 
   777  021C                     	;# 
   778  021D                     	;# 
   779  021E                     	;# 
   780  021F                     	;# 
   781  0291                     	;# 
   782  0291                     	;# 
   783  0292                     	;# 
   784  0293                     	;# 
   785  0294                     	;# 
   786  0295                     	;# 
   787  0295                     	;# 
   788  0296                     	;# 
   789  0298                     	;# 
   790  0298                     	;# 
   791  0299                     	;# 
   792  029A                     	;# 
   793  029B                     	;# 
   794  029C                     	;# 
   795  029D                     	;# 
   796  029E                     	;# 
   797  0311                     	;# 
   798  0311                     	;# 
   799  0312                     	;# 
   800  0313                     	;# 
   801  0318                     	;# 
   802  0318                     	;# 
   803  0319                     	;# 
   804  031A                     	;# 
   805  038C                     	;# 
   806  038D                     	;# 
   807  038E                     	;# 
   808  0391                     	;# 
   809  0392                     	;# 
   810  0393                     	;# 
   811  0394                     	;# 
   812  0395                     	;# 
   813  0396                     	;# 
   814  039A                     	;# 
   815  039C                     	;# 
   816  039D                     	;# 
   817  039E                     	;# 
   818  039F                     	;# 
   819  0415                     	;# 
   820  0416                     	;# 
   821  0417                     	;# 
   822  041C                     	;# 
   823  041D                     	;# 
   824  041E                     	;# 
   825  0FE4                     	;# 
   826  0FE5                     	;# 
   827  0FE6                     	;# 
   828  0FE7                     	;# 
   829  0FE8                     	;# 
   830  0FE9                     	;# 
   831  0FEA                     	;# 
   832  0FEB                     	;# 
   833  0FED                     	;# 
   834  0FEE                     	;# 
   835  0FEF                     	;# 
   836  0000                     	;# 
   837  0001                     	;# 
   838  0002                     	;# 
   839  0003                     	;# 
   840  0004                     	;# 
   841  0005                     	;# 
   842  0006                     	;# 
   843  0007                     	;# 
   844  0008                     	;# 
   845  0009                     	;# 
   846  000A                     	;# 
   847  000B                     	;# 
   848  000C                     	;# 
   849  000D                     	;# 
   850  000E                     	;# 
   851  0011                     	;# 
   852  0012                     	;# 
   853  0013                     	;# 
   854  0014                     	;# 
   855  0015                     	;# 
   856  0016                     	;# 
   857  0016                     	;# 
   858  0017                     	;# 
   859  0018                     	;# 
   860  0019                     	;# 
   861  001A                     	;# 
   862  001B                     	;# 
   863  001C                     	;# 
   864  001E                     	;# 
   865  001F                     	;# 
   866  008C                     	;# 
   867  008D                     	;# 
   868  008E                     	;# 
   869  0091                     	;# 
   870  0092                     	;# 
   871  0093                     	;# 
   872  0094                     	;# 
   873  0095                     	;# 
   874  0096                     	;# 
   875  0097                     	;# 
   876  0098                     	;# 
   877  0099                     	;# 
   878  009A                     	;# 
   879  009B                     	;# 
   880  009B                     	;# 
   881  009C                     	;# 
   882  009D                     	;# 
   883  009E                     	;# 
   884  010C                     	;# 
   885  010D                     	;# 
   886  010E                     	;# 
   887  0111                     	;# 
   888  0112                     	;# 
   889  0113                     	;# 
   890  0114                     	;# 
   891  0115                     	;# 
   892  0116                     	;# 
   893  0117                     	;# 
   894  0118                     	;# 
   895  0119                     	;# 
   896  011A                     	;# 
   897  011B                     	;# 
   898  011D                     	;# 
   899  011E                     	;# 
   900  018C                     	;# 
   901  018D                     	;# 
   902  018E                     	;# 
   903  0191                     	;# 
   904  0191                     	;# 
   905  0192                     	;# 
   906  0193                     	;# 
   907  0193                     	;# 
   908  0193                     	;# 
   909  0194                     	;# 
   910  0195                     	;# 
   911  0196                     	;# 
   912  0199                     	;# 
   913  019A                     	;# 
   914  019B                     	;# 
   915  019B                     	;# 
   916  019B                     	;# 
   917  019B                     	;# 
   918  019C                     	;# 
   919  019C                     	;# 
   920  019D                     	;# 
   921  019E                     	;# 
   922  019F                     	;# 
   923  020C                     	;# 
   924  020D                     	;# 
   925  020E                     	;# 
   926  0211                     	;# 
   927  0211                     	;# 
   928  0212                     	;# 
   929  0212                     	;# 
   930  0213                     	;# 
   931  0213                     	;# 
   932  0214                     	;# 
   933  0214                     	;# 
   934  0215                     	;# 
   935  0215                     	;# 
   936  0215                     	;# 
   937  0216                     	;# 
   938  0216                     	;# 
   939  0217                     	;# 
   940  0217                     	;# 
   941  0219                     	;# 
   942  021A                     	;# 
   943  021B                     	;# 
   944  021C                     	;# 
   945  021D                     	;# 
   946  021E                     	;# 
   947  021F                     	;# 
   948  0291                     	;# 
   949  0291                     	;# 
   950  0292                     	;# 
   951  0293                     	;# 
   952  0294                     	;# 
   953  0295                     	;# 
   954  0295                     	;# 
   955  0296                     	;# 
   956  0298                     	;# 
   957  0298                     	;# 
   958  0299                     	;# 
   959  029A                     	;# 
   960  029B                     	;# 
   961  029C                     	;# 
   962  029D                     	;# 
   963  029E                     	;# 
   964  0311                     	;# 
   965  0311                     	;# 
   966  0312                     	;# 
   967  0313                     	;# 
   968  0318                     	;# 
   969  0318                     	;# 
   970  0319                     	;# 
   971  031A                     	;# 
   972  038C                     	;# 
   973  038D                     	;# 
   974  038E                     	;# 
   975  0391                     	;# 
   976  0392                     	;# 
   977  0393                     	;# 
   978  0394                     	;# 
   979  0395                     	;# 
   980  0396                     	;# 
   981  039A                     	;# 
   982  039C                     	;# 
   983  039D                     	;# 
   984  039E                     	;# 
   985  039F                     	;# 
   986  0415                     	;# 
   987  0416                     	;# 
   988  0417                     	;# 
   989  041C                     	;# 
   990  041D                     	;# 
   991  041E                     	;# 
   992  0FE4                     	;# 
   993  0FE5                     	;# 
   994  0FE6                     	;# 
   995  0FE7                     	;# 
   996  0FE8                     	;# 
   997  0FE9                     	;# 
   998  0FEA                     	;# 
   999  0FEB                     	;# 
  1000  0FED                     	;# 
  1001  0FEE                     	;# 
  1002  0FEF                     	;# 
  1003  0000                     	;# 
  1004  0001                     	;# 
  1005  0002                     	;# 
  1006  0003                     	;# 
  1007  0004                     	;# 
  1008  0005                     	;# 
  1009  0006                     	;# 
  1010  0007                     	;# 
  1011  0008                     	;# 
  1012  0009                     	;# 
  1013  000A                     	;# 
  1014  000B                     	;# 
  1015  000C                     	;# 
  1016  000D                     	;# 
  1017  000E                     	;# 
  1018  0011                     	;# 
  1019  0012                     	;# 
  1020  0013                     	;# 
  1021  0014                     	;# 
  1022  0015                     	;# 
  1023  0016                     	;# 
  1024  0016                     	;# 
  1025  0017                     	;# 
  1026  0018                     	;# 
  1027  0019                     	;# 
  1028  001A                     	;# 
  1029  001B                     	;# 
  1030  001C                     	;# 
  1031  001E                     	;# 
  1032  001F                     	;# 
  1033  008C                     	;# 
  1034  008D                     	;# 
  1035  008E                     	;# 
  1036  0091                     	;# 
  1037  0092                     	;# 
  1038  0093                     	;# 
  1039  0094                     	;# 
  1040  0095                     	;# 
  1041  0096                     	;# 
  1042  0097                     	;# 
  1043  0098                     	;# 
  1044  0099                     	;# 
  1045  009A                     	;# 
  1046  009B                     	;# 
  1047  009B                     	;# 
  1048  009C                     	;# 
  1049  009D                     	;# 
  1050  009E                     	;# 
  1051  010C                     	;# 
  1052  010D                     	;# 
  1053  010E                     	;# 
  1054  0111                     	;# 
  1055  0112                     	;# 
  1056  0113                     	;# 
  1057  0114                     	;# 
  1058  0115                     	;# 
  1059  0116                     	;# 
  1060  0117                     	;# 
  1061  0118                     	;# 
  1062  0119                     	;# 
  1063  011A                     	;# 
  1064  011B                     	;# 
  1065  011D                     	;# 
  1066  011E                     	;# 
  1067  018C                     	;# 
  1068  018D                     	;# 
  1069  018E                     	;# 
  1070  0191                     	;# 
  1071  0191                     	;# 
  1072  0192                     	;# 
  1073  0193                     	;# 
  1074  0193                     	;# 
  1075  0193                     	;# 
  1076  0194                     	;# 
  1077  0195                     	;# 
  1078  0196                     	;# 
  1079  0199                     	;# 
  1080  019A                     	;# 
  1081  019B                     	;# 
  1082  019B                     	;# 
  1083  019B                     	;# 
  1084  019B                     	;# 
  1085  019C                     	;# 
  1086  019C                     	;# 
  1087  019D                     	;# 
  1088  019E                     	;# 
  1089  019F                     	;# 
  1090  020C                     	;# 
  1091  020D                     	;# 
  1092  020E                     	;# 
  1093  0211                     	;# 
  1094  0211                     	;# 
  1095  0212                     	;# 
  1096  0212                     	;# 
  1097  0213                     	;# 
  1098  0213                     	;# 
  1099  0214                     	;# 
  1100  0214                     	;# 
  1101  0215                     	;# 
  1102  0215                     	;# 
  1103  0215                     	;# 
  1104  0216                     	;# 
  1105  0216                     	;# 
  1106  0217                     	;# 
  1107  0217                     	;# 
  1108  0219                     	;# 
  1109  021A                     	;# 
  1110  021B                     	;# 
  1111  021C                     	;# 
  1112  021D                     	;# 
  1113  021E                     	;# 
  1114  021F                     	;# 
  1115  0291                     	;# 
  1116  0291                     	;# 
  1117  0292                     	;# 
  1118  0293                     	;# 
  1119  0294                     	;# 
  1120  0295                     	;# 
  1121  0295                     	;# 
  1122  0296                     	;# 
  1123  0298                     	;# 
  1124  0298                     	;# 
  1125  0299                     	;# 
  1126  029A                     	;# 
  1127  029B                     	;# 
  1128  029C                     	;# 
  1129  029D                     	;# 
  1130  029E                     	;# 
  1131  0311                     	;# 
  1132  0311                     	;# 
  1133  0312                     	;# 
  1134  0313                     	;# 
  1135  0318                     	;# 
  1136  0318                     	;# 
  1137  0319                     	;# 
  1138  031A                     	;# 
  1139  038C                     	;# 
  1140  038D                     	;# 
  1141  038E                     	;# 
  1142  0391                     	;# 
  1143  0392                     	;# 
  1144  0393                     	;# 
  1145  0394                     	;# 
  1146  0395                     	;# 
  1147  0396                     	;# 
  1148  039A                     	;# 
  1149  039C                     	;# 
  1150  039D                     	;# 
  1151  039E                     	;# 
  1152  039F                     	;# 
  1153  0415                     	;# 
  1154  0416                     	;# 
  1155  0417                     	;# 
  1156  041C                     	;# 
  1157  041D                     	;# 
  1158  041E                     	;# 
  1159  0FE4                     	;# 
  1160  0FE5                     	;# 
  1161  0FE6                     	;# 
  1162  0FE7                     	;# 
  1163  0FE8                     	;# 
  1164  0FE9                     	;# 
  1165  0FEA                     	;# 
  1166  0FEB                     	;# 
  1167  0FED                     	;# 
  1168  0FEE                     	;# 
  1169  0FEF                     	;# 
  1170  0000                     	;# 
  1171  0001                     	;# 
  1172  0002                     	;# 
  1173  0003                     	;# 
  1174  0004                     	;# 
  1175  0005                     	;# 
  1176  0006                     	;# 
  1177  0007                     	;# 
  1178  0008                     	;# 
  1179  0009                     	;# 
  1180  000A                     	;# 
  1181  000B                     	;# 
  1182  000C                     	;# 
  1183  000D                     	;# 
  1184  000E                     	;# 
  1185  0011                     	;# 
  1186  0012                     	;# 
  1187  0013                     	;# 
  1188  0014                     	;# 
  1189  0015                     	;# 
  1190  0016                     	;# 
  1191  0016                     	;# 
  1192  0017                     	;# 
  1193  0018                     	;# 
  1194  0019                     	;# 
  1195  001A                     	;# 
  1196  001B                     	;# 
  1197  001C                     	;# 
  1198  001E                     	;# 
  1199  001F                     	;# 
  1200  008C                     	;# 
  1201  008D                     	;# 
  1202  008E                     	;# 
  1203  0091                     	;# 
  1204  0092                     	;# 
  1205  0093                     	;# 
  1206  0094                     	;# 
  1207  0095                     	;# 
  1208  0096                     	;# 
  1209  0097                     	;# 
  1210  0098                     	;# 
  1211  0099                     	;# 
  1212  009A                     	;# 
  1213  009B                     	;# 
  1214  009B                     	;# 
  1215  009C                     	;# 
  1216  009D                     	;# 
  1217  009E                     	;# 
  1218  010C                     	;# 
  1219  010D                     	;# 
  1220  010E                     	;# 
  1221  0111                     	;# 
  1222  0112                     	;# 
  1223  0113                     	;# 
  1224  0114                     	;# 
  1225  0115                     	;# 
  1226  0116                     	;# 
  1227  0117                     	;# 
  1228  0118                     	;# 
  1229  0119                     	;# 
  1230  011A                     	;# 
  1231  011B                     	;# 
  1232  011D                     	;# 
  1233  011E                     	;# 
  1234  018C                     	;# 
  1235  018D                     	;# 
  1236  018E                     	;# 
  1237  0191                     	;# 
  1238  0191                     	;# 
  1239  0192                     	;# 
  1240  0193                     	;# 
  1241  0193                     	;# 
  1242  0193                     	;# 
  1243  0194                     	;# 
  1244  0195                     	;# 
  1245  0196                     	;# 
  1246  0199                     	;# 
  1247  019A                     	;# 
  1248  019B                     	;# 
  1249  019B                     	;# 
  1250  019B                     	;# 
  1251  019B                     	;# 
  1252  019C                     	;# 
  1253  019C                     	;# 
  1254  019D                     	;# 
  1255  019E                     	;# 
  1256  019F                     	;# 
  1257  020C                     	;# 
  1258  020D                     	;# 
  1259  020E                     	;# 
  1260  0211                     	;# 
  1261  0211                     	;# 
  1262  0212                     	;# 
  1263  0212                     	;# 
  1264  0213                     	;# 
  1265  0213                     	;# 
  1266  0214                     	;# 
  1267  0214                     	;# 
  1268  0215                     	;# 
  1269  0215                     	;# 
  1270  0215                     	;# 
  1271  0216                     	;# 
  1272  0216                     	;# 
  1273  0217                     	;# 
  1274  0217                     	;# 
  1275  0219                     	;# 
  1276  021A                     	;# 
  1277  021B                     	;# 
  1278  021C                     	;# 
  1279  021D                     	;# 
  1280  021E                     	;# 
  1281  021F                     	;# 
  1282  0291                     	;# 
  1283  0291                     	;# 
  1284  0292                     	;# 
  1285  0293                     	;# 
  1286  0294                     	;# 
  1287  0295                     	;# 
  1288  0295                     	;# 
  1289  0296                     	;# 
  1290  0298                     	;# 
  1291  0298                     	;# 
  1292  0299                     	;# 
  1293  029A                     	;# 
  1294  029B                     	;# 
  1295  029C                     	;# 
  1296  029D                     	;# 
  1297  029E                     	;# 
  1298  0311                     	;# 
  1299  0311                     	;# 
  1300  0312                     	;# 
  1301  0313                     	;# 
  1302  0318                     	;# 
  1303  0318                     	;# 
  1304  0319                     	;# 
  1305  031A                     	;# 
  1306  038C                     	;# 
  1307  038D                     	;# 
  1308  038E                     	;# 
  1309  0391                     	;# 
  1310  0392                     	;# 
  1311  0393                     	;# 
  1312  0394                     	;# 
  1313  0395                     	;# 
  1314  0396                     	;# 
  1315  039A                     	;# 
  1316  039C                     	;# 
  1317  039D                     	;# 
  1318  039E                     	;# 
  1319  039F                     	;# 
  1320  0415                     	;# 
  1321  0416                     	;# 
  1322  0417                     	;# 
  1323  041C                     	;# 
  1324  041D                     	;# 
  1325  041E                     	;# 
  1326  0FE4                     	;# 
  1327  0FE5                     	;# 
  1328  0FE6                     	;# 
  1329  0FE7                     	;# 
  1330  0FE8                     	;# 
  1331  0FE9                     	;# 
  1332  0FEA                     	;# 
  1333  0FEB                     	;# 
  1334  0FED                     	;# 
  1335  0FEE                     	;# 
  1336  0FEF                     	;# 
  1337  0000                     	;# 
  1338  0001                     	;# 
  1339  0002                     	;# 
  1340  0003                     	;# 
  1341  0004                     	;# 
  1342  0005                     	;# 
  1343  0006                     	;# 
  1344  0007                     	;# 
  1345  0008                     	;# 
  1346  0009                     	;# 
  1347  000A                     	;# 
  1348  000B                     	;# 
  1349  000C                     	;# 
  1350  000D                     	;# 
  1351  000E                     	;# 
  1352  0011                     	;# 
  1353  0012                     	;# 
  1354  0013                     	;# 
  1355  0014                     	;# 
  1356  0015                     	;# 
  1357  0016                     	;# 
  1358  0016                     	;# 
  1359  0017                     	;# 
  1360  0018                     	;# 
  1361  0019                     	;# 
  1362  001A                     	;# 
  1363  001B                     	;# 
  1364  001C                     	;# 
  1365  001E                     	;# 
  1366  001F                     	;# 
  1367  008C                     	;# 
  1368  008D                     	;# 
  1369  008E                     	;# 
  1370  0091                     	;# 
  1371  0092                     	;# 
  1372  0093                     	;# 
  1373  0094                     	;# 
  1374  0095                     	;# 
  1375  0096                     	;# 
  1376  0097                     	;# 
  1377  0098                     	;# 
  1378  0099                     	;# 
  1379  009A                     	;# 
  1380  009B                     	;# 
  1381  009B                     	;# 
  1382  009C                     	;# 
  1383  009D                     	;# 
  1384  009E                     	;# 
  1385  010C                     	;# 
  1386  010D                     	;# 
  1387  010E                     	;# 
  1388  0111                     	;# 
  1389  0112                     	;# 
  1390  0113                     	;# 
  1391  0114                     	;# 
  1392  0115                     	;# 
  1393  0116                     	;# 
  1394  0117                     	;# 
  1395  0118                     	;# 
  1396  0119                     	;# 
  1397  011A                     	;# 
  1398  011B                     	;# 
  1399  011D                     	;# 
  1400  011E                     	;# 
  1401  018C                     	;# 
  1402  018D                     	;# 
  1403  018E                     	;# 
  1404  0191                     	;# 
  1405  0191                     	;# 
  1406  0192                     	;# 
  1407  0193                     	;# 
  1408  0193                     	;# 
  1409  0193                     	;# 
  1410  0194                     	;# 
  1411  0195                     	;# 
  1412  0196                     	;# 
  1413  0199                     	;# 
  1414  019A                     	;# 
  1415  019B                     	;# 
  1416  019B                     	;# 
  1417  019B                     	;# 
  1418  019B                     	;# 
  1419  019C                     	;# 
  1420  019C                     	;# 
  1421  019D                     	;# 
  1422  019E                     	;# 
  1423  019F                     	;# 
  1424  020C                     	;# 
  1425  020D                     	;# 
  1426  020E                     	;# 
  1427  0211                     	;# 
  1428  0211                     	;# 
  1429  0212                     	;# 
  1430  0212                     	;# 
  1431  0213                     	;# 
  1432  0213                     	;# 
  1433  0214                     	;# 
  1434  0214                     	;# 
  1435  0215                     	;# 
  1436  0215                     	;# 
  1437  0215                     	;# 
  1438  0216                     	;# 
  1439  0216                     	;# 
  1440  0217                     	;# 
  1441  0217                     	;# 
  1442  0219                     	;# 
  1443  021A                     	;# 
  1444  021B                     	;# 
  1445  021C                     	;# 
  1446  021D                     	;# 
  1447  021E                     	;# 
  1448  021F                     	;# 
  1449  0291                     	;# 
  1450  0291                     	;# 
  1451  0292                     	;# 
  1452  0293                     	;# 
  1453  0294                     	;# 
  1454  0295                     	;# 
  1455  0295                     	;# 
  1456  0296                     	;# 
  1457  0298                     	;# 
  1458  0298                     	;# 
  1459  0299                     	;# 
  1460  029A                     	;# 
  1461  029B                     	;# 
  1462  029C                     	;# 
  1463  029D                     	;# 
  1464  029E                     	;# 
  1465  0311                     	;# 
  1466  0311                     	;# 
  1467  0312                     	;# 
  1468  0313                     	;# 
  1469  0318                     	;# 
  1470  0318                     	;# 
  1471  0319                     	;# 
  1472  031A                     	;# 
  1473  038C                     	;# 
  1474  038D                     	;# 
  1475  038E                     	;# 
  1476  0391                     	;# 
  1477  0392                     	;# 
  1478  0393                     	;# 
  1479  0394                     	;# 
  1480  0395                     	;# 
  1481  0396                     	;# 
  1482  039A                     	;# 
  1483  039C                     	;# 
  1484  039D                     	;# 
  1485  039E                     	;# 
  1486  039F                     	;# 
  1487  0415                     	;# 
  1488  0416                     	;# 
  1489  0417                     	;# 
  1490  041C                     	;# 
  1491  041D                     	;# 
  1492  041E                     	;# 
  1493  0FE4                     	;# 
  1494  0FE5                     	;# 
  1495  0FE6                     	;# 
  1496  0FE7                     	;# 
  1497  0FE8                     	;# 
  1498  0FE9                     	;# 
  1499  0FEA                     	;# 
  1500  0FEB                     	;# 
  1501  0FED                     	;# 
  1502  0FEE                     	;# 
  1503  0FEF                     	;# 
  1504  0000                     	;# 
  1505  0001                     	;# 
  1506  0002                     	;# 
  1507  0003                     	;# 
  1508  0004                     	;# 
  1509  0005                     	;# 
  1510  0006                     	;# 
  1511  0007                     	;# 
  1512  0008                     	;# 
  1513  0009                     	;# 
  1514  000A                     	;# 
  1515  000B                     	;# 
  1516  000C                     	;# 
  1517  000D                     	;# 
  1518  000E                     	;# 
  1519  0011                     	;# 
  1520  0012                     	;# 
  1521  0013                     	;# 
  1522  0014                     	;# 
  1523  0015                     	;# 
  1524  0016                     	;# 
  1525  0016                     	;# 
  1526  0017                     	;# 
  1527  0018                     	;# 
  1528  0019                     	;# 
  1529  001A                     	;# 
  1530  001B                     	;# 
  1531  001C                     	;# 
  1532  001E                     	;# 
  1533  001F                     	;# 
  1534  008C                     	;# 
  1535  008D                     	;# 
  1536  008E                     	;# 
  1537  0091                     	;# 
  1538  0092                     	;# 
  1539  0093                     	;# 
  1540  0094                     	;# 
  1541  0095                     	;# 
  1542  0096                     	;# 
  1543  0097                     	;# 
  1544  0098                     	;# 
  1545  0099                     	;# 
  1546  009A                     	;# 
  1547  009B                     	;# 
  1548  009B                     	;# 
  1549  009C                     	;# 
  1550  009D                     	;# 
  1551  009E                     	;# 
  1552  010C                     	;# 
  1553  010D                     	;# 
  1554  010E                     	;# 
  1555  0111                     	;# 
  1556  0112                     	;# 
  1557  0113                     	;# 
  1558  0114                     	;# 
  1559  0115                     	;# 
  1560  0116                     	;# 
  1561  0117                     	;# 
  1562  0118                     	;# 
  1563  0119                     	;# 
  1564  011A                     	;# 
  1565  011B                     	;# 
  1566  011D                     	;# 
  1567  011E                     	;# 
  1568  018C                     	;# 
  1569  018D                     	;# 
  1570  018E                     	;# 
  1571  0191                     	;# 
  1572  0191                     	;# 
  1573  0192                     	;# 
  1574  0193                     	;# 
  1575  0193                     	;# 
  1576  0193                     	;# 
  1577  0194                     	;# 
  1578  0195                     	;# 
  1579  0196                     	;# 
  1580  0199                     	;# 
  1581  019A                     	;# 
  1582  019B                     	;# 
  1583  019B                     	;# 
  1584  019B                     	;# 
  1585  019B                     	;# 
  1586  019C                     	;# 
  1587  019C                     	;# 
  1588  019D                     	;# 
  1589  019E                     	;# 
  1590  019F                     	;# 
  1591  020C                     	;# 
  1592  020D                     	;# 
  1593  020E                     	;# 
  1594  0211                     	;# 
  1595  0211                     	;# 
  1596  0212                     	;# 
  1597  0212                     	;# 
  1598  0213                     	;# 
  1599  0213                     	;# 
  1600  0214                     	;# 
  1601  0214                     	;# 
  1602  0215                     	;# 
  1603  0215                     	;# 
  1604  0215                     	;# 
  1605  0216                     	;# 
  1606  0216                     	;# 
  1607  0217                     	;# 
  1608  0217                     	;# 
  1609  0219                     	;# 
  1610  021A                     	;# 
  1611  021B                     	;# 
  1612  021C                     	;# 
  1613  021D                     	;# 
  1614  021E                     	;# 
  1615  021F                     	;# 
  1616  0291                     	;# 
  1617  0291                     	;# 
  1618  0292                     	;# 
  1619  0293                     	;# 
  1620  0294                     	;# 
  1621  0295                     	;# 
  1622  0295                     	;# 
  1623  0296                     	;# 
  1624  0298                     	;# 
  1625  0298                     	;# 
  1626  0299                     	;# 
  1627  029A                     	;# 
  1628  029B                     	;# 
  1629  029C                     	;# 
  1630  029D                     	;# 
  1631  029E                     	;# 
  1632  0311                     	;# 
  1633  0311                     	;# 
  1634  0312                     	;# 
  1635  0313                     	;# 
  1636  0318                     	;# 
  1637  0318                     	;# 
  1638  0319                     	;# 
  1639  031A                     	;# 
  1640  038C                     	;# 
  1641  038D                     	;# 
  1642  038E                     	;# 
  1643  0391                     	;# 
  1644  0392                     	;# 
  1645  0393                     	;# 
  1646  0394                     	;# 
  1647  0395                     	;# 
  1648  0396                     	;# 
  1649  039A                     	;# 
  1650  039C                     	;# 
  1651  039D                     	;# 
  1652  039E                     	;# 
  1653  039F                     	;# 
  1654  0415                     	;# 
  1655  0416                     	;# 
  1656  0417                     	;# 
  1657  041C                     	;# 
  1658  041D                     	;# 
  1659  041E                     	;# 
  1660  0FE4                     	;# 
  1661  0FE5                     	;# 
  1662  0FE6                     	;# 
  1663  0FE7                     	;# 
  1664  0FE8                     	;# 
  1665  0FE9                     	;# 
  1666  0FEA                     	;# 
  1667  0FEB                     	;# 
  1668  0FED                     	;# 
  1669  0FEE                     	;# 
  1670  0FEF                     	;# 
  1671  0000                     	;# 
  1672  0001                     	;# 
  1673  0002                     	;# 
  1674  0003                     	;# 
  1675  0004                     	;# 
  1676  0005                     	;# 
  1677  0006                     	;# 
  1678  0007                     	;# 
  1679  0008                     	;# 
  1680  0009                     	;# 
  1681  000A                     	;# 
  1682  000B                     	;# 
  1683  000C                     	;# 
  1684  000D                     	;# 
  1685  000E                     	;# 
  1686  0011                     	;# 
  1687  0012                     	;# 
  1688  0013                     	;# 
  1689  0014                     	;# 
  1690  0015                     	;# 
  1691  0016                     	;# 
  1692  0016                     	;# 
  1693  0017                     	;# 
  1694  0018                     	;# 
  1695  0019                     	;# 
  1696  001A                     	;# 
  1697  001B                     	;# 
  1698  001C                     	;# 
  1699  001E                     	;# 
  1700  001F                     	;# 
  1701  008C                     	;# 
  1702  008D                     	;# 
  1703  008E                     	;# 
  1704  0091                     	;# 
  1705  0092                     	;# 
  1706  0093                     	;# 
  1707  0094                     	;# 
  1708  0095                     	;# 
  1709  0096                     	;# 
  1710  0097                     	;# 
  1711  0098                     	;# 
  1712  0099                     	;# 
  1713  009A                     	;# 
  1714  009B                     	;# 
  1715  009B                     	;# 
  1716  009C                     	;# 
  1717  009D                     	;# 
  1718  009E                     	;# 
  1719  010C                     	;# 
  1720  010D                     	;# 
  1721  010E                     	;# 
  1722  0111                     	;# 
  1723  0112                     	;# 
  1724  0113                     	;# 
  1725  0114                     	;# 
  1726  0115                     	;# 
  1727  0116                     	;# 
  1728  0117                     	;# 
  1729  0118                     	;# 
  1730  0119                     	;# 
  1731  011A                     	;# 
  1732  011B                     	;# 
  1733  011D                     	;# 
  1734  011E                     	;# 
  1735  018C                     	;# 
  1736  018D                     	;# 
  1737  018E                     	;# 
  1738  0191                     	;# 
  1739  0191                     	;# 
  1740  0192                     	;# 
  1741  0193                     	;# 
  1742  0193                     	;# 
  1743  0193                     	;# 
  1744  0194                     	;# 
  1745  0195                     	;# 
  1746  0196                     	;# 
  1747  0199                     	;# 
  1748  019A                     	;# 
  1749  019B                     	;# 
  1750  019B                     	;# 
  1751  019B                     	;# 
  1752  019B                     	;# 
  1753  019C                     	;# 
  1754  019C                     	;# 
  1755  019D                     	;# 
  1756  019E                     	;# 
  1757  019F                     	;# 
  1758  020C                     	;# 
  1759  020D                     	;# 
  1760  020E                     	;# 
  1761  0211                     	;# 
  1762  0211                     	;# 
  1763  0212                     	;# 
  1764  0212                     	;# 
  1765  0213                     	;# 
  1766  0213                     	;# 
  1767  0214                     	;# 
  1768  0214                     	;# 
  1769  0215                     	;# 
  1770  0215                     	;# 
  1771  0215                     	;# 
  1772  0216                     	;# 
  1773  0216                     	;# 
  1774  0217                     	;# 
  1775  0217                     	;# 
  1776  0219                     	;# 
  1777  021A                     	;# 
  1778  021B                     	;# 
  1779  021C                     	;# 
  1780  021D                     	;# 
  1781  021E                     	;# 
  1782  021F                     	;# 
  1783  0291                     	;# 
  1784  0291                     	;# 
  1785  0292                     	;# 
  1786  0293                     	;# 
  1787  0294                     	;# 
  1788  0295                     	;# 
  1789  0295                     	;# 
  1790  0296                     	;# 
  1791  0298                     	;# 
  1792  0298                     	;# 
  1793  0299                     	;# 
  1794  029A                     	;# 
  1795  029B                     	;# 
  1796  029C                     	;# 
  1797  029D                     	;# 
  1798  029E                     	;# 
  1799  0311                     	;# 
  1800  0311                     	;# 
  1801  0312                     	;# 
  1802  0313                     	;# 
  1803  0318                     	;# 
  1804  0318                     	;# 
  1805  0319                     	;# 
  1806  031A                     	;# 
  1807  038C                     	;# 
  1808  038D                     	;# 
  1809  038E                     	;# 
  1810  0391                     	;# 
  1811  0392                     	;# 
  1812  0393                     	;# 
  1813  0394                     	;# 
  1814  0395                     	;# 
  1815  0396                     	;# 
  1816  039A                     	;# 
  1817  039C                     	;# 
  1818  039D                     	;# 
  1819  039E                     	;# 
  1820  039F                     	;# 
  1821  0415                     	;# 
  1822  0416                     	;# 
  1823  0417                     	;# 
  1824  041C                     	;# 
  1825  041D                     	;# 
  1826  041E                     	;# 
  1827  0FE4                     	;# 
  1828  0FE5                     	;# 
  1829  0FE6                     	;# 
  1830  0FE7                     	;# 
  1831  0FE8                     	;# 
  1832  0FE9                     	;# 
  1833  0FEA                     	;# 
  1834  0FEB                     	;# 
  1835  0FED                     	;# 
  1836  0FEE                     	;# 
  1837  0FEF                     	;# 
  1838  0000                     	;# 
  1839  0001                     	;# 
  1840  0002                     	;# 
  1841  0003                     	;# 
  1842  0004                     	;# 
  1843  0005                     	;# 
  1844  0006                     	;# 
  1845  0007                     	;# 
  1846  0008                     	;# 
  1847  0009                     	;# 
  1848  000A                     	;# 
  1849  000B                     	;# 
  1850  000C                     	;# 
  1851  000D                     	;# 
  1852  000E                     	;# 
  1853  0011                     	;# 
  1854  0012                     	;# 
  1855  0013                     	;# 
  1856  0014                     	;# 
  1857  0015                     	;# 
  1858  0016                     	;# 
  1859  0016                     	;# 
  1860  0017                     	;# 
  1861  0018                     	;# 
  1862  0019                     	;# 
  1863  001A                     	;# 
  1864  001B                     	;# 
  1865  001C                     	;# 
  1866  001E                     	;# 
  1867  001F                     	;# 
  1868  008C                     	;# 
  1869  008D                     	;# 
  1870  008E                     	;# 
  1871  0091                     	;# 
  1872  0092                     	;# 
  1873  0093                     	;# 
  1874  0094                     	;# 
  1875  0095                     	;# 
  1876  0096                     	;# 
  1877  0097                     	;# 
  1878  0098                     	;# 
  1879  0099                     	;# 
  1880  009A                     	;# 
  1881  009B                     	;# 
  1882  009B                     	;# 
  1883  009C                     	;# 
  1884  009D                     	;# 
  1885  009E                     	;# 
  1886  010C                     	;# 
  1887  010D                     	;# 
  1888  010E                     	;# 
  1889  0111                     	;# 
  1890  0112                     	;# 
  1891  0113                     	;# 
  1892  0114                     	;# 
  1893  0115                     	;# 
  1894  0116                     	;# 
  1895  0117                     	;# 
  1896  0118                     	;# 
  1897  0119                     	;# 
  1898  011A                     	;# 
  1899  011B                     	;# 
  1900  011D                     	;# 
  1901  011E                     	;# 
  1902  018C                     	;# 
  1903  018D                     	;# 
  1904  018E                     	;# 
  1905  0191                     	;# 
  1906  0191                     	;# 
  1907  0192                     	;# 
  1908  0193                     	;# 
  1909  0193                     	;# 
  1910  0193                     	;# 
  1911  0194                     	;# 
  1912  0195                     	;# 
  1913  0196                     	;# 
  1914  0199                     	;# 
  1915  019A                     	;# 
  1916  019B                     	;# 
  1917  019B                     	;# 
  1918  019B                     	;# 
  1919  019B                     	;# 
  1920  019C                     	;# 
  1921  019C                     	;# 
  1922  019D                     	;# 
  1923  019E                     	;# 
  1924  019F                     	;# 
  1925  020C                     	;# 
  1926  020D                     	;# 
  1927  020E                     	;# 
  1928  0211                     	;# 
  1929  0211                     	;# 
  1930  0212                     	;# 
  1931  0212                     	;# 
  1932  0213                     	;# 
  1933  0213                     	;# 
  1934  0214                     	;# 
  1935  0214                     	;# 
  1936  0215                     	;# 
  1937  0215                     	;# 
  1938  0215                     	;# 
  1939  0216                     	;# 
  1940  0216                     	;# 
  1941  0217                     	;# 
  1942  0217                     	;# 
  1943  0219                     	;# 
  1944  021A                     	;# 
  1945  021B                     	;# 
  1946  021C                     	;# 
  1947  021D                     	;# 
  1948  021E                     	;# 
  1949  021F                     	;# 
  1950  0291                     	;# 
  1951  0291                     	;# 
  1952  0292                     	;# 
  1953  0293                     	;# 
  1954  0294                     	;# 
  1955  0295                     	;# 
  1956  0295                     	;# 
  1957  0296                     	;# 
  1958  0298                     	;# 
  1959  0298                     	;# 
  1960  0299                     	;# 
  1961  029A                     	;# 
  1962  029B                     	;# 
  1963  029C                     	;# 
  1964  029D                     	;# 
  1965  029E                     	;# 
  1966  0311                     	;# 
  1967  0311                     	;# 
  1968  0312                     	;# 
  1969  0313                     	;# 
  1970  0318                     	;# 
  1971  0318                     	;# 
  1972  0319                     	;# 
  1973  031A                     	;# 
  1974  038C                     	;# 
  1975  038D                     	;# 
  1976  038E                     	;# 
  1977  0391                     	;# 
  1978  0392                     	;# 
  1979  0393                     	;# 
  1980  0394                     	;# 
  1981  0395                     	;# 
  1982  0396                     	;# 
  1983  039A                     	;# 
  1984  039C                     	;# 
  1985  039D                     	;# 
  1986  039E                     	;# 
  1987  039F                     	;# 
  1988  0415                     	;# 
  1989  0416                     	;# 
  1990  0417                     	;# 
  1991  041C                     	;# 
  1992  041D                     	;# 
  1993  041E                     	;# 
  1994  0FE4                     	;# 
  1995  0FE5                     	;# 
  1996  0FE6                     	;# 
  1997  0FE7                     	;# 
  1998  0FE8                     	;# 
  1999  0FE9                     	;# 
  2000  0FEA                     	;# 
  2001  0FEB                     	;# 
  2002  0FED                     	;# 
  2003  0FEE                     	;# 
  2004  0FEF                     	;# 
  2005  0000                     	;# 
  2006  0001                     	;# 
  2007  0002                     	;# 
  2008  0003                     	;# 
  2009  0004                     	;# 
  2010  0005                     	;# 
  2011  0006                     	;# 
  2012  0007                     	;# 
  2013  0008                     	;# 
  2014  0009                     	;# 
  2015  000A                     	;# 
  2016  000B                     	;# 
  2017  000C                     	;# 
  2018  000D                     	;# 
  2019  000E                     	;# 
  2020  0011                     	;# 
  2021  0012                     	;# 
  2022  0013                     	;# 
  2023  0014                     	;# 
  2024  0015                     	;# 
  2025  0016                     	;# 
  2026  0016                     	;# 
  2027  0017                     	;# 
  2028  0018                     	;# 
  2029  0019                     	;# 
  2030  001A                     	;# 
  2031  001B                     	;# 
  2032  001C                     	;# 
  2033  001E                     	;# 
  2034  001F                     	;# 
  2035  008C                     	;# 
  2036  008D                     	;# 
  2037  008E                     	;# 
  2038  0091                     	;# 
  2039  0092                     	;# 
  2040  0093                     	;# 
  2041  0094                     	;# 
  2042  0095                     	;# 
  2043  0096                     	;# 
  2044  0097                     	;# 
  2045  0098                     	;# 
  2046  0099                     	;# 
  2047  009A                     	;# 
  2048  009B                     	;# 
  2049  009B                     	;# 
  2050  009C                     	;# 
  2051  009D                     	;# 
  2052  009E                     	;# 
  2053  010C                     	;# 
  2054  010D                     	;# 
  2055  010E                     	;# 
  2056  0111                     	;# 
  2057  0112                     	;# 
  2058  0113                     	;# 
  2059  0114                     	;# 
  2060  0115                     	;# 
  2061  0116                     	;# 
  2062  0117                     	;# 
  2063  0118                     	;# 
  2064  0119                     	;# 
  2065  011A                     	;# 
  2066  011B                     	;# 
  2067  011D                     	;# 
  2068  011E                     	;# 
  2069  018C                     	;# 
  2070  018D                     	;# 
  2071  018E                     	;# 
  2072  0191                     	;# 
  2073  0191                     	;# 
  2074  0192                     	;# 
  2075  0193                     	;# 
  2076  0193                     	;# 
  2077  0193                     	;# 
  2078  0194                     	;# 
  2079  0195                     	;# 
  2080  0196                     	;# 
  2081  0199                     	;# 
  2082  019A                     	;# 
  2083  019B                     	;# 
  2084  019B                     	;# 
  2085  019B                     	;# 
  2086  019B                     	;# 
  2087  019C                     	;# 
  2088  019C                     	;# 
  2089  019D                     	;# 
  2090  019E                     	;# 
  2091  019F                     	;# 
  2092  020C                     	;# 
  2093  020D                     	;# 
  2094  020E                     	;# 
  2095  0211                     	;# 
  2096  0211                     	;# 
  2097  0212                     	;# 
  2098  0212                     	;# 
  2099  0213                     	;# 
  2100  0213                     	;# 
  2101  0214                     	;# 
  2102  0214                     	;# 
  2103  0215                     	;# 
  2104  0215                     	;# 
  2105  0215                     	;# 
  2106  0216                     	;# 
  2107  0216                     	;# 
  2108  0217                     	;# 
  2109  0217                     	;# 
  2110  0219                     	;# 
  2111  021A                     	;# 
  2112  021B                     	;# 
  2113  021C                     	;# 
  2114  021D                     	;# 
  2115  021E                     	;# 
  2116  021F                     	;# 
  2117  0291                     	;# 
  2118  0291                     	;# 
  2119  0292                     	;# 
  2120  0293                     	;# 
  2121  0294                     	;# 
  2122  0295                     	;# 
  2123  0295                     	;# 
  2124  0296                     	;# 
  2125  0298                     	;# 
  2126  0298                     	;# 
  2127  0299                     	;# 
  2128  029A                     	;# 
  2129  029B                     	;# 
  2130  029C                     	;# 
  2131  029D                     	;# 
  2132  029E                     	;# 
  2133  0311                     	;# 
  2134  0311                     	;# 
  2135  0312                     	;# 
  2136  0313                     	;# 
  2137  0318                     	;# 
  2138  0318                     	;# 
  2139  0319                     	;# 
  2140  031A                     	;# 
  2141  038C                     	;# 
  2142  038D                     	;# 
  2143  038E                     	;# 
  2144  0391                     	;# 
  2145  0392                     	;# 
  2146  0393                     	;# 
  2147  0394                     	;# 
  2148  0395                     	;# 
  2149  0396                     	;# 
  2150  039A                     	;# 
  2151  039C                     	;# 
  2152  039D                     	;# 
  2153  039E                     	;# 
  2154  039F                     	;# 
  2155  0415                     	;# 
  2156  0416                     	;# 
  2157  0417                     	;# 
  2158  041C                     	;# 
  2159  041D                     	;# 
  2160  041E                     	;# 
  2161  0FE4                     	;# 
  2162  0FE5                     	;# 
  2163  0FE6                     	;# 
  2164  0FE7                     	;# 
  2165  0FE8                     	;# 
  2166  0FE9                     	;# 
  2167  0FEA                     	;# 
  2168  0FEB                     	;# 
  2169  0FED                     	;# 
  2170  0FEE                     	;# 
  2171  0FEF                     	;# 
  2172  0000                     	;# 
  2173  0001                     	;# 
  2174  0002                     	;# 
  2175  0003                     	;# 
  2176  0004                     	;# 
  2177  0005                     	;# 
  2178  0006                     	;# 
  2179  0007                     	;# 
  2180  0008                     	;# 
  2181  0009                     	;# 
  2182  000A                     	;# 
  2183  000B                     	;# 
  2184  000C                     	;# 
  2185  000D                     	;# 
  2186  000E                     	;# 
  2187  0011                     	;# 
  2188  0012                     	;# 
  2189  0013                     	;# 
  2190  0014                     	;# 
  2191  0015                     	;# 
  2192  0016                     	;# 
  2193  0016                     	;# 
  2194  0017                     	;# 
  2195  0018                     	;# 
  2196  0019                     	;# 
  2197  001A                     	;# 
  2198  001B                     	;# 
  2199  001C                     	;# 
  2200  001E                     	;# 
  2201  001F                     	;# 
  2202  008C                     	;# 
  2203  008D                     	;# 
  2204  008E                     	;# 
  2205  0091                     	;# 
  2206  0092                     	;# 
  2207  0093                     	;# 
  2208  0094                     	;# 
  2209  0095                     	;# 
  2210  0096                     	;# 
  2211  0097                     	;# 
  2212  0098                     	;# 
  2213  0099                     	;# 
  2214  009A                     	;# 
  2215  009B                     	;# 
  2216  009B                     	;# 
  2217  009C                     	;# 
  2218  009D                     	;# 
  2219  009E                     	;# 
  2220  010C                     	;# 
  2221  010D                     	;# 
  2222  010E                     	;# 
  2223  0111                     	;# 
  2224  0112                     	;# 
  2225  0113                     	;# 
  2226  0114                     	;# 
  2227  0115                     	;# 
  2228  0116                     	;# 
  2229  0117                     	;# 
  2230  0118                     	;# 
  2231  0119                     	;# 
  2232  011A                     	;# 
  2233  011B                     	;# 
  2234  011D                     	;# 
  2235  011E                     	;# 
  2236  018C                     	;# 
  2237  018D                     	;# 
  2238  018E                     	;# 
  2239  0191                     	;# 
  2240  0191                     	;# 
  2241  0192                     	;# 
  2242  0193                     	;# 
  2243  0193                     	;# 
  2244  0193                     	;# 
  2245  0194                     	;# 
  2246  0195                     	;# 
  2247  0196                     	;# 
  2248  0199                     	;# 
  2249  019A                     	;# 
  2250  019B                     	;# 
  2251  019B                     	;# 
  2252  019B                     	;# 
  2253  019B                     	;# 
  2254  019C                     	;# 
  2255  019C                     	;# 
  2256  019D                     	;# 
  2257  019E                     	;# 
  2258  019F                     	;# 
  2259  020C                     	;# 
  2260  020D                     	;# 
  2261  020E                     	;# 
  2262  0211                     	;# 
  2263  0211                     	;# 
  2264  0212                     	;# 
  2265  0212                     	;# 
  2266  0213                     	;# 
  2267  0213                     	;# 
  2268  0214                     	;# 
  2269  0214                     	;# 
  2270  0215                     	;# 
  2271  0215                     	;# 
  2272  0215                     	;# 
  2273  0216                     	;# 
  2274  0216                     	;# 
  2275  0217                     	;# 
  2276  0217                     	;# 
  2277  0219                     	;# 
  2278  021A                     	;# 
  2279  021B                     	;# 
  2280  021C                     	;# 
  2281  021D                     	;# 
  2282  021E                     	;# 
  2283  021F                     	;# 
  2284  0291                     	;# 
  2285  0291                     	;# 
  2286  0292                     	;# 
  2287  0293                     	;# 
  2288  0294                     	;# 
  2289  0295                     	;# 
  2290  0295                     	;# 
  2291  0296                     	;# 
  2292  0298                     	;# 
  2293  0298                     	;# 
  2294  0299                     	;# 
  2295  029A                     	;# 
  2296  029B                     	;# 
  2297  029C                     	;# 
  2298  029D                     	;# 
  2299  029E                     	;# 
  2300  0311                     	;# 
  2301  0311                     	;# 
  2302  0312                     	;# 
  2303  0313                     	;# 
  2304  0318                     	;# 
  2305  0318                     	;# 
  2306  0319                     	;# 
  2307  031A                     	;# 
  2308  038C                     	;# 
  2309  038D                     	;# 
  2310  038E                     	;# 
  2311  0391                     	;# 
  2312  0392                     	;# 
  2313  0393                     	;# 
  2314  0394                     	;# 
  2315  0395                     	;# 
  2316  0396                     	;# 
  2317  039A                     	;# 
  2318  039C                     	;# 
  2319  039D                     	;# 
  2320  039E                     	;# 
  2321  039F                     	;# 
  2322  0415                     	;# 
  2323  0416                     	;# 
  2324  0417                     	;# 
  2325  041C                     	;# 
  2326  041D                     	;# 
  2327  041E                     	;# 
  2328  0FE4                     	;# 
  2329  0FE5                     	;# 
  2330  0FE6                     	;# 
  2331  0FE7                     	;# 
  2332  0FE8                     	;# 
  2333  0FE9                     	;# 
  2334  0FEA                     	;# 
  2335  0FEB                     	;# 
  2336  0FED                     	;# 
  2337  0FEE                     	;# 
  2338  0FEF                     	;# 
  2339  0000                     	;# 
  2340  0001                     	;# 
  2341  0002                     	;# 
  2342  0003                     	;# 
  2343  0004                     	;# 
  2344  0005                     	;# 
  2345  0006                     	;# 
  2346  0007                     	;# 
  2347  0008                     	;# 
  2348  0009                     	;# 
  2349  000A                     	;# 
  2350  000B                     	;# 
  2351  000C                     	;# 
  2352  000D                     	;# 
  2353  000E                     	;# 
  2354  0011                     	;# 
  2355  0012                     	;# 
  2356  0013                     	;# 
  2357  0014                     	;# 
  2358  0015                     	;# 
  2359  0016                     	;# 
  2360  0016                     	;# 
  2361  0017                     	;# 
  2362  0018                     	;# 
  2363  0019                     	;# 
  2364  001A                     	;# 
  2365  001B                     	;# 
  2366  001C                     	;# 
  2367  001E                     	;# 
  2368  001F                     	;# 
  2369  008C                     	;# 
  2370  008D                     	;# 
  2371  008E                     	;# 
  2372  0091                     	;# 
  2373  0092                     	;# 
  2374  0093                     	;# 
  2375  0094                     	;# 
  2376  0095                     	;# 
  2377  0096                     	;# 
  2378  0097                     	;# 
  2379  0098                     	;# 
  2380  0099                     	;# 
  2381  009A                     	;# 
  2382  009B                     	;# 
  2383  009B                     	;# 
  2384  009C                     	;# 
  2385  009D                     	;# 
  2386  009E                     	;# 
  2387  010C                     	;# 
  2388  010D                     	;# 
  2389  010E                     	;# 
  2390  0111                     	;# 
  2391  0112                     	;# 
  2392  0113                     	;# 
  2393  0114                     	;# 
  2394  0115                     	;# 
  2395  0116                     	;# 
  2396  0117                     	;# 
  2397  0118                     	;# 
  2398  0119                     	;# 
  2399  011A                     	;# 
  2400  011B                     	;# 
  2401  011D                     	;# 
  2402  011E                     	;# 
  2403  018C                     	;# 
  2404  018D                     	;# 
  2405  018E                     	;# 
  2406  0191                     	;# 
  2407  0191                     	;# 
  2408  0192                     	;# 
  2409  0193                     	;# 
  2410  0193                     	;# 
  2411  0193                     	;# 
  2412  0194                     	;# 
  2413  0195                     	;# 
  2414  0196                     	;# 
  2415  0199                     	;# 
  2416  019A                     	;# 
  2417  019B                     	;# 
  2418  019B                     	;# 
  2419  019B                     	;# 
  2420  019B                     	;# 
  2421  019C                     	;# 
  2422  019C                     	;# 
  2423  019D                     	;# 
  2424  019E                     	;# 
  2425  019F                     	;# 
  2426  020C                     	;# 
  2427  020D                     	;# 
  2428  020E                     	;# 
  2429  0211                     	;# 
  2430  0211                     	;# 
  2431  0212                     	;# 
  2432  0212                     	;# 
  2433  0213                     	;# 
  2434  0213                     	;# 
  2435  0214                     	;# 
  2436  0214                     	;# 
  2437  0215                     	;# 
  2438  0215                     	;# 
  2439  0215                     	;# 
  2440  0216                     	;# 
  2441  0216                     	;# 
  2442  0217                     	;# 
  2443  0217                     	;# 
  2444  0219                     	;# 
  2445  021A                     	;# 
  2446  021B                     	;# 
  2447  021C                     	;# 
  2448  021D                     	;# 
  2449  021E                     	;# 
  2450  021F                     	;# 
  2451  0291                     	;# 
  2452  0291                     	;# 
  2453  0292                     	;# 
  2454  0293                     	;# 
  2455  0294                     	;# 
  2456  0295                     	;# 
  2457  0295                     	;# 
  2458  0296                     	;# 
  2459  0298                     	;# 
  2460  0298                     	;# 
  2461  0299                     	;# 
  2462  029A                     	;# 
  2463  029B                     	;# 
  2464  029C                     	;# 
  2465  029D                     	;# 
  2466  029E                     	;# 
  2467  0311                     	;# 
  2468  0311                     	;# 
  2469  0312                     	;# 
  2470  0313                     	;# 
  2471  0318                     	;# 
  2472  0318                     	;# 
  2473  0319                     	;# 
  2474  031A                     	;# 
  2475  038C                     	;# 
  2476  038D                     	;# 
  2477  038E                     	;# 
  2478  0391                     	;# 
  2479  0392                     	;# 
  2480  0393                     	;# 
  2481  0394                     	;# 
  2482  0395                     	;# 
  2483  0396                     	;# 
  2484  039A                     	;# 
  2485  039C                     	;# 
  2486  039D                     	;# 
  2487  039E                     	;# 
  2488  039F                     	;# 
  2489  0415                     	;# 
  2490  0416                     	;# 
  2491  0417                     	;# 
  2492  041C                     	;# 
  2493  041D                     	;# 
  2494  041E                     	;# 
  2495  0FE4                     	;# 
  2496  0FE5                     	;# 
  2497  0FE6                     	;# 
  2498  0FE7                     	;# 
  2499  0FE8                     	;# 
  2500  0FE9                     	;# 
  2501  0FEA                     	;# 
  2502  0FEB                     	;# 
  2503  0FED                     	;# 
  2504  0FEE                     	;# 
  2505  0FEF                     	;# 
  2506  0000                     	;# 
  2507  0001                     	;# 
  2508  0002                     	;# 
  2509  0003                     	;# 
  2510  0004                     	;# 
  2511  0005                     	;# 
  2512  0006                     	;# 
  2513  0007                     	;# 
  2514  0008                     	;# 
  2515  0009                     	;# 
  2516  000A                     	;# 
  2517  000B                     	;# 
  2518  000C                     	;# 
  2519  000D                     	;# 
  2520  000E                     	;# 
  2521  0011                     	;# 
  2522  0012                     	;# 
  2523  0013                     	;# 
  2524  0014                     	;# 
  2525  0015                     	;# 
  2526  0016                     	;# 
  2527  0016                     	;# 
  2528  0017                     	;# 
  2529  0018                     	;# 
  2530  0019                     	;# 
  2531  001A                     	;# 
  2532  001B                     	;# 
  2533  001C                     	;# 
  2534  001E                     	;# 
  2535  001F                     	;# 
  2536  008C                     	;# 
  2537  008D                     	;# 
  2538  008E                     	;# 
  2539  0091                     	;# 
  2540  0092                     	;# 
  2541  0093                     	;# 
  2542  0094                     	;# 
  2543  0095                     	;# 
  2544  0096                     	;# 
  2545  0097                     	;# 
  2546  0098                     	;# 
  2547  0099                     	;# 
  2548  009A                     	;# 
  2549  009B                     	;# 
  2550  009B                     	;# 
  2551  009C                     	;# 
  2552  009D                     	;# 
  2553  009E                     	;# 
  2554  010C                     	;# 
  2555  010D                     	;# 
  2556  010E                     	;# 
  2557  0111                     	;# 
  2558  0112                     	;# 
  2559  0113                     	;# 
  2560  0114                     	;# 
  2561  0115                     	;# 
  2562  0116                     	;# 
  2563  0117                     	;# 
  2564  0118                     	;# 
  2565  0119                     	;# 
  2566  011A                     	;# 
  2567  011B                     	;# 
  2568  011D                     	;# 
  2569  011E                     	;# 
  2570  018C                     	;# 
  2571  018D                     	;# 
  2572  018E                     	;# 
  2573  0191                     	;# 
  2574  0191                     	;# 
  2575  0192                     	;# 
  2576  0193                     	;# 
  2577  0193                     	;# 
  2578  0193                     	;# 
  2579  0194                     	;# 
  2580  0195                     	;# 
  2581  0196                     	;# 
  2582  0199                     	;# 
  2583  019A                     	;# 
  2584  019B                     	;# 
  2585  019B                     	;# 
  2586  019B                     	;# 
  2587  019B                     	;# 
  2588  019C                     	;# 
  2589  019C                     	;# 
  2590  019D                     	;# 
  2591  019E                     	;# 
  2592  019F                     	;# 
  2593  020C                     	;# 
  2594  020D                     	;# 
  2595  020E                     	;# 
  2596  0211                     	;# 
  2597  0211                     	;# 
  2598  0212                     	;# 
  2599  0212                     	;# 
  2600  0213                     	;# 
  2601  0213                     	;# 
  2602  0214                     	;# 
  2603  0214                     	;# 
  2604  0215                     	;# 
  2605  0215                     	;# 
  2606  0215                     	;# 
  2607  0216                     	;# 
  2608  0216                     	;# 
  2609  0217                     	;# 
  2610  0217                     	;# 
  2611  0219                     	;# 
  2612  021A                     	;# 
  2613  021B                     	;# 
  2614  021C                     	;# 
  2615  021D                     	;# 
  2616  021E                     	;# 
  2617  021F                     	;# 
  2618  0291                     	;# 
  2619  0291                     	;# 
  2620  0292                     	;# 
  2621  0293                     	;# 
  2622  0294                     	;# 
  2623  0295                     	;# 
  2624  0295                     	;# 
  2625  0296                     	;# 
  2626  0298                     	;# 
  2627  0298                     	;# 
  2628  0299                     	;# 
  2629  029A                     	;# 
  2630  029B                     	;# 
  2631  029C                     	;# 
  2632  029D                     	;# 
  2633  029E                     	;# 
  2634  0311                     	;# 
  2635  0311                     	;# 
  2636  0312                     	;# 
  2637  0313                     	;# 
  2638  0318                     	;# 
  2639  0318                     	;# 
  2640  0319                     	;# 
  2641  031A                     	;# 
  2642  038C                     	;# 
  2643  038D                     	;# 
  2644  038E                     	;# 
  2645  0391                     	;# 
  2646  0392                     	;# 
  2647  0393                     	;# 
  2648  0394                     	;# 
  2649  0395                     	;# 
  2650  0396                     	;# 
  2651  039A                     	;# 
  2652  039C                     	;# 
  2653  039D                     	;# 
  2654  039E                     	;# 
  2655  039F                     	;# 
  2656  0415                     	;# 
  2657  0416                     	;# 
  2658  0417                     	;# 
  2659  041C                     	;# 
  2660  041D                     	;# 
  2661  041E                     	;# 
  2662  0FE4                     	;# 
  2663  0FE5                     	;# 
  2664  0FE6                     	;# 
  2665  0FE7                     	;# 
  2666  0FE8                     	;# 
  2667  0FE9                     	;# 
  2668  0FEA                     	;# 
  2669  0FEB                     	;# 
  2670  0FED                     	;# 
  2671  0FEE                     	;# 
  2672  0FEF                     	;# 
  2673  0000                     	;# 
  2674  0001                     	;# 
  2675  0002                     	;# 
  2676  0003                     	;# 
  2677  0004                     	;# 
  2678  0005                     	;# 
  2679  0006                     	;# 
  2680  0007                     	;# 
  2681  0008                     	;# 
  2682  0009                     	;# 
  2683  000A                     	;# 
  2684  000B                     	;# 
  2685  000C                     	;# 
  2686  000D                     	;# 
  2687  000E                     	;# 
  2688  0011                     	;# 
  2689  0012                     	;# 
  2690  0013                     	;# 
  2691  0014                     	;# 
  2692  0015                     	;# 
  2693  0016                     	;# 
  2694  0016                     	;# 
  2695  0017                     	;# 
  2696  0018                     	;# 
  2697  0019                     	;# 
  2698  001A                     	;# 
  2699  001B                     	;# 
  2700  001C                     	;# 
  2701  001E                     	;# 
  2702  001F                     	;# 
  2703  008C                     	;# 
  2704  008D                     	;# 
  2705  008E                     	;# 
  2706  0091                     	;# 
  2707  0092                     	;# 
  2708  0093                     	;# 
  2709  0094                     	;# 
  2710  0095                     	;# 
  2711  0096                     	;# 
  2712  0097                     	;# 
  2713  0098                     	;# 
  2714  0099                     	;# 
  2715  009A                     	;# 
  2716  009B                     	;# 
  2717  009B                     	;# 
  2718  009C                     	;# 
  2719  009D                     	;# 
  2720  009E                     	;# 
  2721  010C                     	;# 
  2722  010D                     	;# 
  2723  010E                     	;# 
  2724  0111                     	;# 
  2725  0112                     	;# 
  2726  0113                     	;# 
  2727  0114                     	;# 
  2728  0115                     	;# 
  2729  0116                     	;# 
  2730  0117                     	;# 
  2731  0118                     	;# 
  2732  0119                     	;# 
  2733  011A                     	;# 
  2734  011B                     	;# 
  2735  011D                     	;# 
  2736  011E                     	;# 
  2737  018C                     	;# 
  2738  018D                     	;# 
  2739  018E                     	;# 
  2740  0191                     	;# 
  2741  0191                     	;# 
  2742  0192                     	;# 
  2743  0193                     	;# 
  2744  0193                     	;# 
  2745  0193                     	;# 
  2746  0194                     	;# 
  2747  0195                     	;# 
  2748  0196                     	;# 
  2749  0199                     	;# 
  2750  019A                     	;# 
  2751  019B                     	;# 
  2752  019B                     	;# 
  2753  019B                     	;# 
  2754  019B                     	;# 
  2755  019C                     	;# 
  2756  019C                     	;# 
  2757  019D                     	;# 
  2758  019E                     	;# 
  2759  019F                     	;# 
  2760  020C                     	;# 
  2761  020D                     	;# 
  2762  020E                     	;# 
  2763  0211                     	;# 
  2764  0211                     	;# 
  2765  0212                     	;# 
  2766  0212                     	;# 
  2767  0213                     	;# 
  2768  0213                     	;# 
  2769  0214                     	;# 
  2770  0214                     	;# 
  2771  0215                     	;# 
  2772  0215                     	;# 
  2773  0215                     	;# 
  2774  0216                     	;# 
  2775  0216                     	;# 
  2776  0217                     	;# 
  2777  0217                     	;# 
  2778  0219                     	;# 
  2779  021A                     	;# 
  2780  021B                     	;# 
  2781  021C                     	;# 
  2782  021D                     	;# 
  2783  021E                     	;# 
  2784  021F                     	;# 
  2785  0291                     	;# 
  2786  0291                     	;# 
  2787  0292                     	;# 
  2788  0293                     	;# 
  2789  0294                     	;# 
  2790  0295                     	;# 
  2791  0295                     	;# 
  2792  0296                     	;# 
  2793  0298                     	;# 
  2794  0298                     	;# 
  2795  0299                     	;# 
  2796  029A                     	;# 
  2797  029B                     	;# 
  2798  029C                     	;# 
  2799  029D                     	;# 
  2800  029E                     	;# 
  2801  0311                     	;# 
  2802  0311                     	;# 
  2803  0312                     	;# 
  2804  0313                     	;# 
  2805  0318                     	;# 
  2806  0318                     	;# 
  2807  0319                     	;# 
  2808  031A                     	;# 
  2809  038C                     	;# 
  2810  038D                     	;# 
  2811  038E                     	;# 
  2812  0391                     	;# 
  2813  0392                     	;# 
  2814  0393                     	;# 
  2815  0394                     	;# 
  2816  0395                     	;# 
  2817  0396                     	;# 
  2818  039A                     	;# 
  2819  039C                     	;# 
  2820  039D                     	;# 
  2821  039E                     	;# 
  2822  039F                     	;# 
  2823  0415                     	;# 
  2824  0416                     	;# 
  2825  0417                     	;# 
  2826  041C                     	;# 
  2827  041D                     	;# 
  2828  041E                     	;# 
  2829  0FE4                     	;# 
  2830  0FE5                     	;# 
  2831  0FE6                     	;# 
  2832  0FE7                     	;# 
  2833  0FE8                     	;# 
  2834  0FE9                     	;# 
  2835  0FEA                     	;# 
  2836  0FEB                     	;# 
  2837  0FED                     	;# 
  2838  0FEE                     	;# 
  2839  0FEF                     	;# 
  2840  0000                     	;# 
  2841  0001                     	;# 
  2842  0002                     	;# 
  2843  0003                     	;# 
  2844  0004                     	;# 
  2845  0005                     	;# 
  2846  0006                     	;# 
  2847  0007                     	;# 
  2848  0008                     	;# 
  2849  0009                     	;# 
  2850  000A                     	;# 
  2851  000B                     	;# 
  2852  000C                     	;# 
  2853  000D                     	;# 
  2854  000E                     	;# 
  2855  0011                     	;# 
  2856  0012                     	;# 
  2857  0013                     	;# 
  2858  0014                     	;# 
  2859  0015                     	;# 
  2860  0016                     	;# 
  2861  0016                     	;# 
  2862  0017                     	;# 
  2863  0018                     	;# 
  2864  0019                     	;# 
  2865  001A                     	;# 
  2866  001B                     	;# 
  2867  001C                     	;# 
  2868  001E                     	;# 
  2869  001F                     	;# 
  2870  008C                     	;# 
  2871  008D                     	;# 
  2872  008E                     	;# 
  2873  0091                     	;# 
  2874  0092                     	;# 
  2875  0093                     	;# 
  2876  0094                     	;# 
  2877  0095                     	;# 
  2878  0096                     	;# 
  2879  0097                     	;# 
  2880  0098                     	;# 
  2881  0099                     	;# 
  2882  009A                     	;# 
  2883  009B                     	;# 
  2884  009B                     	;# 
  2885  009C                     	;# 
  2886  009D                     	;# 
  2887  009E                     	;# 
  2888  010C                     	;# 
  2889  010D                     	;# 
  2890  010E                     	;# 
  2891  0111                     	;# 
  2892  0112                     	;# 
  2893  0113                     	;# 
  2894  0114                     	;# 
  2895  0115                     	;# 
  2896  0116                     	;# 
  2897  0117                     	;# 
  2898  0118                     	;# 
  2899  0119                     	;# 
  2900  011A                     	;# 
  2901  011B                     	;# 
  2902  011D                     	;# 
  2903  011E                     	;# 
  2904  018C                     	;# 
  2905  018D                     	;# 
  2906  018E                     	;# 
  2907  0191                     	;# 
  2908  0191                     	;# 
  2909  0192                     	;# 
  2910  0193                     	;# 
  2911  0193                     	;# 
  2912  0193                     	;# 
  2913  0194                     	;# 
  2914  0195                     	;# 
  2915  0196                     	;# 
  2916  0199                     	;# 
  2917  019A                     	;# 
  2918  019B                     	;# 
  2919  019B                     	;# 
  2920  019B                     	;# 
  2921  019B                     	;# 
  2922  019C                     	;# 
  2923  019C                     	;# 
  2924  019D                     	;# 
  2925  019E                     	;# 
  2926  019F                     	;# 
  2927  020C                     	;# 
  2928  020D                     	;# 
  2929  020E                     	;# 
  2930  0211                     	;# 
  2931  0211                     	;# 
  2932  0212                     	;# 
  2933  0212                     	;# 
  2934  0213                     	;# 
  2935  0213                     	;# 
  2936  0214                     	;# 
  2937  0214                     	;# 
  2938  0215                     	;# 
  2939  0215                     	;# 
  2940  0215                     	;# 
  2941  0216                     	;# 
  2942  0216                     	;# 
  2943  0217                     	;# 
  2944  0217                     	;# 
  2945  0219                     	;# 
  2946  021A                     	;# 
  2947  021B                     	;# 
  2948  021C                     	;# 
  2949  021D                     	;# 
  2950  021E                     	;# 
  2951  021F                     	;# 
  2952  0291                     	;# 
  2953  0291                     	;# 
  2954  0292                     	;# 
  2955  0293                     	;# 
  2956  0294                     	;# 
  2957  0295                     	;# 
  2958  0295                     	;# 
  2959  0296                     	;# 
  2960  0298                     	;# 
  2961  0298                     	;# 
  2962  0299                     	;# 
  2963  029A                     	;# 
  2964  029B                     	;# 
  2965  029C                     	;# 
  2966  029D                     	;# 
  2967  029E                     	;# 
  2968  0311                     	;# 
  2969  0311                     	;# 
  2970  0312                     	;# 
  2971  0313                     	;# 
  2972  0318                     	;# 
  2973  0318                     	;# 
  2974  0319                     	;# 
  2975  031A                     	;# 
  2976  038C                     	;# 
  2977  038D                     	;# 
  2978  038E                     	;# 
  2979  0391                     	;# 
  2980  0392                     	;# 
  2981  0393                     	;# 
  2982  0394                     	;# 
  2983  0395                     	;# 
  2984  0396                     	;# 
  2985  039A                     	;# 
  2986  039C                     	;# 
  2987  039D                     	;# 
  2988  039E                     	;# 
  2989  039F                     	;# 
  2990  0415                     	;# 
  2991  0416                     	;# 
  2992  0417                     	;# 
  2993  041C                     	;# 
  2994  041D                     	;# 
  2995  041E                     	;# 
  2996  0FE4                     	;# 
  2997  0FE5                     	;# 
  2998  0FE6                     	;# 
  2999  0FE7                     	;# 
  3000  0FE8                     	;# 
  3001  0FE9                     	;# 
  3002  0FEA                     	;# 
  3003  0FEB                     	;# 
  3004  0FED                     	;# 
  3005  0FEE                     	;# 
  3006  0FEF                     	;# 
  3007  0000                     	;# 
  3008  0001                     	;# 
  3009  0002                     	;# 
  3010  0003                     	;# 
  3011  0004                     	;# 
  3012  0005                     	;# 
  3013  0006                     	;# 
  3014  0007                     	;# 
  3015  0008                     	;# 
  3016  0009                     	;# 
  3017  000A                     	;# 
  3018  000B                     	;# 
  3019  000C                     	;# 
  3020  000D                     	;# 
  3021  000E                     	;# 
  3022  0011                     	;# 
  3023  0012                     	;# 
  3024  0013                     	;# 
  3025  0014                     	;# 
  3026  0015                     	;# 
  3027  0016                     	;# 
  3028  0016                     	;# 
  3029  0017                     	;# 
  3030  0018                     	;# 
  3031  0019                     	;# 
  3032  001A                     	;# 
  3033  001B                     	;# 
  3034  001C                     	;# 
  3035  001E                     	;# 
  3036  001F                     	;# 
  3037  008C                     	;# 
  3038  008D                     	;# 
  3039  008E                     	;# 
  3040  0091                     	;# 
  3041  0092                     	;# 
  3042  0093                     	;# 
  3043  0094                     	;# 
  3044  0095                     	;# 
  3045  0096                     	;# 
  3046  0097                     	;# 
  3047  0098                     	;# 
  3048  0099                     	;# 
  3049  009A                     	;# 
  3050  009B                     	;# 
  3051  009B                     	;# 
  3052  009C                     	;# 
  3053  009D                     	;# 
  3054  009E                     	;# 
  3055  010C                     	;# 
  3056  010D                     	;# 
  3057  010E                     	;# 
  3058  0111                     	;# 
  3059  0112                     	;# 
  3060  0113                     	;# 
  3061  0114                     	;# 
  3062  0115                     	;# 
  3063  0116                     	;# 
  3064  0117                     	;# 
  3065  0118                     	;# 
  3066  0119                     	;# 
  3067  011A                     	;# 
  3068  011B                     	;# 
  3069  011D                     	;# 
  3070  011E                     	;# 
  3071  018C                     	;# 
  3072  018D                     	;# 
  3073  018E                     	;# 
  3074  0191                     	;# 
  3075  0191                     	;# 
  3076  0192                     	;# 
  3077  0193                     	;# 
  3078  0193                     	;# 
  3079  0193                     	;# 
  3080  0194                     	;# 
  3081  0195                     	;# 
  3082  0196                     	;# 
  3083  0199                     	;# 
  3084  019A                     	;# 
  3085  019B                     	;# 
  3086  019B                     	;# 
  3087  019B                     	;# 
  3088  019B                     	;# 
  3089  019C                     	;# 
  3090  019C                     	;# 
  3091  019D                     	;# 
  3092  019E                     	;# 
  3093  019F                     	;# 
  3094  020C                     	;# 
  3095  020D                     	;# 
  3096  020E                     	;# 
  3097  0211                     	;# 
  3098  0211                     	;# 
  3099  0212                     	;# 
  3100  0212                     	;# 
  3101  0213                     	;# 
  3102  0213                     	;# 
  3103  0214                     	;# 
  3104  0214                     	;# 
  3105  0215                     	;# 
  3106  0215                     	;# 
  3107  0215                     	;# 
  3108  0216                     	;# 
  3109  0216                     	;# 
  3110  0217                     	;# 
  3111  0217                     	;# 
  3112  0219                     	;# 
  3113  021A                     	;# 
  3114  021B                     	;# 
  3115  021C                     	;# 
  3116  021D                     	;# 
  3117  021E                     	;# 
  3118  021F                     	;# 
  3119  0291                     	;# 
  3120  0291                     	;# 
  3121  0292                     	;# 
  3122  0293                     	;# 
  3123  0294                     	;# 
  3124  0295                     	;# 
  3125  0295                     	;# 
  3126  0296                     	;# 
  3127  0298                     	;# 
  3128  0298                     	;# 
  3129  0299                     	;# 
  3130  029A                     	;# 
  3131  029B                     	;# 
  3132  029C                     	;# 
  3133  029D                     	;# 
  3134  029E                     	;# 
  3135  0311                     	;# 
  3136  0311                     	;# 
  3137  0312                     	;# 
  3138  0313                     	;# 
  3139  0318                     	;# 
  3140  0318                     	;# 
  3141  0319                     	;# 
  3142  031A                     	;# 
  3143  038C                     	;# 
  3144  038D                     	;# 
  3145  038E                     	;# 
  3146  0391                     	;# 
  3147  0392                     	;# 
  3148  0393                     	;# 
  3149  0394                     	;# 
  3150  0395                     	;# 
  3151  0396                     	;# 
  3152  039A                     	;# 
  3153  039C                     	;# 
  3154  039D                     	;# 
  3155  039E                     	;# 
  3156  039F                     	;# 
  3157  0415                     	;# 
  3158  0416                     	;# 
  3159  0417                     	;# 
  3160  041C                     	;# 
  3161  041D                     	;# 
  3162  041E                     	;# 
  3163  0FE4                     	;# 
  3164  0FE5                     	;# 
  3165  0FE6                     	;# 
  3166  0FE7                     	;# 
  3167  0FE8                     	;# 
  3168  0FE9                     	;# 
  3169  0FEA                     	;# 
  3170  0FEB                     	;# 
  3171  0FED                     	;# 
  3172  0FEE                     	;# 
  3173  0FEF                     	;# 
  3174  0000                     	;# 
  3175  0001                     	;# 
  3176  0002                     	;# 
  3177  0003                     	;# 
  3178  0004                     	;# 
  3179  0005                     	;# 
  3180  0006                     	;# 
  3181  0007                     	;# 
  3182  0008                     	;# 
  3183  0009                     	;# 
  3184  000A                     	;# 
  3185  000B                     	;# 
  3186  000C                     	;# 
  3187  000D                     	;# 
  3188  000E                     	;# 
  3189  0011                     	;# 
  3190  0012                     	;# 
  3191  0013                     	;# 
  3192  0014                     	;# 
  3193  0015                     	;# 
  3194  0016                     	;# 
  3195  0016                     	;# 
  3196  0017                     	;# 
  3197  0018                     	;# 
  3198  0019                     	;# 
  3199  001A                     	;# 
  3200  001B                     	;# 
  3201  001C                     	;# 
  3202  001E                     	;# 
  3203  001F                     	;# 
  3204  008C                     	;# 
  3205  008D                     	;# 
  3206  008E                     	;# 
  3207  0091                     	;# 
  3208  0092                     	;# 
  3209  0093                     	;# 
  3210  0094                     	;# 
  3211  0095                     	;# 
  3212  0096                     	;# 
  3213  0097                     	;# 
  3214  0098                     	;# 
  3215  0099                     	;# 
  3216  009A                     	;# 
  3217  009B                     	;# 
  3218  009B                     	;# 
  3219  009C                     	;# 
  3220  009D                     	;# 
  3221  009E                     	;# 
  3222  010C                     	;# 
  3223  010D                     	;# 
  3224  010E                     	;# 
  3225  0111                     	;# 
  3226  0112                     	;# 
  3227  0113                     	;# 
  3228  0114                     	;# 
  3229  0115                     	;# 
  3230  0116                     	;# 
  3231  0117                     	;# 
  3232  0118                     	;# 
  3233  0119                     	;# 
  3234  011A                     	;# 
  3235  011B                     	;# 
  3236  011D                     	;# 
  3237  011E                     	;# 
  3238  018C                     	;# 
  3239  018D                     	;# 
  3240  018E                     	;# 
  3241  0191                     	;# 
  3242  0191                     	;# 
  3243  0192                     	;# 
  3244  0193                     	;# 
  3245  0193                     	;# 
  3246  0193                     	;# 
  3247  0194                     	;# 
  3248  0195                     	;# 
  3249  0196                     	;# 
  3250  0199                     	;# 
  3251  019A                     	;# 
  3252  019B                     	;# 
  3253  019B                     	;# 
  3254  019B                     	;# 
  3255  019B                     	;# 
  3256  019C                     	;# 
  3257  019C                     	;# 
  3258  019D                     	;# 
  3259  019E                     	;# 
  3260  019F                     	;# 
  3261  020C                     	;# 
  3262  020D                     	;# 
  3263  020E                     	;# 
  3264  0211                     	;# 
  3265  0211                     	;# 
  3266  0212                     	;# 
  3267  0212                     	;# 
  3268  0213                     	;# 
  3269  0213                     	;# 
  3270  0214                     	;# 
  3271  0214                     	;# 
  3272  0215                     	;# 
  3273  0215                     	;# 
  3274  0215                     	;# 
  3275  0216                     	;# 
  3276  0216                     	;# 
  3277  0217                     	;# 
  3278  0217                     	;# 
  3279  0219                     	;# 
  3280  021A                     	;# 
  3281  021B                     	;# 
  3282  021C                     	;# 
  3283  021D                     	;# 
  3284  021E                     	;# 
  3285  021F                     	;# 
  3286  0291                     	;# 
  3287  0291                     	;# 
  3288  0292                     	;# 
  3289  0293                     	;# 
  3290  0294                     	;# 
  3291  0295                     	;# 
  3292  0295                     	;# 
  3293  0296                     	;# 
  3294  0298                     	;# 
  3295  0298                     	;# 
  3296  0299                     	;# 
  3297  029A                     	;# 
  3298  029B                     	;# 
  3299  029C                     	;# 
  3300  029D                     	;# 
  3301  029E                     	;# 
  3302  0311                     	;# 
  3303  0311                     	;# 
  3304  0312                     	;# 
  3305  0313                     	;# 
  3306  0318                     	;# 
  3307  0318                     	;# 
  3308  0319                     	;# 
  3309  031A                     	;# 
  3310  038C                     	;# 
  3311  038D                     	;# 
  3312  038E                     	;# 
  3313  0391                     	;# 
  3314  0392                     	;# 
  3315  0393                     	;# 
  3316  0394                     	;# 
  3317  0395                     	;# 
  3318  0396                     	;# 
  3319  039A                     	;# 
  3320  039C                     	;# 
  3321  039D                     	;# 
  3322  039E                     	;# 
  3323  039F                     	;# 
  3324  0415                     	;# 
  3325  0416                     	;# 
  3326  0417                     	;# 
  3327  041C                     	;# 
  3328  041D                     	;# 
  3329  041E                     	;# 
  3330  0FE4                     	;# 
  3331  0FE5                     	;# 
  3332  0FE6                     	;# 
  3333  0FE7                     	;# 
  3334  0FE8                     	;# 
  3335  0FE9                     	;# 
  3336  0FEA                     	;# 
  3337  0FEB                     	;# 
  3338  0FED                     	;# 
  3339  0FEE                     	;# 
  3340  0FEF                     	;# 
  3341  0000                     	;# 
  3342  0001                     	;# 
  3343  0002                     	;# 
  3344  0003                     	;# 
  3345  0004                     	;# 
  3346  0005                     	;# 
  3347  0006                     	;# 
  3348  0007                     	;# 
  3349  0008                     	;# 
  3350  0009                     	;# 
  3351  000A                     	;# 
  3352  000B                     	;# 
  3353  000C                     	;# 
  3354  000D                     	;# 
  3355  000E                     	;# 
  3356  0011                     	;# 
  3357  0012                     	;# 
  3358  0013                     	;# 
  3359  0014                     	;# 
  3360  0015                     	;# 
  3361  0016                     	;# 
  3362  0016                     	;# 
  3363  0017                     	;# 
  3364  0018                     	;# 
  3365  0019                     	;# 
  3366  001A                     	;# 
  3367  001B                     	;# 
  3368  001C                     	;# 
  3369  001E                     	;# 
  3370  001F                     	;# 
  3371  008C                     	;# 
  3372  008D                     	;# 
  3373  008E                     	;# 
  3374  0091                     	;# 
  3375  0092                     	;# 
  3376  0093                     	;# 
  3377  0094                     	;# 
  3378  0095                     	;# 
  3379  0096                     	;# 
  3380  0097                     	;# 
  3381  0098                     	;# 
  3382  0099                     	;# 
  3383  009A                     	;# 
  3384  009B                     	;# 
  3385  009B                     	;# 
  3386  009C                     	;# 
  3387  009D                     	;# 
  3388  009E                     	;# 
  3389  010C                     	;# 
  3390  010D                     	;# 
  3391  010E                     	;# 
  3392  0111                     	;# 
  3393  0112                     	;# 
  3394  0113                     	;# 
  3395  0114                     	;# 
  3396  0115                     	;# 
  3397  0116                     	;# 
  3398  0117                     	;# 
  3399  0118                     	;# 
  3400  0119                     	;# 
  3401  011A                     	;# 
  3402  011B                     	;# 
  3403  011D                     	;# 
  3404  011E                     	;# 
  3405  018C                     	;# 
  3406  018D                     	;# 
  3407  018E                     	;# 
  3408  0191                     	;# 
  3409  0191                     	;# 
  3410  0192                     	;# 
  3411  0193                     	;# 
  3412  0193                     	;# 
  3413  0193                     	;# 
  3414  0194                     	;# 
  3415  0195                     	;# 
  3416  0196                     	;# 
  3417  0199                     	;# 
  3418  019A                     	;# 
  3419  019B                     	;# 
  3420  019B                     	;# 
  3421  019B                     	;# 
  3422  019B                     	;# 
  3423  019C                     	;# 
  3424  019C                     	;# 
  3425  019D                     	;# 
  3426  019E                     	;# 
  3427  019F                     	;# 
  3428  020C                     	;# 
  3429  020D                     	;# 
  3430  020E                     	;# 
  3431  0211                     	;# 
  3432  0211                     	;# 
  3433  0212                     	;# 
  3434  0212                     	;# 
  3435  0213                     	;# 
  3436  0213                     	;# 
  3437  0214                     	;# 
  3438  0214                     	;# 
  3439  0215                     	;# 
  3440  0215                     	;# 
  3441  0215                     	;# 
  3442  0216                     	;# 
  3443  0216                     	;# 
  3444  0217                     	;# 
  3445  0217                     	;# 
  3446  0219                     	;# 
  3447  021A                     	;# 
  3448  021B                     	;# 
  3449  021C                     	;# 
  3450  021D                     	;# 
  3451  021E                     	;# 
  3452  021F                     	;# 
  3453  0291                     	;# 
  3454  0291                     	;# 
  3455  0292                     	;# 
  3456  0293                     	;# 
  3457  0294                     	;# 
  3458  0295                     	;# 
  3459  0295                     	;# 
  3460  0296                     	;# 
  3461  0298                     	;# 
  3462  0298                     	;# 
  3463  0299                     	;# 
  3464  029A                     	;# 
  3465  029B                     	;# 
  3466  029C                     	;# 
  3467  029D                     	;# 
  3468  029E                     	;# 
  3469  0311                     	;# 
  3470  0311                     	;# 
  3471  0312                     	;# 
  3472  0313                     	;# 
  3473  0318                     	;# 
  3474  0318                     	;# 
  3475  0319                     	;# 
  3476  031A                     	;# 
  3477  038C                     	;# 
  3478  038D                     	;# 
  3479  038E                     	;# 
  3480  0391                     	;# 
  3481  0392                     	;# 
  3482  0393                     	;# 
  3483  0394                     	;# 
  3484  0395                     	;# 
  3485  0396                     	;# 
  3486  039A                     	;# 
  3487  039C                     	;# 
  3488  039D                     	;# 
  3489  039E                     	;# 
  3490  039F                     	;# 
  3491  0415                     	;# 
  3492  0416                     	;# 
  3493  0417                     	;# 
  3494  041C                     	;# 
  3495  041D                     	;# 
  3496  041E                     	;# 
  3497  0FE4                     	;# 
  3498  0FE5                     	;# 
  3499  0FE6                     	;# 
  3500  0FE7                     	;# 
  3501  0FE8                     	;# 
  3502  0FE9                     	;# 
  3503  0FEA                     	;# 
  3504  0FEB                     	;# 
  3505  0FED                     	;# 
  3506  0FEE                     	;# 
  3507  0FEF                     	;# 
  3508  0000                     	;# 
  3509  0001                     	;# 
  3510  0002                     	;# 
  3511  0003                     	;# 
  3512  0004                     	;# 
  3513  0005                     	;# 
  3514  0006                     	;# 
  3515  0007                     	;# 
  3516  0008                     	;# 
  3517  0009                     	;# 
  3518  000A                     	;# 
  3519  000B                     	;# 
  3520  000C                     	;# 
  3521  000D                     	;# 
  3522  000E                     	;# 
  3523  0011                     	;# 
  3524  0012                     	;# 
  3525  0013                     	;# 
  3526  0014                     	;# 
  3527  0015                     	;# 
  3528  0016                     	;# 
  3529  0016                     	;# 
  3530  0017                     	;# 
  3531  0018                     	;# 
  3532  0019                     	;# 
  3533  001A                     	;# 
  3534  001B                     	;# 
  3535  001C                     	;# 
  3536  001E                     	;# 
  3537  001F                     	;# 
  3538  008C                     	;# 
  3539  008D                     	;# 
  3540  008E                     	;# 
  3541  0091                     	;# 
  3542  0092                     	;# 
  3543  0093                     	;# 
  3544  0094                     	;# 
  3545  0095                     	;# 
  3546  0096                     	;# 
  3547  0097                     	;# 
  3548  0098                     	;# 
  3549  0099                     	;# 
  3550  009A                     	;# 
  3551  009B                     	;# 
  3552  009B                     	;# 
  3553  009C                     	;# 
  3554  009D                     	;# 
  3555  009E                     	;# 
  3556  010C                     	;# 
  3557  010D                     	;# 
  3558  010E                     	;# 
  3559  0111                     	;# 
  3560  0112                     	;# 
  3561  0113                     	;# 
  3562  0114                     	;# 
  3563  0115                     	;# 
  3564  0116                     	;# 
  3565  0117                     	;# 
  3566  0118                     	;# 
  3567  0119                     	;# 
  3568  011A                     	;# 
  3569  011B                     	;# 
  3570  011D                     	;# 
  3571  011E                     	;# 
  3572  018C                     	;# 
  3573  018D                     	;# 
  3574  018E                     	;# 
  3575  0191                     	;# 
  3576  0191                     	;# 
  3577  0192                     	;# 
  3578  0193                     	;# 
  3579  0193                     	;# 
  3580  0193                     	;# 
  3581  0194                     	;# 
  3582  0195                     	;# 
  3583  0196                     	;# 
  3584  0199                     	;# 
  3585  019A                     	;# 
  3586  019B                     	;# 
  3587  019B                     	;# 
  3588  019B                     	;# 
  3589  019B                     	;# 
  3590  019C                     	;# 
  3591  019C                     	;# 
  3592  019D                     	;# 
  3593  019E                     	;# 
  3594  019F                     	;# 
  3595  020C                     	;# 
  3596  020D                     	;# 
  3597  020E                     	;# 
  3598  0211                     	;# 
  3599  0211                     	;# 
  3600  0212                     	;# 
  3601  0212                     	;# 
  3602  0213                     	;# 
  3603  0213                     	;# 
  3604  0214                     	;# 
  3605  0214                     	;# 
  3606  0215                     	;# 
  3607  0215                     	;# 
  3608  0215                     	;# 
  3609  0216                     	;# 
  3610  0216                     	;# 
  3611  0217                     	;# 
  3612  0217                     	;# 
  3613  0219                     	;# 
  3614  021A                     	;# 
  3615  021B                     	;# 
  3616  021C                     	;# 
  3617  021D                     	;# 
  3618  021E                     	;# 
  3619  021F                     	;# 
  3620  0291                     	;# 
  3621  0291                     	;# 
  3622  0292                     	;# 
  3623  0293                     	;# 
  3624  0294                     	;# 
  3625  0295                     	;# 
  3626  0295                     	;# 
  3627  0296                     	;# 
  3628  0298                     	;# 
  3629  0298                     	;# 
  3630  0299                     	;# 
  3631  029A                     	;# 
  3632  029B                     	;# 
  3633  029C                     	;# 
  3634  029D                     	;# 
  3635  029E                     	;# 
  3636  0311                     	;# 
  3637  0311                     	;# 
  3638  0312                     	;# 
  3639  0313                     	;# 
  3640  0318                     	;# 
  3641  0318                     	;# 
  3642  0319                     	;# 
  3643  031A                     	;# 
  3644  038C                     	;# 
  3645  038D                     	;# 
  3646  038E                     	;# 
  3647  0391                     	;# 
  3648  0392                     	;# 
  3649  0393                     	;# 
  3650  0394                     	;# 
  3651  0395                     	;# 
  3652  0396                     	;# 
  3653  039A                     	;# 
  3654  039C                     	;# 
  3655  039D                     	;# 
  3656  039E                     	;# 
  3657  039F                     	;# 
  3658  0415                     	;# 
  3659  0416                     	;# 
  3660  0417                     	;# 
  3661  041C                     	;# 
  3662  041D                     	;# 
  3663  041E                     	;# 
  3664  0FE4                     	;# 
  3665  0FE5                     	;# 
  3666  0FE6                     	;# 
  3667  0FE7                     	;# 
  3668  0FE8                     	;# 
  3669  0FE9                     	;# 
  3670  0FEA                     	;# 
  3671  0FEB                     	;# 
  3672  0FED                     	;# 
  3673  0FEE                     	;# 
  3674  0FEF                     	;# 
  3675  0000                     	;# 
  3676  0001                     	;# 
  3677  0002                     	;# 
  3678  0003                     	;# 
  3679  0004                     	;# 
  3680  0005                     	;# 
  3681  0006                     	;# 
  3682  0007                     	;# 
  3683  0008                     	;# 
  3684  0009                     	;# 
  3685  000A                     	;# 
  3686  000B                     	;# 
  3687  000C                     	;# 
  3688  000D                     	;# 
  3689  000E                     	;# 
  3690  0011                     	;# 
  3691  0012                     	;# 
  3692  0013                     	;# 
  3693  0014                     	;# 
  3694  0015                     	;# 
  3695  0016                     	;# 
  3696  0016                     	;# 
  3697  0017                     	;# 
  3698  0018                     	;# 
  3699  0019                     	;# 
  3700  001A                     	;# 
  3701  001B                     	;# 
  3702  001C                     	;# 
  3703  001E                     	;# 
  3704  001F                     	;# 
  3705  008C                     	;# 
  3706  008D                     	;# 
  3707  008E                     	;# 
  3708  0091                     	;# 
  3709  0092                     	;# 
  3710  0093                     	;# 
  3711  0094                     	;# 
  3712  0095                     	;# 
  3713  0096                     	;# 
  3714  0097                     	;# 
  3715  0098                     	;# 
  3716  0099                     	;# 
  3717  009A                     	;# 
  3718  009B                     	;# 
  3719  009B                     	;# 
  3720  009C                     	;# 
  3721  009D                     	;# 
  3722  009E                     	;# 
  3723  010C                     	;# 
  3724  010D                     	;# 
  3725  010E                     	;# 
  3726  0111                     	;# 
  3727  0112                     	;# 
  3728  0113                     	;# 
  3729  0114                     	;# 
  3730  0115                     	;# 
  3731  0116                     	;# 
  3732  0117                     	;# 
  3733  0118                     	;# 
  3734  0119                     	;# 
  3735  011A                     	;# 
  3736  011B                     	;# 
  3737  011D                     	;# 
  3738  011E                     	;# 
  3739  018C                     	;# 
  3740  018D                     	;# 
  3741  018E                     	;# 
  3742  0191                     	;# 
  3743  0191                     	;# 
  3744  0192                     	;# 
  3745  0193                     	;# 
  3746  0193                     	;# 
  3747  0193                     	;# 
  3748  0194                     	;# 
  3749  0195                     	;# 
  3750  0196                     	;# 
  3751  0199                     	;# 
  3752  019A                     	;# 
  3753  019B                     	;# 
  3754  019B                     	;# 
  3755  019B                     	;# 
  3756  019B                     	;# 
  3757  019C                     	;# 
  3758  019C                     	;# 
  3759  019D                     	;# 
  3760  019E                     	;# 
  3761  019F                     	;# 
  3762  020C                     	;# 
  3763  020D                     	;# 
  3764  020E                     	;# 
  3765  0211                     	;# 
  3766  0211                     	;# 
  3767  0212                     	;# 
  3768  0212                     	;# 
  3769  0213                     	;# 
  3770  0213                     	;# 
  3771  0214                     	;# 
  3772  0214                     	;# 
  3773  0215                     	;# 
  3774  0215                     	;# 
  3775  0215                     	;# 
  3776  0216                     	;# 
  3777  0216                     	;# 
  3778  0217                     	;# 
  3779  0217                     	;# 
  3780  0219                     	;# 
  3781  021A                     	;# 
  3782  021B                     	;# 
  3783  021C                     	;# 
  3784  021D                     	;# 
  3785  021E                     	;# 
  3786  021F                     	;# 
  3787  0291                     	;# 
  3788  0291                     	;# 
  3789  0292                     	;# 
  3790  0293                     	;# 
  3791  0294                     	;# 
  3792  0295                     	;# 
  3793  0295                     	;# 
  3794  0296                     	;# 
  3795  0298                     	;# 
  3796  0298                     	;# 
  3797  0299                     	;# 
  3798  029A                     	;# 
  3799  029B                     	;# 
  3800  029C                     	;# 
  3801  029D                     	;# 
  3802  029E                     	;# 
  3803  0311                     	;# 
  3804  0311                     	;# 
  3805  0312                     	;# 
  3806  0313                     	;# 
  3807  0318                     	;# 
  3808  0318                     	;# 
  3809  0319                     	;# 
  3810  031A                     	;# 
  3811  038C                     	;# 
  3812  038D                     	;# 
  3813  038E                     	;# 
  3814  0391                     	;# 
  3815  0392                     	;# 
  3816  0393                     	;# 
  3817  0394                     	;# 
  3818  0395                     	;# 
  3819  0396                     	;# 
  3820  039A                     	;# 
  3821  039C                     	;# 
  3822  039D                     	;# 
  3823  039E                     	;# 
  3824  039F                     	;# 
  3825  0415                     	;# 
  3826  0416                     	;# 
  3827  0417                     	;# 
  3828  041C                     	;# 
  3829  041D                     	;# 
  3830  041E                     	;# 
  3831  0FE4                     	;# 
  3832  0FE5                     	;# 
  3833  0FE6                     	;# 
  3834  0FE7                     	;# 
  3835  0FE8                     	;# 
  3836  0FE9                     	;# 
  3837  0FEA                     	;# 
  3838  0FEB                     	;# 
  3839  0FED                     	;# 
  3840  0FEE                     	;# 
  3841  0FEF                     	;# 
  3842  0000                     	;# 
  3843  0001                     	;# 
  3844  0002                     	;# 
  3845  0003                     	;# 
  3846  0004                     	;# 
  3847  0005                     	;# 
  3848  0006                     	;# 
  3849  0007                     	;# 
  3850  0008                     	;# 
  3851  0009                     	;# 
  3852  000A                     	;# 
  3853  000B                     	;# 
  3854  000C                     	;# 
  3855  000D                     	;# 
  3856  000E                     	;# 
  3857  0011                     	;# 
  3858  0012                     	;# 
  3859  0013                     	;# 
  3860  0014                     	;# 
  3861  0015                     	;# 
  3862  0016                     	;# 
  3863  0016                     	;# 
  3864  0017                     	;# 
  3865  0018                     	;# 
  3866  0019                     	;# 
  3867  001A                     	;# 
  3868  001B                     	;# 
  3869  001C                     	;# 
  3870  001E                     	;# 
  3871  001F                     	;# 
  3872  008C                     	;# 
  3873  008D                     	;# 
  3874  008E                     	;# 
  3875  0091                     	;# 
  3876  0092                     	;# 
  3877  0093                     	;# 
  3878  0094                     	;# 
  3879  0095                     	;# 
  3880  0096                     	;# 
  3881  0097                     	;# 
  3882  0098                     	;# 
  3883  0099                     	;# 
  3884  009A                     	;# 
  3885  009B                     	;# 
  3886  009B                     	;# 
  3887  009C                     	;# 
  3888  009D                     	;# 
  3889  009E                     	;# 
  3890  010C                     	;# 
  3891  010D                     	;# 
  3892  010E                     	;# 
  3893  0111                     	;# 
  3894  0112                     	;# 
  3895  0113                     	;# 
  3896  0114                     	;# 
  3897  0115                     	;# 
  3898  0116                     	;# 
  3899  0117                     	;# 
  3900  0118                     	;# 
  3901  0119                     	;# 
  3902  011A                     	;# 
  3903  011B                     	;# 
  3904  011D                     	;# 
  3905  011E                     	;# 
  3906  018C                     	;# 
  3907  018D                     	;# 
  3908  018E                     	;# 
  3909  0191                     	;# 
  3910  0191                     	;# 
  3911  0192                     	;# 
  3912  0193                     	;# 
  3913  0193                     	;# 
  3914  0193                     	;# 
  3915  0194                     	;# 
  3916  0195                     	;# 
  3917  0196                     	;# 
  3918  0199                     	;# 
  3919  019A                     	;# 
  3920  019B                     	;# 
  3921  019B                     	;# 
  3922  019B                     	;# 
  3923  019B                     	;# 
  3924  019C                     	;# 
  3925  019C                     	;# 
  3926  019D                     	;# 
  3927  019E                     	;# 
  3928  019F                     	;# 
  3929  020C                     	;# 
  3930  020D                     	;# 
  3931  020E                     	;# 
  3932  0211                     	;# 
  3933  0211                     	;# 
  3934  0212                     	;# 
  3935  0212                     	;# 
  3936  0213                     	;# 
  3937  0213                     	;# 
  3938  0214                     	;# 
  3939  0214                     	;# 
  3940  0215                     	;# 
  3941  0215                     	;# 
  3942  0215                     	;# 
  3943  0216                     	;# 
  3944  0216                     	;# 
  3945  0217                     	;# 
  3946  0217                     	;# 
  3947  0219                     	;# 
  3948  021A                     	;# 
  3949  021B                     	;# 
  3950  021C                     	;# 
  3951  021D                     	;# 
  3952  021E                     	;# 
  3953  021F                     	;# 
  3954  0291                     	;# 
  3955  0291                     	;# 
  3956  0292                     	;# 
  3957  0293                     	;# 
  3958  0294                     	;# 
  3959  0295                     	;# 
  3960  0295                     	;# 
  3961  0296                     	;# 
  3962  0298                     	;# 
  3963  0298                     	;# 
  3964  0299                     	;# 
  3965  029A                     	;# 
  3966  029B                     	;# 
  3967  029C                     	;# 
  3968  029D                     	;# 
  3969  029E                     	;# 
  3970  0311                     	;# 
  3971  0311                     	;# 
  3972  0312                     	;# 
  3973  0313                     	;# 
  3974  0318                     	;# 
  3975  0318                     	;# 
  3976  0319                     	;# 
  3977  031A                     	;# 
  3978  038C                     	;# 
  3979  038D                     	;# 
  3980  038E                     	;# 
  3981  0391                     	;# 
  3982  0392                     	;# 
  3983  0393                     	;# 
  3984  0394                     	;# 
  3985  0395                     	;# 
  3986  0396                     	;# 
  3987  039A                     	;# 
  3988  039C                     	;# 
  3989  039D                     	;# 
  3990  039E                     	;# 
  3991  039F                     	;# 
  3992  0415                     	;# 
  3993  0416                     	;# 
  3994  0417                     	;# 
  3995  041C                     	;# 
  3996  041D                     	;# 
  3997  041E                     	;# 
  3998  0FE4                     	;# 
  3999  0FE5                     	;# 
  4000  0FE6                     	;# 
  4001  0FE7                     	;# 
  4002  0FE8                     	;# 
  4003  0FE9                     	;# 
  4004  0FEA                     	;# 
  4005  0FEB                     	;# 
  4006  0FED                     	;# 
  4007  0FEE                     	;# 
  4008  0FEF                     	;# 
  4009                           
  4010                           	psect	idataBANK1
  4011  07FF                     __pidataBANK1:	
  4012                           
  4013                           ;initializer for _addressSize
  4014  07FF  3405               	retlw	5
  4015                           
  4016                           	psect	idataBANK2
  4017  1DA1                     __pidataBANK2:	
  4018                           
  4019                           ;initializer for _sensorUpdatePeriod
  4020  1DA1  34C0               	retlw	192
  4021  1DA2  34D4               	retlw	212
  4022  1DA3  3401               	retlw	1
  4023  1DA4  3400               	retlw	0
  4024                           
  4025                           ;initializer for _sensorHealth
  4026  1DA5  3401               	retlw	1
  4027  1DA6  3401               	retlw	1
  4028                           
  4029                           	psect	stringtext1
  4030  1818                     __pstringtext1:	
  4031  1818                     atan@coeff_a:	
  4032  1818  343C               	retlw	60
  4033  1819  3404               	retlw	4
  4034  181A  3442               	retlw	66
  4035  181B  349F               	retlw	159
  4036  181C  346A               	retlw	106
  4037  181D  3442               	retlw	66
  4038  181E  3490               	retlw	144
  4039  181F  3401               	retlw	1
  4040  1820  3442               	retlw	66
  4041  1821  344D               	retlw	77
  4042  1822  34BB               	retlw	187
  4043  1823  3440               	retlw	64
  4044  1824  34EC               	retlw	236
  4045  1825  3447               	retlw	71
  4046  1826  343E               	retlw	62
  4047  1827  348E               	retlw	142
  4048  1828  341F               	retlw	31
  4049  1829  34BB               	retlw	187
  4050  182A                     __end_ofatan@coeff_a:	
  4051                           
  4052                           	psect	stringtext2
  4053  182A                     __pstringtext2:	
  4054  182A                     atan@coeff_b:	
  4055  182A  343C               	retlw	60
  4056  182B  3404               	retlw	4
  4057  182C  3442               	retlw	66
  4058  182D  345A               	retlw	90
  4059  182E  348B               	retlw	139
  4060  182F  3442               	retlw	66
  4061  1830  3404               	retlw	4
  4062  1831  3444               	retlw	68
  4063  1832  3442               	retlw	66
  4064  1833  349C               	retlw	156
  4065  1834  344F               	retlw	79
  4066  1835  3441               	retlw	65
  4067  1836  3400               	retlw	0
  4068  1837  3480               	retlw	128
  4069  1838  343F               	retlw	63
  4070  1839                     __end_ofatan@coeff_b:	
  4071                           
  4072                           	psect	stringtext3
  4073  1839                     __pstringtext3:	
  4074  1839                     Wireless_init@TADDR:	
  4075  1839  3431               	retlw	49
  4076  183A  3430               	retlw	48
  4077  183B  3430               	retlw	48
  4078  183C  3430               	retlw	48
  4079  183D  3431               	retlw	49
  4080  183E                     __end_ofWireless_init@TADDR:	
  4081                           
  4082                           	psect	nvCOMMON
  4083  007C                     __pnvCOMMON:	
  4084  007C                     _timer1ReloadVal:	
  4085  007C                     	ds	2
  4086                           
  4087                           	psect	nvBANK2
  4088  0168                     __pnvBANK2:	
  4089  0168                     _TMR1_InterruptHandler:	
  4090  0168                     	ds	2
  4091  016A                     _IOCAF2_InterruptHandler:	
  4092  016A                     	ds	2
  4093  000E                     _PORTCbits	set	14
  4094  0019                     _T1GCONbits	set	25
  4095  0018                     _T1CONbits	set	24
  4096  0018                     _T1CON	set	24
  4097  0016                     _TMR1L	set	22
  4098  0017                     _TMR1H	set	23
  4099  0019                     _T1GCON	set	25
  4100  0014                     _PIR4bits	set	20
  4101  001C                     _T2CONbits	set	28
  4102  001C                     _T2CON	set	28
  4103  0011                     _PIR1bits	set	17
  4104  001A                     _TMR2	set	26
  4105  001B                     _PR2	set	27
  4106  000B                     _INTCONbits	set	11
  4107  009D                     _ADCON0bits	set	157
  4108  009C                     _ADRESH	set	156
  4109  009B                     _ADRESL	set	155
  4110  009E                     _ADCON1	set	158
  4111  009D                     _ADCON0	set	157
  4112  0091                     _PIE1bits	set	145
  4113  0094                     _PIE4bits	set	148
  4114  0095                     _OPTION_REGbits	set	149
  4115  008E                     _TRISC	set	142
  4116  008D                     _TRISB	set	141
  4117  008C                     _TRISA	set	140
  4118  0097                     _WDTCON	set	151
  4119  0098                     _OSCTUNE	set	152
  4120  0099                     _OSCCON	set	153
  4121  010E                     _LATCbits	set	270
  4122  0117                     _FVRCONbits	set	279
  4123  0117                     _FVRCON	set	279
  4124  011D                     _APFCON0	set	285
  4125  011E                     _APFCON1	set	286
  4126  010E                     _LATC	set	270
  4127  010D                     _LATB	set	269
  4128  010C                     _LATA	set	268
  4129  0116                     _BORCON	set	278
  4130  0196                     _EECON2	set	406
  4131  0193                     _EEDATL	set	403
  4132  0194                     _EEDATH	set	404
  4133  0195                     _EECON1bits	set	405
  4134  0192                     _EEADRH	set	402
  4135  0191                     _EEADRL	set	401
  4136  018C                     _ANSELA	set	396
  4137  018D                     _ANSELB	set	397
  4138  018E                     _ANSELC	set	398
  4139  020E                     _WPUCbits	set	526
  4140  0214                     _SSP1STATbits	set	532
  4141  0211                     _SSP1BUF	set	529
  4142  0215                     _SSP1CON1bits	set	533
  4143  0212                     _SSP1ADD	set	530
  4144  0215                     _SSP1CON1	set	533
  4145  0214                     _SSP1STAT	set	532
  4146  0219                     _SSP2BUF	set	537
  4147  021E                     _SSP2CON2bits	set	542
  4148  021D                     _SSP2CON1bits	set	541
  4149  021A                     _SSP2ADD	set	538
  4150  021F                     _SSP2CON3	set	543
  4151  021D                     _SSP2CON1	set	541
  4152  021C                     _SSP2STAT	set	540
  4153  020E                     _WPUC	set	526
  4154  020C                     _WPUA	set	524
  4155  020D                     _WPUB	set	525
  4156  0391                     _IOCAPbits	set	913
  4157  0392                     _IOCANbits	set	914
  4158  0393                     _IOCAFbits	set	915
  4159                           
  4160                           ; #config settings
  4161  0000                     
  4162                           	psect	cinit
  4163  0039                     start_initialization:	
  4164  0039                     __initialization:	
  4165                           
  4166                           ; Initialize objects allocated to BANK1
  4167  0039  0021               	movlb	1	; select bank1
  4168  003A  3187  27FF  3180   	fcall	__pidataBANK1	;fetch initializer
  4169  003D  00E8               	movwf	__pdataBANK1& (0+127)
  4170                           
  4171                           ; Initialize objects allocated to BANK2
  4172  003E  30A1               	movlw	low __pidataBANK2
  4173  003F  0084               	movwf	4
  4174  0040  309D               	movlw	(high __pidataBANK2)| (0+128)
  4175  0041  0085               	movwf	5
  4176  0042  0022               	movlb	2	; select bank2
  4177  0043  0012               	moviw fsr0++
  4178  0044  00E2               	movwf	__pdataBANK2& (0+127)
  4179  0045  0012               	moviw fsr0++
  4180  0046  00E3               	movwf	(__pdataBANK2+1)& (0+127)
  4181  0047  0012               	moviw fsr0++
  4182  0048  00E4               	movwf	(__pdataBANK2+2)& (0+127)
  4183  0049  0012               	moviw fsr0++
  4184  004A  00E5               	movwf	(__pdataBANK2+3)& (0+127)
  4185  004B  0012               	moviw fsr0++
  4186  004C  00E6               	movwf	(__pdataBANK2+4)& (0+127)
  4187  004D  0012               	moviw fsr0++
  4188  004E  00E7               	movwf	(__pdataBANK2+5)& (0+127)
  4189                           
  4190                           ; Clear objects allocated to COMMON
  4191  004F  01F7               	clrf	__pbssCOMMON& (0+127)
  4192  0050  01F8               	clrf	(__pbssCOMMON+1)& (0+127)
  4193  0051  01F9               	clrf	(__pbssCOMMON+2)& (0+127)
  4194  0052  01FA               	clrf	(__pbssCOMMON+3)& (0+127)
  4195  0053  01FB               	clrf	(__pbssCOMMON+4)& (0+127)
  4196                           
  4197                           ; Clear objects allocated to BANK1
  4198  0054  30DA               	movlw	low __pbssBANK1
  4199  0055  0084               	movwf	4
  4200  0056  3000               	movlw	high __pbssBANK1
  4201  0057  0085               	movwf	5
  4202  0058  300E               	movlw	14
  4203  0059  319D  259B  3180   	fcall	clear_ram0
  4204                           
  4205                           ; Clear objects allocated to BANK2
  4206  005C  3020               	movlw	low __pbssBANK2
  4207  005D  0084               	movwf	4
  4208  005E  3001               	movlw	high __pbssBANK2
  4209  005F  0085               	movwf	5
  4210  0060  3042               	movlw	66
  4211  0061  319D  259B  3180   	fcall	clear_ram0
  4212                           
  4213                           ; Clear objects allocated to BANK3
  4214  0064  30A0               	movlw	low __pbssBANK3
  4215  0065  0084               	movwf	4
  4216  0066  3001               	movlw	high __pbssBANK3
  4217  0067  0085               	movwf	5
  4218  0068  3037               	movlw	55
  4219  0069  319D  259B         	fcall	clear_ram0
  4220  006B                     end_of_initialization:	
  4221                           ;End of C runtime variable initialization code
  4222                           
  4223  006B                     __end_of__initialization:	
  4224  006B  107E               	bcf	int$flags,0	;clear compiler interrupt flag (level 1)
  4225  006C  0020               	movlb	0
  4226  006D  3185  2D57         	ljmp	_main	;jump to C main() function
  4227                           
  4228                           	psect	bssCOMMON
  4229  0077                     __pbssCOMMON:	
  4230  0077                     _p_i2c2_current:	
  4231  0077                     	ds	1
  4232  0078                     _p_i2c2_trb_current:	
  4233  0078                     	ds	1
  4234  0079                     _i2c2_state:	
  4235  0079                     	ds	1
  4236  007A                     I2C2_ISR@i2c_address:	
  4237  007A                     	ds	2
  4238                           
  4239                           	psect	bssBANK1
  4240  00DA                     __pbssBANK1:	
  4241  00DA                     _i2c2_object:	
  4242  00DA                     	ds	5
  4243  00DF                     I2C2_ISR@pi2c_buf_ptr:	
  4244  00DF                     	ds	2
  4245  00E1                     _doorState:	
  4246  00E1                     	ds	1
  4247  00E2                     _HMC5883Lmode:	
  4248  00E2                     	ds	1
  4249  00E3                     I2C2_ISR@i2c_10bit_address_restart:	
  4250  00E3                     	ds	1
  4251  00E4                     I2C2_ISR@i2c_bytes_left:	
  4252  00E4                     	ds	1
  4253  00E5                     _i2c2_trb_count:	
  4254  00E5                     	ds	1
  4255  00E6                     _doorClosedAngle:	
  4256  00E6                     	ds	1
  4257  00E7                     _doorOpenAngle:	
  4258  00E7                     	ds	1
  4259                           
  4260                           	psect	dataBANK1
  4261  00E8                     __pdataBANK1:	
  4262  00E8                     _addressSize:	
  4263  00E8                     	ds	1
  4264                           
  4265                           	psect	bssBANK2
  4266  0120                     __pbssBANK2:	
  4267  0120                     _curr:	
  4268  0120                     	ds	4
  4269  0124                     _globalCounter:	
  4270  0124                     	ds	4
  4271  0128                     _adc_t:	
  4272  0128                     	ds	4
  4273  012C                     _cTemp:	
  4274  012C                     	ds	3
  4275  012F                     _var2:	
  4276  012F                     	ds	3
  4277  0132                     _var1:	
  4278  0132                     	ds	3
  4279  0135                     HMC5883L_TestConnection@F3560:	
  4280  0135                     	ds	3
  4281  0138                     _errno:	
  4282  0138                     	ds	2
  4283  013A                     _timeOut:	
  4284  013A                     	ds	2
  4285  013C                     _referenceDirection:	
  4286  013C                     	ds	2
  4287  013E                     _dig_P9:	
  4288  013E                     	ds	2
  4289  0140                     _dig_P8:	
  4290  0140                     	ds	2
  4291  0142                     _dig_P7:	
  4292  0142                     	ds	2
  4293  0144                     _dig_P6:	
  4294  0144                     	ds	2
  4295  0146                     _dig_P5:	
  4296  0146                     	ds	2
  4297  0148                     _dig_P4:	
  4298  0148                     	ds	2
  4299  014A                     _dig_P3:	
  4300  014A                     	ds	2
  4301  014C                     _dig_P2:	
  4302  014C                     	ds	2
  4303  014E                     _dig_P1:	
  4304  014E                     	ds	2
  4305  0150                     _dig_T4:	
  4306  0150                     	ds	2
  4307  0152                     _dig_T3:	
  4308  0152                     	ds	2
  4309  0154                     _dig_T2:	
  4310  0154                     	ds	2
  4311  0156                     _dig_T1:	
  4312  0156                     	ds	2
  4313  0158                     _initialised:	
  4314  0158                     	ds	1
  4315  0159                     I2C2_MasterWrite@trBlock:	
  4316  0159                     	ds	5
  4317  015E                     _i2c2_tr_queue:	
  4318  015E                     	ds	4
  4319                           
  4320                           	psect	dataBANK2
  4321  0162                     __pdataBANK2:	
  4322  0162                     _sensorUpdatePeriod:	
  4323  0162                     	ds	4
  4324  0166                     _sensorHealth:	
  4325  0166                     	ds	2
  4326                           
  4327                           	psect	bssBANK3
  4328  01A0                     __pbssBANK3:	
  4329  01A0                     _adc_p:	
  4330  01A0                     	ds	4
  4331  01A4                     _pressure:	
  4332  01A4                     	ds	3
  4333  01A7                     _t_fine:	
  4334  01A7                     	ds	3
  4335  01AA                     _b1:	
  4336  01AA                     	ds	24
  4337  01C2                     _data:	
  4338  01C2                     	ds	8
  4339  01CA                     _heading:	
  4340  01CA                     	ds	8
  4341  01D2                     I2C2_MasterRead@trBlock:	
  4342  01D2                     	ds	5
  4343                           
  4344                           	psect	clrtext
  4345  1D9B                     clear_ram0:	
  4346                           ;	Called with FSR0 containing the base address, and
  4347                           ;	WREG with the size to clear
  4348                           
  4349  1D9B  0064               	clrwdt	;clear the watchdog before getting into this loop
  4350  1D9C                     clrloop0:	
  4351  1D9C  0180               	clrf	0	;clear RAM location pointed to by FSR
  4352  1D9D  3101               	addfsr 0,1
  4353  1D9E  0B89               	decfsz	9,f	;Have we reached the end of clearing yet?
  4354  1D9F  2D9C               	goto	clrloop0	;have we reached the end yet?
  4355  1DA0  3400               	retlw	0	;all done for this memory range, return
  4356                           
  4357                           	psect	cstackBANK3
  4358  01D7                     __pcstackBANK3:	
  4359  01D7                     main@doorClosedUpdateCounter:	
  4360                           
  4361                           ; 4 bytes @ 0x0
  4362  01D7                     	ds	4
  4363  01DB                     main@prevDoorStatus:	
  4364                           
  4365                           ; 1 bytes @ 0x4
  4366  01DB                     	ds	1
  4367  01DC                     main@doorOpenTime:	
  4368                           
  4369                           ; 4 bytes @ 0x5
  4370  01DC                     	ds	4
  4371  01E0                     main@doorStatus:	
  4372                           
  4373                           ; 1 bytes @ 0x9
  4374  01E0                     	ds	1
  4375                           
  4376                           	psect	cstackBANK1
  4377  00A0                     __pcstackBANK1:	
  4378  00A0                     ___fttol@sign1:	
  4379  00A0                     eval_poly@res:	
  4380                           ; 1 bytes @ 0x0
  4381                           
  4382                           
  4383                           ; 3 bytes @ 0x0
  4384  00A0                     	ds	1
  4385  00A1                     ___fttol@lval:	
  4386                           
  4387                           ; 4 bytes @ 0x1
  4388  00A1                     	ds	2
  4389  00A3                     ?_atan:	
  4390  00A3                     atan@f:	
  4391                           ; 3 bytes @ 0x3
  4392                           
  4393                           
  4394                           ; 3 bytes @ 0x3
  4395  00A3                     	ds	2
  4396  00A5                     ___fttol@exp1:	
  4397                           
  4398                           ; 1 bytes @ 0x5
  4399  00A5                     	ds	1
  4400  00A6                     ?_BMP_readTemperature:	
  4401  00A6                     atan@y:	
  4402                           ; 3 bytes @ 0x6
  4403                           
  4404                           
  4405                           ; 3 bytes @ 0x6
  4406  00A6                     	ds	3
  4407  00A9                     ??_BMP_readTemperature:	
  4408  00A9                     atan@x:	
  4409                           ; 1 bytes @ 0x9
  4410                           
  4411                           
  4412                           ; 3 bytes @ 0x9
  4413  00A9                     	ds	3
  4414  00AC                     atan@recip:	
  4415                           
  4416                           ; 1 bytes @ 0xC
  4417  00AC                     	ds	1
  4418  00AD                     atan@val_squared:	
  4419                           
  4420                           ; 3 bytes @ 0xD
  4421  00AD                     	ds	3
  4422  00B0                     atan@val:	
  4423                           
  4424                           ; 3 bytes @ 0x10
  4425  00B0                     	ds	3
  4426  00B3                     ?_atan2:	
  4427  00B3                     atan2@y:	
  4428                           ; 3 bytes @ 0x13
  4429                           
  4430                           
  4431                           ; 3 bytes @ 0x13
  4432  00B3                     	ds	2
  4433  00B5                     _BMP_readTemperature$2611:	
  4434                           
  4435                           ; 3 bytes @ 0x15
  4436  00B5                     	ds	1
  4437  00B6                     atan2@x:	
  4438                           
  4439                           ; 3 bytes @ 0x16
  4440  00B6                     	ds	2
  4441  00B8                     BMP_readTemperature@status:	
  4442                           
  4443                           ; 1 bytes @ 0x18
  4444  00B8                     	ds	1
  4445  00B9                     BMP_readTemperature@tmp:	
  4446  00B9                     _atan2$2612:	
  4447                           ; 1 bytes @ 0x19
  4448                           
  4449                           
  4450                           ; 3 bytes @ 0x19
  4451  00B9                     	ds	1
  4452  00BA                     ?_Wireless_packageData:	
  4453  00BA                     Wireless_packageData@openTime:	
  4454                           ; 1 bytes @ 0x1A
  4455                           
  4456                           
  4457                           ; 1 bytes @ 0x1A
  4458  00BA                     	ds	1
  4459  00BB                     Wireless_packageData@tempC:	
  4460                           
  4461                           ; 3 bytes @ 0x1B
  4462  00BB                     	ds	1
  4463  00BC                     _atan2$2613:	
  4464                           
  4465                           ; 3 bytes @ 0x1C
  4466  00BC                     	ds	2
  4467  00BE                     ??_Wireless_packageData:	
  4468                           
  4469                           ; 1 bytes @ 0x1E
  4470  00BE                     	ds	1
  4471  00BF                     _atan2$2615:	
  4472                           
  4473                           ; 3 bytes @ 0x1F
  4474  00BF                     	ds	1
  4475  00C0                     Wireless_packageData@data:	
  4476                           
  4477                           ; 5 bytes @ 0x20
  4478  00C0                     	ds	2
  4479  00C2                     _atan2$2614:	
  4480                           
  4481                           ; 3 bytes @ 0x22
  4482  00C2                     	ds	3
  4483  00C5                     Wireless_packageData@var:	
  4484  00C5                     atan2@v:	
  4485                           ; 1 bytes @ 0x25
  4486                           
  4487                           
  4488                           ; 3 bytes @ 0x25
  4489  00C5                     	ds	1
  4490  00C6                     Wireless_packageData@status:	
  4491                           
  4492                           ; 1 bytes @ 0x26
  4493  00C6                     	ds	1
  4494  00C7                     Wireless_packageData@t2:	
  4495                           
  4496                           ; 2 bytes @ 0x27
  4497  00C7                     	ds	1
  4498  00C8                     ?_HMC5883L_GetCompassDirection:	
  4499                           
  4500                           ; 2 bytes @ 0x28
  4501  00C8                     	ds	1
  4502  00C9                     Wireless_packageData@t1:	
  4503                           
  4504                           ; 2 bytes @ 0x29
  4505  00C9                     	ds	1
  4506  00CA                     HMC5883L_GetCompassDirection@rawSamples:	
  4507                           
  4508                           ; 6 bytes @ 0x2A
  4509  00CA                     	ds	6
  4510  00D0                     HMC5883L_GetCompassDirection@h:	
  4511                           
  4512                           ; 3 bytes @ 0x30
  4513  00D0                     	ds	3
  4514  00D3                     ??_DOOR_run:	
  4515                           
  4516                           ; 1 bytes @ 0x33
  4517  00D3                     	ds	3
  4518  00D6                     DOOR_run@dir:	
  4519                           
  4520                           ; 2 bytes @ 0x36
  4521  00D6                     	ds	2
  4522  00D8                     ??_main:	
  4523                           
  4524                           ; 1 bytes @ 0x38
  4525  00D8                     	ds	2
  4526                           
  4527                           	psect	cstackCOMMON
  4528  0070                     __pcstackCOMMON:	
  4529  0070                     ?_PIN_MANAGER_Initialize:	
  4530  0070                     ?_OSCILLATOR_Initialize:	
  4531                           ; 1 bytes @ 0x0
  4532                           
  4533  0070                     ?_WDT_Initialize:	
  4534                           ; 1 bytes @ 0x0
  4535                           
  4536  0070                     ?_SPI1_Initialize:	
  4537                           ; 1 bytes @ 0x0
  4538                           
  4539  0070                     ?_I2C2_Initialize:	
  4540                           ; 1 bytes @ 0x0
  4541                           
  4542  0070                     ?_FVR_Initialize:	
  4543                           ; 1 bytes @ 0x0
  4544                           
  4545  0070                     ?_ADC_Initialize:	
  4546                           ; 1 bytes @ 0x0
  4547                           
  4548  0070                     ?_TMR2_Initialize:	
  4549                           ; 1 bytes @ 0x0
  4550                           
  4551  0070                     ?_TMR1_Initialize:	
  4552                           ; 1 bytes @ 0x0
  4553                           
  4554  0070                     ?_IOCAF2_DefaultInterruptHandler:	
  4555                           ; 1 bytes @ 0x0
  4556                           
  4557  0070                     ??_IOCAF2_DefaultInterruptHandler:	
  4558                           ; 1 bytes @ 0x0
  4559                           
  4560  0070                     ?_IOCAF2_ISR:	
  4561                           ; 1 bytes @ 0x0
  4562                           
  4563  0070                     ??_IOCAF2_ISR:	
  4564                           ; 1 bytes @ 0x0
  4565                           
  4566  0070                     ?_I2C2_BusCollisionISR:	
  4567                           ; 1 bytes @ 0x0
  4568                           
  4569  0070                     ??_I2C2_BusCollisionISR:	
  4570                           ; 1 bytes @ 0x0
  4571                           
  4572  0070                     ?_I2C2_ISR:	
  4573                           ; 1 bytes @ 0x0
  4574                           
  4575  0070                     ?_TMR1_ISR:	
  4576                           ; 1 bytes @ 0x0
  4577                           
  4578  0070                     ??_TMR1_ISR:	
  4579                           ; 1 bytes @ 0x0
  4580                           
  4581  0070                     ?_TMR1_DefaultInterruptHandler:	
  4582                           ; 1 bytes @ 0x0
  4583                           
  4584  0070                     ??_TMR1_DefaultInterruptHandler:	
  4585                           ; 1 bytes @ 0x0
  4586                           
  4587  0070                     ?_TMR1_CallBack:	
  4588                           ; 1 bytes @ 0x0
  4589                           
  4590  0070                     ??_TMR1_CallBack:	
  4591                           ; 1 bytes @ 0x0
  4592                           
  4593  0070                     ?_Timeout_increment:	
  4594                           ; 1 bytes @ 0x0
  4595                           
  4596  0070                     ??_Timeout_increment:	
  4597                           ; 1 bytes @ 0x0
  4598                           
  4599  0070                     ?_I2C2_Stop:	
  4600                           ; 1 bytes @ 0x0
  4601                           
  4602  0070                     ??_I2C2_Stop:	
  4603                           ; 1 bytes @ 0x0
  4604                           
  4605  0070                     ?_I2C2_FunctionComplete:	
  4606                           ; 1 bytes @ 0x0
  4607                           
  4608  0070                     ??_I2C2_FunctionComplete:	
  4609                           ; 1 bytes @ 0x0
  4610                           
  4611  0070                     ?_Sensor_peripheralWake:	
  4612                           ; 1 bytes @ 0x0
  4613                           
  4614  0070                     ?_Sensor_peripheralSleep:	
  4615                           ; 1 bytes @ 0x0
  4616                           
  4617  0070                     ?_Wireless_init:	
  4618                           ; 1 bytes @ 0x0
  4619                           
  4620  0070                     ?_BMP_init:	
  4621                           ; 1 bytes @ 0x0
  4622                           
  4623  0070                     ?_HMC5883L_Initialize:	
  4624                           ; 1 bytes @ 0x0
  4625                           
  4626  0070                     ?_DOOR_init:	
  4627                           ; 1 bytes @ 0x0
  4628                           
  4629  0070                     ?_Wireless_wake:	
  4630                           ; 1 bytes @ 0x0
  4631                           
  4632  0070                     ?_Wireless_sleep:	
  4633                           ; 1 bytes @ 0x0
  4634                           
  4635  0070                     ?_DOOR_resetPos:	
  4636                           ; 1 bytes @ 0x0
  4637                           
  4638  0070                     ?_DOOR_run:	
  4639                           ; 1 bytes @ 0x0
  4640                           
  4641  0070                     ?_HMC5883L_SetGain:	
  4642                           ; 1 bytes @ 0x0
  4643                           
  4644  0070                     ?_HMC5883L_SetMode:	
  4645                           ; 1 bytes @ 0x0
  4646                           
  4647  0070                     ?_Diag_setTempSensorHealth:	
  4648                           ; 1 bytes @ 0x0
  4649                           
  4650  0070                     ?_Diag_getTempSensorHealth:	
  4651                           ; 1 bytes @ 0x0
  4652                           
  4653  0070                     ?_Diag_getSensorHealth:	
  4654                           ; 1 bytes @ 0x0
  4655                           
  4656  0070                     ?_Wireless_checkDataReceived:	
  4657                           ; 1 bytes @ 0x0
  4658                           
  4659  0070                     ?_Diag_getCompassHealth:	
  4660                           ; 1 bytes @ 0x0
  4661                           
  4662  0070                     ?_Diag_setCompassHealth:	
  4663                           ; 1 bytes @ 0x0
  4664                           
  4665  0070                     ?_SYSTEM_Initialize:	
  4666                           ; 1 bytes @ 0x0
  4667                           
  4668  0070                     ?_PIN_MANAGER_IOC:	
  4669                           ; 1 bytes @ 0x0
  4670                           
  4671  0070                     ??_PIN_MANAGER_IOC:	
  4672                           ; 1 bytes @ 0x0
  4673                           
  4674  0070                     ?_INTERRUPT_InterruptManager:	
  4675                           ; 1 bytes @ 0x0
  4676                           
  4677  0070                     ?_ADC_SelectChannel:	
  4678                           ; 1 bytes @ 0x0
  4679                           
  4680  0070                     ?_ADC_StartConversion:	
  4681                           ; 1 bytes @ 0x0
  4682                           
  4683  0070                     ?_ADC_IsConversionDone:	
  4684                           ; 1 bytes @ 0x0
  4685                           
  4686  0070                     ?_FVR_IsOutputReady:	
  4687                           ; 1 bytes @ 0x0
  4688                           
  4689  0070                     ?_DATAEE_ReadByte:	
  4690                           ; 1 bytes @ 0x0
  4691                           
  4692  0070                     ?_SPI1_Exchange8bit:	
  4693                           ; 1 bytes @ 0x0
  4694                           
  4695  0070                     ?_main:	
  4696                           ; 1 bytes @ 0x0
  4697                           
  4698  0070                     ?_HMC5883L_WakeUp:	
  4699                           ; 1 bytes @ 0x0
  4700                           
  4701  0070                     ?_HMC5883L_GetHeading:	
  4702                           ; 1 bytes @ 0x0
  4703                           
  4704  0070                     ?_SPI_WriteRead:	
  4705                           ; 1 bytes @ 0x0
  4706                           
  4707  0070                     ?_RF_ReadRegister:	
  4708                           ; 1 bytes @ 0x0
  4709                           
  4710  0070                     ?_RF_Write:	
  4711                           ; 1 bytes @ 0x0
  4712                           
  4713  0070                     ?_RF_ResetStatusIRQ:	
  4714                           ; 1 bytes @ 0x0
  4715                           
  4716  0070                     ?_RF_Init:	
  4717                           ; 1 bytes @ 0x0
  4718                           
  4719  0070                     ?_RF_DataIsReady:	
  4720                           ; 1 bytes @ 0x0
  4721                           
  4722  0070                     ?_Wireless_sendData:	
  4723                           ; 1 bytes @ 0x0
  4724                           
  4725  0070                     ?_Timeout_hasExpired:	
  4726                           ; 1 bytes @ 0x0
  4727                           
  4728                           
  4729                           ; 1 bytes @ 0x0
  4730  0070                     	ds	2
  4731  0072                     I2C2_Stop@completion_code:	
  4732                           
  4733                           ; 1 bytes @ 0x2
  4734  0072                     	ds	1
  4735  0073                     ??_I2C2_ISR:	
  4736                           
  4737                           ; 1 bytes @ 0x3
  4738  0073                     	ds	4
  4739                           
  4740                           	psect	cstackBANK0
  4741  0020                     __pcstackBANK0:	
  4742  0020                     ??_INTERRUPT_InterruptManager:	
  4743                           
  4744                           ; 1 bytes @ 0x0
  4745  0020                     	ds	1
  4746  0021                     ?___ftge:	
  4747  0021                     ??_OSCILLATOR_Initialize:	
  4748                           ; 1 bit 
  4749                           
  4750  0021                     ??_WDT_Initialize:	
  4751                           ; 1 bytes @ 0x1
  4752                           
  4753  0021                     ??_SPI1_Initialize:	
  4754                           ; 1 bytes @ 0x1
  4755                           
  4756  0021                     ??_I2C2_Initialize:	
  4757                           ; 1 bytes @ 0x1
  4758                           
  4759  0021                     ??_FVR_Initialize:	
  4760                           ; 1 bytes @ 0x1
  4761                           
  4762  0021                     ??_ADC_Initialize:	
  4763                           ; 1 bytes @ 0x1
  4764                           
  4765  0021                     ??_TMR2_Initialize:	
  4766                           ; 1 bytes @ 0x1
  4767                           
  4768  0021                     ?_IOCAF2_SetInterruptHandler:	
  4769                           ; 1 bytes @ 0x1
  4770                           
  4771  0021                     ?_TMR1_SetInterruptHandler:	
  4772                           ; 1 bytes @ 0x1
  4773                           
  4774  0021                     ?_I2C2_MasterWriteTRBBuild:	
  4775                           ; 1 bytes @ 0x1
  4776                           
  4777  0021                     ?_I2C2_MasterTRBInsert:	
  4778                           ; 1 bytes @ 0x1
  4779                           
  4780  0021                     ?_I2C2_MasterReadTRBBuild:	
  4781                           ; 1 bytes @ 0x1
  4782                           
  4783  0021                     ??_Sensor_peripheralWake:	
  4784                           ; 1 bytes @ 0x1
  4785                           
  4786  0021                     ??_Sensor_peripheralSleep:	
  4787                           ; 1 bytes @ 0x1
  4788                           
  4789  0021                     ??_DOOR_resetPos:	
  4790                           ; 1 bytes @ 0x1
  4791                           
  4792  0021                     ??_Diag_setTempSensorHealth:	
  4793                           ; 1 bytes @ 0x1
  4794                           
  4795  0021                     ??_Diag_getTempSensorHealth:	
  4796                           ; 1 bytes @ 0x1
  4797                           
  4798  0021                     ??_Diag_getSensorHealth:	
  4799                           ; 1 bytes @ 0x1
  4800                           
  4801  0021                     ??_Diag_getCompassHealth:	
  4802                           ; 1 bytes @ 0x1
  4803                           
  4804  0021                     ??_Diag_setCompassHealth:	
  4805                           ; 1 bytes @ 0x1
  4806                           
  4807  0021                     ??_ADC_SelectChannel:	
  4808                           ; 1 bytes @ 0x1
  4809                           
  4810  0021                     ??_ADC_StartConversion:	
  4811                           ; 1 bytes @ 0x1
  4812                           
  4813  0021                     ??_ADC_IsConversionDone:	
  4814                           ; 1 bytes @ 0x1
  4815                           
  4816  0021                     ??_FVR_IsOutputReady:	
  4817                           ; 1 bytes @ 0x1
  4818                           
  4819  0021                     ?_DATAEE_WriteByte:	
  4820                           ; 1 bytes @ 0x1
  4821                           
  4822  0021                     ??_DATAEE_ReadByte:	
  4823                           ; 1 bytes @ 0x1
  4824                           
  4825  0021                     ??_SPI1_Exchange8bit:	
  4826                           ; 1 bytes @ 0x1
  4827                           
  4828  0021                     ??_RF_Init:	
  4829                           ; 1 bytes @ 0x1
  4830                           
  4831  0021                     ?_Timeout_setTimeout:	
  4832                           ; 1 bytes @ 0x1
  4833                           
  4834  0021                     ??_Timeout_hasExpired:	
  4835                           ; 1 bytes @ 0x1
  4836                           
  4837  0021                     ?___bmul:	
  4838                           ; 1 bytes @ 0x1
  4839                           
  4840  0021                     ?_abs:	
  4841                           ; 1 bytes @ 0x1
  4842                           
  4843  0021                     ?_ADC_GetConversionResult:	
  4844                           ; 2 bytes @ 0x1
  4845                           
  4846  0021                     ?___wmul:	
  4847                           ; 2 bytes @ 0x1
  4848                           
  4849  0021                     ?___ftpack:	
  4850                           ; 2 bytes @ 0x1
  4851                           
  4852  0021                     ?___lmul:	
  4853                           ; 3 bytes @ 0x1
  4854                           
  4855  0021                     ?___aldiv:	
  4856                           ; 4 bytes @ 0x1
  4857                           
  4858  0021                     ?___lldiv:	
  4859                           ; 4 bytes @ 0x1
  4860                           
  4861  0021                     I2C2_MasterTRBInsert@ptrb_list:	
  4862                           ; 4 bytes @ 0x1
  4863                           
  4864  0021                     I2C2_MasterWriteTRBBuild@pdata:	
  4865                           ; 1 bytes @ 0x1
  4866                           
  4867  0021                     DATAEE_WriteByte@bData:	
  4868                           ; 1 bytes @ 0x1
  4869                           
  4870  0021                     DATAEE_ReadByte@bAdd:	
  4871                           ; 1 bytes @ 0x1
  4872                           
  4873  0021                     SPI1_Exchange8bit@data:	
  4874                           ; 1 bytes @ 0x1
  4875                           
  4876  0021                     ___bmul@multiplicand:	
  4877                           ; 1 bytes @ 0x1
  4878                           
  4879  0021                     IOCAF2_SetInterruptHandler@InterruptHandler:	
  4880                           ; 1 bytes @ 0x1
  4881                           
  4882  0021                     TMR1_SetInterruptHandler@InterruptHandler:	
  4883                           ; 2 bytes @ 0x1
  4884                           
  4885  0021                     I2C2_MasterReadTRBBuild@pdata:	
  4886                           ; 2 bytes @ 0x1
  4887                           
  4888  0021                     Timeout_setTimeout@val:	
  4889                           ; 2 bytes @ 0x1
  4890                           
  4891  0021                     ___wmul@multiplier:	
  4892                           ; 2 bytes @ 0x1
  4893                           
  4894  0021                     abs@a:	
  4895                           ; 2 bytes @ 0x1
  4896                           
  4897  0021                     ___ftpack@arg:	
  4898                           ; 2 bytes @ 0x1
  4899                           
  4900  0021                     ___ftge@ff1:	
  4901                           ; 3 bytes @ 0x1
  4902                           
  4903  0021                     ___lmul@multiplier:	
  4904                           ; 3 bytes @ 0x1
  4905                           
  4906  0021                     ___aldiv@divisor:	
  4907                           ; 4 bytes @ 0x1
  4908                           
  4909  0021                     ___lldiv@divisor:	
  4910                           ; 4 bytes @ 0x1
  4911                           
  4912                           
  4913                           ; 4 bytes @ 0x1
  4914  0021                     	ds	1
  4915  0022                     ??_DATAEE_WriteByte:	
  4916  0022                     ??_SPI_WriteRead:	
  4917                           ; 1 bytes @ 0x2
  4918                           
  4919  0022                     ??___bmul:	
  4920                           ; 1 bytes @ 0x2
  4921                           
  4922  0022                     I2C2_MasterTRBInsert@pflag:	
  4923                           ; 1 bytes @ 0x2
  4924                           
  4925  0022                     I2C2_MasterWriteTRBBuild@length:	
  4926                           ; 1 bytes @ 0x2
  4927                           
  4928  0022                     ADC_SelectChannel@channel:	
  4929                           ; 1 bytes @ 0x2
  4930                           
  4931  0022                     DATAEE_WriteByte@bAdd:	
  4932                           ; 1 bytes @ 0x2
  4933                           
  4934  0022                     SPI_WriteRead@val:	
  4935                           ; 1 bytes @ 0x2
  4936                           
  4937  0022                     Diag_setTempSensorHealth@health:	
  4938                           ; 1 bytes @ 0x2
  4939                           
  4940  0022                     Diag_setCompassHealth@health:	
  4941                           ; 1 bytes @ 0x2
  4942                           
  4943  0022                     Diag_getSensorHealth@var:	
  4944                           ; 1 bytes @ 0x2
  4945                           
  4946                           
  4947                           ; 1 bytes @ 0x2
  4948  0022                     	ds	1
  4949  0023                     ??_PIN_MANAGER_Initialize:	
  4950  0023                     ??_TMR1_Initialize:	
  4951                           ; 1 bytes @ 0x3
  4952                           
  4953  0023                     ??_IOCAF2_SetInterruptHandler:	
  4954                           ; 1 bytes @ 0x3
  4955                           
  4956  0023                     ??_TMR1_SetInterruptHandler:	
  4957                           ; 1 bytes @ 0x3
  4958                           
  4959  0023                     ??_I2C2_MasterTRBInsert:	
  4960                           ; 1 bytes @ 0x3
  4961                           
  4962  0023                     ??_abs:	
  4963                           ; 1 bytes @ 0x3
  4964                           
  4965  0023                     ??_SYSTEM_Initialize:	
  4966                           ; 1 bytes @ 0x3
  4967                           
  4968  0023                     ??_ADC_GetConversionResult:	
  4969                           ; 1 bytes @ 0x3
  4970                           
  4971  0023                     ?_SPI_WriteReadBuffer:	
  4972                           ; 1 bytes @ 0x3
  4973                           
  4974  0023                     ?_SPI_WriteBuffer:	
  4975                           ; 1 bytes @ 0x3
  4976                           
  4977  0023                     ?_RF_WriteRegister:	
  4978                           ; 1 bytes @ 0x3
  4979                           
  4980  0023                     ??_RF_ReadRegister:	
  4981                           ; 1 bytes @ 0x3
  4982                           
  4983  0023                     ??_RF_Write:	
  4984                           ; 1 bytes @ 0x3
  4985                           
  4986  0023                     ??_Timeout_setTimeout:	
  4987                           ; 1 bytes @ 0x3
  4988                           
  4989  0023                     I2C2_MasterReadTRBBuild@length:	
  4990                           ; 1 bytes @ 0x3
  4991                           
  4992  0023                     DATAEE_WriteByte@GIEBitValue:	
  4993                           ; 1 bytes @ 0x3
  4994                           
  4995  0023                     SPI_WriteReadBuffer@bufIn:	
  4996                           ; 1 bytes @ 0x3
  4997                           
  4998  0023                     RF_WriteRegister@val:	
  4999                           ; 1 bytes @ 0x3
  5000                           
  5001  0023                     RF_Write@val:	
  5002                           ; 1 bytes @ 0x3
  5003                           
  5004  0023                     ___bmul@product:	
  5005                           ; 1 bytes @ 0x3
  5006                           
  5007  0023                     I2C2_MasterWriteTRBBuild@address:	
  5008                           ; 1 bytes @ 0x3
  5009                           
  5010  0023                     SPI_WriteBuffer@bufOut:	
  5011                           ; 2 bytes @ 0x3
  5012                           
  5013  0023                     ___wmul@multiplicand:	
  5014                           ; 2 bytes @ 0x3
  5015                           
  5016                           
  5017                           ; 2 bytes @ 0x3
  5018  0023                     	ds	1
  5019  0024                     ?_Storage_load:	
  5020  0024                     ?_Storage_save:	
  5021                           ; 1 bytes @ 0x4
  5022                           
  5023  0024                     ??_RF_WriteRegister:	
  5024                           ; 1 bytes @ 0x4
  5025                           
  5026  0024                     I2C2_MasterTRBInsert@count:	
  5027                           ; 1 bytes @ 0x4
  5028                           
  5029  0024                     SPI_WriteReadBuffer@bufSize:	
  5030                           ; 1 bytes @ 0x4
  5031                           
  5032  0024                     RF_WriteRegister@reg:	
  5033                           ; 1 bytes @ 0x4
  5034                           
  5035  0024                     RF_ReadRegister@reg:	
  5036                           ; 1 bytes @ 0x4
  5037                           
  5038  0024                     Storage_load@closeAngle:	
  5039                           ; 1 bytes @ 0x4
  5040                           
  5041  0024                     Storage_save@closeAngle:	
  5042                           ; 1 bytes @ 0x4
  5043                           
  5044  0024                     ___bmul@multiplier:	
  5045                           ; 1 bytes @ 0x4
  5046                           
  5047  0024                     ___ftpack@exp:	
  5048                           ; 1 bytes @ 0x4
  5049                           
  5050  0024                     I2C2_MasterReadTRBBuild@address:	
  5051                           ; 1 bytes @ 0x4
  5052                           
  5053  0024                     ___ftge@ff2:	
  5054                           ; 2 bytes @ 0x4
  5055                           
  5056                           
  5057                           ; 3 bytes @ 0x4
  5058  0024                     	ds	1
  5059  0025                     ??_I2C2_MasterWriteTRBBuild:	
  5060  0025                     ??_Storage_load:	
  5061                           ; 1 bytes @ 0x5
  5062                           
  5063  0025                     ??_Storage_save:	
  5064                           ; 1 bytes @ 0x5
  5065                           
  5066  0025                     ??_SPI_WriteReadBuffer:	
  5067                           ; 1 bytes @ 0x5
  5068                           
  5069  0025                     ??_RF_ResetStatusIRQ:	
  5070                           ; 1 bytes @ 0x5
  5071                           
  5072  0025                     ??___wmul:	
  5073                           ; 1 bytes @ 0x5
  5074                           
  5075  0025                     SPI_WriteBuffer@bufSize:	
  5076                           ; 1 bytes @ 0x5
  5077                           
  5078  0025                     RF_ReadRegister@val:	
  5079                           ; 1 bytes @ 0x5
  5080                           
  5081  0025                     ___ftpack@sign:	
  5082                           ; 1 bytes @ 0x5
  5083                           
  5084  0025                     ___wmul@product:	
  5085                           ; 1 bytes @ 0x5
  5086                           
  5087  0025                     ___lmul@multiplicand:	
  5088                           ; 2 bytes @ 0x5
  5089                           
  5090  0025                     ___aldiv@dividend:	
  5091                           ; 4 bytes @ 0x5
  5092                           
  5093  0025                     ___lldiv@dividend:	
  5094                           ; 4 bytes @ 0x5
  5095                           
  5096                           
  5097                           ; 4 bytes @ 0x5
  5098  0025                     	ds	1
  5099  0026                     ??_I2C2_MasterReadTRBBuild:	
  5100  0026                     ??___ftpack:	
  5101                           ; 1 bytes @ 0x6
  5102                           
  5103  0026                     ??_SPI_WriteBuffer:	
  5104                           ; 1 bytes @ 0x6
  5105                           
  5106  0026                     ??_RF_DataIsReady:	
  5107                           ; 1 bytes @ 0x6
  5108                           
  5109  0026                     RF_ResetStatusIRQ@flags:	
  5110                           ; 1 bytes @ 0x6
  5111                           
  5112  0026                     Storage_load@byte:	
  5113                           ; 1 bytes @ 0x6
  5114                           
  5115  0026                     Storage_save@openAngle:	
  5116                           ; 1 bytes @ 0x6
  5117                           
  5118                           
  5119                           ; 1 bytes @ 0x6
  5120  0026                     	ds	1
  5121  0027                     ?_DOOR_update:	
  5122  0027                     ??___ftge:	
  5123                           ; 1 bytes @ 0x7
  5124                           
  5125  0027                     I2C2_MasterWriteTRBBuild@ptrb:	
  5126                           ; 1 bytes @ 0x7
  5127                           
  5128  0027                     RF_DataIsReady@channel:	
  5129                           ; 1 bytes @ 0x7
  5130                           
  5131  0027                     DOOR_update@closedAngle:	
  5132                           ; 1 bytes @ 0x7
  5133                           
  5134  0027                     Storage_load@openAngle:	
  5135                           ; 1 bytes @ 0x7
  5136                           
  5137                           
  5138                           ; 1 bytes @ 0x7
  5139  0027                     	ds	1
  5140  0028                     ??_DOOR_init:	
  5141  0028                     ??_DOOR_update:	
  5142                           ; 1 bytes @ 0x8
  5143                           
  5144  0028                     ?_I2C2_MasterWrite:	
  5145                           ; 1 bytes @ 0x8
  5146                           
  5147  0028                     I2C2_MasterWrite@length:	
  5148                           ; 1 bytes @ 0x8
  5149                           
  5150  0028                     I2C2_MasterReadTRBBuild@ptrb:	
  5151                           ; 1 bytes @ 0x8
  5152                           
  5153  0028                     SPI_WriteReadBuffer@bufOut:	
  5154                           ; 1 bytes @ 0x8
  5155                           
  5156  0028                     SPI_WriteBuffer@i:	
  5157                           ; 1 bytes @ 0x8
  5158                           
  5159  0028                     RF_DataIsReady@status:	
  5160                           ; 1 bytes @ 0x8
  5161                           
  5162                           
  5163                           ; 1 bytes @ 0x8
  5164  0028                     	ds	1
  5165  0029                     ?_I2C2_MasterRead:	
  5166  0029                     ?_RF_WriteRegisterData:	
  5167                           ; 1 bytes @ 0x9
  5168                           
  5169  0029                     ??___lmul:	
  5170                           ; 1 bytes @ 0x9
  5171                           
  5172  0029                     ??___aldiv:	
  5173                           ; 1 bytes @ 0x9
  5174                           
  5175  0029                     ??___lldiv:	
  5176                           ; 1 bytes @ 0x9
  5177                           
  5178  0029                     ?___altoft:	
  5179                           ; 1 bytes @ 0x9
  5180                           
  5181  0029                     ?___awtoft:	
  5182                           ; 3 bytes @ 0x9
  5183                           
  5184  0029                     ?___lwtoft:	
  5185                           ; 3 bytes @ 0x9
  5186                           
  5187  0029                     SPI_WriteReadBuffer@i:	
  5188                           ; 3 bytes @ 0x9
  5189                           
  5190  0029                     DOOR_update@openAngle:	
  5191                           ; 1 bytes @ 0x9
  5192                           
  5193  0029                     I2C2_MasterWrite@address:	
  5194                           ; 1 bytes @ 0x9
  5195                           
  5196  0029                     I2C2_MasterRead@pdata:	
  5197                           ; 2 bytes @ 0x9
  5198                           
  5199  0029                     RF_WriteRegisterData@buf:	
  5200                           ; 2 bytes @ 0x9
  5201                           
  5202  0029                     ___awtoft@c:	
  5203                           ; 2 bytes @ 0x9
  5204                           
  5205  0029                     ___lwtoft@c:	
  5206                           ; 2 bytes @ 0x9
  5207                           
  5208  0029                     ___lmul@product:	
  5209                           ; 2 bytes @ 0x9
  5210                           
  5211  0029                     ___altoft@c:	
  5212                           ; 4 bytes @ 0x9
  5213                           
  5214                           
  5215                           ; 4 bytes @ 0x9
  5216  0029                     	ds	1
  5217  002A                     ?_RF_ReadRegisterData:	
  5218  002A                     RF_ReadRegisterData@buf:	
  5219                           ; 1 bytes @ 0xA
  5220                           
  5221  002A                     ___aldiv@counter:	
  5222                           ; 1 bytes @ 0xA
  5223                           
  5224  002A                     ___lldiv@quotient:	
  5225                           ; 1 bytes @ 0xA
  5226                           
  5227                           
  5228                           ; 4 bytes @ 0xA
  5229  002A                     	ds	1
  5230  002B                     I2C2_MasterWrite@pflag:	
  5231  002B                     I2C2_MasterRead@length:	
  5232                           ; 1 bytes @ 0xB
  5233                           
  5234  002B                     RF_ReadRegisterData@bufSize:	
  5235                           ; 1 bytes @ 0xB
  5236                           
  5237  002B                     RF_WriteRegisterData@bufSize:	
  5238                           ; 1 bytes @ 0xB
  5239                           
  5240  002B                     ___aldiv@sign:	
  5241                           ; 1 bytes @ 0xB
  5242                           
  5243                           
  5244                           ; 1 bytes @ 0xB
  5245  002B                     	ds	1
  5246  002C                     ??_I2C2_MasterWrite:	
  5247  002C                     ??_RF_ReadRegisterData:	
  5248                           ; 1 bytes @ 0xC
  5249                           
  5250  002C                     ??_RF_WriteRegisterData:	
  5251                           ; 1 bytes @ 0xC
  5252                           
  5253  002C                     ??___awtoft:	
  5254                           ; 1 bytes @ 0xC
  5255                           
  5256  002C                     ??___lwtoft:	
  5257                           ; 1 bytes @ 0xC
  5258                           
  5259  002C                     I2C2_MasterRead@address:	
  5260                           ; 1 bytes @ 0xC
  5261                           
  5262  002C                     ___aldiv@quotient:	
  5263                           ; 2 bytes @ 0xC
  5264                           
  5265                           
  5266                           ; 4 bytes @ 0xC
  5267  002C                     	ds	1
  5268  002D                     ??___altoft:	
  5269  002D                     RF_WriteRegisterData@reg:	
  5270                           ; 1 bytes @ 0xD
  5271                           
  5272                           
  5273                           ; 1 bytes @ 0xD
  5274  002D                     	ds	1
  5275  002E                     ??_Wireless_init:	
  5276  002E                     ?_RF_TxPayload:	
  5277                           ; 1 bytes @ 0xE
  5278                           
  5279  002E                     I2C2_MasterWrite@pdata:	
  5280                           ; 1 bytes @ 0xE
  5281                           
  5282  002E                     I2C2_MasterRead@pflag:	
  5283                           ; 1 bytes @ 0xE
  5284                           
  5285  002E                     RF_ReadRegisterData@reg:	
  5286                           ; 1 bytes @ 0xE
  5287                           
  5288  002E                     RF_TxPayload@payloadSize:	
  5289                           ; 1 bytes @ 0xE
  5290                           
  5291  002E                     ___awtoft@sign:	
  5292                           ; 1 bytes @ 0xE
  5293                           
  5294  002E                     ___lldiv@counter:	
  5295                           ; 1 bytes @ 0xE
  5296                           
  5297                           
  5298                           ; 1 bytes @ 0xE
  5299  002E                     	ds	1
  5300  002F                     ??_Wireless_wake:	
  5301  002F                     ??_Wireless_sleep:	
  5302                           ; 1 bytes @ 0xF
  5303                           
  5304  002F                     ?_I2C_ByteWrite:	
  5305                           ; 1 bytes @ 0xF
  5306                           
  5307  002F                     ??_I2C2_MasterRead:	
  5308                           ; 1 bytes @ 0xF
  5309                           
  5310  002F                     ??_RF_TxPayload:	
  5311                           ; 1 bytes @ 0xF
  5312                           
  5313  002F                     ?_RF_RxPayload:	
  5314                           ; 1 bytes @ 0xF
  5315                           
  5316  002F                     RF_RxPayload@payloadSize:	
  5317                           ; 1 bytes @ 0xF
  5318                           
  5319  002F                     I2C_ByteWrite@pBuffer:	
  5320                           ; 1 bytes @ 0xF
  5321                           
  5322  002F                     ___altoft@exp:	
  5323                           ; 1 bytes @ 0xF
  5324                           
  5325                           
  5326                           ; 1 bytes @ 0xF
  5327  002F                     	ds	1
  5328  0030                     ??_RF_RxPayload:	
  5329  0030                     RF_TxPayload@payload:	
  5330                           ; 1 bytes @ 0x10
  5331                           
  5332  0030                     Wireless_sleep@reg:	
  5333                           ; 1 bytes @ 0x10
  5334                           
  5335  0030                     Wireless_wake@reg:	
  5336                           ; 1 bytes @ 0x10
  5337                           
  5338  0030                     I2C_ByteWrite@WriteAddr:	
  5339                           ; 1 bytes @ 0x10
  5340                           
  5341  0030                     ___altoft@sign:	
  5342                           ; 1 bytes @ 0x10
  5343                           
  5344                           
  5345                           ; 1 bytes @ 0x10
  5346  0030                     	ds	1
  5347  0031                     ??_I2C_ByteWrite:	
  5348  0031                     ?_I2C_BufferRead:	
  5349                           ; 1 bytes @ 0x11
  5350                           
  5351  0031                     ??_Wireless_sendData:	
  5352                           ; 1 bytes @ 0x11
  5353                           
  5354  0031                     ?___ftdiv:	
  5355                           ; 1 bytes @ 0x11
  5356                           
  5357  0031                     I2C_BufferRead@pBuffer:	
  5358                           ; 3 bytes @ 0x11
  5359                           
  5360  0031                     ___ftdiv@f2:	
  5361                           ; 2 bytes @ 0x11
  5362                           
  5363                           
  5364                           ; 3 bytes @ 0x11
  5365  0031                     	ds	1
  5366  0032                     RF_RxPayload@payload:	
  5367  0032                     Wireless_sendData@payload:	
  5368                           ; 1 bytes @ 0x12
  5369                           
  5370                           
  5371                           ; 1 bytes @ 0x12
  5372  0032                     	ds	1
  5373  0033                     ??_Wireless_checkDataReceived:	
  5374  0033                     I2C_BufferRead@ReadAddr:	
  5375                           ; 1 bytes @ 0x13
  5376                           
  5377                           
  5378                           ; 1 bytes @ 0x13
  5379  0033                     	ds	1
  5380  0034                     I2C_BufferRead@NumByteToRead:	
  5381  0034                     ___ftdiv@f1:	
  5382                           ; 2 bytes @ 0x14
  5383                           
  5384                           
  5385                           ; 3 bytes @ 0x14
  5386  0034                     	ds	1
  5387  0035                     I2C_ByteWrite@slaveAddr:	
  5388                           
  5389                           ; 1 bytes @ 0x15
  5390  0035                     	ds	1
  5391  0036                     ??_I2C_BufferRead:	
  5392  0036                     I2C_ByteWrite@data:	
  5393                           ; 1 bytes @ 0x16
  5394                           
  5395                           
  5396                           ; 2 bytes @ 0x16
  5397  0036                     	ds	1
  5398  0037                     ??___ftdiv:	
  5399  0037                     Wireless_checkDataReceived@data:	
  5400                           ; 1 bytes @ 0x17
  5401                           
  5402                           
  5403                           ; 4 bytes @ 0x17
  5404  0037                     	ds	1
  5405  0038                     I2C_ByteWrite@status:	
  5406                           
  5407                           ; 1 bytes @ 0x18
  5408  0038                     	ds	1
  5409  0039                     ?_HMC5883L_I2C_ByteWrite:	
  5410  0039                     HMC5883L_I2C_ByteWrite@pBuffer:	
  5411                           ; 1 bytes @ 0x19
  5412                           
  5413                           
  5414                           ; 1 bytes @ 0x19
  5415  0039                     	ds	1
  5416  003A                     HMC5883L_I2C_ByteWrite@WriteAddr:	
  5417  003A                     I2C_BufferRead@slaveAddr:	
  5418                           ; 1 bytes @ 0x1A
  5419                           
  5420                           
  5421                           ; 1 bytes @ 0x1A
  5422  003A                     	ds	1
  5423  003B                     ??_HMC5883L_I2C_ByteWrite:	
  5424  003B                     Wireless_checkDataReceived@channel:	
  5425                           ; 1 bytes @ 0x1B
  5426                           
  5427  003B                     I2C_BufferRead@status:	
  5428                           ; 1 bytes @ 0x1B
  5429                           
  5430  003B                     ___ftdiv@cntr:	
  5431                           ; 1 bytes @ 0x1B
  5432                           
  5433                           
  5434                           ; 1 bytes @ 0x1B
  5435  003B                     	ds	1
  5436  003C                     ??_BMP_init:	
  5437  003C                     ?_HMC5883L_I2C_BufferRead:	
  5438                           ; 1 bytes @ 0x1C
  5439                           
  5440  003C                     HMC5883L_I2C_BufferRead@pBuffer:	
  5441                           ; 1 bytes @ 0x1C
  5442                           
  5443  003C                     ___ftdiv@f3:	
  5444                           ; 2 bytes @ 0x1C
  5445                           
  5446                           
  5447                           ; 3 bytes @ 0x1C
  5448  003C                     	ds	1
  5449  003D                     HMC5883L_I2C_ByteWrite@slaveAddr:	
  5450                           
  5451                           ; 1 bytes @ 0x1D
  5452  003D                     	ds	1
  5453  003E                     ??_HMC5883L_SetGain:	
  5454  003E                     ??_HMC5883L_SetMode:	
  5455                           ; 1 bytes @ 0x1E
  5456                           
  5457  003E                     HMC5883L_I2C_BufferRead@ReadAddr:	
  5458                           ; 1 bytes @ 0x1E
  5459                           
  5460                           
  5461                           ; 1 bytes @ 0x1E
  5462  003E                     	ds	1
  5463  003F                     BMP_init@t:	
  5464  003F                     ___ftdiv@exp:	
  5465                           ; 1 bytes @ 0x1F
  5466                           
  5467  003F                     HMC5883L_I2C_BufferRead@NumByteToRead:	
  5468                           ; 1 bytes @ 0x1F
  5469                           
  5470                           
  5471                           ; 2 bytes @ 0x1F
  5472  003F                     	ds	1
  5473  0040                     HMC5883L_SetGain@gain:	
  5474  0040                     HMC5883L_SetMode@newMode:	
  5475                           ; 1 bytes @ 0x20
  5476                           
  5477  0040                     ___ftdiv@sign:	
  5478                           ; 1 bytes @ 0x20
  5479                           
  5480                           
  5481                           ; 1 bytes @ 0x20
  5482  0040                     	ds	1
  5483  0041                     ??_HMC5883L_I2C_BufferRead:	
  5484  0041                     ?_Sensor_getSupplyVoltage:	
  5485                           ; 1 bytes @ 0x21
  5486                           
  5487  0041                     ?___ftneg:	
  5488                           ; 3 bytes @ 0x21
  5489                           
  5490  0041                     HMC5883L_SetGain@tmp:	
  5491                           ; 3 bytes @ 0x21
  5492                           
  5493  0041                     HMC5883L_SetMode@tmp:	
  5494                           ; 1 bytes @ 0x21
  5495                           
  5496  0041                     ___ftneg@f1:	
  5497                           ; 1 bytes @ 0x21
  5498                           
  5499                           
  5500                           ; 3 bytes @ 0x21
  5501  0041                     	ds	1
  5502  0042                     ??_HMC5883L_Initialize:	
  5503  0042                     HMC5883L_I2C_BufferRead@slaveAddr:	
  5504                           ; 1 bytes @ 0x22
  5505                           
  5506                           
  5507                           ; 1 bytes @ 0x22
  5508  0042                     	ds	1
  5509  0043                     ?_HMC5883L_WriteBits:	
  5510  0043                     ?_HMC5883L_ReadBits:	
  5511                           ; 1 bytes @ 0x23
  5512                           
  5513  0043                     HMC5883L_Initialize@tmp:	
  5514                           ; 1 bytes @ 0x23
  5515                           
  5516  0043                     HMC5883L_WriteBits@regAddr:	
  5517                           ; 1 bytes @ 0x23
  5518                           
  5519  0043                     HMC5883L_ReadBits@regAddr:	
  5520                           ; 1 bytes @ 0x23
  5521                           
  5522                           
  5523                           ; 1 bytes @ 0x23
  5524  0043                     	ds	1
  5525  0044                     ??_Sensor_getSupplyVoltage:	
  5526  0044                     ??___ftneg:	
  5527                           ; 1 bytes @ 0x24
  5528                           
  5529  0044                     ?_fabs:	
  5530                           ; 1 bytes @ 0x24
  5531                           
  5532  0044                     HMC5883L_WriteBits@bitStart:	
  5533                           ; 3 bytes @ 0x24
  5534                           
  5535  0044                     HMC5883L_ReadBits@bitStart:	
  5536                           ; 1 bytes @ 0x24
  5537                           
  5538  0044                     Sensor_getSupplyVoltage@voltage:	
  5539                           ; 1 bytes @ 0x24
  5540                           
  5541  0044                     fabs@d:	
  5542                           ; 3 bytes @ 0x24
  5543                           
  5544                           
  5545                           ; 3 bytes @ 0x24
  5546  0044                     	ds	1
  5547  0045                     HMC5883L_WriteBits@length:	
  5548  0045                     HMC5883L_ReadBits@length:	
  5549                           ; 1 bytes @ 0x25
  5550                           
  5551                           
  5552                           ; 1 bytes @ 0x25
  5553  0045                     	ds	1
  5554  0046                     HMC5883L_WriteBits@data:	
  5555  0046                     HMC5883L_ReadBits@data:	
  5556                           ; 1 bytes @ 0x26
  5557                           
  5558                           
  5559                           ; 1 bytes @ 0x26
  5560  0046                     	ds	1
  5561  0047                     ??_HMC5883L_WriteBits:	
  5562  0047                     ??_HMC5883L_ReadBits:	
  5563                           ; 1 bytes @ 0x27
  5564                           
  5565  0047                     ??_fabs:	
  5566                           ; 1 bytes @ 0x27
  5567                           
  5568  0047                     Sensor_getSupplyVoltage@res:	
  5569                           ; 1 bytes @ 0x27
  5570                           
  5571                           
  5572                           ; 2 bytes @ 0x27
  5573  0047                     	ds	2
  5574  0049                     ?___ftmul:	
  5575  0049                     ___ftmul@f1:	
  5576                           ; 3 bytes @ 0x29
  5577                           
  5578                           
  5579                           ; 3 bytes @ 0x29
  5580  0049                     	ds	1
  5581  004A                     HMC5883L_WriteBits@slaveAddr:	
  5582  004A                     HMC5883L_ReadBits@slaveAddr:	
  5583                           ; 1 bytes @ 0x2A
  5584                           
  5585                           
  5586                           ; 1 bytes @ 0x2A
  5587  004A                     	ds	1
  5588  004B                     HMC5883L_WriteBits@mask:	
  5589  004B                     HMC5883L_ReadBits@mask:	
  5590                           ; 1 bytes @ 0x2B
  5591                           
  5592                           
  5593                           ; 1 bytes @ 0x2B
  5594  004B                     	ds	1
  5595  004C                     HMC5883L_WriteBits@tmp:	
  5596  004C                     HMC5883L_ReadBits@tmp:	
  5597                           ; 1 bytes @ 0x2C
  5598                           
  5599  004C                     ___ftmul@f2:	
  5600                           ; 1 bytes @ 0x2C
  5601                           
  5602                           
  5603                           ; 3 bytes @ 0x2C
  5604  004C                     	ds	1
  5605  004D                     ??_HMC5883L_WakeUp:	
  5606                           
  5607                           ; 1 bytes @ 0x2D
  5608  004D                     	ds	1
  5609  004E                     ??_HMC5883L_GetHeading:	
  5610                           
  5611                           ; 1 bytes @ 0x2E
  5612  004E                     	ds	1
  5613  004F                     ??___ftmul:	
  5614                           
  5615                           ; 1 bytes @ 0x2F
  5616  004F                     	ds	2
  5617  0051                     HMC5883L_GetHeading@Mag:	
  5618                           
  5619                           ; 1 bytes @ 0x31
  5620  0051                     	ds	1
  5621  0052                     HMC5883L_GetHeading@status:	
  5622                           
  5623                           ; 1 bytes @ 0x32
  5624  0052                     	ds	1
  5625  0053                     HMC5883L_GetHeading@tmp:	
  5626  0053                     ___ftmul@exp:	
  5627                           ; 1 bytes @ 0x33
  5628                           
  5629                           
  5630                           ; 1 bytes @ 0x33
  5631  0053                     	ds	1
  5632  0054                     HMC5883L_GetHeading@i:	
  5633  0054                     ___ftmul@f3_as_product:	
  5634                           ; 2 bytes @ 0x34
  5635                           
  5636                           
  5637                           ; 3 bytes @ 0x34
  5638  0054                     	ds	3
  5639  0057                     ___ftmul@cntr:	
  5640                           
  5641                           ; 1 bytes @ 0x37
  5642  0057                     	ds	1
  5643  0058                     ___ftmul@sign:	
  5644                           
  5645                           ; 1 bytes @ 0x38
  5646  0058                     	ds	1
  5647  0059                     ?___ftadd:	
  5648  0059                     ___ftadd@f1:	
  5649                           ; 3 bytes @ 0x39
  5650                           
  5651                           
  5652                           ; 3 bytes @ 0x39
  5653  0059                     	ds	3
  5654  005C                     ___ftadd@f2:	
  5655                           
  5656                           ; 3 bytes @ 0x3C
  5657  005C                     	ds	3
  5658  005F                     ??___ftadd:	
  5659                           
  5660                           ; 1 bytes @ 0x3F
  5661  005F                     	ds	4
  5662  0063                     ___ftadd@sign:	
  5663                           
  5664                           ; 1 bytes @ 0x43
  5665  0063                     	ds	1
  5666  0064                     ___ftadd@exp2:	
  5667                           
  5668                           ; 1 bytes @ 0x44
  5669  0064                     	ds	1
  5670  0065                     ___ftadd@exp1:	
  5671                           
  5672                           ; 1 bytes @ 0x45
  5673  0065                     	ds	1
  5674  0066                     ?_eval_poly:	
  5675  0066                     ?___ftsub:	
  5676                           ; 3 bytes @ 0x46
  5677                           
  5678  0066                     ?___fttol:	
  5679                           ; 3 bytes @ 0x46
  5680                           
  5681  0066                     ___ftsub@f2:	
  5682                           ; 4 bytes @ 0x46
  5683                           
  5684  0066                     ___fttol@f1:	
  5685                           ; 3 bytes @ 0x46
  5686                           
  5687  0066                     eval_poly@x:	
  5688                           ; 3 bytes @ 0x46
  5689                           
  5690                           
  5691                           ; 3 bytes @ 0x46
  5692  0066                     	ds	3
  5693  0069                     eval_poly@d:	
  5694  0069                     ___ftsub@f1:	
  5695                           ; 2 bytes @ 0x49
  5696                           
  5697                           
  5698                           ; 3 bytes @ 0x49
  5699  0069                     	ds	1
  5700  006A                     ??___fttol:	
  5701                           
  5702                           ; 1 bytes @ 0x4A
  5703  006A                     	ds	1
  5704  006B                     eval_poly@n:	
  5705                           
  5706                           ; 2 bytes @ 0x4B
  5707  006B                     	ds	1
  5708  006C                     ??___ftsub:	
  5709                           
  5710                           ; 1 bytes @ 0x4C
  5711  006C                     	ds	1
  5712  006D                     ??_atan:	
  5713  006D                     ??_eval_poly:	
  5714                           ; 1 bytes @ 0x4D
  5715                           
  5716                           
  5717                           ; 1 bytes @ 0x4D
  5718  006D                     	ds	1
  5719  006E                     ??_atan2:	
  5720  006E                     ??_HMC5883L_GetCompassDirection:	
  5721                           ; 1 bytes @ 0x4E
  5722                           
  5723                           
  5724                           	psect	maintext
  5725  0557                     __pmaintext:	
  5726                           ; 1 bytes @ 0x4E
  5727 ;;
  5728 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
  5729 ;;
  5730 ;; *************** function _main *****************
  5731 ;; Defined at:
  5732 ;;		line 58 in file "main.c"
  5733 ;; Parameters:    Size  Location     Type
  5734 ;;		None
  5735 ;; Auto vars:     Size  Location     Type
  5736 ;;  doorOpenTime    4    5[BANK3 ] unsigned long 
  5737 ;;  doorClosedUp    4    0[BANK3 ] unsigned long 
  5738 ;;  doorStatus      1    9[BANK3 ] enum E3332
  5739 ;;  prevDoorStat    1    4[BANK3 ] enum E3332
  5740 ;; Return value:  Size  Location     Type
  5741 ;;                  1    wreg      void 
  5742 ;; Registers used:
  5743 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5744 ;; Tracked objects:
  5745 ;;		On entry : B1F/0
  5746 ;;		On exit  : 0/0
  5747 ;;		Unchanged: 0/0
  5748 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5749 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5750 ;;      Locals:         0       0       0       0      10       0       0       0       0       0       0       0       
      +0       0
  5751 ;;      Temps:          0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
  5752 ;;      Totals:         0       0       2       0      10       0       0       0       0       0       0       0       
      +0       0
  5753 ;;Total ram usage:       12 bytes
  5754 ;; Hardware stack levels required when called:   13
  5755 ;; This function calls:
  5756 ;;		_BMP_init
  5757 ;;		_BMP_readTemperature
  5758 ;;		_DOOR_init
  5759 ;;		_DOOR_resetPos
  5760 ;;		_DOOR_run
  5761 ;;		_HMC5883L_Initialize
  5762 ;;		_SYSTEM_Initialize
  5763 ;;		_Sensor_peripheralSleep
  5764 ;;		_Wireless_init
  5765 ;;		_Wireless_packageData
  5766 ;;		_Wireless_sleep
  5767 ;;		_Wireless_wake
  5768 ;;		___lldiv
  5769 ;; This function is called by:
  5770 ;;		Startup code after reset
  5771 ;; This function uses a non-reentrant model
  5772 ;;
  5773                           
  5774                           
  5775                           ;psect for function _main
  5776  0557                     _main:	
  5777                           
  5778                           ;main.c: 60: DOOR doorStatus=DOOR_CLOSED,prevDoorStatus=DOOR_CLOSED;
  5779                           
  5780                           ;incstack = 0
  5781                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  5782  0557  0023               	movlb	3	; select bank3
  5783  0558  01E0               	clrf	main@doorStatus^(0+384)
  5784  0559  01DB               	clrf	main@prevDoorStatus^(0+384)
  5785                           
  5786                           ;main.c: 61: unsigned long doorClosedUpdateCounter=0;
  5787  055A  3000               	movlw	0
  5788  055B  00DA               	movwf	(main@doorClosedUpdateCounter+3)^(0+384)
  5789  055C  3000               	movlw	0
  5790  055D  00D9               	movwf	(main@doorClosedUpdateCounter+2)^(0+384)
  5791  055E  3000               	movlw	0
  5792  055F  00D8               	movwf	(main@doorClosedUpdateCounter+1)^(0+384)
  5793  0560  3000               	movlw	0
  5794  0561  00D7               	movwf	main@doorClosedUpdateCounter^(0+384)
  5795                           
  5796                           ;main.c: 62: unsigned long doorOpenTime=0;
  5797  0562  3000               	movlw	0
  5798  0563  00DF               	movwf	(main@doorOpenTime+3)^(0+384)
  5799  0564  3000               	movlw	0
  5800  0565  00DE               	movwf	(main@doorOpenTime+2)^(0+384)
  5801  0566  3000               	movlw	0
  5802  0567  00DD               	movwf	(main@doorOpenTime+1)^(0+384)
  5803  0568  3000               	movlw	0
  5804  0569  00DC               	movwf	main@doorOpenTime^(0+384)
  5805                           
  5806                           ;main.c: 65: SYSTEM_Initialize();
  5807  056A  3190  201F  3185   	fcall	_SYSTEM_Initialize
  5808                           
  5809                           ;main.c: 71: (INTCONbits.GIE = 1);
  5810  056D  178B               	bsf	11,7	;volatile
  5811                           
  5812                           ;main.c: 74: (INTCONbits.PEIE = 1);
  5813  056E  170B               	bsf	11,6	;volatile
  5814                           
  5815                           ;main.c: 81: do { WPUCbits.WPUC5 = 1; } while(0);
  5816  056F  0024               	movlb	4	; select bank4
  5817  0570  168E               	bsf	14,5	;volatile
  5818                           
  5819                           ;main.c: 82: _delay((unsigned long)((1000)*(8000000/4000.0)));
  5820  0571  300B               	movlw	11
  5821  0572  0021               	movlb	1	; select bank1
  5822  0573  00D9               	movwf	(??_main^(0+128)+1)
  5823  0574  3026               	movlw	38
  5824  0575  00D8               	movwf	??_main^(0+128)
  5825  0576  305D               	movlw	93
  5826  0577                     u7627:	
  5827  0577  0B89               	decfsz	9,f
  5828  0578  2D77               	goto	u7627
  5829  0579  0BD8               	decfsz	??_main^(0+128),f
  5830  057A  2D77               	goto	u7627
  5831  057B  0BD9               	decfsz	(??_main^(0+128)+1),f
  5832  057C  2D77               	goto	u7627
  5833  057D  3200               	nop2
  5834                           
  5835                           ;main.c: 83: Sensor_peripheralSleep();
  5836  057E  319D  257F  3185   	fcall	_Sensor_peripheralSleep
  5837                           
  5838                           ;main.c: 84: Wireless_init();
  5839  0581  3188  202E  3185   	fcall	_Wireless_init
  5840                           
  5841                           ;main.c: 85: BMP_init();
  5842  0584  3196  2627  3185   	fcall	_BMP_init
  5843                           
  5844                           ;main.c: 87: HMC5883L_Initialize();
  5845  0587  319F  272A  3185   	fcall	_HMC5883L_Initialize
  5846                           
  5847                           ;main.c: 92: DOOR_init();
  5848  058A  319D  25EE  3185   	fcall	_DOOR_init
  5849                           
  5850                           ;main.c: 93: do { LATCbits.LATC6 = 1; } while(0);
  5851  058D  0022               	movlb	2	; select bank2
  5852  058E  170E               	bsf	14,6	;volatile
  5853                           
  5854                           ;main.c: 94: _delay((unsigned long)((500)*(8000000/4000.0)));
  5855  058F  3006               	movlw	6
  5856  0590  0021               	movlb	1	; select bank1
  5857  0591  00D9               	movwf	(??_main^(0+128)+1)
  5858  0592  3013               	movlw	19
  5859  0593  00D8               	movwf	??_main^(0+128)
  5860  0594  30AD               	movlw	173
  5861  0595                     u7637:	
  5862  0595  0B89               	decfsz	9,f
  5863  0596  2D95               	goto	u7637
  5864  0597  0BD8               	decfsz	??_main^(0+128),f
  5865  0598  2D95               	goto	u7637
  5866  0599  0BD9               	decfsz	(??_main^(0+128)+1),f
  5867  059A  2D95               	goto	u7637
  5868  059B  3200               	nop2
  5869                           
  5870                           ;main.c: 95: do { LATCbits.LATC6 = 0; } while(0);
  5871  059C  0022               	movlb	2	; select bank2
  5872  059D  130E               	bcf	14,6	;volatile
  5873                           
  5874                           ;main.c: 96: Wireless_wake();
  5875  059E  3191  211E  3185   	fcall	_Wireless_wake
  5876                           
  5877                           ;main.c: 97: Wireless_packageData(doorStatus,doorOpenTime/1000,BMP_readTemperature());
  5878  05A1  3000               	movlw	0
  5879  05A2  0020               	movlb	0	; select bank0
  5880  05A3  00A4               	movwf	___lldiv@divisor+3
  5881  05A4  3000               	movlw	0
  5882  05A5  00A3               	movwf	___lldiv@divisor+2
  5883  05A6  3003               	movlw	3
  5884  05A7  00A2               	movwf	___lldiv@divisor+1
  5885  05A8  30E8               	movlw	232
  5886  05A9  00A1               	movwf	___lldiv@divisor
  5887  05AA  0023               	movlb	3	; select bank3
  5888  05AB  085F               	movf	(main@doorOpenTime+3)^(0+384),w
  5889  05AC  0020               	movlb	0	; select bank0
  5890  05AD  00A8               	movwf	___lldiv@dividend+3
  5891  05AE  0023               	movlb	3	; select bank3
  5892  05AF  085E               	movf	(main@doorOpenTime+2)^(0+384),w
  5893  05B0  0020               	movlb	0	; select bank0
  5894  05B1  00A7               	movwf	___lldiv@dividend+2
  5895  05B2  0023               	movlb	3	; select bank3
  5896  05B3  085D               	movf	(main@doorOpenTime+1)^(0+384),w
  5897  05B4  0020               	movlb	0	; select bank0
  5898  05B5  00A6               	movwf	___lldiv@dividend+1
  5899  05B6  0023               	movlb	3	; select bank3
  5900  05B7  085C               	movf	main@doorOpenTime^(0+384),w
  5901  05B8  0020               	movlb	0	; select bank0
  5902  05B9  00A5               	movwf	___lldiv@dividend
  5903  05BA  3194  24BC  3185   	fcall	___lldiv
  5904  05BD  0020               	movlb	0	; select bank0
  5905  05BE  0821               	movf	?___lldiv,w
  5906  05BF  0021               	movlb	1	; select bank1
  5907  05C0  00D8               	movwf	??_main^(0+128)
  5908  05C1  0858               	movf	??_main^(0+128),w
  5909  05C2  00BA               	movwf	Wireless_packageData@openTime^(0+128)
  5910  05C3  3180  206F  3185   	fcall	_BMP_readTemperature
  5911  05C6  0021               	movlb	1	; select bank1
  5912  05C7  0826               	movf	?_BMP_readTemperature^(0+128),w
  5913  05C8  00BB               	movwf	Wireless_packageData@tempC^(0+128)
  5914  05C9  0827               	movf	(?_BMP_readTemperature+1)^(0+128),w
  5915  05CA  00BC               	movwf	(Wireless_packageData@tempC+1)^(0+128)
  5916  05CB  0828               	movf	(?_BMP_readTemperature+2)^(0+128),w
  5917  05CC  00BD               	movwf	(Wireless_packageData@tempC+2)^(0+128)
  5918  05CD  0023               	movlb	3	; select bank3
  5919  05CE  0860               	movf	main@doorStatus^(0+384),w
  5920  05CF  3187  271F  3185   	fcall	_Wireless_packageData
  5921                           
  5922                           ;main.c: 98: Wireless_sleep();
  5923  05D2  319F  279A  3185   	fcall	_Wireless_sleep
  5924  05D5                     l7146:	
  5925                           ;main.c: 100: while (1)
  5926                           
  5927                           
  5928                           ;main.c: 101: {
  5929                           ;main.c: 102: if(PORTCbits.RC5==0)
  5930  05D5  0020               	movlb	0	; select bank0
  5931  05D6  1A8E               	btfsc	14,5	;volatile
  5932  05D7  2E29               	goto	l7162
  5933                           
  5934                           ;main.c: 103: {
  5935                           ;main.c: 104: doorStatus=DOOR_resetPos();
  5936  05D8  3190  2000  3185   	fcall	_DOOR_resetPos
  5937  05DB  0021               	movlb	1	; select bank1
  5938  05DC  00D8               	movwf	??_main^(0+128)
  5939  05DD  0858               	movf	??_main^(0+128),w
  5940  05DE  0023               	movlb	3	; select bank3
  5941  05DF  00E0               	movwf	main@doorStatus^(0+384)
  5942                           
  5943                           ;main.c: 105: do { LATCbits.LATC6 = 1; } while(0);
  5944  05E0  0022               	movlb	2	; select bank2
  5945  05E1  170E               	bsf	14,6	;volatile
  5946                           
  5947                           ;main.c: 106: _delay((unsigned long)((500)*(8000000/4000.0)));
  5948  05E2  3006               	movlw	6
  5949  05E3  0021               	movlb	1	; select bank1
  5950  05E4  00D9               	movwf	(??_main^(0+128)+1)
  5951  05E5  3013               	movlw	19
  5952  05E6  00D8               	movwf	??_main^(0+128)
  5953  05E7  30AD               	movlw	173
  5954  05E8                     u7647:	
  5955  05E8  0B89               	decfsz	9,f
  5956  05E9  2DE8               	goto	u7647
  5957  05EA  0BD8               	decfsz	??_main^(0+128),f
  5958  05EB  2DE8               	goto	u7647
  5959  05EC  0BD9               	decfsz	(??_main^(0+128)+1),f
  5960  05ED  2DE8               	goto	u7647
  5961  05EE  3200               	nop2
  5962                           
  5963                           ;main.c: 107: do { LATCbits.LATC6 = 0; } while(0);
  5964  05EF  0022               	movlb	2	; select bank2
  5965  05F0  130E               	bcf	14,6	;volatile
  5966                           
  5967                           ;main.c: 108: Wireless_wake();
  5968  05F1  3191  211E  3185   	fcall	_Wireless_wake
  5969                           
  5970                           ;main.c: 109: Wireless_packageData(doorStatus,doorOpenTime/1000,BMP_readTemperature());
  5971  05F4  3000               	movlw	0
  5972  05F5  0020               	movlb	0	; select bank0
  5973  05F6  00A4               	movwf	___lldiv@divisor+3
  5974  05F7  3000               	movlw	0
  5975  05F8  00A3               	movwf	___lldiv@divisor+2
  5976  05F9  3003               	movlw	3
  5977  05FA  00A2               	movwf	___lldiv@divisor+1
  5978  05FB  30E8               	movlw	232
  5979  05FC  00A1               	movwf	___lldiv@divisor
  5980  05FD  0023               	movlb	3	; select bank3
  5981  05FE  085F               	movf	(main@doorOpenTime+3)^(0+384),w
  5982  05FF  0020               	movlb	0	; select bank0
  5983  0600  00A8               	movwf	___lldiv@dividend+3
  5984  0601  0023               	movlb	3	; select bank3
  5985  0602  085E               	movf	(main@doorOpenTime+2)^(0+384),w
  5986  0603  0020               	movlb	0	; select bank0
  5987  0604  00A7               	movwf	___lldiv@dividend+2
  5988  0605  0023               	movlb	3	; select bank3
  5989  0606  085D               	movf	(main@doorOpenTime+1)^(0+384),w
  5990  0607  0020               	movlb	0	; select bank0
  5991  0608  00A6               	movwf	___lldiv@dividend+1
  5992  0609  0023               	movlb	3	; select bank3
  5993  060A  085C               	movf	main@doorOpenTime^(0+384),w
  5994  060B  0020               	movlb	0	; select bank0
  5995  060C  00A5               	movwf	___lldiv@dividend
  5996  060D  3194  24BC  3185   	fcall	___lldiv
  5997  0610  0020               	movlb	0	; select bank0
  5998  0611  0821               	movf	?___lldiv,w
  5999  0612  0021               	movlb	1	; select bank1
  6000  0613  00D8               	movwf	??_main^(0+128)
  6001  0614  0858               	movf	??_main^(0+128),w
  6002  0615  00BA               	movwf	Wireless_packageData@openTime^(0+128)
  6003  0616  3180  206F  3185   	fcall	_BMP_readTemperature
  6004  0619  0021               	movlb	1	; select bank1
  6005  061A  0826               	movf	?_BMP_readTemperature^(0+128),w
  6006  061B  00BB               	movwf	Wireless_packageData@tempC^(0+128)
  6007  061C  0827               	movf	(?_BMP_readTemperature+1)^(0+128),w
  6008  061D  00BC               	movwf	(Wireless_packageData@tempC+1)^(0+128)
  6009  061E  0828               	movf	(?_BMP_readTemperature+2)^(0+128),w
  6010  061F  00BD               	movwf	(Wireless_packageData@tempC+2)^(0+128)
  6011  0620  0023               	movlb	3	; select bank3
  6012  0621  0860               	movf	main@doorStatus^(0+384),w
  6013  0622  3187  271F  3185   	fcall	_Wireless_packageData
  6014                           
  6015                           ;main.c: 110: Wireless_sleep();
  6016  0625  319F  279A  3185   	fcall	_Wireless_sleep
  6017                           
  6018                           ;main.c: 111: }
  6019  0628  2E31               	goto	l7164
  6020  0629                     l7162:	
  6021                           
  6022                           ;main.c: 112: else
  6023                           ;main.c: 113: doorStatus=DOOR_run();
  6024  0629  3189  212B  3185   	fcall	_DOOR_run
  6025  062C  0021               	movlb	1	; select bank1
  6026  062D  00D8               	movwf	??_main^(0+128)
  6027  062E  0858               	movf	??_main^(0+128),w
  6028  062F  0023               	movlb	3	; select bank3
  6029  0630  00E0               	movwf	main@doorStatus^(0+384)
  6030  0631                     l7164:	
  6031                           
  6032                           ;main.c: 116: if((doorStatus!=prevDoorStatus && doorStatus!=DOOR_ERROR) || doorClosedUpd
      +                          ateCounter>=sensorUpdatePeriod)
  6033  0631  0023               	movlb	3	; select bank3
  6034  0632  0860               	movf	main@doorStatus^(0+384),w
  6035  0633  065B               	xorwf	main@prevDoorStatus^(0+384),w
  6036  0634  1903               	skipnz
  6037  0635  2E3A               	goto	l7168
  6038  0636  3002               	movlw	2
  6039  0637  0660               	xorwf	main@doorStatus^(0+384),w
  6040  0638  1D03               	btfss	3,2
  6041  0639  2E52               	goto	l7170
  6042  063A                     l7168:	
  6043  063A  0022               	movlb	2	; select bank2
  6044  063B  0865               	movf	(_sensorUpdatePeriod+3)^(0+256),w
  6045  063C  0023               	movlb	3	; select bank3
  6046  063D  025A               	subwf	(main@doorClosedUpdateCounter+3)^(0+384),w
  6047  063E  1D03               	skipz
  6048  063F  2E50               	goto	u7375
  6049  0640  0022               	movlb	2	; select bank2
  6050  0641  0864               	movf	(_sensorUpdatePeriod+2)^(0+256),w
  6051  0642  0023               	movlb	3	; select bank3
  6052  0643  0259               	subwf	(main@doorClosedUpdateCounter+2)^(0+384),w
  6053  0644  1D03               	skipz
  6054  0645  2E50               	goto	u7375
  6055  0646  0022               	movlb	2	; select bank2
  6056  0647  0863               	movf	(_sensorUpdatePeriod+1)^(0+256),w
  6057  0648  0023               	movlb	3	; select bank3
  6058  0649  0258               	subwf	(main@doorClosedUpdateCounter+1)^(0+384),w
  6059  064A  1D03               	skipz
  6060  064B  2E50               	goto	u7375
  6061  064C  0022               	movlb	2	; select bank2
  6062  064D  0862               	movf	_sensorUpdatePeriod^(0+256),w
  6063  064E  0023               	movlb	3	; select bank3
  6064  064F  0257               	subwf	main@doorClosedUpdateCounter^(0+384),w
  6065  0650                     u7375:	
  6066  0650  1C03               	skipc
  6067  0651  2EAD               	goto	l7188
  6068  0652                     l7170:	
  6069                           
  6070                           ;main.c: 117: {
  6071                           ;main.c: 118: Wireless_wake();
  6072  0652  3191  211E  3185   	fcall	_Wireless_wake
  6073                           
  6074                           ;main.c: 119: Wireless_packageData(doorStatus,doorOpenTime/1000,BMP_readTemperature());
  6075  0655  3000               	movlw	0
  6076  0656  0020               	movlb	0	; select bank0
  6077  0657  00A4               	movwf	___lldiv@divisor+3
  6078  0658  3000               	movlw	0
  6079  0659  00A3               	movwf	___lldiv@divisor+2
  6080  065A  3003               	movlw	3
  6081  065B  00A2               	movwf	___lldiv@divisor+1
  6082  065C  30E8               	movlw	232
  6083  065D  00A1               	movwf	___lldiv@divisor
  6084  065E  0023               	movlb	3	; select bank3
  6085  065F  085F               	movf	(main@doorOpenTime+3)^(0+384),w
  6086  0660  0020               	movlb	0	; select bank0
  6087  0661  00A8               	movwf	___lldiv@dividend+3
  6088  0662  0023               	movlb	3	; select bank3
  6089  0663  085E               	movf	(main@doorOpenTime+2)^(0+384),w
  6090  0664  0020               	movlb	0	; select bank0
  6091  0665  00A7               	movwf	___lldiv@dividend+2
  6092  0666  0023               	movlb	3	; select bank3
  6093  0667  085D               	movf	(main@doorOpenTime+1)^(0+384),w
  6094  0668  0020               	movlb	0	; select bank0
  6095  0669  00A6               	movwf	___lldiv@dividend+1
  6096  066A  0023               	movlb	3	; select bank3
  6097  066B  085C               	movf	main@doorOpenTime^(0+384),w
  6098  066C  0020               	movlb	0	; select bank0
  6099  066D  00A5               	movwf	___lldiv@dividend
  6100  066E  3194  24BC  3185   	fcall	___lldiv
  6101  0671  0020               	movlb	0	; select bank0
  6102  0672  0821               	movf	?___lldiv,w
  6103  0673  0021               	movlb	1	; select bank1
  6104  0674  00D8               	movwf	??_main^(0+128)
  6105  0675  0858               	movf	??_main^(0+128),w
  6106  0676  00BA               	movwf	Wireless_packageData@openTime^(0+128)
  6107  0677  3180  206F  3185   	fcall	_BMP_readTemperature
  6108  067A  0021               	movlb	1	; select bank1
  6109  067B  0826               	movf	?_BMP_readTemperature^(0+128),w
  6110  067C  00BB               	movwf	Wireless_packageData@tempC^(0+128)
  6111  067D  0827               	movf	(?_BMP_readTemperature+1)^(0+128),w
  6112  067E  00BC               	movwf	(Wireless_packageData@tempC+1)^(0+128)
  6113  067F  0828               	movf	(?_BMP_readTemperature+2)^(0+128),w
  6114  0680  00BD               	movwf	(Wireless_packageData@tempC+2)^(0+128)
  6115  0681  0023               	movlb	3	; select bank3
  6116  0682  0860               	movf	main@doorStatus^(0+384),w
  6117  0683  3187  271F  3185   	fcall	_Wireless_packageData
  6118                           
  6119                           ;main.c: 120: Wireless_sleep();
  6120  0686  319F  279A  3185   	fcall	_Wireless_sleep
  6121                           
  6122                           ;main.c: 121: doorClosedUpdateCounter=0;
  6123  0689  3000               	movlw	0
  6124  068A  0023               	movlb	3	; select bank3
  6125  068B  00DA               	movwf	(main@doorClosedUpdateCounter+3)^(0+384)
  6126  068C  3000               	movlw	0
  6127  068D  00D9               	movwf	(main@doorClosedUpdateCounter+2)^(0+384)
  6128  068E  3000               	movlw	0
  6129  068F  00D8               	movwf	(main@doorClosedUpdateCounter+1)^(0+384)
  6130  0690  3000               	movlw	0
  6131  0691  00D7               	movwf	main@doorClosedUpdateCounter^(0+384)
  6132                           
  6133                           ;main.c: 122: doorOpenTime=0;
  6134  0692  3000               	movlw	0
  6135  0693  00DF               	movwf	(main@doorOpenTime+3)^(0+384)
  6136  0694  3000               	movlw	0
  6137  0695  00DE               	movwf	(main@doorOpenTime+2)^(0+384)
  6138  0696  3000               	movlw	0
  6139  0697  00DD               	movwf	(main@doorOpenTime+1)^(0+384)
  6140  0698  3000               	movlw	0
  6141  0699  00DC               	movwf	main@doorOpenTime^(0+384)
  6142                           
  6143                           ;main.c: 123: if(doorStatus==DOOR_OPEN && prevDoorStatus==DOOR_CLOSED)
  6144  069A  0360               	decf	main@doorStatus^(0+384),w
  6145  069B  1D03               	btfss	3,2
  6146  069C  2EAD               	goto	l7188
  6147  069D  085B               	movf	main@prevDoorStatus^(0+384),w
  6148  069E  1D03               	btfss	3,2
  6149  069F  2EAD               	goto	l7188
  6150                           
  6151                           ;main.c: 124: {
  6152                           ;main.c: 125: do { LATCbits.LATC6 = 1; } while(0);
  6153  06A0  0022               	movlb	2	; select bank2
  6154  06A1  170E               	bsf	14,6	;volatile
  6155                           
  6156                           ;main.c: 126: _delay((unsigned long)((50)*(8000000/4000.0)));
  6157  06A2  3082               	movlw	130
  6158  06A3  0021               	movlb	1	; select bank1
  6159  06A4  00D8               	movwf	??_main^(0+128)
  6160  06A5  30DD               	movlw	221
  6161  06A6                     u7657:	
  6162  06A6  0B89               	decfsz	9,f
  6163  06A7  2EA6               	goto	u7657
  6164  06A8  0BD8               	decfsz	??_main^(0+128),f
  6165  06A9  2EA6               	goto	u7657
  6166  06AA  3200               	nop2
  6167                           
  6168                           ;main.c: 127: do { LATCbits.LATC6 = 0; } while(0);
  6169  06AB  0022               	movlb	2	; select bank2
  6170  06AC  130E               	bcf	14,6	;volatile
  6171  06AD                     l7188:	
  6172                           
  6173                           ;main.c: 128: }
  6174                           ;main.c: 129: }
  6175                           ;main.c: 131: if(doorStatus==DOOR_OPEN)
  6176  06AD  0023               	movlb	3	; select bank3
  6177  06AE  0360               	decf	main@doorStatus^(0+384),w
  6178  06AF  1D03               	btfss	3,2
  6179  06B0  2F07               	goto	l7204
  6180                           
  6181                           ;main.c: 132: {
  6182                           ;main.c: 133: if(doorOpenTime>=60000)
  6183  06B1  085F               	movf	(main@doorOpenTime+3)^(0+384),w
  6184  06B2  1D03               	btfss	3,2
  6185  06B3  2EBD               	goto	l7192
  6186  06B4  085E               	movf	(main@doorOpenTime+2)^(0+384),w
  6187  06B5  1D03               	btfss	3,2
  6188  06B6  2EBD               	goto	l7192
  6189  06B7  3060               	movlw	96
  6190  06B8  025C               	subwf	main@doorOpenTime^(0+384),w
  6191  06B9  30EA               	movlw	234
  6192  06BA  3B5D               	subwfb	(main@doorOpenTime+1)^(0+384),w
  6193  06BB  1C03               	btfss	3,0
  6194  06BC  2EFE               	goto	l7202
  6195  06BD                     l7192:	
  6196                           
  6197                           ;main.c: 134: {
  6198                           ;main.c: 135: Wireless_wake();
  6199  06BD  3191  211E  3185   	fcall	_Wireless_wake
  6200                           
  6201                           ;main.c: 136: Wireless_packageData(doorStatus,doorOpenTime/1000,BMP_readTemperature());
  6202  06C0  3000               	movlw	0
  6203  06C1  0020               	movlb	0	; select bank0
  6204  06C2  00A4               	movwf	___lldiv@divisor+3
  6205  06C3  3000               	movlw	0
  6206  06C4  00A3               	movwf	___lldiv@divisor+2
  6207  06C5  3003               	movlw	3
  6208  06C6  00A2               	movwf	___lldiv@divisor+1
  6209  06C7  30E8               	movlw	232
  6210  06C8  00A1               	movwf	___lldiv@divisor
  6211  06C9  0023               	movlb	3	; select bank3
  6212  06CA  085F               	movf	(main@doorOpenTime+3)^(0+384),w
  6213  06CB  0020               	movlb	0	; select bank0
  6214  06CC  00A8               	movwf	___lldiv@dividend+3
  6215  06CD  0023               	movlb	3	; select bank3
  6216  06CE  085E               	movf	(main@doorOpenTime+2)^(0+384),w
  6217  06CF  0020               	movlb	0	; select bank0
  6218  06D0  00A7               	movwf	___lldiv@dividend+2
  6219  06D1  0023               	movlb	3	; select bank3
  6220  06D2  085D               	movf	(main@doorOpenTime+1)^(0+384),w
  6221  06D3  0020               	movlb	0	; select bank0
  6222  06D4  00A6               	movwf	___lldiv@dividend+1
  6223  06D5  0023               	movlb	3	; select bank3
  6224  06D6  085C               	movf	main@doorOpenTime^(0+384),w
  6225  06D7  0020               	movlb	0	; select bank0
  6226  06D8  00A5               	movwf	___lldiv@dividend
  6227  06D9  3194  24BC  3185   	fcall	___lldiv
  6228  06DC  0020               	movlb	0	; select bank0
  6229  06DD  0821               	movf	?___lldiv,w
  6230  06DE  0021               	movlb	1	; select bank1
  6231  06DF  00D8               	movwf	??_main^(0+128)
  6232  06E0  0858               	movf	??_main^(0+128),w
  6233  06E1  00BA               	movwf	Wireless_packageData@openTime^(0+128)
  6234  06E2  3180  206F  3185   	fcall	_BMP_readTemperature
  6235  06E5  0021               	movlb	1	; select bank1
  6236  06E6  0826               	movf	?_BMP_readTemperature^(0+128),w
  6237  06E7  00BB               	movwf	Wireless_packageData@tempC^(0+128)
  6238  06E8  0827               	movf	(?_BMP_readTemperature+1)^(0+128),w
  6239  06E9  00BC               	movwf	(Wireless_packageData@tempC+1)^(0+128)
  6240  06EA  0828               	movf	(?_BMP_readTemperature+2)^(0+128),w
  6241  06EB  00BD               	movwf	(Wireless_packageData@tempC+2)^(0+128)
  6242  06EC  0023               	movlb	3	; select bank3
  6243  06ED  0860               	movf	main@doorStatus^(0+384),w
  6244  06EE  3187  271F  3185   	fcall	_Wireless_packageData
  6245                           
  6246                           ;main.c: 137: Wireless_sleep();
  6247  06F1  319F  279A  3185   	fcall	_Wireless_sleep
  6248                           
  6249                           ;main.c: 138: doorClosedUpdateCounter=0;
  6250  06F4  3000               	movlw	0
  6251  06F5  0023               	movlb	3	; select bank3
  6252  06F6  00DA               	movwf	(main@doorClosedUpdateCounter+3)^(0+384)
  6253  06F7  3000               	movlw	0
  6254  06F8  00D9               	movwf	(main@doorClosedUpdateCounter+2)^(0+384)
  6255  06F9  3000               	movlw	0
  6256  06FA  00D8               	movwf	(main@doorClosedUpdateCounter+1)^(0+384)
  6257  06FB  3000               	movlw	0
  6258  06FC  00D7               	movwf	main@doorClosedUpdateCounter^(0+384)
  6259  06FD  2F07               	goto	l7204
  6260  06FE                     l7202:	
  6261                           ;main.c: 140: }
  6262                           
  6263                           ;main.c: 139: doorOpenTime=0;
  6264                           
  6265                           
  6266                           ;main.c: 141: else
  6267                           ;main.c: 142: doorOpenTime+=500;
  6268  06FE  30F4               	movlw	244
  6269  06FF  07DC               	addwf	main@doorOpenTime^(0+384),f
  6270  0700  3001               	movlw	1
  6271  0701  3DDD               	addwfc	(main@doorOpenTime+1)^(0+384),f
  6272  0702  3000               	movlw	0
  6273  0703  3DDE               	addwfc	(main@doorOpenTime+2)^(0+384),f
  6274  0704  3000               	movlw	0
  6275  0705  3DDF               	addwfc	(main@doorOpenTime+3)^(0+384),f
  6276                           
  6277                           ;main.c: 144: }
  6278  0706  2F0F               	goto	l618
  6279  0707                     l7204:	
  6280                           
  6281                           ;main.c: 145: else
  6282                           ;main.c: 146: {
  6283                           ;main.c: 148: doorOpenTime=0;
  6284  0707  3000               	movlw	0
  6285  0708  00DF               	movwf	(main@doorOpenTime+3)^(0+384)
  6286  0709  3000               	movlw	0
  6287  070A  00DE               	movwf	(main@doorOpenTime+2)^(0+384)
  6288  070B  3000               	movlw	0
  6289  070C  00DD               	movwf	(main@doorOpenTime+1)^(0+384)
  6290  070D  3000               	movlw	0
  6291  070E  00DC               	movwf	main@doorOpenTime^(0+384)
  6292  070F                     l618:	
  6293                           
  6294                           ;main.c: 149: }
  6295                           ;main.c: 151: prevDoorStatus=doorStatus;
  6296  070F  0860               	movf	main@doorStatus^(0+384),w
  6297  0710  0021               	movlb	1	; select bank1
  6298  0711  00D8               	movwf	??_main^(0+128)
  6299  0712  0858               	movf	??_main^(0+128),w
  6300  0713  0023               	movlb	3	; select bank3
  6301  0714  00DB               	movwf	main@prevDoorStatus^(0+384)
  6302                           
  6303                           ;main.c: 152: doorClosedUpdateCounter+=500;
  6304  0715  30F4               	movlw	244
  6305  0716  07D7               	addwf	main@doorClosedUpdateCounter^(0+384),f
  6306  0717  3001               	movlw	1
  6307  0718  3DD8               	addwfc	(main@doorClosedUpdateCounter+1)^(0+384),f
  6308  0719  3000               	movlw	0
  6309  071A  3DD9               	addwfc	(main@doorClosedUpdateCounter+2)^(0+384),f
  6310  071B  3000               	movlw	0
  6311  071C  3DDA               	addwfc	(main@doorClosedUpdateCounter+3)^(0+384),f
  6312  071D  0063               	sleep	;# 
  6313  071E  2DD5               	goto	l7146
  6314  071F                     __end_of_main:	
  6315                           
  6316                           	psect	text1
  6317  14BC                     __ptext1:	
  6318 ;; *************** function ___lldiv *****************
  6319 ;; Defined at:
  6320 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\lldiv.c"
  6321 ;; Parameters:    Size  Location     Type
  6322 ;;  divisor         4    1[BANK0 ] unsigned long 
  6323 ;;  dividend        4    5[BANK0 ] unsigned long 
  6324 ;; Auto vars:     Size  Location     Type
  6325 ;;  quotient        4   10[BANK0 ] unsigned long 
  6326 ;;  counter         1   14[BANK0 ] unsigned char 
  6327 ;; Return value:  Size  Location     Type
  6328 ;;                  4    1[BANK0 ] unsigned long 
  6329 ;; Registers used:
  6330 ;;		wreg, status,2, status,0
  6331 ;; Tracked objects:
  6332 ;;		On entry : 0/0
  6333 ;;		On exit  : 0/0
  6334 ;;		Unchanged: 0/0
  6335 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6336 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6337 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6338 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6339 ;;      Totals:         0      14       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6340 ;;Total ram usage:       14 bytes
  6341 ;; Hardware stack levels used:    1
  6342 ;; Hardware stack levels required when called:    4
  6343 ;; This function calls:
  6344 ;;		Nothing
  6345 ;; This function is called by:
  6346 ;;		_main
  6347 ;; This function uses a non-reentrant model
  6348 ;;
  6349                           
  6350                           
  6351                           ;psect for function ___lldiv
  6352  14BC                     ___lldiv:	
  6353                           
  6354                           ;incstack = 0
  6355                           ; Regs used in ___lldiv: [wreg+status,2+status,0]
  6356  14BC  3000               	movlw	0
  6357  14BD  0020               	movlb	0	; select bank0
  6358  14BE  00AD               	movwf	___lldiv@quotient+3
  6359  14BF  3000               	movlw	0
  6360  14C0  00AC               	movwf	___lldiv@quotient+2
  6361  14C1  3000               	movlw	0
  6362  14C2  00AB               	movwf	___lldiv@quotient+1
  6363  14C3  3000               	movlw	0
  6364  14C4  00AA               	movwf	___lldiv@quotient
  6365  14C5  0824               	movf	___lldiv@divisor+3,w
  6366  14C6  0423               	iorwf	___lldiv@divisor+2,w
  6367  14C7  0422               	iorwf	___lldiv@divisor+1,w
  6368  14C8  0421               	iorwf	___lldiv@divisor,w
  6369  14C9  1903               	skipnz
  6370  14CA  2D06               	goto	l7052
  6371  14CB  01AE               	clrf	___lldiv@counter
  6372  14CC  0AAE               	incf	___lldiv@counter,f
  6373  14CD                     l7038:	
  6374  14CD  1BA4               	btfsc	___lldiv@divisor+3,7
  6375  14CE  2CDB               	goto	l7040
  6376  14CF  3001               	movlw	1
  6377  14D0                     u7115:	
  6378  14D0  35A1               	lslf	___lldiv@divisor,f
  6379  14D1  0DA2               	rlf	___lldiv@divisor+1,f
  6380  14D2  0DA3               	rlf	___lldiv@divisor+2,f
  6381  14D3  0DA4               	rlf	___lldiv@divisor+3,f
  6382  14D4  0B89               	decfsz	9,f
  6383  14D5  2CD0               	goto	u7115
  6384  14D6  3001               	movlw	1
  6385  14D7  00A9               	movwf	??___lldiv
  6386  14D8  0829               	movf	??___lldiv,w
  6387  14D9  07AE               	addwf	___lldiv@counter,f
  6388  14DA  2CCD               	goto	l7038
  6389  14DB                     l7040:	
  6390  14DB  3001               	movlw	1
  6391  14DC                     u7135:	
  6392  14DC  35AA               	lslf	___lldiv@quotient,f
  6393  14DD  0DAB               	rlf	___lldiv@quotient+1,f
  6394  14DE  0DAC               	rlf	___lldiv@quotient+2,f
  6395  14DF  0DAD               	rlf	___lldiv@quotient+3,f
  6396  14E0  0B89               	decfsz	9,f
  6397  14E1  2CDC               	goto	u7135
  6398  14E2  0824               	movf	___lldiv@divisor+3,w
  6399  14E3  0228               	subwf	___lldiv@dividend+3,w
  6400  14E4  1D03               	skipz
  6401  14E5  2CF0               	goto	u7145
  6402  14E6  0823               	movf	___lldiv@divisor+2,w
  6403  14E7  0227               	subwf	___lldiv@dividend+2,w
  6404  14E8  1D03               	skipz
  6405  14E9  2CF0               	goto	u7145
  6406  14EA  0822               	movf	___lldiv@divisor+1,w
  6407  14EB  0226               	subwf	___lldiv@dividend+1,w
  6408  14EC  1D03               	skipz
  6409  14ED  2CF0               	goto	u7145
  6410  14EE  0821               	movf	___lldiv@divisor,w
  6411  14EF  0225               	subwf	___lldiv@dividend,w
  6412  14F0                     u7145:	
  6413  14F0  1C03               	skipc
  6414  14F1  2CFB               	goto	l7048
  6415  14F2  0821               	movf	___lldiv@divisor,w
  6416  14F3  02A5               	subwf	___lldiv@dividend,f
  6417  14F4  0822               	movf	___lldiv@divisor+1,w
  6418  14F5  3BA6               	subwfb	___lldiv@dividend+1,f
  6419  14F6  0823               	movf	___lldiv@divisor+2,w
  6420  14F7  3BA7               	subwfb	___lldiv@dividend+2,f
  6421  14F8  0824               	movf	___lldiv@divisor+3,w
  6422  14F9  3BA8               	subwfb	___lldiv@dividend+3,f
  6423  14FA  142A               	bsf	___lldiv@quotient,0
  6424  14FB                     l7048:	
  6425  14FB  3001               	movlw	1
  6426  14FC                     u7155:	
  6427  14FC  36A4               	lsrf	___lldiv@divisor+3,f
  6428  14FD  0CA3               	rrf	___lldiv@divisor+2,f
  6429  14FE  0CA2               	rrf	___lldiv@divisor+1,f
  6430  14FF  0CA1               	rrf	___lldiv@divisor,f
  6431  1500  0B89               	decfsz	9,f
  6432  1501  2CFC               	goto	u7155
  6433  1502  3001               	movlw	1
  6434  1503  02AE               	subwf	___lldiv@counter,f
  6435  1504  1D03               	btfss	3,2
  6436  1505  2CDB               	goto	l7040
  6437  1506                     l7052:	
  6438  1506  082D               	movf	___lldiv@quotient+3,w
  6439  1507  00A4               	movwf	?___lldiv+3
  6440  1508  082C               	movf	___lldiv@quotient+2,w
  6441  1509  00A3               	movwf	?___lldiv+2
  6442  150A  082B               	movf	___lldiv@quotient+1,w
  6443  150B  00A2               	movwf	?___lldiv+1
  6444  150C  082A               	movf	___lldiv@quotient,w
  6445  150D  00A1               	movwf	?___lldiv
  6446  150E  0008               	return
  6447  150F                     __end_of___lldiv:	
  6448                           
  6449                           	psect	text2
  6450  111E                     __ptext2:	
  6451 ;; *************** function _Wireless_wake *****************
  6452 ;; Defined at:
  6453 ;;		line 94 in file "wireless.c"
  6454 ;; Parameters:    Size  Location     Type
  6455 ;;		None
  6456 ;; Auto vars:     Size  Location     Type
  6457 ;;  reg             1   16[BANK0 ] unsigned char 
  6458 ;; Return value:  Size  Location     Type
  6459 ;;                  1    wreg      void 
  6460 ;; Registers used:
  6461 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6462 ;; Tracked objects:
  6463 ;;		On entry : 0/0
  6464 ;;		On exit  : 0/0
  6465 ;;		Unchanged: 0/0
  6466 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6467 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6468 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6469 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6470 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6471 ;;Total ram usage:        2 bytes
  6472 ;; Hardware stack levels used:    1
  6473 ;; Hardware stack levels required when called:    8
  6474 ;; This function calls:
  6475 ;;		_RF_ReadRegisterData
  6476 ;;		_RF_WriteRegister
  6477 ;; This function is called by:
  6478 ;;		_main
  6479 ;; This function uses a non-reentrant model
  6480 ;;
  6481                           
  6482                           
  6483                           ;psect for function _Wireless_wake
  6484  111E                     _Wireless_wake:	
  6485                           
  6486                           ;wireless.c: 96: u8 reg;
  6487                           ;wireless.c: 98: RF_ReadRegisterData(0x00 , &reg, 1);
  6488                           
  6489                           ;incstack = 0
  6490                           ; Regs used in _Wireless_wake: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  6491  111E  3030               	movlw	(low (Wireless_wake@reg| 0))& (0+255)
  6492  111F  0020               	movlb	0	; select bank0
  6493  1120  00AF               	movwf	??_Wireless_wake
  6494  1121  082F               	movf	??_Wireless_wake,w
  6495  1122  00AA               	movwf	RF_ReadRegisterData@buf
  6496  1123  01AB               	clrf	RF_ReadRegisterData@bufSize
  6497  1124  0AAB               	incf	RF_ReadRegisterData@bufSize,f
  6498  1125  3000               	movlw	0
  6499  1126  3190  20E3  3191   	fcall	_RF_ReadRegisterData
  6500                           
  6501                           ;wireless.c: 99: reg|=0b00000010;
  6502  1129  0020               	movlb	0	; select bank0
  6503  112A  14B0               	bsf	Wireless_wake@reg,1
  6504                           
  6505                           ;wireless.c: 100: RF_WriteRegister(0x00,reg);
  6506  112B  0830               	movf	Wireless_wake@reg,w
  6507  112C  00AF               	movwf	??_Wireless_wake
  6508  112D  082F               	movf	??_Wireless_wake,w
  6509  112E  00A3               	movwf	RF_WriteRegister@val
  6510  112F  3000               	movlw	0
  6511  1130  319F  2740  3191   	fcall	_RF_WriteRegister
  6512                           
  6513                           ;wireless.c: 101: _delay((unsigned long)((2)*(8000000/4000.0)));
  6514  1133  3006               	movlw	6
  6515  1134  0020               	movlb	0	; select bank0
  6516  1135  00AF               	movwf	??_Wireless_wake
  6517  1136  3030               	movlw	48
  6518  1137                     u7667:	
  6519  1137  0B89               	decfsz	9,f
  6520  1138  2937               	goto	u7667
  6521  1139  0BAF               	decfsz	??_Wireless_wake,f
  6522  113A  2937               	goto	u7667
  6523  113B  0000               	nop
  6524  113C  0008               	return
  6525  113D                     __end_of_Wireless_wake:	
  6526                           
  6527                           	psect	text3
  6528  1F9A                     __ptext3:	
  6529 ;; *************** function _Wireless_sleep *****************
  6530 ;; Defined at:
  6531 ;;		line 84 in file "wireless.c"
  6532 ;; Parameters:    Size  Location     Type
  6533 ;;		None
  6534 ;; Auto vars:     Size  Location     Type
  6535 ;;  reg             1   16[BANK0 ] unsigned char 
  6536 ;; Return value:  Size  Location     Type
  6537 ;;                  1    wreg      void 
  6538 ;; Registers used:
  6539 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6540 ;; Tracked objects:
  6541 ;;		On entry : 0/0
  6542 ;;		On exit  : 0/0
  6543 ;;		Unchanged: 0/0
  6544 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6545 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6546 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6547 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6548 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6549 ;;Total ram usage:        2 bytes
  6550 ;; Hardware stack levels used:    1
  6551 ;; Hardware stack levels required when called:    8
  6552 ;; This function calls:
  6553 ;;		_RF_ReadRegisterData
  6554 ;;		_RF_WriteRegister
  6555 ;; This function is called by:
  6556 ;;		_main
  6557 ;; This function uses a non-reentrant model
  6558 ;;
  6559                           
  6560                           
  6561                           ;psect for function _Wireless_sleep
  6562  1F9A                     _Wireless_sleep:	
  6563                           
  6564                           ;wireless.c: 86: u8 reg;
  6565                           ;wireless.c: 88: RF_ReadRegisterData(0x00 , &reg, 1);
  6566                           
  6567                           ;incstack = 0
  6568                           ; Regs used in _Wireless_sleep: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  6569  1F9A  3030               	movlw	(low (Wireless_sleep@reg| 0))& (0+255)
  6570  1F9B  0020               	movlb	0	; select bank0
  6571  1F9C  00AF               	movwf	??_Wireless_sleep
  6572  1F9D  082F               	movf	??_Wireless_sleep,w
  6573  1F9E  00AA               	movwf	RF_ReadRegisterData@buf
  6574  1F9F  01AB               	clrf	RF_ReadRegisterData@bufSize
  6575  1FA0  0AAB               	incf	RF_ReadRegisterData@bufSize,f
  6576  1FA1  3000               	movlw	0
  6577  1FA2  3190  20E3  319F   	fcall	_RF_ReadRegisterData
  6578                           
  6579                           ;wireless.c: 89: reg&=0b11111101;
  6580  1FA5  30FD               	movlw	253
  6581  1FA6  0020               	movlb	0	; select bank0
  6582  1FA7  00AF               	movwf	??_Wireless_sleep
  6583  1FA8  082F               	movf	??_Wireless_sleep,w
  6584  1FA9  05B0               	andwf	Wireless_sleep@reg,f
  6585                           
  6586                           ;wireless.c: 90: RF_WriteRegister(0x00,reg);
  6587  1FAA  0830               	movf	Wireless_sleep@reg,w
  6588  1FAB  00AF               	movwf	??_Wireless_sleep
  6589  1FAC  082F               	movf	??_Wireless_sleep,w
  6590  1FAD  00A3               	movwf	RF_WriteRegister@val
  6591  1FAE  3000               	movlw	0
  6592  1FAF  319F  2740         	fcall	_RF_WriteRegister
  6593  1FB1  0008               	return
  6594  1FB2                     __end_of_Wireless_sleep:	
  6595                           
  6596                           	psect	text4
  6597  071F                     __ptext4:	
  6598 ;; *************** function _Wireless_packageData *****************
  6599 ;; Defined at:
  6600 ;;		line 50 in file "wireless.c"
  6601 ;; Parameters:    Size  Location     Type
  6602 ;;  status          1    wreg     enum E3332
  6603 ;;  openTime        1   26[BANK1 ] unsigned char 
  6604 ;;  tempC           3   27[BANK1 ] float 
  6605 ;; Auto vars:     Size  Location     Type
  6606 ;;  status          1   38[BANK1 ] enum E3332
  6607 ;;  data            5   32[BANK1 ] unsigned char [5]
  6608 ;;  t1              2   41[BANK1 ] int 
  6609 ;;  t2              2   39[BANK1 ] int 
  6610 ;;  var             1   37[BANK1 ] unsigned char 
  6611 ;; Return value:  Size  Location     Type
  6612 ;;                  1    wreg      void 
  6613 ;; Registers used:
  6614 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6615 ;; Tracked objects:
  6616 ;;		On entry : 0/0
  6617 ;;		On exit  : 0/0
  6618 ;;		Unchanged: 0/0
  6619 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6620 ;;      Params:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0
  6621 ;;      Locals:         0       0      11       0       0       0       0       0       0       0       0       0       
      +0       0
  6622 ;;      Temps:          0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
  6623 ;;      Totals:         0       0      17       0       0       0       0       0       0       0       0       0       
      +0       0
  6624 ;;Total ram usage:       17 bytes
  6625 ;; Hardware stack levels used:    1
  6626 ;; Hardware stack levels required when called:   10
  6627 ;; This function calls:
  6628 ;;		_Diag_getSensorHealth
  6629 ;;		_Sensor_getSupplyVoltage
  6630 ;;		_Wireless_checkDataReceived
  6631 ;;		_Wireless_sendData
  6632 ;;		___bmul
  6633 ;;		___ftmul
  6634 ;;		___fttol
  6635 ;;		_abs
  6636 ;; This function is called by:
  6637 ;;		_main
  6638 ;; This function uses a non-reentrant model
  6639 ;;
  6640                           
  6641                           
  6642                           ;psect for function _Wireless_packageData
  6643  071F                     _Wireless_packageData:	
  6644                           
  6645                           ;incstack = 0
  6646                           ; Regs used in _Wireless_packageData: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6647                           ;Wireless_packageData@status stored from wreg
  6648  071F  0021               	movlb	1	; select bank1
  6649  0720  00C6               	movwf	Wireless_packageData@status^(0+128)
  6650                           
  6651                           ;wireless.c: 60: int t1=tempC;
  6652  0721  083B               	movf	Wireless_packageData@tempC^(0+128),w
  6653  0722  0020               	movlb	0	; select bank0
  6654  0723  00E6               	movwf	___fttol@f1
  6655  0724  0021               	movlb	1	; select bank1
  6656  0725  083C               	movf	(Wireless_packageData@tempC+1)^(0+128),w
  6657  0726  0020               	movlb	0	; select bank0
  6658  0727  00E7               	movwf	___fttol@f1+1
  6659  0728  0021               	movlb	1	; select bank1
  6660  0729  083D               	movf	(Wireless_packageData@tempC+2)^(0+128),w
  6661  072A  0020               	movlb	0	; select bank0
  6662  072B  00E8               	movwf	___fttol@f1+2
  6663  072C  318A  224D  3187   	fcall	___fttol
  6664  072F  0020               	movlb	0	; select bank0
  6665  0730  0867               	movf	?___fttol+1,w
  6666  0731  0021               	movlb	1	; select bank1
  6667  0732  00CA               	movwf	(Wireless_packageData@t1+1)^(0+128)
  6668  0733  0020               	movlb	0	; select bank0
  6669  0734  0866               	movf	?___fttol,w
  6670  0735  0021               	movlb	1	; select bank1
  6671  0736  00C9               	movwf	Wireless_packageData@t1^(0+128)
  6672                           
  6673                           ;wireless.c: 61: int t2= (float)tempC * 10;
  6674  0737  083B               	movf	Wireless_packageData@tempC^(0+128),w
  6675  0738  0020               	movlb	0	; select bank0
  6676  0739  00CC               	movwf	___ftmul@f2
  6677  073A  0021               	movlb	1	; select bank1
  6678  073B  083C               	movf	(Wireless_packageData@tempC+1)^(0+128),w
  6679  073C  0020               	movlb	0	; select bank0
  6680  073D  00CD               	movwf	___ftmul@f2+1
  6681  073E  0021               	movlb	1	; select bank1
  6682  073F  083D               	movf	(Wireless_packageData@tempC+2)^(0+128),w
  6683  0740  0020               	movlb	0	; select bank0
  6684  0741  00CE               	movwf	___ftmul@f2+2
  6685  0742  3000               	movlw	0
  6686  0743  00C9               	movwf	___ftmul@f1
  6687  0744  3020               	movlw	32
  6688  0745  00CA               	movwf	___ftmul@f1+1
  6689  0746  3041               	movlw	65
  6690  0747  00CB               	movwf	___ftmul@f1+2
  6691  0748  318B  2395  3187   	fcall	___ftmul
  6692  074B  0020               	movlb	0	; select bank0
  6693  074C  0849               	movf	?___ftmul,w
  6694  074D  00E6               	movwf	___fttol@f1
  6695  074E  084A               	movf	?___ftmul+1,w
  6696  074F  00E7               	movwf	___fttol@f1+1
  6697  0750  084B               	movf	?___ftmul+2,w
  6698  0751  00E8               	movwf	___fttol@f1+2
  6699  0752  318A  224D  3187   	fcall	___fttol
  6700  0755  0020               	movlb	0	; select bank0
  6701  0756  0867               	movf	?___fttol+1,w
  6702  0757  0021               	movlb	1	; select bank1
  6703  0758  00C8               	movwf	(Wireless_packageData@t2+1)^(0+128)
  6704  0759  0020               	movlb	0	; select bank0
  6705  075A  0866               	movf	?___fttol,w
  6706  075B  0021               	movlb	1	; select bank1
  6707  075C  00C7               	movwf	Wireless_packageData@t2^(0+128)
  6708                           
  6709                           ;wireless.c: 62: char var;
  6710                           ;wireless.c: 63: char data[5];
  6711                           ;wireless.c: 65: status<<=4;
  6712  075D  0EC6               	swapf	Wireless_packageData@status^(0+128),f
  6713  075E  30F0               	movlw	240
  6714  075F  05C6               	andwf	Wireless_packageData@status^(0+128),f
  6715                           
  6716                           ;wireless.c: 66: var=Diag_getSensorHealth();
  6717  0760  319E  26DE  3187   	fcall	_Diag_getSensorHealth
  6718  0763  0021               	movlb	1	; select bank1
  6719  0764  00BE               	movwf	??_Wireless_packageData^(0+128)
  6720  0765  083E               	movf	??_Wireless_packageData^(0+128),w
  6721  0766  00C5               	movwf	Wireless_packageData@var^(0+128)
  6722                           
  6723                           ;wireless.c: 67: status|=var;
  6724  0767  0845               	movf	Wireless_packageData@var^(0+128),w
  6725  0768  00BE               	movwf	??_Wireless_packageData^(0+128)
  6726  0769  083E               	movf	??_Wireless_packageData^(0+128),w
  6727  076A  04C6               	iorwf	Wireless_packageData@status^(0+128),f
  6728                           
  6729                           ;wireless.c: 69: data[0]=status;
  6730  076B  0846               	movf	Wireless_packageData@status^(0+128),w
  6731  076C  00BE               	movwf	??_Wireless_packageData^(0+128)
  6732  076D  083E               	movf	??_Wireless_packageData^(0+128),w
  6733  076E  00C0               	movwf	Wireless_packageData@data^(0+128)
  6734                           
  6735                           ;wireless.c: 70: data[1]=openTime;
  6736  076F  083A               	movf	Wireless_packageData@openTime^(0+128),w
  6737  0770  00BE               	movwf	??_Wireless_packageData^(0+128)
  6738  0771  083E               	movf	??_Wireless_packageData^(0+128),w
  6739  0772  00C1               	movwf	(Wireless_packageData@data^(0+128)+1)
  6740                           
  6741                           ;wireless.c: 71: data[2]=t1;
  6742  0773  0849               	movf	Wireless_packageData@t1^(0+128),w
  6743  0774  00BE               	movwf	??_Wireless_packageData^(0+128)
  6744  0775  083E               	movf	??_Wireless_packageData^(0+128),w
  6745  0776  00C2               	movwf	(Wireless_packageData@data^(0+128)+2)
  6746                           
  6747                           ;wireless.c: 72: t1=abs(t1);
  6748  0777  084A               	movf	(Wireless_packageData@t1+1)^(0+128),w
  6749  0778  0020               	movlb	0	; select bank0
  6750  0779  00A2               	movwf	abs@a+1
  6751  077A  0021               	movlb	1	; select bank1
  6752  077B  0849               	movf	Wireless_packageData@t1^(0+128),w
  6753  077C  0020               	movlb	0	; select bank0
  6754  077D  00A1               	movwf	abs@a
  6755  077E  319E  266C  3187   	fcall	_abs
  6756  0781  0020               	movlb	0	; select bank0
  6757  0782  0822               	movf	?_abs+1,w
  6758  0783  0021               	movlb	1	; select bank1
  6759  0784  00CA               	movwf	(Wireless_packageData@t1+1)^(0+128)
  6760  0785  0020               	movlb	0	; select bank0
  6761  0786  0821               	movf	?_abs,w
  6762  0787  0021               	movlb	1	; select bank1
  6763  0788  00C9               	movwf	Wireless_packageData@t1^(0+128)
  6764                           
  6765                           ;wireless.c: 73: t2=abs(t2);
  6766  0789  0848               	movf	(Wireless_packageData@t2+1)^(0+128),w
  6767  078A  0020               	movlb	0	; select bank0
  6768  078B  00A2               	movwf	abs@a+1
  6769  078C  0021               	movlb	1	; select bank1
  6770  078D  0847               	movf	Wireless_packageData@t2^(0+128),w
  6771  078E  0020               	movlb	0	; select bank0
  6772  078F  00A1               	movwf	abs@a
  6773  0790  319E  266C  3187   	fcall	_abs
  6774  0793  0020               	movlb	0	; select bank0
  6775  0794  0822               	movf	?_abs+1,w
  6776  0795  0021               	movlb	1	; select bank1
  6777  0796  00C8               	movwf	(Wireless_packageData@t2+1)^(0+128)
  6778  0797  0020               	movlb	0	; select bank0
  6779  0798  0821               	movf	?_abs,w
  6780  0799  0021               	movlb	1	; select bank1
  6781  079A  00C7               	movwf	Wireless_packageData@t2^(0+128)
  6782                           
  6783                           ;wireless.c: 74: data[3]=t2 - t1*10;
  6784  079B  300A               	movlw	10
  6785  079C  00BE               	movwf	??_Wireless_packageData^(0+128)
  6786  079D  083E               	movf	??_Wireless_packageData^(0+128),w
  6787  079E  0020               	movlb	0	; select bank0
  6788  079F  00A1               	movwf	___bmul@multiplicand
  6789  07A0  0021               	movlb	1	; select bank1
  6790  07A1  0849               	movf	Wireless_packageData@t1^(0+128),w
  6791  07A2  319E  26F0  3187   	fcall	___bmul
  6792  07A5  3AFF               	xorlw	255
  6793  07A6  3E01               	addlw	1
  6794  07A7  0021               	movlb	1	; select bank1
  6795  07A8  0747               	addwf	Wireless_packageData@t2^(0+128),w
  6796  07A9  00BF               	movwf	(??_Wireless_packageData+1)^(0+128)
  6797  07AA  083F               	movf	(??_Wireless_packageData+1)^(0+128),w
  6798  07AB  00C3               	movwf	(Wireless_packageData@data^(0+128)+3)
  6799                           
  6800                           ;wireless.c: 75: t1=(float)Sensor_getSupplyVoltage()*10;
  6801  07AC  3193  234A  3187   	fcall	_Sensor_getSupplyVoltage
  6802  07AF  0020               	movlb	0	; select bank0
  6803  07B0  0841               	movf	?_Sensor_getSupplyVoltage,w
  6804  07B1  00CC               	movwf	___ftmul@f2
  6805  07B2  0842               	movf	?_Sensor_getSupplyVoltage+1,w
  6806  07B3  00CD               	movwf	___ftmul@f2+1
  6807  07B4  0843               	movf	?_Sensor_getSupplyVoltage+2,w
  6808  07B5  00CE               	movwf	___ftmul@f2+2
  6809  07B6  3000               	movlw	0
  6810  07B7  00C9               	movwf	___ftmul@f1
  6811  07B8  3020               	movlw	32
  6812  07B9  00CA               	movwf	___ftmul@f1+1
  6813  07BA  3041               	movlw	65
  6814  07BB  00CB               	movwf	___ftmul@f1+2
  6815  07BC  318B  2395  3187   	fcall	___ftmul
  6816  07BF  0020               	movlb	0	; select bank0
  6817  07C0  0849               	movf	?___ftmul,w
  6818  07C1  00E6               	movwf	___fttol@f1
  6819  07C2  084A               	movf	?___ftmul+1,w
  6820  07C3  00E7               	movwf	___fttol@f1+1
  6821  07C4  084B               	movf	?___ftmul+2,w
  6822  07C5  00E8               	movwf	___fttol@f1+2
  6823  07C6  318A  224D  3187   	fcall	___fttol
  6824  07C9  0020               	movlb	0	; select bank0
  6825  07CA  0867               	movf	?___fttol+1,w
  6826  07CB  0021               	movlb	1	; select bank1
  6827  07CC  00CA               	movwf	(Wireless_packageData@t1+1)^(0+128)
  6828  07CD  0020               	movlb	0	; select bank0
  6829  07CE  0866               	movf	?___fttol,w
  6830  07CF  0021               	movlb	1	; select bank1
  6831  07D0  00C9               	movwf	Wireless_packageData@t1^(0+128)
  6832                           
  6833                           ;wireless.c: 76: data[4]=t1;
  6834  07D1  0849               	movf	Wireless_packageData@t1^(0+128),w
  6835  07D2  00BE               	movwf	??_Wireless_packageData^(0+128)
  6836  07D3  083E               	movf	??_Wireless_packageData^(0+128),w
  6837  07D4  00C4               	movwf	(Wireless_packageData@data^(0+128)+4)
  6838                           
  6839                           ;wireless.c: 78: Wireless_sendData(data);
  6840  07D5  30C0               	movlw	(low (Wireless_packageData@data| 0))& (0+255)
  6841  07D6  319E  267B  3187   	fcall	_Wireless_sendData
  6842  07D9                     l1082:	
  6843                           ;wireless.c: 79: while(PORTCbits.RC3);
  6844                           
  6845  07D9  0020               	movlb	0	; select bank0
  6846  07DA  198E               	btfsc	14,3	;volatile
  6847  07DB  2FD9               	goto	l1082
  6848                           
  6849                           ;wireless.c: 80: Wireless_checkDataReceived();
  6850  07DC  3197  2786         	fcall	_Wireless_checkDataReceived
  6851  07DE  0008               	return
  6852  07DF                     __end_of_Wireless_packageData:	
  6853                           
  6854                           	psect	text5
  6855  1EF0                     __ptext5:	
  6856 ;; *************** function ___bmul *****************
  6857 ;; Defined at:
  6858 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\Umul8.c"
  6859 ;; Parameters:    Size  Location     Type
  6860 ;;  multiplier      1    wreg     unsigned char 
  6861 ;;  multiplicand    1    1[BANK0 ] unsigned char 
  6862 ;; Auto vars:     Size  Location     Type
  6863 ;;  multiplier      1    4[BANK0 ] unsigned char 
  6864 ;;  product         1    3[BANK0 ] unsigned char 
  6865 ;; Return value:  Size  Location     Type
  6866 ;;                  1    wreg      unsigned char 
  6867 ;; Registers used:
  6868 ;;		wreg, status,2, status,0
  6869 ;; Tracked objects:
  6870 ;;		On entry : 0/0
  6871 ;;		On exit  : 0/0
  6872 ;;		Unchanged: 0/0
  6873 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6874 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6875 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6876 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6877 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6878 ;;Total ram usage:        4 bytes
  6879 ;; Hardware stack levels used:    1
  6880 ;; Hardware stack levels required when called:    4
  6881 ;; This function calls:
  6882 ;;		Nothing
  6883 ;; This function is called by:
  6884 ;;		_Wireless_packageData
  6885 ;; This function uses a non-reentrant model
  6886 ;;
  6887                           
  6888                           
  6889                           ;psect for function ___bmul
  6890  1EF0                     ___bmul:	
  6891                           
  6892                           ;incstack = 0
  6893                           ; Regs used in ___bmul: [wreg+status,2+status,0]
  6894                           ;___bmul@multiplier stored from wreg
  6895  1EF0  0020               	movlb	0	; select bank0
  6896  1EF1  00A4               	movwf	___bmul@multiplier
  6897  1EF2  01A3               	clrf	___bmul@product
  6898  1EF3                     l6676:	
  6899  1EF3  1C24               	btfss	___bmul@multiplier,0
  6900  1EF4  2EF9               	goto	l6680
  6901  1EF5  0821               	movf	___bmul@multiplicand,w
  6902  1EF6  00A2               	movwf	??___bmul
  6903  1EF7  0822               	movf	??___bmul,w
  6904  1EF8  07A3               	addwf	___bmul@product,f
  6905  1EF9                     l6680:	
  6906  1EF9  1003               	clrc
  6907  1EFA  0DA1               	rlf	___bmul@multiplicand,f
  6908  1EFB  1003               	clrc
  6909  1EFC  0CA4               	rrf	___bmul@multiplier,f
  6910  1EFD  0824               	movf	___bmul@multiplier,w
  6911  1EFE  1D03               	btfss	3,2
  6912  1EFF  2EF3               	goto	l6676
  6913  1F00  0823               	movf	___bmul@product,w
  6914  1F01  0008               	return
  6915  1F02                     __end_of___bmul:	
  6916                           
  6917                           	psect	text6
  6918  1E7B                     __ptext6:	
  6919 ;; *************** function _Wireless_sendData *****************
  6920 ;; Defined at:
  6921 ;;		line 42 in file "wireless.c"
  6922 ;; Parameters:    Size  Location     Type
  6923 ;;  payload         1    wreg     PTR unsigned char 
  6924 ;;		 -> Wireless_packageData@data(5), 
  6925 ;; Auto vars:     Size  Location     Type
  6926 ;;  payload         1   18[BANK0 ] PTR unsigned char 
  6927 ;;		 -> Wireless_packageData@data(5), 
  6928 ;; Return value:  Size  Location     Type
  6929 ;;                  1    wreg      void 
  6930 ;; Registers used:
  6931 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  6932 ;; Tracked objects:
  6933 ;;		On entry : 0/0
  6934 ;;		On exit  : 0/0
  6935 ;;		Unchanged: 0/0
  6936 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6937 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6938 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6939 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6940 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6941 ;;Total ram usage:        2 bytes
  6942 ;; Hardware stack levels used:    1
  6943 ;; Hardware stack levels required when called:    9
  6944 ;; This function calls:
  6945 ;;		_RF_ResetStatusIRQ
  6946 ;;		_RF_TxPayload
  6947 ;; This function is called by:
  6948 ;;		_Wireless_packageData
  6949 ;; This function uses a non-reentrant model
  6950 ;;
  6951                           
  6952                           
  6953                           ;psect for function _Wireless_sendData
  6954  1E7B                     _Wireless_sendData:	
  6955                           
  6956                           ;incstack = 0
  6957                           ; Regs used in _Wireless_sendData: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  6958                           ;Wireless_sendData@payload stored from wreg
  6959  1E7B  0020               	movlb	0	; select bank0
  6960  1E7C  00B2               	movwf	Wireless_sendData@payload
  6961                           
  6962                           ;wireless.c: 45: RF_ResetStatusIRQ(0x40|0x20|0x10);
  6963  1E7D  3070               	movlw	112
  6964  1E7E  3191  213D  319E   	fcall	_RF_ResetStatusIRQ
  6965                           
  6966                           ;wireless.c: 46: RF_TxPayload(payload, 5);
  6967  1E81  3005               	movlw	5
  6968  1E82  0020               	movlb	0	; select bank0
  6969  1E83  00B1               	movwf	??_Wireless_sendData
  6970  1E84  0831               	movf	??_Wireless_sendData,w
  6971  1E85  00AE               	movwf	RF_TxPayload@payloadSize
  6972  1E86  0832               	movf	Wireless_sendData@payload,w
  6973  1E87  3190  2055         	fcall	_RF_TxPayload
  6974  1E89  0008               	return
  6975  1E8A                     __end_of_Wireless_sendData:	
  6976                           
  6977                           	psect	text7
  6978  1055                     __ptext7:	
  6979 ;; *************** function _RF_TxPayload *****************
  6980 ;; Defined at:
  6981 ;;		line 173 in file "nrf24.c"
  6982 ;; Parameters:    Size  Location     Type
  6983 ;;  payload         1    wreg     PTR unsigned char 
  6984 ;;		 -> Wireless_packageData@data(5), 
  6985 ;;  payloadSize     1   14[BANK0 ] unsigned char 
  6986 ;; Auto vars:     Size  Location     Type
  6987 ;;  payload         1   16[BANK0 ] PTR unsigned char 
  6988 ;;		 -> Wireless_packageData@data(5), 
  6989 ;; Return value:  Size  Location     Type
  6990 ;;                  1    wreg      void 
  6991 ;; Registers used:
  6992 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  6993 ;; Tracked objects:
  6994 ;;		On entry : 0/0
  6995 ;;		On exit  : 0/0
  6996 ;;		Unchanged: 0/0
  6997 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6998 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6999 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7000 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7001 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7002 ;;Total ram usage:        3 bytes
  7003 ;; Hardware stack levels used:    1
  7004 ;; Hardware stack levels required when called:    8
  7005 ;; This function calls:
  7006 ;;		_RF_Write
  7007 ;;		_RF_WriteRegisterData
  7008 ;; This function is called by:
  7009 ;;		_Wireless_sendData
  7010 ;; This function uses a non-reentrant model
  7011 ;;
  7012                           
  7013                           
  7014                           ;psect for function _RF_TxPayload
  7015  1055                     _RF_TxPayload:	
  7016                           
  7017                           ;incstack = 0
  7018                           ; Regs used in _RF_TxPayload: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  7019                           ;RF_TxPayload@payload stored from wreg
  7020  1055  0020               	movlb	0	; select bank0
  7021  1056  00B0               	movwf	RF_TxPayload@payload
  7022                           
  7023                           ;nrf24.c: 174: RF_Write(0xE1);
  7024  1057  30E1               	movlw	225
  7025  1058  319E  269A  3190   	fcall	_RF_Write
  7026                           
  7027                           ;nrf24.c: 175: RF_WriteRegisterData(0xA0, payload, payloadSize);
  7028  105B  0020               	movlb	0	; select bank0
  7029  105C  0830               	movf	RF_TxPayload@payload,w
  7030  105D  00A9               	movwf	RF_WriteRegisterData@buf
  7031  105E  3000               	movlw	0
  7032  105F  00AA               	movwf	RF_WriteRegisterData@buf+1
  7033  1060  082E               	movf	RF_TxPayload@payloadSize,w
  7034  1061  00AF               	movwf	??_RF_TxPayload
  7035  1062  082F               	movf	??_RF_TxPayload,w
  7036  1063  00AB               	movwf	RF_WriteRegisterData@bufSize
  7037  1064  30A0               	movlw	160
  7038  1065  3190  20A9  3190   	fcall	_RF_WriteRegisterData
  7039                           
  7040                           ;nrf24.c: 176: do { LATCbits.LATC2 = 1; } while(0);
  7041  1068  0022               	movlb	2	; select bank2
  7042  1069  150E               	bsf	14,2	;volatile
  7043                           
  7044                           ;nrf24.c: 177: _delay((unsigned long)((15)*(8000000/4000000.0)));
  7045  106A  300A               	movlw	10
  7046  106B                     u7677:	
  7047  106B  0B89               	decfsz	9,f
  7048  106C  286B               	goto	u7677
  7049                           
  7050                           ;nrf24.c: 178: do { LATCbits.LATC2 = 0; } while(0);
  7051  106D  0022               	movlb	2	; select bank2
  7052  106E  110E               	bcf	14,2	;volatile
  7053  106F  0008               	return
  7054  1070                     __end_of_RF_TxPayload:	
  7055                           
  7056                           	psect	text8
  7057  1E9A                     __ptext8:	
  7058 ;; *************** function _RF_Write *****************
  7059 ;; Defined at:
  7060 ;;		line 139 in file "nrf24.c"
  7061 ;; Parameters:    Size  Location     Type
  7062 ;;  val             1    wreg     unsigned char 
  7063 ;; Auto vars:     Size  Location     Type
  7064 ;;  val             1    3[BANK0 ] unsigned char 
  7065 ;; Return value:  Size  Location     Type
  7066 ;;                  1    wreg      void 
  7067 ;; Registers used:
  7068 ;;		wreg, status,2, status,0, pclath, cstack
  7069 ;; Tracked objects:
  7070 ;;		On entry : 0/0
  7071 ;;		On exit  : 0/0
  7072 ;;		Unchanged: 0/0
  7073 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7074 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7075 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7076 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7077 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7078 ;;Total ram usage:        1 bytes
  7079 ;; Hardware stack levels used:    1
  7080 ;; Hardware stack levels required when called:    6
  7081 ;; This function calls:
  7082 ;;		_SPI_WriteRead
  7083 ;; This function is called by:
  7084 ;;		_RF_TxPayload
  7085 ;; This function uses a non-reentrant model
  7086 ;;
  7087                           
  7088                           
  7089                           ;psect for function _RF_Write
  7090  1E9A                     _RF_Write:	
  7091                           
  7092                           ;incstack = 0
  7093                           ; Regs used in _RF_Write: [wreg+status,2+status,0+pclath+cstack]
  7094                           ;RF_Write@val stored from wreg
  7095  1E9A  0020               	movlb	0	; select bank0
  7096  1E9B  00A3               	movwf	RF_Write@val
  7097                           
  7098                           ;nrf24.c: 140: do { LATCbits.LATC1 = 0; } while(0);
  7099  1E9C  0022               	movlb	2	; select bank2
  7100  1E9D  108E               	bcf	14,1	;volatile
  7101                           
  7102                           ;nrf24.c: 141: (void)SPI_WriteRead(val);
  7103  1E9E  0020               	movlb	0	; select bank0
  7104  1E9F  0823               	movf	RF_Write@val,w
  7105  1EA0  319D  258F  319E   	fcall	_SPI_WriteRead
  7106                           
  7107                           ;nrf24.c: 142: do { LATCbits.LATC1 = 1; } while(0);
  7108  1EA3  0022               	movlb	2	; select bank2
  7109  1EA4  148E               	bsf	14,1	;volatile
  7110                           
  7111                           ;nrf24.c: 143: _delay((unsigned long)((10)*(8000000/4000000.0)));
  7112  1EA5  3006               	movlw	6
  7113  1EA6                     u7687:	
  7114  1EA6  0B89               	decfsz	9,f
  7115  1EA7  2EA6               	goto	u7687
  7116  1EA8  3200               	nop2
  7117  1EA9  0008               	return
  7118  1EAA                     __end_of_RF_Write:	
  7119                           
  7120                           	psect	text9
  7121  1786                     __ptext9:	
  7122 ;; *************** function _Wireless_checkDataReceived *****************
  7123 ;; Defined at:
  7124 ;;		line 104 in file "wireless.c"
  7125 ;; Parameters:    Size  Location     Type
  7126 ;;		None
  7127 ;; Auto vars:     Size  Location     Type
  7128 ;;  data            4   23[BANK0 ] unsigned char [4]
  7129 ;;  channel         1   27[BANK0 ] unsigned char 
  7130 ;; Return value:  Size  Location     Type
  7131 ;;                  1    wreg      void 
  7132 ;; Registers used:
  7133 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7134 ;; Tracked objects:
  7135 ;;		On entry : 0/0
  7136 ;;		On exit  : 0/0
  7137 ;;		Unchanged: 0/0
  7138 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7139 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7140 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7141 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7142 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7143 ;;Total ram usage:        9 bytes
  7144 ;; Hardware stack levels used:    1
  7145 ;; Hardware stack levels required when called:    9
  7146 ;; This function calls:
  7147 ;;		_DOOR_resetPos
  7148 ;;		_DOOR_update
  7149 ;;		_RF_DataIsReady
  7150 ;;		_RF_RxPayload
  7151 ;;		___lmul
  7152 ;; This function is called by:
  7153 ;;		_Wireless_packageData
  7154 ;; This function uses a non-reentrant model
  7155 ;;
  7156                           
  7157                           
  7158                           ;psect for function _Wireless_checkDataReceived
  7159  1786                     _Wireless_checkDataReceived:	
  7160  1786                     l1094:	
  7161                           ;incstack = 0
  7162                           ; Regs used in _Wireless_checkDataReceived: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+c
      +                          stack]
  7163                           ;wireless.c: 111: char channel;
  7164                           ;wireless.c: 112: char data[4];
  7165                           ;wireless.c: 113: do
  7166                           
  7167                           
  7168                           ;wireless.c: 114: {
  7169                           ;wireless.c: 115: if(RF_DataIsReady(&channel))
  7170  1786  303B               	movlw	(low (Wireless_checkDataReceived@channel| 0))& (0+255)
  7171  1787  3190  20C6  3197   	fcall	_RF_DataIsReady
  7172  178A  3A00               	xorlw	0
  7173  178B  1903               	skipnz
  7174  178C  2FF8               	goto	l6654
  7175                           
  7176                           ;wireless.c: 116: {
  7177                           ;wireless.c: 117: RF_RxPayload(data, 4);
  7178  178D  3004               	movlw	4
  7179  178E  0020               	movlb	0	; select bank0
  7180  178F  00B3               	movwf	??_Wireless_checkDataReceived
  7181  1790  0833               	movf	??_Wireless_checkDataReceived,w
  7182  1791  00AF               	movwf	RF_RxPayload@payloadSize
  7183  1792  3037               	movlw	(low (Wireless_checkDataReceived@data| 0))& (0+255)
  7184  1793  319F  2702  3197   	fcall	_RF_RxPayload
  7185                           
  7186                           ;wireless.c: 118: if(data[0] & 0x01)
  7187  1796  0020               	movlb	0	; select bank0
  7188  1797  1C37               	btfss	Wireless_checkDataReceived@data,0
  7189  1798  2FA2               	goto	l6640
  7190                           
  7191                           ;wireless.c: 119: {
  7192                           ;wireless.c: 120: DOOR_update(doorOpenAngle,data[1]);
  7193  1799  0838               	movf	Wireless_checkDataReceived@data+1,w
  7194  179A  00B3               	movwf	??_Wireless_checkDataReceived
  7195  179B  0833               	movf	??_Wireless_checkDataReceived,w
  7196  179C  00A7               	movwf	DOOR_update@closedAngle
  7197  179D  0021               	movlb	1	; select bank1
  7198  179E  0867               	movf	_doorOpenAngle^(0+128),w
  7199  179F  319F  2756  3197   	fcall	_DOOR_update
  7200  17A2                     l6640:	
  7201                           
  7202                           ;wireless.c: 121: }
  7203                           ;wireless.c: 122: if(data[0] & 0x02)
  7204  17A2  0020               	movlb	0	; select bank0
  7205  17A3  1CB7               	btfss	Wireless_checkDataReceived@data,1
  7206  17A4  2FAF               	goto	l6644
  7207                           
  7208                           ;wireless.c: 123: {
  7209                           ;wireless.c: 124: DOOR_update(data[2],doorClosedAngle);
  7210  17A5  0021               	movlb	1	; select bank1
  7211  17A6  0866               	movf	_doorClosedAngle^(0+128),w
  7212  17A7  0020               	movlb	0	; select bank0
  7213  17A8  00B3               	movwf	??_Wireless_checkDataReceived
  7214  17A9  0833               	movf	??_Wireless_checkDataReceived,w
  7215  17AA  00A7               	movwf	DOOR_update@closedAngle
  7216  17AB  0839               	movf	Wireless_checkDataReceived@data+2,w
  7217  17AC  319F  2756  3197   	fcall	_DOOR_update
  7218  17AF                     l6644:	
  7219                           
  7220                           ;wireless.c: 125: }
  7221                           ;wireless.c: 126: if(data[0] & 0x04)
  7222  17AF  0020               	movlb	0	; select bank0
  7223  17B0  1D37               	btfss	Wireless_checkDataReceived@data,2
  7224  17B1  2FF2               	goto	l6650
  7225                           
  7226                           ;wireless.c: 127: {
  7227                           ;wireless.c: 128: sensorUpdatePeriod=data[3];
  7228  17B2  083A               	movf	Wireless_checkDataReceived@data+3,w
  7229  17B3  00B3               	movwf	??_Wireless_checkDataReceived
  7230  17B4  01B4               	clrf	??_Wireless_checkDataReceived+1
  7231  17B5  01B5               	clrf	??_Wireless_checkDataReceived+2
  7232  17B6  01B6               	clrf	??_Wireless_checkDataReceived+3
  7233  17B7  0836               	movf	??_Wireless_checkDataReceived+3,w
  7234  17B8  0022               	movlb	2	; select bank2
  7235  17B9  00E5               	movwf	(_sensorUpdatePeriod+3)^(0+256)
  7236  17BA  0020               	movlb	0	; select bank0
  7237  17BB  0835               	movf	??_Wireless_checkDataReceived+2,w
  7238  17BC  0022               	movlb	2	; select bank2
  7239  17BD  00E4               	movwf	(_sensorUpdatePeriod+2)^(0+256)
  7240  17BE  0020               	movlb	0	; select bank0
  7241  17BF  0834               	movf	??_Wireless_checkDataReceived+1,w
  7242  17C0  0022               	movlb	2	; select bank2
  7243  17C1  00E3               	movwf	(_sensorUpdatePeriod+1)^(0+256)
  7244  17C2  0020               	movlb	0	; select bank0
  7245  17C3  0833               	movf	??_Wireless_checkDataReceived,w
  7246  17C4  0022               	movlb	2	; select bank2
  7247  17C5  00E2               	movwf	_sensorUpdatePeriod^(0+256)
  7248                           
  7249                           ;wireless.c: 129: sensorUpdatePeriod*=1000;
  7250  17C6  3000               	movlw	0
  7251  17C7  0020               	movlb	0	; select bank0
  7252  17C8  00A4               	movwf	___lmul@multiplier+3
  7253  17C9  3000               	movlw	0
  7254  17CA  00A3               	movwf	___lmul@multiplier+2
  7255  17CB  3003               	movlw	3
  7256  17CC  00A2               	movwf	___lmul@multiplier+1
  7257  17CD  30E8               	movlw	232
  7258  17CE  00A1               	movwf	___lmul@multiplier
  7259  17CF  0022               	movlb	2	; select bank2
  7260  17D0  0865               	movf	(_sensorUpdatePeriod+3)^(0+256),w
  7261  17D1  0020               	movlb	0	; select bank0
  7262  17D2  00A8               	movwf	___lmul@multiplicand+3
  7263  17D3  0022               	movlb	2	; select bank2
  7264  17D4  0864               	movf	(_sensorUpdatePeriod+2)^(0+256),w
  7265  17D5  0020               	movlb	0	; select bank0
  7266  17D6  00A7               	movwf	___lmul@multiplicand+2
  7267  17D7  0022               	movlb	2	; select bank2
  7268  17D8  0863               	movf	(_sensorUpdatePeriod+1)^(0+256),w
  7269  17D9  0020               	movlb	0	; select bank0
  7270  17DA  00A6               	movwf	___lmul@multiplicand+1
  7271  17DB  0022               	movlb	2	; select bank2
  7272  17DC  0862               	movf	_sensorUpdatePeriod^(0+256),w
  7273  17DD  0020               	movlb	0	; select bank0
  7274  17DE  00A5               	movwf	___lmul@multiplicand
  7275  17DF  3192  2265  3197   	fcall	___lmul
  7276  17E2  0020               	movlb	0	; select bank0
  7277  17E3  0824               	movf	?___lmul+3,w
  7278  17E4  0022               	movlb	2	; select bank2
  7279  17E5  00E5               	movwf	(_sensorUpdatePeriod+3)^(0+256)
  7280  17E6  0020               	movlb	0	; select bank0
  7281  17E7  0823               	movf	?___lmul+2,w
  7282  17E8  0022               	movlb	2	; select bank2
  7283  17E9  00E4               	movwf	(_sensorUpdatePeriod+2)^(0+256)
  7284  17EA  0020               	movlb	0	; select bank0
  7285  17EB  0822               	movf	?___lmul+1,w
  7286  17EC  0022               	movlb	2	; select bank2
  7287  17ED  00E3               	movwf	(_sensorUpdatePeriod+1)^(0+256)
  7288  17EE  0020               	movlb	0	; select bank0
  7289  17EF  0821               	movf	?___lmul,w
  7290  17F0  0022               	movlb	2	; select bank2
  7291  17F1  00E2               	movwf	_sensorUpdatePeriod^(0+256)
  7292  17F2                     l6650:	
  7293                           
  7294                           ;wireless.c: 130: }
  7295                           ;wireless.c: 131: if(data[0] & 0x08)
  7296  17F2  0020               	movlb	0	; select bank0
  7297  17F3  1DB7               	btfss	Wireless_checkDataReceived@data,3
  7298  17F4  2FF8               	goto	l6654
  7299                           
  7300                           ;wireless.c: 132: {
  7301                           ;wireless.c: 133: DOOR_resetPos();
  7302  17F5  3190  2000  3197   	fcall	_DOOR_resetPos
  7303  17F8                     l6654:	
  7304                           
  7305                           ;wireless.c: 134: }
  7306                           ;wireless.c: 138: }
  7307                           ;wireless.c: 139: }while(RF_DataIsReady(&channel));
  7308  17F8  303B               	movlw	(low (Wireless_checkDataReceived@channel| 0))& (0+255)
  7309  17F9  3190  20C6  3197   	fcall	_RF_DataIsReady
  7310  17FC  3A00               	xorlw	0
  7311  17FD  1903               	btfsc	3,2
  7312  17FE  0008               	return
  7313  17FF  2F86               	goto	l1094
  7314  1800                     __end_of_Wireless_checkDataReceived:	
  7315                           
  7316                           	psect	text10
  7317  1265                     __ptext10:	
  7318 ;; *************** function ___lmul *****************
  7319 ;; Defined at:
  7320 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\Umul32.c"
  7321 ;; Parameters:    Size  Location     Type
  7322 ;;  multiplier      4    1[BANK0 ] unsigned long 
  7323 ;;  multiplicand    4    5[BANK0 ] unsigned long 
  7324 ;; Auto vars:     Size  Location     Type
  7325 ;;  product         4    9[BANK0 ] unsigned long 
  7326 ;; Return value:  Size  Location     Type
  7327 ;;                  4    1[BANK0 ] unsigned long 
  7328 ;; Registers used:
  7329 ;;		wreg, status,2, status,0
  7330 ;; Tracked objects:
  7331 ;;		On entry : 0/0
  7332 ;;		On exit  : 0/0
  7333 ;;		Unchanged: 0/0
  7334 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7335 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7336 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7337 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7338 ;;      Totals:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7339 ;;Total ram usage:       12 bytes
  7340 ;; Hardware stack levels used:    1
  7341 ;; Hardware stack levels required when called:    4
  7342 ;; This function calls:
  7343 ;;		Nothing
  7344 ;; This function is called by:
  7345 ;;		_Wireless_checkDataReceived
  7346 ;; This function uses a non-reentrant model
  7347 ;;
  7348                           
  7349                           
  7350                           ;psect for function ___lmul
  7351  1265                     ___lmul:	
  7352                           
  7353                           ;incstack = 0
  7354                           ; Regs used in ___lmul: [wreg+status,2+status,0]
  7355  1265  3000               	movlw	0
  7356  1266  0020               	movlb	0	; select bank0
  7357  1267  00AC               	movwf	___lmul@product+3
  7358  1268  3000               	movlw	0
  7359  1269  00AB               	movwf	___lmul@product+2
  7360  126A  3000               	movlw	0
  7361  126B  00AA               	movwf	___lmul@product+1
  7362  126C  3000               	movlw	0
  7363  126D  00A9               	movwf	___lmul@product
  7364  126E                     l6352:	
  7365  126E  1C21               	btfss	___lmul@multiplier,0
  7366  126F  2A78               	goto	l6356
  7367  1270  0825               	movf	___lmul@multiplicand,w
  7368  1271  07A9               	addwf	___lmul@product,f
  7369  1272  0826               	movf	___lmul@multiplicand+1,w
  7370  1273  3DAA               	addwfc	___lmul@product+1,f
  7371  1274  0827               	movf	___lmul@multiplicand+2,w
  7372  1275  3DAB               	addwfc	___lmul@product+2,f
  7373  1276  0828               	movf	___lmul@multiplicand+3,w
  7374  1277  3DAC               	addwfc	___lmul@product+3,f
  7375  1278                     l6356:	
  7376  1278  3001               	movlw	1
  7377  1279                     u6325:	
  7378  1279  35A5               	lslf	___lmul@multiplicand,f
  7379  127A  0DA6               	rlf	___lmul@multiplicand+1,f
  7380  127B  0DA7               	rlf	___lmul@multiplicand+2,f
  7381  127C  0DA8               	rlf	___lmul@multiplicand+3,f
  7382  127D  0B89               	decfsz	9,f
  7383  127E  2A79               	goto	u6325
  7384  127F  3001               	movlw	1
  7385  1280                     u6335:	
  7386  1280  36A4               	lsrf	___lmul@multiplier+3,f
  7387  1281  0CA3               	rrf	___lmul@multiplier+2,f
  7388  1282  0CA2               	rrf	___lmul@multiplier+1,f
  7389  1283  0CA1               	rrf	___lmul@multiplier,f
  7390  1284  0B89               	decfsz	9,f
  7391  1285  2A80               	goto	u6335
  7392  1286  0824               	movf	___lmul@multiplier+3,w
  7393  1287  0423               	iorwf	___lmul@multiplier+2,w
  7394  1288  0422               	iorwf	___lmul@multiplier+1,w
  7395  1289  0421               	iorwf	___lmul@multiplier,w
  7396  128A  1D03               	skipz
  7397  128B  2A6E               	goto	l6352
  7398  128C  082C               	movf	___lmul@product+3,w
  7399  128D  00A4               	movwf	?___lmul+3
  7400  128E  082B               	movf	___lmul@product+2,w
  7401  128F  00A3               	movwf	?___lmul+2
  7402  1290  082A               	movf	___lmul@product+1,w
  7403  1291  00A2               	movwf	?___lmul+1
  7404  1292  0829               	movf	___lmul@product,w
  7405  1293  00A1               	movwf	?___lmul
  7406  1294  0008               	return
  7407  1295                     __end_of___lmul:	
  7408                           
  7409                           	psect	text11
  7410  1F02                     __ptext11:	
  7411 ;; *************** function _RF_RxPayload *****************
  7412 ;; Defined at:
  7413 ;;		line 186 in file "nrf24.c"
  7414 ;; Parameters:    Size  Location     Type
  7415 ;;  payload         1    wreg     PTR unsigned char 
  7416 ;;		 -> Wireless_checkDataReceived@data(4), 
  7417 ;;  payloadSize     1   15[BANK0 ] unsigned char 
  7418 ;; Auto vars:     Size  Location     Type
  7419 ;;  payload         1   18[BANK0 ] PTR unsigned char 
  7420 ;;		 -> Wireless_checkDataReceived@data(4), 
  7421 ;; Return value:  Size  Location     Type
  7422 ;;                  1    wreg      void 
  7423 ;; Registers used:
  7424 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7425 ;; Tracked objects:
  7426 ;;		On entry : 0/0
  7427 ;;		On exit  : 0/0
  7428 ;;		Unchanged: 0/0
  7429 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7430 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7431 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7432 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7433 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7434 ;;Total ram usage:        4 bytes
  7435 ;; Hardware stack levels used:    1
  7436 ;; Hardware stack levels required when called:    8
  7437 ;; This function calls:
  7438 ;;		_RF_ReadRegisterData
  7439 ;; This function is called by:
  7440 ;;		_Wireless_checkDataReceived
  7441 ;; This function uses a non-reentrant model
  7442 ;;
  7443                           
  7444                           
  7445                           ;psect for function _RF_RxPayload
  7446  1F02                     _RF_RxPayload:	
  7447                           
  7448                           ;incstack = 0
  7449                           ; Regs used in _RF_RxPayload: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  7450                           ;RF_RxPayload@payload stored from wreg
  7451  1F02  0020               	movlb	0	; select bank0
  7452  1F03  00B2               	movwf	RF_RxPayload@payload
  7453                           
  7454                           ;nrf24.c: 187: do { LATCbits.LATC2 = 0; } while(0);
  7455  1F04  0022               	movlb	2	; select bank2
  7456  1F05  110E               	bcf	14,2	;volatile
  7457                           
  7458                           ;nrf24.c: 188: RF_ReadRegisterData(0x61, payload, payloadSize);
  7459  1F06  0020               	movlb	0	; select bank0
  7460  1F07  0832               	movf	RF_RxPayload@payload,w
  7461  1F08  00B0               	movwf	??_RF_RxPayload
  7462  1F09  0830               	movf	??_RF_RxPayload,w
  7463  1F0A  00AA               	movwf	RF_ReadRegisterData@buf
  7464  1F0B  082F               	movf	RF_RxPayload@payloadSize,w
  7465  1F0C  00B1               	movwf	??_RF_RxPayload+1
  7466  1F0D  0831               	movf	??_RF_RxPayload+1,w
  7467  1F0E  00AB               	movwf	RF_ReadRegisterData@bufSize
  7468  1F0F  3061               	movlw	97
  7469  1F10  3190  20E3         	fcall	_RF_ReadRegisterData
  7470                           
  7471                           ;nrf24.c: 189: do { LATCbits.LATC2 = 1; } while(0);
  7472  1F12  0022               	movlb	2	; select bank2
  7473  1F13  150E               	bsf	14,2	;volatile
  7474  1F14  0008               	return
  7475  1F15                     __end_of_RF_RxPayload:	
  7476                           
  7477                           	psect	text12
  7478  10E3                     __ptext12:	
  7479 ;; *************** function _RF_ReadRegisterData *****************
  7480 ;; Defined at:
  7481 ;;		line 99 in file "nrf24.c"
  7482 ;; Parameters:    Size  Location     Type
  7483 ;;  reg             1    wreg     unsigned char 
  7484 ;;  buf             1   10[BANK0 ] PTR unsigned char 
  7485 ;;		 -> Wireless_checkDataReceived@data(4), Wireless_wake@reg(1), Wireless_sleep@reg(1), 
  7486 ;;  bufSize         1   11[BANK0 ] unsigned char 
  7487 ;; Auto vars:     Size  Location     Type
  7488 ;;  reg             1   14[BANK0 ] unsigned char 
  7489 ;; Return value:  Size  Location     Type
  7490 ;;                  1    wreg      void 
  7491 ;; Registers used:
  7492 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7493 ;; Tracked objects:
  7494 ;;		On entry : 0/0
  7495 ;;		On exit  : 0/0
  7496 ;;		Unchanged: 0/0
  7497 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7498 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7499 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7500 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7501 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7502 ;;Total ram usage:        5 bytes
  7503 ;; Hardware stack levels used:    1
  7504 ;; Hardware stack levels required when called:    7
  7505 ;; This function calls:
  7506 ;;		_SPI_WriteRead
  7507 ;;		_SPI_WriteReadBuffer
  7508 ;; This function is called by:
  7509 ;;		_RF_RxPayload
  7510 ;;		_Wireless_sleep
  7511 ;;		_Wireless_wake
  7512 ;; This function uses a non-reentrant model
  7513 ;;
  7514                           
  7515                           
  7516                           ;psect for function _RF_ReadRegisterData
  7517  10E3                     _RF_ReadRegisterData:	
  7518                           
  7519                           ;incstack = 0
  7520                           ; Regs used in _RF_ReadRegisterData: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  7521                           ;RF_ReadRegisterData@reg stored from wreg
  7522  10E3  0020               	movlb	0	; select bank0
  7523  10E4  00AE               	movwf	RF_ReadRegisterData@reg
  7524                           
  7525                           ;nrf24.c: 100: do { LATCbits.LATC1 = 0; } while(0);
  7526  10E5  0022               	movlb	2	; select bank2
  7527  10E6  108E               	bcf	14,1	;volatile
  7528                           
  7529                           ;nrf24.c: 101: (void)SPI_WriteRead(0x00|reg);
  7530  10E7  0020               	movlb	0	; select bank0
  7531  10E8  082E               	movf	RF_ReadRegisterData@reg,w
  7532  10E9  319D  258F  3190   	fcall	_SPI_WriteRead
  7533                           
  7534                           ;nrf24.c: 102: SPI_WriteReadBuffer(buf, buf, bufSize);
  7535  10EC  0020               	movlb	0	; select bank0
  7536  10ED  082A               	movf	RF_ReadRegisterData@buf,w
  7537  10EE  00AC               	movwf	??_RF_ReadRegisterData
  7538  10EF  082C               	movf	??_RF_ReadRegisterData,w
  7539  10F0  00A3               	movwf	SPI_WriteReadBuffer@bufIn
  7540  10F1  082B               	movf	RF_ReadRegisterData@bufSize,w
  7541  10F2  00AD               	movwf	??_RF_ReadRegisterData+1
  7542  10F3  082D               	movf	??_RF_ReadRegisterData+1,w
  7543  10F4  00A4               	movwf	SPI_WriteReadBuffer@bufSize
  7544  10F5  082A               	movf	RF_ReadRegisterData@buf,w
  7545  10F6  3187  27DF  3190   	fcall	_SPI_WriteReadBuffer
  7546                           
  7547                           ;nrf24.c: 103: do { LATCbits.LATC1 = 1; } while(0);
  7548  10F9  0022               	movlb	2	; select bank2
  7549  10FA  148E               	bsf	14,1	;volatile
  7550                           
  7551                           ;nrf24.c: 104: _delay((unsigned long)((10)*(8000000/4000000.0)));
  7552  10FB  3006               	movlw	6
  7553  10FC                     u7697:	
  7554  10FC  0B89               	decfsz	9,f
  7555  10FD  28FC               	goto	u7697
  7556  10FE  3200               	nop2
  7557  10FF  0008               	return
  7558  1100                     __end_of_RF_ReadRegisterData:	
  7559                           
  7560                           	psect	text13
  7561  07DF                     __ptext13:	
  7562 ;; *************** function _SPI_WriteReadBuffer *****************
  7563 ;; Defined at:
  7564 ;;		line 43 in file "nrf24.c"
  7565 ;; Parameters:    Size  Location     Type
  7566 ;;  bufOut          1    wreg     PTR unsigned char 
  7567 ;;		 -> Wireless_checkDataReceived@data(4), Wireless_wake@reg(1), Wireless_sleep@reg(1), 
  7568 ;;  bufIn           1    3[BANK0 ] PTR unsigned char 
  7569 ;;		 -> Wireless_checkDataReceived@data(4), Wireless_wake@reg(1), Wireless_sleep@reg(1), 
  7570 ;;  bufSize         1    4[BANK0 ] unsigned char 
  7571 ;; Auto vars:     Size  Location     Type
  7572 ;;  bufOut          1    8[BANK0 ] PTR unsigned char 
  7573 ;;		 -> Wireless_checkDataReceived@data(4), Wireless_wake@reg(1), Wireless_sleep@reg(1), 
  7574 ;;  i               1    9[BANK0 ] unsigned char 
  7575 ;; Return value:  Size  Location     Type
  7576 ;;                  1    wreg      void 
  7577 ;; Registers used:
  7578 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7579 ;; Tracked objects:
  7580 ;;		On entry : 0/0
  7581 ;;		On exit  : 0/0
  7582 ;;		Unchanged: 0/0
  7583 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7584 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7585 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7586 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7587 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7588 ;;Total ram usage:        7 bytes
  7589 ;; Hardware stack levels used:    1
  7590 ;; Hardware stack levels required when called:    6
  7591 ;; This function calls:
  7592 ;;		_SPI_WriteRead
  7593 ;; This function is called by:
  7594 ;;		_RF_ReadRegisterData
  7595 ;; This function uses a non-reentrant model
  7596 ;;
  7597                           
  7598                           
  7599                           ;psect for function _SPI_WriteReadBuffer
  7600  07DF                     _SPI_WriteReadBuffer:	
  7601                           
  7602                           ;incstack = 0
  7603                           ; Regs used in _SPI_WriteReadBuffer: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  7604                           ;SPI_WriteReadBuffer@bufOut stored from wreg
  7605  07DF  0020               	movlb	0	; select bank0
  7606  07E0  00A8               	movwf	SPI_WriteReadBuffer@bufOut
  7607                           
  7608                           ;nrf24.c: 44: uint8_t i;
  7609                           ;nrf24.c: 46: for(i=0;i<bufSize;i++) {
  7610  07E1  01A9               	clrf	SPI_WriteReadBuffer@i
  7611  07E2                     l5978:	
  7612  07E2  0824               	movf	SPI_WriteReadBuffer@bufSize,w
  7613  07E3  0229               	subwf	SPI_WriteReadBuffer@i,w
  7614  07E4  1803               	btfsc	3,0
  7615  07E5  0008               	return
  7616                           
  7617                           ;nrf24.c: 47: bufIn[i] = SPI_WriteRead(bufOut[i]);
  7618  07E6  0829               	movf	SPI_WriteReadBuffer@i,w
  7619  07E7  0728               	addwf	SPI_WriteReadBuffer@bufOut,w
  7620  07E8  00A5               	movwf	??_SPI_WriteReadBuffer
  7621  07E9  0825               	movf	??_SPI_WriteReadBuffer,w
  7622  07EA  0086               	movwf	6
  7623  07EB  0187               	clrf	7
  7624  07EC  0801               	movf	1,w
  7625  07ED  319D  258F  3187   	fcall	_SPI_WriteRead
  7626  07F0  0020               	movlb	0	; select bank0
  7627  07F1  00A6               	movwf	??_SPI_WriteReadBuffer+1
  7628  07F2  0829               	movf	SPI_WriteReadBuffer@i,w
  7629  07F3  0723               	addwf	SPI_WriteReadBuffer@bufIn,w
  7630  07F4  00A7               	movwf	??_SPI_WriteReadBuffer+2
  7631  07F5  0827               	movf	??_SPI_WriteReadBuffer+2,w
  7632  07F6  0086               	movwf	6
  7633  07F7  0187               	clrf	7
  7634  07F8  0826               	movf	??_SPI_WriteReadBuffer+1,w
  7635  07F9  0081               	movwf	1
  7636  07FA  3001               	movlw	1
  7637  07FB  00A5               	movwf	??_SPI_WriteReadBuffer
  7638  07FC  0825               	movf	??_SPI_WriteReadBuffer,w
  7639  07FD  07A9               	addwf	SPI_WriteReadBuffer@i,f
  7640  07FE  2FE2               	goto	l5978
  7641  07FF                     __end_of_SPI_WriteReadBuffer:	
  7642                           
  7643                           	psect	text14
  7644  10C6                     __ptext14:	
  7645 ;; *************** function _RF_DataIsReady *****************
  7646 ;; Defined at:
  7647 ;;		line 202 in file "nrf24.c"
  7648 ;; Parameters:    Size  Location     Type
  7649 ;;  channel         1    wreg     PTR unsigned char 
  7650 ;;		 -> Wireless_checkDataReceived@channel(1), 
  7651 ;; Auto vars:     Size  Location     Type
  7652 ;;  channel         1    7[BANK0 ] PTR unsigned char 
  7653 ;;		 -> Wireless_checkDataReceived@channel(1), 
  7654 ;;  status          1    8[BANK0 ] unsigned char 
  7655 ;; Return value:  Size  Location     Type
  7656 ;;                  1    wreg      unsigned char 
  7657 ;; Registers used:
  7658 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7659 ;; Tracked objects:
  7660 ;;		On entry : 0/0
  7661 ;;		On exit  : 0/0
  7662 ;;		Unchanged: 0/0
  7663 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7664 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7665 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7666 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7667 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7668 ;;Total ram usage:        3 bytes
  7669 ;; Hardware stack levels used:    1
  7670 ;; Hardware stack levels required when called:    7
  7671 ;; This function calls:
  7672 ;;		_RF_ReadRegister
  7673 ;; This function is called by:
  7674 ;;		_Wireless_checkDataReceived
  7675 ;; This function uses a non-reentrant model
  7676 ;;
  7677                           
  7678                           
  7679                           ;psect for function _RF_DataIsReady
  7680  10C6                     _RF_DataIsReady:	
  7681                           
  7682                           ;incstack = 0
  7683                           ; Regs used in _RF_DataIsReady: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  7684                           ;RF_DataIsReady@channel stored from wreg
  7685  10C6  0020               	movlb	0	; select bank0
  7686  10C7  00A7               	movwf	RF_DataIsReady@channel
  7687                           
  7688                           ;nrf24.c: 204: char status;
  7689                           ;nrf24.c: 205: status=RF_ReadRegister(0x07);
  7690  10C8  3007               	movlw	7
  7691  10C9  319F  27E6  3190   	fcall	_RF_ReadRegister
  7692  10CC  0020               	movlb	0	; select bank0
  7693  10CD  00A6               	movwf	??_RF_DataIsReady
  7694  10CE  0826               	movf	??_RF_DataIsReady,w
  7695  10CF  00A8               	movwf	RF_DataIsReady@status
  7696                           
  7697                           ;nrf24.c: 206: status&=0x0E;
  7698  10D0  300E               	movlw	14
  7699  10D1  00A6               	movwf	??_RF_DataIsReady
  7700  10D2  0826               	movf	??_RF_DataIsReady,w
  7701  10D3  05A8               	andwf	RF_DataIsReady@status,f
  7702                           
  7703                           ;nrf24.c: 207: if(status==0x0E)
  7704  10D4  300E               	movlw	14
  7705  10D5  0628               	xorwf	RF_DataIsReady@status,w
  7706  10D6  1D03               	btfss	3,2
  7707  10D7  28DA               	goto	l6338
  7708                           
  7709                           ;nrf24.c: 208: return 0;
  7710  10D8  3000               	movlw	0
  7711  10D9  0008               	return
  7712  10DA                     l6338:	
  7713                           
  7714                           ;nrf24.c: 209: else
  7715                           ;nrf24.c: 210: *channel=status>>1;
  7716  10DA  3628               	lsrf	RF_DataIsReady@status,w
  7717  10DB  00A6               	movwf	??_RF_DataIsReady
  7718  10DC  0827               	movf	RF_DataIsReady@channel,w
  7719  10DD  0086               	movwf	6
  7720  10DE  0187               	clrf	7
  7721  10DF  0826               	movf	??_RF_DataIsReady,w
  7722  10E0  0081               	movwf	1
  7723                           
  7724                           ;nrf24.c: 211: return 1;
  7725  10E1  3001               	movlw	1
  7726  10E2  0008               	return
  7727  10E3                     __end_of_RF_DataIsReady:	
  7728                           
  7729                           	psect	text15
  7730  1FE6                     __ptext15:	
  7731 ;; *************** function _RF_ReadRegister *****************
  7732 ;; Defined at:
  7733 ;;		line 82 in file "nrf24.c"
  7734 ;; Parameters:    Size  Location     Type
  7735 ;;  reg             1    wreg     unsigned char 
  7736 ;; Auto vars:     Size  Location     Type
  7737 ;;  reg             1    4[BANK0 ] unsigned char 
  7738 ;;  val             1    5[BANK0 ] unsigned char 
  7739 ;; Return value:  Size  Location     Type
  7740 ;;                  1    wreg      unsigned char 
  7741 ;; Registers used:
  7742 ;;		wreg, status,2, status,0, pclath, cstack
  7743 ;; Tracked objects:
  7744 ;;		On entry : 0/0
  7745 ;;		On exit  : 0/0
  7746 ;;		Unchanged: 0/0
  7747 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7748 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7749 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7750 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7751 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7752 ;;Total ram usage:        3 bytes
  7753 ;; Hardware stack levels used:    1
  7754 ;; Hardware stack levels required when called:    6
  7755 ;; This function calls:
  7756 ;;		_SPI_WriteRead
  7757 ;; This function is called by:
  7758 ;;		_RF_DataIsReady
  7759 ;; This function uses a non-reentrant model
  7760 ;;
  7761                           
  7762                           
  7763                           ;psect for function _RF_ReadRegister
  7764  1FE6                     _RF_ReadRegister:	
  7765                           
  7766                           ;incstack = 0
  7767                           ; Regs used in _RF_ReadRegister: [wreg+status,2+status,0+pclath+cstack]
  7768                           ;RF_ReadRegister@reg stored from wreg
  7769  1FE6  0020               	movlb	0	; select bank0
  7770  1FE7  00A4               	movwf	RF_ReadRegister@reg
  7771                           
  7772                           ;nrf24.c: 83: uint8_t val;
  7773                           ;nrf24.c: 85: do { LATCbits.LATC1 = 0; } while(0);
  7774  1FE8  0022               	movlb	2	; select bank2
  7775  1FE9  108E               	bcf	14,1	;volatile
  7776                           
  7777                           ;nrf24.c: 86: (void)SPI_WriteRead(reg);
  7778  1FEA  0020               	movlb	0	; select bank0
  7779  1FEB  0824               	movf	RF_ReadRegister@reg,w
  7780  1FEC  319D  258F  319F   	fcall	_SPI_WriteRead
  7781                           
  7782                           ;nrf24.c: 87: val = SPI_WriteRead(0);
  7783  1FEF  3000               	movlw	0
  7784  1FF0  319D  258F  319F   	fcall	_SPI_WriteRead
  7785  1FF3  0020               	movlb	0	; select bank0
  7786  1FF4  00A3               	movwf	??_RF_ReadRegister
  7787  1FF5  0823               	movf	??_RF_ReadRegister,w
  7788  1FF6  00A5               	movwf	RF_ReadRegister@val
  7789                           
  7790                           ;nrf24.c: 88: do { LATCbits.LATC1 = 1; } while(0);
  7791  1FF7  0022               	movlb	2	; select bank2
  7792  1FF8  148E               	bsf	14,1	;volatile
  7793                           
  7794                           ;nrf24.c: 89: _delay((unsigned long)((10)*(8000000/4000000.0)));
  7795  1FF9  3006               	movlw	6
  7796  1FFA                     u7707:	
  7797  1FFA  0B89               	decfsz	9,f
  7798  1FFB  2FFA               	goto	u7707
  7799  1FFC  3200               	nop2
  7800                           
  7801                           ;nrf24.c: 90: return val;
  7802  1FFD  0020               	movlb	0	; select bank0
  7803  1FFE  0825               	movf	RF_ReadRegister@val,w
  7804  1FFF  0008               	return
  7805  2000                     __end_of_RF_ReadRegister:	
  7806                           
  7807                           	psect	text16
  7808  1F56                     __ptext16:	
  7809 ;; *************** function _DOOR_update *****************
  7810 ;; Defined at:
  7811 ;;		line 16 in file "doorlogic.c"
  7812 ;; Parameters:    Size  Location     Type
  7813 ;;  openAngle       1    wreg     unsigned char 
  7814 ;;  closedAngle     1    7[BANK0 ] unsigned char 
  7815 ;; Auto vars:     Size  Location     Type
  7816 ;;  openAngle       1    9[BANK0 ] unsigned char 
  7817 ;; Return value:  Size  Location     Type
  7818 ;;                  1    wreg      void 
  7819 ;; Registers used:
  7820 ;;		wreg, status,2, status,0, pclath, cstack
  7821 ;; Tracked objects:
  7822 ;;		On entry : 0/0
  7823 ;;		On exit  : 0/0
  7824 ;;		Unchanged: 0/0
  7825 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7826 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7827 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7828 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7829 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7830 ;;Total ram usage:        3 bytes
  7831 ;; Hardware stack levels used:    1
  7832 ;; Hardware stack levels required when called:    6
  7833 ;; This function calls:
  7834 ;;		_Storage_save
  7835 ;; This function is called by:
  7836 ;;		_Wireless_checkDataReceived
  7837 ;; This function uses a non-reentrant model
  7838 ;;
  7839                           
  7840                           
  7841                           ;psect for function _DOOR_update
  7842  1F56                     _DOOR_update:	
  7843                           
  7844                           ;incstack = 0
  7845                           ; Regs used in _DOOR_update: [wreg+status,2+status,0+pclath+cstack]
  7846                           ;DOOR_update@openAngle stored from wreg
  7847  1F56  0020               	movlb	0	; select bank0
  7848  1F57  00A9               	movwf	DOOR_update@openAngle
  7849                           
  7850                           ;doorlogic.c: 18: doorOpenAngle=openAngle;
  7851  1F58  0829               	movf	DOOR_update@openAngle,w
  7852  1F59  00A8               	movwf	??_DOOR_update
  7853  1F5A  0828               	movf	??_DOOR_update,w
  7854  1F5B  0021               	movlb	1	; select bank1
  7855  1F5C  00E7               	movwf	_doorOpenAngle^(0+128)
  7856                           
  7857                           ;doorlogic.c: 19: doorClosedAngle=closedAngle;
  7858  1F5D  0020               	movlb	0	; select bank0
  7859  1F5E  0827               	movf	DOOR_update@closedAngle,w
  7860  1F5F  00A8               	movwf	??_DOOR_update
  7861  1F60  0828               	movf	??_DOOR_update,w
  7862  1F61  0021               	movlb	1	; select bank1
  7863  1F62  00E6               	movwf	_doorClosedAngle^(0+128)
  7864                           
  7865                           ;doorlogic.c: 20: Storage_save(openAngle,closedAngle);
  7866  1F63  0020               	movlb	0	; select bank0
  7867  1F64  0827               	movf	DOOR_update@closedAngle,w
  7868  1F65  00A8               	movwf	??_DOOR_update
  7869  1F66  0828               	movf	??_DOOR_update,w
  7870  1F67  00A4               	movwf	Storage_save@closeAngle
  7871  1F68  0829               	movf	DOOR_update@openAngle,w
  7872  1F69  319F  27CC         	fcall	_Storage_save
  7873  1F6B  0008               	return
  7874  1F6C                     __end_of_DOOR_update:	
  7875                           
  7876                           	psect	text17
  7877  1FCC                     __ptext17:	
  7878 ;; *************** function _Storage_save *****************
  7879 ;; Defined at:
  7880 ;;		line 30 in file "storage.c"
  7881 ;; Parameters:    Size  Location     Type
  7882 ;;  openAngle       1    wreg     unsigned char 
  7883 ;;  closeAngle      1    4[BANK0 ] unsigned char 
  7884 ;; Auto vars:     Size  Location     Type
  7885 ;;  openAngle       1    6[BANK0 ] unsigned char 
  7886 ;; Return value:  Size  Location     Type
  7887 ;;                  1    wreg      void 
  7888 ;; Registers used:
  7889 ;;		wreg, status,2, status,0, pclath, cstack
  7890 ;; Tracked objects:
  7891 ;;		On entry : 0/0
  7892 ;;		On exit  : 0/0
  7893 ;;		Unchanged: 0/0
  7894 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7895 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7896 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7897 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7898 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7899 ;;Total ram usage:        3 bytes
  7900 ;; Hardware stack levels used:    1
  7901 ;; Hardware stack levels required when called:    5
  7902 ;; This function calls:
  7903 ;;		_DATAEE_WriteByte
  7904 ;; This function is called by:
  7905 ;;		_DOOR_update
  7906 ;; This function uses a non-reentrant model
  7907 ;;
  7908                           
  7909                           
  7910                           ;psect for function _Storage_save
  7911  1FCC                     _Storage_save:	
  7912                           
  7913                           ;incstack = 0
  7914                           ; Regs used in _Storage_save: [wreg+status,2+status,0+pclath+cstack]
  7915                           ;Storage_save@openAngle stored from wreg
  7916  1FCC  0020               	movlb	0	; select bank0
  7917  1FCD  00A6               	movwf	Storage_save@openAngle
  7918                           
  7919                           ;storage.c: 32: DATAEE_WriteByte(1, openAngle);
  7920  1FCE  0826               	movf	Storage_save@openAngle,w
  7921  1FCF  00A5               	movwf	??_Storage_save
  7922  1FD0  0825               	movf	??_Storage_save,w
  7923  1FD1  00A1               	movwf	DATAEE_WriteByte@bData
  7924  1FD2  3001               	movlw	1
  7925  1FD3  3191  21A2  319F   	fcall	_DATAEE_WriteByte
  7926                           
  7927                           ;storage.c: 33: DATAEE_WriteByte(2, closeAngle);
  7928  1FD6  0020               	movlb	0	; select bank0
  7929  1FD7  0824               	movf	Storage_save@closeAngle,w
  7930  1FD8  00A5               	movwf	??_Storage_save
  7931  1FD9  0825               	movf	??_Storage_save,w
  7932  1FDA  00A1               	movwf	DATAEE_WriteByte@bData
  7933  1FDB  3002               	movlw	2
  7934  1FDC  3191  21A2  319F   	fcall	_DATAEE_WriteByte
  7935                           
  7936                           ;storage.c: 34: DATAEE_WriteByte(0 , 1);
  7937  1FDF  0020               	movlb	0	; select bank0
  7938  1FE0  01A1               	clrf	DATAEE_WriteByte@bData
  7939  1FE1  0AA1               	incf	DATAEE_WriteByte@bData,f
  7940  1FE2  3000               	movlw	0
  7941  1FE3  3191  21A2         	fcall	_DATAEE_WriteByte
  7942  1FE5  0008               	return
  7943  1FE6                     __end_of_Storage_save:	
  7944                           
  7945                           	psect	text18
  7946  1000                     __ptext18:	
  7947 ;; *************** function _DOOR_resetPos *****************
  7948 ;; Defined at:
  7949 ;;		line 65 in file "doorlogic.c"
  7950 ;; Parameters:    Size  Location     Type
  7951 ;;		None
  7952 ;; Auto vars:     Size  Location     Type
  7953 ;;		None
  7954 ;; Return value:  Size  Location     Type
  7955 ;;                  1    wreg      enum E3332
  7956 ;; Registers used:
  7957 ;;		wreg, status,2
  7958 ;; Tracked objects:
  7959 ;;		On entry : 0/0
  7960 ;;		On exit  : 0/0
  7961 ;;		Unchanged: 0/0
  7962 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7963 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7964 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7965 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7966 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7967 ;;Total ram usage:        0 bytes
  7968 ;; Hardware stack levels used:    1
  7969 ;; Hardware stack levels required when called:    4
  7970 ;; This function calls:
  7971 ;;		Nothing
  7972 ;; This function is called by:
  7973 ;;		_main
  7974 ;;		_Wireless_checkDataReceived
  7975 ;; This function uses a non-reentrant model
  7976 ;;
  7977                           
  7978                           
  7979                           ;psect for function _DOOR_resetPos
  7980  1000                     _DOOR_resetPos:	
  7981                           
  7982                           ;doorlogic.c: 67: initialised=0;
  7983                           
  7984                           ;incstack = 0
  7985                           ; Regs used in _DOOR_resetPos: [wreg+status,2]
  7986  1000  0022               	movlb	2	; select bank2
  7987  1001  01D8               	clrf	_initialised^(0+256)
  7988                           
  7989                           ;doorlogic.c: 68: return(DOOR_CLOSED);
  7990  1002  3000               	movlw	0
  7991  1003  0008               	return
  7992  1004                     __end_of_DOOR_resetPos:	
  7993                           
  7994                           	psect	text19
  7995  134A                     __ptext19:	
  7996 ;; *************** function _Sensor_getSupplyVoltage *****************
  7997 ;; Defined at:
  7998 ;;		line 6 in file "sensors.c"
  7999 ;; Parameters:    Size  Location     Type
  8000 ;;		None
  8001 ;; Auto vars:     Size  Location     Type
  8002 ;;  voltage         3   36[BANK0 ] float 
  8003 ;;  res             2   39[BANK0 ] unsigned short 
  8004 ;; Return value:  Size  Location     Type
  8005 ;;                  3   33[BANK0 ] float 
  8006 ;; Registers used:
  8007 ;;		wreg, status,2, status,0, pclath, cstack
  8008 ;; Tracked objects:
  8009 ;;		On entry : 0/0
  8010 ;;		On exit  : 0/0
  8011 ;;		Unchanged: 0/0
  8012 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8013 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8014 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8015 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8016 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8017 ;;Total ram usage:        8 bytes
  8018 ;; Hardware stack levels used:    1
  8019 ;; Hardware stack levels required when called:    6
  8020 ;; This function calls:
  8021 ;;		_ADC_GetConversionResult
  8022 ;;		_ADC_IsConversionDone
  8023 ;;		_ADC_SelectChannel
  8024 ;;		_ADC_StartConversion
  8025 ;;		_FVR_IsOutputReady
  8026 ;;		_Sensor_peripheralSleep
  8027 ;;		_Sensor_peripheralWake
  8028 ;;		___ftdiv
  8029 ;;		___lwtoft
  8030 ;; This function is called by:
  8031 ;;		_Wireless_packageData
  8032 ;; This function uses a non-reentrant model
  8033 ;;
  8034                           
  8035                           
  8036                           ;psect for function _Sensor_getSupplyVoltage
  8037  134A                     _Sensor_getSupplyVoltage:	
  8038                           
  8039                           ;sensors.c: 8: u16 res;
  8040                           ;sensors.c: 9: float voltage;
  8041                           ;sensors.c: 11: Sensor_peripheralWake();
  8042                           
  8043                           ;incstack = 0
  8044                           ; Regs used in _Sensor_getSupplyVoltage: [wreg+status,2+status,0+pclath+cstack]
  8045  134A  319D  2584  3193   	fcall	_Sensor_peripheralWake
  8046  134D                     l6530:	
  8047                           ;sensors.c: 12: while(!FVR_IsOutputReady());
  8048                           
  8049  134D  319D  2595  3193   	fcall	_FVR_IsOutputReady
  8050  1350  3A00               	xorlw	0
  8051  1351  1903               	skipnz
  8052  1352  2B4D               	goto	l6530
  8053                           
  8054                           ;sensors.c: 13: ADC_SelectChannel(channel_FVR);
  8055  1353  301F               	movlw	31
  8056  1354  319E  268A  3193   	fcall	_ADC_SelectChannel
  8057                           
  8058                           ;sensors.c: 14: ADC_StartConversion();
  8059  1357  319D  2570  3193   	fcall	_ADC_StartConversion
  8060  135A                     l6536:	
  8061                           ;sensors.c: 15: while(!ADC_IsConversionDone());
  8062                           
  8063  135A  319D  25B5  3193   	fcall	_ADC_IsConversionDone
  8064  135D  3A00               	xorlw	0
  8065  135E  1903               	skipnz
  8066  135F  2B5A               	goto	l6536
  8067                           
  8068                           ;sensors.c: 16: Sensor_peripheralSleep();
  8069  1360  319D  257F  3193   	fcall	_Sensor_peripheralSleep
  8070                           
  8071                           ;sensors.c: 17: res=ADC_GetConversionResult();
  8072  1363  319E  2609  3193   	fcall	_ADC_GetConversionResult
  8073  1366  0020               	movlb	0	; select bank0
  8074  1367  0822               	movf	?_ADC_GetConversionResult+1,w
  8075  1368  00C8               	movwf	Sensor_getSupplyVoltage@res+1
  8076  1369  0821               	movf	?_ADC_GetConversionResult,w
  8077  136A  00C7               	movwf	Sensor_getSupplyVoltage@res
  8078                           
  8079                           ;sensors.c: 19: voltage= (float) 1.024 * 1024/(float)res;
  8080  136B  0848               	movf	Sensor_getSupplyVoltage@res+1,w
  8081  136C  00AA               	movwf	___lwtoft@c+1
  8082  136D  0847               	movf	Sensor_getSupplyVoltage@res,w
  8083  136E  00A9               	movwf	___lwtoft@c
  8084  136F  319F  2715  3193   	fcall	___lwtoft
  8085  1372  0020               	movlb	0	; select bank0
  8086  1373  0829               	movf	?___lwtoft,w
  8087  1374  00B1               	movwf	___ftdiv@f2
  8088  1375  082A               	movf	?___lwtoft+1,w
  8089  1376  00B2               	movwf	___ftdiv@f2+1
  8090  1377  082B               	movf	?___lwtoft+2,w
  8091  1378  00B3               	movwf	___ftdiv@f2+2
  8092  1379  3012               	movlw	18
  8093  137A  00B4               	movwf	___ftdiv@f1
  8094  137B  3083               	movlw	131
  8095  137C  00B5               	movwf	___ftdiv@f1+1
  8096  137D  3044               	movlw	68
  8097  137E  00B6               	movwf	___ftdiv@f1+2
  8098  137F  318A  22EC         	fcall	___ftdiv
  8099  1381  0020               	movlb	0	; select bank0
  8100  1382  0831               	movf	?___ftdiv,w
  8101  1383  00C4               	movwf	Sensor_getSupplyVoltage@voltage
  8102  1384  0832               	movf	?___ftdiv+1,w
  8103  1385  00C5               	movwf	Sensor_getSupplyVoltage@voltage+1
  8104  1386  0833               	movf	?___ftdiv+2,w
  8105  1387  00C6               	movwf	Sensor_getSupplyVoltage@voltage+2
  8106                           
  8107                           ;sensors.c: 20: return(voltage);
  8108  1388  0844               	movf	Sensor_getSupplyVoltage@voltage,w
  8109  1389  00C1               	movwf	?_Sensor_getSupplyVoltage
  8110  138A  0845               	movf	Sensor_getSupplyVoltage@voltage+1,w
  8111  138B  00C2               	movwf	?_Sensor_getSupplyVoltage+1
  8112  138C  0846               	movf	Sensor_getSupplyVoltage@voltage+2,w
  8113  138D  00C3               	movwf	?_Sensor_getSupplyVoltage+2
  8114  138E  0008               	return
  8115  138F                     __end_of_Sensor_getSupplyVoltage:	
  8116                           
  8117                           	psect	text20
  8118  1D84                     __ptext20:	
  8119 ;; *************** function _Sensor_peripheralWake *****************
  8120 ;; Defined at:
  8121 ;;		line 32 in file "sensors.c"
  8122 ;; Parameters:    Size  Location     Type
  8123 ;;		None
  8124 ;; Auto vars:     Size  Location     Type
  8125 ;;		None
  8126 ;; Return value:  Size  Location     Type
  8127 ;;                  1    wreg      void 
  8128 ;; Registers used:
  8129 ;;		None
  8130 ;; Tracked objects:
  8131 ;;		On entry : 0/0
  8132 ;;		On exit  : 0/0
  8133 ;;		Unchanged: 0/0
  8134 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8135 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8136 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8137 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8138 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8139 ;;Total ram usage:        0 bytes
  8140 ;; Hardware stack levels used:    1
  8141 ;; Hardware stack levels required when called:    4
  8142 ;; This function calls:
  8143 ;;		Nothing
  8144 ;; This function is called by:
  8145 ;;		_Sensor_getSupplyVoltage
  8146 ;; This function uses a non-reentrant model
  8147 ;;
  8148                           
  8149                           
  8150                           ;psect for function _Sensor_peripheralWake
  8151  1D84                     _Sensor_peripheralWake:	
  8152                           
  8153                           ;sensors.c: 34: ADCON0bits.ADON=1;
  8154                           
  8155                           ;incstack = 0
  8156                           ; Regs used in _Sensor_peripheralWake: []
  8157  1D84  0021               	movlb	1	; select bank1
  8158  1D85  141D               	bsf	29,0	;volatile
  8159                           
  8160                           ;sensors.c: 35: FVRCONbits.FVREN=1;
  8161  1D86  0022               	movlb	2	; select bank2
  8162  1D87  1797               	bsf	23,7	;volatile
  8163  1D88  0008               	return
  8164  1D89                     __end_of_Sensor_peripheralWake:	
  8165                           
  8166                           	psect	text21
  8167  1D7F                     __ptext21:	
  8168 ;; *************** function _Sensor_peripheralSleep *****************
  8169 ;; Defined at:
  8170 ;;		line 26 in file "sensors.c"
  8171 ;; Parameters:    Size  Location     Type
  8172 ;;		None
  8173 ;; Auto vars:     Size  Location     Type
  8174 ;;		None
  8175 ;; Return value:  Size  Location     Type
  8176 ;;                  1    wreg      void 
  8177 ;; Registers used:
  8178 ;;		None
  8179 ;; Tracked objects:
  8180 ;;		On entry : 0/0
  8181 ;;		On exit  : 0/0
  8182 ;;		Unchanged: 0/0
  8183 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8184 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8185 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8186 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8187 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8188 ;;Total ram usage:        0 bytes
  8189 ;; Hardware stack levels used:    1
  8190 ;; Hardware stack levels required when called:    4
  8191 ;; This function calls:
  8192 ;;		Nothing
  8193 ;; This function is called by:
  8194 ;;		_Sensor_getSupplyVoltage
  8195 ;;		_main
  8196 ;; This function uses a non-reentrant model
  8197 ;;
  8198                           
  8199                           
  8200                           ;psect for function _Sensor_peripheralSleep
  8201  1D7F                     _Sensor_peripheralSleep:	
  8202                           
  8203                           ;sensors.c: 28: ADCON0bits.ADON=0;
  8204                           
  8205                           ;incstack = 0
  8206                           ; Regs used in _Sensor_peripheralSleep: []
  8207  1D7F  0021               	movlb	1	; select bank1
  8208  1D80  101D               	bcf	29,0	;volatile
  8209                           
  8210                           ;sensors.c: 29: FVRCONbits.FVREN=0;
  8211  1D81  0022               	movlb	2	; select bank2
  8212  1D82  1397               	bcf	23,7	;volatile
  8213  1D83  0008               	return
  8214  1D84                     __end_of_Sensor_peripheralSleep:	
  8215                           
  8216                           	psect	text22
  8217  1D95                     __ptext22:	
  8218 ;; *************** function _FVR_IsOutputReady *****************
  8219 ;; Defined at:
  8220 ;;		line 63 in file "mcc_generated_files/fvr.c"
  8221 ;; Parameters:    Size  Location     Type
  8222 ;;		None
  8223 ;; Auto vars:     Size  Location     Type
  8224 ;;		None
  8225 ;; Return value:  Size  Location     Type
  8226 ;;                  1    wreg      unsigned char 
  8227 ;; Registers used:
  8228 ;;		wreg, status,2, status,0
  8229 ;; Tracked objects:
  8230 ;;		On entry : 0/0
  8231 ;;		On exit  : 0/0
  8232 ;;		Unchanged: 0/0
  8233 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8234 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8235 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8236 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8237 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8238 ;;Total ram usage:        0 bytes
  8239 ;; Hardware stack levels used:    1
  8240 ;; Hardware stack levels required when called:    4
  8241 ;; This function calls:
  8242 ;;		Nothing
  8243 ;; This function is called by:
  8244 ;;		_Sensor_getSupplyVoltage
  8245 ;; This function uses a non-reentrant model
  8246 ;;
  8247                           
  8248                           
  8249                           ;psect for function _FVR_IsOutputReady
  8250  1D95                     _FVR_IsOutputReady:	
  8251                           
  8252                           ;fvr.c: 65: return (FVRCONbits.FVRRDY);
  8253                           
  8254                           ;incstack = 0
  8255                           ; Regs used in _FVR_IsOutputReady: [wreg+status,2+status,0]
  8256  1D95  0022               	movlb	2	; select bank2
  8257  1D96  0E17               	swapf	23,w	;volatile
  8258  1D97  0C89               	rrf	9,f
  8259  1D98  0C89               	rrf	9,f
  8260  1D99  3901               	andlw	1
  8261  1D9A  0008               	return
  8262  1D9B                     __end_of_FVR_IsOutputReady:	
  8263                           
  8264                           	psect	text23
  8265  1D70                     __ptext23:	
  8266 ;; *************** function _ADC_StartConversion *****************
  8267 ;; Defined at:
  8268 ;;		line 88 in file "mcc_generated_files/adc.c"
  8269 ;; Parameters:    Size  Location     Type
  8270 ;;		None
  8271 ;; Auto vars:     Size  Location     Type
  8272 ;;		None
  8273 ;; Return value:  Size  Location     Type
  8274 ;;                  1    wreg      void 
  8275 ;; Registers used:
  8276 ;;		None
  8277 ;; Tracked objects:
  8278 ;;		On entry : 0/0
  8279 ;;		On exit  : 0/0
  8280 ;;		Unchanged: 0/0
  8281 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8282 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8283 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8284 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8285 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8286 ;;Total ram usage:        0 bytes
  8287 ;; Hardware stack levels used:    1
  8288 ;; Hardware stack levels required when called:    4
  8289 ;; This function calls:
  8290 ;;		Nothing
  8291 ;; This function is called by:
  8292 ;;		_Sensor_getSupplyVoltage
  8293 ;; This function uses a non-reentrant model
  8294 ;;
  8295                           
  8296                           
  8297                           ;psect for function _ADC_StartConversion
  8298  1D70                     _ADC_StartConversion:	
  8299                           
  8300                           ;adc.c: 91: ADCON0bits.GO_nDONE = 1;
  8301                           
  8302                           ;incstack = 0
  8303                           ; Regs used in _ADC_StartConversion: []
  8304  1D70  0021               	movlb	1	; select bank1
  8305  1D71  149D               	bsf	29,1	;volatile
  8306  1D72  0008               	return
  8307  1D73                     __end_of_ADC_StartConversion:	
  8308                           
  8309                           	psect	text24
  8310  1E8A                     __ptext24:	
  8311 ;; *************** function _ADC_SelectChannel *****************
  8312 ;; Defined at:
  8313 ;;		line 80 in file "mcc_generated_files/adc.c"
  8314 ;; Parameters:    Size  Location     Type
  8315 ;;  channel         1    wreg     enum E2996
  8316 ;; Auto vars:     Size  Location     Type
  8317 ;;  channel         1    2[BANK0 ] enum E2996
  8318 ;; Return value:  Size  Location     Type
  8319 ;;                  1    wreg      void 
  8320 ;; Registers used:
  8321 ;;		wreg, status,2, status,0
  8322 ;; Tracked objects:
  8323 ;;		On entry : 0/0
  8324 ;;		On exit  : 0/0
  8325 ;;		Unchanged: 0/0
  8326 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8327 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8328 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8329 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8330 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8331 ;;Total ram usage:        2 bytes
  8332 ;; Hardware stack levels used:    1
  8333 ;; Hardware stack levels required when called:    4
  8334 ;; This function calls:
  8335 ;;		Nothing
  8336 ;; This function is called by:
  8337 ;;		_Sensor_getSupplyVoltage
  8338 ;; This function uses a non-reentrant model
  8339 ;;
  8340                           
  8341                           
  8342                           ;psect for function _ADC_SelectChannel
  8343  1E8A                     _ADC_SelectChannel:	
  8344                           
  8345                           ;incstack = 0
  8346                           ; Regs used in _ADC_SelectChannel: [wreg+status,2+status,0]
  8347                           ;ADC_SelectChannel@channel stored from wreg
  8348  1E8A  0020               	movlb	0	; select bank0
  8349  1E8B  00A2               	movwf	ADC_SelectChannel@channel
  8350                           
  8351                           ;adc.c: 83: ADCON0bits.CHS = channel;
  8352  1E8C  0822               	movf	ADC_SelectChannel@channel,w
  8353  1E8D  00A1               	movwf	??_ADC_SelectChannel
  8354  1E8E  0DA1               	rlf	??_ADC_SelectChannel,f
  8355  1E8F  0DA1               	rlf	??_ADC_SelectChannel,f
  8356  1E90  0021               	movlb	1	; select bank1
  8357  1E91  081D               	movf	29,w	;volatile
  8358  1E92  0020               	movlb	0	; select bank0
  8359  1E93  0621               	xorwf	??_ADC_SelectChannel,w
  8360  1E94  3983               	andlw	-125
  8361  1E95  0621               	xorwf	??_ADC_SelectChannel,w
  8362  1E96  0021               	movlb	1	; select bank1
  8363  1E97  009D               	movwf	29	;volatile
  8364                           
  8365                           ;adc.c: 85: ADCON0bits.ADON = 1;
  8366  1E98  141D               	bsf	29,0	;volatile
  8367  1E99  0008               	return
  8368  1E9A                     __end_of_ADC_SelectChannel:	
  8369                           
  8370                           	psect	text25
  8371  1DB5                     __ptext25:	
  8372 ;; *************** function _ADC_IsConversionDone *****************
  8373 ;; Defined at:
  8374 ;;		line 95 in file "mcc_generated_files/adc.c"
  8375 ;; Parameters:    Size  Location     Type
  8376 ;;		None
  8377 ;; Auto vars:     Size  Location     Type
  8378 ;;		None
  8379 ;; Return value:  Size  Location     Type
  8380 ;;                  1    wreg      unsigned char 
  8381 ;; Registers used:
  8382 ;;		wreg, status,0
  8383 ;; Tracked objects:
  8384 ;;		On entry : 0/0
  8385 ;;		On exit  : 0/0
  8386 ;;		Unchanged: 0/0
  8387 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8388 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8389 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8390 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8391 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8392 ;;Total ram usage:        0 bytes
  8393 ;; Hardware stack levels used:    1
  8394 ;; Hardware stack levels required when called:    4
  8395 ;; This function calls:
  8396 ;;		Nothing
  8397 ;; This function is called by:
  8398 ;;		_Sensor_getSupplyVoltage
  8399 ;; This function uses a non-reentrant model
  8400 ;;
  8401                           
  8402                           
  8403                           ;psect for function _ADC_IsConversionDone
  8404  1DB5                     _ADC_IsConversionDone:	
  8405                           
  8406                           ;adc.c: 98: return ((bool)(!ADCON0bits.GO_nDONE));
  8407                           
  8408                           ;incstack = 0
  8409                           ; Regs used in _ADC_IsConversionDone: [wreg+status,0]
  8410  1DB5  1003               	clrc
  8411  1DB6  0021               	movlb	1	; select bank1
  8412  1DB7  1C9D               	btfss	29,1	;volatile
  8413  1DB8  1403               	setc
  8414  1DB9  3000               	movlw	0
  8415  1DBA  3D09               	addwfc	9,w
  8416  1DBB  0008               	return
  8417  1DBC                     __end_of_ADC_IsConversionDone:	
  8418                           
  8419                           	psect	text26
  8420  1E09                     __ptext26:	
  8421 ;; *************** function _ADC_GetConversionResult *****************
  8422 ;; Defined at:
  8423 ;;		line 101 in file "mcc_generated_files/adc.c"
  8424 ;; Parameters:    Size  Location     Type
  8425 ;;		None
  8426 ;; Auto vars:     Size  Location     Type
  8427 ;;		None
  8428 ;; Return value:  Size  Location     Type
  8429 ;;                  2    1[BANK0 ] unsigned int 
  8430 ;; Registers used:
  8431 ;;		wreg
  8432 ;; Tracked objects:
  8433 ;;		On entry : 0/0
  8434 ;;		On exit  : 0/0
  8435 ;;		Unchanged: 0/0
  8436 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8437 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8438 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8439 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8440 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8441 ;;Total ram usage:        2 bytes
  8442 ;; Hardware stack levels used:    1
  8443 ;; Hardware stack levels required when called:    4
  8444 ;; This function calls:
  8445 ;;		Nothing
  8446 ;; This function is called by:
  8447 ;;		_Sensor_getSupplyVoltage
  8448 ;; This function uses a non-reentrant model
  8449 ;;
  8450                           
  8451                           
  8452                           ;psect for function _ADC_GetConversionResult
  8453  1E09                     _ADC_GetConversionResult:	
  8454                           
  8455                           ;adc.c: 104: return ((adc_result_t)((ADRESH << 8) + ADRESL));
  8456                           
  8457                           ;incstack = 0
  8458                           ; Regs used in _ADC_GetConversionResult: [wreg]
  8459  1E09  0021               	movlb	1	; select bank1
  8460  1E0A  081C               	movf	28,w	;volatile
  8461  1E0B  0020               	movlb	0	; select bank0
  8462  1E0C  00A2               	movwf	?_ADC_GetConversionResult+1
  8463  1E0D  0021               	movlb	1	; select bank1
  8464  1E0E  081B               	movf	27,w	;volatile
  8465  1E0F  0020               	movlb	0	; select bank0
  8466  1E10  00A1               	movwf	?_ADC_GetConversionResult
  8467  1E11  0008               	return
  8468  1E12                     __end_of_ADC_GetConversionResult:	
  8469                           
  8470                           	psect	text27
  8471  1EDE                     __ptext27:	
  8472 ;; *************** function _Diag_getSensorHealth *****************
  8473 ;; Defined at:
  8474 ;;		line 35 in file "diagnostics.c"
  8475 ;; Parameters:    Size  Location     Type
  8476 ;;		None
  8477 ;; Auto vars:     Size  Location     Type
  8478 ;;  var             1    2[BANK0 ] unsigned char 
  8479 ;; Return value:  Size  Location     Type
  8480 ;;                  1    wreg      unsigned char 
  8481 ;; Registers used:
  8482 ;;		wreg, status,2, status,0
  8483 ;; Tracked objects:
  8484 ;;		On entry : 0/0
  8485 ;;		On exit  : 0/0
  8486 ;;		Unchanged: 0/0
  8487 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8488 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8489 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8490 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8491 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8492 ;;Total ram usage:        2 bytes
  8493 ;; Hardware stack levels used:    1
  8494 ;; Hardware stack levels required when called:    4
  8495 ;; This function calls:
  8496 ;;		Nothing
  8497 ;; This function is called by:
  8498 ;;		_Wireless_packageData
  8499 ;; This function uses a non-reentrant model
  8500 ;;
  8501                           
  8502                           
  8503                           ;psect for function _Diag_getSensorHealth
  8504  1EDE                     _Diag_getSensorHealth:	
  8505                           
  8506                           ;diagnostics.c: 38: char var=0;
  8507                           
  8508                           ;incstack = 0
  8509                           ; Regs used in _Diag_getSensorHealth: [wreg+status,2+status,0]
  8510  1EDE  0020               	movlb	0	; select bank0
  8511  1EDF  01A2               	clrf	Diag_getSensorHealth@var
  8512                           
  8513                           ;diagnostics.c: 40: var|=sensorHealth.compassHealth;
  8514  1EE0  0022               	movlb	2	; select bank2
  8515  1EE1  0867               	movf	(_sensorHealth^(0+256)+1),w
  8516  1EE2  0020               	movlb	0	; select bank0
  8517  1EE3  00A1               	movwf	??_Diag_getSensorHealth
  8518  1EE4  0821               	movf	??_Diag_getSensorHealth,w
  8519  1EE5  04A2               	iorwf	Diag_getSensorHealth@var,f
  8520                           
  8521                           ;diagnostics.c: 41: var<<=1;
  8522  1EE6  1003               	clrc
  8523  1EE7  0DA2               	rlf	Diag_getSensorHealth@var,f
  8524                           
  8525                           ;diagnostics.c: 42: var|=sensorHealth.tempSensorHealth;
  8526  1EE8  0022               	movlb	2	; select bank2
  8527  1EE9  0866               	movf	_sensorHealth^(0+256),w
  8528  1EEA  0020               	movlb	0	; select bank0
  8529  1EEB  00A1               	movwf	??_Diag_getSensorHealth
  8530  1EEC  0821               	movf	??_Diag_getSensorHealth,w
  8531  1EED  04A2               	iorwf	Diag_getSensorHealth@var,f
  8532                           
  8533                           ;diagnostics.c: 44: return var;
  8534  1EEE  0822               	movf	Diag_getSensorHealth@var,w
  8535  1EEF  0008               	return
  8536  1EF0                     __end_of_Diag_getSensorHealth:	
  8537                           
  8538                           	psect	text28
  8539  082E                     __ptext28:	
  8540 ;; *************** function _Wireless_init *****************
  8541 ;; Defined at:
  8542 ;;		line 11 in file "wireless.c"
  8543 ;; Parameters:    Size  Location     Type
  8544 ;;		None
  8545 ;; Auto vars:     Size  Location     Type
  8546 ;;		None
  8547 ;; Return value:  Size  Location     Type
  8548 ;;                  1    wreg      void 
  8549 ;; Registers used:
  8550 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  8551 ;; Tracked objects:
  8552 ;;		On entry : 0/0
  8553 ;;		On exit  : 0/0
  8554 ;;		Unchanged: 0/0
  8555 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8556 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8557 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8558 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8559 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8560 ;;Total ram usage:        2 bytes
  8561 ;; Hardware stack levels used:    1
  8562 ;; Hardware stack levels required when called:    8
  8563 ;; This function calls:
  8564 ;;		_RF_Init
  8565 ;;		_RF_ResetStatusIRQ
  8566 ;;		_RF_WriteRegister
  8567 ;;		_RF_WriteRegisterData
  8568 ;; This function is called by:
  8569 ;;		_main
  8570 ;; This function uses a non-reentrant model
  8571 ;;
  8572                           
  8573                           
  8574                           ;psect for function _Wireless_init
  8575  082E                     _Wireless_init:	
  8576                           
  8577                           ;wireless.c: 13: static const uint8_t TADDR[5] = "10001";
  8578                           ;wireless.c: 16: _delay((unsigned long)((100)*(8000000/4000.0)));
  8579                           
  8580                           ;incstack = 0
  8581                           ; Regs used in _Wireless_init: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  8582  082E  3002               	movlw	2
  8583  082F  0020               	movlb	0	; select bank0
  8584  0830  00AF               	movwf	??_Wireless_init+1
  8585  0831  3004               	movlw	4
  8586  0832  00AE               	movwf	??_Wireless_init
  8587  0833  30BA               	movlw	186
  8588  0834                     u7717:	
  8589  0834  0B89               	decfsz	9,f
  8590  0835  2834               	goto	u7717
  8591  0836  0BAE               	decfsz	??_Wireless_init,f
  8592  0837  2834               	goto	u7717
  8593  0838  0BAF               	decfsz	??_Wireless_init+1,f
  8594  0839  2834               	goto	u7717
  8595  083A  0000               	nop
  8596                           
  8597                           ;wireless.c: 18: RF_Init();
  8598  083B  319D  257B  3188   	fcall	_RF_Init
  8599                           
  8600                           ;wireless.c: 20: RF_WriteRegister(0x06, 0x06|0x20);
  8601  083E  3026               	movlw	38
  8602  083F  0020               	movlb	0	; select bank0
  8603  0840  00AE               	movwf	??_Wireless_init
  8604  0841  082E               	movf	??_Wireless_init,w
  8605  0842  00A3               	movwf	RF_WriteRegister@val
  8606  0843  3006               	movlw	6
  8607  0844  319F  2740  3188   	fcall	_RF_WriteRegister
  8608                           
  8609                           ;wireless.c: 21: RF_WriteRegister(0x11, 5);
  8610  0847  3005               	movlw	5
  8611  0848  0020               	movlb	0	; select bank0
  8612  0849  00AE               	movwf	??_Wireless_init
  8613  084A  082E               	movf	??_Wireless_init,w
  8614  084B  00A3               	movwf	RF_WriteRegister@val
  8615  084C  3011               	movlw	17
  8616  084D  319F  2740  3188   	fcall	_RF_WriteRegister
  8617                           
  8618                           ;wireless.c: 22: RF_WriteRegister(0x05, 2);
  8619  0850  3002               	movlw	2
  8620  0851  0020               	movlb	0	; select bank0
  8621  0852  00AE               	movwf	??_Wireless_init
  8622  0853  082E               	movf	??_Wireless_init,w
  8623  0854  00A3               	movwf	RF_WriteRegister@val
  8624  0855  3005               	movlw	5
  8625  0856  319F  2740  3188   	fcall	_RF_WriteRegister
  8626                           
  8627                           ;wireless.c: 25: RF_WriteRegisterData(0x0A, (uint8_t*)TADDR, sizeof(TADDR));
  8628  0859  3039               	movlw	low (Wireless_init@TADDR| (0+32768))
  8629  085A  0020               	movlb	0	; select bank0
  8630  085B  00A9               	movwf	RF_WriteRegisterData@buf
  8631  085C  3098               	movlw	high (Wireless_init@TADDR| (0+32768))
  8632  085D  00AA               	movwf	RF_WriteRegisterData@buf+1
  8633  085E  3005               	movlw	5
  8634  085F  00AE               	movwf	??_Wireless_init
  8635  0860  082E               	movf	??_Wireless_init,w
  8636  0861  00AB               	movwf	RF_WriteRegisterData@bufSize
  8637  0862  300A               	movlw	10
  8638  0863  3190  20A9  3188   	fcall	_RF_WriteRegisterData
  8639                           
  8640                           ;wireless.c: 26: RF_WriteRegisterData(0x10, (uint8_t*)TADDR, sizeof(TADDR));
  8641  0866  3039               	movlw	low (Wireless_init@TADDR| (0+32768))
  8642  0867  0020               	movlb	0	; select bank0
  8643  0868  00A9               	movwf	RF_WriteRegisterData@buf
  8644  0869  3098               	movlw	high (Wireless_init@TADDR| (0+32768))
  8645  086A  00AA               	movwf	RF_WriteRegisterData@buf+1
  8646  086B  3005               	movlw	5
  8647  086C  00AE               	movwf	??_Wireless_init
  8648  086D  082E               	movf	??_Wireless_init,w
  8649  086E  00AB               	movwf	RF_WriteRegisterData@bufSize
  8650  086F  3010               	movlw	16
  8651  0870  3190  20A9  3188   	fcall	_RF_WriteRegisterData
  8652                           
  8653                           ;wireless.c: 29: RF_WriteRegister(0x02, 0x01);
  8654  0873  0020               	movlb	0	; select bank0
  8655  0874  01A3               	clrf	RF_WriteRegister@val
  8656  0875  0AA3               	incf	RF_WriteRegister@val,f
  8657  0876  3002               	movlw	2
  8658  0877  319F  2740  3188   	fcall	_RF_WriteRegister
  8659                           
  8660                           ;wireless.c: 32: RF_ResetStatusIRQ(0x40|0x20|0x10);
  8661  087A  3070               	movlw	112
  8662  087B  3191  213D  3188   	fcall	_RF_ResetStatusIRQ
  8663                           
  8664                           ;wireless.c: 34: RF_WriteRegister(0x01, 0x01);
  8665  087E  0020               	movlb	0	; select bank0
  8666  087F  01A3               	clrf	RF_WriteRegister@val
  8667  0880  0AA3               	incf	RF_WriteRegister@val,f
  8668  0881  3001               	movlw	1
  8669  0882  319F  2740  3188   	fcall	_RF_WriteRegister
  8670                           
  8671                           ;wireless.c: 35: RF_WriteRegister(0x04, 0xF0|0x01);
  8672  0885  30F1               	movlw	241
  8673  0886  0020               	movlb	0	; select bank0
  8674  0887  00AE               	movwf	??_Wireless_init
  8675  0888  082E               	movf	??_Wireless_init,w
  8676  0889  00A3               	movwf	RF_WriteRegister@val
  8677  088A  3004               	movlw	4
  8678  088B  319F  2740  3188   	fcall	_RF_WriteRegister
  8679                           
  8680                           ;wireless.c: 36: RF_WriteRegister(0x00, (1<<3)|(1<<2)|(1<<1)|(0));
  8681  088E  300E               	movlw	14
  8682  088F  0020               	movlb	0	; select bank0
  8683  0890  00AE               	movwf	??_Wireless_init
  8684  0891  082E               	movf	??_Wireless_init,w
  8685  0892  00A3               	movwf	RF_WriteRegister@val
  8686  0893  3000               	movlw	0
  8687  0894  319F  2740  3188   	fcall	_RF_WriteRegister
  8688                           
  8689                           ;wireless.c: 37: RF_WriteRegister(0x1D, (1<<2) | (1<<1));
  8690  0897  3006               	movlw	6
  8691  0898  0020               	movlb	0	; select bank0
  8692  0899  00AE               	movwf	??_Wireless_init
  8693  089A  082E               	movf	??_Wireless_init,w
  8694  089B  00A3               	movwf	RF_WriteRegister@val
  8695  089C  301D               	movlw	29
  8696  089D  319F  2740  3188   	fcall	_RF_WriteRegister
  8697                           
  8698                           ;wireless.c: 38: RF_WriteRegister(0x1C, (1<<0));
  8699  08A0  0020               	movlb	0	; select bank0
  8700  08A1  01A3               	clrf	RF_WriteRegister@val
  8701  08A2  0AA3               	incf	RF_WriteRegister@val,f
  8702  08A3  301C               	movlw	28
  8703  08A4  319F  2740         	fcall	_RF_WriteRegister
  8704                           
  8705                           ;wireless.c: 39: do { LATCbits.LATC2 = 0; } while(0);
  8706  08A6  0022               	movlb	2	; select bank2
  8707  08A7  110E               	bcf	14,2	;volatile
  8708  08A8  0008               	return
  8709  08A9                     __end_of_Wireless_init:	
  8710                           
  8711                           	psect	text29
  8712  10A9                     __ptext29:	
  8713 ;; *************** function _RF_WriteRegisterData *****************
  8714 ;; Defined at:
  8715 ;;		line 113 in file "nrf24.c"
  8716 ;; Parameters:    Size  Location     Type
  8717 ;;  reg             1    wreg     unsigned char 
  8718 ;;  buf             2    9[BANK0 ] PTR unsigned char 
  8719 ;;		 -> Wireless_packageData@data(5), Wireless_init@TADDR(5), 
  8720 ;;  bufSize         1   11[BANK0 ] unsigned char 
  8721 ;; Auto vars:     Size  Location     Type
  8722 ;;  reg             1   13[BANK0 ] unsigned char 
  8723 ;; Return value:  Size  Location     Type
  8724 ;;                  1    wreg      void 
  8725 ;; Registers used:
  8726 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  8727 ;; Tracked objects:
  8728 ;;		On entry : 0/0
  8729 ;;		On exit  : 0/0
  8730 ;;		Unchanged: 0/0
  8731 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8732 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8733 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8734 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8735 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8736 ;;Total ram usage:        5 bytes
  8737 ;; Hardware stack levels used:    1
  8738 ;; Hardware stack levels required when called:    7
  8739 ;; This function calls:
  8740 ;;		_SPI_WriteBuffer
  8741 ;;		_SPI_WriteRead
  8742 ;; This function is called by:
  8743 ;;		_RF_TxPayload
  8744 ;;		_Wireless_init
  8745 ;;		_RF_openWritingPipe
  8746 ;;		_RF_openReadingPipe
  8747 ;; This function uses a non-reentrant model
  8748 ;;
  8749                           
  8750                           
  8751                           ;psect for function _RF_WriteRegisterData
  8752  10A9                     _RF_WriteRegisterData:	
  8753                           
  8754                           ;incstack = 0
  8755                           ; Regs used in _RF_WriteRegisterData: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  8756                           ;RF_WriteRegisterData@reg stored from wreg
  8757  10A9  0020               	movlb	0	; select bank0
  8758  10AA  00AD               	movwf	RF_WriteRegisterData@reg
  8759                           
  8760                           ;nrf24.c: 114: do { LATCbits.LATC1 = 0; } while(0);
  8761  10AB  0022               	movlb	2	; select bank2
  8762  10AC  108E               	bcf	14,1	;volatile
  8763                           
  8764                           ;nrf24.c: 115: (void)SPI_WriteRead(0x20|reg);
  8765  10AD  0020               	movlb	0	; select bank0
  8766  10AE  082D               	movf	RF_WriteRegisterData@reg,w
  8767  10AF  3820               	iorlw	32
  8768  10B0  319D  258F  3190   	fcall	_SPI_WriteRead
  8769                           
  8770                           ;nrf24.c: 116: SPI_WriteBuffer(buf, bufSize);
  8771  10B3  0020               	movlb	0	; select bank0
  8772  10B4  082A               	movf	RF_WriteRegisterData@buf+1,w
  8773  10B5  00A4               	movwf	SPI_WriteBuffer@bufOut+1
  8774  10B6  0829               	movf	RF_WriteRegisterData@buf,w
  8775  10B7  00A3               	movwf	SPI_WriteBuffer@bufOut
  8776  10B8  082B               	movf	RF_WriteRegisterData@bufSize,w
  8777  10B9  00AC               	movwf	??_RF_WriteRegisterData
  8778  10BA  082C               	movf	??_RF_WriteRegisterData,w
  8779  10BB  00A5               	movwf	SPI_WriteBuffer@bufSize
  8780  10BC  3190  203A  3190   	fcall	_SPI_WriteBuffer
  8781                           
  8782                           ;nrf24.c: 117: do { LATCbits.LATC1 = 1; } while(0);
  8783  10BF  0022               	movlb	2	; select bank2
  8784  10C0  148E               	bsf	14,1	;volatile
  8785                           
  8786                           ;nrf24.c: 118: _delay((unsigned long)((10)*(8000000/4000000.0)));
  8787  10C1  3006               	movlw	6
  8788  10C2                     u7727:	
  8789  10C2  0B89               	decfsz	9,f
  8790  10C3  28C2               	goto	u7727
  8791  10C4  3200               	nop2
  8792  10C5  0008               	return
  8793  10C6                     __end_of_RF_WriteRegisterData:	
  8794                           
  8795                           	psect	text30
  8796  103A                     __ptext30:	
  8797 ;; *************** function _SPI_WriteBuffer *****************
  8798 ;; Defined at:
  8799 ;;		line 56 in file "nrf24.c"
  8800 ;; Parameters:    Size  Location     Type
  8801 ;;  bufOut          2    3[BANK0 ] PTR unsigned char 
  8802 ;;		 -> Wireless_packageData@data(5), Wireless_init@TADDR(5), 
  8803 ;;  bufSize         1    5[BANK0 ] unsigned char 
  8804 ;; Auto vars:     Size  Location     Type
  8805 ;;  i               1    8[BANK0 ] unsigned char 
  8806 ;; Return value:  Size  Location     Type
  8807 ;;                  1    wreg      void 
  8808 ;; Registers used:
  8809 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  8810 ;; Tracked objects:
  8811 ;;		On entry : 0/0
  8812 ;;		On exit  : 0/0
  8813 ;;		Unchanged: 0/0
  8814 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8815 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8816 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8817 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8818 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8819 ;;Total ram usage:        6 bytes
  8820 ;; Hardware stack levels used:    1
  8821 ;; Hardware stack levels required when called:    6
  8822 ;; This function calls:
  8823 ;;		_SPI_WriteRead
  8824 ;; This function is called by:
  8825 ;;		_RF_WriteRegisterData
  8826 ;; This function uses a non-reentrant model
  8827 ;;
  8828                           
  8829                           
  8830                           ;psect for function _SPI_WriteBuffer
  8831  103A                     _SPI_WriteBuffer:	
  8832                           
  8833                           ;nrf24.c: 57: uint8_t i;
  8834                           ;nrf24.c: 59: for(i=0;i<bufSize;i++) {
  8835                           
  8836                           ;incstack = 0
  8837                           ; Regs used in _SPI_WriteBuffer: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  8838  103A  0020               	movlb	0	; select bank0
  8839  103B  01A8               	clrf	SPI_WriteBuffer@i
  8840  103C                     l5986:	
  8841  103C  0825               	movf	SPI_WriteBuffer@bufSize,w
  8842  103D  0228               	subwf	SPI_WriteBuffer@i,w
  8843  103E  1803               	btfsc	3,0
  8844  103F  0008               	return
  8845                           
  8846                           ;nrf24.c: 60: (void)SPI_WriteRead(bufOut[i]);
  8847  1040  0824               	movf	SPI_WriteBuffer@bufOut+1,w
  8848  1041  00A7               	movwf	??_SPI_WriteBuffer+1
  8849  1042  0823               	movf	SPI_WriteBuffer@bufOut,w
  8850  1043  00A6               	movwf	??_SPI_WriteBuffer
  8851  1044  0828               	movf	SPI_WriteBuffer@i,w
  8852  1045  0726               	addwf	??_SPI_WriteBuffer,w
  8853  1046  0084               	movwf	4
  8854  1047  0827               	movf	??_SPI_WriteBuffer+1,w
  8855  1048  1803               	skipnc
  8856  1049  0A27               	incf	??_SPI_WriteBuffer+1,w
  8857  104A  0085               	movwf	5
  8858  104B  0800               	movf	0,w	;code access
  8859  104C  319D  258F  3190   	fcall	_SPI_WriteRead
  8860  104F  3001               	movlw	1
  8861  1050  0020               	movlb	0	; select bank0
  8862  1051  00A6               	movwf	??_SPI_WriteBuffer
  8863  1052  0826               	movf	??_SPI_WriteBuffer,w
  8864  1053  07A8               	addwf	SPI_WriteBuffer@i,f
  8865  1054  283C               	goto	l5986
  8866  1055                     __end_of_SPI_WriteBuffer:	
  8867                           
  8868                           	psect	text31
  8869  113D                     __ptext31:	
  8870 ;; *************** function _RF_ResetStatusIRQ *****************
  8871 ;; Defined at:
  8872 ;;		line 158 in file "nrf24.c"
  8873 ;; Parameters:    Size  Location     Type
  8874 ;;  flags           1    wreg     unsigned char 
  8875 ;; Auto vars:     Size  Location     Type
  8876 ;;  flags           1    6[BANK0 ] unsigned char 
  8877 ;; Return value:  Size  Location     Type
  8878 ;;                  1    wreg      void 
  8879 ;; Registers used:
  8880 ;;		wreg, status,2, status,0, pclath, cstack
  8881 ;; Tracked objects:
  8882 ;;		On entry : 0/0
  8883 ;;		On exit  : 0/0
  8884 ;;		Unchanged: 0/0
  8885 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8886 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8887 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8888 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8889 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8890 ;;Total ram usage:        2 bytes
  8891 ;; Hardware stack levels used:    1
  8892 ;; Hardware stack levels required when called:    7
  8893 ;; This function calls:
  8894 ;;		_RF_WriteRegister
  8895 ;; This function is called by:
  8896 ;;		_Wireless_init
  8897 ;;		_Wireless_sendData
  8898 ;; This function uses a non-reentrant model
  8899 ;;
  8900                           
  8901                           
  8902                           ;psect for function _RF_ResetStatusIRQ
  8903  113D                     _RF_ResetStatusIRQ:	
  8904                           
  8905                           ;incstack = 0
  8906                           ; Regs used in _RF_ResetStatusIRQ: [wreg+status,2+status,0+pclath+cstack]
  8907                           ;RF_ResetStatusIRQ@flags stored from wreg
  8908  113D  0020               	movlb	0	; select bank0
  8909  113E  00A6               	movwf	RF_ResetStatusIRQ@flags
  8910                           
  8911                           ;nrf24.c: 159: _delay((unsigned long)((10)*(8000000/4000000.0)));
  8912  113F  3006               	movlw	6
  8913  1140                     u7737:	
  8914  1140  0B89               	decfsz	9,f
  8915  1141  2940               	goto	u7737
  8916  1142  3200               	nop2
  8917                           
  8918                           ;nrf24.c: 160: do { LATCbits.LATC1 = 0; } while(0);
  8919  1143  0022               	movlb	2	; select bank2
  8920  1144  108E               	bcf	14,1	;volatile
  8921                           
  8922                           ;nrf24.c: 161: _delay((unsigned long)((10)*(8000000/4000000.0)));
  8923  1145  3006               	movlw	6
  8924  1146                     u7747:	
  8925  1146  0B89               	decfsz	9,f
  8926  1147  2946               	goto	u7747
  8927  1148  3200               	nop2
  8928                           
  8929                           ;nrf24.c: 162: RF_WriteRegister(0x07, flags);
  8930  1149  0020               	movlb	0	; select bank0
  8931  114A  0826               	movf	RF_ResetStatusIRQ@flags,w
  8932  114B  00A5               	movwf	??_RF_ResetStatusIRQ
  8933  114C  0825               	movf	??_RF_ResetStatusIRQ,w
  8934  114D  00A3               	movwf	RF_WriteRegister@val
  8935  114E  3007               	movlw	7
  8936  114F  319F  2740  3191   	fcall	_RF_WriteRegister
  8937                           
  8938                           ;nrf24.c: 163: _delay((unsigned long)((10)*(8000000/4000000.0)));
  8939  1152  3006               	movlw	6
  8940  1153                     u7757:	
  8941  1153  0B89               	decfsz	9,f
  8942  1154  2953               	goto	u7757
  8943  1155  3200               	nop2
  8944                           
  8945                           ;nrf24.c: 164: do { LATCbits.LATC1 = 1; } while(0);
  8946  1156  0022               	movlb	2	; select bank2
  8947  1157  148E               	bsf	14,1	;volatile
  8948                           
  8949                           ;nrf24.c: 165: _delay((unsigned long)((10)*(8000000/4000000.0)));
  8950  1158  3006               	movlw	6
  8951  1159                     u7767:	
  8952  1159  0B89               	decfsz	9,f
  8953  115A  2959               	goto	u7767
  8954  115B  3200               	nop2
  8955  115C  0008               	return
  8956  115D                     __end_of_RF_ResetStatusIRQ:	
  8957                           
  8958                           	psect	text32
  8959  1F40                     __ptext32:	
  8960 ;; *************** function _RF_WriteRegister *****************
  8961 ;; Defined at:
  8962 ;;		line 69 in file "nrf24.c"
  8963 ;; Parameters:    Size  Location     Type
  8964 ;;  reg             1    wreg     unsigned char 
  8965 ;;  val             1    3[BANK0 ] unsigned char 
  8966 ;; Auto vars:     Size  Location     Type
  8967 ;;  reg             1    4[BANK0 ] unsigned char 
  8968 ;; Return value:  Size  Location     Type
  8969 ;;                  1    wreg      void 
  8970 ;; Registers used:
  8971 ;;		wreg, status,2, status,0, pclath, cstack
  8972 ;; Tracked objects:
  8973 ;;		On entry : 0/0
  8974 ;;		On exit  : 0/0
  8975 ;;		Unchanged: 0/0
  8976 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8977 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8978 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8979 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8980 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8981 ;;Total ram usage:        2 bytes
  8982 ;; Hardware stack levels used:    1
  8983 ;; Hardware stack levels required when called:    6
  8984 ;; This function calls:
  8985 ;;		_SPI_WriteRead
  8986 ;; This function is called by:
  8987 ;;		_RF_ResetStatusIRQ
  8988 ;;		_Wireless_init
  8989 ;;		_Wireless_sleep
  8990 ;;		_Wireless_wake
  8991 ;; This function uses a non-reentrant model
  8992 ;;
  8993                           
  8994                           
  8995                           ;psect for function _RF_WriteRegister
  8996  1F40                     _RF_WriteRegister:	
  8997                           
  8998                           ;incstack = 0
  8999                           ; Regs used in _RF_WriteRegister: [wreg+status,2+status,0+pclath+cstack]
  9000                           ;RF_WriteRegister@reg stored from wreg
  9001  1F40  0020               	movlb	0	; select bank0
  9002  1F41  00A4               	movwf	RF_WriteRegister@reg
  9003                           
  9004                           ;nrf24.c: 70: do { LATCbits.LATC1 = 0; } while(0);
  9005  1F42  0022               	movlb	2	; select bank2
  9006  1F43  108E               	bcf	14,1	;volatile
  9007                           
  9008                           ;nrf24.c: 71: (void)SPI_WriteRead(0x20|reg);
  9009  1F44  0020               	movlb	0	; select bank0
  9010  1F45  0824               	movf	RF_WriteRegister@reg,w
  9011  1F46  3820               	iorlw	32
  9012  1F47  319D  258F  319F   	fcall	_SPI_WriteRead
  9013                           
  9014                           ;nrf24.c: 72: (void)SPI_WriteRead(val);
  9015  1F4A  0020               	movlb	0	; select bank0
  9016  1F4B  0823               	movf	RF_WriteRegister@val,w
  9017  1F4C  319D  258F  319F   	fcall	_SPI_WriteRead
  9018                           
  9019                           ;nrf24.c: 73: do { LATCbits.LATC1 = 1; } while(0);
  9020  1F4F  0022               	movlb	2	; select bank2
  9021  1F50  148E               	bsf	14,1	;volatile
  9022                           
  9023                           ;nrf24.c: 74: _delay((unsigned long)((10)*(8000000/4000000.0)));
  9024  1F51  3006               	movlw	6
  9025  1F52                     u7777:	
  9026  1F52  0B89               	decfsz	9,f
  9027  1F53  2F52               	goto	u7777
  9028  1F54  3200               	nop2
  9029  1F55  0008               	return
  9030  1F56                     __end_of_RF_WriteRegister:	
  9031                           
  9032                           	psect	text33
  9033  1D8F                     __ptext33:	
  9034 ;; *************** function _SPI_WriteRead *****************
  9035 ;; Defined at:
  9036 ;;		line 26 in file "nrf24.c"
  9037 ;; Parameters:    Size  Location     Type
  9038 ;;  val             1    wreg     unsigned char 
  9039 ;; Auto vars:     Size  Location     Type
  9040 ;;  val             1    2[BANK0 ] unsigned char 
  9041 ;; Return value:  Size  Location     Type
  9042 ;;                  1    wreg      unsigned char 
  9043 ;; Registers used:
  9044 ;;		wreg, pclath, cstack
  9045 ;; Tracked objects:
  9046 ;;		On entry : 0/0
  9047 ;;		On exit  : 0/0
  9048 ;;		Unchanged: 0/0
  9049 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9050 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9051 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9052 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9053 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9054 ;;Total ram usage:        1 bytes
  9055 ;; Hardware stack levels used:    1
  9056 ;; Hardware stack levels required when called:    5
  9057 ;; This function calls:
  9058 ;;		_SPI1_Exchange8bit
  9059 ;; This function is called by:
  9060 ;;		_SPI_WriteReadBuffer
  9061 ;;		_SPI_WriteBuffer
  9062 ;;		_RF_WriteRegister
  9063 ;;		_RF_ReadRegister
  9064 ;;		_RF_ReadRegisterData
  9065 ;;		_RF_WriteRegisterData
  9066 ;;		_RF_Write
  9067 ;;		_RF_WriteRead
  9068 ;; This function uses a non-reentrant model
  9069 ;;
  9070                           
  9071                           
  9072                           ;psect for function _SPI_WriteRead
  9073  1D8F                     _SPI_WriteRead:	
  9074                           
  9075                           ;incstack = 0
  9076                           ; Regs used in _SPI_WriteRead: [wreg+pclath+cstack]
  9077                           ;SPI_WriteRead@val stored from wreg
  9078  1D8F  0020               	movlb	0	; select bank0
  9079  1D90  00A2               	movwf	SPI_WriteRead@val
  9080                           
  9081                           ;nrf24.c: 34: return SPI1_Exchange8bit(val);
  9082  1D91  0822               	movf	SPI_WriteRead@val,w
  9083  1D92  319E  261C         	fcall	_SPI1_Exchange8bit
  9084  1D94  0008               	return
  9085  1D95                     __end_of_SPI_WriteRead:	
  9086                           
  9087                           	psect	text34
  9088  1E1C                     __ptext34:	
  9089 ;; *************** function _SPI1_Exchange8bit *****************
  9090 ;; Defined at:
  9091 ;;		line 77 in file "mcc_generated_files/spi1.c"
  9092 ;; Parameters:    Size  Location     Type
  9093 ;;  data            1    wreg     unsigned char 
  9094 ;; Auto vars:     Size  Location     Type
  9095 ;;  data            1    1[BANK0 ] unsigned char 
  9096 ;; Return value:  Size  Location     Type
  9097 ;;                  1    wreg      unsigned char 
  9098 ;; Registers used:
  9099 ;;		wreg
  9100 ;; Tracked objects:
  9101 ;;		On entry : 0/0
  9102 ;;		On exit  : 0/0
  9103 ;;		Unchanged: 0/0
  9104 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9105 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9106 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9107 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9108 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9109 ;;Total ram usage:        1 bytes
  9110 ;; Hardware stack levels used:    1
  9111 ;; Hardware stack levels required when called:    4
  9112 ;; This function calls:
  9113 ;;		Nothing
  9114 ;; This function is called by:
  9115 ;;		_SPI_WriteRead
  9116 ;;		_SPI1_Exchange8bitBuffer
  9117 ;; This function uses a non-reentrant model
  9118 ;;
  9119                           
  9120                           
  9121                           ;psect for function _SPI1_Exchange8bit
  9122  1E1C                     _SPI1_Exchange8bit:	
  9123                           
  9124                           ;incstack = 0
  9125                           ; Regs used in _SPI1_Exchange8bit: [wreg]
  9126                           ;SPI1_Exchange8bit@data stored from wreg
  9127  1E1C  0020               	movlb	0	; select bank0
  9128  1E1D  00A1               	movwf	SPI1_Exchange8bit@data
  9129                           
  9130                           ;spi1.c: 80: SSP1CON1bits.WCOL = 0;
  9131  1E1E  0024               	movlb	4	; select bank4
  9132  1E1F  1395               	bcf	21,7	;volatile
  9133                           
  9134                           ;spi1.c: 82: SSP1BUF = data;
  9135  1E20  0020               	movlb	0	; select bank0
  9136  1E21  0821               	movf	SPI1_Exchange8bit@data,w
  9137  1E22  0024               	movlb	4	; select bank4
  9138  1E23  0091               	movwf	17	;volatile
  9139  1E24                     l522:	
  9140                           ;spi1.c: 85: {
  9141                           
  9142                           ;spi1.c: 84: while(SSP1STATbits.BF == 0x0)
  9143                           
  9144  1E24  1C14               	btfss	20,0	;volatile
  9145  1E25  2E24               	goto	l522
  9146                           
  9147                           ;spi1.c: 86: }
  9148                           ;spi1.c: 88: return (SSP1BUF);
  9149  1E26  0811               	movf	17,w	;volatile
  9150  1E27  0008               	return
  9151  1E28                     __end_of_SPI1_Exchange8bit:	
  9152                           
  9153                           	psect	text35
  9154  1D7B                     __ptext35:	
  9155 ;; *************** function _RF_Init *****************
  9156 ;; Defined at:
  9157 ;;		line 195 in file "nrf24.c"
  9158 ;; Parameters:    Size  Location     Type
  9159 ;;		None
  9160 ;; Auto vars:     Size  Location     Type
  9161 ;;		None
  9162 ;; Return value:  Size  Location     Type
  9163 ;;                  1    wreg      void 
  9164 ;; Registers used:
  9165 ;;		None
  9166 ;; Tracked objects:
  9167 ;;		On entry : 0/0
  9168 ;;		On exit  : 0/0
  9169 ;;		Unchanged: 0/0
  9170 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9171 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9172 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9173 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9174 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9175 ;;Total ram usage:        0 bytes
  9176 ;; Hardware stack levels used:    1
  9177 ;; Hardware stack levels required when called:    4
  9178 ;; This function calls:
  9179 ;;		Nothing
  9180 ;; This function is called by:
  9181 ;;		_Wireless_init
  9182 ;; This function uses a non-reentrant model
  9183 ;;
  9184                           
  9185                           
  9186                           ;psect for function _RF_Init
  9187  1D7B                     _RF_Init:	
  9188                           
  9189                           ;incstack = 0
  9190                           ; Regs used in _RF_Init: []
  9191                           ;nrf24.c: 196: do { LATCbits.LATC2 = 0; } while(0);
  9192  1D7B  0022               	movlb	2	; select bank2
  9193  1D7C  110E               	bcf	14,2	;volatile
  9194                           
  9195                           ;nrf24.c: 197: do { LATCbits.LATC1 = 1; } while(0);
  9196  1D7D  148E               	bsf	14,1	;volatile
  9197  1D7E  0008               	return
  9198  1D7F                     __end_of_RF_Init:	
  9199                           
  9200                           	psect	text36
  9201  101F                     __ptext36:	
  9202 ;; *************** function _SYSTEM_Initialize *****************
  9203 ;; Defined at:
  9204 ;;		line 70 in file "mcc_generated_files/mcc.c"
  9205 ;; Parameters:    Size  Location     Type
  9206 ;;		None
  9207 ;; Auto vars:     Size  Location     Type
  9208 ;;		None
  9209 ;; Return value:  Size  Location     Type
  9210 ;;                  1    wreg      void 
  9211 ;; Registers used:
  9212 ;;		wreg, status,2, status,0, pclath, cstack
  9213 ;; Tracked objects:
  9214 ;;		On entry : 0/0
  9215 ;;		On exit  : 0/0
  9216 ;;		Unchanged: 0/0
  9217 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9218 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9219 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9220 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9221 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9222 ;;Total ram usage:        0 bytes
  9223 ;; Hardware stack levels used:    1
  9224 ;; Hardware stack levels required when called:    6
  9225 ;; This function calls:
  9226 ;;		_ADC_Initialize
  9227 ;;		_FVR_Initialize
  9228 ;;		_I2C2_Initialize
  9229 ;;		_OSCILLATOR_Initialize
  9230 ;;		_PIN_MANAGER_Initialize
  9231 ;;		_SPI1_Initialize
  9232 ;;		_TMR1_Initialize
  9233 ;;		_TMR2_Initialize
  9234 ;;		_WDT_Initialize
  9235 ;; This function is called by:
  9236 ;;		_main
  9237 ;; This function uses a non-reentrant model
  9238 ;;
  9239                           
  9240                           
  9241                           ;psect for function _SYSTEM_Initialize
  9242  101F                     _SYSTEM_Initialize:	
  9243                           
  9244                           ;mcc.c: 73: PIN_MANAGER_Initialize();
  9245                           
  9246                           ;incstack = 0
  9247                           ; Regs used in _SYSTEM_Initialize: [wreg+status,2+status,0+pclath+cstack]
  9248  101F  3192  223A  3190   	fcall	_PIN_MANAGER_Initialize
  9249                           
  9250                           ;mcc.c: 74: OSCILLATOR_Initialize();
  9251  1022  319D  25A7  3190   	fcall	_OSCILLATOR_Initialize
  9252                           
  9253                           ;mcc.c: 75: WDT_Initialize();
  9254  1025  319D  2577  3190   	fcall	_WDT_Initialize
  9255                           
  9256                           ;mcc.c: 76: SPI1_Initialize();
  9257  1028  319D  25AE  3190   	fcall	_SPI1_Initialize
  9258                           
  9259                           ;mcc.c: 77: I2C2_Initialize();
  9260  102B  3190  2004  3190   	fcall	_I2C2_Initialize
  9261                           
  9262                           ;mcc.c: 78: FVR_Initialize();
  9263  102E  319D  2573  3190   	fcall	_FVR_Initialize
  9264                           
  9265                           ;mcc.c: 79: ADC_Initialize();
  9266  1031  319D  25CC  3190   	fcall	_ADC_Initialize
  9267                           
  9268                           ;mcc.c: 80: TMR2_Initialize();
  9269  1034  319D  25D4  3190   	fcall	_TMR2_Initialize
  9270                           
  9271                           ;mcc.c: 81: TMR1_Initialize();
  9272  1037  319F  2783         	fcall	_TMR1_Initialize
  9273  1039  0008               	return
  9274  103A                     __end_of_SYSTEM_Initialize:	
  9275                           
  9276                           	psect	text37
  9277  1D77                     __ptext37:	
  9278 ;; *************** function _WDT_Initialize *****************
  9279 ;; Defined at:
  9280 ;;		line 94 in file "mcc_generated_files/mcc.c"
  9281 ;; Parameters:    Size  Location     Type
  9282 ;;		None
  9283 ;; Auto vars:     Size  Location     Type
  9284 ;;		None
  9285 ;; Return value:  Size  Location     Type
  9286 ;;                  1    wreg      void 
  9287 ;; Registers used:
  9288 ;;		wreg
  9289 ;; Tracked objects:
  9290 ;;		On entry : 0/0
  9291 ;;		On exit  : 0/0
  9292 ;;		Unchanged: 0/0
  9293 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9294 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9295 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9296 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9297 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9298 ;;Total ram usage:        0 bytes
  9299 ;; Hardware stack levels used:    1
  9300 ;; Hardware stack levels required when called:    4
  9301 ;; This function calls:
  9302 ;;		Nothing
  9303 ;; This function is called by:
  9304 ;;		_SYSTEM_Initialize
  9305 ;; This function uses a non-reentrant model
  9306 ;;
  9307                           
  9308                           
  9309                           ;psect for function _WDT_Initialize
  9310  1D77                     _WDT_Initialize:	
  9311                           
  9312                           ;mcc.c: 97: WDTCON = 0x1A;
  9313                           
  9314                           ;incstack = 0
  9315                           ; Regs used in _WDT_Initialize: [wreg]
  9316  1D77  301A               	movlw	26
  9317  1D78  0021               	movlb	1	; select bank1
  9318  1D79  0097               	movwf	23	;volatile
  9319  1D7A  0008               	return
  9320  1D7B                     __end_of_WDT_Initialize:	
  9321                           
  9322                           	psect	text38
  9323  1DD4                     __ptext38:	
  9324 ;; *************** function _TMR2_Initialize *****************
  9325 ;; Defined at:
  9326 ;;		line 61 in file "mcc_generated_files/tmr2.c"
  9327 ;; Parameters:    Size  Location     Type
  9328 ;;		None
  9329 ;; Auto vars:     Size  Location     Type
  9330 ;;		None
  9331 ;; Return value:  Size  Location     Type
  9332 ;;                  1    wreg      void 
  9333 ;; Registers used:
  9334 ;;		wreg, status,2
  9335 ;; Tracked objects:
  9336 ;;		On entry : 0/0
  9337 ;;		On exit  : 0/0
  9338 ;;		Unchanged: 0/0
  9339 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9340 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9341 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9342 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9343 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9344 ;;Total ram usage:        0 bytes
  9345 ;; Hardware stack levels used:    1
  9346 ;; Hardware stack levels required when called:    4
  9347 ;; This function calls:
  9348 ;;		Nothing
  9349 ;; This function is called by:
  9350 ;;		_SYSTEM_Initialize
  9351 ;; This function uses a non-reentrant model
  9352 ;;
  9353                           
  9354                           
  9355                           ;psect for function _TMR2_Initialize
  9356  1DD4                     _TMR2_Initialize:	
  9357                           
  9358                           ;tmr2.c: 66: PR2 = 0x44;
  9359                           
  9360                           ;incstack = 0
  9361                           ; Regs used in _TMR2_Initialize: [wreg+status,2]
  9362  1DD4  3044               	movlw	68
  9363  1DD5  0020               	movlb	0	; select bank0
  9364  1DD6  009B               	movwf	27	;volatile
  9365                           
  9366                           ;tmr2.c: 69: TMR2 = 0x00;
  9367  1DD7  019A               	clrf	26	;volatile
  9368                           
  9369                           ;tmr2.c: 72: PIR1bits.TMR2IF = 0;
  9370  1DD8  1091               	bcf	17,1	;volatile
  9371                           
  9372                           ;tmr2.c: 75: T2CON = 0x46;
  9373  1DD9  3046               	movlw	70
  9374  1DDA  009C               	movwf	28	;volatile
  9375  1DDB  0008               	return
  9376  1DDC                     __end_of_TMR2_Initialize:	
  9377                           
  9378                           	psect	text39
  9379  1F83                     __ptext39:	
  9380 ;; *************** function _TMR1_Initialize *****************
  9381 ;; Defined at:
  9382 ;;		line 63 in file "mcc_generated_files/tmr1.c"
  9383 ;; Parameters:    Size  Location     Type
  9384 ;;		None
  9385 ;; Auto vars:     Size  Location     Type
  9386 ;;		None
  9387 ;; Return value:  Size  Location     Type
  9388 ;;                  1    wreg      void 
  9389 ;; Registers used:
  9390 ;;		wreg, status,2, status,0, pclath, cstack
  9391 ;; Tracked objects:
  9392 ;;		On entry : 0/0
  9393 ;;		On exit  : 0/0
  9394 ;;		Unchanged: 0/0
  9395 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9396 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9397 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9398 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9399 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9400 ;;Total ram usage:        0 bytes
  9401 ;; Hardware stack levels used:    1
  9402 ;; Hardware stack levels required when called:    5
  9403 ;; This function calls:
  9404 ;;		_TMR1_SetInterruptHandler
  9405 ;; This function is called by:
  9406 ;;		_SYSTEM_Initialize
  9407 ;; This function uses a non-reentrant model
  9408 ;;
  9409                           
  9410                           
  9411                           ;psect for function _TMR1_Initialize
  9412  1F83                     _TMR1_Initialize:	
  9413                           
  9414                           ;tmr1.c: 68: T1GCON = 0x00;
  9415                           
  9416                           ;incstack = 0
  9417                           ; Regs used in _TMR1_Initialize: [wreg+status,2+status,0+pclath+cstack]
  9418  1F83  0020               	movlb	0	; select bank0
  9419  1F84  0199               	clrf	25	;volatile
  9420                           
  9421                           ;tmr1.c: 71: TMR1H = 0xF8;
  9422  1F85  30F8               	movlw	248
  9423  1F86  0097               	movwf	23	;volatile
  9424                           
  9425                           ;tmr1.c: 74: TMR1L = 0x00;
  9426  1F87  0196               	clrf	22	;volatile
  9427                           
  9428                           ;tmr1.c: 77: timer1ReloadVal=(uint16_t)((TMR1H << 8) | TMR1L);
  9429  1F88  0817               	movf	23,w	;volatile
  9430  1F89  00FD               	movwf	_timer1ReloadVal+1	;volatile
  9431  1F8A  0816               	movf	22,w	;volatile
  9432  1F8B  00FC               	movwf	_timer1ReloadVal	;volatile
  9433                           
  9434                           ;tmr1.c: 80: PIR1bits.TMR1IF = 0;
  9435  1F8C  1011               	bcf	17,0	;volatile
  9436                           
  9437                           ;tmr1.c: 83: PIE1bits.TMR1IE = 1;
  9438  1F8D  0021               	movlb	1	; select bank1
  9439  1F8E  1411               	bsf	17,0	;volatile
  9440                           
  9441                           ;tmr1.c: 86: TMR1_SetInterruptHandler(TMR1_DefaultInterruptHandler);
  9442  1F8F  3003               	movlw	low _TMR1_DefaultInterruptHandler
  9443  1F90  0020               	movlb	0	; select bank0
  9444  1F91  00A1               	movwf	TMR1_SetInterruptHandler@InterruptHandler
  9445  1F92  3000               	movlw	high _TMR1_DefaultInterruptHandler
  9446  1F93  00A2               	movwf	TMR1_SetInterruptHandler@InterruptHandler+1
  9447  1F94  319E  2600         	fcall	_TMR1_SetInterruptHandler
  9448                           
  9449                           ;tmr1.c: 89: T1CON = 0xBD;
  9450  1F96  30BD               	movlw	189
  9451  1F97  0020               	movlb	0	; select bank0
  9452  1F98  0098               	movwf	24	;volatile
  9453  1F99  0008               	return
  9454  1F9A                     __end_of_TMR1_Initialize:	
  9455                           
  9456                           	psect	text40
  9457  1E00                     __ptext40:	
  9458 ;; *************** function _TMR1_SetInterruptHandler *****************
  9459 ;; Defined at:
  9460 ;;		line 181 in file "mcc_generated_files/tmr1.c"
  9461 ;; Parameters:    Size  Location     Type
  9462 ;;  InterruptHan    2    1[BANK0 ] PTR FTN()void 
  9463 ;;		 -> TMR1_DefaultInterruptHandler(1), 
  9464 ;; Auto vars:     Size  Location     Type
  9465 ;;		None
  9466 ;; Return value:  Size  Location     Type
  9467 ;;                  1    wreg      void 
  9468 ;; Registers used:
  9469 ;;		wreg
  9470 ;; Tracked objects:
  9471 ;;		On entry : 0/0
  9472 ;;		On exit  : 0/0
  9473 ;;		Unchanged: 0/0
  9474 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9475 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9476 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9477 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9478 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9479 ;;Total ram usage:        2 bytes
  9480 ;; Hardware stack levels used:    1
  9481 ;; Hardware stack levels required when called:    4
  9482 ;; This function calls:
  9483 ;;		Nothing
  9484 ;; This function is called by:
  9485 ;;		_TMR1_Initialize
  9486 ;; This function uses a non-reentrant model
  9487 ;;
  9488                           
  9489                           
  9490                           ;psect for function _TMR1_SetInterruptHandler
  9491  1E00                     _TMR1_SetInterruptHandler:	
  9492                           
  9493                           ;tmr1.c: 182: TMR1_InterruptHandler = InterruptHandler;
  9494                           
  9495                           ;incstack = 0
  9496                           ; Regs used in _TMR1_SetInterruptHandler: [wreg]
  9497  1E00  0020               	movlb	0	; select bank0
  9498  1E01  0822               	movf	TMR1_SetInterruptHandler@InterruptHandler+1,w
  9499  1E02  0022               	movlb	2	; select bank2
  9500  1E03  00E9               	movwf	(_TMR1_InterruptHandler+1)^(0+256)
  9501  1E04  0020               	movlb	0	; select bank0
  9502  1E05  0821               	movf	TMR1_SetInterruptHandler@InterruptHandler,w
  9503  1E06  0022               	movlb	2	; select bank2
  9504  1E07  00E8               	movwf	_TMR1_InterruptHandler^(0+256)
  9505  1E08  0008               	return
  9506  1E09                     __end_of_TMR1_SetInterruptHandler:	
  9507                           
  9508                           	psect	text41
  9509  1DAE                     __ptext41:	
  9510 ;; *************** function _SPI1_Initialize *****************
  9511 ;; Defined at:
  9512 ;;		line 63 in file "mcc_generated_files/spi1.c"
  9513 ;; Parameters:    Size  Location     Type
  9514 ;;		None
  9515 ;; Auto vars:     Size  Location     Type
  9516 ;;		None
  9517 ;; Return value:  Size  Location     Type
  9518 ;;                  1    wreg      void 
  9519 ;; Registers used:
  9520 ;;		wreg, status,2
  9521 ;; Tracked objects:
  9522 ;;		On entry : 0/0
  9523 ;;		On exit  : 0/0
  9524 ;;		Unchanged: 0/0
  9525 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9526 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9527 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9528 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9529 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9530 ;;Total ram usage:        0 bytes
  9531 ;; Hardware stack levels used:    1
  9532 ;; Hardware stack levels required when called:    4
  9533 ;; This function calls:
  9534 ;;		Nothing
  9535 ;; This function is called by:
  9536 ;;		_SYSTEM_Initialize
  9537 ;; This function uses a non-reentrant model
  9538 ;;
  9539                           
  9540                           
  9541                           ;psect for function _SPI1_Initialize
  9542  1DAE                     _SPI1_Initialize:	
  9543                           
  9544                           ;spi1.c: 68: SSP1STAT = 0x40;
  9545                           
  9546                           ;incstack = 0
  9547                           ; Regs used in _SPI1_Initialize: [wreg+status,2]
  9548  1DAE  3040               	movlw	64
  9549  1DAF  0024               	movlb	4	; select bank4
  9550  1DB0  0094               	movwf	20	;volatile
  9551                           
  9552                           ;spi1.c: 71: SSP1CON1 = 0x20;
  9553  1DB1  3020               	movlw	32
  9554  1DB2  0095               	movwf	21	;volatile
  9555                           
  9556                           ;spi1.c: 74: SSP1ADD = 0x00;
  9557  1DB3  0192               	clrf	18	;volatile
  9558  1DB4  0008               	return
  9559  1DB5                     __end_of_SPI1_Initialize:	
  9560                           
  9561                           	psect	text42
  9562  123A                     __ptext42:	
  9563 ;; *************** function _PIN_MANAGER_Initialize *****************
  9564 ;; Defined at:
  9565 ;;		line 54 in file "mcc_generated_files/pin_manager.c"
  9566 ;; Parameters:    Size  Location     Type
  9567 ;;		None
  9568 ;; Auto vars:     Size  Location     Type
  9569 ;;		None
  9570 ;; Return value:  Size  Location     Type
  9571 ;;                  1    wreg      void 
  9572 ;; Registers used:
  9573 ;;		wreg, status,2, status,0, pclath, cstack
  9574 ;; Tracked objects:
  9575 ;;		On entry : 0/0
  9576 ;;		On exit  : 0/0
  9577 ;;		Unchanged: 0/0
  9578 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9579 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9580 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9581 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9582 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9583 ;;Total ram usage:        0 bytes
  9584 ;; Hardware stack levels used:    1
  9585 ;; Hardware stack levels required when called:    5
  9586 ;; This function calls:
  9587 ;;		_IOCAF2_SetInterruptHandler
  9588 ;; This function is called by:
  9589 ;;		_SYSTEM_Initialize
  9590 ;; This function uses a non-reentrant model
  9591 ;;
  9592                           
  9593                           
  9594                           ;psect for function _PIN_MANAGER_Initialize
  9595  123A                     _PIN_MANAGER_Initialize:	
  9596                           
  9597                           ;pin_manager.c: 59: LATA = 0x00;
  9598                           
  9599                           ;incstack = 0
  9600                           ; Regs used in _PIN_MANAGER_Initialize: [wreg+status,2+status,0+pclath+cstack]
  9601  123A  0022               	movlb	2	; select bank2
  9602  123B  018C               	clrf	12	;volatile
  9603                           
  9604                           ;pin_manager.c: 60: LATB = 0x00;
  9605  123C  018D               	clrf	13	;volatile
  9606                           
  9607                           ;pin_manager.c: 61: LATC = 0x00;
  9608  123D  018E               	clrf	14	;volatile
  9609                           
  9610                           ;pin_manager.c: 66: TRISA = 0x3F;
  9611  123E  303F               	movlw	63
  9612  123F  0021               	movlb	1	; select bank1
  9613  1240  008C               	movwf	12	;volatile
  9614                           
  9615                           ;pin_manager.c: 67: TRISB = 0xB0;
  9616  1241  30B0               	movlw	176
  9617  1242  008D               	movwf	13	;volatile
  9618                           
  9619                           ;pin_manager.c: 68: TRISC = 0x39;
  9620  1243  3039               	movlw	57
  9621  1244  008E               	movwf	14	;volatile
  9622                           
  9623                           ;pin_manager.c: 73: ANSELC = 0x01;
  9624  1245  3001               	movlw	1
  9625  1246  0023               	movlb	3	; select bank3
  9626  1247  008E               	movwf	14	;volatile
  9627                           
  9628                           ;pin_manager.c: 74: ANSELB = 0x00;
  9629  1248  018D               	clrf	13	;volatile
  9630                           
  9631                           ;pin_manager.c: 75: ANSELA = 0x03;
  9632  1249  3003               	movlw	3
  9633  124A  008C               	movwf	12	;volatile
  9634                           
  9635                           ;pin_manager.c: 80: WPUB = 0x10;
  9636  124B  3010               	movlw	16
  9637  124C  0024               	movlb	4	; select bank4
  9638  124D  008D               	movwf	13	;volatile
  9639                           
  9640                           ;pin_manager.c: 81: WPUA = 0x3B;
  9641  124E  303B               	movlw	59
  9642  124F  008C               	movwf	12	;volatile
  9643                           
  9644                           ;pin_manager.c: 82: WPUC = 0xD1;
  9645  1250  30D1               	movlw	209
  9646  1251  008E               	movwf	14	;volatile
  9647                           
  9648                           ;pin_manager.c: 83: OPTION_REGbits.nWPUEN = 0;
  9649  1252  0021               	movlb	1	; select bank1
  9650  1253  1395               	bcf	21,7	;volatile
  9651                           
  9652                           ;pin_manager.c: 89: APFCON1 = 0x2A;
  9653  1254  302A               	movlw	42
  9654  1255  0022               	movlb	2	; select bank2
  9655  1256  009E               	movwf	30	;volatile
  9656                           
  9657                           ;pin_manager.c: 90: APFCON0 = 0x00;
  9658  1257  019D               	clrf	29	;volatile
  9659                           
  9660                           ;pin_manager.c: 96: IOCAFbits.IOCAF2 = 0;
  9661  1258  0027               	movlb	7	; select bank7
  9662  1259  1113               	bcf	19,2	;volatile
  9663                           
  9664                           ;pin_manager.c: 98: IOCANbits.IOCAN2 = 0;
  9665  125A  1112               	bcf	18,2	;volatile
  9666                           
  9667                           ;pin_manager.c: 100: IOCAPbits.IOCAP2 = 1;
  9668  125B  1511               	bsf	17,2	;volatile
  9669                           
  9670                           ;pin_manager.c: 103: IOCAF2_SetInterruptHandler(IOCAF2_DefaultInterruptHandler);
  9671  125C  3002               	movlw	low _IOCAF2_DefaultInterruptHandler
  9672  125D  0020               	movlb	0	; select bank0
  9673  125E  00A1               	movwf	IOCAF2_SetInterruptHandler@InterruptHandler
  9674  125F  3000               	movlw	high _IOCAF2_DefaultInterruptHandler
  9675  1260  00A2               	movwf	IOCAF2_SetInterruptHandler@InterruptHandler+1
  9676  1261  319D  25F7         	fcall	_IOCAF2_SetInterruptHandler
  9677                           
  9678                           ;pin_manager.c: 106: INTCONbits.IOCIE = 1;
  9679  1263  158B               	bsf	11,3	;volatile
  9680  1264  0008               	return
  9681  1265                     __end_of_PIN_MANAGER_Initialize:	
  9682                           
  9683                           	psect	text43
  9684  1DF7                     __ptext43:	
  9685 ;; *************** function _IOCAF2_SetInterruptHandler *****************
  9686 ;; Defined at:
  9687 ;;		line 139 in file "mcc_generated_files/pin_manager.c"
  9688 ;; Parameters:    Size  Location     Type
  9689 ;;  InterruptHan    2    1[BANK0 ] PTR FTN()void 
  9690 ;;		 -> IOCAF2_DefaultInterruptHandler(1), 
  9691 ;; Auto vars:     Size  Location     Type
  9692 ;;		None
  9693 ;; Return value:  Size  Location     Type
  9694 ;;                  1    wreg      void 
  9695 ;; Registers used:
  9696 ;;		wreg
  9697 ;; Tracked objects:
  9698 ;;		On entry : 0/0
  9699 ;;		On exit  : 0/0
  9700 ;;		Unchanged: 0/0
  9701 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9702 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9703 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9704 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9705 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9706 ;;Total ram usage:        2 bytes
  9707 ;; Hardware stack levels used:    1
  9708 ;; Hardware stack levels required when called:    4
  9709 ;; This function calls:
  9710 ;;		Nothing
  9711 ;; This function is called by:
  9712 ;;		_PIN_MANAGER_Initialize
  9713 ;; This function uses a non-reentrant model
  9714 ;;
  9715                           
  9716                           
  9717                           ;psect for function _IOCAF2_SetInterruptHandler
  9718  1DF7                     _IOCAF2_SetInterruptHandler:	
  9719                           
  9720                           ;pin_manager.c: 140: IOCAF2_InterruptHandler = InterruptHandler;
  9721                           
  9722                           ;incstack = 0
  9723                           ; Regs used in _IOCAF2_SetInterruptHandler: [wreg]
  9724  1DF7  0020               	movlb	0	; select bank0
  9725  1DF8  0822               	movf	IOCAF2_SetInterruptHandler@InterruptHandler+1,w
  9726  1DF9  0022               	movlb	2	; select bank2
  9727  1DFA  00EB               	movwf	(_IOCAF2_InterruptHandler+1)^(0+256)
  9728  1DFB  0020               	movlb	0	; select bank0
  9729  1DFC  0821               	movf	IOCAF2_SetInterruptHandler@InterruptHandler,w
  9730  1DFD  0022               	movlb	2	; select bank2
  9731  1DFE  00EA               	movwf	_IOCAF2_InterruptHandler^(0+256)
  9732  1DFF  0008               	return
  9733  1E00                     __end_of_IOCAF2_SetInterruptHandler:	
  9734                           
  9735                           	psect	text44
  9736  1DA7                     __ptext44:	
  9737 ;; *************** function _OSCILLATOR_Initialize *****************
  9738 ;; Defined at:
  9739 ;;		line 84 in file "mcc_generated_files/mcc.c"
  9740 ;; Parameters:    Size  Location     Type
  9741 ;;		None
  9742 ;; Auto vars:     Size  Location     Type
  9743 ;;		None
  9744 ;; Return value:  Size  Location     Type
  9745 ;;                  1    wreg      void 
  9746 ;; Registers used:
  9747 ;;		wreg, status,2
  9748 ;; Tracked objects:
  9749 ;;		On entry : 0/0
  9750 ;;		On exit  : 0/0
  9751 ;;		Unchanged: 0/0
  9752 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9753 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9754 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9755 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9756 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9757 ;;Total ram usage:        0 bytes
  9758 ;; Hardware stack levels used:    1
  9759 ;; Hardware stack levels required when called:    4
  9760 ;; This function calls:
  9761 ;;		Nothing
  9762 ;; This function is called by:
  9763 ;;		_SYSTEM_Initialize
  9764 ;; This function uses a non-reentrant model
  9765 ;;
  9766                           
  9767                           
  9768                           ;psect for function _OSCILLATOR_Initialize
  9769  1DA7                     _OSCILLATOR_Initialize:	
  9770                           
  9771                           ;mcc.c: 87: OSCCON = 0x72;
  9772                           
  9773                           ;incstack = 0
  9774                           ; Regs used in _OSCILLATOR_Initialize: [wreg+status,2]
  9775  1DA7  3072               	movlw	114
  9776  1DA8  0021               	movlb	1	; select bank1
  9777  1DA9  0099               	movwf	25	;volatile
  9778                           
  9779                           ;mcc.c: 89: OSCTUNE = 0x00;
  9780  1DAA  0198               	clrf	24	;volatile
  9781                           
  9782                           ;mcc.c: 91: BORCON = 0x00;
  9783  1DAB  0022               	movlb	2	; select bank2
  9784  1DAC  0196               	clrf	22	;volatile
  9785  1DAD  0008               	return
  9786  1DAE                     __end_of_OSCILLATOR_Initialize:	
  9787                           
  9788                           	psect	text45
  9789  1004                     __ptext45:	
  9790 ;; *************** function _I2C2_Initialize *****************
  9791 ;; Defined at:
  9792 ;;		line 198 in file "mcc_generated_files/i2c2.c"
  9793 ;; Parameters:    Size  Location     Type
  9794 ;;		None
  9795 ;; Auto vars:     Size  Location     Type
  9796 ;;		None
  9797 ;; Return value:  Size  Location     Type
  9798 ;;                  1    wreg      void 
  9799 ;; Registers used:
  9800 ;;		wreg, status,2
  9801 ;; Tracked objects:
  9802 ;;		On entry : 0/0
  9803 ;;		On exit  : 0/0
  9804 ;;		Unchanged: 0/0
  9805 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9806 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9807 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9808 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9809 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9810 ;;Total ram usage:        1 bytes
  9811 ;; Hardware stack levels used:    1
  9812 ;; Hardware stack levels required when called:    4
  9813 ;; This function calls:
  9814 ;;		Nothing
  9815 ;; This function is called by:
  9816 ;;		_SYSTEM_Initialize
  9817 ;; This function uses a non-reentrant model
  9818 ;;
  9819                           
  9820                           
  9821                           ;psect for function _I2C2_Initialize
  9822  1004                     _I2C2_Initialize:	
  9823                           
  9824                           ;i2c2.c: 200: i2c2_object.pTrHead = i2c2_tr_queue;
  9825                           
  9826                           ;incstack = 0
  9827                           ; Regs used in _I2C2_Initialize: [wreg+status,2]
  9828  1004  305E               	movlw	(low (_i2c2_tr_queue| (0+256)))& (0+255)
  9829  1005  0020               	movlb	0	; select bank0
  9830  1006  00A1               	movwf	??_I2C2_Initialize
  9831  1007  0821               	movf	??_I2C2_Initialize,w
  9832  1008  0021               	movlb	1	; select bank1
  9833  1009  00DB               	movwf	(low ((_i2c2_object| 0+1)))^(0+128)
  9834                           
  9835                           ;i2c2.c: 201: i2c2_object.pTrTail = i2c2_tr_queue;
  9836  100A  305E               	movlw	(low (_i2c2_tr_queue| (0+256)))& (0+255)
  9837  100B  0020               	movlb	0	; select bank0
  9838  100C  00A1               	movwf	??_I2C2_Initialize
  9839  100D  0821               	movf	??_I2C2_Initialize,w
  9840  100E  0021               	movlb	1	; select bank1
  9841  100F  00DA               	movwf	_i2c2_object^(0+128)
  9842                           
  9843                           ;i2c2.c: 202: i2c2_object.trStatus.s.empty = 1;
  9844  1010  14DC               	bsf	(_i2c2_object^(0+128)+2),1
  9845                           
  9846                           ;i2c2.c: 203: i2c2_object.trStatus.s.full = 0;
  9847  1011  105C               	bcf	(_i2c2_object^(0+128)+2),0
  9848                           
  9849                           ;i2c2.c: 205: i2c2_object.i2cErrors = 0;
  9850  1012  01DE               	clrf	(_i2c2_object^(0+128)+4)
  9851                           
  9852                           ;i2c2.c: 208: SSP2STAT = 0x00;
  9853  1013  0024               	movlb	4	; select bank4
  9854  1014  019C               	clrf	28	;volatile
  9855                           
  9856                           ;i2c2.c: 210: SSP2CON1 = 0x28;
  9857  1015  3028               	movlw	40
  9858  1016  009D               	movwf	29	;volatile
  9859                           
  9860                           ;i2c2.c: 212: SSP2CON3 = 0x00;
  9861  1017  019F               	clrf	31	;volatile
  9862                           
  9863                           ;i2c2.c: 214: SSP2ADD = 0x03;
  9864  1018  3003               	movlw	3
  9865  1019  009A               	movwf	26	;volatile
  9866                           
  9867                           ;i2c2.c: 218: PIR4bits.SSP2IF = 0;
  9868  101A  0020               	movlb	0	; select bank0
  9869  101B  1014               	bcf	20,0	;volatile
  9870                           
  9871                           ;i2c2.c: 220: PIE4bits.SSP2IE = 1;
  9872  101C  0021               	movlb	1	; select bank1
  9873  101D  1414               	bsf	20,0	;volatile
  9874  101E  0008               	return
  9875  101F                     __end_of_I2C2_Initialize:	
  9876                           
  9877                           	psect	text46
  9878  1D73                     __ptext46:	
  9879 ;; *************** function _FVR_Initialize *****************
  9880 ;; Defined at:
  9881 ;;		line 57 in file "mcc_generated_files/fvr.c"
  9882 ;; Parameters:    Size  Location     Type
  9883 ;;		None
  9884 ;; Auto vars:     Size  Location     Type
  9885 ;;		None
  9886 ;; Return value:  Size  Location     Type
  9887 ;;                  1    wreg      void 
  9888 ;; Registers used:
  9889 ;;		wreg
  9890 ;; Tracked objects:
  9891 ;;		On entry : 0/0
  9892 ;;		On exit  : 0/0
  9893 ;;		Unchanged: 0/0
  9894 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9895 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9896 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9897 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9898 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9899 ;;Total ram usage:        0 bytes
  9900 ;; Hardware stack levels used:    1
  9901 ;; Hardware stack levels required when called:    4
  9902 ;; This function calls:
  9903 ;;		Nothing
  9904 ;; This function is called by:
  9905 ;;		_SYSTEM_Initialize
  9906 ;; This function uses a non-reentrant model
  9907 ;;
  9908                           
  9909                           
  9910                           ;psect for function _FVR_Initialize
  9911  1D73                     _FVR_Initialize:	
  9912                           
  9913                           ;fvr.c: 60: FVRCON = 0x01;
  9914                           
  9915                           ;incstack = 0
  9916                           ; Regs used in _FVR_Initialize: [wreg]
  9917  1D73  3001               	movlw	1
  9918  1D74  0022               	movlb	2	; select bank2
  9919  1D75  0097               	movwf	23	;volatile
  9920  1D76  0008               	return
  9921  1D77                     __end_of_FVR_Initialize:	
  9922                           
  9923                           	psect	text47
  9924  1DCC                     __ptext47:	
  9925 ;; *************** function _ADC_Initialize *****************
  9926 ;; Defined at:
  9927 ;;		line 62 in file "mcc_generated_files/adc.c"
  9928 ;; Parameters:    Size  Location     Type
  9929 ;;		None
  9930 ;; Auto vars:     Size  Location     Type
  9931 ;;		None
  9932 ;; Return value:  Size  Location     Type
  9933 ;;                  1    wreg      void 
  9934 ;; Registers used:
  9935 ;;		wreg, status,2
  9936 ;; Tracked objects:
  9937 ;;		On entry : 0/0
  9938 ;;		On exit  : 0/0
  9939 ;;		Unchanged: 0/0
  9940 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9941 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9942 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9943 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9944 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9945 ;;Total ram usage:        0 bytes
  9946 ;; Hardware stack levels used:    1
  9947 ;; Hardware stack levels required when called:    4
  9948 ;; This function calls:
  9949 ;;		Nothing
  9950 ;; This function is called by:
  9951 ;;		_SYSTEM_Initialize
  9952 ;; This function uses a non-reentrant model
  9953 ;;
  9954                           
  9955                           
  9956                           ;psect for function _ADC_Initialize
  9957  1DCC                     _ADC_Initialize:	
  9958                           
  9959                           ;adc.c: 67: ADCON0 = 0x01;
  9960                           
  9961                           ;incstack = 0
  9962                           ; Regs used in _ADC_Initialize: [wreg+status,2]
  9963  1DCC  3001               	movlw	1
  9964  1DCD  0021               	movlb	1	; select bank1
  9965  1DCE  009D               	movwf	29	;volatile
  9966                           
  9967                           ;adc.c: 70: ADCON1 = 0x90;
  9968  1DCF  3090               	movlw	144
  9969  1DD0  009E               	movwf	30	;volatile
  9970                           
  9971                           ;adc.c: 73: ADRESL = 0x00;
  9972  1DD1  019B               	clrf	27	;volatile
  9973                           
  9974                           ;adc.c: 76: ADRESH = 0x00;
  9975  1DD2  019C               	clrf	28	;volatile
  9976  1DD3  0008               	return
  9977  1DD4                     __end_of_ADC_Initialize:	
  9978                           
  9979                           	psect	text48
  9980  092B                     __ptext48:	
  9981 ;; *************** function _DOOR_run *****************
  9982 ;; Defined at:
  9983 ;;		line 24 in file "doorlogic.c"
  9984 ;; Parameters:    Size  Location     Type
  9985 ;;		None
  9986 ;; Auto vars:     Size  Location     Type
  9987 ;;  dir             2   54[BANK1 ] int 
  9988 ;; Return value:  Size  Location     Type
  9989 ;;                  1    wreg      enum E3332
  9990 ;; Registers used:
  9991 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9992 ;; Tracked objects:
  9993 ;;		On entry : 0/0
  9994 ;;		On exit  : 0/0
  9995 ;;		Unchanged: 0/0
  9996 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9997 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9998 ;;      Locals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
  9999 ;;      Temps:          0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0
 10000 ;;      Totals:         0       0       5       0       0       0       0       0       0       0       0       0       
      +0       0
 10001 ;;Total ram usage:        5 bytes
 10002 ;; Hardware stack levels used:    1
 10003 ;; Hardware stack levels required when called:   12
 10004 ;; This function calls:
 10005 ;;		_Diag_getCompassHealth
 10006 ;;		_Diag_setCompassHealth
 10007 ;;		_HMC5883L_GetCompassDirection
 10008 ;;		_HMC5883L_Initialize
 10009 ;;		_abs
 10010 ;; This function is called by:
 10011 ;;		_main
 10012 ;; This function uses a non-reentrant model
 10013 ;;
 10014                           
 10015                           
 10016                           ;psect for function _DOOR_run
 10017  092B                     _DOOR_run:	
 10018                           
 10019                           ;doorlogic.c: 27: int dir;
 10020                           ;doorlogic.c: 29: if(Diag_getCompassHealth()==0)
 10021                           
 10022                           ;incstack = 0
 10023                           ; Regs used in _DOOR_run: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 10024  092B  319D  256D  3189   	fcall	_Diag_getCompassHealth
 10025  092E  3A00               	xorlw	0
 10026  092F  1D03               	skipz
 10027  0930  2934               	goto	l6978
 10028                           
 10029                           ;doorlogic.c: 30: {
 10030                           ;doorlogic.c: 31: HMC5883L_Initialize();
 10031  0931  319F  272A  3189   	fcall	_HMC5883L_Initialize
 10032  0934                     l6978:	
 10033                           
 10034                           ;doorlogic.c: 32: }
 10035                           ;doorlogic.c: 33: dir=HMC5883L_GetCompassDirection();
 10036  0934  3189  21B1  3189   	fcall	_HMC5883L_GetCompassDirection
 10037  0937  0021               	movlb	1	; select bank1
 10038  0938  0849               	movf	(?_HMC5883L_GetCompassDirection+1)^(0+128),w
 10039  0939  00D7               	movwf	(DOOR_run@dir+1)^(0+128)
 10040  093A  0848               	movf	?_HMC5883L_GetCompassDirection^(0+128),w
 10041  093B  00D6               	movwf	DOOR_run@dir^(0+128)
 10042                           
 10043                           ;doorlogic.c: 35: if(dir<0)
 10044  093C  1FD7               	btfss	(DOOR_run@dir+1)^(0+128),7
 10045  093D  2943               	goto	l6990
 10046                           
 10047                           ;doorlogic.c: 36: {
 10048                           ;doorlogic.c: 37: Diag_setCompassHealth(0);
 10049  093E  3000               	movlw	0
 10050  093F  319D  25C4         	fcall	_Diag_setCompassHealth
 10051                           
 10052                           ;doorlogic.c: 38: return DOOR_ERROR;
 10053  0941  3002               	movlw	2
 10054  0942  0008               	return
 10055  0943                     l6990:	
 10056                           ;doorlogic.c: 39: }
 10057                           
 10058                           
 10059                           ;doorlogic.c: 40: else
 10060                           ;doorlogic.c: 41: Diag_setCompassHealth(1);
 10061  0943  3001               	movlw	1
 10062  0944  319D  25C4  3189   	fcall	_Diag_setCompassHealth
 10063                           
 10064                           ;doorlogic.c: 43: if(initialised==0)
 10065  0947  0022               	movlb	2	; select bank2
 10066  0948  0858               	movf	_initialised^(0+256),w
 10067  0949  1D03               	btfss	3,2
 10068  094A  2959               	goto	l7000
 10069                           
 10070                           ;doorlogic.c: 44: {
 10071                           ;doorlogic.c: 45: referenceDirection=dir;
 10072  094B  0021               	movlb	1	; select bank1
 10073  094C  0857               	movf	(DOOR_run@dir+1)^(0+128),w
 10074  094D  0022               	movlb	2	; select bank2
 10075  094E  00BD               	movwf	(_referenceDirection+1)^(0+256)
 10076  094F  0021               	movlb	1	; select bank1
 10077  0950  0856               	movf	DOOR_run@dir^(0+128),w
 10078  0951  0022               	movlb	2	; select bank2
 10079  0952  00BC               	movwf	_referenceDirection^(0+256)
 10080                           
 10081                           ;doorlogic.c: 46: doorState=DOOR_CLOSED;
 10082  0953  0021               	movlb	1	; select bank1
 10083  0954  01E1               	clrf	_doorState^(0+128)
 10084                           
 10085                           ;doorlogic.c: 47: initialised=1;
 10086  0955  0022               	movlb	2	; select bank2
 10087  0956  01D8               	clrf	_initialised^(0+256)
 10088  0957  0AD8               	incf	_initialised^(0+256),f
 10089                           
 10090                           ;doorlogic.c: 48: }
 10091  0958  29AE               	goto	l7016
 10092  0959                     l7000:	
 10093                           
 10094                           ;doorlogic.c: 50: else if(doorState==DOOR_CLOSED && abs(referenceDirection-dir)>doorOpen
      +                          Angle)
 10095  0959  0021               	movlb	1	; select bank1
 10096  095A  0861               	movf	_doorState^(0+128),w
 10097  095B  1D03               	btfss	3,2
 10098  095C  2982               	goto	l7006
 10099  095D  0956               	comf	DOOR_run@dir^(0+128),w
 10100  095E  00D3               	movwf	??_DOOR_run^(0+128)
 10101  095F  0957               	comf	(DOOR_run@dir+1)^(0+128),w
 10102  0960  00D4               	movwf	(??_DOOR_run^(0+128)+1)
 10103  0961  0AD3               	incf	??_DOOR_run^(0+128),f
 10104  0962  1903               	skipnz
 10105  0963  0AD4               	incf	(??_DOOR_run^(0+128)+1),f
 10106  0964  0022               	movlb	2	; select bank2
 10107  0965  083C               	movf	_referenceDirection^(0+256),w
 10108  0966  0021               	movlb	1	; select bank1
 10109  0967  0753               	addwf	??_DOOR_run^(0+128),w
 10110  0968  0020               	movlb	0	; select bank0
 10111  0969  00A1               	movwf	abs@a
 10112  096A  0022               	movlb	2	; select bank2
 10113  096B  083D               	movf	(_referenceDirection+1)^(0+256),w
 10114  096C  0021               	movlb	1	; select bank1
 10115  096D  3D54               	addwfc	(??_DOOR_run+1)^(0+128),w
 10116  096E  0020               	movlb	0	; select bank0
 10117  096F  00A2               	movwf	abs@a+1
 10118  0970  319E  266C  3189   	fcall	_abs
 10119  0973  0020               	movlb	0	; select bank0
 10120  0974  0822               	movf	?_abs+1,w
 10121  0975  3A80               	xorlw	128
 10122  0976  3C80               	sublw	128
 10123  0977  1D03               	skipz
 10124  0978  297C               	goto	u7075
 10125  0979  0821               	movf	?_abs,w
 10126  097A  0021               	movlb	1	; select bank1
 10127  097B  0267               	subwf	_doorOpenAngle^(0+128),w
 10128  097C                     u7075:	
 10129  097C  1803               	skipnc
 10130  097D  2982               	goto	l7006
 10131                           
 10132                           ;doorlogic.c: 51: {
 10133                           ;doorlogic.c: 52: doorState=DOOR_OPEN;
 10134  097E  0021               	movlb	1	; select bank1
 10135  097F  01E1               	clrf	_doorState^(0+128)
 10136  0980  0AE1               	incf	_doorState^(0+128),f
 10137                           
 10138                           ;doorlogic.c: 53: }
 10139  0981  29AE               	goto	l7016
 10140  0982                     l7006:	
 10141                           
 10142                           ;doorlogic.c: 55: else if(doorState==DOOR_OPEN && abs(referenceDirection-dir)<doorClosed
      +                          Angle)
 10143  0982  0021               	movlb	1	; select bank1
 10144  0983  0361               	decf	_doorState^(0+128),w
 10145  0984  1D03               	btfss	3,2
 10146  0985  29AE               	goto	l7016
 10147  0986  0956               	comf	DOOR_run@dir^(0+128),w
 10148  0987  00D3               	movwf	??_DOOR_run^(0+128)
 10149  0988  0957               	comf	(DOOR_run@dir+1)^(0+128),w
 10150  0989  00D4               	movwf	(??_DOOR_run^(0+128)+1)
 10151  098A  0AD3               	incf	??_DOOR_run^(0+128),f
 10152  098B  1903               	skipnz
 10153  098C  0AD4               	incf	(??_DOOR_run^(0+128)+1),f
 10154  098D  0022               	movlb	2	; select bank2
 10155  098E  083C               	movf	_referenceDirection^(0+256),w
 10156  098F  0021               	movlb	1	; select bank1
 10157  0990  0753               	addwf	??_DOOR_run^(0+128),w
 10158  0991  0020               	movlb	0	; select bank0
 10159  0992  00A1               	movwf	abs@a
 10160  0993  0022               	movlb	2	; select bank2
 10161  0994  083D               	movf	(_referenceDirection+1)^(0+256),w
 10162  0995  0021               	movlb	1	; select bank1
 10163  0996  3D54               	addwfc	(??_DOOR_run+1)^(0+128),w
 10164  0997  0020               	movlb	0	; select bank0
 10165  0998  00A2               	movwf	abs@a+1
 10166  0999  319E  266C  3189   	fcall	_abs
 10167  099C  0020               	movlb	0	; select bank0
 10168  099D  0822               	movf	?_abs+1,w
 10169  099E  3A80               	xorlw	128
 10170  099F  0021               	movlb	1	; select bank1
 10171  09A0  00D5               	movwf	(??_DOOR_run+2)^(0+128)
 10172  09A1  3080               	movlw	128
 10173  09A2  0255               	subwf	(??_DOOR_run+2)^(0+128),w
 10174  09A3  1D03               	skipz
 10175  09A4  29A8               	goto	u7095
 10176  09A5  0866               	movf	_doorClosedAngle^(0+128),w
 10177  09A6  0020               	movlb	0	; select bank0
 10178  09A7  0221               	subwf	?_abs,w
 10179  09A8                     u7095:	
 10180  09A8  1803               	skipnc
 10181  09A9  29AE               	goto	l7016
 10182                           
 10183                           ;doorlogic.c: 56: {
 10184                           ;doorlogic.c: 57: doorState=DOOR_CLOSED;
 10185  09AA  0021               	movlb	1	; select bank1
 10186  09AB  01E1               	clrf	_doorState^(0+128)
 10187                           
 10188                           ;doorlogic.c: 58: return(doorState);
 10189  09AC  0861               	movf	_doorState^(0+128),w
 10190  09AD  0008               	return
 10191  09AE                     l7016:	
 10192                           
 10193                           ;doorlogic.c: 59: }
 10194                           ;doorlogic.c: 62: return(doorState);
 10195  09AE  0021               	movlb	1	; select bank1
 10196  09AF  0861               	movf	_doorState^(0+128),w
 10197  09B0  0008               	return
 10198  09B1                     __end_of_DOOR_run:	
 10199                           
 10200                           	psect	text49
 10201  1E6C                     __ptext49:	
 10202 ;; *************** function _abs *****************
 10203 ;; Defined at:
 10204 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\abs.c"
 10205 ;; Parameters:    Size  Location     Type
 10206 ;;  a               2    1[BANK0 ] int 
 10207 ;; Auto vars:     Size  Location     Type
 10208 ;;		None
 10209 ;; Return value:  Size  Location     Type
 10210 ;;                  2    1[BANK0 ] int 
 10211 ;; Registers used:
 10212 ;;		wreg, status,2, status,0
 10213 ;; Tracked objects:
 10214 ;;		On entry : 0/0
 10215 ;;		On exit  : 0/0
 10216 ;;		Unchanged: 0/0
 10217 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10218 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10219 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10220 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10221 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10222 ;;Total ram usage:        4 bytes
 10223 ;; Hardware stack levels used:    1
 10224 ;; Hardware stack levels required when called:    4
 10225 ;; This function calls:
 10226 ;;		Nothing
 10227 ;; This function is called by:
 10228 ;;		_Wireless_packageData
 10229 ;;		_DOOR_run
 10230 ;; This function uses a non-reentrant model
 10231 ;;
 10232                           
 10233                           
 10234                           ;psect for function _abs
 10235  1E6C                     _abs:	
 10236                           
 10237                           ;incstack = 0
 10238                           ; Regs used in _abs: [wreg+status,2+status,0]
 10239  1E6C  0020               	movlb	0	; select bank0
 10240  1E6D  1FA2               	btfss	abs@a+1,7
 10241  1E6E  0008               	return
 10242  1E6F  0921               	comf	abs@a,w
 10243  1E70  00A3               	movwf	??_abs
 10244  1E71  0922               	comf	abs@a+1,w
 10245  1E72  00A4               	movwf	??_abs+1
 10246  1E73  0AA3               	incf	??_abs,f
 10247  1E74  1903               	skipnz
 10248  1E75  0AA4               	incf	??_abs+1,f
 10249  1E76  0823               	movf	??_abs,w
 10250  1E77  00A1               	movwf	?_abs
 10251  1E78  0824               	movf	??_abs+1,w
 10252  1E79  00A2               	movwf	?_abs+1
 10253  1E7A  0008               	return
 10254  1E7B                     __end_of_abs:	
 10255                           
 10256                           	psect	text50
 10257  1F2A                     __ptext50:	
 10258 ;; *************** function _HMC5883L_Initialize *****************
 10259 ;; Defined at:
 10260 ;;		line 48 in file "hmc5883l.c"
 10261 ;; Parameters:    Size  Location     Type
 10262 ;;		None
 10263 ;; Auto vars:     Size  Location     Type
 10264 ;;  tmp             1   35[BANK0 ] unsigned char 
 10265 ;; Return value:  Size  Location     Type
 10266 ;;                  1    wreg      void 
 10267 ;; Registers used:
 10268 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10269 ;; Tracked objects:
 10270 ;;		On entry : 0/0
 10271 ;;		On exit  : 0/0
 10272 ;;		Unchanged: 0/0
 10273 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10274 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10275 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10276 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10277 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10278 ;;Total ram usage:        2 bytes
 10279 ;; Hardware stack levels used:    1
 10280 ;; Hardware stack levels required when called:    9
 10281 ;; This function calls:
 10282 ;;		_HMC5883L_I2C_ByteWrite
 10283 ;;		_HMC5883L_SetGain
 10284 ;;		_HMC5883L_SetMode
 10285 ;; This function is called by:
 10286 ;;		_main
 10287 ;;		_DOOR_run
 10288 ;; This function uses a non-reentrant model
 10289 ;;
 10290                           
 10291                           
 10292                           ;psect for function _HMC5883L_Initialize
 10293  1F2A                     _HMC5883L_Initialize:	
 10294                           
 10295                           ;hmc5883l.c: 52: uint8_t tmp = (0x03 << (6 - 2 + 1))
 10296                           ;hmc5883l.c: 53: | (0x04 << (4 - 3 + 1))
 10297                           ;hmc5883l.c: 54: | (0x00 << (1 - 2 + 1));
 10298                           
 10299                           ;incstack = 0
 10300                           ; Regs used in _HMC5883L_Initialize: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 10301  1F2A  3070               	movlw	112
 10302  1F2B  0020               	movlb	0	; select bank0
 10303  1F2C  00C2               	movwf	??_HMC5883L_Initialize
 10304  1F2D  0842               	movf	??_HMC5883L_Initialize,w
 10305  1F2E  00C3               	movwf	HMC5883L_Initialize@tmp
 10306                           
 10307                           ;hmc5883l.c: 55: HMC5883L_I2C_ByteWrite((0x1E), &tmp, 0x00);
 10308  1F2F  3043               	movlw	(low (HMC5883L_Initialize@tmp| 0))& (0+255)
 10309  1F30  00C2               	movwf	??_HMC5883L_Initialize
 10310  1F31  0842               	movf	??_HMC5883L_Initialize,w
 10311  1F32  00B9               	movwf	HMC5883L_I2C_ByteWrite@pBuffer
 10312  1F33  01BA               	clrf	HMC5883L_I2C_ByteWrite@WriteAddr
 10313  1F34  301E               	movlw	30
 10314  1F35  319E  2650  319F   	fcall	_HMC5883L_I2C_ByteWrite
 10315                           
 10316                           ;hmc5883l.c: 58: HMC5883L_SetGain(0x00);
 10317  1F38  3000               	movlw	0
 10318  1F39  319F  276C  319F   	fcall	_HMC5883L_SetGain
 10319                           
 10320                           ;hmc5883l.c: 61: HMC5883L_SetMode(0x01);
 10321  1F3C  3001               	movlw	1
 10322  1F3D  319F  27B2         	fcall	_HMC5883L_SetMode
 10323  1F3F  0008               	return
 10324  1F40                     __end_of_HMC5883L_Initialize:	
 10325                           
 10326                           	psect	text51
 10327  1FB2                     __ptext51:	
 10328 ;; *************** function _HMC5883L_SetMode *****************
 10329 ;; Defined at:
 10330 ;;		line 270 in file "hmc5883l.c"
 10331 ;; Parameters:    Size  Location     Type
 10332 ;;  newMode         1    wreg     unsigned char 
 10333 ;; Auto vars:     Size  Location     Type
 10334 ;;  newMode         1   32[BANK0 ] unsigned char 
 10335 ;;  tmp             1   33[BANK0 ] unsigned char 
 10336 ;; Return value:  Size  Location     Type
 10337 ;;                  1    wreg      void 
 10338 ;; Registers used:
 10339 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10340 ;; Tracked objects:
 10341 ;;		On entry : 0/0
 10342 ;;		On exit  : 0/0
 10343 ;;		Unchanged: 0/0
 10344 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10345 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10346 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10347 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10348 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10349 ;;Total ram usage:        4 bytes
 10350 ;; Hardware stack levels used:    1
 10351 ;; Hardware stack levels required when called:    8
 10352 ;; This function calls:
 10353 ;;		_HMC5883L_I2C_ByteWrite
 10354 ;; This function is called by:
 10355 ;;		_HMC5883L_Initialize
 10356 ;; This function uses a non-reentrant model
 10357 ;;
 10358                           
 10359                           
 10360                           ;psect for function _HMC5883L_SetMode
 10361  1FB2                     _HMC5883L_SetMode:	
 10362                           
 10363                           ;incstack = 0
 10364                           ; Regs used in _HMC5883L_SetMode: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 10365                           ;HMC5883L_SetMode@newMode stored from wreg
 10366  1FB2  0020               	movlb	0	; select bank0
 10367  1FB3  00C0               	movwf	HMC5883L_SetMode@newMode
 10368                           
 10369                           ;hmc5883l.c: 274: uint8_t tmp = HMC5883Lmode << (1 - 2 + 1);
 10370  1FB4  0021               	movlb	1	; select bank1
 10371  1FB5  0862               	movf	_HMC5883Lmode^(0+128),w
 10372  1FB6  0020               	movlb	0	; select bank0
 10373  1FB7  00BE               	movwf	??_HMC5883L_SetMode
 10374  1FB8  083E               	movf	??_HMC5883L_SetMode,w
 10375  1FB9  00C1               	movwf	HMC5883L_SetMode@tmp
 10376                           
 10377                           ;hmc5883l.c: 275: HMC5883L_I2C_ByteWrite((0x1E), &tmp, 0x02);
 10378  1FBA  3041               	movlw	(low (HMC5883L_SetMode@tmp| 0))& (0+255)
 10379  1FBB  00BE               	movwf	??_HMC5883L_SetMode
 10380  1FBC  083E               	movf	??_HMC5883L_SetMode,w
 10381  1FBD  00B9               	movwf	HMC5883L_I2C_ByteWrite@pBuffer
 10382  1FBE  3002               	movlw	2
 10383  1FBF  00BF               	movwf	??_HMC5883L_SetMode+1
 10384  1FC0  083F               	movf	??_HMC5883L_SetMode+1,w
 10385  1FC1  00BA               	movwf	HMC5883L_I2C_ByteWrite@WriteAddr
 10386  1FC2  301E               	movlw	30
 10387  1FC3  319E  2650         	fcall	_HMC5883L_I2C_ByteWrite
 10388                           
 10389                           ;hmc5883l.c: 276: HMC5883Lmode = newMode;
 10390  1FC5  0020               	movlb	0	; select bank0
 10391  1FC6  0840               	movf	HMC5883L_SetMode@newMode,w
 10392  1FC7  00BE               	movwf	??_HMC5883L_SetMode
 10393  1FC8  083E               	movf	??_HMC5883L_SetMode,w
 10394  1FC9  0021               	movlb	1	; select bank1
 10395  1FCA  00E2               	movwf	_HMC5883Lmode^(0+128)
 10396  1FCB  0008               	return
 10397  1FCC                     __end_of_HMC5883L_SetMode:	
 10398                           
 10399                           	psect	text52
 10400  1F6C                     __ptext52:	
 10401 ;; *************** function _HMC5883L_SetGain *****************
 10402 ;; Defined at:
 10403 ;;		line 221 in file "hmc5883l.c"
 10404 ;; Parameters:    Size  Location     Type
 10405 ;;  gain            1    wreg     unsigned char 
 10406 ;; Auto vars:     Size  Location     Type
 10407 ;;  gain            1   32[BANK0 ] unsigned char 
 10408 ;;  tmp             1   33[BANK0 ] unsigned char 
 10409 ;; Return value:  Size  Location     Type
 10410 ;;                  1    wreg      void 
 10411 ;; Registers used:
 10412 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10413 ;; Tracked objects:
 10414 ;;		On entry : 0/0
 10415 ;;		On exit  : 0/0
 10416 ;;		Unchanged: 0/0
 10417 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10418 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10419 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10420 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10421 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10422 ;;Total ram usage:        4 bytes
 10423 ;; Hardware stack levels used:    1
 10424 ;; Hardware stack levels required when called:    8
 10425 ;; This function calls:
 10426 ;;		_HMC5883L_I2C_ByteWrite
 10427 ;; This function is called by:
 10428 ;;		_HMC5883L_Initialize
 10429 ;; This function uses a non-reentrant model
 10430 ;;
 10431                           
 10432                           
 10433                           ;psect for function _HMC5883L_SetGain
 10434  1F6C                     _HMC5883L_SetGain:	
 10435                           
 10436                           ;incstack = 0
 10437                           ; Regs used in _HMC5883L_SetGain: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 10438                           ;HMC5883L_SetGain@gain stored from wreg
 10439  1F6C  0020               	movlb	0	; select bank0
 10440  1F6D  00C0               	movwf	HMC5883L_SetGain@gain
 10441                           
 10442                           ;hmc5883l.c: 225: uint8_t tmp = gain << (7 - 3 + 1);
 10443  1F6E  0840               	movf	HMC5883L_SetGain@gain,w
 10444  1F6F  00BE               	movwf	??_HMC5883L_SetGain
 10445  1F70  3004               	movlw	4
 10446  1F71                     u6145:	
 10447  1F71  35BE               	lslf	??_HMC5883L_SetGain,f
 10448  1F72  3EFF               	addlw	-1
 10449  1F73  1D03               	skipz
 10450  1F74  2F71               	goto	u6145
 10451  1F75  353E               	lslf	??_HMC5883L_SetGain,w
 10452  1F76  00BF               	movwf	??_HMC5883L_SetGain+1
 10453  1F77  083F               	movf	??_HMC5883L_SetGain+1,w
 10454  1F78  00C1               	movwf	HMC5883L_SetGain@tmp
 10455                           
 10456                           ;hmc5883l.c: 226: HMC5883L_I2C_ByteWrite((0x1E), &tmp, 0x01);
 10457  1F79  3041               	movlw	(low (HMC5883L_SetGain@tmp| 0))& (0+255)
 10458  1F7A  00BE               	movwf	??_HMC5883L_SetGain
 10459  1F7B  083E               	movf	??_HMC5883L_SetGain,w
 10460  1F7C  00B9               	movwf	HMC5883L_I2C_ByteWrite@pBuffer
 10461  1F7D  01BA               	clrf	HMC5883L_I2C_ByteWrite@WriteAddr
 10462  1F7E  0ABA               	incf	HMC5883L_I2C_ByteWrite@WriteAddr,f
 10463  1F7F  301E               	movlw	30
 10464  1F80  319E  2650         	fcall	_HMC5883L_I2C_ByteWrite
 10465  1F82  0008               	return
 10466  1F83                     __end_of_HMC5883L_SetGain:	
 10467                           
 10468                           	psect	text53
 10469  09B1                     __ptext53:	
 10470 ;; *************** function _HMC5883L_GetCompassDirection *****************
 10471 ;; Defined at:
 10472 ;;		line 318 in file "hmc5883l.c"
 10473 ;; Parameters:    Size  Location     Type
 10474 ;;		None
 10475 ;; Auto vars:     Size  Location     Type
 10476 ;;  rawSamples      6   42[BANK1 ] int [3]
 10477 ;;  h               3   48[BANK1 ] float 
 10478 ;; Return value:  Size  Location     Type
 10479 ;;                  2   40[BANK1 ] int 
 10480 ;; Registers used:
 10481 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10482 ;; Tracked objects:
 10483 ;;		On entry : 0/0
 10484 ;;		On exit  : 0/0
 10485 ;;		Unchanged: 0/0
 10486 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10487 ;;      Params:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
 10488 ;;      Locals:         0       0       9       0       0       0       0       0       0       0       0       0       
      +0       0
 10489 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10490 ;;      Totals:         0       0      11       0       0       0       0       0       0       0       0       0       
      +0       0
 10491 ;;Total ram usage:       11 bytes
 10492 ;; Hardware stack levels used:    1
 10493 ;; Hardware stack levels required when called:   11
 10494 ;; This function calls:
 10495 ;;		_HMC5883L_GetHeading
 10496 ;;		___awtoft
 10497 ;;		___ftadd
 10498 ;;		___ftdiv
 10499 ;;		___ftmul
 10500 ;;		___fttol
 10501 ;;		_atan2
 10502 ;; This function is called by:
 10503 ;;		_DOOR_run
 10504 ;; This function uses a non-reentrant model
 10505 ;;
 10506                           
 10507                           
 10508                           ;psect for function _HMC5883L_GetCompassDirection
 10509  09B1                     _HMC5883L_GetCompassDirection:	
 10510                           
 10511                           ;hmc5883l.c: 320: int rawSamples[3];
 10512                           ;hmc5883l.c: 321: float h;
 10513                           ;hmc5883l.c: 322: if(HMC5883L_GetHeading(rawSamples)==1)
 10514                           
 10515                           ;incstack = 0
 10516                           ; Regs used in _HMC5883L_GetCompassDirection: [wreg-fsr1h+status,2+status,0+pclath+cstac
      +                          k]
 10517  09B1  30CA               	movlw	(low (HMC5883L_GetCompassDirection@rawSamples| 0))& (0+255)
 10518  09B2  3197  270F  3189   	fcall	_HMC5883L_GetHeading
 10519  09B5  3A01               	xorlw	1
 10520  09B6  1D03               	skipz
 10521  09B7  2A47               	goto	l6602
 10522                           
 10523                           ;hmc5883l.c: 323: {
 10524                           ;hmc5883l.c: 324: h=atan2(rawSamples[2],rawSamples[1]);
 10525  09B8  0021               	movlb	1	; select bank1
 10526  09B9  084F               	movf	((HMC5883L_GetCompassDirection@rawSamples+1)^(0+128)+4),w
 10527  09BA  0020               	movlb	0	; select bank0
 10528  09BB  00AA               	movwf	___awtoft@c+1
 10529  09BC  0021               	movlb	1	; select bank1
 10530  09BD  084E               	movf	(HMC5883L_GetCompassDirection@rawSamples^(0+128)+4),w
 10531  09BE  0020               	movlb	0	; select bank0
 10532  09BF  00A9               	movwf	___awtoft@c
 10533  09C0  3191  215D  3189   	fcall	___awtoft
 10534  09C3  0020               	movlb	0	; select bank0
 10535  09C4  0829               	movf	?___awtoft,w
 10536  09C5  0021               	movlb	1	; select bank1
 10537  09C6  00B3               	movwf	atan2@y^(0+128)
 10538  09C7  0020               	movlb	0	; select bank0
 10539  09C8  082A               	movf	?___awtoft+1,w
 10540  09C9  0021               	movlb	1	; select bank1
 10541  09CA  00B4               	movwf	(atan2@y+1)^(0+128)
 10542  09CB  0020               	movlb	0	; select bank0
 10543  09CC  082B               	movf	?___awtoft+2,w
 10544  09CD  0021               	movlb	1	; select bank1
 10545  09CE  00B5               	movwf	(atan2@y+2)^(0+128)
 10546  09CF  084D               	movf	((HMC5883L_GetCompassDirection@rawSamples+1)^(0+128)+2),w
 10547  09D0  0020               	movlb	0	; select bank0
 10548  09D1  00AA               	movwf	___awtoft@c+1
 10549  09D2  0021               	movlb	1	; select bank1
 10550  09D3  084C               	movf	(HMC5883L_GetCompassDirection@rawSamples^(0+128)+2),w
 10551  09D4  0020               	movlb	0	; select bank0
 10552  09D5  00A9               	movwf	___awtoft@c
 10553  09D6  3191  215D  3189   	fcall	___awtoft
 10554  09D9  0020               	movlb	0	; select bank0
 10555  09DA  0829               	movf	?___awtoft,w
 10556  09DB  0021               	movlb	1	; select bank1
 10557  09DC  00B6               	movwf	atan2@x^(0+128)
 10558  09DD  0020               	movlb	0	; select bank0
 10559  09DE  082A               	movf	?___awtoft+1,w
 10560  09DF  0021               	movlb	1	; select bank1
 10561  09E0  00B7               	movwf	(atan2@x+1)^(0+128)
 10562  09E1  0020               	movlb	0	; select bank0
 10563  09E2  082B               	movf	?___awtoft+2,w
 10564  09E3  0021               	movlb	1	; select bank1
 10565  09E4  00B8               	movwf	(atan2@x+2)^(0+128)
 10566  09E5  3183  233C  3189   	fcall	_atan2
 10567  09E8  0021               	movlb	1	; select bank1
 10568  09E9  0833               	movf	?_atan2^(0+128),w
 10569  09EA  00D0               	movwf	HMC5883L_GetCompassDirection@h^(0+128)
 10570  09EB  0834               	movf	(?_atan2+1)^(0+128),w
 10571  09EC  00D1               	movwf	(HMC5883L_GetCompassDirection@h+1)^(0+128)
 10572  09ED  0835               	movf	(?_atan2+2)^(0+128),w
 10573  09EE  00D2               	movwf	(HMC5883L_GetCompassDirection@h+2)^(0+128)
 10574                           
 10575                           ;hmc5883l.c: 325: h= (float)((float)(h*180)/3.14)+180;
 10576  09EF  3000               	movlw	0
 10577  09F0  0020               	movlb	0	; select bank0
 10578  09F1  00D9               	movwf	___ftadd@f1
 10579  09F2  3034               	movlw	52
 10580  09F3  00DA               	movwf	___ftadd@f1+1
 10581  09F4  3043               	movlw	67
 10582  09F5  00DB               	movwf	___ftadd@f1+2
 10583  09F6  30F6               	movlw	246
 10584  09F7  00B1               	movwf	___ftdiv@f2
 10585  09F8  3048               	movlw	72
 10586  09F9  00B2               	movwf	___ftdiv@f2+1
 10587  09FA  3040               	movlw	64
 10588  09FB  00B3               	movwf	___ftdiv@f2+2
 10589  09FC  3000               	movlw	0
 10590  09FD  00C9               	movwf	___ftmul@f1
 10591  09FE  3034               	movlw	52
 10592  09FF  00CA               	movwf	___ftmul@f1+1
 10593  0A00  3043               	movlw	67
 10594  0A01  00CB               	movwf	___ftmul@f1+2
 10595  0A02  0021               	movlb	1	; select bank1
 10596  0A03  0850               	movf	HMC5883L_GetCompassDirection@h^(0+128),w
 10597  0A04  0020               	movlb	0	; select bank0
 10598  0A05  00CC               	movwf	___ftmul@f2
 10599  0A06  0021               	movlb	1	; select bank1
 10600  0A07  0851               	movf	(HMC5883L_GetCompassDirection@h+1)^(0+128),w
 10601  0A08  0020               	movlb	0	; select bank0
 10602  0A09  00CD               	movwf	___ftmul@f2+1
 10603  0A0A  0021               	movlb	1	; select bank1
 10604  0A0B  0852               	movf	(HMC5883L_GetCompassDirection@h+2)^(0+128),w
 10605  0A0C  0020               	movlb	0	; select bank0
 10606  0A0D  00CE               	movwf	___ftmul@f2+2
 10607  0A0E  318B  2395  3189   	fcall	___ftmul
 10608  0A11  0020               	movlb	0	; select bank0
 10609  0A12  0849               	movf	?___ftmul,w
 10610  0A13  00B4               	movwf	___ftdiv@f1
 10611  0A14  084A               	movf	?___ftmul+1,w
 10612  0A15  00B5               	movwf	___ftdiv@f1+1
 10613  0A16  084B               	movf	?___ftmul+2,w
 10614  0A17  00B6               	movwf	___ftdiv@f1+2
 10615  0A18  318A  22EC  3189   	fcall	___ftdiv
 10616  0A1B  0020               	movlb	0	; select bank0
 10617  0A1C  0831               	movf	?___ftdiv,w
 10618  0A1D  00DC               	movwf	___ftadd@f2
 10619  0A1E  0832               	movf	?___ftdiv+1,w
 10620  0A1F  00DD               	movwf	___ftadd@f2+1
 10621  0A20  0833               	movf	?___ftdiv+2,w
 10622  0A21  00DE               	movwf	___ftadd@f2+2
 10623  0A22  318C  2449  3189   	fcall	___ftadd
 10624  0A25  0020               	movlb	0	; select bank0
 10625  0A26  0859               	movf	?___ftadd,w
 10626  0A27  0021               	movlb	1	; select bank1
 10627  0A28  00D0               	movwf	HMC5883L_GetCompassDirection@h^(0+128)
 10628  0A29  0020               	movlb	0	; select bank0
 10629  0A2A  085A               	movf	?___ftadd+1,w
 10630  0A2B  0021               	movlb	1	; select bank1
 10631  0A2C  00D1               	movwf	(HMC5883L_GetCompassDirection@h+1)^(0+128)
 10632  0A2D  0020               	movlb	0	; select bank0
 10633  0A2E  085B               	movf	?___ftadd+2,w
 10634  0A2F  0021               	movlb	1	; select bank1
 10635  0A30  00D2               	movwf	(HMC5883L_GetCompassDirection@h+2)^(0+128)
 10636                           
 10637                           ;hmc5883l.c: 326: return((int)h);
 10638  0A31  0850               	movf	HMC5883L_GetCompassDirection@h^(0+128),w
 10639  0A32  0020               	movlb	0	; select bank0
 10640  0A33  00E6               	movwf	___fttol@f1
 10641  0A34  0021               	movlb	1	; select bank1
 10642  0A35  0851               	movf	(HMC5883L_GetCompassDirection@h+1)^(0+128),w
 10643  0A36  0020               	movlb	0	; select bank0
 10644  0A37  00E7               	movwf	___fttol@f1+1
 10645  0A38  0021               	movlb	1	; select bank1
 10646  0A39  0852               	movf	(HMC5883L_GetCompassDirection@h+2)^(0+128),w
 10647  0A3A  0020               	movlb	0	; select bank0
 10648  0A3B  00E8               	movwf	___fttol@f1+2
 10649  0A3C  318A  224D         	fcall	___fttol
 10650  0A3E  0020               	movlb	0	; select bank0
 10651  0A3F  0867               	movf	?___fttol+1,w
 10652  0A40  0021               	movlb	1	; select bank1
 10653  0A41  00C9               	movwf	(?_HMC5883L_GetCompassDirection+1)^(0+128)
 10654  0A42  0020               	movlb	0	; select bank0
 10655  0A43  0866               	movf	?___fttol,w
 10656  0A44  0021               	movlb	1	; select bank1
 10657  0A45  00C8               	movwf	?_HMC5883L_GetCompassDirection^(0+128)
 10658                           
 10659                           ;hmc5883l.c: 327: }
 10660  0A46  0008               	return
 10661  0A47                     l6602:	
 10662                           
 10663                           ;hmc5883l.c: 328: else return -1;
 10664  0A47  30FF               	movlw	255
 10665  0A48  0021               	movlb	1	; select bank1
 10666  0A49  00C8               	movwf	?_HMC5883L_GetCompassDirection^(0+128)
 10667  0A4A  30FF               	movlw	255
 10668  0A4B  00C9               	movwf	(?_HMC5883L_GetCompassDirection^(0+128)+1)
 10669  0A4C  0008               	return
 10670  0A4D                     __end_of_HMC5883L_GetCompassDirection:	
 10671                           
 10672                           	psect	text54
 10673  033C                     __ptext54:	
 10674 ;; *************** function _atan2 *****************
 10675 ;; Defined at:
 10676 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\atan2.c"
 10677 ;; Parameters:    Size  Location     Type
 10678 ;;  y               3   19[BANK1 ] int 
 10679 ;;  x               3   22[BANK1 ] int 
 10680 ;; Auto vars:     Size  Location     Type
 10681 ;;  v               3   37[BANK1 ] int 
 10682 ;; Return value:  Size  Location     Type
 10683 ;;                  3   19[BANK1 ] int 
 10684 ;; Registers used:
 10685 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
 10686 ;; Tracked objects:
 10687 ;;		On entry : 0/0
 10688 ;;		On exit  : 0/0
 10689 ;;		Unchanged: 0/0
 10690 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10691 ;;      Params:         0       0       6       0       0       0       0       0       0       0       0       0       
      +0       0
 10692 ;;      Locals:         0       0      15       0       0       0       0       0       0       0       0       0       
      +0       0
 10693 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10694 ;;      Totals:         0       0      21       0       0       0       0       0       0       0       0       0       
      +0       0
 10695 ;;Total ram usage:       21 bytes
 10696 ;; Hardware stack levels used:    1
 10697 ;; Hardware stack levels required when called:    8
 10698 ;; This function calls:
 10699 ;;		___ftadd
 10700 ;;		___ftdiv
 10701 ;;		___ftge
 10702 ;;		___ftneg
 10703 ;;		___ftsub
 10704 ;;		_atan
 10705 ;;		_fabs
 10706 ;; This function is called by:
 10707 ;;		_HMC5883L_GetCompassDirection
 10708 ;; This function uses a non-reentrant model
 10709 ;;
 10710                           
 10711                           
 10712                           ;psect for function _atan2
 10713  033C                     _atan2:	
 10714                           
 10715                           ;incstack = 0
 10716                           ; Regs used in _atan2: [wreg-fsr0h+status,2+status,0+pclath+cstack]
 10717  033C  0021               	movlb	1	; select bank1
 10718  033D  0838               	movf	(atan2@x+2)^(0+128),w
 10719  033E  0437               	iorwf	(atan2@x+1)^(0+128),w
 10720  033F  0436               	iorwf	atan2@x^(0+128),w
 10721  0340  1D03               	skipz
 10722  0341  2B7C               	goto	l6252
 10723  0342  0835               	movf	(atan2@y+2)^(0+128),w
 10724  0343  0434               	iorwf	(atan2@y+1)^(0+128),w
 10725  0344  0433               	iorwf	atan2@y^(0+128),w
 10726  0345  1D03               	skipz
 10727  0346  2B54               	goto	l6240
 10728  0347  3021               	movlw	33
 10729  0348  0022               	movlb	2	; select bank2
 10730  0349  00B8               	movwf	_errno^(0+256)
 10731  034A  3000               	movlw	0
 10732  034B  00B9               	movwf	(_errno^(0+256)+1)
 10733  034C  3000               	movlw	0
 10734  034D  0021               	movlb	1	; select bank1
 10735  034E  00B3               	movwf	?_atan2^(0+128)
 10736  034F  3000               	movlw	0
 10737  0350  00B4               	movwf	(?_atan2+1)^(0+128)
 10738  0351  3000               	movlw	0
 10739  0352  00B5               	movwf	(?_atan2+2)^(0+128)
 10740  0353  0008               	return
 10741  0354                     l6240:	
 10742  0354  3000               	movlw	0
 10743  0355  0020               	movlb	0	; select bank0
 10744  0356  00A1               	movwf	___ftge@ff1
 10745  0357  3000               	movlw	0
 10746  0358  00A2               	movwf	___ftge@ff1+1
 10747  0359  3000               	movlw	0
 10748  035A  00A3               	movwf	___ftge@ff1+2
 10749  035B  0021               	movlb	1	; select bank1
 10750  035C  0833               	movf	atan2@y^(0+128),w
 10751  035D  0020               	movlb	0	; select bank0
 10752  035E  00A4               	movwf	___ftge@ff2
 10753  035F  0021               	movlb	1	; select bank1
 10754  0360  0834               	movf	(atan2@y+1)^(0+128),w
 10755  0361  0020               	movlb	0	; select bank0
 10756  0362  00A5               	movwf	___ftge@ff2+1
 10757  0363  0021               	movlb	1	; select bank1
 10758  0364  0835               	movf	(atan2@y+2)^(0+128),w
 10759  0365  0020               	movlb	0	; select bank0
 10760  0366  00A6               	movwf	___ftge@ff2+2
 10761  0367  3192  22D1  3183   	fcall	___ftge
 10762  036A  1803               	btfsc	3,0
 10763  036B  2B74               	goto	l6248
 10764  036C  3010               	movlw	16
 10765  036D  0021               	movlb	1	; select bank1
 10766  036E  00B3               	movwf	?_atan2^(0+128)
 10767  036F  30C9               	movlw	201
 10768  0370  00B4               	movwf	(?_atan2+1)^(0+128)
 10769  0371  303F               	movlw	63
 10770  0372  00B5               	movwf	(?_atan2+2)^(0+128)
 10771  0373  0008               	return
 10772  0374                     l6248:	
 10773  0374  3010               	movlw	16
 10774  0375  0021               	movlb	1	; select bank1
 10775  0376  00B3               	movwf	?_atan2^(0+128)
 10776  0377  30C9               	movlw	201
 10777  0378  00B4               	movwf	(?_atan2+1)^(0+128)
 10778  0379  30BF               	movlw	191
 10779  037A  00B5               	movwf	(?_atan2+2)^(0+128)
 10780  037B  0008               	return
 10781  037C                     l6252:	
 10782  037C  0835               	movf	(atan2@y+2)^(0+128),w
 10783  037D  0434               	iorwf	(atan2@y+1)^(0+128),w
 10784  037E  0433               	iorwf	atan2@y^(0+128),w
 10785  037F  1D03               	skipz
 10786  0380  2BA9               	goto	l6266
 10787  0381  3000               	movlw	0
 10788  0382  0020               	movlb	0	; select bank0
 10789  0383  00A1               	movwf	___ftge@ff1
 10790  0384  3000               	movlw	0
 10791  0385  00A2               	movwf	___ftge@ff1+1
 10792  0386  3000               	movlw	0
 10793  0387  00A3               	movwf	___ftge@ff1+2
 10794  0388  0021               	movlb	1	; select bank1
 10795  0389  0836               	movf	atan2@x^(0+128),w
 10796  038A  0020               	movlb	0	; select bank0
 10797  038B  00A4               	movwf	___ftge@ff2
 10798  038C  0021               	movlb	1	; select bank1
 10799  038D  0837               	movf	(atan2@x+1)^(0+128),w
 10800  038E  0020               	movlb	0	; select bank0
 10801  038F  00A5               	movwf	___ftge@ff2+1
 10802  0390  0021               	movlb	1	; select bank1
 10803  0391  0838               	movf	(atan2@x+2)^(0+128),w
 10804  0392  0020               	movlb	0	; select bank0
 10805  0393  00A6               	movwf	___ftge@ff2+2
 10806  0394  3192  22D1  3183   	fcall	___ftge
 10807  0397  1803               	btfsc	3,0
 10808  0398  2BA1               	goto	l6262
 10809  0399  3000               	movlw	0
 10810  039A  0021               	movlb	1	; select bank1
 10811  039B  00B3               	movwf	?_atan2^(0+128)
 10812  039C  3000               	movlw	0
 10813  039D  00B4               	movwf	(?_atan2+1)^(0+128)
 10814  039E  3000               	movlw	0
 10815  039F  00B5               	movwf	(?_atan2+2)^(0+128)
 10816  03A0  0008               	return
 10817  03A1                     l6262:	
 10818  03A1  3010               	movlw	16
 10819  03A2  0021               	movlb	1	; select bank1
 10820  03A3  00B3               	movwf	?_atan2^(0+128)
 10821  03A4  3049               	movlw	73
 10822  03A5  00B4               	movwf	(?_atan2+1)^(0+128)
 10823  03A6  3040               	movlw	64
 10824  03A7  00B5               	movwf	(?_atan2+2)^(0+128)
 10825  03A8  0008               	return
 10826  03A9                     l6266:	
 10827  03A9  0836               	movf	atan2@x^(0+128),w
 10828  03AA  0020               	movlb	0	; select bank0
 10829  03AB  00C4               	movwf	fabs@d
 10830  03AC  0021               	movlb	1	; select bank1
 10831  03AD  0837               	movf	(atan2@x+1)^(0+128),w
 10832  03AE  0020               	movlb	0	; select bank0
 10833  03AF  00C5               	movwf	fabs@d+1
 10834  03B0  0021               	movlb	1	; select bank1
 10835  03B1  0838               	movf	(atan2@x+2)^(0+128),w
 10836  03B2  0020               	movlb	0	; select bank0
 10837  03B3  00C6               	movwf	fabs@d+2
 10838  03B4  3191  21C5  3183   	fcall	_fabs
 10839  03B7  0020               	movlb	0	; select bank0
 10840  03B8  0844               	movf	?_fabs,w
 10841  03B9  0021               	movlb	1	; select bank1
 10842  03BA  00B9               	movwf	_atan2$2612^(0+128)
 10843  03BB  0020               	movlb	0	; select bank0
 10844  03BC  0845               	movf	?_fabs+1,w
 10845  03BD  0021               	movlb	1	; select bank1
 10846  03BE  00BA               	movwf	(_atan2$2612+1)^(0+128)
 10847  03BF  0020               	movlb	0	; select bank0
 10848  03C0  0846               	movf	?_fabs+2,w
 10849  03C1  0021               	movlb	1	; select bank1
 10850  03C2  00BB               	movwf	(_atan2$2612+2)^(0+128)
 10851  03C3  0833               	movf	atan2@y^(0+128),w
 10852  03C4  0020               	movlb	0	; select bank0
 10853  03C5  00C4               	movwf	fabs@d
 10854  03C6  0021               	movlb	1	; select bank1
 10855  03C7  0834               	movf	(atan2@y+1)^(0+128),w
 10856  03C8  0020               	movlb	0	; select bank0
 10857  03C9  00C5               	movwf	fabs@d+1
 10858  03CA  0021               	movlb	1	; select bank1
 10859  03CB  0835               	movf	(atan2@y+2)^(0+128),w
 10860  03CC  0020               	movlb	0	; select bank0
 10861  03CD  00C6               	movwf	fabs@d+2
 10862  03CE  3191  21C5  3183   	fcall	_fabs
 10863  03D1  0020               	movlb	0	; select bank0
 10864  03D2  0844               	movf	?_fabs,w
 10865  03D3  0021               	movlb	1	; select bank1
 10866  03D4  00BC               	movwf	_atan2$2613^(0+128)
 10867  03D5  0020               	movlb	0	; select bank0
 10868  03D6  0845               	movf	?_fabs+1,w
 10869  03D7  0021               	movlb	1	; select bank1
 10870  03D8  00BD               	movwf	(_atan2$2613+1)^(0+128)
 10871  03D9  0020               	movlb	0	; select bank0
 10872  03DA  0846               	movf	?_fabs+2,w
 10873  03DB  0021               	movlb	1	; select bank1
 10874  03DC  00BE               	movwf	(_atan2$2613+2)^(0+128)
 10875  03DD  0839               	movf	_atan2$2612^(0+128),w
 10876  03DE  0020               	movlb	0	; select bank0
 10877  03DF  00A1               	movwf	___ftge@ff1
 10878  03E0  0021               	movlb	1	; select bank1
 10879  03E1  083A               	movf	(_atan2$2612+1)^(0+128),w
 10880  03E2  0020               	movlb	0	; select bank0
 10881  03E3  00A2               	movwf	___ftge@ff1+1
 10882  03E4  0021               	movlb	1	; select bank1
 10883  03E5  083B               	movf	(_atan2$2612+2)^(0+128),w
 10884  03E6  0020               	movlb	0	; select bank0
 10885  03E7  00A3               	movwf	___ftge@ff1+2
 10886  03E8  0021               	movlb	1	; select bank1
 10887  03E9  083C               	movf	_atan2$2613^(0+128),w
 10888  03EA  0020               	movlb	0	; select bank0
 10889  03EB  00A4               	movwf	___ftge@ff2
 10890  03EC  0021               	movlb	1	; select bank1
 10891  03ED  083D               	movf	(_atan2$2613+1)^(0+128),w
 10892  03EE  0020               	movlb	0	; select bank0
 10893  03EF  00A5               	movwf	___ftge@ff2+1
 10894  03F0  0021               	movlb	1	; select bank1
 10895  03F1  083E               	movf	(_atan2$2613+2)^(0+128),w
 10896  03F2  0020               	movlb	0	; select bank0
 10897  03F3  00A6               	movwf	___ftge@ff2+2
 10898  03F4  3192  22D1  3183   	fcall	___ftge
 10899  03F7  1C03               	btfss	3,0
 10900  03F8  2CA7               	goto	l6284
 10901  03F9  0021               	movlb	1	; select bank1
 10902  03FA  0836               	movf	atan2@x^(0+128),w
 10903  03FB  0020               	movlb	0	; select bank0
 10904  03FC  00B1               	movwf	___ftdiv@f2
 10905  03FD  0021               	movlb	1	; select bank1
 10906  03FE  0837               	movf	(atan2@x+1)^(0+128),w
 10907  03FF  0020               	movlb	0	; select bank0
 10908  0400  00B2               	movwf	___ftdiv@f2+1
 10909  0401  0021               	movlb	1	; select bank1
 10910  0402  0838               	movf	(atan2@x+2)^(0+128),w
 10911  0403  0020               	movlb	0	; select bank0
 10912  0404  00B3               	movwf	___ftdiv@f2+2
 10913  0405  0021               	movlb	1	; select bank1
 10914  0406  0833               	movf	atan2@y^(0+128),w
 10915  0407  0020               	movlb	0	; select bank0
 10916  0408  00B4               	movwf	___ftdiv@f1
 10917  0409  0021               	movlb	1	; select bank1
 10918  040A  0834               	movf	(atan2@y+1)^(0+128),w
 10919  040B  0020               	movlb	0	; select bank0
 10920  040C  00B5               	movwf	___ftdiv@f1+1
 10921  040D  0021               	movlb	1	; select bank1
 10922  040E  0835               	movf	(atan2@y+2)^(0+128),w
 10923  040F  0020               	movlb	0	; select bank0
 10924  0410  00B6               	movwf	___ftdiv@f1+2
 10925  0411  318A  22EC  3183   	fcall	___ftdiv
 10926  0414  0020               	movlb	0	; select bank0
 10927  0415  0831               	movf	?___ftdiv,w
 10928  0416  0021               	movlb	1	; select bank1
 10929  0417  00C2               	movwf	_atan2$2614^(0+128)
 10930  0418  0020               	movlb	0	; select bank0
 10931  0419  0832               	movf	?___ftdiv+1,w
 10932  041A  0021               	movlb	1	; select bank1
 10933  041B  00C3               	movwf	(_atan2$2614+1)^(0+128)
 10934  041C  0020               	movlb	0	; select bank0
 10935  041D  0833               	movf	?___ftdiv+2,w
 10936  041E  0021               	movlb	1	; select bank1
 10937  041F  00C4               	movwf	(_atan2$2614+2)^(0+128)
 10938  0420  0842               	movf	_atan2$2614^(0+128),w
 10939  0421  00A3               	movwf	atan@f^(0+128)
 10940  0422  0843               	movf	(_atan2$2614+1)^(0+128),w
 10941  0423  00A4               	movwf	(atan@f+1)^(0+128)
 10942  0424  0844               	movf	(_atan2$2614+2)^(0+128),w
 10943  0425  00A5               	movwf	(atan@f+2)^(0+128)
 10944  0426  318E  2688  3183   	fcall	_atan
 10945  0429  0021               	movlb	1	; select bank1
 10946  042A  0823               	movf	?_atan^(0+128),w
 10947  042B  00C5               	movwf	atan2@v^(0+128)
 10948  042C  0824               	movf	(?_atan+1)^(0+128),w
 10949  042D  00C6               	movwf	(atan2@v+1)^(0+128)
 10950  042E  0825               	movf	(?_atan+2)^(0+128),w
 10951  042F  00C7               	movwf	(atan2@v+2)^(0+128)
 10952  0430  0836               	movf	atan2@x^(0+128),w
 10953  0431  0020               	movlb	0	; select bank0
 10954  0432  00A1               	movwf	___ftge@ff1
 10955  0433  0021               	movlb	1	; select bank1
 10956  0434  0837               	movf	(atan2@x+1)^(0+128),w
 10957  0435  0020               	movlb	0	; select bank0
 10958  0436  00A2               	movwf	___ftge@ff1+1
 10959  0437  0021               	movlb	1	; select bank1
 10960  0438  0838               	movf	(atan2@x+2)^(0+128),w
 10961  0439  0020               	movlb	0	; select bank0
 10962  043A  00A3               	movwf	___ftge@ff1+2
 10963  043B  3000               	movlw	0
 10964  043C  00A4               	movwf	___ftge@ff2
 10965  043D  3000               	movlw	0
 10966  043E  00A5               	movwf	___ftge@ff2+1
 10967  043F  3000               	movlw	0
 10968  0440  00A6               	movwf	___ftge@ff2+2
 10969  0441  3192  22D1  3183   	fcall	___ftge
 10970  0444  1803               	btfsc	3,0
 10971  0445  2C9F               	goto	l6280
 10972  0446  0021               	movlb	1	; select bank1
 10973  0447  0833               	movf	atan2@y^(0+128),w
 10974  0448  0020               	movlb	0	; select bank0
 10975  0449  00A1               	movwf	___ftge@ff1
 10976  044A  0021               	movlb	1	; select bank1
 10977  044B  0834               	movf	(atan2@y+1)^(0+128),w
 10978  044C  0020               	movlb	0	; select bank0
 10979  044D  00A2               	movwf	___ftge@ff1+1
 10980  044E  0021               	movlb	1	; select bank1
 10981  044F  0835               	movf	(atan2@y+2)^(0+128),w
 10982  0450  0020               	movlb	0	; select bank0
 10983  0451  00A3               	movwf	___ftge@ff1+2
 10984  0452  3000               	movlw	0
 10985  0453  00A4               	movwf	___ftge@ff2
 10986  0454  3000               	movlw	0
 10987  0455  00A5               	movwf	___ftge@ff2+1
 10988  0456  3000               	movlw	0
 10989  0457  00A6               	movwf	___ftge@ff2+2
 10990  0458  3192  22D1  3183   	fcall	___ftge
 10991  045B  1C03               	btfss	3,0
 10992  045C  2C7E               	goto	l6278
 10993  045D  3010               	movlw	16
 10994  045E  0020               	movlb	0	; select bank0
 10995  045F  00D9               	movwf	___ftadd@f1
 10996  0460  3049               	movlw	73
 10997  0461  00DA               	movwf	___ftadd@f1+1
 10998  0462  3040               	movlw	64
 10999  0463  00DB               	movwf	___ftadd@f1+2
 11000  0464  0021               	movlb	1	; select bank1
 11001  0465  0845               	movf	atan2@v^(0+128),w
 11002  0466  0020               	movlb	0	; select bank0
 11003  0467  00DC               	movwf	___ftadd@f2
 11004  0468  0021               	movlb	1	; select bank1
 11005  0469  0846               	movf	(atan2@v+1)^(0+128),w
 11006  046A  0020               	movlb	0	; select bank0
 11007  046B  00DD               	movwf	___ftadd@f2+1
 11008  046C  0021               	movlb	1	; select bank1
 11009  046D  0847               	movf	(atan2@v+2)^(0+128),w
 11010  046E  0020               	movlb	0	; select bank0
 11011  046F  00DE               	movwf	___ftadd@f2+2
 11012  0470  318C  2449  3183   	fcall	___ftadd
 11013  0473  0020               	movlb	0	; select bank0
 11014  0474  0859               	movf	?___ftadd,w
 11015  0475  0021               	movlb	1	; select bank1
 11016  0476  00C5               	movwf	atan2@v^(0+128)
 11017  0477  0020               	movlb	0	; select bank0
 11018  0478  085A               	movf	?___ftadd+1,w
 11019  0479  0021               	movlb	1	; select bank1
 11020  047A  00C6               	movwf	(atan2@v+1)^(0+128)
 11021  047B  0020               	movlb	0	; select bank0
 11022  047C  085B               	movf	?___ftadd+2,w
 11023  047D  2C9D               	goto	L1
 11024  047E                     l6278:	
 11025  047E  3010               	movlw	16
 11026  047F  0020               	movlb	0	; select bank0
 11027  0480  00E6               	movwf	___ftsub@f2
 11028  0481  3049               	movlw	73
 11029  0482  00E7               	movwf	___ftsub@f2+1
 11030  0483  3040               	movlw	64
 11031  0484  00E8               	movwf	___ftsub@f2+2
 11032  0485  0021               	movlb	1	; select bank1
 11033  0486  0845               	movf	atan2@v^(0+128),w
 11034  0487  0020               	movlb	0	; select bank0
 11035  0488  00E9               	movwf	___ftsub@f1
 11036  0489  0021               	movlb	1	; select bank1
 11037  048A  0846               	movf	(atan2@v+1)^(0+128),w
 11038  048B  0020               	movlb	0	; select bank0
 11039  048C  00EA               	movwf	___ftsub@f1+1
 11040  048D  0021               	movlb	1	; select bank1
 11041  048E  0847               	movf	(atan2@v+2)^(0+128),w
 11042  048F  0020               	movlb	0	; select bank0
 11043  0490  00EB               	movwf	___ftsub@f1+2
 11044  0491  3191  2100         	fcall	___ftsub
 11045  0493  0020               	movlb	0	; select bank0
 11046  0494  0866               	movf	?___ftsub,w
 11047  0495  0021               	movlb	1	; select bank1
 11048  0496  00C5               	movwf	atan2@v^(0+128)
 11049  0497  0020               	movlb	0	; select bank0
 11050  0498  0867               	movf	?___ftsub+1,w
 11051  0499  0021               	movlb	1	; select bank1
 11052  049A  00C6               	movwf	(atan2@v+1)^(0+128)
 11053  049B  0020               	movlb	0	; select bank0
 11054  049C  0868               	movf	?___ftsub+2,w
 11055  049D                     L1:	
 11056  049D  0021               	movlb	1	; select bank1
 11057  049E  00C7               	movwf	(atan2@v+2)^(0+128)
 11058  049F                     l6280:	
 11059  049F  0021               	movlb	1	; select bank1
 11060  04A0  0845               	movf	atan2@v^(0+128),w
 11061  04A1  00B3               	movwf	?_atan2^(0+128)
 11062  04A2  0846               	movf	(atan2@v+1)^(0+128),w
 11063  04A3  00B4               	movwf	(?_atan2+1)^(0+128)
 11064  04A4  0847               	movf	(atan2@v+2)^(0+128),w
 11065  04A5  00B5               	movwf	(?_atan2+2)^(0+128)
 11066  04A6  0008               	return
 11067  04A7                     l6284:	
 11068  04A7  0021               	movlb	1	; select bank1
 11069  04A8  0836               	movf	atan2@x^(0+128),w
 11070  04A9  0020               	movlb	0	; select bank0
 11071  04AA  00B4               	movwf	___ftdiv@f1
 11072  04AB  0021               	movlb	1	; select bank1
 11073  04AC  0837               	movf	(atan2@x+1)^(0+128),w
 11074  04AD  0020               	movlb	0	; select bank0
 11075  04AE  00B5               	movwf	___ftdiv@f1+1
 11076  04AF  0021               	movlb	1	; select bank1
 11077  04B0  0838               	movf	(atan2@x+2)^(0+128),w
 11078  04B1  0020               	movlb	0	; select bank0
 11079  04B2  00B6               	movwf	___ftdiv@f1+2
 11080  04B3  0021               	movlb	1	; select bank1
 11081  04B4  0833               	movf	atan2@y^(0+128),w
 11082  04B5  0020               	movlb	0	; select bank0
 11083  04B6  00B1               	movwf	___ftdiv@f2
 11084  04B7  0021               	movlb	1	; select bank1
 11085  04B8  0834               	movf	(atan2@y+1)^(0+128),w
 11086  04B9  0020               	movlb	0	; select bank0
 11087  04BA  00B2               	movwf	___ftdiv@f2+1
 11088  04BB  0021               	movlb	1	; select bank1
 11089  04BC  0835               	movf	(atan2@y+2)^(0+128),w
 11090  04BD  0020               	movlb	0	; select bank0
 11091  04BE  00B3               	movwf	___ftdiv@f2+2
 11092  04BF  318A  22EC  3183   	fcall	___ftdiv
 11093  04C2  0020               	movlb	0	; select bank0
 11094  04C3  0831               	movf	?___ftdiv,w
 11095  04C4  0021               	movlb	1	; select bank1
 11096  04C5  00C2               	movwf	_atan2$2614^(0+128)
 11097  04C6  0020               	movlb	0	; select bank0
 11098  04C7  0832               	movf	?___ftdiv+1,w
 11099  04C8  0021               	movlb	1	; select bank1
 11100  04C9  00C3               	movwf	(_atan2$2614+1)^(0+128)
 11101  04CA  0020               	movlb	0	; select bank0
 11102  04CB  0833               	movf	?___ftdiv+2,w
 11103  04CC  0021               	movlb	1	; select bank1
 11104  04CD  00C4               	movwf	(_atan2$2614+2)^(0+128)
 11105  04CE  0842               	movf	_atan2$2614^(0+128),w
 11106  04CF  00A3               	movwf	atan@f^(0+128)
 11107  04D0  0843               	movf	(_atan2$2614+1)^(0+128),w
 11108  04D1  00A4               	movwf	(atan@f+1)^(0+128)
 11109  04D2  0844               	movf	(_atan2$2614+2)^(0+128),w
 11110  04D3  00A5               	movwf	(atan@f+2)^(0+128)
 11111  04D4  318E  2688  3183   	fcall	_atan
 11112  04D7  0021               	movlb	1	; select bank1
 11113  04D8  0823               	movf	?_atan^(0+128),w
 11114  04D9  00BF               	movwf	_atan2$2615^(0+128)
 11115  04DA  0824               	movf	(?_atan+1)^(0+128),w
 11116  04DB  00C0               	movwf	(_atan2$2615+1)^(0+128)
 11117  04DC  0825               	movf	(?_atan+2)^(0+128),w
 11118  04DD  00C1               	movwf	(_atan2$2615+2)^(0+128)
 11119  04DE  083F               	movf	_atan2$2615^(0+128),w
 11120  04DF  0020               	movlb	0	; select bank0
 11121  04E0  00C1               	movwf	___ftneg@f1
 11122  04E1  0021               	movlb	1	; select bank1
 11123  04E2  0840               	movf	(_atan2$2615+1)^(0+128),w
 11124  04E3  0020               	movlb	0	; select bank0
 11125  04E4  00C2               	movwf	___ftneg@f1+1
 11126  04E5  0021               	movlb	1	; select bank1
 11127  04E6  0841               	movf	(_atan2$2615+2)^(0+128),w
 11128  04E7  0020               	movlb	0	; select bank0
 11129  04E8  00C3               	movwf	___ftneg@f1+2
 11130  04E9  319D  25E5  3183   	fcall	___ftneg
 11131  04EC  0020               	movlb	0	; select bank0
 11132  04ED  0841               	movf	?___ftneg,w
 11133  04EE  0021               	movlb	1	; select bank1
 11134  04EF  00C5               	movwf	atan2@v^(0+128)
 11135  04F0  0020               	movlb	0	; select bank0
 11136  04F1  0842               	movf	?___ftneg+1,w
 11137  04F2  0021               	movlb	1	; select bank1
 11138  04F3  00C6               	movwf	(atan2@v+1)^(0+128)
 11139  04F4  0020               	movlb	0	; select bank0
 11140  04F5  0843               	movf	?___ftneg+2,w
 11141  04F6  0021               	movlb	1	; select bank1
 11142  04F7  00C7               	movwf	(atan2@v+2)^(0+128)
 11143  04F8  0833               	movf	atan2@y^(0+128),w
 11144  04F9  0020               	movlb	0	; select bank0
 11145  04FA  00A1               	movwf	___ftge@ff1
 11146  04FB  0021               	movlb	1	; select bank1
 11147  04FC  0834               	movf	(atan2@y+1)^(0+128),w
 11148  04FD  0020               	movlb	0	; select bank0
 11149  04FE  00A2               	movwf	___ftge@ff1+1
 11150  04FF  0021               	movlb	1	; select bank1
 11151  0500  0835               	movf	(atan2@y+2)^(0+128),w
 11152  0501  0020               	movlb	0	; select bank0
 11153  0502  00A3               	movwf	___ftge@ff1+2
 11154  0503  3000               	movlw	0
 11155  0504  00A4               	movwf	___ftge@ff2
 11156  0505  3000               	movlw	0
 11157  0506  00A5               	movwf	___ftge@ff2+1
 11158  0507  3000               	movlw	0
 11159  0508  00A6               	movwf	___ftge@ff2+2
 11160  0509  3192  22D1  3183   	fcall	___ftge
 11161  050C  1803               	btfsc	3,0
 11162  050D  2D2F               	goto	l6294
 11163  050E  3010               	movlw	16
 11164  050F  0020               	movlb	0	; select bank0
 11165  0510  00E6               	movwf	___ftsub@f2
 11166  0511  30C9               	movlw	201
 11167  0512  00E7               	movwf	___ftsub@f2+1
 11168  0513  303F               	movlw	63
 11169  0514  00E8               	movwf	___ftsub@f2+2
 11170  0515  0021               	movlb	1	; select bank1
 11171  0516  0845               	movf	atan2@v^(0+128),w
 11172  0517  0020               	movlb	0	; select bank0
 11173  0518  00E9               	movwf	___ftsub@f1
 11174  0519  0021               	movlb	1	; select bank1
 11175  051A  0846               	movf	(atan2@v+1)^(0+128),w
 11176  051B  0020               	movlb	0	; select bank0
 11177  051C  00EA               	movwf	___ftsub@f1+1
 11178  051D  0021               	movlb	1	; select bank1
 11179  051E  0847               	movf	(atan2@v+2)^(0+128),w
 11180  051F  0020               	movlb	0	; select bank0
 11181  0520  00EB               	movwf	___ftsub@f1+2
 11182  0521  3191  2100  3183   	fcall	___ftsub
 11183  0524  0020               	movlb	0	; select bank0
 11184  0525  0866               	movf	?___ftsub,w
 11185  0526  0021               	movlb	1	; select bank1
 11186  0527  00C5               	movwf	atan2@v^(0+128)
 11187  0528  0020               	movlb	0	; select bank0
 11188  0529  0867               	movf	?___ftsub+1,w
 11189  052A  0021               	movlb	1	; select bank1
 11190  052B  00C6               	movwf	(atan2@v+1)^(0+128)
 11191  052C  0020               	movlb	0	; select bank0
 11192  052D  0868               	movf	?___ftsub+2,w
 11193  052E  2D4E               	goto	L2
 11194  052F                     l6294:	
 11195  052F  3010               	movlw	16
 11196  0530  0020               	movlb	0	; select bank0
 11197  0531  00D9               	movwf	___ftadd@f1
 11198  0532  30C9               	movlw	201
 11199  0533  00DA               	movwf	___ftadd@f1+1
 11200  0534  303F               	movlw	63
 11201  0535  00DB               	movwf	___ftadd@f1+2
 11202  0536  0021               	movlb	1	; select bank1
 11203  0537  0845               	movf	atan2@v^(0+128),w
 11204  0538  0020               	movlb	0	; select bank0
 11205  0539  00DC               	movwf	___ftadd@f2
 11206  053A  0021               	movlb	1	; select bank1
 11207  053B  0846               	movf	(atan2@v+1)^(0+128),w
 11208  053C  0020               	movlb	0	; select bank0
 11209  053D  00DD               	movwf	___ftadd@f2+1
 11210  053E  0021               	movlb	1	; select bank1
 11211  053F  0847               	movf	(atan2@v+2)^(0+128),w
 11212  0540  0020               	movlb	0	; select bank0
 11213  0541  00DE               	movwf	___ftadd@f2+2
 11214  0542  318C  2449         	fcall	___ftadd
 11215  0544  0020               	movlb	0	; select bank0
 11216  0545  0859               	movf	?___ftadd,w
 11217  0546  0021               	movlb	1	; select bank1
 11218  0547  00C5               	movwf	atan2@v^(0+128)
 11219  0548  0020               	movlb	0	; select bank0
 11220  0549  085A               	movf	?___ftadd+1,w
 11221  054A  0021               	movlb	1	; select bank1
 11222  054B  00C6               	movwf	(atan2@v+1)^(0+128)
 11223  054C  0020               	movlb	0	; select bank0
 11224  054D  085B               	movf	?___ftadd+2,w
 11225  054E                     L2:	
 11226  054E  0021               	movlb	1	; select bank1
 11227  054F  00C7               	movwf	(atan2@v+2)^(0+128)
 11228  0550  0845               	movf	atan2@v^(0+128),w
 11229  0551  00B3               	movwf	?_atan2^(0+128)
 11230  0552  0846               	movf	(atan2@v+1)^(0+128),w
 11231  0553  00B4               	movwf	(?_atan2+1)^(0+128)
 11232  0554  0847               	movf	(atan2@v+2)^(0+128),w
 11233  0555  00B5               	movwf	(?_atan2+2)^(0+128)
 11234  0556  0008               	return
 11235  0557                     __end_of_atan2:	
 11236                           
 11237                           	psect	text55
 11238  0E88                     __ptext55:	
 11239 ;; *************** function _atan *****************
 11240 ;; Defined at:
 11241 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\atan.c"
 11242 ;; Parameters:    Size  Location     Type
 11243 ;;  f               3    3[BANK1 ] int 
 11244 ;; Auto vars:     Size  Location     Type
 11245 ;;  val             3   16[BANK1 ] int 
 11246 ;;  val_squared     3   13[BANK1 ] int 
 11247 ;;  x               3    9[BANK1 ] int 
 11248 ;;  y               3    6[BANK1 ] int 
 11249 ;;  recip           1   12[BANK1 ] unsigned char 
 11250 ;; Return value:  Size  Location     Type
 11251 ;;                  3    3[BANK1 ] unsigned char 
 11252 ;; Registers used:
 11253 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
 11254 ;; Tracked objects:
 11255 ;;		On entry : 0/0
 11256 ;;		On exit  : 0/0
 11257 ;;		Unchanged: 0/0
 11258 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11259 ;;      Params:         0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0
 11260 ;;      Locals:         0       0      13       0       0       0       0       0       0       0       0       0       
      +0       0
 11261 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11262 ;;      Totals:         0       1      16       0       0       0       0       0       0       0       0       0       
      +0       0
 11263 ;;Total ram usage:       17 bytes
 11264 ;; Hardware stack levels used:    1
 11265 ;; Hardware stack levels required when called:    7
 11266 ;; This function calls:
 11267 ;;		___ftadd
 11268 ;;		___ftdiv
 11269 ;;		___ftge
 11270 ;;		___ftmul
 11271 ;;		___ftneg
 11272 ;;		_eval_poly
 11273 ;;		_fabs
 11274 ;; This function is called by:
 11275 ;;		_atan2
 11276 ;; This function uses a non-reentrant model
 11277 ;;
 11278                           
 11279                           
 11280                           ;psect for function _atan
 11281  0E88                     _atan:	
 11282                           
 11283                           ;incstack = 0
 11284                           ; Regs used in _atan: [wreg-fsr0h+status,2+status,0+pclath+cstack]
 11285  0E88  0021               	movlb	1	; select bank1
 11286  0E89  0823               	movf	atan@f^(0+128),w
 11287  0E8A  0020               	movlb	0	; select bank0
 11288  0E8B  00C4               	movwf	fabs@d
 11289  0E8C  0021               	movlb	1	; select bank1
 11290  0E8D  0824               	movf	(atan@f+1)^(0+128),w
 11291  0E8E  0020               	movlb	0	; select bank0
 11292  0E8F  00C5               	movwf	fabs@d+1
 11293  0E90  0021               	movlb	1	; select bank1
 11294  0E91  0825               	movf	(atan@f+2)^(0+128),w
 11295  0E92  0020               	movlb	0	; select bank0
 11296  0E93  00C6               	movwf	fabs@d+2
 11297  0E94  3191  21C5  318E   	fcall	_fabs
 11298  0E97  0020               	movlb	0	; select bank0
 11299  0E98  0844               	movf	?_fabs,w
 11300  0E99  0021               	movlb	1	; select bank1
 11301  0E9A  00B0               	movwf	atan@val^(0+128)
 11302  0E9B  0020               	movlb	0	; select bank0
 11303  0E9C  0845               	movf	?_fabs+1,w
 11304  0E9D  0021               	movlb	1	; select bank1
 11305  0E9E  00B1               	movwf	(atan@val+1)^(0+128)
 11306  0E9F  0020               	movlb	0	; select bank0
 11307  0EA0  0846               	movf	?_fabs+2,w
 11308  0EA1  0021               	movlb	1	; select bank1
 11309  0EA2  00B2               	movwf	(atan@val+2)^(0+128)
 11310  0EA3  0832               	movf	(atan@val+2)^(0+128),w
 11311  0EA4  0431               	iorwf	(atan@val+1)^(0+128),w
 11312  0EA5  0430               	iorwf	atan@val^(0+128),w
 11313  0EA6  1D03               	skipz
 11314  0EA7  2EAF               	goto	l6106
 11315  0EA8  3000               	movlw	0
 11316  0EA9  00A3               	movwf	?_atan^(0+128)
 11317  0EAA  3000               	movlw	0
 11318  0EAB  00A4               	movwf	(?_atan+1)^(0+128)
 11319  0EAC  3000               	movlw	0
 11320  0EAD  00A5               	movwf	(?_atan+2)^(0+128)
 11321  0EAE  0008               	return
 11322  0EAF                     l6106:	
 11323  0EAF  3000               	movlw	0
 11324  0EB0  0020               	movlb	0	; select bank0
 11325  0EB1  00A1               	movwf	___ftge@ff1
 11326  0EB2  3080               	movlw	128
 11327  0EB3  00A2               	movwf	___ftge@ff1+1
 11328  0EB4  303F               	movlw	63
 11329  0EB5  00A3               	movwf	___ftge@ff1+2
 11330  0EB6  0021               	movlb	1	; select bank1
 11331  0EB7  0830               	movf	atan@val^(0+128),w
 11332  0EB8  0020               	movlb	0	; select bank0
 11333  0EB9  00A4               	movwf	___ftge@ff2
 11334  0EBA  0021               	movlb	1	; select bank1
 11335  0EBB  0831               	movf	(atan@val+1)^(0+128),w
 11336  0EBC  0020               	movlb	0	; select bank0
 11337  0EBD  00A5               	movwf	___ftge@ff2+1
 11338  0EBE  0021               	movlb	1	; select bank1
 11339  0EBF  0832               	movf	(atan@val+2)^(0+128),w
 11340  0EC0  0020               	movlb	0	; select bank0
 11341  0EC1  00A6               	movwf	___ftge@ff2+2
 11342  0EC2  3192  22D1  318E   	fcall	___ftge
 11343  0EC5  1803               	btfsc	3,0
 11344  0EC6  2EC9               	goto	u6080
 11345  0EC7  3001               	movlw	1
 11346  0EC8  2ECA               	goto	u6090
 11347  0EC9                     u6080:	
 11348  0EC9  3000               	movlw	0
 11349  0ECA                     u6090:	
 11350  0ECA  0020               	movlb	0	; select bank0
 11351  0ECB  00ED               	movwf	??_atan
 11352  0ECC  086D               	movf	??_atan,w
 11353  0ECD  0021               	movlb	1	; select bank1
 11354  0ECE  00AC               	movwf	atan@recip^(0+128)
 11355  0ECF  082C               	movf	atan@recip^(0+128),w
 11356  0ED0  1903               	btfsc	3,2
 11357  0ED1  2EF2               	goto	l1711
 11358  0ED2  0830               	movf	atan@val^(0+128),w
 11359  0ED3  0020               	movlb	0	; select bank0
 11360  0ED4  00B1               	movwf	___ftdiv@f2
 11361  0ED5  0021               	movlb	1	; select bank1
 11362  0ED6  0831               	movf	(atan@val+1)^(0+128),w
 11363  0ED7  0020               	movlb	0	; select bank0
 11364  0ED8  00B2               	movwf	___ftdiv@f2+1
 11365  0ED9  0021               	movlb	1	; select bank1
 11366  0EDA  0832               	movf	(atan@val+2)^(0+128),w
 11367  0EDB  0020               	movlb	0	; select bank0
 11368  0EDC  00B3               	movwf	___ftdiv@f2+2
 11369  0EDD  3000               	movlw	0
 11370  0EDE  00B4               	movwf	___ftdiv@f1
 11371  0EDF  3080               	movlw	128
 11372  0EE0  00B5               	movwf	___ftdiv@f1+1
 11373  0EE1  303F               	movlw	63
 11374  0EE2  00B6               	movwf	___ftdiv@f1+2
 11375  0EE3  318A  22EC  318E   	fcall	___ftdiv
 11376  0EE6  0020               	movlb	0	; select bank0
 11377  0EE7  0831               	movf	?___ftdiv,w
 11378  0EE8  0021               	movlb	1	; select bank1
 11379  0EE9  00B0               	movwf	atan@val^(0+128)
 11380  0EEA  0020               	movlb	0	; select bank0
 11381  0EEB  0832               	movf	?___ftdiv+1,w
 11382  0EEC  0021               	movlb	1	; select bank1
 11383  0EED  00B1               	movwf	(atan@val+1)^(0+128)
 11384  0EEE  0020               	movlb	0	; select bank0
 11385  0EEF  0833               	movf	?___ftdiv+2,w
 11386  0EF0  0021               	movlb	1	; select bank1
 11387  0EF1  00B2               	movwf	(atan@val+2)^(0+128)
 11388  0EF2                     l1711:	
 11389  0EF2  0830               	movf	atan@val^(0+128),w
 11390  0EF3  0020               	movlb	0	; select bank0
 11391  0EF4  00C9               	movwf	___ftmul@f1
 11392  0EF5  0021               	movlb	1	; select bank1
 11393  0EF6  0831               	movf	(atan@val+1)^(0+128),w
 11394  0EF7  0020               	movlb	0	; select bank0
 11395  0EF8  00CA               	movwf	___ftmul@f1+1
 11396  0EF9  0021               	movlb	1	; select bank1
 11397  0EFA  0832               	movf	(atan@val+2)^(0+128),w
 11398  0EFB  0020               	movlb	0	; select bank0
 11399  0EFC  00CB               	movwf	___ftmul@f1+2
 11400  0EFD  0021               	movlb	1	; select bank1
 11401  0EFE  0830               	movf	atan@val^(0+128),w
 11402  0EFF  0020               	movlb	0	; select bank0
 11403  0F00  00CC               	movwf	___ftmul@f2
 11404  0F01  0021               	movlb	1	; select bank1
 11405  0F02  0831               	movf	(atan@val+1)^(0+128),w
 11406  0F03  0020               	movlb	0	; select bank0
 11407  0F04  00CD               	movwf	___ftmul@f2+1
 11408  0F05  0021               	movlb	1	; select bank1
 11409  0F06  0832               	movf	(atan@val+2)^(0+128),w
 11410  0F07  0020               	movlb	0	; select bank0
 11411  0F08  00CE               	movwf	___ftmul@f2+2
 11412  0F09  318B  2395  318E   	fcall	___ftmul
 11413  0F0C  0020               	movlb	0	; select bank0
 11414  0F0D  0849               	movf	?___ftmul,w
 11415  0F0E  0021               	movlb	1	; select bank1
 11416  0F0F  00AD               	movwf	atan@val_squared^(0+128)
 11417  0F10  0020               	movlb	0	; select bank0
 11418  0F11  084A               	movf	?___ftmul+1,w
 11419  0F12  0021               	movlb	1	; select bank1
 11420  0F13  00AE               	movwf	(atan@val_squared+1)^(0+128)
 11421  0F14  0020               	movlb	0	; select bank0
 11422  0F15  084B               	movf	?___ftmul+2,w
 11423  0F16  0021               	movlb	1	; select bank1
 11424  0F17  00AF               	movwf	(atan@val_squared+2)^(0+128)
 11425  0F18  082D               	movf	atan@val_squared^(0+128),w
 11426  0F19  0020               	movlb	0	; select bank0
 11427  0F1A  00E6               	movwf	eval_poly@x
 11428  0F1B  0021               	movlb	1	; select bank1
 11429  0F1C  082E               	movf	(atan@val_squared+1)^(0+128),w
 11430  0F1D  0020               	movlb	0	; select bank0
 11431  0F1E  00E7               	movwf	eval_poly@x+1
 11432  0F1F  0021               	movlb	1	; select bank1
 11433  0F20  082F               	movf	(atan@val_squared+2)^(0+128),w
 11434  0F21  0020               	movlb	0	; select bank0
 11435  0F22  00E8               	movwf	eval_poly@x+2
 11436  0F23  302A               	movlw	low (atan@coeff_b| (0+32768))
 11437  0F24  00E9               	movwf	eval_poly@d
 11438  0F25  3098               	movlw	high (atan@coeff_b| (0+32768))
 11439  0F26  00EA               	movwf	eval_poly@d+1
 11440  0F27  3004               	movlw	4
 11441  0F28  00EB               	movwf	eval_poly@n
 11442  0F29  3000               	movlw	0
 11443  0F2A  00EC               	movwf	eval_poly@n+1
 11444  0F2B  3196  269B  318E   	fcall	_eval_poly
 11445  0F2E  0020               	movlb	0	; select bank0
 11446  0F2F  0866               	movf	?_eval_poly,w
 11447  0F30  0021               	movlb	1	; select bank1
 11448  0F31  00A6               	movwf	atan@y^(0+128)
 11449  0F32  0020               	movlb	0	; select bank0
 11450  0F33  0867               	movf	?_eval_poly+1,w
 11451  0F34  0021               	movlb	1	; select bank1
 11452  0F35  00A7               	movwf	(atan@y+1)^(0+128)
 11453  0F36  0020               	movlb	0	; select bank0
 11454  0F37  0868               	movf	?_eval_poly+2,w
 11455  0F38  0021               	movlb	1	; select bank1
 11456  0F39  00A8               	movwf	(atan@y+2)^(0+128)
 11457  0F3A  082D               	movf	atan@val_squared^(0+128),w
 11458  0F3B  0020               	movlb	0	; select bank0
 11459  0F3C  00E6               	movwf	eval_poly@x
 11460  0F3D  0021               	movlb	1	; select bank1
 11461  0F3E  082E               	movf	(atan@val_squared+1)^(0+128),w
 11462  0F3F  0020               	movlb	0	; select bank0
 11463  0F40  00E7               	movwf	eval_poly@x+1
 11464  0F41  0021               	movlb	1	; select bank1
 11465  0F42  082F               	movf	(atan@val_squared+2)^(0+128),w
 11466  0F43  0020               	movlb	0	; select bank0
 11467  0F44  00E8               	movwf	eval_poly@x+2
 11468  0F45  3018               	movlw	low (atan@coeff_a| (0+32768))
 11469  0F46  00E9               	movwf	eval_poly@d
 11470  0F47  3098               	movlw	high (atan@coeff_a| (0+32768))
 11471  0F48  00EA               	movwf	eval_poly@d+1
 11472  0F49  3005               	movlw	5
 11473  0F4A  00EB               	movwf	eval_poly@n
 11474  0F4B  3000               	movlw	0
 11475  0F4C  00EC               	movwf	eval_poly@n+1
 11476  0F4D  3196  269B  318E   	fcall	_eval_poly
 11477  0F50  0020               	movlb	0	; select bank0
 11478  0F51  0866               	movf	?_eval_poly,w
 11479  0F52  0021               	movlb	1	; select bank1
 11480  0F53  00A9               	movwf	atan@x^(0+128)
 11481  0F54  0020               	movlb	0	; select bank0
 11482  0F55  0867               	movf	?_eval_poly+1,w
 11483  0F56  0021               	movlb	1	; select bank1
 11484  0F57  00AA               	movwf	(atan@x+1)^(0+128)
 11485  0F58  0020               	movlb	0	; select bank0
 11486  0F59  0868               	movf	?_eval_poly+2,w
 11487  0F5A  0021               	movlb	1	; select bank1
 11488  0F5B  00AB               	movwf	(atan@x+2)^(0+128)
 11489  0F5C  0829               	movf	atan@x^(0+128),w
 11490  0F5D  0020               	movlb	0	; select bank0
 11491  0F5E  00B4               	movwf	___ftdiv@f1
 11492  0F5F  0021               	movlb	1	; select bank1
 11493  0F60  082A               	movf	(atan@x+1)^(0+128),w
 11494  0F61  0020               	movlb	0	; select bank0
 11495  0F62  00B5               	movwf	___ftdiv@f1+1
 11496  0F63  0021               	movlb	1	; select bank1
 11497  0F64  082B               	movf	(atan@x+2)^(0+128),w
 11498  0F65  0020               	movlb	0	; select bank0
 11499  0F66  00B6               	movwf	___ftdiv@f1+2
 11500  0F67  0021               	movlb	1	; select bank1
 11501  0F68  0826               	movf	atan@y^(0+128),w
 11502  0F69  0020               	movlb	0	; select bank0
 11503  0F6A  00B1               	movwf	___ftdiv@f2
 11504  0F6B  0021               	movlb	1	; select bank1
 11505  0F6C  0827               	movf	(atan@y+1)^(0+128),w
 11506  0F6D  0020               	movlb	0	; select bank0
 11507  0F6E  00B2               	movwf	___ftdiv@f2+1
 11508  0F6F  0021               	movlb	1	; select bank1
 11509  0F70  0828               	movf	(atan@y+2)^(0+128),w
 11510  0F71  0020               	movlb	0	; select bank0
 11511  0F72  00B3               	movwf	___ftdiv@f2+2
 11512  0F73  318A  22EC  318E   	fcall	___ftdiv
 11513  0F76  0020               	movlb	0	; select bank0
 11514  0F77  0831               	movf	?___ftdiv,w
 11515  0F78  00C9               	movwf	___ftmul@f1
 11516  0F79  0832               	movf	?___ftdiv+1,w
 11517  0F7A  00CA               	movwf	___ftmul@f1+1
 11518  0F7B  0833               	movf	?___ftdiv+2,w
 11519  0F7C  00CB               	movwf	___ftmul@f1+2
 11520  0F7D  0021               	movlb	1	; select bank1
 11521  0F7E  0830               	movf	atan@val^(0+128),w
 11522  0F7F  0020               	movlb	0	; select bank0
 11523  0F80  00CC               	movwf	___ftmul@f2
 11524  0F81  0021               	movlb	1	; select bank1
 11525  0F82  0831               	movf	(atan@val+1)^(0+128),w
 11526  0F83  0020               	movlb	0	; select bank0
 11527  0F84  00CD               	movwf	___ftmul@f2+1
 11528  0F85  0021               	movlb	1	; select bank1
 11529  0F86  0832               	movf	(atan@val+2)^(0+128),w
 11530  0F87  0020               	movlb	0	; select bank0
 11531  0F88  00CE               	movwf	___ftmul@f2+2
 11532  0F89  318B  2395  318E   	fcall	___ftmul
 11533  0F8C  0020               	movlb	0	; select bank0
 11534  0F8D  0849               	movf	?___ftmul,w
 11535  0F8E  0021               	movlb	1	; select bank1
 11536  0F8F  00B0               	movwf	atan@val^(0+128)
 11537  0F90  0020               	movlb	0	; select bank0
 11538  0F91  084A               	movf	?___ftmul+1,w
 11539  0F92  0021               	movlb	1	; select bank1
 11540  0F93  00B1               	movwf	(atan@val+1)^(0+128)
 11541  0F94  0020               	movlb	0	; select bank0
 11542  0F95  084B               	movf	?___ftmul+2,w
 11543  0F96  0021               	movlb	1	; select bank1
 11544  0F97  00B2               	movwf	(atan@val+2)^(0+128)
 11545  0F98  082C               	movf	atan@recip^(0+128),w
 11546  0F99  1903               	btfsc	3,2
 11547  0F9A  2FC7               	goto	l1712
 11548  0F9B  3010               	movlw	16
 11549  0F9C  0020               	movlb	0	; select bank0
 11550  0F9D  00D9               	movwf	___ftadd@f1
 11551  0F9E  30C9               	movlw	201
 11552  0F9F  00DA               	movwf	___ftadd@f1+1
 11553  0FA0  303F               	movlw	63
 11554  0FA1  00DB               	movwf	___ftadd@f1+2
 11555  0FA2  0021               	movlb	1	; select bank1
 11556  0FA3  0830               	movf	atan@val^(0+128),w
 11557  0FA4  0020               	movlb	0	; select bank0
 11558  0FA5  00C1               	movwf	___ftneg@f1
 11559  0FA6  0021               	movlb	1	; select bank1
 11560  0FA7  0831               	movf	(atan@val+1)^(0+128),w
 11561  0FA8  0020               	movlb	0	; select bank0
 11562  0FA9  00C2               	movwf	___ftneg@f1+1
 11563  0FAA  0021               	movlb	1	; select bank1
 11564  0FAB  0832               	movf	(atan@val+2)^(0+128),w
 11565  0FAC  0020               	movlb	0	; select bank0
 11566  0FAD  00C3               	movwf	___ftneg@f1+2
 11567  0FAE  319D  25E5  318E   	fcall	___ftneg
 11568  0FB1  0020               	movlb	0	; select bank0
 11569  0FB2  0841               	movf	?___ftneg,w
 11570  0FB3  00DC               	movwf	___ftadd@f2
 11571  0FB4  0842               	movf	?___ftneg+1,w
 11572  0FB5  00DD               	movwf	___ftadd@f2+1
 11573  0FB6  0843               	movf	?___ftneg+2,w
 11574  0FB7  00DE               	movwf	___ftadd@f2+2
 11575  0FB8  318C  2449  318E   	fcall	___ftadd
 11576  0FBB  0020               	movlb	0	; select bank0
 11577  0FBC  0859               	movf	?___ftadd,w
 11578  0FBD  0021               	movlb	1	; select bank1
 11579  0FBE  00B0               	movwf	atan@val^(0+128)
 11580  0FBF  0020               	movlb	0	; select bank0
 11581  0FC0  085A               	movf	?___ftadd+1,w
 11582  0FC1  0021               	movlb	1	; select bank1
 11583  0FC2  00B1               	movwf	(atan@val+1)^(0+128)
 11584  0FC3  0020               	movlb	0	; select bank0
 11585  0FC4  085B               	movf	?___ftadd+2,w
 11586  0FC5  0021               	movlb	1	; select bank1
 11587  0FC6  00B2               	movwf	(atan@val+2)^(0+128)
 11588  0FC7                     l1712:	
 11589  0FC7  0823               	movf	atan@f^(0+128),w
 11590  0FC8  0020               	movlb	0	; select bank0
 11591  0FC9  00A1               	movwf	___ftge@ff1
 11592  0FCA  0021               	movlb	1	; select bank1
 11593  0FCB  0824               	movf	(atan@f+1)^(0+128),w
 11594  0FCC  0020               	movlb	0	; select bank0
 11595  0FCD  00A2               	movwf	___ftge@ff1+1
 11596  0FCE  0021               	movlb	1	; select bank1
 11597  0FCF  0825               	movf	(atan@f+2)^(0+128),w
 11598  0FD0  0020               	movlb	0	; select bank0
 11599  0FD1  00A3               	movwf	___ftge@ff1+2
 11600  0FD2  3000               	movlw	0
 11601  0FD3  00A4               	movwf	___ftge@ff2
 11602  0FD4  3000               	movlw	0
 11603  0FD5  00A5               	movwf	___ftge@ff2+1
 11604  0FD6  3000               	movlw	0
 11605  0FD7  00A6               	movwf	___ftge@ff2+2
 11606  0FD8  3192  22D1  318E   	fcall	___ftge
 11607  0FDB  1C03               	btfss	3,0
 11608  0FDC  2FE5               	goto	l6120
 11609  0FDD  0021               	movlb	1	; select bank1
 11610  0FDE  0830               	movf	atan@val^(0+128),w
 11611  0FDF  00A3               	movwf	?_atan^(0+128)
 11612  0FE0  0831               	movf	(atan@val+1)^(0+128),w
 11613  0FE1  00A4               	movwf	(?_atan+1)^(0+128)
 11614  0FE2  0832               	movf	(atan@val+2)^(0+128),w
 11615  0FE3  00A5               	movwf	(?_atan+2)^(0+128)
 11616  0FE4  0008               	return
 11617  0FE5                     l6120:	
 11618  0FE5  0021               	movlb	1	; select bank1
 11619  0FE6  0830               	movf	atan@val^(0+128),w
 11620  0FE7  0020               	movlb	0	; select bank0
 11621  0FE8  00C1               	movwf	___ftneg@f1
 11622  0FE9  0021               	movlb	1	; select bank1
 11623  0FEA  0831               	movf	(atan@val+1)^(0+128),w
 11624  0FEB  0020               	movlb	0	; select bank0
 11625  0FEC  00C2               	movwf	___ftneg@f1+1
 11626  0FED  0021               	movlb	1	; select bank1
 11627  0FEE  0832               	movf	(atan@val+2)^(0+128),w
 11628  0FEF  0020               	movlb	0	; select bank0
 11629  0FF0  00C3               	movwf	___ftneg@f1+2
 11630  0FF1  319D  25E5         	fcall	___ftneg
 11631  0FF3  0020               	movlb	0	; select bank0
 11632  0FF4  0841               	movf	?___ftneg,w
 11633  0FF5  0021               	movlb	1	; select bank1
 11634  0FF6  00A3               	movwf	?_atan^(0+128)
 11635  0FF7  0020               	movlb	0	; select bank0
 11636  0FF8  0842               	movf	?___ftneg+1,w
 11637  0FF9  0021               	movlb	1	; select bank1
 11638  0FFA  00A4               	movwf	(?_atan+1)^(0+128)
 11639  0FFB  0020               	movlb	0	; select bank0
 11640  0FFC  0843               	movf	?___ftneg+2,w
 11641  0FFD  0021               	movlb	1	; select bank1
 11642  0FFE  00A5               	movwf	(?_atan+2)^(0+128)
 11643  0FFF  0008               	return
 11644  1000                     __end_of_atan:	
 11645                           
 11646                           	psect	text56
 11647  11C5                     __ptext56:	
 11648 ;; *************** function _fabs *****************
 11649 ;; Defined at:
 11650 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\fabs.c"
 11651 ;; Parameters:    Size  Location     Type
 11652 ;;  d               3   36[BANK0 ] unsigned char 
 11653 ;; Auto vars:     Size  Location     Type
 11654 ;;		None
 11655 ;; Return value:  Size  Location     Type
 11656 ;;                  3   36[BANK0 ] unsigned char 
 11657 ;; Registers used:
 11658 ;;		wreg, status,2, status,0, pclath, cstack
 11659 ;; Tracked objects:
 11660 ;;		On entry : 0/0
 11661 ;;		On exit  : 0/0
 11662 ;;		Unchanged: 0/0
 11663 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11664 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11665 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11666 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11667 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11668 ;;Total ram usage:        3 bytes
 11669 ;; Hardware stack levels used:    1
 11670 ;; Hardware stack levels required when called:    5
 11671 ;; This function calls:
 11672 ;;		___ftge
 11673 ;;		___ftneg
 11674 ;; This function is called by:
 11675 ;;		_atan2
 11676 ;;		_atan
 11677 ;; This function uses a non-reentrant model
 11678 ;;
 11679                           
 11680                           
 11681                           ;psect for function _fabs
 11682  11C5                     _fabs:	
 11683                           
 11684                           ;incstack = 0
 11685                           ; Regs used in _fabs: [wreg+status,2+status,0+pclath+cstack]
 11686  11C5  0020               	movlb	0	; select bank0
 11687  11C6  0844               	movf	fabs@d,w
 11688  11C7  00A1               	movwf	___ftge@ff1
 11689  11C8  0845               	movf	fabs@d+1,w
 11690  11C9  00A2               	movwf	___ftge@ff1+1
 11691  11CA  0846               	movf	fabs@d+2,w
 11692  11CB  00A3               	movwf	___ftge@ff1+2
 11693  11CC  3000               	movlw	0
 11694  11CD  00A4               	movwf	___ftge@ff2
 11695  11CE  3000               	movlw	0
 11696  11CF  00A5               	movwf	___ftge@ff2+1
 11697  11D0  3000               	movlw	0
 11698  11D1  00A6               	movwf	___ftge@ff2+2
 11699  11D2  3192  22D1  3191   	fcall	___ftge
 11700  11D5  1803               	btfsc	3,0
 11701  11D6  0008               	return
 11702  11D7  0020               	movlb	0	; select bank0
 11703  11D8  0844               	movf	fabs@d,w
 11704  11D9  00C1               	movwf	___ftneg@f1
 11705  11DA  0845               	movf	fabs@d+1,w
 11706  11DB  00C2               	movwf	___ftneg@f1+1
 11707  11DC  0846               	movf	fabs@d+2,w
 11708  11DD  00C3               	movwf	___ftneg@f1+2
 11709  11DE  319D  25E5         	fcall	___ftneg
 11710  11E0  0020               	movlb	0	; select bank0
 11711  11E1  0841               	movf	?___ftneg,w
 11712  11E2  00C4               	movwf	?_fabs
 11713  11E3  0842               	movf	?___ftneg+1,w
 11714  11E4  00C5               	movwf	?_fabs+1
 11715  11E5  0843               	movf	?___ftneg+2,w
 11716  11E6  00C6               	movwf	?_fabs+2
 11717  11E7  0008               	return
 11718  11E8                     __end_of_fabs:	
 11719                           
 11720                           	psect	text57
 11721  12D1                     __ptext57:	
 11722 ;; *************** function ___ftge *****************
 11723 ;; Defined at:
 11724 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\ftge.c"
 11725 ;; Parameters:    Size  Location     Type
 11726 ;;  ff1             3    1[BANK0 ] float 
 11727 ;;  ff2             3    4[BANK0 ] float 
 11728 ;; Auto vars:     Size  Location     Type
 11729 ;;		None
 11730 ;; Return value:  Size  Location     Type
 11731 ;;		None               void
 11732 ;; Registers used:
 11733 ;;		wreg, status,2, status,0
 11734 ;; Tracked objects:
 11735 ;;		On entry : 0/0
 11736 ;;		On exit  : 0/0
 11737 ;;		Unchanged: 0/0
 11738 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11739 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11740 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11741 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11742 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11743 ;;Total ram usage:        9 bytes
 11744 ;; Hardware stack levels used:    1
 11745 ;; Hardware stack levels required when called:    4
 11746 ;; This function calls:
 11747 ;;		Nothing
 11748 ;; This function is called by:
 11749 ;;		_atan2
 11750 ;;		_fabs
 11751 ;;		_atan
 11752 ;; This function uses a non-reentrant model
 11753 ;;
 11754                           
 11755                           
 11756                           ;psect for function ___ftge
 11757  12D1                     ___ftge:	
 11758                           
 11759                           ;incstack = 0
 11760                           ; Regs used in ___ftge: [wreg+status,2+status,0]
 11761  12D1  0020               	movlb	0	; select bank0
 11762  12D2  1FA3               	btfss	___ftge@ff1+2,7
 11763  12D3  2AE8               	goto	l5868
 11764  12D4  0921               	comf	___ftge@ff1,w
 11765  12D5  00A7               	movwf	??___ftge
 11766  12D6  0922               	comf	___ftge@ff1+1,w
 11767  12D7  00A8               	movwf	??___ftge+1
 11768  12D8  0923               	comf	___ftge@ff1+2,w
 11769  12D9  00A9               	movwf	??___ftge+2
 11770  12DA  0AA7               	incf	??___ftge,f
 11771  12DB  1903               	skipnz
 11772  12DC  0AA8               	incf	??___ftge+1,f
 11773  12DD  1903               	skipnz
 11774  12DE  0AA9               	incf	??___ftge+2,f
 11775  12DF  3000               	movlw	0
 11776  12E0  0727               	addwf	??___ftge,w
 11777  12E1  00A1               	movwf	___ftge@ff1
 11778  12E2  3000               	movlw	0
 11779  12E3  3D28               	addwfc	??___ftge+1,w
 11780  12E4  00A2               	movwf	___ftge@ff1+1
 11781  12E5  3080               	movlw	128
 11782  12E6  3D29               	addwfc	??___ftge+2,w
 11783  12E7  00A3               	movwf	___ftge@ff1+2
 11784  12E8                     l5868:	
 11785  12E8  1FA6               	btfss	___ftge@ff2+2,7
 11786  12E9  2AFE               	goto	l5872
 11787  12EA  0924               	comf	___ftge@ff2,w
 11788  12EB  00A7               	movwf	??___ftge
 11789  12EC  0925               	comf	___ftge@ff2+1,w
 11790  12ED  00A8               	movwf	??___ftge+1
 11791  12EE  0926               	comf	___ftge@ff2+2,w
 11792  12EF  00A9               	movwf	??___ftge+2
 11793  12F0  0AA7               	incf	??___ftge,f
 11794  12F1  1903               	skipnz
 11795  12F2  0AA8               	incf	??___ftge+1,f
 11796  12F3  1903               	skipnz
 11797  12F4  0AA9               	incf	??___ftge+2,f
 11798  12F5  3000               	movlw	0
 11799  12F6  0727               	addwf	??___ftge,w
 11800  12F7  00A4               	movwf	___ftge@ff2
 11801  12F8  3000               	movlw	0
 11802  12F9  3D28               	addwfc	??___ftge+1,w
 11803  12FA  00A5               	movwf	___ftge@ff2+1
 11804  12FB  3080               	movlw	128
 11805  12FC  3D29               	addwfc	??___ftge+2,w
 11806  12FD  00A6               	movwf	___ftge@ff2+2
 11807  12FE                     l5872:	
 11808  12FE  3080               	movlw	128
 11809  12FF  06A3               	xorwf	___ftge@ff1+2,f
 11810  1300  3080               	movlw	128
 11811  1301  06A6               	xorwf	___ftge@ff2+2,f
 11812  1302  0826               	movf	___ftge@ff2+2,w
 11813  1303  0223               	subwf	___ftge@ff1+2,w
 11814  1304  1D03               	skipz
 11815  1305  0008               	return
 11816  1306  0825               	movf	___ftge@ff2+1,w
 11817  1307  0222               	subwf	___ftge@ff1+1,w
 11818  1308  1D03               	skipz
 11819  1309  0008               	return
 11820  130A  0824               	movf	___ftge@ff2,w
 11821  130B  0221               	subwf	___ftge@ff1,w
 11822  130C  0008               	return
 11823  130D                     __end_of___ftge:	
 11824                           
 11825                           	psect	text58
 11826  169B                     __ptext58:	
 11827 ;; *************** function _eval_poly *****************
 11828 ;; Defined at:
 11829 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\evalpoly.c"
 11830 ;; Parameters:    Size  Location     Type
 11831 ;;  x               3   70[BANK0 ] float 
 11832 ;;  d               2   73[BANK0 ] PTR const 
 11833 ;;		 -> atan@coeff_a(18), atan@coeff_b(15), 
 11834 ;;  n               2   75[BANK0 ] int 
 11835 ;; Auto vars:     Size  Location     Type
 11836 ;;  res             3    0[BANK1 ] int 
 11837 ;; Return value:  Size  Location     Type
 11838 ;;                  3   70[BANK0 ] int 
 11839 ;; Registers used:
 11840 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
 11841 ;; Tracked objects:
 11842 ;;		On entry : 0/0
 11843 ;;		On exit  : 0/0
 11844 ;;		Unchanged: 0/0
 11845 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11846 ;;      Params:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11847 ;;      Locals:         0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0
 11848 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11849 ;;      Totals:         0       7       3       0       0       0       0       0       0       0       0       0       
      +0       0
 11850 ;;Total ram usage:       10 bytes
 11851 ;; Hardware stack levels used:    1
 11852 ;; Hardware stack levels required when called:    6
 11853 ;; This function calls:
 11854 ;;		___ftadd
 11855 ;;		___ftmul
 11856 ;;		___wmul
 11857 ;; This function is called by:
 11858 ;;		_atan
 11859 ;; This function uses a non-reentrant model
 11860 ;;
 11861                           
 11862                           
 11863                           ;psect for function _eval_poly
 11864  169B                     _eval_poly:	
 11865                           
 11866                           ;incstack = 0
 11867                           ; Regs used in _eval_poly: [wreg-fsr0h+status,2+status,0+pclath+cstack]
 11868  169B  0020               	movlb	0	; select bank0
 11869  169C  086C               	movf	eval_poly@n+1,w
 11870  169D  00A2               	movwf	___wmul@multiplier+1
 11871  169E  086B               	movf	eval_poly@n,w
 11872  169F  00A1               	movwf	___wmul@multiplier
 11873  16A0  3003               	movlw	3
 11874  16A1  00A3               	movwf	___wmul@multiplicand
 11875  16A2  3000               	movlw	0
 11876  16A3  00A4               	movwf	___wmul@multiplicand+1
 11877  16A4  3190  2070  3196   	fcall	___wmul
 11878  16A7  0020               	movlb	0	; select bank0
 11879  16A8  0869               	movf	eval_poly@d,w
 11880  16A9  0721               	addwf	?___wmul,w
 11881  16AA  0084               	movwf	4
 11882  16AB  086A               	movf	eval_poly@d+1,w
 11883  16AC  3D22               	addwfc	?___wmul+1,w
 11884  16AD  0085               	movwf	5
 11885  16AE  3F00               	moviw [0]fsr0
 11886  16AF  0021               	movlb	1	; select bank1
 11887  16B0  00A0               	movwf	eval_poly@res^(0+128)
 11888  16B1  3F01               	moviw [1]fsr0
 11889  16B2  00A1               	movwf	(eval_poly@res+1)^(0+128)
 11890  16B3  3F02               	moviw [2]fsr0
 11891  16B4                     L4:	
 11892  16B4  00A2               	movwf	(eval_poly@res+2)^(0+128)
 11893  16B5  0020               	movlb	0	; select bank0
 11894  16B6  086B               	movf	eval_poly@n,w
 11895  16B7  046C               	iorwf	eval_poly@n+1,w
 11896  16B8  1903               	btfsc	3,2
 11897  16B9  2F02               	goto	l6042
 11898  16BA  30FF               	movlw	255
 11899  16BB  0020               	movlb	0	; select bank0
 11900  16BC  07EB               	addwf	eval_poly@n,f
 11901  16BD  30FF               	movlw	255
 11902  16BE  3DEC               	addwfc	eval_poly@n+1,f
 11903  16BF  086C               	movf	eval_poly@n+1,w
 11904  16C0  00A2               	movwf	___wmul@multiplier+1
 11905  16C1  086B               	movf	eval_poly@n,w
 11906  16C2  00A1               	movwf	___wmul@multiplier
 11907  16C3  3003               	movlw	3
 11908  16C4  00A3               	movwf	___wmul@multiplicand
 11909  16C5  3000               	movlw	0
 11910  16C6  00A4               	movwf	___wmul@multiplicand+1
 11911  16C7  3190  2070  3196   	fcall	___wmul
 11912  16CA  0020               	movlb	0	; select bank0
 11913  16CB  0869               	movf	eval_poly@d,w
 11914  16CC  0721               	addwf	?___wmul,w
 11915  16CD  0084               	movwf	4
 11916  16CE  086A               	movf	eval_poly@d+1,w
 11917  16CF  3D22               	addwfc	?___wmul+1,w
 11918  16D0  0085               	movwf	5
 11919  16D1  3F00               	moviw [0]fsr0
 11920  16D2  00D9               	movwf	___ftadd@f1
 11921  16D3  3F01               	moviw [1]fsr0
 11922  16D4  00DA               	movwf	___ftadd@f1+1
 11923  16D5  3F02               	moviw [2]fsr0
 11924  16D6  00DB               	movwf	___ftadd@f1+2
 11925  16D7  0021               	movlb	1	; select bank1
 11926  16D8  0820               	movf	eval_poly@res^(0+128),w
 11927  16D9  0020               	movlb	0	; select bank0
 11928  16DA  00C9               	movwf	___ftmul@f1
 11929  16DB  0021               	movlb	1	; select bank1
 11930  16DC  0821               	movf	(eval_poly@res+1)^(0+128),w
 11931  16DD  0020               	movlb	0	; select bank0
 11932  16DE  00CA               	movwf	___ftmul@f1+1
 11933  16DF  0021               	movlb	1	; select bank1
 11934  16E0  0822               	movf	(eval_poly@res+2)^(0+128),w
 11935  16E1  0020               	movlb	0	; select bank0
 11936  16E2  00CB               	movwf	___ftmul@f1+2
 11937  16E3  0866               	movf	eval_poly@x,w
 11938  16E4  00CC               	movwf	___ftmul@f2
 11939  16E5  0867               	movf	eval_poly@x+1,w
 11940  16E6  00CD               	movwf	___ftmul@f2+1
 11941  16E7  0868               	movf	eval_poly@x+2,w
 11942  16E8  00CE               	movwf	___ftmul@f2+2
 11943  16E9  318B  2395  3196   	fcall	___ftmul
 11944  16EC  0020               	movlb	0	; select bank0
 11945  16ED  0849               	movf	?___ftmul,w
 11946  16EE  00DC               	movwf	___ftadd@f2
 11947  16EF  084A               	movf	?___ftmul+1,w
 11948  16F0  00DD               	movwf	___ftadd@f2+1
 11949  16F1  084B               	movf	?___ftmul+2,w
 11950  16F2  00DE               	movwf	___ftadd@f2+2
 11951  16F3  318C  2449  3196   	fcall	___ftadd
 11952  16F6  0020               	movlb	0	; select bank0
 11953  16F7  0859               	movf	?___ftadd,w
 11954  16F8  0021               	movlb	1	; select bank1
 11955  16F9  00A0               	movwf	eval_poly@res^(0+128)
 11956  16FA  0020               	movlb	0	; select bank0
 11957  16FB  085A               	movf	?___ftadd+1,w
 11958  16FC  0021               	movlb	1	; select bank1
 11959  16FD  00A1               	movwf	(eval_poly@res+1)^(0+128)
 11960  16FE  0020               	movlb	0	; select bank0
 11961  16FF  085B               	movf	?___ftadd+2,w
 11962  1700  0021               	movlb	1	; select bank1
 11963  1701  2EB4               	goto	L4
 11964  1702                     l6042:	
 11965  1702  0021               	movlb	1	; select bank1
 11966  1703  0820               	movf	eval_poly@res^(0+128),w
 11967  1704  0020               	movlb	0	; select bank0
 11968  1705  00E6               	movwf	?_eval_poly
 11969  1706  0021               	movlb	1	; select bank1
 11970  1707  0821               	movf	(eval_poly@res+1)^(0+128),w
 11971  1708  0020               	movlb	0	; select bank0
 11972  1709  00E7               	movwf	?_eval_poly+1
 11973  170A  0021               	movlb	1	; select bank1
 11974  170B  0822               	movf	(eval_poly@res+2)^(0+128),w
 11975  170C  0020               	movlb	0	; select bank0
 11976  170D  00E8               	movwf	?_eval_poly+2
 11977  170E  0008               	return
 11978  170F                     __end_of_eval_poly:	
 11979                           
 11980                           	psect	text59
 11981  1070                     __ptext59:	
 11982 ;; *************** function ___wmul *****************
 11983 ;; Defined at:
 11984 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\Umul16.c"
 11985 ;; Parameters:    Size  Location     Type
 11986 ;;  multiplier      2    1[BANK0 ] unsigned int 
 11987 ;;  multiplicand    2    3[BANK0 ] unsigned int 
 11988 ;; Auto vars:     Size  Location     Type
 11989 ;;  product         2    5[BANK0 ] unsigned int 
 11990 ;; Return value:  Size  Location     Type
 11991 ;;                  2    1[BANK0 ] unsigned int 
 11992 ;; Registers used:
 11993 ;;		wreg, status,2, status,0
 11994 ;; Tracked objects:
 11995 ;;		On entry : 0/0
 11996 ;;		On exit  : 0/0
 11997 ;;		Unchanged: 0/0
 11998 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11999 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12000 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12001 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12002 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12003 ;;Total ram usage:        6 bytes
 12004 ;; Hardware stack levels used:    1
 12005 ;; Hardware stack levels required when called:    4
 12006 ;; This function calls:
 12007 ;;		Nothing
 12008 ;; This function is called by:
 12009 ;;		_eval_poly
 12010 ;; This function uses a non-reentrant model
 12011 ;;
 12012                           
 12013                           
 12014                           ;psect for function ___wmul
 12015  1070                     ___wmul:	
 12016                           
 12017                           ;incstack = 0
 12018                           ; Regs used in ___wmul: [wreg+status,2+status,0]
 12019  1070  0020               	movlb	0	; select bank0
 12020  1071  01A5               	clrf	___wmul@product
 12021  1072  01A6               	clrf	___wmul@product+1
 12022  1073                     l5782:	
 12023  1073  1C21               	btfss	___wmul@multiplier,0
 12024  1074  2879               	goto	l1312
 12025  1075  0823               	movf	___wmul@multiplicand,w
 12026  1076  07A5               	addwf	___wmul@product,f
 12027  1077  0824               	movf	___wmul@multiplicand+1,w
 12028  1078  3DA6               	addwfc	___wmul@product+1,f
 12029  1079                     l1312:	
 12030  1079  3001               	movlw	1
 12031  107A                     u5445:	
 12032  107A  35A3               	lslf	___wmul@multiplicand,f
 12033  107B  0DA4               	rlf	___wmul@multiplicand+1,f
 12034  107C  0B89               	decfsz	9,f
 12035  107D  287A               	goto	u5445
 12036  107E  3001               	movlw	1
 12037  107F                     u5455:	
 12038  107F  36A2               	lsrf	___wmul@multiplier+1,f
 12039  1080  0CA1               	rrf	___wmul@multiplier,f
 12040  1081  0B89               	decfsz	9,f
 12041  1082  287F               	goto	u5455
 12042  1083  0821               	movf	___wmul@multiplier,w
 12043  1084  0422               	iorwf	___wmul@multiplier+1,w
 12044  1085  1D03               	btfss	3,2
 12045  1086  2873               	goto	l5782
 12046  1087  0826               	movf	___wmul@product+1,w
 12047  1088  00A2               	movwf	?___wmul+1
 12048  1089  0825               	movf	___wmul@product,w
 12049  108A  00A1               	movwf	?___wmul
 12050  108B  0008               	return
 12051  108C                     __end_of___wmul:	
 12052                           
 12053                           	psect	text60
 12054  1100                     __ptext60:	
 12055 ;; *************** function ___ftsub *****************
 12056 ;; Defined at:
 12057 ;;		line 18 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\ftsub.c"
 12058 ;; Parameters:    Size  Location     Type
 12059 ;;  f2              3   70[BANK0 ] float 
 12060 ;;  f1              3   73[BANK0 ] float 
 12061 ;; Auto vars:     Size  Location     Type
 12062 ;;		None
 12063 ;; Return value:  Size  Location     Type
 12064 ;;                  3   70[BANK0 ] float 
 12065 ;; Registers used:
 12066 ;;		wreg, status,2, status,0, pclath, cstack
 12067 ;; Tracked objects:
 12068 ;;		On entry : 0/0
 12069 ;;		On exit  : 0/0
 12070 ;;		Unchanged: 0/0
 12071 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12072 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12073 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12074 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12075 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12076 ;;Total ram usage:        6 bytes
 12077 ;; Hardware stack levels used:    1
 12078 ;; Hardware stack levels required when called:    6
 12079 ;; This function calls:
 12080 ;;		___ftadd
 12081 ;; This function is called by:
 12082 ;;		_atan2
 12083 ;; This function uses a non-reentrant model
 12084 ;;
 12085                           
 12086                           
 12087                           ;psect for function ___ftsub
 12088  1100                     ___ftsub:	
 12089                           
 12090                           ;incstack = 0
 12091                           ; Regs used in ___ftsub: [wreg+status,2+status,0+pclath+cstack]
 12092  1100  0020               	movlb	0	; select bank0
 12093  1101  0868               	movf	___ftsub@f2+2,w
 12094  1102  0467               	iorwf	___ftsub@f2+1,w
 12095  1103  0466               	iorwf	___ftsub@f2,w
 12096  1104  1903               	skipnz
 12097  1105  2908               	goto	l6128
 12098  1106  3080               	movlw	128
 12099  1107  06E8               	xorwf	___ftsub@f2+2,f
 12100  1108                     l6128:	
 12101  1108  0869               	movf	___ftsub@f1,w
 12102  1109  00D9               	movwf	___ftadd@f1
 12103  110A  086A               	movf	___ftsub@f1+1,w
 12104  110B  00DA               	movwf	___ftadd@f1+1
 12105  110C  086B               	movf	___ftsub@f1+2,w
 12106  110D  00DB               	movwf	___ftadd@f1+2
 12107  110E  0866               	movf	___ftsub@f2,w
 12108  110F  00DC               	movwf	___ftadd@f2
 12109  1110  0867               	movf	___ftsub@f2+1,w
 12110  1111  00DD               	movwf	___ftadd@f2+1
 12111  1112  0868               	movf	___ftsub@f2+2,w
 12112  1113  00DE               	movwf	___ftadd@f2+2
 12113  1114  318C  2449         	fcall	___ftadd
 12114  1116  0020               	movlb	0	; select bank0
 12115  1117  0859               	movf	?___ftadd,w
 12116  1118  00E6               	movwf	?___ftsub
 12117  1119  085A               	movf	?___ftadd+1,w
 12118  111A  00E7               	movwf	?___ftsub+1
 12119  111B  085B               	movf	?___ftadd+2,w
 12120  111C  00E8               	movwf	?___ftsub+2
 12121  111D  0008               	return
 12122  111E                     __end_of___ftsub:	
 12123                           
 12124                           	psect	text61
 12125  170F                     __ptext61:	
 12126 ;; *************** function _HMC5883L_GetHeading *****************
 12127 ;; Defined at:
 12128 ;;		line 290 in file "hmc5883l.c"
 12129 ;; Parameters:    Size  Location     Type
 12130 ;;  Mag             1    wreg     PTR int 
 12131 ;;		 -> HMC5883L_GetCompassDirection@rawSamples(6), 
 12132 ;; Auto vars:     Size  Location     Type
 12133 ;;  Mag             1   49[BANK0 ] PTR int 
 12134 ;;		 -> HMC5883L_GetCompassDirection@rawSamples(6), 
 12135 ;;  i               2   52[BANK0 ] int 
 12136 ;;  tmp             1   51[BANK0 ] unsigned char 
 12137 ;;  status          1   50[BANK0 ] unsigned char 
 12138 ;; Return value:  Size  Location     Type
 12139 ;;                  1    wreg      unsigned char 
 12140 ;; Registers used:
 12141 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12142 ;; Tracked objects:
 12143 ;;		On entry : 0/0
 12144 ;;		On exit  : 0/0
 12145 ;;		Unchanged: 0/0
 12146 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12147 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12148 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12149 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12150 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12151 ;;Total ram usage:        8 bytes
 12152 ;; Hardware stack levels used:    1
 12153 ;; Hardware stack levels required when called:   10
 12154 ;; This function calls:
 12155 ;;		_HMC5883L_I2C_BufferRead
 12156 ;;		_HMC5883L_ReadBits
 12157 ;;		_HMC5883L_WakeUp
 12158 ;; This function is called by:
 12159 ;;		_HMC5883L_GetCompassDirection
 12160 ;; This function uses a non-reentrant model
 12161 ;;
 12162                           
 12163                           
 12164                           ;psect for function _HMC5883L_GetHeading
 12165  170F                     _HMC5883L_GetHeading:	
 12166                           
 12167                           ;incstack = 0
 12168                           ; Regs used in _HMC5883L_GetHeading: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 12169                           ;HMC5883L_GetHeading@Mag stored from wreg
 12170  170F  0020               	movlb	0	; select bank0
 12171  1710  00D1               	movwf	HMC5883L_GetHeading@Mag
 12172                           
 12173                           ;hmc5883l.c: 292: uint8_t tmp;
 12174                           ;hmc5883l.c: 293: bool status;
 12175                           ;hmc5883l.c: 294: HMC5883L_WakeUp();
 12176  1711  319E  265E  3197   	fcall	_HMC5883L_WakeUp
 12177  1714                     l6194:	
 12178                           ;hmc5883l.c: 298: do
 12179                           
 12180                           
 12181                           ;hmc5883l.c: 299: {
 12182                           ;hmc5883l.c: 300: _delay((unsigned long)((15)*(8000000/4000.0)));
 12183  1714  3027               	movlw	39
 12184  1715  0020               	movlb	0	; select bank0
 12185  1716  00CE               	movwf	??_HMC5883L_GetHeading
 12186  1717  30F5               	movlw	245
 12187  1718                     u7787:	
 12188  1718  0B89               	decfsz	9,f
 12189  1719  2F18               	goto	u7787
 12190  171A  0BCE               	decfsz	??_HMC5883L_GetHeading,f
 12191  171B  2F18               	goto	u7787
 12192                           
 12193                           ;hmc5883l.c: 301: status= HMC5883L_ReadBits((0x1E), 0x09 , 0, 1, &tmp);
 12194  171C  3009               	movlw	9
 12195  171D  0020               	movlb	0	; select bank0
 12196  171E  00CE               	movwf	??_HMC5883L_GetHeading
 12197  171F  084E               	movf	??_HMC5883L_GetHeading,w
 12198  1720  00C3               	movwf	HMC5883L_ReadBits@regAddr
 12199  1721  01C4               	clrf	HMC5883L_ReadBits@bitStart
 12200  1722  01C5               	clrf	HMC5883L_ReadBits@length
 12201  1723  0AC5               	incf	HMC5883L_ReadBits@length,f
 12202  1724  3053               	movlw	(low (HMC5883L_GetHeading@tmp| 0))& (0+255)
 12203  1725  00CF               	movwf	??_HMC5883L_GetHeading+1
 12204  1726  084F               	movf	??_HMC5883L_GetHeading+1,w
 12205  1727  00C6               	movwf	HMC5883L_ReadBits@data
 12206  1728  301E               	movlw	30
 12207  1729  3193  238F  3197   	fcall	_HMC5883L_ReadBits
 12208  172C  0020               	movlb	0	; select bank0
 12209  172D  00D0               	movwf	??_HMC5883L_GetHeading+2
 12210  172E  0850               	movf	??_HMC5883L_GetHeading+2,w
 12211  172F  00D2               	movwf	HMC5883L_GetHeading@status
 12212                           
 12213                           ;hmc5883l.c: 302: }
 12214                           ;hmc5883l.c: 303: while(tmp==0 && status==1);
 12215  1730  0853               	movf	HMC5883L_GetHeading@tmp,w
 12216  1731  1903               	btfsc	3,2
 12217  1732  0352               	decf	HMC5883L_GetHeading@status,w
 12218  1733  1903               	btfsc	3,2
 12219  1734  2F14               	goto	l6194
 12220                           
 12221                           ;hmc5883l.c: 305: if(status==0)
 12222  1735  0852               	movf	HMC5883L_GetHeading@status,w
 12223  1736  1D03               	btfss	3,2
 12224  1737  2F3A               	goto	l6208
 12225                           
 12226                           ;hmc5883l.c: 306: return 0;
 12227  1738  3000               	movlw	0
 12228  1739  0008               	return
 12229  173A                     l6208:	
 12230                           
 12231                           ;hmc5883l.c: 308: if(HMC5883L_I2C_BufferRead((0x1E), &heading.rawData[0], 0x03, 6)==1)
 12232  173A  30CC               	movlw	low (_heading+2)
 12233  173B  00BC               	movwf	HMC5883L_I2C_BufferRead@pBuffer
 12234  173C  3001               	movlw	high (_heading+2)
 12235  173D  00BD               	movwf	HMC5883L_I2C_BufferRead@pBuffer+1
 12236  173E  3003               	movlw	3
 12237  173F  00CE               	movwf	??_HMC5883L_GetHeading
 12238  1740  084E               	movf	??_HMC5883L_GetHeading,w
 12239  1741  00BE               	movwf	HMC5883L_I2C_BufferRead@ReadAddr
 12240  1742  3006               	movlw	6
 12241  1743  00BF               	movwf	HMC5883L_I2C_BufferRead@NumByteToRead
 12242  1744  3000               	movlw	0
 12243  1745  00C0               	movwf	HMC5883L_I2C_BufferRead@NumByteToRead+1
 12244  1746  301E               	movlw	30
 12245  1747  319E  26CC  3197   	fcall	_HMC5883L_I2C_BufferRead
 12246  174A  3A01               	xorlw	1
 12247  174B  1D03               	skipz
 12248  174C  2F84               	goto	l6228
 12249                           
 12250                           ;hmc5883l.c: 309: {
 12251                           ;hmc5883l.c: 310: for (int i = 0; i < 3; i++)
 12252  174D  0020               	movlb	0	; select bank0
 12253  174E  01D4               	clrf	HMC5883L_GetHeading@i
 12254  174F  01D5               	clrf	HMC5883L_GetHeading@i+1
 12255  1750  0855               	movf	HMC5883L_GetHeading@i+1,w
 12256  1751  3A80               	xorlw	128
 12257  1752  00CE               	movwf	??_HMC5883L_GetHeading
 12258  1753  3080               	movlw	128
 12259  1754  024E               	subwf	??_HMC5883L_GetHeading,w
 12260  1755  1D03               	skipz
 12261  1756  2F59               	goto	u6195
 12262  1757  3003               	movlw	3
 12263  1758  0254               	subwf	HMC5883L_GetHeading@i,w
 12264  1759                     u6195:	
 12265  1759  1803               	btfsc	3,0
 12266  175A  2F82               	goto	l6222
 12267  175B                     l6216:	
 12268                           
 12269                           ;hmc5883l.c: 311: Mag[i] = ((s16) ((u16) heading.rawData[2 * i] << 8) + heading.rawData[
      +                          2 * i + 1]);
 12270  175B  0020               	movlb	0	; select bank0
 12271  175C  3554               	lslf	HMC5883L_GetHeading@i,w
 12272  175D  3ECC               	addlw	(low ((_heading| (0+256)+2)))& (0+255)
 12273  175E  0084               	movwf	4
 12274  175F  3001               	movlw	1	; select bank3/4
 12275  1760  0085               	movwf	5
 12276  1761  0800               	movf	0,w
 12277  1762  00CE               	movwf	??_HMC5883L_GetHeading
 12278  1763  1403               	setc
 12279  1764  0D54               	rlf	HMC5883L_GetHeading@i,w
 12280  1765  3ECC               	addlw	(low ((_heading| (0+256)+2)))& (0+255)
 12281  1766  0084               	movwf	4
 12282  1767  3001               	movlw	1	; select bank3/4
 12283  1768  0085               	movwf	5
 12284  1769  3554               	lslf	HMC5883L_GetHeading@i,w
 12285  176A  0751               	addwf	HMC5883L_GetHeading@Mag,w
 12286  176B  00CF               	movwf	??_HMC5883L_GetHeading+1
 12287  176C  084F               	movf	??_HMC5883L_GetHeading+1,w
 12288  176D  0086               	movwf	6
 12289  176E  0187               	clrf	7
 12290  176F  0800               	movf	0,w
 12291  1770  3FC0               	movwi [0]fsr1
 12292  1771  084E               	movf	??_HMC5883L_GetHeading,w
 12293  1772  3FC1               	movwi [1]fsr1
 12294  1773  3001               	movlw	1
 12295  1774  07D4               	addwf	HMC5883L_GetHeading@i,f
 12296  1775  3000               	movlw	0
 12297  1776  3DD5               	addwfc	HMC5883L_GetHeading@i+1,f
 12298  1777  0855               	movf	HMC5883L_GetHeading@i+1,w
 12299  1778  3A80               	xorlw	128
 12300  1779  00CE               	movwf	??_HMC5883L_GetHeading
 12301  177A  3080               	movlw	128
 12302  177B  024E               	subwf	??_HMC5883L_GetHeading,w
 12303  177C  1D03               	skipz
 12304  177D  2F80               	goto	u6205
 12305  177E  3003               	movlw	3
 12306  177F  0254               	subwf	HMC5883L_GetHeading@i,w
 12307  1780                     u6205:	
 12308  1780  1C03               	skipc
 12309  1781  2F5B               	goto	l6216
 12310  1782                     l6222:	
 12311                           
 12312                           ;hmc5883l.c: 312: return 1;
 12313  1782  3001               	movlw	1
 12314                           
 12315                           ;hmc5883l.c: 313: }
 12316  1783  0008               	return
 12317  1784                     l6228:	
 12318                           
 12319                           ;hmc5883l.c: 314: else
 12320                           ;hmc5883l.c: 315: return 0;
 12321  1784  3000               	movlw	0
 12322  1785  0008               	return
 12323  1786                     __end_of_HMC5883L_GetHeading:	
 12324                           
 12325                           	psect	text62
 12326  1E5E                     __ptext62:	
 12327 ;; *************** function _HMC5883L_WakeUp *****************
 12328 ;; Defined at:
 12329 ;;		line 88 in file "hmc5883l.c"
 12330 ;; Parameters:    Size  Location     Type
 12331 ;;		None
 12332 ;; Auto vars:     Size  Location     Type
 12333 ;;		None
 12334 ;; Return value:  Size  Location     Type
 12335 ;;                  1    wreg      void 
 12336 ;; Registers used:
 12337 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12338 ;; Tracked objects:
 12339 ;;		On entry : 0/0
 12340 ;;		On exit  : 0/0
 12341 ;;		Unchanged: 0/0
 12342 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12343 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12344 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12345 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12346 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12347 ;;Total ram usage:        1 bytes
 12348 ;; Hardware stack levels used:    1
 12349 ;; Hardware stack levels required when called:    9
 12350 ;; This function calls:
 12351 ;;		_HMC5883L_WriteBits
 12352 ;; This function is called by:
 12353 ;;		_HMC5883L_GetHeading
 12354 ;; This function uses a non-reentrant model
 12355 ;;
 12356                           
 12357                           
 12358                           ;psect for function _HMC5883L_WakeUp
 12359  1E5E                     _HMC5883L_WakeUp:	
 12360                           
 12361                           ;hmc5883l.c: 90: HMC5883L_WriteBits((0x1E), 0x02, 1, 1, 0);
 12362                           
 12363                           ;incstack = 0
 12364                           ; Regs used in _HMC5883L_WakeUp: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 12365  1E5E  3002               	movlw	2
 12366  1E5F  0020               	movlb	0	; select bank0
 12367  1E60  00CD               	movwf	??_HMC5883L_WakeUp
 12368  1E61  084D               	movf	??_HMC5883L_WakeUp,w
 12369  1E62  00C3               	movwf	HMC5883L_WriteBits@regAddr
 12370  1E63  01C4               	clrf	HMC5883L_WriteBits@bitStart
 12371  1E64  0AC4               	incf	HMC5883L_WriteBits@bitStart,f
 12372  1E65  01C5               	clrf	HMC5883L_WriteBits@length
 12373  1E66  0AC5               	incf	HMC5883L_WriteBits@length,f
 12374  1E67  01C6               	clrf	HMC5883L_WriteBits@data
 12375  1E68  301E               	movlw	30
 12376  1E69  3194  246C         	fcall	_HMC5883L_WriteBits
 12377  1E6B  0008               	return
 12378  1E6C                     __end_of_HMC5883L_WakeUp:	
 12379                           
 12380                           	psect	text63
 12381  146C                     __ptext63:	
 12382 ;; *************** function _HMC5883L_WriteBits *****************
 12383 ;; Defined at:
 12384 ;;		line 374 in file "hmc5883l.c"
 12385 ;; Parameters:    Size  Location     Type
 12386 ;;  slaveAddr       1    wreg     unsigned char 
 12387 ;;  regAddr         1   35[BANK0 ] unsigned char 
 12388 ;;  bitStart        1   36[BANK0 ] unsigned char 
 12389 ;;  length          1   37[BANK0 ] unsigned char 
 12390 ;;  data            1   38[BANK0 ] unsigned char 
 12391 ;; Auto vars:     Size  Location     Type
 12392 ;;  slaveAddr       1   42[BANK0 ] unsigned char 
 12393 ;;  mask            1   43[BANK0 ] unsigned char 
 12394 ;;  tmp             1   44[BANK0 ] unsigned char 
 12395 ;; Return value:  Size  Location     Type
 12396 ;;                  1    wreg      unsigned char 
 12397 ;; Registers used:
 12398 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12399 ;; Tracked objects:
 12400 ;;		On entry : 0/0
 12401 ;;		On exit  : 0/0
 12402 ;;		Unchanged: 0/0
 12403 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12404 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12405 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12406 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12407 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12408 ;;Total ram usage:       10 bytes
 12409 ;; Hardware stack levels used:    1
 12410 ;; Hardware stack levels required when called:    8
 12411 ;; This function calls:
 12412 ;;		_HMC5883L_I2C_BufferRead
 12413 ;;		_HMC5883L_I2C_ByteWrite
 12414 ;; This function is called by:
 12415 ;;		_HMC5883L_WakeUp
 12416 ;;		_HMC5883L_Sleep
 12417 ;;		_HMC5883L_SetSampleAveraging
 12418 ;;		_HMC5883L_SetDataRate
 12419 ;;		_HMC5883L_SetMeasurementBias
 12420 ;; This function uses a non-reentrant model
 12421 ;;
 12422                           
 12423                           
 12424                           ;psect for function _HMC5883L_WriteBits
 12425  146C                     _HMC5883L_WriteBits:	
 12426                           
 12427                           ;incstack = 0
 12428                           ; Regs used in _HMC5883L_WriteBits: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 12429                           ;HMC5883L_WriteBits@slaveAddr stored from wreg
 12430  146C  0020               	movlb	0	; select bank0
 12431  146D  00CA               	movwf	HMC5883L_WriteBits@slaveAddr
 12432                           
 12433                           ;hmc5883l.c: 376: uint8_t tmp;
 12434                           ;hmc5883l.c: 377: if(HMC5883L_I2C_BufferRead(slaveAddr, &tmp, regAddr, 1))
 12435  146E  304C               	movlw	low HMC5883L_WriteBits@tmp
 12436  146F  00BC               	movwf	HMC5883L_I2C_BufferRead@pBuffer
 12437  1470  3000               	movlw	high HMC5883L_WriteBits@tmp
 12438  1471  00BD               	movwf	HMC5883L_I2C_BufferRead@pBuffer+1
 12439  1472  0843               	movf	HMC5883L_WriteBits@regAddr,w
 12440  1473  00C7               	movwf	??_HMC5883L_WriteBits
 12441  1474  0847               	movf	??_HMC5883L_WriteBits,w
 12442  1475  00BE               	movwf	HMC5883L_I2C_BufferRead@ReadAddr
 12443  1476  3001               	movlw	1
 12444  1477  00BF               	movwf	HMC5883L_I2C_BufferRead@NumByteToRead
 12445  1478  3000               	movlw	0
 12446  1479  00C0               	movwf	HMC5883L_I2C_BufferRead@NumByteToRead+1
 12447  147A  084A               	movf	HMC5883L_WriteBits@slaveAddr,w
 12448  147B  319E  26CC  3194   	fcall	_HMC5883L_I2C_BufferRead
 12449  147E  3A00               	xorlw	0
 12450  147F  1903               	skipnz
 12451  1480  0008               	return
 12452                           
 12453                           ;hmc5883l.c: 378: {
 12454                           ;hmc5883l.c: 379: uint8_t mask = ((1 << length) - 1) << (bitStart - length + 1);
 12455  1481  3001               	movlw	1
 12456  1482  0020               	movlb	0	; select bank0
 12457  1483  00C7               	movwf	??_HMC5883L_WriteBits
 12458  1484  0A45               	incf	HMC5883L_WriteBits@length,w
 12459  1485  2C87               	goto	u5884
 12460  1486                     u5885:	
 12461  1486  35C7               	lslf	??_HMC5883L_WriteBits,f
 12462  1487                     u5884:	
 12463  1487  0B89               	decfsz	9,f
 12464  1488  2C86               	goto	u5885
 12465  1489  0847               	movf	??_HMC5883L_WriteBits,w
 12466  148A  3EFF               	addlw	255
 12467  148B  00C8               	movwf	??_HMC5883L_WriteBits+1
 12468  148C  0345               	decf	HMC5883L_WriteBits@length,w
 12469  148D  3AFF               	xorlw	255
 12470  148E  0744               	addwf	HMC5883L_WriteBits@bitStart,w
 12471  148F  3E01               	addlw	1
 12472  1490  0A89               	incf	9,f
 12473  1491  2C93               	goto	u5894
 12474  1492                     u5895:	
 12475  1492  35C8               	lslf	??_HMC5883L_WriteBits+1,f
 12476  1493                     u5894:	
 12477  1493  0B89               	decfsz	9,f
 12478  1494  2C92               	goto	u5895
 12479  1495  0848               	movf	??_HMC5883L_WriteBits+1,w
 12480  1496  00C9               	movwf	??_HMC5883L_WriteBits+2
 12481  1497  0849               	movf	??_HMC5883L_WriteBits+2,w
 12482  1498  00CB               	movwf	HMC5883L_WriteBits@mask
 12483                           
 12484                           ;hmc5883l.c: 380: data <<= (bitStart - length + 1);
 12485  1499  0345               	decf	HMC5883L_WriteBits@length,w
 12486  149A  3AFF               	xorlw	255
 12487  149B  0744               	addwf	HMC5883L_WriteBits@bitStart,w
 12488  149C  3E01               	addlw	1
 12489  149D  0A89               	incf	9,f
 12490  149E  2CA1               	goto	u5900
 12491  149F                     u5905:	
 12492  149F  1003               	clrc
 12493  14A0  0DC6               	rlf	HMC5883L_WriteBits@data,f
 12494  14A1                     u5900:	
 12495  14A1  3EFF               	addlw	-1
 12496  14A2  1D03               	skipz
 12497  14A3  2C9F               	goto	u5905
 12498                           
 12499                           ;hmc5883l.c: 381: data &= mask;
 12500  14A4  084B               	movf	HMC5883L_WriteBits@mask,w
 12501  14A5  00C7               	movwf	??_HMC5883L_WriteBits
 12502  14A6  0847               	movf	??_HMC5883L_WriteBits,w
 12503  14A7  05C6               	andwf	HMC5883L_WriteBits@data,f
 12504                           
 12505                           ;hmc5883l.c: 382: tmp &= ~(mask);
 12506  14A8  094B               	comf	HMC5883L_WriteBits@mask,w
 12507  14A9  00C7               	movwf	??_HMC5883L_WriteBits
 12508  14AA  0847               	movf	??_HMC5883L_WriteBits,w
 12509  14AB  05CC               	andwf	HMC5883L_WriteBits@tmp,f
 12510                           
 12511                           ;hmc5883l.c: 383: tmp |= data;
 12512  14AC  0846               	movf	HMC5883L_WriteBits@data,w
 12513  14AD  00C7               	movwf	??_HMC5883L_WriteBits
 12514  14AE  0847               	movf	??_HMC5883L_WriteBits,w
 12515  14AF  04CC               	iorwf	HMC5883L_WriteBits@tmp,f
 12516                           
 12517                           ;hmc5883l.c: 384: if(HMC5883L_I2C_ByteWrite(slaveAddr, &tmp, regAddr))
 12518  14B0  304C               	movlw	(low (HMC5883L_WriteBits@tmp| 0))& (0+255)
 12519  14B1  00C7               	movwf	??_HMC5883L_WriteBits
 12520  14B2  0847               	movf	??_HMC5883L_WriteBits,w
 12521  14B3  00B9               	movwf	HMC5883L_I2C_ByteWrite@pBuffer
 12522  14B4  0843               	movf	HMC5883L_WriteBits@regAddr,w
 12523  14B5  00C8               	movwf	??_HMC5883L_WriteBits+1
 12524  14B6  0848               	movf	??_HMC5883L_WriteBits+1,w
 12525  14B7  00BA               	movwf	HMC5883L_I2C_ByteWrite@WriteAddr
 12526  14B8  084A               	movf	HMC5883L_WriteBits@slaveAddr,w
 12527  14B9  319E  2650         	fcall	_HMC5883L_I2C_ByteWrite
 12528                           
 12529                           ;hmc5883l.c: 388: else return 0;
 12530                           ;	Return value of _HMC5883L_WriteBits is never used
 12531                           
 12532                           ;hmc5883l.c: 387: }
 12533                           
 12534                           ;hmc5883l.c: 386: else return 0;
 12535                           ;	Return value of _HMC5883L_WriteBits is never used
 12536                           
 12537                           ;hmc5883l.c: 385: return 1;
 12538                           ;	Return value of _HMC5883L_WriteBits is never used
 12539  14BB  0008               	return
 12540  14BC                     __end_of_HMC5883L_WriteBits:	
 12541                           
 12542                           	psect	text64
 12543  1E50                     __ptext64:	
 12544 ;; *************** function _HMC5883L_I2C_ByteWrite *****************
 12545 ;; Defined at:
 12546 ;;		line 458 in file "hmc5883l.c"
 12547 ;; Parameters:    Size  Location     Type
 12548 ;;  slaveAddr       1    wreg     unsigned char 
 12549 ;;  pBuffer         1   25[BANK0 ] PTR unsigned char 
 12550 ;;		 -> HMC5883L_WriteBit@tmp(1), HMC5883L_WriteBits@tmp(1), HMC5883L_SetMode@tmp(1), HMC5883L_SetGain@tmp(1), 
 12551 ;;		 -> HMC5883L_Initialize@tmp(1), MPU6050_WriteBit@tmp(1), MPU6050_WriteBits@tmp(1), 
 12552 ;;  WriteAddr       1   26[BANK0 ] unsigned char 
 12553 ;; Auto vars:     Size  Location     Type
 12554 ;;  slaveAddr       1   29[BANK0 ] unsigned char 
 12555 ;; Return value:  Size  Location     Type
 12556 ;;                  1    wreg      unsigned char 
 12557 ;; Registers used:
 12558 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12559 ;; Tracked objects:
 12560 ;;		On entry : 0/0
 12561 ;;		On exit  : 0/0
 12562 ;;		Unchanged: 0/0
 12563 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12564 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12565 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12566 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12567 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12568 ;;Total ram usage:        5 bytes
 12569 ;; Hardware stack levels used:    1
 12570 ;; Hardware stack levels required when called:    7
 12571 ;; This function calls:
 12572 ;;		_I2C_ByteWrite
 12573 ;; This function is called by:
 12574 ;;		_HMC5883L_Initialize
 12575 ;;		_HMC5883L_SetGain
 12576 ;;		_HMC5883L_SetMode
 12577 ;;		_HMC5883L_WriteBits
 12578 ;;		_MPU6050_I2C_ByteWrite
 12579 ;;		_HMC5883L_WriteBit
 12580 ;; This function uses a non-reentrant model
 12581 ;;
 12582                           
 12583                           
 12584                           ;psect for function _HMC5883L_I2C_ByteWrite
 12585  1E50                     _HMC5883L_I2C_ByteWrite:	
 12586                           
 12587                           ;incstack = 0
 12588                           ; Regs used in _HMC5883L_I2C_ByteWrite: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstac
      +                          k]
 12589                           ;HMC5883L_I2C_ByteWrite@slaveAddr stored from wreg
 12590  1E50  0020               	movlb	0	; select bank0
 12591  1E51  00BD               	movwf	HMC5883L_I2C_ByteWrite@slaveAddr
 12592                           
 12593                           ;hmc5883l.c: 460: return(I2C_ByteWrite(slaveAddr,pBuffer,WriteAddr));
 12594  1E52  0839               	movf	HMC5883L_I2C_ByteWrite@pBuffer,w
 12595  1E53  00BB               	movwf	??_HMC5883L_I2C_ByteWrite
 12596  1E54  083B               	movf	??_HMC5883L_I2C_ByteWrite,w
 12597  1E55  00AF               	movwf	I2C_ByteWrite@pBuffer
 12598  1E56  083A               	movf	HMC5883L_I2C_ByteWrite@WriteAddr,w
 12599  1E57  00BC               	movwf	??_HMC5883L_I2C_ByteWrite+1
 12600  1E58  083C               	movf	??_HMC5883L_I2C_ByteWrite+1,w
 12601  1E59  00B0               	movwf	I2C_ByteWrite@WriteAddr
 12602  1E5A  083D               	movf	HMC5883L_I2C_ByteWrite@slaveAddr,w
 12603  1E5B  3192  2295         	fcall	_I2C_ByteWrite
 12604  1E5D  0008               	return
 12605  1E5E                     __end_of_HMC5883L_I2C_ByteWrite:	
 12606                           
 12607                           	psect	text65
 12608  1DC4                     __ptext65:	
 12609 ;; *************** function _Diag_setCompassHealth *****************
 12610 ;; Defined at:
 12611 ;;		line 20 in file "diagnostics.c"
 12612 ;; Parameters:    Size  Location     Type
 12613 ;;  health          1    wreg     unsigned char 
 12614 ;; Auto vars:     Size  Location     Type
 12615 ;;  health          1    2[BANK0 ] unsigned char 
 12616 ;; Return value:  Size  Location     Type
 12617 ;;                  1    wreg      void 
 12618 ;; Registers used:
 12619 ;;		wreg
 12620 ;; Tracked objects:
 12621 ;;		On entry : 0/0
 12622 ;;		On exit  : 0/0
 12623 ;;		Unchanged: 0/0
 12624 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12625 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12626 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12627 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12628 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12629 ;;Total ram usage:        2 bytes
 12630 ;; Hardware stack levels used:    1
 12631 ;; Hardware stack levels required when called:    4
 12632 ;; This function calls:
 12633 ;;		Nothing
 12634 ;; This function is called by:
 12635 ;;		_DOOR_run
 12636 ;; This function uses a non-reentrant model
 12637 ;;
 12638                           
 12639                           
 12640                           ;psect for function _Diag_setCompassHealth
 12641  1DC4                     _Diag_setCompassHealth:	
 12642                           
 12643                           ;incstack = 0
 12644                           ; Regs used in _Diag_setCompassHealth: [wreg]
 12645                           ;Diag_setCompassHealth@health stored from wreg
 12646  1DC4  0020               	movlb	0	; select bank0
 12647  1DC5  00A2               	movwf	Diag_setCompassHealth@health
 12648                           
 12649                           ;diagnostics.c: 22: sensorHealth.compassHealth=health;
 12650  1DC6  0822               	movf	Diag_setCompassHealth@health,w
 12651  1DC7  00A1               	movwf	??_Diag_setCompassHealth
 12652  1DC8  0821               	movf	??_Diag_setCompassHealth,w
 12653  1DC9  0022               	movlb	2	; select bank2
 12654  1DCA  00E7               	movwf	(_sensorHealth^(0+256)+1)
 12655  1DCB  0008               	return
 12656  1DCC                     __end_of_Diag_setCompassHealth:	
 12657                           
 12658                           	psect	text66
 12659  1D6D                     __ptext66:	
 12660 ;; *************** function _Diag_getCompassHealth *****************
 12661 ;; Defined at:
 12662 ;;		line 30 in file "diagnostics.c"
 12663 ;; Parameters:    Size  Location     Type
 12664 ;;		None
 12665 ;; Auto vars:     Size  Location     Type
 12666 ;;		None
 12667 ;; Return value:  Size  Location     Type
 12668 ;;                  1    wreg      unsigned char 
 12669 ;; Registers used:
 12670 ;;		wreg
 12671 ;; Tracked objects:
 12672 ;;		On entry : 0/0
 12673 ;;		On exit  : 0/0
 12674 ;;		Unchanged: 0/0
 12675 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12676 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12677 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12678 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12679 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12680 ;;Total ram usage:        0 bytes
 12681 ;; Hardware stack levels used:    1
 12682 ;; Hardware stack levels required when called:    4
 12683 ;; This function calls:
 12684 ;;		Nothing
 12685 ;; This function is called by:
 12686 ;;		_DOOR_run
 12687 ;; This function uses a non-reentrant model
 12688 ;;
 12689                           
 12690                           
 12691                           ;psect for function _Diag_getCompassHealth
 12692  1D6D                     _Diag_getCompassHealth:	
 12693                           
 12694                           ;diagnostics.c: 32: return (sensorHealth.compassHealth);
 12695                           
 12696                           ;incstack = 0
 12697                           ; Regs used in _Diag_getCompassHealth: [wreg]
 12698  1D6D  0022               	movlb	2	; select bank2
 12699  1D6E  0867               	movf	(_sensorHealth^(0+256)+1),w
 12700  1D6F  0008               	return
 12701  1D70                     __end_of_Diag_getCompassHealth:	
 12702                           
 12703                           	psect	text67
 12704  1DEE                     __ptext67:	
 12705 ;; *************** function _DOOR_init *****************
 12706 ;; Defined at:
 12707 ;;		line 10 in file "doorlogic.c"
 12708 ;; Parameters:    Size  Location     Type
 12709 ;;		None
 12710 ;; Auto vars:     Size  Location     Type
 12711 ;;		None
 12712 ;; Return value:  Size  Location     Type
 12713 ;;                  1    wreg      void 
 12714 ;; Registers used:
 12715 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12716 ;; Tracked objects:
 12717 ;;		On entry : 0/0
 12718 ;;		On exit  : 0/0
 12719 ;;		Unchanged: 0/0
 12720 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12721 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12722 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12723 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12724 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12725 ;;Total ram usage:        1 bytes
 12726 ;; Hardware stack levels used:    1
 12727 ;; Hardware stack levels required when called:    6
 12728 ;; This function calls:
 12729 ;;		_Storage_load
 12730 ;; This function is called by:
 12731 ;;		_main
 12732 ;; This function uses a non-reentrant model
 12733 ;;
 12734                           
 12735                           
 12736                           ;psect for function _DOOR_init
 12737  1DEE                     _DOOR_init:	
 12738                           
 12739                           ;doorlogic.c: 13: Storage_load(&doorOpenAngle, &doorClosedAngle);
 12740                           
 12741                           ;incstack = 0
 12742                           ; Regs used in _DOOR_init: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 12743  1DEE  30E6               	movlw	(low (_doorClosedAngle| 0))& (0+255)
 12744  1DEF  0020               	movlb	0	; select bank0
 12745  1DF0  00A8               	movwf	??_DOOR_init
 12746  1DF1  0828               	movf	??_DOOR_init,w
 12747  1DF2  00A4               	movwf	Storage_load@closeAngle
 12748  1DF3  30E7               	movlw	(low (_doorOpenAngle| 0))& (0+255)
 12749  1DF4  3193  23D5         	fcall	_Storage_load
 12750  1DF6  0008               	return
 12751  1DF7                     __end_of_DOOR_init:	
 12752                           
 12753                           	psect	text68
 12754  13D5                     __ptext68:	
 12755 ;; *************** function _Storage_load *****************
 12756 ;; Defined at:
 12757 ;;		line 8 in file "storage.c"
 12758 ;; Parameters:    Size  Location     Type
 12759 ;;  openAngle       1    wreg     PTR unsigned char 
 12760 ;;		 -> doorOpenAngle(1), 
 12761 ;;  closeAngle      1    4[BANK0 ] PTR unsigned char 
 12762 ;;		 -> doorClosedAngle(1), 
 12763 ;; Auto vars:     Size  Location     Type
 12764 ;;  openAngle       1    7[BANK0 ] PTR unsigned char 
 12765 ;;		 -> doorOpenAngle(1), 
 12766 ;;  byte            1    6[BANK0 ] unsigned char 
 12767 ;; Return value:  Size  Location     Type
 12768 ;;                  1    wreg      void 
 12769 ;; Registers used:
 12770 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12771 ;; Tracked objects:
 12772 ;;		On entry : 0/0
 12773 ;;		On exit  : 0/0
 12774 ;;		Unchanged: 0/0
 12775 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12776 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12777 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12778 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12779 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12780 ;;Total ram usage:        4 bytes
 12781 ;; Hardware stack levels used:    1
 12782 ;; Hardware stack levels required when called:    5
 12783 ;; This function calls:
 12784 ;;		_DATAEE_ReadByte
 12785 ;;		_DATAEE_WriteByte
 12786 ;; This function is called by:
 12787 ;;		_DOOR_init
 12788 ;; This function uses a non-reentrant model
 12789 ;;
 12790                           
 12791                           
 12792                           ;psect for function _Storage_load
 12793  13D5                     _Storage_load:	
 12794                           
 12795                           ;incstack = 0
 12796                           ; Regs used in _Storage_load: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 12797                           ;Storage_load@openAngle stored from wreg
 12798  13D5  0020               	movlb	0	; select bank0
 12799  13D6  00A7               	movwf	Storage_load@openAngle
 12800                           
 12801                           ;storage.c: 10: char byte;
 12802                           ;storage.c: 12: byte=DATAEE_ReadByte(0 );
 12803  13D7  3000               	movlw	0
 12804  13D8  319E  2635  3193   	fcall	_DATAEE_ReadByte
 12805  13DB  0020               	movlb	0	; select bank0
 12806  13DC  00A5               	movwf	??_Storage_load
 12807  13DD  0825               	movf	??_Storage_load,w
 12808  13DE  00A6               	movwf	Storage_load@byte
 12809                           
 12810                           ;storage.c: 13: if(byte==1)
 12811  13DF  0326               	decf	Storage_load@byte,w
 12812  13E0  1D03               	btfss	3,2
 12813  13E1  2BF8               	goto	l6662
 12814                           
 12815                           ;storage.c: 14: {
 12816                           ;storage.c: 15: *openAngle=DATAEE_ReadByte(1);
 12817  13E2  3001               	movlw	1
 12818  13E3  319E  2635  3193   	fcall	_DATAEE_ReadByte
 12819  13E6  0020               	movlb	0	; select bank0
 12820  13E7  00A5               	movwf	??_Storage_load
 12821  13E8  0827               	movf	Storage_load@openAngle,w
 12822  13E9  0086               	movwf	6
 12823  13EA  0187               	clrf	7
 12824  13EB  0825               	movf	??_Storage_load,w
 12825  13EC  0081               	movwf	1
 12826                           
 12827                           ;storage.c: 16: *closeAngle=DATAEE_ReadByte(2);
 12828  13ED  3002               	movlw	2
 12829  13EE  319E  2635         	fcall	_DATAEE_ReadByte
 12830  13F0  0020               	movlb	0	; select bank0
 12831  13F1  00A5               	movwf	??_Storage_load
 12832  13F2  0824               	movf	Storage_load@closeAngle,w
 12833  13F3  0086               	movwf	6
 12834  13F4  0187               	clrf	7
 12835  13F5  0825               	movf	??_Storage_load,w
 12836  13F6  0081               	movwf	1
 12837                           
 12838                           ;storage.c: 17: }
 12839  13F7  0008               	return
 12840  13F8                     l6662:	
 12841                           
 12842                           ;storage.c: 18: else
 12843                           ;storage.c: 19: {
 12844                           ;storage.c: 20: DATAEE_WriteByte(1, 15);
 12845  13F8  300F               	movlw	15
 12846  13F9  00A5               	movwf	??_Storage_load
 12847  13FA  0825               	movf	??_Storage_load,w
 12848  13FB  00A1               	movwf	DATAEE_WriteByte@bData
 12849  13FC  3001               	movlw	1
 12850  13FD  3191  21A2  3193   	fcall	_DATAEE_WriteByte
 12851                           
 12852                           ;storage.c: 21: DATAEE_WriteByte(2, 5);
 12853  1400  3005               	movlw	5
 12854  1401  0020               	movlb	0	; select bank0
 12855  1402  00A5               	movwf	??_Storage_load
 12856  1403  0825               	movf	??_Storage_load,w
 12857  1404  00A1               	movwf	DATAEE_WriteByte@bData
 12858  1405  3002               	movlw	2
 12859  1406  3191  21A2  3193   	fcall	_DATAEE_WriteByte
 12860                           
 12861                           ;storage.c: 22: DATAEE_WriteByte(0 , 1);
 12862  1409  0020               	movlb	0	; select bank0
 12863  140A  01A1               	clrf	DATAEE_WriteByte@bData
 12864  140B  0AA1               	incf	DATAEE_WriteByte@bData,f
 12865  140C  3000               	movlw	0
 12866  140D  3191  21A2         	fcall	_DATAEE_WriteByte
 12867                           
 12868                           ;storage.c: 23: *openAngle=15;
 12869  140F  300F               	movlw	15
 12870  1410  0020               	movlb	0	; select bank0
 12871  1411  00A5               	movwf	??_Storage_load
 12872  1412  0827               	movf	Storage_load@openAngle,w
 12873  1413  0086               	movwf	6
 12874  1414  0187               	clrf	7
 12875  1415  0825               	movf	??_Storage_load,w
 12876  1416  0081               	movwf	1
 12877                           
 12878                           ;storage.c: 24: *closeAngle=5;
 12879  1417  3005               	movlw	5
 12880  1418  00A5               	movwf	??_Storage_load
 12881  1419  0824               	movf	Storage_load@closeAngle,w
 12882  141A  0086               	movwf	6
 12883  141B  0187               	clrf	7
 12884  141C  0825               	movf	??_Storage_load,w
 12885  141D  0081               	movwf	1
 12886  141E  0008               	return
 12887  141F                     __end_of_Storage_load:	
 12888                           
 12889                           	psect	text69
 12890  11A2                     __ptext69:	
 12891 ;; *************** function _DATAEE_WriteByte *****************
 12892 ;; Defined at:
 12893 ;;		line 186 in file "mcc_generated_files/memory.c"
 12894 ;; Parameters:    Size  Location     Type
 12895 ;;  bAdd            1    wreg     unsigned char 
 12896 ;;  bData           1    1[BANK0 ] unsigned char 
 12897 ;; Auto vars:     Size  Location     Type
 12898 ;;  bAdd            1    2[BANK0 ] unsigned char 
 12899 ;;  GIEBitValue     1    3[BANK0 ] unsigned char 
 12900 ;; Return value:  Size  Location     Type
 12901 ;;                  1    wreg      void 
 12902 ;; Registers used:
 12903 ;;		wreg, status,2, status,0
 12904 ;; Tracked objects:
 12905 ;;		On entry : 0/0
 12906 ;;		On exit  : 0/0
 12907 ;;		Unchanged: 0/0
 12908 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12909 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12910 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12911 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12912 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12913 ;;Total ram usage:        3 bytes
 12914 ;; Hardware stack levels used:    1
 12915 ;; Hardware stack levels required when called:    4
 12916 ;; This function calls:
 12917 ;;		Nothing
 12918 ;; This function is called by:
 12919 ;;		_Storage_load
 12920 ;;		_Storage_save
 12921 ;; This function uses a non-reentrant model
 12922 ;;
 12923                           
 12924                           
 12925                           ;psect for function _DATAEE_WriteByte
 12926  11A2                     _DATAEE_WriteByte:	
 12927                           
 12928                           ;incstack = 0
 12929                           ; Regs used in _DATAEE_WriteByte: [wreg+status,2+status,0]
 12930                           ;DATAEE_WriteByte@bAdd stored from wreg
 12931  11A2  0020               	movlb	0	; select bank0
 12932  11A3  00A2               	movwf	DATAEE_WriteByte@bAdd
 12933                           
 12934                           ;memory.c: 188: uint8_t GIEBitValue = 0;
 12935  11A4  01A3               	clrf	DATAEE_WriteByte@GIEBitValue
 12936                           
 12937                           ;memory.c: 190: EEADRL = (uint8_t)(bAdd & 0x0ff);
 12938  11A5  0822               	movf	DATAEE_WriteByte@bAdd,w
 12939  11A6  0023               	movlb	3	; select bank3
 12940  11A7  0091               	movwf	17	;volatile
 12941                           
 12942                           ;memory.c: 191: EEDATL = bData;
 12943  11A8  0020               	movlb	0	; select bank0
 12944  11A9  0821               	movf	DATAEE_WriteByte@bData,w
 12945  11AA  0023               	movlb	3	; select bank3
 12946  11AB  0093               	movwf	19	;volatile
 12947                           
 12948                           ;memory.c: 192: EECON1bits.EEPGD = 0;
 12949  11AC  1395               	bcf	21,7	;volsfr
 12950                           
 12951                           ;memory.c: 193: EECON1bits.CFGS = 0;
 12952  11AD  1315               	bcf	21,6	;volsfr
 12953                           
 12954                           ;memory.c: 194: EECON1bits.WREN = 1;
 12955  11AE  1515               	bsf	21,2	;volsfr
 12956                           
 12957                           ;memory.c: 196: GIEBitValue = INTCONbits.GIE;
 12958  11AF  3000               	movlw	0
 12959  11B0  1B8B               	btfsc	11,7	;volatile
 12960  11B1  3001               	movlw	1
 12961  11B2  0020               	movlb	0	; select bank0
 12962  11B3  00A3               	movwf	DATAEE_WriteByte@GIEBitValue
 12963                           
 12964                           ;memory.c: 197: INTCONbits.GIE = 0;
 12965  11B4  138B               	bcf	11,7	;volatile
 12966                           
 12967                           ;memory.c: 198: EECON2 = 0x55;
 12968  11B5  3055               	movlw	85
 12969  11B6  0023               	movlb	3	; select bank3
 12970  11B7  0096               	movwf	22	;volsfr
 12971                           
 12972                           ;memory.c: 199: EECON2 = 0xAA;
 12973  11B8  30AA               	movlw	170
 12974  11B9  0096               	movwf	22	;volsfr
 12975                           
 12976                           ;memory.c: 200: EECON1bits.WR = 1;
 12977  11BA  1495               	bsf	21,1	;volsfr
 12978  11BB                     l498:	
 12979                           ;memory.c: 203: {
 12980                           
 12981                           ;memory.c: 202: while (EECON1bits.WR)
 12982                           
 12983  11BB  1895               	btfsc	21,1	;volsfr
 12984  11BC  29BB               	goto	l498
 12985                           
 12986                           ;memory.c: 204: }
 12987                           ;memory.c: 206: EECON1bits.WREN = 0;
 12988  11BD  1115               	bcf	21,2	;volsfr
 12989                           
 12990                           ;memory.c: 207: INTCONbits.GIE = GIEBitValue;
 12991  11BE  0020               	movlb	0	; select bank0
 12992  11BF  0C23               	rrf	DATAEE_WriteByte@GIEBitValue,w
 12993  11C0  1C03               	skipc
 12994  11C1  138B               	bcf	11,7	;volatile
 12995  11C2  1803               	skipnc
 12996  11C3  178B               	bsf	11,7	;volatile
 12997  11C4  0008               	return
 12998  11C5                     __end_of_DATAEE_WriteByte:	
 12999                           
 13000                           	psect	text70
 13001  1E35                     __ptext70:	
 13002 ;; *************** function _DATAEE_ReadByte *****************
 13003 ;; Defined at:
 13004 ;;		line 210 in file "mcc_generated_files/memory.c"
 13005 ;; Parameters:    Size  Location     Type
 13006 ;;  bAdd            1    wreg     unsigned char 
 13007 ;; Auto vars:     Size  Location     Type
 13008 ;;  bAdd            1    1[BANK0 ] unsigned char 
 13009 ;; Return value:  Size  Location     Type
 13010 ;;                  1    wreg      unsigned char 
 13011 ;; Registers used:
 13012 ;;		wreg
 13013 ;; Tracked objects:
 13014 ;;		On entry : 0/0
 13015 ;;		On exit  : 0/0
 13016 ;;		Unchanged: 0/0
 13017 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13018 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13019 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13020 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13021 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13022 ;;Total ram usage:        1 bytes
 13023 ;; Hardware stack levels used:    1
 13024 ;; Hardware stack levels required when called:    4
 13025 ;; This function calls:
 13026 ;;		Nothing
 13027 ;; This function is called by:
 13028 ;;		_Storage_load
 13029 ;; This function uses a non-reentrant model
 13030 ;;
 13031                           
 13032                           
 13033                           ;psect for function _DATAEE_ReadByte
 13034  1E35                     _DATAEE_ReadByte:	
 13035                           
 13036                           ;incstack = 0
 13037                           ; Regs used in _DATAEE_ReadByte: [wreg]
 13038                           ;DATAEE_ReadByte@bAdd stored from wreg
 13039  1E35  0020               	movlb	0	; select bank0
 13040  1E36  00A1               	movwf	DATAEE_ReadByte@bAdd
 13041                           
 13042                           ;memory.c: 212: EEADRL = (uint8_t)(bAdd & 0x0ff);
 13043  1E37  0821               	movf	DATAEE_ReadByte@bAdd,w
 13044  1E38  0023               	movlb	3	; select bank3
 13045  1E39  0091               	movwf	17	;volatile
 13046                           
 13047                           ;memory.c: 213: EECON1bits.CFGS = 0;
 13048  1E3A  1315               	bcf	21,6	;volsfr
 13049                           
 13050                           ;memory.c: 214: EECON1bits.EEPGD = 0;
 13051  1E3B  1395               	bcf	21,7	;volsfr
 13052                           
 13053                           ;memory.c: 215: EECON1bits.RD = 1;
 13054  1E3C  1415               	bsf	21,0	;volsfr
 13055                           
 13056                           ;memory.c: 216: __nop();
 13057  1E3D  0000               	nop
 13058                           
 13059                           ;memory.c: 217: __nop();
 13060  1E3E  0000               	nop
 13061                           
 13062                           ;memory.c: 219: return (EEDATL);
 13063  1E3F  0023               	movlb	3	; select bank3
 13064  1E40  0813               	movf	19,w	;volatile
 13065  1E41  0008               	return
 13066  1E42                     __end_of_DATAEE_ReadByte:	
 13067                           
 13068                           	psect	text71
 13069  006F                     __ptext71:	
 13070 ;; *************** function _BMP_readTemperature *****************
 13071 ;; Defined at:
 13072 ;;		line 72 in file "bmp280.c"
 13073 ;; Parameters:    Size  Location     Type
 13074 ;;		None
 13075 ;; Auto vars:     Size  Location     Type
 13076 ;;  tmp             1   25[BANK1 ] unsigned char 
 13077 ;;  status          1   24[BANK1 ] unsigned char 
 13078 ;; Return value:  Size  Location     Type
 13079 ;;                  3    6[BANK1 ] float 
 13080 ;; Registers used:
 13081 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13082 ;; Tracked objects:
 13083 ;;		On entry : 0/0
 13084 ;;		On exit  : 0/0
 13085 ;;		Unchanged: 0/0
 13086 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13087 ;;      Params:         0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0
 13088 ;;      Locals:         0       0       5       0       0       0       0       0       0       0       0       0       
      +0       0
 13089 ;;      Temps:          0       0      12       0       0       0       0       0       0       0       0       0       
      +0       0
 13090 ;;      Totals:         0       0      20       0       0       0       0       0       0       0       0       0       
      +0       0
 13091 ;;Total ram usage:       20 bytes
 13092 ;; Hardware stack levels used:    1
 13093 ;; Hardware stack levels required when called:    9
 13094 ;; This function calls:
 13095 ;;		_BMP_init
 13096 ;;		_Diag_getTempSensorHealth
 13097 ;;		_Diag_setTempSensorHealth
 13098 ;;		_HMC5883L_ReadBits
 13099 ;;		_I2C_BufferRead
 13100 ;;		_I2C_ByteWrite
 13101 ;;		___aldiv
 13102 ;;		___altoft
 13103 ;;		___awtoft
 13104 ;;		___ftadd
 13105 ;;		___ftdiv
 13106 ;;		___ftmul
 13107 ;;		___ftneg
 13108 ;;		___fttol
 13109 ;;		___lwtoft
 13110 ;; This function is called by:
 13111 ;;		_main
 13112 ;; This function uses a non-reentrant model
 13113 ;;
 13114                           
 13115                           
 13116                           ;psect for function _BMP_readTemperature
 13117  006F                     _BMP_readTemperature:	
 13118                           
 13119                           ;bmp280.c: 74: char tmp=0;
 13120                           
 13121                           ;incstack = 0
 13122                           ; Regs used in _BMP_readTemperature: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 13123  006F  0021               	movlb	1	; select bank1
 13124  0070  01B9               	clrf	BMP_readTemperature@tmp^(0+128)
 13125                           
 13126                           ;bmp280.c: 75: bool status;
 13127                           ;bmp280.c: 77: tmp=0x41;
 13128  0071  3041               	movlw	65
 13129  0072  00A9               	movwf	??_BMP_readTemperature^(0+128)
 13130  0073  0829               	movf	??_BMP_readTemperature^(0+128),w
 13131  0074  00B9               	movwf	BMP_readTemperature@tmp^(0+128)
 13132                           
 13133                           ;bmp280.c: 78: if(Diag_getTempSensorHealth()==0)
 13134  0075  319D  256A  3180   	fcall	_Diag_getTempSensorHealth
 13135  0078  3A00               	xorlw	0
 13136  0079  1D03               	skipz
 13137  007A  287E               	goto	l1022
 13138                           
 13139                           ;bmp280.c: 79: {
 13140                           ;bmp280.c: 80: BMP_init();
 13141  007B  3196  2627  3180   	fcall	_BMP_init
 13142  007E                     l1022:	
 13143                           
 13144                           ;bmp280.c: 81: }
 13145                           ;bmp280.c: 82: I2C_ByteWrite(0x76, &tmp, 0xF4);
 13146  007E  30B9               	movlw	(low (BMP_readTemperature@tmp| 0))& (0+255)
 13147  007F  0021               	movlb	1	; select bank1
 13148  0080  00A9               	movwf	??_BMP_readTemperature^(0+128)
 13149  0081  0829               	movf	??_BMP_readTemperature^(0+128),w
 13150  0082  0020               	movlb	0	; select bank0
 13151  0083  00AF               	movwf	I2C_ByteWrite@pBuffer
 13152  0084  30F4               	movlw	244
 13153  0085  0021               	movlb	1	; select bank1
 13154  0086  00AA               	movwf	(??_BMP_readTemperature+1)^(0+128)
 13155  0087  082A               	movf	(??_BMP_readTemperature+1)^(0+128),w
 13156  0088  0020               	movlb	0	; select bank0
 13157  0089  00B0               	movwf	I2C_ByteWrite@WriteAddr
 13158  008A  3076               	movlw	118
 13159  008B  3192  2295  3180   	fcall	_I2C_ByteWrite
 13160  008E                     l1023:	
 13161                           ;bmp280.c: 83: do
 13162                           
 13163                           
 13164                           ;bmp280.c: 84: {
 13165                           ;bmp280.c: 85: status=HMC5883L_ReadBits(0x76, 0xF3 , 3, 1, &tmp);
 13166  008E  30F3               	movlw	243
 13167  008F  0021               	movlb	1	; select bank1
 13168  0090  00A9               	movwf	??_BMP_readTemperature^(0+128)
 13169  0091  0829               	movf	??_BMP_readTemperature^(0+128),w
 13170  0092  0020               	movlb	0	; select bank0
 13171  0093  00C3               	movwf	HMC5883L_ReadBits@regAddr
 13172  0094  3003               	movlw	3
 13173  0095  0021               	movlb	1	; select bank1
 13174  0096  00AA               	movwf	(??_BMP_readTemperature+1)^(0+128)
 13175  0097  082A               	movf	(??_BMP_readTemperature+1)^(0+128),w
 13176  0098  0020               	movlb	0	; select bank0
 13177  0099  00C4               	movwf	HMC5883L_ReadBits@bitStart
 13178  009A  01C5               	clrf	HMC5883L_ReadBits@length
 13179  009B  0AC5               	incf	HMC5883L_ReadBits@length,f
 13180  009C  30B9               	movlw	(low (BMP_readTemperature@tmp| 0))& (0+255)
 13181  009D  0021               	movlb	1	; select bank1
 13182  009E  00AB               	movwf	(??_BMP_readTemperature+2)^(0+128)
 13183  009F  082B               	movf	(??_BMP_readTemperature+2)^(0+128),w
 13184  00A0  0020               	movlb	0	; select bank0
 13185  00A1  00C6               	movwf	HMC5883L_ReadBits@data
 13186  00A2  3076               	movlw	118
 13187  00A3  3193  238F  3180   	fcall	_HMC5883L_ReadBits
 13188  00A6  0021               	movlb	1	; select bank1
 13189  00A7  00AC               	movwf	(??_BMP_readTemperature+3)^(0+128)
 13190  00A8  082C               	movf	(??_BMP_readTemperature+3)^(0+128),w
 13191  00A9  00B8               	movwf	BMP_readTemperature@status^(0+128)
 13192                           
 13193                           ;bmp280.c: 86: } while(tmp==0 && status==1);
 13194  00AA  0839               	movf	BMP_readTemperature@tmp^(0+128),w
 13195  00AB  1903               	btfsc	3,2
 13196  00AC  0338               	decf	BMP_readTemperature@status^(0+128),w
 13197  00AD  1903               	btfsc	3,2
 13198  00AE  288E               	goto	l1023
 13199                           
 13200                           ;bmp280.c: 87: if(status==0)
 13201  00AF  0838               	movf	BMP_readTemperature@status^(0+128),w
 13202  00B0  1D03               	btfss	3,2
 13203  00B1  28BD               	goto	l6926
 13204                           
 13205                           ;bmp280.c: 88: {
 13206                           ;bmp280.c: 89: Diag_setTempSensorHealth(0);
 13207  00B2  3000               	movlw	0
 13208  00B3  319D  25BC         	fcall	_Diag_setTempSensorHealth
 13209                           
 13210                           ;bmp280.c: 90: return -55;
 13211  00B5  3000               	movlw	0
 13212  00B6  0021               	movlb	1	; select bank1
 13213  00B7  00A6               	movwf	?_BMP_readTemperature^(0+128)
 13214  00B8  305C               	movlw	92
 13215  00B9  00A7               	movwf	(?_BMP_readTemperature+1)^(0+128)
 13216  00BA  30C2               	movlw	194
 13217  00BB  00A8               	movwf	(?_BMP_readTemperature+2)^(0+128)
 13218  00BC  0008               	return
 13219  00BD                     l6926:	
 13220                           
 13221                           ;bmp280.c: 91: }
 13222                           ;bmp280.c: 93: if(I2C_BufferRead(0x76, data, 0xF7, 8)==0)
 13223  00BD  30C2               	movlw	low _data
 13224  00BE  0020               	movlb	0	; select bank0
 13225  00BF  00B1               	movwf	I2C_BufferRead@pBuffer
 13226  00C0  3001               	movlw	high _data
 13227  00C1  00B2               	movwf	I2C_BufferRead@pBuffer+1
 13228  00C2  30F7               	movlw	247
 13229  00C3  0021               	movlb	1	; select bank1
 13230  00C4  00A9               	movwf	??_BMP_readTemperature^(0+128)
 13231  00C5  0829               	movf	??_BMP_readTemperature^(0+128),w
 13232  00C6  0020               	movlb	0	; select bank0
 13233  00C7  00B3               	movwf	I2C_BufferRead@ReadAddr
 13234  00C8  3008               	movlw	8
 13235  00C9  00B4               	movwf	I2C_BufferRead@NumByteToRead
 13236  00CA  3000               	movlw	0
 13237  00CB  00B5               	movwf	I2C_BufferRead@NumByteToRead+1
 13238  00CC  3076               	movlw	118
 13239  00CD  3195  2564  3180   	fcall	_I2C_BufferRead
 13240  00D0  3A00               	xorlw	0
 13241  00D1  1D03               	skipz
 13242  00D2  28DE               	goto	l6934
 13243                           
 13244                           ;bmp280.c: 94: {
 13245                           ;bmp280.c: 95: Diag_setTempSensorHealth(0);
 13246  00D3  3000               	movlw	0
 13247  00D4  319D  25BC         	fcall	_Diag_setTempSensorHealth
 13248                           
 13249                           ;bmp280.c: 96: return -55;
 13250  00D6  3000               	movlw	0
 13251  00D7  0021               	movlb	1	; select bank1
 13252  00D8  00A6               	movwf	?_BMP_readTemperature^(0+128)
 13253  00D9  305C               	movlw	92
 13254  00DA  00A7               	movwf	(?_BMP_readTemperature+1)^(0+128)
 13255  00DB  30C2               	movlw	194
 13256  00DC  00A8               	movwf	(?_BMP_readTemperature+2)^(0+128)
 13257  00DD  0008               	return
 13258  00DE                     l6934:	
 13259                           
 13260                           ;bmp280.c: 97: }
 13261                           ;bmp280.c: 101: adc_t = (((long)(data[3] & 0xFF) * 65536) + ((long)(data[4] & 0xFF) * 25
      +                          6) + (long)(data[5] & 0xF0)) / 16;
 13262  00DE  3000               	movlw	0
 13263  00DF  0020               	movlb	0	; select bank0
 13264  00E0  00A4               	movwf	___aldiv@divisor+3
 13265  00E1  3000               	movlw	0
 13266  00E2  00A3               	movwf	___aldiv@divisor+2
 13267  00E3  3000               	movlw	0
 13268  00E4  00A2               	movwf	___aldiv@divisor+1
 13269  00E5  3010               	movlw	16
 13270  00E6  00A1               	movwf	___aldiv@divisor
 13271  00E7  0023               	movlb	3	; select bank3
 13272  00E8  0847               	movf	(_data^(0+384)+5),w
 13273  00E9  39F0               	andlw	240
 13274  00EA  0021               	movlb	1	; select bank1
 13275  00EB  00A9               	movwf	??_BMP_readTemperature^(0+128)
 13276  00EC  01AA               	clrf	(??_BMP_readTemperature^(0+128)+1)
 13277  00ED  01AB               	clrf	(??_BMP_readTemperature^(0+128)+2)
 13278  00EE  01AC               	clrf	(??_BMP_readTemperature^(0+128)+3)
 13279  00EF  0023               	movlb	3	; select bank3
 13280  00F0  0846               	movf	(_data^(0+384)+4),w
 13281  00F1  0021               	movlb	1	; select bank1
 13282  00F2  00AD               	movwf	(??_BMP_readTemperature+4)^(0+128)
 13283  00F3  01AE               	clrf	((??_BMP_readTemperature+4)^(0+128)+1)
 13284  00F4  01AF               	clrf	((??_BMP_readTemperature+4)^(0+128)+2)
 13285  00F5  01B0               	clrf	((??_BMP_readTemperature+4)^(0+128)+3)
 13286  00F6  3008               	movlw	8
 13287  00F7                     u7005:	
 13288  00F7  35AD               	lslf	(??_BMP_readTemperature+4)^(0+128),f
 13289  00F8  0DAE               	rlf	((??_BMP_readTemperature+4)^(0+128)+1),f
 13290  00F9  0DAF               	rlf	((??_BMP_readTemperature+4)^(0+128)+2),f
 13291  00FA  0DB0               	rlf	((??_BMP_readTemperature+4)^(0+128)+3),f
 13292  00FB  0B89               	decfsz	9,f
 13293  00FC  28F7               	goto	u7005
 13294  00FD  0023               	movlb	3	; select bank3
 13295  00FE  0845               	movf	(_data^(0+384)+3),w
 13296  00FF  0021               	movlb	1	; select bank1
 13297  0100  00B1               	movwf	(??_BMP_readTemperature+8)^(0+128)
 13298  0101  01B2               	clrf	((??_BMP_readTemperature+8)^(0+128)+1)
 13299  0102  01B3               	clrf	((??_BMP_readTemperature+8)^(0+128)+2)
 13300  0103  01B4               	clrf	((??_BMP_readTemperature+8)^(0+128)+3)
 13301  0104  3010               	movlw	16
 13302  0105                     u7015:	
 13303  0105  35B1               	lslf	(??_BMP_readTemperature+8)^(0+128),f
 13304  0106  0DB2               	rlf	((??_BMP_readTemperature+8)^(0+128)+1),f
 13305  0107  0DB3               	rlf	((??_BMP_readTemperature+8)^(0+128)+2),f
 13306  0108  0DB4               	rlf	((??_BMP_readTemperature+8)^(0+128)+3),f
 13307  0109  0B89               	decfsz	9,f
 13308  010A  2905               	goto	u7015
 13309  010B  0831               	movf	(??_BMP_readTemperature+8)^(0+128),w
 13310  010C  07AD               	addwf	(??_BMP_readTemperature+4)^(0+128),f
 13311  010D  0832               	movf	(??_BMP_readTemperature+9)^(0+128),w
 13312  010E  3DAE               	addwfc	((??_BMP_readTemperature+4)^(0+128)+1),f
 13313  010F  0833               	movf	(??_BMP_readTemperature+10)^(0+128),w
 13314  0110  3DAF               	addwfc	((??_BMP_readTemperature+4)^(0+128)+2),f
 13315  0111  0834               	movf	(??_BMP_readTemperature+11)^(0+128),w
 13316  0112  3DB0               	addwfc	((??_BMP_readTemperature+4)^(0+128)+3),f
 13317  0113  082D               	movf	(??_BMP_readTemperature+4)^(0+128),w
 13318  0114  07A9               	addwf	??_BMP_readTemperature^(0+128),f
 13319  0115  082E               	movf	(??_BMP_readTemperature+5)^(0+128),w
 13320  0116  3DAA               	addwfc	(??_BMP_readTemperature^(0+128)+1),f
 13321  0117  082F               	movf	(??_BMP_readTemperature+6)^(0+128),w
 13322  0118  3DAB               	addwfc	(??_BMP_readTemperature^(0+128)+2),f
 13323  0119  0830               	movf	(??_BMP_readTemperature+7)^(0+128),w
 13324  011A  3DAC               	addwfc	(??_BMP_readTemperature^(0+128)+3),f
 13325  011B  082C               	movf	(??_BMP_readTemperature+3)^(0+128),w
 13326  011C  0020               	movlb	0	; select bank0
 13327  011D  00A8               	movwf	___aldiv@dividend+3
 13328  011E  0021               	movlb	1	; select bank1
 13329  011F  082B               	movf	(??_BMP_readTemperature+2)^(0+128),w
 13330  0120  0020               	movlb	0	; select bank0
 13331  0121  00A7               	movwf	___aldiv@dividend+2
 13332  0122  0021               	movlb	1	; select bank1
 13333  0123  082A               	movf	(??_BMP_readTemperature+1)^(0+128),w
 13334  0124  0020               	movlb	0	; select bank0
 13335  0125  00A6               	movwf	___aldiv@dividend+1
 13336  0126  0021               	movlb	1	; select bank1
 13337  0127  0829               	movf	??_BMP_readTemperature^(0+128),w
 13338  0128  0020               	movlb	0	; select bank0
 13339  0129  00A5               	movwf	___aldiv@dividend
 13340  012A  3188  20A9  3180   	fcall	___aldiv
 13341  012D  0020               	movlb	0	; select bank0
 13342  012E  0824               	movf	?___aldiv+3,w
 13343  012F  0022               	movlb	2	; select bank2
 13344  0130  00AB               	movwf	(_adc_t+3)^(0+256)
 13345  0131  0020               	movlb	0	; select bank0
 13346  0132  0823               	movf	?___aldiv+2,w
 13347  0133  0022               	movlb	2	; select bank2
 13348  0134  00AA               	movwf	(_adc_t+2)^(0+256)
 13349  0135  0020               	movlb	0	; select bank0
 13350  0136  0822               	movf	?___aldiv+1,w
 13351  0137  0022               	movlb	2	; select bank2
 13352  0138  00A9               	movwf	(_adc_t+1)^(0+256)
 13353  0139  0020               	movlb	0	; select bank0
 13354  013A  0821               	movf	?___aldiv,w
 13355  013B  0022               	movlb	2	; select bank2
 13356  013C  00A8               	movwf	_adc_t^(0+256)
 13357                           
 13358                           ;bmp280.c: 104: var1 = (((double)adc_t) / 16384.0 - ((double)dig_T1) / 1024.0) * ((doubl
      +                          e)dig_T2);
 13359  013D  0855               	movf	(_dig_T2+1)^(0+256),w
 13360  013E  0020               	movlb	0	; select bank0
 13361  013F  00AA               	movwf	___awtoft@c+1
 13362  0140  0022               	movlb	2	; select bank2
 13363  0141  0854               	movf	_dig_T2^(0+256),w
 13364  0142  0020               	movlb	0	; select bank0
 13365  0143  00A9               	movwf	___awtoft@c
 13366  0144  3191  215D  3180   	fcall	___awtoft
 13367  0147  0020               	movlb	0	; select bank0
 13368  0148  0829               	movf	?___awtoft,w
 13369  0149  00C9               	movwf	___ftmul@f1
 13370  014A  082A               	movf	?___awtoft+1,w
 13371  014B  00CA               	movwf	___ftmul@f1+1
 13372  014C  082B               	movf	?___awtoft+2,w
 13373  014D  00CB               	movwf	___ftmul@f1+2
 13374  014E  0022               	movlb	2	; select bank2
 13375  014F  0857               	movf	(_dig_T1+1)^(0+256),w
 13376  0150  0020               	movlb	0	; select bank0
 13377  0151  00AA               	movwf	___lwtoft@c+1
 13378  0152  0022               	movlb	2	; select bank2
 13379  0153  0856               	movf	_dig_T1^(0+256),w
 13380  0154  0020               	movlb	0	; select bank0
 13381  0155  00A9               	movwf	___lwtoft@c
 13382  0156  319F  2715  3180   	fcall	___lwtoft
 13383  0159  0020               	movlb	0	; select bank0
 13384  015A  0829               	movf	?___lwtoft,w
 13385  015B  00B4               	movwf	___ftdiv@f1
 13386  015C  082A               	movf	?___lwtoft+1,w
 13387  015D  00B5               	movwf	___ftdiv@f1+1
 13388  015E  082B               	movf	?___lwtoft+2,w
 13389  015F  00B6               	movwf	___ftdiv@f1+2
 13390  0160  3000               	movlw	0
 13391  0161  00B1               	movwf	___ftdiv@f2
 13392  0162  3080               	movlw	128
 13393  0163  00B2               	movwf	___ftdiv@f2+1
 13394  0164  3044               	movlw	68
 13395  0165  00B3               	movwf	___ftdiv@f2+2
 13396  0166  318A  22EC  3180   	fcall	___ftdiv
 13397  0169  0020               	movlb	0	; select bank0
 13398  016A  0831               	movf	?___ftdiv,w
 13399  016B  00C1               	movwf	___ftneg@f1
 13400  016C  0832               	movf	?___ftdiv+1,w
 13401  016D  00C2               	movwf	___ftneg@f1+1
 13402  016E  0833               	movf	?___ftdiv+2,w
 13403  016F  00C3               	movwf	___ftneg@f1+2
 13404  0170  319D  25E5  3180   	fcall	___ftneg
 13405  0173  0020               	movlb	0	; select bank0
 13406  0174  0841               	movf	?___ftneg,w
 13407  0175  00D9               	movwf	___ftadd@f1
 13408  0176  0842               	movf	?___ftneg+1,w
 13409  0177  00DA               	movwf	___ftadd@f1+1
 13410  0178  0843               	movf	?___ftneg+2,w
 13411  0179  00DB               	movwf	___ftadd@f1+2
 13412  017A  3000               	movlw	0
 13413  017B  00B1               	movwf	___ftdiv@f2
 13414  017C  3080               	movlw	128
 13415  017D  00B2               	movwf	___ftdiv@f2+1
 13416  017E  3046               	movlw	70
 13417  017F  00B3               	movwf	___ftdiv@f2+2
 13418  0180  0022               	movlb	2	; select bank2
 13419  0181  082B               	movf	(_adc_t+3)^(0+256),w
 13420  0182  0020               	movlb	0	; select bank0
 13421  0183  00AC               	movwf	___altoft@c+3
 13422  0184  0022               	movlb	2	; select bank2
 13423  0185  082A               	movf	(_adc_t+2)^(0+256),w
 13424  0186  0020               	movlb	0	; select bank0
 13425  0187  00AB               	movwf	___altoft@c+2
 13426  0188  0022               	movlb	2	; select bank2
 13427  0189  0829               	movf	(_adc_t+1)^(0+256),w
 13428  018A  0020               	movlb	0	; select bank0
 13429  018B  00AA               	movwf	___altoft@c+1
 13430  018C  0022               	movlb	2	; select bank2
 13431  018D  0828               	movf	_adc_t^(0+256),w
 13432  018E  0020               	movlb	0	; select bank0
 13433  018F  00A9               	movwf	___altoft@c
 13434  0190  3193  230D  3180   	fcall	___altoft
 13435  0193  0020               	movlb	0	; select bank0
 13436  0194  0829               	movf	?___altoft,w
 13437  0195  00B4               	movwf	___ftdiv@f1
 13438  0196  082A               	movf	?___altoft+1,w
 13439  0197  00B5               	movwf	___ftdiv@f1+1
 13440  0198  082B               	movf	?___altoft+2,w
 13441  0199  00B6               	movwf	___ftdiv@f1+2
 13442  019A  318A  22EC  3180   	fcall	___ftdiv
 13443  019D  0020               	movlb	0	; select bank0
 13444  019E  0831               	movf	?___ftdiv,w
 13445  019F  00DC               	movwf	___ftadd@f2
 13446  01A0  0832               	movf	?___ftdiv+1,w
 13447  01A1  00DD               	movwf	___ftadd@f2+1
 13448  01A2  0833               	movf	?___ftdiv+2,w
 13449  01A3  00DE               	movwf	___ftadd@f2+2
 13450  01A4  318C  2449  3180   	fcall	___ftadd
 13451  01A7  0020               	movlb	0	; select bank0
 13452  01A8  0859               	movf	?___ftadd,w
 13453  01A9  00CC               	movwf	___ftmul@f2
 13454  01AA  085A               	movf	?___ftadd+1,w
 13455  01AB  00CD               	movwf	___ftmul@f2+1
 13456  01AC  085B               	movf	?___ftadd+2,w
 13457  01AD  00CE               	movwf	___ftmul@f2+2
 13458  01AE  318B  2395  3180   	fcall	___ftmul
 13459  01B1  0020               	movlb	0	; select bank0
 13460  01B2  0849               	movf	?___ftmul,w
 13461  01B3  0022               	movlb	2	; select bank2
 13462  01B4  00B2               	movwf	_var1^(0+256)
 13463  01B5  0020               	movlb	0	; select bank0
 13464  01B6  084A               	movf	?___ftmul+1,w
 13465  01B7  0022               	movlb	2	; select bank2
 13466  01B8  00B3               	movwf	(_var1+1)^(0+256)
 13467  01B9  0020               	movlb	0	; select bank0
 13468  01BA  084B               	movf	?___ftmul+2,w
 13469  01BB  0022               	movlb	2	; select bank2
 13470  01BC  00B4               	movwf	(_var1+2)^(0+256)
 13471                           
 13472                           ;bmp280.c: 105: var2 = ((((double)adc_t) / 131072.0 - ((double)dig_T1) / 8192.0) *
 13473                           ;bmp280.c: 106: (((double)adc_t) / 131072.0 - ((double)dig_T1) / 8192.0)) * ((double)dig
      +                          _T3);
 13474  01BD  0857               	movf	(_dig_T1+1)^(0+256),w
 13475  01BE  0020               	movlb	0	; select bank0
 13476  01BF  00AA               	movwf	___lwtoft@c+1
 13477  01C0  0022               	movlb	2	; select bank2
 13478  01C1  0856               	movf	_dig_T1^(0+256),w
 13479  01C2  0020               	movlb	0	; select bank0
 13480  01C3  00A9               	movwf	___lwtoft@c
 13481  01C4  319F  2715  3180   	fcall	___lwtoft
 13482  01C7  0020               	movlb	0	; select bank0
 13483  01C8  0829               	movf	?___lwtoft,w
 13484  01C9  00B4               	movwf	___ftdiv@f1
 13485  01CA  082A               	movf	?___lwtoft+1,w
 13486  01CB  00B5               	movwf	___ftdiv@f1+1
 13487  01CC  082B               	movf	?___lwtoft+2,w
 13488  01CD  00B6               	movwf	___ftdiv@f1+2
 13489  01CE  3000               	movlw	0
 13490  01CF  00B1               	movwf	___ftdiv@f2
 13491  01D0  3000               	movlw	0
 13492  01D1  00B2               	movwf	___ftdiv@f2+1
 13493  01D2  3046               	movlw	70
 13494  01D3  00B3               	movwf	___ftdiv@f2+2
 13495  01D4  318A  22EC  3180   	fcall	___ftdiv
 13496  01D7  0020               	movlb	0	; select bank0
 13497  01D8  0831               	movf	?___ftdiv,w
 13498  01D9  00C1               	movwf	___ftneg@f1
 13499  01DA  0832               	movf	?___ftdiv+1,w
 13500  01DB  00C2               	movwf	___ftneg@f1+1
 13501  01DC  0833               	movf	?___ftdiv+2,w
 13502  01DD  00C3               	movwf	___ftneg@f1+2
 13503  01DE  319D  25E5  3180   	fcall	___ftneg
 13504  01E1  0020               	movlb	0	; select bank0
 13505  01E2  0841               	movf	?___ftneg,w
 13506  01E3  00D9               	movwf	___ftadd@f1
 13507  01E4  0842               	movf	?___ftneg+1,w
 13508  01E5  00DA               	movwf	___ftadd@f1+1
 13509  01E6  0843               	movf	?___ftneg+2,w
 13510  01E7  00DB               	movwf	___ftadd@f1+2
 13511  01E8  3000               	movlw	0
 13512  01E9  00B1               	movwf	___ftdiv@f2
 13513  01EA  3000               	movlw	0
 13514  01EB  00B2               	movwf	___ftdiv@f2+1
 13515  01EC  3048               	movlw	72
 13516  01ED  00B3               	movwf	___ftdiv@f2+2
 13517  01EE  0022               	movlb	2	; select bank2
 13518  01EF  082B               	movf	(_adc_t+3)^(0+256),w
 13519  01F0  0020               	movlb	0	; select bank0
 13520  01F1  00AC               	movwf	___altoft@c+3
 13521  01F2  0022               	movlb	2	; select bank2
 13522  01F3  082A               	movf	(_adc_t+2)^(0+256),w
 13523  01F4  0020               	movlb	0	; select bank0
 13524  01F5  00AB               	movwf	___altoft@c+2
 13525  01F6  0022               	movlb	2	; select bank2
 13526  01F7  0829               	movf	(_adc_t+1)^(0+256),w
 13527  01F8  0020               	movlb	0	; select bank0
 13528  01F9  00AA               	movwf	___altoft@c+1
 13529  01FA  0022               	movlb	2	; select bank2
 13530  01FB  0828               	movf	_adc_t^(0+256),w
 13531  01FC  0020               	movlb	0	; select bank0
 13532  01FD  00A9               	movwf	___altoft@c
 13533  01FE  3193  230D  3180   	fcall	___altoft
 13534  0201  0020               	movlb	0	; select bank0
 13535  0202  0829               	movf	?___altoft,w
 13536  0203  00B4               	movwf	___ftdiv@f1
 13537  0204  082A               	movf	?___altoft+1,w
 13538  0205  00B5               	movwf	___ftdiv@f1+1
 13539  0206  082B               	movf	?___altoft+2,w
 13540  0207  00B6               	movwf	___ftdiv@f1+2
 13541  0208  318A  22EC  3180   	fcall	___ftdiv
 13542  020B  0020               	movlb	0	; select bank0
 13543  020C  0831               	movf	?___ftdiv,w
 13544  020D  00DC               	movwf	___ftadd@f2
 13545  020E  0832               	movf	?___ftdiv+1,w
 13546  020F  00DD               	movwf	___ftadd@f2+1
 13547  0210  0833               	movf	?___ftdiv+2,w
 13548  0211  00DE               	movwf	___ftadd@f2+2
 13549  0212  318C  2449  3180   	fcall	___ftadd
 13550  0215  0020               	movlb	0	; select bank0
 13551  0216  0859               	movf	?___ftadd,w
 13552  0217  00C9               	movwf	___ftmul@f1
 13553  0218  085A               	movf	?___ftadd+1,w
 13554  0219  00CA               	movwf	___ftmul@f1+1
 13555  021A  085B               	movf	?___ftadd+2,w
 13556  021B  00CB               	movwf	___ftmul@f1+2
 13557  021C  0022               	movlb	2	; select bank2
 13558  021D  0857               	movf	(_dig_T1+1)^(0+256),w
 13559  021E  0020               	movlb	0	; select bank0
 13560  021F  00AA               	movwf	___lwtoft@c+1
 13561  0220  0022               	movlb	2	; select bank2
 13562  0221  0856               	movf	_dig_T1^(0+256),w
 13563  0222  0020               	movlb	0	; select bank0
 13564  0223  00A9               	movwf	___lwtoft@c
 13565  0224  319F  2715  3180   	fcall	___lwtoft
 13566  0227  0020               	movlb	0	; select bank0
 13567  0228  0829               	movf	?___lwtoft,w
 13568  0229  00B4               	movwf	___ftdiv@f1
 13569  022A  082A               	movf	?___lwtoft+1,w
 13570  022B  00B5               	movwf	___ftdiv@f1+1
 13571  022C  082B               	movf	?___lwtoft+2,w
 13572  022D  00B6               	movwf	___ftdiv@f1+2
 13573  022E  3000               	movlw	0
 13574  022F  00B1               	movwf	___ftdiv@f2
 13575  0230  3000               	movlw	0
 13576  0231  00B2               	movwf	___ftdiv@f2+1
 13577  0232  3046               	movlw	70
 13578  0233  00B3               	movwf	___ftdiv@f2+2
 13579  0234  318A  22EC  3180   	fcall	___ftdiv
 13580  0237  0020               	movlb	0	; select bank0
 13581  0238  0831               	movf	?___ftdiv,w
 13582  0239  00C1               	movwf	___ftneg@f1
 13583  023A  0832               	movf	?___ftdiv+1,w
 13584  023B  00C2               	movwf	___ftneg@f1+1
 13585  023C  0833               	movf	?___ftdiv+2,w
 13586  023D  00C3               	movwf	___ftneg@f1+2
 13587  023E  319D  25E5  3180   	fcall	___ftneg
 13588  0241  0020               	movlb	0	; select bank0
 13589  0242  0841               	movf	?___ftneg,w
 13590  0243  00D9               	movwf	___ftadd@f1
 13591  0244  0842               	movf	?___ftneg+1,w
 13592  0245  00DA               	movwf	___ftadd@f1+1
 13593  0246  0843               	movf	?___ftneg+2,w
 13594  0247  00DB               	movwf	___ftadd@f1+2
 13595  0248  3000               	movlw	0
 13596  0249  00B1               	movwf	___ftdiv@f2
 13597  024A  3000               	movlw	0
 13598  024B  00B2               	movwf	___ftdiv@f2+1
 13599  024C  3048               	movlw	72
 13600  024D  00B3               	movwf	___ftdiv@f2+2
 13601  024E  0022               	movlb	2	; select bank2
 13602  024F  082B               	movf	(_adc_t+3)^(0+256),w
 13603  0250  0020               	movlb	0	; select bank0
 13604  0251  00AC               	movwf	___altoft@c+3
 13605  0252  0022               	movlb	2	; select bank2
 13606  0253  082A               	movf	(_adc_t+2)^(0+256),w
 13607  0254  0020               	movlb	0	; select bank0
 13608  0255  00AB               	movwf	___altoft@c+2
 13609  0256  0022               	movlb	2	; select bank2
 13610  0257  0829               	movf	(_adc_t+1)^(0+256),w
 13611  0258  0020               	movlb	0	; select bank0
 13612  0259  00AA               	movwf	___altoft@c+1
 13613  025A  0022               	movlb	2	; select bank2
 13614  025B  0828               	movf	_adc_t^(0+256),w
 13615  025C  0020               	movlb	0	; select bank0
 13616  025D  00A9               	movwf	___altoft@c
 13617  025E  3193  230D  3180   	fcall	___altoft
 13618  0261  0020               	movlb	0	; select bank0
 13619  0262  0829               	movf	?___altoft,w
 13620  0263  00B4               	movwf	___ftdiv@f1
 13621  0264  082A               	movf	?___altoft+1,w
 13622  0265  00B5               	movwf	___ftdiv@f1+1
 13623  0266  082B               	movf	?___altoft+2,w
 13624  0267  00B6               	movwf	___ftdiv@f1+2
 13625  0268  318A  22EC  3180   	fcall	___ftdiv
 13626  026B  0020               	movlb	0	; select bank0
 13627  026C  0831               	movf	?___ftdiv,w
 13628  026D  00DC               	movwf	___ftadd@f2
 13629  026E  0832               	movf	?___ftdiv+1,w
 13630  026F  00DD               	movwf	___ftadd@f2+1
 13631  0270  0833               	movf	?___ftdiv+2,w
 13632  0271  00DE               	movwf	___ftadd@f2+2
 13633  0272  318C  2449  3180   	fcall	___ftadd
 13634  0275  0020               	movlb	0	; select bank0
 13635  0276  0859               	movf	?___ftadd,w
 13636  0277  00CC               	movwf	___ftmul@f2
 13637  0278  085A               	movf	?___ftadd+1,w
 13638  0279  00CD               	movwf	___ftmul@f2+1
 13639  027A  085B               	movf	?___ftadd+2,w
 13640  027B  00CE               	movwf	___ftmul@f2+2
 13641  027C  318B  2395  3180   	fcall	___ftmul
 13642  027F  0020               	movlb	0	; select bank0
 13643  0280  0849               	movf	?___ftmul,w
 13644  0281  0021               	movlb	1	; select bank1
 13645  0282  00B5               	movwf	_BMP_readTemperature$2611^(0+128)
 13646  0283  0020               	movlb	0	; select bank0
 13647  0284  084A               	movf	?___ftmul+1,w
 13648  0285  0021               	movlb	1	; select bank1
 13649  0286  00B6               	movwf	(_BMP_readTemperature$2611+1)^(0+128)
 13650  0287  0020               	movlb	0	; select bank0
 13651  0288  084B               	movf	?___ftmul+2,w
 13652  0289  0021               	movlb	1	; select bank1
 13653  028A  00B7               	movwf	(_BMP_readTemperature$2611+2)^(0+128)
 13654                           
 13655                           ;bmp280.c: 105: var2 = ((((double)adc_t) / 131072.0 - ((double)dig_T1) / 8192.0) *
 13656                           ;bmp280.c: 106: (((double)adc_t) / 131072.0 - ((double)dig_T1) / 8192.0)) * ((double)dig
      +                          _T3);
 13657  028B  0022               	movlb	2	; select bank2
 13658  028C  0853               	movf	(_dig_T3+1)^(0+256),w
 13659  028D  0020               	movlb	0	; select bank0
 13660  028E  00AA               	movwf	___awtoft@c+1
 13661  028F  0022               	movlb	2	; select bank2
 13662  0290  0852               	movf	_dig_T3^(0+256),w
 13663  0291  0020               	movlb	0	; select bank0
 13664  0292  00A9               	movwf	___awtoft@c
 13665  0293  3191  215D  3180   	fcall	___awtoft
 13666  0296  0020               	movlb	0	; select bank0
 13667  0297  0829               	movf	?___awtoft,w
 13668  0298  00C9               	movwf	___ftmul@f1
 13669  0299  082A               	movf	?___awtoft+1,w
 13670  029A  00CA               	movwf	___ftmul@f1+1
 13671  029B  082B               	movf	?___awtoft+2,w
 13672  029C  00CB               	movwf	___ftmul@f1+2
 13673  029D  0021               	movlb	1	; select bank1
 13674  029E  0835               	movf	_BMP_readTemperature$2611^(0+128),w
 13675  029F  0020               	movlb	0	; select bank0
 13676  02A0  00CC               	movwf	___ftmul@f2
 13677  02A1  0021               	movlb	1	; select bank1
 13678  02A2  0836               	movf	(_BMP_readTemperature$2611+1)^(0+128),w
 13679  02A3  0020               	movlb	0	; select bank0
 13680  02A4  00CD               	movwf	___ftmul@f2+1
 13681  02A5  0021               	movlb	1	; select bank1
 13682  02A6  0837               	movf	(_BMP_readTemperature$2611+2)^(0+128),w
 13683  02A7  0020               	movlb	0	; select bank0
 13684  02A8  00CE               	movwf	___ftmul@f2+2
 13685  02A9  318B  2395  3180   	fcall	___ftmul
 13686  02AC  0020               	movlb	0	; select bank0
 13687  02AD  0849               	movf	?___ftmul,w
 13688  02AE  0022               	movlb	2	; select bank2
 13689  02AF  00AF               	movwf	_var2^(0+256)
 13690  02B0  0020               	movlb	0	; select bank0
 13691  02B1  084A               	movf	?___ftmul+1,w
 13692  02B2  0022               	movlb	2	; select bank2
 13693  02B3  00B0               	movwf	(_var2+1)^(0+256)
 13694  02B4  0020               	movlb	0	; select bank0
 13695  02B5  084B               	movf	?___ftmul+2,w
 13696  02B6  0022               	movlb	2	; select bank2
 13697  02B7  00B1               	movwf	(_var2+2)^(0+256)
 13698                           
 13699                           ;bmp280.c: 107: t_fine = (long)(var1 + var2);
 13700  02B8  0832               	movf	_var1^(0+256),w
 13701  02B9  0020               	movlb	0	; select bank0
 13702  02BA  00DC               	movwf	___ftadd@f2
 13703  02BB  0022               	movlb	2	; select bank2
 13704  02BC  0833               	movf	(_var1+1)^(0+256),w
 13705  02BD  0020               	movlb	0	; select bank0
 13706  02BE  00DD               	movwf	___ftadd@f2+1
 13707  02BF  0022               	movlb	2	; select bank2
 13708  02C0  0834               	movf	(_var1+2)^(0+256),w
 13709  02C1  0020               	movlb	0	; select bank0
 13710  02C2  00DE               	movwf	___ftadd@f2+2
 13711  02C3  0022               	movlb	2	; select bank2
 13712  02C4  082F               	movf	_var2^(0+256),w
 13713  02C5  0020               	movlb	0	; select bank0
 13714  02C6  00D9               	movwf	___ftadd@f1
 13715  02C7  0022               	movlb	2	; select bank2
 13716  02C8  0830               	movf	(_var2+1)^(0+256),w
 13717  02C9  0020               	movlb	0	; select bank0
 13718  02CA  00DA               	movwf	___ftadd@f1+1
 13719  02CB  0022               	movlb	2	; select bank2
 13720  02CC  0831               	movf	(_var2+2)^(0+256),w
 13721  02CD  0020               	movlb	0	; select bank0
 13722  02CE  00DB               	movwf	___ftadd@f1+2
 13723  02CF  318C  2449  3180   	fcall	___ftadd
 13724  02D2  0020               	movlb	0	; select bank0
 13725  02D3  0859               	movf	?___ftadd,w
 13726  02D4  00E6               	movwf	___fttol@f1
 13727  02D5  085A               	movf	?___ftadd+1,w
 13728  02D6  00E7               	movwf	___fttol@f1+1
 13729  02D7  085B               	movf	?___ftadd+2,w
 13730  02D8  00E8               	movwf	___fttol@f1+2
 13731  02D9  318A  224D  3180   	fcall	___fttol
 13732  02DC  0020               	movlb	0	; select bank0
 13733  02DD  0869               	movf	?___fttol+3,w
 13734  02DE  00AC               	movwf	___altoft@c+3
 13735  02DF  0868               	movf	?___fttol+2,w
 13736  02E0  00AB               	movwf	___altoft@c+2
 13737  02E1  0867               	movf	?___fttol+1,w
 13738  02E2  00AA               	movwf	___altoft@c+1
 13739  02E3  0866               	movf	?___fttol,w
 13740  02E4  00A9               	movwf	___altoft@c
 13741  02E5  3193  230D  3180   	fcall	___altoft
 13742  02E8  0020               	movlb	0	; select bank0
 13743  02E9  0829               	movf	?___altoft,w
 13744  02EA  0023               	movlb	3	; select bank3
 13745  02EB  00A7               	movwf	_t_fine^(0+384)
 13746  02EC  0020               	movlb	0	; select bank0
 13747  02ED  082A               	movf	?___altoft+1,w
 13748  02EE  0023               	movlb	3	; select bank3
 13749  02EF  00A8               	movwf	(_t_fine+1)^(0+384)
 13750  02F0  0020               	movlb	0	; select bank0
 13751  02F1  082B               	movf	?___altoft+2,w
 13752  02F2  0023               	movlb	3	; select bank3
 13753  02F3  00A9               	movwf	(_t_fine+2)^(0+384)
 13754                           
 13755                           ;bmp280.c: 108: cTemp = (var1 + var2) / 5120.0;
 13756  02F4  3000               	movlw	0
 13757  02F5  0020               	movlb	0	; select bank0
 13758  02F6  00B1               	movwf	___ftdiv@f2
 13759  02F7  30A0               	movlw	160
 13760  02F8  00B2               	movwf	___ftdiv@f2+1
 13761  02F9  3045               	movlw	69
 13762  02FA  00B3               	movwf	___ftdiv@f2+2
 13763  02FB  0022               	movlb	2	; select bank2
 13764  02FC  082F               	movf	_var2^(0+256),w
 13765  02FD  0020               	movlb	0	; select bank0
 13766  02FE  00D9               	movwf	___ftadd@f1
 13767  02FF  0022               	movlb	2	; select bank2
 13768  0300  0830               	movf	(_var2+1)^(0+256),w
 13769  0301  0020               	movlb	0	; select bank0
 13770  0302  00DA               	movwf	___ftadd@f1+1
 13771  0303  0022               	movlb	2	; select bank2
 13772  0304  0831               	movf	(_var2+2)^(0+256),w
 13773  0305  0020               	movlb	0	; select bank0
 13774  0306  00DB               	movwf	___ftadd@f1+2
 13775  0307  0022               	movlb	2	; select bank2
 13776  0308  0832               	movf	_var1^(0+256),w
 13777  0309  0020               	movlb	0	; select bank0
 13778  030A  00DC               	movwf	___ftadd@f2
 13779  030B  0022               	movlb	2	; select bank2
 13780  030C  0833               	movf	(_var1+1)^(0+256),w
 13781  030D  0020               	movlb	0	; select bank0
 13782  030E  00DD               	movwf	___ftadd@f2+1
 13783  030F  0022               	movlb	2	; select bank2
 13784  0310  0834               	movf	(_var1+2)^(0+256),w
 13785  0311  0020               	movlb	0	; select bank0
 13786  0312  00DE               	movwf	___ftadd@f2+2
 13787  0313  318C  2449  3180   	fcall	___ftadd
 13788  0316  0020               	movlb	0	; select bank0
 13789  0317  0859               	movf	?___ftadd,w
 13790  0318  00B4               	movwf	___ftdiv@f1
 13791  0319  085A               	movf	?___ftadd+1,w
 13792  031A  00B5               	movwf	___ftdiv@f1+1
 13793  031B  085B               	movf	?___ftadd+2,w
 13794  031C  00B6               	movwf	___ftdiv@f1+2
 13795  031D  318A  22EC  3180   	fcall	___ftdiv
 13796  0320  0020               	movlb	0	; select bank0
 13797  0321  0831               	movf	?___ftdiv,w
 13798  0322  0022               	movlb	2	; select bank2
 13799  0323  00AC               	movwf	_cTemp^(0+256)
 13800  0324  0020               	movlb	0	; select bank0
 13801  0325  0832               	movf	?___ftdiv+1,w
 13802  0326  0022               	movlb	2	; select bank2
 13803  0327  00AD               	movwf	(_cTemp+1)^(0+256)
 13804  0328  0020               	movlb	0	; select bank0
 13805  0329  0833               	movf	?___ftdiv+2,w
 13806  032A  0022               	movlb	2	; select bank2
 13807  032B  00AE               	movwf	(_cTemp+2)^(0+256)
 13808                           
 13809                           ;bmp280.c: 123: Diag_setTempSensorHealth(1);
 13810  032C  3001               	movlw	1
 13811  032D  319D  25BC         	fcall	_Diag_setTempSensorHealth
 13812                           
 13813                           ;bmp280.c: 124: return(cTemp);
 13814  032F  0022               	movlb	2	; select bank2
 13815  0330  082C               	movf	_cTemp^(0+256),w
 13816  0331  0021               	movlb	1	; select bank1
 13817  0332  00A6               	movwf	?_BMP_readTemperature^(0+128)
 13818  0333  0022               	movlb	2	; select bank2
 13819  0334  082D               	movf	(_cTemp+1)^(0+256),w
 13820  0335  0021               	movlb	1	; select bank1
 13821  0336  00A7               	movwf	(?_BMP_readTemperature+1)^(0+128)
 13822  0337  0022               	movlb	2	; select bank2
 13823  0338  082E               	movf	(_cTemp+2)^(0+256),w
 13824  0339  0021               	movlb	1	; select bank1
 13825  033A  00A8               	movwf	(?_BMP_readTemperature+2)^(0+128)
 13826  033B  0008               	return
 13827  033C                     __end_of_BMP_readTemperature:	
 13828                           
 13829                           	psect	text72
 13830  1F15                     __ptext72:	
 13831 ;; *************** function ___lwtoft *****************
 13832 ;; Defined at:
 13833 ;;		line 28 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\lwtoft.c"
 13834 ;; Parameters:    Size  Location     Type
 13835 ;;  c               2    9[BANK0 ] unsigned int 
 13836 ;; Auto vars:     Size  Location     Type
 13837 ;;		None
 13838 ;; Return value:  Size  Location     Type
 13839 ;;                  3    9[BANK0 ] float 
 13840 ;; Registers used:
 13841 ;;		wreg, status,2, status,0, pclath, cstack
 13842 ;; Tracked objects:
 13843 ;;		On entry : 0/0
 13844 ;;		On exit  : 0/0
 13845 ;;		Unchanged: 0/0
 13846 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13847 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13848 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13849 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13850 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13851 ;;Total ram usage:        4 bytes
 13852 ;; Hardware stack levels used:    1
 13853 ;; Hardware stack levels required when called:    5
 13854 ;; This function calls:
 13855 ;;		___ftpack
 13856 ;; This function is called by:
 13857 ;;		_Sensor_getSupplyVoltage
 13858 ;;		_BMP_readTemperature
 13859 ;; This function uses a non-reentrant model
 13860 ;;
 13861                           
 13862                           
 13863                           ;psect for function ___lwtoft
 13864  1F15                     ___lwtoft:	
 13865                           
 13866                           ;incstack = 0
 13867                           ; Regs used in ___lwtoft: [wreg+status,2+status,0+pclath+cstack]
 13868  1F15  0020               	movlb	0	; select bank0
 13869  1F16  0829               	movf	___lwtoft@c,w
 13870  1F17  00A1               	movwf	___ftpack@arg
 13871  1F18  082A               	movf	___lwtoft@c+1,w
 13872  1F19  00A2               	movwf	___ftpack@arg+1
 13873  1F1A  01A3               	clrf	___ftpack@arg+2
 13874  1F1B  308E               	movlw	142
 13875  1F1C  00AC               	movwf	??___lwtoft
 13876  1F1D  082C               	movf	??___lwtoft,w
 13877  1F1E  00A4               	movwf	___ftpack@exp
 13878  1F1F  01A5               	clrf	___ftpack@sign
 13879  1F20  3195  25C2         	fcall	___ftpack
 13880  1F22  0020               	movlb	0	; select bank0
 13881  1F23  0821               	movf	?___ftpack,w
 13882  1F24  00A9               	movwf	?___lwtoft
 13883  1F25  0822               	movf	?___ftpack+1,w
 13884  1F26  00AA               	movwf	?___lwtoft+1
 13885  1F27  0823               	movf	?___ftpack+2,w
 13886  1F28  00AB               	movwf	?___lwtoft+2
 13887  1F29  0008               	return
 13888  1F2A                     __end_of___lwtoft:	
 13889                           
 13890                           	psect	text73
 13891  0A4D                     __ptext73:	
 13892 ;; *************** function ___fttol *****************
 13893 ;; Defined at:
 13894 ;;		line 44 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\fttol.c"
 13895 ;; Parameters:    Size  Location     Type
 13896 ;;  f1              3   70[BANK0 ] float 
 13897 ;; Auto vars:     Size  Location     Type
 13898 ;;  lval            4    1[BANK1 ] unsigned long 
 13899 ;;  exp1            1    5[BANK1 ] unsigned char 
 13900 ;;  sign1           1    0[BANK1 ] unsigned char 
 13901 ;; Return value:  Size  Location     Type
 13902 ;;                  4   70[BANK0 ] long 
 13903 ;; Registers used:
 13904 ;;		wreg, status,2, status,0
 13905 ;; Tracked objects:
 13906 ;;		On entry : 0/0
 13907 ;;		On exit  : 0/0
 13908 ;;		Unchanged: 0/0
 13909 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13910 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13911 ;;      Locals:         0       0       6       0       0       0       0       0       0       0       0       0       
      +0       0
 13912 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13913 ;;      Totals:         0       8       6       0       0       0       0       0       0       0       0       0       
      +0       0
 13914 ;;Total ram usage:       14 bytes
 13915 ;; Hardware stack levels used:    1
 13916 ;; Hardware stack levels required when called:    4
 13917 ;; This function calls:
 13918 ;;		Nothing
 13919 ;; This function is called by:
 13920 ;;		_HMC5883L_GetCompassDirection
 13921 ;;		_BMP_readTemperature
 13922 ;;		_Wireless_packageData
 13923 ;; This function uses a non-reentrant model
 13924 ;;
 13925                           
 13926                           
 13927                           ;psect for function ___fttol
 13928  0A4D                     ___fttol:	
 13929                           
 13930                           ;incstack = 0
 13931                           ; Regs used in ___fttol: [wreg+status,2+status,0]
 13932  0A4D  0020               	movlb	0	; select bank0
 13933  0A4E  0866               	movf	___fttol@f1,w
 13934  0A4F  00EA               	movwf	??___fttol
 13935  0A50  0867               	movf	___fttol@f1+1,w
 13936  0A51  00EB               	movwf	??___fttol+1
 13937  0A52  0868               	movf	___fttol@f1+2,w
 13938  0A53  00EC               	movwf	??___fttol+2
 13939  0A54  1003               	clrc
 13940  0A55  0D6B               	rlf	??___fttol+1,w
 13941  0A56  0D6C               	rlf	??___fttol+2,w
 13942  0A57  00ED               	movwf	??___fttol+3
 13943  0A58  086D               	movf	??___fttol+3,w
 13944  0A59  0021               	movlb	1	; select bank1
 13945  0A5A  00A5               	movwf	___fttol@exp1^(0+128)
 13946  0A5B  0825               	movf	___fttol@exp1^(0+128),w
 13947  0A5C  1D03               	btfss	3,2
 13948  0A5D  2A68               	goto	l6382
 13949  0A5E  3000               	movlw	0
 13950  0A5F  0020               	movlb	0	; select bank0
 13951  0A60  00E9               	movwf	?___fttol+3
 13952  0A61  3000               	movlw	0
 13953  0A62  00E8               	movwf	?___fttol+2
 13954  0A63  3000               	movlw	0
 13955  0A64  00E7               	movwf	?___fttol+1
 13956  0A65  3000               	movlw	0
 13957  0A66  00E6               	movwf	?___fttol
 13958  0A67  0008               	return
 13959  0A68                     l6382:	
 13960  0A68  0020               	movlb	0	; select bank0
 13961  0A69  0866               	movf	___fttol@f1,w
 13962  0A6A  00EA               	movwf	??___fttol
 13963  0A6B  0867               	movf	___fttol@f1+1,w
 13964  0A6C  00EB               	movwf	??___fttol+1
 13965  0A6D  0868               	movf	___fttol@f1+2,w
 13966  0A6E  00EC               	movwf	??___fttol+2
 13967  0A6F  3017               	movlw	23
 13968  0A70                     u6375:	
 13969  0A70  36EC               	lsrf	??___fttol+2,f
 13970  0A71  0CEB               	rrf	??___fttol+1,f
 13971  0A72  0CEA               	rrf	??___fttol,f
 13972  0A73  0B89               	decfsz	9,f
 13973  0A74  2A70               	goto	u6375
 13974  0A75  086A               	movf	??___fttol,w
 13975  0A76  00ED               	movwf	??___fttol+3
 13976  0A77  086D               	movf	??___fttol+3,w
 13977  0A78  0021               	movlb	1	; select bank1
 13978  0A79  00A0               	movwf	___fttol@sign1^(0+128)
 13979  0A7A  0020               	movlb	0	; select bank0
 13980  0A7B  17E7               	bsf	___fttol@f1+1,7
 13981  0A7C  30FF               	movlw	255
 13982  0A7D  05E6               	andwf	___fttol@f1,f
 13983  0A7E  30FF               	movlw	255
 13984  0A7F  05E7               	andwf	___fttol@f1+1,f
 13985  0A80  3000               	movlw	0
 13986  0A81  05E8               	andwf	___fttol@f1+2,f
 13987  0A82  0866               	movf	___fttol@f1,w
 13988  0A83  0021               	movlb	1	; select bank1
 13989  0A84  00A1               	movwf	___fttol@lval^(0+128)
 13990  0A85  0020               	movlb	0	; select bank0
 13991  0A86  0867               	movf	___fttol@f1+1,w
 13992  0A87  0021               	movlb	1	; select bank1
 13993  0A88  00A2               	movwf	(___fttol@lval^(0+128)+1)
 13994  0A89  0020               	movlb	0	; select bank0
 13995  0A8A  0868               	movf	___fttol@f1+2,w
 13996  0A8B  0021               	movlb	1	; select bank1
 13997  0A8C  00A3               	movwf	(___fttol@lval^(0+128)+2)
 13998  0A8D  01A4               	clrf	(___fttol@lval^(0+128)+3)
 13999  0A8E  308E               	movlw	142
 14000  0A8F  02A5               	subwf	___fttol@exp1^(0+128),f
 14001  0A90  1FA5               	btfss	___fttol@exp1^(0+128),7
 14002  0A91  2AB2               	goto	l6402
 14003  0A92  0825               	movf	___fttol@exp1^(0+128),w
 14004  0A93  3A80               	xorlw	128
 14005  0A94  3E8F               	addlw	143
 14006  0A95  1803               	skipnc
 14007  0A96  2AA1               	goto	l6400
 14008  0A97  3000               	movlw	0
 14009  0A98  0020               	movlb	0	; select bank0
 14010  0A99  00E9               	movwf	?___fttol+3
 14011  0A9A  3000               	movlw	0
 14012  0A9B  00E8               	movwf	?___fttol+2
 14013  0A9C  3000               	movlw	0
 14014  0A9D  00E7               	movwf	?___fttol+1
 14015  0A9E  3000               	movlw	0
 14016  0A9F  00E6               	movwf	?___fttol
 14017  0AA0  0008               	return
 14018  0AA1                     l6400:	
 14019  0AA1  3001               	movlw	1
 14020  0AA2                     u6405:	
 14021  0AA2  0021               	movlb	1	; select bank1
 14022  0AA3  36A4               	lsrf	(___fttol@lval+3)^(0+128),f
 14023  0AA4  0CA3               	rrf	(___fttol@lval+2)^(0+128),f
 14024  0AA5  0CA2               	rrf	(___fttol@lval+1)^(0+128),f
 14025  0AA6  0CA1               	rrf	___fttol@lval^(0+128),f
 14026  0AA7  0B89               	decfsz	9,f
 14027  0AA8  2AA2               	goto	u6405
 14028  0AA9  3001               	movlw	1
 14029  0AAA  0020               	movlb	0	; select bank0
 14030  0AAB  00EA               	movwf	??___fttol
 14031  0AAC  086A               	movf	??___fttol,w
 14032  0AAD  0021               	movlb	1	; select bank1
 14033  0AAE  07A5               	addwf	___fttol@exp1^(0+128),f
 14034  0AAF  1903               	btfsc	3,2
 14035  0AB0  2ACE               	goto	l6410
 14036  0AB1  2AA1               	goto	l6400
 14037  0AB2                     l6402:	
 14038  0AB2  3018               	movlw	24
 14039  0AB3  0225               	subwf	___fttol@exp1^(0+128),w
 14040  0AB4  1C03               	skipc
 14041  0AB5  2ACA               	goto	l1596
 14042  0AB6  3000               	movlw	0
 14043  0AB7  0020               	movlb	0	; select bank0
 14044  0AB8  00E9               	movwf	?___fttol+3
 14045  0AB9  3000               	movlw	0
 14046  0ABA  00E8               	movwf	?___fttol+2
 14047  0ABB  3000               	movlw	0
 14048  0ABC  00E7               	movwf	?___fttol+1
 14049  0ABD  3000               	movlw	0
 14050  0ABE  00E6               	movwf	?___fttol
 14051  0ABF  0008               	return
 14052  0AC0                     l6408:	
 14053  0AC0  3001               	movlw	1
 14054  0AC1                     u6435:	
 14055  0AC1  0021               	movlb	1	; select bank1
 14056  0AC2  35A1               	lslf	___fttol@lval^(0+128),f
 14057  0AC3  0DA2               	rlf	(___fttol@lval+1)^(0+128),f
 14058  0AC4  0DA3               	rlf	(___fttol@lval+2)^(0+128),f
 14059  0AC5  0DA4               	rlf	(___fttol@lval+3)^(0+128),f
 14060  0AC6  0B89               	decfsz	9,f
 14061  0AC7  2AC1               	goto	u6435
 14062  0AC8  3001               	movlw	1
 14063  0AC9  02A5               	subwf	___fttol@exp1^(0+128),f
 14064  0ACA                     l1596:	
 14065  0ACA  0021               	movlb	1	; select bank1
 14066  0ACB  0825               	movf	___fttol@exp1^(0+128),w
 14067  0ACC  1D03               	btfss	3,2
 14068  0ACD  2AC0               	goto	l6408
 14069  0ACE                     l6410:	
 14070  0ACE  0820               	movf	___fttol@sign1^(0+128),w
 14071  0ACF  1903               	btfsc	3,2
 14072  0AD0  2ADC               	goto	l6414
 14073  0AD1  09A1               	comf	___fttol@lval^(0+128),f
 14074  0AD2  09A2               	comf	(___fttol@lval+1)^(0+128),f
 14075  0AD3  09A3               	comf	(___fttol@lval+2)^(0+128),f
 14076  0AD4  09A4               	comf	(___fttol@lval+3)^(0+128),f
 14077  0AD5  0AA1               	incf	___fttol@lval^(0+128),f
 14078  0AD6  1903               	skipnz
 14079  0AD7  0AA2               	incf	(___fttol@lval+1)^(0+128),f
 14080  0AD8  1903               	skipnz
 14081  0AD9  0AA3               	incf	(___fttol@lval+2)^(0+128),f
 14082  0ADA  1903               	skipnz
 14083  0ADB  0AA4               	incf	(___fttol@lval+3)^(0+128),f
 14084  0ADC                     l6414:	
 14085  0ADC  0824               	movf	(___fttol@lval+3)^(0+128),w
 14086  0ADD  0020               	movlb	0	; select bank0
 14087  0ADE  00E9               	movwf	?___fttol+3
 14088  0ADF  0021               	movlb	1	; select bank1
 14089  0AE0  0823               	movf	(___fttol@lval+2)^(0+128),w
 14090  0AE1  0020               	movlb	0	; select bank0
 14091  0AE2  00E8               	movwf	?___fttol+2
 14092  0AE3  0021               	movlb	1	; select bank1
 14093  0AE4  0822               	movf	(___fttol@lval+1)^(0+128),w
 14094  0AE5  0020               	movlb	0	; select bank0
 14095  0AE6  00E7               	movwf	?___fttol+1
 14096  0AE7  0021               	movlb	1	; select bank1
 14097  0AE8  0821               	movf	___fttol@lval^(0+128),w
 14098  0AE9  0020               	movlb	0	; select bank0
 14099  0AEA  00E6               	movwf	?___fttol
 14100  0AEB  0008               	return
 14101  0AEC                     __end_of___fttol:	
 14102                           
 14103                           	psect	text74
 14104  1DE5                     __ptext74:	
 14105 ;; *************** function ___ftneg *****************
 14106 ;; Defined at:
 14107 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\ftneg.c"
 14108 ;; Parameters:    Size  Location     Type
 14109 ;;  f1              3   33[BANK0 ] float 
 14110 ;; Auto vars:     Size  Location     Type
 14111 ;;		None
 14112 ;; Return value:  Size  Location     Type
 14113 ;;                  3   33[BANK0 ] float 
 14114 ;; Registers used:
 14115 ;;		wreg
 14116 ;; Tracked objects:
 14117 ;;		On entry : 0/0
 14118 ;;		On exit  : 0/0
 14119 ;;		Unchanged: 0/0
 14120 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14121 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14122 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14123 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14124 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14125 ;;Total ram usage:        3 bytes
 14126 ;; Hardware stack levels used:    1
 14127 ;; Hardware stack levels required when called:    4
 14128 ;; This function calls:
 14129 ;;		Nothing
 14130 ;; This function is called by:
 14131 ;;		_BMP_readTemperature
 14132 ;;		_atan2
 14133 ;;		_fabs
 14134 ;;		_atan
 14135 ;; This function uses a non-reentrant model
 14136 ;;
 14137                           
 14138                           
 14139                           ;psect for function ___ftneg
 14140  1DE5                     ___ftneg:	
 14141                           
 14142                           ;incstack = 0
 14143                           ; Regs used in ___ftneg: [wreg]
 14144  1DE5  0020               	movlb	0	; select bank0
 14145  1DE6  0843               	movf	___ftneg@f1+2,w
 14146  1DE7  0442               	iorwf	___ftneg@f1+1,w
 14147  1DE8  0441               	iorwf	___ftneg@f1,w
 14148  1DE9  1903               	skipnz
 14149  1DEA  0008               	return
 14150  1DEB  3080               	movlw	128
 14151  1DEC  06C3               	xorwf	___ftneg@f1+2,f
 14152  1DED  0008               	return
 14153  1DEE                     __end_of___ftneg:	
 14154                           
 14155                           	psect	text75
 14156  0B95                     __ptext75:	
 14157 ;; *************** function ___ftmul *****************
 14158 ;; Defined at:
 14159 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\ftmul.c"
 14160 ;; Parameters:    Size  Location     Type
 14161 ;;  f1              3   41[BANK0 ] float 
 14162 ;;  f2              3   44[BANK0 ] float 
 14163 ;; Auto vars:     Size  Location     Type
 14164 ;;  f3_as_produc    3   52[BANK0 ] unsigned um
 14165 ;;  sign            1   56[BANK0 ] unsigned char 
 14166 ;;  cntr            1   55[BANK0 ] unsigned char 
 14167 ;;  exp             1   51[BANK0 ] unsigned char 
 14168 ;; Return value:  Size  Location     Type
 14169 ;;                  3   41[BANK0 ] float 
 14170 ;; Registers used:
 14171 ;;		wreg, status,2, status,0, pclath, cstack
 14172 ;; Tracked objects:
 14173 ;;		On entry : 0/0
 14174 ;;		On exit  : 0/0
 14175 ;;		Unchanged: 0/0
 14176 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14177 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14178 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14179 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14180 ;;      Totals:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14181 ;;Total ram usage:       16 bytes
 14182 ;; Hardware stack levels used:    1
 14183 ;; Hardware stack levels required when called:    5
 14184 ;; This function calls:
 14185 ;;		___ftpack
 14186 ;; This function is called by:
 14187 ;;		_HMC5883L_GetCompassDirection
 14188 ;;		_BMP_readTemperature
 14189 ;;		_Wireless_packageData
 14190 ;;		_atan
 14191 ;;		_eval_poly
 14192 ;; This function uses a non-reentrant model
 14193 ;;
 14194                           
 14195                           
 14196                           ;psect for function ___ftmul
 14197  0B95                     ___ftmul:	
 14198                           
 14199                           ;incstack = 0
 14200                           ; Regs used in ___ftmul: [wreg+status,2+status,0+pclath+cstack]
 14201  0B95  0020               	movlb	0	; select bank0
 14202  0B96  0849               	movf	___ftmul@f1,w
 14203  0B97  00CF               	movwf	??___ftmul
 14204  0B98  084A               	movf	___ftmul@f1+1,w
 14205  0B99  00D0               	movwf	??___ftmul+1
 14206  0B9A  084B               	movf	___ftmul@f1+2,w
 14207  0B9B  00D1               	movwf	??___ftmul+2
 14208  0B9C  1003               	clrc
 14209  0B9D  0D50               	rlf	??___ftmul+1,w
 14210  0B9E  0D51               	rlf	??___ftmul+2,w
 14211  0B9F  00D2               	movwf	??___ftmul+3
 14212  0BA0  0852               	movf	??___ftmul+3,w
 14213  0BA1  00D3               	movwf	___ftmul@exp
 14214  0BA2  0853               	movf	___ftmul@exp,w
 14215  0BA3  1D03               	btfss	3,2
 14216  0BA4  2BAC               	goto	l5890
 14217  0BA5  3000               	movlw	0
 14218  0BA6  00C9               	movwf	?___ftmul
 14219  0BA7  3000               	movlw	0
 14220  0BA8  00CA               	movwf	?___ftmul+1
 14221  0BA9  3000               	movlw	0
 14222  0BAA  00CB               	movwf	?___ftmul+2
 14223  0BAB  0008               	return
 14224  0BAC                     l5890:	
 14225  0BAC  084C               	movf	___ftmul@f2,w
 14226  0BAD  00CF               	movwf	??___ftmul
 14227  0BAE  084D               	movf	___ftmul@f2+1,w
 14228  0BAF  00D0               	movwf	??___ftmul+1
 14229  0BB0  084E               	movf	___ftmul@f2+2,w
 14230  0BB1  00D1               	movwf	??___ftmul+2
 14231  0BB2  1003               	clrc
 14232  0BB3  0D50               	rlf	??___ftmul+1,w
 14233  0BB4  0D51               	rlf	??___ftmul+2,w
 14234  0BB5  00D2               	movwf	??___ftmul+3
 14235  0BB6  0852               	movf	??___ftmul+3,w
 14236  0BB7  00D8               	movwf	___ftmul@sign
 14237  0BB8  0858               	movf	___ftmul@sign,w
 14238  0BB9  1D03               	btfss	3,2
 14239  0BBA  2BC2               	goto	l5896
 14240  0BBB  3000               	movlw	0
 14241  0BBC  00C9               	movwf	?___ftmul
 14242  0BBD  3000               	movlw	0
 14243  0BBE  00CA               	movwf	?___ftmul+1
 14244  0BBF  3000               	movlw	0
 14245  0BC0  00CB               	movwf	?___ftmul+2
 14246  0BC1  0008               	return
 14247  0BC2                     l5896:	
 14248  0BC2  0858               	movf	___ftmul@sign,w
 14249  0BC3  3E7B               	addlw	123
 14250  0BC4  00CF               	movwf	??___ftmul
 14251  0BC5  084F               	movf	??___ftmul,w
 14252  0BC6  07D3               	addwf	___ftmul@exp,f
 14253  0BC7  0849               	movf	___ftmul@f1,w
 14254  0BC8  00CF               	movwf	??___ftmul
 14255  0BC9  084A               	movf	___ftmul@f1+1,w
 14256  0BCA  00D0               	movwf	??___ftmul+1
 14257  0BCB  084B               	movf	___ftmul@f1+2,w
 14258  0BCC  00D1               	movwf	??___ftmul+2
 14259  0BCD  3010               	movlw	16
 14260  0BCE                     u5755:	
 14261  0BCE  36D1               	lsrf	??___ftmul+2,f
 14262  0BCF  0CD0               	rrf	??___ftmul+1,f
 14263  0BD0  0CCF               	rrf	??___ftmul,f
 14264  0BD1  0B89               	decfsz	9,f
 14265  0BD2  2BCE               	goto	u5755
 14266  0BD3  084F               	movf	??___ftmul,w
 14267  0BD4  00D2               	movwf	??___ftmul+3
 14268  0BD5  0852               	movf	??___ftmul+3,w
 14269  0BD6  00D8               	movwf	___ftmul@sign
 14270  0BD7  084C               	movf	___ftmul@f2,w
 14271  0BD8  00CF               	movwf	??___ftmul
 14272  0BD9  084D               	movf	___ftmul@f2+1,w
 14273  0BDA  00D0               	movwf	??___ftmul+1
 14274  0BDB  084E               	movf	___ftmul@f2+2,w
 14275  0BDC  00D1               	movwf	??___ftmul+2
 14276  0BDD  3010               	movlw	16
 14277  0BDE                     u5765:	
 14278  0BDE  36D1               	lsrf	??___ftmul+2,f
 14279  0BDF  0CD0               	rrf	??___ftmul+1,f
 14280  0BE0  0CCF               	rrf	??___ftmul,f
 14281  0BE1  0B89               	decfsz	9,f
 14282  0BE2  2BDE               	goto	u5765
 14283  0BE3  084F               	movf	??___ftmul,w
 14284  0BE4  00D2               	movwf	??___ftmul+3
 14285  0BE5  0852               	movf	??___ftmul+3,w
 14286  0BE6  06D8               	xorwf	___ftmul@sign,f
 14287  0BE7  3080               	movlw	128
 14288  0BE8  00CF               	movwf	??___ftmul
 14289  0BE9  084F               	movf	??___ftmul,w
 14290  0BEA  05D8               	andwf	___ftmul@sign,f
 14291  0BEB  17CA               	bsf	___ftmul@f1+1,7
 14292  0BEC  17CD               	bsf	___ftmul@f2+1,7
 14293  0BED  30FF               	movlw	255
 14294  0BEE  05CC               	andwf	___ftmul@f2,f
 14295  0BEF  30FF               	movlw	255
 14296  0BF0  05CD               	andwf	___ftmul@f2+1,f
 14297  0BF1  3000               	movlw	0
 14298  0BF2  05CE               	andwf	___ftmul@f2+2,f
 14299  0BF3  3000               	movlw	0
 14300  0BF4  00D4               	movwf	___ftmul@f3_as_product
 14301  0BF5  3000               	movlw	0
 14302  0BF6  00D5               	movwf	___ftmul@f3_as_product+1
 14303  0BF7  3000               	movlw	0
 14304  0BF8  00D6               	movwf	___ftmul@f3_as_product+2
 14305  0BF9  3007               	movlw	7
 14306  0BFA  00CF               	movwf	??___ftmul
 14307  0BFB  084F               	movf	??___ftmul,w
 14308  0BFC  00D7               	movwf	___ftmul@cntr
 14309  0BFD                     l5908:	
 14310  0BFD  1C49               	btfss	___ftmul@f1,0
 14311  0BFE  2C05               	goto	l5912
 14312  0BFF  084C               	movf	___ftmul@f2,w
 14313  0C00  07D4               	addwf	___ftmul@f3_as_product,f
 14314  0C01  084D               	movf	___ftmul@f2+1,w
 14315  0C02  3DD5               	addwfc	___ftmul@f3_as_product+1,f
 14316  0C03  084E               	movf	___ftmul@f2+2,w
 14317  0C04  3DD6               	addwfc	___ftmul@f3_as_product+2,f
 14318  0C05                     l5912:	
 14319  0C05  3001               	movlw	1
 14320  0C06                     u5785:	
 14321  0C06  36CB               	lsrf	___ftmul@f1+2,f
 14322  0C07  0CCA               	rrf	___ftmul@f1+1,f
 14323  0C08  0CC9               	rrf	___ftmul@f1,f
 14324  0C09  0B89               	decfsz	9,f
 14325  0C0A  2C06               	goto	u5785
 14326  0C0B  3001               	movlw	1
 14327  0C0C                     u5795:	
 14328  0C0C  35CC               	lslf	___ftmul@f2,f
 14329  0C0D  0DCD               	rlf	___ftmul@f2+1,f
 14330  0C0E  0DCE               	rlf	___ftmul@f2+2,f
 14331  0C0F  0B89               	decfsz	9,f
 14332  0C10  2C0C               	goto	u5795
 14333  0C11  3001               	movlw	1
 14334  0C12  02D7               	subwf	___ftmul@cntr,f
 14335  0C13  1D03               	btfss	3,2
 14336  0C14  2BFD               	goto	l5908
 14337  0C15  3009               	movlw	9
 14338  0C16  00CF               	movwf	??___ftmul
 14339  0C17  084F               	movf	??___ftmul,w
 14340  0C18  00D7               	movwf	___ftmul@cntr
 14341  0C19                     l5920:	
 14342  0C19  1C49               	btfss	___ftmul@f1,0
 14343  0C1A  2C21               	goto	l5924
 14344  0C1B  084C               	movf	___ftmul@f2,w
 14345  0C1C  07D4               	addwf	___ftmul@f3_as_product,f
 14346  0C1D  084D               	movf	___ftmul@f2+1,w
 14347  0C1E  3DD5               	addwfc	___ftmul@f3_as_product+1,f
 14348  0C1F  084E               	movf	___ftmul@f2+2,w
 14349  0C20  3DD6               	addwfc	___ftmul@f3_as_product+2,f
 14350  0C21                     l5924:	
 14351  0C21  3001               	movlw	1
 14352  0C22                     u5825:	
 14353  0C22  36CB               	lsrf	___ftmul@f1+2,f
 14354  0C23  0CCA               	rrf	___ftmul@f1+1,f
 14355  0C24  0CC9               	rrf	___ftmul@f1,f
 14356  0C25  0B89               	decfsz	9,f
 14357  0C26  2C22               	goto	u5825
 14358  0C27  3001               	movlw	1
 14359  0C28                     u5835:	
 14360  0C28  36D6               	lsrf	___ftmul@f3_as_product+2,f
 14361  0C29  0CD5               	rrf	___ftmul@f3_as_product+1,f
 14362  0C2A  0CD4               	rrf	___ftmul@f3_as_product,f
 14363  0C2B  0B89               	decfsz	9,f
 14364  0C2C  2C28               	goto	u5835
 14365  0C2D  3001               	movlw	1
 14366  0C2E  02D7               	subwf	___ftmul@cntr,f
 14367  0C2F  1D03               	btfss	3,2
 14368  0C30  2C19               	goto	l5920
 14369  0C31  0854               	movf	___ftmul@f3_as_product,w
 14370  0C32  00A1               	movwf	___ftpack@arg
 14371  0C33  0855               	movf	___ftmul@f3_as_product+1,w
 14372  0C34  00A2               	movwf	___ftpack@arg+1
 14373  0C35  0856               	movf	___ftmul@f3_as_product+2,w
 14374  0C36  00A3               	movwf	___ftpack@arg+2
 14375  0C37  0853               	movf	___ftmul@exp,w
 14376  0C38  00CF               	movwf	??___ftmul
 14377  0C39  084F               	movf	??___ftmul,w
 14378  0C3A  00A4               	movwf	___ftpack@exp
 14379  0C3B  0858               	movf	___ftmul@sign,w
 14380  0C3C  00D0               	movwf	??___ftmul+1
 14381  0C3D  0850               	movf	??___ftmul+1,w
 14382  0C3E  00A5               	movwf	___ftpack@sign
 14383  0C3F  3195  25C2         	fcall	___ftpack
 14384  0C41  0020               	movlb	0	; select bank0
 14385  0C42  0821               	movf	?___ftpack,w
 14386  0C43  00C9               	movwf	?___ftmul
 14387  0C44  0822               	movf	?___ftpack+1,w
 14388  0C45  00CA               	movwf	?___ftmul+1
 14389  0C46  0823               	movf	?___ftpack+2,w
 14390  0C47  00CB               	movwf	?___ftmul+2
 14391  0C48  0008               	return
 14392  0C49                     __end_of___ftmul:	
 14393                           
 14394                           	psect	text76
 14395  0AEC                     __ptext76:	
 14396 ;; *************** function ___ftdiv *****************
 14397 ;; Defined at:
 14398 ;;		line 56 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\ftdiv.c"
 14399 ;; Parameters:    Size  Location     Type
 14400 ;;  f2              3   17[BANK0 ] float 
 14401 ;;  f1              3   20[BANK0 ] float 
 14402 ;; Auto vars:     Size  Location     Type
 14403 ;;  f3              3   28[BANK0 ] float 
 14404 ;;  sign            1   32[BANK0 ] unsigned char 
 14405 ;;  exp             1   31[BANK0 ] unsigned char 
 14406 ;;  cntr            1   27[BANK0 ] unsigned char 
 14407 ;; Return value:  Size  Location     Type
 14408 ;;                  3   17[BANK0 ] float 
 14409 ;; Registers used:
 14410 ;;		wreg, status,2, status,0, pclath, cstack
 14411 ;; Tracked objects:
 14412 ;;		On entry : 0/0
 14413 ;;		On exit  : 0/0
 14414 ;;		Unchanged: 0/0
 14415 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14416 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14417 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14418 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14419 ;;      Totals:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14420 ;;Total ram usage:       16 bytes
 14421 ;; Hardware stack levels used:    1
 14422 ;; Hardware stack levels required when called:    5
 14423 ;; This function calls:
 14424 ;;		___ftpack
 14425 ;; This function is called by:
 14426 ;;		_Sensor_getSupplyVoltage
 14427 ;;		_HMC5883L_GetCompassDirection
 14428 ;;		_BMP_readTemperature
 14429 ;;		_atan2
 14430 ;;		_atan
 14431 ;; This function uses a non-reentrant model
 14432 ;;
 14433                           
 14434                           
 14435                           ;psect for function ___ftdiv
 14436  0AEC                     ___ftdiv:	
 14437                           
 14438                           ;incstack = 0
 14439                           ; Regs used in ___ftdiv: [wreg+status,2+status,0+pclath+cstack]
 14440  0AEC  0020               	movlb	0	; select bank0
 14441  0AED  0834               	movf	___ftdiv@f1,w
 14442  0AEE  00B7               	movwf	??___ftdiv
 14443  0AEF  0835               	movf	___ftdiv@f1+1,w
 14444  0AF0  00B8               	movwf	??___ftdiv+1
 14445  0AF1  0836               	movf	___ftdiv@f1+2,w
 14446  0AF2  00B9               	movwf	??___ftdiv+2
 14447  0AF3  1003               	clrc
 14448  0AF4  0D38               	rlf	??___ftdiv+1,w
 14449  0AF5  0D39               	rlf	??___ftdiv+2,w
 14450  0AF6  00BA               	movwf	??___ftdiv+3
 14451  0AF7  083A               	movf	??___ftdiv+3,w
 14452  0AF8  00BF               	movwf	___ftdiv@exp
 14453  0AF9  083F               	movf	___ftdiv@exp,w
 14454  0AFA  1D03               	btfss	3,2
 14455  0AFB  2B03               	goto	l6000
 14456  0AFC  3000               	movlw	0
 14457  0AFD  00B1               	movwf	?___ftdiv
 14458  0AFE  3000               	movlw	0
 14459  0AFF  00B2               	movwf	?___ftdiv+1
 14460  0B00  3000               	movlw	0
 14461  0B01  00B3               	movwf	?___ftdiv+2
 14462  0B02  0008               	return
 14463  0B03                     l6000:	
 14464  0B03  0831               	movf	___ftdiv@f2,w
 14465  0B04  00B7               	movwf	??___ftdiv
 14466  0B05  0832               	movf	___ftdiv@f2+1,w
 14467  0B06  00B8               	movwf	??___ftdiv+1
 14468  0B07  0833               	movf	___ftdiv@f2+2,w
 14469  0B08  00B9               	movwf	??___ftdiv+2
 14470  0B09  1003               	clrc
 14471  0B0A  0D38               	rlf	??___ftdiv+1,w
 14472  0B0B  0D39               	rlf	??___ftdiv+2,w
 14473  0B0C  00BA               	movwf	??___ftdiv+3
 14474  0B0D  083A               	movf	??___ftdiv+3,w
 14475  0B0E  00C0               	movwf	___ftdiv@sign
 14476  0B0F  0840               	movf	___ftdiv@sign,w
 14477  0B10  1D03               	btfss	3,2
 14478  0B11  2B19               	goto	l6006
 14479  0B12  3000               	movlw	0
 14480  0B13  00B1               	movwf	?___ftdiv
 14481  0B14  3000               	movlw	0
 14482  0B15  00B2               	movwf	?___ftdiv+1
 14483  0B16  3000               	movlw	0
 14484  0B17  00B3               	movwf	?___ftdiv+2
 14485  0B18  0008               	return
 14486  0B19                     l6006:	
 14487  0B19  3000               	movlw	0
 14488  0B1A  00BC               	movwf	___ftdiv@f3
 14489  0B1B  3000               	movlw	0
 14490  0B1C  00BD               	movwf	___ftdiv@f3+1
 14491  0B1D  3000               	movlw	0
 14492  0B1E  00BE               	movwf	___ftdiv@f3+2
 14493  0B1F  3089               	movlw	137
 14494  0B20  0740               	addwf	___ftdiv@sign,w
 14495  0B21  00B7               	movwf	??___ftdiv
 14496  0B22  0837               	movf	??___ftdiv,w
 14497  0B23  02BF               	subwf	___ftdiv@exp,f
 14498  0B24  0834               	movf	___ftdiv@f1,w
 14499  0B25  00B7               	movwf	??___ftdiv
 14500  0B26  0835               	movf	___ftdiv@f1+1,w
 14501  0B27  00B8               	movwf	??___ftdiv+1
 14502  0B28  0836               	movf	___ftdiv@f1+2,w
 14503  0B29  00B9               	movwf	??___ftdiv+2
 14504  0B2A  3010               	movlw	16
 14505  0B2B                     u5965:	
 14506  0B2B  36B9               	lsrf	??___ftdiv+2,f
 14507  0B2C  0CB8               	rrf	??___ftdiv+1,f
 14508  0B2D  0CB7               	rrf	??___ftdiv,f
 14509  0B2E  0B89               	decfsz	9,f
 14510  0B2F  2B2B               	goto	u5965
 14511  0B30  0837               	movf	??___ftdiv,w
 14512  0B31  00BA               	movwf	??___ftdiv+3
 14513  0B32  083A               	movf	??___ftdiv+3,w
 14514  0B33  00C0               	movwf	___ftdiv@sign
 14515  0B34  0831               	movf	___ftdiv@f2,w
 14516  0B35  00B7               	movwf	??___ftdiv
 14517  0B36  0832               	movf	___ftdiv@f2+1,w
 14518  0B37  00B8               	movwf	??___ftdiv+1
 14519  0B38  0833               	movf	___ftdiv@f2+2,w
 14520  0B39  00B9               	movwf	??___ftdiv+2
 14521  0B3A  3010               	movlw	16
 14522  0B3B                     u5975:	
 14523  0B3B  36B9               	lsrf	??___ftdiv+2,f
 14524  0B3C  0CB8               	rrf	??___ftdiv+1,f
 14525  0B3D  0CB7               	rrf	??___ftdiv,f
 14526  0B3E  0B89               	decfsz	9,f
 14527  0B3F  2B3B               	goto	u5975
 14528  0B40  0837               	movf	??___ftdiv,w
 14529  0B41  00BA               	movwf	??___ftdiv+3
 14530  0B42  083A               	movf	??___ftdiv+3,w
 14531  0B43  06C0               	xorwf	___ftdiv@sign,f
 14532  0B44  3080               	movlw	128
 14533  0B45  00B7               	movwf	??___ftdiv
 14534  0B46  0837               	movf	??___ftdiv,w
 14535  0B47  05C0               	andwf	___ftdiv@sign,f
 14536  0B48  17B5               	bsf	___ftdiv@f1+1,7
 14537  0B49  30FF               	movlw	255
 14538  0B4A  05B4               	andwf	___ftdiv@f1,f
 14539  0B4B  30FF               	movlw	255
 14540  0B4C  05B5               	andwf	___ftdiv@f1+1,f
 14541  0B4D  3000               	movlw	0
 14542  0B4E  05B6               	andwf	___ftdiv@f1+2,f
 14543  0B4F  17B2               	bsf	___ftdiv@f2+1,7
 14544  0B50  30FF               	movlw	255
 14545  0B51  05B1               	andwf	___ftdiv@f2,f
 14546  0B52  30FF               	movlw	255
 14547  0B53  05B2               	andwf	___ftdiv@f2+1,f
 14548  0B54  3000               	movlw	0
 14549  0B55  05B3               	andwf	___ftdiv@f2+2,f
 14550  0B56  3018               	movlw	24
 14551  0B57  00B7               	movwf	??___ftdiv
 14552  0B58  0837               	movf	??___ftdiv,w
 14553  0B59  00BB               	movwf	___ftdiv@cntr
 14554  0B5A                     l6020:	
 14555  0B5A  3001               	movlw	1
 14556  0B5B                     u5985:	
 14557  0B5B  35BC               	lslf	___ftdiv@f3,f
 14558  0B5C  0DBD               	rlf	___ftdiv@f3+1,f
 14559  0B5D  0DBE               	rlf	___ftdiv@f3+2,f
 14560  0B5E  0B89               	decfsz	9,f
 14561  0B5F  2B5B               	goto	u5985
 14562  0B60  0833               	movf	___ftdiv@f2+2,w
 14563  0B61  0236               	subwf	___ftdiv@f1+2,w
 14564  0B62  1D03               	skipz
 14565  0B63  2B6A               	goto	u5995
 14566  0B64  0832               	movf	___ftdiv@f2+1,w
 14567  0B65  0235               	subwf	___ftdiv@f1+1,w
 14568  0B66  1D03               	skipz
 14569  0B67  2B6A               	goto	u5995
 14570  0B68  0831               	movf	___ftdiv@f2,w
 14571  0B69  0234               	subwf	___ftdiv@f1,w
 14572  0B6A                     u5995:	
 14573  0B6A  1C03               	skipc
 14574  0B6B  2B73               	goto	l6028
 14575  0B6C  0831               	movf	___ftdiv@f2,w
 14576  0B6D  02B4               	subwf	___ftdiv@f1,f
 14577  0B6E  0832               	movf	___ftdiv@f2+1,w
 14578  0B6F  3BB5               	subwfb	___ftdiv@f1+1,f
 14579  0B70  0833               	movf	___ftdiv@f2+2,w
 14580  0B71  3BB6               	subwfb	___ftdiv@f1+2,f
 14581  0B72  143C               	bsf	___ftdiv@f3,0
 14582  0B73                     l6028:	
 14583  0B73  3001               	movlw	1
 14584  0B74                     u6005:	
 14585  0B74  35B4               	lslf	___ftdiv@f1,f
 14586  0B75  0DB5               	rlf	___ftdiv@f1+1,f
 14587  0B76  0DB6               	rlf	___ftdiv@f1+2,f
 14588  0B77  0B89               	decfsz	9,f
 14589  0B78  2B74               	goto	u6005
 14590  0B79  3001               	movlw	1
 14591  0B7A  02BB               	subwf	___ftdiv@cntr,f
 14592  0B7B  1D03               	btfss	3,2
 14593  0B7C  2B5A               	goto	l6020
 14594  0B7D  083C               	movf	___ftdiv@f3,w
 14595  0B7E  00A1               	movwf	___ftpack@arg
 14596  0B7F  083D               	movf	___ftdiv@f3+1,w
 14597  0B80  00A2               	movwf	___ftpack@arg+1
 14598  0B81  083E               	movf	___ftdiv@f3+2,w
 14599  0B82  00A3               	movwf	___ftpack@arg+2
 14600  0B83  083F               	movf	___ftdiv@exp,w
 14601  0B84  00B7               	movwf	??___ftdiv
 14602  0B85  0837               	movf	??___ftdiv,w
 14603  0B86  00A4               	movwf	___ftpack@exp
 14604  0B87  0840               	movf	___ftdiv@sign,w
 14605  0B88  00B8               	movwf	??___ftdiv+1
 14606  0B89  0838               	movf	??___ftdiv+1,w
 14607  0B8A  00A5               	movwf	___ftpack@sign
 14608  0B8B  3195  25C2         	fcall	___ftpack
 14609  0B8D  0020               	movlb	0	; select bank0
 14610  0B8E  0821               	movf	?___ftpack,w
 14611  0B8F  00B1               	movwf	?___ftdiv
 14612  0B90  0822               	movf	?___ftpack+1,w
 14613  0B91  00B2               	movwf	?___ftdiv+1
 14614  0B92  0823               	movf	?___ftpack+2,w
 14615  0B93  00B3               	movwf	?___ftdiv+2
 14616  0B94  0008               	return
 14617  0B95                     __end_of___ftdiv:	
 14618                           
 14619                           	psect	text77
 14620  0C49                     __ptext77:	
 14621 ;; *************** function ___ftadd *****************
 14622 ;; Defined at:
 14623 ;;		line 86 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\ftadd.c"
 14624 ;; Parameters:    Size  Location     Type
 14625 ;;  f1              3   57[BANK0 ] float 
 14626 ;;  f2              3   60[BANK0 ] float 
 14627 ;; Auto vars:     Size  Location     Type
 14628 ;;  exp1            1   69[BANK0 ] unsigned char 
 14629 ;;  exp2            1   68[BANK0 ] unsigned char 
 14630 ;;  sign            1   67[BANK0 ] unsigned char 
 14631 ;; Return value:  Size  Location     Type
 14632 ;;                  3   57[BANK0 ] float 
 14633 ;; Registers used:
 14634 ;;		wreg, status,2, status,0, pclath, cstack
 14635 ;; Tracked objects:
 14636 ;;		On entry : 0/0
 14637 ;;		On exit  : 0/0
 14638 ;;		Unchanged: 0/0
 14639 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14640 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14641 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14642 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14643 ;;      Totals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14644 ;;Total ram usage:       13 bytes
 14645 ;; Hardware stack levels used:    1
 14646 ;; Hardware stack levels required when called:    5
 14647 ;; This function calls:
 14648 ;;		___ftpack
 14649 ;; This function is called by:
 14650 ;;		_HMC5883L_GetCompassDirection
 14651 ;;		_BMP_readTemperature
 14652 ;;		_atan2
 14653 ;;		___ftsub
 14654 ;;		_atan
 14655 ;;		_eval_poly
 14656 ;; This function uses a non-reentrant model
 14657 ;;
 14658                           
 14659                           
 14660                           ;psect for function ___ftadd
 14661  0C49                     ___ftadd:	
 14662                           
 14663                           ;incstack = 0
 14664                           ; Regs used in ___ftadd: [wreg+status,2+status,0+pclath+cstack]
 14665  0C49  0020               	movlb	0	; select bank0
 14666  0C4A  0859               	movf	___ftadd@f1,w
 14667  0C4B  00DF               	movwf	??___ftadd
 14668  0C4C  085A               	movf	___ftadd@f1+1,w
 14669  0C4D  00E0               	movwf	??___ftadd+1
 14670  0C4E  085B               	movf	___ftadd@f1+2,w
 14671  0C4F  00E1               	movwf	??___ftadd+2
 14672  0C50  1003               	clrc
 14673  0C51  0D60               	rlf	??___ftadd+1,w
 14674  0C52  0D61               	rlf	??___ftadd+2,w
 14675  0C53  00E2               	movwf	??___ftadd+3
 14676  0C54  0862               	movf	??___ftadd+3,w
 14677  0C55  00E5               	movwf	___ftadd@exp1
 14678  0C56  085C               	movf	___ftadd@f2,w
 14679  0C57  00DF               	movwf	??___ftadd
 14680  0C58  085D               	movf	___ftadd@f2+1,w
 14681  0C59  00E0               	movwf	??___ftadd+1
 14682  0C5A  085E               	movf	___ftadd@f2+2,w
 14683  0C5B  00E1               	movwf	??___ftadd+2
 14684  0C5C  1003               	clrc
 14685  0C5D  0D60               	rlf	??___ftadd+1,w
 14686  0C5E  0D61               	rlf	??___ftadd+2,w
 14687  0C5F  00E2               	movwf	??___ftadd+3
 14688  0C60  0862               	movf	??___ftadd+3,w
 14689  0C61  00E4               	movwf	___ftadd@exp2
 14690  0C62  0865               	movf	___ftadd@exp1,w
 14691  0C63  1903               	btfsc	3,2
 14692  0C64  2C71               	goto	l5800
 14693  0C65  0864               	movf	___ftadd@exp2,w
 14694  0C66  0265               	subwf	___ftadd@exp1,w
 14695  0C67  1803               	skipnc
 14696  0C68  2C78               	goto	l5804
 14697  0C69  0365               	decf	___ftadd@exp1,w
 14698  0C6A  3AFF               	xorlw	255
 14699  0C6B  0764               	addwf	___ftadd@exp2,w
 14700  0C6C  00DF               	movwf	??___ftadd
 14701  0C6D  3019               	movlw	25
 14702  0C6E  025F               	subwf	??___ftadd,w
 14703  0C6F  1C03               	skipc
 14704  0C70  2C78               	goto	l5804
 14705  0C71                     l5800:	
 14706  0C71  085C               	movf	___ftadd@f2,w
 14707  0C72  00D9               	movwf	?___ftadd
 14708  0C73  085D               	movf	___ftadd@f2+1,w
 14709  0C74  00DA               	movwf	?___ftadd+1
 14710  0C75  085E               	movf	___ftadd@f2+2,w
 14711  0C76  00DB               	movwf	?___ftadd+2
 14712  0C77  0008               	return
 14713  0C78                     l5804:	
 14714  0C78  0864               	movf	___ftadd@exp2,w
 14715  0C79  1903               	btfsc	3,2
 14716  0C7A  0008               	return
 14717  0C7B  0865               	movf	___ftadd@exp1,w
 14718  0C7C  0264               	subwf	___ftadd@exp2,w
 14719  0C7D  1803               	skipnc
 14720  0C7E  2C87               	goto	l5810
 14721  0C7F  0364               	decf	___ftadd@exp2,w
 14722  0C80  3AFF               	xorlw	255
 14723  0C81  0765               	addwf	___ftadd@exp1,w
 14724  0C82  00DF               	movwf	??___ftadd
 14725  0C83  3019               	movlw	25
 14726  0C84  025F               	subwf	??___ftadd,w
 14727  0C85  1803               	btfsc	3,0
 14728  0C86  0008               	return
 14729  0C87                     l5810:	
 14730  0C87  3006               	movlw	6
 14731  0C88  00DF               	movwf	??___ftadd
 14732  0C89  085F               	movf	??___ftadd,w
 14733  0C8A  00E3               	movwf	___ftadd@sign
 14734  0C8B  1BDB               	btfsc	___ftadd@f1+2,7
 14735  0C8C  17E3               	bsf	___ftadd@sign,7
 14736  0C8D  1BDE               	btfsc	___ftadd@f2+2,7
 14737  0C8E  1763               	bsf	___ftadd@sign,6
 14738  0C8F  17DA               	bsf	___ftadd@f1+1,7
 14739  0C90  30FF               	movlw	255
 14740  0C91  05D9               	andwf	___ftadd@f1,f
 14741  0C92  30FF               	movlw	255
 14742  0C93  05DA               	andwf	___ftadd@f1+1,f
 14743  0C94  3000               	movlw	0
 14744  0C95  05DB               	andwf	___ftadd@f1+2,f
 14745  0C96  17DD               	bsf	___ftadd@f2+1,7
 14746  0C97  30FF               	movlw	255
 14747  0C98  05DC               	andwf	___ftadd@f2,f
 14748  0C99  30FF               	movlw	255
 14749  0C9A  05DD               	andwf	___ftadd@f2+1,f
 14750  0C9B  3000               	movlw	0
 14751  0C9C  05DE               	andwf	___ftadd@f2+2,f
 14752  0C9D  0864               	movf	___ftadd@exp2,w
 14753  0C9E  0265               	subwf	___ftadd@exp1,w
 14754  0C9F  1803               	skipnc
 14755  0CA0  2CC3               	goto	l5832
 14756  0CA1                     l5822:	
 14757  0CA1  3001               	movlw	1
 14758  0CA2                     u5565:	
 14759  0CA2  35DC               	lslf	___ftadd@f2,f
 14760  0CA3  0DDD               	rlf	___ftadd@f2+1,f
 14761  0CA4  0DDE               	rlf	___ftadd@f2+2,f
 14762  0CA5  0B89               	decfsz	9,f
 14763  0CA6  2CA2               	goto	u5565
 14764  0CA7  3001               	movlw	1
 14765  0CA8  02E4               	subwf	___ftadd@exp2,f
 14766  0CA9  0864               	movf	___ftadd@exp2,w
 14767  0CAA  0665               	xorwf	___ftadd@exp1,w
 14768  0CAB  1903               	skipnz
 14769  0CAC  2CBE               	goto	l5830
 14770  0CAD  3001               	movlw	1
 14771  0CAE  02E3               	subwf	___ftadd@sign,f
 14772  0CAF  0863               	movf	___ftadd@sign,w
 14773  0CB0  3907               	andlw	7
 14774  0CB1  1903               	btfsc	3,2
 14775  0CB2  2CBE               	goto	l5830
 14776  0CB3  2CA1               	goto	l5822
 14777  0CB4                     l5828:	
 14778  0CB4  3001               	movlw	1
 14779  0CB5                     u5595:	
 14780  0CB5  36DB               	lsrf	___ftadd@f1+2,f
 14781  0CB6  0CDA               	rrf	___ftadd@f1+1,f
 14782  0CB7  0CD9               	rrf	___ftadd@f1,f
 14783  0CB8  0B89               	decfsz	9,f
 14784  0CB9  2CB5               	goto	u5595
 14785  0CBA  3001               	movlw	1
 14786  0CBB  00DF               	movwf	??___ftadd
 14787  0CBC  085F               	movf	??___ftadd,w
 14788  0CBD  07E5               	addwf	___ftadd@exp1,f
 14789  0CBE                     l5830:	
 14790  0CBE  0865               	movf	___ftadd@exp1,w
 14791  0CBF  0664               	xorwf	___ftadd@exp2,w
 14792  0CC0  1903               	btfsc	3,2
 14793  0CC1  2CE8               	goto	l1536
 14794  0CC2  2CB4               	goto	l5828
 14795  0CC3                     l5832:	
 14796  0CC3  0865               	movf	___ftadd@exp1,w
 14797  0CC4  0264               	subwf	___ftadd@exp2,w
 14798  0CC5  1803               	skipnc
 14799  0CC6  2CE8               	goto	l1536
 14800  0CC7                     l5834:	
 14801  0CC7  3001               	movlw	1
 14802  0CC8                     u5625:	
 14803  0CC8  35D9               	lslf	___ftadd@f1,f
 14804  0CC9  0DDA               	rlf	___ftadd@f1+1,f
 14805  0CCA  0DDB               	rlf	___ftadd@f1+2,f
 14806  0CCB  0B89               	decfsz	9,f
 14807  0CCC  2CC8               	goto	u5625
 14808  0CCD  3001               	movlw	1
 14809  0CCE  02E5               	subwf	___ftadd@exp1,f
 14810  0CCF  0864               	movf	___ftadd@exp2,w
 14811  0CD0  0665               	xorwf	___ftadd@exp1,w
 14812  0CD1  1903               	skipnz
 14813  0CD2  2CE4               	goto	l5842
 14814  0CD3  3001               	movlw	1
 14815  0CD4  02E3               	subwf	___ftadd@sign,f
 14816  0CD5  0863               	movf	___ftadd@sign,w
 14817  0CD6  3907               	andlw	7
 14818  0CD7  1903               	btfsc	3,2
 14819  0CD8  2CE4               	goto	l5842
 14820  0CD9  2CC7               	goto	l5834
 14821  0CDA                     l5840:	
 14822  0CDA  3001               	movlw	1
 14823  0CDB                     u5655:	
 14824  0CDB  36DE               	lsrf	___ftadd@f2+2,f
 14825  0CDC  0CDD               	rrf	___ftadd@f2+1,f
 14826  0CDD  0CDC               	rrf	___ftadd@f2,f
 14827  0CDE  0B89               	decfsz	9,f
 14828  0CDF  2CDB               	goto	u5655
 14829  0CE0  3001               	movlw	1
 14830  0CE1  00DF               	movwf	??___ftadd
 14831  0CE2  085F               	movf	??___ftadd,w
 14832  0CE3  07E4               	addwf	___ftadd@exp2,f
 14833  0CE4                     l5842:	
 14834  0CE4  0865               	movf	___ftadd@exp1,w
 14835  0CE5  0664               	xorwf	___ftadd@exp2,w
 14836  0CE6  1D03               	skipz
 14837  0CE7  2CDA               	goto	l5840
 14838  0CE8                     l1536:	
 14839  0CE8  1FE3               	btfss	___ftadd@sign,7
 14840  0CE9  2CFA               	goto	l5846
 14841  0CEA  30FF               	movlw	255
 14842  0CEB  06D9               	xorwf	___ftadd@f1,f
 14843  0CEC  30FF               	movlw	255
 14844  0CED  06DA               	xorwf	___ftadd@f1+1,f
 14845  0CEE  30FF               	movlw	255
 14846  0CEF  06DB               	xorwf	___ftadd@f1+2,f
 14847  0CF0  3001               	movlw	1
 14848  0CF1  07D9               	addwf	___ftadd@f1,f
 14849  0CF2  3000               	movlw	0
 14850  0CF3  1803               	skipnc
 14851  0CF4  3001               	movlw	1
 14852  0CF5  07DA               	addwf	___ftadd@f1+1,f
 14853  0CF6  3000               	movlw	0
 14854  0CF7  1803               	skipnc
 14855  0CF8  3001               	movlw	1
 14856  0CF9  07DB               	addwf	___ftadd@f1+2,f
 14857  0CFA                     l5846:	
 14858  0CFA  1F63               	btfss	___ftadd@sign,6
 14859  0CFB  2D0C               	goto	l5850
 14860  0CFC  30FF               	movlw	255
 14861  0CFD  06DC               	xorwf	___ftadd@f2,f
 14862  0CFE  30FF               	movlw	255
 14863  0CFF  06DD               	xorwf	___ftadd@f2+1,f
 14864  0D00  30FF               	movlw	255
 14865  0D01  06DE               	xorwf	___ftadd@f2+2,f
 14866  0D02  3001               	movlw	1
 14867  0D03  07DC               	addwf	___ftadd@f2,f
 14868  0D04  3000               	movlw	0
 14869  0D05  1803               	skipnc
 14870  0D06  3001               	movlw	1
 14871  0D07  07DD               	addwf	___ftadd@f2+1,f
 14872  0D08  3000               	movlw	0
 14873  0D09  1803               	skipnc
 14874  0D0A  3001               	movlw	1
 14875  0D0B  07DE               	addwf	___ftadd@f2+2,f
 14876  0D0C                     l5850:	
 14877  0D0C  01E3               	clrf	___ftadd@sign
 14878  0D0D  0859               	movf	___ftadd@f1,w
 14879  0D0E  07DC               	addwf	___ftadd@f2,f
 14880  0D0F  085A               	movf	___ftadd@f1+1,w
 14881  0D10  3DDD               	addwfc	___ftadd@f2+1,f
 14882  0D11  085B               	movf	___ftadd@f1+2,w
 14883  0D12  3DDE               	addwfc	___ftadd@f2+2,f
 14884  0D13  1FDE               	btfss	___ftadd@f2+2,7
 14885  0D14  2D27               	goto	l5860
 14886  0D15  30FF               	movlw	255
 14887  0D16  06DC               	xorwf	___ftadd@f2,f
 14888  0D17  30FF               	movlw	255
 14889  0D18  06DD               	xorwf	___ftadd@f2+1,f
 14890  0D19  30FF               	movlw	255
 14891  0D1A  06DE               	xorwf	___ftadd@f2+2,f
 14892  0D1B  3001               	movlw	1
 14893  0D1C  07DC               	addwf	___ftadd@f2,f
 14894  0D1D  3000               	movlw	0
 14895  0D1E  1803               	skipnc
 14896  0D1F  3001               	movlw	1
 14897  0D20  07DD               	addwf	___ftadd@f2+1,f
 14898  0D21  3000               	movlw	0
 14899  0D22  1803               	skipnc
 14900  0D23  3001               	movlw	1
 14901  0D24  07DE               	addwf	___ftadd@f2+2,f
 14902  0D25  01E3               	clrf	___ftadd@sign
 14903  0D26  0AE3               	incf	___ftadd@sign,f
 14904  0D27                     l5860:	
 14905  0D27  085C               	movf	___ftadd@f2,w
 14906  0D28  00A1               	movwf	___ftpack@arg
 14907  0D29  085D               	movf	___ftadd@f2+1,w
 14908  0D2A  00A2               	movwf	___ftpack@arg+1
 14909  0D2B  085E               	movf	___ftadd@f2+2,w
 14910  0D2C  00A3               	movwf	___ftpack@arg+2
 14911  0D2D  0865               	movf	___ftadd@exp1,w
 14912  0D2E  00DF               	movwf	??___ftadd
 14913  0D2F  085F               	movf	??___ftadd,w
 14914  0D30  00A4               	movwf	___ftpack@exp
 14915  0D31  0863               	movf	___ftadd@sign,w
 14916  0D32  00E0               	movwf	??___ftadd+1
 14917  0D33  0860               	movf	??___ftadd+1,w
 14918  0D34  00A5               	movwf	___ftpack@sign
 14919  0D35  3195  25C2         	fcall	___ftpack
 14920  0D37  0020               	movlb	0	; select bank0
 14921  0D38  0821               	movf	?___ftpack,w
 14922  0D39  00D9               	movwf	?___ftadd
 14923  0D3A  0822               	movf	?___ftpack+1,w
 14924  0D3B  00DA               	movwf	?___ftadd+1
 14925  0D3C  0823               	movf	?___ftpack+2,w
 14926  0D3D  00DB               	movwf	?___ftadd+2
 14927  0D3E  0008               	return
 14928  0D3F                     __end_of___ftadd:	
 14929                           
 14930                           	psect	text78
 14931  115D                     __ptext78:	
 14932 ;; *************** function ___awtoft *****************
 14933 ;; Defined at:
 14934 ;;		line 32 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\awtoft.c"
 14935 ;; Parameters:    Size  Location     Type
 14936 ;;  c               2    9[BANK0 ] int 
 14937 ;; Auto vars:     Size  Location     Type
 14938 ;;  sign            1   14[BANK0 ] unsigned char 
 14939 ;; Return value:  Size  Location     Type
 14940 ;;                  3    9[BANK0 ] float 
 14941 ;; Registers used:
 14942 ;;		wreg, status,2, status,0, pclath, cstack
 14943 ;; Tracked objects:
 14944 ;;		On entry : 0/0
 14945 ;;		On exit  : 0/0
 14946 ;;		Unchanged: 0/0
 14947 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14948 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14949 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14950 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14951 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14952 ;;Total ram usage:        6 bytes
 14953 ;; Hardware stack levels used:    1
 14954 ;; Hardware stack levels required when called:    5
 14955 ;; This function calls:
 14956 ;;		___ftpack
 14957 ;; This function is called by:
 14958 ;;		_HMC5883L_GetCompassDirection
 14959 ;;		_BMP_readTemperature
 14960 ;; This function uses a non-reentrant model
 14961 ;;
 14962                           
 14963                           
 14964                           ;psect for function ___awtoft
 14965  115D                     ___awtoft:	
 14966                           
 14967                           ;incstack = 0
 14968                           ; Regs used in ___awtoft: [wreg+status,2+status,0+pclath+cstack]
 14969  115D  0020               	movlb	0	; select bank0
 14970  115E  01AE               	clrf	___awtoft@sign
 14971  115F  1FAA               	btfss	___awtoft@c+1,7
 14972  1160  2968               	goto	l6372
 14973  1161  09A9               	comf	___awtoft@c,f
 14974  1162  09AA               	comf	___awtoft@c+1,f
 14975  1163  0AA9               	incf	___awtoft@c,f
 14976  1164  1903               	skipnz
 14977  1165  0AAA               	incf	___awtoft@c+1,f
 14978  1166  01AE               	clrf	___awtoft@sign
 14979  1167  0AAE               	incf	___awtoft@sign,f
 14980  1168                     l6372:	
 14981  1168  0829               	movf	___awtoft@c,w
 14982  1169  00A1               	movwf	___ftpack@arg
 14983  116A  082A               	movf	___awtoft@c+1,w
 14984  116B  00A2               	movwf	___ftpack@arg+1
 14985  116C  01A3               	clrf	___ftpack@arg+2
 14986  116D  308E               	movlw	142
 14987  116E  00AC               	movwf	??___awtoft
 14988  116F  082C               	movf	??___awtoft,w
 14989  1170  00A4               	movwf	___ftpack@exp
 14990  1171  082E               	movf	___awtoft@sign,w
 14991  1172  00AD               	movwf	??___awtoft+1
 14992  1173  082D               	movf	??___awtoft+1,w
 14993  1174  00A5               	movwf	___ftpack@sign
 14994  1175  3195  25C2         	fcall	___ftpack
 14995  1177  0020               	movlb	0	; select bank0
 14996  1178  0821               	movf	?___ftpack,w
 14997  1179  00A9               	movwf	?___awtoft
 14998  117A  0822               	movf	?___ftpack+1,w
 14999  117B  00AA               	movwf	?___awtoft+1
 15000  117C  0823               	movf	?___ftpack+2,w
 15001  117D  00AB               	movwf	?___awtoft+2
 15002  117E  0008               	return
 15003  117F                     __end_of___awtoft:	
 15004                           
 15005                           	psect	text79
 15006  130D                     __ptext79:	
 15007 ;; *************** function ___altoft *****************
 15008 ;; Defined at:
 15009 ;;		line 42 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\altoft.c"
 15010 ;; Parameters:    Size  Location     Type
 15011 ;;  c               4    9[BANK0 ] long 
 15012 ;; Auto vars:     Size  Location     Type
 15013 ;;  sign            1   16[BANK0 ] unsigned char 
 15014 ;;  exp             1   15[BANK0 ] unsigned char 
 15015 ;; Return value:  Size  Location     Type
 15016 ;;                  3    9[BANK0 ] float 
 15017 ;; Registers used:
 15018 ;;		wreg, status,2, status,0, pclath, cstack
 15019 ;; Tracked objects:
 15020 ;;		On entry : 0/0
 15021 ;;		On exit  : 0/0
 15022 ;;		Unchanged: 0/0
 15023 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15024 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15025 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15026 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15027 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15028 ;;Total ram usage:        8 bytes
 15029 ;; Hardware stack levels used:    1
 15030 ;; Hardware stack levels required when called:    5
 15031 ;; This function calls:
 15032 ;;		___ftpack
 15033 ;; This function is called by:
 15034 ;;		_BMP_readTemperature
 15035 ;; This function uses a non-reentrant model
 15036 ;;
 15037                           
 15038                           
 15039                           ;psect for function ___altoft
 15040  130D                     ___altoft:	
 15041                           
 15042                           ;incstack = 0
 15043                           ; Regs used in ___altoft: [wreg+status,2+status,0+pclath+cstack]
 15044  130D  0020               	movlb	0	; select bank0
 15045  130E  01B0               	clrf	___altoft@sign
 15046  130F  308E               	movlw	142
 15047  1310  00AD               	movwf	??___altoft
 15048  1311  082D               	movf	??___altoft,w
 15049  1312  00AF               	movwf	___altoft@exp
 15050  1313  1FAC               	btfss	___altoft@c+3,7
 15051  1314  2B22               	goto	l6738
 15052  1315  09A9               	comf	___altoft@c,f
 15053  1316  09AA               	comf	___altoft@c+1,f
 15054  1317  09AB               	comf	___altoft@c+2,f
 15055  1318  09AC               	comf	___altoft@c+3,f
 15056  1319  0AA9               	incf	___altoft@c,f
 15057  131A  1903               	skipnz
 15058  131B  0AAA               	incf	___altoft@c+1,f
 15059  131C  1903               	skipnz
 15060  131D  0AAB               	incf	___altoft@c+2,f
 15061  131E  1903               	skipnz
 15062  131F  0AAC               	incf	___altoft@c+3,f
 15063  1320  01B0               	clrf	___altoft@sign
 15064  1321  0AB0               	incf	___altoft@sign,f
 15065  1322                     l6738:	
 15066  1322  30FF               	movlw	255
 15067  1323  052C               	andwf	___altoft@c+3,w
 15068  1324  1903               	btfsc	3,2
 15069  1325  2B32               	goto	l6740
 15070  1326  3001               	movlw	1
 15071  1327                     u6775:	
 15072  1327  36AC               	lsrf	___altoft@c+3,f
 15073  1328  0CAB               	rrf	___altoft@c+2,f
 15074  1329  0CAA               	rrf	___altoft@c+1,f
 15075  132A  0CA9               	rrf	___altoft@c,f
 15076  132B  0B89               	decfsz	9,f
 15077  132C  2B27               	goto	u6775
 15078  132D  3001               	movlw	1
 15079  132E  00AD               	movwf	??___altoft
 15080  132F  082D               	movf	??___altoft,w
 15081  1330  07AF               	addwf	___altoft@exp,f
 15082  1331  2B22               	goto	l6738
 15083  1332                     l6740:	
 15084  1332  0829               	movf	___altoft@c,w
 15085  1333  00A1               	movwf	___ftpack@arg
 15086  1334  082A               	movf	___altoft@c+1,w
 15087  1335  00A2               	movwf	___ftpack@arg+1
 15088  1336  082B               	movf	___altoft@c+2,w
 15089  1337  00A3               	movwf	___ftpack@arg+2
 15090  1338  082F               	movf	___altoft@exp,w
 15091  1339  00AD               	movwf	??___altoft
 15092  133A  082D               	movf	??___altoft,w
 15093  133B  00A4               	movwf	___ftpack@exp
 15094  133C  0830               	movf	___altoft@sign,w
 15095  133D  00AE               	movwf	??___altoft+1
 15096  133E  082E               	movf	??___altoft+1,w
 15097  133F  00A5               	movwf	___ftpack@sign
 15098  1340  3195  25C2         	fcall	___ftpack
 15099  1342  0020               	movlb	0	; select bank0
 15100  1343  0821               	movf	?___ftpack,w
 15101  1344  00A9               	movwf	?___altoft
 15102  1345  0822               	movf	?___ftpack+1,w
 15103  1346  00AA               	movwf	?___altoft+1
 15104  1347  0823               	movf	?___ftpack+2,w
 15105  1348  00AB               	movwf	?___altoft+2
 15106  1349  0008               	return
 15107  134A                     __end_of___altoft:	
 15108                           
 15109                           	psect	text80
 15110  15C2                     __ptext80:	
 15111 ;; *************** function ___ftpack *****************
 15112 ;; Defined at:
 15113 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\float.c"
 15114 ;; Parameters:    Size  Location     Type
 15115 ;;  arg             3    1[BANK0 ] unsigned um
 15116 ;;  exp             1    4[BANK0 ] unsigned char 
 15117 ;;  sign            1    5[BANK0 ] unsigned char 
 15118 ;; Auto vars:     Size  Location     Type
 15119 ;;		None
 15120 ;; Return value:  Size  Location     Type
 15121 ;;                  3    1[BANK0 ] float 
 15122 ;; Registers used:
 15123 ;;		wreg, status,2, status,0
 15124 ;; Tracked objects:
 15125 ;;		On entry : 0/0
 15126 ;;		On exit  : 0/0
 15127 ;;		Unchanged: 0/0
 15128 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15129 ;;      Params:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15130 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15131 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15132 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15133 ;;Total ram usage:        8 bytes
 15134 ;; Hardware stack levels used:    1
 15135 ;; Hardware stack levels required when called:    4
 15136 ;; This function calls:
 15137 ;;		Nothing
 15138 ;; This function is called by:
 15139 ;;		___altoft
 15140 ;;		___awtoft
 15141 ;;		___ftadd
 15142 ;;		___ftdiv
 15143 ;;		___ftmul
 15144 ;;		___lwtoft
 15145 ;; This function uses a non-reentrant model
 15146 ;;
 15147                           
 15148                           
 15149                           ;psect for function ___ftpack
 15150  15C2                     ___ftpack:	
 15151                           
 15152                           ;incstack = 0
 15153                           ; Regs used in ___ftpack: [wreg+status,2+status,0]
 15154  15C2  0020               	movlb	0	; select bank0
 15155  15C3  0824               	movf	___ftpack@exp,w
 15156  15C4  1903               	btfsc	3,2
 15157  15C5  2DCB               	goto	l5740
 15158  15C6  0823               	movf	___ftpack@arg+2,w
 15159  15C7  0422               	iorwf	___ftpack@arg+1,w
 15160  15C8  0421               	iorwf	___ftpack@arg,w
 15161  15C9  1D03               	skipz
 15162  15CA  2DDC               	goto	l5746
 15163  15CB                     l5740:	
 15164  15CB  3000               	movlw	0
 15165  15CC  00A1               	movwf	?___ftpack
 15166  15CD  3000               	movlw	0
 15167  15CE  00A2               	movwf	?___ftpack+1
 15168  15CF  3000               	movlw	0
 15169  15D0  00A3               	movwf	?___ftpack+2
 15170  15D1  0008               	return
 15171  15D2                     l5744:	
 15172  15D2  3001               	movlw	1
 15173  15D3  00A6               	movwf	??___ftpack
 15174  15D4  0826               	movf	??___ftpack,w
 15175  15D5  07A4               	addwf	___ftpack@exp,f
 15176  15D6  3001               	movlw	1
 15177  15D7                     u5335:	
 15178  15D7  36A3               	lsrf	___ftpack@arg+2,f
 15179  15D8  0CA2               	rrf	___ftpack@arg+1,f
 15180  15D9  0CA1               	rrf	___ftpack@arg,f
 15181  15DA  0B89               	decfsz	9,f
 15182  15DB  2DD7               	goto	u5335
 15183  15DC                     l5746:	
 15184  15DC  30FE               	movlw	254
 15185  15DD  0523               	andwf	___ftpack@arg+2,w
 15186  15DE  1903               	btfsc	3,2
 15187  15DF  2DF5               	goto	l1505
 15188  15E0  2DD2               	goto	l5744
 15189  15E1                     l5748:	
 15190  15E1  3001               	movlw	1
 15191  15E2  00A6               	movwf	??___ftpack
 15192  15E3  0826               	movf	??___ftpack,w
 15193  15E4  07A4               	addwf	___ftpack@exp,f
 15194  15E5  3001               	movlw	1
 15195  15E6  07A1               	addwf	___ftpack@arg,f
 15196  15E7  3000               	movlw	0
 15197  15E8  1803               	skipnc
 15198  15E9  3001               	movlw	1
 15199  15EA  07A2               	addwf	___ftpack@arg+1,f
 15200  15EB  3000               	movlw	0
 15201  15EC  1803               	skipnc
 15202  15ED  3001               	movlw	1
 15203  15EE  07A3               	addwf	___ftpack@arg+2,f
 15204  15EF  3001               	movlw	1
 15205  15F0                     u5355:	
 15206  15F0  36A3               	lsrf	___ftpack@arg+2,f
 15207  15F1  0CA2               	rrf	___ftpack@arg+1,f
 15208  15F2  0CA1               	rrf	___ftpack@arg,f
 15209  15F3  0B89               	decfsz	9,f
 15210  15F4  2DF0               	goto	u5355
 15211  15F5                     l1505:	
 15212  15F5  30FF               	movlw	255
 15213  15F6  0523               	andwf	___ftpack@arg+2,w
 15214  15F7  1903               	btfsc	3,2
 15215  15F8  2E02               	goto	l5756
 15216  15F9  2DE1               	goto	l5748
 15217  15FA                     l5754:	
 15218  15FA  3001               	movlw	1
 15219  15FB  02A4               	subwf	___ftpack@exp,f
 15220  15FC  3001               	movlw	1
 15221  15FD                     u5375:	
 15222  15FD  35A1               	lslf	___ftpack@arg,f
 15223  15FE  0DA2               	rlf	___ftpack@arg+1,f
 15224  15FF  0DA3               	rlf	___ftpack@arg+2,f
 15225  1600  0B89               	decfsz	9,f
 15226  1601  2DFD               	goto	u5375
 15227  1602                     l5756:	
 15228  1602  1BA2               	btfsc	___ftpack@arg+1,7
 15229  1603  2E08               	goto	l1512
 15230  1604  3002               	movlw	2
 15231  1605  0224               	subwf	___ftpack@exp,w
 15232  1606  1803               	skipnc
 15233  1607  2DFA               	goto	l5754
 15234  1608                     l1512:	
 15235  1608  1824               	btfsc	___ftpack@exp,0
 15236  1609  2E10               	goto	l1513
 15237  160A  30FF               	movlw	255
 15238  160B  05A1               	andwf	___ftpack@arg,f
 15239  160C  307F               	movlw	127
 15240  160D  05A2               	andwf	___ftpack@arg+1,f
 15241  160E  30FF               	movlw	255
 15242  160F  05A3               	andwf	___ftpack@arg+2,f
 15243  1610                     l1513:	
 15244  1610  1003               	clrc
 15245  1611  0CA4               	rrf	___ftpack@exp,f
 15246  1612  0824               	movf	___ftpack@exp,w
 15247  1613  00A6               	movwf	??___ftpack
 15248  1614  01A7               	clrf	??___ftpack+1
 15249  1615  01A8               	clrf	??___ftpack+2
 15250  1616  3010               	movlw	16
 15251  1617                     u5415:	
 15252  1617  35A6               	lslf	??___ftpack,f
 15253  1618  0DA7               	rlf	??___ftpack+1,f
 15254  1619  0DA8               	rlf	??___ftpack+2,f
 15255  161A  0B89               	decfsz	9,f
 15256  161B  2E17               	goto	u5415
 15257  161C  0826               	movf	??___ftpack,w
 15258  161D  04A1               	iorwf	___ftpack@arg,f
 15259  161E  0827               	movf	??___ftpack+1,w
 15260  161F  04A2               	iorwf	___ftpack@arg+1,f
 15261  1620  0828               	movf	??___ftpack+2,w
 15262  1621  04A3               	iorwf	___ftpack@arg+2,f
 15263  1622  0825               	movf	___ftpack@sign,w
 15264  1623  1903               	btfsc	3,2
 15265  1624  0008               	return
 15266  1625  17A3               	bsf	___ftpack@arg+2,7
 15267  1626  0008               	return
 15268  1627                     __end_of___ftpack:	
 15269                           
 15270                           	psect	text81
 15271  08A9                     __ptext81:	
 15272 ;; *************** function ___aldiv *****************
 15273 ;; Defined at:
 15274 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\aldiv.c"
 15275 ;; Parameters:    Size  Location     Type
 15276 ;;  divisor         4    1[BANK0 ] long 
 15277 ;;  dividend        4    5[BANK0 ] long 
 15278 ;; Auto vars:     Size  Location     Type
 15279 ;;  quotient        4   12[BANK0 ] long 
 15280 ;;  sign            1   11[BANK0 ] unsigned char 
 15281 ;;  counter         1   10[BANK0 ] unsigned char 
 15282 ;; Return value:  Size  Location     Type
 15283 ;;                  4    1[BANK0 ] long 
 15284 ;; Registers used:
 15285 ;;		wreg, status,2, status,0
 15286 ;; Tracked objects:
 15287 ;;		On entry : 0/0
 15288 ;;		On exit  : 0/0
 15289 ;;		Unchanged: 0/0
 15290 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15291 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15292 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15293 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15294 ;;      Totals:         0      15       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15295 ;;Total ram usage:       15 bytes
 15296 ;; Hardware stack levels used:    1
 15297 ;; Hardware stack levels required when called:    4
 15298 ;; This function calls:
 15299 ;;		Nothing
 15300 ;; This function is called by:
 15301 ;;		_BMP_readTemperature
 15302 ;; This function uses a non-reentrant model
 15303 ;;
 15304                           
 15305                           
 15306                           ;psect for function ___aldiv
 15307  08A9                     ___aldiv:	
 15308                           
 15309                           ;incstack = 0
 15310                           ; Regs used in ___aldiv: [wreg+status,2+status,0]
 15311  08A9  0020               	movlb	0	; select bank0
 15312  08AA  01AB               	clrf	___aldiv@sign
 15313  08AB  1FA4               	btfss	___aldiv@divisor+3,7
 15314  08AC  28BA               	goto	l1371
 15315  08AD  09A1               	comf	___aldiv@divisor,f
 15316  08AE  09A2               	comf	___aldiv@divisor+1,f
 15317  08AF  09A3               	comf	___aldiv@divisor+2,f
 15318  08B0  09A4               	comf	___aldiv@divisor+3,f
 15319  08B1  0AA1               	incf	___aldiv@divisor,f
 15320  08B2  1903               	skipnz
 15321  08B3  0AA2               	incf	___aldiv@divisor+1,f
 15322  08B4  1903               	skipnz
 15323  08B5  0AA3               	incf	___aldiv@divisor+2,f
 15324  08B6  1903               	skipnz
 15325  08B7  0AA4               	incf	___aldiv@divisor+3,f
 15326  08B8  01AB               	clrf	___aldiv@sign
 15327  08B9  0AAB               	incf	___aldiv@sign,f
 15328  08BA                     l1371:	
 15329  08BA  1FA8               	btfss	___aldiv@dividend+3,7
 15330  08BB  28CB               	goto	l6698
 15331  08BC  09A5               	comf	___aldiv@dividend,f
 15332  08BD  09A6               	comf	___aldiv@dividend+1,f
 15333  08BE  09A7               	comf	___aldiv@dividend+2,f
 15334  08BF  09A8               	comf	___aldiv@dividend+3,f
 15335  08C0  0AA5               	incf	___aldiv@dividend,f
 15336  08C1  1903               	skipnz
 15337  08C2  0AA6               	incf	___aldiv@dividend+1,f
 15338  08C3  1903               	skipnz
 15339  08C4  0AA7               	incf	___aldiv@dividend+2,f
 15340  08C5  1903               	skipnz
 15341  08C6  0AA8               	incf	___aldiv@dividend+3,f
 15342  08C7  3001               	movlw	1
 15343  08C8  00A9               	movwf	??___aldiv
 15344  08C9  0829               	movf	??___aldiv,w
 15345  08CA  06AB               	xorwf	___aldiv@sign,f
 15346  08CB                     l6698:	
 15347  08CB  3000               	movlw	0
 15348  08CC  00AF               	movwf	___aldiv@quotient+3
 15349  08CD  3000               	movlw	0
 15350  08CE  00AE               	movwf	___aldiv@quotient+2
 15351  08CF  3000               	movlw	0
 15352  08D0  00AD               	movwf	___aldiv@quotient+1
 15353  08D1  3000               	movlw	0
 15354  08D2  00AC               	movwf	___aldiv@quotient
 15355  08D3  0824               	movf	___aldiv@divisor+3,w
 15356  08D4  0423               	iorwf	___aldiv@divisor+2,w
 15357  08D5  0422               	iorwf	___aldiv@divisor+1,w
 15358  08D6  0421               	iorwf	___aldiv@divisor,w
 15359  08D7  1903               	skipnz
 15360  08D8  2914               	goto	l6720
 15361  08D9  01AA               	clrf	___aldiv@counter
 15362  08DA  0AAA               	incf	___aldiv@counter,f
 15363  08DB                     l6706:	
 15364  08DB  1BA4               	btfsc	___aldiv@divisor+3,7
 15365  08DC  28E9               	goto	l6708
 15366  08DD  3001               	movlw	1
 15367  08DE                     u6695:	
 15368  08DE  35A1               	lslf	___aldiv@divisor,f
 15369  08DF  0DA2               	rlf	___aldiv@divisor+1,f
 15370  08E0  0DA3               	rlf	___aldiv@divisor+2,f
 15371  08E1  0DA4               	rlf	___aldiv@divisor+3,f
 15372  08E2  0B89               	decfsz	9,f
 15373  08E3  28DE               	goto	u6695
 15374  08E4  3001               	movlw	1
 15375  08E5  00A9               	movwf	??___aldiv
 15376  08E6  0829               	movf	??___aldiv,w
 15377  08E7  07AA               	addwf	___aldiv@counter,f
 15378  08E8  28DB               	goto	l6706
 15379  08E9                     l6708:	
 15380  08E9  3001               	movlw	1
 15381  08EA                     u6715:	
 15382  08EA  35AC               	lslf	___aldiv@quotient,f
 15383  08EB  0DAD               	rlf	___aldiv@quotient+1,f
 15384  08EC  0DAE               	rlf	___aldiv@quotient+2,f
 15385  08ED  0DAF               	rlf	___aldiv@quotient+3,f
 15386  08EE  0B89               	decfsz	9,f
 15387  08EF  28EA               	goto	u6715
 15388  08F0  0824               	movf	___aldiv@divisor+3,w
 15389  08F1  0228               	subwf	___aldiv@dividend+3,w
 15390  08F2  1D03               	skipz
 15391  08F3  28FE               	goto	u6725
 15392  08F4  0823               	movf	___aldiv@divisor+2,w
 15393  08F5  0227               	subwf	___aldiv@dividend+2,w
 15394  08F6  1D03               	skipz
 15395  08F7  28FE               	goto	u6725
 15396  08F8  0822               	movf	___aldiv@divisor+1,w
 15397  08F9  0226               	subwf	___aldiv@dividend+1,w
 15398  08FA  1D03               	skipz
 15399  08FB  28FE               	goto	u6725
 15400  08FC  0821               	movf	___aldiv@divisor,w
 15401  08FD  0225               	subwf	___aldiv@dividend,w
 15402  08FE                     u6725:	
 15403  08FE  1C03               	skipc
 15404  08FF  2909               	goto	l6716
 15405  0900  0821               	movf	___aldiv@divisor,w
 15406  0901  02A5               	subwf	___aldiv@dividend,f
 15407  0902  0822               	movf	___aldiv@divisor+1,w
 15408  0903  3BA6               	subwfb	___aldiv@dividend+1,f
 15409  0904  0823               	movf	___aldiv@divisor+2,w
 15410  0905  3BA7               	subwfb	___aldiv@dividend+2,f
 15411  0906  0824               	movf	___aldiv@divisor+3,w
 15412  0907  3BA8               	subwfb	___aldiv@dividend+3,f
 15413  0908  142C               	bsf	___aldiv@quotient,0
 15414  0909                     l6716:	
 15415  0909  3001               	movlw	1
 15416  090A                     u6735:	
 15417  090A  36A4               	lsrf	___aldiv@divisor+3,f
 15418  090B  0CA3               	rrf	___aldiv@divisor+2,f
 15419  090C  0CA2               	rrf	___aldiv@divisor+1,f
 15420  090D  0CA1               	rrf	___aldiv@divisor,f
 15421  090E  0B89               	decfsz	9,f
 15422  090F  290A               	goto	u6735
 15423  0910  3001               	movlw	1
 15424  0911  02AA               	subwf	___aldiv@counter,f
 15425  0912  1D03               	btfss	3,2
 15426  0913  28E9               	goto	l6708
 15427  0914                     l6720:	
 15428  0914  082B               	movf	___aldiv@sign,w
 15429  0915  1903               	btfsc	3,2
 15430  0916  2922               	goto	l6724
 15431  0917  09AC               	comf	___aldiv@quotient,f
 15432  0918  09AD               	comf	___aldiv@quotient+1,f
 15433  0919  09AE               	comf	___aldiv@quotient+2,f
 15434  091A  09AF               	comf	___aldiv@quotient+3,f
 15435  091B  0AAC               	incf	___aldiv@quotient,f
 15436  091C  1903               	skipnz
 15437  091D  0AAD               	incf	___aldiv@quotient+1,f
 15438  091E  1903               	skipnz
 15439  091F  0AAE               	incf	___aldiv@quotient+2,f
 15440  0920  1903               	skipnz
 15441  0921  0AAF               	incf	___aldiv@quotient+3,f
 15442  0922                     l6724:	
 15443  0922  082F               	movf	___aldiv@quotient+3,w
 15444  0923  00A4               	movwf	?___aldiv+3
 15445  0924  082E               	movf	___aldiv@quotient+2,w
 15446  0925  00A3               	movwf	?___aldiv+2
 15447  0926  082D               	movf	___aldiv@quotient+1,w
 15448  0927  00A2               	movwf	?___aldiv+1
 15449  0928  082C               	movf	___aldiv@quotient,w
 15450  0929  00A1               	movwf	?___aldiv
 15451  092A  0008               	return
 15452  092B                     __end_of___aldiv:	
 15453                           
 15454                           	psect	text82
 15455  138F                     __ptext82:	
 15456 ;; *************** function _HMC5883L_ReadBits *****************
 15457 ;; Defined at:
 15458 ;;		line 418 in file "hmc5883l.c"
 15459 ;; Parameters:    Size  Location     Type
 15460 ;;  slaveAddr       1    wreg     unsigned char 
 15461 ;;  regAddr         1   35[BANK0 ] unsigned char 
 15462 ;;  bitStart        1   36[BANK0 ] unsigned char 
 15463 ;;  length          1   37[BANK0 ] unsigned char 
 15464 ;;  data            1   38[BANK0 ] PTR unsigned char 
 15465 ;;		 -> BMP_readTemperature@tmp(1), HMC5883L_GetHeading@tmp(1), HMC5883L_GetMode@tmp(1), HMC5883L_GetGain@tmp(1), 
 15466 ;;		 -> HMC5883L_GetMeasurementBias@tmp(1), HMC5883L_GetDataRate@tmp(1), HMC5883L_GetSampleAveraging@tmp(1), 
 15467 ;; Auto vars:     Size  Location     Type
 15468 ;;  slaveAddr       1   42[BANK0 ] unsigned char 
 15469 ;;  mask            1   43[BANK0 ] unsigned char 
 15470 ;;  tmp             1   44[BANK0 ] unsigned char 
 15471 ;; Return value:  Size  Location     Type
 15472 ;;                  1    wreg      unsigned char 
 15473 ;; Registers used:
 15474 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15475 ;; Tracked objects:
 15476 ;;		On entry : 0/0
 15477 ;;		On exit  : 0/0
 15478 ;;		Unchanged: 0/0
 15479 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15480 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15481 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15482 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15483 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15484 ;;Total ram usage:       10 bytes
 15485 ;; Hardware stack levels used:    1
 15486 ;; Hardware stack levels required when called:    8
 15487 ;; This function calls:
 15488 ;;		_HMC5883L_I2C_BufferRead
 15489 ;; This function is called by:
 15490 ;;		_HMC5883L_GetHeading
 15491 ;;		_BMP_readTemperature
 15492 ;;		_HMC5883L_GetSampleAveraging
 15493 ;;		_HMC5883L_GetDataRate
 15494 ;;		_HMC5883L_GetMeasurementBias
 15495 ;;		_HMC5883L_GetGain
 15496 ;;		_HMC5883L_GetMode
 15497 ;; This function uses a non-reentrant model
 15498 ;;
 15499                           
 15500                           
 15501                           ;psect for function _HMC5883L_ReadBits
 15502  138F                     _HMC5883L_ReadBits:	
 15503                           
 15504                           ;incstack = 0
 15505                           ; Regs used in _HMC5883L_ReadBits: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 15506                           ;HMC5883L_ReadBits@slaveAddr stored from wreg
 15507  138F  0020               	movlb	0	; select bank0
 15508  1390  00CA               	movwf	HMC5883L_ReadBits@slaveAddr
 15509                           
 15510                           ;hmc5883l.c: 420: uint8_t tmp;
 15511                           ;hmc5883l.c: 422: if(HMC5883L_I2C_BufferRead(slaveAddr, &tmp, regAddr, 1))
 15512  1391  304C               	movlw	low HMC5883L_ReadBits@tmp
 15513  1392  00BC               	movwf	HMC5883L_I2C_BufferRead@pBuffer
 15514  1393  3000               	movlw	high HMC5883L_ReadBits@tmp
 15515  1394  00BD               	movwf	HMC5883L_I2C_BufferRead@pBuffer+1
 15516  1395  0843               	movf	HMC5883L_ReadBits@regAddr,w
 15517  1396  00C7               	movwf	??_HMC5883L_ReadBits
 15518  1397  0847               	movf	??_HMC5883L_ReadBits,w
 15519  1398  00BE               	movwf	HMC5883L_I2C_BufferRead@ReadAddr
 15520  1399  3001               	movlw	1
 15521  139A  00BF               	movwf	HMC5883L_I2C_BufferRead@NumByteToRead
 15522  139B  3000               	movlw	0
 15523  139C  00C0               	movwf	HMC5883L_I2C_BufferRead@NumByteToRead+1
 15524  139D  084A               	movf	HMC5883L_ReadBits@slaveAddr,w
 15525  139E  319E  26CC  3193   	fcall	_HMC5883L_I2C_BufferRead
 15526  13A1  3A00               	xorlw	0
 15527  13A2  1903               	skipnz
 15528  13A3  2BD3               	goto	l6054
 15529                           
 15530                           ;hmc5883l.c: 423: {
 15531                           ;hmc5883l.c: 424: uint8_t mask = ((1 << length) - 1) << (bitStart - length + 1);
 15532  13A4  3001               	movlw	1
 15533  13A5  0020               	movlb	0	; select bank0
 15534  13A6  00C7               	movwf	??_HMC5883L_ReadBits
 15535  13A7  0A45               	incf	HMC5883L_ReadBits@length,w
 15536  13A8  2BAA               	goto	u6044
 15537  13A9                     u6045:	
 15538  13A9  35C7               	lslf	??_HMC5883L_ReadBits,f
 15539  13AA                     u6044:	
 15540  13AA  0B89               	decfsz	9,f
 15541  13AB  2BA9               	goto	u6045
 15542  13AC  0847               	movf	??_HMC5883L_ReadBits,w
 15543  13AD  3EFF               	addlw	255
 15544  13AE  00C8               	movwf	??_HMC5883L_ReadBits+1
 15545  13AF  0345               	decf	HMC5883L_ReadBits@length,w
 15546  13B0  3AFF               	xorlw	255
 15547  13B1  0744               	addwf	HMC5883L_ReadBits@bitStart,w
 15548  13B2  3E01               	addlw	1
 15549  13B3  0A89               	incf	9,f
 15550  13B4  2BB6               	goto	u6054
 15551  13B5                     u6055:	
 15552  13B5  35C8               	lslf	??_HMC5883L_ReadBits+1,f
 15553  13B6                     u6054:	
 15554  13B6  0B89               	decfsz	9,f
 15555  13B7  2BB5               	goto	u6055
 15556  13B8  0848               	movf	??_HMC5883L_ReadBits+1,w
 15557  13B9  00C9               	movwf	??_HMC5883L_ReadBits+2
 15558  13BA  0849               	movf	??_HMC5883L_ReadBits+2,w
 15559  13BB  00CB               	movwf	HMC5883L_ReadBits@mask
 15560                           
 15561                           ;hmc5883l.c: 425: tmp &= mask;
 15562  13BC  084B               	movf	HMC5883L_ReadBits@mask,w
 15563  13BD  00C7               	movwf	??_HMC5883L_ReadBits
 15564  13BE  0847               	movf	??_HMC5883L_ReadBits,w
 15565  13BF  05CC               	andwf	HMC5883L_ReadBits@tmp,f
 15566                           
 15567                           ;hmc5883l.c: 426: tmp >>= (bitStart - length + 1);
 15568  13C0  0345               	decf	HMC5883L_ReadBits@length,w
 15569  13C1  3AFF               	xorlw	255
 15570  13C2  0744               	addwf	HMC5883L_ReadBits@bitStart,w
 15571  13C3  3E01               	addlw	1
 15572  13C4  0A89               	incf	9,f
 15573  13C5  2BC8               	goto	u6060
 15574  13C6                     u6065:	
 15575  13C6  1003               	clrc
 15576  13C7  0CCC               	rrf	HMC5883L_ReadBits@tmp,f
 15577  13C8                     u6060:	
 15578  13C8  3EFF               	addlw	-1
 15579  13C9  1D03               	skipz
 15580  13CA  2BC6               	goto	u6065
 15581                           
 15582                           ;hmc5883l.c: 427: *data = tmp;
 15583  13CB  084C               	movf	HMC5883L_ReadBits@tmp,w
 15584  13CC  00C7               	movwf	??_HMC5883L_ReadBits
 15585  13CD  0846               	movf	HMC5883L_ReadBits@data,w
 15586  13CE  0086               	movwf	6
 15587  13CF  0187               	clrf	7
 15588  13D0  0847               	movf	??_HMC5883L_ReadBits,w
 15589  13D1  0081               	movwf	1
 15590                           
 15591                           ;hmc5883l.c: 428: }
 15592  13D2  0008               	return
 15593  13D3                     l6054:	
 15594                           
 15595                           ;hmc5883l.c: 429: else return 0;
 15596  13D3  3000               	movlw	0
 15597  13D4  0008               	return
 15598  13D5                     __end_of_HMC5883L_ReadBits:	
 15599                           
 15600                           	psect	text83
 15601  1ECC                     __ptext83:	
 15602 ;; *************** function _HMC5883L_I2C_BufferRead *****************
 15603 ;; Defined at:
 15604 ;;		line 471 in file "hmc5883l.c"
 15605 ;; Parameters:    Size  Location     Type
 15606 ;;  slaveAddr       1    wreg     unsigned char 
 15607 ;;  pBuffer         2   28[BANK0 ] PTR unsigned char 
 15608 ;;		 -> HMC5883L_ReadBit@tmp(1), HMC5883L_ReadBits@tmp(1), HMC5883L_WriteBit@tmp(1), HMC5883L_WriteBits@tmp(1), 
 15609 ;;		 -> heading(8), HMC5883L_TestConnection@tmp(3), MPU6050_ReadBit@tmp(1), MPU6050_ReadBits@tmp(1), 
 15610 ;;		 -> MPU6050_WriteBit@tmp(1), MPU6050_WriteBits@tmp(1), MPU6050_GetRawAccel@tempBuffer(6), MPU6050_GetRawAccelGyro@tm
      +pBuffer(14), 
 15611 ;;  ReadAddr        1   30[BANK0 ] unsigned char 
 15612 ;;  NumByteToRea    2   31[BANK0 ] unsigned short 
 15613 ;; Auto vars:     Size  Location     Type
 15614 ;;  slaveAddr       1   34[BANK0 ] unsigned char 
 15615 ;; Return value:  Size  Location     Type
 15616 ;;                  1    wreg      unsigned char 
 15617 ;; Registers used:
 15618 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15619 ;; Tracked objects:
 15620 ;;		On entry : 0/0
 15621 ;;		On exit  : 0/0
 15622 ;;		Unchanged: 0/0
 15623 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15624 ;;      Params:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15625 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15626 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15627 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15628 ;;Total ram usage:        7 bytes
 15629 ;; Hardware stack levels used:    1
 15630 ;; Hardware stack levels required when called:    7
 15631 ;; This function calls:
 15632 ;;		_I2C_BufferRead
 15633 ;; This function is called by:
 15634 ;;		_HMC5883L_GetHeading
 15635 ;;		_HMC5883L_WriteBits
 15636 ;;		_HMC5883L_ReadBits
 15637 ;;		_MPU6050_I2C_BufferRead
 15638 ;;		_HMC5883L_TestConnection
 15639 ;;		_HMC5883L_WriteBit
 15640 ;;		_HMC5883L_ReadBit
 15641 ;; This function uses a non-reentrant model
 15642 ;;
 15643                           
 15644                           
 15645                           ;psect for function _HMC5883L_I2C_BufferRead
 15646  1ECC                     _HMC5883L_I2C_BufferRead:	
 15647                           
 15648                           ;incstack = 0
 15649                           ; Regs used in _HMC5883L_I2C_BufferRead: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+csta
      +                          ck]
 15650                           ;HMC5883L_I2C_BufferRead@slaveAddr stored from wreg
 15651  1ECC  0020               	movlb	0	; select bank0
 15652  1ECD  00C2               	movwf	HMC5883L_I2C_BufferRead@slaveAddr
 15653                           
 15654                           ;hmc5883l.c: 473: return(I2C_BufferRead(slaveAddr,pBuffer,ReadAddr,NumByteToRead));
 15655  1ECE  083D               	movf	HMC5883L_I2C_BufferRead@pBuffer+1,w
 15656  1ECF  00B2               	movwf	I2C_BufferRead@pBuffer+1
 15657  1ED0  083C               	movf	HMC5883L_I2C_BufferRead@pBuffer,w
 15658  1ED1  00B1               	movwf	I2C_BufferRead@pBuffer
 15659  1ED2  083E               	movf	HMC5883L_I2C_BufferRead@ReadAddr,w
 15660  1ED3  00C1               	movwf	??_HMC5883L_I2C_BufferRead
 15661  1ED4  0841               	movf	??_HMC5883L_I2C_BufferRead,w
 15662  1ED5  00B3               	movwf	I2C_BufferRead@ReadAddr
 15663  1ED6  0840               	movf	HMC5883L_I2C_BufferRead@NumByteToRead+1,w
 15664  1ED7  00B5               	movwf	I2C_BufferRead@NumByteToRead+1
 15665  1ED8  083F               	movf	HMC5883L_I2C_BufferRead@NumByteToRead,w
 15666  1ED9  00B4               	movwf	I2C_BufferRead@NumByteToRead
 15667  1EDA  0842               	movf	HMC5883L_I2C_BufferRead@slaveAddr,w
 15668  1EDB  3195  2564         	fcall	_I2C_BufferRead
 15669  1EDD  0008               	return
 15670  1EDE                     __end_of_HMC5883L_I2C_BufferRead:	
 15671                           
 15672                           	psect	text84
 15673  1D6A                     __ptext84:	
 15674 ;; *************** function _Diag_getTempSensorHealth *****************
 15675 ;; Defined at:
 15676 ;;		line 25 in file "diagnostics.c"
 15677 ;; Parameters:    Size  Location     Type
 15678 ;;		None
 15679 ;; Auto vars:     Size  Location     Type
 15680 ;;		None
 15681 ;; Return value:  Size  Location     Type
 15682 ;;                  1    wreg      unsigned char 
 15683 ;; Registers used:
 15684 ;;		wreg
 15685 ;; Tracked objects:
 15686 ;;		On entry : 0/0
 15687 ;;		On exit  : 0/0
 15688 ;;		Unchanged: 0/0
 15689 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15690 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15691 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15692 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15693 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15694 ;;Total ram usage:        0 bytes
 15695 ;; Hardware stack levels used:    1
 15696 ;; Hardware stack levels required when called:    4
 15697 ;; This function calls:
 15698 ;;		Nothing
 15699 ;; This function is called by:
 15700 ;;		_BMP_readTemperature
 15701 ;; This function uses a non-reentrant model
 15702 ;;
 15703                           
 15704                           
 15705                           ;psect for function _Diag_getTempSensorHealth
 15706  1D6A                     _Diag_getTempSensorHealth:	
 15707                           
 15708                           ;diagnostics.c: 27: return (sensorHealth.tempSensorHealth);
 15709                           
 15710                           ;incstack = 0
 15711                           ; Regs used in _Diag_getTempSensorHealth: [wreg]
 15712  1D6A  0022               	movlb	2	; select bank2
 15713  1D6B  0866               	movf	_sensorHealth^(0+256),w
 15714  1D6C  0008               	return
 15715  1D6D                     __end_of_Diag_getTempSensorHealth:	
 15716                           
 15717                           	psect	text85
 15718  1627                     __ptext85:	
 15719 ;; *************** function _BMP_init *****************
 15720 ;; Defined at:
 15721 ;;		line 39 in file "bmp280.c"
 15722 ;; Parameters:    Size  Location     Type
 15723 ;;		None
 15724 ;; Auto vars:     Size  Location     Type
 15725 ;;  t               1   31[BANK0 ] unsigned char 
 15726 ;; Return value:  Size  Location     Type
 15727 ;;                  1    wreg      void 
 15728 ;; Registers used:
 15729 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15730 ;; Tracked objects:
 15731 ;;		On entry : 0/0
 15732 ;;		On exit  : 0/0
 15733 ;;		Unchanged: 0/0
 15734 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15735 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15736 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15737 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15738 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15739 ;;Total ram usage:        4 bytes
 15740 ;; Hardware stack levels used:    1
 15741 ;; Hardware stack levels required when called:    7
 15742 ;; This function calls:
 15743 ;;		_Diag_setTempSensorHealth
 15744 ;;		_I2C_BufferRead
 15745 ;;		_I2C_ByteWrite
 15746 ;; This function is called by:
 15747 ;;		_main
 15748 ;;		_BMP_readTemperature
 15749 ;; This function uses a non-reentrant model
 15750 ;;
 15751                           
 15752                           
 15753                           ;psect for function _BMP_init
 15754  1627                     _BMP_init:	
 15755                           
 15756                           ;bmp280.c: 41: char t;
 15757                           ;bmp280.c: 42: t=0x40;
 15758                           
 15759                           ;incstack = 0
 15760                           ; Regs used in _BMP_init: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 15761  1627  3040               	movlw	64
 15762  1628  0020               	movlb	0	; select bank0
 15763  1629  00BC               	movwf	??_BMP_init
 15764  162A  083C               	movf	??_BMP_init,w
 15765  162B  00BF               	movwf	BMP_init@t
 15766                           
 15767                           ;bmp280.c: 43: if(I2C_ByteWrite(0x76, &t, 0xF4)==0)
 15768  162C  303F               	movlw	(low (BMP_init@t| 0))& (0+255)
 15769  162D  00BC               	movwf	??_BMP_init
 15770  162E  083C               	movf	??_BMP_init,w
 15771  162F  00AF               	movwf	I2C_ByteWrite@pBuffer
 15772  1630  30F4               	movlw	244
 15773  1631  00BD               	movwf	??_BMP_init+1
 15774  1632  083D               	movf	??_BMP_init+1,w
 15775  1633  00B0               	movwf	I2C_ByteWrite@WriteAddr
 15776  1634  3076               	movlw	118
 15777  1635  3192  2295  3196   	fcall	_I2C_ByteWrite
 15778  1638  3A00               	xorlw	0
 15779  1639  1D03               	skipz
 15780  163A  2E3F               	goto	l6556
 15781                           
 15782                           ;bmp280.c: 44: {
 15783                           ;bmp280.c: 45: Diag_setTempSensorHealth(0);
 15784  163B  3000               	movlw	0
 15785  163C  319D  25BC         	fcall	_Diag_setTempSensorHealth
 15786                           
 15787                           ;bmp280.c: 46: return;
 15788  163E  0008               	return
 15789  163F                     l6556:	
 15790                           
 15791                           ;bmp280.c: 47: }
 15792                           ;bmp280.c: 48: t=0xE0;
 15793  163F  30E0               	movlw	224
 15794  1640  0020               	movlb	0	; select bank0
 15795  1641  00BC               	movwf	??_BMP_init
 15796  1642  083C               	movf	??_BMP_init,w
 15797  1643  00BF               	movwf	BMP_init@t
 15798                           
 15799                           ;bmp280.c: 50: if(I2C_BufferRead(0x76, b1, 0x88, 24)==0)
 15800  1644  30AA               	movlw	low _b1
 15801  1645  00B1               	movwf	I2C_BufferRead@pBuffer
 15802  1646  3001               	movlw	high _b1
 15803  1647  00B2               	movwf	I2C_BufferRead@pBuffer+1
 15804  1648  3088               	movlw	136
 15805  1649  00BC               	movwf	??_BMP_init
 15806  164A  083C               	movf	??_BMP_init,w
 15807  164B  00B3               	movwf	I2C_BufferRead@ReadAddr
 15808  164C  3018               	movlw	24
 15809  164D  00B4               	movwf	I2C_BufferRead@NumByteToRead
 15810  164E  3000               	movlw	0
 15811  164F  00B5               	movwf	I2C_BufferRead@NumByteToRead+1
 15812  1650  3076               	movlw	118
 15813  1651  3195  2564  3196   	fcall	_I2C_BufferRead
 15814  1654  3A00               	xorlw	0
 15815  1655  1D03               	skipz
 15816  1656  2E5B               	goto	l6564
 15817                           
 15818                           ;bmp280.c: 51: {
 15819                           ;bmp280.c: 52: Diag_setTempSensorHealth(0);
 15820  1657  3000               	movlw	0
 15821  1658  319D  25BC         	fcall	_Diag_setTempSensorHealth
 15822                           
 15823                           ;bmp280.c: 53: return;
 15824  165A  0008               	return
 15825  165B                     l6564:	
 15826                           
 15827                           ;bmp280.c: 54: }
 15828                           ;bmp280.c: 55: dig_T1 = ((u16)b1[0] & 0xFF) + (((u16)b1[1] & 0xFF) * 256);
 15829  165B  0023               	movlb	3	; select bank3
 15830  165C  082B               	movf	(_b1^(0+384)+1),w
 15831  165D  0020               	movlb	0	; select bank0
 15832  165E  00BC               	movwf	??_BMP_init
 15833  165F  01BD               	clrf	??_BMP_init+1
 15834  1660  083C               	movf	??_BMP_init,w
 15835  1661  00BD               	movwf	??_BMP_init+1
 15836  1662  01BC               	clrf	??_BMP_init
 15837  1663  0023               	movlb	3	; select bank3
 15838  1664  082A               	movf	_b1^(0+384),w
 15839  1665  0020               	movlb	0	; select bank0
 15840  1666  073C               	addwf	??_BMP_init,w
 15841  1667  0022               	movlb	2	; select bank2
 15842  1668  00D6               	movwf	_dig_T1^(0+256)
 15843  1669  0020               	movlb	0	; select bank0
 15844  166A  083D               	movf	??_BMP_init+1,w
 15845  166B  1803               	skipnc
 15846  166C  0A3D               	incf	??_BMP_init+1,w
 15847  166D  0022               	movlb	2	; select bank2
 15848  166E  00D7               	movwf	(_dig_T1^(0+256)+1)
 15849                           
 15850                           ;bmp280.c: 56: dig_T2 = (int)b1[2] + ((int)b1[3] * 256);
 15851  166F  0023               	movlb	3	; select bank3
 15852  1670  082D               	movf	(_b1^(0+384)+3),w
 15853  1671  0020               	movlb	0	; select bank0
 15854  1672  00BC               	movwf	??_BMP_init
 15855  1673  01BD               	clrf	??_BMP_init+1
 15856  1674  083C               	movf	??_BMP_init,w
 15857  1675  00BD               	movwf	??_BMP_init+1
 15858  1676  01BC               	clrf	??_BMP_init
 15859  1677  0023               	movlb	3	; select bank3
 15860  1678  082C               	movf	(_b1^(0+384)+2),w
 15861  1679  0020               	movlb	0	; select bank0
 15862  167A  073C               	addwf	??_BMP_init,w
 15863  167B  0022               	movlb	2	; select bank2
 15864  167C  00D4               	movwf	_dig_T2^(0+256)
 15865  167D  0020               	movlb	0	; select bank0
 15866  167E  083D               	movf	??_BMP_init+1,w
 15867  167F  1803               	skipnc
 15868  1680  0A3D               	incf	??_BMP_init+1,w
 15869  1681  0022               	movlb	2	; select bank2
 15870  1682  00D5               	movwf	(_dig_T2^(0+256)+1)
 15871                           
 15872                           ;bmp280.c: 57: dig_T3 = (int)b1[4] + ((int)b1[5] * 256);
 15873  1683  0023               	movlb	3	; select bank3
 15874  1684  082F               	movf	(_b1^(0+384)+5),w
 15875  1685  0020               	movlb	0	; select bank0
 15876  1686  00BC               	movwf	??_BMP_init
 15877  1687  01BD               	clrf	??_BMP_init+1
 15878  1688  083C               	movf	??_BMP_init,w
 15879  1689  00BD               	movwf	??_BMP_init+1
 15880  168A  01BC               	clrf	??_BMP_init
 15881  168B  0023               	movlb	3	; select bank3
 15882  168C  082E               	movf	(_b1^(0+384)+4),w
 15883  168D  0020               	movlb	0	; select bank0
 15884  168E  073C               	addwf	??_BMP_init,w
 15885  168F  0022               	movlb	2	; select bank2
 15886  1690  00D2               	movwf	_dig_T3^(0+256)
 15887  1691  0020               	movlb	0	; select bank0
 15888  1692  083D               	movf	??_BMP_init+1,w
 15889  1693  1803               	skipnc
 15890  1694  0A3D               	incf	??_BMP_init+1,w
 15891  1695  0022               	movlb	2	; select bank2
 15892  1696  00D3               	movwf	(_dig_T3^(0+256)+1)
 15893                           
 15894                           ;bmp280.c: 69: Diag_setTempSensorHealth(1);
 15895  1697  3001               	movlw	1
 15896  1698  319D  25BC         	fcall	_Diag_setTempSensorHealth
 15897  169A  0008               	return
 15898  169B                     __end_of_BMP_init:	
 15899                           
 15900                           	psect	text86
 15901  1295                     __ptext86:	
 15902 ;; *************** function _I2C_ByteWrite *****************
 15903 ;; Defined at:
 15904 ;;		line 3 in file "i2c_wrapper.c"
 15905 ;; Parameters:    Size  Location     Type
 15906 ;;  slaveAddr       1    wreg     unsigned char 
 15907 ;;  pBuffer         1   15[BANK0 ] PTR unsigned char 
 15908 ;;		 -> BMP_readTemperature@tmp(1), BMP_init@t(1), HMC5883L_WriteBit@tmp(1), HMC5883L_WriteBits@tmp(1), 
 15909 ;;		 -> HMC5883L_SetMode@tmp(1), HMC5883L_SetGain@tmp(1), HMC5883L_Initialize@tmp(1), MPU6050_WriteBit@tmp(1), 
 15910 ;;		 -> MPU6050_WriteBits@tmp(1), 
 15911 ;;  WriteAddr       1   16[BANK0 ] unsigned char 
 15912 ;; Auto vars:     Size  Location     Type
 15913 ;;  slaveAddr       1   21[BANK0 ] unsigned char 
 15914 ;;  data            2   22[BANK0 ] unsigned char [2]
 15915 ;;  status          1   24[BANK0 ] enum E3025
 15916 ;; Return value:  Size  Location     Type
 15917 ;;                  1    wreg      unsigned char 
 15918 ;; Registers used:
 15919 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15920 ;; Tracked objects:
 15921 ;;		On entry : 0/0
 15922 ;;		On exit  : 0/0
 15923 ;;		Unchanged: 0/0
 15924 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15925 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15926 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15927 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15928 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15929 ;;Total ram usage:       10 bytes
 15930 ;; Hardware stack levels used:    1
 15931 ;; Hardware stack levels required when called:    6
 15932 ;; This function calls:
 15933 ;;		_I2C2_MasterWrite
 15934 ;;		_Timeout_hasExpired
 15935 ;;		_Timeout_setTimeout
 15936 ;; This function is called by:
 15937 ;;		_HMC5883L_I2C_ByteWrite
 15938 ;;		_BMP_init
 15939 ;;		_BMP_readTemperature
 15940 ;; This function uses a non-reentrant model
 15941 ;;
 15942                           
 15943                           
 15944                           ;psect for function _I2C_ByteWrite
 15945  1295                     _I2C_ByteWrite:	
 15946                           
 15947                           ;incstack = 0
 15948                           ; Regs used in _I2C_ByteWrite: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 15949                           ;I2C_ByteWrite@slaveAddr stored from wreg
 15950  1295  0020               	movlb	0	; select bank0
 15951  1296  00B5               	movwf	I2C_ByteWrite@slaveAddr
 15952                           
 15953                           ;i2c_wrapper.c: 5: u8 data[2];
 15954                           ;i2c_wrapper.c: 6: I2C2_MESSAGE_STATUS status=I2C2_MESSAGE_COMPLETE;
 15955  1297  01B8               	clrf	I2C_ByteWrite@status
 15956                           
 15957                           ;i2c_wrapper.c: 8: data[0]= WriteAddr;
 15958  1298  0830               	movf	I2C_ByteWrite@WriteAddr,w
 15959  1299  00B1               	movwf	??_I2C_ByteWrite
 15960  129A  0831               	movf	??_I2C_ByteWrite,w
 15961  129B  00B6               	movwf	I2C_ByteWrite@data
 15962                           
 15963                           ;i2c_wrapper.c: 9: data[1]= *pBuffer;
 15964  129C  082F               	movf	I2C_ByteWrite@pBuffer,w
 15965  129D  0086               	movwf	6
 15966  129E  0187               	clrf	7
 15967  129F  0801               	movf	1,w
 15968  12A0  00B1               	movwf	??_I2C_ByteWrite
 15969  12A1  0831               	movf	??_I2C_ByteWrite,w
 15970  12A2  00B7               	movwf	I2C_ByteWrite@data+1
 15971                           
 15972                           ;i2c_wrapper.c: 12: I2C2_MasterWrite(data,2,slaveAddr, &status);
 15973  12A3  3002               	movlw	2
 15974  12A4  00B1               	movwf	??_I2C_ByteWrite
 15975  12A5  0831               	movf	??_I2C_ByteWrite,w
 15976  12A6  00A8               	movwf	I2C2_MasterWrite@length
 15977  12A7  0835               	movf	I2C_ByteWrite@slaveAddr,w
 15978  12A8  00B2               	movwf	??_I2C_ByteWrite+1
 15979  12A9  01B3               	clrf	??_I2C_ByteWrite+2
 15980  12AA  0832               	movf	??_I2C_ByteWrite+1,w
 15981  12AB  00A9               	movwf	I2C2_MasterWrite@address
 15982  12AC  0833               	movf	??_I2C_ByteWrite+2,w
 15983  12AD  00AA               	movwf	I2C2_MasterWrite@address+1
 15984  12AE  3038               	movlw	(low (I2C_ByteWrite@status| 0))& (0+255)
 15985  12AF  00B4               	movwf	??_I2C_ByteWrite+3
 15986  12B0  0834               	movf	??_I2C_ByteWrite+3,w
 15987  12B1  00AB               	movwf	I2C2_MasterWrite@pflag
 15988  12B2  3036               	movlw	(low (I2C_ByteWrite@data| 0))& (0+255)
 15989  12B3  3192  2210  3192   	fcall	_I2C2_MasterWrite
 15990                           
 15991                           ;i2c_wrapper.c: 13: Timeout_setTimeout(200);
 15992  12B6  30C8               	movlw	200
 15993  12B7  0020               	movlb	0	; select bank0
 15994  12B8  00A1               	movwf	Timeout_setTimeout@val
 15995  12B9  3000               	movlw	0
 15996  12BA  00A2               	movwf	Timeout_setTimeout@val+1
 15997  12BB  319E  26BB  3192   	fcall	_Timeout_setTimeout
 15998  12BE                     l5684:	
 15999                           ;i2c_wrapper.c: 15: while(status == I2C2_MESSAGE_PENDING && Timeout_hasExpired()==0);
 16000                           
 16001  12BE  3002               	movlw	2
 16002  12BF  0020               	movlb	0	; select bank0
 16003  12C0  0638               	xorwf	I2C_ByteWrite@status,w
 16004  12C1  1D03               	btfss	3,2
 16005  12C2  2AC9               	goto	l5688
 16006  12C3  3194  241F  3192   	fcall	_Timeout_hasExpired
 16007  12C6  3A00               	xorlw	0
 16008  12C7  1903               	skipnz
 16009  12C8  2ABE               	goto	l5684
 16010  12C9                     l5688:	
 16011                           
 16012                           ;i2c_wrapper.c: 17: if (status == I2C2_MESSAGE_COMPLETE)
 16013  12C9  0020               	movlb	0	; select bank0
 16014  12CA  0838               	movf	I2C_ByteWrite@status,w
 16015  12CB  1D03               	btfss	3,2
 16016  12CC  2ACF               	goto	l5696
 16017                           
 16018                           ;i2c_wrapper.c: 18: {
 16019                           ;i2c_wrapper.c: 19: return 1;
 16020  12CD  3001               	movlw	1
 16021                           
 16022                           ;i2c_wrapper.c: 20: }
 16023  12CE  0008               	return
 16024  12CF                     l5696:	
 16025                           
 16026                           ;i2c_wrapper.c: 21: else
 16027                           ;i2c_wrapper.c: 22: {
 16028                           ;i2c_wrapper.c: 23: return 0;
 16029  12CF  3000               	movlw	0
 16030  12D0  0008               	return
 16031  12D1                     __end_of_I2C_ByteWrite:	
 16032                           
 16033                           	psect	text87
 16034  1564                     __ptext87:	
 16035 ;; *************** function _I2C_BufferRead *****************
 16036 ;; Defined at:
 16037 ;;		line 30 in file "i2c_wrapper.c"
 16038 ;; Parameters:    Size  Location     Type
 16039 ;;  slaveAddr       1    wreg     unsigned char 
 16040 ;;  pBuffer         2   17[BANK0 ] PTR unsigned char 
 16041 ;;		 -> data(8), b1(24), HMC5883L_ReadBit@tmp(1), HMC5883L_ReadBits@tmp(1), 
 16042 ;;		 -> HMC5883L_WriteBit@tmp(1), HMC5883L_WriteBits@tmp(1), heading(8), HMC5883L_TestConnection@tmp(3), 
 16043 ;;		 -> MPU6050_ReadBit@tmp(1), MPU6050_ReadBits@tmp(1), MPU6050_WriteBit@tmp(1), MPU6050_WriteBits@tmp(1), 
 16044 ;;		 -> MPU6050_GetRawAccel@tempBuffer(6), MPU6050_GetRawAccelGyro@tmpBuffer(14), 
 16045 ;;  ReadAddr        1   19[BANK0 ] unsigned char 
 16046 ;;  NumByteToRea    2   20[BANK0 ] unsigned short 
 16047 ;; Auto vars:     Size  Location     Type
 16048 ;;  slaveAddr       1   26[BANK0 ] unsigned char 
 16049 ;;  status          1   27[BANK0 ] enum E3025
 16050 ;; Return value:  Size  Location     Type
 16051 ;;                  1    wreg      unsigned char 
 16052 ;; Registers used:
 16053 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 16054 ;; Tracked objects:
 16055 ;;		On entry : 0/0
 16056 ;;		On exit  : 0/0
 16057 ;;		Unchanged: 0/0
 16058 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16059 ;;      Params:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16060 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16061 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16062 ;;      Totals:         0      11       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16063 ;;Total ram usage:       11 bytes
 16064 ;; Hardware stack levels used:    1
 16065 ;; Hardware stack levels required when called:    6
 16066 ;; This function calls:
 16067 ;;		_I2C2_MasterRead
 16068 ;;		_I2C2_MasterWrite
 16069 ;;		_Timeout_hasExpired
 16070 ;;		_Timeout_setTimeout
 16071 ;; This function is called by:
 16072 ;;		_HMC5883L_I2C_BufferRead
 16073 ;;		_BMP_init
 16074 ;;		_BMP_readTemperature
 16075 ;; This function uses a non-reentrant model
 16076 ;;
 16077                           
 16078                           
 16079                           ;psect for function _I2C_BufferRead
 16080  1564                     _I2C_BufferRead:	
 16081                           
 16082                           ;incstack = 0
 16083                           ; Regs used in _I2C_BufferRead: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 16084                           ;I2C_BufferRead@slaveAddr stored from wreg
 16085  1564  0020               	movlb	0	; select bank0
 16086  1565  00BA               	movwf	I2C_BufferRead@slaveAddr
 16087                           
 16088                           ;i2c_wrapper.c: 32: I2C2_MESSAGE_STATUS status=I2C2_MESSAGE_COMPLETE;
 16089  1566  01BB               	clrf	I2C_BufferRead@status
 16090                           
 16091                           ;i2c_wrapper.c: 34: I2C2_MasterWrite(&ReadAddr, 1,slaveAddr, &status);
 16092  1567  01A8               	clrf	I2C2_MasterWrite@length
 16093  1568  0AA8               	incf	I2C2_MasterWrite@length,f
 16094  1569  083A               	movf	I2C_BufferRead@slaveAddr,w
 16095  156A  00B6               	movwf	??_I2C_BufferRead
 16096  156B  01B7               	clrf	??_I2C_BufferRead+1
 16097  156C  0836               	movf	??_I2C_BufferRead,w
 16098  156D  00A9               	movwf	I2C2_MasterWrite@address
 16099  156E  0837               	movf	??_I2C_BufferRead+1,w
 16100  156F  00AA               	movwf	I2C2_MasterWrite@address+1
 16101  1570  303B               	movlw	(low (I2C_BufferRead@status| 0))& (0+255)
 16102  1571  00B8               	movwf	??_I2C_BufferRead+2
 16103  1572  0838               	movf	??_I2C_BufferRead+2,w
 16104  1573  00AB               	movwf	I2C2_MasterWrite@pflag
 16105  1574  3033               	movlw	(low (I2C_BufferRead@ReadAddr| 0))& (0+255)
 16106  1575  3192  2210  3195   	fcall	_I2C2_MasterWrite
 16107                           
 16108                           ;i2c_wrapper.c: 35: Timeout_setTimeout(200);
 16109  1578  30C8               	movlw	200
 16110  1579  0020               	movlb	0	; select bank0
 16111  157A  00A1               	movwf	Timeout_setTimeout@val
 16112  157B  3000               	movlw	0
 16113  157C  00A2               	movwf	Timeout_setTimeout@val+1
 16114  157D  319E  26BB  3195   	fcall	_Timeout_setTimeout
 16115  1580                     l5706:	
 16116                           ;i2c_wrapper.c: 38: while(status == I2C2_MESSAGE_PENDING && Timeout_hasExpired()==0);
 16117                           
 16118  1580  3002               	movlw	2
 16119  1581  0020               	movlb	0	; select bank0
 16120  1582  063B               	xorwf	I2C_BufferRead@status,w
 16121  1583  1D03               	btfss	3,2
 16122  1584  2D8B               	goto	l5710
 16123  1585  3194  241F  3195   	fcall	_Timeout_hasExpired
 16124  1588  3A00               	xorlw	0
 16125  1589  1903               	skipnz
 16126  158A  2D80               	goto	l5706
 16127  158B                     l5710:	
 16128                           
 16129                           ;i2c_wrapper.c: 40: if (status != I2C2_MESSAGE_COMPLETE)
 16130  158B  0020               	movlb	0	; select bank0
 16131  158C  083B               	movf	I2C_BufferRead@status,w
 16132  158D  1903               	btfsc	3,2
 16133  158E  2D91               	goto	l5716
 16134                           
 16135                           ;i2c_wrapper.c: 41: {
 16136                           ;i2c_wrapper.c: 42: return 0;
 16137  158F  3000               	movlw	0
 16138  1590  0008               	return
 16139  1591                     l5716:	
 16140                           
 16141                           ;i2c_wrapper.c: 43: }
 16142                           ;i2c_wrapper.c: 46: I2C2_MasterRead( pBuffer,NumByteToRead,slaveAddr,&status);
 16143  1591  0832               	movf	I2C_BufferRead@pBuffer+1,w
 16144  1592  00AA               	movwf	I2C2_MasterRead@pdata+1
 16145  1593  0831               	movf	I2C_BufferRead@pBuffer,w
 16146  1594  00A9               	movwf	I2C2_MasterRead@pdata
 16147  1595  0834               	movf	I2C_BufferRead@NumByteToRead,w
 16148  1596  00B6               	movwf	??_I2C_BufferRead
 16149  1597  0836               	movf	??_I2C_BufferRead,w
 16150  1598  00AB               	movwf	I2C2_MasterRead@length
 16151  1599  083A               	movf	I2C_BufferRead@slaveAddr,w
 16152  159A  00B7               	movwf	??_I2C_BufferRead+1
 16153  159B  01B8               	clrf	??_I2C_BufferRead+2
 16154  159C  0837               	movf	??_I2C_BufferRead+1,w
 16155  159D  00AC               	movwf	I2C2_MasterRead@address
 16156  159E  0838               	movf	??_I2C_BufferRead+2,w
 16157  159F  00AD               	movwf	I2C2_MasterRead@address+1
 16158  15A0  303B               	movlw	(low (I2C_BufferRead@status| 0))& (0+255)
 16159  15A1  00B9               	movwf	??_I2C_BufferRead+3
 16160  15A2  0839               	movf	??_I2C_BufferRead+3,w
 16161  15A3  00AE               	movwf	I2C2_MasterRead@pflag
 16162  15A4  3191  21E8  3195   	fcall	_I2C2_MasterRead
 16163                           
 16164                           ;i2c_wrapper.c: 47: Timeout_setTimeout(200);
 16165  15A7  30C8               	movlw	200
 16166  15A8  0020               	movlb	0	; select bank0
 16167  15A9  00A1               	movwf	Timeout_setTimeout@val
 16168  15AA  3000               	movlw	0
 16169  15AB  00A2               	movwf	Timeout_setTimeout@val+1
 16170  15AC  319E  26BB  3195   	fcall	_Timeout_setTimeout
 16171  15AF                     l5720:	
 16172                           ;i2c_wrapper.c: 49: while(status == I2C2_MESSAGE_PENDING && Timeout_hasExpired()==0);
 16173                           
 16174  15AF  3002               	movlw	2
 16175  15B0  0020               	movlb	0	; select bank0
 16176  15B1  063B               	xorwf	I2C_BufferRead@status,w
 16177  15B2  1D03               	btfss	3,2
 16178  15B3  2DBA               	goto	l5724
 16179  15B4  3194  241F  3195   	fcall	_Timeout_hasExpired
 16180  15B7  3A00               	xorlw	0
 16181  15B8  1903               	skipnz
 16182  15B9  2DAF               	goto	l5720
 16183  15BA                     l5724:	
 16184                           
 16185                           ;i2c_wrapper.c: 51: if (status == I2C2_MESSAGE_COMPLETE)
 16186  15BA  0020               	movlb	0	; select bank0
 16187  15BB  083B               	movf	I2C_BufferRead@status,w
 16188  15BC  1D03               	btfss	3,2
 16189  15BD  2DC0               	goto	l5732
 16190                           
 16191                           ;i2c_wrapper.c: 52: return 1;
 16192  15BE  3001               	movlw	1
 16193  15BF  0008               	return
 16194  15C0                     l5732:	
 16195                           
 16196                           ;i2c_wrapper.c: 53: else
 16197                           ;i2c_wrapper.c: 54: return 0;
 16198  15C0  3000               	movlw	0
 16199  15C1  0008               	return
 16200  15C2                     __end_of_I2C_BufferRead:	
 16201                           
 16202                           	psect	text88
 16203  1EBB                     __ptext88:	
 16204 ;; *************** function _Timeout_setTimeout *****************
 16205 ;; Defined at:
 16206 ;;		line 12 in file "timeout.c"
 16207 ;; Parameters:    Size  Location     Type
 16208 ;;  val             2    1[BANK0 ] unsigned short 
 16209 ;; Auto vars:     Size  Location     Type
 16210 ;;		None
 16211 ;; Return value:  Size  Location     Type
 16212 ;;                  1    wreg      void 
 16213 ;; Registers used:
 16214 ;;		wreg
 16215 ;; Tracked objects:
 16216 ;;		On entry : 0/0
 16217 ;;		On exit  : 0/0
 16218 ;;		Unchanged: 0/0
 16219 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16220 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16221 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16222 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16223 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16224 ;;Total ram usage:        2 bytes
 16225 ;; Hardware stack levels used:    1
 16226 ;; Hardware stack levels required when called:    4
 16227 ;; This function calls:
 16228 ;;		Nothing
 16229 ;; This function is called by:
 16230 ;;		_I2C_ByteWrite
 16231 ;;		_I2C_BufferRead
 16232 ;; This function uses a non-reentrant model
 16233 ;;
 16234                           
 16235                           
 16236                           ;psect for function _Timeout_setTimeout
 16237  1EBB                     _Timeout_setTimeout:	
 16238                           
 16239                           ;timeout.c: 14: timeOut=val;
 16240                           
 16241                           ;incstack = 0
 16242                           ; Regs used in _Timeout_setTimeout: [wreg]
 16243  1EBB  0020               	movlb	0	; select bank0
 16244  1EBC  0822               	movf	Timeout_setTimeout@val+1,w
 16245  1EBD  0022               	movlb	2	; select bank2
 16246  1EBE  00BB               	movwf	(_timeOut+1)^(0+256)
 16247  1EBF  0020               	movlb	0	; select bank0
 16248  1EC0  0821               	movf	Timeout_setTimeout@val,w
 16249  1EC1  0022               	movlb	2	; select bank2
 16250  1EC2  00BA               	movwf	_timeOut^(0+256)
 16251                           
 16252                           ;timeout.c: 15: curr=globalCounter;
 16253  1EC3  0827               	movf	(_globalCounter+3)^(0+256),w	;volatile
 16254  1EC4  00A3               	movwf	(_curr+3)^(0+256)
 16255  1EC5  0826               	movf	(_globalCounter+2)^(0+256),w	;volatile
 16256  1EC6  00A2               	movwf	(_curr+2)^(0+256)
 16257  1EC7  0825               	movf	(_globalCounter+1)^(0+256),w	;volatile
 16258  1EC8  00A1               	movwf	(_curr+1)^(0+256)
 16259  1EC9  0824               	movf	_globalCounter^(0+256),w	;volatile
 16260  1ECA  00A0               	movwf	_curr^(0+256)
 16261  1ECB  0008               	return
 16262  1ECC                     __end_of_Timeout_setTimeout:	
 16263                           
 16264                           	psect	text89
 16265  141F                     __ptext89:	
 16266 ;; *************** function _Timeout_hasExpired *****************
 16267 ;; Defined at:
 16268 ;;		line 18 in file "timeout.c"
 16269 ;; Parameters:    Size  Location     Type
 16270 ;;		None
 16271 ;; Auto vars:     Size  Location     Type
 16272 ;;		None
 16273 ;; Return value:  Size  Location     Type
 16274 ;;                  1    wreg      unsigned char 
 16275 ;; Registers used:
 16276 ;;		wreg, status,2, status,0
 16277 ;; Tracked objects:
 16278 ;;		On entry : 0/0
 16279 ;;		On exit  : 0/0
 16280 ;;		Unchanged: 0/0
 16281 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16282 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16283 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16284 ;;      Temps:          0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16285 ;;      Totals:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16286 ;;Total ram usage:       12 bytes
 16287 ;; Hardware stack levels used:    1
 16288 ;; Hardware stack levels required when called:    4
 16289 ;; This function calls:
 16290 ;;		Nothing
 16291 ;; This function is called by:
 16292 ;;		_I2C_ByteWrite
 16293 ;;		_I2C_BufferRead
 16294 ;; This function uses a non-reentrant model
 16295 ;;
 16296                           
 16297                           
 16298                           ;psect for function _Timeout_hasExpired
 16299  141F                     _Timeout_hasExpired:	
 16300                           
 16301                           ;timeout.c: 20: if(globalCounter-curr>timeOut)
 16302                           
 16303                           ;incstack = 0
 16304                           ; Regs used in _Timeout_hasExpired: [wreg+status,2+status,0]
 16305  141F  0022               	movlb	2	; select bank2
 16306  1420  0824               	movf	_globalCounter^(0+256),w	;volatile
 16307  1421  0020               	movlb	0	; select bank0
 16308  1422  00A1               	movwf	??_Timeout_hasExpired
 16309  1423  0022               	movlb	2	; select bank2
 16310  1424  0825               	movf	(_globalCounter+1)^(0+256),w	;volatile
 16311  1425  0020               	movlb	0	; select bank0
 16312  1426  00A2               	movwf	??_Timeout_hasExpired+1
 16313  1427  0022               	movlb	2	; select bank2
 16314  1428  0826               	movf	(_globalCounter+2)^(0+256),w	;volatile
 16315  1429  0020               	movlb	0	; select bank0
 16316  142A  00A3               	movwf	??_Timeout_hasExpired+2
 16317  142B  0022               	movlb	2	; select bank2
 16318  142C  0827               	movf	(_globalCounter+3)^(0+256),w	;volatile
 16319  142D  0020               	movlb	0	; select bank0
 16320  142E  00A4               	movwf	??_Timeout_hasExpired+3
 16321  142F  0022               	movlb	2	; select bank2
 16322  1430  0920               	comf	_curr^(0+256),w
 16323  1431  0020               	movlb	0	; select bank0
 16324  1432  00A5               	movwf	??_Timeout_hasExpired+4
 16325  1433  0022               	movlb	2	; select bank2
 16326  1434  0921               	comf	(_curr+1)^(0+256),w
 16327  1435  0020               	movlb	0	; select bank0
 16328  1436  00A6               	movwf	??_Timeout_hasExpired+5
 16329  1437  0022               	movlb	2	; select bank2
 16330  1438  0922               	comf	(_curr+2)^(0+256),w
 16331  1439  0020               	movlb	0	; select bank0
 16332  143A  00A7               	movwf	??_Timeout_hasExpired+6
 16333  143B  0022               	movlb	2	; select bank2
 16334  143C  0923               	comf	(_curr+3)^(0+256),w
 16335  143D  0020               	movlb	0	; select bank0
 16336  143E  00A8               	movwf	??_Timeout_hasExpired+7
 16337  143F  0AA5               	incf	??_Timeout_hasExpired+4,f
 16338  1440  1903               	skipnz
 16339  1441  0AA6               	incf	??_Timeout_hasExpired+5,f
 16340  1442  1903               	skipnz
 16341  1443  0AA7               	incf	??_Timeout_hasExpired+6,f
 16342  1444  1903               	skipnz
 16343  1445  0AA8               	incf	??_Timeout_hasExpired+7,f
 16344  1446  0825               	movf	??_Timeout_hasExpired+4,w
 16345  1447  07A1               	addwf	??_Timeout_hasExpired,f
 16346  1448  0826               	movf	??_Timeout_hasExpired+5,w
 16347  1449  3DA2               	addwfc	??_Timeout_hasExpired+1,f
 16348  144A  0827               	movf	??_Timeout_hasExpired+6,w
 16349  144B  3DA3               	addwfc	??_Timeout_hasExpired+2,f
 16350  144C  0828               	movf	??_Timeout_hasExpired+7,w
 16351  144D  3DA4               	addwfc	??_Timeout_hasExpired+3,f
 16352  144E  0022               	movlb	2	; select bank2
 16353  144F  083A               	movf	_timeOut^(0+256),w
 16354  1450  0020               	movlb	0	; select bank0
 16355  1451  00A9               	movwf	??_Timeout_hasExpired+8
 16356  1452  0022               	movlb	2	; select bank2
 16357  1453  083B               	movf	(_timeOut+1)^(0+256),w
 16358  1454  0020               	movlb	0	; select bank0
 16359  1455  00AA               	movwf	??_Timeout_hasExpired+9
 16360  1456  01AB               	clrf	??_Timeout_hasExpired+10
 16361  1457  01AC               	clrf	??_Timeout_hasExpired+11
 16362  1458  0824               	movf	??_Timeout_hasExpired+3,w
 16363  1459  022C               	subwf	??_Timeout_hasExpired+11,w
 16364  145A  1D03               	skipz
 16365  145B  2C66               	goto	u5205
 16366  145C  0823               	movf	??_Timeout_hasExpired+2,w
 16367  145D  022B               	subwf	??_Timeout_hasExpired+10,w
 16368  145E  1D03               	skipz
 16369  145F  2C66               	goto	u5205
 16370  1460  0822               	movf	??_Timeout_hasExpired+1,w
 16371  1461  022A               	subwf	??_Timeout_hasExpired+9,w
 16372  1462  1D03               	skipz
 16373  1463  2C66               	goto	u5205
 16374  1464  0821               	movf	??_Timeout_hasExpired,w
 16375  1465  0229               	subwf	??_Timeout_hasExpired+8,w
 16376  1466                     u5205:	
 16377  1466  1803               	skipnc
 16378  1467  2C6A               	goto	l5662
 16379                           
 16380                           ;timeout.c: 21: return 1;
 16381  1468  3001               	movlw	1
 16382  1469  0008               	return
 16383  146A                     l5662:	
 16384                           
 16385                           ;timeout.c: 22: else
 16386                           ;timeout.c: 23: return 0;
 16387  146A  3000               	movlw	0
 16388  146B  0008               	return
 16389  146C                     __end_of_Timeout_hasExpired:	
 16390                           
 16391                           	psect	text90
 16392  1210                     __ptext90:	
 16393 ;; *************** function _I2C2_MasterWrite *****************
 16394 ;; Defined at:
 16395 ;;		line 598 in file "mcc_generated_files/i2c2.c"
 16396 ;; Parameters:    Size  Location     Type
 16397 ;;  pdata           1    wreg     PTR unsigned char 
 16398 ;;		 -> I2C_BufferRead@ReadAddr(1), I2C_ByteWrite@data(2), 
 16399 ;;  length          1    8[BANK0 ] unsigned char 
 16400 ;;  address         2    9[BANK0 ] unsigned int 
 16401 ;;  pflag           1   11[BANK0 ] PTR enum E2993
 16402 ;;		 -> I2C_BufferRead@status(1), I2C_ByteWrite@status(1), 
 16403 ;; Auto vars:     Size  Location     Type
 16404 ;;  pdata           1   14[BANK0 ] PTR unsigned char 
 16405 ;;		 -> I2C_BufferRead@ReadAddr(1), I2C_ByteWrite@data(2), 
 16406 ;; Return value:  Size  Location     Type
 16407 ;;                  1    wreg      void 
 16408 ;; Registers used:
 16409 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 16410 ;; Tracked objects:
 16411 ;;		On entry : 0/0
 16412 ;;		On exit  : 0/0
 16413 ;;		Unchanged: 0/0
 16414 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16415 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16416 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16417 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16418 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16419 ;;Total ram usage:        7 bytes
 16420 ;; Hardware stack levels used:    1
 16421 ;; Hardware stack levels required when called:    5
 16422 ;; This function calls:
 16423 ;;		_I2C2_MasterTRBInsert
 16424 ;;		_I2C2_MasterWriteTRBBuild
 16425 ;; This function is called by:
 16426 ;;		_I2C_ByteWrite
 16427 ;;		_I2C_BufferRead
 16428 ;; This function uses a non-reentrant model
 16429 ;;
 16430                           
 16431                           
 16432                           ;psect for function _I2C2_MasterWrite
 16433  1210                     _I2C2_MasterWrite:	
 16434                           
 16435                           ;incstack = 0
 16436                           ; Regs used in _I2C2_MasterWrite: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 16437                           ;I2C2_MasterWrite@pdata stored from wreg
 16438  1210  0020               	movlb	0	; select bank0
 16439  1211  00AE               	movwf	I2C2_MasterWrite@pdata
 16440                           
 16441                           ;i2c2.c: 604: static I2C2_TRANSACTION_REQUEST_BLOCK trBlock;
 16442                           ;i2c2.c: 607: if (i2c2_object.trStatus.s.full != 1)
 16443  1212  0021               	movlb	1	; select bank1
 16444  1213  185C               	btfsc	(_i2c2_object^(0+128)+2),0
 16445  1214  2A33               	goto	l5644
 16446                           
 16447                           ;i2c2.c: 608: {
 16448                           ;i2c2.c: 609: I2C2_MasterWriteTRBBuild(&trBlock, pdata, length, address);
 16449  1215  0020               	movlb	0	; select bank0
 16450  1216  082E               	movf	I2C2_MasterWrite@pdata,w
 16451  1217  00AC               	movwf	??_I2C2_MasterWrite
 16452  1218  082C               	movf	??_I2C2_MasterWrite,w
 16453  1219  00A1               	movwf	I2C2_MasterWriteTRBBuild@pdata
 16454  121A  0828               	movf	I2C2_MasterWrite@length,w
 16455  121B  00AD               	movwf	??_I2C2_MasterWrite+1
 16456  121C  082D               	movf	??_I2C2_MasterWrite+1,w
 16457  121D  00A2               	movwf	I2C2_MasterWriteTRBBuild@length
 16458  121E  082A               	movf	I2C2_MasterWrite@address+1,w
 16459  121F  00A4               	movwf	I2C2_MasterWriteTRBBuild@address+1
 16460  1220  0829               	movf	I2C2_MasterWrite@address,w
 16461  1221  00A3               	movwf	I2C2_MasterWriteTRBBuild@address
 16462  1222  3059               	movlw	(low (I2C2_MasterWrite@trBlock| (0+256)))& (0+255)
 16463  1223  3191  217F  3192   	fcall	_I2C2_MasterWriteTRBBuild
 16464                           
 16465                           ;i2c2.c: 610: I2C2_MasterTRBInsert(1, &trBlock, pflag);
 16466  1226  3059               	movlw	(low (I2C2_MasterWrite@trBlock| (0+256)))& (0+255)
 16467  1227  0020               	movlb	0	; select bank0
 16468  1228  00AC               	movwf	??_I2C2_MasterWrite
 16469  1229  082C               	movf	??_I2C2_MasterWrite,w
 16470  122A  00A1               	movwf	I2C2_MasterTRBInsert@ptrb_list
 16471  122B  082B               	movf	I2C2_MasterWrite@pflag,w
 16472  122C  00AD               	movwf	??_I2C2_MasterWrite+1
 16473  122D  082D               	movf	??_I2C2_MasterWrite+1,w
 16474  122E  00A2               	movwf	I2C2_MasterTRBInsert@pflag
 16475  122F  3001               	movlw	1
 16476  1230  3195  250F         	fcall	_I2C2_MasterTRBInsert
 16477                           
 16478                           ;i2c2.c: 611: }
 16479  1232  0008               	return
 16480  1233                     l5644:	
 16481                           
 16482                           ;i2c2.c: 612: else
 16483                           ;i2c2.c: 613: {
 16484                           ;i2c2.c: 614: *pflag = I2C2_MESSAGE_FAIL;
 16485  1233  0020               	movlb	0	; select bank0
 16486  1234  082B               	movf	I2C2_MasterWrite@pflag,w
 16487  1235  0086               	movwf	6
 16488  1236  0187               	clrf	7
 16489  1237  0181               	clrf	1
 16490  1238  0A81               	incf	1,f
 16491  1239  0008               	return
 16492  123A                     __end_of_I2C2_MasterWrite:	
 16493                           
 16494                           	psect	text91
 16495  117F                     __ptext91:	
 16496 ;; *************** function _I2C2_MasterWriteTRBBuild *****************
 16497 ;; Defined at:
 16498 ;;		line 708 in file "mcc_generated_files/i2c2.c"
 16499 ;; Parameters:    Size  Location     Type
 16500 ;;  ptrb            1    wreg     PTR struct .
 16501 ;;		 -> I2C2_MasterWrite@trBlock(5), 
 16502 ;;  pdata           1    1[BANK0 ] PTR unsigned char 
 16503 ;;		 -> I2C_BufferRead@ReadAddr(1), I2C_ByteWrite@data(2), 
 16504 ;;  length          1    2[BANK0 ] unsigned char 
 16505 ;;  address         2    3[BANK0 ] unsigned int 
 16506 ;; Auto vars:     Size  Location     Type
 16507 ;;  ptrb            1    7[BANK0 ] PTR struct .
 16508 ;;		 -> I2C2_MasterWrite@trBlock(5), 
 16509 ;; Return value:  Size  Location     Type
 16510 ;;                  1    wreg      void 
 16511 ;; Registers used:
 16512 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 16513 ;; Tracked objects:
 16514 ;;		On entry : 0/0
 16515 ;;		On exit  : 0/0
 16516 ;;		Unchanged: 0/0
 16517 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16518 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16519 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16520 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16521 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16522 ;;Total ram usage:        7 bytes
 16523 ;; Hardware stack levels used:    1
 16524 ;; Hardware stack levels required when called:    4
 16525 ;; This function calls:
 16526 ;;		Nothing
 16527 ;; This function is called by:
 16528 ;;		_I2C2_MasterWrite
 16529 ;; This function uses a non-reentrant model
 16530 ;;
 16531                           
 16532                           
 16533                           ;psect for function _I2C2_MasterWriteTRBBuild
 16534  117F                     _I2C2_MasterWriteTRBBuild:	
 16535                           
 16536                           ;incstack = 0
 16537                           ; Regs used in _I2C2_MasterWriteTRBBuild: [wreg+fsr1l+fsr1h+status,2+status,0]
 16538                           ;I2C2_MasterWriteTRBBuild@ptrb stored from wreg
 16539  117F  0020               	movlb	0	; select bank0
 16540  1180  00A7               	movwf	I2C2_MasterWriteTRBBuild@ptrb
 16541                           
 16542                           ;i2c2.c: 714: ptrb->address = address << 1;
 16543  1181  0824               	movf	I2C2_MasterWriteTRBBuild@address+1,w
 16544  1182  00A6               	movwf	??_I2C2_MasterWriteTRBBuild+1
 16545  1183  0823               	movf	I2C2_MasterWriteTRBBuild@address,w
 16546  1184  00A5               	movwf	??_I2C2_MasterWriteTRBBuild
 16547  1185  35A5               	lslf	??_I2C2_MasterWriteTRBBuild,f
 16548  1186  0DA6               	rlf	??_I2C2_MasterWriteTRBBuild+1,f
 16549  1187  0827               	movf	I2C2_MasterWriteTRBBuild@ptrb,w
 16550  1188  0086               	movwf	6
 16551  1189  3001               	movlw	1	; select bank2/3
 16552  118A  0087               	movwf	7
 16553  118B  0825               	movf	??_I2C2_MasterWriteTRBBuild,w
 16554  118C  3FC0               	movwi [0]fsr1
 16555  118D  0826               	movf	??_I2C2_MasterWriteTRBBuild+1,w
 16556  118E  3FC1               	movwi [1]fsr1
 16557                           
 16558                           ;i2c2.c: 715: ptrb->length = length;
 16559  118F  0822               	movf	I2C2_MasterWriteTRBBuild@length,w
 16560  1190  00A5               	movwf	??_I2C2_MasterWriteTRBBuild
 16561  1191  0827               	movf	I2C2_MasterWriteTRBBuild@ptrb,w
 16562  1192  3E02               	addlw	2
 16563  1193  0086               	movwf	6
 16564  1194  3001               	movlw	1	; select bank2/3
 16565  1195  0087               	movwf	7
 16566  1196  0825               	movf	??_I2C2_MasterWriteTRBBuild,w
 16567  1197  0081               	movwf	1
 16568                           
 16569                           ;i2c2.c: 716: ptrb->pbuffer = pdata;
 16570  1198  0827               	movf	I2C2_MasterWriteTRBBuild@ptrb,w
 16571  1199  3E03               	addlw	3
 16572  119A  0086               	movwf	6
 16573  119B  3001               	movlw	1	; select bank2/3
 16574  119C  0087               	movwf	7
 16575  119D  0821               	movf	I2C2_MasterWriteTRBBuild@pdata,w
 16576  119E  3FC0               	movwi [0]fsr1
 16577  119F  3000               	movlw	0
 16578  11A0  3FC1               	movwi [1]fsr1
 16579  11A1  0008               	return
 16580  11A2                     __end_of_I2C2_MasterWriteTRBBuild:	
 16581                           
 16582                           	psect	text92
 16583  11E8                     __ptext92:	
 16584 ;; *************** function _I2C2_MasterRead *****************
 16585 ;; Defined at:
 16586 ;;		line 619 in file "mcc_generated_files/i2c2.c"
 16587 ;; Parameters:    Size  Location     Type
 16588 ;;  pdata           2    9[BANK0 ] PTR unsigned char 
 16589 ;;		 -> data(8), b1(24), HMC5883L_ReadBit@tmp(1), HMC5883L_ReadBits@tmp(1), 
 16590 ;;		 -> HMC5883L_WriteBit@tmp(1), HMC5883L_WriteBits@tmp(1), heading(8), HMC5883L_TestConnection@tmp(3), 
 16591 ;;		 -> MPU6050_ReadBit@tmp(1), MPU6050_ReadBits@tmp(1), MPU6050_WriteBit@tmp(1), MPU6050_WriteBits@tmp(1), 
 16592 ;;		 -> MPU6050_GetRawAccel@tempBuffer(6), MPU6050_GetRawAccelGyro@tmpBuffer(14), 
 16593 ;;  length          1   11[BANK0 ] unsigned char 
 16594 ;;  address         2   12[BANK0 ] unsigned int 
 16595 ;;  pflag           1   14[BANK0 ] PTR enum E2993
 16596 ;;		 -> I2C_BufferRead@status(1), 
 16597 ;; Auto vars:     Size  Location     Type
 16598 ;;		None
 16599 ;; Return value:  Size  Location     Type
 16600 ;;                  1    wreg      void 
 16601 ;; Registers used:
 16602 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 16603 ;; Tracked objects:
 16604 ;;		On entry : 0/0
 16605 ;;		On exit  : 0/0
 16606 ;;		Unchanged: 0/0
 16607 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16608 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16609 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16610 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16611 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16612 ;;Total ram usage:        8 bytes
 16613 ;; Hardware stack levels used:    1
 16614 ;; Hardware stack levels required when called:    5
 16615 ;; This function calls:
 16616 ;;		_I2C2_MasterReadTRBBuild
 16617 ;;		_I2C2_MasterTRBInsert
 16618 ;; This function is called by:
 16619 ;;		_I2C_BufferRead
 16620 ;; This function uses a non-reentrant model
 16621 ;;
 16622                           
 16623                           
 16624                           ;psect for function _I2C2_MasterRead
 16625  11E8                     _I2C2_MasterRead:	
 16626                           
 16627                           ;i2c2.c: 625: static I2C2_TRANSACTION_REQUEST_BLOCK trBlock;
 16628                           ;i2c2.c: 629: if (i2c2_object.trStatus.s.full != 1)
 16629                           
 16630                           ;incstack = 0
 16631                           ; Regs used in _I2C2_MasterRead: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 16632  11E8  0021               	movlb	1	; select bank1
 16633  11E9  185C               	btfsc	(_i2c2_object^(0+128)+2),0
 16634  11EA  2A09               	goto	l5650
 16635                           
 16636                           ;i2c2.c: 630: {
 16637                           ;i2c2.c: 631: I2C2_MasterReadTRBBuild(&trBlock, pdata, length, address);
 16638  11EB  0020               	movlb	0	; select bank0
 16639  11EC  082A               	movf	I2C2_MasterRead@pdata+1,w
 16640  11ED  00A2               	movwf	I2C2_MasterReadTRBBuild@pdata+1
 16641  11EE  0829               	movf	I2C2_MasterRead@pdata,w
 16642  11EF  00A1               	movwf	I2C2_MasterReadTRBBuild@pdata
 16643  11F0  082B               	movf	I2C2_MasterRead@length,w
 16644  11F1  00AF               	movwf	??_I2C2_MasterRead
 16645  11F2  082F               	movf	??_I2C2_MasterRead,w
 16646  11F3  00A3               	movwf	I2C2_MasterReadTRBBuild@length
 16647  11F4  082D               	movf	I2C2_MasterRead@address+1,w
 16648  11F5  00A5               	movwf	I2C2_MasterReadTRBBuild@address+1
 16649  11F6  082C               	movf	I2C2_MasterRead@address,w
 16650  11F7  00A4               	movwf	I2C2_MasterReadTRBBuild@address
 16651  11F8  30D2               	movlw	(low (I2C2_MasterRead@trBlock| (0+256)))& (0+255)
 16652  11F9  3188  2002  3191   	fcall	_I2C2_MasterReadTRBBuild
 16653                           
 16654                           ;i2c2.c: 632: I2C2_MasterTRBInsert(1, &trBlock, pflag);
 16655  11FC  30D2               	movlw	(low (I2C2_MasterRead@trBlock| (0+256)))& (0+255)
 16656  11FD  0020               	movlb	0	; select bank0
 16657  11FE  00AF               	movwf	??_I2C2_MasterRead
 16658  11FF  082F               	movf	??_I2C2_MasterRead,w
 16659  1200  00A1               	movwf	I2C2_MasterTRBInsert@ptrb_list
 16660  1201  082E               	movf	I2C2_MasterRead@pflag,w
 16661  1202  00B0               	movwf	??_I2C2_MasterRead+1
 16662  1203  0830               	movf	??_I2C2_MasterRead+1,w
 16663  1204  00A2               	movwf	I2C2_MasterTRBInsert@pflag
 16664  1205  3001               	movlw	1
 16665  1206  3195  250F         	fcall	_I2C2_MasterTRBInsert
 16666                           
 16667                           ;i2c2.c: 633: }
 16668  1208  0008               	return
 16669  1209                     l5650:	
 16670                           
 16671                           ;i2c2.c: 634: else
 16672                           ;i2c2.c: 635: {
 16673                           ;i2c2.c: 636: *pflag = I2C2_MESSAGE_FAIL;
 16674  1209  0020               	movlb	0	; select bank0
 16675  120A  082E               	movf	I2C2_MasterRead@pflag,w
 16676  120B  0086               	movwf	6
 16677  120C  0187               	clrf	7
 16678  120D  0181               	clrf	1
 16679  120E  0A81               	incf	1,f
 16680  120F  0008               	return
 16681  1210                     __end_of_I2C2_MasterRead:	
 16682                           
 16683                           	psect	text93
 16684  150F                     __ptext93:	
 16685 ;; *************** function _I2C2_MasterTRBInsert *****************
 16686 ;; Defined at:
 16687 ;;		line 641 in file "mcc_generated_files/i2c2.c"
 16688 ;; Parameters:    Size  Location     Type
 16689 ;;  count           1    wreg     unsigned char 
 16690 ;;  ptrb_list       1    1[BANK0 ] PTR struct .
 16691 ;;		 -> I2C2_MasterRead@trBlock(5), I2C2_MasterWrite@trBlock(5), 
 16692 ;;  pflag           1    2[BANK0 ] PTR enum E2993
 16693 ;;		 -> I2C_BufferRead@status(1), I2C_ByteWrite@status(1), 
 16694 ;; Auto vars:     Size  Location     Type
 16695 ;;  count           1    4[BANK0 ] unsigned char 
 16696 ;; Return value:  Size  Location     Type
 16697 ;;                  1    wreg      void 
 16698 ;; Registers used:
 16699 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 16700 ;; Tracked objects:
 16701 ;;		On entry : 0/0
 16702 ;;		On exit  : 0/0
 16703 ;;		Unchanged: 0/0
 16704 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16705 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16706 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16707 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16708 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16709 ;;Total ram usage:        4 bytes
 16710 ;; Hardware stack levels used:    1
 16711 ;; Hardware stack levels required when called:    4
 16712 ;; This function calls:
 16713 ;;		Nothing
 16714 ;; This function is called by:
 16715 ;;		_I2C2_MasterWrite
 16716 ;;		_I2C2_MasterRead
 16717 ;; This function uses a non-reentrant model
 16718 ;;
 16719                           
 16720                           
 16721                           ;psect for function _I2C2_MasterTRBInsert
 16722  150F                     _I2C2_MasterTRBInsert:	
 16723                           
 16724                           ;incstack = 0
 16725                           ; Regs used in _I2C2_MasterTRBInsert: [wreg+fsr1l+fsr1h+status,2+status,0]
 16726                           ;I2C2_MasterTRBInsert@count stored from wreg
 16727  150F  0020               	movlb	0	; select bank0
 16728  1510  00A4               	movwf	I2C2_MasterTRBInsert@count
 16729                           
 16730                           ;i2c2.c: 648: if (i2c2_object.trStatus.s.full != 1)
 16731  1511  0021               	movlb	1	; select bank1
 16732  1512  185C               	btfsc	(_i2c2_object^(0+128)+2),0
 16733  1513  2D51               	goto	l5630
 16734                           
 16735                           ;i2c2.c: 649: {
 16736                           ;i2c2.c: 650: *pflag = I2C2_MESSAGE_PENDING;
 16737  1514  3002               	movlw	2
 16738  1515  0020               	movlb	0	; select bank0
 16739  1516  00A3               	movwf	??_I2C2_MasterTRBInsert
 16740  1517  0822               	movf	I2C2_MasterTRBInsert@pflag,w
 16741  1518  0086               	movwf	6
 16742  1519  0187               	clrf	7
 16743  151A  0823               	movf	??_I2C2_MasterTRBInsert,w
 16744  151B  0081               	movwf	1
 16745                           
 16746                           ;i2c2.c: 652: i2c2_object.pTrTail->ptrb_list = ptrb_list;
 16747  151C  0821               	movf	I2C2_MasterTRBInsert@ptrb_list,w
 16748  151D  00A3               	movwf	??_I2C2_MasterTRBInsert
 16749  151E  0021               	movlb	1	; select bank1
 16750  151F  0A5A               	incf	_i2c2_object^(0+128),w
 16751  1520  0086               	movwf	6
 16752  1521  3001               	movlw	1	; select bank2/3
 16753  1522  0087               	movwf	7
 16754  1523  0020               	movlb	0	; select bank0
 16755  1524  0823               	movf	??_I2C2_MasterTRBInsert,w
 16756  1525  0081               	movwf	1
 16757                           
 16758                           ;i2c2.c: 653: i2c2_object.pTrTail->count = count;
 16759  1526  0824               	movf	I2C2_MasterTRBInsert@count,w
 16760  1527  00A3               	movwf	??_I2C2_MasterTRBInsert
 16761  1528  0021               	movlb	1	; select bank1
 16762  1529  085A               	movf	_i2c2_object^(0+128),w
 16763  152A  0086               	movwf	6
 16764  152B  3001               	movlw	1	; select bank2/3
 16765  152C  0087               	movwf	7
 16766  152D  0020               	movlb	0	; select bank0
 16767  152E  0823               	movf	??_I2C2_MasterTRBInsert,w
 16768  152F  0081               	movwf	1
 16769                           
 16770                           ;i2c2.c: 654: i2c2_object.pTrTail->pTrFlag = pflag;
 16771  1530  0021               	movlb	1	; select bank1
 16772  1531  085A               	movf	_i2c2_object^(0+128),w
 16773  1532  3E02               	addlw	2
 16774  1533  0086               	movwf	6
 16775  1534  3001               	movlw	1	; select bank2/3
 16776  1535  0087               	movwf	7
 16777  1536  0020               	movlb	0	; select bank0
 16778  1537  0822               	movf	I2C2_MasterTRBInsert@pflag,w
 16779  1538  3FC0               	movwi [0]fsr1
 16780  1539  3000               	movlw	0
 16781  153A  3FC1               	movwi [1]fsr1
 16782                           
 16783                           ;i2c2.c: 655: i2c2_object.pTrTail++;
 16784  153B  3004               	movlw	4
 16785  153C  00A3               	movwf	??_I2C2_MasterTRBInsert
 16786  153D  0823               	movf	??_I2C2_MasterTRBInsert,w
 16787  153E  0021               	movlb	1	; select bank1
 16788  153F  07DA               	addwf	_i2c2_object^(0+128),f
 16789                           
 16790                           ;i2c2.c: 658: if (i2c2_object.pTrTail == (i2c2_tr_queue + 1))
 16791  1540  085A               	movf	_i2c2_object^(0+128),w
 16792  1541  3A62               	xorlw	(low ((_i2c2_tr_queue| (0+256)+4)))& (0+255)
 16793  1542  1D03               	skipz
 16794  1543  2D4A               	goto	l5626
 16795                           
 16796                           ;i2c2.c: 659: {
 16797                           ;i2c2.c: 661: i2c2_object.pTrTail = i2c2_tr_queue;
 16798  1544  305E               	movlw	(low (_i2c2_tr_queue| (0+256)))& (0+255)
 16799  1545  0020               	movlb	0	; select bank0
 16800  1546  00A3               	movwf	??_I2C2_MasterTRBInsert
 16801  1547  0823               	movf	??_I2C2_MasterTRBInsert,w
 16802  1548  0021               	movlb	1	; select bank1
 16803  1549  00DA               	movwf	_i2c2_object^(0+128)
 16804  154A                     l5626:	
 16805                           
 16806                           ;i2c2.c: 662: }
 16807                           ;i2c2.c: 666: i2c2_object.trStatus.s.empty = 0;
 16808  154A  10DC               	bcf	(_i2c2_object^(0+128)+2),1
 16809                           
 16810                           ;i2c2.c: 669: if (i2c2_object.pTrHead == i2c2_object.pTrTail)
 16811  154B  085B               	movf	(low ((_i2c2_object| 0+1)))^(0+128),w
 16812  154C  065A               	xorwf	_i2c2_object^(0+128),w
 16813  154D  1D03               	skipz
 16814  154E  2D57               	goto	l5632
 16815                           
 16816                           ;i2c2.c: 670: {
 16817                           ;i2c2.c: 672: i2c2_object.trStatus.s.full = 1;
 16818  154F  145C               	bsf	(_i2c2_object^(0+128)+2),0
 16819                           
 16820                           ;i2c2.c: 673: }
 16821                           ;i2c2.c: 675: }
 16822  1550  2D57               	goto	l5632
 16823  1551                     l5630:	
 16824                           
 16825                           ;i2c2.c: 676: else
 16826                           ;i2c2.c: 677: {
 16827                           ;i2c2.c: 678: *pflag = I2C2_MESSAGE_FAIL;
 16828  1551  0020               	movlb	0	; select bank0
 16829  1552  0822               	movf	I2C2_MasterTRBInsert@pflag,w
 16830  1553  0086               	movwf	6
 16831  1554  0187               	clrf	7
 16832  1555  0181               	clrf	1
 16833  1556  0A81               	incf	1,f
 16834  1557                     l5632:	
 16835                           
 16836                           ;i2c2.c: 679: }
 16837                           ;i2c2.c: 682: if (*pflag == I2C2_MESSAGE_PENDING)
 16838  1557  0020               	movlb	0	; select bank0
 16839  1558  0822               	movf	I2C2_MasterTRBInsert@pflag,w
 16840  1559  0086               	movwf	6
 16841  155A  0187               	clrf	7
 16842  155B  3002               	movlw	2
 16843  155C  0601               	xorwf	1,w
 16844  155D  1D03               	btfss	3,2
 16845  155E  0008               	return
 16846  155F                     l358:	
 16847                           ;i2c2.c: 685: while(i2c2_state != S_MASTER_IDLE)
 16848                           
 16849                           ;i2c2.c: 683: {
 16850                           ;i2c2.c: 684: PIR4bits.SSP2IF = 1;
 16851                           
 16852                           
 16853                           ;i2c2.c: 686: {
 16854                           ;i2c2.c: 689: PIR4bits.SSP2IF = 1;
 16855  155F  1414               	bsf	20,0	;volatile
 16856  1560  0879               	movf	_i2c2_state,w
 16857  1561  1903               	btfsc	3,2
 16858  1562  0008               	return
 16859  1563  2D5F               	goto	l358
 16860  1564                     __end_of_I2C2_MasterTRBInsert:	
 16861                           
 16862                           	psect	text94
 16863  0802                     __ptext94:	
 16864 ;; *************** function _I2C2_MasterReadTRBBuild *****************
 16865 ;; Defined at:
 16866 ;;		line 695 in file "mcc_generated_files/i2c2.c"
 16867 ;; Parameters:    Size  Location     Type
 16868 ;;  ptrb            1    wreg     PTR struct .
 16869 ;;		 -> I2C2_MasterRead@trBlock(5), 
 16870 ;;  pdata           2    1[BANK0 ] PTR unsigned char 
 16871 ;;		 -> data(8), b1(24), HMC5883L_ReadBit@tmp(1), HMC5883L_ReadBits@tmp(1), 
 16872 ;;		 -> HMC5883L_WriteBit@tmp(1), HMC5883L_WriteBits@tmp(1), heading(8), HMC5883L_TestConnection@tmp(3), 
 16873 ;;		 -> MPU6050_ReadBit@tmp(1), MPU6050_ReadBits@tmp(1), MPU6050_WriteBit@tmp(1), MPU6050_WriteBits@tmp(1), 
 16874 ;;		 -> MPU6050_GetRawAccel@tempBuffer(6), MPU6050_GetRawAccelGyro@tmpBuffer(14), 
 16875 ;;  length          1    3[BANK0 ] unsigned char 
 16876 ;;  address         2    4[BANK0 ] unsigned int 
 16877 ;; Auto vars:     Size  Location     Type
 16878 ;;  ptrb            1    8[BANK0 ] PTR struct .
 16879 ;;		 -> I2C2_MasterRead@trBlock(5), 
 16880 ;; Return value:  Size  Location     Type
 16881 ;;                  1    wreg      void 
 16882 ;; Registers used:
 16883 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 16884 ;; Tracked objects:
 16885 ;;		On entry : 0/0
 16886 ;;		On exit  : 0/0
 16887 ;;		Unchanged: 0/0
 16888 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16889 ;;      Params:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16890 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16891 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16892 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16893 ;;Total ram usage:        8 bytes
 16894 ;; Hardware stack levels used:    1
 16895 ;; Hardware stack levels required when called:    4
 16896 ;; This function calls:
 16897 ;;		Nothing
 16898 ;; This function is called by:
 16899 ;;		_I2C2_MasterRead
 16900 ;; This function uses a non-reentrant model
 16901 ;;
 16902                           
 16903                           
 16904                           ;psect for function _I2C2_MasterReadTRBBuild
 16905  0802                     _I2C2_MasterReadTRBBuild:	
 16906                           
 16907                           ;incstack = 0
 16908                           ; Regs used in _I2C2_MasterReadTRBBuild: [wreg+fsr1l+fsr1h+status,2+status,0]
 16909                           ;I2C2_MasterReadTRBBuild@ptrb stored from wreg
 16910  0802  0020               	movlb	0	; select bank0
 16911  0803  00A8               	movwf	I2C2_MasterReadTRBBuild@ptrb
 16912                           
 16913                           ;i2c2.c: 701: ptrb->address = address << 1;
 16914  0804  0825               	movf	I2C2_MasterReadTRBBuild@address+1,w
 16915  0805  00A7               	movwf	??_I2C2_MasterReadTRBBuild+1
 16916  0806  0824               	movf	I2C2_MasterReadTRBBuild@address,w
 16917  0807  00A6               	movwf	??_I2C2_MasterReadTRBBuild
 16918  0808  35A6               	lslf	??_I2C2_MasterReadTRBBuild,f
 16919  0809  0DA7               	rlf	??_I2C2_MasterReadTRBBuild+1,f
 16920  080A  0828               	movf	I2C2_MasterReadTRBBuild@ptrb,w
 16921  080B  0086               	movwf	6
 16922  080C  3001               	movlw	1	; select bank2/3
 16923  080D  0087               	movwf	7
 16924  080E  0826               	movf	??_I2C2_MasterReadTRBBuild,w
 16925  080F  3FC0               	movwi [0]fsr1
 16926  0810  0827               	movf	??_I2C2_MasterReadTRBBuild+1,w
 16927  0811  3FC1               	movwi [1]fsr1
 16928                           
 16929                           ;i2c2.c: 703: ptrb->address |= 0x01;
 16930  0812  0828               	movf	I2C2_MasterReadTRBBuild@ptrb,w
 16931  0813  0086               	movwf	6
 16932  0814  3001               	movlw	1	; select bank2/3
 16933  0815  0087               	movwf	7
 16934  0816  3001               	movlw	1
 16935  0817  0481               	iorwf	1,f
 16936  0818  3141               	addfsr 1,1
 16937  0819  3000               	movlw	0
 16938  081A  0481               	iorwf	1,f
 16939                           
 16940                           ;i2c2.c: 704: ptrb->length = length;
 16941  081B  0823               	movf	I2C2_MasterReadTRBBuild@length,w
 16942  081C  00A6               	movwf	??_I2C2_MasterReadTRBBuild
 16943  081D  0828               	movf	I2C2_MasterReadTRBBuild@ptrb,w
 16944  081E  3E02               	addlw	2
 16945  081F  0086               	movwf	6
 16946  0820  3001               	movlw	1	; select bank2/3
 16947  0821  0087               	movwf	7
 16948  0822  0826               	movf	??_I2C2_MasterReadTRBBuild,w
 16949  0823  0081               	movwf	1
 16950                           
 16951                           ;i2c2.c: 705: ptrb->pbuffer = pdata;
 16952  0824  0828               	movf	I2C2_MasterReadTRBBuild@ptrb,w
 16953  0825  3E03               	addlw	3
 16954  0826  0086               	movwf	6
 16955  0827  3001               	movlw	1	; select bank2/3
 16956  0828  0087               	movwf	7
 16957  0829  0821               	movf	I2C2_MasterReadTRBBuild@pdata,w
 16958  082A  3FC0               	movwi [0]fsr1
 16959  082B  0822               	movf	I2C2_MasterReadTRBBuild@pdata+1,w
 16960  082C  3FC1               	movwi [1]fsr1
 16961  082D  0008               	return
 16962  082E                     __end_of_I2C2_MasterReadTRBBuild:	
 16963                           
 16964                           	psect	text95
 16965  1DBC                     __ptext95:	
 16966 ;; *************** function _Diag_setTempSensorHealth *****************
 16967 ;; Defined at:
 16968 ;;		line 15 in file "diagnostics.c"
 16969 ;; Parameters:    Size  Location     Type
 16970 ;;  health          1    wreg     unsigned char 
 16971 ;; Auto vars:     Size  Location     Type
 16972 ;;  health          1    2[BANK0 ] unsigned char 
 16973 ;; Return value:  Size  Location     Type
 16974 ;;                  1    wreg      void 
 16975 ;; Registers used:
 16976 ;;		wreg
 16977 ;; Tracked objects:
 16978 ;;		On entry : 0/0
 16979 ;;		On exit  : 0/0
 16980 ;;		Unchanged: 0/0
 16981 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16982 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16983 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16984 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16985 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16986 ;;Total ram usage:        2 bytes
 16987 ;; Hardware stack levels used:    1
 16988 ;; Hardware stack levels required when called:    4
 16989 ;; This function calls:
 16990 ;;		Nothing
 16991 ;; This function is called by:
 16992 ;;		_BMP_init
 16993 ;;		_BMP_readTemperature
 16994 ;; This function uses a non-reentrant model
 16995 ;;
 16996                           
 16997                           
 16998                           ;psect for function _Diag_setTempSensorHealth
 16999  1DBC                     _Diag_setTempSensorHealth:	
 17000                           
 17001                           ;incstack = 0
 17002                           ; Regs used in _Diag_setTempSensorHealth: [wreg]
 17003                           ;Diag_setTempSensorHealth@health stored from wreg
 17004  1DBC  0020               	movlb	0	; select bank0
 17005  1DBD  00A2               	movwf	Diag_setTempSensorHealth@health
 17006                           
 17007                           ;diagnostics.c: 17: sensorHealth.tempSensorHealth=health;
 17008  1DBE  0822               	movf	Diag_setTempSensorHealth@health,w
 17009  1DBF  00A1               	movwf	??_Diag_setTempSensorHealth
 17010  1DC0  0821               	movf	??_Diag_setTempSensorHealth,w
 17011  1DC1  0022               	movlb	2	; select bank2
 17012  1DC2  00E6               	movwf	_sensorHealth^(0+256)
 17013  1DC3  0008               	return
 17014  1DC4                     __end_of_Diag_setTempSensorHealth:	
 17015                           
 17016                           	psect	intentry
 17017  0004                     __pintentry:	
 17018 ;; *************** function _INTERRUPT_InterruptManager *****************
 17019 ;; Defined at:
 17020 ;;		line 51 in file "mcc_generated_files/interrupt_manager.c"
 17021 ;; Parameters:    Size  Location     Type
 17022 ;;		None
 17023 ;; Auto vars:     Size  Location     Type
 17024 ;;		None
 17025 ;; Return value:  Size  Location     Type
 17026 ;;                  1    wreg      void 
 17027 ;; Registers used:
 17028 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 17029 ;; Tracked objects:
 17030 ;;		On entry : 0/0
 17031 ;;		On exit  : 0/0
 17032 ;;		Unchanged: 0/0
 17033 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17034 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17035 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17036 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17037 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17038 ;;Total ram usage:        1 bytes
 17039 ;; Hardware stack levels used:    1
 17040 ;; Hardware stack levels required when called:    3
 17041 ;; This function calls:
 17042 ;;		_I2C2_BusCollisionISR
 17043 ;;		_I2C2_ISR
 17044 ;;		_PIN_MANAGER_IOC
 17045 ;;		_TMR1_ISR
 17046 ;; This function is called by:
 17047 ;;		Interrupt level 1
 17048 ;; This function uses a non-reentrant model
 17049 ;;
 17050                           
 17051  0004                     _INTERRUPT_InterruptManager:	
 17052                           
 17053                           ;incstack = 0
 17054  0004  147E               	bsf	126,0	;set compiler interrupt flag (level 1)
 17055                           
 17056                           ; Regs used in _INTERRUPT_InterruptManager: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 17057  0005  3180               	pagesel	$
 17058  0006  0020               	movlb	0	; select bank0
 17059  0007  087F               	movf	127,w
 17060  0008  00A0               	movwf	??_INTERRUPT_InterruptManager
 17061                           
 17062                           ;interrupt_manager.c: 54: if(INTCONbits.PEIE == 1 && PIE4bits.BCL2IE == 1 && PIR4bits.BC
      +                          L2IF == 1)
 17063  0009  1F0B               	btfss	11,6	;volatile
 17064  000A  2815               	goto	i1l153
 17065  000B  0021               	movlb	1	; select bank1
 17066  000C  1C94               	btfss	20,1	;volatile
 17067  000D  2815               	goto	i1l153
 17068  000E  0020               	movlb	0	; select bank0
 17069  000F  1C94               	btfss	20,1	;volatile
 17070  0010  2815               	goto	i1l153
 17071                           
 17072                           ;interrupt_manager.c: 55: {
 17073                           ;interrupt_manager.c: 56: I2C2_BusCollisionISR();
 17074  0011  3188  2001  3180   	fcall	_I2C2_BusCollisionISR
 17075                           
 17076                           ;interrupt_manager.c: 57: }
 17077  0014  2832               	goto	i1l161
 17078  0015                     i1l153:	
 17079                           
 17080                           ;interrupt_manager.c: 58: else if(INTCONbits.PEIE == 1 && PIE4bits.SSP2IE == 1 && PIR4bi
      +                          ts.SSP2IF == 1)
 17081  0015  1F0B               	btfss	11,6	;volatile
 17082  0016  2821               	goto	i1l155
 17083  0017  0021               	movlb	1	; select bank1
 17084  0018  1C14               	btfss	20,0	;volatile
 17085  0019  2821               	goto	i1l155
 17086  001A  0020               	movlb	0	; select bank0
 17087  001B  1C14               	btfss	20,0	;volatile
 17088  001C  2821               	goto	i1l155
 17089                           
 17090                           ;interrupt_manager.c: 59: {
 17091                           ;interrupt_manager.c: 60: I2C2_ISR();
 17092  001D  318D  253F  3180   	fcall	_I2C2_ISR
 17093                           
 17094                           ;interrupt_manager.c: 61: }
 17095  0020  2832               	goto	i1l161
 17096  0021                     i1l155:	
 17097                           
 17098                           ;interrupt_manager.c: 62: else if(INTCONbits.PEIE == 1 && PIE1bits.TMR1IE == 1 && PIR1bi
      +                          ts.TMR1IF == 1)
 17099  0021  1F0B               	btfss	11,6	;volatile
 17100  0022  282D               	goto	i1l157
 17101  0023  0021               	movlb	1	; select bank1
 17102  0024  1C11               	btfss	17,0	;volatile
 17103  0025  282D               	goto	i1l157
 17104  0026  0020               	movlb	0	; select bank0
 17105  0027  1C11               	btfss	17,0	;volatile
 17106  0028  282D               	goto	i1l157
 17107                           
 17108                           ;interrupt_manager.c: 63: {
 17109                           ;interrupt_manager.c: 64: TMR1_ISR();
 17110  0029  319D  25DC  3180   	fcall	_TMR1_ISR
 17111                           
 17112                           ;interrupt_manager.c: 65: }
 17113  002C  2832               	goto	i1l161
 17114  002D                     i1l157:	
 17115                           
 17116                           ;interrupt_manager.c: 66: else if(INTCONbits.IOCIE == 1 && INTCONbits.IOCIF == 1)
 17117  002D  198B               	btfsc	11,3	;volatile
 17118  002E  1C0B               	btfss	11,0	;volatile
 17119  002F  2832               	goto	i1l161
 17120                           
 17121                           ;interrupt_manager.c: 67: {
 17122                           ;interrupt_manager.c: 68: PIN_MANAGER_IOC();
 17123  0030  319D  2589         	fcall	_PIN_MANAGER_IOC
 17124  0032                     i1l161:	
 17125                           ;interrupt_manager.c: 70: else
 17126                           ;interrupt_manager.c: 71: {
 17127                           
 17128                           ;interrupt_manager.c: 69: }
 17129                           
 17130  0032  0020               	movlb	0	; select bank0
 17131  0033  0820               	movf	??_INTERRUPT_InterruptManager,w
 17132  0034  00FF               	movwf	127
 17133  0035  107E               	bcf	126,0	;clear compiler interrupt flag (level 1)
 17134  0036  0009               	retfie
 17135  0037                     __end_of_INTERRUPT_InterruptManager:	
 17136                           
 17137                           	psect	text97
 17138  1DDC                     __ptext97:	
 17139 ;; *************** function _TMR1_ISR *****************
 17140 ;; Defined at:
 17141 ;;		line 157 in file "mcc_generated_files/tmr1.c"
 17142 ;; Parameters:    Size  Location     Type
 17143 ;;		None
 17144 ;; Auto vars:     Size  Location     Type
 17145 ;;		None
 17146 ;; Return value:  Size  Location     Type
 17147 ;;                  1    wreg      void 
 17148 ;; Registers used:
 17149 ;;		wreg, status,2, status,0, pclath, cstack
 17150 ;; Tracked objects:
 17151 ;;		On entry : 0/0
 17152 ;;		On exit  : 0/0
 17153 ;;		Unchanged: 0/0
 17154 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17155 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17156 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17157 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17158 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17159 ;;Total ram usage:        0 bytes
 17160 ;; Hardware stack levels used:    1
 17161 ;; Hardware stack levels required when called:    2
 17162 ;; This function calls:
 17163 ;;		_TMR1_CallBack
 17164 ;; This function is called by:
 17165 ;;		_INTERRUPT_InterruptManager
 17166 ;; This function uses a non-reentrant model
 17167 ;;
 17168                           
 17169                           
 17170                           ;psect for function _TMR1_ISR
 17171  1DDC                     _TMR1_ISR:	
 17172                           
 17173                           ;tmr1.c: 161: PIR1bits.TMR1IF = 0;
 17174                           
 17175                           ;incstack = 0
 17176                           ; Regs used in _TMR1_ISR: [wreg+status,2+status,0+pclath+cstack]
 17177  1DDC  0020               	movlb	0	; select bank0
 17178  1DDD  1011               	bcf	17,0	;volatile
 17179                           
 17180                           ;tmr1.c: 163: TMR1H = (timer1ReloadVal >> 8);
 17181  1DDE  087D               	movf	_timer1ReloadVal+1,w	;volatile
 17182  1DDF  0097               	movwf	23	;volatile
 17183                           
 17184                           ;tmr1.c: 164: TMR1L = timer1ReloadVal;
 17185  1DE0  087C               	movf	_timer1ReloadVal,w	;volatile
 17186  1DE1  0096               	movwf	22	;volatile
 17187                           
 17188                           ;tmr1.c: 168: TMR1_CallBack();
 17189  1DE2  319E  2642         	fcall	_TMR1_CallBack
 17190  1DE4  0008               	return
 17191  1DE5                     __end_of_TMR1_ISR:	
 17192                           
 17193                           	psect	text98
 17194  1E42                     __ptext98:	
 17195 ;; *************** function _TMR1_CallBack *****************
 17196 ;; Defined at:
 17197 ;;		line 171 in file "mcc_generated_files/tmr1.c"
 17198 ;; Parameters:    Size  Location     Type
 17199 ;;		None
 17200 ;; Auto vars:     Size  Location     Type
 17201 ;;		None
 17202 ;; Return value:  Size  Location     Type
 17203 ;;                  1    wreg      void 
 17204 ;; Registers used:
 17205 ;;		wreg, status,2, status,0, pclath, cstack
 17206 ;; Tracked objects:
 17207 ;;		On entry : 0/0
 17208 ;;		On exit  : 0/0
 17209 ;;		Unchanged: 0/0
 17210 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17211 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17212 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17213 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17214 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17215 ;;Total ram usage:        0 bytes
 17216 ;; Hardware stack levels used:    1
 17217 ;; Hardware stack levels required when called:    1
 17218 ;; This function calls:
 17219 ;;		Absolute function
 17220 ;;		_TMR1_DefaultInterruptHandler
 17221 ;;		_Timeout_increment
 17222 ;; This function is called by:
 17223 ;;		_TMR1_ISR
 17224 ;; This function uses a non-reentrant model
 17225 ;;
 17226                           
 17227                           
 17228                           ;psect for function _TMR1_CallBack
 17229  1E42                     _TMR1_CallBack:	
 17230                           
 17231                           ;tmr1.c: 174: Timeout_increment();
 17232                           
 17233                           ;incstack = 0
 17234                           ; Regs used in _TMR1_CallBack: [wreg+status,2+status,0+pclath+cstack]
 17235  1E42  319E  2612  319E   	fcall	_Timeout_increment
 17236                           
 17237                           ;tmr1.c: 175: if(TMR1_InterruptHandler)
 17238  1E45  0022               	movlb	2	; select bank2
 17239  1E46  0868               	movf	_TMR1_InterruptHandler^(0+256),w
 17240  1E47  0469               	iorwf	(_TMR1_InterruptHandler+1)^(0+256),w
 17241  1E48  1903               	btfsc	3,2
 17242  1E49  0008               	return
 17243                           
 17244                           ;tmr1.c: 176: {
 17245                           ;tmr1.c: 177: TMR1_InterruptHandler();
 17246  1E4A  0869               	movf	(_TMR1_InterruptHandler+1)^(0+256),w
 17247  1E4B  008A               	movwf	10
 17248  1E4C  0868               	movf	_TMR1_InterruptHandler^(0+256),w
 17249  1E4D  000A               	callw
 17250  1E4E  319E               	pagesel	$
 17251  1E4F  0008               	return
 17252  1E50                     __end_of_TMR1_CallBack:	
 17253                           
 17254                           	psect	text99
 17255  1E12                     __ptext99:	
 17256 ;; *************** function _Timeout_increment *****************
 17257 ;; Defined at:
 17258 ;;		line 7 in file "timeout.c"
 17259 ;; Parameters:    Size  Location     Type
 17260 ;;		None
 17261 ;; Auto vars:     Size  Location     Type
 17262 ;;		None
 17263 ;; Return value:  Size  Location     Type
 17264 ;;                  1    wreg      void 
 17265 ;; Registers used:
 17266 ;;		wreg
 17267 ;; Tracked objects:
 17268 ;;		On entry : 0/0
 17269 ;;		On exit  : 0/0
 17270 ;;		Unchanged: 0/0
 17271 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17272 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17273 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17274 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17275 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17276 ;;Total ram usage:        0 bytes
 17277 ;; Hardware stack levels used:    1
 17278 ;; This function calls:
 17279 ;;		Nothing
 17280 ;; This function is called by:
 17281 ;;		_TMR1_CallBack
 17282 ;; This function uses a non-reentrant model
 17283 ;;
 17284                           
 17285                           
 17286                           ;psect for function _Timeout_increment
 17287  1E12                     _Timeout_increment:	
 17288                           
 17289                           ;timeout.c: 9: globalCounter+=500;
 17290                           
 17291                           ;incstack = 0
 17292                           ; Regs used in _Timeout_increment: [wreg]
 17293  1E12  30F4               	movlw	244
 17294  1E13  0022               	movlb	2	; select bank2
 17295  1E14  07A4               	addwf	_globalCounter^(0+256),f	;volatile
 17296  1E15  3001               	movlw	1
 17297  1E16  3DA5               	addwfc	(_globalCounter+1)^(0+256),f	;volatile
 17298  1E17  3000               	movlw	0
 17299  1E18  3DA6               	addwfc	(_globalCounter+2)^(0+256),f	;volatile
 17300  1E19  3000               	movlw	0
 17301  1E1A  3DA7               	addwfc	(_globalCounter+3)^(0+256),f	;volatile
 17302  1E1B  0008               	return
 17303  1E1C                     __end_of_Timeout_increment:	
 17304                           
 17305                           	psect	text100
 17306  0003                     __ptext100:	
 17307 ;; *************** function _TMR1_DefaultInterruptHandler *****************
 17308 ;; Defined at:
 17309 ;;		line 185 in file "mcc_generated_files/tmr1.c"
 17310 ;; Parameters:    Size  Location     Type
 17311 ;;		None
 17312 ;; Auto vars:     Size  Location     Type
 17313 ;;		None
 17314 ;; Return value:  Size  Location     Type
 17315 ;;                  1    wreg      void 
 17316 ;; Registers used:
 17317 ;;		None
 17318 ;; Tracked objects:
 17319 ;;		On entry : 0/0
 17320 ;;		On exit  : 0/0
 17321 ;;		Unchanged: 0/0
 17322 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17323 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17324 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17325 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17326 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17327 ;;Total ram usage:        0 bytes
 17328 ;; Hardware stack levels used:    1
 17329 ;; This function calls:
 17330 ;;		Nothing
 17331 ;; This function is called by:
 17332 ;;		_TMR1_Initialize
 17333 ;;		_TMR1_CallBack
 17334 ;; This function uses a non-reentrant model
 17335 ;;
 17336                           
 17337                           
 17338                           ;psect for function _TMR1_DefaultInterruptHandler
 17339  0003                     _TMR1_DefaultInterruptHandler:	
 17340                           
 17341                           ;incstack = 0
 17342                           ; Regs used in _TMR1_DefaultInterruptHandler: []
 17343  0003  0008               	return
 17344  0004                     __end_of_TMR1_DefaultInterruptHandler:	
 17345                           
 17346                           	psect	text101
 17347  1D89                     __ptext101:	
 17348 ;; *************** function _PIN_MANAGER_IOC *****************
 17349 ;; Defined at:
 17350 ;;		line 110 in file "mcc_generated_files/pin_manager.c"
 17351 ;; Parameters:    Size  Location     Type
 17352 ;;		None
 17353 ;; Auto vars:     Size  Location     Type
 17354 ;;		None
 17355 ;; Return value:  Size  Location     Type
 17356 ;;                  1    wreg      void 
 17357 ;; Registers used:
 17358 ;;		wreg, status,2, status,0, pclath, cstack
 17359 ;; Tracked objects:
 17360 ;;		On entry : 0/0
 17361 ;;		On exit  : 0/0
 17362 ;;		Unchanged: 0/0
 17363 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17364 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17365 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17366 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17367 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17368 ;;Total ram usage:        0 bytes
 17369 ;; Hardware stack levels used:    1
 17370 ;; Hardware stack levels required when called:    2
 17371 ;; This function calls:
 17372 ;;		_IOCAF2_ISR
 17373 ;; This function is called by:
 17374 ;;		_INTERRUPT_InterruptManager
 17375 ;; This function uses a non-reentrant model
 17376 ;;
 17377                           
 17378                           
 17379                           ;psect for function _PIN_MANAGER_IOC
 17380  1D89                     _PIN_MANAGER_IOC:	
 17381                           
 17382                           ;pin_manager.c: 113: if(IOCAFbits.IOCAF2 == 1)
 17383                           
 17384                           ;incstack = 0
 17385                           ; Regs used in _PIN_MANAGER_IOC: [wreg+status,2+status,0+pclath+cstack]
 17386  1D89  0027               	movlb	7	; select bank7
 17387  1D8A  1D13               	btfss	19,2	;volatile
 17388  1D8B  0008               	return
 17389                           
 17390                           ;pin_manager.c: 114: {
 17391                           ;pin_manager.c: 115: IOCAF2_ISR();
 17392  1D8C  319E  2628         	fcall	_IOCAF2_ISR
 17393  1D8E  0008               	return
 17394  1D8F                     __end_of_PIN_MANAGER_IOC:	
 17395                           
 17396                           	psect	text102
 17397  1E28                     __ptext102:	
 17398 ;; *************** function _IOCAF2_ISR *****************
 17399 ;; Defined at:
 17400 ;;		line 124 in file "mcc_generated_files/pin_manager.c"
 17401 ;; Parameters:    Size  Location     Type
 17402 ;;		None
 17403 ;; Auto vars:     Size  Location     Type
 17404 ;;		None
 17405 ;; Return value:  Size  Location     Type
 17406 ;;                  1    wreg      void 
 17407 ;; Registers used:
 17408 ;;		wreg, status,2, status,0, pclath, cstack
 17409 ;; Tracked objects:
 17410 ;;		On entry : 0/0
 17411 ;;		On exit  : 0/0
 17412 ;;		Unchanged: 0/0
 17413 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17414 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17415 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17416 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17417 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17418 ;;Total ram usage:        0 bytes
 17419 ;; Hardware stack levels used:    1
 17420 ;; Hardware stack levels required when called:    1
 17421 ;; This function calls:
 17422 ;;		Absolute function
 17423 ;;		_IOCAF2_DefaultInterruptHandler
 17424 ;; This function is called by:
 17425 ;;		_PIN_MANAGER_IOC
 17426 ;; This function uses a non-reentrant model
 17427 ;;
 17428                           
 17429                           
 17430                           ;psect for function _IOCAF2_ISR
 17431  1E28                     _IOCAF2_ISR:	
 17432                           
 17433                           ;pin_manager.c: 129: if(IOCAF2_InterruptHandler)
 17434                           
 17435                           ;incstack = 0
 17436                           ; Regs used in _IOCAF2_ISR: [wreg+status,2+status,0+pclath+cstack]
 17437  1E28  0022               	movlb	2	; select bank2
 17438  1E29  086A               	movf	_IOCAF2_InterruptHandler^(0+256),w
 17439  1E2A  046B               	iorwf	(_IOCAF2_InterruptHandler+1)^(0+256),w
 17440  1E2B  1903               	btfsc	3,2
 17441  1E2C  2E32               	goto	i1l4702
 17442                           
 17443                           ;pin_manager.c: 130: {
 17444                           ;pin_manager.c: 131: IOCAF2_InterruptHandler();
 17445  1E2D  086B               	movf	(_IOCAF2_InterruptHandler+1)^(0+256),w
 17446  1E2E  008A               	movwf	10
 17447  1E2F  086A               	movf	_IOCAF2_InterruptHandler^(0+256),w
 17448  1E30  000A               	callw
 17449  1E31  319E               	pagesel	$
 17450  1E32                     i1l4702:	
 17451                           
 17452                           ;pin_manager.c: 132: }
 17453                           ;pin_manager.c: 133: IOCAFbits.IOCAF2 = 0;
 17454  1E32  0027               	movlb	7	; select bank7
 17455  1E33  1113               	bcf	19,2	;volatile
 17456  1E34  0008               	return
 17457  1E35                     __end_of_IOCAF2_ISR:	
 17458                           
 17459                           	psect	text103
 17460  0002                     __ptext103:	
 17461 ;; *************** function _IOCAF2_DefaultInterruptHandler *****************
 17462 ;; Defined at:
 17463 ;;		line 146 in file "mcc_generated_files/pin_manager.c"
 17464 ;; Parameters:    Size  Location     Type
 17465 ;;		None
 17466 ;; Auto vars:     Size  Location     Type
 17467 ;;		None
 17468 ;; Return value:  Size  Location     Type
 17469 ;;                  1    wreg      void 
 17470 ;; Registers used:
 17471 ;;		None
 17472 ;; Tracked objects:
 17473 ;;		On entry : 0/0
 17474 ;;		On exit  : 0/0
 17475 ;;		Unchanged: 0/0
 17476 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17477 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17478 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17479 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17480 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17481 ;;Total ram usage:        0 bytes
 17482 ;; Hardware stack levels used:    1
 17483 ;; This function calls:
 17484 ;;		Nothing
 17485 ;; This function is called by:
 17486 ;;		_PIN_MANAGER_Initialize
 17487 ;;		_IOCAF2_ISR
 17488 ;; This function uses a non-reentrant model
 17489 ;;
 17490                           
 17491                           
 17492                           ;psect for function _IOCAF2_DefaultInterruptHandler
 17493  0002                     _IOCAF2_DefaultInterruptHandler:	
 17494                           
 17495                           ;incstack = 0
 17496                           ; Regs used in _IOCAF2_DefaultInterruptHandler: []
 17497  0002  0008               	return
 17498  0003                     __end_of_IOCAF2_DefaultInterruptHandler:	
 17499                           
 17500                           	psect	text104
 17501  0D3F                     __ptext104:	
 17502 ;; *************** function _I2C2_ISR *****************
 17503 ;; Defined at:
 17504 ;;		line 233 in file "mcc_generated_files/i2c2.c"
 17505 ;; Parameters:    Size  Location     Type
 17506 ;;		None
 17507 ;; Auto vars:     Size  Location     Type
 17508 ;;		None
 17509 ;; Return value:  Size  Location     Type
 17510 ;;                  1    wreg      void 
 17511 ;; Registers used:
 17512 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 17513 ;; Tracked objects:
 17514 ;;		On entry : 0/0
 17515 ;;		On exit  : 0/0
 17516 ;;		Unchanged: 0/0
 17517 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17518 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17519 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17520 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17521 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17522 ;;Total ram usage:        4 bytes
 17523 ;; Hardware stack levels used:    1
 17524 ;; Hardware stack levels required when called:    1
 17525 ;; This function calls:
 17526 ;;		_I2C2_FunctionComplete
 17527 ;;		_I2C2_Stop
 17528 ;; This function is called by:
 17529 ;;		_INTERRUPT_InterruptManager
 17530 ;; This function uses a non-reentrant model
 17531 ;;
 17532                           
 17533                           
 17534                           ;psect for function _I2C2_ISR
 17535  0D3F                     _I2C2_ISR:	
 17536                           
 17537                           ;i2c2.c: 236: static uint8_t *pi2c_buf_ptr;
 17538                           ;i2c2.c: 237: static uint16_t i2c_address = 0;
 17539                           ;i2c2.c: 238: static uint8_t i2c_bytes_left = 0;
 17540                           ;i2c2.c: 239: static uint8_t i2c_10bit_address_restart = 0;
 17541                           ;i2c2.c: 241: PIR4bits.SSP2IF = 0;
 17542                           
 17543                           ;incstack = 0
 17544                           ; Regs used in _I2C2_ISR: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 17545  0D3F  0020               	movlb	0	; select bank0
 17546  0D40  1014               	bcf	20,0	;volatile
 17547                           
 17548                           ;i2c2.c: 245: if(SSP2CON1bits.WCOL)
 17549  0D41  0024               	movlb	4	; select bank4
 17550  0D42  1F9D               	btfss	29,7	;volatile
 17551  0D43  2E7D               	goto	i1l6880
 17552                           
 17553                           ;i2c2.c: 246: {
 17554                           ;i2c2.c: 248: SSP2CON1bits.WCOL = 0;
 17555  0D44  139D               	bcf	29,7	;volatile
 17556                           
 17557                           ;i2c2.c: 249: i2c2_state = S_MASTER_IDLE;
 17558  0D45  01F9               	clrf	_i2c2_state
 17559                           
 17560                           ;i2c2.c: 250: *(p_i2c2_current->pTrFlag) = I2C2_MESSAGE_FAIL;
 17561  0D46  0877               	movf	_p_i2c2_current,w
 17562  0D47  3E02               	addlw	2
 17563  0D48  0086               	movwf	6
 17564  0D49  3001               	movlw	1	; select bank2/3
 17565  0D4A  0087               	movwf	7
 17566  0D4B  3F40               	moviw [0]fsr1
 17567  0D4C  00F3               	movwf	??_I2C2_ISR
 17568  0D4D  3F41               	moviw [1]fsr1
 17569  0D4E  00F4               	movwf	??_I2C2_ISR+1
 17570  0D4F  0873               	movf	??_I2C2_ISR,w
 17571  0D50  0086               	movwf	6
 17572  0D51  0874               	movf	??_I2C2_ISR+1,w
 17573  0D52  0087               	movwf	7
 17574  0D53  3001               	movlw	1
 17575  0D54  0081               	movwf	1
 17576                           
 17577                           ;i2c2.c: 253: p_i2c2_current = (0);
 17578  0D55  01F7               	clrf	_p_i2c2_current
 17579                           
 17580                           ;i2c2.c: 255: return;
 17581  0D56  0008               	return
 17582  0D57                     i1l288:	
 17583                           ;i2c2.c: 260: {
 17584                           ;i2c2.c: 261: case S_MASTER_IDLE:
 17585                           
 17586                           ;i2c2.c: 256: }
 17587                           ;i2c2.c: 259: switch(i2c2_state)
 17588                           
 17589                           
 17590                           ;i2c2.c: 263: if(i2c2_object.trStatus.s.empty != 1)
 17591  0D57  0021               	movlb	1	; select bank1
 17592  0D58  18DC               	btfsc	(_i2c2_object^(0+128)+2),1
 17593  0D59  0008               	return
 17594                           
 17595                           ;i2c2.c: 264: {
 17596                           ;i2c2.c: 266: p_i2c2_current = i2c2_object.pTrHead;
 17597  0D5A  085B               	movf	(low ((_i2c2_object| 0+1)))^(0+128),w
 17598  0D5B  00F3               	movwf	??_I2C2_ISR
 17599  0D5C  0873               	movf	??_I2C2_ISR,w
 17600  0D5D  00F7               	movwf	_p_i2c2_current
 17601                           
 17602                           ;i2c2.c: 267: i2c2_trb_count = i2c2_object.pTrHead->count;
 17603  0D5E  085B               	movf	(low ((_i2c2_object| 0+1)))^(0+128),w
 17604  0D5F  0086               	movwf	6
 17605  0D60  3001               	movlw	1	; select bank2/3
 17606  0D61  0087               	movwf	7
 17607  0D62  0801               	movf	1,w
 17608  0D63  00F3               	movwf	??_I2C2_ISR
 17609  0D64  0873               	movf	??_I2C2_ISR,w
 17610  0D65  00E5               	movwf	_i2c2_trb_count^(0+128)
 17611                           
 17612                           ;i2c2.c: 268: p_i2c2_trb_current = i2c2_object.pTrHead->ptrb_list;
 17613  0D66  085B               	movf	(low ((_i2c2_object| 0+1)))^(0+128),w
 17614  0D67  0086               	movwf	6
 17615  0D68  3001               	movlw	1	; select bank2/3
 17616  0D69  0087               	movwf	7
 17617  0D6A  3001               	movlw	1	; select bank2/3
 17618  0D6B  3F41               	moviw [1]fsr1
 17619  0D6C  00F8               	movwf	_p_i2c2_trb_current
 17620                           
 17621                           ;i2c2.c: 270: i2c2_object.pTrHead++;
 17622  0D6D  3004               	movlw	4
 17623  0D6E  00F3               	movwf	??_I2C2_ISR
 17624  0D6F  0873               	movf	??_I2C2_ISR,w
 17625  0D70  07DB               	addwf	(low ((_i2c2_object| 0+1)))^(0+128),f
 17626                           
 17627                           ;i2c2.c: 273: if(i2c2_object.pTrHead == (i2c2_tr_queue + 1))
 17628  0D71  085B               	movf	(low ((_i2c2_object| 0+1)))^(0+128),w
 17629  0D72  3A62               	xorlw	(low ((_i2c2_tr_queue| (0+256)+4)))& (0+255)
 17630  0D73  1D03               	skipz
 17631  0D74  2D79               	goto	i1l6770
 17632                           
 17633                           ;i2c2.c: 274: {
 17634                           ;i2c2.c: 276: i2c2_object.pTrHead = i2c2_tr_queue;
 17635  0D75  305E               	movlw	(low (_i2c2_tr_queue| (0+256)))& (0+255)
 17636  0D76  00F3               	movwf	??_I2C2_ISR
 17637  0D77  0873               	movf	??_I2C2_ISR,w
 17638  0D78  00DB               	movwf	(low ((_i2c2_object| 0+1)))^(0+128)
 17639  0D79                     i1l6770:	
 17640                           
 17641                           ;i2c2.c: 277: }
 17642                           ;i2c2.c: 281: i2c2_object.trStatus.s.full = 0;
 17643  0D79  105C               	bcf	(_i2c2_object^(0+128)+2),0
 17644                           
 17645                           ;i2c2.c: 284: if(i2c2_object.pTrHead == i2c2_object.pTrTail)
 17646  0D7A  085B               	movf	(low ((_i2c2_object| 0+1)))^(0+128),w
 17647  0D7B  065A               	xorwf	_i2c2_object^(0+128),w
 17648  0D7C  1903               	btfsc	3,2
 17649                           
 17650                           ;i2c2.c: 285: {
 17651                           ;i2c2.c: 287: i2c2_object.trStatus.s.empty = 1;
 17652  0D7D  14DC               	bsf	(_i2c2_object^(0+128)+2),1
 17653                           
 17654                           ;i2c2.c: 288: }
 17655                           ;i2c2.c: 291: SSP2CON2bits.SEN = 1;
 17656  0D7E  0024               	movlb	4	; select bank4
 17657  0D7F  141E               	bsf	30,0	;volatile
 17658                           
 17659                           ;i2c2.c: 294: i2c2_state = S_MASTER_SEND_ADDR;
 17660  0D80  3002               	movlw	2
 17661  0D81  00F3               	movwf	??_I2C2_ISR
 17662  0D82  0873               	movf	??_I2C2_ISR,w
 17663  0D83  00F9               	movwf	_i2c2_state
 17664                           
 17665                           ;i2c2.c: 295: }
 17666                           ;i2c2.c: 297: break;
 17667  0D84  0008               	return
 17668  0D85                     i1l293:	
 17669                           ;i2c2.c: 299: case S_MASTER_RESTART:
 17670                           
 17671                           
 17672                           ;i2c2.c: 304: SSP2CON2bits.RSEN = 1;
 17673  0D85  0024               	movlb	4	; select bank4
 17674  0D86  149E               	bsf	30,1	;volatile
 17675                           
 17676                           ;i2c2.c: 307: i2c2_state = S_MASTER_SEND_ADDR;
 17677  0D87  3002               	movlw	2
 17678  0D88  00F3               	movwf	??_I2C2_ISR
 17679  0D89  0873               	movf	??_I2C2_ISR,w
 17680  0D8A  00F9               	movwf	_i2c2_state
 17681                           
 17682                           ;i2c2.c: 309: break;
 17683  0D8B  0008               	return
 17684  0D8C                     i1l294:	
 17685                           ;i2c2.c: 311: case S_MASTER_SEND_ADDR_10BIT_LSB:
 17686                           
 17687                           
 17688                           ;i2c2.c: 313: if(SSP2CON2bits.ACKSTAT)
 17689  0D8C  0024               	movlb	4	; select bank4
 17690  0D8D  1F1E               	btfss	30,6	;volatile
 17691  0D8E  2D98               	goto	i1l6782
 17692                           
 17693                           ;i2c2.c: 314: {
 17694                           ;i2c2.c: 315: i2c2_object.i2cErrors++;
 17695  0D8F  3001               	movlw	1
 17696  0D90  00F3               	movwf	??_I2C2_ISR
 17697  0D91  0873               	movf	??_I2C2_ISR,w
 17698  0D92  0021               	movlb	1	; select bank1
 17699  0D93  07DE               	addwf	(_i2c2_object^(0+128)+4),f
 17700                           
 17701                           ;i2c2.c: 316: I2C2_Stop(I2C2_MESSAGE_ADDRESS_NO_ACK);
 17702  0D94  3004               	movlw	4
 17703  0D95  3190  208C         	fcall	_I2C2_Stop
 17704                           
 17705                           ;i2c2.c: 317: }
 17706  0D97  0008               	return
 17707  0D98                     i1l6782:	
 17708                           
 17709                           ;i2c2.c: 318: else
 17710                           ;i2c2.c: 319: {
 17711                           ;i2c2.c: 321: SSP2BUF = (i2c_address >> 1) & 0x00FF;
 17712  0D98  087B               	movf	I2C2_ISR@i2c_address+1,w
 17713  0D99  00F4               	movwf	??_I2C2_ISR+1
 17714  0D9A  087A               	movf	I2C2_ISR@i2c_address,w
 17715  0D9B  00F3               	movwf	??_I2C2_ISR
 17716  0D9C  36F4               	lsrf	??_I2C2_ISR+1,f
 17717  0D9D  0CF3               	rrf	??_I2C2_ISR,f
 17718  0D9E  0873               	movf	??_I2C2_ISR,w
 17719  0D9F  0024               	movlb	4	; select bank4
 17720  0DA0  0099               	movwf	25	;volatile
 17721                           
 17722                           ;i2c2.c: 324: if(i2c_address & 0x01)
 17723  0DA1  1C7A               	btfss	I2C2_ISR@i2c_address,0
 17724  0DA2  2DA8               	goto	i1l6788
 17725                           
 17726                           ;i2c2.c: 325: {
 17727                           ;i2c2.c: 328: i2c2_state = S_MASTER_10BIT_RESTART;
 17728  0DA3  300B               	movlw	11
 17729  0DA4  00F3               	movwf	??_I2C2_ISR
 17730  0DA5  0873               	movf	??_I2C2_ISR,w
 17731  0DA6  00F9               	movwf	_i2c2_state
 17732                           
 17733                           ;i2c2.c: 329: }
 17734  0DA7  0008               	return
 17735  0DA8                     i1l6788:	
 17736                           
 17737                           ;i2c2.c: 330: else
 17738                           ;i2c2.c: 331: {
 17739                           ;i2c2.c: 333: i2c2_state = S_MASTER_SEND_DATA;
 17740  0DA8  3003               	movlw	3
 17741  0DA9  00F3               	movwf	??_I2C2_ISR
 17742  0DAA  0873               	movf	??_I2C2_ISR,w
 17743  0DAB  00F9               	movwf	_i2c2_state
 17744                           
 17745                           ;i2c2.c: 334: }
 17746                           ;i2c2.c: 335: }
 17747                           ;i2c2.c: 337: break;
 17748  0DAC  0008               	return
 17749  0DAD                     i1l299:	
 17750                           ;i2c2.c: 339: case S_MASTER_10BIT_RESTART:
 17751                           
 17752                           
 17753                           ;i2c2.c: 341: if(SSP2CON2bits.ACKSTAT)
 17754  0DAD  0024               	movlb	4	; select bank4
 17755  0DAE  1F1E               	btfss	30,6	;volatile
 17756  0DAF  2DB9               	goto	i1l300
 17757                           
 17758                           ;i2c2.c: 342: {
 17759                           ;i2c2.c: 343: i2c2_object.i2cErrors++;
 17760  0DB0  3001               	movlw	1
 17761  0DB1  00F3               	movwf	??_I2C2_ISR
 17762  0DB2  0873               	movf	??_I2C2_ISR,w
 17763  0DB3  0021               	movlb	1	; select bank1
 17764  0DB4  07DE               	addwf	(_i2c2_object^(0+128)+4),f
 17765                           
 17766                           ;i2c2.c: 344: I2C2_Stop(I2C2_MESSAGE_ADDRESS_NO_ACK);
 17767  0DB5  3004               	movlw	4
 17768  0DB6  3190  208C         	fcall	_I2C2_Stop
 17769                           
 17770                           ;i2c2.c: 345: }
 17771  0DB8  0008               	return
 17772  0DB9                     i1l300:	
 17773                           
 17774                           ;i2c2.c: 346: else
 17775                           ;i2c2.c: 347: {
 17776                           ;i2c2.c: 350: SSP2CON2bits.RSEN = 1;
 17777  0DB9  149E               	bsf	30,1	;volatile
 17778                           
 17779                           ;i2c2.c: 354: i2c_address = 0x00F0 | ((i2c_address >> 8) & 0x0006);
 17780  0DBA  087B               	movf	I2C2_ISR@i2c_address+1,w
 17781  0DBB  00F4               	movwf	??_I2C2_ISR+1
 17782  0DBC  087A               	movf	I2C2_ISR@i2c_address,w
 17783  0DBD  00F3               	movwf	??_I2C2_ISR
 17784  0DBE  0874               	movf	??_I2C2_ISR+1,w
 17785  0DBF  00F3               	movwf	??_I2C2_ISR
 17786  0DC0  01F4               	clrf	??_I2C2_ISR+1
 17787  0DC1  3006               	movlw	6
 17788  0DC2  0573               	andwf	??_I2C2_ISR,w
 17789  0DC3  00F5               	movwf	??_I2C2_ISR+2
 17790  0DC4  3000               	movlw	0
 17791  0DC5  0574               	andwf	??_I2C2_ISR+1,w
 17792  0DC6  00F6               	movwf	??_I2C2_ISR+3
 17793  0DC7  30F0               	movlw	240
 17794  0DC8  0475               	iorwf	??_I2C2_ISR+2,w
 17795  0DC9  00FA               	movwf	I2C2_ISR@i2c_address
 17796  0DCA  3000               	movlw	0
 17797  0DCB  0476               	iorwf	??_I2C2_ISR+3,w
 17798  0DCC  00FB               	movwf	I2C2_ISR@i2c_address+1
 17799                           
 17800                           ;i2c2.c: 357: i2c_address |= 0x0001;
 17801  0DCD  147A               	bsf	I2C2_ISR@i2c_address,0
 17802                           
 17803                           ;i2c2.c: 360: i2c_10bit_address_restart = 1;
 17804  0DCE  0021               	movlb	1	; select bank1
 17805  0DCF  01E3               	clrf	I2C2_ISR@i2c_10bit_address_restart^(0+128)
 17806  0DD0  0AE3               	incf	I2C2_ISR@i2c_10bit_address_restart^(0+128),f
 17807                           
 17808                           ;i2c2.c: 363: i2c2_state = S_MASTER_SEND_ADDR;
 17809  0DD1  3002               	movlw	2
 17810  0DD2  00F3               	movwf	??_I2C2_ISR
 17811  0DD3  0873               	movf	??_I2C2_ISR,w
 17812  0DD4  00F9               	movwf	_i2c2_state
 17813                           
 17814                           ;i2c2.c: 364: }
 17815                           ;i2c2.c: 366: break;
 17816  0DD5  0008               	return
 17817  0DD6                     i1l6802:	
 17818                           ;i2c2.c: 368: case S_MASTER_SEND_ADDR:
 17819                           
 17820                           
 17821                           ;i2c2.c: 381: if(i2c_10bit_address_restart != 1)
 17822  0DD6  0021               	movlb	1	; select bank1
 17823  0DD7  0363               	decf	I2C2_ISR@i2c_10bit_address_restart^(0+128),w
 17824  0DD8  1903               	btfsc	3,2
 17825  0DD9  2DF2               	goto	i1l6820
 17826                           
 17827                           ;i2c2.c: 382: {
 17828                           ;i2c2.c: 384: i2c_address = p_i2c2_trb_current->address;
 17829  0DDA  0878               	movf	_p_i2c2_trb_current,w
 17830  0DDB  0086               	movwf	6
 17831  0DDC  3001               	movlw	1	; select bank2/3
 17832  0DDD  0087               	movwf	7
 17833  0DDE  3F40               	moviw [0]fsr1
 17834  0DDF  00FA               	movwf	I2C2_ISR@i2c_address
 17835  0DE0  3F41               	moviw [1]fsr1
 17836  0DE1  00FB               	movwf	I2C2_ISR@i2c_address+1
 17837                           
 17838                           ;i2c2.c: 385: pi2c_buf_ptr = p_i2c2_trb_current->pbuffer;
 17839  0DE2  0878               	movf	_p_i2c2_trb_current,w
 17840  0DE3  3E03               	addlw	3
 17841  0DE4  0086               	movwf	6
 17842  0DE5  3001               	movlw	1	; select bank2/3
 17843  0DE6  0087               	movwf	7
 17844  0DE7  3F40               	moviw [0]fsr1
 17845  0DE8  00DF               	movwf	I2C2_ISR@pi2c_buf_ptr^(0+128)
 17846  0DE9  3F41               	moviw [1]fsr1
 17847  0DEA  00E0               	movwf	(I2C2_ISR@pi2c_buf_ptr+1)^(0+128)
 17848                           
 17849                           ;i2c2.c: 386: i2c_bytes_left = p_i2c2_trb_current->length;
 17850  0DEB  0878               	movf	_p_i2c2_trb_current,w
 17851  0DEC  0086               	movwf	6
 17852  0DED  3001               	movlw	1	; select bank2/3
 17853  0DEE  0087               	movwf	7
 17854  0DEF  3001               	movlw	1	; select bank2/3
 17855  0DF0  3F42               	moviw [2]fsr1
 17856  0DF1  00E4               	movwf	I2C2_ISR@i2c_bytes_left^(0+128)
 17857  0DF2                     i1l6820:	
 17858                           ;i2c2.c: 407: }
 17859                           ;i2c2.c: 408: }
 17860                           
 17861                           ;i2c2.c: 406: i2c_10bit_address_restart = 0;
 17862                           
 17863                           ;i2c2.c: 404: i2c2_state = S_MASTER_ACK_ADDR;
 17864                           
 17865                           ;i2c2.c: 400: else
 17866                           ;i2c2.c: 401: {
 17867                           ;i2c2.c: 403: SSP2BUF = i2c_address;
 17868                           
 17869                           ;i2c2.c: 399: }
 17870                           
 17871                           ;i2c2.c: 398: i2c2_state = S_MASTER_SEND_ADDR_10BIT_LSB;
 17872                           
 17873                           ;i2c2.c: 393: {
 17874                           ;i2c2.c: 397: SSP2BUF = 0xF0 | ((i2c_address >> 8) & 0x0006);
 17875                           
 17876                           ;i2c2.c: 391: {
 17877                           ;i2c2.c: 392: if (0 == i2c_10bit_address_restart)
 17878                           
 17879                           ;i2c2.c: 387: }
 17880                           ;i2c2.c: 390: if(!1 && (0x0 != i2c_address))
 17881                           
 17882                           
 17883                           ;i2c2.c: 409: else
 17884                           ;i2c2.c: 410: {
 17885                           ;i2c2.c: 412: SSP2BUF = i2c_address;
 17886  0DF2  087A               	movf	I2C2_ISR@i2c_address,w
 17887  0DF3  0024               	movlb	4	; select bank4
 17888  0DF4  0099               	movwf	25	;volatile
 17889                           
 17890                           ;i2c2.c: 413: if(i2c_address & 0x01)
 17891  0DF5  1C7A               	btfss	I2C2_ISR@i2c_address,0
 17892  0DF6  2DFC               	goto	i1l6826
 17893                           
 17894                           ;i2c2.c: 414: {
 17895                           ;i2c2.c: 416: i2c2_state = S_MASTER_ACK_ADDR;
 17896  0DF7  3005               	movlw	5
 17897  0DF8  00F3               	movwf	??_I2C2_ISR
 17898  0DF9  0873               	movf	??_I2C2_ISR,w
 17899  0DFA  00F9               	movwf	_i2c2_state
 17900                           
 17901                           ;i2c2.c: 417: }
 17902  0DFB  0008               	return
 17903  0DFC                     i1l6826:	
 17904                           
 17905                           ;i2c2.c: 418: else
 17906                           ;i2c2.c: 419: {
 17907                           ;i2c2.c: 421: i2c2_state = S_MASTER_SEND_DATA;
 17908  0DFC  3003               	movlw	3
 17909  0DFD  00F3               	movwf	??_I2C2_ISR
 17910  0DFE  0873               	movf	??_I2C2_ISR,w
 17911  0DFF  00F9               	movwf	_i2c2_state
 17912                           
 17913                           ;i2c2.c: 422: }
 17914                           ;i2c2.c: 423: }
 17915                           ;i2c2.c: 424: break;
 17916  0E00  0008               	return
 17917  0E01                     i1l310:	
 17918                           ;i2c2.c: 426: case S_MASTER_SEND_DATA:
 17919                           
 17920                           
 17921                           ;i2c2.c: 429: if(SSP2CON2bits.ACKSTAT)
 17922  0E01  0024               	movlb	4	; select bank4
 17923  0E02  1F1E               	btfss	30,6	;volatile
 17924  0E03  2E0F               	goto	i1l6834
 17925                           
 17926                           ;i2c2.c: 430: {
 17927                           ;i2c2.c: 432: i2c2_object.i2cErrors++;
 17928  0E04  3001               	movlw	1
 17929  0E05  00F3               	movwf	??_I2C2_ISR
 17930  0E06  0873               	movf	??_I2C2_ISR,w
 17931  0E07  0021               	movlb	1	; select bank1
 17932  0E08  07DE               	addwf	(_i2c2_object^(0+128)+4),f
 17933                           
 17934                           ;i2c2.c: 435: SSP2CON2bits.ACKSTAT = 0;
 17935  0E09  0024               	movlb	4	; select bank4
 17936  0E0A  131E               	bcf	30,6	;volatile
 17937                           
 17938                           ;i2c2.c: 438: I2C2_Stop(I2C2_DATA_NO_ACK);
 17939  0E0B  3005               	movlw	5
 17940  0E0C  3190  208C         	fcall	_I2C2_Stop
 17941                           
 17942                           ;i2c2.c: 440: }
 17943  0E0E  0008               	return
 17944  0E0F                     i1l6834:	
 17945                           
 17946                           ;i2c2.c: 441: else
 17947                           ;i2c2.c: 442: {
 17948                           ;i2c2.c: 444: if(i2c_bytes_left-- == 0U)
 17949  0E0F  3001               	movlw	1
 17950  0E10  0021               	movlb	1	; select bank1
 17951  0E11  02E4               	subwf	I2C2_ISR@i2c_bytes_left^(0+128),f
 17952  0E12  0A64               	incf	I2C2_ISR@i2c_bytes_left^(0+128),w
 17953  0E13  1D03               	btfss	3,2
 17954  0E14  2E28               	goto	i1l6842
 17955                           
 17956                           ;i2c2.c: 445: {
 17957                           ;i2c2.c: 449: p_i2c2_trb_current++;
 17958  0E15  3005               	movlw	5
 17959  0E16  00F3               	movwf	??_I2C2_ISR
 17960  0E17  0873               	movf	??_I2C2_ISR,w
 17961  0E18  07F8               	addwf	_p_i2c2_trb_current,f
 17962                           
 17963                           ;i2c2.c: 452: if(--i2c2_trb_count == 0)
 17964  0E19  3001               	movlw	1
 17965  0E1A  02E5               	subwf	_i2c2_trb_count^(0+128),f
 17966  0E1B  1D03               	btfss	3,2
 17967  0E1C  2E21               	goto	i1l314
 17968                           
 17969                           ;i2c2.c: 453: {
 17970                           ;i2c2.c: 454: I2C2_Stop(I2C2_MESSAGE_COMPLETE);
 17971  0E1D  3000               	movlw	0
 17972  0E1E  3190  208C         	fcall	_I2C2_Stop
 17973                           
 17974                           ;i2c2.c: 455: }
 17975  0E20  0008               	return
 17976  0E21                     i1l314:	
 17977                           
 17978                           ;i2c2.c: 456: else
 17979                           ;i2c2.c: 457: {
 17980                           ;i2c2.c: 464: SSP2CON2bits.RSEN = 1;
 17981  0E21  0024               	movlb	4	; select bank4
 17982  0E22  149E               	bsf	30,1	;volatile
 17983                           
 17984                           ;i2c2.c: 467: i2c2_state = S_MASTER_SEND_ADDR;
 17985  0E23  3002               	movlw	2
 17986  0E24  00F3               	movwf	??_I2C2_ISR
 17987  0E25  0873               	movf	??_I2C2_ISR,w
 17988  0E26  00F9               	movwf	_i2c2_state
 17989                           
 17990                           ;i2c2.c: 469: }
 17991                           ;i2c2.c: 470: }
 17992  0E27  0008               	return
 17993  0E28                     i1l6842:	
 17994                           
 17995                           ;i2c2.c: 471: else
 17996                           ;i2c2.c: 472: {
 17997                           ;i2c2.c: 474: SSP2BUF = *pi2c_buf_ptr++;
 17998  0E28  0021               	movlb	1	; select bank1
 17999  0E29  085F               	movf	I2C2_ISR@pi2c_buf_ptr^(0+128),w
 18000  0E2A  0086               	movwf	6
 18001  0E2B  0860               	movf	(I2C2_ISR@pi2c_buf_ptr+1)^(0+128),w
 18002  0E2C  0087               	movwf	7
 18003  0E2D  0801               	movf	1,w
 18004  0E2E  0024               	movlb	4	; select bank4
 18005  0E2F  0099               	movwf	25	;volatile
 18006  0E30  3001               	movlw	1
 18007  0E31  0021               	movlb	1	; select bank1
 18008  0E32  07DF               	addwf	I2C2_ISR@pi2c_buf_ptr^(0+128),f
 18009  0E33  3000               	movlw	0
 18010  0E34  3DE0               	addwfc	(I2C2_ISR@pi2c_buf_ptr+1)^(0+128),f
 18011                           
 18012                           ;i2c2.c: 475: }
 18013                           ;i2c2.c: 476: }
 18014                           ;i2c2.c: 477: break;
 18015  0E35  0008               	return
 18016  0E36                     i1l317:	
 18017                           ;i2c2.c: 479: case S_MASTER_ACK_ADDR:
 18018                           
 18019                           
 18020                           ;i2c2.c: 482: if(SSP2CON2bits.ACKSTAT)
 18021  0E36  0024               	movlb	4	; select bank4
 18022  0E37  1F1E               	btfss	30,6	;volatile
 18023  0E38  2E44               	goto	i1l318
 18024                           
 18025                           ;i2c2.c: 483: {
 18026                           ;i2c2.c: 486: i2c2_object.i2cErrors++;
 18027  0E39  3001               	movlw	1
 18028  0E3A  00F3               	movwf	??_I2C2_ISR
 18029  0E3B  0873               	movf	??_I2C2_ISR,w
 18030  0E3C  0021               	movlb	1	; select bank1
 18031  0E3D  07DE               	addwf	(_i2c2_object^(0+128)+4),f
 18032                           
 18033                           ;i2c2.c: 489: I2C2_Stop(I2C2_MESSAGE_ADDRESS_NO_ACK);
 18034  0E3E  3004               	movlw	4
 18035  0E3F  3190  208C         	fcall	_I2C2_Stop
 18036                           
 18037                           ;i2c2.c: 492: SSP2CON2bits.ACKSTAT = 0;
 18038  0E41  0024               	movlb	4	; select bank4
 18039  0E42  131E               	bcf	30,6	;volatile
 18040                           
 18041                           ;i2c2.c: 493: }
 18042  0E43  0008               	return
 18043  0E44                     i1l318:	
 18044                           
 18045                           ;i2c2.c: 494: else
 18046                           ;i2c2.c: 495: {
 18047                           ;i2c2.c: 496: SSP2CON2bits.RCEN = 1;
 18048  0E44  159E               	bsf	30,3	;volatile
 18049                           
 18050                           ;i2c2.c: 497: i2c2_state = S_MASTER_ACK_RCV_DATA;
 18051  0E45  3008               	movlw	8
 18052  0E46  00F3               	movwf	??_I2C2_ISR
 18053  0E47  0873               	movf	??_I2C2_ISR,w
 18054  0E48  00F9               	movwf	_i2c2_state
 18055                           
 18056                           ;i2c2.c: 498: }
 18057                           ;i2c2.c: 499: break;
 18058  0E49  0008               	return
 18059  0E4A                     i1l6854:	
 18060                           ;i2c2.c: 501: case S_MASTER_RCV_DATA:
 18061                           
 18062                           
 18063                           ;i2c2.c: 506: i2c2_state = S_MASTER_ACK_RCV_DATA;
 18064  0E4A  3008               	movlw	8
 18065  0E4B  00F3               	movwf	??_I2C2_ISR
 18066  0E4C  0873               	movf	??_I2C2_ISR,w
 18067  0E4D  00F9               	movwf	_i2c2_state
 18068                           
 18069                           ;i2c2.c: 509: SSP2CON2bits.RCEN = 1;
 18070  0E4E  0024               	movlb	4	; select bank4
 18071  0E4F  159E               	bsf	30,3	;volatile
 18072                           
 18073                           ;i2c2.c: 511: break;
 18074  0E50  0008               	return
 18075  0E51                     i1l6858:	
 18076                           ;i2c2.c: 513: case S_MASTER_ACK_RCV_DATA:
 18077                           
 18078                           
 18079                           ;i2c2.c: 516: *pi2c_buf_ptr++ = SSP2BUF;
 18080  0E51  0021               	movlb	1	; select bank1
 18081  0E52  085F               	movf	I2C2_ISR@pi2c_buf_ptr^(0+128),w
 18082  0E53  0086               	movwf	6
 18083  0E54  0860               	movf	(I2C2_ISR@pi2c_buf_ptr+1)^(0+128),w
 18084  0E55  0087               	movwf	7
 18085  0E56  0024               	movlb	4	; select bank4
 18086  0E57  0819               	movf	25,w	;volatile
 18087  0E58  0081               	movwf	1
 18088  0E59  3001               	movlw	1
 18089  0E5A  0021               	movlb	1	; select bank1
 18090  0E5B  07DF               	addwf	I2C2_ISR@pi2c_buf_ptr^(0+128),f
 18091  0E5C  3000               	movlw	0
 18092  0E5D  3DE0               	addwfc	(I2C2_ISR@pi2c_buf_ptr+1)^(0+128),f
 18093                           
 18094                           ;i2c2.c: 519: if(--i2c_bytes_left)
 18095  0E5E  3001               	movlw	1
 18096  0E5F  02E4               	subwf	I2C2_ISR@i2c_bytes_left^(0+128),f
 18097  0E60  1903               	btfsc	3,2
 18098  0E61  2E69               	goto	i1l322
 18099                           
 18100                           ;i2c2.c: 520: {
 18101                           ;i2c2.c: 526: SSP2CON2bits.ACKDT = 0;
 18102  0E62  0024               	movlb	4	; select bank4
 18103  0E63  129E               	bcf	30,5	;volatile
 18104                           
 18105                           ;i2c2.c: 529: i2c2_state = S_MASTER_RCV_DATA;
 18106  0E64  3006               	movlw	6
 18107  0E65  00F3               	movwf	??_I2C2_ISR
 18108  0E66  0873               	movf	??_I2C2_ISR,w
 18109  0E67  00F9               	movwf	_i2c2_state
 18110                           
 18111                           ;i2c2.c: 530: }
 18112  0E68  2E6D               	goto	i1l6870
 18113  0E69                     i1l322:	
 18114                           
 18115                           ;i2c2.c: 531: else
 18116                           ;i2c2.c: 532: {
 18117                           ;i2c2.c: 536: SSP2CON2bits.ACKDT = 1;
 18118  0E69  0024               	movlb	4	; select bank4
 18119  0E6A  169E               	bsf	30,5	;volatile
 18120                           
 18121                           ;i2c2.c: 538: I2C2_FunctionComplete();
 18122  0E6B  319E  26AA         	fcall	_I2C2_FunctionComplete
 18123  0E6D                     i1l6870:	
 18124                           
 18125                           ;i2c2.c: 539: }
 18126                           ;i2c2.c: 542: SSP2CON2bits.ACKEN = 1;
 18127  0E6D  0024               	movlb	4	; select bank4
 18128  0E6E  161E               	bsf	30,4	;volatile
 18129                           
 18130                           ;i2c2.c: 543: break;
 18131  0E6F  0008               	return
 18132  0E70                     i1l6872:	
 18133                           ;i2c2.c: 545: case S_MASTER_RCV_STOP:
 18134                           
 18135                           
 18136                           ;i2c2.c: 546: case S_MASTER_SEND_STOP:
 18137                           ;i2c2.c: 549: I2C2_Stop(I2C2_MESSAGE_COMPLETE);
 18138  0E70  3000               	movlw	0
 18139  0E71  3190  208C         	fcall	_I2C2_Stop
 18140                           
 18141                           ;i2c2.c: 550: break;
 18142  0E73  0008               	return
 18143  0E74                     i1l6874:	
 18144                           ;i2c2.c: 552: default:
 18145                           
 18146                           
 18147                           ;i2c2.c: 556: i2c2_object.i2cErrors++;
 18148  0E74  3001               	movlw	1
 18149  0E75  00F3               	movwf	??_I2C2_ISR
 18150  0E76  0873               	movf	??_I2C2_ISR,w
 18151  0E77  0021               	movlb	1	; select bank1
 18152  0E78  07DE               	addwf	(_i2c2_object^(0+128)+4),f
 18153                           
 18154                           ;i2c2.c: 557: I2C2_Stop(I2C2_LOST_STATE);
 18155  0E79  3006               	movlw	6
 18156  0E7A  3190  208C         	fcall	_I2C2_Stop
 18157                           
 18158                           ;i2c2.c: 560: }
 18159                           
 18160                           ;i2c2.c: 558: break;
 18161  0E7C  0008               	return
 18162  0E7D                     i1l6880:	
 18163  0E7D  0879               	movf	_i2c2_state,w
 18164                           
 18165                           ; Switch size 1, requested type "space"
 18166                           ; Number of cases is 11, Range of values is 0 to 11
 18167                           ; switch strategies available:
 18168                           ; Name         Instructions Cycles
 18169                           ; direct_byte           30     6 (fixed)
 18170                           ; simple_byte           34    18 (average)
 18171                           ; jumptable            260     6 (fixed)
 18172                           ;	Chosen strategy is direct_byte
 18173  0E7E  0084               	movwf	4
 18174  0E7F  300C               	movlw	12
 18175  0E80  0204               	subwf	4,w
 18176  0E81  1803               	skipnc
 18177  0E82  2E74               	goto	i1l6874
 18178  0E83  3198               	movlp	high i1S7398
 18179  0E84  3504               	lslf	4,w
 18180  0E85  3E00               	addlw	low i1S7398
 18181  0E86  0082               	movwf	2
 18182  0E87  0008               	return
 18183  0E88                     __end_of_I2C2_ISR:	
 18184                           
 18185                           	psect	swtext1
 18186  1800                     __pswtext1:	
 18187  1800                     i1S7398:	
 18188  1800  318D  2D57         	ljmp	i1l288
 18189  1802  318D  2D85         	ljmp	i1l293
 18190  1804  318D  2DD6         	ljmp	i1l6802
 18191  1806  318E  2E01         	ljmp	i1l310
 18192  1808  318E  2E70         	ljmp	i1l6872
 18193  180A  318E  2E36         	ljmp	i1l317
 18194  180C  318E  2E4A         	ljmp	i1l6854
 18195  180E  318E  2E70         	ljmp	i1l6872
 18196  1810  318E  2E51         	ljmp	i1l6858
 18197  1812  318E  2E74         	ljmp	i1l6874
 18198  1814  318D  2D8C         	ljmp	i1l294
 18199  1816  318D  2DAD         	ljmp	i1l299
 18200                           
 18201                           	psect	text105
 18202  108C                     __ptext105:	
 18203 ;; *************** function _I2C2_Stop *****************
 18204 ;; Defined at:
 18205 ;;		line 581 in file "mcc_generated_files/i2c2.c"
 18206 ;; Parameters:    Size  Location     Type
 18207 ;;  completion_c    1    wreg     enum E2993
 18208 ;; Auto vars:     Size  Location     Type
 18209 ;;  completion_c    1    2[COMMON] enum E2993
 18210 ;; Return value:  Size  Location     Type
 18211 ;;                  1    wreg      void 
 18212 ;; Registers used:
 18213 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 18214 ;; Tracked objects:
 18215 ;;		On entry : 0/0
 18216 ;;		On exit  : 0/0
 18217 ;;		Unchanged: 0/0
 18218 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18219 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18220 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18221 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18222 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18223 ;;Total ram usage:        3 bytes
 18224 ;; Hardware stack levels used:    1
 18225 ;; This function calls:
 18226 ;;		Nothing
 18227 ;; This function is called by:
 18228 ;;		_I2C2_ISR
 18229 ;; This function uses a non-reentrant model
 18230 ;;
 18231                           
 18232                           
 18233                           ;psect for function _I2C2_Stop
 18234  108C                     _I2C2_Stop:	
 18235                           
 18236                           ;incstack = 0
 18237                           ; Regs used in _I2C2_Stop: [wreg+fsr1l+fsr1h+status,2+status,0]
 18238                           ;I2C2_Stop@completion_code stored from wreg
 18239  108C  00F2               	movwf	I2C2_Stop@completion_code
 18240                           
 18241                           ;i2c2.c: 584: SSP2CON2bits.PEN = 1;
 18242  108D  0024               	movlb	4	; select bank4
 18243  108E  151E               	bsf	30,2	;volatile
 18244                           
 18245                           ;i2c2.c: 587: if (p_i2c2_current->pTrFlag != (0))
 18246  108F  0877               	movf	_p_i2c2_current,w
 18247  1090  3E02               	addlw	2
 18248  1091  0086               	movwf	6
 18249  1092  3001               	movlw	1	; select bank2/3
 18250  1093  0087               	movwf	7
 18251  1094  0016               	moviw fsr1++
 18252  1095  0401               	iorwf	1,w
 18253  1096  1903               	btfsc	3,2
 18254  1097  28A7               	goto	i1l6522
 18255                           
 18256                           ;i2c2.c: 588: {
 18257                           ;i2c2.c: 590: *(p_i2c2_current->pTrFlag) = completion_code;
 18258  1098  0877               	movf	_p_i2c2_current,w
 18259  1099  3E02               	addlw	2
 18260  109A  0086               	movwf	6
 18261  109B  3001               	movlw	1	; select bank2/3
 18262  109C  0087               	movwf	7
 18263  109D  3F40               	moviw [0]fsr1
 18264  109E  00F0               	movwf	??_I2C2_Stop
 18265  109F  3F41               	moviw [1]fsr1
 18266  10A0  00F1               	movwf	??_I2C2_Stop+1
 18267  10A1  0870               	movf	??_I2C2_Stop,w
 18268  10A2  0086               	movwf	6
 18269  10A3  0871               	movf	??_I2C2_Stop+1,w
 18270  10A4  0087               	movwf	7
 18271  10A5  0872               	movf	I2C2_Stop@completion_code,w
 18272  10A6  0081               	movwf	1
 18273  10A7                     i1l6522:	
 18274                           
 18275                           ;i2c2.c: 591: }
 18276                           ;i2c2.c: 594: i2c2_state = S_MASTER_IDLE;
 18277  10A7  01F9               	clrf	_i2c2_state
 18278  10A8  0008               	return
 18279  10A9                     __end_of_I2C2_Stop:	
 18280                           
 18281                           	psect	text106
 18282  1EAA                     __ptext106:	
 18283 ;; *************** function _I2C2_FunctionComplete *****************
 18284 ;; Defined at:
 18285 ;;		line 563 in file "mcc_generated_files/i2c2.c"
 18286 ;; Parameters:    Size  Location     Type
 18287 ;;		None
 18288 ;; Auto vars:     Size  Location     Type
 18289 ;;		None
 18290 ;; Return value:  Size  Location     Type
 18291 ;;                  1    wreg      void 
 18292 ;; Registers used:
 18293 ;;		wreg, status,2, status,0
 18294 ;; Tracked objects:
 18295 ;;		On entry : 0/0
 18296 ;;		On exit  : 0/0
 18297 ;;		Unchanged: 0/0
 18298 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18299 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18300 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18301 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18302 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18303 ;;Total ram usage:        1 bytes
 18304 ;; Hardware stack levels used:    1
 18305 ;; This function calls:
 18306 ;;		Nothing
 18307 ;; This function is called by:
 18308 ;;		_I2C2_ISR
 18309 ;; This function uses a non-reentrant model
 18310 ;;
 18311                           
 18312                           
 18313                           ;psect for function _I2C2_FunctionComplete
 18314  1EAA                     _I2C2_FunctionComplete:	
 18315                           
 18316                           ;i2c2.c: 567: p_i2c2_trb_current++;
 18317                           
 18318                           ;incstack = 0
 18319                           ; Regs used in _I2C2_FunctionComplete: [wreg+status,2+status,0]
 18320  1EAA  3005               	movlw	5
 18321  1EAB  00F0               	movwf	??_I2C2_FunctionComplete
 18322  1EAC  0870               	movf	??_I2C2_FunctionComplete,w
 18323  1EAD  07F8               	addwf	_p_i2c2_trb_current,f
 18324                           
 18325                           ;i2c2.c: 570: if(--i2c2_trb_count == 0)
 18326  1EAE  3001               	movlw	1
 18327  1EAF  0021               	movlb	1	; select bank1
 18328  1EB0  02E5               	subwf	_i2c2_trb_count^(0+128),f
 18329  1EB1  1D03               	btfss	3,2
 18330  1EB2  2EB8               	goto	i1l329
 18331                           
 18332                           ;i2c2.c: 571: {
 18333                           ;i2c2.c: 572: i2c2_state = S_MASTER_SEND_STOP;
 18334  1EB3  3004               	movlw	4
 18335  1EB4  00F0               	movwf	??_I2C2_FunctionComplete
 18336  1EB5  0870               	movf	??_I2C2_FunctionComplete,w
 18337  1EB6  00F9               	movwf	_i2c2_state
 18338                           
 18339                           ;i2c2.c: 573: }
 18340  1EB7  0008               	return
 18341  1EB8                     i1l329:	
 18342                           
 18343                           ;i2c2.c: 574: else
 18344                           ;i2c2.c: 575: {
 18345                           ;i2c2.c: 576: i2c2_state = S_MASTER_RESTART;
 18346  1EB8  01F9               	clrf	_i2c2_state
 18347  1EB9  0AF9               	incf	_i2c2_state,f
 18348  1EBA  0008               	return
 18349  1EBB                     __end_of_I2C2_FunctionComplete:	
 18350                           
 18351                           	psect	text107
 18352  0801                     __ptext107:	
 18353 ;; *************** function _I2C2_BusCollisionISR *****************
 18354 ;; Defined at:
 18355 ;;		line 729 in file "mcc_generated_files/i2c2.c"
 18356 ;; Parameters:    Size  Location     Type
 18357 ;;		None
 18358 ;; Auto vars:     Size  Location     Type
 18359 ;;		None
 18360 ;; Return value:  Size  Location     Type
 18361 ;;                  1    wreg      void 
 18362 ;; Registers used:
 18363 ;;		None
 18364 ;; Tracked objects:
 18365 ;;		On entry : 0/0
 18366 ;;		On exit  : 0/0
 18367 ;;		Unchanged: 0/0
 18368 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18369 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18370 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18371 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18372 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18373 ;;Total ram usage:        0 bytes
 18374 ;; Hardware stack levels used:    1
 18375 ;; This function calls:
 18376 ;;		Nothing
 18377 ;; This function is called by:
 18378 ;;		_INTERRUPT_InterruptManager
 18379 ;; This function uses a non-reentrant model
 18380 ;;
 18381                           
 18382                           
 18383                           ;psect for function _I2C2_BusCollisionISR
 18384  0801                     _I2C2_BusCollisionISR:	
 18385                           
 18386                           ;incstack = 0
 18387                           ; Regs used in _I2C2_BusCollisionISR: []
 18388  0801  0008               	return
 18389  0802                     __end_of_I2C2_BusCollisionISR:	
 18390  007E                     btemp	set	126	;btemp
 18391  007E                     int$flags	set	126
 18392  007E                     wtemp0	set	126


Data Sizes:
    Strings     0
    Constant    38
    Data        7
    BSS         140
    Persistent  6
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      7      14
    BANK0            80     78      78
    BANK1            80     58      73
    BANK2            80      0      76
    BANK3            80     10      65
    BANK4            80      0       0
    BANK5            80      0       0
    BANK6            80      0       0
    BANK7            80      0       0
    BANK8            80      0       0
    BANK9            80      0       0
    BANK10           80      0       0
    BANK11           80      0       0
    BANK12           48      0       0

Pointer List with Targets:

    i2c2_tr_queue.ptrb_list.pbuffer	PTR unsigned char  size(2) Largest target is 24
		 -> I2C_BufferRead@ReadAddr(BANK0[1]), I2C_BufferRead@status(BANK0[1]), I2C_ByteWrite@data(BANK0[2]), I2C_ByteWrite@status(BANK0[1]), 
		 -> data(BANK3[8]), b1(BANK3[24]), HMC5883L_ReadBit@tmp(COMMON[1]), HMC5883L_ReadBits@tmp(BANK0[1]), 
		 -> HMC5883L_WriteBit@tmp(COMMON[1]), HMC5883L_WriteBits@tmp(BANK0[1]), heading(BANK3[8]), HMC5883L_TestConnection@tmp(COMMON[3]), 
		 -> MPU6050_ReadBit@tmp(COMMON[1]), MPU6050_ReadBits@tmp(COMMON[1]), MPU6050_WriteBit@tmp(COMMON[1]), MPU6050_WriteBits@tmp(COMMON[1]), 
		 -> MPU6050_GetRawAccel@tempBuffer(COMMON[6]), MPU6050_GetRawAccelGyro@tmpBuffer(COMMON[14]), 

    i2c2_tr_queue.pTrFlag	PTR enum E2993 size(2) Largest target is 24
		 -> I2C_BufferRead@ReadAddr(BANK0[1]), I2C_BufferRead@status(BANK0[1]), I2C_ByteWrite@data(BANK0[2]), I2C_ByteWrite@status(BANK0[1]), 
		 -> data(BANK3[8]), b1(BANK3[24]), HMC5883L_ReadBit@tmp(COMMON[1]), HMC5883L_ReadBits@tmp(BANK0[1]), 
		 -> HMC5883L_WriteBit@tmp(COMMON[1]), HMC5883L_WriteBits@tmp(BANK0[1]), heading(BANK3[8]), HMC5883L_TestConnection@tmp(COMMON[3]), 
		 -> MPU6050_ReadBit@tmp(COMMON[1]), MPU6050_ReadBits@tmp(COMMON[1]), MPU6050_WriteBit@tmp(COMMON[1]), MPU6050_WriteBits@tmp(COMMON[1]), 
		 -> MPU6050_GetRawAccel@tempBuffer(COMMON[6]), MPU6050_GetRawAccelGyro@tmpBuffer(COMMON[14]), 

    i2c2_tr_queue.ptrb_list	PTR struct . size(1) Largest target is 5
		 -> I2C2_MasterRead@trBlock(BANK3[5]), I2C2_MasterWrite@trBlock(BANK2[5]), 

    eval_poly@d	PTR const  size(2) Largest target is 18
		 -> atan@coeff_a(CODE[18]), atan@coeff_b(CODE[15]), 

    Storage_load@closeAngle	PTR unsigned char  size(1) Largest target is 1
		 -> doorClosedAngle(BANK1[1]), 

    Storage_load@openAngle	PTR unsigned char  size(1) Largest target is 1
		 -> doorOpenAngle(BANK1[1]), 

    I2C_BufferRead@pBuffer	PTR unsigned char  size(2) Largest target is 24
		 -> data(BANK3[8]), b1(BANK3[24]), HMC5883L_ReadBit@tmp(COMMON[1]), HMC5883L_ReadBits@tmp(BANK0[1]), 
		 -> HMC5883L_WriteBit@tmp(COMMON[1]), HMC5883L_WriteBits@tmp(BANK0[1]), heading(BANK3[8]), HMC5883L_TestConnection@tmp(COMMON[3]), 
		 -> MPU6050_ReadBit@tmp(COMMON[1]), MPU6050_ReadBits@tmp(COMMON[1]), MPU6050_WriteBit@tmp(COMMON[1]), MPU6050_WriteBits@tmp(COMMON[1]), 
		 -> MPU6050_GetRawAccel@tempBuffer(COMMON[6]), MPU6050_GetRawAccelGyro@tmpBuffer(COMMON[14]), 

    I2C_ByteWrite@pBuffer	PTR unsigned char  size(1) Largest target is 1
		 -> BMP_readTemperature@tmp(BANK1[1]), BMP_init@t(BANK0[1]), HMC5883L_WriteBit@tmp(COMMON[1]), HMC5883L_WriteBits@tmp(BANK0[1]), 
		 -> HMC5883L_SetMode@tmp(BANK0[1]), HMC5883L_SetGain@tmp(BANK0[1]), HMC5883L_Initialize@tmp(BANK0[1]), MPU6050_WriteBit@tmp(COMMON[1]), 
		 -> MPU6050_WriteBits@tmp(COMMON[1]), 

    Wireless_sendData@payload	PTR unsigned char  size(1) Largest target is 5
		 -> Wireless_packageData@data(BANK1[5]), 

    RF_DataIsReady@channel	PTR unsigned char  size(1) Largest target is 1
		 -> Wireless_checkDataReceived@channel(BANK0[1]), 

    RF_RxPayload@payload	PTR unsigned char  size(1) Largest target is 4
		 -> Wireless_checkDataReceived@data(BANK0[4]), 

    RF_TxPayload@payload	PTR unsigned char  size(1) Largest target is 5
		 -> Wireless_packageData@data(BANK1[5]), 

    RF_WriteRegisterData@buf	PTR unsigned char  size(2) Largest target is 5
		 -> Wireless_packageData@data(BANK1[5]), Wireless_init@TADDR(CODE[5]), 

    RF_ReadRegisterData@buf	PTR unsigned char  size(1) Largest target is 4
		 -> Wireless_checkDataReceived@data(BANK0[4]), Wireless_wake@reg(BANK0[1]), Wireless_sleep@reg(BANK0[1]), 

    SPI_WriteBuffer@bufOut	PTR unsigned char  size(2) Largest target is 5
		 -> Wireless_packageData@data(BANK1[5]), Wireless_init@TADDR(CODE[5]), 

    SPI_WriteReadBuffer@bufOut	PTR unsigned char  size(1) Largest target is 4
		 -> Wireless_checkDataReceived@data(BANK0[4]), Wireless_wake@reg(BANK0[1]), Wireless_sleep@reg(BANK0[1]), 

    SPI_WriteReadBuffer@bufIn	PTR unsigned char  size(1) Largest target is 4
		 -> Wireless_checkDataReceived@data(BANK0[4]), Wireless_wake@reg(BANK0[1]), Wireless_sleep@reg(BANK0[1]), 

    HMC5883L_I2C_BufferRead@pBuffer	PTR unsigned char  size(2) Largest target is 14
		 -> HMC5883L_ReadBit@tmp(COMMON[1]), HMC5883L_ReadBits@tmp(BANK0[1]), HMC5883L_WriteBit@tmp(COMMON[1]), HMC5883L_WriteBits@tmp(BANK0[1]), 
		 -> heading(BANK3[8]), HMC5883L_TestConnection@tmp(COMMON[3]), MPU6050_ReadBit@tmp(COMMON[1]), MPU6050_ReadBits@tmp(COMMON[1]), 
		 -> MPU6050_WriteBit@tmp(COMMON[1]), MPU6050_WriteBits@tmp(COMMON[1]), MPU6050_GetRawAccel@tempBuffer(COMMON[6]), MPU6050_GetRawAccelGyro@tmpBuffer(COMMON[14]), 

    HMC5883L_I2C_ByteWrite@pBuffer	PTR unsigned char  size(1) Largest target is 1
		 -> HMC5883L_WriteBit@tmp(COMMON[1]), HMC5883L_WriteBits@tmp(BANK0[1]), HMC5883L_SetMode@tmp(BANK0[1]), HMC5883L_SetGain@tmp(BANK0[1]), 
		 -> HMC5883L_Initialize@tmp(BANK0[1]), MPU6050_WriteBit@tmp(COMMON[1]), MPU6050_WriteBits@tmp(COMMON[1]), 

    HMC5883L_ReadBits@data	PTR unsigned char  size(1) Largest target is 1
		 -> BMP_readTemperature@tmp(BANK1[1]), HMC5883L_GetHeading@tmp(BANK0[1]), HMC5883L_GetMode@tmp(COMMON[1]), HMC5883L_GetGain@tmp(COMMON[1]), 
		 -> HMC5883L_GetMeasurementBias@tmp(COMMON[1]), HMC5883L_GetDataRate@tmp(COMMON[1]), HMC5883L_GetSampleAveraging@tmp(COMMON[1]), 

    HMC5883L_GetHeading@Mag	PTR int  size(1) Largest target is 6
		 -> HMC5883L_GetCompassDirection@rawSamples(BANK1[6]), 

    I2C2_MasterWriteTRBBuild@pdata	PTR unsigned char  size(1) Largest target is 2
		 -> I2C_BufferRead@ReadAddr(BANK0[1]), I2C_ByteWrite@data(BANK0[2]), 

    I2C2_MasterWriteTRBBuild@ptrb.pbuffer	PTR unsigned char  size(2) Largest target is 24
		 -> I2C_BufferRead@ReadAddr(BANK0[1]), I2C_BufferRead@status(BANK0[1]), I2C_ByteWrite@data(BANK0[2]), I2C_ByteWrite@status(BANK0[1]), 
		 -> data(BANK3[8]), b1(BANK3[24]), HMC5883L_ReadBit@tmp(COMMON[1]), HMC5883L_ReadBits@tmp(BANK0[1]), 
		 -> HMC5883L_WriteBit@tmp(COMMON[1]), HMC5883L_WriteBits@tmp(BANK0[1]), heading(BANK3[8]), HMC5883L_TestConnection@tmp(COMMON[3]), 
		 -> MPU6050_ReadBit@tmp(COMMON[1]), MPU6050_ReadBits@tmp(COMMON[1]), MPU6050_WriteBit@tmp(COMMON[1]), MPU6050_WriteBits@tmp(COMMON[1]), 
		 -> MPU6050_GetRawAccel@tempBuffer(COMMON[6]), MPU6050_GetRawAccelGyro@tmpBuffer(COMMON[14]), 

    I2C2_MasterWriteTRBBuild@ptrb	PTR struct . size(1) Largest target is 5
		 -> I2C2_MasterWrite@trBlock(BANK2[5]), 

    I2C2_MasterReadTRBBuild@pdata	PTR unsigned char  size(2) Largest target is 24
		 -> data(BANK3[8]), b1(BANK3[24]), HMC5883L_ReadBit@tmp(COMMON[1]), HMC5883L_ReadBits@tmp(BANK0[1]), 
		 -> HMC5883L_WriteBit@tmp(COMMON[1]), HMC5883L_WriteBits@tmp(BANK0[1]), heading(BANK3[8]), HMC5883L_TestConnection@tmp(COMMON[3]), 
		 -> MPU6050_ReadBit@tmp(COMMON[1]), MPU6050_ReadBits@tmp(COMMON[1]), MPU6050_WriteBit@tmp(COMMON[1]), MPU6050_WriteBits@tmp(COMMON[1]), 
		 -> MPU6050_GetRawAccel@tempBuffer(COMMON[6]), MPU6050_GetRawAccelGyro@tmpBuffer(COMMON[14]), 

    I2C2_MasterReadTRBBuild@ptrb.pbuffer	PTR unsigned char  size(2) Largest target is 24
		 -> I2C_BufferRead@ReadAddr(BANK0[1]), I2C_BufferRead@status(BANK0[1]), I2C_ByteWrite@data(BANK0[2]), I2C_ByteWrite@status(BANK0[1]), 
		 -> data(BANK3[8]), b1(BANK3[24]), HMC5883L_ReadBit@tmp(COMMON[1]), HMC5883L_ReadBits@tmp(BANK0[1]), 
		 -> HMC5883L_WriteBit@tmp(COMMON[1]), HMC5883L_WriteBits@tmp(BANK0[1]), heading(BANK3[8]), HMC5883L_TestConnection@tmp(COMMON[3]), 
		 -> MPU6050_ReadBit@tmp(COMMON[1]), MPU6050_ReadBits@tmp(COMMON[1]), MPU6050_WriteBit@tmp(COMMON[1]), MPU6050_WriteBits@tmp(COMMON[1]), 
		 -> MPU6050_GetRawAccel@tempBuffer(COMMON[6]), MPU6050_GetRawAccelGyro@tmpBuffer(COMMON[14]), 

    I2C2_MasterReadTRBBuild@ptrb	PTR struct . size(1) Largest target is 5
		 -> I2C2_MasterRead@trBlock(BANK3[5]), 

    i2c2_object.pTrTail.ptrb_list.pbuffer	PTR unsigned char  size(2) Largest target is 24
		 -> I2C_BufferRead@ReadAddr(BANK0[1]), I2C_BufferRead@status(BANK0[1]), I2C_ByteWrite@data(BANK0[2]), I2C_ByteWrite@status(BANK0[1]), 
		 -> data(BANK3[8]), b1(BANK3[24]), HMC5883L_ReadBit@tmp(COMMON[1]), HMC5883L_ReadBits@tmp(BANK0[1]), 
		 -> HMC5883L_WriteBit@tmp(COMMON[1]), HMC5883L_WriteBits@tmp(BANK0[1]), heading(BANK3[8]), HMC5883L_TestConnection@tmp(COMMON[3]), 
		 -> MPU6050_ReadBit@tmp(COMMON[1]), MPU6050_ReadBits@tmp(COMMON[1]), MPU6050_WriteBit@tmp(COMMON[1]), MPU6050_WriteBits@tmp(COMMON[1]), 
		 -> MPU6050_GetRawAccel@tempBuffer(COMMON[6]), MPU6050_GetRawAccelGyro@tmpBuffer(COMMON[14]), 

    i2c2_object.pTrTail.pTrFlag	PTR enum E2993 size(2) Largest target is 24
		 -> I2C_BufferRead@ReadAddr(BANK0[1]), I2C_BufferRead@status(BANK0[1]), I2C_ByteWrite@data(BANK0[2]), I2C_ByteWrite@status(BANK0[1]), 
		 -> data(BANK3[8]), b1(BANK3[24]), HMC5883L_ReadBit@tmp(COMMON[1]), HMC5883L_ReadBits@tmp(BANK0[1]), 
		 -> HMC5883L_WriteBit@tmp(COMMON[1]), HMC5883L_WriteBits@tmp(BANK0[1]), heading(BANK3[8]), HMC5883L_TestConnection@tmp(COMMON[3]), 
		 -> MPU6050_ReadBit@tmp(COMMON[1]), MPU6050_ReadBits@tmp(COMMON[1]), MPU6050_WriteBit@tmp(COMMON[1]), MPU6050_WriteBits@tmp(COMMON[1]), 
		 -> MPU6050_GetRawAccel@tempBuffer(COMMON[6]), MPU6050_GetRawAccelGyro@tmpBuffer(COMMON[14]), 

    i2c2_object.pTrTail.ptrb_list	PTR struct . size(1) Largest target is 5
		 -> I2C2_MasterRead@trBlock(BANK3[5]), I2C2_MasterWrite@trBlock(BANK2[5]), 

    I2C2_MasterTRBInsert@ptrb_list	PTR struct . size(1) Largest target is 5
		 -> I2C2_MasterRead@trBlock(BANK3[5]), I2C2_MasterWrite@trBlock(BANK2[5]), 

    I2C2_MasterTRBInsert@pflag	PTR enum E2993 size(1) Largest target is 1
		 -> I2C_BufferRead@status(BANK0[1]), I2C_ByteWrite@status(BANK0[1]), 

    I2C2_MasterRead@pflag	PTR enum E2993 size(1) Largest target is 1
		 -> I2C_BufferRead@status(BANK0[1]), 

    I2C2_MasterRead@pdata	PTR unsigned char  size(2) Largest target is 24
		 -> data(BANK3[8]), b1(BANK3[24]), HMC5883L_ReadBit@tmp(COMMON[1]), HMC5883L_ReadBits@tmp(BANK0[1]), 
		 -> HMC5883L_WriteBit@tmp(COMMON[1]), HMC5883L_WriteBits@tmp(BANK0[1]), heading(BANK3[8]), HMC5883L_TestConnection@tmp(COMMON[3]), 
		 -> MPU6050_ReadBit@tmp(COMMON[1]), MPU6050_ReadBits@tmp(COMMON[1]), MPU6050_WriteBit@tmp(COMMON[1]), MPU6050_WriteBits@tmp(COMMON[1]), 
		 -> MPU6050_GetRawAccel@tempBuffer(COMMON[6]), MPU6050_GetRawAccelGyro@tmpBuffer(COMMON[14]), 

    F3105.pbuffer	PTR unsigned char  size(2) Largest target is 24
		 -> I2C_BufferRead@ReadAddr(BANK0[1]), I2C_BufferRead@status(BANK0[1]), I2C_ByteWrite@data(BANK0[2]), I2C_ByteWrite@status(BANK0[1]), 
		 -> data(BANK3[8]), b1(BANK3[24]), HMC5883L_ReadBit@tmp(COMMON[1]), HMC5883L_ReadBits@tmp(BANK0[1]), 
		 -> HMC5883L_WriteBit@tmp(COMMON[1]), HMC5883L_WriteBits@tmp(BANK0[1]), heading(BANK3[8]), HMC5883L_TestConnection@tmp(COMMON[3]), 
		 -> MPU6050_ReadBit@tmp(COMMON[1]), MPU6050_ReadBits@tmp(COMMON[1]), MPU6050_WriteBit@tmp(COMMON[1]), MPU6050_WriteBits@tmp(COMMON[1]), 
		 -> MPU6050_GetRawAccel@tempBuffer(COMMON[6]), MPU6050_GetRawAccelGyro@tmpBuffer(COMMON[14]), 

    I2C2_MasterWrite@pflag	PTR enum E2993 size(1) Largest target is 1
		 -> I2C_BufferRead@status(BANK0[1]), I2C_ByteWrite@status(BANK0[1]), 

    I2C2_MasterWrite@pdata	PTR unsigned char  size(1) Largest target is 2
		 -> I2C_BufferRead@ReadAddr(BANK0[1]), I2C_ByteWrite@data(BANK0[2]), 

    F3100.pbuffer	PTR unsigned char  size(2) Largest target is 24
		 -> I2C_BufferRead@ReadAddr(BANK0[1]), I2C_BufferRead@status(BANK0[1]), I2C_ByteWrite@data(BANK0[2]), I2C_ByteWrite@status(BANK0[1]), 
		 -> data(BANK3[8]), b1(BANK3[24]), HMC5883L_ReadBit@tmp(COMMON[1]), HMC5883L_ReadBits@tmp(BANK0[1]), 
		 -> HMC5883L_WriteBit@tmp(COMMON[1]), HMC5883L_WriteBits@tmp(BANK0[1]), heading(BANK3[8]), HMC5883L_TestConnection@tmp(COMMON[3]), 
		 -> MPU6050_ReadBit@tmp(COMMON[1]), MPU6050_ReadBits@tmp(COMMON[1]), MPU6050_WriteBit@tmp(COMMON[1]), MPU6050_WriteBits@tmp(COMMON[1]), 
		 -> MPU6050_GetRawAccel@tempBuffer(COMMON[6]), MPU6050_GetRawAccelGyro@tmpBuffer(COMMON[14]), 

    I2C2_ISR@pi2c_buf_ptr	PTR unsigned char  size(2) Largest target is 24
		 -> I2C_BufferRead@ReadAddr(BANK0[1]), I2C_BufferRead@status(BANK0[1]), I2C_ByteWrite@data(BANK0[2]), I2C_ByteWrite@status(BANK0[1]), 
		 -> data(BANK3[8]), b1(BANK3[24]), HMC5883L_ReadBit@tmp(COMMON[1]), HMC5883L_ReadBits@tmp(BANK0[1]), 
		 -> HMC5883L_WriteBit@tmp(COMMON[1]), HMC5883L_WriteBits@tmp(BANK0[1]), heading(BANK3[8]), HMC5883L_TestConnection@tmp(COMMON[3]), 
		 -> MPU6050_ReadBit@tmp(COMMON[1]), MPU6050_ReadBits@tmp(COMMON[1]), MPU6050_WriteBit@tmp(COMMON[1]), MPU6050_WriteBits@tmp(COMMON[1]), 
		 -> MPU6050_GetRawAccel@tempBuffer(COMMON[6]), MPU6050_GetRawAccelGyro@tmpBuffer(COMMON[14]), NULL(NULL[0]), 

    p_i2c2_trb_current.pbuffer	PTR unsigned char  size(2) Largest target is 24
		 -> I2C_BufferRead@ReadAddr(BANK0[1]), I2C_BufferRead@status(BANK0[1]), I2C_ByteWrite@data(BANK0[2]), I2C_ByteWrite@status(BANK0[1]), 
		 -> data(BANK3[8]), b1(BANK3[24]), HMC5883L_ReadBit@tmp(COMMON[1]), HMC5883L_ReadBits@tmp(BANK0[1]), 
		 -> HMC5883L_WriteBit@tmp(COMMON[1]), HMC5883L_WriteBits@tmp(BANK0[1]), heading(BANK3[8]), HMC5883L_TestConnection@tmp(COMMON[3]), 
		 -> MPU6050_ReadBit@tmp(COMMON[1]), MPU6050_ReadBits@tmp(COMMON[1]), MPU6050_WriteBit@tmp(COMMON[1]), MPU6050_WriteBits@tmp(COMMON[1]), 
		 -> MPU6050_GetRawAccel@tempBuffer(COMMON[6]), MPU6050_GetRawAccelGyro@tmpBuffer(COMMON[14]), 

    p_i2c2_trb_current	PTR struct . size(1) Largest target is 5
		 -> I2C2_MasterRead@trBlock(BANK3[5]), I2C2_MasterWrite@trBlock(BANK2[5]), NULL(NULL[0]), 

    i2c2_object.pTrHead.pTrFlag	PTR enum E2993 size(2) Largest target is 24
		 -> I2C_BufferRead@ReadAddr(BANK0[1]), I2C_BufferRead@status(BANK0[1]), I2C_ByteWrite@data(BANK0[2]), I2C_ByteWrite@status(BANK0[1]), 
		 -> data(BANK3[8]), b1(BANK3[24]), HMC5883L_ReadBit@tmp(COMMON[1]), HMC5883L_ReadBits@tmp(BANK0[1]), 
		 -> HMC5883L_WriteBit@tmp(COMMON[1]), HMC5883L_WriteBits@tmp(BANK0[1]), heading(BANK3[8]), HMC5883L_TestConnection@tmp(COMMON[3]), 
		 -> MPU6050_ReadBit@tmp(COMMON[1]), MPU6050_ReadBits@tmp(COMMON[1]), MPU6050_WriteBit@tmp(COMMON[1]), MPU6050_WriteBits@tmp(COMMON[1]), 
		 -> MPU6050_GetRawAccel@tempBuffer(COMMON[6]), MPU6050_GetRawAccelGyro@tmpBuffer(COMMON[14]), 

    i2c2_object.pTrHead.ptrb_list	PTR struct . size(1) Largest target is 5
		 -> I2C2_MasterRead@trBlock(BANK3[5]), I2C2_MasterWrite@trBlock(BANK2[5]), 

    S587$pbuffer	PTR unsigned char  size(2) Largest target is 24
		 -> I2C_BufferRead@ReadAddr(BANK0[1]), I2C_BufferRead@status(BANK0[1]), I2C_ByteWrite@data(BANK0[2]), I2C_ByteWrite@status(BANK0[1]), 
		 -> data(BANK3[8]), b1(BANK3[24]), HMC5883L_ReadBit@tmp(COMMON[1]), HMC5883L_ReadBits@tmp(BANK0[1]), 
		 -> HMC5883L_WriteBit@tmp(COMMON[1]), HMC5883L_WriteBits@tmp(BANK0[1]), heading(BANK3[8]), HMC5883L_TestConnection@tmp(COMMON[3]), 
		 -> MPU6050_ReadBit@tmp(COMMON[1]), MPU6050_ReadBits@tmp(COMMON[1]), MPU6050_WriteBit@tmp(COMMON[1]), MPU6050_WriteBits@tmp(COMMON[1]), 
		 -> MPU6050_GetRawAccel@tempBuffer(COMMON[6]), MPU6050_GetRawAccelGyro@tmpBuffer(COMMON[14]), 

    p_i2c2_current.pbuffer	PTR unsigned char  size(2) Largest target is 24
		 -> I2C_BufferRead@ReadAddr(BANK0[1]), I2C_BufferRead@status(BANK0[1]), I2C_ByteWrite@data(BANK0[2]), I2C_ByteWrite@status(BANK0[1]), 
		 -> data(BANK3[8]), b1(BANK3[24]), HMC5883L_ReadBit@tmp(COMMON[1]), HMC5883L_ReadBits@tmp(BANK0[1]), 
		 -> HMC5883L_WriteBit@tmp(COMMON[1]), HMC5883L_WriteBits@tmp(BANK0[1]), heading(BANK3[8]), HMC5883L_TestConnection@tmp(COMMON[3]), 
		 -> MPU6050_ReadBit@tmp(COMMON[1]), MPU6050_ReadBits@tmp(COMMON[1]), MPU6050_WriteBit@tmp(COMMON[1]), MPU6050_WriteBits@tmp(COMMON[1]), 
		 -> MPU6050_GetRawAccel@tempBuffer(COMMON[6]), MPU6050_GetRawAccelGyro@tmpBuffer(COMMON[14]), 

    S599$pTrFlag	PTR enum E2993 size(2) Largest target is 24
		 -> I2C_BufferRead@ReadAddr(BANK0[1]), I2C_BufferRead@status(BANK0[1]), I2C_ByteWrite@data(BANK0[2]), I2C_ByteWrite@status(BANK0[1]), 
		 -> data(BANK3[8]), b1(BANK3[24]), HMC5883L_ReadBit@tmp(COMMON[1]), HMC5883L_ReadBits@tmp(BANK0[1]), 
		 -> HMC5883L_WriteBit@tmp(COMMON[1]), HMC5883L_WriteBits@tmp(BANK0[1]), heading(BANK3[8]), HMC5883L_TestConnection@tmp(COMMON[3]), 
		 -> MPU6050_ReadBit@tmp(COMMON[1]), MPU6050_ReadBits@tmp(COMMON[1]), MPU6050_WriteBit@tmp(COMMON[1]), MPU6050_WriteBits@tmp(COMMON[1]), 
		 -> MPU6050_GetRawAccel@tempBuffer(COMMON[6]), MPU6050_GetRawAccelGyro@tmpBuffer(COMMON[14]), 

    p_i2c2_current.pTrFlag	PTR enum E2993 size(2) Largest target is 24
		 -> I2C_BufferRead@ReadAddr(BANK0[1]), I2C_BufferRead@status(BANK0[1]), I2C_ByteWrite@data(BANK0[2]), I2C_ByteWrite@status(BANK0[1]), 
		 -> data(BANK3[8]), b1(BANK3[24]), HMC5883L_ReadBit@tmp(COMMON[1]), HMC5883L_ReadBits@tmp(BANK0[1]), 
		 -> HMC5883L_WriteBit@tmp(COMMON[1]), HMC5883L_WriteBits@tmp(BANK0[1]), heading(BANK3[8]), HMC5883L_TestConnection@tmp(COMMON[3]), 
		 -> MPU6050_ReadBit@tmp(COMMON[1]), MPU6050_ReadBits@tmp(COMMON[1]), MPU6050_WriteBit@tmp(COMMON[1]), MPU6050_WriteBits@tmp(COMMON[1]), 
		 -> MPU6050_GetRawAccel@tempBuffer(COMMON[6]), MPU6050_GetRawAccelGyro@tmpBuffer(COMMON[14]), 

    S599$ptrb_list	PTR struct . size(1) Largest target is 5
		 -> I2C2_MasterRead@trBlock(BANK3[5]), I2C2_MasterWrite@trBlock(BANK2[5]), 

    p_i2c2_current.ptrb_list	PTR struct . size(1) Largest target is 5
		 -> I2C2_MasterRead@trBlock(BANK3[5]), I2C2_MasterWrite@trBlock(BANK2[5]), 

    p_i2c2_current	PTR struct . size(1) Largest target is 5
		 -> i2c2_tr_queue(BANK2[4]), NULL(NULL[0]), 

    S610$pTrHead	PTR struct . size(1) Largest target is 5
		 -> i2c2_tr_queue(BANK2[4]), 

    i2c2_object.pTrHead	PTR struct . size(1) Largest target is 5
		 -> i2c2_tr_queue(BANK2[4]), 

    S610$pTrTail	PTR struct . size(1) Largest target is 5
		 -> i2c2_tr_queue(BANK2[4]), 

    i2c2_object.pTrTail	PTR struct . size(1) Largest target is 5
		 -> i2c2_tr_queue(BANK2[4]), 

    TMR1_SetInterruptHandler@InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> TMR1_DefaultInterruptHandler(), 

    TMR1_InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> TMR1_DefaultInterruptHandler(), Absolute function(), 

    IOCAF2_SetInterruptHandler@InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> IOCAF2_DefaultInterruptHandler(), 

    IOCAF2_InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), IOCAF2_DefaultInterruptHandler(), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _INTERRUPT_InterruptManager in COMMON

    _INTERRUPT_InterruptManager->_I2C2_ISR
    _I2C2_ISR->_I2C2_Stop

Critical Paths under _main in BANK0

    _Wireless_wake->_RF_ReadRegisterData
    _Wireless_sleep->_RF_ReadRegisterData
    _Wireless_packageData->___fttol
    _Wireless_sendData->_RF_TxPayload
    _RF_TxPayload->_RF_WriteRegisterData
    _RF_Write->_SPI_WriteRead
    _Wireless_checkDataReceived->_RF_RxPayload
    _RF_RxPayload->_RF_ReadRegisterData
    _RF_ReadRegisterData->_SPI_WriteReadBuffer
    _SPI_WriteReadBuffer->_SPI_WriteRead
    _RF_DataIsReady->_RF_ReadRegister
    _RF_ReadRegister->_SPI_WriteRead
    _DOOR_update->_Storage_save
    _Storage_save->_DATAEE_WriteByte
    _Sensor_getSupplyVoltage->___ftdiv
    _Wireless_init->_RF_WriteRegisterData
    _RF_WriteRegisterData->_SPI_WriteBuffer
    _SPI_WriteBuffer->_SPI_WriteRead
    _RF_ResetStatusIRQ->_RF_WriteRegister
    _RF_WriteRegister->_SPI_WriteRead
    _SPI_WriteRead->_SPI1_Exchange8bit
    _TMR1_Initialize->_TMR1_SetInterruptHandler
    _PIN_MANAGER_Initialize->_IOCAF2_SetInterruptHandler
    _HMC5883L_Initialize->_HMC5883L_SetGain
    _HMC5883L_Initialize->_HMC5883L_SetMode
    _HMC5883L_SetMode->_HMC5883L_I2C_ByteWrite
    _HMC5883L_SetGain->_HMC5883L_I2C_ByteWrite
    _HMC5883L_GetCompassDirection->___fttol
    _atan2->_atan
    _atan->_eval_poly
    _fabs->___ftneg
    _eval_poly->___ftadd
    ___ftsub->___ftadd
    _HMC5883L_GetHeading->_HMC5883L_WakeUp
    _HMC5883L_WakeUp->_HMC5883L_WriteBits
    _HMC5883L_WriteBits->_HMC5883L_I2C_BufferRead
    _HMC5883L_I2C_ByteWrite->_I2C_ByteWrite
    _DOOR_init->_Storage_load
    _Storage_load->_DATAEE_WriteByte
    _BMP_readTemperature->___fttol
    ___lwtoft->___ftpack
    ___fttol->___ftadd
    ___ftneg->___ftdiv
    ___ftmul->_Sensor_getSupplyVoltage
    ___ftdiv->___altoft
    ___ftadd->___ftmul
    ___awtoft->___ftpack
    ___altoft->___ftpack
    ___altoft->___ftpack
    _HMC5883L_ReadBits->_HMC5883L_I2C_BufferRead
    _HMC5883L_I2C_BufferRead->_I2C_BufferRead
    _BMP_init->_I2C_BufferRead
    _I2C_ByteWrite->_I2C2_MasterWrite
    _I2C_BufferRead->_I2C2_MasterRead
    _I2C2_MasterWrite->_I2C2_MasterWriteTRBBuild
    _I2C2_MasterRead->_I2C2_MasterReadTRBBuild

Critical Paths under _INTERRUPT_InterruptManager in BANK0

    None.

Critical Paths under _main in BANK1

    _main->_DOOR_run
    _Wireless_packageData->_BMP_readTemperature
    _DOOR_run->_HMC5883L_GetCompassDirection
    _HMC5883L_GetCompassDirection->_atan2
    _atan2->_atan
    _atan->_eval_poly
    _BMP_readTemperature->___fttol

Critical Paths under _INTERRUPT_InterruptManager in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK12

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                12    12      0  209945
                                             56 BANK1      2     2      0
                                              0 BANK3     10    10      0
                           _BMP_init
                _BMP_readTemperature
                          _DOOR_init
                      _DOOR_resetPos
                           _DOOR_run
                _HMC5883L_Initialize
                  _SYSTEM_Initialize
             _Sensor_peripheralSleep
                      _Wireless_init
               _Wireless_packageData
                     _Wireless_sleep
                      _Wireless_wake
                            ___lldiv
 ---------------------------------------------------------------------------------
 (1) ___lldiv                                             14     6      8     857
                                              1 BANK0     14     6      8
 ---------------------------------------------------------------------------------
 (1) _Wireless_wake                                        2     2      0    2211
                                             15 BANK0      2     2      0
                _RF_ReadRegisterData
                   _RF_WriteRegister
 ---------------------------------------------------------------------------------
 (1) _Wireless_sleep                                       2     2      0    2211
                                             15 BANK0      2     2      0
                _RF_ReadRegisterData
                   _RF_WriteRegister
 ---------------------------------------------------------------------------------
 (1) _Wireless_packageData                                17    13      4   20899
                                             26 BANK1     17    13      4
                _BMP_readTemperature (ARG)
               _Diag_getSensorHealth
            _Sensor_getSupplyVoltage
         _Wireless_checkDataReceived
                  _Wireless_sendData
                             ___bmul
                            ___ftmul
                            ___fttol
                            ___lldiv (ARG)
                                _abs
 ---------------------------------------------------------------------------------
 (2) ___bmul                                               4     3      1     213
                                              1 BANK0      4     3      1
 ---------------------------------------------------------------------------------
 (2) _Wireless_sendData                                    2     2      0    2679
                                             17 BANK0      2     2      0
                  _RF_ResetStatusIRQ
                       _RF_TxPayload
 ---------------------------------------------------------------------------------
 (3) _RF_TxPayload                                         3     2      1    1536
                                             14 BANK0      3     2      1
                           _RF_Write
               _RF_WriteRegisterData
 ---------------------------------------------------------------------------------
 (4) _RF_Write                                             1     1      0      93
                                              3 BANK0      1     1      0
                      _SPI_WriteRead
 ---------------------------------------------------------------------------------
 (2) _Wireless_checkDataReceived                           9     9      0    3155
                                             19 BANK0      9     9      0
                      _DOOR_resetPos
                        _DOOR_update
                     _RF_DataIsReady
                       _RF_RxPayload
                             ___lmul
 ---------------------------------------------------------------------------------
 (3) ___lmul                                              12     4      8     290
                                              1 BANK0     12     4      8
 ---------------------------------------------------------------------------------
 (3) _RF_RxPayload                                         4     3      1    1261
                                             15 BANK0      4     3      1
                _RF_ReadRegisterData
 ---------------------------------------------------------------------------------
 (2) _RF_ReadRegisterData                                  5     3      2    1089
                                             10 BANK0      5     3      2
                      _SPI_WriteRead
                _SPI_WriteReadBuffer
 ---------------------------------------------------------------------------------
 (3) _SPI_WriteReadBuffer                                  7     5      2     441
                                              3 BANK0      7     5      2
                      _SPI_WriteRead
 ---------------------------------------------------------------------------------
 (3) _RF_DataIsReady                                       3     3      0     292
                                              6 BANK0      3     3      0
                    _RF_ReadRegister
 ---------------------------------------------------------------------------------
 (4) _RF_ReadRegister                                      3     3      0     127
                                              3 BANK0      3     3      0
                      _SPI_WriteRead
 ---------------------------------------------------------------------------------
 (3) _DOOR_update                                          3     2      1     978
                                              7 BANK0      3     2      1
                       _Storage_save
 ---------------------------------------------------------------------------------
 (4) _Storage_save                                         3     2      1     700
                                              4 BANK0      3     2      1
                   _DATAEE_WriteByte
 ---------------------------------------------------------------------------------
 (3) _DOOR_resetPos                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _Sensor_getSupplyVoltage                              8     5      3    8028
                                             33 BANK0      8     5      3
            _ADC_GetConversionResult
               _ADC_IsConversionDone
                  _ADC_SelectChannel
                _ADC_StartConversion
                  _FVR_IsOutputReady
             _Sensor_peripheralSleep
              _Sensor_peripheralWake
                            ___ftdiv
                           ___lwtoft
 ---------------------------------------------------------------------------------
 (3) _Sensor_peripheralWake                                0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _Sensor_peripheralSleep                               0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _FVR_IsOutputReady                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _ADC_StartConversion                                  0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _ADC_SelectChannel                                    2     2      0      31
                                              1 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (3) _ADC_IsConversionDone                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _ADC_GetConversionResult                              2     0      2       0
                                              1 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (2) _Diag_getSensorHealth                                 2     2      0      43
                                              1 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _Wireless_init                                        2     2      0    3398
                                             14 BANK0      2     2      0
                            _RF_Init
                  _RF_ResetStatusIRQ
                   _RF_WriteRegister
               _RF_WriteRegisterData
 ---------------------------------------------------------------------------------
 (4) _RF_WriteRegisterData                                 5     2      3    1271
                                              9 BANK0      5     2      3
                    _SPI_WriteBuffer
                      _SPI_WriteRead
 ---------------------------------------------------------------------------------
 (5) _SPI_WriteBuffer                                      6     3      3     346
                                              3 BANK0      6     3      3
                      _SPI_WriteRead
 ---------------------------------------------------------------------------------
 (3) _RF_ResetStatusIRQ                                    2     2      0    1079
                                              5 BANK0      2     2      0
                   _RF_WriteRegister
 ---------------------------------------------------------------------------------
 (2) _RF_WriteRegister                                     2     1      1    1048
                                              3 BANK0      2     1      1
                      _SPI_WriteRead
 ---------------------------------------------------------------------------------
 (3) _SPI_WriteRead                                        1     1      0      62
                                              2 BANK0      1     1      0
                  _SPI1_Exchange8bit
 ---------------------------------------------------------------------------------
 (4) _SPI1_Exchange8bit                                    1     1      0      31
                                              1 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _RF_Init                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _SYSTEM_Initialize                                    0     0      0     216
                     _ADC_Initialize
                     _FVR_Initialize
                    _I2C2_Initialize
              _OSCILLATOR_Initialize
             _PIN_MANAGER_Initialize
                    _SPI1_Initialize
                    _TMR1_Initialize
                    _TMR2_Initialize
                     _WDT_Initialize
 ---------------------------------------------------------------------------------
 (2) _WDT_Initialize                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _TMR2_Initialize                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _TMR1_Initialize                                      0     0      0     108
           _TMR1_SetInterruptHandler
 ---------------------------------------------------------------------------------
 (3) _TMR1_SetInterruptHandler                             2     0      2     108
                                              1 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (2) _SPI1_Initialize                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _PIN_MANAGER_Initialize                               0     0      0     108
         _IOCAF2_SetInterruptHandler
 ---------------------------------------------------------------------------------
 (3) _IOCAF2_SetInterruptHandler                           2     0      2     108
                                              1 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (2) _OSCILLATOR_Initialize                                0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _I2C2_Initialize                                      1     1      0       0
                                              1 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _FVR_Initialize                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _ADC_Initialize                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _DOOR_run                                             5     5      0  111226
                                             51 BANK1      5     5      0
              _Diag_getCompassHealth
              _Diag_setCompassHealth
       _HMC5883L_GetCompassDirection
                _HMC5883L_Initialize
                                _abs
 ---------------------------------------------------------------------------------
 (2) _abs                                                  4     2      2     401
                                              1 BANK0      4     2      2
 ---------------------------------------------------------------------------------
 (1) _HMC5883L_Initialize                                  2     2      0   11246
                                             34 BANK0      2     2      0
             _HMC5883L_I2C_ByteWrite
                   _HMC5883L_SetGain
                   _HMC5883L_SetMode
 ---------------------------------------------------------------------------------
 (2) _HMC5883L_SetMode                                     4     4      0    3759
                                             30 BANK0      4     4      0
             _HMC5883L_I2C_ByteWrite
 ---------------------------------------------------------------------------------
 (2) _HMC5883L_SetGain                                     4     4      0    3759
                                             30 BANK0      4     4      0
             _HMC5883L_I2C_ByteWrite
 ---------------------------------------------------------------------------------
 (2) _HMC5883L_GetCompassDirection                        11     9      2   99421
                                             40 BANK1     11     9      2
                _HMC5883L_GetHeading
                           ___awtoft
                            ___ftadd
                            ___ftdiv
                            ___ftmul
                            ___fttol
                              _atan2
 ---------------------------------------------------------------------------------
 (3) _atan2                                               21    15      6   53509
                                             19 BANK1     21    15      6
                           ___awtoft (ARG)
                            ___ftadd
                            ___ftdiv
                             ___ftge
                            ___ftneg
                            ___ftsub
                               _atan
                               _fabs
 ---------------------------------------------------------------------------------
 (4) _atan                                                17    14      3   31431
                                             77 BANK0      1     1      0
                                              3 BANK1     16    13      3
                            ___ftadd
                            ___ftdiv
                             ___ftge
                            ___ftmul
                            ___ftneg
                          _eval_poly
                               _fabs
 ---------------------------------------------------------------------------------
 (4) _fabs                                                 3     0      3    2512
                                             36 BANK0      3     0      3
                             ___ftge
                            ___ftneg
 ---------------------------------------------------------------------------------
 (5) ___ftge                                               9     3      6    1584
                                              1 BANK0      9     3      6
 ---------------------------------------------------------------------------------
 (5) _eval_poly                                           10     3      7   11121
                                             70 BANK0      7     0      7
                                              0 BANK1      3     3      0
                            ___ftadd
                            ___ftmul
                             ___wmul
 ---------------------------------------------------------------------------------
 (6) ___wmul                                               6     2      4     444
                                              1 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (4) ___ftsub                                              6     0      6    5907
                                             70 BANK0      6     0      6
                            ___ftadd
 ---------------------------------------------------------------------------------
 (3) _HMC5883L_GetHeading                                  8     8      0   26991
                                             46 BANK0      8     8      0
            _HMC5883L_I2C_BufferRead
                  _HMC5883L_ReadBits
                    _HMC5883L_WakeUp
 ---------------------------------------------------------------------------------
 (4) _HMC5883L_WakeUp                                      1     1      0   11838
                                             45 BANK0      1     1      0
                 _HMC5883L_WriteBits
 ---------------------------------------------------------------------------------
 (5) _HMC5883L_WriteBits                                  10     6      4   11838
                                             35 BANK0     10     6      4
            _HMC5883L_I2C_BufferRead
             _HMC5883L_I2C_ByteWrite
 ---------------------------------------------------------------------------------
 (3) _HMC5883L_I2C_ByteWrite                               5     3      2    3691
                                             25 BANK0      5     3      2
                      _I2C_ByteWrite
 ---------------------------------------------------------------------------------
 (2) _Diag_setCompassHealth                                2     2      0      31
                                              1 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (2) _Diag_getCompassHealth                                0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _DOOR_init                                            1     1      0     900
                                              8 BANK0      1     1      0
                       _Storage_load
 ---------------------------------------------------------------------------------
 (2) _Storage_load                                         4     3      1     900
                                              4 BANK0      4     3      1
                    _DATAEE_ReadByte
                   _DATAEE_WriteByte
 ---------------------------------------------------------------------------------
 (5) _DATAEE_WriteByte                                     3     2      1     561
                                              1 BANK0      3     2      1
 ---------------------------------------------------------------------------------
 (3) _DATAEE_ReadByte                                      1     1      0      31
                                              1 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _BMP_readTemperature                                 20    17      3   49074
                                              6 BANK1     20    17      3
                           _BMP_init
           _Diag_getTempSensorHealth
           _Diag_setTempSensorHealth
                  _HMC5883L_ReadBits
                     _I2C_BufferRead
                      _I2C_ByteWrite
                            ___aldiv
                           ___altoft
                           ___awtoft
                            ___ftadd
                            ___ftdiv
                            ___ftmul
                            ___ftneg
                            ___fttol
                           ___lwtoft
 ---------------------------------------------------------------------------------
 (3) ___lwtoft                                             4     1      3    2923
                                              9 BANK0      4     1      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (2) ___fttol                                             14    10      4     756
                                             70 BANK0      8     4      4
                                              0 BANK1      6     6      0
            _Sensor_getSupplyVoltage (ARG)
                           ___altoft (ARG)
                            ___ftadd (ARG)
                            ___ftmul (ARG)
 ---------------------------------------------------------------------------------
 (5) ___ftneg                                              3     0      3     604
                                             33 BANK0      3     0      3
                            ___ftdiv (ARG)
                           ___lwtoft (ARG)
 ---------------------------------------------------------------------------------
 (2) ___ftmul                                             16    10      6    4458
                                             41 BANK0     16    10      6
            _Sensor_getSupplyVoltage (ARG)
                           ___altoft (ARG)
                           ___awtoft (ARG)
                            ___ftdiv (ARG)
                            ___ftneg (ARG)
                           ___ftpack
                           ___ftpack (ARG)
                           ___lwtoft (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftdiv                                             16    10      6    5006
                                             17 BANK0     16    10      6
                           ___altoft (ARG)
                           ___ftpack
                           ___ftpack (ARG)
                           ___lwtoft (ARG)
 ---------------------------------------------------------------------------------
 (6) ___ftadd                                             13     7      6    5503
                                             57 BANK0     13     7      6
                           ___altoft (ARG)
                            ___ftdiv (ARG)
                            ___ftmul (ARG)
                            ___ftneg (ARG)
                           ___ftpack
                           ___lwtoft (ARG)
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (3) ___awtoft                                             6     3      3    3025
                                              9 BANK0      6     3      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (2) ___altoft                                             8     4      4    3096
                                              9 BANK0      8     4      4
                           ___ftpack
                           ___ftpack (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftpack                                             8     3      5    2584
                                              1 BANK0      8     3      5
 ---------------------------------------------------------------------------------
 (2) ___aldiv                                             15     7      8     599
                                              1 BANK0     15     7      8
 ---------------------------------------------------------------------------------
 (4) _HMC5883L_ReadBits                                   10     6      4    8661
                                             35 BANK0     10     6      4
            _HMC5883L_I2C_BufferRead
 ---------------------------------------------------------------------------------
 (6) _HMC5883L_I2C_BufferRead                              7     2      5    6134
                                             28 BANK0      7     2      5
                     _I2C_BufferRead
 ---------------------------------------------------------------------------------
 (2) _Diag_getTempSensorHealth                             0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _BMP_init                                             4     4      0    7138
                                             28 BANK0      4     4      0
           _Diag_setTempSensorHealth
                     _I2C_BufferRead
                      _I2C_ByteWrite
 ---------------------------------------------------------------------------------
 (4) _I2C_ByteWrite                                       10     8      2    2674
                                             15 BANK0     10     8      2
                   _I2C2_MasterWrite
                 _Timeout_hasExpired
                 _Timeout_setTimeout
 ---------------------------------------------------------------------------------
 (7) _I2C_BufferRead                                      11     6      5    4393
                                             17 BANK0     11     6      5
                    _I2C2_MasterRead
                   _I2C2_MasterWrite
                 _Timeout_hasExpired
                 _Timeout_setTimeout
 ---------------------------------------------------------------------------------
 (5) _Timeout_setTimeout                                   2     0      2     262
                                              1 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (5) _Timeout_hasExpired                                  12    12      0       0
                                              1 BANK0     12    12      0
 ---------------------------------------------------------------------------------
 (5) _I2C2_MasterWrite                                     7     3      4    1627
                                              8 BANK0      7     3      4
               _I2C2_MasterTRBInsert
           _I2C2_MasterWriteTRBBuild
 ---------------------------------------------------------------------------------
 (6) _I2C2_MasterWriteTRBBuild                             7     3      4     450
                                              1 BANK0      7     3      4
 ---------------------------------------------------------------------------------
 (8) _I2C2_MasterRead                                      8     2      6    1398
                                              9 BANK0      8     2      6
            _I2C2_MasterReadTRBBuild
               _I2C2_MasterTRBInsert
 ---------------------------------------------------------------------------------
 (6) _I2C2_MasterTRBInsert                                 4     2      2     494
                                              1 BANK0      4     2      2
 ---------------------------------------------------------------------------------
 (9) _I2C2_MasterReadTRBBuild                              8     3      5     481
                                              1 BANK0      8     3      5
 ---------------------------------------------------------------------------------
 (2) _Diag_setTempSensorHealth                             2     2      0      31
                                              1 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 9
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (10) _INTERRUPT_InterruptManager                          1     1      0      31
                                              0 BANK0      1     1      0
               _I2C2_BusCollisionISR
                           _I2C2_ISR
                    _PIN_MANAGER_IOC
                           _TMR1_ISR
 ---------------------------------------------------------------------------------
 (11) _TMR1_ISR                                            0     0      0       0
                      _TMR1_CallBack
 ---------------------------------------------------------------------------------
 (12) _TMR1_CallBack                                       0     0      0       0
                   Absolute function *
       _TMR1_DefaultInterruptHandler *
                  _Timeout_increment
 ---------------------------------------------------------------------------------
 (13) _Timeout_increment                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (13) _TMR1_DefaultInterruptHandler                        0     0      0       0
 ---------------------------------------------------------------------------------
 (11) _PIN_MANAGER_IOC                                     0     0      0       0
                         _IOCAF2_ISR
 ---------------------------------------------------------------------------------
 (12) _IOCAF2_ISR                                          0     0      0       0
                   Absolute function *
     _IOCAF2_DefaultInterruptHandler *
 ---------------------------------------------------------------------------------
 (13) _IOCAF2_DefaultInterruptHandler                      0     0      0       0
 ---------------------------------------------------------------------------------
 (13) Absolute function(Fake)                              0     0      0       0
 ---------------------------------------------------------------------------------
 (11) _I2C2_ISR                                            4     4      0      31
                                              3 COMMON     4     4      0
              _I2C2_FunctionComplete
                          _I2C2_Stop
 ---------------------------------------------------------------------------------
 (12) _I2C2_Stop                                           3     3      0      31
                                              0 COMMON     3     3      0
 ---------------------------------------------------------------------------------
 (12) _I2C2_FunctionComplete                               1     1      0       0
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (11) _I2C2_BusCollisionISR                                0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 13
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _BMP_init
     _Diag_setTempSensorHealth
     _I2C_BufferRead
       _I2C2_MasterRead
         _I2C2_MasterReadTRBBuild
         _I2C2_MasterTRBInsert
       _I2C2_MasterWrite
         _I2C2_MasterTRBInsert
         _I2C2_MasterWriteTRBBuild
       _Timeout_hasExpired
       _Timeout_setTimeout
     _I2C_ByteWrite
       _I2C2_MasterWrite
         _I2C2_MasterTRBInsert
         _I2C2_MasterWriteTRBBuild
       _Timeout_hasExpired
       _Timeout_setTimeout
   _BMP_readTemperature
     _BMP_init
       _Diag_setTempSensorHealth
       _I2C_BufferRead
         _I2C2_MasterRead
           _I2C2_MasterReadTRBBuild
           _I2C2_MasterTRBInsert
         _I2C2_MasterWrite
           _I2C2_MasterTRBInsert
           _I2C2_MasterWriteTRBBuild
         _Timeout_hasExpired
         _Timeout_setTimeout
       _I2C_ByteWrite
         _I2C2_MasterWrite
           _I2C2_MasterTRBInsert
           _I2C2_MasterWriteTRBBuild
         _Timeout_hasExpired
         _Timeout_setTimeout
     _Diag_getTempSensorHealth
     _Diag_setTempSensorHealth
     _HMC5883L_ReadBits
       _HMC5883L_I2C_BufferRead
         _I2C_BufferRead
           _I2C2_MasterRead
             _I2C2_MasterReadTRBBuild
             _I2C2_MasterTRBInsert
           _I2C2_MasterWrite
             _I2C2_MasterTRBInsert
             _I2C2_MasterWriteTRBBuild
           _Timeout_hasExpired
           _Timeout_setTimeout
     _I2C_BufferRead
       _I2C2_MasterRead
         _I2C2_MasterReadTRBBuild
         _I2C2_MasterTRBInsert
       _I2C2_MasterWrite
         _I2C2_MasterTRBInsert
         _I2C2_MasterWriteTRBBuild
       _Timeout_hasExpired
       _Timeout_setTimeout
     _I2C_ByteWrite
       _I2C2_MasterWrite
         _I2C2_MasterTRBInsert
         _I2C2_MasterWriteTRBBuild
       _Timeout_hasExpired
       _Timeout_setTimeout
     ___aldiv
     ___altoft
       ___ftpack
       ___ftpack (ARG)
     ___awtoft
       ___ftpack
     ___ftadd
       ___altoft (ARG)
         ___ftpack
         ___ftpack (ARG)
       ___ftdiv (ARG)
         ___altoft (ARG)
           ___ftpack
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
       ___ftmul (ARG)
         _Sensor_getSupplyVoltage (ARG)
           _ADC_GetConversionResult
           _ADC_IsConversionDone
           _ADC_SelectChannel
           _ADC_StartConversion
           _FVR_IsOutputReady
           _Sensor_peripheralSleep
           _Sensor_peripheralWake
           ___ftdiv
             ___altoft (ARG)
               ___ftpack
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
           ___lwtoft
             ___ftpack
         ___altoft (ARG)
           ___ftpack
           ___ftpack (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
         ___ftneg (ARG)
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
           ___lwtoft (ARG)
             ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
       ___ftneg (ARG)
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
         ___lwtoft (ARG)
           ___ftpack
       ___ftpack (ARG)
       ___lwtoft (ARG)
         ___ftpack
       ___wmul (ARG)
     ___ftdiv
       ___altoft (ARG)
         ___ftpack
         ___ftpack (ARG)
       ___ftpack (ARG)
       ___ftpack (ARG)
       ___lwtoft (ARG)
         ___ftpack
     ___ftmul
       _Sensor_getSupplyVoltage (ARG)
         _ADC_GetConversionResult
         _ADC_IsConversionDone
         _ADC_SelectChannel
         _ADC_StartConversion
         _FVR_IsOutputReady
         _Sensor_peripheralSleep
         _Sensor_peripheralWake
         ___ftdiv
           ___altoft (ARG)
             ___ftpack
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
         ___lwtoft
           ___ftpack
       ___altoft (ARG)
         ___ftpack
         ___ftpack (ARG)
       ___awtoft (ARG)
         ___ftpack
       ___ftdiv (ARG)
         ___altoft (ARG)
           ___ftpack
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
       ___ftneg (ARG)
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
         ___lwtoft (ARG)
           ___ftpack
       ___ftpack (ARG)
       ___ftpack (ARG)
       ___lwtoft (ARG)
         ___ftpack
     ___ftneg
       ___ftdiv (ARG)
         ___altoft (ARG)
           ___ftpack
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
       ___lwtoft (ARG)
         ___ftpack
     ___fttol
       _Sensor_getSupplyVoltage (ARG)
         _ADC_GetConversionResult
         _ADC_IsConversionDone
         _ADC_SelectChannel
         _ADC_StartConversion
         _FVR_IsOutputReady
         _Sensor_peripheralSleep
         _Sensor_peripheralWake
         ___ftdiv
           ___altoft (ARG)
             ___ftpack
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
         ___lwtoft
           ___ftpack
       ___altoft (ARG)
         ___ftpack
         ___ftpack (ARG)
       ___ftadd (ARG)
         ___altoft (ARG)
           ___ftpack
           ___ftpack (ARG)
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
         ___ftmul (ARG)
           _Sensor_getSupplyVoltage (ARG)
             _ADC_GetConversionResult
             _ADC_IsConversionDone
             _ADC_SelectChannel
             _ADC_StartConversion
             _FVR_IsOutputReady
             _Sensor_peripheralSleep
             _Sensor_peripheralWake
             ___ftdiv
               ___altoft (ARG)
                 ___ftpack
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
             ___lwtoft
               ___ftpack
           ___altoft (ARG)
             ___ftpack
             ___ftpack (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
           ___ftneg (ARG)
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
             ___lwtoft (ARG)
               ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
         ___ftneg (ARG)
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
           ___lwtoft (ARG)
             ___ftpack
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
         ___wmul (ARG)
       ___ftmul (ARG)
         _Sensor_getSupplyVoltage (ARG)
           _ADC_GetConversionResult
           _ADC_IsConversionDone
           _ADC_SelectChannel
           _ADC_StartConversion
           _FVR_IsOutputReady
           _Sensor_peripheralSleep
           _Sensor_peripheralWake
           ___ftdiv
             ___altoft (ARG)
               ___ftpack
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
           ___lwtoft
             ___ftpack
         ___altoft (ARG)
           ___ftpack
           ___ftpack (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
         ___ftneg (ARG)
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
           ___lwtoft (ARG)
             ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
     ___lwtoft
       ___ftpack
   _DOOR_init
     _Storage_load
       _DATAEE_ReadByte
       _DATAEE_WriteByte
   _DOOR_resetPos
   _DOOR_run
     _Diag_getCompassHealth
     _Diag_setCompassHealth
     _HMC5883L_GetCompassDirection
       _HMC5883L_GetHeading
         _HMC5883L_I2C_BufferRead
           _I2C_BufferRead
             _I2C2_MasterRead
               _I2C2_MasterReadTRBBuild
               _I2C2_MasterTRBInsert
             _I2C2_MasterWrite
               _I2C2_MasterTRBInsert
               _I2C2_MasterWriteTRBBuild
             _Timeout_hasExpired
             _Timeout_setTimeout
         _HMC5883L_ReadBits
           _HMC5883L_I2C_BufferRead
             _I2C_BufferRead
               _I2C2_MasterRead
                 _I2C2_MasterReadTRBBuild
                 _I2C2_MasterTRBInsert
               _I2C2_MasterWrite
                 _I2C2_MasterTRBInsert
                 _I2C2_MasterWriteTRBBuild
               _Timeout_hasExpired
               _Timeout_setTimeout
         _HMC5883L_WakeUp
           _HMC5883L_WriteBits
             _HMC5883L_I2C_BufferRead
               _I2C_BufferRead
                 _I2C2_MasterRead
                   _I2C2_MasterReadTRBBuild
                   _I2C2_MasterTRBInsert
                 _I2C2_MasterWrite
                   _I2C2_MasterTRBInsert
                   _I2C2_MasterWriteTRBBuild
                 _Timeout_hasExpired
                 _Timeout_setTimeout
             _HMC5883L_I2C_ByteWrite
               _I2C_ByteWrite
                 _I2C2_MasterWrite
                   _I2C2_MasterTRBInsert
                   _I2C2_MasterWriteTRBBuild
                 _Timeout_hasExpired
                 _Timeout_setTimeout
       ___awtoft
         ___ftpack
       ___ftadd
         ___altoft (ARG)
           ___ftpack
           ___ftpack (ARG)
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
         ___ftmul (ARG)
           _Sensor_getSupplyVoltage (ARG)
             _ADC_GetConversionResult
             _ADC_IsConversionDone
             _ADC_SelectChannel
             _ADC_StartConversion
             _FVR_IsOutputReady
             _Sensor_peripheralSleep
             _Sensor_peripheralWake
             ___ftdiv
               ___altoft (ARG)
                 ___ftpack
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
             ___lwtoft
               ___ftpack
           ___altoft (ARG)
             ___ftpack
             ___ftpack (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
           ___ftneg (ARG)
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
             ___lwtoft (ARG)
               ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
         ___ftneg (ARG)
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
           ___lwtoft (ARG)
             ___ftpack
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
         ___wmul (ARG)
       ___ftdiv
         ___altoft (ARG)
           ___ftpack
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
       ___ftmul
         _Sensor_getSupplyVoltage (ARG)
           _ADC_GetConversionResult
           _ADC_IsConversionDone
           _ADC_SelectChannel
           _ADC_StartConversion
           _FVR_IsOutputReady
           _Sensor_peripheralSleep
           _Sensor_peripheralWake
           ___ftdiv
             ___altoft (ARG)
               ___ftpack
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
           ___lwtoft
             ___ftpack
         ___altoft (ARG)
           ___ftpack
           ___ftpack (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
         ___ftneg (ARG)
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
           ___lwtoft (ARG)
             ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
       ___fttol
         _Sensor_getSupplyVoltage (ARG)
           _ADC_GetConversionResult
           _ADC_IsConversionDone
           _ADC_SelectChannel
           _ADC_StartConversion
           _FVR_IsOutputReady
           _Sensor_peripheralSleep
           _Sensor_peripheralWake
           ___ftdiv
             ___altoft (ARG)
               ___ftpack
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
           ___lwtoft
             ___ftpack
         ___altoft (ARG)
           ___ftpack
           ___ftpack (ARG)
         ___ftadd (ARG)
           ___altoft (ARG)
             ___ftpack
             ___ftpack (ARG)
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
           ___ftmul (ARG)
             _Sensor_getSupplyVoltage (ARG)
               _ADC_GetConversionResult
               _ADC_IsConversionDone
               _ADC_SelectChannel
               _ADC_StartConversion
               _FVR_IsOutputReady
               _Sensor_peripheralSleep
               _Sensor_peripheralWake
               ___ftdiv
                 ___altoft (ARG)
                   ___ftpack
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
               ___lwtoft
                 ___ftpack
             ___altoft (ARG)
               ___ftpack
               ___ftpack (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
             ___ftneg (ARG)
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
           ___ftneg (ARG)
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
             ___lwtoft (ARG)
               ___ftpack
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
         ___ftmul (ARG)
           _Sensor_getSupplyVoltage (ARG)
             _ADC_GetConversionResult
             _ADC_IsConversionDone
             _ADC_SelectChannel
             _ADC_StartConversion
             _FVR_IsOutputReady
             _Sensor_peripheralSleep
             _Sensor_peripheralWake
             ___ftdiv
               ___altoft (ARG)
                 ___ftpack
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
             ___lwtoft
               ___ftpack
           ___altoft (ARG)
             ___ftpack
             ___ftpack (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
           ___ftneg (ARG)
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
             ___lwtoft (ARG)
               ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
       _atan2
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___altoft (ARG)
             ___ftpack
             ___ftpack (ARG)
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
           ___ftmul (ARG)
             _Sensor_getSupplyVoltage (ARG)
               _ADC_GetConversionResult
               _ADC_IsConversionDone
               _ADC_SelectChannel
               _ADC_StartConversion
               _FVR_IsOutputReady
               _Sensor_peripheralSleep
               _Sensor_peripheralWake
               ___ftdiv
                 ___altoft (ARG)
                   ___ftpack
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
               ___lwtoft
                 ___ftpack
             ___altoft (ARG)
               ___ftpack
               ___ftpack (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
             ___ftneg (ARG)
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
           ___ftneg (ARG)
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
             ___lwtoft (ARG)
               ___ftpack
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
         ___ftge (ARG)
         ___ftneg (ARG)
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
           ___lwtoft (ARG)
             ___ftpack
         ___ftsub (ARG)
           ___ftadd
             ___altoft (ARG)
               ___ftpack
               ___ftpack (ARG)
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
             ___ftmul (ARG)
               _Sensor_getSupplyVoltage (ARG)
                 _ADC_GetConversionResult
                 _ADC_IsConversionDone
                 _ADC_SelectChannel
                 _ADC_StartConversion
                 _FVR_IsOutputReady
                 _Sensor_peripheralSleep
                 _Sensor_peripheralWake
                 ___ftdiv
                   ___altoft (ARG)
                     ___ftpack
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                 ___lwtoft
                   ___ftpack
               ___altoft (ARG)
                 ___ftpack
                 ___ftpack (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftneg (ARG)
                 ___ftdiv (ARG)
                   ___altoft (ARG)
                     ___ftpack
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
             ___ftneg (ARG)
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
         _atan (ARG)
           ___ftadd
             ___altoft (ARG)
               ___ftpack
               ___ftpack (ARG)
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
             ___ftmul (ARG)
               _Sensor_getSupplyVoltage (ARG)
                 _ADC_GetConversionResult
                 _ADC_IsConversionDone
                 _ADC_SelectChannel
                 _ADC_StartConversion
                 _FVR_IsOutputReady
                 _Sensor_peripheralSleep
                 _Sensor_peripheralWake
                 ___ftdiv
                   ___altoft (ARG)
                     ___ftpack
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                 ___lwtoft
                   ___ftpack
               ___altoft (ARG)
                 ___ftpack
                 ___ftpack (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftneg (ARG)
                 ___ftdiv (ARG)
                   ___altoft (ARG)
                     ___ftpack
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
             ___ftneg (ARG)
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
           ___ftdiv
             ___altoft (ARG)
               ___ftpack
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
           ___ftge
           ___ftmul
             _Sensor_getSupplyVoltage (ARG)
               _ADC_GetConversionResult
               _ADC_IsConversionDone
               _ADC_SelectChannel
               _ADC_StartConversion
               _FVR_IsOutputReady
               _Sensor_peripheralSleep
               _Sensor_peripheralWake
               ___ftdiv
                 ___altoft (ARG)
                   ___ftpack
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
               ___lwtoft
                 ___ftpack
             ___altoft (ARG)
               ___ftpack
               ___ftpack (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
             ___ftneg (ARG)
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
           ___ftneg
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
             ___lwtoft (ARG)
               ___ftpack
           _eval_poly
             ___ftadd
               ___altoft (ARG)
                 ___ftpack
                 ___ftpack (ARG)
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftmul (ARG)
                 _Sensor_getSupplyVoltage (ARG)
                   _ADC_GetConversionResult
                   _ADC_IsConversionDone
                   _ADC_SelectChannel
                   _ADC_StartConversion
                   _FVR_IsOutputReady
                   _Sensor_peripheralSleep
                   _Sensor_peripheralWake
                   ___ftdiv
                     ___altoft (ARG)
                       ___ftpack
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___lwtoft (ARG)
                       ___ftpack
                   ___lwtoft
                     ___ftpack
                 ___altoft (ARG)
                   ___ftpack
                   ___ftpack (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___altoft (ARG)
                     ___ftpack
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftneg (ARG)
                   ___ftdiv (ARG)
                     ___altoft (ARG)
                       ___ftpack
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___lwtoft (ARG)
                       ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftneg (ARG)
                 ___ftdiv (ARG)
                   ___altoft (ARG)
                     ___ftpack
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
             ___ftmul
               _Sensor_getSupplyVoltage (ARG)
                 _ADC_GetConversionResult
                 _ADC_IsConversionDone
                 _ADC_SelectChannel
                 _ADC_StartConversion
                 _FVR_IsOutputReady
                 _Sensor_peripheralSleep
                 _Sensor_peripheralWake
                 ___ftdiv
                   ___altoft (ARG)
                     ___ftpack
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                 ___lwtoft
                   ___ftpack
               ___altoft (ARG)
                 ___ftpack
                 ___ftpack (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftneg (ARG)
                 ___ftdiv (ARG)
                   ___altoft (ARG)
                     ___ftpack
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
             ___wmul
           _fabs
             ___ftge
             ___ftneg
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
         _fabs (ARG)
           ___ftge
           ___ftneg
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
             ___lwtoft (ARG)
               ___ftpack
     _HMC5883L_Initialize
       _HMC5883L_I2C_ByteWrite
         _I2C_ByteWrite
           _I2C2_MasterWrite
             _I2C2_MasterTRBInsert
             _I2C2_MasterWriteTRBBuild
           _Timeout_hasExpired
           _Timeout_setTimeout
       _HMC5883L_SetGain
         _HMC5883L_I2C_ByteWrite
           _I2C_ByteWrite
             _I2C2_MasterWrite
               _I2C2_MasterTRBInsert
               _I2C2_MasterWriteTRBBuild
             _Timeout_hasExpired
             _Timeout_setTimeout
       _HMC5883L_SetMode
         _HMC5883L_I2C_ByteWrite
           _I2C_ByteWrite
             _I2C2_MasterWrite
               _I2C2_MasterTRBInsert
               _I2C2_MasterWriteTRBBuild
             _Timeout_hasExpired
             _Timeout_setTimeout
     _abs
   _HMC5883L_Initialize
     _HMC5883L_I2C_ByteWrite
       _I2C_ByteWrite
         _I2C2_MasterWrite
           _I2C2_MasterTRBInsert
           _I2C2_MasterWriteTRBBuild
         _Timeout_hasExpired
         _Timeout_setTimeout
     _HMC5883L_SetGain
       _HMC5883L_I2C_ByteWrite
         _I2C_ByteWrite
           _I2C2_MasterWrite
             _I2C2_MasterTRBInsert
             _I2C2_MasterWriteTRBBuild
           _Timeout_hasExpired
           _Timeout_setTimeout
     _HMC5883L_SetMode
       _HMC5883L_I2C_ByteWrite
         _I2C_ByteWrite
           _I2C2_MasterWrite
             _I2C2_MasterTRBInsert
             _I2C2_MasterWriteTRBBuild
           _Timeout_hasExpired
           _Timeout_setTimeout
   _SYSTEM_Initialize
     _ADC_Initialize
     _FVR_Initialize
     _I2C2_Initialize
     _OSCILLATOR_Initialize
     _PIN_MANAGER_Initialize
       _IOCAF2_SetInterruptHandler
     _SPI1_Initialize
     _TMR1_Initialize
       _TMR1_SetInterruptHandler
     _TMR2_Initialize
     _WDT_Initialize
   _Sensor_peripheralSleep
   _Wireless_init
     _RF_Init
     _RF_ResetStatusIRQ
       _RF_WriteRegister
         _SPI_WriteRead
           _SPI1_Exchange8bit
     _RF_WriteRegister
       _SPI_WriteRead
         _SPI1_Exchange8bit
     _RF_WriteRegisterData
       _SPI_WriteBuffer
         _SPI_WriteRead
           _SPI1_Exchange8bit
       _SPI_WriteRead
         _SPI1_Exchange8bit
   _Wireless_packageData
     _BMP_readTemperature (ARG)
       _BMP_init
         _Diag_setTempSensorHealth
         _I2C_BufferRead
           _I2C2_MasterRead
             _I2C2_MasterReadTRBBuild
             _I2C2_MasterTRBInsert
           _I2C2_MasterWrite
             _I2C2_MasterTRBInsert
             _I2C2_MasterWriteTRBBuild
           _Timeout_hasExpired
           _Timeout_setTimeout
         _I2C_ByteWrite
           _I2C2_MasterWrite
             _I2C2_MasterTRBInsert
             _I2C2_MasterWriteTRBBuild
           _Timeout_hasExpired
           _Timeout_setTimeout
       _Diag_getTempSensorHealth
       _Diag_setTempSensorHealth
       _HMC5883L_ReadBits
         _HMC5883L_I2C_BufferRead
           _I2C_BufferRead
             _I2C2_MasterRead
               _I2C2_MasterReadTRBBuild
               _I2C2_MasterTRBInsert
             _I2C2_MasterWrite
               _I2C2_MasterTRBInsert
               _I2C2_MasterWriteTRBBuild
             _Timeout_hasExpired
             _Timeout_setTimeout
       _I2C_BufferRead
         _I2C2_MasterRead
           _I2C2_MasterReadTRBBuild
           _I2C2_MasterTRBInsert
         _I2C2_MasterWrite
           _I2C2_MasterTRBInsert
           _I2C2_MasterWriteTRBBuild
         _Timeout_hasExpired
         _Timeout_setTimeout
       _I2C_ByteWrite
         _I2C2_MasterWrite
           _I2C2_MasterTRBInsert
           _I2C2_MasterWriteTRBBuild
         _Timeout_hasExpired
         _Timeout_setTimeout
       ___aldiv
       ___altoft
         ___ftpack
         ___ftpack (ARG)
       ___awtoft
         ___ftpack
       ___ftadd
         ___altoft (ARG)
           ___ftpack
           ___ftpack (ARG)
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
         ___ftmul (ARG)
           _Sensor_getSupplyVoltage (ARG)
             _ADC_GetConversionResult
             _ADC_IsConversionDone
             _ADC_SelectChannel
             _ADC_StartConversion
             _FVR_IsOutputReady
             _Sensor_peripheralSleep
             _Sensor_peripheralWake
             ___ftdiv
               ___altoft (ARG)
                 ___ftpack
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
             ___lwtoft
               ___ftpack
           ___altoft (ARG)
             ___ftpack
             ___ftpack (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
           ___ftneg (ARG)
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
             ___lwtoft (ARG)
               ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
         ___ftneg (ARG)
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
           ___lwtoft (ARG)
             ___ftpack
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
         ___wmul (ARG)
       ___ftdiv
         ___altoft (ARG)
           ___ftpack
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
       ___ftmul
         _Sensor_getSupplyVoltage (ARG)
           _ADC_GetConversionResult
           _ADC_IsConversionDone
           _ADC_SelectChannel
           _ADC_StartConversion
           _FVR_IsOutputReady
           _Sensor_peripheralSleep
           _Sensor_peripheralWake
           ___ftdiv
             ___altoft (ARG)
               ___ftpack
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
           ___lwtoft
             ___ftpack
         ___altoft (ARG)
           ___ftpack
           ___ftpack (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
         ___ftneg (ARG)
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
           ___lwtoft (ARG)
             ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
       ___ftneg
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
         ___lwtoft (ARG)
           ___ftpack
       ___fttol
         _Sensor_getSupplyVoltage (ARG)
           _ADC_GetConversionResult
           _ADC_IsConversionDone
           _ADC_SelectChannel
           _ADC_StartConversion
           _FVR_IsOutputReady
           _Sensor_peripheralSleep
           _Sensor_peripheralWake
           ___ftdiv
             ___altoft (ARG)
               ___ftpack
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
           ___lwtoft
             ___ftpack
         ___altoft (ARG)
           ___ftpack
           ___ftpack (ARG)
         ___ftadd (ARG)
           ___altoft (ARG)
             ___ftpack
             ___ftpack (ARG)
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
           ___ftmul (ARG)
             _Sensor_getSupplyVoltage (ARG)
               _ADC_GetConversionResult
               _ADC_IsConversionDone
               _ADC_SelectChannel
               _ADC_StartConversion
               _FVR_IsOutputReady
               _Sensor_peripheralSleep
               _Sensor_peripheralWake
               ___ftdiv
                 ___altoft (ARG)
                   ___ftpack
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
               ___lwtoft
                 ___ftpack
             ___altoft (ARG)
               ___ftpack
               ___ftpack (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
             ___ftneg (ARG)
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
           ___ftneg (ARG)
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
             ___lwtoft (ARG)
               ___ftpack
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
         ___ftmul (ARG)
           _Sensor_getSupplyVoltage (ARG)
             _ADC_GetConversionResult
             _ADC_IsConversionDone
             _ADC_SelectChannel
             _ADC_StartConversion
             _FVR_IsOutputReady
             _Sensor_peripheralSleep
             _Sensor_peripheralWake
             ___ftdiv
               ___altoft (ARG)
                 ___ftpack
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
             ___lwtoft
               ___ftpack
           ___altoft (ARG)
             ___ftpack
             ___ftpack (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
           ___ftneg (ARG)
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
             ___lwtoft (ARG)
               ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
       ___lwtoft
         ___ftpack
     _Diag_getSensorHealth (ARG)
     _Sensor_getSupplyVoltage (ARG)
       _ADC_GetConversionResult
       _ADC_IsConversionDone
       _ADC_SelectChannel
       _ADC_StartConversion
       _FVR_IsOutputReady
       _Sensor_peripheralSleep
       _Sensor_peripheralWake
       ___ftdiv
         ___altoft (ARG)
           ___ftpack
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
       ___lwtoft
         ___ftpack
     _Wireless_checkDataReceived (ARG)
       _DOOR_resetPos
       _DOOR_update
         _Storage_save
           _DATAEE_WriteByte
       _RF_DataIsReady
         _RF_ReadRegister
           _SPI_WriteRead
             _SPI1_Exchange8bit
       _RF_RxPayload
         _RF_ReadRegisterData
           _SPI_WriteRead
             _SPI1_Exchange8bit
           _SPI_WriteReadBuffer
             _SPI_WriteRead
               _SPI1_Exchange8bit
       ___lmul
     _Wireless_sendData (ARG)
       _RF_ResetStatusIRQ
         _RF_WriteRegister
           _SPI_WriteRead
             _SPI1_Exchange8bit
       _RF_TxPayload
         _RF_Write
           _SPI_WriteRead
             _SPI1_Exchange8bit
         _RF_WriteRegisterData
           _SPI_WriteBuffer
             _SPI_WriteRead
               _SPI1_Exchange8bit
           _SPI_WriteRead
             _SPI1_Exchange8bit
     ___bmul (ARG)
     ___ftmul (ARG)
       _Sensor_getSupplyVoltage (ARG)
         _ADC_GetConversionResult
         _ADC_IsConversionDone
         _ADC_SelectChannel
         _ADC_StartConversion
         _FVR_IsOutputReady
         _Sensor_peripheralSleep
         _Sensor_peripheralWake
         ___ftdiv
           ___altoft (ARG)
             ___ftpack
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
         ___lwtoft
           ___ftpack
       ___altoft (ARG)
         ___ftpack
         ___ftpack (ARG)
       ___awtoft (ARG)
         ___ftpack
       ___ftdiv (ARG)
         ___altoft (ARG)
           ___ftpack
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
       ___ftneg (ARG)
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
         ___lwtoft (ARG)
           ___ftpack
       ___ftpack (ARG)
       ___ftpack (ARG)
       ___lwtoft (ARG)
         ___ftpack
     ___fttol (ARG)
       _Sensor_getSupplyVoltage (ARG)
         _ADC_GetConversionResult
         _ADC_IsConversionDone
         _ADC_SelectChannel
         _ADC_StartConversion
         _FVR_IsOutputReady
         _Sensor_peripheralSleep
         _Sensor_peripheralWake
         ___ftdiv
           ___altoft (ARG)
             ___ftpack
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
         ___lwtoft
           ___ftpack
       ___altoft (ARG)
         ___ftpack
         ___ftpack (ARG)
       ___ftadd (ARG)
         ___altoft (ARG)
           ___ftpack
           ___ftpack (ARG)
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
         ___ftmul (ARG)
           _Sensor_getSupplyVoltage (ARG)
             _ADC_GetConversionResult
             _ADC_IsConversionDone
             _ADC_SelectChannel
             _ADC_StartConversion
             _FVR_IsOutputReady
             _Sensor_peripheralSleep
             _Sensor_peripheralWake
             ___ftdiv
               ___altoft (ARG)
                 ___ftpack
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
             ___lwtoft
               ___ftpack
           ___altoft (ARG)
             ___ftpack
             ___ftpack (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
           ___ftneg (ARG)
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
             ___lwtoft (ARG)
               ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
         ___ftneg (ARG)
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
           ___lwtoft (ARG)
             ___ftpack
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
         ___wmul (ARG)
       ___ftmul (ARG)
         _Sensor_getSupplyVoltage (ARG)
           _ADC_GetConversionResult
           _ADC_IsConversionDone
           _ADC_SelectChannel
           _ADC_StartConversion
           _FVR_IsOutputReady
           _Sensor_peripheralSleep
           _Sensor_peripheralWake
           ___ftdiv
             ___altoft (ARG)
               ___ftpack
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
           ___lwtoft
             ___ftpack
         ___altoft (ARG)
           ___ftpack
           ___ftpack (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
         ___ftneg (ARG)
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
           ___lwtoft (ARG)
             ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
     ___lldiv (ARG)
     _abs (ARG)
   _Wireless_sleep
     _RF_ReadRegisterData
       _SPI_WriteRead
         _SPI1_Exchange8bit
       _SPI_WriteReadBuffer
         _SPI_WriteRead
           _SPI1_Exchange8bit
     _RF_WriteRegister
       _SPI_WriteRead
         _SPI1_Exchange8bit
   _Wireless_wake
     _RF_ReadRegisterData
       _SPI_WriteRead
         _SPI1_Exchange8bit
       _SPI_WriteReadBuffer
         _SPI_WriteRead
           _SPI1_Exchange8bit
     _RF_WriteRegister
       _SPI_WriteRead
         _SPI1_Exchange8bit
   ___lldiv

 _INTERRUPT_InterruptManager (ROOT)
   _I2C2_BusCollisionISR
   _I2C2_ISR
     _I2C2_FunctionComplete
     _I2C2_Stop
   _PIN_MANAGER_IOC
     _IOCAF2_ISR
       Absolute function(Fake) *
       _IOCAF2_DefaultInterruptHandler *
   _TMR1_ISR
     _TMR1_CallBack
       Absolute function(Fake) *
       _TMR1_DefaultInterruptHandler *
       _Timeout_increment *

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             3F0      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      7       E       2      100.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50     4E      4E       5       97.5%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BANK1               50     3A      49       7       91.3%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BITBANK2            50      0       0       8        0.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BANK2               50      0      4C       9       95.0%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BITBANK3            50      0       0      10        0.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BANK3               50      A      41      11       81.3%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BITBANK4            50      0       0      12        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BANK4               50      0       0      13        0.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BITBANK5            50      0       0      14        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BANK5               50      0       0      15        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BITBANK6            50      0       0      16        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BANK6               50      0       0      17        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BITBANK7            50      0       0      18        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BANK7               50      0       0      19        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
ABS                  0      0     132      20        0.0%
BITBANK8            50      0       0      21        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BANK8               50      0       0      22        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITBANK9            50      0       0      23        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BANK9               50      0       0      24        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITBANK10           50      0       0      25        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BANK10              50      0       0      26        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITBANK11           50      0       0      27        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BANK11              50      0       0      28        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITBANK12           30      0       0      29        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BANK12              30      0       0      30        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
DATA                 0      0     132      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V1.45 build -152302408 
Symbol Table                                                                                   Sat Jan 13 00:56:39 2018

                             _Wireless_init 082E                           _SPI1_Exchange8bit 1E1C  
                             _Wireless_wake 111E                          ??_RF_WriteRegister 0024  
                              _RF_TxPayload 1055                                ___altoft@exp 002F  
                            _Wireless_sleep 1F9A                                           pc 0002  
              __end_of_Wireless_packageData 07DF                              ___bmul@product 0023  
                        ?_SPI1_Exchange8bit 0070                                 __CFG_CP$OFF 0000  
                     ?_I2C2_MasterTRBInsert 0021                               ___altoft@sign 0030  
                                        _b1 01AA                __size_of_RF_ReadRegisterData 001D  
                    __end_of_FVR_Initialize 1D77                         ___wmul@multiplicand 0023  
                       RF_TxPayload@payload 0030                           ??_SPI_WriteBuffer 0026  
           __size_of_Sensor_peripheralSleep 0005              I2C2_MasterReadTRBBuild@address 0024  
           HMC5883L_I2C_BufferRead@ReadAddr 003E                                ___ftadd@exp1 0065  
                              ___ftadd@exp2 0064                               _doorOpenAngle 00E7  
                               __CFG_LVP$ON 0000                                ___ftadd@sign 0063  
                                       l522 1E24                                         l358 155F  
                                       l618 070F                                         l498 11BB  
                                       _PR2 001B                            ??_RF_DataIsReady 0026  
                              __CFG_CPD$OFF 0000                             _timer1ReloadVal 007C  
                                       _abs 1E6C                         ??_SPI1_Exchange8bit 0021  
                              ?_DOOR_update 0027                             _TMR2_Initialize 1DD4  
                              __CFG_BORV$LO 0000                                         wreg 0009  
            HMC5883L_I2C_BufferRead@pBuffer 003C                                __CFG_IESO$ON 0000  
        __end_of_IOCAF2_SetInterruptHandler 1E00                  _IOCAF2_SetInterruptHandler 1DF7  
                             _globalCounter 0124                           _Wireless_sendData 1E7B  
                    HMC5883L_WriteBits@data 0046                      HMC5883L_WriteBits@mask 004B  
                    ?_Diag_setCompassHealth 0070                      HMC5883L_Initialize@tmp 0043  
                       _BMP_readTemperature 006F                      ??_RF_WriteRegisterData 002C  
                             _DOOR_resetPos 1000                                ___ftdiv@cntr 003B  
                          __end_of_I2C2_ISR 0E88                          ?_Wireless_sendData 0070  
                              ___ftdiv@sign 0040                      RF_ResetStatusIRQ@flags 0026  
                                      l1022 007E                                        l1023 008E  
                                      ?_abs 0021                                        l1312 1079  
                                      l1082 07D9                                        l1094 1786  
                                      l1512 1608                                        l1513 1610  
                                      l1505 15F5                                        l1371 08BA  
                                      l1711 0EF2                                        l1536 0CE8  
                                      l1712 0FC7                                        l6000 0B03  
                                      l6020 0B5A                                        l1596 0ACA  
                                      l6006 0B19                                        l6120 0FE5  
                                      l7000 0959                                        l6042 1702  
                                      l6106 0EAF                                        l6028 0B73  
                                      l6054 13D3                                        l6222 1782  
                                      l7006 0982                                        l6400 0AA1  
                                      l6216 175B                                        l6208 173A  
                                      l6128 1108                                        l6240 0354  
                                      l7016 09AE                                        l7040 14DB  
                                      l6410 0ACE                                        l6402 0AB2  
                                      l7202 06FE                                        l6228 1784  
                                      l6252 037C                                        l7052 1506  
                                      l7204 0707                                        l5630 1551  
                                      l5710 158B                                        l6414 0ADC  
                                      l6262 03A1                                        l7038 14CD  
                                      l5632 1557                                        l5720 15AF  
                                      l5800 0C71                                        l6408 0AC0  
                                      l6280 049F                                        l6248 0374  
                                      l6352 126E                                        l7048 14FB  
                                      l5626 154A                                        l5650 1209  
                                      l5706 1580                                        l5810 0C87  
                                      l6194 1714                                        l6266 03A9  
                                      l6602 0A47                                        l6530 134D  
                                      l6338 10DA                                        l7170 0652  
                                      l7162 0629                                        l7146 05D5  
                                      l5644 1233                                        l5732 15C0  
                                      l5724 15BA                                        l5716 1591  
                                      l5740 15CB                                        l6372 1168  
                                      l5804 0C78                                        l6284 04A7  
                                      l6356 1278                                        l7164 0631  
                                      l5662 146A                                        l5830 0CBE  
                                      l5822 0CA1                                        l6382 0A68  
                                      l6294 052F                                        l6278 047E  
                                      l6720 0914                                        l5744 15D2  
                                      l5840 0CDA                                        l5832 0CC3  
                                      l5920 0C19                                        l5912 0C05  
                                      l6536 135A                                        l6640 17A2  
                                      l7192 06BD                                        l7168 063A  
                                      l6706 08DB                                        l5754 15FA  
                                      l5746 15DC                                        l5850 0D0C  
                                      l5842 0CE4                                        l5834 0CC7  
                                      l6650 17F2                                        l5684 12BE  
                                      l6564 165B                                        l6556 163F  
                                      l6724 0922                                        l6716 0909  
                                      l6708 08E9                                        l5756 1602  
                                      l5748 15E1                                        l6740 1332  
                                      l5860 0D27                                        l5828 0CB4  
                                      l5924 0C21                                        l5908 0BFD  
                                      l6644 17AF                                        l7188 06AD  
                                      l5846 0CFA                                        l6662 13F8  
                                      l5782 1073                                        l6654 17F8  
                                      l5696 12CF                                        l5688 12C9  
                                      l5872 12FE                                        l6680 1EF9  
                                      l6738 1322                                        l5890 0BAC  
                                      l5868 12E8                                        l6676 1EF3  
                                      l6934 00DE                                        l6926 00BD  
                                      l5896 0BC2                                        l6698 08CB  
                                      l5986 103C                                        l5978 07E2  
                                      l6990 0943                                        l6978 0934  
                __size_of_HMC5883L_ReadBits 0046                                        _LATA 010C  
                                      _LATB 010D                                        _LATC 010E  
                                      u5205 1466                                        u6005 0B74  
                                      u6060 13C8                                        u6044 13AA  
                                      u6045 13A9                                        u7005 00F7  
                                      u6205 1780                                        u6054 13B6  
                                      u6055 13B5                                        u5415 1617  
                                      u5335 15D7                                        u7015 0105  
                                      u6080 0EC9                                        u6065 13C6  
                                      u6145 1F71                                        u6090 0ECA  
                                      u5355 15F0                                        u7115 14D0  
                                      u6405 0AA2                                        u5445 107A  
                                      u6325 1279                                        u5375 15FD  
                                      u5455 107F                                        u6335 1280  
                                      u7135 14DC                                        u5625 0CC8  
                                      u7145 14F0                                        u6435 0AC1  
                                      u6195 1759                                        u7075 097C  
                                      u7155 14FC                                        u5900 14A1  
                                      u5565 0CA2                                        u5655 0CDB  
                                      u6375 0A70                                        u7095 09A8  
                                      u5825 0C22                                        u5905 149F  
                                      u6715 08EA                                        u5595 0CB5  
                                      u5835 0C28                                        u5755 0BCE  
                                      u6725 08FE                                        u5765 0BDE  
                                      u6735 090A                                        u7375 0650  
                                      u5785 0C06                                        u5795 0C0C  
                                      u7707 1FFA                                        u7627 0577  
                                      u5884 1487                                        u5965 0B2B  
                                      u5885 1486                                        u7717 0834  
                                      u7637 0595                                        u5894 1493  
                                      u6695 08DE                                        u6775 1327  
                                      u5975 0B3B                                        u5895 1492  
                                      u7727 10C2                                        u7647 05E8  
                                      u5985 0B5B                                        u7737 1140  
                                      u7657 06A6                                        u5995 0B6A  
                                      u7747 1146                                        u7667 1137  
                                      u7757 1153                                        u7677 106B  
                                      u7767 1159                                        u7687 1EA6  
                                      u7777 1F52                                        u7697 10FC  
                                      u7787 1718                                        _TMR2 001A  
                                      _WPUA 020C                                        _WPUB 020D  
                                      _WPUC 020E                                _Storage_load 13D5  
                              __CFG_WRT$OFF 0000                                _Storage_save 1FCC  
                             __CFG_FCMEN$ON 0000                                        abs@a 0021  
                                      _fabs 11C5                                        _data 01C2  
                                      _atan 0E88                                        _main 0557  
                        _Timeout_hasExpired 141F                                        _curr 0120  
                              ___ftpack@arg 0021                                        _var1 0132  
                                      _var2 012F                                ___ftpack@exp 0024  
                           __end_of_RF_Init 1D7F                                        fsr0h 0005  
                                      fsr1h 0007                                        indf0 0000  
                                      fsr0l 0004                                        indf1 0001  
                                      fsr1l 0006                                        btemp 007E  
               I2C2_MasterReadTRBBuild@ptrb 0028                               __CFG_BOREN$ON 0000  
                       ??_Wireless_sendData 0031                 RF_WriteRegisterData@bufSize 002B  
                        __size_of_DOOR_init 0009                                        start 0037  
                         _Timeout_increment 1E12                   __end_of_SPI1_Exchange8bit 1E28  
                  ?_Sensor_getSupplyVoltage 0041            __end_of_Diag_getTempSensorHealth 1D6D  
          __end_of_Diag_setTempSensorHealth 1DC4                      __end_of_Wireless_sleep 1FB2  
            __size_of_Diag_getCompassHealth 0003                   HMC5883L_ReadBits@bitStart 0044  
                            ?_Wireless_init 0070                  ??_TMR1_SetInterruptHandler 0023  
                            ?_Wireless_wake 0070                               _SPI_WriteRead 1D8F  
             __end_of_Diag_getCompassHealth 1D70                           ___bmul@multiplier 0024  
                             __CFG_MCLRE$ON 0000                                ___ftmul@cntr 0057  
                        ?_Timeout_increment 0070                                ___ftmul@sign 0058  
                       ?_Timeout_hasExpired 0070                        ?_BMP_readTemperature 00A6  
                              ___fttol@exp1 00A5                                       ??_abs 0023  
                 __size_of_DATAEE_WriteByte 0023                                ___fttol@lval 00A1  
                          __end_of_BMP_init 169B                                  _i2c2_state 0079  
                          __end_of_DOOR_run 09B1                             ?_FVR_Initialize 0070  
            __size_of_OSCILLATOR_Initialize 0007                         __size_of_IOCAF2_ISR 000D  
             __end_of_OSCILLATOR_Initialize 1DAE                         ??_Timeout_increment 0070  
                   _I2C2_MasterReadTRBBuild 0802                                       ?_fabs 0044  
                           __end_of___aldiv 092B                                       ?_atan 00A3  
                                     ?_main 0070                             __end_of___ftadd 0D3F  
                         __end_of_I2C2_Stop 10A9                             __end_of___ftdiv 0B95  
                           __end_of___ftneg 1DEE                             __end_of___lldiv 150F  
                           __end_of___ftmul 0C49                                       _T1CON 0018  
                           __end_of___ftsub 111E                             __end_of___fttol 0AEC  
                                     _T2CON 001C                                 DOOR_run@dir 00D6  
                                     i1l300 0DB9              __size_of_I2C2_FunctionComplete 0011  
                                     i1l310 0E01                                       i1l161 0032  
                                     i1l153 0015                                       i1l322 0E69  
                                     i1l314 0E21                                       i1l155 0021  
                                     i1l317 0E36                                       i1l157 002D  
                                     i1l318 0E44                                       i1l329 1EB8  
                                     i1l293 0D85                                       i1l294 0D8C  
                                     i1l288 0D57                                       i1l299 0DAD  
             __end_of_I2C2_FunctionComplete 1EBB                   __end_of_Wireless_sendData 1E8A  
                                     _TMR1H 0017                                       _TMR1L 0016  
                                     _TRISA 008C                                       _TRISB 008D  
                                     _TRISC 008E            __size_of_ADC_GetConversionResult 0009  
                       ___lmul@multiplicand 0025                        ??_Timeout_hasExpired 0021  
                          __end_of_TMR1_ISR 1DE5                                       _cTemp 012C  
                                     _adc_p 01A0                                       _adc_t 0128  
                            ?_DOOR_resetPos 0070                             _DATAEE_ReadByte 1E35  
                    __size_of_I2C_ByteWrite 003C                                       _atan2 033C  
                             ___awtoft@sign 002E                     __end_of_PIN_MANAGER_IOC 1D8F  
                                     fabs@d 0044                              _WDT_Initialize 1D77  
                                     _errno 0138                __size_of_HMC5883L_GetHeading 0077  
                                     atan@f 00A3                                       atan@x 00A9  
                                     atan@y 00A6                               ___ftpack@sign 0025  
              I2C2_MasterReadTRBBuild@pdata 0021                        _Diag_getSensorHealth 1EDE  
                   __end_of_TMR1_Initialize 1F9A                            __end_of_RF_Write 1EAA  
                                     pclath 000A                      _Sensor_peripheralSleep 1D7F  
                      RF_DataIsReady@status 0028                   __end_of_Timeout_increment 1E1C  
                                     status 0003                                       wtemp0 007E  
                  __size_of_SPI1_Initialize 0007                              ?_SPI_WriteRead 0070  
                           ?_Wireless_sleep 0070                           ??_I2C2_MasterRead 002F  
                   RF_WriteRegisterData@buf 0029                     RF_WriteRegisterData@reg 002D  
                     ??_BMP_readTemperature 00A9                         RF_WriteRegister@reg 0024  
                         ??_I2C2_Initialize 0021                             __initialization 0039  
                       RF_WriteRegister@val 0023                  Wireless_packageData@status 00C6  
                              __end_of_fabs 11E8                                __end_of_atan 1000  
                              __end_of_main 071F                      ??_I2C2_MasterTRBInsert 0023  
                  HMC5883L_WriteBits@length 0045                     __end_of_TMR2_Initialize 1DDC  
               ?_INTERRUPT_InterruptManager 0070                                      ??_fabs 0047  
          __end_of_I2C2_MasterWriteTRBBuild 11A2                                      ??_atan 006D  
                                    ??_main 00D8                               ___fttol@sign1 00A0  
                               _i2c2_object 00DA                 __size_of_HMC5883L_WriteBits 0050  
                            __CFG_PLLEN$OFF 0000                           __end_of_DOOR_init 1DF7  
                    __end_of_WDT_Initialize 1D7B                     __size_of_I2C_BufferRead 005E  
                       HMC5883L_SetGain@tmp 0041               __size_of_ADC_IsConversionDone 0007  
            ??_HMC5883L_GetCompassDirection 006E                 Diag_setCompassHealth@health 0022  
                                    ?_atan2 00B3                                      _ADCON0 009D  
                                    _ADCON1 009E                          _Timeout_setTimeout 1EBB  
                          __end_of___altoft 134A                                   ??_RF_Init 0021  
                                    _ADRESH 009C                                      _EEADRH 0192  
                                    _ADRESL 009B                                      _EEADRL 0191  
                                    i1S7398 1800                                      _EEDATH 0194  
                                    _EEDATL 0193                                      _EECON2 0196  
                       I2C_ByteWrite@status 0038                       ?_Diag_getSensorHealth 0070  
                          __end_of___awtoft 117F                                      _ANSELA 018C  
                                    _ANSELB 018D                                      _ANSELC 018E  
                          __end_of___ftpack 1627                                      _BORCON 0116  
                                    _T1GCON 0019                        _Wireless_packageData 071F  
                  ??_HMC5883L_I2C_ByteWrite 003B                __end_of_I2C2_BusCollisionISR 0802  
                                    i1l4702 1E32                                      i1l6522 10A7  
                                    i1l6802 0DD6                                      i1l6820 0DF2  
                                    i1l6842 0E28                                      i1l6834 0E0F  
                                    i1l6826 0DFC                                      i1l6770 0D79  
                                    i1l6870 0E6D                                      i1l6854 0E4A  
                                    i1l6782 0D98                                      i1l6872 0E70  
                                    i1l6880 0E7D                                      i1l6874 0E74  
                                    i1l6858 0E51                                      i1l6788 0DA8  
                                    _FVRCON 0117             __end_of_Sensor_getSupplyVoltage 138F  
                  _BMP_readTemperature$2611 00B5                            __end_of___lwtoft 1F2A  
                                    _OSCCON 0099                                      _WDTCON 0097  
                       HMC5883L_SetMode@tmp 0041                         ?_Timeout_setTimeout 0021  
              __size_of_HMC5883L_Initialize 0016                       I2C2_MasterRead@length 002B  
                     SPI1_Exchange8bit@data 0021                             ??_Wireless_init 002E  
                           ??_Wireless_wake 002F                         _SPI_WriteReadBuffer 07DF  
                __size_of_SPI1_Exchange8bit 000C                              __CFG_PWRTE$OFF 0000  
                HMC5883L_ReadBits@slaveAddr 004A                            Wireless_wake@reg 0030  
                          SPI_WriteBuffer@i 0028        __end_of_TMR1_DefaultInterruptHandler 0004  
     __size_of_TMR1_DefaultInterruptHandler 0001                _TMR1_DefaultInterruptHandler 0003  
                             _I2C_ByteWrite 1295                                      ___bmul 1EF0  
                      HMC5883L_ReadBits@tmp 004C                                      ___ftge 12D1  
                     RF_DataIsReady@channel 0027                                      ___lmul 1265  
                                 ??___aldiv 0029                                      ___wmul 1070  
                                    _dig_P1 014E                                      _dig_P2 014C  
                                    _dig_P3 014A                                      _dig_P4 0148  
                                    _dig_P5 0146                                      _dig_P6 0144  
                                    _dig_P7 0142                                      _dig_P8 0140  
                                    _dig_P9 013E                                      _dig_T1 0156  
                                    _dig_T2 0154                                      _dig_T3 0152  
                                    _dig_T4 0150                                   ??___ftadd 005F  
                            _p_i2c2_current 0077                              __CFG_STVREN$ON 0000  
                 ??_I2C2_MasterReadTRBBuild 0026                                   ??___ftdiv 0037  
                                 ??___ftneg 0044                                   ??___lldiv 0029  
                          SPI_WriteRead@val 0022                                   ??___ftmul 004F  
                                 ??___ftsub 006C                                   ??___fttol 006A  
                    RF_ReadRegisterData@buf 002A                    _Diag_getTempSensorHealth 1D6A  
                    RF_ReadRegisterData@reg 002E                    _Diag_setTempSensorHealth 1DBC  
            __size_of_Sensor_peripheralWake 0005                                      atan2@v 00C5  
                                    atan2@x 00B6                                      atan2@y 00B3  
                                    _t_fine 01A7                                   ?_I2C2_ISR 0070  
             __end_of_Sensor_peripheralWake 1D89                    I2C2_Stop@completion_code 0072  
                              _HMC5883Lmode 00E2                        ??_Timeout_setTimeout 0023  
                   __end_of_DATAEE_ReadByte 1E42               I2C2_MasterReadTRBBuild@length 0023  
                     ___ftmul@f3_as_product 0054                        ?_SPI_WriteReadBuffer 0023  
                __size_of_Wireless_sendData 000F                             ??_DOOR_resetPos 0021  
                   RF_TxPayload@payloadSize 002E                   __size_of_HMC5883L_SetGain 0017  
                           ?_WDT_Initialize 0070                   __size_of_HMC5883L_SetMode 001A  
                        _sensorUpdatePeriod 0162                        __size_of_DOOR_update 0016  
  TMR1_SetInterruptHandler@InterruptHandler 0021  IOCAF2_SetInterruptHandler@InterruptHandler 0021  
                      DOOR_update@openAngle 0029                            ?_PIN_MANAGER_IOC 0070  
                     ?_Wireless_packageData 00BA                                ??_IOCAF2_ISR 0070  
                  HMC5883L_ReadBits@regAddr 0043                       __end_of_TMR1_CallBack 1E50  
                       _RF_ReadRegisterData 10E3                            ?_TMR1_Initialize 0070  
                         _SYSTEM_Initialize 101F                     __end_of__initialization 006B  
                                ___altoft@c 0029                  __size_of_Timeout_increment 000A  
                                 ?_BMP_init 0070                                   ?_DOOR_run 0070  
                                ___ftadd@f1 0059                                  ___ftadd@f2 005C  
                           ??_SPI_WriteRead 0022                                  ___ftge@ff1 0021  
                                ___ftge@ff2 0024                          ?_SYSTEM_Initialize 0070  
                              eval_poly@res 00A0                                  ___ftdiv@f1 0034  
                                ___ftdiv@f2 0031                                  ___ftdiv@f3 003C  
                         ?_I2C2_MasterWrite 0028                             _SPI_WriteBuffer 103A  
                                ___ftneg@f1 0041                                  ___awtoft@c 0029  
                       ___bmul@multiplicand 0021                              ?_I2C_ByteWrite 002F  
                                ___ftmul@f1 0049                                  ___ftmul@f2 004C  
                                 BMP_init@t 003F                          ??_I2C2_MasterWrite 002C  
                                ___ftsub@f1 0069                                  ___ftsub@f2 0066  
                                ___fttol@f1 0066                __size_of_ADC_StartConversion 0003  
                            __pcstackCOMMON 0070                   Wireless_packageData@tempC 00BB  
               I2C_BufferRead@NumByteToRead 0034                                __pidataBANK1 07FF  
                              __pidataBANK2 1DA1                         ??_SYSTEM_Initialize 0023  
                    I2C_ByteWrite@WriteAddr 0030                               __end_of_atan2 0557  
                                 ?_TMR1_ISR 0070               ?_TMR1_DefaultInterruptHandler 0070  
                          _DATAEE_WriteByte 11A2                           ??_SPI1_Initialize 0021  
                      ?_RF_ReadRegisterData 002A                              _i2c2_trb_count 00E5  
                                ??_I2C2_ISR 0073                            ?_TMR2_Initialize 0070  
                                 ?_RF_Write 0070                          __end_of_IOCAF2_ISR 1E35  
                                ___lwtoft@c 0029                       ??_SPI_WriteReadBuffer 0025  
                   _ADC_GetConversionResult 1E09                     ??_Diag_setCompassHealth 0021  
                 __size_of_RF_WriteRegister 0016                                  _atan2$2612 00B9  
                                _atan2$2613 00BC                                  _atan2$2614 00C2  
                                _atan2$2615 00BF                              _OPTION_REGbits 0095  
                  ?_HMC5883L_I2C_BufferRead 003C                      Storage_save@closeAngle 0024  
                  _I2C2_MasterWriteTRBBuild 117F                 ?_IOCAF2_SetInterruptHandler 0021  
          ??_IOCAF2_DefaultInterruptHandler 0070             ?_IOCAF2_DefaultInterruptHandler 0070  
                    ??_Diag_getSensorHealth 0021                                     ??_atan2 006E  
              I2C2_MasterWriteTRBBuild@ptrb 0027                   __end_of_SYSTEM_Initialize 103A  
                  __size_of_RF_ReadRegister 001A                                  __pbssBANK1 00DA  
                                __pbssBANK2 0120                                  __pbssBANK3 01A0  
                        __size_of_eval_poly 0074             __size_of_HMC5883L_I2C_ByteWrite 000E  
                                ??_BMP_init 003C                                  ??_DOOR_run 00D3  
                                __pnvCOMMON 007C                    __size_of_HMC5883L_WakeUp 000E  
                      I2C_ByteWrite@pBuffer 002F                   SPI_WriteReadBuffer@bufOut 0028  
                      HMC5883L_SetGain@gain 0040                            ??_FVR_Initialize 0021  
                                __pmaintext 0557                       SPI_WriteBuffer@bufOut 0023  
                      SPI_WriteReadBuffer@i 0029                                     ?___bmul 0021  
                                   ?___ftge 0021                                     ?___lmul 0021  
                                   ?___wmul 0021                     Diag_getSensorHealth@var 0022  
                                ??_TMR1_ISR 0070                         _HMC5883L_GetHeading 170F  
                     ??_RF_ReadRegisterData 002C                                  __pintentry 0004  
                                 ?___altoft 0029                              ___lmul@product 0029  
                            main@doorStatus 01E0                                   ?___awtoft 0029  
                                 ?___ftpack 0021                                     _APFCON0 011D  
                                   _APFCON1 011E                        _I2C2_BusCollisionISR 0801  
                                ??_RF_Write 0023                     __size_of_ADC_Initialize 0008  
                                 ?___lwtoft 0029            __size_of_Sensor_getSupplyVoltage 0045  
                          ?_DATAEE_ReadByte 0070              Wireless_checkDataReceived@data 0037  
              ??_Wireless_checkDataReceived 0033                              _I2C_BufferRead 1564  
         I2C2_ISR@i2c_10bit_address_restart 00E3                      I2C2_MasterRead@address 002C  
                                 _I2C2_Stop 108C                    SPI_WriteReadBuffer@bufIn 0023  
                                   _OSCTUNE 0098                     ?_Sensor_peripheralSleep 0070  
                                   _SSP1ADD 0212                                     _SSP2ADD 021A  
                                   _SSP1BUF 0211                      ??_Wireless_packageData 00BE  
                                   _SSP2BUF 0219                      I2C_ByteWrite@slaveAddr 0035  
                      ?_HMC5883L_GetHeading 0070                                     _RF_Init 1D7B  
                           _I2C2_MasterRead 11E8                     __end_of_SPI_WriteBuffer 1055  
                          main@doorOpenTime 01DC                             _I2C2_Initialize 1004  
             __size_of_RF_WriteRegisterData 001D                            ??_Wireless_sleep 002F  
                      DATAEE_WriteByte@bAdd 0022                      I2C2_MasterRead@trBlock 01D2  
                           ??_I2C_ByteWrite 0031                           Wireless_sleep@reg 0030  
                     HMC5883L_ReadBits@data 0046                                     ___aldiv 08A9  
                           __size_of___bmul 0012                       HMC5883L_ReadBits@mask 004B  
                           __size_of___ftge 003C                             __size_of___lmul 0030  
                                   ___ftadd 0C49                                     ___ftdiv 0AEC  
                     _Diag_getCompassHealth 1D6D                                     ___ftneg 1DE5  
                                   ___lldiv 14BC                             __size_of___wmul 001C  
                                   ___ftmul 0B95                                     ___ftsub 1100  
                                   ___fttol 0A4D                      _HMC5883L_I2C_ByteWrite 1E50  
                                ??___altoft 002D                   ??_ADC_GetConversionResult 0023  
                 HMC5883L_GetHeading@status 0052             __end_of_HMC5883L_I2C_BufferRead 1EDE  
                     ?_I2C2_BusCollisionISR 0070                                  ??___awtoft 002C  
                                ??___ftpack 0026                           __end_of_eval_poly 170F  
                                   _heading 01CA                   I2C2_MasterTRBInsert@count 0024  
                                   __ptext1 14BC                                     __ptext2 111E  
                                   __ptext3 1F9A                                     __ptext4 071F  
                                   __ptext5 1EF0                                     __ptext6 1E7B  
                                   __ptext7 1055                                     __ptext8 1E9A  
                                   __ptext9 1786                   I2C2_MasterTRBInsert@pflag 0022  
                   Wireless_packageData@var 00C5                      __end_of_I2C_BufferRead 15C2  
                                ??___lwtoft 002C              ??_TMR1_DefaultInterruptHandler 0070  
                       _HMC5883L_Initialize 1F2A                                   _T1CONbits 0018  
                     _OSCILLATOR_Initialize 1DA7                                   _T2CONbits 001C  
                              __size_of_abs 000F                             atan@val_squared 00AD  
                __end_ofWireless_init@TADDR 183E              __end_of_Sensor_peripheralSleep 1D84  
         __size_of_TMR1_SetInterruptHandler 0009                            ___aldiv@dividend 0025  
                          _HMC5883L_SetGain 1F6C                    ??_PIN_MANAGER_Initialize 0023  
                 ?_TMR1_SetInterruptHandler 0021                                   _IOCAFbits 0393  
                                   atan@val 00B0                 main@doorClosedUpdateCounter 01D7  
                          _HMC5883L_SetMode 1FB2                                   _IOCANbits 0392  
                                ?_I2C2_Stop 0070                                   _IOCAPbits 0391  
                     _I2C2_FunctionComplete 1EAA                                     _timeOut 013A  
               __size_of_Timeout_hasExpired 004D                       ??_HMC5883L_GetHeading 004E  
                                 _DOOR_init 1DEE                  __size_of_SYSTEM_Initialize 001B  
                                   clrloop0 1D9C                        end_of_initialization 006B  
                   __size_of_RF_DataIsReady 001D                 __end_of_BMP_readTemperature 033C  
                      ?_HMC5883L_Initialize 0070                  ??_Diag_getTempSensorHealth 0021  
                ??_Diag_setTempSensorHealth 0021                           _FVR_IsOutputReady 1D95  
                         ??_RF_ReadRegister 0023                             ___lldiv@divisor 0021  
              __end_of_ADC_IsConversionDone 1DBC                             ___lldiv@counter 002E  
                        ?_FVR_IsOutputReady 0070                       I2C2_MasterWrite@pdata 002E  
                        _p_i2c2_trb_current 0078                       I2C2_MasterWrite@pflag 002B  
                          ___aldiv@quotient 002C                      I2C2_ISR@i2c_bytes_left 00E4  
                         ??_HMC5883L_WakeUp 004D               __size_of_I2C2_MasterTRBInsert 0055  
                __end_of_HMC5883L_WriteBits 14BC                         ??_FVR_IsOutputReady 0021  
                Sensor_getSupplyVoltage@res 0047                            ??_WDT_Initialize 0021  
                                 _PORTCbits 000E                             ?_I2C_BufferRead 0031  
                         __size_of_I2C2_ISR 0149                            _RF_WriteRegister 1F40  
    HMC5883L_GetCompassDirection@rawSamples 00CA                     __end_of_I2C2_MasterRead 1210  
                          __CFG_FOSC$INTOSC 0000                     __end_of_I2C2_Initialize 101F  
                       _ADC_StartConversion 1D70                                  ?_DOOR_init 0070  
                  __end_of_DATAEE_WriteByte 11C5                            ?_SPI_WriteBuffer 0023  
                 __end_of_FVR_IsOutputReady 1D9B                       ??_HMC5883L_Initialize 0042  
                     HMC5883L_WriteBits@tmp 004C                                 ___ftdiv@exp 003F  
                           _SPI1_Initialize 1DAE                 HMC5883L_WriteBits@slaveAddr 004A  
                RF_ReadRegisterData@bufSize 002B                HMC5883L_TestConnection@F3560 0135  
                             ?_RF_RxPayload 002F             HMC5883L_I2C_ByteWrite@WriteAddr 003A  
                         __size_of_BMP_init 0074                Wireless_packageData@openTime 00BA  
                         __size_of_DOOR_run 0086                       __end_of_Wireless_init 08A9  
                     __end_of_Wireless_wake 113D                                 ___ftmul@exp 0053  
                      ?_ADC_StartConversion 0070                               ?_RF_TxPayload 002E  
                    ?_Diag_getCompassHealth 0070        __end_of_HMC5883L_GetCompassDirection 0A4D  
     __size_of_HMC5883L_GetCompassDirection 009C                _HMC5883L_GetCompassDirection 09B1  
                    ??_I2C2_BusCollisionISR 0070                              __end_of___bmul 1F02  
                            __end_of___ftge 130D                              __end_of___lmul 1295  
                ??_I2C2_MasterWriteTRBBuild 0025                              __end_of___wmul 108C  
                         __size_of_TMR1_ISR 0009                     _Sensor_getSupplyVoltage 134A  
                            _ADC_Initialize 1DCC                      ?_OSCILLATOR_Initialize 0070  
        __end_of_Wireless_checkDataReceived 1800                  _Wireless_checkDataReceived 1786  
               __size_of_Timeout_setTimeout 0011                   __size_of_I2C2_MasterWrite 002A  
                     _Sensor_peripheralWake 1D84                               ??_DOOR_update 0028  
                         __size_of_RF_Write 0010                      ?_I2C2_FunctionComplete 0070  
                       start_initialization 0039                     RF_RxPayload@payloadSize 002F  
                                eval_poly@d 0069              __size_of_Diag_setCompassHealth 0008  
                                eval_poly@n 006B                                  eval_poly@x 0066  
             __end_of_Diag_setCompassHealth 1DCC                                 ??_I2C2_Stop 0070  
           __size_of_PIN_MANAGER_Initialize 002B                                 __end_of_abs 1E7B  
                     __end_of_DOOR_resetPos 1004                               ?_Storage_load 0024  
                             ?_Storage_save 0024               HMC5883L_GetCompassDirection@h 00D0  
          __size_of_HMC5883L_I2C_BufferRead 0012                              ??_RF_RxPayload 0030  
             HMC5883L_I2C_ByteWrite@pBuffer 0039                         DATAEE_ReadByte@bAdd 0021  
           I2C2_MasterWriteTRBBuild@address 0023                                 _addressSize 00E8  
                  __size_of_PIN_MANAGER_IOC 0006                       __end_of_SPI_WriteRead 1D95  
                      I2C2_MasterRead@pdata 0029      __end_of_IOCAF2_DefaultInterruptHandler 0003  
   __size_of_IOCAF2_DefaultInterruptHandler 0001              _IOCAF2_DefaultInterruptHandler 0002  
                  ?_I2C2_MasterReadTRBBuild 0021              Sensor_getSupplyVoltage@voltage 0044  
                      I2C2_MasterRead@pflag 002E                                 RF_Write@val 0023  
                            ??_RF_TxPayload 002F                       ??_ADC_StartConversion 0021  
                  __size_of_TMR1_Initialize 0017                                    ??___bmul 0022  
                                  ??___ftge 0027                                    ??___lmul 0029  
               __end_of_SPI_WriteReadBuffer 07FF                                    ??___wmul 0025  
             I2C2_MasterWriteTRBBuild@pdata 0021                        I2C2_ISR@pi2c_buf_ptr 00DF  
                    __end_of_ADC_Initialize 1DD4               ?_HMC5883L_GetCompassDirection 00C8  
                               __pdataBANK1 00E8                                 __pdataBANK2 0162  
                    __size_of_TMR1_CallBack 000E                           __size_of___altoft 003D  
                   HMC5883L_ReadBits@length 0045             HMC5883L_I2C_ByteWrite@slaveAddr 003D  
                         __size_of___awtoft 0022                           __size_of___ftpack 0065  
                          ?_I2C2_MasterRead 0029                                 __pbssCOMMON 0077  
                          ?_I2C2_Initialize 0070                                   ___latbits 0002  
                         __size_of___lwtoft 0015                               __pcstackBANK0 0020  
                             __pcstackBANK1 00A0                               __pcstackBANK3 01D7  
                      _ADC_IsConversionDone 1DB5                    __size_of_TMR2_Initialize 0008  
                   __end_of_SPI1_Initialize 1DB5                                 ??_DOOR_init 0028  
                                  ?_RF_Init 0070                              ??_Storage_load 0025  
                             _i2c2_tr_queue 015E                              ??_Storage_save 0025  
             __size_of_Diag_getSensorHealth 0012           Wireless_checkDataReceived@channel 003B  
                       __end_of_DOOR_update 1F6C                              _RF_DataIsReady 10C6  
                __size_of_FVR_IsOutputReady 0006                  SPI_WriteReadBuffer@bufSize 0024  
                                 __pnvBANK2 0168                 __end_of_RF_ReadRegisterData 1100  
                 BMP_readTemperature@status 00B8        HMC5883L_I2C_BufferRead@NumByteToRead 003F  
                  __end_of_HMC5883L_SetGain 1F83                      _PIN_MANAGER_Initialize 123A  
                  __end_of_HMC5883L_SetMode 1FCC                     ?_HMC5883L_I2C_ByteWrite 0039  
                         _RF_ResetStatusIRQ 113D                      SPI_WriteBuffer@bufSize 0025  
                         _ADC_SelectChannel 1E8A                    Wireless_sendData@payload 0032  
          __end_of_TMR1_SetInterruptHandler 1E09                                    ?___aldiv 0021  
                 ??_Sensor_getSupplyVoltage 0044                                   __ptext100 0003  
                                 __ptext101 1D89                                   __ptext102 1E28  
                                 __ptext103 0002                                   __ptext104 0D3F  
                                 __ptext105 108C                                   __ptext106 1EAA  
                                 __ptext107 0801                                    ?___ftadd 0059  
                                  ?___ftdiv 0031                                    ?___ftneg 0041  
                                  ?___lldiv 0021                                    ?___ftmul 0049  
                                  ?___ftsub 0066                                    ?___fttol 0066  
                        ?_RF_ResetStatusIRQ 0070                             ?_ADC_Initialize 0070  
              __end_of_RF_WriteRegisterData 10C6                          ?_ADC_SelectChannel 0070  
                                  _I2C2_ISR 0D3F                ??_INTERRUPT_InterruptManager 0020  
                    ?_Sensor_peripheralWake 0070                                   __pswtext1 1800  
                     Storage_save@openAngle 0026                                   _doorState 00E1  
                       ??_RF_ResetStatusIRQ 0025                         ??_ADC_SelectChannel 0021  
                                 _eval_poly 169B                       ?_ADC_IsConversionDone 0070  
                   I2C_BufferRead@slaveAddr 003A                            __CFG_WDTE$NSLEEP 0000  
                           _RF_ReadRegister 1FE6                      __end_of_RF_DataIsReady 10E3  
                            __size_of_atan2 021B                    __size_of_DATAEE_ReadByte 000D  
                    Wireless_packageData@t1 00C9                      Wireless_packageData@t2 00C7  
             __size_of_Wireless_packageData 00C0             __end_of_I2C2_MasterReadTRBBuild 082E  
                             _TMR1_CallBack 1E42                             ___aldiv@divisor 0021  
                           _HMC5883L_WakeUp 1E5E                            Storage_load@byte 0026  
                           ___aldiv@counter 002A                                    _BMP_init 1627  
                            ___wmul@product 0025                                    _DOOR_run 092B  
                                  _LATCbits 010E                          Wireless_init@TADDR 1839  
                                 clear_ram0 1D9B                                   atan@recip 00AC  
                    HMC5883L_GetHeading@Mag 0051                    __end_of_RF_WriteRegister 1F56  
                                  _PIE1bits 0091                                    _PIE4bits 0094  
                 __end_of_RF_ResetStatusIRQ 115D                      HMC5883L_GetHeading@tmp 0053  
                HMC5883L_WriteBits@bitStart 0044              __end_of_HMC5883L_I2C_ByteWrite 1E5E  
                 __end_of_ADC_SelectChannel 1E9A         __size_of_INTERRUPT_InterruptManager 0033  
                     __end_of_I2C_ByteWrite 12D1                                    _PIR1bits 0011  
                                  _PIR4bits 0014                                    _SSP1CON1 0215  
                                  _SSP2CON1 021D                                    _SSP2CON3 021F  
                          ??_I2C_BufferRead 0036                                    _TMR1_ISR 1DDC  
                                  _SSP1STAT 0214                                    _SSP2STAT 021C  
                         ??_PIN_MANAGER_IOC 0070               I2C2_MasterTRBInsert@ptrb_list 0021  
                         ??_TMR1_Initialize 0023                                    _RF_Write 1E9A  
                                _ADCON0bits 009D                           ___wmul@multiplier 0021  
               __end_of_HMC5883L_GetHeading 1786                            _I2C2_MasterWrite 1210  
                  ADC_SelectChannel@channel 0022                     __size_of_FVR_Initialize 0004  
                      __end_of_RF_RxPayload 1F15                  __end_of_Timeout_hasExpired 146C  
                                  _WPUCbits 020E              Diag_setTempSensorHealth@health 0022  
                                ?_eval_poly 0066                                 _DOOR_update 1F56  
                    I2C_BufferRead@ReadAddr 0033                       DATAEE_WriteByte@bData 0021  
                      __end_of_RF_TxPayload 1070                         __end_ofatan@coeff_a 182A  
                       __end_ofatan@coeff_b 1839                             ?_RF_DataIsReady 0070  
                          ?_SPI1_Initialize 0070                          _HMC5883L_WriteBits 146C  
                         ___lmul@multiplier 0021                __end_of_I2C2_MasterTRBInsert 1564  
                          __size_of_RF_Init 0004                              ?_TMR1_CallBack 0070  
                         ?_DATAEE_WriteByte 0021                     _HMC5883L_I2C_BufferRead 1ECC  
                         ??_TMR2_Initialize 0021                          ??_DATAEE_WriteByte 0022  
                       ?_HMC5883L_WriteBits 0043                           I2C_ByteWrite@data 0036  
                                _EECON1bits 0195                     ??_Diag_getCompassHealth 0021  
          HMC5883L_I2C_BufferRead@slaveAddr 0042                      DOOR_update@closedAngle 0027  
                  ?_ADC_GetConversionResult 0021              I2C2_MasterWriteTRBBuild@length 0022  
              __size_of_BMP_readTemperature 02CD                     __size_of_Wireless_sleep 0018  
                   ??_OSCILLATOR_Initialize 0021                            __size_of___aldiv 0082  
                          __size_of___ftadd 00F6                            __size_of___ftdiv 00A9  
                          __size_of___ftneg 0009                            __size_of___lldiv 0053  
                                  ___altoft 130D                            __size_of___ftmul 00B4  
                      __end_of_Storage_load 141F                            __size_of___ftsub 001E  
                          __size_of___fttol 009F                        __end_of_Storage_save 1FE6  
                                  ___awtoft 115D                                    ___ftpack 15C2  
                   ??_I2C2_FunctionComplete 0070                    _TMR1_SetInterruptHandler 1E00  
         __size_of_Diag_getTempSensorHealth 0003                     __end_of_RF_ReadRegister 2000  
         __size_of_Diag_setTempSensorHealth 0008                   ?_Diag_getTempSensorHealth 0070  
                      ??_HMC5883L_WriteBits 0047                                    ___lwtoft 1F15  
                 ?_Diag_setTempSensorHealth 0070                       _TMR1_InterruptHandler 0168  
               ?_Wireless_checkDataReceived 0070                      ??_ADC_IsConversionDone 0021  
                   _IOCAF2_InterruptHandler 016A                                 _initialised 0158  
                   __end_of_HMC5883L_WakeUp 1E6C                ??_IOCAF2_SetInterruptHandler 0023  
               __end_of_HMC5883L_Initialize 1F40                                    __ptext10 1265  
                                  __ptext11 1F02                                    __ptext20 1D84  
                                  __ptext12 10E3                                    __ptext21 1D7F  
                                  __ptext13 07DF                                  _T1GCONbits 0019  
                                  __ptext30 103A                                    __ptext22 1D95  
                                  __ptext14 10C6                                    __ptext31 113D  
                                  __ptext23 1D70                                    __ptext15 1FE6  
                                  __ptext40 1E00                                    __ptext32 1F40  
                                  __ptext24 1E8A                                    __ptext16 1F56  
                                  __ptext41 1DAE                                    __ptext33 1D8F  
                                  __ptext25 1DB5                                    __ptext17 1FCC  
                                  __ptext50 1F2A                                    __ptext42 123A  
                                  __ptext34 1E1C                                    __ptext26 1E09  
                                  __ptext18 1000                                    __ptext51 1FB2  
                                  __ptext43 1DF7                                    __ptext35 1D7B  
                                  __ptext27 1EDE                                    __ptext19 134A  
                                  __ptext60 1100                                    __ptext52 1F6C  
                                  __ptext44 1DA7                                    __ptext36 101F  
                                  __ptext28 082E                                    __ptext61 170F  
                                  __ptext53 09B1                                    __ptext45 1004  
                                  __ptext37 1D77                                    __ptext29 10A9  
                                  __ptext70 1E35                                    __ptext62 1E5E  
                                  __ptext54 033C                                    __ptext46 1D73  
                                  __ptext38 1DD4                                    __ptext71 006F  
                                  __ptext63 146C                                    __ptext55 0E88  
                                  __ptext47 1DCC                                    __ptext39 1F83  
                                  __ptext80 15C2                                    __ptext72 1F15  
                                  __ptext64 1E50                                    __ptext56 11C5  
                                  __ptext48 092B                                    __ptext81 08A9  
                                  __ptext73 0A4D                                    __ptext65 1DC4  
                                  __ptext57 12D1                                    __ptext49 1E6C  
                                  __ptext90 1210                                    __ptext82 138F  
                                  __ptext74 1DE5                                    __ptext66 1D6D  
                                  __ptext58 169B                                    __ptext91 117F  
                                  __ptext83 1ECC                                    __ptext75 0B95  
                                  __ptext67 1DEE                                    __ptext59 1070  
                                  __ptext92 11E8                                    __ptext84 1D6A  
                                  __ptext76 0AEC                                    __ptext68 13D5  
                                  __ptext93 150F                                    __ptext85 1627  
                                  __ptext77 0C49                                    __ptext69 11A2  
                                  __ptext94 0802                                    __ptext86 1295  
                                  __ptext78 115D                                    __ptext95 1DBC  
                                  __ptext87 1564                                    __ptext79 130D  
                                  __ptext88 1EBB                                    __ptext97 1DDC  
                                  __ptext89 141F                                    __ptext98 1E42  
                                  __ptext99 1E12                    Wireless_packageData@data 00C0  
                              _SSP1CON1bits 0215                      Storage_load@closeAngle 0024  
                              _SSP2CON1bits 021D                                _SSP2CON2bits 021E  
                                _IOCAF2_ISR 1E28                 DATAEE_WriteByte@GIEBitValue 0023  
                       RF_RxPayload@payload 0032                        _RF_WriteRegisterData 10A9  
                         _HMC5883L_ReadBits 138F                               __size_of_fabs 0023  
                             __size_of_atan 0178                               __size_of_main 01C8  
                         ??_DATAEE_ReadByte 0021                  __size_of_RF_ResetStatusIRQ 0020  
                        ?_HMC5883L_ReadBits 0043                  __size_of_ADC_SelectChannel 0010  
                   I2C2_MasterWrite@address 0029                    __size_of_SPI_WriteBuffer 001B  
                 HMC5883L_WriteBits@regAddr 0043                                    int$flags 007E  
                                  _pressure 01A4                         ??_HMC5883L_ReadBits 0047  
        __end_of_INTERRUPT_InterruptManager 0037                  _INTERRUPT_InterruptManager 0004  
                __end_of_Timeout_setTimeout 1ECC                     I2C2_MasterWrite@trBlock 0159  
                              _SSP1STATbits 0214                    ??_Sensor_peripheralSleep 0021  
       __size_of_IOCAF2_SetInterruptHandler 0009                      BMP_readTemperature@tmp 00B9  
             __size_of_I2C2_BusCollisionISR 0001                                 atan@coeff_a 1818  
                               atan@coeff_b 182A                          RF_ReadRegister@reg 0024  
                        RF_ReadRegister@val 0025            __size_of_I2C2_MasterReadTRBBuild 002C  
                                _INTCONbits 000B                                 ??_eval_poly 006D  
                     Timeout_setTimeout@val 0021                                  _FVRCONbits 0117  
                              _sensorHealth 0166                      __size_of_Wireless_init 007B  
                     I2C_BufferRead@pBuffer 0031                      __size_of_Wireless_wake 001F  
                           ??_TMR1_CallBack 0070                   ??_HMC5883L_I2C_BufferRead 0041  
                     _Diag_setCompassHealth 1DC4                     __size_of_WDT_Initialize 0004  
         __size_of_I2C2_MasterWriteTRBBuild 0023                   __end_of_HMC5883L_ReadBits 13D5  
                 ?_I2C2_MasterWriteTRBBuild 0021                                    intlevel1 0000  
                     ?_RF_WriteRegisterData 0029                 __end_of_ADC_StartConversion 1D73  
                           _doorClosedAngle 00E6                         I2C2_ISR@i2c_address 007A  
                          ___lldiv@dividend 0025                     ?_PIN_MANAGER_Initialize 0070  
           __end_of_ADC_GetConversionResult 1E12                           __CFG_CLKOUTEN$OFF 0000  
                          ??_ADC_Initialize 0021                        HMC5883L_GetHeading@i 0054  
                         ?_HMC5883L_SetGain 0070                           ?_HMC5883L_SetMode 0070  
                    I2C2_MasterWrite@length 0028                     ??_Sensor_peripheralWake 0021  
              __end_of_Diag_getSensorHealth 1EF0                      __size_of_DOOR_resetPos 0004  
                        ??_HMC5883L_SetGain 003E                          ??_HMC5883L_SetMode 003E  
                     __size_of_RF_RxPayload 0013                        _I2C2_MasterTRBInsert 150F  
                             __pstringtext1 1818                               __pstringtext2 182A  
                             __pstringtext3 1839                       __size_of_RF_TxPayload 001B  
                            _FVR_Initialize 1D73                            ?_RF_ReadRegister 0070  
              __size_of_SPI_WriteReadBuffer 0020                            ___lldiv@quotient 002A  
                     Storage_load@openAngle 0027                        I2C_BufferRead@status 003B  
                              ___aldiv@sign 002B                      __size_of_SPI_WriteRead 0006  
                          ?_HMC5883L_WakeUp 0070                                 ?_IOCAF2_ISR 0070  
            __end_of_PIN_MANAGER_Initialize 1265                    __size_of_I2C2_MasterRead 0028  
                  __size_of_I2C2_Initialize 001B                          _referenceDirection 013C  
                        __size_of_I2C2_Stop 001D                             _PIN_MANAGER_IOC 1D89  
                  __end_of_I2C2_MasterWrite 123A                                _RF_RxPayload 1F02  
                         ?_RF_WriteRegister 0023                     HMC5883L_SetMode@newMode 0040  
                           _TMR1_Initialize 1F83         __size_of_Wireless_checkDataReceived 007A  
                        main@prevDoorStatus 01DB                       __size_of_Storage_load 004A  
                     __size_of_Storage_save 001A  
