

Microchip Technology PIC LITE Macro Assembler V1.45 build -152302408 
                                                                                               Mon Oct 07 21:54:44 2019

Microchip Technology Omniscient Code Generator v1.45 (Free mode) build 201711160504
     1                           	processor	16LF1829
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataBANK1,global,class=CODE,delta=2
     5                           	psect	idataBANK2,global,class=CODE,delta=2
     6                           	psect	stringtext1,global,class=STRCODE,delta=2
     7                           	psect	stringtext2,global,class=STRCODE,delta=2
     8                           	psect	stringtext3,global,class=STRCODE,delta=2
     9                           	psect	nvCOMMON,global,class=COMMON,space=1,delta=1
    10                           	psect	nvBANK2,global,class=BANK2,space=1,delta=1
    11                           	psect	cinit,global,class=CODE,merge=1,delta=2
    12                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
    13                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    14                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1
    15                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1
    16                           	psect	dataBANK2,global,class=BANK2,space=1,delta=1
    17                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1
    18                           	psect	clrtext,global,class=CODE,delta=2
    19                           	psect	cstackBANK3,global,class=BANK3,space=1,delta=1
    20                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    21                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    22                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    23                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    24                           	psect	text1,local,class=CODE,merge=1,delta=2
    25                           	psect	text2,local,class=CODE,merge=1,delta=2,group=2
    26                           	psect	text3,local,class=CODE,merge=1,delta=2,group=2
    27                           	psect	text4,local,class=CODE,merge=1,delta=2
    28                           	psect	text5,local,class=CODE,merge=1,delta=2
    29                           	psect	text6,local,class=CODE,merge=1,delta=2
    30                           	psect	text7,local,class=CODE,merge=1,delta=2
    31                           	psect	text8,local,class=CODE,merge=1,delta=2
    32                           	psect	text9,local,class=CODE,merge=1,delta=2
    33                           	psect	text10,local,class=CODE,merge=1,delta=2
    34                           	psect	text11,local,class=CODE,merge=1,delta=2
    35                           	psect	text12,local,class=CODE,merge=1,delta=2
    36                           	psect	text13,local,class=CODE,merge=1,delta=2
    37                           	psect	text14,local,class=CODE,merge=1,delta=2
    38                           	psect	text15,local,class=CODE,merge=1,delta=2
    39                           	psect	text16,local,class=CODE,merge=1,delta=2
    40                           	psect	text17,local,class=CODE,merge=1,delta=2
    41                           	psect	text18,local,class=CODE,merge=1,delta=2
    42                           	psect	text19,local,class=CODE,merge=1,delta=2
    43                           	psect	text20,local,class=CODE,merge=1,delta=2
    44                           	psect	text21,local,class=CODE,merge=1,delta=2
    45                           	psect	text22,local,class=CODE,merge=1,delta=2
    46                           	psect	text23,local,class=CODE,merge=1,delta=2
    47                           	psect	text24,local,class=CODE,merge=1,delta=2
    48                           	psect	text25,local,class=CODE,merge=1,delta=2
    49                           	psect	text26,local,class=CODE,merge=1,delta=2
    50                           	psect	text27,local,class=CODE,merge=1,delta=2
    51                           	psect	text28,local,class=CODE,merge=1,delta=2
    52                           	psect	text29,local,class=CODE,merge=1,delta=2
    53                           	psect	text30,local,class=CODE,merge=1,delta=2
    54                           	psect	text31,local,class=CODE,merge=1,delta=2
    55                           	psect	text32,local,class=CODE,merge=1,delta=2
    56                           	psect	text33,local,class=CODE,merge=1,delta=2
    57                           	psect	text34,local,class=CODE,merge=1,delta=2
    58                           	psect	text35,local,class=CODE,merge=1,delta=2
    59                           	psect	text36,local,class=CODE,merge=1,delta=2
    60                           	psect	text37,local,class=CODE,merge=1,delta=2
    61                           	psect	text38,local,class=CODE,merge=1,delta=2
    62                           	psect	text39,local,class=CODE,merge=1,delta=2
    63                           	psect	text40,local,class=CODE,merge=1,delta=2
    64                           	psect	text41,local,class=CODE,merge=1,delta=2
    65                           	psect	text42,local,class=CODE,merge=1,delta=2
    66                           	psect	text43,local,class=CODE,merge=1,delta=2
    67                           	psect	text44,local,class=CODE,merge=1,delta=2,group=2
    68                           	psect	text45,local,class=CODE,merge=1,delta=2
    69                           	psect	text46,local,class=CODE,merge=1,delta=2
    70                           	psect	text47,local,class=CODE,merge=1,delta=2
    71                           	psect	text48,local,class=CODE,merge=1,delta=2
    72                           	psect	text49,local,class=CODE,merge=1,delta=2
    73                           	psect	text50,local,class=CODE,merge=1,delta=2
    74                           	psect	text51,local,class=CODE,merge=1,delta=2
    75                           	psect	text52,local,class=CODE,merge=1,delta=2
    76                           	psect	text53,local,class=CODE,merge=1,delta=2
    77                           	psect	text54,local,class=CODE,merge=1,delta=2
    78                           	psect	text55,local,class=CODE,merge=1,delta=2
    79                           	psect	text56,local,class=CODE,merge=1,delta=2
    80                           	psect	text57,local,class=CODE,merge=1,delta=2
    81                           	psect	text58,local,class=CODE,merge=1,delta=2
    82                           	psect	text59,local,class=CODE,merge=1,delta=2
    83                           	psect	text60,local,class=CODE,merge=1,delta=2
    84                           	psect	text61,local,class=CODE,merge=1,delta=2
    85                           	psect	text62,local,class=CODE,merge=1,delta=2,group=2
    86                           	psect	text63,local,class=CODE,merge=1,delta=2,group=2
    87                           	psect	text64,local,class=CODE,merge=1,delta=2,group=2
    88                           	psect	text65,local,class=CODE,merge=1,delta=2,group=2
    89                           	psect	text66,local,class=CODE,merge=1,delta=2,group=2
    90                           	psect	text67,local,class=CODE,merge=1,delta=2,group=2
    91                           	psect	text68,local,class=CODE,merge=1,delta=2,group=2
    92                           	psect	text69,local,class=CODE,merge=1,delta=2,group=2
    93                           	psect	text70,local,class=CODE,merge=1,delta=2,group=2
    94                           	psect	text71,local,class=CODE,merge=1,delta=2,group=2
    95                           	psect	text72,local,class=CODE,merge=1,delta=2
    96                           	psect	text73,local,class=CODE,merge=1,delta=2
    97                           	psect	text74,local,class=CODE,merge=1,delta=2
    98                           	psect	text75,local,class=CODE,merge=1,delta=2
    99                           	psect	text76,local,class=CODE,merge=1,delta=2
   100                           	psect	text77,local,class=CODE,merge=1,delta=2
   101                           	psect	text78,local,class=CODE,merge=1,delta=2
   102                           	psect	text79,local,class=CODE,merge=1,delta=2
   103                           	psect	text80,local,class=CODE,merge=1,delta=2
   104                           	psect	text81,local,class=CODE,merge=1,delta=2
   105                           	psect	text82,local,class=CODE,merge=1,delta=2
   106                           	psect	text83,local,class=CODE,merge=1,delta=2
   107                           	psect	text84,local,class=CODE,merge=1,delta=2
   108                           	psect	text85,local,class=CODE,merge=1,delta=2
   109                           	psect	intentry,global,class=CODE,delta=2
   110                           	psect	text87,local,class=CODE,merge=1,delta=2
   111                           	psect	text88,local,class=CODE,merge=1,delta=2
   112                           	psect	text89,local,class=CODE,merge=1,delta=2
   113                           	psect	text90,local,class=CODE,merge=1,delta=2
   114                           	psect	text91,local,class=CODE,merge=1,delta=2
   115                           	psect	text92,local,class=CODE,merge=1,delta=2
   116                           	psect	text93,local,class=CODE,merge=1,delta=2
   117                           	psect	text94,local,class=CODE,merge=1,delta=2
   118                           	psect	swtext1,local,class=CONST,delta=2
   119                           	psect	text95,local,class=CODE,merge=1,delta=2
   120                           	psect	text96,local,class=CODE,merge=1,delta=2
   121                           	psect	text97,local,class=CODE,merge=1,delta=2
   122                           	dabs	1,0x7E,2
   123  0000                     
   124                           ; Version 1.45
   125                           ; Generated 16/11/2017 GMT
   126                           ; 
   127                           ; Copyright © 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
   128                           ; All rights reserved.
   129                           ; 
   130                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
   131                           ; 
   132                           ; Redistribution and use in source and binary forms, with or without modification, are
   133                           ; permitted provided that the following conditions are met:
   134                           ; 
   135                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
   136                           ;        conditions and the following disclaimer.
   137                           ; 
   138                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
   139                           ;        of conditions and the following disclaimer in the documentation and/or other
   140                           ;        materials provided with the distribution.
   141                           ; 
   142                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
   143                           ;        software without specific prior written permission.
   144                           ; 
   145                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   146                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   147                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   148                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   149                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   150                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   151                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   152                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   153                           ; 
   154                           ; 
   155                           ; Code-generator required, PIC16LF1829 Definitions
   156                           ; 
   157                           ; SFR Addresses
   158  0000                     	;# 
   159  0001                     	;# 
   160  0002                     	;# 
   161  0003                     	;# 
   162  0004                     	;# 
   163  0005                     	;# 
   164  0006                     	;# 
   165  0007                     	;# 
   166  0008                     	;# 
   167  0009                     	;# 
   168  000A                     	;# 
   169  000B                     	;# 
   170  000C                     	;# 
   171  000D                     	;# 
   172  000E                     	;# 
   173  0011                     	;# 
   174  0012                     	;# 
   175  0013                     	;# 
   176  0014                     	;# 
   177  0015                     	;# 
   178  0016                     	;# 
   179  0016                     	;# 
   180  0017                     	;# 
   181  0018                     	;# 
   182  0019                     	;# 
   183  001A                     	;# 
   184  001B                     	;# 
   185  001C                     	;# 
   186  001E                     	;# 
   187  001F                     	;# 
   188  008C                     	;# 
   189  008D                     	;# 
   190  008E                     	;# 
   191  0091                     	;# 
   192  0092                     	;# 
   193  0093                     	;# 
   194  0094                     	;# 
   195  0095                     	;# 
   196  0096                     	;# 
   197  0097                     	;# 
   198  0098                     	;# 
   199  0099                     	;# 
   200  009A                     	;# 
   201  009B                     	;# 
   202  009B                     	;# 
   203  009C                     	;# 
   204  009D                     	;# 
   205  009E                     	;# 
   206  010C                     	;# 
   207  010D                     	;# 
   208  010E                     	;# 
   209  0111                     	;# 
   210  0112                     	;# 
   211  0113                     	;# 
   212  0114                     	;# 
   213  0115                     	;# 
   214  0116                     	;# 
   215  0117                     	;# 
   216  0118                     	;# 
   217  0119                     	;# 
   218  011A                     	;# 
   219  011B                     	;# 
   220  011D                     	;# 
   221  011E                     	;# 
   222  018C                     	;# 
   223  018D                     	;# 
   224  018E                     	;# 
   225  0191                     	;# 
   226  0191                     	;# 
   227  0192                     	;# 
   228  0193                     	;# 
   229  0193                     	;# 
   230  0193                     	;# 
   231  0194                     	;# 
   232  0195                     	;# 
   233  0196                     	;# 
   234  0199                     	;# 
   235  019A                     	;# 
   236  019B                     	;# 
   237  019B                     	;# 
   238  019B                     	;# 
   239  019B                     	;# 
   240  019C                     	;# 
   241  019C                     	;# 
   242  019D                     	;# 
   243  019E                     	;# 
   244  019F                     	;# 
   245  020C                     	;# 
   246  020D                     	;# 
   247  020E                     	;# 
   248  0211                     	;# 
   249  0211                     	;# 
   250  0212                     	;# 
   251  0212                     	;# 
   252  0213                     	;# 
   253  0213                     	;# 
   254  0214                     	;# 
   255  0214                     	;# 
   256  0215                     	;# 
   257  0215                     	;# 
   258  0215                     	;# 
   259  0216                     	;# 
   260  0216                     	;# 
   261  0217                     	;# 
   262  0217                     	;# 
   263  0219                     	;# 
   264  021A                     	;# 
   265  021B                     	;# 
   266  021C                     	;# 
   267  021D                     	;# 
   268  021E                     	;# 
   269  021F                     	;# 
   270  0291                     	;# 
   271  0291                     	;# 
   272  0292                     	;# 
   273  0293                     	;# 
   274  0294                     	;# 
   275  0295                     	;# 
   276  0295                     	;# 
   277  0296                     	;# 
   278  0298                     	;# 
   279  0298                     	;# 
   280  0299                     	;# 
   281  029A                     	;# 
   282  029B                     	;# 
   283  029C                     	;# 
   284  029D                     	;# 
   285  029E                     	;# 
   286  0311                     	;# 
   287  0311                     	;# 
   288  0312                     	;# 
   289  0313                     	;# 
   290  0318                     	;# 
   291  0318                     	;# 
   292  0319                     	;# 
   293  031A                     	;# 
   294  038C                     	;# 
   295  038D                     	;# 
   296  038E                     	;# 
   297  0391                     	;# 
   298  0392                     	;# 
   299  0393                     	;# 
   300  0394                     	;# 
   301  0395                     	;# 
   302  0396                     	;# 
   303  039A                     	;# 
   304  039C                     	;# 
   305  039D                     	;# 
   306  039E                     	;# 
   307  039F                     	;# 
   308  0415                     	;# 
   309  0416                     	;# 
   310  0417                     	;# 
   311  041C                     	;# 
   312  041D                     	;# 
   313  041E                     	;# 
   314  0FE4                     	;# 
   315  0FE5                     	;# 
   316  0FE6                     	;# 
   317  0FE7                     	;# 
   318  0FE8                     	;# 
   319  0FE9                     	;# 
   320  0FEA                     	;# 
   321  0FEB                     	;# 
   322  0FED                     	;# 
   323  0FEE                     	;# 
   324  0FEF                     	;# 
   325  0000                     	;# 
   326  0001                     	;# 
   327  0002                     	;# 
   328  0003                     	;# 
   329  0004                     	;# 
   330  0005                     	;# 
   331  0006                     	;# 
   332  0007                     	;# 
   333  0008                     	;# 
   334  0009                     	;# 
   335  000A                     	;# 
   336  000B                     	;# 
   337  000C                     	;# 
   338  000D                     	;# 
   339  000E                     	;# 
   340  0011                     	;# 
   341  0012                     	;# 
   342  0013                     	;# 
   343  0014                     	;# 
   344  0015                     	;# 
   345  0016                     	;# 
   346  0016                     	;# 
   347  0017                     	;# 
   348  0018                     	;# 
   349  0019                     	;# 
   350  001A                     	;# 
   351  001B                     	;# 
   352  001C                     	;# 
   353  001E                     	;# 
   354  001F                     	;# 
   355  008C                     	;# 
   356  008D                     	;# 
   357  008E                     	;# 
   358  0091                     	;# 
   359  0092                     	;# 
   360  0093                     	;# 
   361  0094                     	;# 
   362  0095                     	;# 
   363  0096                     	;# 
   364  0097                     	;# 
   365  0098                     	;# 
   366  0099                     	;# 
   367  009A                     	;# 
   368  009B                     	;# 
   369  009B                     	;# 
   370  009C                     	;# 
   371  009D                     	;# 
   372  009E                     	;# 
   373  010C                     	;# 
   374  010D                     	;# 
   375  010E                     	;# 
   376  0111                     	;# 
   377  0112                     	;# 
   378  0113                     	;# 
   379  0114                     	;# 
   380  0115                     	;# 
   381  0116                     	;# 
   382  0117                     	;# 
   383  0118                     	;# 
   384  0119                     	;# 
   385  011A                     	;# 
   386  011B                     	;# 
   387  011D                     	;# 
   388  011E                     	;# 
   389  018C                     	;# 
   390  018D                     	;# 
   391  018E                     	;# 
   392  0191                     	;# 
   393  0191                     	;# 
   394  0192                     	;# 
   395  0193                     	;# 
   396  0193                     	;# 
   397  0193                     	;# 
   398  0194                     	;# 
   399  0195                     	;# 
   400  0196                     	;# 
   401  0199                     	;# 
   402  019A                     	;# 
   403  019B                     	;# 
   404  019B                     	;# 
   405  019B                     	;# 
   406  019B                     	;# 
   407  019C                     	;# 
   408  019C                     	;# 
   409  019D                     	;# 
   410  019E                     	;# 
   411  019F                     	;# 
   412  020C                     	;# 
   413  020D                     	;# 
   414  020E                     	;# 
   415  0211                     	;# 
   416  0211                     	;# 
   417  0212                     	;# 
   418  0212                     	;# 
   419  0213                     	;# 
   420  0213                     	;# 
   421  0214                     	;# 
   422  0214                     	;# 
   423  0215                     	;# 
   424  0215                     	;# 
   425  0215                     	;# 
   426  0216                     	;# 
   427  0216                     	;# 
   428  0217                     	;# 
   429  0217                     	;# 
   430  0219                     	;# 
   431  021A                     	;# 
   432  021B                     	;# 
   433  021C                     	;# 
   434  021D                     	;# 
   435  021E                     	;# 
   436  021F                     	;# 
   437  0291                     	;# 
   438  0291                     	;# 
   439  0292                     	;# 
   440  0293                     	;# 
   441  0294                     	;# 
   442  0295                     	;# 
   443  0295                     	;# 
   444  0296                     	;# 
   445  0298                     	;# 
   446  0298                     	;# 
   447  0299                     	;# 
   448  029A                     	;# 
   449  029B                     	;# 
   450  029C                     	;# 
   451  029D                     	;# 
   452  029E                     	;# 
   453  0311                     	;# 
   454  0311                     	;# 
   455  0312                     	;# 
   456  0313                     	;# 
   457  0318                     	;# 
   458  0318                     	;# 
   459  0319                     	;# 
   460  031A                     	;# 
   461  038C                     	;# 
   462  038D                     	;# 
   463  038E                     	;# 
   464  0391                     	;# 
   465  0392                     	;# 
   466  0393                     	;# 
   467  0394                     	;# 
   468  0395                     	;# 
   469  0396                     	;# 
   470  039A                     	;# 
   471  039C                     	;# 
   472  039D                     	;# 
   473  039E                     	;# 
   474  039F                     	;# 
   475  0415                     	;# 
   476  0416                     	;# 
   477  0417                     	;# 
   478  041C                     	;# 
   479  041D                     	;# 
   480  041E                     	;# 
   481  0FE4                     	;# 
   482  0FE5                     	;# 
   483  0FE6                     	;# 
   484  0FE7                     	;# 
   485  0FE8                     	;# 
   486  0FE9                     	;# 
   487  0FEA                     	;# 
   488  0FEB                     	;# 
   489  0FED                     	;# 
   490  0FEE                     	;# 
   491  0FEF                     	;# 
   492  0000                     	;# 
   493  0001                     	;# 
   494  0002                     	;# 
   495  0003                     	;# 
   496  0004                     	;# 
   497  0005                     	;# 
   498  0006                     	;# 
   499  0007                     	;# 
   500  0008                     	;# 
   501  0009                     	;# 
   502  000A                     	;# 
   503  000B                     	;# 
   504  000C                     	;# 
   505  000D                     	;# 
   506  000E                     	;# 
   507  0011                     	;# 
   508  0012                     	;# 
   509  0013                     	;# 
   510  0014                     	;# 
   511  0015                     	;# 
   512  0016                     	;# 
   513  0016                     	;# 
   514  0017                     	;# 
   515  0018                     	;# 
   516  0019                     	;# 
   517  001A                     	;# 
   518  001B                     	;# 
   519  001C                     	;# 
   520  001E                     	;# 
   521  001F                     	;# 
   522  008C                     	;# 
   523  008D                     	;# 
   524  008E                     	;# 
   525  0091                     	;# 
   526  0092                     	;# 
   527  0093                     	;# 
   528  0094                     	;# 
   529  0095                     	;# 
   530  0096                     	;# 
   531  0097                     	;# 
   532  0098                     	;# 
   533  0099                     	;# 
   534  009A                     	;# 
   535  009B                     	;# 
   536  009B                     	;# 
   537  009C                     	;# 
   538  009D                     	;# 
   539  009E                     	;# 
   540  010C                     	;# 
   541  010D                     	;# 
   542  010E                     	;# 
   543  0111                     	;# 
   544  0112                     	;# 
   545  0113                     	;# 
   546  0114                     	;# 
   547  0115                     	;# 
   548  0116                     	;# 
   549  0117                     	;# 
   550  0118                     	;# 
   551  0119                     	;# 
   552  011A                     	;# 
   553  011B                     	;# 
   554  011D                     	;# 
   555  011E                     	;# 
   556  018C                     	;# 
   557  018D                     	;# 
   558  018E                     	;# 
   559  0191                     	;# 
   560  0191                     	;# 
   561  0192                     	;# 
   562  0193                     	;# 
   563  0193                     	;# 
   564  0193                     	;# 
   565  0194                     	;# 
   566  0195                     	;# 
   567  0196                     	;# 
   568  0199                     	;# 
   569  019A                     	;# 
   570  019B                     	;# 
   571  019B                     	;# 
   572  019B                     	;# 
   573  019B                     	;# 
   574  019C                     	;# 
   575  019C                     	;# 
   576  019D                     	;# 
   577  019E                     	;# 
   578  019F                     	;# 
   579  020C                     	;# 
   580  020D                     	;# 
   581  020E                     	;# 
   582  0211                     	;# 
   583  0211                     	;# 
   584  0212                     	;# 
   585  0212                     	;# 
   586  0213                     	;# 
   587  0213                     	;# 
   588  0214                     	;# 
   589  0214                     	;# 
   590  0215                     	;# 
   591  0215                     	;# 
   592  0215                     	;# 
   593  0216                     	;# 
   594  0216                     	;# 
   595  0217                     	;# 
   596  0217                     	;# 
   597  0219                     	;# 
   598  021A                     	;# 
   599  021B                     	;# 
   600  021C                     	;# 
   601  021D                     	;# 
   602  021E                     	;# 
   603  021F                     	;# 
   604  0291                     	;# 
   605  0291                     	;# 
   606  0292                     	;# 
   607  0293                     	;# 
   608  0294                     	;# 
   609  0295                     	;# 
   610  0295                     	;# 
   611  0296                     	;# 
   612  0298                     	;# 
   613  0298                     	;# 
   614  0299                     	;# 
   615  029A                     	;# 
   616  029B                     	;# 
   617  029C                     	;# 
   618  029D                     	;# 
   619  029E                     	;# 
   620  0311                     	;# 
   621  0311                     	;# 
   622  0312                     	;# 
   623  0313                     	;# 
   624  0318                     	;# 
   625  0318                     	;# 
   626  0319                     	;# 
   627  031A                     	;# 
   628  038C                     	;# 
   629  038D                     	;# 
   630  038E                     	;# 
   631  0391                     	;# 
   632  0392                     	;# 
   633  0393                     	;# 
   634  0394                     	;# 
   635  0395                     	;# 
   636  0396                     	;# 
   637  039A                     	;# 
   638  039C                     	;# 
   639  039D                     	;# 
   640  039E                     	;# 
   641  039F                     	;# 
   642  0415                     	;# 
   643  0416                     	;# 
   644  0417                     	;# 
   645  041C                     	;# 
   646  041D                     	;# 
   647  041E                     	;# 
   648  0FE4                     	;# 
   649  0FE5                     	;# 
   650  0FE6                     	;# 
   651  0FE7                     	;# 
   652  0FE8                     	;# 
   653  0FE9                     	;# 
   654  0FEA                     	;# 
   655  0FEB                     	;# 
   656  0FED                     	;# 
   657  0FEE                     	;# 
   658  0FEF                     	;# 
   659  0000                     	;# 
   660  0001                     	;# 
   661  0002                     	;# 
   662  0003                     	;# 
   663  0004                     	;# 
   664  0005                     	;# 
   665  0006                     	;# 
   666  0007                     	;# 
   667  0008                     	;# 
   668  0009                     	;# 
   669  000A                     	;# 
   670  000B                     	;# 
   671  000C                     	;# 
   672  000D                     	;# 
   673  000E                     	;# 
   674  0011                     	;# 
   675  0012                     	;# 
   676  0013                     	;# 
   677  0014                     	;# 
   678  0015                     	;# 
   679  0016                     	;# 
   680  0016                     	;# 
   681  0017                     	;# 
   682  0018                     	;# 
   683  0019                     	;# 
   684  001A                     	;# 
   685  001B                     	;# 
   686  001C                     	;# 
   687  001E                     	;# 
   688  001F                     	;# 
   689  008C                     	;# 
   690  008D                     	;# 
   691  008E                     	;# 
   692  0091                     	;# 
   693  0092                     	;# 
   694  0093                     	;# 
   695  0094                     	;# 
   696  0095                     	;# 
   697  0096                     	;# 
   698  0097                     	;# 
   699  0098                     	;# 
   700  0099                     	;# 
   701  009A                     	;# 
   702  009B                     	;# 
   703  009B                     	;# 
   704  009C                     	;# 
   705  009D                     	;# 
   706  009E                     	;# 
   707  010C                     	;# 
   708  010D                     	;# 
   709  010E                     	;# 
   710  0111                     	;# 
   711  0112                     	;# 
   712  0113                     	;# 
   713  0114                     	;# 
   714  0115                     	;# 
   715  0116                     	;# 
   716  0117                     	;# 
   717  0118                     	;# 
   718  0119                     	;# 
   719  011A                     	;# 
   720  011B                     	;# 
   721  011D                     	;# 
   722  011E                     	;# 
   723  018C                     	;# 
   724  018D                     	;# 
   725  018E                     	;# 
   726  0191                     	;# 
   727  0191                     	;# 
   728  0192                     	;# 
   729  0193                     	;# 
   730  0193                     	;# 
   731  0193                     	;# 
   732  0194                     	;# 
   733  0195                     	;# 
   734  0196                     	;# 
   735  0199                     	;# 
   736  019A                     	;# 
   737  019B                     	;# 
   738  019B                     	;# 
   739  019B                     	;# 
   740  019B                     	;# 
   741  019C                     	;# 
   742  019C                     	;# 
   743  019D                     	;# 
   744  019E                     	;# 
   745  019F                     	;# 
   746  020C                     	;# 
   747  020D                     	;# 
   748  020E                     	;# 
   749  0211                     	;# 
   750  0211                     	;# 
   751  0212                     	;# 
   752  0212                     	;# 
   753  0213                     	;# 
   754  0213                     	;# 
   755  0214                     	;# 
   756  0214                     	;# 
   757  0215                     	;# 
   758  0215                     	;# 
   759  0215                     	;# 
   760  0216                     	;# 
   761  0216                     	;# 
   762  0217                     	;# 
   763  0217                     	;# 
   764  0219                     	;# 
   765  021A                     	;# 
   766  021B                     	;# 
   767  021C                     	;# 
   768  021D                     	;# 
   769  021E                     	;# 
   770  021F                     	;# 
   771  0291                     	;# 
   772  0291                     	;# 
   773  0292                     	;# 
   774  0293                     	;# 
   775  0294                     	;# 
   776  0295                     	;# 
   777  0295                     	;# 
   778  0296                     	;# 
   779  0298                     	;# 
   780  0298                     	;# 
   781  0299                     	;# 
   782  029A                     	;# 
   783  029B                     	;# 
   784  029C                     	;# 
   785  029D                     	;# 
   786  029E                     	;# 
   787  0311                     	;# 
   788  0311                     	;# 
   789  0312                     	;# 
   790  0313                     	;# 
   791  0318                     	;# 
   792  0318                     	;# 
   793  0319                     	;# 
   794  031A                     	;# 
   795  038C                     	;# 
   796  038D                     	;# 
   797  038E                     	;# 
   798  0391                     	;# 
   799  0392                     	;# 
   800  0393                     	;# 
   801  0394                     	;# 
   802  0395                     	;# 
   803  0396                     	;# 
   804  039A                     	;# 
   805  039C                     	;# 
   806  039D                     	;# 
   807  039E                     	;# 
   808  039F                     	;# 
   809  0415                     	;# 
   810  0416                     	;# 
   811  0417                     	;# 
   812  041C                     	;# 
   813  041D                     	;# 
   814  041E                     	;# 
   815  0FE4                     	;# 
   816  0FE5                     	;# 
   817  0FE6                     	;# 
   818  0FE7                     	;# 
   819  0FE8                     	;# 
   820  0FE9                     	;# 
   821  0FEA                     	;# 
   822  0FEB                     	;# 
   823  0FED                     	;# 
   824  0FEE                     	;# 
   825  0FEF                     	;# 
   826  0000                     	;# 
   827  0001                     	;# 
   828  0002                     	;# 
   829  0003                     	;# 
   830  0004                     	;# 
   831  0005                     	;# 
   832  0006                     	;# 
   833  0007                     	;# 
   834  0008                     	;# 
   835  0009                     	;# 
   836  000A                     	;# 
   837  000B                     	;# 
   838  000C                     	;# 
   839  000D                     	;# 
   840  000E                     	;# 
   841  0011                     	;# 
   842  0012                     	;# 
   843  0013                     	;# 
   844  0014                     	;# 
   845  0015                     	;# 
   846  0016                     	;# 
   847  0016                     	;# 
   848  0017                     	;# 
   849  0018                     	;# 
   850  0019                     	;# 
   851  001A                     	;# 
   852  001B                     	;# 
   853  001C                     	;# 
   854  001E                     	;# 
   855  001F                     	;# 
   856  008C                     	;# 
   857  008D                     	;# 
   858  008E                     	;# 
   859  0091                     	;# 
   860  0092                     	;# 
   861  0093                     	;# 
   862  0094                     	;# 
   863  0095                     	;# 
   864  0096                     	;# 
   865  0097                     	;# 
   866  0098                     	;# 
   867  0099                     	;# 
   868  009A                     	;# 
   869  009B                     	;# 
   870  009B                     	;# 
   871  009C                     	;# 
   872  009D                     	;# 
   873  009E                     	;# 
   874  010C                     	;# 
   875  010D                     	;# 
   876  010E                     	;# 
   877  0111                     	;# 
   878  0112                     	;# 
   879  0113                     	;# 
   880  0114                     	;# 
   881  0115                     	;# 
   882  0116                     	;# 
   883  0117                     	;# 
   884  0118                     	;# 
   885  0119                     	;# 
   886  011A                     	;# 
   887  011B                     	;# 
   888  011D                     	;# 
   889  011E                     	;# 
   890  018C                     	;# 
   891  018D                     	;# 
   892  018E                     	;# 
   893  0191                     	;# 
   894  0191                     	;# 
   895  0192                     	;# 
   896  0193                     	;# 
   897  0193                     	;# 
   898  0193                     	;# 
   899  0194                     	;# 
   900  0195                     	;# 
   901  0196                     	;# 
   902  0199                     	;# 
   903  019A                     	;# 
   904  019B                     	;# 
   905  019B                     	;# 
   906  019B                     	;# 
   907  019B                     	;# 
   908  019C                     	;# 
   909  019C                     	;# 
   910  019D                     	;# 
   911  019E                     	;# 
   912  019F                     	;# 
   913  020C                     	;# 
   914  020D                     	;# 
   915  020E                     	;# 
   916  0211                     	;# 
   917  0211                     	;# 
   918  0212                     	;# 
   919  0212                     	;# 
   920  0213                     	;# 
   921  0213                     	;# 
   922  0214                     	;# 
   923  0214                     	;# 
   924  0215                     	;# 
   925  0215                     	;# 
   926  0215                     	;# 
   927  0216                     	;# 
   928  0216                     	;# 
   929  0217                     	;# 
   930  0217                     	;# 
   931  0219                     	;# 
   932  021A                     	;# 
   933  021B                     	;# 
   934  021C                     	;# 
   935  021D                     	;# 
   936  021E                     	;# 
   937  021F                     	;# 
   938  0291                     	;# 
   939  0291                     	;# 
   940  0292                     	;# 
   941  0293                     	;# 
   942  0294                     	;# 
   943  0295                     	;# 
   944  0295                     	;# 
   945  0296                     	;# 
   946  0298                     	;# 
   947  0298                     	;# 
   948  0299                     	;# 
   949  029A                     	;# 
   950  029B                     	;# 
   951  029C                     	;# 
   952  029D                     	;# 
   953  029E                     	;# 
   954  0311                     	;# 
   955  0311                     	;# 
   956  0312                     	;# 
   957  0313                     	;# 
   958  0318                     	;# 
   959  0318                     	;# 
   960  0319                     	;# 
   961  031A                     	;# 
   962  038C                     	;# 
   963  038D                     	;# 
   964  038E                     	;# 
   965  0391                     	;# 
   966  0392                     	;# 
   967  0393                     	;# 
   968  0394                     	;# 
   969  0395                     	;# 
   970  0396                     	;# 
   971  039A                     	;# 
   972  039C                     	;# 
   973  039D                     	;# 
   974  039E                     	;# 
   975  039F                     	;# 
   976  0415                     	;# 
   977  0416                     	;# 
   978  0417                     	;# 
   979  041C                     	;# 
   980  041D                     	;# 
   981  041E                     	;# 
   982  0FE4                     	;# 
   983  0FE5                     	;# 
   984  0FE6                     	;# 
   985  0FE7                     	;# 
   986  0FE8                     	;# 
   987  0FE9                     	;# 
   988  0FEA                     	;# 
   989  0FEB                     	;# 
   990  0FED                     	;# 
   991  0FEE                     	;# 
   992  0FEF                     	;# 
   993  0000                     	;# 
   994  0001                     	;# 
   995  0002                     	;# 
   996  0003                     	;# 
   997  0004                     	;# 
   998  0005                     	;# 
   999  0006                     	;# 
  1000  0007                     	;# 
  1001  0008                     	;# 
  1002  0009                     	;# 
  1003  000A                     	;# 
  1004  000B                     	;# 
  1005  000C                     	;# 
  1006  000D                     	;# 
  1007  000E                     	;# 
  1008  0011                     	;# 
  1009  0012                     	;# 
  1010  0013                     	;# 
  1011  0014                     	;# 
  1012  0015                     	;# 
  1013  0016                     	;# 
  1014  0016                     	;# 
  1015  0017                     	;# 
  1016  0018                     	;# 
  1017  0019                     	;# 
  1018  001A                     	;# 
  1019  001B                     	;# 
  1020  001C                     	;# 
  1021  001E                     	;# 
  1022  001F                     	;# 
  1023  008C                     	;# 
  1024  008D                     	;# 
  1025  008E                     	;# 
  1026  0091                     	;# 
  1027  0092                     	;# 
  1028  0093                     	;# 
  1029  0094                     	;# 
  1030  0095                     	;# 
  1031  0096                     	;# 
  1032  0097                     	;# 
  1033  0098                     	;# 
  1034  0099                     	;# 
  1035  009A                     	;# 
  1036  009B                     	;# 
  1037  009B                     	;# 
  1038  009C                     	;# 
  1039  009D                     	;# 
  1040  009E                     	;# 
  1041  010C                     	;# 
  1042  010D                     	;# 
  1043  010E                     	;# 
  1044  0111                     	;# 
  1045  0112                     	;# 
  1046  0113                     	;# 
  1047  0114                     	;# 
  1048  0115                     	;# 
  1049  0116                     	;# 
  1050  0117                     	;# 
  1051  0118                     	;# 
  1052  0119                     	;# 
  1053  011A                     	;# 
  1054  011B                     	;# 
  1055  011D                     	;# 
  1056  011E                     	;# 
  1057  018C                     	;# 
  1058  018D                     	;# 
  1059  018E                     	;# 
  1060  0191                     	;# 
  1061  0191                     	;# 
  1062  0192                     	;# 
  1063  0193                     	;# 
  1064  0193                     	;# 
  1065  0193                     	;# 
  1066  0194                     	;# 
  1067  0195                     	;# 
  1068  0196                     	;# 
  1069  0199                     	;# 
  1070  019A                     	;# 
  1071  019B                     	;# 
  1072  019B                     	;# 
  1073  019B                     	;# 
  1074  019B                     	;# 
  1075  019C                     	;# 
  1076  019C                     	;# 
  1077  019D                     	;# 
  1078  019E                     	;# 
  1079  019F                     	;# 
  1080  020C                     	;# 
  1081  020D                     	;# 
  1082  020E                     	;# 
  1083  0211                     	;# 
  1084  0211                     	;# 
  1085  0212                     	;# 
  1086  0212                     	;# 
  1087  0213                     	;# 
  1088  0213                     	;# 
  1089  0214                     	;# 
  1090  0214                     	;# 
  1091  0215                     	;# 
  1092  0215                     	;# 
  1093  0215                     	;# 
  1094  0216                     	;# 
  1095  0216                     	;# 
  1096  0217                     	;# 
  1097  0217                     	;# 
  1098  0219                     	;# 
  1099  021A                     	;# 
  1100  021B                     	;# 
  1101  021C                     	;# 
  1102  021D                     	;# 
  1103  021E                     	;# 
  1104  021F                     	;# 
  1105  0291                     	;# 
  1106  0291                     	;# 
  1107  0292                     	;# 
  1108  0293                     	;# 
  1109  0294                     	;# 
  1110  0295                     	;# 
  1111  0295                     	;# 
  1112  0296                     	;# 
  1113  0298                     	;# 
  1114  0298                     	;# 
  1115  0299                     	;# 
  1116  029A                     	;# 
  1117  029B                     	;# 
  1118  029C                     	;# 
  1119  029D                     	;# 
  1120  029E                     	;# 
  1121  0311                     	;# 
  1122  0311                     	;# 
  1123  0312                     	;# 
  1124  0313                     	;# 
  1125  0318                     	;# 
  1126  0318                     	;# 
  1127  0319                     	;# 
  1128  031A                     	;# 
  1129  038C                     	;# 
  1130  038D                     	;# 
  1131  038E                     	;# 
  1132  0391                     	;# 
  1133  0392                     	;# 
  1134  0393                     	;# 
  1135  0394                     	;# 
  1136  0395                     	;# 
  1137  0396                     	;# 
  1138  039A                     	;# 
  1139  039C                     	;# 
  1140  039D                     	;# 
  1141  039E                     	;# 
  1142  039F                     	;# 
  1143  0415                     	;# 
  1144  0416                     	;# 
  1145  0417                     	;# 
  1146  041C                     	;# 
  1147  041D                     	;# 
  1148  041E                     	;# 
  1149  0FE4                     	;# 
  1150  0FE5                     	;# 
  1151  0FE6                     	;# 
  1152  0FE7                     	;# 
  1153  0FE8                     	;# 
  1154  0FE9                     	;# 
  1155  0FEA                     	;# 
  1156  0FEB                     	;# 
  1157  0FED                     	;# 
  1158  0FEE                     	;# 
  1159  0FEF                     	;# 
  1160  0000                     	;# 
  1161  0001                     	;# 
  1162  0002                     	;# 
  1163  0003                     	;# 
  1164  0004                     	;# 
  1165  0005                     	;# 
  1166  0006                     	;# 
  1167  0007                     	;# 
  1168  0008                     	;# 
  1169  0009                     	;# 
  1170  000A                     	;# 
  1171  000B                     	;# 
  1172  000C                     	;# 
  1173  000D                     	;# 
  1174  000E                     	;# 
  1175  0011                     	;# 
  1176  0012                     	;# 
  1177  0013                     	;# 
  1178  0014                     	;# 
  1179  0015                     	;# 
  1180  0016                     	;# 
  1181  0016                     	;# 
  1182  0017                     	;# 
  1183  0018                     	;# 
  1184  0019                     	;# 
  1185  001A                     	;# 
  1186  001B                     	;# 
  1187  001C                     	;# 
  1188  001E                     	;# 
  1189  001F                     	;# 
  1190  008C                     	;# 
  1191  008D                     	;# 
  1192  008E                     	;# 
  1193  0091                     	;# 
  1194  0092                     	;# 
  1195  0093                     	;# 
  1196  0094                     	;# 
  1197  0095                     	;# 
  1198  0096                     	;# 
  1199  0097                     	;# 
  1200  0098                     	;# 
  1201  0099                     	;# 
  1202  009A                     	;# 
  1203  009B                     	;# 
  1204  009B                     	;# 
  1205  009C                     	;# 
  1206  009D                     	;# 
  1207  009E                     	;# 
  1208  010C                     	;# 
  1209  010D                     	;# 
  1210  010E                     	;# 
  1211  0111                     	;# 
  1212  0112                     	;# 
  1213  0113                     	;# 
  1214  0114                     	;# 
  1215  0115                     	;# 
  1216  0116                     	;# 
  1217  0117                     	;# 
  1218  0118                     	;# 
  1219  0119                     	;# 
  1220  011A                     	;# 
  1221  011B                     	;# 
  1222  011D                     	;# 
  1223  011E                     	;# 
  1224  018C                     	;# 
  1225  018D                     	;# 
  1226  018E                     	;# 
  1227  0191                     	;# 
  1228  0191                     	;# 
  1229  0192                     	;# 
  1230  0193                     	;# 
  1231  0193                     	;# 
  1232  0193                     	;# 
  1233  0194                     	;# 
  1234  0195                     	;# 
  1235  0196                     	;# 
  1236  0199                     	;# 
  1237  019A                     	;# 
  1238  019B                     	;# 
  1239  019B                     	;# 
  1240  019B                     	;# 
  1241  019B                     	;# 
  1242  019C                     	;# 
  1243  019C                     	;# 
  1244  019D                     	;# 
  1245  019E                     	;# 
  1246  019F                     	;# 
  1247  020C                     	;# 
  1248  020D                     	;# 
  1249  020E                     	;# 
  1250  0211                     	;# 
  1251  0211                     	;# 
  1252  0212                     	;# 
  1253  0212                     	;# 
  1254  0213                     	;# 
  1255  0213                     	;# 
  1256  0214                     	;# 
  1257  0214                     	;# 
  1258  0215                     	;# 
  1259  0215                     	;# 
  1260  0215                     	;# 
  1261  0216                     	;# 
  1262  0216                     	;# 
  1263  0217                     	;# 
  1264  0217                     	;# 
  1265  0219                     	;# 
  1266  021A                     	;# 
  1267  021B                     	;# 
  1268  021C                     	;# 
  1269  021D                     	;# 
  1270  021E                     	;# 
  1271  021F                     	;# 
  1272  0291                     	;# 
  1273  0291                     	;# 
  1274  0292                     	;# 
  1275  0293                     	;# 
  1276  0294                     	;# 
  1277  0295                     	;# 
  1278  0295                     	;# 
  1279  0296                     	;# 
  1280  0298                     	;# 
  1281  0298                     	;# 
  1282  0299                     	;# 
  1283  029A                     	;# 
  1284  029B                     	;# 
  1285  029C                     	;# 
  1286  029D                     	;# 
  1287  029E                     	;# 
  1288  0311                     	;# 
  1289  0311                     	;# 
  1290  0312                     	;# 
  1291  0313                     	;# 
  1292  0318                     	;# 
  1293  0318                     	;# 
  1294  0319                     	;# 
  1295  031A                     	;# 
  1296  038C                     	;# 
  1297  038D                     	;# 
  1298  038E                     	;# 
  1299  0391                     	;# 
  1300  0392                     	;# 
  1301  0393                     	;# 
  1302  0394                     	;# 
  1303  0395                     	;# 
  1304  0396                     	;# 
  1305  039A                     	;# 
  1306  039C                     	;# 
  1307  039D                     	;# 
  1308  039E                     	;# 
  1309  039F                     	;# 
  1310  0415                     	;# 
  1311  0416                     	;# 
  1312  0417                     	;# 
  1313  041C                     	;# 
  1314  041D                     	;# 
  1315  041E                     	;# 
  1316  0FE4                     	;# 
  1317  0FE5                     	;# 
  1318  0FE6                     	;# 
  1319  0FE7                     	;# 
  1320  0FE8                     	;# 
  1321  0FE9                     	;# 
  1322  0FEA                     	;# 
  1323  0FEB                     	;# 
  1324  0FED                     	;# 
  1325  0FEE                     	;# 
  1326  0FEF                     	;# 
  1327  0000                     	;# 
  1328  0001                     	;# 
  1329  0002                     	;# 
  1330  0003                     	;# 
  1331  0004                     	;# 
  1332  0005                     	;# 
  1333  0006                     	;# 
  1334  0007                     	;# 
  1335  0008                     	;# 
  1336  0009                     	;# 
  1337  000A                     	;# 
  1338  000B                     	;# 
  1339  000C                     	;# 
  1340  000D                     	;# 
  1341  000E                     	;# 
  1342  0011                     	;# 
  1343  0012                     	;# 
  1344  0013                     	;# 
  1345  0014                     	;# 
  1346  0015                     	;# 
  1347  0016                     	;# 
  1348  0016                     	;# 
  1349  0017                     	;# 
  1350  0018                     	;# 
  1351  0019                     	;# 
  1352  001A                     	;# 
  1353  001B                     	;# 
  1354  001C                     	;# 
  1355  001E                     	;# 
  1356  001F                     	;# 
  1357  008C                     	;# 
  1358  008D                     	;# 
  1359  008E                     	;# 
  1360  0091                     	;# 
  1361  0092                     	;# 
  1362  0093                     	;# 
  1363  0094                     	;# 
  1364  0095                     	;# 
  1365  0096                     	;# 
  1366  0097                     	;# 
  1367  0098                     	;# 
  1368  0099                     	;# 
  1369  009A                     	;# 
  1370  009B                     	;# 
  1371  009B                     	;# 
  1372  009C                     	;# 
  1373  009D                     	;# 
  1374  009E                     	;# 
  1375  010C                     	;# 
  1376  010D                     	;# 
  1377  010E                     	;# 
  1378  0111                     	;# 
  1379  0112                     	;# 
  1380  0113                     	;# 
  1381  0114                     	;# 
  1382  0115                     	;# 
  1383  0116                     	;# 
  1384  0117                     	;# 
  1385  0118                     	;# 
  1386  0119                     	;# 
  1387  011A                     	;# 
  1388  011B                     	;# 
  1389  011D                     	;# 
  1390  011E                     	;# 
  1391  018C                     	;# 
  1392  018D                     	;# 
  1393  018E                     	;# 
  1394  0191                     	;# 
  1395  0191                     	;# 
  1396  0192                     	;# 
  1397  0193                     	;# 
  1398  0193                     	;# 
  1399  0193                     	;# 
  1400  0194                     	;# 
  1401  0195                     	;# 
  1402  0196                     	;# 
  1403  0199                     	;# 
  1404  019A                     	;# 
  1405  019B                     	;# 
  1406  019B                     	;# 
  1407  019B                     	;# 
  1408  019B                     	;# 
  1409  019C                     	;# 
  1410  019C                     	;# 
  1411  019D                     	;# 
  1412  019E                     	;# 
  1413  019F                     	;# 
  1414  020C                     	;# 
  1415  020D                     	;# 
  1416  020E                     	;# 
  1417  0211                     	;# 
  1418  0211                     	;# 
  1419  0212                     	;# 
  1420  0212                     	;# 
  1421  0213                     	;# 
  1422  0213                     	;# 
  1423  0214                     	;# 
  1424  0214                     	;# 
  1425  0215                     	;# 
  1426  0215                     	;# 
  1427  0215                     	;# 
  1428  0216                     	;# 
  1429  0216                     	;# 
  1430  0217                     	;# 
  1431  0217                     	;# 
  1432  0219                     	;# 
  1433  021A                     	;# 
  1434  021B                     	;# 
  1435  021C                     	;# 
  1436  021D                     	;# 
  1437  021E                     	;# 
  1438  021F                     	;# 
  1439  0291                     	;# 
  1440  0291                     	;# 
  1441  0292                     	;# 
  1442  0293                     	;# 
  1443  0294                     	;# 
  1444  0295                     	;# 
  1445  0295                     	;# 
  1446  0296                     	;# 
  1447  0298                     	;# 
  1448  0298                     	;# 
  1449  0299                     	;# 
  1450  029A                     	;# 
  1451  029B                     	;# 
  1452  029C                     	;# 
  1453  029D                     	;# 
  1454  029E                     	;# 
  1455  0311                     	;# 
  1456  0311                     	;# 
  1457  0312                     	;# 
  1458  0313                     	;# 
  1459  0318                     	;# 
  1460  0318                     	;# 
  1461  0319                     	;# 
  1462  031A                     	;# 
  1463  038C                     	;# 
  1464  038D                     	;# 
  1465  038E                     	;# 
  1466  0391                     	;# 
  1467  0392                     	;# 
  1468  0393                     	;# 
  1469  0394                     	;# 
  1470  0395                     	;# 
  1471  0396                     	;# 
  1472  039A                     	;# 
  1473  039C                     	;# 
  1474  039D                     	;# 
  1475  039E                     	;# 
  1476  039F                     	;# 
  1477  0415                     	;# 
  1478  0416                     	;# 
  1479  0417                     	;# 
  1480  041C                     	;# 
  1481  041D                     	;# 
  1482  041E                     	;# 
  1483  0FE4                     	;# 
  1484  0FE5                     	;# 
  1485  0FE6                     	;# 
  1486  0FE7                     	;# 
  1487  0FE8                     	;# 
  1488  0FE9                     	;# 
  1489  0FEA                     	;# 
  1490  0FEB                     	;# 
  1491  0FED                     	;# 
  1492  0FEE                     	;# 
  1493  0FEF                     	;# 
  1494  0000                     	;# 
  1495  0001                     	;# 
  1496  0002                     	;# 
  1497  0003                     	;# 
  1498  0004                     	;# 
  1499  0005                     	;# 
  1500  0006                     	;# 
  1501  0007                     	;# 
  1502  0008                     	;# 
  1503  0009                     	;# 
  1504  000A                     	;# 
  1505  000B                     	;# 
  1506  000C                     	;# 
  1507  000D                     	;# 
  1508  000E                     	;# 
  1509  0011                     	;# 
  1510  0012                     	;# 
  1511  0013                     	;# 
  1512  0014                     	;# 
  1513  0015                     	;# 
  1514  0016                     	;# 
  1515  0016                     	;# 
  1516  0017                     	;# 
  1517  0018                     	;# 
  1518  0019                     	;# 
  1519  001A                     	;# 
  1520  001B                     	;# 
  1521  001C                     	;# 
  1522  001E                     	;# 
  1523  001F                     	;# 
  1524  008C                     	;# 
  1525  008D                     	;# 
  1526  008E                     	;# 
  1527  0091                     	;# 
  1528  0092                     	;# 
  1529  0093                     	;# 
  1530  0094                     	;# 
  1531  0095                     	;# 
  1532  0096                     	;# 
  1533  0097                     	;# 
  1534  0098                     	;# 
  1535  0099                     	;# 
  1536  009A                     	;# 
  1537  009B                     	;# 
  1538  009B                     	;# 
  1539  009C                     	;# 
  1540  009D                     	;# 
  1541  009E                     	;# 
  1542  010C                     	;# 
  1543  010D                     	;# 
  1544  010E                     	;# 
  1545  0111                     	;# 
  1546  0112                     	;# 
  1547  0113                     	;# 
  1548  0114                     	;# 
  1549  0115                     	;# 
  1550  0116                     	;# 
  1551  0117                     	;# 
  1552  0118                     	;# 
  1553  0119                     	;# 
  1554  011A                     	;# 
  1555  011B                     	;# 
  1556  011D                     	;# 
  1557  011E                     	;# 
  1558  018C                     	;# 
  1559  018D                     	;# 
  1560  018E                     	;# 
  1561  0191                     	;# 
  1562  0191                     	;# 
  1563  0192                     	;# 
  1564  0193                     	;# 
  1565  0193                     	;# 
  1566  0193                     	;# 
  1567  0194                     	;# 
  1568  0195                     	;# 
  1569  0196                     	;# 
  1570  0199                     	;# 
  1571  019A                     	;# 
  1572  019B                     	;# 
  1573  019B                     	;# 
  1574  019B                     	;# 
  1575  019B                     	;# 
  1576  019C                     	;# 
  1577  019C                     	;# 
  1578  019D                     	;# 
  1579  019E                     	;# 
  1580  019F                     	;# 
  1581  020C                     	;# 
  1582  020D                     	;# 
  1583  020E                     	;# 
  1584  0211                     	;# 
  1585  0211                     	;# 
  1586  0212                     	;# 
  1587  0212                     	;# 
  1588  0213                     	;# 
  1589  0213                     	;# 
  1590  0214                     	;# 
  1591  0214                     	;# 
  1592  0215                     	;# 
  1593  0215                     	;# 
  1594  0215                     	;# 
  1595  0216                     	;# 
  1596  0216                     	;# 
  1597  0217                     	;# 
  1598  0217                     	;# 
  1599  0219                     	;# 
  1600  021A                     	;# 
  1601  021B                     	;# 
  1602  021C                     	;# 
  1603  021D                     	;# 
  1604  021E                     	;# 
  1605  021F                     	;# 
  1606  0291                     	;# 
  1607  0291                     	;# 
  1608  0292                     	;# 
  1609  0293                     	;# 
  1610  0294                     	;# 
  1611  0295                     	;# 
  1612  0295                     	;# 
  1613  0296                     	;# 
  1614  0298                     	;# 
  1615  0298                     	;# 
  1616  0299                     	;# 
  1617  029A                     	;# 
  1618  029B                     	;# 
  1619  029C                     	;# 
  1620  029D                     	;# 
  1621  029E                     	;# 
  1622  0311                     	;# 
  1623  0311                     	;# 
  1624  0312                     	;# 
  1625  0313                     	;# 
  1626  0318                     	;# 
  1627  0318                     	;# 
  1628  0319                     	;# 
  1629  031A                     	;# 
  1630  038C                     	;# 
  1631  038D                     	;# 
  1632  038E                     	;# 
  1633  0391                     	;# 
  1634  0392                     	;# 
  1635  0393                     	;# 
  1636  0394                     	;# 
  1637  0395                     	;# 
  1638  0396                     	;# 
  1639  039A                     	;# 
  1640  039C                     	;# 
  1641  039D                     	;# 
  1642  039E                     	;# 
  1643  039F                     	;# 
  1644  0415                     	;# 
  1645  0416                     	;# 
  1646  0417                     	;# 
  1647  041C                     	;# 
  1648  041D                     	;# 
  1649  041E                     	;# 
  1650  0FE4                     	;# 
  1651  0FE5                     	;# 
  1652  0FE6                     	;# 
  1653  0FE7                     	;# 
  1654  0FE8                     	;# 
  1655  0FE9                     	;# 
  1656  0FEA                     	;# 
  1657  0FEB                     	;# 
  1658  0FED                     	;# 
  1659  0FEE                     	;# 
  1660  0FEF                     	;# 
  1661  0000                     	;# 
  1662  0001                     	;# 
  1663  0002                     	;# 
  1664  0003                     	;# 
  1665  0004                     	;# 
  1666  0005                     	;# 
  1667  0006                     	;# 
  1668  0007                     	;# 
  1669  0008                     	;# 
  1670  0009                     	;# 
  1671  000A                     	;# 
  1672  000B                     	;# 
  1673  000C                     	;# 
  1674  000D                     	;# 
  1675  000E                     	;# 
  1676  0011                     	;# 
  1677  0012                     	;# 
  1678  0013                     	;# 
  1679  0014                     	;# 
  1680  0015                     	;# 
  1681  0016                     	;# 
  1682  0016                     	;# 
  1683  0017                     	;# 
  1684  0018                     	;# 
  1685  0019                     	;# 
  1686  001A                     	;# 
  1687  001B                     	;# 
  1688  001C                     	;# 
  1689  001E                     	;# 
  1690  001F                     	;# 
  1691  008C                     	;# 
  1692  008D                     	;# 
  1693  008E                     	;# 
  1694  0091                     	;# 
  1695  0092                     	;# 
  1696  0093                     	;# 
  1697  0094                     	;# 
  1698  0095                     	;# 
  1699  0096                     	;# 
  1700  0097                     	;# 
  1701  0098                     	;# 
  1702  0099                     	;# 
  1703  009A                     	;# 
  1704  009B                     	;# 
  1705  009B                     	;# 
  1706  009C                     	;# 
  1707  009D                     	;# 
  1708  009E                     	;# 
  1709  010C                     	;# 
  1710  010D                     	;# 
  1711  010E                     	;# 
  1712  0111                     	;# 
  1713  0112                     	;# 
  1714  0113                     	;# 
  1715  0114                     	;# 
  1716  0115                     	;# 
  1717  0116                     	;# 
  1718  0117                     	;# 
  1719  0118                     	;# 
  1720  0119                     	;# 
  1721  011A                     	;# 
  1722  011B                     	;# 
  1723  011D                     	;# 
  1724  011E                     	;# 
  1725  018C                     	;# 
  1726  018D                     	;# 
  1727  018E                     	;# 
  1728  0191                     	;# 
  1729  0191                     	;# 
  1730  0192                     	;# 
  1731  0193                     	;# 
  1732  0193                     	;# 
  1733  0193                     	;# 
  1734  0194                     	;# 
  1735  0195                     	;# 
  1736  0196                     	;# 
  1737  0199                     	;# 
  1738  019A                     	;# 
  1739  019B                     	;# 
  1740  019B                     	;# 
  1741  019B                     	;# 
  1742  019B                     	;# 
  1743  019C                     	;# 
  1744  019C                     	;# 
  1745  019D                     	;# 
  1746  019E                     	;# 
  1747  019F                     	;# 
  1748  020C                     	;# 
  1749  020D                     	;# 
  1750  020E                     	;# 
  1751  0211                     	;# 
  1752  0211                     	;# 
  1753  0212                     	;# 
  1754  0212                     	;# 
  1755  0213                     	;# 
  1756  0213                     	;# 
  1757  0214                     	;# 
  1758  0214                     	;# 
  1759  0215                     	;# 
  1760  0215                     	;# 
  1761  0215                     	;# 
  1762  0216                     	;# 
  1763  0216                     	;# 
  1764  0217                     	;# 
  1765  0217                     	;# 
  1766  0219                     	;# 
  1767  021A                     	;# 
  1768  021B                     	;# 
  1769  021C                     	;# 
  1770  021D                     	;# 
  1771  021E                     	;# 
  1772  021F                     	;# 
  1773  0291                     	;# 
  1774  0291                     	;# 
  1775  0292                     	;# 
  1776  0293                     	;# 
  1777  0294                     	;# 
  1778  0295                     	;# 
  1779  0295                     	;# 
  1780  0296                     	;# 
  1781  0298                     	;# 
  1782  0298                     	;# 
  1783  0299                     	;# 
  1784  029A                     	;# 
  1785  029B                     	;# 
  1786  029C                     	;# 
  1787  029D                     	;# 
  1788  029E                     	;# 
  1789  0311                     	;# 
  1790  0311                     	;# 
  1791  0312                     	;# 
  1792  0313                     	;# 
  1793  0318                     	;# 
  1794  0318                     	;# 
  1795  0319                     	;# 
  1796  031A                     	;# 
  1797  038C                     	;# 
  1798  038D                     	;# 
  1799  038E                     	;# 
  1800  0391                     	;# 
  1801  0392                     	;# 
  1802  0393                     	;# 
  1803  0394                     	;# 
  1804  0395                     	;# 
  1805  0396                     	;# 
  1806  039A                     	;# 
  1807  039C                     	;# 
  1808  039D                     	;# 
  1809  039E                     	;# 
  1810  039F                     	;# 
  1811  0415                     	;# 
  1812  0416                     	;# 
  1813  0417                     	;# 
  1814  041C                     	;# 
  1815  041D                     	;# 
  1816  041E                     	;# 
  1817  0FE4                     	;# 
  1818  0FE5                     	;# 
  1819  0FE6                     	;# 
  1820  0FE7                     	;# 
  1821  0FE8                     	;# 
  1822  0FE9                     	;# 
  1823  0FEA                     	;# 
  1824  0FEB                     	;# 
  1825  0FED                     	;# 
  1826  0FEE                     	;# 
  1827  0FEF                     	;# 
  1828  0000                     	;# 
  1829  0001                     	;# 
  1830  0002                     	;# 
  1831  0003                     	;# 
  1832  0004                     	;# 
  1833  0005                     	;# 
  1834  0006                     	;# 
  1835  0007                     	;# 
  1836  0008                     	;# 
  1837  0009                     	;# 
  1838  000A                     	;# 
  1839  000B                     	;# 
  1840  000C                     	;# 
  1841  000D                     	;# 
  1842  000E                     	;# 
  1843  0011                     	;# 
  1844  0012                     	;# 
  1845  0013                     	;# 
  1846  0014                     	;# 
  1847  0015                     	;# 
  1848  0016                     	;# 
  1849  0016                     	;# 
  1850  0017                     	;# 
  1851  0018                     	;# 
  1852  0019                     	;# 
  1853  001A                     	;# 
  1854  001B                     	;# 
  1855  001C                     	;# 
  1856  001E                     	;# 
  1857  001F                     	;# 
  1858  008C                     	;# 
  1859  008D                     	;# 
  1860  008E                     	;# 
  1861  0091                     	;# 
  1862  0092                     	;# 
  1863  0093                     	;# 
  1864  0094                     	;# 
  1865  0095                     	;# 
  1866  0096                     	;# 
  1867  0097                     	;# 
  1868  0098                     	;# 
  1869  0099                     	;# 
  1870  009A                     	;# 
  1871  009B                     	;# 
  1872  009B                     	;# 
  1873  009C                     	;# 
  1874  009D                     	;# 
  1875  009E                     	;# 
  1876  010C                     	;# 
  1877  010D                     	;# 
  1878  010E                     	;# 
  1879  0111                     	;# 
  1880  0112                     	;# 
  1881  0113                     	;# 
  1882  0114                     	;# 
  1883  0115                     	;# 
  1884  0116                     	;# 
  1885  0117                     	;# 
  1886  0118                     	;# 
  1887  0119                     	;# 
  1888  011A                     	;# 
  1889  011B                     	;# 
  1890  011D                     	;# 
  1891  011E                     	;# 
  1892  018C                     	;# 
  1893  018D                     	;# 
  1894  018E                     	;# 
  1895  0191                     	;# 
  1896  0191                     	;# 
  1897  0192                     	;# 
  1898  0193                     	;# 
  1899  0193                     	;# 
  1900  0193                     	;# 
  1901  0194                     	;# 
  1902  0195                     	;# 
  1903  0196                     	;# 
  1904  0199                     	;# 
  1905  019A                     	;# 
  1906  019B                     	;# 
  1907  019B                     	;# 
  1908  019B                     	;# 
  1909  019B                     	;# 
  1910  019C                     	;# 
  1911  019C                     	;# 
  1912  019D                     	;# 
  1913  019E                     	;# 
  1914  019F                     	;# 
  1915  020C                     	;# 
  1916  020D                     	;# 
  1917  020E                     	;# 
  1918  0211                     	;# 
  1919  0211                     	;# 
  1920  0212                     	;# 
  1921  0212                     	;# 
  1922  0213                     	;# 
  1923  0213                     	;# 
  1924  0214                     	;# 
  1925  0214                     	;# 
  1926  0215                     	;# 
  1927  0215                     	;# 
  1928  0215                     	;# 
  1929  0216                     	;# 
  1930  0216                     	;# 
  1931  0217                     	;# 
  1932  0217                     	;# 
  1933  0219                     	;# 
  1934  021A                     	;# 
  1935  021B                     	;# 
  1936  021C                     	;# 
  1937  021D                     	;# 
  1938  021E                     	;# 
  1939  021F                     	;# 
  1940  0291                     	;# 
  1941  0291                     	;# 
  1942  0292                     	;# 
  1943  0293                     	;# 
  1944  0294                     	;# 
  1945  0295                     	;# 
  1946  0295                     	;# 
  1947  0296                     	;# 
  1948  0298                     	;# 
  1949  0298                     	;# 
  1950  0299                     	;# 
  1951  029A                     	;# 
  1952  029B                     	;# 
  1953  029C                     	;# 
  1954  029D                     	;# 
  1955  029E                     	;# 
  1956  0311                     	;# 
  1957  0311                     	;# 
  1958  0312                     	;# 
  1959  0313                     	;# 
  1960  0318                     	;# 
  1961  0318                     	;# 
  1962  0319                     	;# 
  1963  031A                     	;# 
  1964  038C                     	;# 
  1965  038D                     	;# 
  1966  038E                     	;# 
  1967  0391                     	;# 
  1968  0392                     	;# 
  1969  0393                     	;# 
  1970  0394                     	;# 
  1971  0395                     	;# 
  1972  0396                     	;# 
  1973  039A                     	;# 
  1974  039C                     	;# 
  1975  039D                     	;# 
  1976  039E                     	;# 
  1977  039F                     	;# 
  1978  0415                     	;# 
  1979  0416                     	;# 
  1980  0417                     	;# 
  1981  041C                     	;# 
  1982  041D                     	;# 
  1983  041E                     	;# 
  1984  0FE4                     	;# 
  1985  0FE5                     	;# 
  1986  0FE6                     	;# 
  1987  0FE7                     	;# 
  1988  0FE8                     	;# 
  1989  0FE9                     	;# 
  1990  0FEA                     	;# 
  1991  0FEB                     	;# 
  1992  0FED                     	;# 
  1993  0FEE                     	;# 
  1994  0FEF                     	;# 
  1995  0000                     	;# 
  1996  0001                     	;# 
  1997  0002                     	;# 
  1998  0003                     	;# 
  1999  0004                     	;# 
  2000  0005                     	;# 
  2001  0006                     	;# 
  2002  0007                     	;# 
  2003  0008                     	;# 
  2004  0009                     	;# 
  2005  000A                     	;# 
  2006  000B                     	;# 
  2007  000C                     	;# 
  2008  000D                     	;# 
  2009  000E                     	;# 
  2010  0011                     	;# 
  2011  0012                     	;# 
  2012  0013                     	;# 
  2013  0014                     	;# 
  2014  0015                     	;# 
  2015  0016                     	;# 
  2016  0016                     	;# 
  2017  0017                     	;# 
  2018  0018                     	;# 
  2019  0019                     	;# 
  2020  001A                     	;# 
  2021  001B                     	;# 
  2022  001C                     	;# 
  2023  001E                     	;# 
  2024  001F                     	;# 
  2025  008C                     	;# 
  2026  008D                     	;# 
  2027  008E                     	;# 
  2028  0091                     	;# 
  2029  0092                     	;# 
  2030  0093                     	;# 
  2031  0094                     	;# 
  2032  0095                     	;# 
  2033  0096                     	;# 
  2034  0097                     	;# 
  2035  0098                     	;# 
  2036  0099                     	;# 
  2037  009A                     	;# 
  2038  009B                     	;# 
  2039  009B                     	;# 
  2040  009C                     	;# 
  2041  009D                     	;# 
  2042  009E                     	;# 
  2043  010C                     	;# 
  2044  010D                     	;# 
  2045  010E                     	;# 
  2046  0111                     	;# 
  2047  0112                     	;# 
  2048  0113                     	;# 
  2049  0114                     	;# 
  2050  0115                     	;# 
  2051  0116                     	;# 
  2052  0117                     	;# 
  2053  0118                     	;# 
  2054  0119                     	;# 
  2055  011A                     	;# 
  2056  011B                     	;# 
  2057  011D                     	;# 
  2058  011E                     	;# 
  2059  018C                     	;# 
  2060  018D                     	;# 
  2061  018E                     	;# 
  2062  0191                     	;# 
  2063  0191                     	;# 
  2064  0192                     	;# 
  2065  0193                     	;# 
  2066  0193                     	;# 
  2067  0193                     	;# 
  2068  0194                     	;# 
  2069  0195                     	;# 
  2070  0196                     	;# 
  2071  0199                     	;# 
  2072  019A                     	;# 
  2073  019B                     	;# 
  2074  019B                     	;# 
  2075  019B                     	;# 
  2076  019B                     	;# 
  2077  019C                     	;# 
  2078  019C                     	;# 
  2079  019D                     	;# 
  2080  019E                     	;# 
  2081  019F                     	;# 
  2082  020C                     	;# 
  2083  020D                     	;# 
  2084  020E                     	;# 
  2085  0211                     	;# 
  2086  0211                     	;# 
  2087  0212                     	;# 
  2088  0212                     	;# 
  2089  0213                     	;# 
  2090  0213                     	;# 
  2091  0214                     	;# 
  2092  0214                     	;# 
  2093  0215                     	;# 
  2094  0215                     	;# 
  2095  0215                     	;# 
  2096  0216                     	;# 
  2097  0216                     	;# 
  2098  0217                     	;# 
  2099  0217                     	;# 
  2100  0219                     	;# 
  2101  021A                     	;# 
  2102  021B                     	;# 
  2103  021C                     	;# 
  2104  021D                     	;# 
  2105  021E                     	;# 
  2106  021F                     	;# 
  2107  0291                     	;# 
  2108  0291                     	;# 
  2109  0292                     	;# 
  2110  0293                     	;# 
  2111  0294                     	;# 
  2112  0295                     	;# 
  2113  0295                     	;# 
  2114  0296                     	;# 
  2115  0298                     	;# 
  2116  0298                     	;# 
  2117  0299                     	;# 
  2118  029A                     	;# 
  2119  029B                     	;# 
  2120  029C                     	;# 
  2121  029D                     	;# 
  2122  029E                     	;# 
  2123  0311                     	;# 
  2124  0311                     	;# 
  2125  0312                     	;# 
  2126  0313                     	;# 
  2127  0318                     	;# 
  2128  0318                     	;# 
  2129  0319                     	;# 
  2130  031A                     	;# 
  2131  038C                     	;# 
  2132  038D                     	;# 
  2133  038E                     	;# 
  2134  0391                     	;# 
  2135  0392                     	;# 
  2136  0393                     	;# 
  2137  0394                     	;# 
  2138  0395                     	;# 
  2139  0396                     	;# 
  2140  039A                     	;# 
  2141  039C                     	;# 
  2142  039D                     	;# 
  2143  039E                     	;# 
  2144  039F                     	;# 
  2145  0415                     	;# 
  2146  0416                     	;# 
  2147  0417                     	;# 
  2148  041C                     	;# 
  2149  041D                     	;# 
  2150  041E                     	;# 
  2151  0FE4                     	;# 
  2152  0FE5                     	;# 
  2153  0FE6                     	;# 
  2154  0FE7                     	;# 
  2155  0FE8                     	;# 
  2156  0FE9                     	;# 
  2157  0FEA                     	;# 
  2158  0FEB                     	;# 
  2159  0FED                     	;# 
  2160  0FEE                     	;# 
  2161  0FEF                     	;# 
  2162  0000                     	;# 
  2163  0001                     	;# 
  2164  0002                     	;# 
  2165  0003                     	;# 
  2166  0004                     	;# 
  2167  0005                     	;# 
  2168  0006                     	;# 
  2169  0007                     	;# 
  2170  0008                     	;# 
  2171  0009                     	;# 
  2172  000A                     	;# 
  2173  000B                     	;# 
  2174  000C                     	;# 
  2175  000D                     	;# 
  2176  000E                     	;# 
  2177  0011                     	;# 
  2178  0012                     	;# 
  2179  0013                     	;# 
  2180  0014                     	;# 
  2181  0015                     	;# 
  2182  0016                     	;# 
  2183  0016                     	;# 
  2184  0017                     	;# 
  2185  0018                     	;# 
  2186  0019                     	;# 
  2187  001A                     	;# 
  2188  001B                     	;# 
  2189  001C                     	;# 
  2190  001E                     	;# 
  2191  001F                     	;# 
  2192  008C                     	;# 
  2193  008D                     	;# 
  2194  008E                     	;# 
  2195  0091                     	;# 
  2196  0092                     	;# 
  2197  0093                     	;# 
  2198  0094                     	;# 
  2199  0095                     	;# 
  2200  0096                     	;# 
  2201  0097                     	;# 
  2202  0098                     	;# 
  2203  0099                     	;# 
  2204  009A                     	;# 
  2205  009B                     	;# 
  2206  009B                     	;# 
  2207  009C                     	;# 
  2208  009D                     	;# 
  2209  009E                     	;# 
  2210  010C                     	;# 
  2211  010D                     	;# 
  2212  010E                     	;# 
  2213  0111                     	;# 
  2214  0112                     	;# 
  2215  0113                     	;# 
  2216  0114                     	;# 
  2217  0115                     	;# 
  2218  0116                     	;# 
  2219  0117                     	;# 
  2220  0118                     	;# 
  2221  0119                     	;# 
  2222  011A                     	;# 
  2223  011B                     	;# 
  2224  011D                     	;# 
  2225  011E                     	;# 
  2226  018C                     	;# 
  2227  018D                     	;# 
  2228  018E                     	;# 
  2229  0191                     	;# 
  2230  0191                     	;# 
  2231  0192                     	;# 
  2232  0193                     	;# 
  2233  0193                     	;# 
  2234  0193                     	;# 
  2235  0194                     	;# 
  2236  0195                     	;# 
  2237  0196                     	;# 
  2238  0199                     	;# 
  2239  019A                     	;# 
  2240  019B                     	;# 
  2241  019B                     	;# 
  2242  019B                     	;# 
  2243  019B                     	;# 
  2244  019C                     	;# 
  2245  019C                     	;# 
  2246  019D                     	;# 
  2247  019E                     	;# 
  2248  019F                     	;# 
  2249  020C                     	;# 
  2250  020D                     	;# 
  2251  020E                     	;# 
  2252  0211                     	;# 
  2253  0211                     	;# 
  2254  0212                     	;# 
  2255  0212                     	;# 
  2256  0213                     	;# 
  2257  0213                     	;# 
  2258  0214                     	;# 
  2259  0214                     	;# 
  2260  0215                     	;# 
  2261  0215                     	;# 
  2262  0215                     	;# 
  2263  0216                     	;# 
  2264  0216                     	;# 
  2265  0217                     	;# 
  2266  0217                     	;# 
  2267  0219                     	;# 
  2268  021A                     	;# 
  2269  021B                     	;# 
  2270  021C                     	;# 
  2271  021D                     	;# 
  2272  021E                     	;# 
  2273  021F                     	;# 
  2274  0291                     	;# 
  2275  0291                     	;# 
  2276  0292                     	;# 
  2277  0293                     	;# 
  2278  0294                     	;# 
  2279  0295                     	;# 
  2280  0295                     	;# 
  2281  0296                     	;# 
  2282  0298                     	;# 
  2283  0298                     	;# 
  2284  0299                     	;# 
  2285  029A                     	;# 
  2286  029B                     	;# 
  2287  029C                     	;# 
  2288  029D                     	;# 
  2289  029E                     	;# 
  2290  0311                     	;# 
  2291  0311                     	;# 
  2292  0312                     	;# 
  2293  0313                     	;# 
  2294  0318                     	;# 
  2295  0318                     	;# 
  2296  0319                     	;# 
  2297  031A                     	;# 
  2298  038C                     	;# 
  2299  038D                     	;# 
  2300  038E                     	;# 
  2301  0391                     	;# 
  2302  0392                     	;# 
  2303  0393                     	;# 
  2304  0394                     	;# 
  2305  0395                     	;# 
  2306  0396                     	;# 
  2307  039A                     	;# 
  2308  039C                     	;# 
  2309  039D                     	;# 
  2310  039E                     	;# 
  2311  039F                     	;# 
  2312  0415                     	;# 
  2313  0416                     	;# 
  2314  0417                     	;# 
  2315  041C                     	;# 
  2316  041D                     	;# 
  2317  041E                     	;# 
  2318  0FE4                     	;# 
  2319  0FE5                     	;# 
  2320  0FE6                     	;# 
  2321  0FE7                     	;# 
  2322  0FE8                     	;# 
  2323  0FE9                     	;# 
  2324  0FEA                     	;# 
  2325  0FEB                     	;# 
  2326  0FED                     	;# 
  2327  0FEE                     	;# 
  2328  0FEF                     	;# 
  2329  0000                     	;# 
  2330  0001                     	;# 
  2331  0002                     	;# 
  2332  0003                     	;# 
  2333  0004                     	;# 
  2334  0005                     	;# 
  2335  0006                     	;# 
  2336  0007                     	;# 
  2337  0008                     	;# 
  2338  0009                     	;# 
  2339  000A                     	;# 
  2340  000B                     	;# 
  2341  000C                     	;# 
  2342  000D                     	;# 
  2343  000E                     	;# 
  2344  0011                     	;# 
  2345  0012                     	;# 
  2346  0013                     	;# 
  2347  0014                     	;# 
  2348  0015                     	;# 
  2349  0016                     	;# 
  2350  0016                     	;# 
  2351  0017                     	;# 
  2352  0018                     	;# 
  2353  0019                     	;# 
  2354  001A                     	;# 
  2355  001B                     	;# 
  2356  001C                     	;# 
  2357  001E                     	;# 
  2358  001F                     	;# 
  2359  008C                     	;# 
  2360  008D                     	;# 
  2361  008E                     	;# 
  2362  0091                     	;# 
  2363  0092                     	;# 
  2364  0093                     	;# 
  2365  0094                     	;# 
  2366  0095                     	;# 
  2367  0096                     	;# 
  2368  0097                     	;# 
  2369  0098                     	;# 
  2370  0099                     	;# 
  2371  009A                     	;# 
  2372  009B                     	;# 
  2373  009B                     	;# 
  2374  009C                     	;# 
  2375  009D                     	;# 
  2376  009E                     	;# 
  2377  010C                     	;# 
  2378  010D                     	;# 
  2379  010E                     	;# 
  2380  0111                     	;# 
  2381  0112                     	;# 
  2382  0113                     	;# 
  2383  0114                     	;# 
  2384  0115                     	;# 
  2385  0116                     	;# 
  2386  0117                     	;# 
  2387  0118                     	;# 
  2388  0119                     	;# 
  2389  011A                     	;# 
  2390  011B                     	;# 
  2391  011D                     	;# 
  2392  011E                     	;# 
  2393  018C                     	;# 
  2394  018D                     	;# 
  2395  018E                     	;# 
  2396  0191                     	;# 
  2397  0191                     	;# 
  2398  0192                     	;# 
  2399  0193                     	;# 
  2400  0193                     	;# 
  2401  0193                     	;# 
  2402  0194                     	;# 
  2403  0195                     	;# 
  2404  0196                     	;# 
  2405  0199                     	;# 
  2406  019A                     	;# 
  2407  019B                     	;# 
  2408  019B                     	;# 
  2409  019B                     	;# 
  2410  019B                     	;# 
  2411  019C                     	;# 
  2412  019C                     	;# 
  2413  019D                     	;# 
  2414  019E                     	;# 
  2415  019F                     	;# 
  2416  020C                     	;# 
  2417  020D                     	;# 
  2418  020E                     	;# 
  2419  0211                     	;# 
  2420  0211                     	;# 
  2421  0212                     	;# 
  2422  0212                     	;# 
  2423  0213                     	;# 
  2424  0213                     	;# 
  2425  0214                     	;# 
  2426  0214                     	;# 
  2427  0215                     	;# 
  2428  0215                     	;# 
  2429  0215                     	;# 
  2430  0216                     	;# 
  2431  0216                     	;# 
  2432  0217                     	;# 
  2433  0217                     	;# 
  2434  0219                     	;# 
  2435  021A                     	;# 
  2436  021B                     	;# 
  2437  021C                     	;# 
  2438  021D                     	;# 
  2439  021E                     	;# 
  2440  021F                     	;# 
  2441  0291                     	;# 
  2442  0291                     	;# 
  2443  0292                     	;# 
  2444  0293                     	;# 
  2445  0294                     	;# 
  2446  0295                     	;# 
  2447  0295                     	;# 
  2448  0296                     	;# 
  2449  0298                     	;# 
  2450  0298                     	;# 
  2451  0299                     	;# 
  2452  029A                     	;# 
  2453  029B                     	;# 
  2454  029C                     	;# 
  2455  029D                     	;# 
  2456  029E                     	;# 
  2457  0311                     	;# 
  2458  0311                     	;# 
  2459  0312                     	;# 
  2460  0313                     	;# 
  2461  0318                     	;# 
  2462  0318                     	;# 
  2463  0319                     	;# 
  2464  031A                     	;# 
  2465  038C                     	;# 
  2466  038D                     	;# 
  2467  038E                     	;# 
  2468  0391                     	;# 
  2469  0392                     	;# 
  2470  0393                     	;# 
  2471  0394                     	;# 
  2472  0395                     	;# 
  2473  0396                     	;# 
  2474  039A                     	;# 
  2475  039C                     	;# 
  2476  039D                     	;# 
  2477  039E                     	;# 
  2478  039F                     	;# 
  2479  0415                     	;# 
  2480  0416                     	;# 
  2481  0417                     	;# 
  2482  041C                     	;# 
  2483  041D                     	;# 
  2484  041E                     	;# 
  2485  0FE4                     	;# 
  2486  0FE5                     	;# 
  2487  0FE6                     	;# 
  2488  0FE7                     	;# 
  2489  0FE8                     	;# 
  2490  0FE9                     	;# 
  2491  0FEA                     	;# 
  2492  0FEB                     	;# 
  2493  0FED                     	;# 
  2494  0FEE                     	;# 
  2495  0FEF                     	;# 
  2496  0000                     	;# 
  2497  0001                     	;# 
  2498  0002                     	;# 
  2499  0003                     	;# 
  2500  0004                     	;# 
  2501  0005                     	;# 
  2502  0006                     	;# 
  2503  0007                     	;# 
  2504  0008                     	;# 
  2505  0009                     	;# 
  2506  000A                     	;# 
  2507  000B                     	;# 
  2508  000C                     	;# 
  2509  000D                     	;# 
  2510  000E                     	;# 
  2511  0011                     	;# 
  2512  0012                     	;# 
  2513  0013                     	;# 
  2514  0014                     	;# 
  2515  0015                     	;# 
  2516  0016                     	;# 
  2517  0016                     	;# 
  2518  0017                     	;# 
  2519  0018                     	;# 
  2520  0019                     	;# 
  2521  001A                     	;# 
  2522  001B                     	;# 
  2523  001C                     	;# 
  2524  001E                     	;# 
  2525  001F                     	;# 
  2526  008C                     	;# 
  2527  008D                     	;# 
  2528  008E                     	;# 
  2529  0091                     	;# 
  2530  0092                     	;# 
  2531  0093                     	;# 
  2532  0094                     	;# 
  2533  0095                     	;# 
  2534  0096                     	;# 
  2535  0097                     	;# 
  2536  0098                     	;# 
  2537  0099                     	;# 
  2538  009A                     	;# 
  2539  009B                     	;# 
  2540  009B                     	;# 
  2541  009C                     	;# 
  2542  009D                     	;# 
  2543  009E                     	;# 
  2544  010C                     	;# 
  2545  010D                     	;# 
  2546  010E                     	;# 
  2547  0111                     	;# 
  2548  0112                     	;# 
  2549  0113                     	;# 
  2550  0114                     	;# 
  2551  0115                     	;# 
  2552  0116                     	;# 
  2553  0117                     	;# 
  2554  0118                     	;# 
  2555  0119                     	;# 
  2556  011A                     	;# 
  2557  011B                     	;# 
  2558  011D                     	;# 
  2559  011E                     	;# 
  2560  018C                     	;# 
  2561  018D                     	;# 
  2562  018E                     	;# 
  2563  0191                     	;# 
  2564  0191                     	;# 
  2565  0192                     	;# 
  2566  0193                     	;# 
  2567  0193                     	;# 
  2568  0193                     	;# 
  2569  0194                     	;# 
  2570  0195                     	;# 
  2571  0196                     	;# 
  2572  0199                     	;# 
  2573  019A                     	;# 
  2574  019B                     	;# 
  2575  019B                     	;# 
  2576  019B                     	;# 
  2577  019B                     	;# 
  2578  019C                     	;# 
  2579  019C                     	;# 
  2580  019D                     	;# 
  2581  019E                     	;# 
  2582  019F                     	;# 
  2583  020C                     	;# 
  2584  020D                     	;# 
  2585  020E                     	;# 
  2586  0211                     	;# 
  2587  0211                     	;# 
  2588  0212                     	;# 
  2589  0212                     	;# 
  2590  0213                     	;# 
  2591  0213                     	;# 
  2592  0214                     	;# 
  2593  0214                     	;# 
  2594  0215                     	;# 
  2595  0215                     	;# 
  2596  0215                     	;# 
  2597  0216                     	;# 
  2598  0216                     	;# 
  2599  0217                     	;# 
  2600  0217                     	;# 
  2601  0219                     	;# 
  2602  021A                     	;# 
  2603  021B                     	;# 
  2604  021C                     	;# 
  2605  021D                     	;# 
  2606  021E                     	;# 
  2607  021F                     	;# 
  2608  0291                     	;# 
  2609  0291                     	;# 
  2610  0292                     	;# 
  2611  0293                     	;# 
  2612  0294                     	;# 
  2613  0295                     	;# 
  2614  0295                     	;# 
  2615  0296                     	;# 
  2616  0298                     	;# 
  2617  0298                     	;# 
  2618  0299                     	;# 
  2619  029A                     	;# 
  2620  029B                     	;# 
  2621  029C                     	;# 
  2622  029D                     	;# 
  2623  029E                     	;# 
  2624  0311                     	;# 
  2625  0311                     	;# 
  2626  0312                     	;# 
  2627  0313                     	;# 
  2628  0318                     	;# 
  2629  0318                     	;# 
  2630  0319                     	;# 
  2631  031A                     	;# 
  2632  038C                     	;# 
  2633  038D                     	;# 
  2634  038E                     	;# 
  2635  0391                     	;# 
  2636  0392                     	;# 
  2637  0393                     	;# 
  2638  0394                     	;# 
  2639  0395                     	;# 
  2640  0396                     	;# 
  2641  039A                     	;# 
  2642  039C                     	;# 
  2643  039D                     	;# 
  2644  039E                     	;# 
  2645  039F                     	;# 
  2646  0415                     	;# 
  2647  0416                     	;# 
  2648  0417                     	;# 
  2649  041C                     	;# 
  2650  041D                     	;# 
  2651  041E                     	;# 
  2652  0FE4                     	;# 
  2653  0FE5                     	;# 
  2654  0FE6                     	;# 
  2655  0FE7                     	;# 
  2656  0FE8                     	;# 
  2657  0FE9                     	;# 
  2658  0FEA                     	;# 
  2659  0FEB                     	;# 
  2660  0FED                     	;# 
  2661  0FEE                     	;# 
  2662  0FEF                     	;# 
  2663  0000                     	;# 
  2664  0001                     	;# 
  2665  0002                     	;# 
  2666  0003                     	;# 
  2667  0004                     	;# 
  2668  0005                     	;# 
  2669  0006                     	;# 
  2670  0007                     	;# 
  2671  0008                     	;# 
  2672  0009                     	;# 
  2673  000A                     	;# 
  2674  000B                     	;# 
  2675  000C                     	;# 
  2676  000D                     	;# 
  2677  000E                     	;# 
  2678  0011                     	;# 
  2679  0012                     	;# 
  2680  0013                     	;# 
  2681  0014                     	;# 
  2682  0015                     	;# 
  2683  0016                     	;# 
  2684  0016                     	;# 
  2685  0017                     	;# 
  2686  0018                     	;# 
  2687  0019                     	;# 
  2688  001A                     	;# 
  2689  001B                     	;# 
  2690  001C                     	;# 
  2691  001E                     	;# 
  2692  001F                     	;# 
  2693  008C                     	;# 
  2694  008D                     	;# 
  2695  008E                     	;# 
  2696  0091                     	;# 
  2697  0092                     	;# 
  2698  0093                     	;# 
  2699  0094                     	;# 
  2700  0095                     	;# 
  2701  0096                     	;# 
  2702  0097                     	;# 
  2703  0098                     	;# 
  2704  0099                     	;# 
  2705  009A                     	;# 
  2706  009B                     	;# 
  2707  009B                     	;# 
  2708  009C                     	;# 
  2709  009D                     	;# 
  2710  009E                     	;# 
  2711  010C                     	;# 
  2712  010D                     	;# 
  2713  010E                     	;# 
  2714  0111                     	;# 
  2715  0112                     	;# 
  2716  0113                     	;# 
  2717  0114                     	;# 
  2718  0115                     	;# 
  2719  0116                     	;# 
  2720  0117                     	;# 
  2721  0118                     	;# 
  2722  0119                     	;# 
  2723  011A                     	;# 
  2724  011B                     	;# 
  2725  011D                     	;# 
  2726  011E                     	;# 
  2727  018C                     	;# 
  2728  018D                     	;# 
  2729  018E                     	;# 
  2730  0191                     	;# 
  2731  0191                     	;# 
  2732  0192                     	;# 
  2733  0193                     	;# 
  2734  0193                     	;# 
  2735  0193                     	;# 
  2736  0194                     	;# 
  2737  0195                     	;# 
  2738  0196                     	;# 
  2739  0199                     	;# 
  2740  019A                     	;# 
  2741  019B                     	;# 
  2742  019B                     	;# 
  2743  019B                     	;# 
  2744  019B                     	;# 
  2745  019C                     	;# 
  2746  019C                     	;# 
  2747  019D                     	;# 
  2748  019E                     	;# 
  2749  019F                     	;# 
  2750  020C                     	;# 
  2751  020D                     	;# 
  2752  020E                     	;# 
  2753  0211                     	;# 
  2754  0211                     	;# 
  2755  0212                     	;# 
  2756  0212                     	;# 
  2757  0213                     	;# 
  2758  0213                     	;# 
  2759  0214                     	;# 
  2760  0214                     	;# 
  2761  0215                     	;# 
  2762  0215                     	;# 
  2763  0215                     	;# 
  2764  0216                     	;# 
  2765  0216                     	;# 
  2766  0217                     	;# 
  2767  0217                     	;# 
  2768  0219                     	;# 
  2769  021A                     	;# 
  2770  021B                     	;# 
  2771  021C                     	;# 
  2772  021D                     	;# 
  2773  021E                     	;# 
  2774  021F                     	;# 
  2775  0291                     	;# 
  2776  0291                     	;# 
  2777  0292                     	;# 
  2778  0293                     	;# 
  2779  0294                     	;# 
  2780  0295                     	;# 
  2781  0295                     	;# 
  2782  0296                     	;# 
  2783  0298                     	;# 
  2784  0298                     	;# 
  2785  0299                     	;# 
  2786  029A                     	;# 
  2787  029B                     	;# 
  2788  029C                     	;# 
  2789  029D                     	;# 
  2790  029E                     	;# 
  2791  0311                     	;# 
  2792  0311                     	;# 
  2793  0312                     	;# 
  2794  0313                     	;# 
  2795  0318                     	;# 
  2796  0318                     	;# 
  2797  0319                     	;# 
  2798  031A                     	;# 
  2799  038C                     	;# 
  2800  038D                     	;# 
  2801  038E                     	;# 
  2802  0391                     	;# 
  2803  0392                     	;# 
  2804  0393                     	;# 
  2805  0394                     	;# 
  2806  0395                     	;# 
  2807  0396                     	;# 
  2808  039A                     	;# 
  2809  039C                     	;# 
  2810  039D                     	;# 
  2811  039E                     	;# 
  2812  039F                     	;# 
  2813  0415                     	;# 
  2814  0416                     	;# 
  2815  0417                     	;# 
  2816  041C                     	;# 
  2817  041D                     	;# 
  2818  041E                     	;# 
  2819  0FE4                     	;# 
  2820  0FE5                     	;# 
  2821  0FE6                     	;# 
  2822  0FE7                     	;# 
  2823  0FE8                     	;# 
  2824  0FE9                     	;# 
  2825  0FEA                     	;# 
  2826  0FEB                     	;# 
  2827  0FED                     	;# 
  2828  0FEE                     	;# 
  2829  0FEF                     	;# 
  2830  0000                     	;# 
  2831  0001                     	;# 
  2832  0002                     	;# 
  2833  0003                     	;# 
  2834  0004                     	;# 
  2835  0005                     	;# 
  2836  0006                     	;# 
  2837  0007                     	;# 
  2838  0008                     	;# 
  2839  0009                     	;# 
  2840  000A                     	;# 
  2841  000B                     	;# 
  2842  000C                     	;# 
  2843  000D                     	;# 
  2844  000E                     	;# 
  2845  0011                     	;# 
  2846  0012                     	;# 
  2847  0013                     	;# 
  2848  0014                     	;# 
  2849  0015                     	;# 
  2850  0016                     	;# 
  2851  0016                     	;# 
  2852  0017                     	;# 
  2853  0018                     	;# 
  2854  0019                     	;# 
  2855  001A                     	;# 
  2856  001B                     	;# 
  2857  001C                     	;# 
  2858  001E                     	;# 
  2859  001F                     	;# 
  2860  008C                     	;# 
  2861  008D                     	;# 
  2862  008E                     	;# 
  2863  0091                     	;# 
  2864  0092                     	;# 
  2865  0093                     	;# 
  2866  0094                     	;# 
  2867  0095                     	;# 
  2868  0096                     	;# 
  2869  0097                     	;# 
  2870  0098                     	;# 
  2871  0099                     	;# 
  2872  009A                     	;# 
  2873  009B                     	;# 
  2874  009B                     	;# 
  2875  009C                     	;# 
  2876  009D                     	;# 
  2877  009E                     	;# 
  2878  010C                     	;# 
  2879  010D                     	;# 
  2880  010E                     	;# 
  2881  0111                     	;# 
  2882  0112                     	;# 
  2883  0113                     	;# 
  2884  0114                     	;# 
  2885  0115                     	;# 
  2886  0116                     	;# 
  2887  0117                     	;# 
  2888  0118                     	;# 
  2889  0119                     	;# 
  2890  011A                     	;# 
  2891  011B                     	;# 
  2892  011D                     	;# 
  2893  011E                     	;# 
  2894  018C                     	;# 
  2895  018D                     	;# 
  2896  018E                     	;# 
  2897  0191                     	;# 
  2898  0191                     	;# 
  2899  0192                     	;# 
  2900  0193                     	;# 
  2901  0193                     	;# 
  2902  0193                     	;# 
  2903  0194                     	;# 
  2904  0195                     	;# 
  2905  0196                     	;# 
  2906  0199                     	;# 
  2907  019A                     	;# 
  2908  019B                     	;# 
  2909  019B                     	;# 
  2910  019B                     	;# 
  2911  019B                     	;# 
  2912  019C                     	;# 
  2913  019C                     	;# 
  2914  019D                     	;# 
  2915  019E                     	;# 
  2916  019F                     	;# 
  2917  020C                     	;# 
  2918  020D                     	;# 
  2919  020E                     	;# 
  2920  0211                     	;# 
  2921  0211                     	;# 
  2922  0212                     	;# 
  2923  0212                     	;# 
  2924  0213                     	;# 
  2925  0213                     	;# 
  2926  0214                     	;# 
  2927  0214                     	;# 
  2928  0215                     	;# 
  2929  0215                     	;# 
  2930  0215                     	;# 
  2931  0216                     	;# 
  2932  0216                     	;# 
  2933  0217                     	;# 
  2934  0217                     	;# 
  2935  0219                     	;# 
  2936  021A                     	;# 
  2937  021B                     	;# 
  2938  021C                     	;# 
  2939  021D                     	;# 
  2940  021E                     	;# 
  2941  021F                     	;# 
  2942  0291                     	;# 
  2943  0291                     	;# 
  2944  0292                     	;# 
  2945  0293                     	;# 
  2946  0294                     	;# 
  2947  0295                     	;# 
  2948  0295                     	;# 
  2949  0296                     	;# 
  2950  0298                     	;# 
  2951  0298                     	;# 
  2952  0299                     	;# 
  2953  029A                     	;# 
  2954  029B                     	;# 
  2955  029C                     	;# 
  2956  029D                     	;# 
  2957  029E                     	;# 
  2958  0311                     	;# 
  2959  0311                     	;# 
  2960  0312                     	;# 
  2961  0313                     	;# 
  2962  0318                     	;# 
  2963  0318                     	;# 
  2964  0319                     	;# 
  2965  031A                     	;# 
  2966  038C                     	;# 
  2967  038D                     	;# 
  2968  038E                     	;# 
  2969  0391                     	;# 
  2970  0392                     	;# 
  2971  0393                     	;# 
  2972  0394                     	;# 
  2973  0395                     	;# 
  2974  0396                     	;# 
  2975  039A                     	;# 
  2976  039C                     	;# 
  2977  039D                     	;# 
  2978  039E                     	;# 
  2979  039F                     	;# 
  2980  0415                     	;# 
  2981  0416                     	;# 
  2982  0417                     	;# 
  2983  041C                     	;# 
  2984  041D                     	;# 
  2985  041E                     	;# 
  2986  0FE4                     	;# 
  2987  0FE5                     	;# 
  2988  0FE6                     	;# 
  2989  0FE7                     	;# 
  2990  0FE8                     	;# 
  2991  0FE9                     	;# 
  2992  0FEA                     	;# 
  2993  0FEB                     	;# 
  2994  0FED                     	;# 
  2995  0FEE                     	;# 
  2996  0FEF                     	;# 
  2997  0000                     	;# 
  2998  0001                     	;# 
  2999  0002                     	;# 
  3000  0003                     	;# 
  3001  0004                     	;# 
  3002  0005                     	;# 
  3003  0006                     	;# 
  3004  0007                     	;# 
  3005  0008                     	;# 
  3006  0009                     	;# 
  3007  000A                     	;# 
  3008  000B                     	;# 
  3009  000C                     	;# 
  3010  000D                     	;# 
  3011  000E                     	;# 
  3012  0011                     	;# 
  3013  0012                     	;# 
  3014  0013                     	;# 
  3015  0014                     	;# 
  3016  0015                     	;# 
  3017  0016                     	;# 
  3018  0016                     	;# 
  3019  0017                     	;# 
  3020  0018                     	;# 
  3021  0019                     	;# 
  3022  001A                     	;# 
  3023  001B                     	;# 
  3024  001C                     	;# 
  3025  001E                     	;# 
  3026  001F                     	;# 
  3027  008C                     	;# 
  3028  008D                     	;# 
  3029  008E                     	;# 
  3030  0091                     	;# 
  3031  0092                     	;# 
  3032  0093                     	;# 
  3033  0094                     	;# 
  3034  0095                     	;# 
  3035  0096                     	;# 
  3036  0097                     	;# 
  3037  0098                     	;# 
  3038  0099                     	;# 
  3039  009A                     	;# 
  3040  009B                     	;# 
  3041  009B                     	;# 
  3042  009C                     	;# 
  3043  009D                     	;# 
  3044  009E                     	;# 
  3045  010C                     	;# 
  3046  010D                     	;# 
  3047  010E                     	;# 
  3048  0111                     	;# 
  3049  0112                     	;# 
  3050  0113                     	;# 
  3051  0114                     	;# 
  3052  0115                     	;# 
  3053  0116                     	;# 
  3054  0117                     	;# 
  3055  0118                     	;# 
  3056  0119                     	;# 
  3057  011A                     	;# 
  3058  011B                     	;# 
  3059  011D                     	;# 
  3060  011E                     	;# 
  3061  018C                     	;# 
  3062  018D                     	;# 
  3063  018E                     	;# 
  3064  0191                     	;# 
  3065  0191                     	;# 
  3066  0192                     	;# 
  3067  0193                     	;# 
  3068  0193                     	;# 
  3069  0193                     	;# 
  3070  0194                     	;# 
  3071  0195                     	;# 
  3072  0196                     	;# 
  3073  0199                     	;# 
  3074  019A                     	;# 
  3075  019B                     	;# 
  3076  019B                     	;# 
  3077  019B                     	;# 
  3078  019B                     	;# 
  3079  019C                     	;# 
  3080  019C                     	;# 
  3081  019D                     	;# 
  3082  019E                     	;# 
  3083  019F                     	;# 
  3084  020C                     	;# 
  3085  020D                     	;# 
  3086  020E                     	;# 
  3087  0211                     	;# 
  3088  0211                     	;# 
  3089  0212                     	;# 
  3090  0212                     	;# 
  3091  0213                     	;# 
  3092  0213                     	;# 
  3093  0214                     	;# 
  3094  0214                     	;# 
  3095  0215                     	;# 
  3096  0215                     	;# 
  3097  0215                     	;# 
  3098  0216                     	;# 
  3099  0216                     	;# 
  3100  0217                     	;# 
  3101  0217                     	;# 
  3102  0219                     	;# 
  3103  021A                     	;# 
  3104  021B                     	;# 
  3105  021C                     	;# 
  3106  021D                     	;# 
  3107  021E                     	;# 
  3108  021F                     	;# 
  3109  0291                     	;# 
  3110  0291                     	;# 
  3111  0292                     	;# 
  3112  0293                     	;# 
  3113  0294                     	;# 
  3114  0295                     	;# 
  3115  0295                     	;# 
  3116  0296                     	;# 
  3117  0298                     	;# 
  3118  0298                     	;# 
  3119  0299                     	;# 
  3120  029A                     	;# 
  3121  029B                     	;# 
  3122  029C                     	;# 
  3123  029D                     	;# 
  3124  029E                     	;# 
  3125  0311                     	;# 
  3126  0311                     	;# 
  3127  0312                     	;# 
  3128  0313                     	;# 
  3129  0318                     	;# 
  3130  0318                     	;# 
  3131  0319                     	;# 
  3132  031A                     	;# 
  3133  038C                     	;# 
  3134  038D                     	;# 
  3135  038E                     	;# 
  3136  0391                     	;# 
  3137  0392                     	;# 
  3138  0393                     	;# 
  3139  0394                     	;# 
  3140  0395                     	;# 
  3141  0396                     	;# 
  3142  039A                     	;# 
  3143  039C                     	;# 
  3144  039D                     	;# 
  3145  039E                     	;# 
  3146  039F                     	;# 
  3147  0415                     	;# 
  3148  0416                     	;# 
  3149  0417                     	;# 
  3150  041C                     	;# 
  3151  041D                     	;# 
  3152  041E                     	;# 
  3153  0FE4                     	;# 
  3154  0FE5                     	;# 
  3155  0FE6                     	;# 
  3156  0FE7                     	;# 
  3157  0FE8                     	;# 
  3158  0FE9                     	;# 
  3159  0FEA                     	;# 
  3160  0FEB                     	;# 
  3161  0FED                     	;# 
  3162  0FEE                     	;# 
  3163  0FEF                     	;# 
  3164  0000                     	;# 
  3165  0001                     	;# 
  3166  0002                     	;# 
  3167  0003                     	;# 
  3168  0004                     	;# 
  3169  0005                     	;# 
  3170  0006                     	;# 
  3171  0007                     	;# 
  3172  0008                     	;# 
  3173  0009                     	;# 
  3174  000A                     	;# 
  3175  000B                     	;# 
  3176  000C                     	;# 
  3177  000D                     	;# 
  3178  000E                     	;# 
  3179  0011                     	;# 
  3180  0012                     	;# 
  3181  0013                     	;# 
  3182  0014                     	;# 
  3183  0015                     	;# 
  3184  0016                     	;# 
  3185  0016                     	;# 
  3186  0017                     	;# 
  3187  0018                     	;# 
  3188  0019                     	;# 
  3189  001A                     	;# 
  3190  001B                     	;# 
  3191  001C                     	;# 
  3192  001E                     	;# 
  3193  001F                     	;# 
  3194  008C                     	;# 
  3195  008D                     	;# 
  3196  008E                     	;# 
  3197  0091                     	;# 
  3198  0092                     	;# 
  3199  0093                     	;# 
  3200  0094                     	;# 
  3201  0095                     	;# 
  3202  0096                     	;# 
  3203  0097                     	;# 
  3204  0098                     	;# 
  3205  0099                     	;# 
  3206  009A                     	;# 
  3207  009B                     	;# 
  3208  009B                     	;# 
  3209  009C                     	;# 
  3210  009D                     	;# 
  3211  009E                     	;# 
  3212  010C                     	;# 
  3213  010D                     	;# 
  3214  010E                     	;# 
  3215  0111                     	;# 
  3216  0112                     	;# 
  3217  0113                     	;# 
  3218  0114                     	;# 
  3219  0115                     	;# 
  3220  0116                     	;# 
  3221  0117                     	;# 
  3222  0118                     	;# 
  3223  0119                     	;# 
  3224  011A                     	;# 
  3225  011B                     	;# 
  3226  011D                     	;# 
  3227  011E                     	;# 
  3228  018C                     	;# 
  3229  018D                     	;# 
  3230  018E                     	;# 
  3231  0191                     	;# 
  3232  0191                     	;# 
  3233  0192                     	;# 
  3234  0193                     	;# 
  3235  0193                     	;# 
  3236  0193                     	;# 
  3237  0194                     	;# 
  3238  0195                     	;# 
  3239  0196                     	;# 
  3240  0199                     	;# 
  3241  019A                     	;# 
  3242  019B                     	;# 
  3243  019B                     	;# 
  3244  019B                     	;# 
  3245  019B                     	;# 
  3246  019C                     	;# 
  3247  019C                     	;# 
  3248  019D                     	;# 
  3249  019E                     	;# 
  3250  019F                     	;# 
  3251  020C                     	;# 
  3252  020D                     	;# 
  3253  020E                     	;# 
  3254  0211                     	;# 
  3255  0211                     	;# 
  3256  0212                     	;# 
  3257  0212                     	;# 
  3258  0213                     	;# 
  3259  0213                     	;# 
  3260  0214                     	;# 
  3261  0214                     	;# 
  3262  0215                     	;# 
  3263  0215                     	;# 
  3264  0215                     	;# 
  3265  0216                     	;# 
  3266  0216                     	;# 
  3267  0217                     	;# 
  3268  0217                     	;# 
  3269  0219                     	;# 
  3270  021A                     	;# 
  3271  021B                     	;# 
  3272  021C                     	;# 
  3273  021D                     	;# 
  3274  021E                     	;# 
  3275  021F                     	;# 
  3276  0291                     	;# 
  3277  0291                     	;# 
  3278  0292                     	;# 
  3279  0293                     	;# 
  3280  0294                     	;# 
  3281  0295                     	;# 
  3282  0295                     	;# 
  3283  0296                     	;# 
  3284  0298                     	;# 
  3285  0298                     	;# 
  3286  0299                     	;# 
  3287  029A                     	;# 
  3288  029B                     	;# 
  3289  029C                     	;# 
  3290  029D                     	;# 
  3291  029E                     	;# 
  3292  0311                     	;# 
  3293  0311                     	;# 
  3294  0312                     	;# 
  3295  0313                     	;# 
  3296  0318                     	;# 
  3297  0318                     	;# 
  3298  0319                     	;# 
  3299  031A                     	;# 
  3300  038C                     	;# 
  3301  038D                     	;# 
  3302  038E                     	;# 
  3303  0391                     	;# 
  3304  0392                     	;# 
  3305  0393                     	;# 
  3306  0394                     	;# 
  3307  0395                     	;# 
  3308  0396                     	;# 
  3309  039A                     	;# 
  3310  039C                     	;# 
  3311  039D                     	;# 
  3312  039E                     	;# 
  3313  039F                     	;# 
  3314  0415                     	;# 
  3315  0416                     	;# 
  3316  0417                     	;# 
  3317  041C                     	;# 
  3318  041D                     	;# 
  3319  041E                     	;# 
  3320  0FE4                     	;# 
  3321  0FE5                     	;# 
  3322  0FE6                     	;# 
  3323  0FE7                     	;# 
  3324  0FE8                     	;# 
  3325  0FE9                     	;# 
  3326  0FEA                     	;# 
  3327  0FEB                     	;# 
  3328  0FED                     	;# 
  3329  0FEE                     	;# 
  3330  0FEF                     	;# 
  3331  0000                     	;# 
  3332  0001                     	;# 
  3333  0002                     	;# 
  3334  0003                     	;# 
  3335  0004                     	;# 
  3336  0005                     	;# 
  3337  0006                     	;# 
  3338  0007                     	;# 
  3339  0008                     	;# 
  3340  0009                     	;# 
  3341  000A                     	;# 
  3342  000B                     	;# 
  3343  000C                     	;# 
  3344  000D                     	;# 
  3345  000E                     	;# 
  3346  0011                     	;# 
  3347  0012                     	;# 
  3348  0013                     	;# 
  3349  0014                     	;# 
  3350  0015                     	;# 
  3351  0016                     	;# 
  3352  0016                     	;# 
  3353  0017                     	;# 
  3354  0018                     	;# 
  3355  0019                     	;# 
  3356  001A                     	;# 
  3357  001B                     	;# 
  3358  001C                     	;# 
  3359  001E                     	;# 
  3360  001F                     	;# 
  3361  008C                     	;# 
  3362  008D                     	;# 
  3363  008E                     	;# 
  3364  0091                     	;# 
  3365  0092                     	;# 
  3366  0093                     	;# 
  3367  0094                     	;# 
  3368  0095                     	;# 
  3369  0096                     	;# 
  3370  0097                     	;# 
  3371  0098                     	;# 
  3372  0099                     	;# 
  3373  009A                     	;# 
  3374  009B                     	;# 
  3375  009B                     	;# 
  3376  009C                     	;# 
  3377  009D                     	;# 
  3378  009E                     	;# 
  3379  010C                     	;# 
  3380  010D                     	;# 
  3381  010E                     	;# 
  3382  0111                     	;# 
  3383  0112                     	;# 
  3384  0113                     	;# 
  3385  0114                     	;# 
  3386  0115                     	;# 
  3387  0116                     	;# 
  3388  0117                     	;# 
  3389  0118                     	;# 
  3390  0119                     	;# 
  3391  011A                     	;# 
  3392  011B                     	;# 
  3393  011D                     	;# 
  3394  011E                     	;# 
  3395  018C                     	;# 
  3396  018D                     	;# 
  3397  018E                     	;# 
  3398  0191                     	;# 
  3399  0191                     	;# 
  3400  0192                     	;# 
  3401  0193                     	;# 
  3402  0193                     	;# 
  3403  0193                     	;# 
  3404  0194                     	;# 
  3405  0195                     	;# 
  3406  0196                     	;# 
  3407  0199                     	;# 
  3408  019A                     	;# 
  3409  019B                     	;# 
  3410  019B                     	;# 
  3411  019B                     	;# 
  3412  019B                     	;# 
  3413  019C                     	;# 
  3414  019C                     	;# 
  3415  019D                     	;# 
  3416  019E                     	;# 
  3417  019F                     	;# 
  3418  020C                     	;# 
  3419  020D                     	;# 
  3420  020E                     	;# 
  3421  0211                     	;# 
  3422  0211                     	;# 
  3423  0212                     	;# 
  3424  0212                     	;# 
  3425  0213                     	;# 
  3426  0213                     	;# 
  3427  0214                     	;# 
  3428  0214                     	;# 
  3429  0215                     	;# 
  3430  0215                     	;# 
  3431  0215                     	;# 
  3432  0216                     	;# 
  3433  0216                     	;# 
  3434  0217                     	;# 
  3435  0217                     	;# 
  3436  0219                     	;# 
  3437  021A                     	;# 
  3438  021B                     	;# 
  3439  021C                     	;# 
  3440  021D                     	;# 
  3441  021E                     	;# 
  3442  021F                     	;# 
  3443  0291                     	;# 
  3444  0291                     	;# 
  3445  0292                     	;# 
  3446  0293                     	;# 
  3447  0294                     	;# 
  3448  0295                     	;# 
  3449  0295                     	;# 
  3450  0296                     	;# 
  3451  0298                     	;# 
  3452  0298                     	;# 
  3453  0299                     	;# 
  3454  029A                     	;# 
  3455  029B                     	;# 
  3456  029C                     	;# 
  3457  029D                     	;# 
  3458  029E                     	;# 
  3459  0311                     	;# 
  3460  0311                     	;# 
  3461  0312                     	;# 
  3462  0313                     	;# 
  3463  0318                     	;# 
  3464  0318                     	;# 
  3465  0319                     	;# 
  3466  031A                     	;# 
  3467  038C                     	;# 
  3468  038D                     	;# 
  3469  038E                     	;# 
  3470  0391                     	;# 
  3471  0392                     	;# 
  3472  0393                     	;# 
  3473  0394                     	;# 
  3474  0395                     	;# 
  3475  0396                     	;# 
  3476  039A                     	;# 
  3477  039C                     	;# 
  3478  039D                     	;# 
  3479  039E                     	;# 
  3480  039F                     	;# 
  3481  0415                     	;# 
  3482  0416                     	;# 
  3483  0417                     	;# 
  3484  041C                     	;# 
  3485  041D                     	;# 
  3486  041E                     	;# 
  3487  0FE4                     	;# 
  3488  0FE5                     	;# 
  3489  0FE6                     	;# 
  3490  0FE7                     	;# 
  3491  0FE8                     	;# 
  3492  0FE9                     	;# 
  3493  0FEA                     	;# 
  3494  0FEB                     	;# 
  3495  0FED                     	;# 
  3496  0FEE                     	;# 
  3497  0FEF                     	;# 
  3498  0000                     	;# 
  3499  0001                     	;# 
  3500  0002                     	;# 
  3501  0003                     	;# 
  3502  0004                     	;# 
  3503  0005                     	;# 
  3504  0006                     	;# 
  3505  0007                     	;# 
  3506  0008                     	;# 
  3507  0009                     	;# 
  3508  000A                     	;# 
  3509  000B                     	;# 
  3510  000C                     	;# 
  3511  000D                     	;# 
  3512  000E                     	;# 
  3513  0011                     	;# 
  3514  0012                     	;# 
  3515  0013                     	;# 
  3516  0014                     	;# 
  3517  0015                     	;# 
  3518  0016                     	;# 
  3519  0016                     	;# 
  3520  0017                     	;# 
  3521  0018                     	;# 
  3522  0019                     	;# 
  3523  001A                     	;# 
  3524  001B                     	;# 
  3525  001C                     	;# 
  3526  001E                     	;# 
  3527  001F                     	;# 
  3528  008C                     	;# 
  3529  008D                     	;# 
  3530  008E                     	;# 
  3531  0091                     	;# 
  3532  0092                     	;# 
  3533  0093                     	;# 
  3534  0094                     	;# 
  3535  0095                     	;# 
  3536  0096                     	;# 
  3537  0097                     	;# 
  3538  0098                     	;# 
  3539  0099                     	;# 
  3540  009A                     	;# 
  3541  009B                     	;# 
  3542  009B                     	;# 
  3543  009C                     	;# 
  3544  009D                     	;# 
  3545  009E                     	;# 
  3546  010C                     	;# 
  3547  010D                     	;# 
  3548  010E                     	;# 
  3549  0111                     	;# 
  3550  0112                     	;# 
  3551  0113                     	;# 
  3552  0114                     	;# 
  3553  0115                     	;# 
  3554  0116                     	;# 
  3555  0117                     	;# 
  3556  0118                     	;# 
  3557  0119                     	;# 
  3558  011A                     	;# 
  3559  011B                     	;# 
  3560  011D                     	;# 
  3561  011E                     	;# 
  3562  018C                     	;# 
  3563  018D                     	;# 
  3564  018E                     	;# 
  3565  0191                     	;# 
  3566  0191                     	;# 
  3567  0192                     	;# 
  3568  0193                     	;# 
  3569  0193                     	;# 
  3570  0193                     	;# 
  3571  0194                     	;# 
  3572  0195                     	;# 
  3573  0196                     	;# 
  3574  0199                     	;# 
  3575  019A                     	;# 
  3576  019B                     	;# 
  3577  019B                     	;# 
  3578  019B                     	;# 
  3579  019B                     	;# 
  3580  019C                     	;# 
  3581  019C                     	;# 
  3582  019D                     	;# 
  3583  019E                     	;# 
  3584  019F                     	;# 
  3585  020C                     	;# 
  3586  020D                     	;# 
  3587  020E                     	;# 
  3588  0211                     	;# 
  3589  0211                     	;# 
  3590  0212                     	;# 
  3591  0212                     	;# 
  3592  0213                     	;# 
  3593  0213                     	;# 
  3594  0214                     	;# 
  3595  0214                     	;# 
  3596  0215                     	;# 
  3597  0215                     	;# 
  3598  0215                     	;# 
  3599  0216                     	;# 
  3600  0216                     	;# 
  3601  0217                     	;# 
  3602  0217                     	;# 
  3603  0219                     	;# 
  3604  021A                     	;# 
  3605  021B                     	;# 
  3606  021C                     	;# 
  3607  021D                     	;# 
  3608  021E                     	;# 
  3609  021F                     	;# 
  3610  0291                     	;# 
  3611  0291                     	;# 
  3612  0292                     	;# 
  3613  0293                     	;# 
  3614  0294                     	;# 
  3615  0295                     	;# 
  3616  0295                     	;# 
  3617  0296                     	;# 
  3618  0298                     	;# 
  3619  0298                     	;# 
  3620  0299                     	;# 
  3621  029A                     	;# 
  3622  029B                     	;# 
  3623  029C                     	;# 
  3624  029D                     	;# 
  3625  029E                     	;# 
  3626  0311                     	;# 
  3627  0311                     	;# 
  3628  0312                     	;# 
  3629  0313                     	;# 
  3630  0318                     	;# 
  3631  0318                     	;# 
  3632  0319                     	;# 
  3633  031A                     	;# 
  3634  038C                     	;# 
  3635  038D                     	;# 
  3636  038E                     	;# 
  3637  0391                     	;# 
  3638  0392                     	;# 
  3639  0393                     	;# 
  3640  0394                     	;# 
  3641  0395                     	;# 
  3642  0396                     	;# 
  3643  039A                     	;# 
  3644  039C                     	;# 
  3645  039D                     	;# 
  3646  039E                     	;# 
  3647  039F                     	;# 
  3648  0415                     	;# 
  3649  0416                     	;# 
  3650  0417                     	;# 
  3651  041C                     	;# 
  3652  041D                     	;# 
  3653  041E                     	;# 
  3654  0FE4                     	;# 
  3655  0FE5                     	;# 
  3656  0FE6                     	;# 
  3657  0FE7                     	;# 
  3658  0FE8                     	;# 
  3659  0FE9                     	;# 
  3660  0FEA                     	;# 
  3661  0FEB                     	;# 
  3662  0FED                     	;# 
  3663  0FEE                     	;# 
  3664  0FEF                     	;# 
  3665  0000                     	;# 
  3666  0001                     	;# 
  3667  0002                     	;# 
  3668  0003                     	;# 
  3669  0004                     	;# 
  3670  0005                     	;# 
  3671  0006                     	;# 
  3672  0007                     	;# 
  3673  0008                     	;# 
  3674  0009                     	;# 
  3675  000A                     	;# 
  3676  000B                     	;# 
  3677  000C                     	;# 
  3678  000D                     	;# 
  3679  000E                     	;# 
  3680  0011                     	;# 
  3681  0012                     	;# 
  3682  0013                     	;# 
  3683  0014                     	;# 
  3684  0015                     	;# 
  3685  0016                     	;# 
  3686  0016                     	;# 
  3687  0017                     	;# 
  3688  0018                     	;# 
  3689  0019                     	;# 
  3690  001A                     	;# 
  3691  001B                     	;# 
  3692  001C                     	;# 
  3693  001E                     	;# 
  3694  001F                     	;# 
  3695  008C                     	;# 
  3696  008D                     	;# 
  3697  008E                     	;# 
  3698  0091                     	;# 
  3699  0092                     	;# 
  3700  0093                     	;# 
  3701  0094                     	;# 
  3702  0095                     	;# 
  3703  0096                     	;# 
  3704  0097                     	;# 
  3705  0098                     	;# 
  3706  0099                     	;# 
  3707  009A                     	;# 
  3708  009B                     	;# 
  3709  009B                     	;# 
  3710  009C                     	;# 
  3711  009D                     	;# 
  3712  009E                     	;# 
  3713  010C                     	;# 
  3714  010D                     	;# 
  3715  010E                     	;# 
  3716  0111                     	;# 
  3717  0112                     	;# 
  3718  0113                     	;# 
  3719  0114                     	;# 
  3720  0115                     	;# 
  3721  0116                     	;# 
  3722  0117                     	;# 
  3723  0118                     	;# 
  3724  0119                     	;# 
  3725  011A                     	;# 
  3726  011B                     	;# 
  3727  011D                     	;# 
  3728  011E                     	;# 
  3729  018C                     	;# 
  3730  018D                     	;# 
  3731  018E                     	;# 
  3732  0191                     	;# 
  3733  0191                     	;# 
  3734  0192                     	;# 
  3735  0193                     	;# 
  3736  0193                     	;# 
  3737  0193                     	;# 
  3738  0194                     	;# 
  3739  0195                     	;# 
  3740  0196                     	;# 
  3741  0199                     	;# 
  3742  019A                     	;# 
  3743  019B                     	;# 
  3744  019B                     	;# 
  3745  019B                     	;# 
  3746  019B                     	;# 
  3747  019C                     	;# 
  3748  019C                     	;# 
  3749  019D                     	;# 
  3750  019E                     	;# 
  3751  019F                     	;# 
  3752  020C                     	;# 
  3753  020D                     	;# 
  3754  020E                     	;# 
  3755  0211                     	;# 
  3756  0211                     	;# 
  3757  0212                     	;# 
  3758  0212                     	;# 
  3759  0213                     	;# 
  3760  0213                     	;# 
  3761  0214                     	;# 
  3762  0214                     	;# 
  3763  0215                     	;# 
  3764  0215                     	;# 
  3765  0215                     	;# 
  3766  0216                     	;# 
  3767  0216                     	;# 
  3768  0217                     	;# 
  3769  0217                     	;# 
  3770  0219                     	;# 
  3771  021A                     	;# 
  3772  021B                     	;# 
  3773  021C                     	;# 
  3774  021D                     	;# 
  3775  021E                     	;# 
  3776  021F                     	;# 
  3777  0291                     	;# 
  3778  0291                     	;# 
  3779  0292                     	;# 
  3780  0293                     	;# 
  3781  0294                     	;# 
  3782  0295                     	;# 
  3783  0295                     	;# 
  3784  0296                     	;# 
  3785  0298                     	;# 
  3786  0298                     	;# 
  3787  0299                     	;# 
  3788  029A                     	;# 
  3789  029B                     	;# 
  3790  029C                     	;# 
  3791  029D                     	;# 
  3792  029E                     	;# 
  3793  0311                     	;# 
  3794  0311                     	;# 
  3795  0312                     	;# 
  3796  0313                     	;# 
  3797  0318                     	;# 
  3798  0318                     	;# 
  3799  0319                     	;# 
  3800  031A                     	;# 
  3801  038C                     	;# 
  3802  038D                     	;# 
  3803  038E                     	;# 
  3804  0391                     	;# 
  3805  0392                     	;# 
  3806  0393                     	;# 
  3807  0394                     	;# 
  3808  0395                     	;# 
  3809  0396                     	;# 
  3810  039A                     	;# 
  3811  039C                     	;# 
  3812  039D                     	;# 
  3813  039E                     	;# 
  3814  039F                     	;# 
  3815  0415                     	;# 
  3816  0416                     	;# 
  3817  0417                     	;# 
  3818  041C                     	;# 
  3819  041D                     	;# 
  3820  041E                     	;# 
  3821  0FE4                     	;# 
  3822  0FE5                     	;# 
  3823  0FE6                     	;# 
  3824  0FE7                     	;# 
  3825  0FE8                     	;# 
  3826  0FE9                     	;# 
  3827  0FEA                     	;# 
  3828  0FEB                     	;# 
  3829  0FED                     	;# 
  3830  0FEE                     	;# 
  3831  0FEF                     	;# 
  3832  0000                     	;# 
  3833  0001                     	;# 
  3834  0002                     	;# 
  3835  0003                     	;# 
  3836  0004                     	;# 
  3837  0005                     	;# 
  3838  0006                     	;# 
  3839  0007                     	;# 
  3840  0008                     	;# 
  3841  0009                     	;# 
  3842  000A                     	;# 
  3843  000B                     	;# 
  3844  000C                     	;# 
  3845  000D                     	;# 
  3846  000E                     	;# 
  3847  0011                     	;# 
  3848  0012                     	;# 
  3849  0013                     	;# 
  3850  0014                     	;# 
  3851  0015                     	;# 
  3852  0016                     	;# 
  3853  0016                     	;# 
  3854  0017                     	;# 
  3855  0018                     	;# 
  3856  0019                     	;# 
  3857  001A                     	;# 
  3858  001B                     	;# 
  3859  001C                     	;# 
  3860  001E                     	;# 
  3861  001F                     	;# 
  3862  008C                     	;# 
  3863  008D                     	;# 
  3864  008E                     	;# 
  3865  0091                     	;# 
  3866  0092                     	;# 
  3867  0093                     	;# 
  3868  0094                     	;# 
  3869  0095                     	;# 
  3870  0096                     	;# 
  3871  0097                     	;# 
  3872  0098                     	;# 
  3873  0099                     	;# 
  3874  009A                     	;# 
  3875  009B                     	;# 
  3876  009B                     	;# 
  3877  009C                     	;# 
  3878  009D                     	;# 
  3879  009E                     	;# 
  3880  010C                     	;# 
  3881  010D                     	;# 
  3882  010E                     	;# 
  3883  0111                     	;# 
  3884  0112                     	;# 
  3885  0113                     	;# 
  3886  0114                     	;# 
  3887  0115                     	;# 
  3888  0116                     	;# 
  3889  0117                     	;# 
  3890  0118                     	;# 
  3891  0119                     	;# 
  3892  011A                     	;# 
  3893  011B                     	;# 
  3894  011D                     	;# 
  3895  011E                     	;# 
  3896  018C                     	;# 
  3897  018D                     	;# 
  3898  018E                     	;# 
  3899  0191                     	;# 
  3900  0191                     	;# 
  3901  0192                     	;# 
  3902  0193                     	;# 
  3903  0193                     	;# 
  3904  0193                     	;# 
  3905  0194                     	;# 
  3906  0195                     	;# 
  3907  0196                     	;# 
  3908  0199                     	;# 
  3909  019A                     	;# 
  3910  019B                     	;# 
  3911  019B                     	;# 
  3912  019B                     	;# 
  3913  019B                     	;# 
  3914  019C                     	;# 
  3915  019C                     	;# 
  3916  019D                     	;# 
  3917  019E                     	;# 
  3918  019F                     	;# 
  3919  020C                     	;# 
  3920  020D                     	;# 
  3921  020E                     	;# 
  3922  0211                     	;# 
  3923  0211                     	;# 
  3924  0212                     	;# 
  3925  0212                     	;# 
  3926  0213                     	;# 
  3927  0213                     	;# 
  3928  0214                     	;# 
  3929  0214                     	;# 
  3930  0215                     	;# 
  3931  0215                     	;# 
  3932  0215                     	;# 
  3933  0216                     	;# 
  3934  0216                     	;# 
  3935  0217                     	;# 
  3936  0217                     	;# 
  3937  0219                     	;# 
  3938  021A                     	;# 
  3939  021B                     	;# 
  3940  021C                     	;# 
  3941  021D                     	;# 
  3942  021E                     	;# 
  3943  021F                     	;# 
  3944  0291                     	;# 
  3945  0291                     	;# 
  3946  0292                     	;# 
  3947  0293                     	;# 
  3948  0294                     	;# 
  3949  0295                     	;# 
  3950  0295                     	;# 
  3951  0296                     	;# 
  3952  0298                     	;# 
  3953  0298                     	;# 
  3954  0299                     	;# 
  3955  029A                     	;# 
  3956  029B                     	;# 
  3957  029C                     	;# 
  3958  029D                     	;# 
  3959  029E                     	;# 
  3960  0311                     	;# 
  3961  0311                     	;# 
  3962  0312                     	;# 
  3963  0313                     	;# 
  3964  0318                     	;# 
  3965  0318                     	;# 
  3966  0319                     	;# 
  3967  031A                     	;# 
  3968  038C                     	;# 
  3969  038D                     	;# 
  3970  038E                     	;# 
  3971  0391                     	;# 
  3972  0392                     	;# 
  3973  0393                     	;# 
  3974  0394                     	;# 
  3975  0395                     	;# 
  3976  0396                     	;# 
  3977  039A                     	;# 
  3978  039C                     	;# 
  3979  039D                     	;# 
  3980  039E                     	;# 
  3981  039F                     	;# 
  3982  0415                     	;# 
  3983  0416                     	;# 
  3984  0417                     	;# 
  3985  041C                     	;# 
  3986  041D                     	;# 
  3987  041E                     	;# 
  3988  0FE4                     	;# 
  3989  0FE5                     	;# 
  3990  0FE6                     	;# 
  3991  0FE7                     	;# 
  3992  0FE8                     	;# 
  3993  0FE9                     	;# 
  3994  0FEA                     	;# 
  3995  0FEB                     	;# 
  3996  0FED                     	;# 
  3997  0FEE                     	;# 
  3998  0FEF                     	;# 
  3999                           
  4000                           	psect	idataBANK1
  4001  07FD                     __pidataBANK1:	
  4002                           
  4003                           ;initializer for _sensorHealth
  4004  07FD  3401               	retlw	1
  4005  07FE  3401               	retlw	1
  4006                           
  4007                           ;initializer for _addressSize
  4008  07FF  3405               	retlw	5
  4009                           
  4010                           	psect	idataBANK2
  4011  12C7                     __pidataBANK2:	
  4012                           
  4013                           ;initializer for _sensorUpdatePeriod
  4014  12C7  34C0               	retlw	192
  4015  12C8  3427               	retlw	39
  4016  12C9  3409               	retlw	9
  4017  12CA  3400               	retlw	0
  4018                           
  4019                           	psect	stringtext1
  4020  1800                     __pstringtext1:	
  4021  1800                     atan@coeff_a:	
  4022  1800  343C               	retlw	60
  4023  1801  3404               	retlw	4
  4024  1802  3442               	retlw	66
  4025  1803  349F               	retlw	159
  4026  1804  346A               	retlw	106
  4027  1805  3442               	retlw	66
  4028  1806  3490               	retlw	144
  4029  1807  3401               	retlw	1
  4030  1808  3442               	retlw	66
  4031  1809  344D               	retlw	77
  4032  180A  34BB               	retlw	187
  4033  180B  3440               	retlw	64
  4034  180C  34EC               	retlw	236
  4035  180D  3447               	retlw	71
  4036  180E  343E               	retlw	62
  4037  180F  348E               	retlw	142
  4038  1810  341F               	retlw	31
  4039  1811  34BB               	retlw	187
  4040  1812                     __end_ofatan@coeff_a:	
  4041                           
  4042                           	psect	stringtext2
  4043  1812                     __pstringtext2:	
  4044  1812                     atan@coeff_b:	
  4045  1812  343C               	retlw	60
  4046  1813  3404               	retlw	4
  4047  1814  3442               	retlw	66
  4048  1815  345A               	retlw	90
  4049  1816  348B               	retlw	139
  4050  1817  3442               	retlw	66
  4051  1818  3404               	retlw	4
  4052  1819  3444               	retlw	68
  4053  181A  3442               	retlw	66
  4054  181B  349C               	retlw	156
  4055  181C  344F               	retlw	79
  4056  181D  3441               	retlw	65
  4057  181E  3400               	retlw	0
  4058  181F  3480               	retlw	128
  4059  1820  343F               	retlw	63
  4060  1821                     __end_ofatan@coeff_b:	
  4061                           
  4062                           	psect	stringtext3
  4063  1821                     __pstringtext3:	
  4064  1821                     Wireless_init@TADDR:	
  4065  1821  3432               	retlw	50
  4066  1822  3430               	retlw	48
  4067  1823  3430               	retlw	48
  4068  1824  3430               	retlw	48
  4069  1825  3431               	retlw	49
  4070  1826                     __end_ofWireless_init@TADDR:	
  4071                           
  4072                           	psect	nvCOMMON
  4073  007C                     __pnvCOMMON:	
  4074  007C                     _timer1ReloadVal:	
  4075  007C                     	ds	2
  4076                           
  4077                           	psect	nvBANK2
  4078  0166                     __pnvBANK2:	
  4079  0166                     _TMR1_InterruptHandler:	
  4080  0166                     	ds	2
  4081  0168                     _IOCAF2_InterruptHandler:	
  4082  0168                     	ds	2
  4083  000E                     _PORTCbits	set	14
  4084  0019                     _T1GCONbits	set	25
  4085  0018                     _T1CONbits	set	24
  4086  0018                     _T1CON	set	24
  4087  0016                     _TMR1L	set	22
  4088  0017                     _TMR1H	set	23
  4089  0019                     _T1GCON	set	25
  4090  0014                     _PIR4bits	set	20
  4091  001C                     _T2CONbits	set	28
  4092  001C                     _T2CON	set	28
  4093  0011                     _PIR1bits	set	17
  4094  001A                     _TMR2	set	26
  4095  001B                     _PR2	set	27
  4096  000B                     _INTCONbits	set	11
  4097  009D                     _ADCON0bits	set	157
  4098  009C                     _ADRESH	set	156
  4099  009B                     _ADRESL	set	155
  4100  009E                     _ADCON1	set	158
  4101  009D                     _ADCON0	set	157
  4102  0091                     _PIE1bits	set	145
  4103  0094                     _PIE4bits	set	148
  4104  0095                     _OPTION_REGbits	set	149
  4105  008E                     _TRISC	set	142
  4106  008D                     _TRISB	set	141
  4107  008C                     _TRISA	set	140
  4108  0097                     _WDTCON	set	151
  4109  0098                     _OSCTUNE	set	152
  4110  0099                     _OSCCON	set	153
  4111  010E                     _LATCbits	set	270
  4112  0117                     _FVRCONbits	set	279
  4113  0117                     _FVRCON	set	279
  4114  011D                     _APFCON0	set	285
  4115  011E                     _APFCON1	set	286
  4116  010E                     _LATC	set	270
  4117  010D                     _LATB	set	269
  4118  010C                     _LATA	set	268
  4119  0116                     _BORCON	set	278
  4120  0196                     _EECON2	set	406
  4121  0193                     _EEDATL	set	403
  4122  0194                     _EEDATH	set	404
  4123  0195                     _EECON1bits	set	405
  4124  0192                     _EEADRH	set	402
  4125  0191                     _EEADRL	set	401
  4126  018C                     _ANSELA	set	396
  4127  018D                     _ANSELB	set	397
  4128  018E                     _ANSELC	set	398
  4129  020E                     _WPUCbits	set	526
  4130  0214                     _SSP1STATbits	set	532
  4131  0211                     _SSP1BUF	set	529
  4132  0215                     _SSP1CON1bits	set	533
  4133  0212                     _SSP1ADD	set	530
  4134  0215                     _SSP1CON1	set	533
  4135  0214                     _SSP1STAT	set	532
  4136  0219                     _SSP2BUF	set	537
  4137  021E                     _SSP2CON2bits	set	542
  4138  021D                     _SSP2CON1bits	set	541
  4139  021A                     _SSP2ADD	set	538
  4140  021F                     _SSP2CON3	set	543
  4141  021D                     _SSP2CON1	set	541
  4142  021C                     _SSP2STAT	set	540
  4143  020E                     _WPUC	set	526
  4144  020C                     _WPUA	set	524
  4145  020D                     _WPUB	set	525
  4146  0391                     _IOCAPbits	set	913
  4147  0392                     _IOCANbits	set	914
  4148  0393                     _IOCAFbits	set	915
  4149                           
  4150                           ; #config settings
  4151  0000                     
  4152                           	psect	cinit
  4153  0039                     start_initialization:	
  4154  0039                     __initialization:	
  4155                           
  4156                           ; Initialize objects allocated to BANK1
  4157  0039  0021               	movlb	1	; select bank1
  4158  003A  3187  27FD  3180   	fcall	__pidataBANK1	;fetch initializer
  4159  003D  00E3               	movwf	__pdataBANK1& (0+127)
  4160  003E  3187  27FE  3180   	fcall	__pidataBANK1+1	;fetch initializer
  4161  0041  00E4               	movwf	(__pdataBANK1+1)& (0+127)
  4162  0042  3187  27FF  3180   	fcall	__pidataBANK1+2	;fetch initializer
  4163  0045  00E5               	movwf	(__pdataBANK1+2)& (0+127)
  4164                           
  4165                           ; Initialize objects allocated to BANK2
  4166  0046  0022               	movlb	2	; select bank2
  4167  0047  3192  22C7  3180   	fcall	__pidataBANK2	;fetch initializer
  4168  004A  00EA               	movwf	__pdataBANK2& (0+127)
  4169  004B  3192  22C8  3180   	fcall	__pidataBANK2+1	;fetch initializer
  4170  004E  00EB               	movwf	(__pdataBANK2+1)& (0+127)
  4171  004F  3192  22C9  3180   	fcall	__pidataBANK2+2	;fetch initializer
  4172  0052  00EC               	movwf	(__pdataBANK2+2)& (0+127)
  4173  0053  3192  22CA  3180   	fcall	__pidataBANK2+3	;fetch initializer
  4174  0056  00ED               	movwf	(__pdataBANK2+3)& (0+127)
  4175                           
  4176                           ; Clear objects allocated to COMMON
  4177  0057  01F7               	clrf	__pbssCOMMON& (0+127)
  4178  0058  01F8               	clrf	(__pbssCOMMON+1)& (0+127)
  4179  0059  01F9               	clrf	(__pbssCOMMON+2)& (0+127)
  4180  005A  01FA               	clrf	(__pbssCOMMON+3)& (0+127)
  4181  005B  01FB               	clrf	(__pbssCOMMON+4)& (0+127)
  4182                           
  4183                           ; Clear objects allocated to BANK1
  4184  005C  30CA               	movlw	low __pbssBANK1
  4185  005D  0084               	movwf	4
  4186  005E  3000               	movlw	high __pbssBANK1
  4187  005F  0085               	movwf	5
  4188  0060  3019               	movlw	25
  4189  0061  3192  22EC  3180   	fcall	clear_ram0
  4190                           
  4191                           ; Clear objects allocated to BANK2
  4192  0064  3020               	movlw	low __pbssBANK2
  4193  0065  0084               	movwf	4
  4194  0066  3001               	movlw	high __pbssBANK2
  4195  0067  0085               	movwf	5
  4196  0068  3046               	movlw	70
  4197  0069  3192  22EC  3180   	fcall	clear_ram0
  4198                           
  4199                           ; Clear objects allocated to BANK3
  4200  006C  30A0               	movlw	low __pbssBANK3
  4201  006D  0084               	movwf	4
  4202  006E  3001               	movlw	high __pbssBANK3
  4203  006F  0085               	movwf	5
  4204  0070  3030               	movlw	48
  4205  0071  3192  22EC         	fcall	clear_ram0
  4206  0073                     end_of_initialization:	
  4207                           ;End of C runtime variable initialization code
  4208                           
  4209  0073                     __end_of__initialization:	
  4210  0073  107E               	bcf	int$flags,0	;clear compiler interrupt flag (level 1)
  4211  0074  0020               	movlb	0
  4212  0075  3183  2B45         	ljmp	_main	;jump to C main() function
  4213                           
  4214                           	psect	bssCOMMON
  4215  0077                     __pbssCOMMON:	
  4216  0077                     _p_i2c2_current:	
  4217  0077                     	ds	1
  4218  0078                     _p_i2c2_trb_current:	
  4219  0078                     	ds	1
  4220  0079                     _i2c2_state:	
  4221  0079                     	ds	1
  4222  007A                     I2C2_ISR@i2c_address:	
  4223  007A                     	ds	2
  4224                           
  4225                           	psect	bssBANK1
  4226  00CA                     __pbssBANK1:	
  4227  00CA                     _i2c2_object:	
  4228  00CA                     	ds	5
  4229  00CF                     _globalCounter:	
  4230  00CF                     	ds	4
  4231  00D3                     _dig_T1:	
  4232  00D3                     	ds	2
  4233  00D5                     I2C2_ISR@pi2c_buf_ptr:	
  4234  00D5                     	ds	2
  4235  00D7                     DOOR_run@previousDoorState:	
  4236  00D7                     	ds	1
  4237  00D8                     _initialised:	
  4238  00D8                     	ds	1
  4239  00D9                     _doorState:	
  4240  00D9                     	ds	1
  4241  00DA                     Wireless_determineTransmitPower@numOfSuccessfulTransmits:	
  4242  00DA                     	ds	1
  4243  00DB                     Wireless_determineTransmitPower@numOfTransmits:	
  4244  00DB                     	ds	1
  4245  00DC                     _currentTransmitPower:	
  4246  00DC                     	ds	1
  4247  00DD                     _doorClosedAngle:	
  4248  00DD                     	ds	1
  4249  00DE                     _doorOpenAngle:	
  4250  00DE                     	ds	1
  4251  00DF                     _HMC5883Lmode:	
  4252  00DF                     	ds	1
  4253  00E0                     I2C2_ISR@i2c_10bit_address_restart:	
  4254  00E0                     	ds	1
  4255  00E1                     I2C2_ISR@i2c_bytes_left:	
  4256  00E1                     	ds	1
  4257  00E2                     _i2c2_trb_count:	
  4258  00E2                     	ds	1
  4259                           
  4260                           	psect	dataBANK1
  4261  00E3                     __pdataBANK1:	
  4262  00E3                     _sensorHealth:	
  4263  00E3                     	ds	2
  4264  00E5                     _addressSize:	
  4265  00E5                     	ds	1
  4266                           
  4267                           	psect	bssBANK2
  4268  0120                     __pbssBANK2:	
  4269  0120                     _curr:	
  4270  0120                     	ds	4
  4271  0124                     _adc_t:	
  4272  0124                     	ds	4
  4273  0128                     _pressure:	
  4274  0128                     	ds	3
  4275  012B                     _cTemp:	
  4276  012B                     	ds	3
  4277  012E                     _t_fine:	
  4278  012E                     	ds	3
  4279  0131                     _var2:	
  4280  0131                     	ds	3
  4281  0134                     _var1:	
  4282  0134                     	ds	3
  4283  0137                     HMC5883L_TestConnection@F3572:	
  4284  0137                     	ds	3
  4285  013A                     _errno:	
  4286  013A                     	ds	2
  4287  013C                     _timeOut:	
  4288  013C                     	ds	2
  4289  013E                     _referenceDirection:	
  4290  013E                     	ds	2
  4291  0140                     _dig_P9:	
  4292  0140                     	ds	2
  4293  0142                     _dig_P8:	
  4294  0142                     	ds	2
  4295  0144                     _dig_P7:	
  4296  0144                     	ds	2
  4297  0146                     _dig_P6:	
  4298  0146                     	ds	2
  4299  0148                     _dig_P5:	
  4300  0148                     	ds	2
  4301  014A                     _dig_P4:	
  4302  014A                     	ds	2
  4303  014C                     _dig_P3:	
  4304  014C                     	ds	2
  4305  014E                     _dig_P2:	
  4306  014E                     	ds	2
  4307  0150                     _dig_P1:	
  4308  0150                     	ds	2
  4309  0152                     _dig_T4:	
  4310  0152                     	ds	2
  4311  0154                     _dig_T3:	
  4312  0154                     	ds	2
  4313  0156                     _dig_T2:	
  4314  0156                     	ds	2
  4315  0158                     I2C2_MasterRead@trBlock:	
  4316  0158                     	ds	5
  4317  015D                     I2C2_MasterWrite@trBlock:	
  4318  015D                     	ds	5
  4319  0162                     _i2c2_tr_queue:	
  4320  0162                     	ds	4
  4321                           
  4322                           	psect	dataBANK2
  4323  016A                     __pdataBANK2:	
  4324  016A                     _sensorUpdatePeriod:	
  4325  016A                     	ds	4
  4326                           
  4327                           	psect	bssBANK3
  4328  01A0                     __pbssBANK3:	
  4329  01A0                     DOOR_run@doorStateDuration:	
  4330  01A0                     	ds	4
  4331  01A4                     _adc_p:	
  4332  01A4                     	ds	4
  4333  01A8                     _b1:	
  4334  01A8                     	ds	24
  4335  01C0                     _data:	
  4336  01C0                     	ds	8
  4337  01C8                     _heading:	
  4338  01C8                     	ds	8
  4339                           
  4340                           	psect	clrtext
  4341  12EC                     clear_ram0:	
  4342                           ;	Called with FSR0 containing the base address, and
  4343                           ;	WREG with the size to clear
  4344                           
  4345  12EC  0064               	clrwdt	;clear the watchdog before getting into this loop
  4346  12ED                     clrloop0:	
  4347  12ED  0180               	clrf	0	;clear RAM location pointed to by FSR
  4348  12EE  3101               	addfsr 0,1
  4349  12EF  0B89               	decfsz	9,f	;Have we reached the end of clearing yet?
  4350  12F0  2AED               	goto	clrloop0	;have we reached the end yet?
  4351  12F1  3400               	retlw	0	;all done for this memory range, return
  4352                           
  4353                           	psect	cstackBANK3
  4354  01D0                     __pcstackBANK3:	
  4355  01D0                     main@prevDoorStatus:	
  4356                           
  4357                           ; 1 bytes @ 0x0
  4358  01D0                     	ds	1
  4359  01D1                     main@doorClosedUpdateCounter:	
  4360                           
  4361                           ; 4 bytes @ 0x1
  4362  01D1                     	ds	4
  4363  01D5                     main@dur:	
  4364                           
  4365                           ; 2 bytes @ 0x5
  4366  01D5                     	ds	2
  4367  01D7                     main@doorOpenTime:	
  4368                           
  4369                           ; 4 bytes @ 0x7
  4370  01D7                     	ds	4
  4371  01DB                     main@doorStatus:	
  4372                           
  4373                           ; 1 bytes @ 0xB
  4374  01DB                     	ds	1
  4375                           
  4376                           	psect	cstackBANK1
  4377  00A0                     __pcstackBANK1:	
  4378  00A0                     ___fttol@sign1:	
  4379                           
  4380                           ; 1 bytes @ 0x0
  4381  00A0                     	ds	1
  4382  00A1                     ___fttol@lval:	
  4383                           
  4384                           ; 4 bytes @ 0x1
  4385  00A1                     	ds	4
  4386  00A5                     ___fttol@exp1:	
  4387                           
  4388                           ; 1 bytes @ 0x5
  4389  00A5                     	ds	1
  4390  00A6                     ?_BMP_readTemperature:	
  4391                           
  4392                           ; 3 bytes @ 0x6
  4393  00A6                     	ds	3
  4394  00A9                     ??_BMP_readTemperature:	
  4395                           
  4396                           ; 1 bytes @ 0x9
  4397  00A9                     	ds	12
  4398  00B5                     _BMP_readTemperature$2648:	
  4399                           
  4400                           ; 3 bytes @ 0x15
  4401  00B5                     	ds	3
  4402  00B8                     BMP_readTemperature@status:	
  4403                           
  4404                           ; 1 bytes @ 0x18
  4405  00B8                     	ds	1
  4406  00B9                     BMP_readTemperature@tmp:	
  4407                           
  4408                           ; 1 bytes @ 0x19
  4409  00B9                     	ds	1
  4410  00BA                     ?_Wireless_packageData:	
  4411  00BA                     Wireless_packageData@openTime:	
  4412                           ; 1 bytes @ 0x1A
  4413                           
  4414                           
  4415                           ; 1 bytes @ 0x1A
  4416  00BA                     	ds	1
  4417  00BB                     Wireless_packageData@tempC:	
  4418                           
  4419                           ; 3 bytes @ 0x1B
  4420  00BB                     	ds	3
  4421  00BE                     Wireless_packageData@data:	
  4422                           
  4423                           ; 6 bytes @ 0x1E
  4424  00BE                     	ds	6
  4425  00C4                     Wireless_packageData@var:	
  4426                           
  4427                           ; 1 bytes @ 0x24
  4428  00C4                     	ds	1
  4429  00C5                     Wireless_packageData@status:	
  4430                           
  4431                           ; 1 bytes @ 0x25
  4432  00C5                     	ds	1
  4433  00C6                     Wireless_packageData@t1:	
  4434                           
  4435                           ; 2 bytes @ 0x26
  4436  00C6                     	ds	2
  4437  00C8                     ??_main:	
  4438                           
  4439                           ; 1 bytes @ 0x28
  4440  00C8                     	ds	2
  4441                           
  4442                           	psect	cstackCOMMON
  4443  0070                     __pcstackCOMMON:	
  4444  0070                     ?_PIN_MANAGER_Initialize:	
  4445  0070                     ?_OSCILLATOR_Initialize:	
  4446                           ; 1 bytes @ 0x0
  4447                           
  4448  0070                     ?_WDT_Initialize:	
  4449                           ; 1 bytes @ 0x0
  4450                           
  4451  0070                     ?_SPI1_Initialize:	
  4452                           ; 1 bytes @ 0x0
  4453                           
  4454  0070                     ?_I2C2_Initialize:	
  4455                           ; 1 bytes @ 0x0
  4456                           
  4457  0070                     ?_FVR_Initialize:	
  4458                           ; 1 bytes @ 0x0
  4459                           
  4460  0070                     ?_ADC_Initialize:	
  4461                           ; 1 bytes @ 0x0
  4462                           
  4463  0070                     ?_TMR2_Initialize:	
  4464                           ; 1 bytes @ 0x0
  4465                           
  4466  0070                     ?_TMR1_Initialize:	
  4467                           ; 1 bytes @ 0x0
  4468                           
  4469  0070                     ?_IOCAF2_DefaultInterruptHandler:	
  4470                           ; 1 bytes @ 0x0
  4471                           
  4472  0070                     ??_IOCAF2_DefaultInterruptHandler:	
  4473                           ; 1 bytes @ 0x0
  4474                           
  4475  0070                     ?_IOCAF2_ISR:	
  4476                           ; 1 bytes @ 0x0
  4477                           
  4478  0070                     ??_IOCAF2_ISR:	
  4479                           ; 1 bytes @ 0x0
  4480                           
  4481  0070                     ?_I2C2_BusCollisionISR:	
  4482                           ; 1 bytes @ 0x0
  4483                           
  4484  0070                     ??_I2C2_BusCollisionISR:	
  4485                           ; 1 bytes @ 0x0
  4486                           
  4487  0070                     ?_I2C2_ISR:	
  4488                           ; 1 bytes @ 0x0
  4489                           
  4490  0070                     ?_TMR1_ISR:	
  4491                           ; 1 bytes @ 0x0
  4492                           
  4493  0070                     ??_TMR1_ISR:	
  4494                           ; 1 bytes @ 0x0
  4495                           
  4496  0070                     ?_TMR1_DefaultInterruptHandler:	
  4497                           ; 1 bytes @ 0x0
  4498                           
  4499  0070                     ??_TMR1_DefaultInterruptHandler:	
  4500                           ; 1 bytes @ 0x0
  4501                           
  4502  0070                     ?_TMR1_CallBack:	
  4503                           ; 1 bytes @ 0x0
  4504                           
  4505  0070                     ??_TMR1_CallBack:	
  4506                           ; 1 bytes @ 0x0
  4507                           
  4508  0070                     ?_Timeout_increment:	
  4509                           ; 1 bytes @ 0x0
  4510                           
  4511  0070                     ??_Timeout_increment:	
  4512                           ; 1 bytes @ 0x0
  4513                           
  4514  0070                     ?_I2C2_Stop:	
  4515                           ; 1 bytes @ 0x0
  4516                           
  4517  0070                     ??_I2C2_Stop:	
  4518                           ; 1 bytes @ 0x0
  4519                           
  4520  0070                     ?_I2C2_FunctionComplete:	
  4521                           ; 1 bytes @ 0x0
  4522                           
  4523  0070                     ??_I2C2_FunctionComplete:	
  4524                           ; 1 bytes @ 0x0
  4525                           
  4526  0070                     ?_Sensor_peripheralWake:	
  4527                           ; 1 bytes @ 0x0
  4528                           
  4529  0070                     ?_Sensor_peripheralSleep:	
  4530                           ; 1 bytes @ 0x0
  4531                           
  4532  0070                     ?_Wireless_init:	
  4533                           ; 1 bytes @ 0x0
  4534                           
  4535  0070                     ?_BMP_init:	
  4536                           ; 1 bytes @ 0x0
  4537                           
  4538  0070                     ?_DOOR_init:	
  4539                           ; 1 bytes @ 0x0
  4540                           
  4541  0070                     ?_Wireless_wake:	
  4542                           ; 1 bytes @ 0x0
  4543                           
  4544  0070                     ?_Wireless_determineTransmitPower:	
  4545                           ; 1 bytes @ 0x0
  4546                           
  4547  0070                     ?_Wireless_sleep:	
  4548                           ; 1 bytes @ 0x0
  4549                           
  4550  0070                     ?_Timeout_updateCurrentTime:	
  4551                           ; 1 bytes @ 0x0
  4552                           
  4553  0070                     ?_DOOR_run:	
  4554                           ; 1 bytes @ 0x0
  4555                           
  4556  0070                     ?_Diag_setTempSensorHealth:	
  4557                           ; 1 bytes @ 0x0
  4558                           
  4559  0070                     ?_Diag_getTempSensorHealth:	
  4560                           ; 1 bytes @ 0x0
  4561                           
  4562  0070                     ?_Wireless_changeTransmitPower:	
  4563                           ; 1 bytes @ 0x0
  4564                           
  4565  0070                     ?_Wireless_isDataTransmitSuccessful:	
  4566                           ; 1 bytes @ 0x0
  4567                           
  4568  0070                     ?_Diag_getSensorHealth:	
  4569                           ; 1 bytes @ 0x0
  4570                           
  4571  0070                     ?_Wireless_checkDataReceived:	
  4572                           ; 1 bytes @ 0x0
  4573                           
  4574  0070                     ?_DOOR_resetPos:	
  4575                           ; 1 bytes @ 0x0
  4576                           
  4577  0070                     ?_SYSTEM_Initialize:	
  4578                           ; 1 bytes @ 0x0
  4579                           
  4580  0070                     ?_PIN_MANAGER_IOC:	
  4581                           ; 1 bytes @ 0x0
  4582                           
  4583  0070                     ??_PIN_MANAGER_IOC:	
  4584                           ; 1 bytes @ 0x0
  4585                           
  4586  0070                     ?_INTERRUPT_InterruptManager:	
  4587                           ; 1 bytes @ 0x0
  4588                           
  4589  0070                     ?_ADC_SelectChannel:	
  4590                           ; 1 bytes @ 0x0
  4591                           
  4592  0070                     ?_ADC_StartConversion:	
  4593                           ; 1 bytes @ 0x0
  4594                           
  4595  0070                     ?_ADC_IsConversionDone:	
  4596                           ; 1 bytes @ 0x0
  4597                           
  4598  0070                     ?_FVR_IsOutputReady:	
  4599                           ; 1 bytes @ 0x0
  4600                           
  4601  0070                     ?_SPI1_Exchange8bit:	
  4602                           ; 1 bytes @ 0x0
  4603                           
  4604  0070                     ?_main:	
  4605                           ; 1 bytes @ 0x0
  4606                           
  4607  0070                     ?_SPI_WriteRead:	
  4608                           ; 1 bytes @ 0x0
  4609                           
  4610  0070                     ?_RF_ReadRegister:	
  4611                           ; 1 bytes @ 0x0
  4612                           
  4613  0070                     ?_RF_WriteRead:	
  4614                           ; 1 bytes @ 0x0
  4615                           
  4616  0070                     ?_RF_Write:	
  4617                           ; 1 bytes @ 0x0
  4618                           
  4619  0070                     ?_RF_GetStatus:	
  4620                           ; 1 bytes @ 0x0
  4621                           
  4622  0070                     ?_RF_ResetStatusIRQ:	
  4623                           ; 1 bytes @ 0x0
  4624                           
  4625  0070                     ?_RF_Init:	
  4626                           ; 1 bytes @ 0x0
  4627                           
  4628  0070                     ?_RF_DataIsReady:	
  4629                           ; 1 bytes @ 0x0
  4630                           
  4631  0070                     ?_Timeout_hasExpired:	
  4632                           ; 1 bytes @ 0x0
  4633                           
  4634                           
  4635                           ; 1 bytes @ 0x0
  4636  0070                     	ds	2
  4637  0072                     I2C2_Stop@completion_code:	
  4638                           
  4639                           ; 1 bytes @ 0x2
  4640  0072                     	ds	1
  4641  0073                     ??_I2C2_ISR:	
  4642                           
  4643                           ; 1 bytes @ 0x3
  4644  0073                     	ds	4
  4645                           
  4646                           	psect	cstackBANK0
  4647  0020                     __pcstackBANK0:	
  4648  0020                     ??_INTERRUPT_InterruptManager:	
  4649                           
  4650                           ; 1 bytes @ 0x0
  4651  0020                     	ds	1
  4652  0021                     ??_OSCILLATOR_Initialize:	
  4653  0021                     ??_WDT_Initialize:	
  4654                           ; 1 bytes @ 0x1
  4655                           
  4656  0021                     ??_SPI1_Initialize:	
  4657                           ; 1 bytes @ 0x1
  4658                           
  4659  0021                     ??_I2C2_Initialize:	
  4660                           ; 1 bytes @ 0x1
  4661                           
  4662  0021                     ??_FVR_Initialize:	
  4663                           ; 1 bytes @ 0x1
  4664                           
  4665  0021                     ??_ADC_Initialize:	
  4666                           ; 1 bytes @ 0x1
  4667                           
  4668  0021                     ??_TMR2_Initialize:	
  4669                           ; 1 bytes @ 0x1
  4670                           
  4671  0021                     ?_IOCAF2_SetInterruptHandler:	
  4672                           ; 1 bytes @ 0x1
  4673                           
  4674  0021                     ?_TMR1_SetInterruptHandler:	
  4675                           ; 1 bytes @ 0x1
  4676                           
  4677  0021                     ?_I2C2_MasterWriteTRBBuild:	
  4678                           ; 1 bytes @ 0x1
  4679                           
  4680  0021                     ?_I2C2_MasterTRBInsert:	
  4681                           ; 1 bytes @ 0x1
  4682                           
  4683  0021                     ?_I2C2_MasterReadTRBBuild:	
  4684                           ; 1 bytes @ 0x1
  4685                           
  4686  0021                     ??_Sensor_peripheralWake:	
  4687                           ; 1 bytes @ 0x1
  4688                           
  4689  0021                     ??_Sensor_peripheralSleep:	
  4690                           ; 1 bytes @ 0x1
  4691                           
  4692  0021                     ?_setSleepTime:	
  4693                           ; 1 bytes @ 0x1
  4694                           
  4695  0021                     ??_DOOR_init:	
  4696                           ; 1 bytes @ 0x1
  4697                           
  4698  0021                     ??_DOOR_run:	
  4699                           ; 1 bytes @ 0x1
  4700                           
  4701  0021                     ??_Diag_setTempSensorHealth:	
  4702                           ; 1 bytes @ 0x1
  4703                           
  4704  0021                     ??_Diag_getTempSensorHealth:	
  4705                           ; 1 bytes @ 0x1
  4706                           
  4707  0021                     ??_Diag_getSensorHealth:	
  4708                           ; 1 bytes @ 0x1
  4709                           
  4710  0021                     ??_DOOR_resetPos:	
  4711                           ; 1 bytes @ 0x1
  4712                           
  4713  0021                     ??_ADC_SelectChannel:	
  4714                           ; 1 bytes @ 0x1
  4715                           
  4716  0021                     ??_ADC_StartConversion:	
  4717                           ; 1 bytes @ 0x1
  4718                           
  4719  0021                     ??_ADC_IsConversionDone:	
  4720                           ; 1 bytes @ 0x1
  4721                           
  4722  0021                     ??_FVR_IsOutputReady:	
  4723                           ; 1 bytes @ 0x1
  4724                           
  4725  0021                     ?_DATAEE_WriteByte:	
  4726                           ; 1 bytes @ 0x1
  4727                           
  4728  0021                     ??_SPI1_Exchange8bit:	
  4729                           ; 1 bytes @ 0x1
  4730                           
  4731  0021                     ??_RF_Init:	
  4732                           ; 1 bytes @ 0x1
  4733                           
  4734  0021                     ?_Timeout_setTimeout:	
  4735                           ; 1 bytes @ 0x1
  4736                           
  4737  0021                     ??_Timeout_hasExpired:	
  4738                           ; 1 bytes @ 0x1
  4739                           
  4740  0021                     ?_TMR1_ReadTimer:	
  4741                           ; 1 bytes @ 0x1
  4742                           
  4743  0021                     ?_ADC_GetConversionResult:	
  4744                           ; 2 bytes @ 0x1
  4745                           
  4746  0021                     ?_limit:	
  4747                           ; 2 bytes @ 0x1
  4748                           
  4749  0021                     ?___lwdiv:	
  4750                           ; 2 bytes @ 0x1
  4751                           
  4752  0021                     ?___ftpack:	
  4753                           ; 2 bytes @ 0x1
  4754                           
  4755  0021                     ?_Timeout_getGlobalCounter:	
  4756                           ; 3 bytes @ 0x1
  4757                           
  4758  0021                     ?___lmul:	
  4759                           ; 4 bytes @ 0x1
  4760                           
  4761  0021                     ?___aldiv:	
  4762                           ; 4 bytes @ 0x1
  4763                           
  4764  0021                     ?___lldiv:	
  4765                           ; 4 bytes @ 0x1
  4766                           
  4767  0021                     I2C2_MasterTRBInsert@ptrb_list:	
  4768                           ; 4 bytes @ 0x1
  4769                           
  4770  0021                     I2C2_MasterWriteTRBBuild@pdata:	
  4771                           ; 1 bytes @ 0x1
  4772                           
  4773  0021                     DATAEE_WriteByte@bData:	
  4774                           ; 1 bytes @ 0x1
  4775                           
  4776  0021                     SPI1_Exchange8bit@data:	
  4777                           ; 1 bytes @ 0x1
  4778                           
  4779  0021                     IOCAF2_SetInterruptHandler@InterruptHandler:	
  4780                           ; 1 bytes @ 0x1
  4781                           
  4782  0021                     TMR1_SetInterruptHandler@InterruptHandler:	
  4783                           ; 2 bytes @ 0x1
  4784                           
  4785  0021                     I2C2_MasterReadTRBBuild@pdata:	
  4786                           ; 2 bytes @ 0x1
  4787                           
  4788  0021                     setSleepTime@timeSec:	
  4789                           ; 2 bytes @ 0x1
  4790                           
  4791  0021                     limit@val:	
  4792                           ; 2 bytes @ 0x1
  4793                           
  4794  0021                     Timeout_setTimeout@val:	
  4795                           ; 2 bytes @ 0x1
  4796                           
  4797  0021                     ___lwdiv@divisor:	
  4798                           ; 2 bytes @ 0x1
  4799                           
  4800  0021                     ___ftpack@arg:	
  4801                           ; 2 bytes @ 0x1
  4802                           
  4803  0021                     ___lmul@multiplier:	
  4804                           ; 3 bytes @ 0x1
  4805                           
  4806  0021                     ___aldiv@divisor:	
  4807                           ; 4 bytes @ 0x1
  4808                           
  4809  0021                     ___lldiv@divisor:	
  4810                           ; 4 bytes @ 0x1
  4811                           
  4812                           
  4813                           ; 4 bytes @ 0x1
  4814  0021                     	ds	1
  4815  0022                     ??_DATAEE_WriteByte:	
  4816  0022                     ??_SPI_WriteRead:	
  4817                           ; 1 bytes @ 0x2
  4818                           
  4819  0022                     I2C2_MasterTRBInsert@pflag:	
  4820                           ; 1 bytes @ 0x2
  4821                           
  4822  0022                     I2C2_MasterWriteTRBBuild@length:	
  4823                           ; 1 bytes @ 0x2
  4824                           
  4825  0022                     ADC_SelectChannel@channel:	
  4826                           ; 1 bytes @ 0x2
  4827                           
  4828  0022                     DATAEE_WriteByte@bAdd:	
  4829                           ; 1 bytes @ 0x2
  4830                           
  4831  0022                     SPI_WriteRead@val:	
  4832                           ; 1 bytes @ 0x2
  4833                           
  4834  0022                     Diag_setTempSensorHealth@health:	
  4835                           ; 1 bytes @ 0x2
  4836                           
  4837  0022                     Diag_getSensorHealth@var:	
  4838                           ; 1 bytes @ 0x2
  4839                           
  4840                           
  4841                           ; 1 bytes @ 0x2
  4842  0022                     	ds	1
  4843  0023                     ??_PIN_MANAGER_Initialize:	
  4844  0023                     ??_TMR1_Initialize:	
  4845                           ; 1 bytes @ 0x3
  4846                           
  4847  0023                     ??_IOCAF2_SetInterruptHandler:	
  4848                           ; 1 bytes @ 0x3
  4849                           
  4850  0023                     ??_TMR1_SetInterruptHandler:	
  4851                           ; 1 bytes @ 0x3
  4852                           
  4853  0023                     ??_I2C2_MasterTRBInsert:	
  4854                           ; 1 bytes @ 0x3
  4855                           
  4856  0023                     ??_setSleepTime:	
  4857                           ; 1 bytes @ 0x3
  4858                           
  4859  0023                     ??_SYSTEM_Initialize:	
  4860                           ; 1 bytes @ 0x3
  4861                           
  4862  0023                     ??_TMR1_ReadTimer:	
  4863                           ; 1 bytes @ 0x3
  4864                           
  4865  0023                     ??_ADC_GetConversionResult:	
  4866                           ; 1 bytes @ 0x3
  4867                           
  4868  0023                     ?_SPI_WriteReadBuffer:	
  4869                           ; 1 bytes @ 0x3
  4870                           
  4871  0023                     ?_SPI_WriteBuffer:	
  4872                           ; 1 bytes @ 0x3
  4873                           
  4874  0023                     ?_RF_WriteRegister:	
  4875                           ; 1 bytes @ 0x3
  4876                           
  4877  0023                     ??_RF_ReadRegister:	
  4878                           ; 1 bytes @ 0x3
  4879                           
  4880  0023                     ??_RF_WriteRead:	
  4881                           ; 1 bytes @ 0x3
  4882                           
  4883  0023                     ??_RF_Write:	
  4884                           ; 1 bytes @ 0x3
  4885                           
  4886  0023                     ??_Timeout_setTimeout:	
  4887                           ; 1 bytes @ 0x3
  4888                           
  4889  0023                     I2C2_MasterReadTRBBuild@length:	
  4890                           ; 1 bytes @ 0x3
  4891                           
  4892  0023                     DATAEE_WriteByte@GIEBitValue:	
  4893                           ; 1 bytes @ 0x3
  4894                           
  4895  0023                     SPI_WriteReadBuffer@bufIn:	
  4896                           ; 1 bytes @ 0x3
  4897                           
  4898  0023                     RF_WriteRegister@val:	
  4899                           ; 1 bytes @ 0x3
  4900                           
  4901  0023                     RF_Write@val:	
  4902                           ; 1 bytes @ 0x3
  4903                           
  4904  0023                     I2C2_MasterWriteTRBBuild@address:	
  4905                           ; 1 bytes @ 0x3
  4906                           
  4907  0023                     limit@min:	
  4908                           ; 2 bytes @ 0x3
  4909                           
  4910  0023                     SPI_WriteBuffer@bufOut:	
  4911                           ; 2 bytes @ 0x3
  4912                           
  4913  0023                     ___lwdiv@dividend:	
  4914                           ; 2 bytes @ 0x3
  4915                           
  4916                           
  4917                           ; 2 bytes @ 0x3
  4918  0023                     	ds	1
  4919  0024                     ?_Storage_save:	
  4920  0024                     ??_RF_WriteRegister:	
  4921                           ; 1 bytes @ 0x4
  4922                           
  4923  0024                     I2C2_MasterTRBInsert@count:	
  4924                           ; 1 bytes @ 0x4
  4925                           
  4926  0024                     SPI_WriteReadBuffer@bufSize:	
  4927                           ; 1 bytes @ 0x4
  4928                           
  4929  0024                     RF_WriteRegister@reg:	
  4930                           ; 1 bytes @ 0x4
  4931                           
  4932  0024                     RF_ReadRegister@reg:	
  4933                           ; 1 bytes @ 0x4
  4934                           
  4935  0024                     RF_WriteRead@val:	
  4936                           ; 1 bytes @ 0x4
  4937                           
  4938  0024                     Storage_save@closeAngle:	
  4939                           ; 1 bytes @ 0x4
  4940                           
  4941  0024                     ___ftpack@exp:	
  4942                           ; 1 bytes @ 0x4
  4943                           
  4944  0024                     I2C2_MasterReadTRBBuild@address:	
  4945                           ; 1 bytes @ 0x4
  4946                           
  4947                           
  4948                           ; 2 bytes @ 0x4
  4949  0024                     	ds	1
  4950  0025                     ??_I2C2_MasterWriteTRBBuild:	
  4951  0025                     ??_Timeout_getGlobalCounter:	
  4952                           ; 1 bytes @ 0x5
  4953                           
  4954  0025                     ??_Wireless_isDataTransmitSuccessful:	
  4955                           ; 1 bytes @ 0x5
  4956                           
  4957  0025                     ??_Storage_save:	
  4958                           ; 1 bytes @ 0x5
  4959                           
  4960  0025                     ??_SPI_WriteReadBuffer:	
  4961                           ; 1 bytes @ 0x5
  4962                           
  4963  0025                     ??_RF_GetStatus:	
  4964                           ; 1 bytes @ 0x5
  4965                           
  4966  0025                     ??_RF_ResetStatusIRQ:	
  4967                           ; 1 bytes @ 0x5
  4968                           
  4969  0025                     ??___lwdiv:	
  4970                           ; 1 bytes @ 0x5
  4971                           
  4972  0025                     SPI_WriteBuffer@bufSize:	
  4973                           ; 1 bytes @ 0x5
  4974                           
  4975  0025                     RF_ReadRegister@val:	
  4976                           ; 1 bytes @ 0x5
  4977                           
  4978  0025                     ___ftpack@sign:	
  4979                           ; 1 bytes @ 0x5
  4980                           
  4981  0025                     limit@max:	
  4982                           ; 1 bytes @ 0x5
  4983                           
  4984  0025                     ___lmul@multiplicand:	
  4985                           ; 2 bytes @ 0x5
  4986                           
  4987  0025                     ___aldiv@dividend:	
  4988                           ; 4 bytes @ 0x5
  4989                           
  4990  0025                     ___lldiv@dividend:	
  4991                           ; 4 bytes @ 0x5
  4992                           
  4993                           
  4994                           ; 4 bytes @ 0x5
  4995  0025                     	ds	1
  4996  0026                     ??_I2C2_MasterReadTRBBuild:	
  4997  0026                     ??___ftpack:	
  4998                           ; 1 bytes @ 0x6
  4999                           
  5000  0026                     ??_SPI_WriteBuffer:	
  5001                           ; 1 bytes @ 0x6
  5002                           
  5003  0026                     ??_RF_DataIsReady:	
  5004                           ; 1 bytes @ 0x6
  5005                           
  5006  0026                     RF_ResetStatusIRQ@flags:	
  5007                           ; 1 bytes @ 0x6
  5008                           
  5009  0026                     Wireless_isDataTransmitSuccessful@status:	
  5010                           ; 1 bytes @ 0x6
  5011                           
  5012  0026                     Storage_save@openAngle:	
  5013                           ; 1 bytes @ 0x6
  5014                           
  5015  0026                     ___lwdiv@counter:	
  5016                           ; 1 bytes @ 0x6
  5017                           
  5018                           
  5019                           ; 1 bytes @ 0x6
  5020  0026                     	ds	1
  5021  0027                     ?_DOOR_update:	
  5022  0027                     ??_limit:	
  5023                           ; 1 bytes @ 0x7
  5024                           
  5025  0027                     I2C2_MasterWriteTRBBuild@ptrb:	
  5026                           ; 1 bytes @ 0x7
  5027                           
  5028  0027                     RF_DataIsReady@channel:	
  5029                           ; 1 bytes @ 0x7
  5030                           
  5031  0027                     DOOR_update@closedAngle:	
  5032                           ; 1 bytes @ 0x7
  5033                           
  5034  0027                     ___lwdiv@quotient:	
  5035                           ; 1 bytes @ 0x7
  5036                           
  5037                           
  5038                           ; 2 bytes @ 0x7
  5039  0027                     	ds	1
  5040  0028                     ??_DOOR_update:	
  5041  0028                     ?_I2C2_MasterWrite:	
  5042                           ; 1 bytes @ 0x8
  5043                           
  5044  0028                     I2C2_MasterWrite@length:	
  5045                           ; 1 bytes @ 0x8
  5046                           
  5047  0028                     I2C2_MasterReadTRBBuild@ptrb:	
  5048                           ; 1 bytes @ 0x8
  5049                           
  5050  0028                     SPI_WriteReadBuffer@bufOut:	
  5051                           ; 1 bytes @ 0x8
  5052                           
  5053  0028                     SPI_WriteBuffer@i:	
  5054                           ; 1 bytes @ 0x8
  5055                           
  5056  0028                     RF_DataIsReady@status:	
  5057                           ; 1 bytes @ 0x8
  5058                           
  5059  0028                     TMR1_ReadTimer@readVal:	
  5060                           ; 1 bytes @ 0x8
  5061                           
  5062                           
  5063                           ; 2 bytes @ 0x8
  5064  0028                     	ds	1
  5065  0029                     ?_I2C2_MasterRead:	
  5066  0029                     ?_RF_WriteRegisterData:	
  5067                           ; 1 bytes @ 0x9
  5068                           
  5069  0029                     ??___lmul:	
  5070                           ; 1 bytes @ 0x9
  5071                           
  5072  0029                     ??___aldiv:	
  5073                           ; 1 bytes @ 0x9
  5074                           
  5075  0029                     ??___lldiv:	
  5076                           ; 1 bytes @ 0x9
  5077                           
  5078  0029                     ?___altoft:	
  5079                           ; 1 bytes @ 0x9
  5080                           
  5081  0029                     ?___awtoft:	
  5082                           ; 3 bytes @ 0x9
  5083                           
  5084  0029                     ?___lwtoft:	
  5085                           ; 3 bytes @ 0x9
  5086                           
  5087  0029                     SPI_WriteReadBuffer@i:	
  5088                           ; 3 bytes @ 0x9
  5089                           
  5090  0029                     DOOR_update@openAngle:	
  5091                           ; 1 bytes @ 0x9
  5092                           
  5093  0029                     I2C2_MasterWrite@address:	
  5094                           ; 1 bytes @ 0x9
  5095                           
  5096  0029                     I2C2_MasterRead@pdata:	
  5097                           ; 2 bytes @ 0x9
  5098                           
  5099  0029                     RF_WriteRegisterData@buf:	
  5100                           ; 2 bytes @ 0x9
  5101                           
  5102  0029                     ___awtoft@c:	
  5103                           ; 2 bytes @ 0x9
  5104                           
  5105  0029                     ___lwtoft@c:	
  5106                           ; 2 bytes @ 0x9
  5107                           
  5108  0029                     ___lmul@product:	
  5109                           ; 2 bytes @ 0x9
  5110                           
  5111  0029                     ___altoft@c:	
  5112                           ; 4 bytes @ 0x9
  5113                           
  5114                           
  5115                           ; 4 bytes @ 0x9
  5116  0029                     	ds	1
  5117  002A                     ?_RF_ReadRegisterData:	
  5118  002A                     TMR1_ReadTimer@readValHigh:	
  5119                           ; 1 bytes @ 0xA
  5120                           
  5121  002A                     RF_ReadRegisterData@buf:	
  5122                           ; 1 bytes @ 0xA
  5123                           
  5124  002A                     ___aldiv@counter:	
  5125                           ; 1 bytes @ 0xA
  5126                           
  5127  002A                     ___lldiv@quotient:	
  5128                           ; 1 bytes @ 0xA
  5129                           
  5130                           
  5131                           ; 4 bytes @ 0xA
  5132  002A                     	ds	1
  5133  002B                     TMR1_ReadTimer@readValLow:	
  5134  002B                     I2C2_MasterWrite@pflag:	
  5135                           ; 1 bytes @ 0xB
  5136                           
  5137  002B                     I2C2_MasterRead@length:	
  5138                           ; 1 bytes @ 0xB
  5139                           
  5140  002B                     RF_ReadRegisterData@bufSize:	
  5141                           ; 1 bytes @ 0xB
  5142                           
  5143  002B                     RF_WriteRegisterData@bufSize:	
  5144                           ; 1 bytes @ 0xB
  5145                           
  5146  002B                     ___aldiv@sign:	
  5147                           ; 1 bytes @ 0xB
  5148                           
  5149                           
  5150                           ; 1 bytes @ 0xB
  5151  002B                     	ds	1
  5152  002C                     ??_I2C2_MasterWrite:	
  5153  002C                     ??_RF_ReadRegisterData:	
  5154                           ; 1 bytes @ 0xC
  5155                           
  5156  002C                     ??_RF_WriteRegisterData:	
  5157                           ; 1 bytes @ 0xC
  5158                           
  5159  002C                     ??___awtoft:	
  5160                           ; 1 bytes @ 0xC
  5161                           
  5162  002C                     ??___lwtoft:	
  5163                           ; 1 bytes @ 0xC
  5164                           
  5165  002C                     I2C2_MasterRead@address:	
  5166                           ; 1 bytes @ 0xC
  5167                           
  5168  002C                     ___aldiv@quotient:	
  5169                           ; 2 bytes @ 0xC
  5170                           
  5171                           
  5172                           ; 4 bytes @ 0xC
  5173  002C                     	ds	1
  5174  002D                     ??_Timeout_updateCurrentTime:	
  5175  002D                     ??___altoft:	
  5176                           ; 1 bytes @ 0xD
  5177                           
  5178  002D                     RF_WriteRegisterData@reg:	
  5179                           ; 1 bytes @ 0xD
  5180                           
  5181                           
  5182                           ; 1 bytes @ 0xD
  5183  002D                     	ds	1
  5184  002E                     ??_Wireless_init:	
  5185  002E                     ?_RF_TxPayload:	
  5186                           ; 1 bytes @ 0xE
  5187                           
  5188  002E                     I2C2_MasterWrite@pdata:	
  5189                           ; 1 bytes @ 0xE
  5190                           
  5191  002E                     I2C2_MasterRead@pflag:	
  5192                           ; 1 bytes @ 0xE
  5193                           
  5194  002E                     RF_ReadRegisterData@reg:	
  5195                           ; 1 bytes @ 0xE
  5196                           
  5197  002E                     RF_TxPayload@payloadSize:	
  5198                           ; 1 bytes @ 0xE
  5199                           
  5200  002E                     ___awtoft@sign:	
  5201                           ; 1 bytes @ 0xE
  5202                           
  5203  002E                     ___lldiv@counter:	
  5204                           ; 1 bytes @ 0xE
  5205                           
  5206                           
  5207                           ; 1 bytes @ 0xE
  5208  002E                     	ds	1
  5209  002F                     ??_Wireless_wake:	
  5210  002F                     ??_Wireless_sleep:	
  5211                           ; 1 bytes @ 0xF
  5212                           
  5213  002F                     ?_I2C_ByteWrite:	
  5214                           ; 1 bytes @ 0xF
  5215                           
  5216  002F                     ??_Wireless_changeTransmitPower:	
  5217                           ; 1 bytes @ 0xF
  5218                           
  5219  002F                     ??_I2C2_MasterRead:	
  5220                           ; 1 bytes @ 0xF
  5221                           
  5222  002F                     ??_RF_TxPayload:	
  5223                           ; 1 bytes @ 0xF
  5224                           
  5225  002F                     ?_RF_RxPayload:	
  5226                           ; 1 bytes @ 0xF
  5227                           
  5228  002F                     RF_RxPayload@payloadSize:	
  5229                           ; 1 bytes @ 0xF
  5230                           
  5231  002F                     I2C_ByteWrite@pBuffer:	
  5232                           ; 1 bytes @ 0xF
  5233                           
  5234  002F                     ___altoft@exp:	
  5235                           ; 1 bytes @ 0xF
  5236                           
  5237                           
  5238                           ; 1 bytes @ 0xF
  5239  002F                     	ds	1
  5240  0030                     ??_RF_RxPayload:	
  5241  0030                     RF_TxPayload@payload:	
  5242                           ; 1 bytes @ 0x10
  5243                           
  5244  0030                     Wireless_changeTransmitPower@power:	
  5245                           ; 1 bytes @ 0x10
  5246                           
  5247  0030                     Wireless_sleep@reg:	
  5248                           ; 1 bytes @ 0x10
  5249                           
  5250  0030                     Wireless_wake@reg:	
  5251                           ; 1 bytes @ 0x10
  5252                           
  5253  0030                     I2C_ByteWrite@WriteAddr:	
  5254                           ; 1 bytes @ 0x10
  5255                           
  5256  0030                     ___altoft@sign:	
  5257                           ; 1 bytes @ 0x10
  5258                           
  5259                           
  5260                           ; 1 bytes @ 0x10
  5261  0030                     	ds	1
  5262  0031                     ??_I2C_ByteWrite:	
  5263  0031                     ?_I2C_BufferRead:	
  5264                           ; 1 bytes @ 0x11
  5265                           
  5266  0031                     ?_Wireless_sendData:	
  5267                           ; 1 bytes @ 0x11
  5268                           
  5269  0031                     ?___ftdiv:	
  5270                           ; 1 bytes @ 0x11
  5271                           
  5272  0031                     Wireless_changeTransmitPower@val:	
  5273                           ; 3 bytes @ 0x11
  5274                           
  5275  0031                     Wireless_sendData@length:	
  5276                           ; 1 bytes @ 0x11
  5277                           
  5278  0031                     I2C_BufferRead@pBuffer:	
  5279                           ; 1 bytes @ 0x11
  5280                           
  5281  0031                     ___ftdiv@f2:	
  5282                           ; 2 bytes @ 0x11
  5283                           
  5284  0031                     Timeout_updateCurrentTime@var:	
  5285                           ; 3 bytes @ 0x11
  5286                           
  5287                           
  5288                           ; 4 bytes @ 0x11
  5289  0031                     	ds	1
  5290  0032                     ??_Wireless_sendData:	
  5291  0032                     RF_RxPayload@payload:	
  5292                           ; 1 bytes @ 0x12
  5293                           
  5294                           
  5295                           ; 1 bytes @ 0x12
  5296  0032                     	ds	1
  5297  0033                     ??_Wireless_checkDataReceived:	
  5298  0033                     Wireless_sendData@status:	
  5299                           ; 1 bytes @ 0x13
  5300                           
  5301  0033                     I2C_BufferRead@ReadAddr:	
  5302                           ; 1 bytes @ 0x13
  5303                           
  5304                           
  5305                           ; 1 bytes @ 0x13
  5306  0033                     	ds	1
  5307  0034                     Wireless_sendData@payload:	
  5308  0034                     I2C_BufferRead@NumByteToRead:	
  5309                           ; 1 bytes @ 0x14
  5310                           
  5311  0034                     ___ftdiv@f1:	
  5312                           ; 2 bytes @ 0x14
  5313                           
  5314                           
  5315                           ; 3 bytes @ 0x14
  5316  0034                     	ds	1
  5317  0035                     ??_Wireless_determineTransmitPower:	
  5318  0035                     I2C_ByteWrite@slaveAddr:	
  5319                           ; 1 bytes @ 0x15
  5320                           
  5321                           
  5322                           ; 1 bytes @ 0x15
  5323  0035                     	ds	1
  5324  0036                     ??_I2C_BufferRead:	
  5325  0036                     I2C_ByteWrite@data:	
  5326                           ; 1 bytes @ 0x16
  5327                           
  5328                           
  5329                           ; 2 bytes @ 0x16
  5330  0036                     	ds	1
  5331  0037                     ??___ftdiv:	
  5332  0037                     Wireless_checkDataReceived@data:	
  5333                           ; 1 bytes @ 0x17
  5334                           
  5335                           
  5336                           ; 4 bytes @ 0x17
  5337  0037                     	ds	1
  5338  0038                     Wireless_determineTransmitPower@initialise:	
  5339  0038                     I2C_ByteWrite@status:	
  5340                           ; 1 bytes @ 0x18
  5341                           
  5342                           
  5343                           ; 1 bytes @ 0x18
  5344  0038                     	ds	1
  5345  0039                     Wireless_determineTransmitPower@testPayload:	
  5346                           
  5347                           ; 1 bytes @ 0x19
  5348  0039                     	ds	1
  5349  003A                     Wireless_determineTransmitPower@latestResult:	
  5350  003A                     I2C_BufferRead@slaveAddr:	
  5351                           ; 1 bytes @ 0x1A
  5352                           
  5353                           
  5354                           ; 1 bytes @ 0x1A
  5355  003A                     	ds	1
  5356  003B                     Wireless_checkDataReceived@channel:	
  5357  003B                     I2C_BufferRead@status:	
  5358                           ; 1 bytes @ 0x1B
  5359                           
  5360  003B                     ___ftdiv@cntr:	
  5361                           ; 1 bytes @ 0x1B
  5362                           
  5363                           
  5364                           ; 1 bytes @ 0x1B
  5365  003B                     	ds	1
  5366  003C                     ??_BMP_init:	
  5367  003C                     ?_HMC5883L_I2C_BufferRead:	
  5368                           ; 1 bytes @ 0x1C
  5369                           
  5370  003C                     HMC5883L_I2C_BufferRead@pBuffer:	
  5371                           ; 1 bytes @ 0x1C
  5372                           
  5373  003C                     ___ftdiv@f3:	
  5374                           ; 2 bytes @ 0x1C
  5375                           
  5376                           
  5377                           ; 3 bytes @ 0x1C
  5378  003C                     	ds	2
  5379  003E                     HMC5883L_I2C_BufferRead@ReadAddr:	
  5380                           
  5381                           ; 1 bytes @ 0x1E
  5382  003E                     	ds	1
  5383  003F                     BMP_init@t:	
  5384  003F                     ___ftdiv@exp:	
  5385                           ; 1 bytes @ 0x1F
  5386                           
  5387  003F                     HMC5883L_I2C_BufferRead@NumByteToRead:	
  5388                           ; 1 bytes @ 0x1F
  5389                           
  5390                           
  5391                           ; 2 bytes @ 0x1F
  5392  003F                     	ds	1
  5393  0040                     ___ftdiv@sign:	
  5394                           
  5395                           ; 1 bytes @ 0x20
  5396  0040                     	ds	1
  5397  0041                     ??_HMC5883L_I2C_BufferRead:	
  5398  0041                     ?_Sensor_getSupplyVoltage:	
  5399                           ; 1 bytes @ 0x21
  5400                           
  5401  0041                     ?___ftneg:	
  5402                           ; 3 bytes @ 0x21
  5403                           
  5404  0041                     ___ftneg@f1:	
  5405                           ; 3 bytes @ 0x21
  5406                           
  5407                           
  5408                           ; 3 bytes @ 0x21
  5409  0041                     	ds	1
  5410  0042                     HMC5883L_I2C_BufferRead@slaveAddr:	
  5411                           
  5412                           ; 1 bytes @ 0x22
  5413  0042                     	ds	1
  5414  0043                     ?_HMC5883L_ReadBits:	
  5415  0043                     HMC5883L_ReadBits@regAddr:	
  5416                           ; 1 bytes @ 0x23
  5417                           
  5418                           
  5419                           ; 1 bytes @ 0x23
  5420  0043                     	ds	1
  5421  0044                     ??_Sensor_getSupplyVoltage:	
  5422  0044                     ??___ftneg:	
  5423                           ; 1 bytes @ 0x24
  5424                           
  5425  0044                     HMC5883L_ReadBits@bitStart:	
  5426                           ; 1 bytes @ 0x24
  5427                           
  5428  0044                     Sensor_getSupplyVoltage@voltage:	
  5429                           ; 1 bytes @ 0x24
  5430                           
  5431                           
  5432                           ; 3 bytes @ 0x24
  5433  0044                     	ds	1
  5434  0045                     HMC5883L_ReadBits@length:	
  5435                           
  5436                           ; 1 bytes @ 0x25
  5437  0045                     	ds	1
  5438  0046                     HMC5883L_ReadBits@data:	
  5439                           
  5440                           ; 1 bytes @ 0x26
  5441  0046                     	ds	1
  5442  0047                     ??_HMC5883L_ReadBits:	
  5443  0047                     Sensor_getSupplyVoltage@res:	
  5444                           ; 1 bytes @ 0x27
  5445                           
  5446                           
  5447                           ; 2 bytes @ 0x27
  5448  0047                     	ds	2
  5449  0049                     ?___ftadd:	
  5450  0049                     ___ftadd@f1:	
  5451                           ; 3 bytes @ 0x29
  5452                           
  5453                           
  5454                           ; 3 bytes @ 0x29
  5455  0049                     	ds	1
  5456  004A                     HMC5883L_ReadBits@slaveAddr:	
  5457                           
  5458                           ; 1 bytes @ 0x2A
  5459  004A                     	ds	1
  5460  004B                     HMC5883L_ReadBits@mask:	
  5461                           
  5462                           ; 1 bytes @ 0x2B
  5463  004B                     	ds	1
  5464  004C                     HMC5883L_ReadBits@tmp:	
  5465  004C                     ___ftadd@f2:	
  5466                           ; 1 bytes @ 0x2C
  5467                           
  5468                           
  5469                           ; 3 bytes @ 0x2C
  5470  004C                     	ds	3
  5471  004F                     ??___ftadd:	
  5472                           
  5473                           ; 1 bytes @ 0x2F
  5474  004F                     	ds	4
  5475  0053                     ___ftadd@sign:	
  5476                           
  5477                           ; 1 bytes @ 0x33
  5478  0053                     	ds	1
  5479  0054                     ___ftadd@exp2:	
  5480                           
  5481                           ; 1 bytes @ 0x34
  5482  0054                     	ds	1
  5483  0055                     ___ftadd@exp1:	
  5484                           
  5485                           ; 1 bytes @ 0x35
  5486  0055                     	ds	1
  5487  0056                     ?___ftmul:	
  5488  0056                     ___ftmul@f1:	
  5489                           ; 3 bytes @ 0x36
  5490                           
  5491                           
  5492                           ; 3 bytes @ 0x36
  5493  0056                     	ds	3
  5494  0059                     ___ftmul@f2:	
  5495                           
  5496                           ; 3 bytes @ 0x39
  5497  0059                     	ds	3
  5498  005C                     ??___ftmul:	
  5499                           
  5500                           ; 1 bytes @ 0x3C
  5501  005C                     	ds	4
  5502  0060                     ___ftmul@exp:	
  5503                           
  5504                           ; 1 bytes @ 0x40
  5505  0060                     	ds	1
  5506  0061                     ___ftmul@f3_as_product:	
  5507                           
  5508                           ; 3 bytes @ 0x41
  5509  0061                     	ds	3
  5510  0064                     ___ftmul@cntr:	
  5511                           
  5512                           ; 1 bytes @ 0x44
  5513  0064                     	ds	1
  5514  0065                     ___ftmul@sign:	
  5515                           
  5516                           ; 1 bytes @ 0x45
  5517  0065                     	ds	1
  5518  0066                     ?___fttol:	
  5519  0066                     ___fttol@f1:	
  5520                           ; 4 bytes @ 0x46
  5521                           
  5522                           
  5523                           ; 3 bytes @ 0x46
  5524  0066                     	ds	4
  5525  006A                     ??___fttol:	
  5526                           
  5527                           ; 1 bytes @ 0x4A
  5528  006A                     	ds	4
  5529  006E                     ??_Wireless_packageData:	
  5530                           
  5531                           ; 1 bytes @ 0x4E
  5532  006E                     	ds	1
  5533                           
  5534                           	psect	maintext
  5535  0345                     __pmaintext:	
  5536 ;;
  5537 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
  5538 ;;
  5539 ;; *************** function _main *****************
  5540 ;; Defined at:
  5541 ;;		line 58 in file "main.c"
  5542 ;; Parameters:    Size  Location     Type
  5543 ;;		None
  5544 ;; Auto vars:     Size  Location     Type
  5545 ;;  doorOpenTime    4    7[BANK3 ] unsigned long 
  5546 ;;  doorClosedUp    4    1[BANK3 ] unsigned long 
  5547 ;;  dur             2    5[BANK3 ] unsigned int 
  5548 ;;  doorStatus      1   11[BANK3 ] enum E3332
  5549 ;;  prevDoorStat    1    0[BANK3 ] enum E3332
  5550 ;; Return value:  Size  Location     Type
  5551 ;;                  1    wreg      void 
  5552 ;; Registers used:
  5553 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5554 ;; Tracked objects:
  5555 ;;		On entry : B1F/0
  5556 ;;		On exit  : 0/0
  5557 ;;		Unchanged: 0/0
  5558 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5559 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5560 ;;      Locals:         0       0       0       0      12       0       0       0       0       0       0       0       
      +0       0
  5561 ;;      Temps:          0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
  5562 ;;      Totals:         0       0       2       0      12       0       0       0       0       0       0       0       
      +0       0
  5563 ;;Total ram usage:       14 bytes
  5564 ;; Hardware stack levels required when called:   12
  5565 ;; This function calls:
  5566 ;;		_BMP_init
  5567 ;;		_BMP_readTemperature
  5568 ;;		_DOOR_init
  5569 ;;		_DOOR_run
  5570 ;;		_SYSTEM_Initialize
  5571 ;;		_Sensor_peripheralSleep
  5572 ;;		_Timeout_getGlobalCounter
  5573 ;;		_Timeout_updateCurrentTime
  5574 ;;		_Wireless_determineTransmitPower
  5575 ;;		_Wireless_init
  5576 ;;		_Wireless_packageData
  5577 ;;		_Wireless_sleep
  5578 ;;		_Wireless_wake
  5579 ;;		___lldiv
  5580 ;;		___lwdiv
  5581 ;;		_setSleepTime
  5582 ;; This function is called by:
  5583 ;;		Startup code after reset
  5584 ;; This function uses a non-reentrant model
  5585 ;;
  5586                           
  5587                           
  5588                           ;psect for function _main
  5589  0345                     _main:	
  5590                           
  5591                           ;main.c: 60: DOOR doorStatus=DOOR_CLOSED,prevDoorStatus=DOOR_CLOSED;
  5592                           
  5593                           ;incstack = 0
  5594                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  5595  0345  0023               	movlb	3	; select bank3
  5596  0346  01DB               	clrf	main@doorStatus^(0+384)
  5597  0347  01D0               	clrf	main@prevDoorStatus^(0+384)
  5598                           
  5599                           ;main.c: 61: unsigned long doorClosedUpdateCounter=0;
  5600  0348  3000               	movlw	0
  5601  0349  00D4               	movwf	(main@doorClosedUpdateCounter+3)^(0+384)
  5602  034A  3000               	movlw	0
  5603  034B  00D3               	movwf	(main@doorClosedUpdateCounter+2)^(0+384)
  5604  034C  3000               	movlw	0
  5605  034D  00D2               	movwf	(main@doorClosedUpdateCounter+1)^(0+384)
  5606  034E  3000               	movlw	0
  5607  034F  00D1               	movwf	main@doorClosedUpdateCounter^(0+384)
  5608                           
  5609                           ;main.c: 62: unsigned long doorOpenTime=0;
  5610  0350  3000               	movlw	0
  5611  0351  00DA               	movwf	(main@doorOpenTime+3)^(0+384)
  5612  0352  3000               	movlw	0
  5613  0353  00D9               	movwf	(main@doorOpenTime+2)^(0+384)
  5614  0354  3000               	movlw	0
  5615  0355  00D8               	movwf	(main@doorOpenTime+1)^(0+384)
  5616  0356  3000               	movlw	0
  5617  0357  00D7               	movwf	main@doorOpenTime^(0+384)
  5618                           
  5619                           ;main.c: 63: unsigned int dur=0;
  5620  0358  01D5               	clrf	main@dur^(0+384)
  5621  0359  01D6               	clrf	(main@dur+1)^(0+384)
  5622                           
  5623                           ;main.c: 66: SYSTEM_Initialize();
  5624  035A  3195  2506  3183   	fcall	_SYSTEM_Initialize
  5625                           
  5626                           ;main.c: 72: (INTCONbits.GIE = 1);
  5627  035D  178B               	bsf	11,7	;volatile
  5628                           
  5629                           ;main.c: 75: (INTCONbits.PEIE = 1);
  5630  035E  170B               	bsf	11,6	;volatile
  5631                           
  5632                           ;main.c: 82: do { WPUCbits.WPUC5 = 1; } while(0);
  5633  035F  0024               	movlb	4	; select bank4
  5634  0360  168E               	bsf	14,5	;volatile
  5635                           
  5636                           ;main.c: 83: _delay((unsigned long)((1000)*(8000000/4000.0)));
  5637  0361  300B               	movlw	11
  5638  0362  0021               	movlb	1	; select bank1
  5639  0363  00C9               	movwf	(??_main^(0+128)+1)
  5640  0364  3026               	movlw	38
  5641  0365  00C8               	movwf	??_main^(0+128)
  5642  0366  305D               	movlw	93
  5643  0367                     u7167:	
  5644  0367  0B89               	decfsz	9,f
  5645  0368  2B67               	goto	u7167
  5646  0369  0BC8               	decfsz	??_main^(0+128),f
  5647  036A  2B67               	goto	u7167
  5648  036B  0BC9               	decfsz	(??_main^(0+128)+1),f
  5649  036C  2B67               	goto	u7167
  5650  036D  3200               	nop2
  5651                           
  5652                           ;main.c: 84: Sensor_peripheralSleep();
  5653  036E  3192  22CB  3183   	fcall	_Sensor_peripheralSleep
  5654                           
  5655                           ;main.c: 85: Wireless_init();
  5656  0371  318C  2408  3183   	fcall	_Wireless_init
  5657                           
  5658                           ;main.c: 86: BMP_init();
  5659  0374  318B  231A  3183   	fcall	_BMP_init
  5660                           
  5661                           ;main.c: 93: setSleepTime(10000/1000);
  5662  0377  300A               	movlw	10
  5663  0378  0020               	movlb	0	; select bank0
  5664  0379  00A1               	movwf	setSleepTime@timeSec
  5665  037A  3000               	movlw	0
  5666  037B  00A2               	movwf	setSleepTime@timeSec+1
  5667  037C  3192  22D5  3183   	fcall	_setSleepTime
  5668                           
  5669                           ;main.c: 94: DOOR_init();
  5670  037F  3180  2003  3183   	fcall	_DOOR_init
  5671                           
  5672                           ;main.c: 95: do { LATCbits.LATC6 = 1; } while(0);
  5673  0382  0022               	movlb	2	; select bank2
  5674  0383  170E               	bsf	14,6	;volatile
  5675                           
  5676                           ;main.c: 96: _delay((unsigned long)((500)*(8000000/4000.0)));
  5677  0384  3006               	movlw	6
  5678  0385  0021               	movlb	1	; select bank1
  5679  0386  00C9               	movwf	(??_main^(0+128)+1)
  5680  0387  3013               	movlw	19
  5681  0388  00C8               	movwf	??_main^(0+128)
  5682  0389  30AD               	movlw	173
  5683  038A                     u7177:	
  5684  038A  0B89               	decfsz	9,f
  5685  038B  2B8A               	goto	u7177
  5686  038C  0BC8               	decfsz	??_main^(0+128),f
  5687  038D  2B8A               	goto	u7177
  5688  038E  0BC9               	decfsz	(??_main^(0+128)+1),f
  5689  038F  2B8A               	goto	u7177
  5690  0390  3200               	nop2
  5691                           
  5692                           ;main.c: 97: do { LATCbits.LATC6 = 0; } while(0);
  5693  0391  0022               	movlb	2	; select bank2
  5694  0392  130E               	bcf	14,6	;volatile
  5695                           
  5696                           ;main.c: 98: Wireless_wake();
  5697  0393  3196  2605  3183   	fcall	_Wireless_wake
  5698                           
  5699                           ;main.c: 99: Wireless_determineTransmitPower(1);
  5700  0396  3001               	movlw	1
  5701  0397  318D  2522  3183   	fcall	_Wireless_determineTransmitPower
  5702                           
  5703                           ;main.c: 100: Wireless_packageData(doorStatus,doorOpenTime/1000,BMP_readTemperature());
  5704  039A  3000               	movlw	0
  5705  039B  0020               	movlb	0	; select bank0
  5706  039C  00A4               	movwf	___lldiv@divisor+3
  5707  039D  3000               	movlw	0
  5708  039E  00A3               	movwf	___lldiv@divisor+2
  5709  039F  3003               	movlw	3
  5710  03A0  00A2               	movwf	___lldiv@divisor+1
  5711  03A1  30E8               	movlw	232
  5712  03A2  00A1               	movwf	___lldiv@divisor
  5713  03A3  0023               	movlb	3	; select bank3
  5714  03A4  085A               	movf	(main@doorOpenTime+3)^(0+384),w
  5715  03A5  0020               	movlb	0	; select bank0
  5716  03A6  00A8               	movwf	___lldiv@dividend+3
  5717  03A7  0023               	movlb	3	; select bank3
  5718  03A8  0859               	movf	(main@doorOpenTime+2)^(0+384),w
  5719  03A9  0020               	movlb	0	; select bank0
  5720  03AA  00A7               	movwf	___lldiv@dividend+2
  5721  03AB  0023               	movlb	3	; select bank3
  5722  03AC  0858               	movf	(main@doorOpenTime+1)^(0+384),w
  5723  03AD  0020               	movlb	0	; select bank0
  5724  03AE  00A6               	movwf	___lldiv@dividend+1
  5725  03AF  0023               	movlb	3	; select bank3
  5726  03B0  0857               	movf	main@doorOpenTime^(0+384),w
  5727  03B1  0020               	movlb	0	; select bank0
  5728  03B2  00A5               	movwf	___lldiv@dividend
  5729  03B3  3189  2151  3183   	fcall	___lldiv
  5730  03B6  0020               	movlb	0	; select bank0
  5731  03B7  0821               	movf	?___lldiv,w
  5732  03B8  0021               	movlb	1	; select bank1
  5733  03B9  00C8               	movwf	??_main^(0+128)
  5734  03BA  0848               	movf	??_main^(0+128),w
  5735  03BB  00BA               	movwf	Wireless_packageData@openTime^(0+128)
  5736  03BC  3180  2077  3183   	fcall	_BMP_readTemperature
  5737  03BF  0021               	movlb	1	; select bank1
  5738  03C0  0826               	movf	?_BMP_readTemperature^(0+128),w
  5739  03C1  00BB               	movwf	Wireless_packageData@tempC^(0+128)
  5740  03C2  0827               	movf	(?_BMP_readTemperature+1)^(0+128),w
  5741  03C3  00BC               	movwf	(Wireless_packageData@tempC+1)^(0+128)
  5742  03C4  0828               	movf	(?_BMP_readTemperature+2)^(0+128),w
  5743  03C5  00BD               	movwf	(Wireless_packageData@tempC+2)^(0+128)
  5744  03C6  0023               	movlb	3	; select bank3
  5745  03C7  085B               	movf	main@doorStatus^(0+384),w
  5746  03C8  318F  2724  3183   	fcall	_Wireless_packageData
  5747                           
  5748                           ;main.c: 101: Wireless_sleep();
  5749  03CB  3194  2486  3183   	fcall	_Wireless_sleep
  5750  03CE                     l6737:	
  5751                           ;main.c: 103: while (1)
  5752                           
  5753                           
  5754                           ;main.c: 104: {
  5755                           ;main.c: 105: Timeout_updateCurrentTime();
  5756  03CE  318A  2257  3183   	fcall	_Timeout_updateCurrentTime
  5757                           
  5758                           ;main.c: 106: if(PORTCbits.RC5==0)
  5759  03D1  0020               	movlb	0	; select bank0
  5760  03D2  1A8E               	btfsc	14,5	;volatile
  5761  03D3  2C2B               	goto	l6753
  5762                           
  5763                           ;main.c: 107: {
  5764                           ;main.c: 109: do { LATCbits.LATC6 = 1; } while(0);
  5765  03D4  0022               	movlb	2	; select bank2
  5766  03D5  170E               	bsf	14,6	;volatile
  5767                           
  5768                           ;main.c: 110: _delay((unsigned long)((500)*(8000000/4000.0)));
  5769  03D6  3006               	movlw	6
  5770  03D7  0021               	movlb	1	; select bank1
  5771  03D8  00C9               	movwf	(??_main^(0+128)+1)
  5772  03D9  3013               	movlw	19
  5773  03DA  00C8               	movwf	??_main^(0+128)
  5774  03DB  30AD               	movlw	173
  5775  03DC                     u7187:	
  5776  03DC  0B89               	decfsz	9,f
  5777  03DD  2BDC               	goto	u7187
  5778  03DE  0BC8               	decfsz	??_main^(0+128),f
  5779  03DF  2BDC               	goto	u7187
  5780  03E0  0BC9               	decfsz	(??_main^(0+128)+1),f
  5781  03E1  2BDC               	goto	u7187
  5782  03E2  3200               	nop2
  5783                           
  5784                           ;main.c: 111: do { LATCbits.LATC6 = 0; } while(0);
  5785  03E3  0022               	movlb	2	; select bank2
  5786  03E4  130E               	bcf	14,6	;volatile
  5787                           
  5788                           ;main.c: 112: Wireless_wake();
  5789  03E5  3196  2605  3183   	fcall	_Wireless_wake
  5790                           
  5791                           ;main.c: 113: dur = Timeout_getGlobalCounter() - doorOpenTime;
  5792  03E8  0023               	movlb	3	; select bank3
  5793  03E9  0957               	comf	main@doorOpenTime^(0+384),w
  5794  03EA  0021               	movlb	1	; select bank1
  5795  03EB  00C8               	movwf	??_main^(0+128)
  5796  03EC  0023               	movlb	3	; select bank3
  5797  03ED  0958               	comf	(main@doorOpenTime+1)^(0+384),w
  5798  03EE  0021               	movlb	1	; select bank1
  5799  03EF  00C9               	movwf	(??_main^(0+128)+1)
  5800  03F0  0AC8               	incf	??_main^(0+128),f
  5801  03F1  1903               	skipnz
  5802  03F2  0AC9               	incf	(??_main^(0+128)+1),f
  5803  03F3  3193  23BB  3183   	fcall	_Timeout_getGlobalCounter
  5804  03F6  0021               	movlb	1	; select bank1
  5805  03F7  0848               	movf	??_main^(0+128),w
  5806  03F8  0020               	movlb	0	; select bank0
  5807  03F9  0721               	addwf	?_Timeout_getGlobalCounter,w
  5808  03FA  0023               	movlb	3	; select bank3
  5809  03FB  00D5               	movwf	main@dur^(0+384)
  5810  03FC  0021               	movlb	1	; select bank1
  5811  03FD  0849               	movf	(??_main+1)^(0+128),w
  5812  03FE  0020               	movlb	0	; select bank0
  5813  03FF  3D22               	addwfc	?_Timeout_getGlobalCounter+1,w
  5814  0400  0023               	movlb	3	; select bank3
  5815  0401  00D6               	movwf	(main@dur+1)^(0+384)
  5816                           
  5817                           ;main.c: 114: Wireless_packageData(doorStatus,dur/1000,BMP_readTemperature());
  5818  0402  30E8               	movlw	232
  5819  0403  0020               	movlb	0	; select bank0
  5820  0404  00A1               	movwf	___lwdiv@divisor
  5821  0405  3003               	movlw	3
  5822  0406  00A2               	movwf	___lwdiv@divisor+1
  5823  0407  0023               	movlb	3	; select bank3
  5824  0408  0856               	movf	(main@dur+1)^(0+384),w
  5825  0409  0020               	movlb	0	; select bank0
  5826  040A  00A4               	movwf	___lwdiv@dividend+1
  5827  040B  0023               	movlb	3	; select bank3
  5828  040C  0855               	movf	main@dur^(0+384),w
  5829  040D  0020               	movlb	0	; select bank0
  5830  040E  00A3               	movwf	___lwdiv@dividend
  5831  040F  3197  27CB  3183   	fcall	___lwdiv
  5832  0412  0020               	movlb	0	; select bank0
  5833  0413  0821               	movf	?___lwdiv,w
  5834  0414  0021               	movlb	1	; select bank1
  5835  0415  00C8               	movwf	??_main^(0+128)
  5836  0416  0848               	movf	??_main^(0+128),w
  5837  0417  00BA               	movwf	Wireless_packageData@openTime^(0+128)
  5838  0418  3180  2077  3183   	fcall	_BMP_readTemperature
  5839  041B  0021               	movlb	1	; select bank1
  5840  041C  0826               	movf	?_BMP_readTemperature^(0+128),w
  5841  041D  00BB               	movwf	Wireless_packageData@tempC^(0+128)
  5842  041E  0827               	movf	(?_BMP_readTemperature+1)^(0+128),w
  5843  041F  00BC               	movwf	(Wireless_packageData@tempC+1)^(0+128)
  5844  0420  0828               	movf	(?_BMP_readTemperature+2)^(0+128),w
  5845  0421  00BD               	movwf	(Wireless_packageData@tempC+2)^(0+128)
  5846  0422  0023               	movlb	3	; select bank3
  5847  0423  085B               	movf	main@doorStatus^(0+384),w
  5848  0424  318F  2724  3183   	fcall	_Wireless_packageData
  5849                           
  5850                           ;main.c: 115: Wireless_sleep();
  5851  0427  3194  2486  3183   	fcall	_Wireless_sleep
  5852                           
  5853                           ;main.c: 116: }
  5854  042A  2C33               	goto	l6755
  5855  042B                     l6753:	
  5856                           
  5857                           ;main.c: 117: else
  5858                           ;main.c: 118: doorStatus=DOOR_run();
  5859  042B  3192  22AE  3183   	fcall	_DOOR_run
  5860  042E  0021               	movlb	1	; select bank1
  5861  042F  00C8               	movwf	??_main^(0+128)
  5862  0430  0848               	movf	??_main^(0+128),w
  5863  0431  0023               	movlb	3	; select bank3
  5864  0432  00DB               	movwf	main@doorStatus^(0+384)
  5865  0433                     l6755:	
  5866                           
  5867                           ;main.c: 121: if((doorStatus!=prevDoorStatus && doorStatus!=DOOR_ERROR))
  5868  0433  0023               	movlb	3	; select bank3
  5869  0434  085B               	movf	main@doorStatus^(0+384),w
  5870  0435  0650               	xorwf	main@prevDoorStatus^(0+384),w
  5871  0436  1903               	skipnz
  5872  0437  2CA4               	goto	l6777
  5873  0438  3002               	movlw	2
  5874  0439  065B               	xorwf	main@doorStatus^(0+384),w
  5875  043A  1903               	btfsc	3,2
  5876  043B  2CA4               	goto	l6777
  5877                           
  5878                           ;main.c: 122: {
  5879                           ;main.c: 123: Wireless_wake();
  5880  043C  3196  2605  3183   	fcall	_Wireless_wake
  5881                           
  5882                           ;main.c: 124: if(doorStatus==DOOR_OPEN)
  5883  043F  0023               	movlb	3	; select bank3
  5884  0440  035B               	decf	main@doorStatus^(0+384),w
  5885  0441  1D03               	btfss	3,2
  5886  0442  2C46               	goto	l6767
  5887                           
  5888                           ;main.c: 125: {
  5889                           ;main.c: 126: Wireless_packageData(doorStatus,0,BMP_readTemperature());
  5890  0443  0021               	movlb	1	; select bank1
  5891  0444  01BA               	clrf	Wireless_packageData@openTime^(0+128)
  5892  0445  2C75               	goto	L4
  5893  0446                     l6767:	
  5894                           ;main.c: 131: }
  5895                           
  5896                           ;main.c: 127: doorOpenTime= Timeout_getGlobalCounter();
  5897                           
  5898                           
  5899                           ;main.c: 132: else
  5900                           ;main.c: 133: {
  5901                           ;main.c: 134: dur = Timeout_getGlobalCounter() - doorOpenTime;
  5902  0446  0957               	comf	main@doorOpenTime^(0+384),w
  5903  0447  0021               	movlb	1	; select bank1
  5904  0448  00C8               	movwf	??_main^(0+128)
  5905  0449  0023               	movlb	3	; select bank3
  5906  044A  0958               	comf	(main@doorOpenTime+1)^(0+384),w
  5907  044B  0021               	movlb	1	; select bank1
  5908  044C  00C9               	movwf	(??_main^(0+128)+1)
  5909  044D  0AC8               	incf	??_main^(0+128),f
  5910  044E  1903               	skipnz
  5911  044F  0AC9               	incf	(??_main^(0+128)+1),f
  5912  0450  3193  23BB  3183   	fcall	_Timeout_getGlobalCounter
  5913  0453  0021               	movlb	1	; select bank1
  5914  0454  0848               	movf	??_main^(0+128),w
  5915  0455  0020               	movlb	0	; select bank0
  5916  0456  0721               	addwf	?_Timeout_getGlobalCounter,w
  5917  0457  0023               	movlb	3	; select bank3
  5918  0458  00D5               	movwf	main@dur^(0+384)
  5919  0459  0021               	movlb	1	; select bank1
  5920  045A  0849               	movf	(??_main+1)^(0+128),w
  5921  045B  0020               	movlb	0	; select bank0
  5922  045C  3D22               	addwfc	?_Timeout_getGlobalCounter+1,w
  5923  045D  0023               	movlb	3	; select bank3
  5924  045E  00D6               	movwf	(main@dur+1)^(0+384)
  5925                           
  5926                           ;main.c: 135: Wireless_packageData(doorStatus,dur/1000,BMP_readTemperature());
  5927  045F  30E8               	movlw	232
  5928  0460  0020               	movlb	0	; select bank0
  5929  0461  00A1               	movwf	___lwdiv@divisor
  5930  0462  3003               	movlw	3
  5931  0463  00A2               	movwf	___lwdiv@divisor+1
  5932  0464  0023               	movlb	3	; select bank3
  5933  0465  0856               	movf	(main@dur+1)^(0+384),w
  5934  0466  0020               	movlb	0	; select bank0
  5935  0467  00A4               	movwf	___lwdiv@dividend+1
  5936  0468  0023               	movlb	3	; select bank3
  5937  0469  0855               	movf	main@dur^(0+384),w
  5938  046A  0020               	movlb	0	; select bank0
  5939  046B  00A3               	movwf	___lwdiv@dividend
  5940  046C  3197  27CB  3183   	fcall	___lwdiv
  5941  046F  0020               	movlb	0	; select bank0
  5942  0470  0821               	movf	?___lwdiv,w
  5943  0471  0021               	movlb	1	; select bank1
  5944  0472  00C8               	movwf	??_main^(0+128)
  5945  0473  0848               	movf	??_main^(0+128),w
  5946  0474  00BA               	movwf	Wireless_packageData@openTime^(0+128)
  5947  0475                     L4:	
  5948  0475  3180  2077  3183   	fcall	_BMP_readTemperature
  5949  0478  0021               	movlb	1	; select bank1
  5950  0479  0826               	movf	?_BMP_readTemperature^(0+128),w
  5951  047A  00BB               	movwf	Wireless_packageData@tempC^(0+128)
  5952  047B  0827               	movf	(?_BMP_readTemperature+1)^(0+128),w
  5953  047C  00BC               	movwf	(Wireless_packageData@tempC+1)^(0+128)
  5954  047D  0828               	movf	(?_BMP_readTemperature+2)^(0+128),w
  5955  047E  00BD               	movwf	(Wireless_packageData@tempC+2)^(0+128)
  5956  047F  0023               	movlb	3	; select bank3
  5957  0480  085B               	movf	main@doorStatus^(0+384),w
  5958  0481  318F  2724  3183   	fcall	_Wireless_packageData
  5959                           
  5960                           ;main.c: 136: doorOpenTime = Timeout_getGlobalCounter();
  5961  0484  3193  23BB  3183   	fcall	_Timeout_getGlobalCounter
  5962  0487  0020               	movlb	0	; select bank0
  5963  0488  0824               	movf	?_Timeout_getGlobalCounter+3,w
  5964  0489  0023               	movlb	3	; select bank3
  5965  048A  00DA               	movwf	(main@doorOpenTime+3)^(0+384)
  5966  048B  0020               	movlb	0	; select bank0
  5967  048C  0823               	movf	?_Timeout_getGlobalCounter+2,w
  5968  048D  0023               	movlb	3	; select bank3
  5969  048E  00D9               	movwf	(main@doorOpenTime+2)^(0+384)
  5970  048F  0020               	movlb	0	; select bank0
  5971  0490  0822               	movf	?_Timeout_getGlobalCounter+1,w
  5972  0491  0023               	movlb	3	; select bank3
  5973  0492  00D8               	movwf	(main@doorOpenTime+1)^(0+384)
  5974  0493  0020               	movlb	0	; select bank0
  5975  0494  0821               	movf	?_Timeout_getGlobalCounter,w
  5976  0495  0023               	movlb	3	; select bank3
  5977  0496  00D7               	movwf	main@doorOpenTime^(0+384)
  5978                           
  5979                           ;main.c: 137: }
  5980                           ;main.c: 138: Wireless_sleep();
  5981  0497  3194  2486  3183   	fcall	_Wireless_sleep
  5982                           
  5983                           ;main.c: 139: doorClosedUpdateCounter=0;
  5984  049A  3000               	movlw	0
  5985  049B  0023               	movlb	3	; select bank3
  5986  049C  00D4               	movwf	(main@doorClosedUpdateCounter+3)^(0+384)
  5987  049D  3000               	movlw	0
  5988  049E  00D3               	movwf	(main@doorClosedUpdateCounter+2)^(0+384)
  5989  049F  3000               	movlw	0
  5990  04A0  00D2               	movwf	(main@doorClosedUpdateCounter+1)^(0+384)
  5991  04A1  3000               	movlw	0
  5992  04A2  00D1               	movwf	main@doorClosedUpdateCounter^(0+384)
  5993                           
  5994                           ;main.c: 140: }
  5995  04A3  2D2C               	goto	l6807
  5996  04A4                     l6777:	
  5997                           
  5998                           ;main.c: 141: else if(doorStatus==DOOR_OPEN)
  5999  04A4  035B               	decf	main@doorStatus^(0+384),w
  6000  04A5  1D03               	btfss	3,2
  6001  04A6  2CE1               	goto	l6793
  6002                           
  6003                           ;main.c: 142: {
  6004                           ;main.c: 143: dur = Timeout_getGlobalCounter()-doorOpenTime;
  6005  04A7  0957               	comf	main@doorOpenTime^(0+384),w
  6006  04A8  0021               	movlb	1	; select bank1
  6007  04A9  00C8               	movwf	??_main^(0+128)
  6008  04AA  0023               	movlb	3	; select bank3
  6009  04AB  0958               	comf	(main@doorOpenTime+1)^(0+384),w
  6010  04AC  0021               	movlb	1	; select bank1
  6011  04AD  00C9               	movwf	(??_main^(0+128)+1)
  6012  04AE  0AC8               	incf	??_main^(0+128),f
  6013  04AF  1903               	skipnz
  6014  04B0  0AC9               	incf	(??_main^(0+128)+1),f
  6015  04B1  3193  23BB  3183   	fcall	_Timeout_getGlobalCounter
  6016  04B4  0021               	movlb	1	; select bank1
  6017  04B5  0848               	movf	??_main^(0+128),w
  6018  04B6  0020               	movlb	0	; select bank0
  6019  04B7  0721               	addwf	?_Timeout_getGlobalCounter,w
  6020  04B8  0023               	movlb	3	; select bank3
  6021  04B9  00D5               	movwf	main@dur^(0+384)
  6022  04BA  0021               	movlb	1	; select bank1
  6023  04BB  0849               	movf	(??_main+1)^(0+128),w
  6024  04BC  0020               	movlb	0	; select bank0
  6025  04BD  3D22               	addwfc	?_Timeout_getGlobalCounter+1,w
  6026  04BE  0023               	movlb	3	; select bank3
  6027  04BF  00D6               	movwf	(main@dur+1)^(0+384)
  6028                           
  6029                           ;main.c: 144: if(dur>=60000)
  6030  04C0  30EA               	movlw	234
  6031  04C1  0256               	subwf	(main@dur+1)^(0+384),w
  6032  04C2  3060               	movlw	96
  6033  04C3  1903               	skipnz
  6034  04C4  0255               	subwf	main@dur^(0+384),w
  6035  04C5  1C03               	skipc
  6036  04C6  2D2C               	goto	l6807
  6037                           
  6038                           ;main.c: 145: {
  6039                           ;main.c: 146: Wireless_wake();
  6040  04C7  3196  2605  3183   	fcall	_Wireless_wake
  6041                           
  6042                           ;main.c: 147: Wireless_packageData(doorStatus,dur/1000,BMP_readTemperature());
  6043  04CA  30E8               	movlw	232
  6044  04CB  0020               	movlb	0	; select bank0
  6045  04CC  00A1               	movwf	___lwdiv@divisor
  6046  04CD  3003               	movlw	3
  6047  04CE  00A2               	movwf	___lwdiv@divisor+1
  6048  04CF  0023               	movlb	3	; select bank3
  6049  04D0  0856               	movf	(main@dur+1)^(0+384),w
  6050  04D1  0020               	movlb	0	; select bank0
  6051  04D2  00A4               	movwf	___lwdiv@dividend+1
  6052  04D3  0023               	movlb	3	; select bank3
  6053  04D4  0855               	movf	main@dur^(0+384),w
  6054  04D5  0020               	movlb	0	; select bank0
  6055  04D6  00A3               	movwf	___lwdiv@dividend
  6056  04D7  3197  27CB  3183   	fcall	___lwdiv
  6057  04DA  0020               	movlb	0	; select bank0
  6058  04DB  0821               	movf	?___lwdiv,w
  6059  04DC  0021               	movlb	1	; select bank1
  6060  04DD  00C8               	movwf	??_main^(0+128)
  6061  04DE  0848               	movf	??_main^(0+128),w
  6062  04DF  00BA               	movwf	Wireless_packageData@openTime^(0+128)
  6063  04E0  2CFE               	goto	L5
  6064  04E1                     l6793:	
  6065                           ;main.c: 151: }
  6066                           ;main.c: 153: }
  6067                           
  6068                           ;main.c: 150: doorOpenTime=Timeout_getGlobalCounter();
  6069                           
  6070                           ;main.c: 149: doorClosedUpdateCounter=0;
  6071                           
  6072                           ;main.c: 148: Wireless_sleep();
  6073                           
  6074                           
  6075                           ;main.c: 154: else if(doorClosedUpdateCounter>=sensorUpdatePeriod)
  6076  04E1  0022               	movlb	2	; select bank2
  6077  04E2  086D               	movf	(_sensorUpdatePeriod+3)^(0+256),w
  6078  04E3  0023               	movlb	3	; select bank3
  6079  04E4  0254               	subwf	(main@doorClosedUpdateCounter+3)^(0+384),w
  6080  04E5  1D03               	skipz
  6081  04E6  2CF7               	goto	u6885
  6082  04E7  0022               	movlb	2	; select bank2
  6083  04E8  086C               	movf	(_sensorUpdatePeriod+2)^(0+256),w
  6084  04E9  0023               	movlb	3	; select bank3
  6085  04EA  0253               	subwf	(main@doorClosedUpdateCounter+2)^(0+384),w
  6086  04EB  1D03               	skipz
  6087  04EC  2CF7               	goto	u6885
  6088  04ED  0022               	movlb	2	; select bank2
  6089  04EE  086B               	movf	(_sensorUpdatePeriod+1)^(0+256),w
  6090  04EF  0023               	movlb	3	; select bank3
  6091  04F0  0252               	subwf	(main@doorClosedUpdateCounter+1)^(0+384),w
  6092  04F1  1D03               	skipz
  6093  04F2  2CF7               	goto	u6885
  6094  04F3  0022               	movlb	2	; select bank2
  6095  04F4  086A               	movf	_sensorUpdatePeriod^(0+256),w
  6096  04F5  0023               	movlb	3	; select bank3
  6097  04F6  0251               	subwf	main@doorClosedUpdateCounter^(0+384),w
  6098  04F7                     u6885:	
  6099  04F7  1C03               	skipc
  6100  04F8  2D19               	goto	l6805
  6101                           
  6102                           ;main.c: 155: {
  6103                           ;main.c: 156: Wireless_wake();
  6104  04F9  3196  2605  3183   	fcall	_Wireless_wake
  6105                           
  6106                           ;main.c: 157: Wireless_packageData(doorStatus,0,BMP_readTemperature());
  6107  04FC  0021               	movlb	1	; select bank1
  6108  04FD  01BA               	clrf	Wireless_packageData@openTime^(0+128)
  6109  04FE                     L5:	
  6110  04FE  3180  2077  3183   	fcall	_BMP_readTemperature
  6111  0501  0021               	movlb	1	; select bank1
  6112  0502  0826               	movf	?_BMP_readTemperature^(0+128),w
  6113  0503  00BB               	movwf	Wireless_packageData@tempC^(0+128)
  6114  0504  0827               	movf	(?_BMP_readTemperature+1)^(0+128),w
  6115  0505  00BC               	movwf	(Wireless_packageData@tempC+1)^(0+128)
  6116  0506  0828               	movf	(?_BMP_readTemperature+2)^(0+128),w
  6117  0507  00BD               	movwf	(Wireless_packageData@tempC+2)^(0+128)
  6118  0508  0023               	movlb	3	; select bank3
  6119  0509  085B               	movf	main@doorStatus^(0+384),w
  6120  050A  318F  2724  3183   	fcall	_Wireless_packageData
  6121                           
  6122                           ;main.c: 158: Wireless_sleep();
  6123  050D  3194  2486  3183   	fcall	_Wireless_sleep
  6124                           
  6125                           ;main.c: 159: doorClosedUpdateCounter=0;
  6126  0510  3000               	movlw	0
  6127  0511  0023               	movlb	3	; select bank3
  6128  0512  00D4               	movwf	(main@doorClosedUpdateCounter+3)^(0+384)
  6129  0513  3000               	movlw	0
  6130  0514  00D3               	movwf	(main@doorClosedUpdateCounter+2)^(0+384)
  6131  0515  3000               	movlw	0
  6132  0516  00D2               	movwf	(main@doorClosedUpdateCounter+1)^(0+384)
  6133  0517  3000               	movlw	0
  6134  0518  00D1               	movwf	main@doorClosedUpdateCounter^(0+384)
  6135  0519                     l6805:	
  6136                           ;main.c: 161: }
  6137                           
  6138                           ;main.c: 160: doorOpenTime = Timeout_getGlobalCounter();
  6139                           
  6140                           
  6141                           ;main.c: 162: else
  6142                           ;main.c: 163: {
  6143                           ;main.c: 165: doorOpenTime=Timeout_getGlobalCounter();
  6144  0519  3193  23BB  3183   	fcall	_Timeout_getGlobalCounter
  6145  051C  0020               	movlb	0	; select bank0
  6146  051D  0824               	movf	?_Timeout_getGlobalCounter+3,w
  6147  051E  0023               	movlb	3	; select bank3
  6148  051F  00DA               	movwf	(main@doorOpenTime+3)^(0+384)
  6149  0520  0020               	movlb	0	; select bank0
  6150  0521  0823               	movf	?_Timeout_getGlobalCounter+2,w
  6151  0522  0023               	movlb	3	; select bank3
  6152  0523  00D9               	movwf	(main@doorOpenTime+2)^(0+384)
  6153  0524  0020               	movlb	0	; select bank0
  6154  0525  0822               	movf	?_Timeout_getGlobalCounter+1,w
  6155  0526  0023               	movlb	3	; select bank3
  6156  0527  00D8               	movwf	(main@doorOpenTime+1)^(0+384)
  6157  0528  0020               	movlb	0	; select bank0
  6158  0529  0821               	movf	?_Timeout_getGlobalCounter,w
  6159  052A  0023               	movlb	3	; select bank3
  6160  052B  00D7               	movwf	main@doorOpenTime^(0+384)
  6161  052C                     l6807:	
  6162                           
  6163                           ;main.c: 166: }
  6164                           ;main.c: 168: prevDoorStatus=doorStatus;
  6165  052C  085B               	movf	main@doorStatus^(0+384),w
  6166  052D  0021               	movlb	1	; select bank1
  6167  052E  00C8               	movwf	??_main^(0+128)
  6168  052F  0848               	movf	??_main^(0+128),w
  6169  0530  0023               	movlb	3	; select bank3
  6170  0531  00D0               	movwf	main@prevDoorStatus^(0+384)
  6171                           
  6172                           ;main.c: 169: doorClosedUpdateCounter+=10000;
  6173  0532  3010               	movlw	16
  6174  0533  07D1               	addwf	main@doorClosedUpdateCounter^(0+384),f
  6175  0534  3027               	movlw	39
  6176  0535  3DD2               	addwfc	(main@doorClosedUpdateCounter+1)^(0+384),f
  6177  0536  3000               	movlw	0
  6178  0537  3DD3               	addwfc	(main@doorClosedUpdateCounter+2)^(0+384),f
  6179  0538  3000               	movlw	0
  6180  0539  3DD4               	addwfc	(main@doorClosedUpdateCounter+3)^(0+384),f
  6181  053A  0063               	sleep	;# 
  6182  053B  2BCE               	goto	l6737
  6183  053C                     __end_of_main:	
  6184                           
  6185                           	psect	text1
  6186  12D5                     __ptext1:	
  6187 ;; *************** function _setSleepTime *****************
  6188 ;; Defined at:
  6189 ;;		line 7 in file "common.c"
  6190 ;; Parameters:    Size  Location     Type
  6191 ;;  timeSec         2    1[BANK0 ] unsigned short 
  6192 ;; Auto vars:     Size  Location     Type
  6193 ;;		None
  6194 ;; Return value:  Size  Location     Type
  6195 ;;                  1    wreg      void 
  6196 ;; Registers used:
  6197 ;;		wreg
  6198 ;; Tracked objects:
  6199 ;;		On entry : 0/0
  6200 ;;		On exit  : 0/0
  6201 ;;		Unchanged: 0/0
  6202 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6203 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6204 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6205 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6206 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6207 ;;Total ram usage:        2 bytes
  6208 ;; Hardware stack levels used:    1
  6209 ;; Hardware stack levels required when called:    4
  6210 ;; This function calls:
  6211 ;;		Nothing
  6212 ;; This function is called by:
  6213 ;;		_main
  6214 ;; This function uses a non-reentrant model
  6215 ;;
  6216                           
  6217                           
  6218                           ;psect for function _setSleepTime
  6219  12D5                     _setSleepTime:	
  6220                           
  6221                           ;common.c: 9: timer1ReloadVal=0x6000;
  6222                           
  6223                           ;incstack = 0
  6224                           ; Regs used in _setSleepTime: [wreg]
  6225  12D5  3000               	movlw	0
  6226  12D6  00FC               	movwf	_timer1ReloadVal	;volatile
  6227  12D7  3060               	movlw	96
  6228  12D8  00FD               	movwf	_timer1ReloadVal+1	;volatile
  6229  12D9  0008               	return
  6230  12DA                     __end_of_setSleepTime:	
  6231                           
  6232                           	psect	text2
  6233  17CB                     __ptext2:	
  6234 ;; *************** function ___lwdiv *****************
  6235 ;; Defined at:
  6236 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\lwdiv.c"
  6237 ;; Parameters:    Size  Location     Type
  6238 ;;  divisor         2    1[BANK0 ] unsigned int 
  6239 ;;  dividend        2    3[BANK0 ] unsigned int 
  6240 ;; Auto vars:     Size  Location     Type
  6241 ;;  quotient        2    7[BANK0 ] unsigned int 
  6242 ;;  counter         1    6[BANK0 ] unsigned char 
  6243 ;; Return value:  Size  Location     Type
  6244 ;;                  2    1[BANK0 ] unsigned int 
  6245 ;; Registers used:
  6246 ;;		wreg, status,2, status,0
  6247 ;; Tracked objects:
  6248 ;;		On entry : 0/0
  6249 ;;		On exit  : 0/0
  6250 ;;		Unchanged: 0/0
  6251 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6252 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6253 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6254 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6255 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6256 ;;Total ram usage:        8 bytes
  6257 ;; Hardware stack levels used:    1
  6258 ;; Hardware stack levels required when called:    4
  6259 ;; This function calls:
  6260 ;;		Nothing
  6261 ;; This function is called by:
  6262 ;;		_main
  6263 ;; This function uses a non-reentrant model
  6264 ;;
  6265                           
  6266                           
  6267                           ;psect for function ___lwdiv
  6268  17CB                     ___lwdiv:	
  6269                           
  6270                           ;incstack = 0
  6271                           ; Regs used in ___lwdiv: [wreg+status,2+status,0]
  6272  17CB  0020               	movlb	0	; select bank0
  6273  17CC  01A7               	clrf	___lwdiv@quotient
  6274  17CD  01A8               	clrf	___lwdiv@quotient+1
  6275  17CE  0821               	movf	___lwdiv@divisor,w
  6276  17CF  0422               	iorwf	___lwdiv@divisor+1,w
  6277  17D0  1903               	btfsc	3,2
  6278  17D1  2FFB               	goto	l6641
  6279  17D2  01A6               	clrf	___lwdiv@counter
  6280  17D3  0AA6               	incf	___lwdiv@counter,f
  6281  17D4                     l6629:	
  6282  17D4  1BA2               	btfsc	___lwdiv@divisor+1,7
  6283  17D5  2FE0               	goto	l6631
  6284  17D6  3001               	movlw	1
  6285  17D7                     u6595:	
  6286  17D7  35A1               	lslf	___lwdiv@divisor,f
  6287  17D8  0DA2               	rlf	___lwdiv@divisor+1,f
  6288  17D9  0B89               	decfsz	9,f
  6289  17DA  2FD7               	goto	u6595
  6290  17DB  3001               	movlw	1
  6291  17DC  00A5               	movwf	??___lwdiv
  6292  17DD  0825               	movf	??___lwdiv,w
  6293  17DE  07A6               	addwf	___lwdiv@counter,f
  6294  17DF  2FD4               	goto	l6629
  6295  17E0                     l6631:	
  6296  17E0  3001               	movlw	1
  6297  17E1                     u6615:	
  6298  17E1  35A7               	lslf	___lwdiv@quotient,f
  6299  17E2  0DA8               	rlf	___lwdiv@quotient+1,f
  6300  17E3  0B89               	decfsz	9,f
  6301  17E4  2FE1               	goto	u6615
  6302  17E5  0822               	movf	___lwdiv@divisor+1,w
  6303  17E6  0224               	subwf	___lwdiv@dividend+1,w
  6304  17E7  1D03               	skipz
  6305  17E8  2FEB               	goto	u6625
  6306  17E9  0821               	movf	___lwdiv@divisor,w
  6307  17EA  0223               	subwf	___lwdiv@dividend,w
  6308  17EB                     u6625:	
  6309  17EB  1C03               	skipc
  6310  17EC  2FF2               	goto	l6637
  6311  17ED  0821               	movf	___lwdiv@divisor,w
  6312  17EE  02A3               	subwf	___lwdiv@dividend,f
  6313  17EF  0822               	movf	___lwdiv@divisor+1,w
  6314  17F0  3BA4               	subwfb	___lwdiv@dividend+1,f
  6315  17F1  1427               	bsf	___lwdiv@quotient,0
  6316  17F2                     l6637:	
  6317  17F2  3001               	movlw	1
  6318  17F3                     u6635:	
  6319  17F3  36A2               	lsrf	___lwdiv@divisor+1,f
  6320  17F4  0CA1               	rrf	___lwdiv@divisor,f
  6321  17F5  0B89               	decfsz	9,f
  6322  17F6  2FF3               	goto	u6635
  6323  17F7  3001               	movlw	1
  6324  17F8  02A6               	subwf	___lwdiv@counter,f
  6325  17F9  1D03               	btfss	3,2
  6326  17FA  2FE0               	goto	l6631
  6327  17FB                     l6641:	
  6328  17FB  0828               	movf	___lwdiv@quotient+1,w
  6329  17FC  00A2               	movwf	?___lwdiv+1
  6330  17FD  0827               	movf	___lwdiv@quotient,w
  6331  17FE  00A1               	movwf	?___lwdiv
  6332  17FF  0008               	return
  6333  1800                     __end_of___lwdiv:	
  6334                           
  6335                           	psect	text3
  6336  0951                     __ptext3:	
  6337 ;; *************** function ___lldiv *****************
  6338 ;; Defined at:
  6339 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\lldiv.c"
  6340 ;; Parameters:    Size  Location     Type
  6341 ;;  divisor         4    1[BANK0 ] unsigned long 
  6342 ;;  dividend        4    5[BANK0 ] unsigned long 
  6343 ;; Auto vars:     Size  Location     Type
  6344 ;;  quotient        4   10[BANK0 ] unsigned long 
  6345 ;;  counter         1   14[BANK0 ] unsigned char 
  6346 ;; Return value:  Size  Location     Type
  6347 ;;                  4    1[BANK0 ] unsigned long 
  6348 ;; Registers used:
  6349 ;;		wreg, status,2, status,0
  6350 ;; Tracked objects:
  6351 ;;		On entry : 0/0
  6352 ;;		On exit  : 0/0
  6353 ;;		Unchanged: 0/0
  6354 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6355 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6356 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6357 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6358 ;;      Totals:         0      14       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6359 ;;Total ram usage:       14 bytes
  6360 ;; Hardware stack levels used:    1
  6361 ;; Hardware stack levels required when called:    4
  6362 ;; This function calls:
  6363 ;;		Nothing
  6364 ;; This function is called by:
  6365 ;;		_main
  6366 ;; This function uses a non-reentrant model
  6367 ;;
  6368                           
  6369                           
  6370                           ;psect for function ___lldiv
  6371  0951                     ___lldiv:	
  6372                           
  6373                           ;incstack = 0
  6374                           ; Regs used in ___lldiv: [wreg+status,2+status,0]
  6375  0951  3000               	movlw	0
  6376  0952  0020               	movlb	0	; select bank0
  6377  0953  00AD               	movwf	___lldiv@quotient+3
  6378  0954  3000               	movlw	0
  6379  0955  00AC               	movwf	___lldiv@quotient+2
  6380  0956  3000               	movlw	0
  6381  0957  00AB               	movwf	___lldiv@quotient+1
  6382  0958  3000               	movlw	0
  6383  0959  00AA               	movwf	___lldiv@quotient
  6384  095A  0824               	movf	___lldiv@divisor+3,w
  6385  095B  0423               	iorwf	___lldiv@divisor+2,w
  6386  095C  0422               	iorwf	___lldiv@divisor+1,w
  6387  095D  0421               	iorwf	___lldiv@divisor,w
  6388  095E  1903               	skipnz
  6389  095F  299B               	goto	l6615
  6390  0960  01AE               	clrf	___lldiv@counter
  6391  0961  0AAE               	incf	___lldiv@counter,f
  6392  0962                     l6601:	
  6393  0962  1BA4               	btfsc	___lldiv@divisor+3,7
  6394  0963  2970               	goto	l6603
  6395  0964  3001               	movlw	1
  6396  0965                     u6525:	
  6397  0965  35A1               	lslf	___lldiv@divisor,f
  6398  0966  0DA2               	rlf	___lldiv@divisor+1,f
  6399  0967  0DA3               	rlf	___lldiv@divisor+2,f
  6400  0968  0DA4               	rlf	___lldiv@divisor+3,f
  6401  0969  0B89               	decfsz	9,f
  6402  096A  2965               	goto	u6525
  6403  096B  3001               	movlw	1
  6404  096C  00A9               	movwf	??___lldiv
  6405  096D  0829               	movf	??___lldiv,w
  6406  096E  07AE               	addwf	___lldiv@counter,f
  6407  096F  2962               	goto	l6601
  6408  0970                     l6603:	
  6409  0970  3001               	movlw	1
  6410  0971                     u6545:	
  6411  0971  35AA               	lslf	___lldiv@quotient,f
  6412  0972  0DAB               	rlf	___lldiv@quotient+1,f
  6413  0973  0DAC               	rlf	___lldiv@quotient+2,f
  6414  0974  0DAD               	rlf	___lldiv@quotient+3,f
  6415  0975  0B89               	decfsz	9,f
  6416  0976  2971               	goto	u6545
  6417  0977  0824               	movf	___lldiv@divisor+3,w
  6418  0978  0228               	subwf	___lldiv@dividend+3,w
  6419  0979  1D03               	skipz
  6420  097A  2985               	goto	u6555
  6421  097B  0823               	movf	___lldiv@divisor+2,w
  6422  097C  0227               	subwf	___lldiv@dividend+2,w
  6423  097D  1D03               	skipz
  6424  097E  2985               	goto	u6555
  6425  097F  0822               	movf	___lldiv@divisor+1,w
  6426  0980  0226               	subwf	___lldiv@dividend+1,w
  6427  0981  1D03               	skipz
  6428  0982  2985               	goto	u6555
  6429  0983  0821               	movf	___lldiv@divisor,w
  6430  0984  0225               	subwf	___lldiv@dividend,w
  6431  0985                     u6555:	
  6432  0985  1C03               	skipc
  6433  0986  2990               	goto	l6611
  6434  0987  0821               	movf	___lldiv@divisor,w
  6435  0988  02A5               	subwf	___lldiv@dividend,f
  6436  0989  0822               	movf	___lldiv@divisor+1,w
  6437  098A  3BA6               	subwfb	___lldiv@dividend+1,f
  6438  098B  0823               	movf	___lldiv@divisor+2,w
  6439  098C  3BA7               	subwfb	___lldiv@dividend+2,f
  6440  098D  0824               	movf	___lldiv@divisor+3,w
  6441  098E  3BA8               	subwfb	___lldiv@dividend+3,f
  6442  098F  142A               	bsf	___lldiv@quotient,0
  6443  0990                     l6611:	
  6444  0990  3001               	movlw	1
  6445  0991                     u6565:	
  6446  0991  36A4               	lsrf	___lldiv@divisor+3,f
  6447  0992  0CA3               	rrf	___lldiv@divisor+2,f
  6448  0993  0CA2               	rrf	___lldiv@divisor+1,f
  6449  0994  0CA1               	rrf	___lldiv@divisor,f
  6450  0995  0B89               	decfsz	9,f
  6451  0996  2991               	goto	u6565
  6452  0997  3001               	movlw	1
  6453  0998  02AE               	subwf	___lldiv@counter,f
  6454  0999  1D03               	btfss	3,2
  6455  099A  2970               	goto	l6603
  6456  099B                     l6615:	
  6457  099B  082D               	movf	___lldiv@quotient+3,w
  6458  099C  00A4               	movwf	?___lldiv+3
  6459  099D  082C               	movf	___lldiv@quotient+2,w
  6460  099E  00A3               	movwf	?___lldiv+2
  6461  099F  082B               	movf	___lldiv@quotient+1,w
  6462  09A0  00A2               	movwf	?___lldiv+1
  6463  09A1  082A               	movf	___lldiv@quotient,w
  6464  09A2  00A1               	movwf	?___lldiv
  6465  09A3  0008               	return
  6466  09A4                     __end_of___lldiv:	
  6467                           
  6468                           	psect	text4
  6469  1605                     __ptext4:	
  6470 ;; *************** function _Wireless_wake *****************
  6471 ;; Defined at:
  6472 ;;		line 184 in file "wireless.c"
  6473 ;; Parameters:    Size  Location     Type
  6474 ;;		None
  6475 ;; Auto vars:     Size  Location     Type
  6476 ;;  reg             1   16[BANK0 ] unsigned char 
  6477 ;; Return value:  Size  Location     Type
  6478 ;;                  1    wreg      void 
  6479 ;; Registers used:
  6480 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6481 ;; Tracked objects:
  6482 ;;		On entry : 0/0
  6483 ;;		On exit  : 0/0
  6484 ;;		Unchanged: 0/0
  6485 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6486 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6487 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6488 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6489 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6490 ;;Total ram usage:        2 bytes
  6491 ;; Hardware stack levels used:    1
  6492 ;; Hardware stack levels required when called:    8
  6493 ;; This function calls:
  6494 ;;		_RF_ReadRegisterData
  6495 ;;		_RF_WriteRegister
  6496 ;; This function is called by:
  6497 ;;		_main
  6498 ;; This function uses a non-reentrant model
  6499 ;;
  6500                           
  6501                           
  6502                           ;psect for function _Wireless_wake
  6503  1605                     _Wireless_wake:	
  6504                           
  6505                           ;wireless.c: 186: u8 reg;
  6506                           ;wireless.c: 188: RF_ReadRegisterData(0x00 , &reg, 1);
  6507                           
  6508                           ;incstack = 0
  6509                           ; Regs used in _Wireless_wake: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  6510  1605  3030               	movlw	(low (Wireless_wake@reg| 0))& (0+255)
  6511  1606  0020               	movlb	0	; select bank0
  6512  1607  00AF               	movwf	??_Wireless_wake
  6513  1608  082F               	movf	??_Wireless_wake,w
  6514  1609  00AA               	movwf	RF_ReadRegisterData@buf
  6515  160A  01AB               	clrf	RF_ReadRegisterData@bufSize
  6516  160B  0AAB               	incf	RF_ReadRegisterData@bufSize,f
  6517  160C  3000               	movlw	0
  6518  160D  3195  25CB  3196   	fcall	_RF_ReadRegisterData
  6519                           
  6520                           ;wireless.c: 189: reg|=0b00000010;
  6521  1610  0020               	movlb	0	; select bank0
  6522  1611  14B0               	bsf	Wireless_wake@reg,1
  6523                           
  6524                           ;wireless.c: 190: RF_WriteRegister(0x00,reg);
  6525  1612  0830               	movf	Wireless_wake@reg,w
  6526  1613  00AF               	movwf	??_Wireless_wake
  6527  1614  082F               	movf	??_Wireless_wake,w
  6528  1615  00A3               	movwf	RF_WriteRegister@val
  6529  1616  3000               	movlw	0
  6530  1617  3194  242D  3196   	fcall	_RF_WriteRegister
  6531                           
  6532                           ;wireless.c: 191: _delay((unsigned long)((2)*(8000000/4000.0)));
  6533  161A  3006               	movlw	6
  6534  161B  0020               	movlb	0	; select bank0
  6535  161C  00AF               	movwf	??_Wireless_wake
  6536  161D  3030               	movlw	48
  6537  161E                     u7197:	
  6538  161E  0B89               	decfsz	9,f
  6539  161F  2E1E               	goto	u7197
  6540  1620  0BAF               	decfsz	??_Wireless_wake,f
  6541  1621  2E1E               	goto	u7197
  6542  1622  0000               	nop
  6543  1623  0008               	return
  6544  1624                     __end_of_Wireless_wake:	
  6545                           
  6546                           	psect	text5
  6547  1486                     __ptext5:	
  6548 ;; *************** function _Wireless_sleep *****************
  6549 ;; Defined at:
  6550 ;;		line 174 in file "wireless.c"
  6551 ;; Parameters:    Size  Location     Type
  6552 ;;		None
  6553 ;; Auto vars:     Size  Location     Type
  6554 ;;  reg             1   16[BANK0 ] unsigned char 
  6555 ;; Return value:  Size  Location     Type
  6556 ;;                  1    wreg      void 
  6557 ;; Registers used:
  6558 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6559 ;; Tracked objects:
  6560 ;;		On entry : 0/0
  6561 ;;		On exit  : 0/0
  6562 ;;		Unchanged: 0/0
  6563 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6564 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6565 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6566 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6567 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6568 ;;Total ram usage:        2 bytes
  6569 ;; Hardware stack levels used:    1
  6570 ;; Hardware stack levels required when called:    8
  6571 ;; This function calls:
  6572 ;;		_RF_ReadRegisterData
  6573 ;;		_RF_WriteRegister
  6574 ;; This function is called by:
  6575 ;;		_main
  6576 ;; This function uses a non-reentrant model
  6577 ;;
  6578                           
  6579                           
  6580                           ;psect for function _Wireless_sleep
  6581  1486                     _Wireless_sleep:	
  6582                           
  6583                           ;wireless.c: 176: u8 reg;
  6584                           ;wireless.c: 178: RF_ReadRegisterData(0x00 , &reg, 1);
  6585                           
  6586                           ;incstack = 0
  6587                           ; Regs used in _Wireless_sleep: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  6588  1486  3030               	movlw	(low (Wireless_sleep@reg| 0))& (0+255)
  6589  1487  0020               	movlb	0	; select bank0
  6590  1488  00AF               	movwf	??_Wireless_sleep
  6591  1489  082F               	movf	??_Wireless_sleep,w
  6592  148A  00AA               	movwf	RF_ReadRegisterData@buf
  6593  148B  01AB               	clrf	RF_ReadRegisterData@bufSize
  6594  148C  0AAB               	incf	RF_ReadRegisterData@bufSize,f
  6595  148D  3000               	movlw	0
  6596  148E  3195  25CB  3194   	fcall	_RF_ReadRegisterData
  6597                           
  6598                           ;wireless.c: 179: reg&=0b11111101;
  6599  1491  30FD               	movlw	253
  6600  1492  0020               	movlb	0	; select bank0
  6601  1493  00AF               	movwf	??_Wireless_sleep
  6602  1494  082F               	movf	??_Wireless_sleep,w
  6603  1495  05B0               	andwf	Wireless_sleep@reg,f
  6604                           
  6605                           ;wireless.c: 180: RF_WriteRegister(0x00,reg);
  6606  1496  0830               	movf	Wireless_sleep@reg,w
  6607  1497  00AF               	movwf	??_Wireless_sleep
  6608  1498  082F               	movf	??_Wireless_sleep,w
  6609  1499  00A3               	movwf	RF_WriteRegister@val
  6610  149A  3000               	movlw	0
  6611  149B  3194  242D         	fcall	_RF_WriteRegister
  6612  149D  0008               	return
  6613  149E                     __end_of_Wireless_sleep:	
  6614                           
  6615                           	psect	text6
  6616  0F24                     __ptext6:	
  6617 ;; *************** function _Wireless_packageData *****************
  6618 ;; Defined at:
  6619 ;;		line 136 in file "wireless.c"
  6620 ;; Parameters:    Size  Location     Type
  6621 ;;  status          1    wreg     enum E3332
  6622 ;;  openTime        1   26[BANK1 ] unsigned char 
  6623 ;;  tempC           3   27[BANK1 ] float 
  6624 ;; Auto vars:     Size  Location     Type
  6625 ;;  status          1   37[BANK1 ] enum E3332
  6626 ;;  data            6   30[BANK1 ] unsigned char [6]
  6627 ;;  t1              2   38[BANK1 ] unsigned int 
  6628 ;;  var             1   36[BANK1 ] unsigned char 
  6629 ;; Return value:  Size  Location     Type
  6630 ;;                  1    wreg      void 
  6631 ;; Registers used:
  6632 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6633 ;; Tracked objects:
  6634 ;;		On entry : 0/0
  6635 ;;		On exit  : 0/0
  6636 ;;		Unchanged: 0/0
  6637 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6638 ;;      Params:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0
  6639 ;;      Locals:         0       0      10       0       0       0       0       0       0       0       0       0       
      +0       0
  6640 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6641 ;;      Totals:         0       1      14       0       0       0       0       0       0       0       0       0       
      +0       0
  6642 ;;Total ram usage:       15 bytes
  6643 ;; Hardware stack levels used:    1
  6644 ;; Hardware stack levels required when called:   11
  6645 ;; This function calls:
  6646 ;;		_Diag_getSensorHealth
  6647 ;;		_Sensor_getSupplyVoltage
  6648 ;;		_Wireless_checkDataReceived
  6649 ;;		_Wireless_determineTransmitPower
  6650 ;;		_Wireless_sendData
  6651 ;;		___ftadd
  6652 ;;		___ftmul
  6653 ;;		___fttol
  6654 ;; This function is called by:
  6655 ;;		_main
  6656 ;; This function uses a non-reentrant model
  6657 ;;
  6658                           
  6659                           
  6660                           ;psect for function _Wireless_packageData
  6661  0F24                     _Wireless_packageData:	
  6662                           
  6663                           ;incstack = 0
  6664                           ; Regs used in _Wireless_packageData: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6665                           ;Wireless_packageData@status stored from wreg
  6666  0F24  0021               	movlb	1	; select bank1
  6667  0F25  00C5               	movwf	Wireless_packageData@status^(0+128)
  6668                           
  6669                           ;wireless.c: 146: tempC+=50;
  6670  0F26  3000               	movlw	0
  6671  0F27  0020               	movlb	0	; select bank0
  6672  0F28  00C9               	movwf	___ftadd@f1
  6673  0F29  3048               	movlw	72
  6674  0F2A  00CA               	movwf	___ftadd@f1+1
  6675  0F2B  3042               	movlw	66
  6676  0F2C  00CB               	movwf	___ftadd@f1+2
  6677  0F2D  0021               	movlb	1	; select bank1
  6678  0F2E  083B               	movf	Wireless_packageData@tempC^(0+128),w
  6679  0F2F  0020               	movlb	0	; select bank0
  6680  0F30  00CC               	movwf	___ftadd@f2
  6681  0F31  0021               	movlb	1	; select bank1
  6682  0F32  083C               	movf	(Wireless_packageData@tempC+1)^(0+128),w
  6683  0F33  0020               	movlb	0	; select bank0
  6684  0F34  00CD               	movwf	___ftadd@f2+1
  6685  0F35  0021               	movlb	1	; select bank1
  6686  0F36  083D               	movf	(Wireless_packageData@tempC+2)^(0+128),w
  6687  0F37  0020               	movlb	0	; select bank0
  6688  0F38  00CE               	movwf	___ftadd@f2+2
  6689  0F39  3186  2685  318F   	fcall	___ftadd
  6690  0F3C  0020               	movlb	0	; select bank0
  6691  0F3D  0849               	movf	?___ftadd,w
  6692  0F3E  0021               	movlb	1	; select bank1
  6693  0F3F  00BB               	movwf	Wireless_packageData@tempC^(0+128)
  6694  0F40  0020               	movlb	0	; select bank0
  6695  0F41  084A               	movf	?___ftadd+1,w
  6696  0F42  0021               	movlb	1	; select bank1
  6697  0F43  00BC               	movwf	(Wireless_packageData@tempC+1)^(0+128)
  6698  0F44  0020               	movlb	0	; select bank0
  6699  0F45  084B               	movf	?___ftadd+2,w
  6700  0F46  0021               	movlb	1	; select bank1
  6701  0F47  00BD               	movwf	(Wireless_packageData@tempC+2)^(0+128)
  6702                           
  6703                           ;wireless.c: 147: tempC*=10;
  6704  0F48  3000               	movlw	0
  6705  0F49  0020               	movlb	0	; select bank0
  6706  0F4A  00D6               	movwf	___ftmul@f1
  6707  0F4B  3020               	movlw	32
  6708  0F4C  00D7               	movwf	___ftmul@f1+1
  6709  0F4D  3041               	movlw	65
  6710  0F4E  00D8               	movwf	___ftmul@f1+2
  6711  0F4F  0021               	movlb	1	; select bank1
  6712  0F50  083B               	movf	Wireless_packageData@tempC^(0+128),w
  6713  0F51  0020               	movlb	0	; select bank0
  6714  0F52  00D9               	movwf	___ftmul@f2
  6715  0F53  0021               	movlb	1	; select bank1
  6716  0F54  083C               	movf	(Wireless_packageData@tempC+1)^(0+128),w
  6717  0F55  0020               	movlb	0	; select bank0
  6718  0F56  00DA               	movwf	___ftmul@f2+1
  6719  0F57  0021               	movlb	1	; select bank1
  6720  0F58  083D               	movf	(Wireless_packageData@tempC+2)^(0+128),w
  6721  0F59  0020               	movlb	0	; select bank0
  6722  0F5A  00DB               	movwf	___ftmul@f2+2
  6723  0F5B  318E  2670  318F   	fcall	___ftmul
  6724  0F5E  0020               	movlb	0	; select bank0
  6725  0F5F  0856               	movf	?___ftmul,w
  6726  0F60  0021               	movlb	1	; select bank1
  6727  0F61  00BB               	movwf	Wireless_packageData@tempC^(0+128)
  6728  0F62  0020               	movlb	0	; select bank0
  6729  0F63  0857               	movf	?___ftmul+1,w
  6730  0F64  0021               	movlb	1	; select bank1
  6731  0F65  00BC               	movwf	(Wireless_packageData@tempC+1)^(0+128)
  6732  0F66  0020               	movlb	0	; select bank0
  6733  0F67  0858               	movf	?___ftmul+2,w
  6734  0F68  0021               	movlb	1	; select bank1
  6735  0F69  00BD               	movwf	(Wireless_packageData@tempC+2)^(0+128)
  6736                           
  6737                           ;wireless.c: 149: unsigned int t1 = tempC;
  6738  0F6A  083B               	movf	Wireless_packageData@tempC^(0+128),w
  6739  0F6B  0020               	movlb	0	; select bank0
  6740  0F6C  00E6               	movwf	___fttol@f1
  6741  0F6D  0021               	movlb	1	; select bank1
  6742  0F6E  083C               	movf	(Wireless_packageData@tempC+1)^(0+128),w
  6743  0F6F  0020               	movlb	0	; select bank0
  6744  0F70  00E7               	movwf	___fttol@f1+1
  6745  0F71  0021               	movlb	1	; select bank1
  6746  0F72  083D               	movf	(Wireless_packageData@tempC+2)^(0+128),w
  6747  0F73  0020               	movlb	0	; select bank0
  6748  0F74  00E8               	movwf	___fttol@f1+2
  6749  0F75  318C  2483  318F   	fcall	___fttol
  6750  0F78  0020               	movlb	0	; select bank0
  6751  0F79  0867               	movf	?___fttol+1,w
  6752  0F7A  0021               	movlb	1	; select bank1
  6753  0F7B  00C7               	movwf	(Wireless_packageData@t1+1)^(0+128)
  6754  0F7C  0020               	movlb	0	; select bank0
  6755  0F7D  0866               	movf	?___fttol,w
  6756  0F7E  0021               	movlb	1	; select bank1
  6757  0F7F  00C6               	movwf	Wireless_packageData@t1^(0+128)
  6758                           
  6759                           ;wireless.c: 150: char var;
  6760                           ;wireless.c: 151: char data[6];
  6761                           ;wireless.c: 153: status<<=4;
  6762  0F80  0EC5               	swapf	Wireless_packageData@status^(0+128),f
  6763  0F81  30F0               	movlw	240
  6764  0F82  05C5               	andwf	Wireless_packageData@status^(0+128),f
  6765                           
  6766                           ;wireless.c: 154: var=Diag_getSensorHealth();
  6767  0F83  3193  23DE  318F   	fcall	_Diag_getSensorHealth
  6768  0F86  0020               	movlb	0	; select bank0
  6769  0F87  00EE               	movwf	??_Wireless_packageData
  6770  0F88  086E               	movf	??_Wireless_packageData,w
  6771  0F89  0021               	movlb	1	; select bank1
  6772  0F8A  00C4               	movwf	Wireless_packageData@var^(0+128)
  6773                           
  6774                           ;wireless.c: 155: status|=var;
  6775  0F8B  0844               	movf	Wireless_packageData@var^(0+128),w
  6776  0F8C  0020               	movlb	0	; select bank0
  6777  0F8D  00EE               	movwf	??_Wireless_packageData
  6778  0F8E  086E               	movf	??_Wireless_packageData,w
  6779  0F8F  0021               	movlb	1	; select bank1
  6780  0F90  04C5               	iorwf	Wireless_packageData@status^(0+128),f
  6781                           
  6782                           ;wireless.c: 158: data[0]=status;
  6783  0F91  0845               	movf	Wireless_packageData@status^(0+128),w
  6784  0F92  0020               	movlb	0	; select bank0
  6785  0F93  00EE               	movwf	??_Wireless_packageData
  6786  0F94  086E               	movf	??_Wireless_packageData,w
  6787  0F95  0021               	movlb	1	; select bank1
  6788  0F96  00BE               	movwf	Wireless_packageData@data^(0+128)
  6789                           
  6790                           ;wireless.c: 159: data[1]=openTime;
  6791  0F97  083A               	movf	Wireless_packageData@openTime^(0+128),w
  6792  0F98  0020               	movlb	0	; select bank0
  6793  0F99  00EE               	movwf	??_Wireless_packageData
  6794  0F9A  086E               	movf	??_Wireless_packageData,w
  6795  0F9B  0021               	movlb	1	; select bank1
  6796  0F9C  00BF               	movwf	(Wireless_packageData@data^(0+128)+1)
  6797                           
  6798                           ;wireless.c: 160: data[2]=t1>>8;
  6799  0F9D  0847               	movf	(Wireless_packageData@t1+1)^(0+128),w
  6800  0F9E  0020               	movlb	0	; select bank0
  6801  0F9F  00EE               	movwf	??_Wireless_packageData
  6802  0FA0  086E               	movf	??_Wireless_packageData,w
  6803  0FA1  0021               	movlb	1	; select bank1
  6804  0FA2  00C0               	movwf	(Wireless_packageData@data^(0+128)+2)
  6805                           
  6806                           ;wireless.c: 161: data[3]= t1 & 0xFF;
  6807  0FA3  0846               	movf	Wireless_packageData@t1^(0+128),w
  6808  0FA4  0020               	movlb	0	; select bank0
  6809  0FA5  00EE               	movwf	??_Wireless_packageData
  6810  0FA6  086E               	movf	??_Wireless_packageData,w
  6811  0FA7  0021               	movlb	1	; select bank1
  6812  0FA8  00C1               	movwf	(Wireless_packageData@data^(0+128)+3)
  6813                           
  6814                           ;wireless.c: 162: t1=(float)(Sensor_getSupplyVoltage()-1)*100;
  6815  0FA9  3188  2079  318F   	fcall	_Sensor_getSupplyVoltage
  6816  0FAC  0020               	movlb	0	; select bank0
  6817  0FAD  0841               	movf	?_Sensor_getSupplyVoltage,w
  6818  0FAE  00CC               	movwf	___ftadd@f2
  6819  0FAF  0842               	movf	?_Sensor_getSupplyVoltage+1,w
  6820  0FB0  00CD               	movwf	___ftadd@f2+1
  6821  0FB1  0843               	movf	?_Sensor_getSupplyVoltage+2,w
  6822  0FB2  00CE               	movwf	___ftadd@f2+2
  6823  0FB3  3000               	movlw	0
  6824  0FB4  00C9               	movwf	___ftadd@f1
  6825  0FB5  3080               	movlw	128
  6826  0FB6  00CA               	movwf	___ftadd@f1+1
  6827  0FB7  30BF               	movlw	191
  6828  0FB8  00CB               	movwf	___ftadd@f1+2
  6829  0FB9  3186  2685  318F   	fcall	___ftadd
  6830  0FBC  0020               	movlb	0	; select bank0
  6831  0FBD  0849               	movf	?___ftadd,w
  6832  0FBE  00D9               	movwf	___ftmul@f2
  6833  0FBF  084A               	movf	?___ftadd+1,w
  6834  0FC0  00DA               	movwf	___ftmul@f2+1
  6835  0FC1  084B               	movf	?___ftadd+2,w
  6836  0FC2  00DB               	movwf	___ftmul@f2+2
  6837  0FC3  3000               	movlw	0
  6838  0FC4  00D6               	movwf	___ftmul@f1
  6839  0FC5  30C8               	movlw	200
  6840  0FC6  00D7               	movwf	___ftmul@f1+1
  6841  0FC7  3042               	movlw	66
  6842  0FC8  00D8               	movwf	___ftmul@f1+2
  6843  0FC9  318E  2670  318F   	fcall	___ftmul
  6844  0FCC  0020               	movlb	0	; select bank0
  6845  0FCD  0856               	movf	?___ftmul,w
  6846  0FCE  00E6               	movwf	___fttol@f1
  6847  0FCF  0857               	movf	?___ftmul+1,w
  6848  0FD0  00E7               	movwf	___fttol@f1+1
  6849  0FD1  0858               	movf	?___ftmul+2,w
  6850  0FD2  00E8               	movwf	___fttol@f1+2
  6851  0FD3  318C  2483  318F   	fcall	___fttol
  6852  0FD6  0020               	movlb	0	; select bank0
  6853  0FD7  0867               	movf	?___fttol+1,w
  6854  0FD8  0021               	movlb	1	; select bank1
  6855  0FD9  00C7               	movwf	(Wireless_packageData@t1+1)^(0+128)
  6856  0FDA  0020               	movlb	0	; select bank0
  6857  0FDB  0866               	movf	?___fttol,w
  6858  0FDC  0021               	movlb	1	; select bank1
  6859  0FDD  00C6               	movwf	Wireless_packageData@t1^(0+128)
  6860                           
  6861                           ;wireless.c: 163: data[4]=t1;
  6862  0FDE  0846               	movf	Wireless_packageData@t1^(0+128),w
  6863  0FDF  0020               	movlb	0	; select bank0
  6864  0FE0  00EE               	movwf	??_Wireless_packageData
  6865  0FE1  086E               	movf	??_Wireless_packageData,w
  6866  0FE2  0021               	movlb	1	; select bank1
  6867  0FE3  00C2               	movwf	(Wireless_packageData@data^(0+128)+4)
  6868                           
  6869                           ;wireless.c: 164: data[5] = currentTransmitPower;
  6870  0FE4  085C               	movf	_currentTransmitPower^(0+128),w
  6871  0FE5  0020               	movlb	0	; select bank0
  6872  0FE6  00EE               	movwf	??_Wireless_packageData
  6873  0FE7  086E               	movf	??_Wireless_packageData,w
  6874  0FE8  0021               	movlb	1	; select bank1
  6875  0FE9  00C3               	movwf	(Wireless_packageData@data^(0+128)+5)
  6876  0FEA                     l6525:	
  6877                           ;wireless.c: 165: do{
  6878                           
  6879                           
  6880                           ;wireless.c: 166: Wireless_sendData(data, 6);
  6881  0FEA  3006               	movlw	6
  6882  0FEB  0020               	movlb	0	; select bank0
  6883  0FEC  00EE               	movwf	??_Wireless_packageData
  6884  0FED  086E               	movf	??_Wireless_packageData,w
  6885  0FEE  00B1               	movwf	Wireless_sendData@length
  6886  0FEF  30BE               	movlw	(low (Wireless_packageData@data| 0))& (0+255)
  6887  0FF0  3194  2418  318F   	fcall	_Wireless_sendData
  6888  0FF3                     l1125:	
  6889                           ;wireless.c: 167: while(PORTCbits.RC3);
  6890                           
  6891  0FF3  0020               	movlb	0	; select bank0
  6892  0FF4  198E               	btfsc	14,3	;volatile
  6893  0FF5  2FF3               	goto	l1125
  6894                           
  6895                           ;wireless.c: 168: }
  6896                           ;wireless.c: 169: while(Wireless_determineTransmitPower(0));
  6897  0FF6  3000               	movlw	0
  6898  0FF7  318D  2522  318F   	fcall	_Wireless_determineTransmitPower
  6899  0FFA  3A00               	xorlw	0
  6900  0FFB  1D03               	skipz
  6901  0FFC  2FEA               	goto	l6525
  6902                           
  6903                           ;wireless.c: 170: Wireless_checkDataReceived();
  6904  0FFD  318B  238E         	fcall	_Wireless_checkDataReceived
  6905  0FFF  0008               	return
  6906  1000                     __end_of_Wireless_packageData:	
  6907                           
  6908                           	psect	text7
  6909  0D22                     __ptext7:	
  6910 ;; *************** function _Wireless_determineTransmitPower *****************
  6911 ;; Defined at:
  6912 ;;		line 60 in file "wireless.c"
  6913 ;; Parameters:    Size  Location     Type
  6914 ;;  initialise      1    wreg     unsigned char 
  6915 ;; Auto vars:     Size  Location     Type
  6916 ;;  initialise      1   24[BANK0 ] unsigned char 
  6917 ;;  latestResult    1   26[BANK0 ] unsigned char 
  6918 ;;  testPayload     1   25[BANK0 ] unsigned char 
  6919 ;; Return value:  Size  Location     Type
  6920 ;;                  1    wreg      unsigned char 
  6921 ;; Registers used:
  6922 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6923 ;; Tracked objects:
  6924 ;;		On entry : 0/0
  6925 ;;		On exit  : 0/0
  6926 ;;		Unchanged: 0/0
  6927 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6928 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6929 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6930 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6931 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6932 ;;Total ram usage:        6 bytes
  6933 ;; Hardware stack levels used:    1
  6934 ;; Hardware stack levels required when called:   10
  6935 ;; This function calls:
  6936 ;;		_Wireless_changeTransmitPower
  6937 ;;		_Wireless_isDataTransmitSuccessful
  6938 ;;		_Wireless_sendData
  6939 ;;		_limit
  6940 ;; This function is called by:
  6941 ;;		_main
  6942 ;;		_Wireless_packageData
  6943 ;; This function uses a non-reentrant model
  6944 ;;
  6945                           
  6946                           
  6947                           ;psect for function _Wireless_determineTransmitPower
  6948  0D22                     _Wireless_determineTransmitPower:	
  6949                           
  6950                           ;incstack = 0
  6951                           ; Regs used in _Wireless_determineTransmitPower: [wreg-fsr1h+status,2+status,0+pclath+cs
      +                          tack]
  6952                           ;Wireless_determineTransmitPower@initialise stored from wreg
  6953  0D22  0020               	movlb	0	; select bank0
  6954  0D23  00B8               	movwf	Wireless_determineTransmitPower@initialise
  6955                           
  6956                           ;wireless.c: 62: char testPayload = 0xFF;
  6957  0D24  30FF               	movlw	255
  6958  0D25  00B5               	movwf	??_Wireless_determineTransmitPower
  6959  0D26  0835               	movf	??_Wireless_determineTransmitPower,w
  6960  0D27  00B9               	movwf	Wireless_determineTransmitPower@testPayload
  6961                           
  6962                           ;wireless.c: 63: char latestResult;
  6963                           ;wireless.c: 64: static char numOfTransmits =0;
  6964                           ;wireless.c: 65: static char numOfSuccessfulTransmits = 0;
  6965                           ;wireless.c: 67: if(initialise){
  6966  0D28  0838               	movf	Wireless_determineTransmitPower@initialise,w
  6967  0D29  1903               	btfsc	3,2
  6968  0D2A  2D66               	goto	l6089
  6969                           
  6970                           ;wireless.c: 68: currentTransmitPower = 0;
  6971  0D2B  0021               	movlb	1	; select bank1
  6972  0D2C  01DC               	clrf	_currentTransmitPower^(0+128)
  6973  0D2D                     l6085:	
  6974                           ;wireless.c: 71: for(;currentTransmitPower <= 3; currentTransmitPower++){
  6975                           
  6976  0D2D  3004               	movlw	4
  6977  0D2E  025C               	subwf	_currentTransmitPower^(0+128),w
  6978  0D2F  1803               	btfsc	3,0
  6979  0D30  2D4C               	goto	l6087
  6980                           
  6981                           ;wireless.c: 72: Wireless_changeTransmitPower(currentTransmitPower);
  6982  0D31  085C               	movf	_currentTransmitPower^(0+128),w
  6983  0D32  3195  25E8  318D   	fcall	_Wireless_changeTransmitPower
  6984                           
  6985                           ;wireless.c: 73: Wireless_sendData(&testPayload, 1);
  6986  0D35  0020               	movlb	0	; select bank0
  6987  0D36  01B1               	clrf	Wireless_sendData@length
  6988  0D37  0AB1               	incf	Wireless_sendData@length,f
  6989  0D38  3039               	movlw	(low (Wireless_determineTransmitPower@testPayload| 0))& (0+255)
  6990  0D39  3194  2418  318D   	fcall	_Wireless_sendData
  6991  0D3C                     l1100:	
  6992                           ;wireless.c: 74: while(PORTCbits.RC3);
  6993                           
  6994  0D3C  0020               	movlb	0	; select bank0
  6995  0D3D  198E               	btfsc	14,3	;volatile
  6996  0D3E  2D3C               	goto	l1100
  6997                           
  6998                           ;wireless.c: 76: if(Wireless_isDataTransmitSuccessful())
  6999  0D3F  3193  236F  318D   	fcall	_Wireless_isDataTransmitSuccessful
  7000  0D42  3A00               	xorlw	0
  7001  0D43  1D03               	btfss	3,2
  7002  0D44  2D4C               	goto	l6087
  7003                           
  7004                           ;wireless.c: 77: break;
  7005  0D45  3001               	movlw	1
  7006  0D46  0020               	movlb	0	; select bank0
  7007  0D47  00B5               	movwf	??_Wireless_determineTransmitPower
  7008  0D48  0835               	movf	??_Wireless_determineTransmitPower,w
  7009  0D49  0021               	movlb	1	; select bank1
  7010  0D4A  07DC               	addwf	_currentTransmitPower^(0+128),f
  7011  0D4B  2D2D               	goto	l6085
  7012  0D4C                     l6087:	
  7013                           
  7014                           ;wireless.c: 78: }
  7015                           ;wireless.c: 79: currentTransmitPower = limit( currentTransmitPower, 0, 3);
  7016  0D4C  0021               	movlb	1	; select bank1
  7017  0D4D  085C               	movf	_currentTransmitPower^(0+128),w
  7018  0D4E  0020               	movlb	0	; select bank0
  7019  0D4F  00B5               	movwf	??_Wireless_determineTransmitPower
  7020  0D50  01B6               	clrf	??_Wireless_determineTransmitPower+1
  7021  0D51  0835               	movf	??_Wireless_determineTransmitPower,w
  7022  0D52  00A1               	movwf	limit@val
  7023  0D53  0836               	movf	??_Wireless_determineTransmitPower+1,w
  7024  0D54  00A2               	movwf	limit@val+1
  7025  0D55  3000               	movlw	0
  7026  0D56  00A3               	movwf	limit@min
  7027  0D57  00A4               	movwf	limit@min+1
  7028  0D58  3003               	movlw	3
  7029  0D59  00A5               	movwf	limit@max
  7030  0D5A  3000               	movlw	0
  7031  0D5B  00A6               	movwf	limit@max+1
  7032  0D5C  3196  26CC  318D   	fcall	_limit
  7033  0D5F  0020               	movlb	0	; select bank0
  7034  0D60  0821               	movf	?_limit,w
  7035  0D61  00B7               	movwf	??_Wireless_determineTransmitPower+2
  7036  0D62  0837               	movf	??_Wireless_determineTransmitPower+2,w
  7037  0D63  0021               	movlb	1	; select bank1
  7038  0D64  00DC               	movwf	_currentTransmitPower^(0+128)
  7039                           
  7040                           ;wireless.c: 80: }else{
  7041  0D65  2DBF               	goto	l6139
  7042  0D66                     l6089:	
  7043                           
  7044                           ;wireless.c: 82: latestResult = Wireless_isDataTransmitSuccessful();
  7045  0D66  3193  236F  318D   	fcall	_Wireless_isDataTransmitSuccessful
  7046  0D69  0020               	movlb	0	; select bank0
  7047  0D6A  00B5               	movwf	??_Wireless_determineTransmitPower
  7048  0D6B  0835               	movf	??_Wireless_determineTransmitPower,w
  7049  0D6C  00BA               	movwf	Wireless_determineTransmitPower@latestResult
  7050                           
  7051                           ;wireless.c: 84: if(numOfTransmits>=5){
  7052  0D6D  3005               	movlw	5
  7053  0D6E  0021               	movlb	1	; select bank1
  7054  0D6F  025B               	subwf	Wireless_determineTransmitPower@numOfTransmits^(0+128),w
  7055  0D70  1C03               	skipc
  7056  0D71  2D9D               	goto	l6121
  7057                           
  7058                           ;wireless.c: 85: if(currentTransmitPower > 0 && latestResult && numOfSuccessfulTransmits
      +                           >=4){
  7059  0D72  085C               	movf	_currentTransmitPower^(0+128),w
  7060  0D73  1903               	btfsc	3,2
  7061  0D74  2D84               	goto	l6101
  7062  0D75  0020               	movlb	0	; select bank0
  7063  0D76  083A               	movf	Wireless_determineTransmitPower@latestResult,w
  7064  0D77  1903               	btfsc	3,2
  7065  0D78  2D84               	goto	l6101
  7066  0D79  3004               	movlw	4
  7067  0D7A  0021               	movlb	1	; select bank1
  7068  0D7B  025A               	subwf	Wireless_determineTransmitPower@numOfSuccessfulTransmits^(0+128),w
  7069  0D7C  1C03               	skipc
  7070  0D7D  2D84               	goto	l6101
  7071                           
  7072                           ;wireless.c: 86: Wireless_changeTransmitPower(--currentTransmitPower);
  7073  0D7E  3001               	movlw	1
  7074  0D7F  02DC               	subwf	_currentTransmitPower^(0+128),f
  7075  0D80  085C               	movf	_currentTransmitPower^(0+128),w
  7076  0D81  3195  25E8  318D   	fcall	_Wireless_changeTransmitPower
  7077  0D84                     l6101:	
  7078                           
  7079                           ;wireless.c: 87: }
  7080                           ;wireless.c: 89: numOfTransmits = 0;
  7081  0D84  0021               	movlb	1	; select bank1
  7082  0D85  01DB               	clrf	Wireless_determineTransmitPower@numOfTransmits^(0+128)
  7083                           
  7084                           ;wireless.c: 90: numOfSuccessfulTransmits = 0;
  7085  0D86  01DA               	clrf	Wireless_determineTransmitPower@numOfSuccessfulTransmits^(0+128)
  7086                           
  7087                           ;wireless.c: 91: if(!latestResult && currentTransmitPower<3){
  7088  0D87  0020               	movlb	0	; select bank0
  7089  0D88  083A               	movf	Wireless_determineTransmitPower@latestResult,w
  7090  0D89  1D03               	btfss	3,2
  7091  0D8A  2D9B               	goto	l6117
  7092  0D8B  3003               	movlw	3
  7093  0D8C  0021               	movlb	1	; select bank1
  7094  0D8D  025C               	subwf	_currentTransmitPower^(0+128),w
  7095  0D8E  1803               	skipnc
  7096  0D8F  2D9B               	goto	l6117
  7097                           
  7098                           ;wireless.c: 94: Wireless_changeTransmitPower(++currentTransmitPower);
  7099  0D90  3001               	movlw	1
  7100  0D91  0020               	movlb	0	; select bank0
  7101  0D92  00B5               	movwf	??_Wireless_determineTransmitPower
  7102  0D93  0835               	movf	??_Wireless_determineTransmitPower,w
  7103  0D94  0021               	movlb	1	; select bank1
  7104  0D95  07DC               	addwf	_currentTransmitPower^(0+128),f
  7105  0D96  085C               	movf	_currentTransmitPower^(0+128),w
  7106  0D97  3195  25E8         	fcall	_Wireless_changeTransmitPower
  7107                           
  7108                           ;wireless.c: 95: return 1;
  7109  0D99  3001               	movlw	1
  7110  0D9A  0008               	return
  7111  0D9B                     l6117:	
  7112                           ;wireless.c: 96: } else
  7113                           
  7114                           
  7115                           ;wireless.c: 97: return 0;
  7116  0D9B  3000               	movlw	0
  7117  0D9C  0008               	return
  7118  0D9D                     l6121:	
  7119                           ;wireless.c: 99: }else{
  7120                           
  7121                           
  7122                           ;wireless.c: 101: if(latestResult){
  7123  0D9D  0020               	movlb	0	; select bank0
  7124  0D9E  083A               	movf	Wireless_determineTransmitPower@latestResult,w
  7125  0D9F  1903               	btfsc	3,2
  7126  0DA0  2DAD               	goto	l6125
  7127                           
  7128                           ;wireless.c: 102: numOfTransmits++;
  7129  0DA1  3001               	movlw	1
  7130  0DA2  00B5               	movwf	??_Wireless_determineTransmitPower
  7131  0DA3  0835               	movf	??_Wireless_determineTransmitPower,w
  7132  0DA4  0021               	movlb	1	; select bank1
  7133  0DA5  07DB               	addwf	Wireless_determineTransmitPower@numOfTransmits^(0+128),f
  7134                           
  7135                           ;wireless.c: 103: numOfSuccessfulTransmits++;
  7136  0DA6  3001               	movlw	1
  7137  0DA7  0020               	movlb	0	; select bank0
  7138  0DA8  00B5               	movwf	??_Wireless_determineTransmitPower
  7139  0DA9  0835               	movf	??_Wireless_determineTransmitPower,w
  7140  0DAA  0021               	movlb	1	; select bank1
  7141  0DAB  07DA               	addwf	Wireless_determineTransmitPower@numOfSuccessfulTransmits^(0+128),f
  7142                           
  7143                           ;wireless.c: 104: }else if(currentTransmitPower<3){
  7144  0DAC  2DBF               	goto	l6139
  7145  0DAD                     l6125:	
  7146  0DAD  3003               	movlw	3
  7147  0DAE  0021               	movlb	1	; select bank1
  7148  0DAF  025C               	subwf	_currentTransmitPower^(0+128),w
  7149  0DB0  1803               	skipnc
  7150  0DB1  2DBD               	goto	l6135
  7151                           
  7152                           ;wireless.c: 105: Wireless_changeTransmitPower(++currentTransmitPower);
  7153  0DB2  3001               	movlw	1
  7154  0DB3  0020               	movlb	0	; select bank0
  7155  0DB4  00B5               	movwf	??_Wireless_determineTransmitPower
  7156  0DB5  0835               	movf	??_Wireless_determineTransmitPower,w
  7157  0DB6  0021               	movlb	1	; select bank1
  7158  0DB7  07DC               	addwf	_currentTransmitPower^(0+128),f
  7159  0DB8  085C               	movf	_currentTransmitPower^(0+128),w
  7160  0DB9  3195  25E8         	fcall	_Wireless_changeTransmitPower
  7161                           
  7162                           ;wireless.c: 106: return 1;
  7163  0DBB  3001               	movlw	1
  7164  0DBC  0008               	return
  7165  0DBD                     l6135:	
  7166                           ;wireless.c: 107: } else
  7167                           
  7168                           
  7169                           ;wireless.c: 108: return 0;
  7170  0DBD  3000               	movlw	0
  7171  0DBE  0008               	return
  7172  0DBF                     l6139:	
  7173                           
  7174                           ;wireless.c: 110: }
  7175                           ;wireless.c: 111: }
  7176                           ;wireless.c: 114: return !latestResult;
  7177  0DBF  0020               	movlb	0	; select bank0
  7178  0DC0  083A               	movf	Wireless_determineTransmitPower@latestResult,w
  7179  0DC1  1D03               	btfss	3,2
  7180  0DC2  2DC5               	goto	u5600
  7181  0DC3  3001               	movlw	1
  7182  0DC4  0008               	return
  7183  0DC5                     u5600:	
  7184  0DC5  3000               	movlw	0
  7185  0DC6  0008               	return
  7186  0DC7                     __end_of_Wireless_determineTransmitPower:	
  7187                           
  7188                           	psect	text8
  7189  16CC                     __ptext8:	
  7190 ;; *************** function _limit *****************
  7191 ;; Defined at:
  7192 ;;		line 12 in file "common.c"
  7193 ;; Parameters:    Size  Location     Type
  7194 ;;  val             2    1[BANK0 ] int 
  7195 ;;  min             2    3[BANK0 ] int 
  7196 ;;  max             2    5[BANK0 ] int 
  7197 ;; Auto vars:     Size  Location     Type
  7198 ;;		None
  7199 ;; Return value:  Size  Location     Type
  7200 ;;                  2    1[BANK0 ] int 
  7201 ;; Registers used:
  7202 ;;		wreg
  7203 ;; Tracked objects:
  7204 ;;		On entry : 0/0
  7205 ;;		On exit  : 0/0
  7206 ;;		Unchanged: 0/0
  7207 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7208 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7209 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7210 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7211 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7212 ;;Total ram usage:        7 bytes
  7213 ;; Hardware stack levels used:    1
  7214 ;; Hardware stack levels required when called:    4
  7215 ;; This function calls:
  7216 ;;		Nothing
  7217 ;; This function is called by:
  7218 ;;		_Wireless_determineTransmitPower
  7219 ;; This function uses a non-reentrant model
  7220 ;;
  7221                           
  7222                           
  7223                           ;psect for function _limit
  7224  16CC                     _limit:	
  7225                           
  7226                           ;common.c: 13: if(val<min)
  7227                           
  7228                           ;incstack = 0
  7229                           ; Regs used in _limit: [wreg]
  7230  16CC  0020               	movlb	0	; select bank0
  7231  16CD  0822               	movf	limit@val+1,w
  7232  16CE  3A80               	xorlw	128
  7233  16CF  00A7               	movwf	??_limit
  7234  16D0  0824               	movf	limit@min+1,w
  7235  16D1  3A80               	xorlw	128
  7236  16D2  0227               	subwf	??_limit,w
  7237  16D3  1D03               	skipz
  7238  16D4  2ED7               	goto	u5285
  7239  16D5  0823               	movf	limit@min,w
  7240  16D6  0221               	subwf	limit@val,w
  7241  16D7                     u5285:	
  7242  16D7  1803               	skipnc
  7243  16D8  2EDF               	goto	l5805
  7244                           
  7245                           ;common.c: 14: return min;
  7246  16D9  0020               	movlb	0	; select bank0
  7247  16DA  0824               	movf	limit@min+1,w
  7248  16DB  00A2               	movwf	?_limit+1
  7249  16DC  0823               	movf	limit@min,w
  7250  16DD  00A1               	movwf	?_limit
  7251  16DE  0008               	return
  7252  16DF                     l5805:	
  7253                           
  7254                           ;common.c: 15: if(val>max)
  7255  16DF  0020               	movlb	0	; select bank0
  7256  16E0  0826               	movf	limit@max+1,w
  7257  16E1  3A80               	xorlw	128
  7258  16E2  00A7               	movwf	??_limit
  7259  16E3  0822               	movf	limit@val+1,w
  7260  16E4  3A80               	xorlw	128
  7261  16E5  0227               	subwf	??_limit,w
  7262  16E6  1D03               	skipz
  7263  16E7  2EEA               	goto	u5295
  7264  16E8  0821               	movf	limit@val,w
  7265  16E9  0225               	subwf	limit@max,w
  7266  16EA                     u5295:	
  7267  16EA  1803               	skipnc
  7268  16EB  0008               	return
  7269                           
  7270                           ;common.c: 16: return max;
  7271  16EC  0020               	movlb	0	; select bank0
  7272  16ED  0826               	movf	limit@max+1,w
  7273  16EE  00A2               	movwf	?_limit+1
  7274  16EF  0825               	movf	limit@max,w
  7275  16F0  00A1               	movwf	?_limit
  7276  16F1  0008               	return
  7277  16F2                     __end_of_limit:	
  7278                           ;common.c: 17: return val;
  7279                           
  7280                           
  7281                           	psect	text9
  7282  1418                     __ptext9:	
  7283 ;; *************** function _Wireless_sendData *****************
  7284 ;; Defined at:
  7285 ;;		line 126 in file "wireless.c"
  7286 ;; Parameters:    Size  Location     Type
  7287 ;;  payload         1    wreg     PTR unsigned char 
  7288 ;;		 -> Wireless_packageData@data(6), Wireless_determineTransmitPower@testPayload(1), 
  7289 ;;  length          1   17[BANK0 ] unsigned char 
  7290 ;; Auto vars:     Size  Location     Type
  7291 ;;  payload         1   20[BANK0 ] PTR unsigned char 
  7292 ;;		 -> Wireless_packageData@data(6), Wireless_determineTransmitPower@testPayload(1), 
  7293 ;;  status          1   19[BANK0 ] unsigned char 
  7294 ;; Return value:  Size  Location     Type
  7295 ;;                  1    wreg      void 
  7296 ;; Registers used:
  7297 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  7298 ;; Tracked objects:
  7299 ;;		On entry : 0/0
  7300 ;;		On exit  : 0/0
  7301 ;;		Unchanged: 0/0
  7302 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7303 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7304 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7305 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7306 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7307 ;;Total ram usage:        4 bytes
  7308 ;; Hardware stack levels used:    1
  7309 ;; Hardware stack levels required when called:    9
  7310 ;; This function calls:
  7311 ;;		_RF_GetStatus
  7312 ;;		_RF_ResetStatusIRQ
  7313 ;;		_RF_TxPayload
  7314 ;; This function is called by:
  7315 ;;		_Wireless_determineTransmitPower
  7316 ;;		_Wireless_packageData
  7317 ;; This function uses a non-reentrant model
  7318 ;;
  7319                           
  7320                           
  7321                           ;psect for function _Wireless_sendData
  7322  1418                     _Wireless_sendData:	
  7323                           
  7324                           ;incstack = 0
  7325                           ; Regs used in _Wireless_sendData: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  7326                           ;Wireless_sendData@payload stored from wreg
  7327  1418  0020               	movlb	0	; select bank0
  7328  1419  00B4               	movwf	Wireless_sendData@payload
  7329                           
  7330                           ;wireless.c: 128: char status;
  7331                           ;wireless.c: 130: RF_ResetStatusIRQ(0x40|0x20|0x10);
  7332  141A  3070               	movlw	112
  7333  141B  3196  2624  3194   	fcall	_RF_ResetStatusIRQ
  7334                           
  7335                           ;wireless.c: 131: status = RF_GetStatus();
  7336  141E  3192  22C3  3194   	fcall	_RF_GetStatus
  7337  1421  0020               	movlb	0	; select bank0
  7338  1422  00B2               	movwf	??_Wireless_sendData
  7339  1423  0832               	movf	??_Wireless_sendData,w
  7340  1424  00B3               	movwf	Wireless_sendData@status
  7341                           
  7342                           ;wireless.c: 132: RF_TxPayload(payload, length);
  7343  1425  0831               	movf	Wireless_sendData@length,w
  7344  1426  00B2               	movwf	??_Wireless_sendData
  7345  1427  0832               	movf	??_Wireless_sendData,w
  7346  1428  00AE               	movwf	RF_TxPayload@payloadSize
  7347  1429  0834               	movf	Wireless_sendData@payload,w
  7348  142A  3195  253C         	fcall	_RF_TxPayload
  7349  142C  0008               	return
  7350  142D                     __end_of_Wireless_sendData:	
  7351                           
  7352                           	psect	text10
  7353  153C                     __ptext10:	
  7354 ;; *************** function _RF_TxPayload *****************
  7355 ;; Defined at:
  7356 ;;		line 173 in file "nrf24.c"
  7357 ;; Parameters:    Size  Location     Type
  7358 ;;  payload         1    wreg     PTR unsigned char 
  7359 ;;		 -> Wireless_packageData@data(6), Wireless_determineTransmitPower@testPayload(1), 
  7360 ;;  payloadSize     1   14[BANK0 ] unsigned char 
  7361 ;; Auto vars:     Size  Location     Type
  7362 ;;  payload         1   16[BANK0 ] PTR unsigned char 
  7363 ;;		 -> Wireless_packageData@data(6), Wireless_determineTransmitPower@testPayload(1), 
  7364 ;; Return value:  Size  Location     Type
  7365 ;;                  1    wreg      void 
  7366 ;; Registers used:
  7367 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  7368 ;; Tracked objects:
  7369 ;;		On entry : 0/0
  7370 ;;		On exit  : 0/0
  7371 ;;		Unchanged: 0/0
  7372 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7373 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7374 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7375 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7376 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7377 ;;Total ram usage:        3 bytes
  7378 ;; Hardware stack levels used:    1
  7379 ;; Hardware stack levels required when called:    8
  7380 ;; This function calls:
  7381 ;;		_RF_Write
  7382 ;;		_RF_WriteRegisterData
  7383 ;; This function is called by:
  7384 ;;		_Wireless_sendData
  7385 ;; This function uses a non-reentrant model
  7386 ;;
  7387                           
  7388                           
  7389                           ;psect for function _RF_TxPayload
  7390  153C                     _RF_TxPayload:	
  7391                           
  7392                           ;incstack = 0
  7393                           ; Regs used in _RF_TxPayload: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  7394                           ;RF_TxPayload@payload stored from wreg
  7395  153C  0020               	movlb	0	; select bank0
  7396  153D  00B0               	movwf	RF_TxPayload@payload
  7397                           
  7398                           ;nrf24.c: 174: RF_Write(0xE1);
  7399  153E  30E1               	movlw	225
  7400  153F  3193  239A  3195   	fcall	_RF_Write
  7401                           
  7402                           ;nrf24.c: 175: RF_WriteRegisterData(0xA0, payload, payloadSize);
  7403  1542  0020               	movlb	0	; select bank0
  7404  1543  0830               	movf	RF_TxPayload@payload,w
  7405  1544  00A9               	movwf	RF_WriteRegisterData@buf
  7406  1545  3000               	movlw	0
  7407  1546  00AA               	movwf	RF_WriteRegisterData@buf+1
  7408  1547  082E               	movf	RF_TxPayload@payloadSize,w
  7409  1548  00AF               	movwf	??_RF_TxPayload
  7410  1549  082F               	movf	??_RF_TxPayload,w
  7411  154A  00AB               	movwf	RF_WriteRegisterData@bufSize
  7412  154B  30A0               	movlw	160
  7413  154C  3195  2591  3195   	fcall	_RF_WriteRegisterData
  7414                           
  7415                           ;nrf24.c: 176: do { LATCbits.LATC2 = 1; } while(0);
  7416  154F  0022               	movlb	2	; select bank2
  7417  1550  150E               	bsf	14,2	;volatile
  7418                           
  7419                           ;nrf24.c: 177: _delay((unsigned long)((15)*(8000000/4000000.0)));
  7420  1551  300A               	movlw	10
  7421  1552                     u7207:	
  7422  1552  0B89               	decfsz	9,f
  7423  1553  2D52               	goto	u7207
  7424                           
  7425                           ;nrf24.c: 178: do { LATCbits.LATC2 = 0; } while(0);
  7426  1554  0022               	movlb	2	; select bank2
  7427  1555  110E               	bcf	14,2	;volatile
  7428  1556  0008               	return
  7429  1557                     __end_of_RF_TxPayload:	
  7430                           
  7431                           	psect	text11
  7432  139A                     __ptext11:	
  7433 ;; *************** function _RF_Write *****************
  7434 ;; Defined at:
  7435 ;;		line 139 in file "nrf24.c"
  7436 ;; Parameters:    Size  Location     Type
  7437 ;;  val             1    wreg     unsigned char 
  7438 ;; Auto vars:     Size  Location     Type
  7439 ;;  val             1    3[BANK0 ] unsigned char 
  7440 ;; Return value:  Size  Location     Type
  7441 ;;                  1    wreg      void 
  7442 ;; Registers used:
  7443 ;;		wreg, status,2, status,0, pclath, cstack
  7444 ;; Tracked objects:
  7445 ;;		On entry : 0/0
  7446 ;;		On exit  : 0/0
  7447 ;;		Unchanged: 0/0
  7448 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7449 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7450 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7451 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7452 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7453 ;;Total ram usage:        1 bytes
  7454 ;; Hardware stack levels used:    1
  7455 ;; Hardware stack levels required when called:    6
  7456 ;; This function calls:
  7457 ;;		_SPI_WriteRead
  7458 ;; This function is called by:
  7459 ;;		_RF_TxPayload
  7460 ;; This function uses a non-reentrant model
  7461 ;;
  7462                           
  7463                           
  7464                           ;psect for function _RF_Write
  7465  139A                     _RF_Write:	
  7466                           
  7467                           ;incstack = 0
  7468                           ; Regs used in _RF_Write: [wreg+status,2+status,0+pclath+cstack]
  7469                           ;RF_Write@val stored from wreg
  7470  139A  0020               	movlb	0	; select bank0
  7471  139B  00A3               	movwf	RF_Write@val
  7472                           
  7473                           ;nrf24.c: 140: do { LATCbits.LATC1 = 0; } while(0);
  7474  139C  0022               	movlb	2	; select bank2
  7475  139D  108E               	bcf	14,1	;volatile
  7476                           
  7477                           ;nrf24.c: 141: (void)SPI_WriteRead(val);
  7478  139E  0020               	movlb	0	; select bank0
  7479  139F  0823               	movf	RF_Write@val,w
  7480  13A0  3192  22E0  3193   	fcall	_SPI_WriteRead
  7481                           
  7482                           ;nrf24.c: 142: do { LATCbits.LATC1 = 1; } while(0);
  7483  13A3  0022               	movlb	2	; select bank2
  7484  13A4  148E               	bsf	14,1	;volatile
  7485                           
  7486                           ;nrf24.c: 143: _delay((unsigned long)((10)*(8000000/4000000.0)));
  7487  13A5  3006               	movlw	6
  7488  13A6                     u7217:	
  7489  13A6  0B89               	decfsz	9,f
  7490  13A7  2BA6               	goto	u7217
  7491  13A8  3200               	nop2
  7492  13A9  0008               	return
  7493  13AA                     __end_of_RF_Write:	
  7494                           
  7495                           	psect	text12
  7496  136F                     __ptext12:	
  7497 ;; *************** function _Wireless_isDataTransmitSuccessful *****************
  7498 ;; Defined at:
  7499 ;;		line 195 in file "wireless.c"
  7500 ;; Parameters:    Size  Location     Type
  7501 ;;		None
  7502 ;; Auto vars:     Size  Location     Type
  7503 ;;  status          1    6[BANK0 ] unsigned char 
  7504 ;; Return value:  Size  Location     Type
  7505 ;;                  1    wreg      unsigned char 
  7506 ;; Registers used:
  7507 ;;		wreg, pclath, cstack
  7508 ;; Tracked objects:
  7509 ;;		On entry : 0/0
  7510 ;;		On exit  : 0/0
  7511 ;;		Unchanged: 0/0
  7512 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7513 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7514 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7515 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7516 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7517 ;;Total ram usage:        2 bytes
  7518 ;; Hardware stack levels used:    1
  7519 ;; Hardware stack levels required when called:    8
  7520 ;; This function calls:
  7521 ;;		_RF_GetStatus
  7522 ;; This function is called by:
  7523 ;;		_Wireless_determineTransmitPower
  7524 ;; This function uses a non-reentrant model
  7525 ;;
  7526                           
  7527                           
  7528                           ;psect for function _Wireless_isDataTransmitSuccessful
  7529  136F                     _Wireless_isDataTransmitSuccessful:	
  7530                           
  7531                           ;wireless.c: 196: char status = RF_GetStatus();
  7532                           
  7533                           ;incstack = 0
  7534                           ; Regs used in _Wireless_isDataTransmitSuccessful: [wreg+pclath+cstack]
  7535  136F  3192  22C3  3193   	fcall	_RF_GetStatus
  7536  1372  0020               	movlb	0	; select bank0
  7537  1373  00A5               	movwf	??_Wireless_isDataTransmitSuccessful
  7538  1374  0825               	movf	??_Wireless_isDataTransmitSuccessful,w
  7539  1375  00A6               	movwf	Wireless_isDataTransmitSuccessful@status
  7540                           
  7541                           ;wireless.c: 197: if(status & 0x20)
  7542  1376  1EA6               	btfss	Wireless_isDataTransmitSuccessful@status,5
  7543  1377  2B7A               	goto	l5859
  7544                           
  7545                           ;wireless.c: 198: return 1;
  7546  1378  3001               	movlw	1
  7547  1379  0008               	return
  7548  137A                     l5859:	
  7549                           
  7550                           ;wireless.c: 199: else
  7551                           ;wireless.c: 200: return 0;
  7552  137A  3000               	movlw	0
  7553  137B  0008               	return
  7554  137C                     __end_of_Wireless_isDataTransmitSuccessful:	
  7555                           
  7556                           	psect	text13
  7557  12C3                     __ptext13:	
  7558 ;; *************** function _RF_GetStatus *****************
  7559 ;; Defined at:
  7560 ;;		line 150 in file "nrf24.c"
  7561 ;; Parameters:    Size  Location     Type
  7562 ;;		None
  7563 ;; Auto vars:     Size  Location     Type
  7564 ;;		None
  7565 ;; Return value:  Size  Location     Type
  7566 ;;                  1    wreg      unsigned char 
  7567 ;; Registers used:
  7568 ;;		wreg, pclath, cstack
  7569 ;; Tracked objects:
  7570 ;;		On entry : 0/0
  7571 ;;		On exit  : 0/0
  7572 ;;		Unchanged: 0/0
  7573 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7574 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7575 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7576 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7577 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7578 ;;Total ram usage:        0 bytes
  7579 ;; Hardware stack levels used:    1
  7580 ;; Hardware stack levels required when called:    7
  7581 ;; This function calls:
  7582 ;;		_RF_WriteRead
  7583 ;; This function is called by:
  7584 ;;		_Wireless_sendData
  7585 ;;		_Wireless_isDataTransmitSuccessful
  7586 ;; This function uses a non-reentrant model
  7587 ;;
  7588                           
  7589                           
  7590                           ;psect for function _RF_GetStatus
  7591  12C3                     _RF_GetStatus:	
  7592                           
  7593                           ;nrf24.c: 151: return RF_WriteRead(0xFF);
  7594                           
  7595                           ;incstack = 0
  7596                           ; Regs used in _RF_GetStatus: [wreg+pclath+cstack]
  7597  12C3  30FF               	movlw	255
  7598  12C4  3194  2459         	fcall	_RF_WriteRead
  7599  12C6  0008               	return
  7600  12C7                     __end_of_RF_GetStatus:	
  7601                           
  7602                           	psect	text14
  7603  1459                     __ptext14:	
  7604 ;; *************** function _RF_WriteRead *****************
  7605 ;; Defined at:
  7606 ;;		line 126 in file "nrf24.c"
  7607 ;; Parameters:    Size  Location     Type
  7608 ;;  val             1    wreg     unsigned char 
  7609 ;; Auto vars:     Size  Location     Type
  7610 ;;  val             1    4[BANK0 ] unsigned char 
  7611 ;; Return value:  Size  Location     Type
  7612 ;;                  1    wreg      unsigned char 
  7613 ;; Registers used:
  7614 ;;		wreg, pclath, cstack
  7615 ;; Tracked objects:
  7616 ;;		On entry : 0/0
  7617 ;;		On exit  : 0/0
  7618 ;;		Unchanged: 0/0
  7619 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7620 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7621 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7622 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7623 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7624 ;;Total ram usage:        2 bytes
  7625 ;; Hardware stack levels used:    1
  7626 ;; Hardware stack levels required when called:    6
  7627 ;; This function calls:
  7628 ;;		_SPI_WriteRead
  7629 ;; This function is called by:
  7630 ;;		_RF_GetStatus
  7631 ;; This function uses a non-reentrant model
  7632 ;;
  7633                           
  7634                           
  7635                           ;psect for function _RF_WriteRead
  7636  1459                     _RF_WriteRead:	
  7637                           
  7638                           ;incstack = 0
  7639                           ; Regs used in _RF_WriteRead: [wreg+pclath+cstack]
  7640                           ;RF_WriteRead@val stored from wreg
  7641  1459  0020               	movlb	0	; select bank0
  7642  145A  00A4               	movwf	RF_WriteRead@val
  7643                           
  7644                           ;nrf24.c: 127: do { LATCbits.LATC1 = 0; } while(0);
  7645  145B  0022               	movlb	2	; select bank2
  7646  145C  108E               	bcf	14,1	;volatile
  7647                           
  7648                           ;nrf24.c: 128: val = SPI_WriteRead(val);
  7649  145D  0020               	movlb	0	; select bank0
  7650  145E  0824               	movf	RF_WriteRead@val,w
  7651  145F  3192  22E0  3194   	fcall	_SPI_WriteRead
  7652  1462  0020               	movlb	0	; select bank0
  7653  1463  00A3               	movwf	??_RF_WriteRead
  7654  1464  0823               	movf	??_RF_WriteRead,w
  7655  1465  00A4               	movwf	RF_WriteRead@val
  7656                           
  7657                           ;nrf24.c: 129: do { LATCbits.LATC1 = 1; } while(0);
  7658  1466  0022               	movlb	2	; select bank2
  7659  1467  148E               	bsf	14,1	;volatile
  7660                           
  7661                           ;nrf24.c: 130: _delay((unsigned long)((10)*(8000000/4000000.0)));
  7662  1468  3006               	movlw	6
  7663  1469                     u7227:	
  7664  1469  0B89               	decfsz	9,f
  7665  146A  2C69               	goto	u7227
  7666  146B  3200               	nop2
  7667                           
  7668                           ;nrf24.c: 131: return val;
  7669  146C  0020               	movlb	0	; select bank0
  7670  146D  0824               	movf	RF_WriteRead@val,w
  7671  146E  0008               	return
  7672  146F                     __end_of_RF_WriteRead:	
  7673                           
  7674                           	psect	text15
  7675  15E8                     __ptext15:	
  7676 ;; *************** function _Wireless_changeTransmitPower *****************
  7677 ;; Defined at:
  7678 ;;		line 116 in file "wireless.c"
  7679 ;; Parameters:    Size  Location     Type
  7680 ;;  power           1    wreg     unsigned char 
  7681 ;; Auto vars:     Size  Location     Type
  7682 ;;  power           1   16[BANK0 ] unsigned char 
  7683 ;;  val             1   17[BANK0 ] unsigned char 
  7684 ;; Return value:  Size  Location     Type
  7685 ;;                  1    wreg      void 
  7686 ;; Registers used:
  7687 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7688 ;; Tracked objects:
  7689 ;;		On entry : 0/0
  7690 ;;		On exit  : 0/0
  7691 ;;		Unchanged: 0/0
  7692 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7693 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7694 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7695 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7696 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7697 ;;Total ram usage:        3 bytes
  7698 ;; Hardware stack levels used:    1
  7699 ;; Hardware stack levels required when called:    8
  7700 ;; This function calls:
  7701 ;;		_RF_ReadRegisterData
  7702 ;;		_RF_WriteRegister
  7703 ;; This function is called by:
  7704 ;;		_Wireless_determineTransmitPower
  7705 ;; This function uses a non-reentrant model
  7706 ;;
  7707                           
  7708                           
  7709                           ;psect for function _Wireless_changeTransmitPower
  7710  15E8                     _Wireless_changeTransmitPower:	
  7711                           
  7712                           ;incstack = 0
  7713                           ; Regs used in _Wireless_changeTransmitPower: [wreg+fsr1l+fsr1h+status,2+status,0+pclath
      +                          +cstack]
  7714                           ;Wireless_changeTransmitPower@power stored from wreg
  7715  15E8  0020               	movlb	0	; select bank0
  7716  15E9  00B0               	movwf	Wireless_changeTransmitPower@power
  7717                           
  7718                           ;wireless.c: 119: u8 val;
  7719                           ;wireless.c: 121: RF_ReadRegisterData(0x06, &val, 1);
  7720  15EA  3031               	movlw	(low (Wireless_changeTransmitPower@val| 0))& (0+255)
  7721  15EB  00AF               	movwf	??_Wireless_changeTransmitPower
  7722  15EC  082F               	movf	??_Wireless_changeTransmitPower,w
  7723  15ED  00AA               	movwf	RF_ReadRegisterData@buf
  7724  15EE  01AB               	clrf	RF_ReadRegisterData@bufSize
  7725  15EF  0AAB               	incf	RF_ReadRegisterData@bufSize,f
  7726  15F0  3006               	movlw	6
  7727  15F1  3195  25CB  3195   	fcall	_RF_ReadRegisterData
  7728                           
  7729                           ;wireless.c: 122: val &= 0b11111001;
  7730  15F4  30F9               	movlw	249
  7731  15F5  0020               	movlb	0	; select bank0
  7732  15F6  00AF               	movwf	??_Wireless_changeTransmitPower
  7733  15F7  082F               	movf	??_Wireless_changeTransmitPower,w
  7734  15F8  05B1               	andwf	Wireless_changeTransmitPower@val,f
  7735                           
  7736                           ;wireless.c: 123: val |= (power <<1);
  7737  15F9  3530               	lslf	Wireless_changeTransmitPower@power,w
  7738  15FA  00AF               	movwf	??_Wireless_changeTransmitPower
  7739  15FB  082F               	movf	??_Wireless_changeTransmitPower,w
  7740  15FC  04B1               	iorwf	Wireless_changeTransmitPower@val,f
  7741                           
  7742                           ;wireless.c: 124: RF_WriteRegister(0x06, val);
  7743  15FD  0831               	movf	Wireless_changeTransmitPower@val,w
  7744  15FE  00AF               	movwf	??_Wireless_changeTransmitPower
  7745  15FF  082F               	movf	??_Wireless_changeTransmitPower,w
  7746  1600  00A3               	movwf	RF_WriteRegister@val
  7747  1601  3006               	movlw	6
  7748  1602  3194  242D         	fcall	_RF_WriteRegister
  7749  1604  0008               	return
  7750  1605                     __end_of_Wireless_changeTransmitPower:	
  7751                           
  7752                           	psect	text16
  7753  0B8E                     __ptext16:	
  7754 ;; *************** function _Wireless_checkDataReceived *****************
  7755 ;; Defined at:
  7756 ;;		line 203 in file "wireless.c"
  7757 ;; Parameters:    Size  Location     Type
  7758 ;;		None
  7759 ;; Auto vars:     Size  Location     Type
  7760 ;;  data            4   23[BANK0 ] unsigned char [4]
  7761 ;;  channel         1   27[BANK0 ] unsigned char 
  7762 ;; Return value:  Size  Location     Type
  7763 ;;                  1    wreg      void 
  7764 ;; Registers used:
  7765 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7766 ;; Tracked objects:
  7767 ;;		On entry : 0/0
  7768 ;;		On exit  : 0/0
  7769 ;;		Unchanged: 0/0
  7770 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7771 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7772 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7773 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7774 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7775 ;;Total ram usage:        9 bytes
  7776 ;; Hardware stack levels used:    1
  7777 ;; Hardware stack levels required when called:    9
  7778 ;; This function calls:
  7779 ;;		_DOOR_resetPos
  7780 ;;		_DOOR_update
  7781 ;;		_RF_DataIsReady
  7782 ;;		_RF_RxPayload
  7783 ;;		___lmul
  7784 ;; This function is called by:
  7785 ;;		_Wireless_packageData
  7786 ;; This function uses a non-reentrant model
  7787 ;;
  7788                           
  7789                           
  7790                           ;psect for function _Wireless_checkDataReceived
  7791  0B8E                     _Wireless_checkDataReceived:	
  7792  0B8E                     l1143:	
  7793                           ;incstack = 0
  7794                           ; Regs used in _Wireless_checkDataReceived: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+c
      +                          stack]
  7795                           ;wireless.c: 210: char channel;
  7796                           ;wireless.c: 211: char data[4];
  7797                           ;wireless.c: 212: do
  7798                           
  7799                           
  7800                           ;wireless.c: 213: {
  7801                           ;wireless.c: 214: if(RF_DataIsReady(&channel))
  7802  0B8E  303B               	movlw	(low (Wireless_checkDataReceived@channel| 0))& (0+255)
  7803  0B8F  3195  25AE  318B   	fcall	_RF_DataIsReady
  7804  0B92  3A00               	xorlw	0
  7805  0B93  1903               	skipnz
  7806  0B94  2C00               	goto	l6207
  7807                           
  7808                           ;wireless.c: 215: {
  7809                           ;wireless.c: 216: RF_RxPayload(data, 4);
  7810  0B95  3004               	movlw	4
  7811  0B96  0020               	movlb	0	; select bank0
  7812  0B97  00B3               	movwf	??_Wireless_checkDataReceived
  7813  0B98  0833               	movf	??_Wireless_checkDataReceived,w
  7814  0B99  00AF               	movwf	RF_RxPayload@payloadSize
  7815  0B9A  3037               	movlw	(low (Wireless_checkDataReceived@data| 0))& (0+255)
  7816  0B9B  3193  23F0  318B   	fcall	_RF_RxPayload
  7817                           
  7818                           ;wireless.c: 217: if(data[0] & 0x01)
  7819  0B9E  0020               	movlb	0	; select bank0
  7820  0B9F  1C37               	btfss	Wireless_checkDataReceived@data,0
  7821  0BA0  2BAA               	goto	l6193
  7822                           
  7823                           ;wireless.c: 218: {
  7824                           ;wireless.c: 219: DOOR_update(doorOpenAngle,data[1]);
  7825  0BA1  0838               	movf	Wireless_checkDataReceived@data+1,w
  7826  0BA2  00B3               	movwf	??_Wireless_checkDataReceived
  7827  0BA3  0833               	movf	??_Wireless_checkDataReceived,w
  7828  0BA4  00A7               	movwf	DOOR_update@closedAngle
  7829  0BA5  0021               	movlb	1	; select bank1
  7830  0BA6  085E               	movf	_doorOpenAngle^(0+128),w
  7831  0BA7  3194  2443  318B   	fcall	_DOOR_update
  7832  0BAA                     l6193:	
  7833                           
  7834                           ;wireless.c: 220: }
  7835                           ;wireless.c: 221: if(data[0] & 0x02)
  7836  0BAA  0020               	movlb	0	; select bank0
  7837  0BAB  1CB7               	btfss	Wireless_checkDataReceived@data,1
  7838  0BAC  2BB7               	goto	l6197
  7839                           
  7840                           ;wireless.c: 222: {
  7841                           ;wireless.c: 223: DOOR_update(data[2],doorClosedAngle);
  7842  0BAD  0021               	movlb	1	; select bank1
  7843  0BAE  085D               	movf	_doorClosedAngle^(0+128),w
  7844  0BAF  0020               	movlb	0	; select bank0
  7845  0BB0  00B3               	movwf	??_Wireless_checkDataReceived
  7846  0BB1  0833               	movf	??_Wireless_checkDataReceived,w
  7847  0BB2  00A7               	movwf	DOOR_update@closedAngle
  7848  0BB3  0839               	movf	Wireless_checkDataReceived@data+2,w
  7849  0BB4  3194  2443  318B   	fcall	_DOOR_update
  7850  0BB7                     l6197:	
  7851                           
  7852                           ;wireless.c: 224: }
  7853                           ;wireless.c: 225: if(data[0] & 0x04)
  7854  0BB7  0020               	movlb	0	; select bank0
  7855  0BB8  1D37               	btfss	Wireless_checkDataReceived@data,2
  7856  0BB9  2BFA               	goto	l6203
  7857                           
  7858                           ;wireless.c: 226: {
  7859                           ;wireless.c: 227: sensorUpdatePeriod=data[3];
  7860  0BBA  083A               	movf	Wireless_checkDataReceived@data+3,w
  7861  0BBB  00B3               	movwf	??_Wireless_checkDataReceived
  7862  0BBC  01B4               	clrf	??_Wireless_checkDataReceived+1
  7863  0BBD  01B5               	clrf	??_Wireless_checkDataReceived+2
  7864  0BBE  01B6               	clrf	??_Wireless_checkDataReceived+3
  7865  0BBF  0836               	movf	??_Wireless_checkDataReceived+3,w
  7866  0BC0  0022               	movlb	2	; select bank2
  7867  0BC1  00ED               	movwf	(_sensorUpdatePeriod+3)^(0+256)
  7868  0BC2  0020               	movlb	0	; select bank0
  7869  0BC3  0835               	movf	??_Wireless_checkDataReceived+2,w
  7870  0BC4  0022               	movlb	2	; select bank2
  7871  0BC5  00EC               	movwf	(_sensorUpdatePeriod+2)^(0+256)
  7872  0BC6  0020               	movlb	0	; select bank0
  7873  0BC7  0834               	movf	??_Wireless_checkDataReceived+1,w
  7874  0BC8  0022               	movlb	2	; select bank2
  7875  0BC9  00EB               	movwf	(_sensorUpdatePeriod+1)^(0+256)
  7876  0BCA  0020               	movlb	0	; select bank0
  7877  0BCB  0833               	movf	??_Wireless_checkDataReceived,w
  7878  0BCC  0022               	movlb	2	; select bank2
  7879  0BCD  00EA               	movwf	_sensorUpdatePeriod^(0+256)
  7880                           
  7881                           ;wireless.c: 228: sensorUpdatePeriod*=1000;
  7882  0BCE  3000               	movlw	0
  7883  0BCF  0020               	movlb	0	; select bank0
  7884  0BD0  00A4               	movwf	___lmul@multiplier+3
  7885  0BD1  3000               	movlw	0
  7886  0BD2  00A3               	movwf	___lmul@multiplier+2
  7887  0BD3  3003               	movlw	3
  7888  0BD4  00A2               	movwf	___lmul@multiplier+1
  7889  0BD5  30E8               	movlw	232
  7890  0BD6  00A1               	movwf	___lmul@multiplier
  7891  0BD7  0022               	movlb	2	; select bank2
  7892  0BD8  086D               	movf	(_sensorUpdatePeriod+3)^(0+256),w
  7893  0BD9  0020               	movlb	0	; select bank0
  7894  0BDA  00A8               	movwf	___lmul@multiplicand+3
  7895  0BDB  0022               	movlb	2	; select bank2
  7896  0BDC  086C               	movf	(_sensorUpdatePeriod+2)^(0+256),w
  7897  0BDD  0020               	movlb	0	; select bank0
  7898  0BDE  00A7               	movwf	___lmul@multiplicand+2
  7899  0BDF  0022               	movlb	2	; select bank2
  7900  0BE0  086B               	movf	(_sensorUpdatePeriod+1)^(0+256),w
  7901  0BE1  0020               	movlb	0	; select bank0
  7902  0BE2  00A6               	movwf	___lmul@multiplicand+1
  7903  0BE3  0022               	movlb	2	; select bank2
  7904  0BE4  086A               	movf	_sensorUpdatePeriod^(0+256),w
  7905  0BE5  0020               	movlb	0	; select bank0
  7906  0BE6  00A5               	movwf	___lmul@multiplicand
  7907  0BE7  3197  279B  318B   	fcall	___lmul
  7908  0BEA  0020               	movlb	0	; select bank0
  7909  0BEB  0824               	movf	?___lmul+3,w
  7910  0BEC  0022               	movlb	2	; select bank2
  7911  0BED  00ED               	movwf	(_sensorUpdatePeriod+3)^(0+256)
  7912  0BEE  0020               	movlb	0	; select bank0
  7913  0BEF  0823               	movf	?___lmul+2,w
  7914  0BF0  0022               	movlb	2	; select bank2
  7915  0BF1  00EC               	movwf	(_sensorUpdatePeriod+2)^(0+256)
  7916  0BF2  0020               	movlb	0	; select bank0
  7917  0BF3  0822               	movf	?___lmul+1,w
  7918  0BF4  0022               	movlb	2	; select bank2
  7919  0BF5  00EB               	movwf	(_sensorUpdatePeriod+1)^(0+256)
  7920  0BF6  0020               	movlb	0	; select bank0
  7921  0BF7  0821               	movf	?___lmul,w
  7922  0BF8  0022               	movlb	2	; select bank2
  7923  0BF9  00EA               	movwf	_sensorUpdatePeriod^(0+256)
  7924  0BFA                     l6203:	
  7925                           
  7926                           ;wireless.c: 229: }
  7927                           ;wireless.c: 230: if(data[0] & 0x08)
  7928  0BFA  0020               	movlb	0	; select bank0
  7929  0BFB  1DB7               	btfss	Wireless_checkDataReceived@data,3
  7930  0BFC  2C00               	goto	l6207
  7931                           
  7932                           ;wireless.c: 231: {
  7933                           ;wireless.c: 232: DOOR_resetPos();
  7934  0BFD  3192  22B4  318B   	fcall	_DOOR_resetPos
  7935  0C00                     l6207:	
  7936                           
  7937                           ;wireless.c: 233: }
  7938                           ;wireless.c: 237: }
  7939                           ;wireless.c: 238: }while(RF_DataIsReady(&channel));
  7940  0C00  303B               	movlw	(low (Wireless_checkDataReceived@channel| 0))& (0+255)
  7941  0C01  3195  25AE  318B   	fcall	_RF_DataIsReady
  7942  0C04  3A00               	xorlw	0
  7943  0C05  1903               	btfsc	3,2
  7944  0C06  0008               	return
  7945  0C07  2B8E               	goto	l1143
  7946  0C08                     __end_of_Wireless_checkDataReceived:	
  7947                           
  7948                           	psect	text17
  7949  13F0                     __ptext17:	
  7950 ;; *************** function _RF_RxPayload *****************
  7951 ;; Defined at:
  7952 ;;		line 186 in file "nrf24.c"
  7953 ;; Parameters:    Size  Location     Type
  7954 ;;  payload         1    wreg     PTR unsigned char 
  7955 ;;		 -> Wireless_checkDataReceived@data(4), 
  7956 ;;  payloadSize     1   15[BANK0 ] unsigned char 
  7957 ;; Auto vars:     Size  Location     Type
  7958 ;;  payload         1   18[BANK0 ] PTR unsigned char 
  7959 ;;		 -> Wireless_checkDataReceived@data(4), 
  7960 ;; Return value:  Size  Location     Type
  7961 ;;                  1    wreg      void 
  7962 ;; Registers used:
  7963 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7964 ;; Tracked objects:
  7965 ;;		On entry : 0/0
  7966 ;;		On exit  : 0/0
  7967 ;;		Unchanged: 0/0
  7968 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7969 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7970 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7971 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7972 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7973 ;;Total ram usage:        4 bytes
  7974 ;; Hardware stack levels used:    1
  7975 ;; Hardware stack levels required when called:    8
  7976 ;; This function calls:
  7977 ;;		_RF_ReadRegisterData
  7978 ;; This function is called by:
  7979 ;;		_Wireless_checkDataReceived
  7980 ;; This function uses a non-reentrant model
  7981 ;;
  7982                           
  7983                           
  7984                           ;psect for function _RF_RxPayload
  7985  13F0                     _RF_RxPayload:	
  7986                           
  7987                           ;incstack = 0
  7988                           ; Regs used in _RF_RxPayload: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  7989                           ;RF_RxPayload@payload stored from wreg
  7990  13F0  0020               	movlb	0	; select bank0
  7991  13F1  00B2               	movwf	RF_RxPayload@payload
  7992                           
  7993                           ;nrf24.c: 187: do { LATCbits.LATC2 = 0; } while(0);
  7994  13F2  0022               	movlb	2	; select bank2
  7995  13F3  110E               	bcf	14,2	;volatile
  7996                           
  7997                           ;nrf24.c: 188: RF_ReadRegisterData(0x61, payload, payloadSize);
  7998  13F4  0020               	movlb	0	; select bank0
  7999  13F5  0832               	movf	RF_RxPayload@payload,w
  8000  13F6  00B0               	movwf	??_RF_RxPayload
  8001  13F7  0830               	movf	??_RF_RxPayload,w
  8002  13F8  00AA               	movwf	RF_ReadRegisterData@buf
  8003  13F9  082F               	movf	RF_RxPayload@payloadSize,w
  8004  13FA  00B1               	movwf	??_RF_RxPayload+1
  8005  13FB  0831               	movf	??_RF_RxPayload+1,w
  8006  13FC  00AB               	movwf	RF_ReadRegisterData@bufSize
  8007  13FD  3061               	movlw	97
  8008  13FE  3195  25CB         	fcall	_RF_ReadRegisterData
  8009                           
  8010                           ;nrf24.c: 189: do { LATCbits.LATC2 = 1; } while(0);
  8011  1400  0022               	movlb	2	; select bank2
  8012  1401  150E               	bsf	14,2	;volatile
  8013  1402  0008               	return
  8014  1403                     __end_of_RF_RxPayload:	
  8015                           
  8016                           	psect	text18
  8017  15CB                     __ptext18:	
  8018 ;; *************** function _RF_ReadRegisterData *****************
  8019 ;; Defined at:
  8020 ;;		line 99 in file "nrf24.c"
  8021 ;; Parameters:    Size  Location     Type
  8022 ;;  reg             1    wreg     unsigned char 
  8023 ;;  buf             1   10[BANK0 ] PTR unsigned char 
  8024 ;;		 -> Wireless_checkDataReceived@data(4), Wireless_wake@reg(1), Wireless_sleep@reg(1), Wireless_changeTransmitPower@va
      +l(1), 
  8025 ;;  bufSize         1   11[BANK0 ] unsigned char 
  8026 ;; Auto vars:     Size  Location     Type
  8027 ;;  reg             1   14[BANK0 ] unsigned char 
  8028 ;; Return value:  Size  Location     Type
  8029 ;;                  1    wreg      void 
  8030 ;; Registers used:
  8031 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8032 ;; Tracked objects:
  8033 ;;		On entry : 0/0
  8034 ;;		On exit  : 0/0
  8035 ;;		Unchanged: 0/0
  8036 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8037 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8038 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8039 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8040 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8041 ;;Total ram usage:        5 bytes
  8042 ;; Hardware stack levels used:    1
  8043 ;; Hardware stack levels required when called:    7
  8044 ;; This function calls:
  8045 ;;		_SPI_WriteRead
  8046 ;;		_SPI_WriteReadBuffer
  8047 ;; This function is called by:
  8048 ;;		_RF_RxPayload
  8049 ;;		_Wireless_changeTransmitPower
  8050 ;;		_Wireless_sleep
  8051 ;;		_Wireless_wake
  8052 ;; This function uses a non-reentrant model
  8053 ;;
  8054                           
  8055                           
  8056                           ;psect for function _RF_ReadRegisterData
  8057  15CB                     _RF_ReadRegisterData:	
  8058                           
  8059                           ;incstack = 0
  8060                           ; Regs used in _RF_ReadRegisterData: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8061                           ;RF_ReadRegisterData@reg stored from wreg
  8062  15CB  0020               	movlb	0	; select bank0
  8063  15CC  00AE               	movwf	RF_ReadRegisterData@reg
  8064                           
  8065                           ;nrf24.c: 100: do { LATCbits.LATC1 = 0; } while(0);
  8066  15CD  0022               	movlb	2	; select bank2
  8067  15CE  108E               	bcf	14,1	;volatile
  8068                           
  8069                           ;nrf24.c: 101: (void)SPI_WriteRead(0x00|reg);
  8070  15CF  0020               	movlb	0	; select bank0
  8071  15D0  082E               	movf	RF_ReadRegisterData@reg,w
  8072  15D1  3192  22E0  3195   	fcall	_SPI_WriteRead
  8073                           
  8074                           ;nrf24.c: 102: SPI_WriteReadBuffer(buf, buf, bufSize);
  8075  15D4  0020               	movlb	0	; select bank0
  8076  15D5  082A               	movf	RF_ReadRegisterData@buf,w
  8077  15D6  00AC               	movwf	??_RF_ReadRegisterData
  8078  15D7  082C               	movf	??_RF_ReadRegisterData,w
  8079  15D8  00A3               	movwf	SPI_WriteReadBuffer@bufIn
  8080  15D9  082B               	movf	RF_ReadRegisterData@bufSize,w
  8081  15DA  00AD               	movwf	??_RF_ReadRegisterData+1
  8082  15DB  082D               	movf	??_RF_ReadRegisterData+1,w
  8083  15DC  00A4               	movwf	SPI_WriteReadBuffer@bufSize
  8084  15DD  082A               	movf	RF_ReadRegisterData@buf,w
  8085  15DE  3196  2644  3195   	fcall	_SPI_WriteReadBuffer
  8086                           
  8087                           ;nrf24.c: 103: do { LATCbits.LATC1 = 1; } while(0);
  8088  15E1  0022               	movlb	2	; select bank2
  8089  15E2  148E               	bsf	14,1	;volatile
  8090                           
  8091                           ;nrf24.c: 104: _delay((unsigned long)((10)*(8000000/4000000.0)));
  8092  15E3  3006               	movlw	6
  8093  15E4                     u7237:	
  8094  15E4  0B89               	decfsz	9,f
  8095  15E5  2DE4               	goto	u7237
  8096  15E6  3200               	nop2
  8097  15E7  0008               	return
  8098  15E8                     __end_of_RF_ReadRegisterData:	
  8099                           
  8100                           	psect	text19
  8101  1644                     __ptext19:	
  8102 ;; *************** function _SPI_WriteReadBuffer *****************
  8103 ;; Defined at:
  8104 ;;		line 43 in file "nrf24.c"
  8105 ;; Parameters:    Size  Location     Type
  8106 ;;  bufOut          1    wreg     PTR unsigned char 
  8107 ;;		 -> Wireless_checkDataReceived@data(4), Wireless_wake@reg(1), Wireless_sleep@reg(1), Wireless_changeTransmitPower@va
      +l(1), 
  8108 ;;  bufIn           1    3[BANK0 ] PTR unsigned char 
  8109 ;;		 -> Wireless_checkDataReceived@data(4), Wireless_wake@reg(1), Wireless_sleep@reg(1), Wireless_changeTransmitPower@va
      +l(1), 
  8110 ;;  bufSize         1    4[BANK0 ] unsigned char 
  8111 ;; Auto vars:     Size  Location     Type
  8112 ;;  bufOut          1    8[BANK0 ] PTR unsigned char 
  8113 ;;		 -> Wireless_checkDataReceived@data(4), Wireless_wake@reg(1), Wireless_sleep@reg(1), Wireless_changeTransmitPower@va
      +l(1), 
  8114 ;;  i               1    9[BANK0 ] unsigned char 
  8115 ;; Return value:  Size  Location     Type
  8116 ;;                  1    wreg      void 
  8117 ;; Registers used:
  8118 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8119 ;; Tracked objects:
  8120 ;;		On entry : 0/0
  8121 ;;		On exit  : 0/0
  8122 ;;		Unchanged: 0/0
  8123 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8124 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8125 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8126 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8127 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8128 ;;Total ram usage:        7 bytes
  8129 ;; Hardware stack levels used:    1
  8130 ;; Hardware stack levels required when called:    6
  8131 ;; This function calls:
  8132 ;;		_SPI_WriteRead
  8133 ;; This function is called by:
  8134 ;;		_RF_ReadRegisterData
  8135 ;; This function uses a non-reentrant model
  8136 ;;
  8137                           
  8138                           
  8139                           ;psect for function _SPI_WriteReadBuffer
  8140  1644                     _SPI_WriteReadBuffer:	
  8141                           
  8142                           ;incstack = 0
  8143                           ; Regs used in _SPI_WriteReadBuffer: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8144                           ;SPI_WriteReadBuffer@bufOut stored from wreg
  8145  1644  0020               	movlb	0	; select bank0
  8146  1645  00A8               	movwf	SPI_WriteReadBuffer@bufOut
  8147                           
  8148                           ;nrf24.c: 44: uint8_t i;
  8149                           ;nrf24.c: 46: for(i=0;i<bufSize;i++) {
  8150  1646  01A9               	clrf	SPI_WriteReadBuffer@i
  8151  1647                     l5577:	
  8152  1647  0824               	movf	SPI_WriteReadBuffer@bufSize,w
  8153  1648  0229               	subwf	SPI_WriteReadBuffer@i,w
  8154  1649  1803               	btfsc	3,0
  8155  164A  0008               	return
  8156                           
  8157                           ;nrf24.c: 47: bufIn[i] = SPI_WriteRead(bufOut[i]);
  8158  164B  0829               	movf	SPI_WriteReadBuffer@i,w
  8159  164C  0728               	addwf	SPI_WriteReadBuffer@bufOut,w
  8160  164D  00A5               	movwf	??_SPI_WriteReadBuffer
  8161  164E  0825               	movf	??_SPI_WriteReadBuffer,w
  8162  164F  0086               	movwf	6
  8163  1650  0187               	clrf	7
  8164  1651  0801               	movf	1,w
  8165  1652  3192  22E0  3196   	fcall	_SPI_WriteRead
  8166  1655  0020               	movlb	0	; select bank0
  8167  1656  00A6               	movwf	??_SPI_WriteReadBuffer+1
  8168  1657  0829               	movf	SPI_WriteReadBuffer@i,w
  8169  1658  0723               	addwf	SPI_WriteReadBuffer@bufIn,w
  8170  1659  00A7               	movwf	??_SPI_WriteReadBuffer+2
  8171  165A  0827               	movf	??_SPI_WriteReadBuffer+2,w
  8172  165B  0086               	movwf	6
  8173  165C  0187               	clrf	7
  8174  165D  0826               	movf	??_SPI_WriteReadBuffer+1,w
  8175  165E  0081               	movwf	1
  8176  165F  3001               	movlw	1
  8177  1660  00A5               	movwf	??_SPI_WriteReadBuffer
  8178  1661  0825               	movf	??_SPI_WriteReadBuffer,w
  8179  1662  07A9               	addwf	SPI_WriteReadBuffer@i,f
  8180  1663  2E47               	goto	l5577
  8181  1664                     __end_of_SPI_WriteReadBuffer:	
  8182                           
  8183                           	psect	text20
  8184  15AE                     __ptext20:	
  8185 ;; *************** function _RF_DataIsReady *****************
  8186 ;; Defined at:
  8187 ;;		line 202 in file "nrf24.c"
  8188 ;; Parameters:    Size  Location     Type
  8189 ;;  channel         1    wreg     PTR unsigned char 
  8190 ;;		 -> Wireless_checkDataReceived@channel(1), 
  8191 ;; Auto vars:     Size  Location     Type
  8192 ;;  channel         1    7[BANK0 ] PTR unsigned char 
  8193 ;;		 -> Wireless_checkDataReceived@channel(1), 
  8194 ;;  status          1    8[BANK0 ] unsigned char 
  8195 ;; Return value:  Size  Location     Type
  8196 ;;                  1    wreg      unsigned char 
  8197 ;; Registers used:
  8198 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8199 ;; Tracked objects:
  8200 ;;		On entry : 0/0
  8201 ;;		On exit  : 0/0
  8202 ;;		Unchanged: 0/0
  8203 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8204 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8205 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8206 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8207 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8208 ;;Total ram usage:        3 bytes
  8209 ;; Hardware stack levels used:    1
  8210 ;; Hardware stack levels required when called:    7
  8211 ;; This function calls:
  8212 ;;		_RF_ReadRegister
  8213 ;; This function is called by:
  8214 ;;		_Wireless_checkDataReceived
  8215 ;; This function uses a non-reentrant model
  8216 ;;
  8217                           
  8218                           
  8219                           ;psect for function _RF_DataIsReady
  8220  15AE                     _RF_DataIsReady:	
  8221                           
  8222                           ;incstack = 0
  8223                           ; Regs used in _RF_DataIsReady: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8224                           ;RF_DataIsReady@channel stored from wreg
  8225  15AE  0020               	movlb	0	; select bank0
  8226  15AF  00A7               	movwf	RF_DataIsReady@channel
  8227                           
  8228                           ;nrf24.c: 204: char status;
  8229                           ;nrf24.c: 205: status=RF_ReadRegister(0x07);
  8230  15B0  3007               	movlw	7
  8231  15B1  3194  24D1  3195   	fcall	_RF_ReadRegister
  8232  15B4  0020               	movlb	0	; select bank0
  8233  15B5  00A6               	movwf	??_RF_DataIsReady
  8234  15B6  0826               	movf	??_RF_DataIsReady,w
  8235  15B7  00A8               	movwf	RF_DataIsReady@status
  8236                           
  8237                           ;nrf24.c: 206: status&=0x0E;
  8238  15B8  300E               	movlw	14
  8239  15B9  00A6               	movwf	??_RF_DataIsReady
  8240  15BA  0826               	movf	??_RF_DataIsReady,w
  8241  15BB  05A8               	andwf	RF_DataIsReady@status,f
  8242                           
  8243                           ;nrf24.c: 207: if(status==0x0E)
  8244  15BC  300E               	movlw	14
  8245  15BD  0628               	xorwf	RF_DataIsReady@status,w
  8246  15BE  1D03               	btfss	3,2
  8247  15BF  2DC2               	goto	l5827
  8248                           
  8249                           ;nrf24.c: 208: return 0;
  8250  15C0  3000               	movlw	0
  8251  15C1  0008               	return
  8252  15C2                     l5827:	
  8253                           
  8254                           ;nrf24.c: 209: else
  8255                           ;nrf24.c: 210: *channel=status>>1;
  8256  15C2  3628               	lsrf	RF_DataIsReady@status,w
  8257  15C3  00A6               	movwf	??_RF_DataIsReady
  8258  15C4  0827               	movf	RF_DataIsReady@channel,w
  8259  15C5  0086               	movwf	6
  8260  15C6  0187               	clrf	7
  8261  15C7  0826               	movf	??_RF_DataIsReady,w
  8262  15C8  0081               	movwf	1
  8263                           
  8264                           ;nrf24.c: 211: return 1;
  8265  15C9  3001               	movlw	1
  8266  15CA  0008               	return
  8267  15CB                     __end_of_RF_DataIsReady:	
  8268                           
  8269                           	psect	text21
  8270  14D1                     __ptext21:	
  8271 ;; *************** function _RF_ReadRegister *****************
  8272 ;; Defined at:
  8273 ;;		line 82 in file "nrf24.c"
  8274 ;; Parameters:    Size  Location     Type
  8275 ;;  reg             1    wreg     unsigned char 
  8276 ;; Auto vars:     Size  Location     Type
  8277 ;;  reg             1    4[BANK0 ] unsigned char 
  8278 ;;  val             1    5[BANK0 ] unsigned char 
  8279 ;; Return value:  Size  Location     Type
  8280 ;;                  1    wreg      unsigned char 
  8281 ;; Registers used:
  8282 ;;		wreg, status,2, status,0, pclath, cstack
  8283 ;; Tracked objects:
  8284 ;;		On entry : 0/0
  8285 ;;		On exit  : 0/0
  8286 ;;		Unchanged: 0/0
  8287 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8288 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8289 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8290 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8291 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8292 ;;Total ram usage:        3 bytes
  8293 ;; Hardware stack levels used:    1
  8294 ;; Hardware stack levels required when called:    6
  8295 ;; This function calls:
  8296 ;;		_SPI_WriteRead
  8297 ;; This function is called by:
  8298 ;;		_RF_DataIsReady
  8299 ;; This function uses a non-reentrant model
  8300 ;;
  8301                           
  8302                           
  8303                           ;psect for function _RF_ReadRegister
  8304  14D1                     _RF_ReadRegister:	
  8305                           
  8306                           ;incstack = 0
  8307                           ; Regs used in _RF_ReadRegister: [wreg+status,2+status,0+pclath+cstack]
  8308                           ;RF_ReadRegister@reg stored from wreg
  8309  14D1  0020               	movlb	0	; select bank0
  8310  14D2  00A4               	movwf	RF_ReadRegister@reg
  8311                           
  8312                           ;nrf24.c: 83: uint8_t val;
  8313                           ;nrf24.c: 85: do { LATCbits.LATC1 = 0; } while(0);
  8314  14D3  0022               	movlb	2	; select bank2
  8315  14D4  108E               	bcf	14,1	;volatile
  8316                           
  8317                           ;nrf24.c: 86: (void)SPI_WriteRead(reg);
  8318  14D5  0020               	movlb	0	; select bank0
  8319  14D6  0824               	movf	RF_ReadRegister@reg,w
  8320  14D7  3192  22E0  3194   	fcall	_SPI_WriteRead
  8321                           
  8322                           ;nrf24.c: 87: val = SPI_WriteRead(0);
  8323  14DA  3000               	movlw	0
  8324  14DB  3192  22E0  3194   	fcall	_SPI_WriteRead
  8325  14DE  0020               	movlb	0	; select bank0
  8326  14DF  00A3               	movwf	??_RF_ReadRegister
  8327  14E0  0823               	movf	??_RF_ReadRegister,w
  8328  14E1  00A5               	movwf	RF_ReadRegister@val
  8329                           
  8330                           ;nrf24.c: 88: do { LATCbits.LATC1 = 1; } while(0);
  8331  14E2  0022               	movlb	2	; select bank2
  8332  14E3  148E               	bsf	14,1	;volatile
  8333                           
  8334                           ;nrf24.c: 89: _delay((unsigned long)((10)*(8000000/4000000.0)));
  8335  14E4  3006               	movlw	6
  8336  14E5                     u7247:	
  8337  14E5  0B89               	decfsz	9,f
  8338  14E6  2CE5               	goto	u7247
  8339  14E7  3200               	nop2
  8340                           
  8341                           ;nrf24.c: 90: return val;
  8342  14E8  0020               	movlb	0	; select bank0
  8343  14E9  0825               	movf	RF_ReadRegister@val,w
  8344  14EA  0008               	return
  8345  14EB                     __end_of_RF_ReadRegister:	
  8346                           
  8347                           	psect	text22
  8348  1443                     __ptext22:	
  8349 ;; *************** function _DOOR_update *****************
  8350 ;; Defined at:
  8351 ;;		line 16 in file "doorlogic.c"
  8352 ;; Parameters:    Size  Location     Type
  8353 ;;  openAngle       1    wreg     unsigned char 
  8354 ;;  closedAngle     1    7[BANK0 ] unsigned char 
  8355 ;; Auto vars:     Size  Location     Type
  8356 ;;  openAngle       1    9[BANK0 ] unsigned char 
  8357 ;; Return value:  Size  Location     Type
  8358 ;;                  1    wreg      void 
  8359 ;; Registers used:
  8360 ;;		wreg, status,2, status,0, pclath, cstack
  8361 ;; Tracked objects:
  8362 ;;		On entry : 0/0
  8363 ;;		On exit  : 0/0
  8364 ;;		Unchanged: 0/0
  8365 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8366 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8367 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8368 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8369 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8370 ;;Total ram usage:        3 bytes
  8371 ;; Hardware stack levels used:    1
  8372 ;; Hardware stack levels required when called:    6
  8373 ;; This function calls:
  8374 ;;		_Storage_save
  8375 ;; This function is called by:
  8376 ;;		_Wireless_checkDataReceived
  8377 ;; This function uses a non-reentrant model
  8378 ;;
  8379                           
  8380                           
  8381                           ;psect for function _DOOR_update
  8382  1443                     _DOOR_update:	
  8383                           
  8384                           ;incstack = 0
  8385                           ; Regs used in _DOOR_update: [wreg+status,2+status,0+pclath+cstack]
  8386                           ;DOOR_update@openAngle stored from wreg
  8387  1443  0020               	movlb	0	; select bank0
  8388  1444  00A9               	movwf	DOOR_update@openAngle
  8389                           
  8390                           ;doorlogic.c: 18: doorOpenAngle=openAngle;
  8391  1445  0829               	movf	DOOR_update@openAngle,w
  8392  1446  00A8               	movwf	??_DOOR_update
  8393  1447  0828               	movf	??_DOOR_update,w
  8394  1448  0021               	movlb	1	; select bank1
  8395  1449  00DE               	movwf	_doorOpenAngle^(0+128)
  8396                           
  8397                           ;doorlogic.c: 19: doorClosedAngle=closedAngle;
  8398  144A  0020               	movlb	0	; select bank0
  8399  144B  0827               	movf	DOOR_update@closedAngle,w
  8400  144C  00A8               	movwf	??_DOOR_update
  8401  144D  0828               	movf	??_DOOR_update,w
  8402  144E  0021               	movlb	1	; select bank1
  8403  144F  00DD               	movwf	_doorClosedAngle^(0+128)
  8404                           
  8405                           ;doorlogic.c: 20: Storage_save(openAngle,closedAngle);
  8406  1450  0020               	movlb	0	; select bank0
  8407  1451  0827               	movf	DOOR_update@closedAngle,w
  8408  1452  00A8               	movwf	??_DOOR_update
  8409  1453  0828               	movf	??_DOOR_update,w
  8410  1454  00A4               	movwf	Storage_save@closeAngle
  8411  1455  0829               	movf	DOOR_update@openAngle,w
  8412  1456  3194  24B7         	fcall	_Storage_save
  8413  1458  0008               	return
  8414  1459                     __end_of_DOOR_update:	
  8415                           
  8416                           	psect	text23
  8417  14B7                     __ptext23:	
  8418 ;; *************** function _Storage_save *****************
  8419 ;; Defined at:
  8420 ;;		line 30 in file "storage.c"
  8421 ;; Parameters:    Size  Location     Type
  8422 ;;  openAngle       1    wreg     unsigned char 
  8423 ;;  closeAngle      1    4[BANK0 ] unsigned char 
  8424 ;; Auto vars:     Size  Location     Type
  8425 ;;  openAngle       1    6[BANK0 ] unsigned char 
  8426 ;; Return value:  Size  Location     Type
  8427 ;;                  1    wreg      void 
  8428 ;; Registers used:
  8429 ;;		wreg, status,2, status,0, pclath, cstack
  8430 ;; Tracked objects:
  8431 ;;		On entry : 0/0
  8432 ;;		On exit  : 0/0
  8433 ;;		Unchanged: 0/0
  8434 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8435 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8436 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8437 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8438 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8439 ;;Total ram usage:        3 bytes
  8440 ;; Hardware stack levels used:    1
  8441 ;; Hardware stack levels required when called:    5
  8442 ;; This function calls:
  8443 ;;		_DATAEE_WriteByte
  8444 ;; This function is called by:
  8445 ;;		_DOOR_update
  8446 ;; This function uses a non-reentrant model
  8447 ;;
  8448                           
  8449                           
  8450                           ;psect for function _Storage_save
  8451  14B7                     _Storage_save:	
  8452                           
  8453                           ;incstack = 0
  8454                           ; Regs used in _Storage_save: [wreg+status,2+status,0+pclath+cstack]
  8455                           ;Storage_save@openAngle stored from wreg
  8456  14B7  0020               	movlb	0	; select bank0
  8457  14B8  00A6               	movwf	Storage_save@openAngle
  8458                           
  8459                           ;storage.c: 32: DATAEE_WriteByte(1, openAngle);
  8460  14B9  0826               	movf	Storage_save@openAngle,w
  8461  14BA  00A5               	movwf	??_Storage_save
  8462  14BB  0825               	movf	??_Storage_save,w
  8463  14BC  00A1               	movwf	DATAEE_WriteByte@bData
  8464  14BD  3001               	movlw	1
  8465  14BE  3196  26A9  3194   	fcall	_DATAEE_WriteByte
  8466                           
  8467                           ;storage.c: 33: DATAEE_WriteByte(2, closeAngle);
  8468  14C1  0020               	movlb	0	; select bank0
  8469  14C2  0824               	movf	Storage_save@closeAngle,w
  8470  14C3  00A5               	movwf	??_Storage_save
  8471  14C4  0825               	movf	??_Storage_save,w
  8472  14C5  00A1               	movwf	DATAEE_WriteByte@bData
  8473  14C6  3002               	movlw	2
  8474  14C7  3196  26A9  3194   	fcall	_DATAEE_WriteByte
  8475                           
  8476                           ;storage.c: 34: DATAEE_WriteByte(0 , 1);
  8477  14CA  0020               	movlb	0	; select bank0
  8478  14CB  01A1               	clrf	DATAEE_WriteByte@bData
  8479  14CC  0AA1               	incf	DATAEE_WriteByte@bData,f
  8480  14CD  3000               	movlw	0
  8481  14CE  3196  26A9         	fcall	_DATAEE_WriteByte
  8482  14D0  0008               	return
  8483  14D1                     __end_of_Storage_save:	
  8484                           
  8485                           	psect	text24
  8486  16A9                     __ptext24:	
  8487 ;; *************** function _DATAEE_WriteByte *****************
  8488 ;; Defined at:
  8489 ;;		line 186 in file "mcc_generated_files/memory.c"
  8490 ;; Parameters:    Size  Location     Type
  8491 ;;  bAdd            1    wreg     unsigned char 
  8492 ;;  bData           1    1[BANK0 ] unsigned char 
  8493 ;; Auto vars:     Size  Location     Type
  8494 ;;  bAdd            1    2[BANK0 ] unsigned char 
  8495 ;;  GIEBitValue     1    3[BANK0 ] unsigned char 
  8496 ;; Return value:  Size  Location     Type
  8497 ;;                  1    wreg      void 
  8498 ;; Registers used:
  8499 ;;		wreg, status,2, status,0
  8500 ;; Tracked objects:
  8501 ;;		On entry : 0/0
  8502 ;;		On exit  : 0/0
  8503 ;;		Unchanged: 0/0
  8504 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8505 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8506 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8507 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8508 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8509 ;;Total ram usage:        3 bytes
  8510 ;; Hardware stack levels used:    1
  8511 ;; Hardware stack levels required when called:    4
  8512 ;; This function calls:
  8513 ;;		Nothing
  8514 ;; This function is called by:
  8515 ;;		_Storage_save
  8516 ;;		_Storage_load
  8517 ;; This function uses a non-reentrant model
  8518 ;;
  8519                           
  8520                           
  8521                           ;psect for function _DATAEE_WriteByte
  8522  16A9                     _DATAEE_WriteByte:	
  8523                           
  8524                           ;incstack = 0
  8525                           ; Regs used in _DATAEE_WriteByte: [wreg+status,2+status,0]
  8526                           ;DATAEE_WriteByte@bAdd stored from wreg
  8527  16A9  0020               	movlb	0	; select bank0
  8528  16AA  00A2               	movwf	DATAEE_WriteByte@bAdd
  8529                           
  8530                           ;memory.c: 188: uint8_t GIEBitValue = 0;
  8531  16AB  01A3               	clrf	DATAEE_WriteByte@GIEBitValue
  8532                           
  8533                           ;memory.c: 190: EEADRL = (uint8_t)(bAdd & 0x0ff);
  8534  16AC  0822               	movf	DATAEE_WriteByte@bAdd,w
  8535  16AD  0023               	movlb	3	; select bank3
  8536  16AE  0091               	movwf	17	;volatile
  8537                           
  8538                           ;memory.c: 191: EEDATL = bData;
  8539  16AF  0020               	movlb	0	; select bank0
  8540  16B0  0821               	movf	DATAEE_WriteByte@bData,w
  8541  16B1  0023               	movlb	3	; select bank3
  8542  16B2  0093               	movwf	19	;volatile
  8543                           
  8544                           ;memory.c: 192: EECON1bits.EEPGD = 0;
  8545  16B3  1395               	bcf	21,7	;volsfr
  8546                           
  8547                           ;memory.c: 193: EECON1bits.CFGS = 0;
  8548  16B4  1315               	bcf	21,6	;volsfr
  8549                           
  8550                           ;memory.c: 194: EECON1bits.WREN = 1;
  8551  16B5  1515               	bsf	21,2	;volsfr
  8552                           
  8553                           ;memory.c: 196: GIEBitValue = INTCONbits.GIE;
  8554  16B6  3000               	movlw	0
  8555  16B7  1B8B               	btfsc	11,7	;volatile
  8556  16B8  3001               	movlw	1
  8557  16B9  0020               	movlb	0	; select bank0
  8558  16BA  00A3               	movwf	DATAEE_WriteByte@GIEBitValue
  8559                           
  8560                           ;memory.c: 197: INTCONbits.GIE = 0;
  8561  16BB  138B               	bcf	11,7	;volatile
  8562                           
  8563                           ;memory.c: 198: EECON2 = 0x55;
  8564  16BC  3055               	movlw	85
  8565  16BD  0023               	movlb	3	; select bank3
  8566  16BE  0096               	movwf	22	;volsfr
  8567                           
  8568                           ;memory.c: 199: EECON2 = 0xAA;
  8569  16BF  30AA               	movlw	170
  8570  16C0  0096               	movwf	22	;volsfr
  8571                           
  8572                           ;memory.c: 200: EECON1bits.WR = 1;
  8573  16C1  1495               	bsf	21,1	;volsfr
  8574  16C2                     l498:	
  8575                           ;memory.c: 203: {
  8576                           
  8577                           ;memory.c: 202: while (EECON1bits.WR)
  8578                           
  8579  16C2  1895               	btfsc	21,1	;volsfr
  8580  16C3  2EC2               	goto	l498
  8581                           
  8582                           ;memory.c: 204: }
  8583                           ;memory.c: 206: EECON1bits.WREN = 0;
  8584  16C4  1115               	bcf	21,2	;volsfr
  8585                           
  8586                           ;memory.c: 207: INTCONbits.GIE = GIEBitValue;
  8587  16C5  0020               	movlb	0	; select bank0
  8588  16C6  0C23               	rrf	DATAEE_WriteByte@GIEBitValue,w
  8589  16C7  1C03               	skipc
  8590  16C8  138B               	bcf	11,7	;volatile
  8591  16C9  1803               	skipnc
  8592  16CA  178B               	bsf	11,7	;volatile
  8593  16CB  0008               	return
  8594  16CC                     __end_of_DATAEE_WriteByte:	
  8595                           
  8596                           	psect	text25
  8597  12B4                     __ptext25:	
  8598 ;; *************** function _DOOR_resetPos *****************
  8599 ;; Defined at:
  8600 ;;		line 94 in file "doorlogic.c"
  8601 ;; Parameters:    Size  Location     Type
  8602 ;;		None
  8603 ;; Auto vars:     Size  Location     Type
  8604 ;;		None
  8605 ;; Return value:  Size  Location     Type
  8606 ;;                  1    wreg      enum E3332
  8607 ;; Registers used:
  8608 ;;		status,2
  8609 ;; Tracked objects:
  8610 ;;		On entry : 0/0
  8611 ;;		On exit  : 0/0
  8612 ;;		Unchanged: 0/0
  8613 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8614 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8615 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8616 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8617 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8618 ;;Total ram usage:        0 bytes
  8619 ;; Hardware stack levels used:    1
  8620 ;; Hardware stack levels required when called:    4
  8621 ;; This function calls:
  8622 ;;		Nothing
  8623 ;; This function is called by:
  8624 ;;		_Wireless_checkDataReceived
  8625 ;; This function uses a non-reentrant model
  8626 ;;
  8627                           
  8628                           
  8629                           ;psect for function _DOOR_resetPos
  8630  12B4                     _DOOR_resetPos:	
  8631                           
  8632                           ;doorlogic.c: 96: initialised=0;
  8633                           
  8634                           ;incstack = 0
  8635                           ; Regs used in _DOOR_resetPos: [status,2]
  8636  12B4  0021               	movlb	1	; select bank1
  8637  12B5  01D8               	clrf	_initialised^(0+128)
  8638  12B6  0008               	return
  8639  12B7                     __end_of_DOOR_resetPos:	
  8640                           ;doorlogic.c: 97: return(DOOR_CLOSED);
  8641                           ;	Return value of _DOOR_resetPos is never used
  8642                           
  8643                           
  8644                           	psect	text26
  8645  0879                     __ptext26:	
  8646 ;; *************** function _Sensor_getSupplyVoltage *****************
  8647 ;; Defined at:
  8648 ;;		line 6 in file "sensors.c"
  8649 ;; Parameters:    Size  Location     Type
  8650 ;;		None
  8651 ;; Auto vars:     Size  Location     Type
  8652 ;;  voltage         3   36[BANK0 ] float 
  8653 ;;  res             2   39[BANK0 ] unsigned short 
  8654 ;; Return value:  Size  Location     Type
  8655 ;;                  3   33[BANK0 ] float 
  8656 ;; Registers used:
  8657 ;;		wreg, status,2, status,0, pclath, cstack
  8658 ;; Tracked objects:
  8659 ;;		On entry : 0/0
  8660 ;;		On exit  : 0/0
  8661 ;;		Unchanged: 0/0
  8662 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8663 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8664 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8665 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8666 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8667 ;;Total ram usage:        8 bytes
  8668 ;; Hardware stack levels used:    1
  8669 ;; Hardware stack levels required when called:    6
  8670 ;; This function calls:
  8671 ;;		_ADC_GetConversionResult
  8672 ;;		_ADC_IsConversionDone
  8673 ;;		_ADC_SelectChannel
  8674 ;;		_ADC_StartConversion
  8675 ;;		_FVR_IsOutputReady
  8676 ;;		_Sensor_peripheralSleep
  8677 ;;		_Sensor_peripheralWake
  8678 ;;		___ftdiv
  8679 ;;		___lwtoft
  8680 ;; This function is called by:
  8681 ;;		_Wireless_packageData
  8682 ;; This function uses a non-reentrant model
  8683 ;;
  8684                           
  8685                           
  8686                           ;psect for function _Sensor_getSupplyVoltage
  8687  0879                     _Sensor_getSupplyVoltage:	
  8688                           
  8689                           ;sensors.c: 8: u16 res;
  8690                           ;sensors.c: 9: float voltage;
  8691                           ;sensors.c: 11: Sensor_peripheralWake();
  8692                           
  8693                           ;incstack = 0
  8694                           ; Regs used in _Sensor_getSupplyVoltage: [wreg+status,2+status,0+pclath+cstack]
  8695  0879  3192  22D0  3188   	fcall	_Sensor_peripheralWake
  8696  087C                     l6031:	
  8697                           ;sensors.c: 12: while(!FVR_IsOutputReady());
  8698                           
  8699  087C  3192  22E6  3188   	fcall	_FVR_IsOutputReady
  8700  087F  3A00               	xorlw	0
  8701  0880  1903               	skipnz
  8702  0881  287C               	goto	l6031
  8703                           
  8704                           ;sensors.c: 13: ADC_SelectChannel(channel_FVR);
  8705  0882  301F               	movlw	31
  8706  0883  3193  238A  3188   	fcall	_ADC_SelectChannel
  8707                           
  8708                           ;sensors.c: 14: ADC_StartConversion();
  8709  0886  3192  22B1  3188   	fcall	_ADC_StartConversion
  8710  0889                     l6037:	
  8711                           ;sensors.c: 15: while(!ADC_IsConversionDone());
  8712                           
  8713  0889  3193  2300  3188   	fcall	_ADC_IsConversionDone
  8714  088C  3A00               	xorlw	0
  8715  088D  1903               	skipnz
  8716  088E  2889               	goto	l6037
  8717                           
  8718                           ;sensors.c: 16: Sensor_peripheralSleep();
  8719  088F  3192  22CB  3188   	fcall	_Sensor_peripheralSleep
  8720                           
  8721                           ;sensors.c: 17: res=ADC_GetConversionResult();
  8722  0892  3193  2343  3188   	fcall	_ADC_GetConversionResult
  8723  0895  0020               	movlb	0	; select bank0
  8724  0896  0822               	movf	?_ADC_GetConversionResult+1,w
  8725  0897  00C8               	movwf	Sensor_getSupplyVoltage@res+1
  8726  0898  0821               	movf	?_ADC_GetConversionResult,w
  8727  0899  00C7               	movwf	Sensor_getSupplyVoltage@res
  8728                           
  8729                           ;sensors.c: 19: voltage= (float) 1.024 * 1024/(float)res;
  8730  089A  0848               	movf	Sensor_getSupplyVoltage@res+1,w
  8731  089B  00AA               	movwf	___lwtoft@c+1
  8732  089C  0847               	movf	Sensor_getSupplyVoltage@res,w
  8733  089D  00A9               	movwf	___lwtoft@c
  8734  089E  3194  2403  3188   	fcall	___lwtoft
  8735  08A1  0020               	movlb	0	; select bank0
  8736  08A2  0829               	movf	?___lwtoft,w
  8737  08A3  00B1               	movwf	___ftdiv@f2
  8738  08A4  082A               	movf	?___lwtoft+1,w
  8739  08A5  00B2               	movwf	___ftdiv@f2+1
  8740  08A6  082B               	movf	?___lwtoft+2,w
  8741  08A7  00B3               	movwf	___ftdiv@f2+2
  8742  08A8  3012               	movlw	18
  8743  08A9  00B4               	movwf	___ftdiv@f1
  8744  08AA  3083               	movlw	131
  8745  08AB  00B5               	movwf	___ftdiv@f1+1
  8746  08AC  3044               	movlw	68
  8747  08AD  00B6               	movwf	___ftdiv@f1+2
  8748  08AE  318D  25C7         	fcall	___ftdiv
  8749  08B0  0020               	movlb	0	; select bank0
  8750  08B1  0831               	movf	?___ftdiv,w
  8751  08B2  00C4               	movwf	Sensor_getSupplyVoltage@voltage
  8752  08B3  0832               	movf	?___ftdiv+1,w
  8753  08B4  00C5               	movwf	Sensor_getSupplyVoltage@voltage+1
  8754  08B5  0833               	movf	?___ftdiv+2,w
  8755  08B6  00C6               	movwf	Sensor_getSupplyVoltage@voltage+2
  8756                           
  8757                           ;sensors.c: 20: return(voltage);
  8758  08B7  0844               	movf	Sensor_getSupplyVoltage@voltage,w
  8759  08B8  00C1               	movwf	?_Sensor_getSupplyVoltage
  8760  08B9  0845               	movf	Sensor_getSupplyVoltage@voltage+1,w
  8761  08BA  00C2               	movwf	?_Sensor_getSupplyVoltage+1
  8762  08BB  0846               	movf	Sensor_getSupplyVoltage@voltage+2,w
  8763  08BC  00C3               	movwf	?_Sensor_getSupplyVoltage+2
  8764  08BD  0008               	return
  8765  08BE                     __end_of_Sensor_getSupplyVoltage:	
  8766                           
  8767                           	psect	text27
  8768  12D0                     __ptext27:	
  8769 ;; *************** function _Sensor_peripheralWake *****************
  8770 ;; Defined at:
  8771 ;;		line 32 in file "sensors.c"
  8772 ;; Parameters:    Size  Location     Type
  8773 ;;		None
  8774 ;; Auto vars:     Size  Location     Type
  8775 ;;		None
  8776 ;; Return value:  Size  Location     Type
  8777 ;;                  1    wreg      void 
  8778 ;; Registers used:
  8779 ;;		None
  8780 ;; Tracked objects:
  8781 ;;		On entry : 0/0
  8782 ;;		On exit  : 0/0
  8783 ;;		Unchanged: 0/0
  8784 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8785 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8786 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8787 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8788 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8789 ;;Total ram usage:        0 bytes
  8790 ;; Hardware stack levels used:    1
  8791 ;; Hardware stack levels required when called:    4
  8792 ;; This function calls:
  8793 ;;		Nothing
  8794 ;; This function is called by:
  8795 ;;		_Sensor_getSupplyVoltage
  8796 ;; This function uses a non-reentrant model
  8797 ;;
  8798                           
  8799                           
  8800                           ;psect for function _Sensor_peripheralWake
  8801  12D0                     _Sensor_peripheralWake:	
  8802                           
  8803                           ;sensors.c: 34: ADCON0bits.ADON=1;
  8804                           
  8805                           ;incstack = 0
  8806                           ; Regs used in _Sensor_peripheralWake: []
  8807  12D0  0021               	movlb	1	; select bank1
  8808  12D1  141D               	bsf	29,0	;volatile
  8809                           
  8810                           ;sensors.c: 35: FVRCONbits.FVREN=1;
  8811  12D2  0022               	movlb	2	; select bank2
  8812  12D3  1797               	bsf	23,7	;volatile
  8813  12D4  0008               	return
  8814  12D5                     __end_of_Sensor_peripheralWake:	
  8815                           
  8816                           	psect	text28
  8817  12CB                     __ptext28:	
  8818 ;; *************** function _Sensor_peripheralSleep *****************
  8819 ;; Defined at:
  8820 ;;		line 26 in file "sensors.c"
  8821 ;; Parameters:    Size  Location     Type
  8822 ;;		None
  8823 ;; Auto vars:     Size  Location     Type
  8824 ;;		None
  8825 ;; Return value:  Size  Location     Type
  8826 ;;                  1    wreg      void 
  8827 ;; Registers used:
  8828 ;;		None
  8829 ;; Tracked objects:
  8830 ;;		On entry : 0/0
  8831 ;;		On exit  : 0/0
  8832 ;;		Unchanged: 0/0
  8833 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8834 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8835 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8836 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8837 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8838 ;;Total ram usage:        0 bytes
  8839 ;; Hardware stack levels used:    1
  8840 ;; Hardware stack levels required when called:    4
  8841 ;; This function calls:
  8842 ;;		Nothing
  8843 ;; This function is called by:
  8844 ;;		_Sensor_getSupplyVoltage
  8845 ;;		_main
  8846 ;; This function uses a non-reentrant model
  8847 ;;
  8848                           
  8849                           
  8850                           ;psect for function _Sensor_peripheralSleep
  8851  12CB                     _Sensor_peripheralSleep:	
  8852                           
  8853                           ;sensors.c: 28: ADCON0bits.ADON=0;
  8854                           
  8855                           ;incstack = 0
  8856                           ; Regs used in _Sensor_peripheralSleep: []
  8857  12CB  0021               	movlb	1	; select bank1
  8858  12CC  101D               	bcf	29,0	;volatile
  8859                           
  8860                           ;sensors.c: 29: FVRCONbits.FVREN=0;
  8861  12CD  0022               	movlb	2	; select bank2
  8862  12CE  1397               	bcf	23,7	;volatile
  8863  12CF  0008               	return
  8864  12D0                     __end_of_Sensor_peripheralSleep:	
  8865                           
  8866                           	psect	text29
  8867  12E6                     __ptext29:	
  8868 ;; *************** function _FVR_IsOutputReady *****************
  8869 ;; Defined at:
  8870 ;;		line 63 in file "mcc_generated_files/fvr.c"
  8871 ;; Parameters:    Size  Location     Type
  8872 ;;		None
  8873 ;; Auto vars:     Size  Location     Type
  8874 ;;		None
  8875 ;; Return value:  Size  Location     Type
  8876 ;;                  1    wreg      unsigned char 
  8877 ;; Registers used:
  8878 ;;		wreg, status,2, status,0
  8879 ;; Tracked objects:
  8880 ;;		On entry : 0/0
  8881 ;;		On exit  : 0/0
  8882 ;;		Unchanged: 0/0
  8883 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8884 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8885 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8886 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8887 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8888 ;;Total ram usage:        0 bytes
  8889 ;; Hardware stack levels used:    1
  8890 ;; Hardware stack levels required when called:    4
  8891 ;; This function calls:
  8892 ;;		Nothing
  8893 ;; This function is called by:
  8894 ;;		_Sensor_getSupplyVoltage
  8895 ;; This function uses a non-reentrant model
  8896 ;;
  8897                           
  8898                           
  8899                           ;psect for function _FVR_IsOutputReady
  8900  12E6                     _FVR_IsOutputReady:	
  8901                           
  8902                           ;fvr.c: 65: return (FVRCONbits.FVRRDY);
  8903                           
  8904                           ;incstack = 0
  8905                           ; Regs used in _FVR_IsOutputReady: [wreg+status,2+status,0]
  8906  12E6  0022               	movlb	2	; select bank2
  8907  12E7  0E17               	swapf	23,w	;volatile
  8908  12E8  0C89               	rrf	9,f
  8909  12E9  0C89               	rrf	9,f
  8910  12EA  3901               	andlw	1
  8911  12EB  0008               	return
  8912  12EC                     __end_of_FVR_IsOutputReady:	
  8913                           
  8914                           	psect	text30
  8915  12B1                     __ptext30:	
  8916 ;; *************** function _ADC_StartConversion *****************
  8917 ;; Defined at:
  8918 ;;		line 88 in file "mcc_generated_files/adc.c"
  8919 ;; Parameters:    Size  Location     Type
  8920 ;;		None
  8921 ;; Auto vars:     Size  Location     Type
  8922 ;;		None
  8923 ;; Return value:  Size  Location     Type
  8924 ;;                  1    wreg      void 
  8925 ;; Registers used:
  8926 ;;		None
  8927 ;; Tracked objects:
  8928 ;;		On entry : 0/0
  8929 ;;		On exit  : 0/0
  8930 ;;		Unchanged: 0/0
  8931 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8932 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8933 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8934 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8935 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8936 ;;Total ram usage:        0 bytes
  8937 ;; Hardware stack levels used:    1
  8938 ;; Hardware stack levels required when called:    4
  8939 ;; This function calls:
  8940 ;;		Nothing
  8941 ;; This function is called by:
  8942 ;;		_Sensor_getSupplyVoltage
  8943 ;; This function uses a non-reentrant model
  8944 ;;
  8945                           
  8946                           
  8947                           ;psect for function _ADC_StartConversion
  8948  12B1                     _ADC_StartConversion:	
  8949                           
  8950                           ;adc.c: 91: ADCON0bits.GO_nDONE = 1;
  8951                           
  8952                           ;incstack = 0
  8953                           ; Regs used in _ADC_StartConversion: []
  8954  12B1  0021               	movlb	1	; select bank1
  8955  12B2  149D               	bsf	29,1	;volatile
  8956  12B3  0008               	return
  8957  12B4                     __end_of_ADC_StartConversion:	
  8958                           
  8959                           	psect	text31
  8960  138A                     __ptext31:	
  8961 ;; *************** function _ADC_SelectChannel *****************
  8962 ;; Defined at:
  8963 ;;		line 80 in file "mcc_generated_files/adc.c"
  8964 ;; Parameters:    Size  Location     Type
  8965 ;;  channel         1    wreg     enum E2996
  8966 ;; Auto vars:     Size  Location     Type
  8967 ;;  channel         1    2[BANK0 ] enum E2996
  8968 ;; Return value:  Size  Location     Type
  8969 ;;                  1    wreg      void 
  8970 ;; Registers used:
  8971 ;;		wreg, status,2, status,0
  8972 ;; Tracked objects:
  8973 ;;		On entry : 0/0
  8974 ;;		On exit  : 0/0
  8975 ;;		Unchanged: 0/0
  8976 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8977 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8978 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8979 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8980 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8981 ;;Total ram usage:        2 bytes
  8982 ;; Hardware stack levels used:    1
  8983 ;; Hardware stack levels required when called:    4
  8984 ;; This function calls:
  8985 ;;		Nothing
  8986 ;; This function is called by:
  8987 ;;		_Sensor_getSupplyVoltage
  8988 ;; This function uses a non-reentrant model
  8989 ;;
  8990                           
  8991                           
  8992                           ;psect for function _ADC_SelectChannel
  8993  138A                     _ADC_SelectChannel:	
  8994                           
  8995                           ;incstack = 0
  8996                           ; Regs used in _ADC_SelectChannel: [wreg+status,2+status,0]
  8997                           ;ADC_SelectChannel@channel stored from wreg
  8998  138A  0020               	movlb	0	; select bank0
  8999  138B  00A2               	movwf	ADC_SelectChannel@channel
  9000                           
  9001                           ;adc.c: 83: ADCON0bits.CHS = channel;
  9002  138C  0822               	movf	ADC_SelectChannel@channel,w
  9003  138D  00A1               	movwf	??_ADC_SelectChannel
  9004  138E  0DA1               	rlf	??_ADC_SelectChannel,f
  9005  138F  0DA1               	rlf	??_ADC_SelectChannel,f
  9006  1390  0021               	movlb	1	; select bank1
  9007  1391  081D               	movf	29,w	;volatile
  9008  1392  0020               	movlb	0	; select bank0
  9009  1393  0621               	xorwf	??_ADC_SelectChannel,w
  9010  1394  3983               	andlw	-125
  9011  1395  0621               	xorwf	??_ADC_SelectChannel,w
  9012  1396  0021               	movlb	1	; select bank1
  9013  1397  009D               	movwf	29	;volatile
  9014                           
  9015                           ;adc.c: 85: ADCON0bits.ADON = 1;
  9016  1398  141D               	bsf	29,0	;volatile
  9017  1399  0008               	return
  9018  139A                     __end_of_ADC_SelectChannel:	
  9019                           
  9020                           	psect	text32
  9021  1300                     __ptext32:	
  9022 ;; *************** function _ADC_IsConversionDone *****************
  9023 ;; Defined at:
  9024 ;;		line 95 in file "mcc_generated_files/adc.c"
  9025 ;; Parameters:    Size  Location     Type
  9026 ;;		None
  9027 ;; Auto vars:     Size  Location     Type
  9028 ;;		None
  9029 ;; Return value:  Size  Location     Type
  9030 ;;                  1    wreg      unsigned char 
  9031 ;; Registers used:
  9032 ;;		wreg, status,0
  9033 ;; Tracked objects:
  9034 ;;		On entry : 0/0
  9035 ;;		On exit  : 0/0
  9036 ;;		Unchanged: 0/0
  9037 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9038 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9039 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9040 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9041 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9042 ;;Total ram usage:        0 bytes
  9043 ;; Hardware stack levels used:    1
  9044 ;; Hardware stack levels required when called:    4
  9045 ;; This function calls:
  9046 ;;		Nothing
  9047 ;; This function is called by:
  9048 ;;		_Sensor_getSupplyVoltage
  9049 ;; This function uses a non-reentrant model
  9050 ;;
  9051                           
  9052                           
  9053                           ;psect for function _ADC_IsConversionDone
  9054  1300                     _ADC_IsConversionDone:	
  9055                           
  9056                           ;adc.c: 98: return ((bool)(!ADCON0bits.GO_nDONE));
  9057                           
  9058                           ;incstack = 0
  9059                           ; Regs used in _ADC_IsConversionDone: [wreg+status,0]
  9060  1300  1003               	clrc
  9061  1301  0021               	movlb	1	; select bank1
  9062  1302  1C9D               	btfss	29,1	;volatile
  9063  1303  1403               	setc
  9064  1304  3000               	movlw	0
  9065  1305  3D09               	addwfc	9,w
  9066  1306  0008               	return
  9067  1307                     __end_of_ADC_IsConversionDone:	
  9068                           
  9069                           	psect	text33
  9070  1343                     __ptext33:	
  9071 ;; *************** function _ADC_GetConversionResult *****************
  9072 ;; Defined at:
  9073 ;;		line 101 in file "mcc_generated_files/adc.c"
  9074 ;; Parameters:    Size  Location     Type
  9075 ;;		None
  9076 ;; Auto vars:     Size  Location     Type
  9077 ;;		None
  9078 ;; Return value:  Size  Location     Type
  9079 ;;                  2    1[BANK0 ] unsigned int 
  9080 ;; Registers used:
  9081 ;;		wreg
  9082 ;; Tracked objects:
  9083 ;;		On entry : 0/0
  9084 ;;		On exit  : 0/0
  9085 ;;		Unchanged: 0/0
  9086 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9087 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9088 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9089 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9090 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9091 ;;Total ram usage:        2 bytes
  9092 ;; Hardware stack levels used:    1
  9093 ;; Hardware stack levels required when called:    4
  9094 ;; This function calls:
  9095 ;;		Nothing
  9096 ;; This function is called by:
  9097 ;;		_Sensor_getSupplyVoltage
  9098 ;; This function uses a non-reentrant model
  9099 ;;
  9100                           
  9101                           
  9102                           ;psect for function _ADC_GetConversionResult
  9103  1343                     _ADC_GetConversionResult:	
  9104                           
  9105                           ;adc.c: 104: return ((adc_result_t)((ADRESH << 8) + ADRESL));
  9106                           
  9107                           ;incstack = 0
  9108                           ; Regs used in _ADC_GetConversionResult: [wreg]
  9109  1343  0021               	movlb	1	; select bank1
  9110  1344  081C               	movf	28,w	;volatile
  9111  1345  0020               	movlb	0	; select bank0
  9112  1346  00A2               	movwf	?_ADC_GetConversionResult+1
  9113  1347  0021               	movlb	1	; select bank1
  9114  1348  081B               	movf	27,w	;volatile
  9115  1349  0020               	movlb	0	; select bank0
  9116  134A  00A1               	movwf	?_ADC_GetConversionResult
  9117  134B  0008               	return
  9118  134C                     __end_of_ADC_GetConversionResult:	
  9119                           
  9120                           	psect	text34
  9121  13DE                     __ptext34:	
  9122 ;; *************** function _Diag_getSensorHealth *****************
  9123 ;; Defined at:
  9124 ;;		line 35 in file "diagnostics.c"
  9125 ;; Parameters:    Size  Location     Type
  9126 ;;		None
  9127 ;; Auto vars:     Size  Location     Type
  9128 ;;  var             1    2[BANK0 ] unsigned char 
  9129 ;; Return value:  Size  Location     Type
  9130 ;;                  1    wreg      unsigned char 
  9131 ;; Registers used:
  9132 ;;		wreg, status,2, status,0
  9133 ;; Tracked objects:
  9134 ;;		On entry : 0/0
  9135 ;;		On exit  : 0/0
  9136 ;;		Unchanged: 0/0
  9137 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9138 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9139 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9140 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9141 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9142 ;;Total ram usage:        2 bytes
  9143 ;; Hardware stack levels used:    1
  9144 ;; Hardware stack levels required when called:    4
  9145 ;; This function calls:
  9146 ;;		Nothing
  9147 ;; This function is called by:
  9148 ;;		_Wireless_packageData
  9149 ;; This function uses a non-reentrant model
  9150 ;;
  9151                           
  9152                           
  9153                           ;psect for function _Diag_getSensorHealth
  9154  13DE                     _Diag_getSensorHealth:	
  9155                           
  9156                           ;diagnostics.c: 38: char var=0;
  9157                           
  9158                           ;incstack = 0
  9159                           ; Regs used in _Diag_getSensorHealth: [wreg+status,2+status,0]
  9160  13DE  0020               	movlb	0	; select bank0
  9161  13DF  01A2               	clrf	Diag_getSensorHealth@var
  9162                           
  9163                           ;diagnostics.c: 40: var|=sensorHealth.compassHealth;
  9164  13E0  0021               	movlb	1	; select bank1
  9165  13E1  0864               	movf	(_sensorHealth^(0+128)+1),w
  9166  13E2  0020               	movlb	0	; select bank0
  9167  13E3  00A1               	movwf	??_Diag_getSensorHealth
  9168  13E4  0821               	movf	??_Diag_getSensorHealth,w
  9169  13E5  04A2               	iorwf	Diag_getSensorHealth@var,f
  9170                           
  9171                           ;diagnostics.c: 41: var<<=1;
  9172  13E6  1003               	clrc
  9173  13E7  0DA2               	rlf	Diag_getSensorHealth@var,f
  9174                           
  9175                           ;diagnostics.c: 42: var|=sensorHealth.tempSensorHealth;
  9176  13E8  0021               	movlb	1	; select bank1
  9177  13E9  0863               	movf	_sensorHealth^(0+128),w
  9178  13EA  0020               	movlb	0	; select bank0
  9179  13EB  00A1               	movwf	??_Diag_getSensorHealth
  9180  13EC  0821               	movf	??_Diag_getSensorHealth,w
  9181  13ED  04A2               	iorwf	Diag_getSensorHealth@var,f
  9182                           
  9183                           ;diagnostics.c: 44: return var;
  9184  13EE  0822               	movf	Diag_getSensorHealth@var,w
  9185  13EF  0008               	return
  9186  13F0                     __end_of_Diag_getSensorHealth:	
  9187                           
  9188                           	psect	text35
  9189  0C08                     __ptext35:	
  9190 ;; *************** function _Wireless_init *****************
  9191 ;; Defined at:
  9192 ;;		line 18 in file "wireless.c"
  9193 ;; Parameters:    Size  Location     Type
  9194 ;;		None
  9195 ;; Auto vars:     Size  Location     Type
  9196 ;;		None
  9197 ;; Return value:  Size  Location     Type
  9198 ;;                  1    wreg      void 
  9199 ;; Registers used:
  9200 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  9201 ;; Tracked objects:
  9202 ;;		On entry : 0/0
  9203 ;;		On exit  : 0/0
  9204 ;;		Unchanged: 0/0
  9205 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9206 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9207 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9208 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9209 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9210 ;;Total ram usage:        2 bytes
  9211 ;; Hardware stack levels used:    1
  9212 ;; Hardware stack levels required when called:    8
  9213 ;; This function calls:
  9214 ;;		_RF_Init
  9215 ;;		_RF_ResetStatusIRQ
  9216 ;;		_RF_WriteRegister
  9217 ;;		_RF_WriteRegisterData
  9218 ;; This function is called by:
  9219 ;;		_main
  9220 ;; This function uses a non-reentrant model
  9221 ;;
  9222                           
  9223                           
  9224                           ;psect for function _Wireless_init
  9225  0C08                     _Wireless_init:	
  9226                           
  9227                           ;wireless.c: 28: static const uint8_t TADDR[5] = "20001";
  9228                           ;wireless.c: 32: _delay((unsigned long)((100)*(8000000/4000.0)));
  9229                           
  9230                           ;incstack = 0
  9231                           ; Regs used in _Wireless_init: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  9232  0C08  3002               	movlw	2
  9233  0C09  0020               	movlb	0	; select bank0
  9234  0C0A  00AF               	movwf	??_Wireless_init+1
  9235  0C0B  3004               	movlw	4
  9236  0C0C  00AE               	movwf	??_Wireless_init
  9237  0C0D  30BA               	movlw	186
  9238  0C0E                     u7257:	
  9239  0C0E  0B89               	decfsz	9,f
  9240  0C0F  2C0E               	goto	u7257
  9241  0C10  0BAE               	decfsz	??_Wireless_init,f
  9242  0C11  2C0E               	goto	u7257
  9243  0C12  0BAF               	decfsz	??_Wireless_init+1,f
  9244  0C13  2C0E               	goto	u7257
  9245  0C14  0000               	nop
  9246                           
  9247                           ;wireless.c: 34: RF_Init();
  9248  0C15  3192  22BF  318C   	fcall	_RF_Init
  9249                           
  9250                           ;wireless.c: 36: RF_WriteRegister(0x06, 0x06|0x20);
  9251  0C18  3026               	movlw	38
  9252  0C19  0020               	movlb	0	; select bank0
  9253  0C1A  00AE               	movwf	??_Wireless_init
  9254  0C1B  082E               	movf	??_Wireless_init,w
  9255  0C1C  00A3               	movwf	RF_WriteRegister@val
  9256  0C1D  3006               	movlw	6
  9257  0C1E  3194  242D  318C   	fcall	_RF_WriteRegister
  9258                           
  9259                           ;wireless.c: 37: RF_WriteRegister(0x11, 6);
  9260  0C21  3006               	movlw	6
  9261  0C22  0020               	movlb	0	; select bank0
  9262  0C23  00AE               	movwf	??_Wireless_init
  9263  0C24  082E               	movf	??_Wireless_init,w
  9264  0C25  00A3               	movwf	RF_WriteRegister@val
  9265  0C26  3011               	movlw	17
  9266  0C27  3194  242D  318C   	fcall	_RF_WriteRegister
  9267                           
  9268                           ;wireless.c: 38: RF_WriteRegister(0x05, 2);
  9269  0C2A  3002               	movlw	2
  9270  0C2B  0020               	movlb	0	; select bank0
  9271  0C2C  00AE               	movwf	??_Wireless_init
  9272  0C2D  082E               	movf	??_Wireless_init,w
  9273  0C2E  00A3               	movwf	RF_WriteRegister@val
  9274  0C2F  3005               	movlw	5
  9275  0C30  3194  242D  318C   	fcall	_RF_WriteRegister
  9276                           
  9277                           ;wireless.c: 41: RF_WriteRegisterData(0x0A, (uint8_t*)TADDR, sizeof(TADDR));
  9278  0C33  3021               	movlw	low (Wireless_init@TADDR| (0+32768))
  9279  0C34  0020               	movlb	0	; select bank0
  9280  0C35  00A9               	movwf	RF_WriteRegisterData@buf
  9281  0C36  3098               	movlw	high (Wireless_init@TADDR| (0+32768))
  9282  0C37  00AA               	movwf	RF_WriteRegisterData@buf+1
  9283  0C38  3005               	movlw	5
  9284  0C39  00AE               	movwf	??_Wireless_init
  9285  0C3A  082E               	movf	??_Wireless_init,w
  9286  0C3B  00AB               	movwf	RF_WriteRegisterData@bufSize
  9287  0C3C  300A               	movlw	10
  9288  0C3D  3195  2591  318C   	fcall	_RF_WriteRegisterData
  9289                           
  9290                           ;wireless.c: 42: RF_WriteRegisterData(0x10, (uint8_t*)TADDR, sizeof(TADDR));
  9291  0C40  3021               	movlw	low (Wireless_init@TADDR| (0+32768))
  9292  0C41  0020               	movlb	0	; select bank0
  9293  0C42  00A9               	movwf	RF_WriteRegisterData@buf
  9294  0C43  3098               	movlw	high (Wireless_init@TADDR| (0+32768))
  9295  0C44  00AA               	movwf	RF_WriteRegisterData@buf+1
  9296  0C45  3005               	movlw	5
  9297  0C46  00AE               	movwf	??_Wireless_init
  9298  0C47  082E               	movf	??_Wireless_init,w
  9299  0C48  00AB               	movwf	RF_WriteRegisterData@bufSize
  9300  0C49  3010               	movlw	16
  9301  0C4A  3195  2591  318C   	fcall	_RF_WriteRegisterData
  9302                           
  9303                           ;wireless.c: 45: RF_WriteRegister(0x02, 0x01);
  9304  0C4D  0020               	movlb	0	; select bank0
  9305  0C4E  01A3               	clrf	RF_WriteRegister@val
  9306  0C4F  0AA3               	incf	RF_WriteRegister@val,f
  9307  0C50  3002               	movlw	2
  9308  0C51  3194  242D  318C   	fcall	_RF_WriteRegister
  9309                           
  9310                           ;wireless.c: 48: RF_ResetStatusIRQ(0x40|0x20|0x10);
  9311  0C54  3070               	movlw	112
  9312  0C55  3196  2624  318C   	fcall	_RF_ResetStatusIRQ
  9313                           
  9314                           ;wireless.c: 50: RF_WriteRegister(0x01, 0x01);
  9315  0C58  0020               	movlb	0	; select bank0
  9316  0C59  01A3               	clrf	RF_WriteRegister@val
  9317  0C5A  0AA3               	incf	RF_WriteRegister@val,f
  9318  0C5B  3001               	movlw	1
  9319  0C5C  3194  242D  318C   	fcall	_RF_WriteRegister
  9320                           
  9321                           ;wireless.c: 51: RF_WriteRegister(0x04, 0xF0|0x01);
  9322  0C5F  30F1               	movlw	241
  9323  0C60  0020               	movlb	0	; select bank0
  9324  0C61  00AE               	movwf	??_Wireless_init
  9325  0C62  082E               	movf	??_Wireless_init,w
  9326  0C63  00A3               	movwf	RF_WriteRegister@val
  9327  0C64  3004               	movlw	4
  9328  0C65  3194  242D  318C   	fcall	_RF_WriteRegister
  9329                           
  9330                           ;wireless.c: 52: RF_WriteRegister(0x00, (1<<3)|(1<<2)|(1<<1)|(0));
  9331  0C68  300E               	movlw	14
  9332  0C69  0020               	movlb	0	; select bank0
  9333  0C6A  00AE               	movwf	??_Wireless_init
  9334  0C6B  082E               	movf	??_Wireless_init,w
  9335  0C6C  00A3               	movwf	RF_WriteRegister@val
  9336  0C6D  3000               	movlw	0
  9337  0C6E  3194  242D  318C   	fcall	_RF_WriteRegister
  9338                           
  9339                           ;wireless.c: 53: RF_WriteRegister(0x1D, (1<<2) | (1<<1));
  9340  0C71  3006               	movlw	6
  9341  0C72  0020               	movlb	0	; select bank0
  9342  0C73  00AE               	movwf	??_Wireless_init
  9343  0C74  082E               	movf	??_Wireless_init,w
  9344  0C75  00A3               	movwf	RF_WriteRegister@val
  9345  0C76  301D               	movlw	29
  9346  0C77  3194  242D  318C   	fcall	_RF_WriteRegister
  9347                           
  9348                           ;wireless.c: 54: RF_WriteRegister(0x1C, (1<<0));
  9349  0C7A  0020               	movlb	0	; select bank0
  9350  0C7B  01A3               	clrf	RF_WriteRegister@val
  9351  0C7C  0AA3               	incf	RF_WriteRegister@val,f
  9352  0C7D  301C               	movlw	28
  9353  0C7E  3194  242D         	fcall	_RF_WriteRegister
  9354                           
  9355                           ;wireless.c: 55: do { LATCbits.LATC2 = 0; } while(0);
  9356  0C80  0022               	movlb	2	; select bank2
  9357  0C81  110E               	bcf	14,2	;volatile
  9358  0C82  0008               	return
  9359  0C83                     __end_of_Wireless_init:	
  9360                           
  9361                           	psect	text36
  9362  1591                     __ptext36:	
  9363 ;; *************** function _RF_WriteRegisterData *****************
  9364 ;; Defined at:
  9365 ;;		line 113 in file "nrf24.c"
  9366 ;; Parameters:    Size  Location     Type
  9367 ;;  reg             1    wreg     unsigned char 
  9368 ;;  buf             2    9[BANK0 ] PTR unsigned char 
  9369 ;;		 -> Wireless_packageData@data(6), Wireless_determineTransmitPower@testPayload(1), Wireless_init@TADDR(5), 
  9370 ;;  bufSize         1   11[BANK0 ] unsigned char 
  9371 ;; Auto vars:     Size  Location     Type
  9372 ;;  reg             1   13[BANK0 ] unsigned char 
  9373 ;; Return value:  Size  Location     Type
  9374 ;;                  1    wreg      void 
  9375 ;; Registers used:
  9376 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  9377 ;; Tracked objects:
  9378 ;;		On entry : 0/0
  9379 ;;		On exit  : 0/0
  9380 ;;		Unchanged: 0/0
  9381 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9382 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9383 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9384 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9385 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9386 ;;Total ram usage:        5 bytes
  9387 ;; Hardware stack levels used:    1
  9388 ;; Hardware stack levels required when called:    7
  9389 ;; This function calls:
  9390 ;;		_SPI_WriteBuffer
  9391 ;;		_SPI_WriteRead
  9392 ;; This function is called by:
  9393 ;;		_RF_TxPayload
  9394 ;;		_Wireless_init
  9395 ;;		_RF_openWritingPipe
  9396 ;;		_RF_openReadingPipe
  9397 ;; This function uses a non-reentrant model
  9398 ;;
  9399                           
  9400                           
  9401                           ;psect for function _RF_WriteRegisterData
  9402  1591                     _RF_WriteRegisterData:	
  9403                           
  9404                           ;incstack = 0
  9405                           ; Regs used in _RF_WriteRegisterData: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  9406                           ;RF_WriteRegisterData@reg stored from wreg
  9407  1591  0020               	movlb	0	; select bank0
  9408  1592  00AD               	movwf	RF_WriteRegisterData@reg
  9409                           
  9410                           ;nrf24.c: 114: do { LATCbits.LATC1 = 0; } while(0);
  9411  1593  0022               	movlb	2	; select bank2
  9412  1594  108E               	bcf	14,1	;volatile
  9413                           
  9414                           ;nrf24.c: 115: (void)SPI_WriteRead(0x20|reg);
  9415  1595  0020               	movlb	0	; select bank0
  9416  1596  082D               	movf	RF_WriteRegisterData@reg,w
  9417  1597  3820               	iorlw	32
  9418  1598  3192  22E0  3195   	fcall	_SPI_WriteRead
  9419                           
  9420                           ;nrf24.c: 116: SPI_WriteBuffer(buf, bufSize);
  9421  159B  0020               	movlb	0	; select bank0
  9422  159C  082A               	movf	RF_WriteRegisterData@buf+1,w
  9423  159D  00A4               	movwf	SPI_WriteBuffer@bufOut+1
  9424  159E  0829               	movf	RF_WriteRegisterData@buf,w
  9425  159F  00A3               	movwf	SPI_WriteBuffer@bufOut
  9426  15A0  082B               	movf	RF_WriteRegisterData@bufSize,w
  9427  15A1  00AC               	movwf	??_RF_WriteRegisterData
  9428  15A2  082C               	movf	??_RF_WriteRegisterData,w
  9429  15A3  00A5               	movwf	SPI_WriteBuffer@bufSize
  9430  15A4  3195  2521  3195   	fcall	_SPI_WriteBuffer
  9431                           
  9432                           ;nrf24.c: 117: do { LATCbits.LATC1 = 1; } while(0);
  9433  15A7  0022               	movlb	2	; select bank2
  9434  15A8  148E               	bsf	14,1	;volatile
  9435                           
  9436                           ;nrf24.c: 118: _delay((unsigned long)((10)*(8000000/4000000.0)));
  9437  15A9  3006               	movlw	6
  9438  15AA                     u7267:	
  9439  15AA  0B89               	decfsz	9,f
  9440  15AB  2DAA               	goto	u7267
  9441  15AC  3200               	nop2
  9442  15AD  0008               	return
  9443  15AE                     __end_of_RF_WriteRegisterData:	
  9444                           
  9445                           	psect	text37
  9446  1521                     __ptext37:	
  9447 ;; *************** function _SPI_WriteBuffer *****************
  9448 ;; Defined at:
  9449 ;;		line 56 in file "nrf24.c"
  9450 ;; Parameters:    Size  Location     Type
  9451 ;;  bufOut          2    3[BANK0 ] PTR unsigned char 
  9452 ;;		 -> Wireless_packageData@data(6), Wireless_determineTransmitPower@testPayload(1), Wireless_init@TADDR(5), 
  9453 ;;  bufSize         1    5[BANK0 ] unsigned char 
  9454 ;; Auto vars:     Size  Location     Type
  9455 ;;  i               1    8[BANK0 ] unsigned char 
  9456 ;; Return value:  Size  Location     Type
  9457 ;;                  1    wreg      void 
  9458 ;; Registers used:
  9459 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  9460 ;; Tracked objects:
  9461 ;;		On entry : 0/0
  9462 ;;		On exit  : 0/0
  9463 ;;		Unchanged: 0/0
  9464 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9465 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9466 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9467 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9468 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9469 ;;Total ram usage:        6 bytes
  9470 ;; Hardware stack levels used:    1
  9471 ;; Hardware stack levels required when called:    6
  9472 ;; This function calls:
  9473 ;;		_SPI_WriteRead
  9474 ;; This function is called by:
  9475 ;;		_RF_WriteRegisterData
  9476 ;; This function uses a non-reentrant model
  9477 ;;
  9478                           
  9479                           
  9480                           ;psect for function _SPI_WriteBuffer
  9481  1521                     _SPI_WriteBuffer:	
  9482                           
  9483                           ;nrf24.c: 57: uint8_t i;
  9484                           ;nrf24.c: 59: for(i=0;i<bufSize;i++) {
  9485                           
  9486                           ;incstack = 0
  9487                           ; Regs used in _SPI_WriteBuffer: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  9488  1521  0020               	movlb	0	; select bank0
  9489  1522  01A8               	clrf	SPI_WriteBuffer@i
  9490  1523                     l5537:	
  9491  1523  0825               	movf	SPI_WriteBuffer@bufSize,w
  9492  1524  0228               	subwf	SPI_WriteBuffer@i,w
  9493  1525  1803               	btfsc	3,0
  9494  1526  0008               	return
  9495                           
  9496                           ;nrf24.c: 60: (void)SPI_WriteRead(bufOut[i]);
  9497  1527  0824               	movf	SPI_WriteBuffer@bufOut+1,w
  9498  1528  00A7               	movwf	??_SPI_WriteBuffer+1
  9499  1529  0823               	movf	SPI_WriteBuffer@bufOut,w
  9500  152A  00A6               	movwf	??_SPI_WriteBuffer
  9501  152B  0828               	movf	SPI_WriteBuffer@i,w
  9502  152C  0726               	addwf	??_SPI_WriteBuffer,w
  9503  152D  0084               	movwf	4
  9504  152E  0827               	movf	??_SPI_WriteBuffer+1,w
  9505  152F  1803               	skipnc
  9506  1530  0A27               	incf	??_SPI_WriteBuffer+1,w
  9507  1531  0085               	movwf	5
  9508  1532  0800               	movf	0,w	;code access
  9509  1533  3192  22E0  3195   	fcall	_SPI_WriteRead
  9510  1536  3001               	movlw	1
  9511  1537  0020               	movlb	0	; select bank0
  9512  1538  00A6               	movwf	??_SPI_WriteBuffer
  9513  1539  0826               	movf	??_SPI_WriteBuffer,w
  9514  153A  07A8               	addwf	SPI_WriteBuffer@i,f
  9515  153B  2D23               	goto	l5537
  9516  153C                     __end_of_SPI_WriteBuffer:	
  9517                           
  9518                           	psect	text38
  9519  1624                     __ptext38:	
  9520 ;; *************** function _RF_ResetStatusIRQ *****************
  9521 ;; Defined at:
  9522 ;;		line 158 in file "nrf24.c"
  9523 ;; Parameters:    Size  Location     Type
  9524 ;;  flags           1    wreg     unsigned char 
  9525 ;; Auto vars:     Size  Location     Type
  9526 ;;  flags           1    6[BANK0 ] unsigned char 
  9527 ;; Return value:  Size  Location     Type
  9528 ;;                  1    wreg      void 
  9529 ;; Registers used:
  9530 ;;		wreg, status,2, status,0, pclath, cstack
  9531 ;; Tracked objects:
  9532 ;;		On entry : 0/0
  9533 ;;		On exit  : 0/0
  9534 ;;		Unchanged: 0/0
  9535 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9536 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9537 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9538 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9539 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9540 ;;Total ram usage:        2 bytes
  9541 ;; Hardware stack levels used:    1
  9542 ;; Hardware stack levels required when called:    7
  9543 ;; This function calls:
  9544 ;;		_RF_WriteRegister
  9545 ;; This function is called by:
  9546 ;;		_Wireless_init
  9547 ;;		_Wireless_sendData
  9548 ;; This function uses a non-reentrant model
  9549 ;;
  9550                           
  9551                           
  9552                           ;psect for function _RF_ResetStatusIRQ
  9553  1624                     _RF_ResetStatusIRQ:	
  9554                           
  9555                           ;incstack = 0
  9556                           ; Regs used in _RF_ResetStatusIRQ: [wreg+status,2+status,0+pclath+cstack]
  9557                           ;RF_ResetStatusIRQ@flags stored from wreg
  9558  1624  0020               	movlb	0	; select bank0
  9559  1625  00A6               	movwf	RF_ResetStatusIRQ@flags
  9560                           
  9561                           ;nrf24.c: 159: _delay((unsigned long)((10)*(8000000/4000000.0)));
  9562  1626  3006               	movlw	6
  9563  1627                     u7277:	
  9564  1627  0B89               	decfsz	9,f
  9565  1628  2E27               	goto	u7277
  9566  1629  3200               	nop2
  9567                           
  9568                           ;nrf24.c: 160: do { LATCbits.LATC1 = 0; } while(0);
  9569  162A  0022               	movlb	2	; select bank2
  9570  162B  108E               	bcf	14,1	;volatile
  9571                           
  9572                           ;nrf24.c: 161: _delay((unsigned long)((10)*(8000000/4000000.0)));
  9573  162C  3006               	movlw	6
  9574  162D                     u7287:	
  9575  162D  0B89               	decfsz	9,f
  9576  162E  2E2D               	goto	u7287
  9577  162F  3200               	nop2
  9578                           
  9579                           ;nrf24.c: 162: RF_WriteRegister(0x07, flags);
  9580  1630  0020               	movlb	0	; select bank0
  9581  1631  0826               	movf	RF_ResetStatusIRQ@flags,w
  9582  1632  00A5               	movwf	??_RF_ResetStatusIRQ
  9583  1633  0825               	movf	??_RF_ResetStatusIRQ,w
  9584  1634  00A3               	movwf	RF_WriteRegister@val
  9585  1635  3007               	movlw	7
  9586  1636  3194  242D  3196   	fcall	_RF_WriteRegister
  9587                           
  9588                           ;nrf24.c: 163: _delay((unsigned long)((10)*(8000000/4000000.0)));
  9589  1639  3006               	movlw	6
  9590  163A                     u7297:	
  9591  163A  0B89               	decfsz	9,f
  9592  163B  2E3A               	goto	u7297
  9593  163C  3200               	nop2
  9594                           
  9595                           ;nrf24.c: 164: do { LATCbits.LATC1 = 1; } while(0);
  9596  163D  0022               	movlb	2	; select bank2
  9597  163E  148E               	bsf	14,1	;volatile
  9598                           
  9599                           ;nrf24.c: 165: _delay((unsigned long)((10)*(8000000/4000000.0)));
  9600  163F  3006               	movlw	6
  9601  1640                     u7307:	
  9602  1640  0B89               	decfsz	9,f
  9603  1641  2E40               	goto	u7307
  9604  1642  3200               	nop2
  9605  1643  0008               	return
  9606  1644                     __end_of_RF_ResetStatusIRQ:	
  9607                           
  9608                           	psect	text39
  9609  142D                     __ptext39:	
  9610 ;; *************** function _RF_WriteRegister *****************
  9611 ;; Defined at:
  9612 ;;		line 69 in file "nrf24.c"
  9613 ;; Parameters:    Size  Location     Type
  9614 ;;  reg             1    wreg     unsigned char 
  9615 ;;  val             1    3[BANK0 ] unsigned char 
  9616 ;; Auto vars:     Size  Location     Type
  9617 ;;  reg             1    4[BANK0 ] unsigned char 
  9618 ;; Return value:  Size  Location     Type
  9619 ;;                  1    wreg      void 
  9620 ;; Registers used:
  9621 ;;		wreg, status,2, status,0, pclath, cstack
  9622 ;; Tracked objects:
  9623 ;;		On entry : 0/0
  9624 ;;		On exit  : 0/0
  9625 ;;		Unchanged: 0/0
  9626 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9627 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9628 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9629 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9630 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9631 ;;Total ram usage:        2 bytes
  9632 ;; Hardware stack levels used:    1
  9633 ;; Hardware stack levels required when called:    6
  9634 ;; This function calls:
  9635 ;;		_SPI_WriteRead
  9636 ;; This function is called by:
  9637 ;;		_RF_ResetStatusIRQ
  9638 ;;		_Wireless_init
  9639 ;;		_Wireless_changeTransmitPower
  9640 ;;		_Wireless_sleep
  9641 ;;		_Wireless_wake
  9642 ;; This function uses a non-reentrant model
  9643 ;;
  9644                           
  9645                           
  9646                           ;psect for function _RF_WriteRegister
  9647  142D                     _RF_WriteRegister:	
  9648                           
  9649                           ;incstack = 0
  9650                           ; Regs used in _RF_WriteRegister: [wreg+status,2+status,0+pclath+cstack]
  9651                           ;RF_WriteRegister@reg stored from wreg
  9652  142D  0020               	movlb	0	; select bank0
  9653  142E  00A4               	movwf	RF_WriteRegister@reg
  9654                           
  9655                           ;nrf24.c: 70: do { LATCbits.LATC1 = 0; } while(0);
  9656  142F  0022               	movlb	2	; select bank2
  9657  1430  108E               	bcf	14,1	;volatile
  9658                           
  9659                           ;nrf24.c: 71: (void)SPI_WriteRead(0x20|reg);
  9660  1431  0020               	movlb	0	; select bank0
  9661  1432  0824               	movf	RF_WriteRegister@reg,w
  9662  1433  3820               	iorlw	32
  9663  1434  3192  22E0  3194   	fcall	_SPI_WriteRead
  9664                           
  9665                           ;nrf24.c: 72: (void)SPI_WriteRead(val);
  9666  1437  0020               	movlb	0	; select bank0
  9667  1438  0823               	movf	RF_WriteRegister@val,w
  9668  1439  3192  22E0  3194   	fcall	_SPI_WriteRead
  9669                           
  9670                           ;nrf24.c: 73: do { LATCbits.LATC1 = 1; } while(0);
  9671  143C  0022               	movlb	2	; select bank2
  9672  143D  148E               	bsf	14,1	;volatile
  9673                           
  9674                           ;nrf24.c: 74: _delay((unsigned long)((10)*(8000000/4000000.0)));
  9675  143E  3006               	movlw	6
  9676  143F                     u7317:	
  9677  143F  0B89               	decfsz	9,f
  9678  1440  2C3F               	goto	u7317
  9679  1441  3200               	nop2
  9680  1442  0008               	return
  9681  1443                     __end_of_RF_WriteRegister:	
  9682                           
  9683                           	psect	text40
  9684  12E0                     __ptext40:	
  9685 ;; *************** function _SPI_WriteRead *****************
  9686 ;; Defined at:
  9687 ;;		line 26 in file "nrf24.c"
  9688 ;; Parameters:    Size  Location     Type
  9689 ;;  val             1    wreg     unsigned char 
  9690 ;; Auto vars:     Size  Location     Type
  9691 ;;  val             1    2[BANK0 ] unsigned char 
  9692 ;; Return value:  Size  Location     Type
  9693 ;;                  1    wreg      unsigned char 
  9694 ;; Registers used:
  9695 ;;		wreg, pclath, cstack
  9696 ;; Tracked objects:
  9697 ;;		On entry : 0/0
  9698 ;;		On exit  : 0/0
  9699 ;;		Unchanged: 0/0
  9700 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9701 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9702 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9703 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9704 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9705 ;;Total ram usage:        1 bytes
  9706 ;; Hardware stack levels used:    1
  9707 ;; Hardware stack levels required when called:    5
  9708 ;; This function calls:
  9709 ;;		_SPI1_Exchange8bit
  9710 ;; This function is called by:
  9711 ;;		_SPI_WriteReadBuffer
  9712 ;;		_SPI_WriteBuffer
  9713 ;;		_RF_WriteRegister
  9714 ;;		_RF_ReadRegister
  9715 ;;		_RF_ReadRegisterData
  9716 ;;		_RF_WriteRegisterData
  9717 ;;		_RF_WriteRead
  9718 ;;		_RF_Write
  9719 ;; This function uses a non-reentrant model
  9720 ;;
  9721                           
  9722                           
  9723                           ;psect for function _SPI_WriteRead
  9724  12E0                     _SPI_WriteRead:	
  9725                           
  9726                           ;incstack = 0
  9727                           ; Regs used in _SPI_WriteRead: [wreg+pclath+cstack]
  9728                           ;SPI_WriteRead@val stored from wreg
  9729  12E0  0020               	movlb	0	; select bank0
  9730  12E1  00A2               	movwf	SPI_WriteRead@val
  9731                           
  9732                           ;nrf24.c: 34: return SPI1_Exchange8bit(val);
  9733  12E2  0822               	movf	SPI_WriteRead@val,w
  9734  12E3  3193  2356         	fcall	_SPI1_Exchange8bit
  9735  12E5  0008               	return
  9736  12E6                     __end_of_SPI_WriteRead:	
  9737                           
  9738                           	psect	text41
  9739  1356                     __ptext41:	
  9740 ;; *************** function _SPI1_Exchange8bit *****************
  9741 ;; Defined at:
  9742 ;;		line 77 in file "mcc_generated_files/spi1.c"
  9743 ;; Parameters:    Size  Location     Type
  9744 ;;  data            1    wreg     unsigned char 
  9745 ;; Auto vars:     Size  Location     Type
  9746 ;;  data            1    1[BANK0 ] unsigned char 
  9747 ;; Return value:  Size  Location     Type
  9748 ;;                  1    wreg      unsigned char 
  9749 ;; Registers used:
  9750 ;;		wreg
  9751 ;; Tracked objects:
  9752 ;;		On entry : 0/0
  9753 ;;		On exit  : 0/0
  9754 ;;		Unchanged: 0/0
  9755 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9756 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9757 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9758 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9759 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9760 ;;Total ram usage:        1 bytes
  9761 ;; Hardware stack levels used:    1
  9762 ;; Hardware stack levels required when called:    4
  9763 ;; This function calls:
  9764 ;;		Nothing
  9765 ;; This function is called by:
  9766 ;;		_SPI_WriteRead
  9767 ;;		_SPI1_Exchange8bitBuffer
  9768 ;; This function uses a non-reentrant model
  9769 ;;
  9770                           
  9771                           
  9772                           ;psect for function _SPI1_Exchange8bit
  9773  1356                     _SPI1_Exchange8bit:	
  9774                           
  9775                           ;incstack = 0
  9776                           ; Regs used in _SPI1_Exchange8bit: [wreg]
  9777                           ;SPI1_Exchange8bit@data stored from wreg
  9778  1356  0020               	movlb	0	; select bank0
  9779  1357  00A1               	movwf	SPI1_Exchange8bit@data
  9780                           
  9781                           ;spi1.c: 80: SSP1CON1bits.WCOL = 0;
  9782  1358  0024               	movlb	4	; select bank4
  9783  1359  1395               	bcf	21,7	;volatile
  9784                           
  9785                           ;spi1.c: 82: SSP1BUF = data;
  9786  135A  0020               	movlb	0	; select bank0
  9787  135B  0821               	movf	SPI1_Exchange8bit@data,w
  9788  135C  0024               	movlb	4	; select bank4
  9789  135D  0091               	movwf	17	;volatile
  9790  135E                     l522:	
  9791                           ;spi1.c: 85: {
  9792                           
  9793                           ;spi1.c: 84: while(SSP1STATbits.BF == 0x0)
  9794                           
  9795  135E  1C14               	btfss	20,0	;volatile
  9796  135F  2B5E               	goto	l522
  9797                           
  9798                           ;spi1.c: 86: }
  9799                           ;spi1.c: 88: return (SSP1BUF);
  9800  1360  0811               	movf	17,w	;volatile
  9801  1361  0008               	return
  9802  1362                     __end_of_SPI1_Exchange8bit:	
  9803                           
  9804                           	psect	text42
  9805  12BF                     __ptext42:	
  9806 ;; *************** function _RF_Init *****************
  9807 ;; Defined at:
  9808 ;;		line 195 in file "nrf24.c"
  9809 ;; Parameters:    Size  Location     Type
  9810 ;;		None
  9811 ;; Auto vars:     Size  Location     Type
  9812 ;;		None
  9813 ;; Return value:  Size  Location     Type
  9814 ;;                  1    wreg      void 
  9815 ;; Registers used:
  9816 ;;		None
  9817 ;; Tracked objects:
  9818 ;;		On entry : 0/0
  9819 ;;		On exit  : 0/0
  9820 ;;		Unchanged: 0/0
  9821 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9822 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9823 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9824 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9825 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9826 ;;Total ram usage:        0 bytes
  9827 ;; Hardware stack levels used:    1
  9828 ;; Hardware stack levels required when called:    4
  9829 ;; This function calls:
  9830 ;;		Nothing
  9831 ;; This function is called by:
  9832 ;;		_Wireless_init
  9833 ;; This function uses a non-reentrant model
  9834 ;;
  9835                           
  9836                           
  9837                           ;psect for function _RF_Init
  9838  12BF                     _RF_Init:	
  9839                           
  9840                           ;incstack = 0
  9841                           ; Regs used in _RF_Init: []
  9842                           ;nrf24.c: 196: do { LATCbits.LATC2 = 0; } while(0);
  9843  12BF  0022               	movlb	2	; select bank2
  9844  12C0  110E               	bcf	14,2	;volatile
  9845                           
  9846                           ;nrf24.c: 197: do { LATCbits.LATC1 = 1; } while(0);
  9847  12C1  148E               	bsf	14,1	;volatile
  9848  12C2  0008               	return
  9849  12C3                     __end_of_RF_Init:	
  9850                           
  9851                           	psect	text43
  9852  0A57                     __ptext43:	
  9853 ;; *************** function _Timeout_updateCurrentTime *****************
  9854 ;; Defined at:
  9855 ;;		line 13 in file "timeout.c"
  9856 ;; Parameters:    Size  Location     Type
  9857 ;;		None
  9858 ;; Auto vars:     Size  Location     Type
  9859 ;;  var             4   17[BANK0 ] unsigned long 
  9860 ;; Return value:  Size  Location     Type
  9861 ;;                  1    wreg      void 
  9862 ;; Registers used:
  9863 ;;		wreg, status,2, status,0, pclath, cstack
  9864 ;; Tracked objects:
  9865 ;;		On entry : 0/0
  9866 ;;		On exit  : 0/0
  9867 ;;		Unchanged: 0/0
  9868 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9869 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9870 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9871 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9872 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9873 ;;Total ram usage:        8 bytes
  9874 ;; Hardware stack levels used:    1
  9875 ;; Hardware stack levels required when called:    5
  9876 ;; This function calls:
  9877 ;;		_TMR1_ReadTimer
  9878 ;;		___lmul
  9879 ;; This function is called by:
  9880 ;;		_main
  9881 ;; This function uses a non-reentrant model
  9882 ;;
  9883                           
  9884                           
  9885                           ;psect for function _Timeout_updateCurrentTime
  9886  0A57                     _Timeout_updateCurrentTime:	
  9887                           
  9888                           ;timeout.c: 15: unsigned long var = 10;
  9889                           
  9890                           ;incstack = 0
  9891                           ; Regs used in _Timeout_updateCurrentTime: [wreg+status,2+status,0+pclath+cstack]
  9892  0A57  3000               	movlw	0
  9893  0A58  0020               	movlb	0	; select bank0
  9894  0A59  00B4               	movwf	Timeout_updateCurrentTime@var+3
  9895  0A5A  3000               	movlw	0
  9896  0A5B  00B3               	movwf	Timeout_updateCurrentTime@var+2
  9897  0A5C  3000               	movlw	0
  9898  0A5D  00B2               	movwf	Timeout_updateCurrentTime@var+1
  9899  0A5E  300A               	movlw	10
  9900  0A5F  00B1               	movwf	Timeout_updateCurrentTime@var
  9901                           
  9902                           ;timeout.c: 16: var = TMR1_ReadTimer();
  9903  0A60  3195  2574  318A   	fcall	_TMR1_ReadTimer
  9904  0A63  0020               	movlb	0	; select bank0
  9905  0A64  0821               	movf	?_TMR1_ReadTimer,w
  9906  0A65  00B1               	movwf	Timeout_updateCurrentTime@var
  9907  0A66  0822               	movf	?_TMR1_ReadTimer+1,w
  9908  0A67  00B2               	movwf	Timeout_updateCurrentTime@var+1
  9909  0A68  01B3               	clrf	Timeout_updateCurrentTime@var+2
  9910  0A69  01B4               	clrf	Timeout_updateCurrentTime@var+3
  9911                           
  9912                           ;timeout.c: 17: var= var - 0x6000;
  9913  0A6A  3000               	movlw	0
  9914  0A6B  00AD               	movwf	??_Timeout_updateCurrentTime
  9915  0A6C  30A0               	movlw	160
  9916  0A6D  00AE               	movwf	??_Timeout_updateCurrentTime+1
  9917  0A6E  30FF               	movlw	255
  9918  0A6F  00AF               	movwf	??_Timeout_updateCurrentTime+2
  9919  0A70  30FF               	movlw	255
  9920  0A71  00B0               	movwf	??_Timeout_updateCurrentTime+3
  9921  0A72  0831               	movf	Timeout_updateCurrentTime@var,w
  9922  0A73  07AD               	addwf	??_Timeout_updateCurrentTime,f
  9923  0A74  0832               	movf	Timeout_updateCurrentTime@var+1,w
  9924  0A75  3DAE               	addwfc	??_Timeout_updateCurrentTime+1,f
  9925  0A76  0833               	movf	Timeout_updateCurrentTime@var+2,w
  9926  0A77  3DAF               	addwfc	??_Timeout_updateCurrentTime+2,f
  9927  0A78  0834               	movf	Timeout_updateCurrentTime@var+3,w
  9928  0A79  3DB0               	addwfc	??_Timeout_updateCurrentTime+3,f
  9929  0A7A  0830               	movf	??_Timeout_updateCurrentTime+3,w
  9930  0A7B  00B4               	movwf	Timeout_updateCurrentTime@var+3
  9931  0A7C  082F               	movf	??_Timeout_updateCurrentTime+2,w
  9932  0A7D  00B3               	movwf	Timeout_updateCurrentTime@var+2
  9933  0A7E  082E               	movf	??_Timeout_updateCurrentTime+1,w
  9934  0A7F  00B2               	movwf	Timeout_updateCurrentTime@var+1
  9935  0A80  082D               	movf	??_Timeout_updateCurrentTime,w
  9936  0A81  00B1               	movwf	Timeout_updateCurrentTime@var
  9937                           
  9938                           ;timeout.c: 18: globalCounter += ((var*1000)/4096);
  9939  0A82  0834               	movf	Timeout_updateCurrentTime@var+3,w
  9940  0A83  00A4               	movwf	___lmul@multiplier+3
  9941  0A84  0833               	movf	Timeout_updateCurrentTime@var+2,w
  9942  0A85  00A3               	movwf	___lmul@multiplier+2
  9943  0A86  0832               	movf	Timeout_updateCurrentTime@var+1,w
  9944  0A87  00A2               	movwf	___lmul@multiplier+1
  9945  0A88  0831               	movf	Timeout_updateCurrentTime@var,w
  9946  0A89  00A1               	movwf	___lmul@multiplier
  9947  0A8A  3000               	movlw	0
  9948  0A8B  00A8               	movwf	___lmul@multiplicand+3
  9949  0A8C  3000               	movlw	0
  9950  0A8D  00A7               	movwf	___lmul@multiplicand+2
  9951  0A8E  3003               	movlw	3
  9952  0A8F  00A6               	movwf	___lmul@multiplicand+1
  9953  0A90  30E8               	movlw	232
  9954  0A91  00A5               	movwf	___lmul@multiplicand
  9955  0A92  3197  279B  318A   	fcall	___lmul
  9956  0A95  0020               	movlb	0	; select bank0
  9957  0A96  0821               	movf	?___lmul,w
  9958  0A97  00AD               	movwf	??_Timeout_updateCurrentTime
  9959  0A98  0822               	movf	?___lmul+1,w
  9960  0A99  00AE               	movwf	??_Timeout_updateCurrentTime+1
  9961  0A9A  0823               	movf	?___lmul+2,w
  9962  0A9B  00AF               	movwf	??_Timeout_updateCurrentTime+2
  9963  0A9C  0824               	movf	?___lmul+3,w
  9964  0A9D  00B0               	movwf	??_Timeout_updateCurrentTime+3
  9965  0A9E  300C               	movlw	12
  9966  0A9F                     u6445:	
  9967  0A9F  36B0               	lsrf	??_Timeout_updateCurrentTime+3,f
  9968  0AA0  0CAF               	rrf	??_Timeout_updateCurrentTime+2,f
  9969  0AA1  0CAE               	rrf	??_Timeout_updateCurrentTime+1,f
  9970  0AA2  0CAD               	rrf	??_Timeout_updateCurrentTime,f
  9971  0AA3  0B89               	decfsz	9,f
  9972  0AA4  2A9F               	goto	u6445
  9973  0AA5  082D               	movf	??_Timeout_updateCurrentTime,w
  9974  0AA6  0021               	movlb	1	; select bank1
  9975  0AA7  07CF               	addwf	_globalCounter^(0+128),f	;volatile
  9976  0AA8  0020               	movlb	0	; select bank0
  9977  0AA9  082E               	movf	??_Timeout_updateCurrentTime+1,w
  9978  0AAA  0021               	movlb	1	; select bank1
  9979  0AAB  3DD0               	addwfc	(_globalCounter+1)^(0+128),f	;volatile
  9980  0AAC  0020               	movlb	0	; select bank0
  9981  0AAD  082F               	movf	??_Timeout_updateCurrentTime+2,w
  9982  0AAE  0021               	movlb	1	; select bank1
  9983  0AAF  3DD1               	addwfc	(_globalCounter+2)^(0+128),f	;volatile
  9984  0AB0  0020               	movlb	0	; select bank0
  9985  0AB1  0830               	movf	??_Timeout_updateCurrentTime+3,w
  9986  0AB2  0021               	movlb	1	; select bank1
  9987  0AB3  3DD2               	addwfc	(_globalCounter+3)^(0+128),f	;volatile
  9988  0AB4  0008               	return
  9989  0AB5                     __end_of_Timeout_updateCurrentTime:	
  9990                           
  9991                           	psect	text44
  9992  179B                     __ptext44:	
  9993 ;; *************** function ___lmul *****************
  9994 ;; Defined at:
  9995 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\Umul32.c"
  9996 ;; Parameters:    Size  Location     Type
  9997 ;;  multiplier      4    1[BANK0 ] unsigned long 
  9998 ;;  multiplicand    4    5[BANK0 ] unsigned long 
  9999 ;; Auto vars:     Size  Location     Type
 10000 ;;  product         4    9[BANK0 ] unsigned long 
 10001 ;; Return value:  Size  Location     Type
 10002 ;;                  4    1[BANK0 ] unsigned long 
 10003 ;; Registers used:
 10004 ;;		wreg, status,2, status,0
 10005 ;; Tracked objects:
 10006 ;;		On entry : 0/0
 10007 ;;		On exit  : 0/0
 10008 ;;		Unchanged: 0/0
 10009 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10010 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10011 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10012 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10013 ;;      Totals:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10014 ;;Total ram usage:       12 bytes
 10015 ;; Hardware stack levels used:    1
 10016 ;; Hardware stack levels required when called:    4
 10017 ;; This function calls:
 10018 ;;		Nothing
 10019 ;; This function is called by:
 10020 ;;		_Wireless_checkDataReceived
 10021 ;;		_Timeout_updateCurrentTime
 10022 ;; This function uses a non-reentrant model
 10023 ;;
 10024                           
 10025                           
 10026                           ;psect for function ___lmul
 10027  179B                     ___lmul:	
 10028                           
 10029                           ;incstack = 0
 10030                           ; Regs used in ___lmul: [wreg+status,2+status,0]
 10031  179B  3000               	movlw	0
 10032  179C  0020               	movlb	0	; select bank0
 10033  179D  00AC               	movwf	___lmul@product+3
 10034  179E  3000               	movlw	0
 10035  179F  00AB               	movwf	___lmul@product+2
 10036  17A0  3000               	movlw	0
 10037  17A1  00AA               	movwf	___lmul@product+1
 10038  17A2  3000               	movlw	0
 10039  17A3  00A9               	movwf	___lmul@product
 10040  17A4                     l5873:	
 10041  17A4  1C21               	btfss	___lmul@multiplier,0
 10042  17A5  2FAE               	goto	l5877
 10043  17A6  0825               	movf	___lmul@multiplicand,w
 10044  17A7  07A9               	addwf	___lmul@product,f
 10045  17A8  0826               	movf	___lmul@multiplicand+1,w
 10046  17A9  3DAA               	addwfc	___lmul@product+1,f
 10047  17AA  0827               	movf	___lmul@multiplicand+2,w
 10048  17AB  3DAB               	addwfc	___lmul@product+2,f
 10049  17AC  0828               	movf	___lmul@multiplicand+3,w
 10050  17AD  3DAC               	addwfc	___lmul@product+3,f
 10051  17AE                     l5877:	
 10052  17AE  3001               	movlw	1
 10053  17AF                     u5335:	
 10054  17AF  35A5               	lslf	___lmul@multiplicand,f
 10055  17B0  0DA6               	rlf	___lmul@multiplicand+1,f
 10056  17B1  0DA7               	rlf	___lmul@multiplicand+2,f
 10057  17B2  0DA8               	rlf	___lmul@multiplicand+3,f
 10058  17B3  0B89               	decfsz	9,f
 10059  17B4  2FAF               	goto	u5335
 10060  17B5  3001               	movlw	1
 10061  17B6                     u5345:	
 10062  17B6  36A4               	lsrf	___lmul@multiplier+3,f
 10063  17B7  0CA3               	rrf	___lmul@multiplier+2,f
 10064  17B8  0CA2               	rrf	___lmul@multiplier+1,f
 10065  17B9  0CA1               	rrf	___lmul@multiplier,f
 10066  17BA  0B89               	decfsz	9,f
 10067  17BB  2FB6               	goto	u5345
 10068  17BC  0824               	movf	___lmul@multiplier+3,w
 10069  17BD  0423               	iorwf	___lmul@multiplier+2,w
 10070  17BE  0422               	iorwf	___lmul@multiplier+1,w
 10071  17BF  0421               	iorwf	___lmul@multiplier,w
 10072  17C0  1D03               	skipz
 10073  17C1  2FA4               	goto	l5873
 10074  17C2  082C               	movf	___lmul@product+3,w
 10075  17C3  00A4               	movwf	?___lmul+3
 10076  17C4  082B               	movf	___lmul@product+2,w
 10077  17C5  00A3               	movwf	?___lmul+2
 10078  17C6  082A               	movf	___lmul@product+1,w
 10079  17C7  00A2               	movwf	?___lmul+1
 10080  17C8  0829               	movf	___lmul@product,w
 10081  17C9  00A1               	movwf	?___lmul
 10082  17CA  0008               	return
 10083  17CB                     __end_of___lmul:	
 10084                           
 10085                           	psect	text45
 10086  1574                     __ptext45:	
 10087 ;; *************** function _TMR1_ReadTimer *****************
 10088 ;; Defined at:
 10089 ;;		line 104 in file "mcc_generated_files/tmr1.c"
 10090 ;; Parameters:    Size  Location     Type
 10091 ;;		None
 10092 ;; Auto vars:     Size  Location     Type
 10093 ;;  readVal         2    8[BANK0 ] unsigned int 
 10094 ;;  readValLow      1   11[BANK0 ] unsigned char 
 10095 ;;  readValHigh     1   10[BANK0 ] unsigned char 
 10096 ;; Return value:  Size  Location     Type
 10097 ;;                  2    1[BANK0 ] unsigned int 
 10098 ;; Registers used:
 10099 ;;		wreg
 10100 ;; Tracked objects:
 10101 ;;		On entry : 0/0
 10102 ;;		On exit  : 0/0
 10103 ;;		Unchanged: 0/0
 10104 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10105 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10106 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10107 ;;      Temps:          0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10108 ;;      Totals:         0      11       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10109 ;;Total ram usage:       11 bytes
 10110 ;; Hardware stack levels used:    1
 10111 ;; Hardware stack levels required when called:    4
 10112 ;; This function calls:
 10113 ;;		Nothing
 10114 ;; This function is called by:
 10115 ;;		_Timeout_updateCurrentTime
 10116 ;; This function uses a non-reentrant model
 10117 ;;
 10118                           
 10119                           
 10120                           ;psect for function _TMR1_ReadTimer
 10121  1574                     _TMR1_ReadTimer:	
 10122                           
 10123                           ;tmr1.c: 106: uint16_t readVal;
 10124                           ;tmr1.c: 107: uint8_t readValHigh;
 10125                           ;tmr1.c: 108: uint8_t readValLow;
 10126                           ;tmr1.c: 110: readValLow = TMR1L;
 10127                           
 10128                           ;incstack = 0
 10129                           ; Regs used in _TMR1_ReadTimer: [wreg]
 10130  1574  0020               	movlb	0	; select bank0
 10131  1575  0816               	movf	22,w	;volatile
 10132  1576  00A3               	movwf	??_TMR1_ReadTimer
 10133  1577  0823               	movf	??_TMR1_ReadTimer,w
 10134  1578  00AB               	movwf	TMR1_ReadTimer@readValLow
 10135                           
 10136                           ;tmr1.c: 111: readValHigh = TMR1H;
 10137  1579  0817               	movf	23,w	;volatile
 10138  157A  00A3               	movwf	??_TMR1_ReadTimer
 10139  157B  0823               	movf	??_TMR1_ReadTimer,w
 10140  157C  00AA               	movwf	TMR1_ReadTimer@readValHigh
 10141                           
 10142                           ;tmr1.c: 113: readVal = ((uint16_t)readValHigh << 8) | readValLow;
 10143  157D  082B               	movf	TMR1_ReadTimer@readValLow,w
 10144  157E  00A3               	movwf	??_TMR1_ReadTimer
 10145  157F  01A4               	clrf	??_TMR1_ReadTimer+1
 10146  1580  082A               	movf	TMR1_ReadTimer@readValHigh,w
 10147  1581  00A5               	movwf	??_TMR1_ReadTimer+2
 10148  1582  01A6               	clrf	??_TMR1_ReadTimer+3
 10149  1583  0825               	movf	??_TMR1_ReadTimer+2,w
 10150  1584  00A6               	movwf	??_TMR1_ReadTimer+3
 10151  1585  01A5               	clrf	??_TMR1_ReadTimer+2
 10152  1586  0823               	movf	??_TMR1_ReadTimer,w
 10153  1587  0425               	iorwf	??_TMR1_ReadTimer+2,w
 10154  1588  00A8               	movwf	TMR1_ReadTimer@readVal
 10155  1589  0824               	movf	??_TMR1_ReadTimer+1,w
 10156  158A  0426               	iorwf	??_TMR1_ReadTimer+3,w
 10157  158B  00A9               	movwf	TMR1_ReadTimer@readVal+1
 10158                           
 10159                           ;tmr1.c: 115: return readVal;
 10160  158C  0829               	movf	TMR1_ReadTimer@readVal+1,w
 10161  158D  00A2               	movwf	?_TMR1_ReadTimer+1
 10162  158E  0828               	movf	TMR1_ReadTimer@readVal,w
 10163  158F  00A1               	movwf	?_TMR1_ReadTimer
 10164  1590  0008               	return
 10165  1591                     __end_of_TMR1_ReadTimer:	
 10166                           
 10167                           	psect	text46
 10168  13BB                     __ptext46:	
 10169 ;; *************** function _Timeout_getGlobalCounter *****************
 10170 ;; Defined at:
 10171 ;;		line 21 in file "timeout.c"
 10172 ;; Parameters:    Size  Location     Type
 10173 ;;		None
 10174 ;; Auto vars:     Size  Location     Type
 10175 ;;		None
 10176 ;; Return value:  Size  Location     Type
 10177 ;;                  4    1[BANK0 ] unsigned long 
 10178 ;; Registers used:
 10179 ;;		wreg
 10180 ;; Tracked objects:
 10181 ;;		On entry : 0/0
 10182 ;;		On exit  : 0/0
 10183 ;;		Unchanged: 0/0
 10184 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10185 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10186 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10187 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10188 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10189 ;;Total ram usage:        4 bytes
 10190 ;; Hardware stack levels used:    1
 10191 ;; Hardware stack levels required when called:    4
 10192 ;; This function calls:
 10193 ;;		Nothing
 10194 ;; This function is called by:
 10195 ;;		_main
 10196 ;; This function uses a non-reentrant model
 10197 ;;
 10198                           
 10199                           
 10200                           ;psect for function _Timeout_getGlobalCounter
 10201  13BB                     _Timeout_getGlobalCounter:	
 10202                           
 10203                           ;timeout.c: 23: return globalCounter;
 10204                           
 10205                           ;incstack = 0
 10206                           ; Regs used in _Timeout_getGlobalCounter: [wreg]
 10207  13BB  0021               	movlb	1	; select bank1
 10208  13BC  0852               	movf	(_globalCounter+3)^(0+128),w	;volatile
 10209  13BD  0020               	movlb	0	; select bank0
 10210  13BE  00A4               	movwf	?_Timeout_getGlobalCounter+3
 10211  13BF  0021               	movlb	1	; select bank1
 10212  13C0  0851               	movf	(_globalCounter+2)^(0+128),w	;volatile
 10213  13C1  0020               	movlb	0	; select bank0
 10214  13C2  00A3               	movwf	?_Timeout_getGlobalCounter+2
 10215  13C3  0021               	movlb	1	; select bank1
 10216  13C4  0850               	movf	(_globalCounter+1)^(0+128),w	;volatile
 10217  13C5  0020               	movlb	0	; select bank0
 10218  13C6  00A2               	movwf	?_Timeout_getGlobalCounter+1
 10219  13C7  0021               	movlb	1	; select bank1
 10220  13C8  084F               	movf	_globalCounter^(0+128),w	;volatile
 10221  13C9  0020               	movlb	0	; select bank0
 10222  13CA  00A1               	movwf	?_Timeout_getGlobalCounter
 10223  13CB  0008               	return
 10224  13CC                     __end_of_Timeout_getGlobalCounter:	
 10225                           
 10226                           	psect	text47
 10227  1506                     __ptext47:	
 10228 ;; *************** function _SYSTEM_Initialize *****************
 10229 ;; Defined at:
 10230 ;;		line 70 in file "mcc_generated_files/mcc.c"
 10231 ;; Parameters:    Size  Location     Type
 10232 ;;		None
 10233 ;; Auto vars:     Size  Location     Type
 10234 ;;		None
 10235 ;; Return value:  Size  Location     Type
 10236 ;;                  1    wreg      void 
 10237 ;; Registers used:
 10238 ;;		wreg, status,2, status,0, pclath, cstack
 10239 ;; Tracked objects:
 10240 ;;		On entry : 0/0
 10241 ;;		On exit  : 0/0
 10242 ;;		Unchanged: 0/0
 10243 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10244 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10245 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10246 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10247 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10248 ;;Total ram usage:        0 bytes
 10249 ;; Hardware stack levels used:    1
 10250 ;; Hardware stack levels required when called:    6
 10251 ;; This function calls:
 10252 ;;		_ADC_Initialize
 10253 ;;		_FVR_Initialize
 10254 ;;		_I2C2_Initialize
 10255 ;;		_OSCILLATOR_Initialize
 10256 ;;		_PIN_MANAGER_Initialize
 10257 ;;		_SPI1_Initialize
 10258 ;;		_TMR1_Initialize
 10259 ;;		_TMR2_Initialize
 10260 ;;		_WDT_Initialize
 10261 ;; This function is called by:
 10262 ;;		_main
 10263 ;; This function uses a non-reentrant model
 10264 ;;
 10265                           
 10266                           
 10267                           ;psect for function _SYSTEM_Initialize
 10268  1506                     _SYSTEM_Initialize:	
 10269                           
 10270                           ;mcc.c: 73: PIN_MANAGER_Initialize();
 10271                           
 10272                           ;incstack = 0
 10273                           ; Regs used in _SYSTEM_Initialize: [wreg+status,2+status,0+pclath+cstack]
 10274  1506  3197  2744  3195   	fcall	_PIN_MANAGER_Initialize
 10275                           
 10276                           ;mcc.c: 74: OSCILLATOR_Initialize();
 10277  1509  3192  22F2  3195   	fcall	_OSCILLATOR_Initialize
 10278                           
 10279                           ;mcc.c: 75: WDT_Initialize();
 10280  150C  3192  22BB  3195   	fcall	_WDT_Initialize
 10281                           
 10282                           ;mcc.c: 76: SPI1_Initialize();
 10283  150F  3192  22F9  3195   	fcall	_SPI1_Initialize
 10284                           
 10285                           ;mcc.c: 77: I2C2_Initialize();
 10286  1512  3194  24EB  3195   	fcall	_I2C2_Initialize
 10287                           
 10288                           ;mcc.c: 78: FVR_Initialize();
 10289  1515  3192  22B7  3195   	fcall	_FVR_Initialize
 10290                           
 10291                           ;mcc.c: 79: ADC_Initialize();
 10292  1518  3193  230F  3195   	fcall	_ADC_Initialize
 10293                           
 10294                           ;mcc.c: 80: TMR2_Initialize();
 10295  151B  3193  2317  3195   	fcall	_TMR2_Initialize
 10296                           
 10297                           ;mcc.c: 81: TMR1_Initialize();
 10298  151E  3194  246F         	fcall	_TMR1_Initialize
 10299  1520  0008               	return
 10300  1521                     __end_of_SYSTEM_Initialize:	
 10301                           
 10302                           	psect	text48
 10303  12BB                     __ptext48:	
 10304 ;; *************** function _WDT_Initialize *****************
 10305 ;; Defined at:
 10306 ;;		line 94 in file "mcc_generated_files/mcc.c"
 10307 ;; Parameters:    Size  Location     Type
 10308 ;;		None
 10309 ;; Auto vars:     Size  Location     Type
 10310 ;;		None
 10311 ;; Return value:  Size  Location     Type
 10312 ;;                  1    wreg      void 
 10313 ;; Registers used:
 10314 ;;		wreg
 10315 ;; Tracked objects:
 10316 ;;		On entry : 0/0
 10317 ;;		On exit  : 0/0
 10318 ;;		Unchanged: 0/0
 10319 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10320 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10321 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10322 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10323 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10324 ;;Total ram usage:        0 bytes
 10325 ;; Hardware stack levels used:    1
 10326 ;; Hardware stack levels required when called:    4
 10327 ;; This function calls:
 10328 ;;		Nothing
 10329 ;; This function is called by:
 10330 ;;		_SYSTEM_Initialize
 10331 ;; This function uses a non-reentrant model
 10332 ;;
 10333                           
 10334                           
 10335                           ;psect for function _WDT_Initialize
 10336  12BB                     _WDT_Initialize:	
 10337                           
 10338                           ;mcc.c: 97: WDTCON = 0x1A;
 10339                           
 10340                           ;incstack = 0
 10341                           ; Regs used in _WDT_Initialize: [wreg]
 10342  12BB  301A               	movlw	26
 10343  12BC  0021               	movlb	1	; select bank1
 10344  12BD  0097               	movwf	23	;volatile
 10345  12BE  0008               	return
 10346  12BF                     __end_of_WDT_Initialize:	
 10347                           
 10348                           	psect	text49
 10349  1317                     __ptext49:	
 10350 ;; *************** function _TMR2_Initialize *****************
 10351 ;; Defined at:
 10352 ;;		line 61 in file "mcc_generated_files/tmr2.c"
 10353 ;; Parameters:    Size  Location     Type
 10354 ;;		None
 10355 ;; Auto vars:     Size  Location     Type
 10356 ;;		None
 10357 ;; Return value:  Size  Location     Type
 10358 ;;                  1    wreg      void 
 10359 ;; Registers used:
 10360 ;;		wreg, status,2
 10361 ;; Tracked objects:
 10362 ;;		On entry : 0/0
 10363 ;;		On exit  : 0/0
 10364 ;;		Unchanged: 0/0
 10365 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10366 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10367 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10368 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10369 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10370 ;;Total ram usage:        0 bytes
 10371 ;; Hardware stack levels used:    1
 10372 ;; Hardware stack levels required when called:    4
 10373 ;; This function calls:
 10374 ;;		Nothing
 10375 ;; This function is called by:
 10376 ;;		_SYSTEM_Initialize
 10377 ;; This function uses a non-reentrant model
 10378 ;;
 10379                           
 10380                           
 10381                           ;psect for function _TMR2_Initialize
 10382  1317                     _TMR2_Initialize:	
 10383                           
 10384                           ;tmr2.c: 66: PR2 = 0x44;
 10385                           
 10386                           ;incstack = 0
 10387                           ; Regs used in _TMR2_Initialize: [wreg+status,2]
 10388  1317  3044               	movlw	68
 10389  1318  0020               	movlb	0	; select bank0
 10390  1319  009B               	movwf	27	;volatile
 10391                           
 10392                           ;tmr2.c: 69: TMR2 = 0x00;
 10393  131A  019A               	clrf	26	;volatile
 10394                           
 10395                           ;tmr2.c: 72: PIR1bits.TMR2IF = 0;
 10396  131B  1091               	bcf	17,1	;volatile
 10397                           
 10398                           ;tmr2.c: 75: T2CON = 0x46;
 10399  131C  3046               	movlw	70
 10400  131D  009C               	movwf	28	;volatile
 10401  131E  0008               	return
 10402  131F                     __end_of_TMR2_Initialize:	
 10403                           
 10404                           	psect	text50
 10405  146F                     __ptext50:	
 10406 ;; *************** function _TMR1_Initialize *****************
 10407 ;; Defined at:
 10408 ;;		line 63 in file "mcc_generated_files/tmr1.c"
 10409 ;; Parameters:    Size  Location     Type
 10410 ;;		None
 10411 ;; Auto vars:     Size  Location     Type
 10412 ;;		None
 10413 ;; Return value:  Size  Location     Type
 10414 ;;                  1    wreg      void 
 10415 ;; Registers used:
 10416 ;;		wreg, status,2, status,0, pclath, cstack
 10417 ;; Tracked objects:
 10418 ;;		On entry : 0/0
 10419 ;;		On exit  : 0/0
 10420 ;;		Unchanged: 0/0
 10421 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10422 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10423 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10424 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10425 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10426 ;;Total ram usage:        0 bytes
 10427 ;; Hardware stack levels used:    1
 10428 ;; Hardware stack levels required when called:    5
 10429 ;; This function calls:
 10430 ;;		_TMR1_SetInterruptHandler
 10431 ;; This function is called by:
 10432 ;;		_SYSTEM_Initialize
 10433 ;; This function uses a non-reentrant model
 10434 ;;
 10435                           
 10436                           
 10437                           ;psect for function _TMR1_Initialize
 10438  146F                     _TMR1_Initialize:	
 10439                           
 10440                           ;tmr1.c: 68: T1GCON = 0x00;
 10441                           
 10442                           ;incstack = 0
 10443                           ; Regs used in _TMR1_Initialize: [wreg+status,2+status,0+pclath+cstack]
 10444  146F  0020               	movlb	0	; select bank0
 10445  1470  0199               	clrf	25	;volatile
 10446                           
 10447                           ;tmr1.c: 71: TMR1H = 0x60;
 10448  1471  3060               	movlw	96
 10449  1472  0097               	movwf	23	;volatile
 10450                           
 10451                           ;tmr1.c: 74: TMR1L = 0x00;
 10452  1473  0196               	clrf	22	;volatile
 10453                           
 10454                           ;tmr1.c: 77: timer1ReloadVal=(uint16_t)((TMR1H << 8) | TMR1L);
 10455  1474  0817               	movf	23,w	;volatile
 10456  1475  00FD               	movwf	_timer1ReloadVal+1	;volatile
 10457  1476  0816               	movf	22,w	;volatile
 10458  1477  00FC               	movwf	_timer1ReloadVal	;volatile
 10459                           
 10460                           ;tmr1.c: 80: PIR1bits.TMR1IF = 0;
 10461  1478  1011               	bcf	17,0	;volatile
 10462                           
 10463                           ;tmr1.c: 83: PIE1bits.TMR1IE = 1;
 10464  1479  0021               	movlb	1	; select bank1
 10465  147A  1411               	bsf	17,0	;volatile
 10466                           
 10467                           ;tmr1.c: 86: TMR1_SetInterruptHandler(TMR1_DefaultInterruptHandler);
 10468  147B  3002               	movlw	low _TMR1_DefaultInterruptHandler
 10469  147C  0020               	movlb	0	; select bank0
 10470  147D  00A1               	movwf	TMR1_SetInterruptHandler@InterruptHandler
 10471  147E  3000               	movlw	high _TMR1_DefaultInterruptHandler
 10472  147F  00A2               	movwf	TMR1_SetInterruptHandler@InterruptHandler+1
 10473  1480  3193  233A         	fcall	_TMR1_SetInterruptHandler
 10474                           
 10475                           ;tmr1.c: 89: T1CON = 0xBD;
 10476  1482  30BD               	movlw	189
 10477  1483  0020               	movlb	0	; select bank0
 10478  1484  0098               	movwf	24	;volatile
 10479  1485  0008               	return
 10480  1486                     __end_of_TMR1_Initialize:	
 10481                           
 10482                           	psect	text51
 10483  133A                     __ptext51:	
 10484 ;; *************** function _TMR1_SetInterruptHandler *****************
 10485 ;; Defined at:
 10486 ;;		line 181 in file "mcc_generated_files/tmr1.c"
 10487 ;; Parameters:    Size  Location     Type
 10488 ;;  InterruptHan    2    1[BANK0 ] PTR FTN()void 
 10489 ;;		 -> TMR1_DefaultInterruptHandler(1), 
 10490 ;; Auto vars:     Size  Location     Type
 10491 ;;		None
 10492 ;; Return value:  Size  Location     Type
 10493 ;;                  1    wreg      void 
 10494 ;; Registers used:
 10495 ;;		wreg
 10496 ;; Tracked objects:
 10497 ;;		On entry : 0/0
 10498 ;;		On exit  : 0/0
 10499 ;;		Unchanged: 0/0
 10500 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10501 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10502 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10503 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10504 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10505 ;;Total ram usage:        2 bytes
 10506 ;; Hardware stack levels used:    1
 10507 ;; Hardware stack levels required when called:    4
 10508 ;; This function calls:
 10509 ;;		Nothing
 10510 ;; This function is called by:
 10511 ;;		_TMR1_Initialize
 10512 ;; This function uses a non-reentrant model
 10513 ;;
 10514                           
 10515                           
 10516                           ;psect for function _TMR1_SetInterruptHandler
 10517  133A                     _TMR1_SetInterruptHandler:	
 10518                           
 10519                           ;tmr1.c: 182: TMR1_InterruptHandler = InterruptHandler;
 10520                           
 10521                           ;incstack = 0
 10522                           ; Regs used in _TMR1_SetInterruptHandler: [wreg]
 10523  133A  0020               	movlb	0	; select bank0
 10524  133B  0822               	movf	TMR1_SetInterruptHandler@InterruptHandler+1,w
 10525  133C  0022               	movlb	2	; select bank2
 10526  133D  00E7               	movwf	(_TMR1_InterruptHandler+1)^(0+256)
 10527  133E  0020               	movlb	0	; select bank0
 10528  133F  0821               	movf	TMR1_SetInterruptHandler@InterruptHandler,w
 10529  1340  0022               	movlb	2	; select bank2
 10530  1341  00E6               	movwf	_TMR1_InterruptHandler^(0+256)
 10531  1342  0008               	return
 10532  1343                     __end_of_TMR1_SetInterruptHandler:	
 10533                           
 10534                           	psect	text52
 10535  12F9                     __ptext52:	
 10536 ;; *************** function _SPI1_Initialize *****************
 10537 ;; Defined at:
 10538 ;;		line 63 in file "mcc_generated_files/spi1.c"
 10539 ;; Parameters:    Size  Location     Type
 10540 ;;		None
 10541 ;; Auto vars:     Size  Location     Type
 10542 ;;		None
 10543 ;; Return value:  Size  Location     Type
 10544 ;;                  1    wreg      void 
 10545 ;; Registers used:
 10546 ;;		wreg, status,2
 10547 ;; Tracked objects:
 10548 ;;		On entry : 0/0
 10549 ;;		On exit  : 0/0
 10550 ;;		Unchanged: 0/0
 10551 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10552 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10553 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10554 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10555 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10556 ;;Total ram usage:        0 bytes
 10557 ;; Hardware stack levels used:    1
 10558 ;; Hardware stack levels required when called:    4
 10559 ;; This function calls:
 10560 ;;		Nothing
 10561 ;; This function is called by:
 10562 ;;		_SYSTEM_Initialize
 10563 ;; This function uses a non-reentrant model
 10564 ;;
 10565                           
 10566                           
 10567                           ;psect for function _SPI1_Initialize
 10568  12F9                     _SPI1_Initialize:	
 10569                           
 10570                           ;spi1.c: 68: SSP1STAT = 0x40;
 10571                           
 10572                           ;incstack = 0
 10573                           ; Regs used in _SPI1_Initialize: [wreg+status,2]
 10574  12F9  3040               	movlw	64
 10575  12FA  0024               	movlb	4	; select bank4
 10576  12FB  0094               	movwf	20	;volatile
 10577                           
 10578                           ;spi1.c: 71: SSP1CON1 = 0x20;
 10579  12FC  3020               	movlw	32
 10580  12FD  0095               	movwf	21	;volatile
 10581                           
 10582                           ;spi1.c: 74: SSP1ADD = 0x00;
 10583  12FE  0192               	clrf	18	;volatile
 10584  12FF  0008               	return
 10585  1300                     __end_of_SPI1_Initialize:	
 10586                           
 10587                           	psect	text53
 10588  1744                     __ptext53:	
 10589 ;; *************** function _PIN_MANAGER_Initialize *****************
 10590 ;; Defined at:
 10591 ;;		line 54 in file "mcc_generated_files/pin_manager.c"
 10592 ;; Parameters:    Size  Location     Type
 10593 ;;		None
 10594 ;; Auto vars:     Size  Location     Type
 10595 ;;		None
 10596 ;; Return value:  Size  Location     Type
 10597 ;;                  1    wreg      void 
 10598 ;; Registers used:
 10599 ;;		wreg, status,2, status,0, pclath, cstack
 10600 ;; Tracked objects:
 10601 ;;		On entry : 0/0
 10602 ;;		On exit  : 0/0
 10603 ;;		Unchanged: 0/0
 10604 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10605 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10606 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10607 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10608 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10609 ;;Total ram usage:        0 bytes
 10610 ;; Hardware stack levels used:    1
 10611 ;; Hardware stack levels required when called:    5
 10612 ;; This function calls:
 10613 ;;		_IOCAF2_SetInterruptHandler
 10614 ;; This function is called by:
 10615 ;;		_SYSTEM_Initialize
 10616 ;; This function uses a non-reentrant model
 10617 ;;
 10618                           
 10619                           
 10620                           ;psect for function _PIN_MANAGER_Initialize
 10621  1744                     _PIN_MANAGER_Initialize:	
 10622                           
 10623                           ;pin_manager.c: 59: LATA = 0x00;
 10624                           
 10625                           ;incstack = 0
 10626                           ; Regs used in _PIN_MANAGER_Initialize: [wreg+status,2+status,0+pclath+cstack]
 10627  1744  0022               	movlb	2	; select bank2
 10628  1745  018C               	clrf	12	;volatile
 10629                           
 10630                           ;pin_manager.c: 60: LATB = 0x00;
 10631  1746  018D               	clrf	13	;volatile
 10632                           
 10633                           ;pin_manager.c: 61: LATC = 0x00;
 10634  1747  018E               	clrf	14	;volatile
 10635                           
 10636                           ;pin_manager.c: 66: TRISA = 0x3F;
 10637  1748  303F               	movlw	63
 10638  1749  0021               	movlb	1	; select bank1
 10639  174A  008C               	movwf	12	;volatile
 10640                           
 10641                           ;pin_manager.c: 67: TRISB = 0xB0;
 10642  174B  30B0               	movlw	176
 10643  174C  008D               	movwf	13	;volatile
 10644                           
 10645                           ;pin_manager.c: 68: TRISC = 0x39;
 10646  174D  3039               	movlw	57
 10647  174E  008E               	movwf	14	;volatile
 10648                           
 10649                           ;pin_manager.c: 73: ANSELC = 0x01;
 10650  174F  3001               	movlw	1
 10651  1750  0023               	movlb	3	; select bank3
 10652  1751  008E               	movwf	14	;volatile
 10653                           
 10654                           ;pin_manager.c: 74: ANSELB = 0x00;
 10655  1752  018D               	clrf	13	;volatile
 10656                           
 10657                           ;pin_manager.c: 75: ANSELA = 0x03;
 10658  1753  3003               	movlw	3
 10659  1754  008C               	movwf	12	;volatile
 10660                           
 10661                           ;pin_manager.c: 80: WPUB = 0x10;
 10662  1755  3010               	movlw	16
 10663  1756  0024               	movlb	4	; select bank4
 10664  1757  008D               	movwf	13	;volatile
 10665                           
 10666                           ;pin_manager.c: 81: WPUA = 0x3F;
 10667  1758  303F               	movlw	63
 10668  1759  008C               	movwf	12	;volatile
 10669                           
 10670                           ;pin_manager.c: 82: WPUC = 0xD1;
 10671  175A  30D1               	movlw	209
 10672  175B  008E               	movwf	14	;volatile
 10673                           
 10674                           ;pin_manager.c: 83: OPTION_REGbits.nWPUEN = 0;
 10675  175C  0021               	movlb	1	; select bank1
 10676  175D  1395               	bcf	21,7	;volatile
 10677                           
 10678                           ;pin_manager.c: 89: APFCON1 = 0x2A;
 10679  175E  302A               	movlw	42
 10680  175F  0022               	movlb	2	; select bank2
 10681  1760  009E               	movwf	30	;volatile
 10682                           
 10683                           ;pin_manager.c: 90: APFCON0 = 0x00;
 10684  1761  019D               	clrf	29	;volatile
 10685                           
 10686                           ;pin_manager.c: 96: IOCAFbits.IOCAF2 = 0;
 10687  1762  0027               	movlb	7	; select bank7
 10688  1763  1113               	bcf	19,2	;volatile
 10689                           
 10690                           ;pin_manager.c: 98: IOCANbits.IOCAN2 = 1;
 10691  1764  1512               	bsf	18,2	;volatile
 10692                           
 10693                           ;pin_manager.c: 100: IOCAPbits.IOCAP2 = 1;
 10694  1765  1511               	bsf	17,2	;volatile
 10695                           
 10696                           ;pin_manager.c: 103: IOCAF2_SetInterruptHandler(IOCAF2_DefaultInterruptHandler);
 10697  1766  30AA               	movlw	low _IOCAF2_DefaultInterruptHandler
 10698  1767  0020               	movlb	0	; select bank0
 10699  1768  00A1               	movwf	IOCAF2_SetInterruptHandler@InterruptHandler
 10700  1769  3012               	movlw	high _IOCAF2_DefaultInterruptHandler
 10701  176A  00A2               	movwf	IOCAF2_SetInterruptHandler@InterruptHandler+1
 10702  176B  3193  2331         	fcall	_IOCAF2_SetInterruptHandler
 10703                           
 10704                           ;pin_manager.c: 106: INTCONbits.IOCIE = 1;
 10705  176D  158B               	bsf	11,3	;volatile
 10706  176E  0008               	return
 10707  176F                     __end_of_PIN_MANAGER_Initialize:	
 10708                           
 10709                           	psect	text54
 10710  1331                     __ptext54:	
 10711 ;; *************** function _IOCAF2_SetInterruptHandler *****************
 10712 ;; Defined at:
 10713 ;;		line 139 in file "mcc_generated_files/pin_manager.c"
 10714 ;; Parameters:    Size  Location     Type
 10715 ;;  InterruptHan    2    1[BANK0 ] PTR FTN()void 
 10716 ;;		 -> IOCAF2_DefaultInterruptHandler(1), 
 10717 ;; Auto vars:     Size  Location     Type
 10718 ;;		None
 10719 ;; Return value:  Size  Location     Type
 10720 ;;                  1    wreg      void 
 10721 ;; Registers used:
 10722 ;;		wreg
 10723 ;; Tracked objects:
 10724 ;;		On entry : 0/0
 10725 ;;		On exit  : 0/0
 10726 ;;		Unchanged: 0/0
 10727 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10728 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10729 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10730 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10731 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10732 ;;Total ram usage:        2 bytes
 10733 ;; Hardware stack levels used:    1
 10734 ;; Hardware stack levels required when called:    4
 10735 ;; This function calls:
 10736 ;;		Nothing
 10737 ;; This function is called by:
 10738 ;;		_PIN_MANAGER_Initialize
 10739 ;; This function uses a non-reentrant model
 10740 ;;
 10741                           
 10742                           
 10743                           ;psect for function _IOCAF2_SetInterruptHandler
 10744  1331                     _IOCAF2_SetInterruptHandler:	
 10745                           
 10746                           ;pin_manager.c: 140: IOCAF2_InterruptHandler = InterruptHandler;
 10747                           
 10748                           ;incstack = 0
 10749                           ; Regs used in _IOCAF2_SetInterruptHandler: [wreg]
 10750  1331  0020               	movlb	0	; select bank0
 10751  1332  0822               	movf	IOCAF2_SetInterruptHandler@InterruptHandler+1,w
 10752  1333  0022               	movlb	2	; select bank2
 10753  1334  00E9               	movwf	(_IOCAF2_InterruptHandler+1)^(0+256)
 10754  1335  0020               	movlb	0	; select bank0
 10755  1336  0821               	movf	IOCAF2_SetInterruptHandler@InterruptHandler,w
 10756  1337  0022               	movlb	2	; select bank2
 10757  1338  00E8               	movwf	_IOCAF2_InterruptHandler^(0+256)
 10758  1339  0008               	return
 10759  133A                     __end_of_IOCAF2_SetInterruptHandler:	
 10760                           
 10761                           	psect	text55
 10762  12F2                     __ptext55:	
 10763 ;; *************** function _OSCILLATOR_Initialize *****************
 10764 ;; Defined at:
 10765 ;;		line 84 in file "mcc_generated_files/mcc.c"
 10766 ;; Parameters:    Size  Location     Type
 10767 ;;		None
 10768 ;; Auto vars:     Size  Location     Type
 10769 ;;		None
 10770 ;; Return value:  Size  Location     Type
 10771 ;;                  1    wreg      void 
 10772 ;; Registers used:
 10773 ;;		wreg, status,2
 10774 ;; Tracked objects:
 10775 ;;		On entry : 0/0
 10776 ;;		On exit  : 0/0
 10777 ;;		Unchanged: 0/0
 10778 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10779 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10780 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10781 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10782 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10783 ;;Total ram usage:        0 bytes
 10784 ;; Hardware stack levels used:    1
 10785 ;; Hardware stack levels required when called:    4
 10786 ;; This function calls:
 10787 ;;		Nothing
 10788 ;; This function is called by:
 10789 ;;		_SYSTEM_Initialize
 10790 ;; This function uses a non-reentrant model
 10791 ;;
 10792                           
 10793                           
 10794                           ;psect for function _OSCILLATOR_Initialize
 10795  12F2                     _OSCILLATOR_Initialize:	
 10796                           
 10797                           ;mcc.c: 87: OSCCON = 0x72;
 10798                           
 10799                           ;incstack = 0
 10800                           ; Regs used in _OSCILLATOR_Initialize: [wreg+status,2]
 10801  12F2  3072               	movlw	114
 10802  12F3  0021               	movlb	1	; select bank1
 10803  12F4  0099               	movwf	25	;volatile
 10804                           
 10805                           ;mcc.c: 89: OSCTUNE = 0x00;
 10806  12F5  0198               	clrf	24	;volatile
 10807                           
 10808                           ;mcc.c: 91: BORCON = 0x00;
 10809  12F6  0022               	movlb	2	; select bank2
 10810  12F7  0196               	clrf	22	;volatile
 10811  12F8  0008               	return
 10812  12F9                     __end_of_OSCILLATOR_Initialize:	
 10813                           
 10814                           	psect	text56
 10815  14EB                     __ptext56:	
 10816 ;; *************** function _I2C2_Initialize *****************
 10817 ;; Defined at:
 10818 ;;		line 198 in file "mcc_generated_files/i2c2.c"
 10819 ;; Parameters:    Size  Location     Type
 10820 ;;		None
 10821 ;; Auto vars:     Size  Location     Type
 10822 ;;		None
 10823 ;; Return value:  Size  Location     Type
 10824 ;;                  1    wreg      void 
 10825 ;; Registers used:
 10826 ;;		wreg, status,2
 10827 ;; Tracked objects:
 10828 ;;		On entry : 0/0
 10829 ;;		On exit  : 0/0
 10830 ;;		Unchanged: 0/0
 10831 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10832 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10833 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10834 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10835 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10836 ;;Total ram usage:        1 bytes
 10837 ;; Hardware stack levels used:    1
 10838 ;; Hardware stack levels required when called:    4
 10839 ;; This function calls:
 10840 ;;		Nothing
 10841 ;; This function is called by:
 10842 ;;		_SYSTEM_Initialize
 10843 ;; This function uses a non-reentrant model
 10844 ;;
 10845                           
 10846                           
 10847                           ;psect for function _I2C2_Initialize
 10848  14EB                     _I2C2_Initialize:	
 10849                           
 10850                           ;i2c2.c: 200: i2c2_object.pTrHead = i2c2_tr_queue;
 10851                           
 10852                           ;incstack = 0
 10853                           ; Regs used in _I2C2_Initialize: [wreg+status,2]
 10854  14EB  3062               	movlw	(low (_i2c2_tr_queue| (0+256)))& (0+255)
 10855  14EC  0020               	movlb	0	; select bank0
 10856  14ED  00A1               	movwf	??_I2C2_Initialize
 10857  14EE  0821               	movf	??_I2C2_Initialize,w
 10858  14EF  0021               	movlb	1	; select bank1
 10859  14F0  00CB               	movwf	(low ((_i2c2_object| 0+1)))^(0+128)
 10860                           
 10861                           ;i2c2.c: 201: i2c2_object.pTrTail = i2c2_tr_queue;
 10862  14F1  3062               	movlw	(low (_i2c2_tr_queue| (0+256)))& (0+255)
 10863  14F2  0020               	movlb	0	; select bank0
 10864  14F3  00A1               	movwf	??_I2C2_Initialize
 10865  14F4  0821               	movf	??_I2C2_Initialize,w
 10866  14F5  0021               	movlb	1	; select bank1
 10867  14F6  00CA               	movwf	_i2c2_object^(0+128)
 10868                           
 10869                           ;i2c2.c: 202: i2c2_object.trStatus.s.empty = 1;
 10870  14F7  14CC               	bsf	(_i2c2_object^(0+128)+2),1
 10871                           
 10872                           ;i2c2.c: 203: i2c2_object.trStatus.s.full = 0;
 10873  14F8  104C               	bcf	(_i2c2_object^(0+128)+2),0
 10874                           
 10875                           ;i2c2.c: 205: i2c2_object.i2cErrors = 0;
 10876  14F9  01CE               	clrf	(_i2c2_object^(0+128)+4)
 10877                           
 10878                           ;i2c2.c: 208: SSP2STAT = 0x00;
 10879  14FA  0024               	movlb	4	; select bank4
 10880  14FB  019C               	clrf	28	;volatile
 10881                           
 10882                           ;i2c2.c: 210: SSP2CON1 = 0x28;
 10883  14FC  3028               	movlw	40
 10884  14FD  009D               	movwf	29	;volatile
 10885                           
 10886                           ;i2c2.c: 212: SSP2CON3 = 0x00;
 10887  14FE  019F               	clrf	31	;volatile
 10888                           
 10889                           ;i2c2.c: 214: SSP2ADD = 0x03;
 10890  14FF  3003               	movlw	3
 10891  1500  009A               	movwf	26	;volatile
 10892                           
 10893                           ;i2c2.c: 218: PIR4bits.SSP2IF = 0;
 10894  1501  0020               	movlb	0	; select bank0
 10895  1502  1014               	bcf	20,0	;volatile
 10896                           
 10897                           ;i2c2.c: 220: PIE4bits.SSP2IE = 1;
 10898  1503  0021               	movlb	1	; select bank1
 10899  1504  1414               	bsf	20,0	;volatile
 10900  1505  0008               	return
 10901  1506                     __end_of_I2C2_Initialize:	
 10902                           
 10903                           	psect	text57
 10904  12B7                     __ptext57:	
 10905 ;; *************** function _FVR_Initialize *****************
 10906 ;; Defined at:
 10907 ;;		line 57 in file "mcc_generated_files/fvr.c"
 10908 ;; Parameters:    Size  Location     Type
 10909 ;;		None
 10910 ;; Auto vars:     Size  Location     Type
 10911 ;;		None
 10912 ;; Return value:  Size  Location     Type
 10913 ;;                  1    wreg      void 
 10914 ;; Registers used:
 10915 ;;		wreg
 10916 ;; Tracked objects:
 10917 ;;		On entry : 0/0
 10918 ;;		On exit  : 0/0
 10919 ;;		Unchanged: 0/0
 10920 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10921 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10922 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10923 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10924 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10925 ;;Total ram usage:        0 bytes
 10926 ;; Hardware stack levels used:    1
 10927 ;; Hardware stack levels required when called:    4
 10928 ;; This function calls:
 10929 ;;		Nothing
 10930 ;; This function is called by:
 10931 ;;		_SYSTEM_Initialize
 10932 ;; This function uses a non-reentrant model
 10933 ;;
 10934                           
 10935                           
 10936                           ;psect for function _FVR_Initialize
 10937  12B7                     _FVR_Initialize:	
 10938                           
 10939                           ;fvr.c: 60: FVRCON = 0x01;
 10940                           
 10941                           ;incstack = 0
 10942                           ; Regs used in _FVR_Initialize: [wreg]
 10943  12B7  3001               	movlw	1
 10944  12B8  0022               	movlb	2	; select bank2
 10945  12B9  0097               	movwf	23	;volatile
 10946  12BA  0008               	return
 10947  12BB                     __end_of_FVR_Initialize:	
 10948                           
 10949                           	psect	text58
 10950  130F                     __ptext58:	
 10951 ;; *************** function _ADC_Initialize *****************
 10952 ;; Defined at:
 10953 ;;		line 62 in file "mcc_generated_files/adc.c"
 10954 ;; Parameters:    Size  Location     Type
 10955 ;;		None
 10956 ;; Auto vars:     Size  Location     Type
 10957 ;;		None
 10958 ;; Return value:  Size  Location     Type
 10959 ;;                  1    wreg      void 
 10960 ;; Registers used:
 10961 ;;		wreg, status,2
 10962 ;; Tracked objects:
 10963 ;;		On entry : 0/0
 10964 ;;		On exit  : 0/0
 10965 ;;		Unchanged: 0/0
 10966 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10967 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10968 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10969 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10970 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10971 ;;Total ram usage:        0 bytes
 10972 ;; Hardware stack levels used:    1
 10973 ;; Hardware stack levels required when called:    4
 10974 ;; This function calls:
 10975 ;;		Nothing
 10976 ;; This function is called by:
 10977 ;;		_SYSTEM_Initialize
 10978 ;; This function uses a non-reentrant model
 10979 ;;
 10980                           
 10981                           
 10982                           ;psect for function _ADC_Initialize
 10983  130F                     _ADC_Initialize:	
 10984                           
 10985                           ;adc.c: 67: ADCON0 = 0x01;
 10986                           
 10987                           ;incstack = 0
 10988                           ; Regs used in _ADC_Initialize: [wreg+status,2]
 10989  130F  3001               	movlw	1
 10990  1310  0021               	movlb	1	; select bank1
 10991  1311  009D               	movwf	29	;volatile
 10992                           
 10993                           ;adc.c: 70: ADCON1 = 0x90;
 10994  1312  3090               	movlw	144
 10995  1313  009E               	movwf	30	;volatile
 10996                           
 10997                           ;adc.c: 73: ADRESL = 0x00;
 10998  1314  019B               	clrf	27	;volatile
 10999                           
 11000                           ;adc.c: 76: ADRESH = 0x00;
 11001  1315  019C               	clrf	28	;volatile
 11002  1316  0008               	return
 11003  1317                     __end_of_ADC_Initialize:	
 11004                           
 11005                           	psect	text59
 11006  12AE                     __ptext59:	
 11007 ;; *************** function _DOOR_run *****************
 11008 ;; Defined at:
 11009 ;;		line 23 in file "doorlogic.c"
 11010 ;; Parameters:    Size  Location     Type
 11011 ;;		None
 11012 ;; Auto vars:     Size  Location     Type
 11013 ;;		None
 11014 ;; Return value:  Size  Location     Type
 11015 ;;                  1    wreg      enum E3332
 11016 ;; Registers used:
 11017 ;;		wreg
 11018 ;; Tracked objects:
 11019 ;;		On entry : 0/0
 11020 ;;		On exit  : 0/0
 11021 ;;		Unchanged: 0/0
 11022 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11023 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11024 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11025 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11026 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11027 ;;Total ram usage:        0 bytes
 11028 ;; Hardware stack levels used:    1
 11029 ;; Hardware stack levels required when called:    4
 11030 ;; This function calls:
 11031 ;;		Nothing
 11032 ;; This function is called by:
 11033 ;;		_main
 11034 ;; This function uses a non-reentrant model
 11035 ;;
 11036                           
 11037                           
 11038                           ;psect for function _DOOR_run
 11039  12AE                     _DOOR_run:	
 11040                           
 11041                           ;doorlogic.c: 24: static DOOR previousDoorState = DOOR_CLOSED;
 11042                           ;doorlogic.c: 25: static unsigned long doorStateDuration = 0;
 11043                           ;doorlogic.c: 50: return(doorState);
 11044                           
 11045                           ;incstack = 0
 11046                           ; Regs used in _DOOR_run: [wreg]
 11047  12AE  0021               	movlb	1	; select bank1
 11048  12AF  0859               	movf	_doorState^(0+128),w
 11049  12B0  0008               	return
 11050  12B1                     __end_of_DOOR_run:	
 11051                           
 11052                           	psect	text60
 11053  0003                     __ptext60:	
 11054 ;; *************** function _DOOR_init *****************
 11055 ;; Defined at:
 11056 ;;		line 10 in file "doorlogic.c"
 11057 ;; Parameters:    Size  Location     Type
 11058 ;;		None
 11059 ;; Auto vars:     Size  Location     Type
 11060 ;;		None
 11061 ;; Return value:  Size  Location     Type
 11062 ;;                  1    wreg      void 
 11063 ;; Registers used:
 11064 ;;		None
 11065 ;; Tracked objects:
 11066 ;;		On entry : 0/0
 11067 ;;		On exit  : 0/0
 11068 ;;		Unchanged: 0/0
 11069 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11070 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11071 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11072 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11073 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11074 ;;Total ram usage:        0 bytes
 11075 ;; Hardware stack levels used:    1
 11076 ;; Hardware stack levels required when called:    4
 11077 ;; This function calls:
 11078 ;;		Nothing
 11079 ;; This function is called by:
 11080 ;;		_main
 11081 ;; This function uses a non-reentrant model
 11082 ;;
 11083                           
 11084                           
 11085                           ;psect for function _DOOR_init
 11086  0003                     _DOOR_init:	
 11087                           
 11088                           ;incstack = 0
 11089                           ; Regs used in _DOOR_init: []
 11090  0003  0008               	return
 11091  0004                     __end_of_DOOR_init:	
 11092                           
 11093                           	psect	text61
 11094  0077                     __ptext61:	
 11095 ;; *************** function _BMP_readTemperature *****************
 11096 ;; Defined at:
 11097 ;;		line 72 in file "bmp280.c"
 11098 ;; Parameters:    Size  Location     Type
 11099 ;;		None
 11100 ;; Auto vars:     Size  Location     Type
 11101 ;;  tmp             1   25[BANK1 ] unsigned char 
 11102 ;;  status          1   24[BANK1 ] unsigned char 
 11103 ;; Return value:  Size  Location     Type
 11104 ;;                  3    6[BANK1 ] float 
 11105 ;; Registers used:
 11106 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11107 ;; Tracked objects:
 11108 ;;		On entry : 0/0
 11109 ;;		On exit  : 0/0
 11110 ;;		Unchanged: 0/0
 11111 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11112 ;;      Params:         0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0
 11113 ;;      Locals:         0       0       5       0       0       0       0       0       0       0       0       0       
      +0       0
 11114 ;;      Temps:          0       0      12       0       0       0       0       0       0       0       0       0       
      +0       0
 11115 ;;      Totals:         0       0      20       0       0       0       0       0       0       0       0       0       
      +0       0
 11116 ;;Total ram usage:       20 bytes
 11117 ;; Hardware stack levels used:    1
 11118 ;; Hardware stack levels required when called:    9
 11119 ;; This function calls:
 11120 ;;		_BMP_init
 11121 ;;		_Diag_getTempSensorHealth
 11122 ;;		_Diag_setTempSensorHealth
 11123 ;;		_HMC5883L_ReadBits
 11124 ;;		_I2C_BufferRead
 11125 ;;		_I2C_ByteWrite
 11126 ;;		___aldiv
 11127 ;;		___altoft
 11128 ;;		___awtoft
 11129 ;;		___ftadd
 11130 ;;		___ftdiv
 11131 ;;		___ftmul
 11132 ;;		___ftneg
 11133 ;;		___fttol
 11134 ;;		___lwtoft
 11135 ;; This function is called by:
 11136 ;;		_main
 11137 ;; This function uses a non-reentrant model
 11138 ;;
 11139                           
 11140                           
 11141                           ;psect for function _BMP_readTemperature
 11142  0077                     _BMP_readTemperature:	
 11143                           
 11144                           ;bmp280.c: 74: char tmp=0;
 11145                           
 11146                           ;incstack = 0
 11147                           ; Regs used in _BMP_readTemperature: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 11148  0077  0021               	movlb	1	; select bank1
 11149  0078  01B9               	clrf	BMP_readTemperature@tmp^(0+128)
 11150                           
 11151                           ;bmp280.c: 75: bool status;
 11152                           ;bmp280.c: 77: tmp=0x41;
 11153  0079  3041               	movlw	65
 11154  007A  00A9               	movwf	??_BMP_readTemperature^(0+128)
 11155  007B  0829               	movf	??_BMP_readTemperature^(0+128),w
 11156  007C  00B9               	movwf	BMP_readTemperature@tmp^(0+128)
 11157                           
 11158                           ;bmp280.c: 78: if(Diag_getTempSensorHealth()==0)
 11159  007D  3192  22AB  3180   	fcall	_Diag_getTempSensorHealth
 11160  0080  3A00               	xorlw	0
 11161  0081  1D03               	skipz
 11162  0082  2886               	goto	l1026
 11163                           
 11164                           ;bmp280.c: 79: {
 11165                           ;bmp280.c: 80: BMP_init();
 11166  0083  318B  231A  3180   	fcall	_BMP_init
 11167  0086                     l1026:	
 11168                           
 11169                           ;bmp280.c: 81: }
 11170                           ;bmp280.c: 82: I2C_ByteWrite(0x76, &tmp, 0xF4);
 11171  0086  30B9               	movlw	(low (BMP_readTemperature@tmp| 0))& (0+255)
 11172  0087  0021               	movlb	1	; select bank1
 11173  0088  00A9               	movwf	??_BMP_readTemperature^(0+128)
 11174  0089  0829               	movf	??_BMP_readTemperature^(0+128),w
 11175  008A  0020               	movlb	0	; select bank0
 11176  008B  00AF               	movwf	I2C_ByteWrite@pBuffer
 11177  008C  30F4               	movlw	244
 11178  008D  0021               	movlb	1	; select bank1
 11179  008E  00AA               	movwf	(??_BMP_readTemperature+1)^(0+128)
 11180  008F  082A               	movf	(??_BMP_readTemperature+1)^(0+128),w
 11181  0090  0020               	movlb	0	; select bank0
 11182  0091  00B0               	movwf	I2C_ByteWrite@WriteAddr
 11183  0092  3076               	movlw	118
 11184  0093  3188  2000  3180   	fcall	_I2C_ByteWrite
 11185  0096                     l1027:	
 11186                           ;bmp280.c: 83: do
 11187                           
 11188                           
 11189                           ;bmp280.c: 84: {
 11190                           ;bmp280.c: 85: status=HMC5883L_ReadBits(0x76, 0xF3 , 3, 1, &tmp);
 11191  0096  30F3               	movlw	243
 11192  0097  0021               	movlb	1	; select bank1
 11193  0098  00A9               	movwf	??_BMP_readTemperature^(0+128)
 11194  0099  0829               	movf	??_BMP_readTemperature^(0+128),w
 11195  009A  0020               	movlb	0	; select bank0
 11196  009B  00C3               	movwf	HMC5883L_ReadBits@regAddr
 11197  009C  3003               	movlw	3
 11198  009D  0021               	movlb	1	; select bank1
 11199  009E  00AA               	movwf	(??_BMP_readTemperature+1)^(0+128)
 11200  009F  082A               	movf	(??_BMP_readTemperature+1)^(0+128),w
 11201  00A0  0020               	movlb	0	; select bank0
 11202  00A1  00C4               	movwf	HMC5883L_ReadBits@bitStart
 11203  00A2  01C5               	clrf	HMC5883L_ReadBits@length
 11204  00A3  0AC5               	incf	HMC5883L_ReadBits@length,f
 11205  00A4  30B9               	movlw	(low (BMP_readTemperature@tmp| 0))& (0+255)
 11206  00A5  0021               	movlb	1	; select bank1
 11207  00A6  00AB               	movwf	(??_BMP_readTemperature+2)^(0+128)
 11208  00A7  082B               	movf	(??_BMP_readTemperature+2)^(0+128),w
 11209  00A8  0020               	movlb	0	; select bank0
 11210  00A9  00C6               	movwf	HMC5883L_ReadBits@data
 11211  00AA  3076               	movlw	118
 11212  00AB  3188  20BE  3180   	fcall	_HMC5883L_ReadBits
 11213  00AE  0021               	movlb	1	; select bank1
 11214  00AF  00AC               	movwf	(??_BMP_readTemperature+3)^(0+128)
 11215  00B0  082C               	movf	(??_BMP_readTemperature+3)^(0+128),w
 11216  00B1  00B8               	movwf	BMP_readTemperature@status^(0+128)
 11217                           
 11218                           ;bmp280.c: 86: } while(tmp==0 && status==1);
 11219  00B2  0839               	movf	BMP_readTemperature@tmp^(0+128),w
 11220  00B3  1903               	btfsc	3,2
 11221  00B4  0338               	decf	BMP_readTemperature@status^(0+128),w
 11222  00B5  1903               	btfsc	3,2
 11223  00B6  2896               	goto	l1027
 11224                           
 11225                           ;bmp280.c: 87: if(status==0)
 11226  00B7  0838               	movf	BMP_readTemperature@status^(0+128),w
 11227  00B8  1D03               	btfss	3,2
 11228  00B9  28C5               	goto	l6489
 11229                           
 11230                           ;bmp280.c: 88: {
 11231                           ;bmp280.c: 89: Diag_setTempSensorHealth(0);
 11232  00BA  3000               	movlw	0
 11233  00BB  3193  2307         	fcall	_Diag_setTempSensorHealth
 11234                           
 11235                           ;bmp280.c: 90: return -55;
 11236  00BD  3000               	movlw	0
 11237  00BE  0021               	movlb	1	; select bank1
 11238  00BF  00A6               	movwf	?_BMP_readTemperature^(0+128)
 11239  00C0  305C               	movlw	92
 11240  00C1  00A7               	movwf	(?_BMP_readTemperature+1)^(0+128)
 11241  00C2  30C2               	movlw	194
 11242  00C3  00A8               	movwf	(?_BMP_readTemperature+2)^(0+128)
 11243  00C4  0008               	return
 11244  00C5                     l6489:	
 11245                           
 11246                           ;bmp280.c: 91: }
 11247                           ;bmp280.c: 93: if(I2C_BufferRead(0x76, data, 0xF7, 8)==0)
 11248  00C5  30C0               	movlw	low _data
 11249  00C6  0020               	movlb	0	; select bank0
 11250  00C7  00B1               	movwf	I2C_BufferRead@pBuffer
 11251  00C8  3001               	movlw	high _data
 11252  00C9  00B2               	movwf	I2C_BufferRead@pBuffer+1
 11253  00CA  30F7               	movlw	247
 11254  00CB  0021               	movlb	1	; select bank1
 11255  00CC  00A9               	movwf	??_BMP_readTemperature^(0+128)
 11256  00CD  0829               	movf	??_BMP_readTemperature^(0+128),w
 11257  00CE  0020               	movlb	0	; select bank0
 11258  00CF  00B3               	movwf	I2C_BufferRead@ReadAddr
 11259  00D0  3008               	movlw	8
 11260  00D1  00B4               	movwf	I2C_BufferRead@NumByteToRead
 11261  00D2  3000               	movlw	0
 11262  00D3  00B5               	movwf	I2C_BufferRead@NumByteToRead+1
 11263  00D4  3076               	movlw	118
 11264  00D5  3189  21F9  3180   	fcall	_I2C_BufferRead
 11265  00D8  3A00               	xorlw	0
 11266  00D9  1D03               	skipz
 11267  00DA  28E6               	goto	l6497
 11268                           
 11269                           ;bmp280.c: 94: {
 11270                           ;bmp280.c: 95: Diag_setTempSensorHealth(0);
 11271  00DB  3000               	movlw	0
 11272  00DC  3193  2307         	fcall	_Diag_setTempSensorHealth
 11273                           
 11274                           ;bmp280.c: 96: return -55;
 11275  00DE  3000               	movlw	0
 11276  00DF  0021               	movlb	1	; select bank1
 11277  00E0  00A6               	movwf	?_BMP_readTemperature^(0+128)
 11278  00E1  305C               	movlw	92
 11279  00E2  00A7               	movwf	(?_BMP_readTemperature+1)^(0+128)
 11280  00E3  30C2               	movlw	194
 11281  00E4  00A8               	movwf	(?_BMP_readTemperature+2)^(0+128)
 11282  00E5  0008               	return
 11283  00E6                     l6497:	
 11284                           
 11285                           ;bmp280.c: 97: }
 11286                           ;bmp280.c: 101: adc_t = (((long)(data[3] & 0xFF) * 65536) + ((long)(data[4] & 0xFF) * 25
      +                          6) + (long)(data[5] & 0xF0)) / 16;
 11287  00E6  3000               	movlw	0
 11288  00E7  0020               	movlb	0	; select bank0
 11289  00E8  00A4               	movwf	___aldiv@divisor+3
 11290  00E9  3000               	movlw	0
 11291  00EA  00A3               	movwf	___aldiv@divisor+2
 11292  00EB  3000               	movlw	0
 11293  00EC  00A2               	movwf	___aldiv@divisor+1
 11294  00ED  3010               	movlw	16
 11295  00EE  00A1               	movwf	___aldiv@divisor
 11296  00EF  0023               	movlb	3	; select bank3
 11297  00F0  0845               	movf	(_data^(0+384)+5),w
 11298  00F1  39F0               	andlw	240
 11299  00F2  0021               	movlb	1	; select bank1
 11300  00F3  00A9               	movwf	??_BMP_readTemperature^(0+128)
 11301  00F4  01AA               	clrf	(??_BMP_readTemperature^(0+128)+1)
 11302  00F5  01AB               	clrf	(??_BMP_readTemperature^(0+128)+2)
 11303  00F6  01AC               	clrf	(??_BMP_readTemperature^(0+128)+3)
 11304  00F7  0023               	movlb	3	; select bank3
 11305  00F8  0844               	movf	(_data^(0+384)+4),w
 11306  00F9  0021               	movlb	1	; select bank1
 11307  00FA  00AD               	movwf	(??_BMP_readTemperature+4)^(0+128)
 11308  00FB  01AE               	clrf	((??_BMP_readTemperature+4)^(0+128)+1)
 11309  00FC  01AF               	clrf	((??_BMP_readTemperature+4)^(0+128)+2)
 11310  00FD  01B0               	clrf	((??_BMP_readTemperature+4)^(0+128)+3)
 11311  00FE  3008               	movlw	8
 11312  00FF                     u6405:	
 11313  00FF  35AD               	lslf	(??_BMP_readTemperature+4)^(0+128),f
 11314  0100  0DAE               	rlf	((??_BMP_readTemperature+4)^(0+128)+1),f
 11315  0101  0DAF               	rlf	((??_BMP_readTemperature+4)^(0+128)+2),f
 11316  0102  0DB0               	rlf	((??_BMP_readTemperature+4)^(0+128)+3),f
 11317  0103  0B89               	decfsz	9,f
 11318  0104  28FF               	goto	u6405
 11319  0105  0023               	movlb	3	; select bank3
 11320  0106  0843               	movf	(_data^(0+384)+3),w
 11321  0107  0021               	movlb	1	; select bank1
 11322  0108  00B1               	movwf	(??_BMP_readTemperature+8)^(0+128)
 11323  0109  01B2               	clrf	((??_BMP_readTemperature+8)^(0+128)+1)
 11324  010A  01B3               	clrf	((??_BMP_readTemperature+8)^(0+128)+2)
 11325  010B  01B4               	clrf	((??_BMP_readTemperature+8)^(0+128)+3)
 11326  010C  3010               	movlw	16
 11327  010D                     u6415:	
 11328  010D  35B1               	lslf	(??_BMP_readTemperature+8)^(0+128),f
 11329  010E  0DB2               	rlf	((??_BMP_readTemperature+8)^(0+128)+1),f
 11330  010F  0DB3               	rlf	((??_BMP_readTemperature+8)^(0+128)+2),f
 11331  0110  0DB4               	rlf	((??_BMP_readTemperature+8)^(0+128)+3),f
 11332  0111  0B89               	decfsz	9,f
 11333  0112  290D               	goto	u6415
 11334  0113  0831               	movf	(??_BMP_readTemperature+8)^(0+128),w
 11335  0114  07AD               	addwf	(??_BMP_readTemperature+4)^(0+128),f
 11336  0115  0832               	movf	(??_BMP_readTemperature+9)^(0+128),w
 11337  0116  3DAE               	addwfc	((??_BMP_readTemperature+4)^(0+128)+1),f
 11338  0117  0833               	movf	(??_BMP_readTemperature+10)^(0+128),w
 11339  0118  3DAF               	addwfc	((??_BMP_readTemperature+4)^(0+128)+2),f
 11340  0119  0834               	movf	(??_BMP_readTemperature+11)^(0+128),w
 11341  011A  3DB0               	addwfc	((??_BMP_readTemperature+4)^(0+128)+3),f
 11342  011B  082D               	movf	(??_BMP_readTemperature+4)^(0+128),w
 11343  011C  07A9               	addwf	??_BMP_readTemperature^(0+128),f
 11344  011D  082E               	movf	(??_BMP_readTemperature+5)^(0+128),w
 11345  011E  3DAA               	addwfc	(??_BMP_readTemperature^(0+128)+1),f
 11346  011F  082F               	movf	(??_BMP_readTemperature+6)^(0+128),w
 11347  0120  3DAB               	addwfc	(??_BMP_readTemperature^(0+128)+2),f
 11348  0121  0830               	movf	(??_BMP_readTemperature+7)^(0+128),w
 11349  0122  3DAC               	addwfc	(??_BMP_readTemperature^(0+128)+3),f
 11350  0123  082C               	movf	(??_BMP_readTemperature+3)^(0+128),w
 11351  0124  0020               	movlb	0	; select bank0
 11352  0125  00A8               	movwf	___aldiv@dividend+3
 11353  0126  0021               	movlb	1	; select bank1
 11354  0127  082B               	movf	(??_BMP_readTemperature+2)^(0+128),w
 11355  0128  0020               	movlb	0	; select bank0
 11356  0129  00A7               	movwf	___aldiv@dividend+2
 11357  012A  0021               	movlb	1	; select bank1
 11358  012B  082A               	movf	(??_BMP_readTemperature+1)^(0+128),w
 11359  012C  0020               	movlb	0	; select bank0
 11360  012D  00A6               	movwf	___aldiv@dividend+1
 11361  012E  0021               	movlb	1	; select bank1
 11362  012F  0829               	movf	??_BMP_readTemperature^(0+128),w
 11363  0130  0020               	movlb	0	; select bank0
 11364  0131  00A5               	movwf	___aldiv@dividend
 11365  0132  3187  277B  3180   	fcall	___aldiv
 11366  0135  0020               	movlb	0	; select bank0
 11367  0136  0824               	movf	?___aldiv+3,w
 11368  0137  0022               	movlb	2	; select bank2
 11369  0138  00A7               	movwf	(_adc_t+3)^(0+256)
 11370  0139  0020               	movlb	0	; select bank0
 11371  013A  0823               	movf	?___aldiv+2,w
 11372  013B  0022               	movlb	2	; select bank2
 11373  013C  00A6               	movwf	(_adc_t+2)^(0+256)
 11374  013D  0020               	movlb	0	; select bank0
 11375  013E  0822               	movf	?___aldiv+1,w
 11376  013F  0022               	movlb	2	; select bank2
 11377  0140  00A5               	movwf	(_adc_t+1)^(0+256)
 11378  0141  0020               	movlb	0	; select bank0
 11379  0142  0821               	movf	?___aldiv,w
 11380  0143  0022               	movlb	2	; select bank2
 11381  0144  00A4               	movwf	_adc_t^(0+256)
 11382                           
 11383                           ;bmp280.c: 104: var1 = (((double)adc_t) / 16384.0 - ((double)dig_T1) / 1024.0) * ((doubl
      +                          e)dig_T2);
 11384  0145  0857               	movf	(_dig_T2+1)^(0+256),w
 11385  0146  0020               	movlb	0	; select bank0
 11386  0147  00AA               	movwf	___awtoft@c+1
 11387  0148  0022               	movlb	2	; select bank2
 11388  0149  0856               	movf	_dig_T2^(0+256),w
 11389  014A  0020               	movlb	0	; select bank0
 11390  014B  00A9               	movwf	___awtoft@c
 11391  014C  3196  2664  3180   	fcall	___awtoft
 11392  014F  0020               	movlb	0	; select bank0
 11393  0150  0829               	movf	?___awtoft,w
 11394  0151  00D6               	movwf	___ftmul@f1
 11395  0152  082A               	movf	?___awtoft+1,w
 11396  0153  00D7               	movwf	___ftmul@f1+1
 11397  0154  082B               	movf	?___awtoft+2,w
 11398  0155  00D8               	movwf	___ftmul@f1+2
 11399  0156  0021               	movlb	1	; select bank1
 11400  0157  0854               	movf	(_dig_T1+1)^(0+128),w
 11401  0158  0020               	movlb	0	; select bank0
 11402  0159  00AA               	movwf	___lwtoft@c+1
 11403  015A  0021               	movlb	1	; select bank1
 11404  015B  0853               	movf	_dig_T1^(0+128),w
 11405  015C  0020               	movlb	0	; select bank0
 11406  015D  00A9               	movwf	___lwtoft@c
 11407  015E  3194  2403  3180   	fcall	___lwtoft
 11408  0161  0020               	movlb	0	; select bank0
 11409  0162  0829               	movf	?___lwtoft,w
 11410  0163  00B4               	movwf	___ftdiv@f1
 11411  0164  082A               	movf	?___lwtoft+1,w
 11412  0165  00B5               	movwf	___ftdiv@f1+1
 11413  0166  082B               	movf	?___lwtoft+2,w
 11414  0167  00B6               	movwf	___ftdiv@f1+2
 11415  0168  3000               	movlw	0
 11416  0169  00B1               	movwf	___ftdiv@f2
 11417  016A  3080               	movlw	128
 11418  016B  00B2               	movwf	___ftdiv@f2+1
 11419  016C  3044               	movlw	68
 11420  016D  00B3               	movwf	___ftdiv@f2+2
 11421  016E  318D  25C7  3180   	fcall	___ftdiv
 11422  0171  0020               	movlb	0	; select bank0
 11423  0172  0831               	movf	?___ftdiv,w
 11424  0173  00C1               	movwf	___ftneg@f1
 11425  0174  0832               	movf	?___ftdiv+1,w
 11426  0175  00C2               	movwf	___ftneg@f1+1
 11427  0176  0833               	movf	?___ftdiv+2,w
 11428  0177  00C3               	movwf	___ftneg@f1+2
 11429  0178  3193  2328  3180   	fcall	___ftneg
 11430  017B  0020               	movlb	0	; select bank0
 11431  017C  0841               	movf	?___ftneg,w
 11432  017D  00C9               	movwf	___ftadd@f1
 11433  017E  0842               	movf	?___ftneg+1,w
 11434  017F  00CA               	movwf	___ftadd@f1+1
 11435  0180  0843               	movf	?___ftneg+2,w
 11436  0181  00CB               	movwf	___ftadd@f1+2
 11437  0182  3000               	movlw	0
 11438  0183  00B1               	movwf	___ftdiv@f2
 11439  0184  3080               	movlw	128
 11440  0185  00B2               	movwf	___ftdiv@f2+1
 11441  0186  3046               	movlw	70
 11442  0187  00B3               	movwf	___ftdiv@f2+2
 11443  0188  0022               	movlb	2	; select bank2
 11444  0189  0827               	movf	(_adc_t+3)^(0+256),w
 11445  018A  0020               	movlb	0	; select bank0
 11446  018B  00AC               	movwf	___altoft@c+3
 11447  018C  0022               	movlb	2	; select bank2
 11448  018D  0826               	movf	(_adc_t+2)^(0+256),w
 11449  018E  0020               	movlb	0	; select bank0
 11450  018F  00AB               	movwf	___altoft@c+2
 11451  0190  0022               	movlb	2	; select bank2
 11452  0191  0825               	movf	(_adc_t+1)^(0+256),w
 11453  0192  0020               	movlb	0	; select bank0
 11454  0193  00AA               	movwf	___altoft@c+1
 11455  0194  0022               	movlb	2	; select bank2
 11456  0195  0824               	movf	_adc_t^(0+256),w
 11457  0196  0020               	movlb	0	; select bank0
 11458  0197  00A9               	movwf	___altoft@c
 11459  0198  3188  203C  3180   	fcall	___altoft
 11460  019B  0020               	movlb	0	; select bank0
 11461  019C  0829               	movf	?___altoft,w
 11462  019D  00B4               	movwf	___ftdiv@f1
 11463  019E  082A               	movf	?___altoft+1,w
 11464  019F  00B5               	movwf	___ftdiv@f1+1
 11465  01A0  082B               	movf	?___altoft+2,w
 11466  01A1  00B6               	movwf	___ftdiv@f1+2
 11467  01A2  318D  25C7  3180   	fcall	___ftdiv
 11468  01A5  0020               	movlb	0	; select bank0
 11469  01A6  0831               	movf	?___ftdiv,w
 11470  01A7  00CC               	movwf	___ftadd@f2
 11471  01A8  0832               	movf	?___ftdiv+1,w
 11472  01A9  00CD               	movwf	___ftadd@f2+1
 11473  01AA  0833               	movf	?___ftdiv+2,w
 11474  01AB  00CE               	movwf	___ftadd@f2+2
 11475  01AC  3186  2685  3180   	fcall	___ftadd
 11476  01AF  0020               	movlb	0	; select bank0
 11477  01B0  0849               	movf	?___ftadd,w
 11478  01B1  00D9               	movwf	___ftmul@f2
 11479  01B2  084A               	movf	?___ftadd+1,w
 11480  01B3  00DA               	movwf	___ftmul@f2+1
 11481  01B4  084B               	movf	?___ftadd+2,w
 11482  01B5  00DB               	movwf	___ftmul@f2+2
 11483  01B6  318E  2670  3180   	fcall	___ftmul
 11484  01B9  0020               	movlb	0	; select bank0
 11485  01BA  0856               	movf	?___ftmul,w
 11486  01BB  0022               	movlb	2	; select bank2
 11487  01BC  00B4               	movwf	_var1^(0+256)
 11488  01BD  0020               	movlb	0	; select bank0
 11489  01BE  0857               	movf	?___ftmul+1,w
 11490  01BF  0022               	movlb	2	; select bank2
 11491  01C0  00B5               	movwf	(_var1+1)^(0+256)
 11492  01C1  0020               	movlb	0	; select bank0
 11493  01C2  0858               	movf	?___ftmul+2,w
 11494  01C3  0022               	movlb	2	; select bank2
 11495  01C4  00B6               	movwf	(_var1+2)^(0+256)
 11496                           
 11497                           ;bmp280.c: 105: var2 = ((((double)adc_t) / 131072.0 - ((double)dig_T1) / 8192.0) *
 11498                           ;bmp280.c: 106: (((double)adc_t) / 131072.0 - ((double)dig_T1) / 8192.0)) * ((double)dig
      +                          _T3);
 11499  01C5  0021               	movlb	1	; select bank1
 11500  01C6  0854               	movf	(_dig_T1+1)^(0+128),w
 11501  01C7  0020               	movlb	0	; select bank0
 11502  01C8  00AA               	movwf	___lwtoft@c+1
 11503  01C9  0021               	movlb	1	; select bank1
 11504  01CA  0853               	movf	_dig_T1^(0+128),w
 11505  01CB  0020               	movlb	0	; select bank0
 11506  01CC  00A9               	movwf	___lwtoft@c
 11507  01CD  3194  2403  3180   	fcall	___lwtoft
 11508  01D0  0020               	movlb	0	; select bank0
 11509  01D1  0829               	movf	?___lwtoft,w
 11510  01D2  00B4               	movwf	___ftdiv@f1
 11511  01D3  082A               	movf	?___lwtoft+1,w
 11512  01D4  00B5               	movwf	___ftdiv@f1+1
 11513  01D5  082B               	movf	?___lwtoft+2,w
 11514  01D6  00B6               	movwf	___ftdiv@f1+2
 11515  01D7  3000               	movlw	0
 11516  01D8  00B1               	movwf	___ftdiv@f2
 11517  01D9  3000               	movlw	0
 11518  01DA  00B2               	movwf	___ftdiv@f2+1
 11519  01DB  3046               	movlw	70
 11520  01DC  00B3               	movwf	___ftdiv@f2+2
 11521  01DD  318D  25C7  3180   	fcall	___ftdiv
 11522  01E0  0020               	movlb	0	; select bank0
 11523  01E1  0831               	movf	?___ftdiv,w
 11524  01E2  00C1               	movwf	___ftneg@f1
 11525  01E3  0832               	movf	?___ftdiv+1,w
 11526  01E4  00C2               	movwf	___ftneg@f1+1
 11527  01E5  0833               	movf	?___ftdiv+2,w
 11528  01E6  00C3               	movwf	___ftneg@f1+2
 11529  01E7  3193  2328  3180   	fcall	___ftneg
 11530  01EA  0020               	movlb	0	; select bank0
 11531  01EB  0841               	movf	?___ftneg,w
 11532  01EC  00C9               	movwf	___ftadd@f1
 11533  01ED  0842               	movf	?___ftneg+1,w
 11534  01EE  00CA               	movwf	___ftadd@f1+1
 11535  01EF  0843               	movf	?___ftneg+2,w
 11536  01F0  00CB               	movwf	___ftadd@f1+2
 11537  01F1  3000               	movlw	0
 11538  01F2  00B1               	movwf	___ftdiv@f2
 11539  01F3  3000               	movlw	0
 11540  01F4  00B2               	movwf	___ftdiv@f2+1
 11541  01F5  3048               	movlw	72
 11542  01F6  00B3               	movwf	___ftdiv@f2+2
 11543  01F7  0022               	movlb	2	; select bank2
 11544  01F8  0827               	movf	(_adc_t+3)^(0+256),w
 11545  01F9  0020               	movlb	0	; select bank0
 11546  01FA  00AC               	movwf	___altoft@c+3
 11547  01FB  0022               	movlb	2	; select bank2
 11548  01FC  0826               	movf	(_adc_t+2)^(0+256),w
 11549  01FD  0020               	movlb	0	; select bank0
 11550  01FE  00AB               	movwf	___altoft@c+2
 11551  01FF  0022               	movlb	2	; select bank2
 11552  0200  0825               	movf	(_adc_t+1)^(0+256),w
 11553  0201  0020               	movlb	0	; select bank0
 11554  0202  00AA               	movwf	___altoft@c+1
 11555  0203  0022               	movlb	2	; select bank2
 11556  0204  0824               	movf	_adc_t^(0+256),w
 11557  0205  0020               	movlb	0	; select bank0
 11558  0206  00A9               	movwf	___altoft@c
 11559  0207  3188  203C  3180   	fcall	___altoft
 11560  020A  0020               	movlb	0	; select bank0
 11561  020B  0829               	movf	?___altoft,w
 11562  020C  00B4               	movwf	___ftdiv@f1
 11563  020D  082A               	movf	?___altoft+1,w
 11564  020E  00B5               	movwf	___ftdiv@f1+1
 11565  020F  082B               	movf	?___altoft+2,w
 11566  0210  00B6               	movwf	___ftdiv@f1+2
 11567  0211  318D  25C7  3180   	fcall	___ftdiv
 11568  0214  0020               	movlb	0	; select bank0
 11569  0215  0831               	movf	?___ftdiv,w
 11570  0216  00CC               	movwf	___ftadd@f2
 11571  0217  0832               	movf	?___ftdiv+1,w
 11572  0218  00CD               	movwf	___ftadd@f2+1
 11573  0219  0833               	movf	?___ftdiv+2,w
 11574  021A  00CE               	movwf	___ftadd@f2+2
 11575  021B  3186  2685  3180   	fcall	___ftadd
 11576  021E  0020               	movlb	0	; select bank0
 11577  021F  0849               	movf	?___ftadd,w
 11578  0220  00D6               	movwf	___ftmul@f1
 11579  0221  084A               	movf	?___ftadd+1,w
 11580  0222  00D7               	movwf	___ftmul@f1+1
 11581  0223  084B               	movf	?___ftadd+2,w
 11582  0224  00D8               	movwf	___ftmul@f1+2
 11583  0225  0021               	movlb	1	; select bank1
 11584  0226  0854               	movf	(_dig_T1+1)^(0+128),w
 11585  0227  0020               	movlb	0	; select bank0
 11586  0228  00AA               	movwf	___lwtoft@c+1
 11587  0229  0021               	movlb	1	; select bank1
 11588  022A  0853               	movf	_dig_T1^(0+128),w
 11589  022B  0020               	movlb	0	; select bank0
 11590  022C  00A9               	movwf	___lwtoft@c
 11591  022D  3194  2403  3180   	fcall	___lwtoft
 11592  0230  0020               	movlb	0	; select bank0
 11593  0231  0829               	movf	?___lwtoft,w
 11594  0232  00B4               	movwf	___ftdiv@f1
 11595  0233  082A               	movf	?___lwtoft+1,w
 11596  0234  00B5               	movwf	___ftdiv@f1+1
 11597  0235  082B               	movf	?___lwtoft+2,w
 11598  0236  00B6               	movwf	___ftdiv@f1+2
 11599  0237  3000               	movlw	0
 11600  0238  00B1               	movwf	___ftdiv@f2
 11601  0239  3000               	movlw	0
 11602  023A  00B2               	movwf	___ftdiv@f2+1
 11603  023B  3046               	movlw	70
 11604  023C  00B3               	movwf	___ftdiv@f2+2
 11605  023D  318D  25C7  3180   	fcall	___ftdiv
 11606  0240  0020               	movlb	0	; select bank0
 11607  0241  0831               	movf	?___ftdiv,w
 11608  0242  00C1               	movwf	___ftneg@f1
 11609  0243  0832               	movf	?___ftdiv+1,w
 11610  0244  00C2               	movwf	___ftneg@f1+1
 11611  0245  0833               	movf	?___ftdiv+2,w
 11612  0246  00C3               	movwf	___ftneg@f1+2
 11613  0247  3193  2328  3180   	fcall	___ftneg
 11614  024A  0020               	movlb	0	; select bank0
 11615  024B  0841               	movf	?___ftneg,w
 11616  024C  00C9               	movwf	___ftadd@f1
 11617  024D  0842               	movf	?___ftneg+1,w
 11618  024E  00CA               	movwf	___ftadd@f1+1
 11619  024F  0843               	movf	?___ftneg+2,w
 11620  0250  00CB               	movwf	___ftadd@f1+2
 11621  0251  3000               	movlw	0
 11622  0252  00B1               	movwf	___ftdiv@f2
 11623  0253  3000               	movlw	0
 11624  0254  00B2               	movwf	___ftdiv@f2+1
 11625  0255  3048               	movlw	72
 11626  0256  00B3               	movwf	___ftdiv@f2+2
 11627  0257  0022               	movlb	2	; select bank2
 11628  0258  0827               	movf	(_adc_t+3)^(0+256),w
 11629  0259  0020               	movlb	0	; select bank0
 11630  025A  00AC               	movwf	___altoft@c+3
 11631  025B  0022               	movlb	2	; select bank2
 11632  025C  0826               	movf	(_adc_t+2)^(0+256),w
 11633  025D  0020               	movlb	0	; select bank0
 11634  025E  00AB               	movwf	___altoft@c+2
 11635  025F  0022               	movlb	2	; select bank2
 11636  0260  0825               	movf	(_adc_t+1)^(0+256),w
 11637  0261  0020               	movlb	0	; select bank0
 11638  0262  00AA               	movwf	___altoft@c+1
 11639  0263  0022               	movlb	2	; select bank2
 11640  0264  0824               	movf	_adc_t^(0+256),w
 11641  0265  0020               	movlb	0	; select bank0
 11642  0266  00A9               	movwf	___altoft@c
 11643  0267  3188  203C  3180   	fcall	___altoft
 11644  026A  0020               	movlb	0	; select bank0
 11645  026B  0829               	movf	?___altoft,w
 11646  026C  00B4               	movwf	___ftdiv@f1
 11647  026D  082A               	movf	?___altoft+1,w
 11648  026E  00B5               	movwf	___ftdiv@f1+1
 11649  026F  082B               	movf	?___altoft+2,w
 11650  0270  00B6               	movwf	___ftdiv@f1+2
 11651  0271  318D  25C7  3180   	fcall	___ftdiv
 11652  0274  0020               	movlb	0	; select bank0
 11653  0275  0831               	movf	?___ftdiv,w
 11654  0276  00CC               	movwf	___ftadd@f2
 11655  0277  0832               	movf	?___ftdiv+1,w
 11656  0278  00CD               	movwf	___ftadd@f2+1
 11657  0279  0833               	movf	?___ftdiv+2,w
 11658  027A  00CE               	movwf	___ftadd@f2+2
 11659  027B  3186  2685  3180   	fcall	___ftadd
 11660  027E  0020               	movlb	0	; select bank0
 11661  027F  0849               	movf	?___ftadd,w
 11662  0280  00D9               	movwf	___ftmul@f2
 11663  0281  084A               	movf	?___ftadd+1,w
 11664  0282  00DA               	movwf	___ftmul@f2+1
 11665  0283  084B               	movf	?___ftadd+2,w
 11666  0284  00DB               	movwf	___ftmul@f2+2
 11667  0285  318E  2670  3180   	fcall	___ftmul
 11668  0288  0020               	movlb	0	; select bank0
 11669  0289  0856               	movf	?___ftmul,w
 11670  028A  0021               	movlb	1	; select bank1
 11671  028B  00B5               	movwf	_BMP_readTemperature$2648^(0+128)
 11672  028C  0020               	movlb	0	; select bank0
 11673  028D  0857               	movf	?___ftmul+1,w
 11674  028E  0021               	movlb	1	; select bank1
 11675  028F  00B6               	movwf	(_BMP_readTemperature$2648+1)^(0+128)
 11676  0290  0020               	movlb	0	; select bank0
 11677  0291  0858               	movf	?___ftmul+2,w
 11678  0292  0021               	movlb	1	; select bank1
 11679  0293  00B7               	movwf	(_BMP_readTemperature$2648+2)^(0+128)
 11680                           
 11681                           ;bmp280.c: 105: var2 = ((((double)adc_t) / 131072.0 - ((double)dig_T1) / 8192.0) *
 11682                           ;bmp280.c: 106: (((double)adc_t) / 131072.0 - ((double)dig_T1) / 8192.0)) * ((double)dig
      +                          _T3);
 11683  0294  0022               	movlb	2	; select bank2
 11684  0295  0855               	movf	(_dig_T3+1)^(0+256),w
 11685  0296  0020               	movlb	0	; select bank0
 11686  0297  00AA               	movwf	___awtoft@c+1
 11687  0298  0022               	movlb	2	; select bank2
 11688  0299  0854               	movf	_dig_T3^(0+256),w
 11689  029A  0020               	movlb	0	; select bank0
 11690  029B  00A9               	movwf	___awtoft@c
 11691  029C  3196  2664  3180   	fcall	___awtoft
 11692  029F  0020               	movlb	0	; select bank0
 11693  02A0  0829               	movf	?___awtoft,w
 11694  02A1  00D6               	movwf	___ftmul@f1
 11695  02A2  082A               	movf	?___awtoft+1,w
 11696  02A3  00D7               	movwf	___ftmul@f1+1
 11697  02A4  082B               	movf	?___awtoft+2,w
 11698  02A5  00D8               	movwf	___ftmul@f1+2
 11699  02A6  0021               	movlb	1	; select bank1
 11700  02A7  0835               	movf	_BMP_readTemperature$2648^(0+128),w
 11701  02A8  0020               	movlb	0	; select bank0
 11702  02A9  00D9               	movwf	___ftmul@f2
 11703  02AA  0021               	movlb	1	; select bank1
 11704  02AB  0836               	movf	(_BMP_readTemperature$2648+1)^(0+128),w
 11705  02AC  0020               	movlb	0	; select bank0
 11706  02AD  00DA               	movwf	___ftmul@f2+1
 11707  02AE  0021               	movlb	1	; select bank1
 11708  02AF  0837               	movf	(_BMP_readTemperature$2648+2)^(0+128),w
 11709  02B0  0020               	movlb	0	; select bank0
 11710  02B1  00DB               	movwf	___ftmul@f2+2
 11711  02B2  318E  2670  3180   	fcall	___ftmul
 11712  02B5  0020               	movlb	0	; select bank0
 11713  02B6  0856               	movf	?___ftmul,w
 11714  02B7  0022               	movlb	2	; select bank2
 11715  02B8  00B1               	movwf	_var2^(0+256)
 11716  02B9  0020               	movlb	0	; select bank0
 11717  02BA  0857               	movf	?___ftmul+1,w
 11718  02BB  0022               	movlb	2	; select bank2
 11719  02BC  00B2               	movwf	(_var2+1)^(0+256)
 11720  02BD  0020               	movlb	0	; select bank0
 11721  02BE  0858               	movf	?___ftmul+2,w
 11722  02BF  0022               	movlb	2	; select bank2
 11723  02C0  00B3               	movwf	(_var2+2)^(0+256)
 11724                           
 11725                           ;bmp280.c: 107: t_fine = (long)(var1 + var2);
 11726  02C1  0834               	movf	_var1^(0+256),w
 11727  02C2  0020               	movlb	0	; select bank0
 11728  02C3  00CC               	movwf	___ftadd@f2
 11729  02C4  0022               	movlb	2	; select bank2
 11730  02C5  0835               	movf	(_var1+1)^(0+256),w
 11731  02C6  0020               	movlb	0	; select bank0
 11732  02C7  00CD               	movwf	___ftadd@f2+1
 11733  02C8  0022               	movlb	2	; select bank2
 11734  02C9  0836               	movf	(_var1+2)^(0+256),w
 11735  02CA  0020               	movlb	0	; select bank0
 11736  02CB  00CE               	movwf	___ftadd@f2+2
 11737  02CC  0022               	movlb	2	; select bank2
 11738  02CD  0831               	movf	_var2^(0+256),w
 11739  02CE  0020               	movlb	0	; select bank0
 11740  02CF  00C9               	movwf	___ftadd@f1
 11741  02D0  0022               	movlb	2	; select bank2
 11742  02D1  0832               	movf	(_var2+1)^(0+256),w
 11743  02D2  0020               	movlb	0	; select bank0
 11744  02D3  00CA               	movwf	___ftadd@f1+1
 11745  02D4  0022               	movlb	2	; select bank2
 11746  02D5  0833               	movf	(_var2+2)^(0+256),w
 11747  02D6  0020               	movlb	0	; select bank0
 11748  02D7  00CB               	movwf	___ftadd@f1+2
 11749  02D8  3186  2685  3180   	fcall	___ftadd
 11750  02DB  0020               	movlb	0	; select bank0
 11751  02DC  0849               	movf	?___ftadd,w
 11752  02DD  00E6               	movwf	___fttol@f1
 11753  02DE  084A               	movf	?___ftadd+1,w
 11754  02DF  00E7               	movwf	___fttol@f1+1
 11755  02E0  084B               	movf	?___ftadd+2,w
 11756  02E1  00E8               	movwf	___fttol@f1+2
 11757  02E2  318C  2483  3180   	fcall	___fttol
 11758  02E5  0020               	movlb	0	; select bank0
 11759  02E6  0869               	movf	?___fttol+3,w
 11760  02E7  00AC               	movwf	___altoft@c+3
 11761  02E8  0868               	movf	?___fttol+2,w
 11762  02E9  00AB               	movwf	___altoft@c+2
 11763  02EA  0867               	movf	?___fttol+1,w
 11764  02EB  00AA               	movwf	___altoft@c+1
 11765  02EC  0866               	movf	?___fttol,w
 11766  02ED  00A9               	movwf	___altoft@c
 11767  02EE  3188  203C  3180   	fcall	___altoft
 11768  02F1  0020               	movlb	0	; select bank0
 11769  02F2  0829               	movf	?___altoft,w
 11770  02F3  0022               	movlb	2	; select bank2
 11771  02F4  00AE               	movwf	_t_fine^(0+256)
 11772  02F5  0020               	movlb	0	; select bank0
 11773  02F6  082A               	movf	?___altoft+1,w
 11774  02F7  0022               	movlb	2	; select bank2
 11775  02F8  00AF               	movwf	(_t_fine+1)^(0+256)
 11776  02F9  0020               	movlb	0	; select bank0
 11777  02FA  082B               	movf	?___altoft+2,w
 11778  02FB  0022               	movlb	2	; select bank2
 11779  02FC  00B0               	movwf	(_t_fine+2)^(0+256)
 11780                           
 11781                           ;bmp280.c: 108: cTemp = (var1 + var2) / 5120.0;
 11782  02FD  3000               	movlw	0
 11783  02FE  0020               	movlb	0	; select bank0
 11784  02FF  00B1               	movwf	___ftdiv@f2
 11785  0300  30A0               	movlw	160
 11786  0301  00B2               	movwf	___ftdiv@f2+1
 11787  0302  3045               	movlw	69
 11788  0303  00B3               	movwf	___ftdiv@f2+2
 11789  0304  0022               	movlb	2	; select bank2
 11790  0305  0831               	movf	_var2^(0+256),w
 11791  0306  0020               	movlb	0	; select bank0
 11792  0307  00C9               	movwf	___ftadd@f1
 11793  0308  0022               	movlb	2	; select bank2
 11794  0309  0832               	movf	(_var2+1)^(0+256),w
 11795  030A  0020               	movlb	0	; select bank0
 11796  030B  00CA               	movwf	___ftadd@f1+1
 11797  030C  0022               	movlb	2	; select bank2
 11798  030D  0833               	movf	(_var2+2)^(0+256),w
 11799  030E  0020               	movlb	0	; select bank0
 11800  030F  00CB               	movwf	___ftadd@f1+2
 11801  0310  0022               	movlb	2	; select bank2
 11802  0311  0834               	movf	_var1^(0+256),w
 11803  0312  0020               	movlb	0	; select bank0
 11804  0313  00CC               	movwf	___ftadd@f2
 11805  0314  0022               	movlb	2	; select bank2
 11806  0315  0835               	movf	(_var1+1)^(0+256),w
 11807  0316  0020               	movlb	0	; select bank0
 11808  0317  00CD               	movwf	___ftadd@f2+1
 11809  0318  0022               	movlb	2	; select bank2
 11810  0319  0836               	movf	(_var1+2)^(0+256),w
 11811  031A  0020               	movlb	0	; select bank0
 11812  031B  00CE               	movwf	___ftadd@f2+2
 11813  031C  3186  2685  3180   	fcall	___ftadd
 11814  031F  0020               	movlb	0	; select bank0
 11815  0320  0849               	movf	?___ftadd,w
 11816  0321  00B4               	movwf	___ftdiv@f1
 11817  0322  084A               	movf	?___ftadd+1,w
 11818  0323  00B5               	movwf	___ftdiv@f1+1
 11819  0324  084B               	movf	?___ftadd+2,w
 11820  0325  00B6               	movwf	___ftdiv@f1+2
 11821  0326  318D  25C7  3180   	fcall	___ftdiv
 11822  0329  0020               	movlb	0	; select bank0
 11823  032A  0831               	movf	?___ftdiv,w
 11824  032B  0022               	movlb	2	; select bank2
 11825  032C  00AB               	movwf	_cTemp^(0+256)
 11826  032D  0020               	movlb	0	; select bank0
 11827  032E  0832               	movf	?___ftdiv+1,w
 11828  032F  0022               	movlb	2	; select bank2
 11829  0330  00AC               	movwf	(_cTemp+1)^(0+256)
 11830  0331  0020               	movlb	0	; select bank0
 11831  0332  0833               	movf	?___ftdiv+2,w
 11832  0333  0022               	movlb	2	; select bank2
 11833  0334  00AD               	movwf	(_cTemp+2)^(0+256)
 11834                           
 11835                           ;bmp280.c: 123: Diag_setTempSensorHealth(1);
 11836  0335  3001               	movlw	1
 11837  0336  3193  2307         	fcall	_Diag_setTempSensorHealth
 11838                           
 11839                           ;bmp280.c: 124: return(cTemp);
 11840  0338  0022               	movlb	2	; select bank2
 11841  0339  082B               	movf	_cTemp^(0+256),w
 11842  033A  0021               	movlb	1	; select bank1
 11843  033B  00A6               	movwf	?_BMP_readTemperature^(0+128)
 11844  033C  0022               	movlb	2	; select bank2
 11845  033D  082C               	movf	(_cTemp+1)^(0+256),w
 11846  033E  0021               	movlb	1	; select bank1
 11847  033F  00A7               	movwf	(?_BMP_readTemperature+1)^(0+128)
 11848  0340  0022               	movlb	2	; select bank2
 11849  0341  082D               	movf	(_cTemp+2)^(0+256),w
 11850  0342  0021               	movlb	1	; select bank1
 11851  0343  00A8               	movwf	(?_BMP_readTemperature+2)^(0+128)
 11852  0344  0008               	return
 11853  0345                     __end_of_BMP_readTemperature:	
 11854                           
 11855                           	psect	text62
 11856  1403                     __ptext62:	
 11857 ;; *************** function ___lwtoft *****************
 11858 ;; Defined at:
 11859 ;;		line 28 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\lwtoft.c"
 11860 ;; Parameters:    Size  Location     Type
 11861 ;;  c               2    9[BANK0 ] unsigned int 
 11862 ;; Auto vars:     Size  Location     Type
 11863 ;;		None
 11864 ;; Return value:  Size  Location     Type
 11865 ;;                  3    9[BANK0 ] float 
 11866 ;; Registers used:
 11867 ;;		wreg, status,2, status,0, pclath, cstack
 11868 ;; Tracked objects:
 11869 ;;		On entry : 0/0
 11870 ;;		On exit  : 0/0
 11871 ;;		Unchanged: 0/0
 11872 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11873 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11874 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11875 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11876 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11877 ;;Total ram usage:        4 bytes
 11878 ;; Hardware stack levels used:    1
 11879 ;; Hardware stack levels required when called:    5
 11880 ;; This function calls:
 11881 ;;		___ftpack
 11882 ;; This function is called by:
 11883 ;;		_Sensor_getSupplyVoltage
 11884 ;;		_BMP_readTemperature
 11885 ;; This function uses a non-reentrant model
 11886 ;;
 11887                           
 11888                           
 11889                           ;psect for function ___lwtoft
 11890  1403                     ___lwtoft:	
 11891                           
 11892                           ;incstack = 0
 11893                           ; Regs used in ___lwtoft: [wreg+status,2+status,0+pclath+cstack]
 11894  1403  0020               	movlb	0	; select bank0
 11895  1404  0829               	movf	___lwtoft@c,w
 11896  1405  00A1               	movwf	___ftpack@arg
 11897  1406  082A               	movf	___lwtoft@c+1,w
 11898  1407  00A2               	movwf	___ftpack@arg+1
 11899  1408  01A3               	clrf	___ftpack@arg+2
 11900  1409  308E               	movlw	142
 11901  140A  00AC               	movwf	??___lwtoft
 11902  140B  082C               	movf	??___lwtoft,w
 11903  140C  00A4               	movwf	___ftpack@exp
 11904  140D  01A5               	clrf	___ftpack@sign
 11905  140E  318A  22B5         	fcall	___ftpack
 11906  1410  0020               	movlb	0	; select bank0
 11907  1411  0821               	movf	?___ftpack,w
 11908  1412  00A9               	movwf	?___lwtoft
 11909  1413  0822               	movf	?___ftpack+1,w
 11910  1414  00AA               	movwf	?___lwtoft+1
 11911  1415  0823               	movf	?___ftpack+2,w
 11912  1416  00AB               	movwf	?___lwtoft+2
 11913  1417  0008               	return
 11914  1418                     __end_of___lwtoft:	
 11915                           
 11916                           	psect	text63
 11917  0C83                     __ptext63:	
 11918 ;; *************** function ___fttol *****************
 11919 ;; Defined at:
 11920 ;;		line 44 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\fttol.c"
 11921 ;; Parameters:    Size  Location     Type
 11922 ;;  f1              3   70[BANK0 ] float 
 11923 ;; Auto vars:     Size  Location     Type
 11924 ;;  lval            4    1[BANK1 ] unsigned long 
 11925 ;;  exp1            1    5[BANK1 ] unsigned char 
 11926 ;;  sign1           1    0[BANK1 ] unsigned char 
 11927 ;; Return value:  Size  Location     Type
 11928 ;;                  4   70[BANK0 ] long 
 11929 ;; Registers used:
 11930 ;;		wreg, status,2, status,0
 11931 ;; Tracked objects:
 11932 ;;		On entry : 0/0
 11933 ;;		On exit  : 0/0
 11934 ;;		Unchanged: 0/0
 11935 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11936 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11937 ;;      Locals:         0       0       6       0       0       0       0       0       0       0       0       0       
      +0       0
 11938 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11939 ;;      Totals:         0       8       6       0       0       0       0       0       0       0       0       0       
      +0       0
 11940 ;;Total ram usage:       14 bytes
 11941 ;; Hardware stack levels used:    1
 11942 ;; Hardware stack levels required when called:    4
 11943 ;; This function calls:
 11944 ;;		Nothing
 11945 ;; This function is called by:
 11946 ;;		_BMP_readTemperature
 11947 ;;		_Wireless_packageData
 11948 ;;		_HMC5883L_GetCompassDirection
 11949 ;; This function uses a non-reentrant model
 11950 ;;
 11951                           
 11952                           
 11953                           ;psect for function ___fttol
 11954  0C83                     ___fttol:	
 11955                           
 11956                           ;incstack = 0
 11957                           ; Regs used in ___fttol: [wreg+status,2+status,0]
 11958  0C83  0020               	movlb	0	; select bank0
 11959  0C84  0866               	movf	___fttol@f1,w
 11960  0C85  00EA               	movwf	??___fttol
 11961  0C86  0867               	movf	___fttol@f1+1,w
 11962  0C87  00EB               	movwf	??___fttol+1
 11963  0C88  0868               	movf	___fttol@f1+2,w
 11964  0C89  00EC               	movwf	??___fttol+2
 11965  0C8A  1003               	clrc
 11966  0C8B  0D6B               	rlf	??___fttol+1,w
 11967  0C8C  0D6C               	rlf	??___fttol+2,w
 11968  0C8D  00ED               	movwf	??___fttol+3
 11969  0C8E  086D               	movf	??___fttol+3,w
 11970  0C8F  0021               	movlb	1	; select bank1
 11971  0C90  00A5               	movwf	___fttol@exp1^(0+128)
 11972  0C91  0825               	movf	___fttol@exp1^(0+128),w
 11973  0C92  1D03               	btfss	3,2
 11974  0C93  2C9E               	goto	l6411
 11975  0C94  3000               	movlw	0
 11976  0C95  0020               	movlb	0	; select bank0
 11977  0C96  00E9               	movwf	?___fttol+3
 11978  0C97  3000               	movlw	0
 11979  0C98  00E8               	movwf	?___fttol+2
 11980  0C99  3000               	movlw	0
 11981  0C9A  00E7               	movwf	?___fttol+1
 11982  0C9B  3000               	movlw	0
 11983  0C9C  00E6               	movwf	?___fttol
 11984  0C9D  0008               	return
 11985  0C9E                     l6411:	
 11986  0C9E  0020               	movlb	0	; select bank0
 11987  0C9F  0866               	movf	___fttol@f1,w
 11988  0CA0  00EA               	movwf	??___fttol
 11989  0CA1  0867               	movf	___fttol@f1+1,w
 11990  0CA2  00EB               	movwf	??___fttol+1
 11991  0CA3  0868               	movf	___fttol@f1+2,w
 11992  0CA4  00EC               	movwf	??___fttol+2
 11993  0CA5  3017               	movlw	23
 11994  0CA6                     u6265:	
 11995  0CA6  36EC               	lsrf	??___fttol+2,f
 11996  0CA7  0CEB               	rrf	??___fttol+1,f
 11997  0CA8  0CEA               	rrf	??___fttol,f
 11998  0CA9  0B89               	decfsz	9,f
 11999  0CAA  2CA6               	goto	u6265
 12000  0CAB  086A               	movf	??___fttol,w
 12001  0CAC  00ED               	movwf	??___fttol+3
 12002  0CAD  086D               	movf	??___fttol+3,w
 12003  0CAE  0021               	movlb	1	; select bank1
 12004  0CAF  00A0               	movwf	___fttol@sign1^(0+128)
 12005  0CB0  0020               	movlb	0	; select bank0
 12006  0CB1  17E7               	bsf	___fttol@f1+1,7
 12007  0CB2  30FF               	movlw	255
 12008  0CB3  05E6               	andwf	___fttol@f1,f
 12009  0CB4  30FF               	movlw	255
 12010  0CB5  05E7               	andwf	___fttol@f1+1,f
 12011  0CB6  3000               	movlw	0
 12012  0CB7  05E8               	andwf	___fttol@f1+2,f
 12013  0CB8  0866               	movf	___fttol@f1,w
 12014  0CB9  0021               	movlb	1	; select bank1
 12015  0CBA  00A1               	movwf	___fttol@lval^(0+128)
 12016  0CBB  0020               	movlb	0	; select bank0
 12017  0CBC  0867               	movf	___fttol@f1+1,w
 12018  0CBD  0021               	movlb	1	; select bank1
 12019  0CBE  00A2               	movwf	(___fttol@lval^(0+128)+1)
 12020  0CBF  0020               	movlb	0	; select bank0
 12021  0CC0  0868               	movf	___fttol@f1+2,w
 12022  0CC1  0021               	movlb	1	; select bank1
 12023  0CC2  00A3               	movwf	(___fttol@lval^(0+128)+2)
 12024  0CC3  01A4               	clrf	(___fttol@lval^(0+128)+3)
 12025  0CC4  308E               	movlw	142
 12026  0CC5  02A5               	subwf	___fttol@exp1^(0+128),f
 12027  0CC6  1FA5               	btfss	___fttol@exp1^(0+128),7
 12028  0CC7  2CE8               	goto	l6431
 12029  0CC8  0825               	movf	___fttol@exp1^(0+128),w
 12030  0CC9  3A80               	xorlw	128
 12031  0CCA  3E8F               	addlw	143
 12032  0CCB  1803               	skipnc
 12033  0CCC  2CD7               	goto	l6429
 12034  0CCD  3000               	movlw	0
 12035  0CCE  0020               	movlb	0	; select bank0
 12036  0CCF  00E9               	movwf	?___fttol+3
 12037  0CD0  3000               	movlw	0
 12038  0CD1  00E8               	movwf	?___fttol+2
 12039  0CD2  3000               	movlw	0
 12040  0CD3  00E7               	movwf	?___fttol+1
 12041  0CD4  3000               	movlw	0
 12042  0CD5  00E6               	movwf	?___fttol
 12043  0CD6  0008               	return
 12044  0CD7                     l6429:	
 12045  0CD7  3001               	movlw	1
 12046  0CD8                     u6295:	
 12047  0CD8  0021               	movlb	1	; select bank1
 12048  0CD9  36A4               	lsrf	(___fttol@lval+3)^(0+128),f
 12049  0CDA  0CA3               	rrf	(___fttol@lval+2)^(0+128),f
 12050  0CDB  0CA2               	rrf	(___fttol@lval+1)^(0+128),f
 12051  0CDC  0CA1               	rrf	___fttol@lval^(0+128),f
 12052  0CDD  0B89               	decfsz	9,f
 12053  0CDE  2CD8               	goto	u6295
 12054  0CDF  3001               	movlw	1
 12055  0CE0  0020               	movlb	0	; select bank0
 12056  0CE1  00EA               	movwf	??___fttol
 12057  0CE2  086A               	movf	??___fttol,w
 12058  0CE3  0021               	movlb	1	; select bank1
 12059  0CE4  07A5               	addwf	___fttol@exp1^(0+128),f
 12060  0CE5  1903               	btfsc	3,2
 12061  0CE6  2D04               	goto	l6439
 12062  0CE7  2CD7               	goto	l6429
 12063  0CE8                     l6431:	
 12064  0CE8  3018               	movlw	24
 12065  0CE9  0225               	subwf	___fttol@exp1^(0+128),w
 12066  0CEA  1C03               	skipc
 12067  0CEB  2D00               	goto	l1633
 12068  0CEC  3000               	movlw	0
 12069  0CED  0020               	movlb	0	; select bank0
 12070  0CEE  00E9               	movwf	?___fttol+3
 12071  0CEF  3000               	movlw	0
 12072  0CF0  00E8               	movwf	?___fttol+2
 12073  0CF1  3000               	movlw	0
 12074  0CF2  00E7               	movwf	?___fttol+1
 12075  0CF3  3000               	movlw	0
 12076  0CF4  00E6               	movwf	?___fttol
 12077  0CF5  0008               	return
 12078  0CF6                     l6437:	
 12079  0CF6  3001               	movlw	1
 12080  0CF7                     u6325:	
 12081  0CF7  0021               	movlb	1	; select bank1
 12082  0CF8  35A1               	lslf	___fttol@lval^(0+128),f
 12083  0CF9  0DA2               	rlf	(___fttol@lval+1)^(0+128),f
 12084  0CFA  0DA3               	rlf	(___fttol@lval+2)^(0+128),f
 12085  0CFB  0DA4               	rlf	(___fttol@lval+3)^(0+128),f
 12086  0CFC  0B89               	decfsz	9,f
 12087  0CFD  2CF7               	goto	u6325
 12088  0CFE  3001               	movlw	1
 12089  0CFF  02A5               	subwf	___fttol@exp1^(0+128),f
 12090  0D00                     l1633:	
 12091  0D00  0021               	movlb	1	; select bank1
 12092  0D01  0825               	movf	___fttol@exp1^(0+128),w
 12093  0D02  1D03               	btfss	3,2
 12094  0D03  2CF6               	goto	l6437
 12095  0D04                     l6439:	
 12096  0D04  0820               	movf	___fttol@sign1^(0+128),w
 12097  0D05  1903               	btfsc	3,2
 12098  0D06  2D12               	goto	l6443
 12099  0D07  09A1               	comf	___fttol@lval^(0+128),f
 12100  0D08  09A2               	comf	(___fttol@lval+1)^(0+128),f
 12101  0D09  09A3               	comf	(___fttol@lval+2)^(0+128),f
 12102  0D0A  09A4               	comf	(___fttol@lval+3)^(0+128),f
 12103  0D0B  0AA1               	incf	___fttol@lval^(0+128),f
 12104  0D0C  1903               	skipnz
 12105  0D0D  0AA2               	incf	(___fttol@lval+1)^(0+128),f
 12106  0D0E  1903               	skipnz
 12107  0D0F  0AA3               	incf	(___fttol@lval+2)^(0+128),f
 12108  0D10  1903               	skipnz
 12109  0D11  0AA4               	incf	(___fttol@lval+3)^(0+128),f
 12110  0D12                     l6443:	
 12111  0D12  0824               	movf	(___fttol@lval+3)^(0+128),w
 12112  0D13  0020               	movlb	0	; select bank0
 12113  0D14  00E9               	movwf	?___fttol+3
 12114  0D15  0021               	movlb	1	; select bank1
 12115  0D16  0823               	movf	(___fttol@lval+2)^(0+128),w
 12116  0D17  0020               	movlb	0	; select bank0
 12117  0D18  00E8               	movwf	?___fttol+2
 12118  0D19  0021               	movlb	1	; select bank1
 12119  0D1A  0822               	movf	(___fttol@lval+1)^(0+128),w
 12120  0D1B  0020               	movlb	0	; select bank0
 12121  0D1C  00E7               	movwf	?___fttol+1
 12122  0D1D  0021               	movlb	1	; select bank1
 12123  0D1E  0821               	movf	___fttol@lval^(0+128),w
 12124  0D1F  0020               	movlb	0	; select bank0
 12125  0D20  00E6               	movwf	?___fttol
 12126  0D21  0008               	return
 12127  0D22                     __end_of___fttol:	
 12128                           
 12129                           	psect	text64
 12130  1328                     __ptext64:	
 12131 ;; *************** function ___ftneg *****************
 12132 ;; Defined at:
 12133 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\ftneg.c"
 12134 ;; Parameters:    Size  Location     Type
 12135 ;;  f1              3   33[BANK0 ] float 
 12136 ;; Auto vars:     Size  Location     Type
 12137 ;;		None
 12138 ;; Return value:  Size  Location     Type
 12139 ;;                  3   33[BANK0 ] float 
 12140 ;; Registers used:
 12141 ;;		wreg
 12142 ;; Tracked objects:
 12143 ;;		On entry : 0/0
 12144 ;;		On exit  : 0/0
 12145 ;;		Unchanged: 0/0
 12146 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12147 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12148 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12149 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12150 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12151 ;;Total ram usage:        3 bytes
 12152 ;; Hardware stack levels used:    1
 12153 ;; Hardware stack levels required when called:    4
 12154 ;; This function calls:
 12155 ;;		Nothing
 12156 ;; This function is called by:
 12157 ;;		_BMP_readTemperature
 12158 ;; This function uses a non-reentrant model
 12159 ;;
 12160                           
 12161                           
 12162                           ;psect for function ___ftneg
 12163  1328                     ___ftneg:	
 12164                           
 12165                           ;incstack = 0
 12166                           ; Regs used in ___ftneg: [wreg]
 12167  1328  0020               	movlb	0	; select bank0
 12168  1329  0843               	movf	___ftneg@f1+2,w
 12169  132A  0442               	iorwf	___ftneg@f1+1,w
 12170  132B  0441               	iorwf	___ftneg@f1,w
 12171  132C  1903               	skipnz
 12172  132D  0008               	return
 12173  132E  3080               	movlw	128
 12174  132F  06C3               	xorwf	___ftneg@f1+2,f
 12175  1330  0008               	return
 12176  1331                     __end_of___ftneg:	
 12177                           
 12178                           	psect	text65
 12179  0E70                     __ptext65:	
 12180 ;; *************** function ___ftmul *****************
 12181 ;; Defined at:
 12182 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\ftmul.c"
 12183 ;; Parameters:    Size  Location     Type
 12184 ;;  f1              3   54[BANK0 ] float 
 12185 ;;  f2              3   57[BANK0 ] float 
 12186 ;; Auto vars:     Size  Location     Type
 12187 ;;  f3_as_produc    3   65[BANK0 ] unsigned um
 12188 ;;  sign            1   69[BANK0 ] unsigned char 
 12189 ;;  cntr            1   68[BANK0 ] unsigned char 
 12190 ;;  exp             1   64[BANK0 ] unsigned char 
 12191 ;; Return value:  Size  Location     Type
 12192 ;;                  3   54[BANK0 ] float 
 12193 ;; Registers used:
 12194 ;;		wreg, status,2, status,0, pclath, cstack
 12195 ;; Tracked objects:
 12196 ;;		On entry : 0/0
 12197 ;;		On exit  : 0/0
 12198 ;;		Unchanged: 0/0
 12199 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12200 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12201 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12202 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12203 ;;      Totals:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12204 ;;Total ram usage:       16 bytes
 12205 ;; Hardware stack levels used:    1
 12206 ;; Hardware stack levels required when called:    5
 12207 ;; This function calls:
 12208 ;;		___ftpack
 12209 ;; This function is called by:
 12210 ;;		_BMP_readTemperature
 12211 ;;		_Wireless_packageData
 12212 ;;		_HMC5883L_GetCompassDirection
 12213 ;; This function uses a non-reentrant model
 12214 ;;
 12215                           
 12216                           
 12217                           ;psect for function ___ftmul
 12218  0E70                     ___ftmul:	
 12219                           
 12220                           ;incstack = 0
 12221                           ; Regs used in ___ftmul: [wreg+status,2+status,0+pclath+cstack]
 12222  0E70  0020               	movlb	0	; select bank0
 12223  0E71  0856               	movf	___ftmul@f1,w
 12224  0E72  00DC               	movwf	??___ftmul
 12225  0E73  0857               	movf	___ftmul@f1+1,w
 12226  0E74  00DD               	movwf	??___ftmul+1
 12227  0E75  0858               	movf	___ftmul@f1+2,w
 12228  0E76  00DE               	movwf	??___ftmul+2
 12229  0E77  1003               	clrc
 12230  0E78  0D5D               	rlf	??___ftmul+1,w
 12231  0E79  0D5E               	rlf	??___ftmul+2,w
 12232  0E7A  00DF               	movwf	??___ftmul+3
 12233  0E7B  085F               	movf	??___ftmul+3,w
 12234  0E7C  00E0               	movwf	___ftmul@exp
 12235  0E7D  0860               	movf	___ftmul@exp,w
 12236  0E7E  1D03               	btfss	3,2
 12237  0E7F  2E87               	goto	l6353
 12238  0E80  3000               	movlw	0
 12239  0E81  00D6               	movwf	?___ftmul
 12240  0E82  3000               	movlw	0
 12241  0E83  00D7               	movwf	?___ftmul+1
 12242  0E84  3000               	movlw	0
 12243  0E85  00D8               	movwf	?___ftmul+2
 12244  0E86  0008               	return
 12245  0E87                     l6353:	
 12246  0E87  0859               	movf	___ftmul@f2,w
 12247  0E88  00DC               	movwf	??___ftmul
 12248  0E89  085A               	movf	___ftmul@f2+1,w
 12249  0E8A  00DD               	movwf	??___ftmul+1
 12250  0E8B  085B               	movf	___ftmul@f2+2,w
 12251  0E8C  00DE               	movwf	??___ftmul+2
 12252  0E8D  1003               	clrc
 12253  0E8E  0D5D               	rlf	??___ftmul+1,w
 12254  0E8F  0D5E               	rlf	??___ftmul+2,w
 12255  0E90  00DF               	movwf	??___ftmul+3
 12256  0E91  085F               	movf	??___ftmul+3,w
 12257  0E92  00E5               	movwf	___ftmul@sign
 12258  0E93  0865               	movf	___ftmul@sign,w
 12259  0E94  1D03               	btfss	3,2
 12260  0E95  2E9D               	goto	l6359
 12261  0E96  3000               	movlw	0
 12262  0E97  00D6               	movwf	?___ftmul
 12263  0E98  3000               	movlw	0
 12264  0E99  00D7               	movwf	?___ftmul+1
 12265  0E9A  3000               	movlw	0
 12266  0E9B  00D8               	movwf	?___ftmul+2
 12267  0E9C  0008               	return
 12268  0E9D                     l6359:	
 12269  0E9D  0865               	movf	___ftmul@sign,w
 12270  0E9E  3E7B               	addlw	123
 12271  0E9F  00DC               	movwf	??___ftmul
 12272  0EA0  085C               	movf	??___ftmul,w
 12273  0EA1  07E0               	addwf	___ftmul@exp,f
 12274  0EA2  0856               	movf	___ftmul@f1,w
 12275  0EA3  00DC               	movwf	??___ftmul
 12276  0EA4  0857               	movf	___ftmul@f1+1,w
 12277  0EA5  00DD               	movwf	??___ftmul+1
 12278  0EA6  0858               	movf	___ftmul@f1+2,w
 12279  0EA7  00DE               	movwf	??___ftmul+2
 12280  0EA8  3010               	movlw	16
 12281  0EA9                     u6145:	
 12282  0EA9  36DE               	lsrf	??___ftmul+2,f
 12283  0EAA  0CDD               	rrf	??___ftmul+1,f
 12284  0EAB  0CDC               	rrf	??___ftmul,f
 12285  0EAC  0B89               	decfsz	9,f
 12286  0EAD  2EA9               	goto	u6145
 12287  0EAE  085C               	movf	??___ftmul,w
 12288  0EAF  00DF               	movwf	??___ftmul+3
 12289  0EB0  085F               	movf	??___ftmul+3,w
 12290  0EB1  00E5               	movwf	___ftmul@sign
 12291  0EB2  0859               	movf	___ftmul@f2,w
 12292  0EB3  00DC               	movwf	??___ftmul
 12293  0EB4  085A               	movf	___ftmul@f2+1,w
 12294  0EB5  00DD               	movwf	??___ftmul+1
 12295  0EB6  085B               	movf	___ftmul@f2+2,w
 12296  0EB7  00DE               	movwf	??___ftmul+2
 12297  0EB8  3010               	movlw	16
 12298  0EB9                     u6155:	
 12299  0EB9  36DE               	lsrf	??___ftmul+2,f
 12300  0EBA  0CDD               	rrf	??___ftmul+1,f
 12301  0EBB  0CDC               	rrf	??___ftmul,f
 12302  0EBC  0B89               	decfsz	9,f
 12303  0EBD  2EB9               	goto	u6155
 12304  0EBE  085C               	movf	??___ftmul,w
 12305  0EBF  00DF               	movwf	??___ftmul+3
 12306  0EC0  085F               	movf	??___ftmul+3,w
 12307  0EC1  06E5               	xorwf	___ftmul@sign,f
 12308  0EC2  3080               	movlw	128
 12309  0EC3  00DC               	movwf	??___ftmul
 12310  0EC4  085C               	movf	??___ftmul,w
 12311  0EC5  05E5               	andwf	___ftmul@sign,f
 12312  0EC6  17D7               	bsf	___ftmul@f1+1,7
 12313  0EC7  17DA               	bsf	___ftmul@f2+1,7
 12314  0EC8  30FF               	movlw	255
 12315  0EC9  05D9               	andwf	___ftmul@f2,f
 12316  0ECA  30FF               	movlw	255
 12317  0ECB  05DA               	andwf	___ftmul@f2+1,f
 12318  0ECC  3000               	movlw	0
 12319  0ECD  05DB               	andwf	___ftmul@f2+2,f
 12320  0ECE  3000               	movlw	0
 12321  0ECF  00E1               	movwf	___ftmul@f3_as_product
 12322  0ED0  3000               	movlw	0
 12323  0ED1  00E2               	movwf	___ftmul@f3_as_product+1
 12324  0ED2  3000               	movlw	0
 12325  0ED3  00E3               	movwf	___ftmul@f3_as_product+2
 12326  0ED4  3007               	movlw	7
 12327  0ED5  00DC               	movwf	??___ftmul
 12328  0ED6  085C               	movf	??___ftmul,w
 12329  0ED7  00E4               	movwf	___ftmul@cntr
 12330  0ED8                     l6371:	
 12331  0ED8  1C56               	btfss	___ftmul@f1,0
 12332  0ED9  2EE0               	goto	l6375
 12333  0EDA  0859               	movf	___ftmul@f2,w
 12334  0EDB  07E1               	addwf	___ftmul@f3_as_product,f
 12335  0EDC  085A               	movf	___ftmul@f2+1,w
 12336  0EDD  3DE2               	addwfc	___ftmul@f3_as_product+1,f
 12337  0EDE  085B               	movf	___ftmul@f2+2,w
 12338  0EDF  3DE3               	addwfc	___ftmul@f3_as_product+2,f
 12339  0EE0                     l6375:	
 12340  0EE0  3001               	movlw	1
 12341  0EE1                     u6175:	
 12342  0EE1  36D8               	lsrf	___ftmul@f1+2,f
 12343  0EE2  0CD7               	rrf	___ftmul@f1+1,f
 12344  0EE3  0CD6               	rrf	___ftmul@f1,f
 12345  0EE4  0B89               	decfsz	9,f
 12346  0EE5  2EE1               	goto	u6175
 12347  0EE6  3001               	movlw	1
 12348  0EE7                     u6185:	
 12349  0EE7  35D9               	lslf	___ftmul@f2,f
 12350  0EE8  0DDA               	rlf	___ftmul@f2+1,f
 12351  0EE9  0DDB               	rlf	___ftmul@f2+2,f
 12352  0EEA  0B89               	decfsz	9,f
 12353  0EEB  2EE7               	goto	u6185
 12354  0EEC  3001               	movlw	1
 12355  0EED  02E4               	subwf	___ftmul@cntr,f
 12356  0EEE  1D03               	btfss	3,2
 12357  0EEF  2ED8               	goto	l6371
 12358  0EF0  3009               	movlw	9
 12359  0EF1  00DC               	movwf	??___ftmul
 12360  0EF2  085C               	movf	??___ftmul,w
 12361  0EF3  00E4               	movwf	___ftmul@cntr
 12362  0EF4                     l6383:	
 12363  0EF4  1C56               	btfss	___ftmul@f1,0
 12364  0EF5  2EFC               	goto	l6387
 12365  0EF6  0859               	movf	___ftmul@f2,w
 12366  0EF7  07E1               	addwf	___ftmul@f3_as_product,f
 12367  0EF8  085A               	movf	___ftmul@f2+1,w
 12368  0EF9  3DE2               	addwfc	___ftmul@f3_as_product+1,f
 12369  0EFA  085B               	movf	___ftmul@f2+2,w
 12370  0EFB  3DE3               	addwfc	___ftmul@f3_as_product+2,f
 12371  0EFC                     l6387:	
 12372  0EFC  3001               	movlw	1
 12373  0EFD                     u6215:	
 12374  0EFD  36D8               	lsrf	___ftmul@f1+2,f
 12375  0EFE  0CD7               	rrf	___ftmul@f1+1,f
 12376  0EFF  0CD6               	rrf	___ftmul@f1,f
 12377  0F00  0B89               	decfsz	9,f
 12378  0F01  2EFD               	goto	u6215
 12379  0F02  3001               	movlw	1
 12380  0F03                     u6225:	
 12381  0F03  36E3               	lsrf	___ftmul@f3_as_product+2,f
 12382  0F04  0CE2               	rrf	___ftmul@f3_as_product+1,f
 12383  0F05  0CE1               	rrf	___ftmul@f3_as_product,f
 12384  0F06  0B89               	decfsz	9,f
 12385  0F07  2F03               	goto	u6225
 12386  0F08  3001               	movlw	1
 12387  0F09  02E4               	subwf	___ftmul@cntr,f
 12388  0F0A  1D03               	btfss	3,2
 12389  0F0B  2EF4               	goto	l6383
 12390  0F0C  0861               	movf	___ftmul@f3_as_product,w
 12391  0F0D  00A1               	movwf	___ftpack@arg
 12392  0F0E  0862               	movf	___ftmul@f3_as_product+1,w
 12393  0F0F  00A2               	movwf	___ftpack@arg+1
 12394  0F10  0863               	movf	___ftmul@f3_as_product+2,w
 12395  0F11  00A3               	movwf	___ftpack@arg+2
 12396  0F12  0860               	movf	___ftmul@exp,w
 12397  0F13  00DC               	movwf	??___ftmul
 12398  0F14  085C               	movf	??___ftmul,w
 12399  0F15  00A4               	movwf	___ftpack@exp
 12400  0F16  0865               	movf	___ftmul@sign,w
 12401  0F17  00DD               	movwf	??___ftmul+1
 12402  0F18  085D               	movf	??___ftmul+1,w
 12403  0F19  00A5               	movwf	___ftpack@sign
 12404  0F1A  318A  22B5         	fcall	___ftpack
 12405  0F1C  0020               	movlb	0	; select bank0
 12406  0F1D  0821               	movf	?___ftpack,w
 12407  0F1E  00D6               	movwf	?___ftmul
 12408  0F1F  0822               	movf	?___ftpack+1,w
 12409  0F20  00D7               	movwf	?___ftmul+1
 12410  0F21  0823               	movf	?___ftpack+2,w
 12411  0F22  00D8               	movwf	?___ftmul+2
 12412  0F23  0008               	return
 12413  0F24                     __end_of___ftmul:	
 12414                           
 12415                           	psect	text66
 12416  0DC7                     __ptext66:	
 12417 ;; *************** function ___ftdiv *****************
 12418 ;; Defined at:
 12419 ;;		line 56 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\ftdiv.c"
 12420 ;; Parameters:    Size  Location     Type
 12421 ;;  f2              3   17[BANK0 ] float 
 12422 ;;  f1              3   20[BANK0 ] float 
 12423 ;; Auto vars:     Size  Location     Type
 12424 ;;  f3              3   28[BANK0 ] float 
 12425 ;;  sign            1   32[BANK0 ] unsigned char 
 12426 ;;  exp             1   31[BANK0 ] unsigned char 
 12427 ;;  cntr            1   27[BANK0 ] unsigned char 
 12428 ;; Return value:  Size  Location     Type
 12429 ;;                  3   17[BANK0 ] float 
 12430 ;; Registers used:
 12431 ;;		wreg, status,2, status,0, pclath, cstack
 12432 ;; Tracked objects:
 12433 ;;		On entry : 0/0
 12434 ;;		On exit  : 0/0
 12435 ;;		Unchanged: 0/0
 12436 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12437 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12438 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12439 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12440 ;;      Totals:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12441 ;;Total ram usage:       16 bytes
 12442 ;; Hardware stack levels used:    1
 12443 ;; Hardware stack levels required when called:    5
 12444 ;; This function calls:
 12445 ;;		___ftpack
 12446 ;; This function is called by:
 12447 ;;		_Sensor_getSupplyVoltage
 12448 ;;		_BMP_readTemperature
 12449 ;;		_HMC5883L_GetCompassDirection
 12450 ;; This function uses a non-reentrant model
 12451 ;;
 12452                           
 12453                           
 12454                           ;psect for function ___ftdiv
 12455  0DC7                     ___ftdiv:	
 12456                           
 12457                           ;incstack = 0
 12458                           ; Regs used in ___ftdiv: [wreg+status,2+status,0+pclath+cstack]
 12459  0DC7  0020               	movlb	0	; select bank0
 12460  0DC8  0834               	movf	___ftdiv@f1,w
 12461  0DC9  00B7               	movwf	??___ftdiv
 12462  0DCA  0835               	movf	___ftdiv@f1+1,w
 12463  0DCB  00B8               	movwf	??___ftdiv+1
 12464  0DCC  0836               	movf	___ftdiv@f1+2,w
 12465  0DCD  00B9               	movwf	??___ftdiv+2
 12466  0DCE  1003               	clrc
 12467  0DCF  0D38               	rlf	??___ftdiv+1,w
 12468  0DD0  0D39               	rlf	??___ftdiv+2,w
 12469  0DD1  00BA               	movwf	??___ftdiv+3
 12470  0DD2  083A               	movf	??___ftdiv+3,w
 12471  0DD3  00BF               	movwf	___ftdiv@exp
 12472  0DD4  083F               	movf	___ftdiv@exp,w
 12473  0DD5  1D03               	btfss	3,2
 12474  0DD6  2DDE               	goto	l5891
 12475  0DD7  3000               	movlw	0
 12476  0DD8  00B1               	movwf	?___ftdiv
 12477  0DD9  3000               	movlw	0
 12478  0DDA  00B2               	movwf	?___ftdiv+1
 12479  0DDB  3000               	movlw	0
 12480  0DDC  00B3               	movwf	?___ftdiv+2
 12481  0DDD  0008               	return
 12482  0DDE                     l5891:	
 12483  0DDE  0831               	movf	___ftdiv@f2,w
 12484  0DDF  00B7               	movwf	??___ftdiv
 12485  0DE0  0832               	movf	___ftdiv@f2+1,w
 12486  0DE1  00B8               	movwf	??___ftdiv+1
 12487  0DE2  0833               	movf	___ftdiv@f2+2,w
 12488  0DE3  00B9               	movwf	??___ftdiv+2
 12489  0DE4  1003               	clrc
 12490  0DE5  0D38               	rlf	??___ftdiv+1,w
 12491  0DE6  0D39               	rlf	??___ftdiv+2,w
 12492  0DE7  00BA               	movwf	??___ftdiv+3
 12493  0DE8  083A               	movf	??___ftdiv+3,w
 12494  0DE9  00C0               	movwf	___ftdiv@sign
 12495  0DEA  0840               	movf	___ftdiv@sign,w
 12496  0DEB  1D03               	btfss	3,2
 12497  0DEC  2DF4               	goto	l5897
 12498  0DED  3000               	movlw	0
 12499  0DEE  00B1               	movwf	?___ftdiv
 12500  0DEF  3000               	movlw	0
 12501  0DF0  00B2               	movwf	?___ftdiv+1
 12502  0DF1  3000               	movlw	0
 12503  0DF2  00B3               	movwf	?___ftdiv+2
 12504  0DF3  0008               	return
 12505  0DF4                     l5897:	
 12506  0DF4  3000               	movlw	0
 12507  0DF5  00BC               	movwf	___ftdiv@f3
 12508  0DF6  3000               	movlw	0
 12509  0DF7  00BD               	movwf	___ftdiv@f3+1
 12510  0DF8  3000               	movlw	0
 12511  0DF9  00BE               	movwf	___ftdiv@f3+2
 12512  0DFA  3089               	movlw	137
 12513  0DFB  0740               	addwf	___ftdiv@sign,w
 12514  0DFC  00B7               	movwf	??___ftdiv
 12515  0DFD  0837               	movf	??___ftdiv,w
 12516  0DFE  02BF               	subwf	___ftdiv@exp,f
 12517  0DFF  0834               	movf	___ftdiv@f1,w
 12518  0E00  00B7               	movwf	??___ftdiv
 12519  0E01  0835               	movf	___ftdiv@f1+1,w
 12520  0E02  00B8               	movwf	??___ftdiv+1
 12521  0E03  0836               	movf	___ftdiv@f1+2,w
 12522  0E04  00B9               	movwf	??___ftdiv+2
 12523  0E05  3010               	movlw	16
 12524  0E06                     u5385:	
 12525  0E06  36B9               	lsrf	??___ftdiv+2,f
 12526  0E07  0CB8               	rrf	??___ftdiv+1,f
 12527  0E08  0CB7               	rrf	??___ftdiv,f
 12528  0E09  0B89               	decfsz	9,f
 12529  0E0A  2E06               	goto	u5385
 12530  0E0B  0837               	movf	??___ftdiv,w
 12531  0E0C  00BA               	movwf	??___ftdiv+3
 12532  0E0D  083A               	movf	??___ftdiv+3,w
 12533  0E0E  00C0               	movwf	___ftdiv@sign
 12534  0E0F  0831               	movf	___ftdiv@f2,w
 12535  0E10  00B7               	movwf	??___ftdiv
 12536  0E11  0832               	movf	___ftdiv@f2+1,w
 12537  0E12  00B8               	movwf	??___ftdiv+1
 12538  0E13  0833               	movf	___ftdiv@f2+2,w
 12539  0E14  00B9               	movwf	??___ftdiv+2
 12540  0E15  3010               	movlw	16
 12541  0E16                     u5395:	
 12542  0E16  36B9               	lsrf	??___ftdiv+2,f
 12543  0E17  0CB8               	rrf	??___ftdiv+1,f
 12544  0E18  0CB7               	rrf	??___ftdiv,f
 12545  0E19  0B89               	decfsz	9,f
 12546  0E1A  2E16               	goto	u5395
 12547  0E1B  0837               	movf	??___ftdiv,w
 12548  0E1C  00BA               	movwf	??___ftdiv+3
 12549  0E1D  083A               	movf	??___ftdiv+3,w
 12550  0E1E  06C0               	xorwf	___ftdiv@sign,f
 12551  0E1F  3080               	movlw	128
 12552  0E20  00B7               	movwf	??___ftdiv
 12553  0E21  0837               	movf	??___ftdiv,w
 12554  0E22  05C0               	andwf	___ftdiv@sign,f
 12555  0E23  17B5               	bsf	___ftdiv@f1+1,7
 12556  0E24  30FF               	movlw	255
 12557  0E25  05B4               	andwf	___ftdiv@f1,f
 12558  0E26  30FF               	movlw	255
 12559  0E27  05B5               	andwf	___ftdiv@f1+1,f
 12560  0E28  3000               	movlw	0
 12561  0E29  05B6               	andwf	___ftdiv@f1+2,f
 12562  0E2A  17B2               	bsf	___ftdiv@f2+1,7
 12563  0E2B  30FF               	movlw	255
 12564  0E2C  05B1               	andwf	___ftdiv@f2,f
 12565  0E2D  30FF               	movlw	255
 12566  0E2E  05B2               	andwf	___ftdiv@f2+1,f
 12567  0E2F  3000               	movlw	0
 12568  0E30  05B3               	andwf	___ftdiv@f2+2,f
 12569  0E31  3018               	movlw	24
 12570  0E32  00B7               	movwf	??___ftdiv
 12571  0E33  0837               	movf	??___ftdiv,w
 12572  0E34  00BB               	movwf	___ftdiv@cntr
 12573  0E35                     l5911:	
 12574  0E35  3001               	movlw	1
 12575  0E36                     u5405:	
 12576  0E36  35BC               	lslf	___ftdiv@f3,f
 12577  0E37  0DBD               	rlf	___ftdiv@f3+1,f
 12578  0E38  0DBE               	rlf	___ftdiv@f3+2,f
 12579  0E39  0B89               	decfsz	9,f
 12580  0E3A  2E36               	goto	u5405
 12581  0E3B  0833               	movf	___ftdiv@f2+2,w
 12582  0E3C  0236               	subwf	___ftdiv@f1+2,w
 12583  0E3D  1D03               	skipz
 12584  0E3E  2E45               	goto	u5415
 12585  0E3F  0832               	movf	___ftdiv@f2+1,w
 12586  0E40  0235               	subwf	___ftdiv@f1+1,w
 12587  0E41  1D03               	skipz
 12588  0E42  2E45               	goto	u5415
 12589  0E43  0831               	movf	___ftdiv@f2,w
 12590  0E44  0234               	subwf	___ftdiv@f1,w
 12591  0E45                     u5415:	
 12592  0E45  1C03               	skipc
 12593  0E46  2E4E               	goto	l5919
 12594  0E47  0831               	movf	___ftdiv@f2,w
 12595  0E48  02B4               	subwf	___ftdiv@f1,f
 12596  0E49  0832               	movf	___ftdiv@f2+1,w
 12597  0E4A  3BB5               	subwfb	___ftdiv@f1+1,f
 12598  0E4B  0833               	movf	___ftdiv@f2+2,w
 12599  0E4C  3BB6               	subwfb	___ftdiv@f1+2,f
 12600  0E4D  143C               	bsf	___ftdiv@f3,0
 12601  0E4E                     l5919:	
 12602  0E4E  3001               	movlw	1
 12603  0E4F                     u5425:	
 12604  0E4F  35B4               	lslf	___ftdiv@f1,f
 12605  0E50  0DB5               	rlf	___ftdiv@f1+1,f
 12606  0E51  0DB6               	rlf	___ftdiv@f1+2,f
 12607  0E52  0B89               	decfsz	9,f
 12608  0E53  2E4F               	goto	u5425
 12609  0E54  3001               	movlw	1
 12610  0E55  02BB               	subwf	___ftdiv@cntr,f
 12611  0E56  1D03               	btfss	3,2
 12612  0E57  2E35               	goto	l5911
 12613  0E58  083C               	movf	___ftdiv@f3,w
 12614  0E59  00A1               	movwf	___ftpack@arg
 12615  0E5A  083D               	movf	___ftdiv@f3+1,w
 12616  0E5B  00A2               	movwf	___ftpack@arg+1
 12617  0E5C  083E               	movf	___ftdiv@f3+2,w
 12618  0E5D  00A3               	movwf	___ftpack@arg+2
 12619  0E5E  083F               	movf	___ftdiv@exp,w
 12620  0E5F  00B7               	movwf	??___ftdiv
 12621  0E60  0837               	movf	??___ftdiv,w
 12622  0E61  00A4               	movwf	___ftpack@exp
 12623  0E62  0840               	movf	___ftdiv@sign,w
 12624  0E63  00B8               	movwf	??___ftdiv+1
 12625  0E64  0838               	movf	??___ftdiv+1,w
 12626  0E65  00A5               	movwf	___ftpack@sign
 12627  0E66  318A  22B5         	fcall	___ftpack
 12628  0E68  0020               	movlb	0	; select bank0
 12629  0E69  0821               	movf	?___ftpack,w
 12630  0E6A  00B1               	movwf	?___ftdiv
 12631  0E6B  0822               	movf	?___ftpack+1,w
 12632  0E6C  00B2               	movwf	?___ftdiv+1
 12633  0E6D  0823               	movf	?___ftpack+2,w
 12634  0E6E  00B3               	movwf	?___ftdiv+2
 12635  0E6F  0008               	return
 12636  0E70                     __end_of___ftdiv:	
 12637                           
 12638                           	psect	text67
 12639  0685                     __ptext67:	
 12640 ;; *************** function ___ftadd *****************
 12641 ;; Defined at:
 12642 ;;		line 86 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\ftadd.c"
 12643 ;; Parameters:    Size  Location     Type
 12644 ;;  f1              3   41[BANK0 ] float 
 12645 ;;  f2              3   44[BANK0 ] float 
 12646 ;; Auto vars:     Size  Location     Type
 12647 ;;  exp1            1   53[BANK0 ] unsigned char 
 12648 ;;  exp2            1   52[BANK0 ] unsigned char 
 12649 ;;  sign            1   51[BANK0 ] unsigned char 
 12650 ;; Return value:  Size  Location     Type
 12651 ;;                  3   41[BANK0 ] float 
 12652 ;; Registers used:
 12653 ;;		wreg, status,2, status,0, pclath, cstack
 12654 ;; Tracked objects:
 12655 ;;		On entry : 0/0
 12656 ;;		On exit  : 0/0
 12657 ;;		Unchanged: 0/0
 12658 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12659 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12660 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12661 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12662 ;;      Totals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12663 ;;Total ram usage:       13 bytes
 12664 ;; Hardware stack levels used:    1
 12665 ;; Hardware stack levels required when called:    5
 12666 ;; This function calls:
 12667 ;;		___ftpack
 12668 ;; This function is called by:
 12669 ;;		_BMP_readTemperature
 12670 ;;		_Wireless_packageData
 12671 ;;		_HMC5883L_GetCompassDirection
 12672 ;; This function uses a non-reentrant model
 12673 ;;
 12674                           
 12675                           
 12676                           ;psect for function ___ftadd
 12677  0685                     ___ftadd:	
 12678                           
 12679                           ;incstack = 0
 12680                           ; Regs used in ___ftadd: [wreg+status,2+status,0+pclath+cstack]
 12681  0685  0020               	movlb	0	; select bank0
 12682  0686  0849               	movf	___ftadd@f1,w
 12683  0687  00CF               	movwf	??___ftadd
 12684  0688  084A               	movf	___ftadd@f1+1,w
 12685  0689  00D0               	movwf	??___ftadd+1
 12686  068A  084B               	movf	___ftadd@f1+2,w
 12687  068B  00D1               	movwf	??___ftadd+2
 12688  068C  1003               	clrc
 12689  068D  0D50               	rlf	??___ftadd+1,w
 12690  068E  0D51               	rlf	??___ftadd+2,w
 12691  068F  00D2               	movwf	??___ftadd+3
 12692  0690  0852               	movf	??___ftadd+3,w
 12693  0691  00D5               	movwf	___ftadd@exp1
 12694  0692  084C               	movf	___ftadd@f2,w
 12695  0693  00CF               	movwf	??___ftadd
 12696  0694  084D               	movf	___ftadd@f2+1,w
 12697  0695  00D0               	movwf	??___ftadd+1
 12698  0696  084E               	movf	___ftadd@f2+2,w
 12699  0697  00D1               	movwf	??___ftadd+2
 12700  0698  1003               	clrc
 12701  0699  0D50               	rlf	??___ftadd+1,w
 12702  069A  0D51               	rlf	??___ftadd+2,w
 12703  069B  00D2               	movwf	??___ftadd+3
 12704  069C  0852               	movf	??___ftadd+3,w
 12705  069D  00D4               	movwf	___ftadd@exp2
 12706  069E  0855               	movf	___ftadd@exp1,w
 12707  069F  1903               	btfsc	3,2
 12708  06A0  2EAD               	goto	l6283
 12709  06A1  0854               	movf	___ftadd@exp2,w
 12710  06A2  0255               	subwf	___ftadd@exp1,w
 12711  06A3  1803               	skipnc
 12712  06A4  2EB4               	goto	l6287
 12713  06A5  0355               	decf	___ftadd@exp1,w
 12714  06A6  3AFF               	xorlw	255
 12715  06A7  0754               	addwf	___ftadd@exp2,w
 12716  06A8  00CF               	movwf	??___ftadd
 12717  06A9  3019               	movlw	25
 12718  06AA  024F               	subwf	??___ftadd,w
 12719  06AB  1C03               	skipc
 12720  06AC  2EB4               	goto	l6287
 12721  06AD                     l6283:	
 12722  06AD  084C               	movf	___ftadd@f2,w
 12723  06AE  00C9               	movwf	?___ftadd
 12724  06AF  084D               	movf	___ftadd@f2+1,w
 12725  06B0  00CA               	movwf	?___ftadd+1
 12726  06B1  084E               	movf	___ftadd@f2+2,w
 12727  06B2  00CB               	movwf	?___ftadd+2
 12728  06B3  0008               	return
 12729  06B4                     l6287:	
 12730  06B4  0854               	movf	___ftadd@exp2,w
 12731  06B5  1903               	btfsc	3,2
 12732  06B6  0008               	return
 12733  06B7  0855               	movf	___ftadd@exp1,w
 12734  06B8  0254               	subwf	___ftadd@exp2,w
 12735  06B9  1803               	skipnc
 12736  06BA  2EC3               	goto	l6293
 12737  06BB  0354               	decf	___ftadd@exp2,w
 12738  06BC  3AFF               	xorlw	255
 12739  06BD  0755               	addwf	___ftadd@exp1,w
 12740  06BE  00CF               	movwf	??___ftadd
 12741  06BF  3019               	movlw	25
 12742  06C0  024F               	subwf	??___ftadd,w
 12743  06C1  1803               	btfsc	3,0
 12744  06C2  0008               	return
 12745  06C3                     l6293:	
 12746  06C3  3006               	movlw	6
 12747  06C4  00CF               	movwf	??___ftadd
 12748  06C5  084F               	movf	??___ftadd,w
 12749  06C6  00D3               	movwf	___ftadd@sign
 12750  06C7  1BCB               	btfsc	___ftadd@f1+2,7
 12751  06C8  17D3               	bsf	___ftadd@sign,7
 12752  06C9  1BCE               	btfsc	___ftadd@f2+2,7
 12753  06CA  1753               	bsf	___ftadd@sign,6
 12754  06CB  17CA               	bsf	___ftadd@f1+1,7
 12755  06CC  30FF               	movlw	255
 12756  06CD  05C9               	andwf	___ftadd@f1,f
 12757  06CE  30FF               	movlw	255
 12758  06CF  05CA               	andwf	___ftadd@f1+1,f
 12759  06D0  3000               	movlw	0
 12760  06D1  05CB               	andwf	___ftadd@f1+2,f
 12761  06D2  17CD               	bsf	___ftadd@f2+1,7
 12762  06D3  30FF               	movlw	255
 12763  06D4  05CC               	andwf	___ftadd@f2,f
 12764  06D5  30FF               	movlw	255
 12765  06D6  05CD               	andwf	___ftadd@f2+1,f
 12766  06D7  3000               	movlw	0
 12767  06D8  05CE               	andwf	___ftadd@f2+2,f
 12768  06D9  0854               	movf	___ftadd@exp2,w
 12769  06DA  0255               	subwf	___ftadd@exp1,w
 12770  06DB  1803               	skipnc
 12771  06DC  2EFF               	goto	l6315
 12772  06DD                     l6305:	
 12773  06DD  3001               	movlw	1
 12774  06DE                     u5985:	
 12775  06DE  35CC               	lslf	___ftadd@f2,f
 12776  06DF  0DCD               	rlf	___ftadd@f2+1,f
 12777  06E0  0DCE               	rlf	___ftadd@f2+2,f
 12778  06E1  0B89               	decfsz	9,f
 12779  06E2  2EDE               	goto	u5985
 12780  06E3  3001               	movlw	1
 12781  06E4  02D4               	subwf	___ftadd@exp2,f
 12782  06E5  0854               	movf	___ftadd@exp2,w
 12783  06E6  0655               	xorwf	___ftadd@exp1,w
 12784  06E7  1903               	skipnz
 12785  06E8  2EFA               	goto	l6313
 12786  06E9  3001               	movlw	1
 12787  06EA  02D3               	subwf	___ftadd@sign,f
 12788  06EB  0853               	movf	___ftadd@sign,w
 12789  06EC  3907               	andlw	7
 12790  06ED  1903               	btfsc	3,2
 12791  06EE  2EFA               	goto	l6313
 12792  06EF  2EDD               	goto	l6305
 12793  06F0                     l6311:	
 12794  06F0  3001               	movlw	1
 12795  06F1                     u6015:	
 12796  06F1  36CB               	lsrf	___ftadd@f1+2,f
 12797  06F2  0CCA               	rrf	___ftadd@f1+1,f
 12798  06F3  0CC9               	rrf	___ftadd@f1,f
 12799  06F4  0B89               	decfsz	9,f
 12800  06F5  2EF1               	goto	u6015
 12801  06F6  3001               	movlw	1
 12802  06F7  00CF               	movwf	??___ftadd
 12803  06F8  084F               	movf	??___ftadd,w
 12804  06F9  07D5               	addwf	___ftadd@exp1,f
 12805  06FA                     l6313:	
 12806  06FA  0855               	movf	___ftadd@exp1,w
 12807  06FB  0654               	xorwf	___ftadd@exp2,w
 12808  06FC  1903               	btfsc	3,2
 12809  06FD  2F24               	goto	l1573
 12810  06FE  2EF0               	goto	l6311
 12811  06FF                     l6315:	
 12812  06FF  0855               	movf	___ftadd@exp1,w
 12813  0700  0254               	subwf	___ftadd@exp2,w
 12814  0701  1803               	skipnc
 12815  0702  2F24               	goto	l1573
 12816  0703                     l6317:	
 12817  0703  3001               	movlw	1
 12818  0704                     u6045:	
 12819  0704  35C9               	lslf	___ftadd@f1,f
 12820  0705  0DCA               	rlf	___ftadd@f1+1,f
 12821  0706  0DCB               	rlf	___ftadd@f1+2,f
 12822  0707  0B89               	decfsz	9,f
 12823  0708  2F04               	goto	u6045
 12824  0709  3001               	movlw	1
 12825  070A  02D5               	subwf	___ftadd@exp1,f
 12826  070B  0854               	movf	___ftadd@exp2,w
 12827  070C  0655               	xorwf	___ftadd@exp1,w
 12828  070D  1903               	skipnz
 12829  070E  2F20               	goto	l6325
 12830  070F  3001               	movlw	1
 12831  0710  02D3               	subwf	___ftadd@sign,f
 12832  0711  0853               	movf	___ftadd@sign,w
 12833  0712  3907               	andlw	7
 12834  0713  1903               	btfsc	3,2
 12835  0714  2F20               	goto	l6325
 12836  0715  2F03               	goto	l6317
 12837  0716                     l6323:	
 12838  0716  3001               	movlw	1
 12839  0717                     u6075:	
 12840  0717  36CE               	lsrf	___ftadd@f2+2,f
 12841  0718  0CCD               	rrf	___ftadd@f2+1,f
 12842  0719  0CCC               	rrf	___ftadd@f2,f
 12843  071A  0B89               	decfsz	9,f
 12844  071B  2F17               	goto	u6075
 12845  071C  3001               	movlw	1
 12846  071D  00CF               	movwf	??___ftadd
 12847  071E  084F               	movf	??___ftadd,w
 12848  071F  07D4               	addwf	___ftadd@exp2,f
 12849  0720                     l6325:	
 12850  0720  0855               	movf	___ftadd@exp1,w
 12851  0721  0654               	xorwf	___ftadd@exp2,w
 12852  0722  1D03               	skipz
 12853  0723  2F16               	goto	l6323
 12854  0724                     l1573:	
 12855  0724  1FD3               	btfss	___ftadd@sign,7
 12856  0725  2F36               	goto	l6329
 12857  0726  30FF               	movlw	255
 12858  0727  06C9               	xorwf	___ftadd@f1,f
 12859  0728  30FF               	movlw	255
 12860  0729  06CA               	xorwf	___ftadd@f1+1,f
 12861  072A  30FF               	movlw	255
 12862  072B  06CB               	xorwf	___ftadd@f1+2,f
 12863  072C  3001               	movlw	1
 12864  072D  07C9               	addwf	___ftadd@f1,f
 12865  072E  3000               	movlw	0
 12866  072F  1803               	skipnc
 12867  0730  3001               	movlw	1
 12868  0731  07CA               	addwf	___ftadd@f1+1,f
 12869  0732  3000               	movlw	0
 12870  0733  1803               	skipnc
 12871  0734  3001               	movlw	1
 12872  0735  07CB               	addwf	___ftadd@f1+2,f
 12873  0736                     l6329:	
 12874  0736  1F53               	btfss	___ftadd@sign,6
 12875  0737  2F48               	goto	l6333
 12876  0738  30FF               	movlw	255
 12877  0739  06CC               	xorwf	___ftadd@f2,f
 12878  073A  30FF               	movlw	255
 12879  073B  06CD               	xorwf	___ftadd@f2+1,f
 12880  073C  30FF               	movlw	255
 12881  073D  06CE               	xorwf	___ftadd@f2+2,f
 12882  073E  3001               	movlw	1
 12883  073F  07CC               	addwf	___ftadd@f2,f
 12884  0740  3000               	movlw	0
 12885  0741  1803               	skipnc
 12886  0742  3001               	movlw	1
 12887  0743  07CD               	addwf	___ftadd@f2+1,f
 12888  0744  3000               	movlw	0
 12889  0745  1803               	skipnc
 12890  0746  3001               	movlw	1
 12891  0747  07CE               	addwf	___ftadd@f2+2,f
 12892  0748                     l6333:	
 12893  0748  01D3               	clrf	___ftadd@sign
 12894  0749  0849               	movf	___ftadd@f1,w
 12895  074A  07CC               	addwf	___ftadd@f2,f
 12896  074B  084A               	movf	___ftadd@f1+1,w
 12897  074C  3DCD               	addwfc	___ftadd@f2+1,f
 12898  074D  084B               	movf	___ftadd@f1+2,w
 12899  074E  3DCE               	addwfc	___ftadd@f2+2,f
 12900  074F  1FCE               	btfss	___ftadd@f2+2,7
 12901  0750  2F63               	goto	l6343
 12902  0751  30FF               	movlw	255
 12903  0752  06CC               	xorwf	___ftadd@f2,f
 12904  0753  30FF               	movlw	255
 12905  0754  06CD               	xorwf	___ftadd@f2+1,f
 12906  0755  30FF               	movlw	255
 12907  0756  06CE               	xorwf	___ftadd@f2+2,f
 12908  0757  3001               	movlw	1
 12909  0758  07CC               	addwf	___ftadd@f2,f
 12910  0759  3000               	movlw	0
 12911  075A  1803               	skipnc
 12912  075B  3001               	movlw	1
 12913  075C  07CD               	addwf	___ftadd@f2+1,f
 12914  075D  3000               	movlw	0
 12915  075E  1803               	skipnc
 12916  075F  3001               	movlw	1
 12917  0760  07CE               	addwf	___ftadd@f2+2,f
 12918  0761  01D3               	clrf	___ftadd@sign
 12919  0762  0AD3               	incf	___ftadd@sign,f
 12920  0763                     l6343:	
 12921  0763  084C               	movf	___ftadd@f2,w
 12922  0764  00A1               	movwf	___ftpack@arg
 12923  0765  084D               	movf	___ftadd@f2+1,w
 12924  0766  00A2               	movwf	___ftpack@arg+1
 12925  0767  084E               	movf	___ftadd@f2+2,w
 12926  0768  00A3               	movwf	___ftpack@arg+2
 12927  0769  0855               	movf	___ftadd@exp1,w
 12928  076A  00CF               	movwf	??___ftadd
 12929  076B  084F               	movf	??___ftadd,w
 12930  076C  00A4               	movwf	___ftpack@exp
 12931  076D  0853               	movf	___ftadd@sign,w
 12932  076E  00D0               	movwf	??___ftadd+1
 12933  076F  0850               	movf	??___ftadd+1,w
 12934  0770  00A5               	movwf	___ftpack@sign
 12935  0771  318A  22B5         	fcall	___ftpack
 12936  0773  0020               	movlb	0	; select bank0
 12937  0774  0821               	movf	?___ftpack,w
 12938  0775  00C9               	movwf	?___ftadd
 12939  0776  0822               	movf	?___ftpack+1,w
 12940  0777  00CA               	movwf	?___ftadd+1
 12941  0778  0823               	movf	?___ftpack+2,w
 12942  0779  00CB               	movwf	?___ftadd+2
 12943  077A  0008               	return
 12944  077B                     __end_of___ftadd:	
 12945                           
 12946                           	psect	text68
 12947  1664                     __ptext68:	
 12948 ;; *************** function ___awtoft *****************
 12949 ;; Defined at:
 12950 ;;		line 32 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\awtoft.c"
 12951 ;; Parameters:    Size  Location     Type
 12952 ;;  c               2    9[BANK0 ] int 
 12953 ;; Auto vars:     Size  Location     Type
 12954 ;;  sign            1   14[BANK0 ] unsigned char 
 12955 ;; Return value:  Size  Location     Type
 12956 ;;                  3    9[BANK0 ] float 
 12957 ;; Registers used:
 12958 ;;		wreg, status,2, status,0, pclath, cstack
 12959 ;; Tracked objects:
 12960 ;;		On entry : 0/0
 12961 ;;		On exit  : 0/0
 12962 ;;		Unchanged: 0/0
 12963 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12964 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12965 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12966 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12967 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12968 ;;Total ram usage:        6 bytes
 12969 ;; Hardware stack levels used:    1
 12970 ;; Hardware stack levels required when called:    5
 12971 ;; This function calls:
 12972 ;;		___ftpack
 12973 ;; This function is called by:
 12974 ;;		_BMP_readTemperature
 12975 ;;		_HMC5883L_GetCompassDirection
 12976 ;; This function uses a non-reentrant model
 12977 ;;
 12978                           
 12979                           
 12980                           ;psect for function ___awtoft
 12981  1664                     ___awtoft:	
 12982                           
 12983                           ;incstack = 0
 12984                           ; Regs used in ___awtoft: [wreg+status,2+status,0+pclath+cstack]
 12985  1664  0020               	movlb	0	; select bank0
 12986  1665  01AE               	clrf	___awtoft@sign
 12987  1666  1FAA               	btfss	___awtoft@c+1,7
 12988  1667  2E6F               	goto	l6273
 12989  1668  09A9               	comf	___awtoft@c,f
 12990  1669  09AA               	comf	___awtoft@c+1,f
 12991  166A  0AA9               	incf	___awtoft@c,f
 12992  166B  1903               	skipnz
 12993  166C  0AAA               	incf	___awtoft@c+1,f
 12994  166D  01AE               	clrf	___awtoft@sign
 12995  166E  0AAE               	incf	___awtoft@sign,f
 12996  166F                     l6273:	
 12997  166F  0829               	movf	___awtoft@c,w
 12998  1670  00A1               	movwf	___ftpack@arg
 12999  1671  082A               	movf	___awtoft@c+1,w
 13000  1672  00A2               	movwf	___ftpack@arg+1
 13001  1673  01A3               	clrf	___ftpack@arg+2
 13002  1674  308E               	movlw	142
 13003  1675  00AC               	movwf	??___awtoft
 13004  1676  082C               	movf	??___awtoft,w
 13005  1677  00A4               	movwf	___ftpack@exp
 13006  1678  082E               	movf	___awtoft@sign,w
 13007  1679  00AD               	movwf	??___awtoft+1
 13008  167A  082D               	movf	??___awtoft+1,w
 13009  167B  00A5               	movwf	___ftpack@sign
 13010  167C  318A  22B5         	fcall	___ftpack
 13011  167E  0020               	movlb	0	; select bank0
 13012  167F  0821               	movf	?___ftpack,w
 13013  1680  00A9               	movwf	?___awtoft
 13014  1681  0822               	movf	?___ftpack+1,w
 13015  1682  00AA               	movwf	?___awtoft+1
 13016  1683  0823               	movf	?___ftpack+2,w
 13017  1684  00AB               	movwf	?___awtoft+2
 13018  1685  0008               	return
 13019  1686                     __end_of___awtoft:	
 13020                           
 13021                           	psect	text69
 13022  083C                     __ptext69:	
 13023 ;; *************** function ___altoft *****************
 13024 ;; Defined at:
 13025 ;;		line 42 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\altoft.c"
 13026 ;; Parameters:    Size  Location     Type
 13027 ;;  c               4    9[BANK0 ] long 
 13028 ;; Auto vars:     Size  Location     Type
 13029 ;;  sign            1   16[BANK0 ] unsigned char 
 13030 ;;  exp             1   15[BANK0 ] unsigned char 
 13031 ;; Return value:  Size  Location     Type
 13032 ;;                  3    9[BANK0 ] float 
 13033 ;; Registers used:
 13034 ;;		wreg, status,2, status,0, pclath, cstack
 13035 ;; Tracked objects:
 13036 ;;		On entry : 0/0
 13037 ;;		On exit  : 0/0
 13038 ;;		Unchanged: 0/0
 13039 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13040 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13041 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13042 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13043 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13044 ;;Total ram usage:        8 bytes
 13045 ;; Hardware stack levels used:    1
 13046 ;; Hardware stack levels required when called:    5
 13047 ;; This function calls:
 13048 ;;		___ftpack
 13049 ;; This function is called by:
 13050 ;;		_BMP_readTemperature
 13051 ;; This function uses a non-reentrant model
 13052 ;;
 13053                           
 13054                           
 13055                           ;psect for function ___altoft
 13056  083C                     ___altoft:	
 13057                           
 13058                           ;incstack = 0
 13059                           ; Regs used in ___altoft: [wreg+status,2+status,0+pclath+cstack]
 13060  083C  0020               	movlb	0	; select bank0
 13061  083D  01B0               	clrf	___altoft@sign
 13062  083E  308E               	movlw	142
 13063  083F  00AD               	movwf	??___altoft
 13064  0840  082D               	movf	??___altoft,w
 13065  0841  00AF               	movwf	___altoft@exp
 13066  0842  1FAC               	btfss	___altoft@c+3,7
 13067  0843  2851               	goto	l6259
 13068  0844  09A9               	comf	___altoft@c,f
 13069  0845  09AA               	comf	___altoft@c+1,f
 13070  0846  09AB               	comf	___altoft@c+2,f
 13071  0847  09AC               	comf	___altoft@c+3,f
 13072  0848  0AA9               	incf	___altoft@c,f
 13073  0849  1903               	skipnz
 13074  084A  0AAA               	incf	___altoft@c+1,f
 13075  084B  1903               	skipnz
 13076  084C  0AAB               	incf	___altoft@c+2,f
 13077  084D  1903               	skipnz
 13078  084E  0AAC               	incf	___altoft@c+3,f
 13079  084F  01B0               	clrf	___altoft@sign
 13080  0850  0AB0               	incf	___altoft@sign,f
 13081  0851                     l6259:	
 13082  0851  30FF               	movlw	255
 13083  0852  052C               	andwf	___altoft@c+3,w
 13084  0853  1903               	btfsc	3,2
 13085  0854  2861               	goto	l6261
 13086  0855  3001               	movlw	1
 13087  0856                     u5865:	
 13088  0856  36AC               	lsrf	___altoft@c+3,f
 13089  0857  0CAB               	rrf	___altoft@c+2,f
 13090  0858  0CAA               	rrf	___altoft@c+1,f
 13091  0859  0CA9               	rrf	___altoft@c,f
 13092  085A  0B89               	decfsz	9,f
 13093  085B  2856               	goto	u5865
 13094  085C  3001               	movlw	1
 13095  085D  00AD               	movwf	??___altoft
 13096  085E  082D               	movf	??___altoft,w
 13097  085F  07AF               	addwf	___altoft@exp,f
 13098  0860  2851               	goto	l6259
 13099  0861                     l6261:	
 13100  0861  0829               	movf	___altoft@c,w
 13101  0862  00A1               	movwf	___ftpack@arg
 13102  0863  082A               	movf	___altoft@c+1,w
 13103  0864  00A2               	movwf	___ftpack@arg+1
 13104  0865  082B               	movf	___altoft@c+2,w
 13105  0866  00A3               	movwf	___ftpack@arg+2
 13106  0867  082F               	movf	___altoft@exp,w
 13107  0868  00AD               	movwf	??___altoft
 13108  0869  082D               	movf	??___altoft,w
 13109  086A  00A4               	movwf	___ftpack@exp
 13110  086B  0830               	movf	___altoft@sign,w
 13111  086C  00AE               	movwf	??___altoft+1
 13112  086D  082E               	movf	??___altoft+1,w
 13113  086E  00A5               	movwf	___ftpack@sign
 13114  086F  318A  22B5         	fcall	___ftpack
 13115  0871  0020               	movlb	0	; select bank0
 13116  0872  0821               	movf	?___ftpack,w
 13117  0873  00A9               	movwf	?___altoft
 13118  0874  0822               	movf	?___ftpack+1,w
 13119  0875  00AA               	movwf	?___altoft+1
 13120  0876  0823               	movf	?___ftpack+2,w
 13121  0877  00AB               	movwf	?___altoft+2
 13122  0878  0008               	return
 13123  0879                     __end_of___altoft:	
 13124                           
 13125                           	psect	text70
 13126  0AB5                     __ptext70:	
 13127 ;; *************** function ___ftpack *****************
 13128 ;; Defined at:
 13129 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\float.c"
 13130 ;; Parameters:    Size  Location     Type
 13131 ;;  arg             3    1[BANK0 ] unsigned um
 13132 ;;  exp             1    4[BANK0 ] unsigned char 
 13133 ;;  sign            1    5[BANK0 ] unsigned char 
 13134 ;; Auto vars:     Size  Location     Type
 13135 ;;		None
 13136 ;; Return value:  Size  Location     Type
 13137 ;;                  3    1[BANK0 ] float 
 13138 ;; Registers used:
 13139 ;;		wreg, status,2, status,0
 13140 ;; Tracked objects:
 13141 ;;		On entry : 0/0
 13142 ;;		On exit  : 0/0
 13143 ;;		Unchanged: 0/0
 13144 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13145 ;;      Params:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13146 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13147 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13148 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13149 ;;Total ram usage:        8 bytes
 13150 ;; Hardware stack levels used:    1
 13151 ;; Hardware stack levels required when called:    4
 13152 ;; This function calls:
 13153 ;;		Nothing
 13154 ;; This function is called by:
 13155 ;;		___altoft
 13156 ;;		___awtoft
 13157 ;;		___ftadd
 13158 ;;		___ftdiv
 13159 ;;		___ftmul
 13160 ;;		___lwtoft
 13161 ;; This function uses a non-reentrant model
 13162 ;;
 13163                           
 13164                           
 13165                           ;psect for function ___ftpack
 13166  0AB5                     ___ftpack:	
 13167                           
 13168                           ;incstack = 0
 13169                           ; Regs used in ___ftpack: [wreg+status,2+status,0]
 13170  0AB5  0020               	movlb	0	; select bank0
 13171  0AB6  0824               	movf	___ftpack@exp,w
 13172  0AB7  1903               	btfsc	3,2
 13173  0AB8  2ABE               	goto	l5711
 13174  0AB9  0823               	movf	___ftpack@arg+2,w
 13175  0ABA  0422               	iorwf	___ftpack@arg+1,w
 13176  0ABB  0421               	iorwf	___ftpack@arg,w
 13177  0ABC  1D03               	skipz
 13178  0ABD  2ACF               	goto	l5717
 13179  0ABE                     l5711:	
 13180  0ABE  3000               	movlw	0
 13181  0ABF  00A1               	movwf	?___ftpack
 13182  0AC0  3000               	movlw	0
 13183  0AC1  00A2               	movwf	?___ftpack+1
 13184  0AC2  3000               	movlw	0
 13185  0AC3  00A3               	movwf	?___ftpack+2
 13186  0AC4  0008               	return
 13187  0AC5                     l5715:	
 13188  0AC5  3001               	movlw	1
 13189  0AC6  00A6               	movwf	??___ftpack
 13190  0AC7  0826               	movf	??___ftpack,w
 13191  0AC8  07A4               	addwf	___ftpack@exp,f
 13192  0AC9  3001               	movlw	1
 13193  0ACA                     u5155:	
 13194  0ACA  36A3               	lsrf	___ftpack@arg+2,f
 13195  0ACB  0CA2               	rrf	___ftpack@arg+1,f
 13196  0ACC  0CA1               	rrf	___ftpack@arg,f
 13197  0ACD  0B89               	decfsz	9,f
 13198  0ACE  2ACA               	goto	u5155
 13199  0ACF                     l5717:	
 13200  0ACF  30FE               	movlw	254
 13201  0AD0  0523               	andwf	___ftpack@arg+2,w
 13202  0AD1  1903               	btfsc	3,2
 13203  0AD2  2AE8               	goto	l1542
 13204  0AD3  2AC5               	goto	l5715
 13205  0AD4                     l5719:	
 13206  0AD4  3001               	movlw	1
 13207  0AD5  00A6               	movwf	??___ftpack
 13208  0AD6  0826               	movf	??___ftpack,w
 13209  0AD7  07A4               	addwf	___ftpack@exp,f
 13210  0AD8  3001               	movlw	1
 13211  0AD9  07A1               	addwf	___ftpack@arg,f
 13212  0ADA  3000               	movlw	0
 13213  0ADB  1803               	skipnc
 13214  0ADC  3001               	movlw	1
 13215  0ADD  07A2               	addwf	___ftpack@arg+1,f
 13216  0ADE  3000               	movlw	0
 13217  0ADF  1803               	skipnc
 13218  0AE0  3001               	movlw	1
 13219  0AE1  07A3               	addwf	___ftpack@arg+2,f
 13220  0AE2  3001               	movlw	1
 13221  0AE3                     u5175:	
 13222  0AE3  36A3               	lsrf	___ftpack@arg+2,f
 13223  0AE4  0CA2               	rrf	___ftpack@arg+1,f
 13224  0AE5  0CA1               	rrf	___ftpack@arg,f
 13225  0AE6  0B89               	decfsz	9,f
 13226  0AE7  2AE3               	goto	u5175
 13227  0AE8                     l1542:	
 13228  0AE8  30FF               	movlw	255
 13229  0AE9  0523               	andwf	___ftpack@arg+2,w
 13230  0AEA  1903               	btfsc	3,2
 13231  0AEB  2AF5               	goto	l5727
 13232  0AEC  2AD4               	goto	l5719
 13233  0AED                     l5725:	
 13234  0AED  3001               	movlw	1
 13235  0AEE  02A4               	subwf	___ftpack@exp,f
 13236  0AEF  3001               	movlw	1
 13237  0AF0                     u5195:	
 13238  0AF0  35A1               	lslf	___ftpack@arg,f
 13239  0AF1  0DA2               	rlf	___ftpack@arg+1,f
 13240  0AF2  0DA3               	rlf	___ftpack@arg+2,f
 13241  0AF3  0B89               	decfsz	9,f
 13242  0AF4  2AF0               	goto	u5195
 13243  0AF5                     l5727:	
 13244  0AF5  1BA2               	btfsc	___ftpack@arg+1,7
 13245  0AF6  2AFB               	goto	l1549
 13246  0AF7  3002               	movlw	2
 13247  0AF8  0224               	subwf	___ftpack@exp,w
 13248  0AF9  1803               	skipnc
 13249  0AFA  2AED               	goto	l5725
 13250  0AFB                     l1549:	
 13251  0AFB  1824               	btfsc	___ftpack@exp,0
 13252  0AFC  2B03               	goto	l1550
 13253  0AFD  30FF               	movlw	255
 13254  0AFE  05A1               	andwf	___ftpack@arg,f
 13255  0AFF  307F               	movlw	127
 13256  0B00  05A2               	andwf	___ftpack@arg+1,f
 13257  0B01  30FF               	movlw	255
 13258  0B02  05A3               	andwf	___ftpack@arg+2,f
 13259  0B03                     l1550:	
 13260  0B03  1003               	clrc
 13261  0B04  0CA4               	rrf	___ftpack@exp,f
 13262  0B05  0824               	movf	___ftpack@exp,w
 13263  0B06  00A6               	movwf	??___ftpack
 13264  0B07  01A7               	clrf	??___ftpack+1
 13265  0B08  01A8               	clrf	??___ftpack+2
 13266  0B09  3010               	movlw	16
 13267  0B0A                     u5235:	
 13268  0B0A  35A6               	lslf	??___ftpack,f
 13269  0B0B  0DA7               	rlf	??___ftpack+1,f
 13270  0B0C  0DA8               	rlf	??___ftpack+2,f
 13271  0B0D  0B89               	decfsz	9,f
 13272  0B0E  2B0A               	goto	u5235
 13273  0B0F  0826               	movf	??___ftpack,w
 13274  0B10  04A1               	iorwf	___ftpack@arg,f
 13275  0B11  0827               	movf	??___ftpack+1,w
 13276  0B12  04A2               	iorwf	___ftpack@arg+1,f
 13277  0B13  0828               	movf	??___ftpack+2,w
 13278  0B14  04A3               	iorwf	___ftpack@arg+2,f
 13279  0B15  0825               	movf	___ftpack@sign,w
 13280  0B16  1903               	btfsc	3,2
 13281  0B17  0008               	return
 13282  0B18  17A3               	bsf	___ftpack@arg+2,7
 13283  0B19  0008               	return
 13284  0B1A                     __end_of___ftpack:	
 13285                           
 13286                           	psect	text71
 13287  077B                     __ptext71:	
 13288 ;; *************** function ___aldiv *****************
 13289 ;; Defined at:
 13290 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\aldiv.c"
 13291 ;; Parameters:    Size  Location     Type
 13292 ;;  divisor         4    1[BANK0 ] long 
 13293 ;;  dividend        4    5[BANK0 ] long 
 13294 ;; Auto vars:     Size  Location     Type
 13295 ;;  quotient        4   12[BANK0 ] long 
 13296 ;;  sign            1   11[BANK0 ] unsigned char 
 13297 ;;  counter         1   10[BANK0 ] unsigned char 
 13298 ;; Return value:  Size  Location     Type
 13299 ;;                  4    1[BANK0 ] long 
 13300 ;; Registers used:
 13301 ;;		wreg, status,2, status,0
 13302 ;; Tracked objects:
 13303 ;;		On entry : 0/0
 13304 ;;		On exit  : 0/0
 13305 ;;		Unchanged: 0/0
 13306 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13307 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13308 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13309 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13310 ;;      Totals:         0      15       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13311 ;;Total ram usage:       15 bytes
 13312 ;; Hardware stack levels used:    1
 13313 ;; Hardware stack levels required when called:    4
 13314 ;; This function calls:
 13315 ;;		Nothing
 13316 ;; This function is called by:
 13317 ;;		_BMP_readTemperature
 13318 ;; This function uses a non-reentrant model
 13319 ;;
 13320                           
 13321                           
 13322                           ;psect for function ___aldiv
 13323  077B                     ___aldiv:	
 13324                           
 13325                           ;incstack = 0
 13326                           ; Regs used in ___aldiv: [wreg+status,2+status,0]
 13327  077B  0020               	movlb	0	; select bank0
 13328  077C  01AB               	clrf	___aldiv@sign
 13329  077D  1FA4               	btfss	___aldiv@divisor+3,7
 13330  077E  2F8C               	goto	l1408
 13331  077F  09A1               	comf	___aldiv@divisor,f
 13332  0780  09A2               	comf	___aldiv@divisor+1,f
 13333  0781  09A3               	comf	___aldiv@divisor+2,f
 13334  0782  09A4               	comf	___aldiv@divisor+3,f
 13335  0783  0AA1               	incf	___aldiv@divisor,f
 13336  0784  1903               	skipnz
 13337  0785  0AA2               	incf	___aldiv@divisor+1,f
 13338  0786  1903               	skipnz
 13339  0787  0AA3               	incf	___aldiv@divisor+2,f
 13340  0788  1903               	skipnz
 13341  0789  0AA4               	incf	___aldiv@divisor+3,f
 13342  078A  01AB               	clrf	___aldiv@sign
 13343  078B  0AAB               	incf	___aldiv@sign,f
 13344  078C                     l1408:	
 13345  078C  1FA8               	btfss	___aldiv@dividend+3,7
 13346  078D  2F9D               	goto	l6219
 13347  078E  09A5               	comf	___aldiv@dividend,f
 13348  078F  09A6               	comf	___aldiv@dividend+1,f
 13349  0790  09A7               	comf	___aldiv@dividend+2,f
 13350  0791  09A8               	comf	___aldiv@dividend+3,f
 13351  0792  0AA5               	incf	___aldiv@dividend,f
 13352  0793  1903               	skipnz
 13353  0794  0AA6               	incf	___aldiv@dividend+1,f
 13354  0795  1903               	skipnz
 13355  0796  0AA7               	incf	___aldiv@dividend+2,f
 13356  0797  1903               	skipnz
 13357  0798  0AA8               	incf	___aldiv@dividend+3,f
 13358  0799  3001               	movlw	1
 13359  079A  00A9               	movwf	??___aldiv
 13360  079B  0829               	movf	??___aldiv,w
 13361  079C  06AB               	xorwf	___aldiv@sign,f
 13362  079D                     l6219:	
 13363  079D  3000               	movlw	0
 13364  079E  00AF               	movwf	___aldiv@quotient+3
 13365  079F  3000               	movlw	0
 13366  07A0  00AE               	movwf	___aldiv@quotient+2
 13367  07A1  3000               	movlw	0
 13368  07A2  00AD               	movwf	___aldiv@quotient+1
 13369  07A3  3000               	movlw	0
 13370  07A4  00AC               	movwf	___aldiv@quotient
 13371  07A5  0824               	movf	___aldiv@divisor+3,w
 13372  07A6  0423               	iorwf	___aldiv@divisor+2,w
 13373  07A7  0422               	iorwf	___aldiv@divisor+1,w
 13374  07A8  0421               	iorwf	___aldiv@divisor,w
 13375  07A9  1903               	skipnz
 13376  07AA  2FE6               	goto	l6241
 13377  07AB  01AA               	clrf	___aldiv@counter
 13378  07AC  0AAA               	incf	___aldiv@counter,f
 13379  07AD                     l6227:	
 13380  07AD  1BA4               	btfsc	___aldiv@divisor+3,7
 13381  07AE  2FBB               	goto	l6229
 13382  07AF  3001               	movlw	1
 13383  07B0                     u5785:	
 13384  07B0  35A1               	lslf	___aldiv@divisor,f
 13385  07B1  0DA2               	rlf	___aldiv@divisor+1,f
 13386  07B2  0DA3               	rlf	___aldiv@divisor+2,f
 13387  07B3  0DA4               	rlf	___aldiv@divisor+3,f
 13388  07B4  0B89               	decfsz	9,f
 13389  07B5  2FB0               	goto	u5785
 13390  07B6  3001               	movlw	1
 13391  07B7  00A9               	movwf	??___aldiv
 13392  07B8  0829               	movf	??___aldiv,w
 13393  07B9  07AA               	addwf	___aldiv@counter,f
 13394  07BA  2FAD               	goto	l6227
 13395  07BB                     l6229:	
 13396  07BB  3001               	movlw	1
 13397  07BC                     u5805:	
 13398  07BC  35AC               	lslf	___aldiv@quotient,f
 13399  07BD  0DAD               	rlf	___aldiv@quotient+1,f
 13400  07BE  0DAE               	rlf	___aldiv@quotient+2,f
 13401  07BF  0DAF               	rlf	___aldiv@quotient+3,f
 13402  07C0  0B89               	decfsz	9,f
 13403  07C1  2FBC               	goto	u5805
 13404  07C2  0824               	movf	___aldiv@divisor+3,w
 13405  07C3  0228               	subwf	___aldiv@dividend+3,w
 13406  07C4  1D03               	skipz
 13407  07C5  2FD0               	goto	u5815
 13408  07C6  0823               	movf	___aldiv@divisor+2,w
 13409  07C7  0227               	subwf	___aldiv@dividend+2,w
 13410  07C8  1D03               	skipz
 13411  07C9  2FD0               	goto	u5815
 13412  07CA  0822               	movf	___aldiv@divisor+1,w
 13413  07CB  0226               	subwf	___aldiv@dividend+1,w
 13414  07CC  1D03               	skipz
 13415  07CD  2FD0               	goto	u5815
 13416  07CE  0821               	movf	___aldiv@divisor,w
 13417  07CF  0225               	subwf	___aldiv@dividend,w
 13418  07D0                     u5815:	
 13419  07D0  1C03               	skipc
 13420  07D1  2FDB               	goto	l6237
 13421  07D2  0821               	movf	___aldiv@divisor,w
 13422  07D3  02A5               	subwf	___aldiv@dividend,f
 13423  07D4  0822               	movf	___aldiv@divisor+1,w
 13424  07D5  3BA6               	subwfb	___aldiv@dividend+1,f
 13425  07D6  0823               	movf	___aldiv@divisor+2,w
 13426  07D7  3BA7               	subwfb	___aldiv@dividend+2,f
 13427  07D8  0824               	movf	___aldiv@divisor+3,w
 13428  07D9  3BA8               	subwfb	___aldiv@dividend+3,f
 13429  07DA  142C               	bsf	___aldiv@quotient,0
 13430  07DB                     l6237:	
 13431  07DB  3001               	movlw	1
 13432  07DC                     u5825:	
 13433  07DC  36A4               	lsrf	___aldiv@divisor+3,f
 13434  07DD  0CA3               	rrf	___aldiv@divisor+2,f
 13435  07DE  0CA2               	rrf	___aldiv@divisor+1,f
 13436  07DF  0CA1               	rrf	___aldiv@divisor,f
 13437  07E0  0B89               	decfsz	9,f
 13438  07E1  2FDC               	goto	u5825
 13439  07E2  3001               	movlw	1
 13440  07E3  02AA               	subwf	___aldiv@counter,f
 13441  07E4  1D03               	btfss	3,2
 13442  07E5  2FBB               	goto	l6229
 13443  07E6                     l6241:	
 13444  07E6  082B               	movf	___aldiv@sign,w
 13445  07E7  1903               	btfsc	3,2
 13446  07E8  2FF4               	goto	l6245
 13447  07E9  09AC               	comf	___aldiv@quotient,f
 13448  07EA  09AD               	comf	___aldiv@quotient+1,f
 13449  07EB  09AE               	comf	___aldiv@quotient+2,f
 13450  07EC  09AF               	comf	___aldiv@quotient+3,f
 13451  07ED  0AAC               	incf	___aldiv@quotient,f
 13452  07EE  1903               	skipnz
 13453  07EF  0AAD               	incf	___aldiv@quotient+1,f
 13454  07F0  1903               	skipnz
 13455  07F1  0AAE               	incf	___aldiv@quotient+2,f
 13456  07F2  1903               	skipnz
 13457  07F3  0AAF               	incf	___aldiv@quotient+3,f
 13458  07F4                     l6245:	
 13459  07F4  082F               	movf	___aldiv@quotient+3,w
 13460  07F5  00A4               	movwf	?___aldiv+3
 13461  07F6  082E               	movf	___aldiv@quotient+2,w
 13462  07F7  00A3               	movwf	?___aldiv+2
 13463  07F8  082D               	movf	___aldiv@quotient+1,w
 13464  07F9  00A2               	movwf	?___aldiv+1
 13465  07FA  082C               	movf	___aldiv@quotient,w
 13466  07FB  00A1               	movwf	?___aldiv
 13467  07FC  0008               	return
 13468  07FD                     __end_of___aldiv:	
 13469                           
 13470                           	psect	text72
 13471  08BE                     __ptext72:	
 13472 ;; *************** function _HMC5883L_ReadBits *****************
 13473 ;; Defined at:
 13474 ;;		line 418 in file "hmc5883l.c"
 13475 ;; Parameters:    Size  Location     Type
 13476 ;;  slaveAddr       1    wreg     unsigned char 
 13477 ;;  regAddr         1   35[BANK0 ] unsigned char 
 13478 ;;  bitStart        1   36[BANK0 ] unsigned char 
 13479 ;;  length          1   37[BANK0 ] unsigned char 
 13480 ;;  data            1   38[BANK0 ] PTR unsigned char 
 13481 ;;		 -> BMP_readTemperature@tmp(1), HMC5883L_GetHeading@tmp(1), HMC5883L_GetMode@tmp(1), HMC5883L_GetGain@tmp(1), 
 13482 ;;		 -> HMC5883L_GetMeasurementBias@tmp(1), HMC5883L_GetDataRate@tmp(1), HMC5883L_GetSampleAveraging@tmp(1), 
 13483 ;; Auto vars:     Size  Location     Type
 13484 ;;  slaveAddr       1   42[BANK0 ] unsigned char 
 13485 ;;  mask            1   43[BANK0 ] unsigned char 
 13486 ;;  tmp             1   44[BANK0 ] unsigned char 
 13487 ;; Return value:  Size  Location     Type
 13488 ;;                  1    wreg      unsigned char 
 13489 ;; Registers used:
 13490 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13491 ;; Tracked objects:
 13492 ;;		On entry : 0/0
 13493 ;;		On exit  : 0/0
 13494 ;;		Unchanged: 0/0
 13495 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13496 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13497 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13498 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13499 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13500 ;;Total ram usage:       10 bytes
 13501 ;; Hardware stack levels used:    1
 13502 ;; Hardware stack levels required when called:    8
 13503 ;; This function calls:
 13504 ;;		_HMC5883L_I2C_BufferRead
 13505 ;; This function is called by:
 13506 ;;		_BMP_readTemperature
 13507 ;;		_HMC5883L_GetSampleAveraging
 13508 ;;		_HMC5883L_GetDataRate
 13509 ;;		_HMC5883L_GetMeasurementBias
 13510 ;;		_HMC5883L_GetGain
 13511 ;;		_HMC5883L_GetMode
 13512 ;;		_HMC5883L_GetHeading
 13513 ;; This function uses a non-reentrant model
 13514 ;;
 13515                           
 13516                           
 13517                           ;psect for function _HMC5883L_ReadBits
 13518  08BE                     _HMC5883L_ReadBits:	
 13519                           
 13520                           ;incstack = 0
 13521                           ; Regs used in _HMC5883L_ReadBits: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 13522                           ;HMC5883L_ReadBits@slaveAddr stored from wreg
 13523  08BE  0020               	movlb	0	; select bank0
 13524  08BF  00CA               	movwf	HMC5883L_ReadBits@slaveAddr
 13525                           
 13526                           ;hmc5883l.c: 420: uint8_t tmp;
 13527                           ;hmc5883l.c: 422: if(HMC5883L_I2C_BufferRead(slaveAddr, &tmp, regAddr, 1))
 13528  08C0  304C               	movlw	low HMC5883L_ReadBits@tmp
 13529  08C1  00BC               	movwf	HMC5883L_I2C_BufferRead@pBuffer
 13530  08C2  3000               	movlw	high HMC5883L_ReadBits@tmp
 13531  08C3  00BD               	movwf	HMC5883L_I2C_BufferRead@pBuffer+1
 13532  08C4  0843               	movf	HMC5883L_ReadBits@regAddr,w
 13533  08C5  00C7               	movwf	??_HMC5883L_ReadBits
 13534  08C6  0847               	movf	??_HMC5883L_ReadBits,w
 13535  08C7  00BE               	movwf	HMC5883L_I2C_BufferRead@ReadAddr
 13536  08C8  3001               	movlw	1
 13537  08C9  00BF               	movwf	HMC5883L_I2C_BufferRead@NumByteToRead
 13538  08CA  3000               	movlw	0
 13539  08CB  00C0               	movwf	HMC5883L_I2C_BufferRead@NumByteToRead+1
 13540  08CC  084A               	movf	HMC5883L_ReadBits@slaveAddr,w
 13541  08CD  3193  23CC  3188   	fcall	_HMC5883L_I2C_BufferRead
 13542  08D0  3A00               	xorlw	0
 13543  08D1  1903               	skipnz
 13544  08D2  2902               	goto	l6165
 13545                           
 13546                           ;hmc5883l.c: 423: {
 13547                           ;hmc5883l.c: 424: uint8_t mask = ((1 << length) - 1) << (bitStart - length + 1);
 13548  08D3  3001               	movlw	1
 13549  08D4  0020               	movlb	0	; select bank0
 13550  08D5  00C7               	movwf	??_HMC5883L_ReadBits
 13551  08D6  0A45               	incf	HMC5883L_ReadBits@length,w
 13552  08D7  28D9               	goto	u5664
 13553  08D8                     u5665:	
 13554  08D8  35C7               	lslf	??_HMC5883L_ReadBits,f
 13555  08D9                     u5664:	
 13556  08D9  0B89               	decfsz	9,f
 13557  08DA  28D8               	goto	u5665
 13558  08DB  0847               	movf	??_HMC5883L_ReadBits,w
 13559  08DC  3EFF               	addlw	255
 13560  08DD  00C8               	movwf	??_HMC5883L_ReadBits+1
 13561  08DE  0345               	decf	HMC5883L_ReadBits@length,w
 13562  08DF  3AFF               	xorlw	255
 13563  08E0  0744               	addwf	HMC5883L_ReadBits@bitStart,w
 13564  08E1  3E01               	addlw	1
 13565  08E2  0A89               	incf	9,f
 13566  08E3  28E5               	goto	u5674
 13567  08E4                     u5675:	
 13568  08E4  35C8               	lslf	??_HMC5883L_ReadBits+1,f
 13569  08E5                     u5674:	
 13570  08E5  0B89               	decfsz	9,f
 13571  08E6  28E4               	goto	u5675
 13572  08E7  0848               	movf	??_HMC5883L_ReadBits+1,w
 13573  08E8  00C9               	movwf	??_HMC5883L_ReadBits+2
 13574  08E9  0849               	movf	??_HMC5883L_ReadBits+2,w
 13575  08EA  00CB               	movwf	HMC5883L_ReadBits@mask
 13576                           
 13577                           ;hmc5883l.c: 425: tmp &= mask;
 13578  08EB  084B               	movf	HMC5883L_ReadBits@mask,w
 13579  08EC  00C7               	movwf	??_HMC5883L_ReadBits
 13580  08ED  0847               	movf	??_HMC5883L_ReadBits,w
 13581  08EE  05CC               	andwf	HMC5883L_ReadBits@tmp,f
 13582                           
 13583                           ;hmc5883l.c: 426: tmp >>= (bitStart - length + 1);
 13584  08EF  0345               	decf	HMC5883L_ReadBits@length,w
 13585  08F0  3AFF               	xorlw	255
 13586  08F1  0744               	addwf	HMC5883L_ReadBits@bitStart,w
 13587  08F2  3E01               	addlw	1
 13588  08F3  0A89               	incf	9,f
 13589  08F4  28F7               	goto	u5680
 13590  08F5                     u5685:	
 13591  08F5  1003               	clrc
 13592  08F6  0CCC               	rrf	HMC5883L_ReadBits@tmp,f
 13593  08F7                     u5680:	
 13594  08F7  3EFF               	addlw	-1
 13595  08F8  1D03               	skipz
 13596  08F9  28F5               	goto	u5685
 13597                           
 13598                           ;hmc5883l.c: 427: *data = tmp;
 13599  08FA  084C               	movf	HMC5883L_ReadBits@tmp,w
 13600  08FB  00C7               	movwf	??_HMC5883L_ReadBits
 13601  08FC  0846               	movf	HMC5883L_ReadBits@data,w
 13602  08FD  0086               	movwf	6
 13603  08FE  0187               	clrf	7
 13604  08FF  0847               	movf	??_HMC5883L_ReadBits,w
 13605  0900  0081               	movwf	1
 13606                           
 13607                           ;hmc5883l.c: 428: }
 13608  0901  0008               	return
 13609  0902                     l6165:	
 13610                           
 13611                           ;hmc5883l.c: 429: else return 0;
 13612  0902  3000               	movlw	0
 13613  0903  0008               	return
 13614  0904                     __end_of_HMC5883L_ReadBits:	
 13615                           
 13616                           	psect	text73
 13617  13CC                     __ptext73:	
 13618 ;; *************** function _HMC5883L_I2C_BufferRead *****************
 13619 ;; Defined at:
 13620 ;;		line 471 in file "hmc5883l.c"
 13621 ;; Parameters:    Size  Location     Type
 13622 ;;  slaveAddr       1    wreg     unsigned char 
 13623 ;;  pBuffer         2   28[BANK0 ] PTR unsigned char 
 13624 ;;		 -> HMC5883L_ReadBit@tmp(1), HMC5883L_ReadBits@tmp(1), HMC5883L_WriteBit@tmp(1), HMC5883L_WriteBits@tmp(1), 
 13625 ;;		 -> heading(8), HMC5883L_TestConnection@tmp(3), MPU6050_ReadBit@tmp(1), MPU6050_ReadBits@tmp(1), 
 13626 ;;		 -> MPU6050_WriteBit@tmp(1), MPU6050_WriteBits@tmp(1), MPU6050_GetRawAccel@tempBuffer(6), MPU6050_GetRawAccelGyro@tm
      +pBuffer(14), 
 13627 ;;  ReadAddr        1   30[BANK0 ] unsigned char 
 13628 ;;  NumByteToRea    2   31[BANK0 ] unsigned short 
 13629 ;; Auto vars:     Size  Location     Type
 13630 ;;  slaveAddr       1   34[BANK0 ] unsigned char 
 13631 ;; Return value:  Size  Location     Type
 13632 ;;                  1    wreg      unsigned char 
 13633 ;; Registers used:
 13634 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13635 ;; Tracked objects:
 13636 ;;		On entry : 0/0
 13637 ;;		On exit  : 0/0
 13638 ;;		Unchanged: 0/0
 13639 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13640 ;;      Params:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13641 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13642 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13643 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13644 ;;Total ram usage:        7 bytes
 13645 ;; Hardware stack levels used:    1
 13646 ;; Hardware stack levels required when called:    7
 13647 ;; This function calls:
 13648 ;;		_I2C_BufferRead
 13649 ;; This function is called by:
 13650 ;;		_HMC5883L_ReadBits
 13651 ;;		_MPU6050_I2C_BufferRead
 13652 ;;		_HMC5883L_TestConnection
 13653 ;;		_HMC5883L_GetHeading
 13654 ;;		_HMC5883L_WriteBits
 13655 ;;		_HMC5883L_WriteBit
 13656 ;;		_HMC5883L_ReadBit
 13657 ;; This function uses a non-reentrant model
 13658 ;;
 13659                           
 13660                           
 13661                           ;psect for function _HMC5883L_I2C_BufferRead
 13662  13CC                     _HMC5883L_I2C_BufferRead:	
 13663                           
 13664                           ;incstack = 0
 13665                           ; Regs used in _HMC5883L_I2C_BufferRead: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+csta
      +                          ck]
 13666                           ;HMC5883L_I2C_BufferRead@slaveAddr stored from wreg
 13667  13CC  0020               	movlb	0	; select bank0
 13668  13CD  00C2               	movwf	HMC5883L_I2C_BufferRead@slaveAddr
 13669                           
 13670                           ;hmc5883l.c: 473: return(I2C_BufferRead(slaveAddr,pBuffer,ReadAddr,NumByteToRead));
 13671  13CE  083D               	movf	HMC5883L_I2C_BufferRead@pBuffer+1,w
 13672  13CF  00B2               	movwf	I2C_BufferRead@pBuffer+1
 13673  13D0  083C               	movf	HMC5883L_I2C_BufferRead@pBuffer,w
 13674  13D1  00B1               	movwf	I2C_BufferRead@pBuffer
 13675  13D2  083E               	movf	HMC5883L_I2C_BufferRead@ReadAddr,w
 13676  13D3  00C1               	movwf	??_HMC5883L_I2C_BufferRead
 13677  13D4  0841               	movf	??_HMC5883L_I2C_BufferRead,w
 13678  13D5  00B3               	movwf	I2C_BufferRead@ReadAddr
 13679  13D6  0840               	movf	HMC5883L_I2C_BufferRead@NumByteToRead+1,w
 13680  13D7  00B5               	movwf	I2C_BufferRead@NumByteToRead+1
 13681  13D8  083F               	movf	HMC5883L_I2C_BufferRead@NumByteToRead,w
 13682  13D9  00B4               	movwf	I2C_BufferRead@NumByteToRead
 13683  13DA  0842               	movf	HMC5883L_I2C_BufferRead@slaveAddr,w
 13684  13DB  3189  21F9         	fcall	_I2C_BufferRead
 13685  13DD  0008               	return
 13686  13DE                     __end_of_HMC5883L_I2C_BufferRead:	
 13687                           
 13688                           	psect	text74
 13689  12AB                     __ptext74:	
 13690 ;; *************** function _Diag_getTempSensorHealth *****************
 13691 ;; Defined at:
 13692 ;;		line 25 in file "diagnostics.c"
 13693 ;; Parameters:    Size  Location     Type
 13694 ;;		None
 13695 ;; Auto vars:     Size  Location     Type
 13696 ;;		None
 13697 ;; Return value:  Size  Location     Type
 13698 ;;                  1    wreg      unsigned char 
 13699 ;; Registers used:
 13700 ;;		wreg
 13701 ;; Tracked objects:
 13702 ;;		On entry : 0/0
 13703 ;;		On exit  : 0/0
 13704 ;;		Unchanged: 0/0
 13705 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13706 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13707 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13708 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13709 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13710 ;;Total ram usage:        0 bytes
 13711 ;; Hardware stack levels used:    1
 13712 ;; Hardware stack levels required when called:    4
 13713 ;; This function calls:
 13714 ;;		Nothing
 13715 ;; This function is called by:
 13716 ;;		_BMP_readTemperature
 13717 ;; This function uses a non-reentrant model
 13718 ;;
 13719                           
 13720                           
 13721                           ;psect for function _Diag_getTempSensorHealth
 13722  12AB                     _Diag_getTempSensorHealth:	
 13723                           
 13724                           ;diagnostics.c: 27: return (sensorHealth.tempSensorHealth);
 13725                           
 13726                           ;incstack = 0
 13727                           ; Regs used in _Diag_getTempSensorHealth: [wreg]
 13728  12AB  0021               	movlb	1	; select bank1
 13729  12AC  0863               	movf	_sensorHealth^(0+128),w
 13730  12AD  0008               	return
 13731  12AE                     __end_of_Diag_getTempSensorHealth:	
 13732                           
 13733                           	psect	text75
 13734  0B1A                     __ptext75:	
 13735 ;; *************** function _BMP_init *****************
 13736 ;; Defined at:
 13737 ;;		line 39 in file "bmp280.c"
 13738 ;; Parameters:    Size  Location     Type
 13739 ;;		None
 13740 ;; Auto vars:     Size  Location     Type
 13741 ;;  t               1   31[BANK0 ] unsigned char 
 13742 ;; Return value:  Size  Location     Type
 13743 ;;                  1    wreg      void 
 13744 ;; Registers used:
 13745 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13746 ;; Tracked objects:
 13747 ;;		On entry : 0/0
 13748 ;;		On exit  : 0/0
 13749 ;;		Unchanged: 0/0
 13750 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13751 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13752 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13753 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13754 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13755 ;;Total ram usage:        4 bytes
 13756 ;; Hardware stack levels used:    1
 13757 ;; Hardware stack levels required when called:    7
 13758 ;; This function calls:
 13759 ;;		_Diag_setTempSensorHealth
 13760 ;;		_I2C_BufferRead
 13761 ;;		_I2C_ByteWrite
 13762 ;; This function is called by:
 13763 ;;		_main
 13764 ;;		_BMP_readTemperature
 13765 ;; This function uses a non-reentrant model
 13766 ;;
 13767                           
 13768                           
 13769                           ;psect for function _BMP_init
 13770  0B1A                     _BMP_init:	
 13771                           
 13772                           ;bmp280.c: 41: char t;
 13773                           ;bmp280.c: 42: t=0x40;
 13774                           
 13775                           ;incstack = 0
 13776                           ; Regs used in _BMP_init: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 13777  0B1A  3040               	movlw	64
 13778  0B1B  0020               	movlb	0	; select bank0
 13779  0B1C  00BC               	movwf	??_BMP_init
 13780  0B1D  083C               	movf	??_BMP_init,w
 13781  0B1E  00BF               	movwf	BMP_init@t
 13782                           
 13783                           ;bmp280.c: 43: if(I2C_ByteWrite(0x76, &t, 0xF4)==0)
 13784  0B1F  303F               	movlw	(low (BMP_init@t| 0))& (0+255)
 13785  0B20  00BC               	movwf	??_BMP_init
 13786  0B21  083C               	movf	??_BMP_init,w
 13787  0B22  00AF               	movwf	I2C_ByteWrite@pBuffer
 13788  0B23  30F4               	movlw	244
 13789  0B24  00BD               	movwf	??_BMP_init+1
 13790  0B25  083D               	movf	??_BMP_init+1,w
 13791  0B26  00B0               	movwf	I2C_ByteWrite@WriteAddr
 13792  0B27  3076               	movlw	118
 13793  0B28  3188  2000  318B   	fcall	_I2C_ByteWrite
 13794  0B2B  3A00               	xorlw	0
 13795  0B2C  1D03               	skipz
 13796  0B2D  2B32               	goto	l6057
 13797                           
 13798                           ;bmp280.c: 44: {
 13799                           ;bmp280.c: 45: Diag_setTempSensorHealth(0);
 13800  0B2E  3000               	movlw	0
 13801  0B2F  3193  2307         	fcall	_Diag_setTempSensorHealth
 13802                           
 13803                           ;bmp280.c: 46: return;
 13804  0B31  0008               	return
 13805  0B32                     l6057:	
 13806                           
 13807                           ;bmp280.c: 47: }
 13808                           ;bmp280.c: 48: t=0xE0;
 13809  0B32  30E0               	movlw	224
 13810  0B33  0020               	movlb	0	; select bank0
 13811  0B34  00BC               	movwf	??_BMP_init
 13812  0B35  083C               	movf	??_BMP_init,w
 13813  0B36  00BF               	movwf	BMP_init@t
 13814                           
 13815                           ;bmp280.c: 50: if(I2C_BufferRead(0x76, b1, 0x88, 24)==0)
 13816  0B37  30A8               	movlw	low _b1
 13817  0B38  00B1               	movwf	I2C_BufferRead@pBuffer
 13818  0B39  3001               	movlw	high _b1
 13819  0B3A  00B2               	movwf	I2C_BufferRead@pBuffer+1
 13820  0B3B  3088               	movlw	136
 13821  0B3C  00BC               	movwf	??_BMP_init
 13822  0B3D  083C               	movf	??_BMP_init,w
 13823  0B3E  00B3               	movwf	I2C_BufferRead@ReadAddr
 13824  0B3F  3018               	movlw	24
 13825  0B40  00B4               	movwf	I2C_BufferRead@NumByteToRead
 13826  0B41  3000               	movlw	0
 13827  0B42  00B5               	movwf	I2C_BufferRead@NumByteToRead+1
 13828  0B43  3076               	movlw	118
 13829  0B44  3189  21F9  318B   	fcall	_I2C_BufferRead
 13830  0B47  3A00               	xorlw	0
 13831  0B48  1D03               	skipz
 13832  0B49  2B4E               	goto	l6065
 13833                           
 13834                           ;bmp280.c: 51: {
 13835                           ;bmp280.c: 52: Diag_setTempSensorHealth(0);
 13836  0B4A  3000               	movlw	0
 13837  0B4B  3193  2307         	fcall	_Diag_setTempSensorHealth
 13838                           
 13839                           ;bmp280.c: 53: return;
 13840  0B4D  0008               	return
 13841  0B4E                     l6065:	
 13842                           
 13843                           ;bmp280.c: 54: }
 13844                           ;bmp280.c: 55: dig_T1 = ((u16)b1[0] & 0xFF) + (((u16)b1[1] & 0xFF) * 256);
 13845  0B4E  0023               	movlb	3	; select bank3
 13846  0B4F  0829               	movf	(_b1^(0+384)+1),w
 13847  0B50  0020               	movlb	0	; select bank0
 13848  0B51  00BC               	movwf	??_BMP_init
 13849  0B52  01BD               	clrf	??_BMP_init+1
 13850  0B53  083C               	movf	??_BMP_init,w
 13851  0B54  00BD               	movwf	??_BMP_init+1
 13852  0B55  01BC               	clrf	??_BMP_init
 13853  0B56  0023               	movlb	3	; select bank3
 13854  0B57  0828               	movf	_b1^(0+384),w
 13855  0B58  0020               	movlb	0	; select bank0
 13856  0B59  073C               	addwf	??_BMP_init,w
 13857  0B5A  0021               	movlb	1	; select bank1
 13858  0B5B  00D3               	movwf	_dig_T1^(0+128)
 13859  0B5C  0020               	movlb	0	; select bank0
 13860  0B5D  083D               	movf	??_BMP_init+1,w
 13861  0B5E  1803               	skipnc
 13862  0B5F  0A3D               	incf	??_BMP_init+1,w
 13863  0B60  0021               	movlb	1	; select bank1
 13864  0B61  00D4               	movwf	(_dig_T1^(0+128)+1)
 13865                           
 13866                           ;bmp280.c: 56: dig_T2 = (int)b1[2] + ((int)b1[3] * 256);
 13867  0B62  0023               	movlb	3	; select bank3
 13868  0B63  082B               	movf	(_b1^(0+384)+3),w
 13869  0B64  0020               	movlb	0	; select bank0
 13870  0B65  00BC               	movwf	??_BMP_init
 13871  0B66  01BD               	clrf	??_BMP_init+1
 13872  0B67  083C               	movf	??_BMP_init,w
 13873  0B68  00BD               	movwf	??_BMP_init+1
 13874  0B69  01BC               	clrf	??_BMP_init
 13875  0B6A  0023               	movlb	3	; select bank3
 13876  0B6B  082A               	movf	(_b1^(0+384)+2),w
 13877  0B6C  0020               	movlb	0	; select bank0
 13878  0B6D  073C               	addwf	??_BMP_init,w
 13879  0B6E  0022               	movlb	2	; select bank2
 13880  0B6F  00D6               	movwf	_dig_T2^(0+256)
 13881  0B70  0020               	movlb	0	; select bank0
 13882  0B71  083D               	movf	??_BMP_init+1,w
 13883  0B72  1803               	skipnc
 13884  0B73  0A3D               	incf	??_BMP_init+1,w
 13885  0B74  0022               	movlb	2	; select bank2
 13886  0B75  00D7               	movwf	(_dig_T2^(0+256)+1)
 13887                           
 13888                           ;bmp280.c: 57: dig_T3 = (int)b1[4] + ((int)b1[5] * 256);
 13889  0B76  0023               	movlb	3	; select bank3
 13890  0B77  082D               	movf	(_b1^(0+384)+5),w
 13891  0B78  0020               	movlb	0	; select bank0
 13892  0B79  00BC               	movwf	??_BMP_init
 13893  0B7A  01BD               	clrf	??_BMP_init+1
 13894  0B7B  083C               	movf	??_BMP_init,w
 13895  0B7C  00BD               	movwf	??_BMP_init+1
 13896  0B7D  01BC               	clrf	??_BMP_init
 13897  0B7E  0023               	movlb	3	; select bank3
 13898  0B7F  082C               	movf	(_b1^(0+384)+4),w
 13899  0B80  0020               	movlb	0	; select bank0
 13900  0B81  073C               	addwf	??_BMP_init,w
 13901  0B82  0022               	movlb	2	; select bank2
 13902  0B83  00D4               	movwf	_dig_T3^(0+256)
 13903  0B84  0020               	movlb	0	; select bank0
 13904  0B85  083D               	movf	??_BMP_init+1,w
 13905  0B86  1803               	skipnc
 13906  0B87  0A3D               	incf	??_BMP_init+1,w
 13907  0B88  0022               	movlb	2	; select bank2
 13908  0B89  00D5               	movwf	(_dig_T3^(0+256)+1)
 13909                           
 13910                           ;bmp280.c: 69: Diag_setTempSensorHealth(1);
 13911  0B8A  3001               	movlw	1
 13912  0B8B  3193  2307         	fcall	_Diag_setTempSensorHealth
 13913  0B8D  0008               	return
 13914  0B8E                     __end_of_BMP_init:	
 13915                           
 13916                           	psect	text76
 13917  0800                     __ptext76:	
 13918 ;; *************** function _I2C_ByteWrite *****************
 13919 ;; Defined at:
 13920 ;;		line 3 in file "i2c_wrapper.c"
 13921 ;; Parameters:    Size  Location     Type
 13922 ;;  slaveAddr       1    wreg     unsigned char 
 13923 ;;  pBuffer         1   15[BANK0 ] PTR unsigned char 
 13924 ;;		 -> BMP_readTemperature@tmp(1), BMP_init@t(1), HMC5883L_WriteBit@tmp(1), HMC5883L_WriteBits@tmp(1), 
 13925 ;;		 -> HMC5883L_SetMode@tmp(1), HMC5883L_SetGain@tmp(1), HMC5883L_Initialize@tmp(1), MPU6050_WriteBit@tmp(1), 
 13926 ;;		 -> MPU6050_WriteBits@tmp(1), 
 13927 ;;  WriteAddr       1   16[BANK0 ] unsigned char 
 13928 ;; Auto vars:     Size  Location     Type
 13929 ;;  slaveAddr       1   21[BANK0 ] unsigned char 
 13930 ;;  data            2   22[BANK0 ] unsigned char [2]
 13931 ;;  status          1   24[BANK0 ] enum E3025
 13932 ;; Return value:  Size  Location     Type
 13933 ;;                  1    wreg      unsigned char 
 13934 ;; Registers used:
 13935 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13936 ;; Tracked objects:
 13937 ;;		On entry : 0/0
 13938 ;;		On exit  : 0/0
 13939 ;;		Unchanged: 0/0
 13940 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13941 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13942 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13943 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13944 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13945 ;;Total ram usage:       10 bytes
 13946 ;; Hardware stack levels used:    1
 13947 ;; Hardware stack levels required when called:    6
 13948 ;; This function calls:
 13949 ;;		_I2C2_MasterWrite
 13950 ;;		_Timeout_hasExpired
 13951 ;;		_Timeout_setTimeout
 13952 ;; This function is called by:
 13953 ;;		_BMP_init
 13954 ;;		_BMP_readTemperature
 13955 ;;		_HMC5883L_I2C_ByteWrite
 13956 ;; This function uses a non-reentrant model
 13957 ;;
 13958                           
 13959                           
 13960                           ;psect for function _I2C_ByteWrite
 13961  0800                     _I2C_ByteWrite:	
 13962                           
 13963                           ;incstack = 0
 13964                           ; Regs used in _I2C_ByteWrite: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 13965                           ;I2C_ByteWrite@slaveAddr stored from wreg
 13966  0800  0020               	movlb	0	; select bank0
 13967  0801  00B5               	movwf	I2C_ByteWrite@slaveAddr
 13968                           
 13969                           ;i2c_wrapper.c: 5: u8 data[2];
 13970                           ;i2c_wrapper.c: 6: I2C2_MESSAGE_STATUS status=I2C2_MESSAGE_COMPLETE;
 13971  0802  01B8               	clrf	I2C_ByteWrite@status
 13972                           
 13973                           ;i2c_wrapper.c: 8: data[0]= WriteAddr;
 13974  0803  0830               	movf	I2C_ByteWrite@WriteAddr,w
 13975  0804  00B1               	movwf	??_I2C_ByteWrite
 13976  0805  0831               	movf	??_I2C_ByteWrite,w
 13977  0806  00B6               	movwf	I2C_ByteWrite@data
 13978                           
 13979                           ;i2c_wrapper.c: 9: data[1]= *pBuffer;
 13980  0807  082F               	movf	I2C_ByteWrite@pBuffer,w
 13981  0808  0086               	movwf	6
 13982  0809  0187               	clrf	7
 13983  080A  0801               	movf	1,w
 13984  080B  00B1               	movwf	??_I2C_ByteWrite
 13985  080C  0831               	movf	??_I2C_ByteWrite,w
 13986  080D  00B7               	movwf	I2C_ByteWrite@data+1
 13987                           
 13988                           ;i2c_wrapper.c: 12: I2C2_MasterWrite(data,2,slaveAddr, &status);
 13989  080E  3002               	movlw	2
 13990  080F  00B1               	movwf	??_I2C_ByteWrite
 13991  0810  0831               	movf	??_I2C_ByteWrite,w
 13992  0811  00A8               	movwf	I2C2_MasterWrite@length
 13993  0812  0835               	movf	I2C_ByteWrite@slaveAddr,w
 13994  0813  00B2               	movwf	??_I2C_ByteWrite+1
 13995  0814  01B3               	clrf	??_I2C_ByteWrite+2
 13996  0815  0832               	movf	??_I2C_ByteWrite+1,w
 13997  0816  00A9               	movwf	I2C2_MasterWrite@address
 13998  0817  0833               	movf	??_I2C_ByteWrite+2,w
 13999  0818  00AA               	movwf	I2C2_MasterWrite@address+1
 14000  0819  3038               	movlw	(low (I2C_ByteWrite@status| 0))& (0+255)
 14001  081A  00B4               	movwf	??_I2C_ByteWrite+3
 14002  081B  0834               	movf	??_I2C_ByteWrite+3,w
 14003  081C  00AB               	movwf	I2C2_MasterWrite@pflag
 14004  081D  3036               	movlw	(low (I2C_ByteWrite@data| 0))& (0+255)
 14005  081E  3197  271A  3188   	fcall	_I2C2_MasterWrite
 14006                           
 14007                           ;i2c_wrapper.c: 13: Timeout_setTimeout(200);
 14008  0821  30C8               	movlw	200
 14009  0822  0020               	movlb	0	; select bank0
 14010  0823  00A1               	movwf	Timeout_setTimeout@val
 14011  0824  3000               	movlw	0
 14012  0825  00A2               	movwf	Timeout_setTimeout@val+1
 14013  0826  3194  249E  3188   	fcall	_Timeout_setTimeout
 14014  0829                     l5783:	
 14015                           ;i2c_wrapper.c: 15: while(status == I2C2_MESSAGE_PENDING && Timeout_hasExpired()==0);
 14016                           
 14017  0829  3002               	movlw	2
 14018  082A  0020               	movlb	0	; select bank0
 14019  082B  0638               	xorwf	I2C_ByteWrite@status,w
 14020  082C  1D03               	btfss	3,2
 14021  082D  2834               	goto	l5787
 14022  082E  3189  2104  3188   	fcall	_Timeout_hasExpired
 14023  0831  3A00               	xorlw	0
 14024  0832  1903               	skipnz
 14025  0833  2829               	goto	l5783
 14026  0834                     l5787:	
 14027                           
 14028                           ;i2c_wrapper.c: 17: if (status == I2C2_MESSAGE_COMPLETE)
 14029  0834  0020               	movlb	0	; select bank0
 14030  0835  0838               	movf	I2C_ByteWrite@status,w
 14031  0836  1D03               	btfss	3,2
 14032  0837  283A               	goto	l5795
 14033                           
 14034                           ;i2c_wrapper.c: 18: {
 14035                           ;i2c_wrapper.c: 19: return 1;
 14036  0838  3001               	movlw	1
 14037                           
 14038                           ;i2c_wrapper.c: 20: }
 14039  0839  0008               	return
 14040  083A                     l5795:	
 14041                           
 14042                           ;i2c_wrapper.c: 21: else
 14043                           ;i2c_wrapper.c: 22: {
 14044                           ;i2c_wrapper.c: 23: return 0;
 14045  083A  3000               	movlw	0
 14046  083B  0008               	return
 14047  083C                     __end_of_I2C_ByteWrite:	
 14048                           
 14049                           	psect	text77
 14050  09F9                     __ptext77:	
 14051 ;; *************** function _I2C_BufferRead *****************
 14052 ;; Defined at:
 14053 ;;		line 30 in file "i2c_wrapper.c"
 14054 ;; Parameters:    Size  Location     Type
 14055 ;;  slaveAddr       1    wreg     unsigned char 
 14056 ;;  pBuffer         2   17[BANK0 ] PTR unsigned char 
 14057 ;;		 -> data(8), b1(24), HMC5883L_ReadBit@tmp(1), HMC5883L_ReadBits@tmp(1), 
 14058 ;;		 -> HMC5883L_WriteBit@tmp(1), HMC5883L_WriteBits@tmp(1), heading(8), HMC5883L_TestConnection@tmp(3), 
 14059 ;;		 -> MPU6050_ReadBit@tmp(1), MPU6050_ReadBits@tmp(1), MPU6050_WriteBit@tmp(1), MPU6050_WriteBits@tmp(1), 
 14060 ;;		 -> MPU6050_GetRawAccel@tempBuffer(6), MPU6050_GetRawAccelGyro@tmpBuffer(14), 
 14061 ;;  ReadAddr        1   19[BANK0 ] unsigned char 
 14062 ;;  NumByteToRea    2   20[BANK0 ] unsigned short 
 14063 ;; Auto vars:     Size  Location     Type
 14064 ;;  slaveAddr       1   26[BANK0 ] unsigned char 
 14065 ;;  status          1   27[BANK0 ] enum E3025
 14066 ;; Return value:  Size  Location     Type
 14067 ;;                  1    wreg      unsigned char 
 14068 ;; Registers used:
 14069 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14070 ;; Tracked objects:
 14071 ;;		On entry : 0/0
 14072 ;;		On exit  : 0/0
 14073 ;;		Unchanged: 0/0
 14074 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14075 ;;      Params:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14076 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14077 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14078 ;;      Totals:         0      11       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14079 ;;Total ram usage:       11 bytes
 14080 ;; Hardware stack levels used:    1
 14081 ;; Hardware stack levels required when called:    6
 14082 ;; This function calls:
 14083 ;;		_I2C2_MasterRead
 14084 ;;		_I2C2_MasterWrite
 14085 ;;		_Timeout_hasExpired
 14086 ;;		_Timeout_setTimeout
 14087 ;; This function is called by:
 14088 ;;		_HMC5883L_I2C_BufferRead
 14089 ;;		_BMP_init
 14090 ;;		_BMP_readTemperature
 14091 ;; This function uses a non-reentrant model
 14092 ;;
 14093                           
 14094                           
 14095                           ;psect for function _I2C_BufferRead
 14096  09F9                     _I2C_BufferRead:	
 14097                           
 14098                           ;incstack = 0
 14099                           ; Regs used in _I2C_BufferRead: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 14100                           ;I2C_BufferRead@slaveAddr stored from wreg
 14101  09F9  0020               	movlb	0	; select bank0
 14102  09FA  00BA               	movwf	I2C_BufferRead@slaveAddr
 14103                           
 14104                           ;i2c_wrapper.c: 32: I2C2_MESSAGE_STATUS status=I2C2_MESSAGE_COMPLETE;
 14105  09FB  01BB               	clrf	I2C_BufferRead@status
 14106                           
 14107                           ;i2c_wrapper.c: 34: I2C2_MasterWrite(&ReadAddr, 1,slaveAddr, &status);
 14108  09FC  01A8               	clrf	I2C2_MasterWrite@length
 14109  09FD  0AA8               	incf	I2C2_MasterWrite@length,f
 14110  09FE  083A               	movf	I2C_BufferRead@slaveAddr,w
 14111  09FF  00B6               	movwf	??_I2C_BufferRead
 14112  0A00  01B7               	clrf	??_I2C_BufferRead+1
 14113  0A01  0836               	movf	??_I2C_BufferRead,w
 14114  0A02  00A9               	movwf	I2C2_MasterWrite@address
 14115  0A03  0837               	movf	??_I2C_BufferRead+1,w
 14116  0A04  00AA               	movwf	I2C2_MasterWrite@address+1
 14117  0A05  303B               	movlw	(low (I2C_BufferRead@status| 0))& (0+255)
 14118  0A06  00B8               	movwf	??_I2C_BufferRead+2
 14119  0A07  0838               	movf	??_I2C_BufferRead+2,w
 14120  0A08  00AB               	movwf	I2C2_MasterWrite@pflag
 14121  0A09  3033               	movlw	(low (I2C_BufferRead@ReadAddr| 0))& (0+255)
 14122  0A0A  3197  271A  3189   	fcall	_I2C2_MasterWrite
 14123                           
 14124                           ;i2c_wrapper.c: 35: Timeout_setTimeout(200);
 14125  0A0D  30C8               	movlw	200
 14126  0A0E  0020               	movlb	0	; select bank0
 14127  0A0F  00A1               	movwf	Timeout_setTimeout@val
 14128  0A10  3000               	movlw	0
 14129  0A11  00A2               	movwf	Timeout_setTimeout@val+1
 14130  0A12  3194  249E  3189   	fcall	_Timeout_setTimeout
 14131  0A15                     l5629:	
 14132                           ;i2c_wrapper.c: 38: while(status == I2C2_MESSAGE_PENDING && Timeout_hasExpired()==0);
 14133                           
 14134  0A15  3002               	movlw	2
 14135  0A16  0020               	movlb	0	; select bank0
 14136  0A17  063B               	xorwf	I2C_BufferRead@status,w
 14137  0A18  1D03               	btfss	3,2
 14138  0A19  2A20               	goto	l5633
 14139  0A1A  3189  2104  3189   	fcall	_Timeout_hasExpired
 14140  0A1D  3A00               	xorlw	0
 14141  0A1E  1903               	skipnz
 14142  0A1F  2A15               	goto	l5629
 14143  0A20                     l5633:	
 14144                           
 14145                           ;i2c_wrapper.c: 40: if (status != I2C2_MESSAGE_COMPLETE)
 14146  0A20  0020               	movlb	0	; select bank0
 14147  0A21  083B               	movf	I2C_BufferRead@status,w
 14148  0A22  1903               	btfsc	3,2
 14149  0A23  2A26               	goto	l5639
 14150                           
 14151                           ;i2c_wrapper.c: 41: {
 14152                           ;i2c_wrapper.c: 42: return 0;
 14153  0A24  3000               	movlw	0
 14154  0A25  0008               	return
 14155  0A26                     l5639:	
 14156                           
 14157                           ;i2c_wrapper.c: 43: }
 14158                           ;i2c_wrapper.c: 46: I2C2_MasterRead( pBuffer,NumByteToRead,slaveAddr,&status);
 14159  0A26  0832               	movf	I2C_BufferRead@pBuffer+1,w
 14160  0A27  00AA               	movwf	I2C2_MasterRead@pdata+1
 14161  0A28  0831               	movf	I2C_BufferRead@pBuffer,w
 14162  0A29  00A9               	movwf	I2C2_MasterRead@pdata
 14163  0A2A  0834               	movf	I2C_BufferRead@NumByteToRead,w
 14164  0A2B  00B6               	movwf	??_I2C_BufferRead
 14165  0A2C  0836               	movf	??_I2C_BufferRead,w
 14166  0A2D  00AB               	movwf	I2C2_MasterRead@length
 14167  0A2E  083A               	movf	I2C_BufferRead@slaveAddr,w
 14168  0A2F  00B7               	movwf	??_I2C_BufferRead+1
 14169  0A30  01B8               	clrf	??_I2C_BufferRead+2
 14170  0A31  0837               	movf	??_I2C_BufferRead+1,w
 14171  0A32  00AC               	movwf	I2C2_MasterRead@address
 14172  0A33  0838               	movf	??_I2C_BufferRead+2,w
 14173  0A34  00AD               	movwf	I2C2_MasterRead@address+1
 14174  0A35  303B               	movlw	(low (I2C_BufferRead@status| 0))& (0+255)
 14175  0A36  00B9               	movwf	??_I2C_BufferRead+3
 14176  0A37  0839               	movf	??_I2C_BufferRead+3,w
 14177  0A38  00AE               	movwf	I2C2_MasterRead@pflag
 14178  0A39  3196  26F2  3189   	fcall	_I2C2_MasterRead
 14179                           
 14180                           ;i2c_wrapper.c: 47: Timeout_setTimeout(200);
 14181  0A3C  30C8               	movlw	200
 14182  0A3D  0020               	movlb	0	; select bank0
 14183  0A3E  00A1               	movwf	Timeout_setTimeout@val
 14184  0A3F  3000               	movlw	0
 14185  0A40  00A2               	movwf	Timeout_setTimeout@val+1
 14186  0A41  3194  249E  3189   	fcall	_Timeout_setTimeout
 14187  0A44                     l5643:	
 14188                           ;i2c_wrapper.c: 49: while(status == I2C2_MESSAGE_PENDING && Timeout_hasExpired()==0);
 14189                           
 14190  0A44  3002               	movlw	2
 14191  0A45  0020               	movlb	0	; select bank0
 14192  0A46  063B               	xorwf	I2C_BufferRead@status,w
 14193  0A47  1D03               	btfss	3,2
 14194  0A48  2A4F               	goto	l5647
 14195  0A49  3189  2104  3189   	fcall	_Timeout_hasExpired
 14196  0A4C  3A00               	xorlw	0
 14197  0A4D  1903               	skipnz
 14198  0A4E  2A44               	goto	l5643
 14199  0A4F                     l5647:	
 14200                           
 14201                           ;i2c_wrapper.c: 51: if (status == I2C2_MESSAGE_COMPLETE)
 14202  0A4F  0020               	movlb	0	; select bank0
 14203  0A50  083B               	movf	I2C_BufferRead@status,w
 14204  0A51  1D03               	btfss	3,2
 14205  0A52  2A55               	goto	l5655
 14206                           
 14207                           ;i2c_wrapper.c: 52: return 1;
 14208  0A53  3001               	movlw	1
 14209  0A54  0008               	return
 14210  0A55                     l5655:	
 14211                           
 14212                           ;i2c_wrapper.c: 53: else
 14213                           ;i2c_wrapper.c: 54: return 0;
 14214  0A55  3000               	movlw	0
 14215  0A56  0008               	return
 14216  0A57                     __end_of_I2C_BufferRead:	
 14217                           
 14218                           	psect	text78
 14219  149E                     __ptext78:	
 14220 ;; *************** function _Timeout_setTimeout *****************
 14221 ;; Defined at:
 14222 ;;		line 26 in file "timeout.c"
 14223 ;; Parameters:    Size  Location     Type
 14224 ;;  val             2    1[BANK0 ] unsigned short 
 14225 ;; Auto vars:     Size  Location     Type
 14226 ;;		None
 14227 ;; Return value:  Size  Location     Type
 14228 ;;                  1    wreg      void 
 14229 ;; Registers used:
 14230 ;;		wreg
 14231 ;; Tracked objects:
 14232 ;;		On entry : 0/0
 14233 ;;		On exit  : 0/0
 14234 ;;		Unchanged: 0/0
 14235 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14236 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14237 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14238 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14239 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14240 ;;Total ram usage:        2 bytes
 14241 ;; Hardware stack levels used:    1
 14242 ;; Hardware stack levels required when called:    4
 14243 ;; This function calls:
 14244 ;;		Nothing
 14245 ;; This function is called by:
 14246 ;;		_I2C_ByteWrite
 14247 ;;		_I2C_BufferRead
 14248 ;; This function uses a non-reentrant model
 14249 ;;
 14250                           
 14251                           
 14252                           ;psect for function _Timeout_setTimeout
 14253  149E                     _Timeout_setTimeout:	
 14254                           
 14255                           ;timeout.c: 28: timeOut=val;
 14256                           
 14257                           ;incstack = 0
 14258                           ; Regs used in _Timeout_setTimeout: [wreg]
 14259  149E  0020               	movlb	0	; select bank0
 14260  149F  0822               	movf	Timeout_setTimeout@val+1,w
 14261  14A0  0022               	movlb	2	; select bank2
 14262  14A1  00BD               	movwf	(_timeOut+1)^(0+256)
 14263  14A2  0020               	movlb	0	; select bank0
 14264  14A3  0821               	movf	Timeout_setTimeout@val,w
 14265  14A4  0022               	movlb	2	; select bank2
 14266  14A5  00BC               	movwf	_timeOut^(0+256)
 14267                           
 14268                           ;timeout.c: 29: curr=globalCounter;
 14269  14A6  0021               	movlb	1	; select bank1
 14270  14A7  0852               	movf	(_globalCounter+3)^(0+128),w	;volatile
 14271  14A8  0022               	movlb	2	; select bank2
 14272  14A9  00A3               	movwf	(_curr+3)^(0+256)
 14273  14AA  0021               	movlb	1	; select bank1
 14274  14AB  0851               	movf	(_globalCounter+2)^(0+128),w	;volatile
 14275  14AC  0022               	movlb	2	; select bank2
 14276  14AD  00A2               	movwf	(_curr+2)^(0+256)
 14277  14AE  0021               	movlb	1	; select bank1
 14278  14AF  0850               	movf	(_globalCounter+1)^(0+128),w	;volatile
 14279  14B0  0022               	movlb	2	; select bank2
 14280  14B1  00A1               	movwf	(_curr+1)^(0+256)
 14281  14B2  0021               	movlb	1	; select bank1
 14282  14B3  084F               	movf	_globalCounter^(0+128),w	;volatile
 14283  14B4  0022               	movlb	2	; select bank2
 14284  14B5  00A0               	movwf	_curr^(0+256)
 14285  14B6  0008               	return
 14286  14B7                     __end_of_Timeout_setTimeout:	
 14287                           
 14288                           	psect	text79
 14289  0904                     __ptext79:	
 14290 ;; *************** function _Timeout_hasExpired *****************
 14291 ;; Defined at:
 14292 ;;		line 32 in file "timeout.c"
 14293 ;; Parameters:    Size  Location     Type
 14294 ;;		None
 14295 ;; Auto vars:     Size  Location     Type
 14296 ;;		None
 14297 ;; Return value:  Size  Location     Type
 14298 ;;                  1    wreg      unsigned char 
 14299 ;; Registers used:
 14300 ;;		wreg, status,2, status,0
 14301 ;; Tracked objects:
 14302 ;;		On entry : 0/0
 14303 ;;		On exit  : 0/0
 14304 ;;		Unchanged: 0/0
 14305 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14306 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14307 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14308 ;;      Temps:          0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14309 ;;      Totals:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14310 ;;Total ram usage:       12 bytes
 14311 ;; Hardware stack levels used:    1
 14312 ;; Hardware stack levels required when called:    4
 14313 ;; This function calls:
 14314 ;;		Nothing
 14315 ;; This function is called by:
 14316 ;;		_I2C_ByteWrite
 14317 ;;		_I2C_BufferRead
 14318 ;; This function uses a non-reentrant model
 14319 ;;
 14320                           
 14321                           
 14322                           ;psect for function _Timeout_hasExpired
 14323  0904                     _Timeout_hasExpired:	
 14324                           
 14325                           ;timeout.c: 34: if(globalCounter-curr>timeOut)
 14326                           
 14327                           ;incstack = 0
 14328                           ; Regs used in _Timeout_hasExpired: [wreg+status,2+status,0]
 14329  0904  0021               	movlb	1	; select bank1
 14330  0905  084F               	movf	_globalCounter^(0+128),w	;volatile
 14331  0906  0020               	movlb	0	; select bank0
 14332  0907  00A1               	movwf	??_Timeout_hasExpired
 14333  0908  0021               	movlb	1	; select bank1
 14334  0909  0850               	movf	(_globalCounter+1)^(0+128),w	;volatile
 14335  090A  0020               	movlb	0	; select bank0
 14336  090B  00A2               	movwf	??_Timeout_hasExpired+1
 14337  090C  0021               	movlb	1	; select bank1
 14338  090D  0851               	movf	(_globalCounter+2)^(0+128),w	;volatile
 14339  090E  0020               	movlb	0	; select bank0
 14340  090F  00A3               	movwf	??_Timeout_hasExpired+2
 14341  0910  0021               	movlb	1	; select bank1
 14342  0911  0852               	movf	(_globalCounter+3)^(0+128),w	;volatile
 14343  0912  0020               	movlb	0	; select bank0
 14344  0913  00A4               	movwf	??_Timeout_hasExpired+3
 14345  0914  0022               	movlb	2	; select bank2
 14346  0915  0920               	comf	_curr^(0+256),w
 14347  0916  0020               	movlb	0	; select bank0
 14348  0917  00A5               	movwf	??_Timeout_hasExpired+4
 14349  0918  0022               	movlb	2	; select bank2
 14350  0919  0921               	comf	(_curr+1)^(0+256),w
 14351  091A  0020               	movlb	0	; select bank0
 14352  091B  00A6               	movwf	??_Timeout_hasExpired+5
 14353  091C  0022               	movlb	2	; select bank2
 14354  091D  0922               	comf	(_curr+2)^(0+256),w
 14355  091E  0020               	movlb	0	; select bank0
 14356  091F  00A7               	movwf	??_Timeout_hasExpired+6
 14357  0920  0022               	movlb	2	; select bank2
 14358  0921  0923               	comf	(_curr+3)^(0+256),w
 14359  0922  0020               	movlb	0	; select bank0
 14360  0923  00A8               	movwf	??_Timeout_hasExpired+7
 14361  0924  0AA5               	incf	??_Timeout_hasExpired+4,f
 14362  0925  1903               	skipnz
 14363  0926  0AA6               	incf	??_Timeout_hasExpired+5,f
 14364  0927  1903               	skipnz
 14365  0928  0AA7               	incf	??_Timeout_hasExpired+6,f
 14366  0929  1903               	skipnz
 14367  092A  0AA8               	incf	??_Timeout_hasExpired+7,f
 14368  092B  0825               	movf	??_Timeout_hasExpired+4,w
 14369  092C  07A1               	addwf	??_Timeout_hasExpired,f
 14370  092D  0826               	movf	??_Timeout_hasExpired+5,w
 14371  092E  3DA2               	addwfc	??_Timeout_hasExpired+1,f
 14372  092F  0827               	movf	??_Timeout_hasExpired+6,w
 14373  0930  3DA3               	addwfc	??_Timeout_hasExpired+2,f
 14374  0931  0828               	movf	??_Timeout_hasExpired+7,w
 14375  0932  3DA4               	addwfc	??_Timeout_hasExpired+3,f
 14376  0933  0022               	movlb	2	; select bank2
 14377  0934  083C               	movf	_timeOut^(0+256),w
 14378  0935  0020               	movlb	0	; select bank0
 14379  0936  00A9               	movwf	??_Timeout_hasExpired+8
 14380  0937  0022               	movlb	2	; select bank2
 14381  0938  083D               	movf	(_timeOut+1)^(0+256),w
 14382  0939  0020               	movlb	0	; select bank0
 14383  093A  00AA               	movwf	??_Timeout_hasExpired+9
 14384  093B  01AB               	clrf	??_Timeout_hasExpired+10
 14385  093C  01AC               	clrf	??_Timeout_hasExpired+11
 14386  093D  0824               	movf	??_Timeout_hasExpired+3,w
 14387  093E  022C               	subwf	??_Timeout_hasExpired+11,w
 14388  093F  1D03               	skipz
 14389  0940  294B               	goto	u5065
 14390  0941  0823               	movf	??_Timeout_hasExpired+2,w
 14391  0942  022B               	subwf	??_Timeout_hasExpired+10,w
 14392  0943  1D03               	skipz
 14393  0944  294B               	goto	u5065
 14394  0945  0822               	movf	??_Timeout_hasExpired+1,w
 14395  0946  022A               	subwf	??_Timeout_hasExpired+9,w
 14396  0947  1D03               	skipz
 14397  0948  294B               	goto	u5065
 14398  0949  0821               	movf	??_Timeout_hasExpired,w
 14399  094A  0229               	subwf	??_Timeout_hasExpired+8,w
 14400  094B                     u5065:	
 14401  094B  1803               	skipnc
 14402  094C  294F               	goto	l5619
 14403                           
 14404                           ;timeout.c: 35: return 1;
 14405  094D  3001               	movlw	1
 14406  094E  0008               	return
 14407  094F                     l5619:	
 14408                           
 14409                           ;timeout.c: 36: else
 14410                           ;timeout.c: 37: return 0;
 14411  094F  3000               	movlw	0
 14412  0950  0008               	return
 14413  0951                     __end_of_Timeout_hasExpired:	
 14414                           
 14415                           	psect	text80
 14416  171A                     __ptext80:	
 14417 ;; *************** function _I2C2_MasterWrite *****************
 14418 ;; Defined at:
 14419 ;;		line 598 in file "mcc_generated_files/i2c2.c"
 14420 ;; Parameters:    Size  Location     Type
 14421 ;;  pdata           1    wreg     PTR unsigned char 
 14422 ;;		 -> I2C_BufferRead@ReadAddr(1), I2C_ByteWrite@data(2), 
 14423 ;;  length          1    8[BANK0 ] unsigned char 
 14424 ;;  address         2    9[BANK0 ] unsigned int 
 14425 ;;  pflag           1   11[BANK0 ] PTR enum E2993
 14426 ;;		 -> I2C_BufferRead@status(1), I2C_ByteWrite@status(1), 
 14427 ;; Auto vars:     Size  Location     Type
 14428 ;;  pdata           1   14[BANK0 ] PTR unsigned char 
 14429 ;;		 -> I2C_BufferRead@ReadAddr(1), I2C_ByteWrite@data(2), 
 14430 ;; Return value:  Size  Location     Type
 14431 ;;                  1    wreg      void 
 14432 ;; Registers used:
 14433 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14434 ;; Tracked objects:
 14435 ;;		On entry : 0/0
 14436 ;;		On exit  : 0/0
 14437 ;;		Unchanged: 0/0
 14438 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14439 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14440 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14441 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14442 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14443 ;;Total ram usage:        7 bytes
 14444 ;; Hardware stack levels used:    1
 14445 ;; Hardware stack levels required when called:    5
 14446 ;; This function calls:
 14447 ;;		_I2C2_MasterTRBInsert
 14448 ;;		_I2C2_MasterWriteTRBBuild
 14449 ;; This function is called by:
 14450 ;;		_I2C_ByteWrite
 14451 ;;		_I2C_BufferRead
 14452 ;; This function uses a non-reentrant model
 14453 ;;
 14454                           
 14455                           
 14456                           ;psect for function _I2C2_MasterWrite
 14457  171A                     _I2C2_MasterWrite:	
 14458                           
 14459                           ;incstack = 0
 14460                           ; Regs used in _I2C2_MasterWrite: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 14461                           ;I2C2_MasterWrite@pdata stored from wreg
 14462  171A  0020               	movlb	0	; select bank0
 14463  171B  00AE               	movwf	I2C2_MasterWrite@pdata
 14464                           
 14465                           ;i2c2.c: 604: static I2C2_TRANSACTION_REQUEST_BLOCK trBlock;
 14466                           ;i2c2.c: 607: if (i2c2_object.trStatus.s.full != 1)
 14467  171C  0021               	movlb	1	; select bank1
 14468  171D  184C               	btfsc	(_i2c2_object^(0+128)+2),0
 14469  171E  2F3D               	goto	l5543
 14470                           
 14471                           ;i2c2.c: 608: {
 14472                           ;i2c2.c: 609: I2C2_MasterWriteTRBBuild(&trBlock, pdata, length, address);
 14473  171F  0020               	movlb	0	; select bank0
 14474  1720  082E               	movf	I2C2_MasterWrite@pdata,w
 14475  1721  00AC               	movwf	??_I2C2_MasterWrite
 14476  1722  082C               	movf	??_I2C2_MasterWrite,w
 14477  1723  00A1               	movwf	I2C2_MasterWriteTRBBuild@pdata
 14478  1724  0828               	movf	I2C2_MasterWrite@length,w
 14479  1725  00AD               	movwf	??_I2C2_MasterWrite+1
 14480  1726  082D               	movf	??_I2C2_MasterWrite+1,w
 14481  1727  00A2               	movwf	I2C2_MasterWriteTRBBuild@length
 14482  1728  082A               	movf	I2C2_MasterWrite@address+1,w
 14483  1729  00A4               	movwf	I2C2_MasterWriteTRBBuild@address+1
 14484  172A  0829               	movf	I2C2_MasterWrite@address,w
 14485  172B  00A3               	movwf	I2C2_MasterWriteTRBBuild@address
 14486  172C  305D               	movlw	(low (I2C2_MasterWrite@trBlock| (0+256)))& (0+255)
 14487  172D  3196  2686  3197   	fcall	_I2C2_MasterWriteTRBBuild
 14488                           
 14489                           ;i2c2.c: 610: I2C2_MasterTRBInsert(1, &trBlock, pflag);
 14490  1730  305D               	movlw	(low (I2C2_MasterWrite@trBlock| (0+256)))& (0+255)
 14491  1731  0020               	movlb	0	; select bank0
 14492  1732  00AC               	movwf	??_I2C2_MasterWrite
 14493  1733  082C               	movf	??_I2C2_MasterWrite,w
 14494  1734  00A1               	movwf	I2C2_MasterTRBInsert@ptrb_list
 14495  1735  082B               	movf	I2C2_MasterWrite@pflag,w
 14496  1736  00AD               	movwf	??_I2C2_MasterWrite+1
 14497  1737  082D               	movf	??_I2C2_MasterWrite+1,w
 14498  1738  00A2               	movwf	I2C2_MasterTRBInsert@pflag
 14499  1739  3001               	movlw	1
 14500  173A  3189  21A4         	fcall	_I2C2_MasterTRBInsert
 14501                           
 14502                           ;i2c2.c: 611: }
 14503  173C  0008               	return
 14504  173D                     l5543:	
 14505                           
 14506                           ;i2c2.c: 612: else
 14507                           ;i2c2.c: 613: {
 14508                           ;i2c2.c: 614: *pflag = I2C2_MESSAGE_FAIL;
 14509  173D  0020               	movlb	0	; select bank0
 14510  173E  082B               	movf	I2C2_MasterWrite@pflag,w
 14511  173F  0086               	movwf	6
 14512  1740  0187               	clrf	7
 14513  1741  0181               	clrf	1
 14514  1742  0A81               	incf	1,f
 14515  1743  0008               	return
 14516  1744                     __end_of_I2C2_MasterWrite:	
 14517                           
 14518                           	psect	text81
 14519  1686                     __ptext81:	
 14520 ;; *************** function _I2C2_MasterWriteTRBBuild *****************
 14521 ;; Defined at:
 14522 ;;		line 708 in file "mcc_generated_files/i2c2.c"
 14523 ;; Parameters:    Size  Location     Type
 14524 ;;  ptrb            1    wreg     PTR struct .
 14525 ;;		 -> I2C2_MasterWrite@trBlock(5), 
 14526 ;;  pdata           1    1[BANK0 ] PTR unsigned char 
 14527 ;;		 -> I2C_BufferRead@ReadAddr(1), I2C_ByteWrite@data(2), 
 14528 ;;  length          1    2[BANK0 ] unsigned char 
 14529 ;;  address         2    3[BANK0 ] unsigned int 
 14530 ;; Auto vars:     Size  Location     Type
 14531 ;;  ptrb            1    7[BANK0 ] PTR struct .
 14532 ;;		 -> I2C2_MasterWrite@trBlock(5), 
 14533 ;; Return value:  Size  Location     Type
 14534 ;;                  1    wreg      void 
 14535 ;; Registers used:
 14536 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 14537 ;; Tracked objects:
 14538 ;;		On entry : 0/0
 14539 ;;		On exit  : 0/0
 14540 ;;		Unchanged: 0/0
 14541 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14542 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14543 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14544 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14545 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14546 ;;Total ram usage:        7 bytes
 14547 ;; Hardware stack levels used:    1
 14548 ;; Hardware stack levels required when called:    4
 14549 ;; This function calls:
 14550 ;;		Nothing
 14551 ;; This function is called by:
 14552 ;;		_I2C2_MasterWrite
 14553 ;; This function uses a non-reentrant model
 14554 ;;
 14555                           
 14556                           
 14557                           ;psect for function _I2C2_MasterWriteTRBBuild
 14558  1686                     _I2C2_MasterWriteTRBBuild:	
 14559                           
 14560                           ;incstack = 0
 14561                           ; Regs used in _I2C2_MasterWriteTRBBuild: [wreg+fsr1l+fsr1h+status,2+status,0]
 14562                           ;I2C2_MasterWriteTRBBuild@ptrb stored from wreg
 14563  1686  0020               	movlb	0	; select bank0
 14564  1687  00A7               	movwf	I2C2_MasterWriteTRBBuild@ptrb
 14565                           
 14566                           ;i2c2.c: 714: ptrb->address = address << 1;
 14567  1688  0824               	movf	I2C2_MasterWriteTRBBuild@address+1,w
 14568  1689  00A6               	movwf	??_I2C2_MasterWriteTRBBuild+1
 14569  168A  0823               	movf	I2C2_MasterWriteTRBBuild@address,w
 14570  168B  00A5               	movwf	??_I2C2_MasterWriteTRBBuild
 14571  168C  35A5               	lslf	??_I2C2_MasterWriteTRBBuild,f
 14572  168D  0DA6               	rlf	??_I2C2_MasterWriteTRBBuild+1,f
 14573  168E  0827               	movf	I2C2_MasterWriteTRBBuild@ptrb,w
 14574  168F  0086               	movwf	6
 14575  1690  3001               	movlw	1	; select bank2/3
 14576  1691  0087               	movwf	7
 14577  1692  0825               	movf	??_I2C2_MasterWriteTRBBuild,w
 14578  1693  3FC0               	movwi [0]fsr1
 14579  1694  0826               	movf	??_I2C2_MasterWriteTRBBuild+1,w
 14580  1695  3FC1               	movwi [1]fsr1
 14581                           
 14582                           ;i2c2.c: 715: ptrb->length = length;
 14583  1696  0822               	movf	I2C2_MasterWriteTRBBuild@length,w
 14584  1697  00A5               	movwf	??_I2C2_MasterWriteTRBBuild
 14585  1698  0827               	movf	I2C2_MasterWriteTRBBuild@ptrb,w
 14586  1699  3E02               	addlw	2
 14587  169A  0086               	movwf	6
 14588  169B  3001               	movlw	1	; select bank2/3
 14589  169C  0087               	movwf	7
 14590  169D  0825               	movf	??_I2C2_MasterWriteTRBBuild,w
 14591  169E  0081               	movwf	1
 14592                           
 14593                           ;i2c2.c: 716: ptrb->pbuffer = pdata;
 14594  169F  0827               	movf	I2C2_MasterWriteTRBBuild@ptrb,w
 14595  16A0  3E03               	addlw	3
 14596  16A1  0086               	movwf	6
 14597  16A2  3001               	movlw	1	; select bank2/3
 14598  16A3  0087               	movwf	7
 14599  16A4  0821               	movf	I2C2_MasterWriteTRBBuild@pdata,w
 14600  16A5  3FC0               	movwi [0]fsr1
 14601  16A6  3000               	movlw	0
 14602  16A7  3FC1               	movwi [1]fsr1
 14603  16A8  0008               	return
 14604  16A9                     __end_of_I2C2_MasterWriteTRBBuild:	
 14605                           
 14606                           	psect	text82
 14607  16F2                     __ptext82:	
 14608 ;; *************** function _I2C2_MasterRead *****************
 14609 ;; Defined at:
 14610 ;;		line 619 in file "mcc_generated_files/i2c2.c"
 14611 ;; Parameters:    Size  Location     Type
 14612 ;;  pdata           2    9[BANK0 ] PTR unsigned char 
 14613 ;;		 -> data(8), b1(24), HMC5883L_ReadBit@tmp(1), HMC5883L_ReadBits@tmp(1), 
 14614 ;;		 -> HMC5883L_WriteBit@tmp(1), HMC5883L_WriteBits@tmp(1), heading(8), HMC5883L_TestConnection@tmp(3), 
 14615 ;;		 -> MPU6050_ReadBit@tmp(1), MPU6050_ReadBits@tmp(1), MPU6050_WriteBit@tmp(1), MPU6050_WriteBits@tmp(1), 
 14616 ;;		 -> MPU6050_GetRawAccel@tempBuffer(6), MPU6050_GetRawAccelGyro@tmpBuffer(14), 
 14617 ;;  length          1   11[BANK0 ] unsigned char 
 14618 ;;  address         2   12[BANK0 ] unsigned int 
 14619 ;;  pflag           1   14[BANK0 ] PTR enum E2993
 14620 ;;		 -> I2C_BufferRead@status(1), 
 14621 ;; Auto vars:     Size  Location     Type
 14622 ;;		None
 14623 ;; Return value:  Size  Location     Type
 14624 ;;                  1    wreg      void 
 14625 ;; Registers used:
 14626 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14627 ;; Tracked objects:
 14628 ;;		On entry : 0/0
 14629 ;;		On exit  : 0/0
 14630 ;;		Unchanged: 0/0
 14631 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14632 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14633 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14634 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14635 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14636 ;;Total ram usage:        8 bytes
 14637 ;; Hardware stack levels used:    1
 14638 ;; Hardware stack levels required when called:    5
 14639 ;; This function calls:
 14640 ;;		_I2C2_MasterReadTRBBuild
 14641 ;;		_I2C2_MasterTRBInsert
 14642 ;; This function is called by:
 14643 ;;		_I2C_BufferRead
 14644 ;; This function uses a non-reentrant model
 14645 ;;
 14646                           
 14647                           
 14648                           ;psect for function _I2C2_MasterRead
 14649  16F2                     _I2C2_MasterRead:	
 14650                           
 14651                           ;i2c2.c: 625: static I2C2_TRANSACTION_REQUEST_BLOCK trBlock;
 14652                           ;i2c2.c: 629: if (i2c2_object.trStatus.s.full != 1)
 14653                           
 14654                           ;incstack = 0
 14655                           ; Regs used in _I2C2_MasterRead: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 14656  16F2  0021               	movlb	1	; select bank1
 14657  16F3  184C               	btfsc	(_i2c2_object^(0+128)+2),0
 14658  16F4  2F13               	goto	l5549
 14659                           
 14660                           ;i2c2.c: 630: {
 14661                           ;i2c2.c: 631: I2C2_MasterReadTRBBuild(&trBlock, pdata, length, address);
 14662  16F5  0020               	movlb	0	; select bank0
 14663  16F6  082A               	movf	I2C2_MasterRead@pdata+1,w
 14664  16F7  00A2               	movwf	I2C2_MasterReadTRBBuild@pdata+1
 14665  16F8  0829               	movf	I2C2_MasterRead@pdata,w
 14666  16F9  00A1               	movwf	I2C2_MasterReadTRBBuild@pdata
 14667  16FA  082B               	movf	I2C2_MasterRead@length,w
 14668  16FB  00AF               	movwf	??_I2C2_MasterRead
 14669  16FC  082F               	movf	??_I2C2_MasterRead,w
 14670  16FD  00A3               	movwf	I2C2_MasterReadTRBBuild@length
 14671  16FE  082D               	movf	I2C2_MasterRead@address+1,w
 14672  16FF  00A5               	movwf	I2C2_MasterReadTRBBuild@address+1
 14673  1700  082C               	movf	I2C2_MasterRead@address,w
 14674  1701  00A4               	movwf	I2C2_MasterReadTRBBuild@address
 14675  1702  3058               	movlw	(low (I2C2_MasterRead@trBlock| (0+256)))& (0+255)
 14676  1703  3197  276F  3196   	fcall	_I2C2_MasterReadTRBBuild
 14677                           
 14678                           ;i2c2.c: 632: I2C2_MasterTRBInsert(1, &trBlock, pflag);
 14679  1706  3058               	movlw	(low (I2C2_MasterRead@trBlock| (0+256)))& (0+255)
 14680  1707  0020               	movlb	0	; select bank0
 14681  1708  00AF               	movwf	??_I2C2_MasterRead
 14682  1709  082F               	movf	??_I2C2_MasterRead,w
 14683  170A  00A1               	movwf	I2C2_MasterTRBInsert@ptrb_list
 14684  170B  082E               	movf	I2C2_MasterRead@pflag,w
 14685  170C  00B0               	movwf	??_I2C2_MasterRead+1
 14686  170D  0830               	movf	??_I2C2_MasterRead+1,w
 14687  170E  00A2               	movwf	I2C2_MasterTRBInsert@pflag
 14688  170F  3001               	movlw	1
 14689  1710  3189  21A4         	fcall	_I2C2_MasterTRBInsert
 14690                           
 14691                           ;i2c2.c: 633: }
 14692  1712  0008               	return
 14693  1713                     l5549:	
 14694                           
 14695                           ;i2c2.c: 634: else
 14696                           ;i2c2.c: 635: {
 14697                           ;i2c2.c: 636: *pflag = I2C2_MESSAGE_FAIL;
 14698  1713  0020               	movlb	0	; select bank0
 14699  1714  082E               	movf	I2C2_MasterRead@pflag,w
 14700  1715  0086               	movwf	6
 14701  1716  0187               	clrf	7
 14702  1717  0181               	clrf	1
 14703  1718  0A81               	incf	1,f
 14704  1719  0008               	return
 14705  171A                     __end_of_I2C2_MasterRead:	
 14706                           
 14707                           	psect	text83
 14708  09A4                     __ptext83:	
 14709 ;; *************** function _I2C2_MasterTRBInsert *****************
 14710 ;; Defined at:
 14711 ;;		line 641 in file "mcc_generated_files/i2c2.c"
 14712 ;; Parameters:    Size  Location     Type
 14713 ;;  count           1    wreg     unsigned char 
 14714 ;;  ptrb_list       1    1[BANK0 ] PTR struct .
 14715 ;;		 -> I2C2_MasterRead@trBlock(5), I2C2_MasterWrite@trBlock(5), 
 14716 ;;  pflag           1    2[BANK0 ] PTR enum E2993
 14717 ;;		 -> I2C_BufferRead@status(1), I2C_ByteWrite@status(1), 
 14718 ;; Auto vars:     Size  Location     Type
 14719 ;;  count           1    4[BANK0 ] unsigned char 
 14720 ;; Return value:  Size  Location     Type
 14721 ;;                  1    wreg      void 
 14722 ;; Registers used:
 14723 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 14724 ;; Tracked objects:
 14725 ;;		On entry : 0/0
 14726 ;;		On exit  : 0/0
 14727 ;;		Unchanged: 0/0
 14728 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14729 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14730 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14731 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14732 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14733 ;;Total ram usage:        4 bytes
 14734 ;; Hardware stack levels used:    1
 14735 ;; Hardware stack levels required when called:    4
 14736 ;; This function calls:
 14737 ;;		Nothing
 14738 ;; This function is called by:
 14739 ;;		_I2C2_MasterWrite
 14740 ;;		_I2C2_MasterRead
 14741 ;; This function uses a non-reentrant model
 14742 ;;
 14743                           
 14744                           
 14745                           ;psect for function _I2C2_MasterTRBInsert
 14746  09A4                     _I2C2_MasterTRBInsert:	
 14747                           
 14748                           ;incstack = 0
 14749                           ; Regs used in _I2C2_MasterTRBInsert: [wreg+fsr1l+fsr1h+status,2+status,0]
 14750                           ;I2C2_MasterTRBInsert@count stored from wreg
 14751  09A4  0020               	movlb	0	; select bank0
 14752  09A5  00A4               	movwf	I2C2_MasterTRBInsert@count
 14753                           
 14754                           ;i2c2.c: 648: if (i2c2_object.trStatus.s.full != 1)
 14755  09A6  0021               	movlb	1	; select bank1
 14756  09A7  184C               	btfsc	(_i2c2_object^(0+128)+2),0
 14757  09A8  29E6               	goto	l5521
 14758                           
 14759                           ;i2c2.c: 649: {
 14760                           ;i2c2.c: 650: *pflag = I2C2_MESSAGE_PENDING;
 14761  09A9  3002               	movlw	2
 14762  09AA  0020               	movlb	0	; select bank0
 14763  09AB  00A3               	movwf	??_I2C2_MasterTRBInsert
 14764  09AC  0822               	movf	I2C2_MasterTRBInsert@pflag,w
 14765  09AD  0086               	movwf	6
 14766  09AE  0187               	clrf	7
 14767  09AF  0823               	movf	??_I2C2_MasterTRBInsert,w
 14768  09B0  0081               	movwf	1
 14769                           
 14770                           ;i2c2.c: 652: i2c2_object.pTrTail->ptrb_list = ptrb_list;
 14771  09B1  0821               	movf	I2C2_MasterTRBInsert@ptrb_list,w
 14772  09B2  00A3               	movwf	??_I2C2_MasterTRBInsert
 14773  09B3  0021               	movlb	1	; select bank1
 14774  09B4  0A4A               	incf	_i2c2_object^(0+128),w
 14775  09B5  0086               	movwf	6
 14776  09B6  3001               	movlw	1	; select bank2/3
 14777  09B7  0087               	movwf	7
 14778  09B8  0020               	movlb	0	; select bank0
 14779  09B9  0823               	movf	??_I2C2_MasterTRBInsert,w
 14780  09BA  0081               	movwf	1
 14781                           
 14782                           ;i2c2.c: 653: i2c2_object.pTrTail->count = count;
 14783  09BB  0824               	movf	I2C2_MasterTRBInsert@count,w
 14784  09BC  00A3               	movwf	??_I2C2_MasterTRBInsert
 14785  09BD  0021               	movlb	1	; select bank1
 14786  09BE  084A               	movf	_i2c2_object^(0+128),w
 14787  09BF  0086               	movwf	6
 14788  09C0  3001               	movlw	1	; select bank2/3
 14789  09C1  0087               	movwf	7
 14790  09C2  0020               	movlb	0	; select bank0
 14791  09C3  0823               	movf	??_I2C2_MasterTRBInsert,w
 14792  09C4  0081               	movwf	1
 14793                           
 14794                           ;i2c2.c: 654: i2c2_object.pTrTail->pTrFlag = pflag;
 14795  09C5  0021               	movlb	1	; select bank1
 14796  09C6  084A               	movf	_i2c2_object^(0+128),w
 14797  09C7  3E02               	addlw	2
 14798  09C8  0086               	movwf	6
 14799  09C9  3001               	movlw	1	; select bank2/3
 14800  09CA  0087               	movwf	7
 14801  09CB  0020               	movlb	0	; select bank0
 14802  09CC  0822               	movf	I2C2_MasterTRBInsert@pflag,w
 14803  09CD  3FC0               	movwi [0]fsr1
 14804  09CE  3000               	movlw	0
 14805  09CF  3FC1               	movwi [1]fsr1
 14806                           
 14807                           ;i2c2.c: 655: i2c2_object.pTrTail++;
 14808  09D0  3004               	movlw	4
 14809  09D1  00A3               	movwf	??_I2C2_MasterTRBInsert
 14810  09D2  0823               	movf	??_I2C2_MasterTRBInsert,w
 14811  09D3  0021               	movlb	1	; select bank1
 14812  09D4  07CA               	addwf	_i2c2_object^(0+128),f
 14813                           
 14814                           ;i2c2.c: 658: if (i2c2_object.pTrTail == (i2c2_tr_queue + 1))
 14815  09D5  084A               	movf	_i2c2_object^(0+128),w
 14816  09D6  3A66               	xorlw	(low ((_i2c2_tr_queue| (0+256)+4)))& (0+255)
 14817  09D7  1D03               	skipz
 14818  09D8  29DF               	goto	l5517
 14819                           
 14820                           ;i2c2.c: 659: {
 14821                           ;i2c2.c: 661: i2c2_object.pTrTail = i2c2_tr_queue;
 14822  09D9  3062               	movlw	(low (_i2c2_tr_queue| (0+256)))& (0+255)
 14823  09DA  0020               	movlb	0	; select bank0
 14824  09DB  00A3               	movwf	??_I2C2_MasterTRBInsert
 14825  09DC  0823               	movf	??_I2C2_MasterTRBInsert,w
 14826  09DD  0021               	movlb	1	; select bank1
 14827  09DE  00CA               	movwf	_i2c2_object^(0+128)
 14828  09DF                     l5517:	
 14829                           
 14830                           ;i2c2.c: 662: }
 14831                           ;i2c2.c: 666: i2c2_object.trStatus.s.empty = 0;
 14832  09DF  10CC               	bcf	(_i2c2_object^(0+128)+2),1
 14833                           
 14834                           ;i2c2.c: 669: if (i2c2_object.pTrHead == i2c2_object.pTrTail)
 14835  09E0  084B               	movf	(low ((_i2c2_object| 0+1)))^(0+128),w
 14836  09E1  064A               	xorwf	_i2c2_object^(0+128),w
 14837  09E2  1D03               	skipz
 14838  09E3  29EC               	goto	l5523
 14839                           
 14840                           ;i2c2.c: 670: {
 14841                           ;i2c2.c: 672: i2c2_object.trStatus.s.full = 1;
 14842  09E4  144C               	bsf	(_i2c2_object^(0+128)+2),0
 14843                           
 14844                           ;i2c2.c: 673: }
 14845                           ;i2c2.c: 675: }
 14846  09E5  29EC               	goto	l5523
 14847  09E6                     l5521:	
 14848                           
 14849                           ;i2c2.c: 676: else
 14850                           ;i2c2.c: 677: {
 14851                           ;i2c2.c: 678: *pflag = I2C2_MESSAGE_FAIL;
 14852  09E6  0020               	movlb	0	; select bank0
 14853  09E7  0822               	movf	I2C2_MasterTRBInsert@pflag,w
 14854  09E8  0086               	movwf	6
 14855  09E9  0187               	clrf	7
 14856  09EA  0181               	clrf	1
 14857  09EB  0A81               	incf	1,f
 14858  09EC                     l5523:	
 14859                           
 14860                           ;i2c2.c: 679: }
 14861                           ;i2c2.c: 682: if (*pflag == I2C2_MESSAGE_PENDING)
 14862  09EC  0020               	movlb	0	; select bank0
 14863  09ED  0822               	movf	I2C2_MasterTRBInsert@pflag,w
 14864  09EE  0086               	movwf	6
 14865  09EF  0187               	clrf	7
 14866  09F0  3002               	movlw	2
 14867  09F1  0601               	xorwf	1,w
 14868  09F2  1D03               	btfss	3,2
 14869  09F3  0008               	return
 14870  09F4                     l358:	
 14871                           ;i2c2.c: 685: while(i2c2_state != S_MASTER_IDLE)
 14872                           
 14873                           ;i2c2.c: 683: {
 14874                           ;i2c2.c: 684: PIR4bits.SSP2IF = 1;
 14875                           
 14876                           
 14877                           ;i2c2.c: 686: {
 14878                           ;i2c2.c: 689: PIR4bits.SSP2IF = 1;
 14879  09F4  1414               	bsf	20,0	;volatile
 14880  09F5  0879               	movf	_i2c2_state,w
 14881  09F6  1903               	btfsc	3,2
 14882  09F7  0008               	return
 14883  09F8  29F4               	goto	l358
 14884  09F9                     __end_of_I2C2_MasterTRBInsert:	
 14885                           
 14886                           	psect	text84
 14887  176F                     __ptext84:	
 14888 ;; *************** function _I2C2_MasterReadTRBBuild *****************
 14889 ;; Defined at:
 14890 ;;		line 695 in file "mcc_generated_files/i2c2.c"
 14891 ;; Parameters:    Size  Location     Type
 14892 ;;  ptrb            1    wreg     PTR struct .
 14893 ;;		 -> I2C2_MasterRead@trBlock(5), 
 14894 ;;  pdata           2    1[BANK0 ] PTR unsigned char 
 14895 ;;		 -> data(8), b1(24), HMC5883L_ReadBit@tmp(1), HMC5883L_ReadBits@tmp(1), 
 14896 ;;		 -> HMC5883L_WriteBit@tmp(1), HMC5883L_WriteBits@tmp(1), heading(8), HMC5883L_TestConnection@tmp(3), 
 14897 ;;		 -> MPU6050_ReadBit@tmp(1), MPU6050_ReadBits@tmp(1), MPU6050_WriteBit@tmp(1), MPU6050_WriteBits@tmp(1), 
 14898 ;;		 -> MPU6050_GetRawAccel@tempBuffer(6), MPU6050_GetRawAccelGyro@tmpBuffer(14), 
 14899 ;;  length          1    3[BANK0 ] unsigned char 
 14900 ;;  address         2    4[BANK0 ] unsigned int 
 14901 ;; Auto vars:     Size  Location     Type
 14902 ;;  ptrb            1    8[BANK0 ] PTR struct .
 14903 ;;		 -> I2C2_MasterRead@trBlock(5), 
 14904 ;; Return value:  Size  Location     Type
 14905 ;;                  1    wreg      void 
 14906 ;; Registers used:
 14907 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 14908 ;; Tracked objects:
 14909 ;;		On entry : 0/0
 14910 ;;		On exit  : 0/0
 14911 ;;		Unchanged: 0/0
 14912 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14913 ;;      Params:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14914 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14915 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14916 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14917 ;;Total ram usage:        8 bytes
 14918 ;; Hardware stack levels used:    1
 14919 ;; Hardware stack levels required when called:    4
 14920 ;; This function calls:
 14921 ;;		Nothing
 14922 ;; This function is called by:
 14923 ;;		_I2C2_MasterRead
 14924 ;; This function uses a non-reentrant model
 14925 ;;
 14926                           
 14927                           
 14928                           ;psect for function _I2C2_MasterReadTRBBuild
 14929  176F                     _I2C2_MasterReadTRBBuild:	
 14930                           
 14931                           ;incstack = 0
 14932                           ; Regs used in _I2C2_MasterReadTRBBuild: [wreg+fsr1l+fsr1h+status,2+status,0]
 14933                           ;I2C2_MasterReadTRBBuild@ptrb stored from wreg
 14934  176F  0020               	movlb	0	; select bank0
 14935  1770  00A8               	movwf	I2C2_MasterReadTRBBuild@ptrb
 14936                           
 14937                           ;i2c2.c: 701: ptrb->address = address << 1;
 14938  1771  0825               	movf	I2C2_MasterReadTRBBuild@address+1,w
 14939  1772  00A7               	movwf	??_I2C2_MasterReadTRBBuild+1
 14940  1773  0824               	movf	I2C2_MasterReadTRBBuild@address,w
 14941  1774  00A6               	movwf	??_I2C2_MasterReadTRBBuild
 14942  1775  35A6               	lslf	??_I2C2_MasterReadTRBBuild,f
 14943  1776  0DA7               	rlf	??_I2C2_MasterReadTRBBuild+1,f
 14944  1777  0828               	movf	I2C2_MasterReadTRBBuild@ptrb,w
 14945  1778  0086               	movwf	6
 14946  1779  3001               	movlw	1	; select bank2/3
 14947  177A  0087               	movwf	7
 14948  177B  0826               	movf	??_I2C2_MasterReadTRBBuild,w
 14949  177C  3FC0               	movwi [0]fsr1
 14950  177D  0827               	movf	??_I2C2_MasterReadTRBBuild+1,w
 14951  177E  3FC1               	movwi [1]fsr1
 14952                           
 14953                           ;i2c2.c: 703: ptrb->address |= 0x01;
 14954  177F  0828               	movf	I2C2_MasterReadTRBBuild@ptrb,w
 14955  1780  0086               	movwf	6
 14956  1781  3001               	movlw	1	; select bank2/3
 14957  1782  0087               	movwf	7
 14958  1783  3001               	movlw	1
 14959  1784  0481               	iorwf	1,f
 14960  1785  3141               	addfsr 1,1
 14961  1786  3000               	movlw	0
 14962  1787  0481               	iorwf	1,f
 14963                           
 14964                           ;i2c2.c: 704: ptrb->length = length;
 14965  1788  0823               	movf	I2C2_MasterReadTRBBuild@length,w
 14966  1789  00A6               	movwf	??_I2C2_MasterReadTRBBuild
 14967  178A  0828               	movf	I2C2_MasterReadTRBBuild@ptrb,w
 14968  178B  3E02               	addlw	2
 14969  178C  0086               	movwf	6
 14970  178D  3001               	movlw	1	; select bank2/3
 14971  178E  0087               	movwf	7
 14972  178F  0826               	movf	??_I2C2_MasterReadTRBBuild,w
 14973  1790  0081               	movwf	1
 14974                           
 14975                           ;i2c2.c: 705: ptrb->pbuffer = pdata;
 14976  1791  0828               	movf	I2C2_MasterReadTRBBuild@ptrb,w
 14977  1792  3E03               	addlw	3
 14978  1793  0086               	movwf	6
 14979  1794  3001               	movlw	1	; select bank2/3
 14980  1795  0087               	movwf	7
 14981  1796  0821               	movf	I2C2_MasterReadTRBBuild@pdata,w
 14982  1797  3FC0               	movwi [0]fsr1
 14983  1798  0822               	movf	I2C2_MasterReadTRBBuild@pdata+1,w
 14984  1799  3FC1               	movwi [1]fsr1
 14985  179A  0008               	return
 14986  179B                     __end_of_I2C2_MasterReadTRBBuild:	
 14987                           
 14988                           	psect	text85
 14989  1307                     __ptext85:	
 14990 ;; *************** function _Diag_setTempSensorHealth *****************
 14991 ;; Defined at:
 14992 ;;		line 15 in file "diagnostics.c"
 14993 ;; Parameters:    Size  Location     Type
 14994 ;;  health          1    wreg     unsigned char 
 14995 ;; Auto vars:     Size  Location     Type
 14996 ;;  health          1    2[BANK0 ] unsigned char 
 14997 ;; Return value:  Size  Location     Type
 14998 ;;                  1    wreg      void 
 14999 ;; Registers used:
 15000 ;;		wreg
 15001 ;; Tracked objects:
 15002 ;;		On entry : 0/0
 15003 ;;		On exit  : 0/0
 15004 ;;		Unchanged: 0/0
 15005 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15006 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15007 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15008 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15009 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15010 ;;Total ram usage:        2 bytes
 15011 ;; Hardware stack levels used:    1
 15012 ;; Hardware stack levels required when called:    4
 15013 ;; This function calls:
 15014 ;;		Nothing
 15015 ;; This function is called by:
 15016 ;;		_BMP_init
 15017 ;;		_BMP_readTemperature
 15018 ;; This function uses a non-reentrant model
 15019 ;;
 15020                           
 15021                           
 15022                           ;psect for function _Diag_setTempSensorHealth
 15023  1307                     _Diag_setTempSensorHealth:	
 15024                           
 15025                           ;incstack = 0
 15026                           ; Regs used in _Diag_setTempSensorHealth: [wreg]
 15027                           ;Diag_setTempSensorHealth@health stored from wreg
 15028  1307  0020               	movlb	0	; select bank0
 15029  1308  00A2               	movwf	Diag_setTempSensorHealth@health
 15030                           
 15031                           ;diagnostics.c: 17: sensorHealth.tempSensorHealth=health;
 15032  1309  0822               	movf	Diag_setTempSensorHealth@health,w
 15033  130A  00A1               	movwf	??_Diag_setTempSensorHealth
 15034  130B  0821               	movf	??_Diag_setTempSensorHealth,w
 15035  130C  0021               	movlb	1	; select bank1
 15036  130D  00E3               	movwf	_sensorHealth^(0+128)
 15037  130E  0008               	return
 15038  130F                     __end_of_Diag_setTempSensorHealth:	
 15039                           
 15040                           	psect	intentry
 15041  0004                     __pintentry:	
 15042 ;; *************** function _INTERRUPT_InterruptManager *****************
 15043 ;; Defined at:
 15044 ;;		line 51 in file "mcc_generated_files/interrupt_manager.c"
 15045 ;; Parameters:    Size  Location     Type
 15046 ;;		None
 15047 ;; Auto vars:     Size  Location     Type
 15048 ;;		None
 15049 ;; Return value:  Size  Location     Type
 15050 ;;                  1    wreg      void 
 15051 ;; Registers used:
 15052 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15053 ;; Tracked objects:
 15054 ;;		On entry : 0/0
 15055 ;;		On exit  : 0/0
 15056 ;;		Unchanged: 0/0
 15057 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15058 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15059 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15060 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15061 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15062 ;;Total ram usage:        1 bytes
 15063 ;; Hardware stack levels used:    1
 15064 ;; Hardware stack levels required when called:    3
 15065 ;; This function calls:
 15066 ;;		_I2C2_BusCollisionISR
 15067 ;;		_I2C2_ISR
 15068 ;;		_PIN_MANAGER_IOC
 15069 ;;		_TMR1_ISR
 15070 ;; This function is called by:
 15071 ;;		Interrupt level 1
 15072 ;; This function uses a non-reentrant model
 15073 ;;
 15074                           
 15075  0004                     _INTERRUPT_InterruptManager:	
 15076                           
 15077                           ;incstack = 0
 15078  0004  147E               	bsf	126,0	;set compiler interrupt flag (level 1)
 15079                           
 15080                           ; Regs used in _INTERRUPT_InterruptManager: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 15081  0005  3180               	pagesel	$
 15082  0006  0020               	movlb	0	; select bank0
 15083  0007  087F               	movf	127,w
 15084  0008  00A0               	movwf	??_INTERRUPT_InterruptManager
 15085                           
 15086                           ;interrupt_manager.c: 54: if(INTCONbits.PEIE == 1 && PIE4bits.BCL2IE == 1 && PIR4bits.BC
      +                          L2IF == 1)
 15087  0009  1F0B               	btfss	11,6	;volatile
 15088  000A  2815               	goto	i1l153
 15089  000B  0021               	movlb	1	; select bank1
 15090  000C  1C94               	btfss	20,1	;volatile
 15091  000D  2815               	goto	i1l153
 15092  000E  0020               	movlb	0	; select bank0
 15093  000F  1C94               	btfss	20,1	;volatile
 15094  0010  2815               	goto	i1l153
 15095                           
 15096                           ;interrupt_manager.c: 55: {
 15097                           ;interrupt_manager.c: 56: I2C2_BusCollisionISR();
 15098  0011  3192  22A9  3180   	fcall	_I2C2_BusCollisionISR
 15099                           
 15100                           ;interrupt_manager.c: 57: }
 15101  0014  2832               	goto	i1l161
 15102  0015                     i1l153:	
 15103                           
 15104                           ;interrupt_manager.c: 58: else if(INTCONbits.PEIE == 1 && PIE4bits.SSP2IE == 1 && PIR4bi
      +                          ts.SSP2IF == 1)
 15105  0015  1F0B               	btfss	11,6	;volatile
 15106  0016  2821               	goto	i1l155
 15107  0017  0021               	movlb	1	; select bank1
 15108  0018  1C14               	btfss	20,0	;volatile
 15109  0019  2821               	goto	i1l155
 15110  001A  0020               	movlb	0	; select bank0
 15111  001B  1C14               	btfss	20,0	;volatile
 15112  001C  2821               	goto	i1l155
 15113                           
 15114                           ;interrupt_manager.c: 59: {
 15115                           ;interrupt_manager.c: 60: I2C2_ISR();
 15116  001D  3185  253C  3180   	fcall	_I2C2_ISR
 15117                           
 15118                           ;interrupt_manager.c: 61: }
 15119  0020  2832               	goto	i1l161
 15120  0021                     i1l155:	
 15121                           
 15122                           ;interrupt_manager.c: 62: else if(INTCONbits.PEIE == 1 && PIE1bits.TMR1IE == 1 && PIR1bi
      +                          ts.TMR1IF == 1)
 15123  0021  1F0B               	btfss	11,6	;volatile
 15124  0022  282D               	goto	i1l157
 15125  0023  0021               	movlb	1	; select bank1
 15126  0024  1C11               	btfss	17,0	;volatile
 15127  0025  282D               	goto	i1l157
 15128  0026  0020               	movlb	0	; select bank0
 15129  0027  1C11               	btfss	17,0	;volatile
 15130  0028  282D               	goto	i1l157
 15131                           
 15132                           ;interrupt_manager.c: 63: {
 15133                           ;interrupt_manager.c: 64: TMR1_ISR();
 15134  0029  3193  231F  3180   	fcall	_TMR1_ISR
 15135                           
 15136                           ;interrupt_manager.c: 65: }
 15137  002C  2832               	goto	i1l161
 15138  002D                     i1l157:	
 15139                           
 15140                           ;interrupt_manager.c: 66: else if(INTCONbits.IOCIE == 1 && INTCONbits.IOCIF == 1)
 15141  002D  198B               	btfsc	11,3	;volatile
 15142  002E  1C0B               	btfss	11,0	;volatile
 15143  002F  2832               	goto	i1l161
 15144                           
 15145                           ;interrupt_manager.c: 67: {
 15146                           ;interrupt_manager.c: 68: PIN_MANAGER_IOC();
 15147  0030  3192  22DA         	fcall	_PIN_MANAGER_IOC
 15148  0032                     i1l161:	
 15149                           ;interrupt_manager.c: 70: else
 15150                           ;interrupt_manager.c: 71: {
 15151                           
 15152                           ;interrupt_manager.c: 69: }
 15153                           
 15154  0032  0020               	movlb	0	; select bank0
 15155  0033  0820               	movf	??_INTERRUPT_InterruptManager,w
 15156  0034  00FF               	movwf	127
 15157  0035  107E               	bcf	126,0	;clear compiler interrupt flag (level 1)
 15158  0036  0009               	retfie
 15159  0037                     __end_of_INTERRUPT_InterruptManager:	
 15160                           
 15161                           	psect	text87
 15162  131F                     __ptext87:	
 15163 ;; *************** function _TMR1_ISR *****************
 15164 ;; Defined at:
 15165 ;;		line 157 in file "mcc_generated_files/tmr1.c"
 15166 ;; Parameters:    Size  Location     Type
 15167 ;;		None
 15168 ;; Auto vars:     Size  Location     Type
 15169 ;;		None
 15170 ;; Return value:  Size  Location     Type
 15171 ;;                  1    wreg      void 
 15172 ;; Registers used:
 15173 ;;		wreg, status,2, status,0, pclath, cstack
 15174 ;; Tracked objects:
 15175 ;;		On entry : 0/0
 15176 ;;		On exit  : 0/0
 15177 ;;		Unchanged: 0/0
 15178 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15179 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15180 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15181 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15182 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15183 ;;Total ram usage:        0 bytes
 15184 ;; Hardware stack levels used:    1
 15185 ;; Hardware stack levels required when called:    2
 15186 ;; This function calls:
 15187 ;;		_TMR1_CallBack
 15188 ;; This function is called by:
 15189 ;;		_INTERRUPT_InterruptManager
 15190 ;; This function uses a non-reentrant model
 15191 ;;
 15192                           
 15193                           
 15194                           ;psect for function _TMR1_ISR
 15195  131F                     _TMR1_ISR:	
 15196                           
 15197                           ;tmr1.c: 161: PIR1bits.TMR1IF = 0;
 15198                           
 15199                           ;incstack = 0
 15200                           ; Regs used in _TMR1_ISR: [wreg+status,2+status,0+pclath+cstack]
 15201  131F  0020               	movlb	0	; select bank0
 15202  1320  1011               	bcf	17,0	;volatile
 15203                           
 15204                           ;tmr1.c: 163: TMR1H = (timer1ReloadVal >> 8);
 15205  1321  087D               	movf	_timer1ReloadVal+1,w	;volatile
 15206  1322  0097               	movwf	23	;volatile
 15207                           
 15208                           ;tmr1.c: 164: TMR1L = timer1ReloadVal;
 15209  1323  087C               	movf	_timer1ReloadVal,w	;volatile
 15210  1324  0096               	movwf	22	;volatile
 15211                           
 15212                           ;tmr1.c: 168: TMR1_CallBack();
 15213  1325  3193  237C         	fcall	_TMR1_CallBack
 15214  1327  0008               	return
 15215  1328                     __end_of_TMR1_ISR:	
 15216                           
 15217                           	psect	text88
 15218  137C                     __ptext88:	
 15219 ;; *************** function _TMR1_CallBack *****************
 15220 ;; Defined at:
 15221 ;;		line 171 in file "mcc_generated_files/tmr1.c"
 15222 ;; Parameters:    Size  Location     Type
 15223 ;;		None
 15224 ;; Auto vars:     Size  Location     Type
 15225 ;;		None
 15226 ;; Return value:  Size  Location     Type
 15227 ;;                  1    wreg      void 
 15228 ;; Registers used:
 15229 ;;		wreg, status,2, status,0, pclath, cstack
 15230 ;; Tracked objects:
 15231 ;;		On entry : 0/0
 15232 ;;		On exit  : 0/0
 15233 ;;		Unchanged: 0/0
 15234 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15235 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15236 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15237 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15238 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15239 ;;Total ram usage:        0 bytes
 15240 ;; Hardware stack levels used:    1
 15241 ;; Hardware stack levels required when called:    1
 15242 ;; This function calls:
 15243 ;;		Absolute function
 15244 ;;		_TMR1_DefaultInterruptHandler
 15245 ;;		_Timeout_increment
 15246 ;; This function is called by:
 15247 ;;		_TMR1_ISR
 15248 ;; This function uses a non-reentrant model
 15249 ;;
 15250                           
 15251                           
 15252                           ;psect for function _TMR1_CallBack
 15253  137C                     _TMR1_CallBack:	
 15254                           
 15255                           ;tmr1.c: 174: Timeout_increment();
 15256                           
 15257                           ;incstack = 0
 15258                           ; Regs used in _TMR1_CallBack: [wreg+status,2+status,0+pclath+cstack]
 15259  137C  3193  234C  3193   	fcall	_Timeout_increment
 15260                           
 15261                           ;tmr1.c: 175: if(TMR1_InterruptHandler)
 15262  137F  0022               	movlb	2	; select bank2
 15263  1380  0866               	movf	_TMR1_InterruptHandler^(0+256),w
 15264  1381  0467               	iorwf	(_TMR1_InterruptHandler+1)^(0+256),w
 15265  1382  1903               	btfsc	3,2
 15266  1383  0008               	return
 15267                           
 15268                           ;tmr1.c: 176: {
 15269                           ;tmr1.c: 177: TMR1_InterruptHandler();
 15270  1384  0867               	movf	(_TMR1_InterruptHandler+1)^(0+256),w
 15271  1385  008A               	movwf	10
 15272  1386  0866               	movf	_TMR1_InterruptHandler^(0+256),w
 15273  1387  000A               	callw
 15274  1388  3193               	pagesel	$
 15275  1389  0008               	return
 15276  138A                     __end_of_TMR1_CallBack:	
 15277                           
 15278                           	psect	text89
 15279  134C                     __ptext89:	
 15280 ;; *************** function _Timeout_increment *****************
 15281 ;; Defined at:
 15282 ;;		line 8 in file "timeout.c"
 15283 ;; Parameters:    Size  Location     Type
 15284 ;;		None
 15285 ;; Auto vars:     Size  Location     Type
 15286 ;;		None
 15287 ;; Return value:  Size  Location     Type
 15288 ;;                  1    wreg      void 
 15289 ;; Registers used:
 15290 ;;		wreg
 15291 ;; Tracked objects:
 15292 ;;		On entry : 0/0
 15293 ;;		On exit  : 0/0
 15294 ;;		Unchanged: 0/0
 15295 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15296 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15297 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15298 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15299 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15300 ;;Total ram usage:        0 bytes
 15301 ;; Hardware stack levels used:    1
 15302 ;; This function calls:
 15303 ;;		Nothing
 15304 ;; This function is called by:
 15305 ;;		_TMR1_CallBack
 15306 ;; This function uses a non-reentrant model
 15307 ;;
 15308                           
 15309                           
 15310                           ;psect for function _Timeout_increment
 15311  134C                     _Timeout_increment:	
 15312                           
 15313                           ;timeout.c: 10: globalCounter+=10000;
 15314                           
 15315                           ;incstack = 0
 15316                           ; Regs used in _Timeout_increment: [wreg]
 15317  134C  3010               	movlw	16
 15318  134D  0021               	movlb	1	; select bank1
 15319  134E  07CF               	addwf	_globalCounter^(0+128),f	;volatile
 15320  134F  3027               	movlw	39
 15321  1350  3DD0               	addwfc	(_globalCounter+1)^(0+128),f	;volatile
 15322  1351  3000               	movlw	0
 15323  1352  3DD1               	addwfc	(_globalCounter+2)^(0+128),f	;volatile
 15324  1353  3000               	movlw	0
 15325  1354  3DD2               	addwfc	(_globalCounter+3)^(0+128),f	;volatile
 15326  1355  0008               	return
 15327  1356                     __end_of_Timeout_increment:	
 15328                           
 15329                           	psect	text90
 15330  0002                     __ptext90:	
 15331 ;; *************** function _TMR1_DefaultInterruptHandler *****************
 15332 ;; Defined at:
 15333 ;;		line 185 in file "mcc_generated_files/tmr1.c"
 15334 ;; Parameters:    Size  Location     Type
 15335 ;;		None
 15336 ;; Auto vars:     Size  Location     Type
 15337 ;;		None
 15338 ;; Return value:  Size  Location     Type
 15339 ;;                  1    wreg      void 
 15340 ;; Registers used:
 15341 ;;		None
 15342 ;; Tracked objects:
 15343 ;;		On entry : 0/0
 15344 ;;		On exit  : 0/0
 15345 ;;		Unchanged: 0/0
 15346 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15347 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15348 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15349 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15350 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15351 ;;Total ram usage:        0 bytes
 15352 ;; Hardware stack levels used:    1
 15353 ;; This function calls:
 15354 ;;		Nothing
 15355 ;; This function is called by:
 15356 ;;		_TMR1_Initialize
 15357 ;;		_TMR1_CallBack
 15358 ;; This function uses a non-reentrant model
 15359 ;;
 15360                           
 15361                           
 15362                           ;psect for function _TMR1_DefaultInterruptHandler
 15363  0002                     _TMR1_DefaultInterruptHandler:	
 15364                           
 15365                           ;incstack = 0
 15366                           ; Regs used in _TMR1_DefaultInterruptHandler: []
 15367  0002  0008               	return
 15368  0003                     __end_of_TMR1_DefaultInterruptHandler:	
 15369                           
 15370                           	psect	text91
 15371  12DA                     __ptext91:	
 15372 ;; *************** function _PIN_MANAGER_IOC *****************
 15373 ;; Defined at:
 15374 ;;		line 110 in file "mcc_generated_files/pin_manager.c"
 15375 ;; Parameters:    Size  Location     Type
 15376 ;;		None
 15377 ;; Auto vars:     Size  Location     Type
 15378 ;;		None
 15379 ;; Return value:  Size  Location     Type
 15380 ;;                  1    wreg      void 
 15381 ;; Registers used:
 15382 ;;		wreg, status,2, status,0, pclath, cstack
 15383 ;; Tracked objects:
 15384 ;;		On entry : 0/0
 15385 ;;		On exit  : 0/0
 15386 ;;		Unchanged: 0/0
 15387 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15388 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15389 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15390 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15391 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15392 ;;Total ram usage:        0 bytes
 15393 ;; Hardware stack levels used:    1
 15394 ;; Hardware stack levels required when called:    2
 15395 ;; This function calls:
 15396 ;;		_IOCAF2_ISR
 15397 ;; This function is called by:
 15398 ;;		_INTERRUPT_InterruptManager
 15399 ;; This function uses a non-reentrant model
 15400 ;;
 15401                           
 15402                           
 15403                           ;psect for function _PIN_MANAGER_IOC
 15404  12DA                     _PIN_MANAGER_IOC:	
 15405                           
 15406                           ;pin_manager.c: 113: if(IOCAFbits.IOCAF2 == 1)
 15407                           
 15408                           ;incstack = 0
 15409                           ; Regs used in _PIN_MANAGER_IOC: [wreg+status,2+status,0+pclath+cstack]
 15410  12DA  0027               	movlb	7	; select bank7
 15411  12DB  1D13               	btfss	19,2	;volatile
 15412  12DC  0008               	return
 15413                           
 15414                           ;pin_manager.c: 114: {
 15415                           ;pin_manager.c: 115: IOCAF2_ISR();
 15416  12DD  3193  2362         	fcall	_IOCAF2_ISR
 15417  12DF  0008               	return
 15418  12E0                     __end_of_PIN_MANAGER_IOC:	
 15419                           
 15420                           	psect	text92
 15421  1362                     __ptext92:	
 15422 ;; *************** function _IOCAF2_ISR *****************
 15423 ;; Defined at:
 15424 ;;		line 124 in file "mcc_generated_files/pin_manager.c"
 15425 ;; Parameters:    Size  Location     Type
 15426 ;;		None
 15427 ;; Auto vars:     Size  Location     Type
 15428 ;;		None
 15429 ;; Return value:  Size  Location     Type
 15430 ;;                  1    wreg      void 
 15431 ;; Registers used:
 15432 ;;		wreg, status,2, status,0, pclath, cstack
 15433 ;; Tracked objects:
 15434 ;;		On entry : 0/0
 15435 ;;		On exit  : 0/0
 15436 ;;		Unchanged: 0/0
 15437 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15438 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15439 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15440 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15441 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15442 ;;Total ram usage:        0 bytes
 15443 ;; Hardware stack levels used:    1
 15444 ;; Hardware stack levels required when called:    1
 15445 ;; This function calls:
 15446 ;;		Absolute function
 15447 ;;		_IOCAF2_DefaultInterruptHandler
 15448 ;; This function is called by:
 15449 ;;		_PIN_MANAGER_IOC
 15450 ;; This function uses a non-reentrant model
 15451 ;;
 15452                           
 15453                           
 15454                           ;psect for function _IOCAF2_ISR
 15455  1362                     _IOCAF2_ISR:	
 15456                           
 15457                           ;pin_manager.c: 129: if(IOCAF2_InterruptHandler)
 15458                           
 15459                           ;incstack = 0
 15460                           ; Regs used in _IOCAF2_ISR: [wreg+status,2+status,0+pclath+cstack]
 15461  1362  0022               	movlb	2	; select bank2
 15462  1363  0868               	movf	_IOCAF2_InterruptHandler^(0+256),w
 15463  1364  0469               	iorwf	(_IOCAF2_InterruptHandler+1)^(0+256),w
 15464  1365  1903               	btfsc	3,2
 15465  1366  2B6C               	goto	i1l4289
 15466                           
 15467                           ;pin_manager.c: 130: {
 15468                           ;pin_manager.c: 131: IOCAF2_InterruptHandler();
 15469  1367  0869               	movf	(_IOCAF2_InterruptHandler+1)^(0+256),w
 15470  1368  008A               	movwf	10
 15471  1369  0868               	movf	_IOCAF2_InterruptHandler^(0+256),w
 15472  136A  000A               	callw
 15473  136B  3193               	pagesel	$
 15474  136C                     i1l4289:	
 15475                           
 15476                           ;pin_manager.c: 132: }
 15477                           ;pin_manager.c: 133: IOCAFbits.IOCAF2 = 0;
 15478  136C  0027               	movlb	7	; select bank7
 15479  136D  1113               	bcf	19,2	;volatile
 15480  136E  0008               	return
 15481  136F                     __end_of_IOCAF2_ISR:	
 15482                           
 15483                           	psect	text93
 15484  12AA                     __ptext93:	
 15485 ;; *************** function _IOCAF2_DefaultInterruptHandler *****************
 15486 ;; Defined at:
 15487 ;;		line 146 in file "mcc_generated_files/pin_manager.c"
 15488 ;; Parameters:    Size  Location     Type
 15489 ;;		None
 15490 ;; Auto vars:     Size  Location     Type
 15491 ;;		None
 15492 ;; Return value:  Size  Location     Type
 15493 ;;                  1    wreg      void 
 15494 ;; Registers used:
 15495 ;;		None
 15496 ;; Tracked objects:
 15497 ;;		On entry : 0/0
 15498 ;;		On exit  : 0/0
 15499 ;;		Unchanged: 0/0
 15500 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15501 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15502 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15503 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15504 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15505 ;;Total ram usage:        0 bytes
 15506 ;; Hardware stack levels used:    1
 15507 ;; This function calls:
 15508 ;;		Nothing
 15509 ;; This function is called by:
 15510 ;;		_PIN_MANAGER_Initialize
 15511 ;;		_IOCAF2_ISR
 15512 ;; This function uses a non-reentrant model
 15513 ;;
 15514                           
 15515                           
 15516                           ;psect for function _IOCAF2_DefaultInterruptHandler
 15517  12AA                     _IOCAF2_DefaultInterruptHandler:	
 15518                           
 15519                           ;incstack = 0
 15520                           ; Regs used in _IOCAF2_DefaultInterruptHandler: []
 15521  12AA  0008               	return
 15522  12AB                     __end_of_IOCAF2_DefaultInterruptHandler:	
 15523                           
 15524                           	psect	text94
 15525  053C                     __ptext94:	
 15526 ;; *************** function _I2C2_ISR *****************
 15527 ;; Defined at:
 15528 ;;		line 233 in file "mcc_generated_files/i2c2.c"
 15529 ;; Parameters:    Size  Location     Type
 15530 ;;		None
 15531 ;; Auto vars:     Size  Location     Type
 15532 ;;		None
 15533 ;; Return value:  Size  Location     Type
 15534 ;;                  1    wreg      void 
 15535 ;; Registers used:
 15536 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15537 ;; Tracked objects:
 15538 ;;		On entry : 0/0
 15539 ;;		On exit  : 0/0
 15540 ;;		Unchanged: 0/0
 15541 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15542 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15543 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15544 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15545 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15546 ;;Total ram usage:        4 bytes
 15547 ;; Hardware stack levels used:    1
 15548 ;; Hardware stack levels required when called:    1
 15549 ;; This function calls:
 15550 ;;		_I2C2_FunctionComplete
 15551 ;;		_I2C2_Stop
 15552 ;; This function is called by:
 15553 ;;		_INTERRUPT_InterruptManager
 15554 ;; This function uses a non-reentrant model
 15555 ;;
 15556                           
 15557                           
 15558                           ;psect for function _I2C2_ISR
 15559  053C                     _I2C2_ISR:	
 15560                           
 15561                           ;i2c2.c: 236: static uint8_t *pi2c_buf_ptr;
 15562                           ;i2c2.c: 237: static uint16_t i2c_address = 0;
 15563                           ;i2c2.c: 238: static uint8_t i2c_bytes_left = 0;
 15564                           ;i2c2.c: 239: static uint8_t i2c_10bit_address_restart = 0;
 15565                           ;i2c2.c: 241: PIR4bits.SSP2IF = 0;
 15566                           
 15567                           ;incstack = 0
 15568                           ; Regs used in _I2C2_ISR: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 15569  053C  0020               	movlb	0	; select bank0
 15570  053D  1014               	bcf	20,0	;volatile
 15571                           
 15572                           ;i2c2.c: 245: if(SSP2CON1bits.WCOL)
 15573  053E  0024               	movlb	4	; select bank4
 15574  053F  1F9D               	btfss	29,7	;volatile
 15575  0540  2E7A               	goto	i1l4871
 15576                           
 15577                           ;i2c2.c: 246: {
 15578                           ;i2c2.c: 248: SSP2CON1bits.WCOL = 0;
 15579  0541  139D               	bcf	29,7	;volatile
 15580                           
 15581                           ;i2c2.c: 249: i2c2_state = S_MASTER_IDLE;
 15582  0542  01F9               	clrf	_i2c2_state
 15583                           
 15584                           ;i2c2.c: 250: *(p_i2c2_current->pTrFlag) = I2C2_MESSAGE_FAIL;
 15585  0543  0877               	movf	_p_i2c2_current,w
 15586  0544  3E02               	addlw	2
 15587  0545  0086               	movwf	6
 15588  0546  3001               	movlw	1	; select bank2/3
 15589  0547  0087               	movwf	7
 15590  0548  3F40               	moviw [0]fsr1
 15591  0549  00F3               	movwf	??_I2C2_ISR
 15592  054A  3F41               	moviw [1]fsr1
 15593  054B  00F4               	movwf	??_I2C2_ISR+1
 15594  054C  0873               	movf	??_I2C2_ISR,w
 15595  054D  0086               	movwf	6
 15596  054E  0874               	movf	??_I2C2_ISR+1,w
 15597  054F  0087               	movwf	7
 15598  0550  3001               	movlw	1
 15599  0551  0081               	movwf	1
 15600                           
 15601                           ;i2c2.c: 253: p_i2c2_current = (0);
 15602  0552  01F7               	clrf	_p_i2c2_current
 15603                           
 15604                           ;i2c2.c: 255: return;
 15605  0553  0008               	return
 15606  0554                     i1l288:	
 15607                           ;i2c2.c: 260: {
 15608                           ;i2c2.c: 261: case S_MASTER_IDLE:
 15609                           
 15610                           ;i2c2.c: 256: }
 15611                           ;i2c2.c: 259: switch(i2c2_state)
 15612                           
 15613                           
 15614                           ;i2c2.c: 263: if(i2c2_object.trStatus.s.empty != 1)
 15615  0554  0021               	movlb	1	; select bank1
 15616  0555  18CC               	btfsc	(_i2c2_object^(0+128)+2),1
 15617  0556  0008               	return
 15618                           
 15619                           ;i2c2.c: 264: {
 15620                           ;i2c2.c: 266: p_i2c2_current = i2c2_object.pTrHead;
 15621  0557  084B               	movf	(low ((_i2c2_object| 0+1)))^(0+128),w
 15622  0558  00F3               	movwf	??_I2C2_ISR
 15623  0559  0873               	movf	??_I2C2_ISR,w
 15624  055A  00F7               	movwf	_p_i2c2_current
 15625                           
 15626                           ;i2c2.c: 267: i2c2_trb_count = i2c2_object.pTrHead->count;
 15627  055B  084B               	movf	(low ((_i2c2_object| 0+1)))^(0+128),w
 15628  055C  0086               	movwf	6
 15629  055D  3001               	movlw	1	; select bank2/3
 15630  055E  0087               	movwf	7
 15631  055F  0801               	movf	1,w
 15632  0560  00F3               	movwf	??_I2C2_ISR
 15633  0561  0873               	movf	??_I2C2_ISR,w
 15634  0562  00E2               	movwf	_i2c2_trb_count^(0+128)
 15635                           
 15636                           ;i2c2.c: 268: p_i2c2_trb_current = i2c2_object.pTrHead->ptrb_list;
 15637  0563  084B               	movf	(low ((_i2c2_object| 0+1)))^(0+128),w
 15638  0564  0086               	movwf	6
 15639  0565  3001               	movlw	1	; select bank2/3
 15640  0566  0087               	movwf	7
 15641  0567  3001               	movlw	1	; select bank2/3
 15642  0568  3F41               	moviw [1]fsr1
 15643  0569  00F8               	movwf	_p_i2c2_trb_current
 15644                           
 15645                           ;i2c2.c: 270: i2c2_object.pTrHead++;
 15646  056A  3004               	movlw	4
 15647  056B  00F3               	movwf	??_I2C2_ISR
 15648  056C  0873               	movf	??_I2C2_ISR,w
 15649  056D  07CB               	addwf	(low ((_i2c2_object| 0+1)))^(0+128),f
 15650                           
 15651                           ;i2c2.c: 273: if(i2c2_object.pTrHead == (i2c2_tr_queue + 1))
 15652  056E  084B               	movf	(low ((_i2c2_object| 0+1)))^(0+128),w
 15653  056F  3A66               	xorlw	(low ((_i2c2_tr_queue| (0+256)+4)))& (0+255)
 15654  0570  1D03               	skipz
 15655  0571  2D76               	goto	i1l4761
 15656                           
 15657                           ;i2c2.c: 274: {
 15658                           ;i2c2.c: 276: i2c2_object.pTrHead = i2c2_tr_queue;
 15659  0572  3062               	movlw	(low (_i2c2_tr_queue| (0+256)))& (0+255)
 15660  0573  00F3               	movwf	??_I2C2_ISR
 15661  0574  0873               	movf	??_I2C2_ISR,w
 15662  0575  00CB               	movwf	(low ((_i2c2_object| 0+1)))^(0+128)
 15663  0576                     i1l4761:	
 15664                           
 15665                           ;i2c2.c: 277: }
 15666                           ;i2c2.c: 281: i2c2_object.trStatus.s.full = 0;
 15667  0576  104C               	bcf	(_i2c2_object^(0+128)+2),0
 15668                           
 15669                           ;i2c2.c: 284: if(i2c2_object.pTrHead == i2c2_object.pTrTail)
 15670  0577  084B               	movf	(low ((_i2c2_object| 0+1)))^(0+128),w
 15671  0578  064A               	xorwf	_i2c2_object^(0+128),w
 15672  0579  1903               	btfsc	3,2
 15673                           
 15674                           ;i2c2.c: 285: {
 15675                           ;i2c2.c: 287: i2c2_object.trStatus.s.empty = 1;
 15676  057A  14CC               	bsf	(_i2c2_object^(0+128)+2),1
 15677                           
 15678                           ;i2c2.c: 288: }
 15679                           ;i2c2.c: 291: SSP2CON2bits.SEN = 1;
 15680  057B  0024               	movlb	4	; select bank4
 15681  057C  141E               	bsf	30,0	;volatile
 15682                           
 15683                           ;i2c2.c: 294: i2c2_state = S_MASTER_SEND_ADDR;
 15684  057D  3002               	movlw	2
 15685  057E  00F3               	movwf	??_I2C2_ISR
 15686  057F  0873               	movf	??_I2C2_ISR,w
 15687  0580  00F9               	movwf	_i2c2_state
 15688                           
 15689                           ;i2c2.c: 295: }
 15690                           ;i2c2.c: 297: break;
 15691  0581  0008               	return
 15692  0582                     i1l293:	
 15693                           ;i2c2.c: 299: case S_MASTER_RESTART:
 15694                           
 15695                           
 15696                           ;i2c2.c: 304: SSP2CON2bits.RSEN = 1;
 15697  0582  0024               	movlb	4	; select bank4
 15698  0583  149E               	bsf	30,1	;volatile
 15699                           
 15700                           ;i2c2.c: 307: i2c2_state = S_MASTER_SEND_ADDR;
 15701  0584  3002               	movlw	2
 15702  0585  00F3               	movwf	??_I2C2_ISR
 15703  0586  0873               	movf	??_I2C2_ISR,w
 15704  0587  00F9               	movwf	_i2c2_state
 15705                           
 15706                           ;i2c2.c: 309: break;
 15707  0588  0008               	return
 15708  0589                     i1l294:	
 15709                           ;i2c2.c: 311: case S_MASTER_SEND_ADDR_10BIT_LSB:
 15710                           
 15711                           
 15712                           ;i2c2.c: 313: if(SSP2CON2bits.ACKSTAT)
 15713  0589  0024               	movlb	4	; select bank4
 15714  058A  1F1E               	btfss	30,6	;volatile
 15715  058B  2D95               	goto	i1l4773
 15716                           
 15717                           ;i2c2.c: 314: {
 15718                           ;i2c2.c: 315: i2c2_object.i2cErrors++;
 15719  058C  3001               	movlw	1
 15720  058D  00F3               	movwf	??_I2C2_ISR
 15721  058E  0873               	movf	??_I2C2_ISR,w
 15722  058F  0021               	movlb	1	; select bank1
 15723  0590  07CE               	addwf	(_i2c2_object^(0+128)+4),f
 15724                           
 15725                           ;i2c2.c: 316: I2C2_Stop(I2C2_MESSAGE_ADDRESS_NO_ACK);
 15726  0591  3004               	movlw	4
 15727  0592  3195  2557         	fcall	_I2C2_Stop
 15728                           
 15729                           ;i2c2.c: 317: }
 15730  0594  0008               	return
 15731  0595                     i1l4773:	
 15732                           
 15733                           ;i2c2.c: 318: else
 15734                           ;i2c2.c: 319: {
 15735                           ;i2c2.c: 321: SSP2BUF = (i2c_address >> 1) & 0x00FF;
 15736  0595  087B               	movf	I2C2_ISR@i2c_address+1,w
 15737  0596  00F4               	movwf	??_I2C2_ISR+1
 15738  0597  087A               	movf	I2C2_ISR@i2c_address,w
 15739  0598  00F3               	movwf	??_I2C2_ISR
 15740  0599  36F4               	lsrf	??_I2C2_ISR+1,f
 15741  059A  0CF3               	rrf	??_I2C2_ISR,f
 15742  059B  0873               	movf	??_I2C2_ISR,w
 15743  059C  0024               	movlb	4	; select bank4
 15744  059D  0099               	movwf	25	;volatile
 15745                           
 15746                           ;i2c2.c: 324: if(i2c_address & 0x01)
 15747  059E  1C7A               	btfss	I2C2_ISR@i2c_address,0
 15748  059F  2DA5               	goto	i1l4779
 15749                           
 15750                           ;i2c2.c: 325: {
 15751                           ;i2c2.c: 328: i2c2_state = S_MASTER_10BIT_RESTART;
 15752  05A0  300B               	movlw	11
 15753  05A1  00F3               	movwf	??_I2C2_ISR
 15754  05A2  0873               	movf	??_I2C2_ISR,w
 15755  05A3  00F9               	movwf	_i2c2_state
 15756                           
 15757                           ;i2c2.c: 329: }
 15758  05A4  0008               	return
 15759  05A5                     i1l4779:	
 15760                           
 15761                           ;i2c2.c: 330: else
 15762                           ;i2c2.c: 331: {
 15763                           ;i2c2.c: 333: i2c2_state = S_MASTER_SEND_DATA;
 15764  05A5  3003               	movlw	3
 15765  05A6  00F3               	movwf	??_I2C2_ISR
 15766  05A7  0873               	movf	??_I2C2_ISR,w
 15767  05A8  00F9               	movwf	_i2c2_state
 15768                           
 15769                           ;i2c2.c: 334: }
 15770                           ;i2c2.c: 335: }
 15771                           ;i2c2.c: 337: break;
 15772  05A9  0008               	return
 15773  05AA                     i1l299:	
 15774                           ;i2c2.c: 339: case S_MASTER_10BIT_RESTART:
 15775                           
 15776                           
 15777                           ;i2c2.c: 341: if(SSP2CON2bits.ACKSTAT)
 15778  05AA  0024               	movlb	4	; select bank4
 15779  05AB  1F1E               	btfss	30,6	;volatile
 15780  05AC  2DB6               	goto	i1l300
 15781                           
 15782                           ;i2c2.c: 342: {
 15783                           ;i2c2.c: 343: i2c2_object.i2cErrors++;
 15784  05AD  3001               	movlw	1
 15785  05AE  00F3               	movwf	??_I2C2_ISR
 15786  05AF  0873               	movf	??_I2C2_ISR,w
 15787  05B0  0021               	movlb	1	; select bank1
 15788  05B1  07CE               	addwf	(_i2c2_object^(0+128)+4),f
 15789                           
 15790                           ;i2c2.c: 344: I2C2_Stop(I2C2_MESSAGE_ADDRESS_NO_ACK);
 15791  05B2  3004               	movlw	4
 15792  05B3  3195  2557         	fcall	_I2C2_Stop
 15793                           
 15794                           ;i2c2.c: 345: }
 15795  05B5  0008               	return
 15796  05B6                     i1l300:	
 15797                           
 15798                           ;i2c2.c: 346: else
 15799                           ;i2c2.c: 347: {
 15800                           ;i2c2.c: 350: SSP2CON2bits.RSEN = 1;
 15801  05B6  149E               	bsf	30,1	;volatile
 15802                           
 15803                           ;i2c2.c: 354: i2c_address = 0x00F0 | ((i2c_address >> 8) & 0x0006);
 15804  05B7  087B               	movf	I2C2_ISR@i2c_address+1,w
 15805  05B8  00F4               	movwf	??_I2C2_ISR+1
 15806  05B9  087A               	movf	I2C2_ISR@i2c_address,w
 15807  05BA  00F3               	movwf	??_I2C2_ISR
 15808  05BB  0874               	movf	??_I2C2_ISR+1,w
 15809  05BC  00F3               	movwf	??_I2C2_ISR
 15810  05BD  01F4               	clrf	??_I2C2_ISR+1
 15811  05BE  3006               	movlw	6
 15812  05BF  0573               	andwf	??_I2C2_ISR,w
 15813  05C0  00F5               	movwf	??_I2C2_ISR+2
 15814  05C1  3000               	movlw	0
 15815  05C2  0574               	andwf	??_I2C2_ISR+1,w
 15816  05C3  00F6               	movwf	??_I2C2_ISR+3
 15817  05C4  30F0               	movlw	240
 15818  05C5  0475               	iorwf	??_I2C2_ISR+2,w
 15819  05C6  00FA               	movwf	I2C2_ISR@i2c_address
 15820  05C7  3000               	movlw	0
 15821  05C8  0476               	iorwf	??_I2C2_ISR+3,w
 15822  05C9  00FB               	movwf	I2C2_ISR@i2c_address+1
 15823                           
 15824                           ;i2c2.c: 357: i2c_address |= 0x0001;
 15825  05CA  147A               	bsf	I2C2_ISR@i2c_address,0
 15826                           
 15827                           ;i2c2.c: 360: i2c_10bit_address_restart = 1;
 15828  05CB  0021               	movlb	1	; select bank1
 15829  05CC  01E0               	clrf	I2C2_ISR@i2c_10bit_address_restart^(0+128)
 15830  05CD  0AE0               	incf	I2C2_ISR@i2c_10bit_address_restart^(0+128),f
 15831                           
 15832                           ;i2c2.c: 363: i2c2_state = S_MASTER_SEND_ADDR;
 15833  05CE  3002               	movlw	2
 15834  05CF  00F3               	movwf	??_I2C2_ISR
 15835  05D0  0873               	movf	??_I2C2_ISR,w
 15836  05D1  00F9               	movwf	_i2c2_state
 15837                           
 15838                           ;i2c2.c: 364: }
 15839                           ;i2c2.c: 366: break;
 15840  05D2  0008               	return
 15841  05D3                     i1l4793:	
 15842                           ;i2c2.c: 368: case S_MASTER_SEND_ADDR:
 15843                           
 15844                           
 15845                           ;i2c2.c: 381: if(i2c_10bit_address_restart != 1)
 15846  05D3  0021               	movlb	1	; select bank1
 15847  05D4  0360               	decf	I2C2_ISR@i2c_10bit_address_restart^(0+128),w
 15848  05D5  1903               	btfsc	3,2
 15849  05D6  2DEF               	goto	i1l4811
 15850                           
 15851                           ;i2c2.c: 382: {
 15852                           ;i2c2.c: 384: i2c_address = p_i2c2_trb_current->address;
 15853  05D7  0878               	movf	_p_i2c2_trb_current,w
 15854  05D8  0086               	movwf	6
 15855  05D9  3001               	movlw	1	; select bank2/3
 15856  05DA  0087               	movwf	7
 15857  05DB  3F40               	moviw [0]fsr1
 15858  05DC  00FA               	movwf	I2C2_ISR@i2c_address
 15859  05DD  3F41               	moviw [1]fsr1
 15860  05DE  00FB               	movwf	I2C2_ISR@i2c_address+1
 15861                           
 15862                           ;i2c2.c: 385: pi2c_buf_ptr = p_i2c2_trb_current->pbuffer;
 15863  05DF  0878               	movf	_p_i2c2_trb_current,w
 15864  05E0  3E03               	addlw	3
 15865  05E1  0086               	movwf	6
 15866  05E2  3001               	movlw	1	; select bank2/3
 15867  05E3  0087               	movwf	7
 15868  05E4  3F40               	moviw [0]fsr1
 15869  05E5  00D5               	movwf	I2C2_ISR@pi2c_buf_ptr^(0+128)
 15870  05E6  3F41               	moviw [1]fsr1
 15871  05E7  00D6               	movwf	(I2C2_ISR@pi2c_buf_ptr+1)^(0+128)
 15872                           
 15873                           ;i2c2.c: 386: i2c_bytes_left = p_i2c2_trb_current->length;
 15874  05E8  0878               	movf	_p_i2c2_trb_current,w
 15875  05E9  0086               	movwf	6
 15876  05EA  3001               	movlw	1	; select bank2/3
 15877  05EB  0087               	movwf	7
 15878  05EC  3001               	movlw	1	; select bank2/3
 15879  05ED  3F42               	moviw [2]fsr1
 15880  05EE  00E1               	movwf	I2C2_ISR@i2c_bytes_left^(0+128)
 15881  05EF                     i1l4811:	
 15882                           ;i2c2.c: 407: }
 15883                           ;i2c2.c: 408: }
 15884                           
 15885                           ;i2c2.c: 406: i2c_10bit_address_restart = 0;
 15886                           
 15887                           ;i2c2.c: 404: i2c2_state = S_MASTER_ACK_ADDR;
 15888                           
 15889                           ;i2c2.c: 400: else
 15890                           ;i2c2.c: 401: {
 15891                           ;i2c2.c: 403: SSP2BUF = i2c_address;
 15892                           
 15893                           ;i2c2.c: 399: }
 15894                           
 15895                           ;i2c2.c: 398: i2c2_state = S_MASTER_SEND_ADDR_10BIT_LSB;
 15896                           
 15897                           ;i2c2.c: 393: {
 15898                           ;i2c2.c: 397: SSP2BUF = 0xF0 | ((i2c_address >> 8) & 0x0006);
 15899                           
 15900                           ;i2c2.c: 391: {
 15901                           ;i2c2.c: 392: if (0 == i2c_10bit_address_restart)
 15902                           
 15903                           ;i2c2.c: 387: }
 15904                           ;i2c2.c: 390: if(!1 && (0x0 != i2c_address))
 15905                           
 15906                           
 15907                           ;i2c2.c: 409: else
 15908                           ;i2c2.c: 410: {
 15909                           ;i2c2.c: 412: SSP2BUF = i2c_address;
 15910  05EF  087A               	movf	I2C2_ISR@i2c_address,w
 15911  05F0  0024               	movlb	4	; select bank4
 15912  05F1  0099               	movwf	25	;volatile
 15913                           
 15914                           ;i2c2.c: 413: if(i2c_address & 0x01)
 15915  05F2  1C7A               	btfss	I2C2_ISR@i2c_address,0
 15916  05F3  2DF9               	goto	i1l4817
 15917                           
 15918                           ;i2c2.c: 414: {
 15919                           ;i2c2.c: 416: i2c2_state = S_MASTER_ACK_ADDR;
 15920  05F4  3005               	movlw	5
 15921  05F5  00F3               	movwf	??_I2C2_ISR
 15922  05F6  0873               	movf	??_I2C2_ISR,w
 15923  05F7  00F9               	movwf	_i2c2_state
 15924                           
 15925                           ;i2c2.c: 417: }
 15926  05F8  0008               	return
 15927  05F9                     i1l4817:	
 15928                           
 15929                           ;i2c2.c: 418: else
 15930                           ;i2c2.c: 419: {
 15931                           ;i2c2.c: 421: i2c2_state = S_MASTER_SEND_DATA;
 15932  05F9  3003               	movlw	3
 15933  05FA  00F3               	movwf	??_I2C2_ISR
 15934  05FB  0873               	movf	??_I2C2_ISR,w
 15935  05FC  00F9               	movwf	_i2c2_state
 15936                           
 15937                           ;i2c2.c: 422: }
 15938                           ;i2c2.c: 423: }
 15939                           ;i2c2.c: 424: break;
 15940  05FD  0008               	return
 15941  05FE                     i1l310:	
 15942                           ;i2c2.c: 426: case S_MASTER_SEND_DATA:
 15943                           
 15944                           
 15945                           ;i2c2.c: 429: if(SSP2CON2bits.ACKSTAT)
 15946  05FE  0024               	movlb	4	; select bank4
 15947  05FF  1F1E               	btfss	30,6	;volatile
 15948  0600  2E0C               	goto	i1l4825
 15949                           
 15950                           ;i2c2.c: 430: {
 15951                           ;i2c2.c: 432: i2c2_object.i2cErrors++;
 15952  0601  3001               	movlw	1
 15953  0602  00F3               	movwf	??_I2C2_ISR
 15954  0603  0873               	movf	??_I2C2_ISR,w
 15955  0604  0021               	movlb	1	; select bank1
 15956  0605  07CE               	addwf	(_i2c2_object^(0+128)+4),f
 15957                           
 15958                           ;i2c2.c: 435: SSP2CON2bits.ACKSTAT = 0;
 15959  0606  0024               	movlb	4	; select bank4
 15960  0607  131E               	bcf	30,6	;volatile
 15961                           
 15962                           ;i2c2.c: 438: I2C2_Stop(I2C2_DATA_NO_ACK);
 15963  0608  3005               	movlw	5
 15964  0609  3195  2557         	fcall	_I2C2_Stop
 15965                           
 15966                           ;i2c2.c: 440: }
 15967  060B  0008               	return
 15968  060C                     i1l4825:	
 15969                           
 15970                           ;i2c2.c: 441: else
 15971                           ;i2c2.c: 442: {
 15972                           ;i2c2.c: 444: if(i2c_bytes_left-- == 0U)
 15973  060C  3001               	movlw	1
 15974  060D  0021               	movlb	1	; select bank1
 15975  060E  02E1               	subwf	I2C2_ISR@i2c_bytes_left^(0+128),f
 15976  060F  0A61               	incf	I2C2_ISR@i2c_bytes_left^(0+128),w
 15977  0610  1D03               	btfss	3,2
 15978  0611  2E25               	goto	i1l4833
 15979                           
 15980                           ;i2c2.c: 445: {
 15981                           ;i2c2.c: 449: p_i2c2_trb_current++;
 15982  0612  3005               	movlw	5
 15983  0613  00F3               	movwf	??_I2C2_ISR
 15984  0614  0873               	movf	??_I2C2_ISR,w
 15985  0615  07F8               	addwf	_p_i2c2_trb_current,f
 15986                           
 15987                           ;i2c2.c: 452: if(--i2c2_trb_count == 0)
 15988  0616  3001               	movlw	1
 15989  0617  02E2               	subwf	_i2c2_trb_count^(0+128),f
 15990  0618  1D03               	btfss	3,2
 15991  0619  2E1E               	goto	i1l314
 15992                           
 15993                           ;i2c2.c: 453: {
 15994                           ;i2c2.c: 454: I2C2_Stop(I2C2_MESSAGE_COMPLETE);
 15995  061A  3000               	movlw	0
 15996  061B  3195  2557         	fcall	_I2C2_Stop
 15997                           
 15998                           ;i2c2.c: 455: }
 15999  061D  0008               	return
 16000  061E                     i1l314:	
 16001                           
 16002                           ;i2c2.c: 456: else
 16003                           ;i2c2.c: 457: {
 16004                           ;i2c2.c: 464: SSP2CON2bits.RSEN = 1;
 16005  061E  0024               	movlb	4	; select bank4
 16006  061F  149E               	bsf	30,1	;volatile
 16007                           
 16008                           ;i2c2.c: 467: i2c2_state = S_MASTER_SEND_ADDR;
 16009  0620  3002               	movlw	2
 16010  0621  00F3               	movwf	??_I2C2_ISR
 16011  0622  0873               	movf	??_I2C2_ISR,w
 16012  0623  00F9               	movwf	_i2c2_state
 16013                           
 16014                           ;i2c2.c: 469: }
 16015                           ;i2c2.c: 470: }
 16016  0624  0008               	return
 16017  0625                     i1l4833:	
 16018                           
 16019                           ;i2c2.c: 471: else
 16020                           ;i2c2.c: 472: {
 16021                           ;i2c2.c: 474: SSP2BUF = *pi2c_buf_ptr++;
 16022  0625  0021               	movlb	1	; select bank1
 16023  0626  0855               	movf	I2C2_ISR@pi2c_buf_ptr^(0+128),w
 16024  0627  0086               	movwf	6
 16025  0628  0856               	movf	(I2C2_ISR@pi2c_buf_ptr+1)^(0+128),w
 16026  0629  0087               	movwf	7
 16027  062A  0801               	movf	1,w
 16028  062B  0024               	movlb	4	; select bank4
 16029  062C  0099               	movwf	25	;volatile
 16030  062D  3001               	movlw	1
 16031  062E  0021               	movlb	1	; select bank1
 16032  062F  07D5               	addwf	I2C2_ISR@pi2c_buf_ptr^(0+128),f
 16033  0630  3000               	movlw	0
 16034  0631  3DD6               	addwfc	(I2C2_ISR@pi2c_buf_ptr+1)^(0+128),f
 16035                           
 16036                           ;i2c2.c: 475: }
 16037                           ;i2c2.c: 476: }
 16038                           ;i2c2.c: 477: break;
 16039  0632  0008               	return
 16040  0633                     i1l317:	
 16041                           ;i2c2.c: 479: case S_MASTER_ACK_ADDR:
 16042                           
 16043                           
 16044                           ;i2c2.c: 482: if(SSP2CON2bits.ACKSTAT)
 16045  0633  0024               	movlb	4	; select bank4
 16046  0634  1F1E               	btfss	30,6	;volatile
 16047  0635  2E41               	goto	i1l318
 16048                           
 16049                           ;i2c2.c: 483: {
 16050                           ;i2c2.c: 486: i2c2_object.i2cErrors++;
 16051  0636  3001               	movlw	1
 16052  0637  00F3               	movwf	??_I2C2_ISR
 16053  0638  0873               	movf	??_I2C2_ISR,w
 16054  0639  0021               	movlb	1	; select bank1
 16055  063A  07CE               	addwf	(_i2c2_object^(0+128)+4),f
 16056                           
 16057                           ;i2c2.c: 489: I2C2_Stop(I2C2_MESSAGE_ADDRESS_NO_ACK);
 16058  063B  3004               	movlw	4
 16059  063C  3195  2557         	fcall	_I2C2_Stop
 16060                           
 16061                           ;i2c2.c: 492: SSP2CON2bits.ACKSTAT = 0;
 16062  063E  0024               	movlb	4	; select bank4
 16063  063F  131E               	bcf	30,6	;volatile
 16064                           
 16065                           ;i2c2.c: 493: }
 16066  0640  0008               	return
 16067  0641                     i1l318:	
 16068                           
 16069                           ;i2c2.c: 494: else
 16070                           ;i2c2.c: 495: {
 16071                           ;i2c2.c: 496: SSP2CON2bits.RCEN = 1;
 16072  0641  159E               	bsf	30,3	;volatile
 16073                           
 16074                           ;i2c2.c: 497: i2c2_state = S_MASTER_ACK_RCV_DATA;
 16075  0642  3008               	movlw	8
 16076  0643  00F3               	movwf	??_I2C2_ISR
 16077  0644  0873               	movf	??_I2C2_ISR,w
 16078  0645  00F9               	movwf	_i2c2_state
 16079                           
 16080                           ;i2c2.c: 498: }
 16081                           ;i2c2.c: 499: break;
 16082  0646  0008               	return
 16083  0647                     i1l4845:	
 16084                           ;i2c2.c: 501: case S_MASTER_RCV_DATA:
 16085                           
 16086                           
 16087                           ;i2c2.c: 506: i2c2_state = S_MASTER_ACK_RCV_DATA;
 16088  0647  3008               	movlw	8
 16089  0648  00F3               	movwf	??_I2C2_ISR
 16090  0649  0873               	movf	??_I2C2_ISR,w
 16091  064A  00F9               	movwf	_i2c2_state
 16092                           
 16093                           ;i2c2.c: 509: SSP2CON2bits.RCEN = 1;
 16094  064B  0024               	movlb	4	; select bank4
 16095  064C  159E               	bsf	30,3	;volatile
 16096                           
 16097                           ;i2c2.c: 511: break;
 16098  064D  0008               	return
 16099  064E                     i1l4849:	
 16100                           ;i2c2.c: 513: case S_MASTER_ACK_RCV_DATA:
 16101                           
 16102                           
 16103                           ;i2c2.c: 516: *pi2c_buf_ptr++ = SSP2BUF;
 16104  064E  0021               	movlb	1	; select bank1
 16105  064F  0855               	movf	I2C2_ISR@pi2c_buf_ptr^(0+128),w
 16106  0650  0086               	movwf	6
 16107  0651  0856               	movf	(I2C2_ISR@pi2c_buf_ptr+1)^(0+128),w
 16108  0652  0087               	movwf	7
 16109  0653  0024               	movlb	4	; select bank4
 16110  0654  0819               	movf	25,w	;volatile
 16111  0655  0081               	movwf	1
 16112  0656  3001               	movlw	1
 16113  0657  0021               	movlb	1	; select bank1
 16114  0658  07D5               	addwf	I2C2_ISR@pi2c_buf_ptr^(0+128),f
 16115  0659  3000               	movlw	0
 16116  065A  3DD6               	addwfc	(I2C2_ISR@pi2c_buf_ptr+1)^(0+128),f
 16117                           
 16118                           ;i2c2.c: 519: if(--i2c_bytes_left)
 16119  065B  3001               	movlw	1
 16120  065C  02E1               	subwf	I2C2_ISR@i2c_bytes_left^(0+128),f
 16121  065D  1903               	btfsc	3,2
 16122  065E  2E66               	goto	i1l322
 16123                           
 16124                           ;i2c2.c: 520: {
 16125                           ;i2c2.c: 526: SSP2CON2bits.ACKDT = 0;
 16126  065F  0024               	movlb	4	; select bank4
 16127  0660  129E               	bcf	30,5	;volatile
 16128                           
 16129                           ;i2c2.c: 529: i2c2_state = S_MASTER_RCV_DATA;
 16130  0661  3006               	movlw	6
 16131  0662  00F3               	movwf	??_I2C2_ISR
 16132  0663  0873               	movf	??_I2C2_ISR,w
 16133  0664  00F9               	movwf	_i2c2_state
 16134                           
 16135                           ;i2c2.c: 530: }
 16136  0665  2E6A               	goto	i1l4861
 16137  0666                     i1l322:	
 16138                           
 16139                           ;i2c2.c: 531: else
 16140                           ;i2c2.c: 532: {
 16141                           ;i2c2.c: 536: SSP2CON2bits.ACKDT = 1;
 16142  0666  0024               	movlb	4	; select bank4
 16143  0667  169E               	bsf	30,5	;volatile
 16144                           
 16145                           ;i2c2.c: 538: I2C2_FunctionComplete();
 16146  0668  3193  23AA         	fcall	_I2C2_FunctionComplete
 16147  066A                     i1l4861:	
 16148                           
 16149                           ;i2c2.c: 539: }
 16150                           ;i2c2.c: 542: SSP2CON2bits.ACKEN = 1;
 16151  066A  0024               	movlb	4	; select bank4
 16152  066B  161E               	bsf	30,4	;volatile
 16153                           
 16154                           ;i2c2.c: 543: break;
 16155  066C  0008               	return
 16156  066D                     i1l4863:	
 16157                           ;i2c2.c: 545: case S_MASTER_RCV_STOP:
 16158                           
 16159                           
 16160                           ;i2c2.c: 546: case S_MASTER_SEND_STOP:
 16161                           ;i2c2.c: 549: I2C2_Stop(I2C2_MESSAGE_COMPLETE);
 16162  066D  3000               	movlw	0
 16163  066E  3195  2557         	fcall	_I2C2_Stop
 16164                           
 16165                           ;i2c2.c: 550: break;
 16166  0670  0008               	return
 16167  0671                     i1l4865:	
 16168                           ;i2c2.c: 552: default:
 16169                           
 16170                           
 16171                           ;i2c2.c: 556: i2c2_object.i2cErrors++;
 16172  0671  3001               	movlw	1
 16173  0672  00F3               	movwf	??_I2C2_ISR
 16174  0673  0873               	movf	??_I2C2_ISR,w
 16175  0674  0021               	movlb	1	; select bank1
 16176  0675  07CE               	addwf	(_i2c2_object^(0+128)+4),f
 16177                           
 16178                           ;i2c2.c: 557: I2C2_Stop(I2C2_LOST_STATE);
 16179  0676  3006               	movlw	6
 16180  0677  3195  2557         	fcall	_I2C2_Stop
 16181                           
 16182                           ;i2c2.c: 560: }
 16183                           
 16184                           ;i2c2.c: 558: break;
 16185  0679  0008               	return
 16186  067A                     i1l4871:	
 16187  067A  0879               	movf	_i2c2_state,w
 16188                           
 16189                           ; Switch size 1, requested type "space"
 16190                           ; Number of cases is 11, Range of values is 0 to 11
 16191                           ; switch strategies available:
 16192                           ; Name         Instructions Cycles
 16193                           ; direct_byte           30     6 (fixed)
 16194                           ; simple_byte           34    18 (average)
 16195                           ; jumptable            260     6 (fixed)
 16196                           ;	Chosen strategy is direct_byte
 16197  067B  0084               	movwf	4
 16198  067C  300C               	movlw	12
 16199  067D  0204               	subwf	4,w
 16200  067E  1803               	skipnc
 16201  067F  2E71               	goto	i1l4865
 16202  0680  3190               	movlp	high i1S7053
 16203  0681  3504               	lslf	4,w
 16204  0682  3E00               	addlw	low i1S7053
 16205  0683  0082               	movwf	2
 16206  0684  0008               	return
 16207  0685                     __end_of_I2C2_ISR:	
 16208                           
 16209                           	psect	swtext1
 16210  1000                     __pswtext1:	
 16211  1000                     i1S7053:	
 16212  1000  3185  2D54         	ljmp	i1l288
 16213  1002  3185  2D82         	ljmp	i1l293
 16214  1004  3185  2DD3         	ljmp	i1l4793
 16215  1006  3185  2DFE         	ljmp	i1l310
 16216  1008  3186  2E6D         	ljmp	i1l4863
 16217  100A  3186  2E33         	ljmp	i1l317
 16218  100C  3186  2E47         	ljmp	i1l4845
 16219  100E  3186  2E6D         	ljmp	i1l4863
 16220  1010  3186  2E4E         	ljmp	i1l4849
 16221  1012  3186  2E71         	ljmp	i1l4865
 16222  1014  3185  2D89         	ljmp	i1l294
 16223  1016  3185  2DAA         	ljmp	i1l299
 16224                           
 16225                           	psect	text95
 16226  1557                     __ptext95:	
 16227 ;; *************** function _I2C2_Stop *****************
 16228 ;; Defined at:
 16229 ;;		line 581 in file "mcc_generated_files/i2c2.c"
 16230 ;; Parameters:    Size  Location     Type
 16231 ;;  completion_c    1    wreg     enum E2993
 16232 ;; Auto vars:     Size  Location     Type
 16233 ;;  completion_c    1    2[COMMON] enum E2993
 16234 ;; Return value:  Size  Location     Type
 16235 ;;                  1    wreg      void 
 16236 ;; Registers used:
 16237 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 16238 ;; Tracked objects:
 16239 ;;		On entry : 0/0
 16240 ;;		On exit  : 0/0
 16241 ;;		Unchanged: 0/0
 16242 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16243 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16244 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16245 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16246 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16247 ;;Total ram usage:        3 bytes
 16248 ;; Hardware stack levels used:    1
 16249 ;; This function calls:
 16250 ;;		Nothing
 16251 ;; This function is called by:
 16252 ;;		_I2C2_ISR
 16253 ;; This function uses a non-reentrant model
 16254 ;;
 16255                           
 16256                           
 16257                           ;psect for function _I2C2_Stop
 16258  1557                     _I2C2_Stop:	
 16259                           
 16260                           ;incstack = 0
 16261                           ; Regs used in _I2C2_Stop: [wreg+fsr1l+fsr1h+status,2+status,0]
 16262                           ;I2C2_Stop@completion_code stored from wreg
 16263  1557  00F2               	movwf	I2C2_Stop@completion_code
 16264                           
 16265                           ;i2c2.c: 584: SSP2CON2bits.PEN = 1;
 16266  1558  0024               	movlb	4	; select bank4
 16267  1559  151E               	bsf	30,2	;volatile
 16268                           
 16269                           ;i2c2.c: 587: if (p_i2c2_current->pTrFlag != (0))
 16270  155A  0877               	movf	_p_i2c2_current,w
 16271  155B  3E02               	addlw	2
 16272  155C  0086               	movwf	6
 16273  155D  3001               	movlw	1	; select bank2/3
 16274  155E  0087               	movwf	7
 16275  155F  0016               	moviw fsr1++
 16276  1560  0401               	iorwf	1,w
 16277  1561  1903               	btfsc	3,2
 16278  1562  2D72               	goto	i1l4307
 16279                           
 16280                           ;i2c2.c: 588: {
 16281                           ;i2c2.c: 590: *(p_i2c2_current->pTrFlag) = completion_code;
 16282  1563  0877               	movf	_p_i2c2_current,w
 16283  1564  3E02               	addlw	2
 16284  1565  0086               	movwf	6
 16285  1566  3001               	movlw	1	; select bank2/3
 16286  1567  0087               	movwf	7
 16287  1568  3F40               	moviw [0]fsr1
 16288  1569  00F0               	movwf	??_I2C2_Stop
 16289  156A  3F41               	moviw [1]fsr1
 16290  156B  00F1               	movwf	??_I2C2_Stop+1
 16291  156C  0870               	movf	??_I2C2_Stop,w
 16292  156D  0086               	movwf	6
 16293  156E  0871               	movf	??_I2C2_Stop+1,w
 16294  156F  0087               	movwf	7
 16295  1570  0872               	movf	I2C2_Stop@completion_code,w
 16296  1571  0081               	movwf	1
 16297  1572                     i1l4307:	
 16298                           
 16299                           ;i2c2.c: 591: }
 16300                           ;i2c2.c: 594: i2c2_state = S_MASTER_IDLE;
 16301  1572  01F9               	clrf	_i2c2_state
 16302  1573  0008               	return
 16303  1574                     __end_of_I2C2_Stop:	
 16304                           
 16305                           	psect	text96
 16306  13AA                     __ptext96:	
 16307 ;; *************** function _I2C2_FunctionComplete *****************
 16308 ;; Defined at:
 16309 ;;		line 563 in file "mcc_generated_files/i2c2.c"
 16310 ;; Parameters:    Size  Location     Type
 16311 ;;		None
 16312 ;; Auto vars:     Size  Location     Type
 16313 ;;		None
 16314 ;; Return value:  Size  Location     Type
 16315 ;;                  1    wreg      void 
 16316 ;; Registers used:
 16317 ;;		wreg, status,2, status,0
 16318 ;; Tracked objects:
 16319 ;;		On entry : 0/0
 16320 ;;		On exit  : 0/0
 16321 ;;		Unchanged: 0/0
 16322 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16323 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16324 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16325 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16326 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16327 ;;Total ram usage:        1 bytes
 16328 ;; Hardware stack levels used:    1
 16329 ;; This function calls:
 16330 ;;		Nothing
 16331 ;; This function is called by:
 16332 ;;		_I2C2_ISR
 16333 ;; This function uses a non-reentrant model
 16334 ;;
 16335                           
 16336                           
 16337                           ;psect for function _I2C2_FunctionComplete
 16338  13AA                     _I2C2_FunctionComplete:	
 16339                           
 16340                           ;i2c2.c: 567: p_i2c2_trb_current++;
 16341                           
 16342                           ;incstack = 0
 16343                           ; Regs used in _I2C2_FunctionComplete: [wreg+status,2+status,0]
 16344  13AA  3005               	movlw	5
 16345  13AB  00F0               	movwf	??_I2C2_FunctionComplete
 16346  13AC  0870               	movf	??_I2C2_FunctionComplete,w
 16347  13AD  07F8               	addwf	_p_i2c2_trb_current,f
 16348                           
 16349                           ;i2c2.c: 570: if(--i2c2_trb_count == 0)
 16350  13AE  3001               	movlw	1
 16351  13AF  0021               	movlb	1	; select bank1
 16352  13B0  02E2               	subwf	_i2c2_trb_count^(0+128),f
 16353  13B1  1D03               	btfss	3,2
 16354  13B2  2BB8               	goto	i1l329
 16355                           
 16356                           ;i2c2.c: 571: {
 16357                           ;i2c2.c: 572: i2c2_state = S_MASTER_SEND_STOP;
 16358  13B3  3004               	movlw	4
 16359  13B4  00F0               	movwf	??_I2C2_FunctionComplete
 16360  13B5  0870               	movf	??_I2C2_FunctionComplete,w
 16361  13B6  00F9               	movwf	_i2c2_state
 16362                           
 16363                           ;i2c2.c: 573: }
 16364  13B7  0008               	return
 16365  13B8                     i1l329:	
 16366                           
 16367                           ;i2c2.c: 574: else
 16368                           ;i2c2.c: 575: {
 16369                           ;i2c2.c: 576: i2c2_state = S_MASTER_RESTART;
 16370  13B8  01F9               	clrf	_i2c2_state
 16371  13B9  0AF9               	incf	_i2c2_state,f
 16372  13BA  0008               	return
 16373  13BB                     __end_of_I2C2_FunctionComplete:	
 16374                           
 16375                           	psect	text97
 16376  12A9                     __ptext97:	
 16377 ;; *************** function _I2C2_BusCollisionISR *****************
 16378 ;; Defined at:
 16379 ;;		line 729 in file "mcc_generated_files/i2c2.c"
 16380 ;; Parameters:    Size  Location     Type
 16381 ;;		None
 16382 ;; Auto vars:     Size  Location     Type
 16383 ;;		None
 16384 ;; Return value:  Size  Location     Type
 16385 ;;                  1    wreg      void 
 16386 ;; Registers used:
 16387 ;;		None
 16388 ;; Tracked objects:
 16389 ;;		On entry : 0/0
 16390 ;;		On exit  : 0/0
 16391 ;;		Unchanged: 0/0
 16392 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16393 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16394 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16395 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16396 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16397 ;;Total ram usage:        0 bytes
 16398 ;; Hardware stack levels used:    1
 16399 ;; This function calls:
 16400 ;;		Nothing
 16401 ;; This function is called by:
 16402 ;;		_INTERRUPT_InterruptManager
 16403 ;; This function uses a non-reentrant model
 16404 ;;
 16405                           
 16406                           
 16407                           ;psect for function _I2C2_BusCollisionISR
 16408  12A9                     _I2C2_BusCollisionISR:	
 16409                           
 16410                           ;incstack = 0
 16411                           ; Regs used in _I2C2_BusCollisionISR: []
 16412  12A9  0008               	return
 16413  12AA                     __end_of_I2C2_BusCollisionISR:	
 16414  007E                     btemp	set	126	;btemp
 16415  007E                     int$flags	set	126
 16416  007E                     wtemp0	set	126


Data Sizes:
    Strings     0
    Constant    38
    Data        7
    BSS         148
    Persistent  6
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      7      14
    BANK0            80     79      79
    BANK1            80     42      70
    BANK2            80      0      78
    BANK3            80     12      60
    BANK4            80      0       0
    BANK5            80      0       0
    BANK6            80      0       0
    BANK7            80      0       0
    BANK8            80      0       0
    BANK9            80      0       0
    BANK10           80      0       0
    BANK11           80      0       0
    BANK12           48      0       0

Pointer List with Targets:

    i2c2_tr_queue.ptrb_list.pbuffer	PTR unsigned char  size(2) Largest target is 24
		 -> I2C_BufferRead@ReadAddr(BANK0[1]), I2C_BufferRead@status(BANK0[1]), I2C_ByteWrite@data(BANK0[2]), I2C_ByteWrite@status(BANK0[1]), 
		 -> data(BANK3[8]), b1(BANK3[24]), HMC5883L_ReadBit@tmp(COMMON[1]), HMC5883L_ReadBits@tmp(BANK0[1]), 
		 -> HMC5883L_WriteBit@tmp(COMMON[1]), HMC5883L_WriteBits@tmp(COMMON[1]), heading(BANK3[8]), HMC5883L_TestConnection@tmp(COMMON[3]), 
		 -> MPU6050_ReadBit@tmp(COMMON[1]), MPU6050_ReadBits@tmp(COMMON[1]), MPU6050_WriteBit@tmp(COMMON[1]), MPU6050_WriteBits@tmp(COMMON[1]), 
		 -> MPU6050_GetRawAccel@tempBuffer(COMMON[6]), MPU6050_GetRawAccelGyro@tmpBuffer(COMMON[14]), 

    i2c2_tr_queue.pTrFlag	PTR enum E2993 size(2) Largest target is 24
		 -> I2C_BufferRead@ReadAddr(BANK0[1]), I2C_BufferRead@status(BANK0[1]), I2C_ByteWrite@data(BANK0[2]), I2C_ByteWrite@status(BANK0[1]), 
		 -> data(BANK3[8]), b1(BANK3[24]), HMC5883L_ReadBit@tmp(COMMON[1]), HMC5883L_ReadBits@tmp(BANK0[1]), 
		 -> HMC5883L_WriteBit@tmp(COMMON[1]), HMC5883L_WriteBits@tmp(COMMON[1]), heading(BANK3[8]), HMC5883L_TestConnection@tmp(COMMON[3]), 
		 -> MPU6050_ReadBit@tmp(COMMON[1]), MPU6050_ReadBits@tmp(COMMON[1]), MPU6050_WriteBit@tmp(COMMON[1]), MPU6050_WriteBits@tmp(COMMON[1]), 
		 -> MPU6050_GetRawAccel@tempBuffer(COMMON[6]), MPU6050_GetRawAccelGyro@tmpBuffer(COMMON[14]), 

    i2c2_tr_queue.ptrb_list	PTR struct . size(1) Largest target is 5
		 -> I2C2_MasterRead@trBlock(BANK2[5]), I2C2_MasterWrite@trBlock(BANK2[5]), 

    I2C_BufferRead@pBuffer	PTR unsigned char  size(2) Largest target is 24
		 -> data(BANK3[8]), b1(BANK3[24]), HMC5883L_ReadBit@tmp(COMMON[1]), HMC5883L_ReadBits@tmp(BANK0[1]), 
		 -> HMC5883L_WriteBit@tmp(COMMON[1]), HMC5883L_WriteBits@tmp(COMMON[1]), heading(BANK3[8]), HMC5883L_TestConnection@tmp(COMMON[3]), 
		 -> MPU6050_ReadBit@tmp(COMMON[1]), MPU6050_ReadBits@tmp(COMMON[1]), MPU6050_WriteBit@tmp(COMMON[1]), MPU6050_WriteBits@tmp(COMMON[1]), 
		 -> MPU6050_GetRawAccel@tempBuffer(COMMON[6]), MPU6050_GetRawAccelGyro@tmpBuffer(COMMON[14]), 

    I2C_ByteWrite@pBuffer	PTR unsigned char  size(1) Largest target is 1
		 -> BMP_readTemperature@tmp(BANK1[1]), BMP_init@t(BANK0[1]), HMC5883L_WriteBit@tmp(COMMON[1]), HMC5883L_WriteBits@tmp(COMMON[1]), 
		 -> HMC5883L_SetMode@tmp(COMMON[1]), HMC5883L_SetGain@tmp(COMMON[1]), HMC5883L_Initialize@tmp(COMMON[1]), MPU6050_WriteBit@tmp(COMMON[1]), 
		 -> MPU6050_WriteBits@tmp(COMMON[1]), 

    Wireless_sendData@payload	PTR unsigned char  size(1) Largest target is 6
		 -> Wireless_packageData@data(BANK1[6]), Wireless_determineTransmitPower@testPayload(BANK0[1]), 

    RF_DataIsReady@channel	PTR unsigned char  size(1) Largest target is 1
		 -> Wireless_checkDataReceived@channel(BANK0[1]), 

    RF_RxPayload@payload	PTR unsigned char  size(1) Largest target is 4
		 -> Wireless_checkDataReceived@data(BANK0[4]), 

    RF_TxPayload@payload	PTR unsigned char  size(1) Largest target is 6
		 -> Wireless_packageData@data(BANK1[6]), Wireless_determineTransmitPower@testPayload(BANK0[1]), 

    RF_WriteRegisterData@buf	PTR unsigned char  size(2) Largest target is 6
		 -> Wireless_packageData@data(BANK1[6]), Wireless_determineTransmitPower@testPayload(BANK0[1]), Wireless_init@TADDR(CODE[5]), 

    RF_ReadRegisterData@buf	PTR unsigned char  size(1) Largest target is 4
		 -> Wireless_checkDataReceived@data(BANK0[4]), Wireless_wake@reg(BANK0[1]), Wireless_sleep@reg(BANK0[1]), Wireless_changeTransmitPower@val(BANK0[1]), 

    SPI_WriteBuffer@bufOut	PTR unsigned char  size(2) Largest target is 6
		 -> Wireless_packageData@data(BANK1[6]), Wireless_determineTransmitPower@testPayload(BANK0[1]), Wireless_init@TADDR(CODE[5]), 

    SPI_WriteReadBuffer@bufOut	PTR unsigned char  size(1) Largest target is 4
		 -> Wireless_checkDataReceived@data(BANK0[4]), Wireless_wake@reg(BANK0[1]), Wireless_sleep@reg(BANK0[1]), Wireless_changeTransmitPower@val(BANK0[1]), 

    SPI_WriteReadBuffer@bufIn	PTR unsigned char  size(1) Largest target is 4
		 -> Wireless_checkDataReceived@data(BANK0[4]), Wireless_wake@reg(BANK0[1]), Wireless_sleep@reg(BANK0[1]), Wireless_changeTransmitPower@val(BANK0[1]), 

    HMC5883L_I2C_BufferRead@pBuffer	PTR unsigned char  size(2) Largest target is 14
		 -> HMC5883L_ReadBit@tmp(COMMON[1]), HMC5883L_ReadBits@tmp(BANK0[1]), HMC5883L_WriteBit@tmp(COMMON[1]), HMC5883L_WriteBits@tmp(COMMON[1]), 
		 -> heading(BANK3[8]), HMC5883L_TestConnection@tmp(COMMON[3]), MPU6050_ReadBit@tmp(COMMON[1]), MPU6050_ReadBits@tmp(COMMON[1]), 
		 -> MPU6050_WriteBit@tmp(COMMON[1]), MPU6050_WriteBits@tmp(COMMON[1]), MPU6050_GetRawAccel@tempBuffer(COMMON[6]), MPU6050_GetRawAccelGyro@tmpBuffer(COMMON[14]), 

    HMC5883L_ReadBits@data	PTR unsigned char  size(1) Largest target is 1
		 -> BMP_readTemperature@tmp(BANK1[1]), HMC5883L_GetHeading@tmp(COMMON[1]), HMC5883L_GetMode@tmp(COMMON[1]), HMC5883L_GetGain@tmp(COMMON[1]), 
		 -> HMC5883L_GetMeasurementBias@tmp(COMMON[1]), HMC5883L_GetDataRate@tmp(COMMON[1]), HMC5883L_GetSampleAveraging@tmp(COMMON[1]), 

    I2C2_MasterWriteTRBBuild@pdata	PTR unsigned char  size(1) Largest target is 2
		 -> I2C_BufferRead@ReadAddr(BANK0[1]), I2C_ByteWrite@data(BANK0[2]), 

    I2C2_MasterWriteTRBBuild@ptrb.pbuffer	PTR unsigned char  size(2) Largest target is 24
		 -> I2C_BufferRead@ReadAddr(BANK0[1]), I2C_BufferRead@status(BANK0[1]), I2C_ByteWrite@data(BANK0[2]), I2C_ByteWrite@status(BANK0[1]), 
		 -> data(BANK3[8]), b1(BANK3[24]), HMC5883L_ReadBit@tmp(COMMON[1]), HMC5883L_ReadBits@tmp(BANK0[1]), 
		 -> HMC5883L_WriteBit@tmp(COMMON[1]), HMC5883L_WriteBits@tmp(COMMON[1]), heading(BANK3[8]), HMC5883L_TestConnection@tmp(COMMON[3]), 
		 -> MPU6050_ReadBit@tmp(COMMON[1]), MPU6050_ReadBits@tmp(COMMON[1]), MPU6050_WriteBit@tmp(COMMON[1]), MPU6050_WriteBits@tmp(COMMON[1]), 
		 -> MPU6050_GetRawAccel@tempBuffer(COMMON[6]), MPU6050_GetRawAccelGyro@tmpBuffer(COMMON[14]), 

    I2C2_MasterWriteTRBBuild@ptrb	PTR struct . size(1) Largest target is 5
		 -> I2C2_MasterWrite@trBlock(BANK2[5]), 

    I2C2_MasterReadTRBBuild@pdata	PTR unsigned char  size(2) Largest target is 24
		 -> data(BANK3[8]), b1(BANK3[24]), HMC5883L_ReadBit@tmp(COMMON[1]), HMC5883L_ReadBits@tmp(BANK0[1]), 
		 -> HMC5883L_WriteBit@tmp(COMMON[1]), HMC5883L_WriteBits@tmp(COMMON[1]), heading(BANK3[8]), HMC5883L_TestConnection@tmp(COMMON[3]), 
		 -> MPU6050_ReadBit@tmp(COMMON[1]), MPU6050_ReadBits@tmp(COMMON[1]), MPU6050_WriteBit@tmp(COMMON[1]), MPU6050_WriteBits@tmp(COMMON[1]), 
		 -> MPU6050_GetRawAccel@tempBuffer(COMMON[6]), MPU6050_GetRawAccelGyro@tmpBuffer(COMMON[14]), 

    I2C2_MasterReadTRBBuild@ptrb.pbuffer	PTR unsigned char  size(2) Largest target is 24
		 -> I2C_BufferRead@ReadAddr(BANK0[1]), I2C_BufferRead@status(BANK0[1]), I2C_ByteWrite@data(BANK0[2]), I2C_ByteWrite@status(BANK0[1]), 
		 -> data(BANK3[8]), b1(BANK3[24]), HMC5883L_ReadBit@tmp(COMMON[1]), HMC5883L_ReadBits@tmp(BANK0[1]), 
		 -> HMC5883L_WriteBit@tmp(COMMON[1]), HMC5883L_WriteBits@tmp(COMMON[1]), heading(BANK3[8]), HMC5883L_TestConnection@tmp(COMMON[3]), 
		 -> MPU6050_ReadBit@tmp(COMMON[1]), MPU6050_ReadBits@tmp(COMMON[1]), MPU6050_WriteBit@tmp(COMMON[1]), MPU6050_WriteBits@tmp(COMMON[1]), 
		 -> MPU6050_GetRawAccel@tempBuffer(COMMON[6]), MPU6050_GetRawAccelGyro@tmpBuffer(COMMON[14]), 

    I2C2_MasterReadTRBBuild@ptrb	PTR struct . size(1) Largest target is 5
		 -> I2C2_MasterRead@trBlock(BANK2[5]), 

    i2c2_object.pTrTail.ptrb_list.pbuffer	PTR unsigned char  size(2) Largest target is 24
		 -> I2C_BufferRead@ReadAddr(BANK0[1]), I2C_BufferRead@status(BANK0[1]), I2C_ByteWrite@data(BANK0[2]), I2C_ByteWrite@status(BANK0[1]), 
		 -> data(BANK3[8]), b1(BANK3[24]), HMC5883L_ReadBit@tmp(COMMON[1]), HMC5883L_ReadBits@tmp(BANK0[1]), 
		 -> HMC5883L_WriteBit@tmp(COMMON[1]), HMC5883L_WriteBits@tmp(COMMON[1]), heading(BANK3[8]), HMC5883L_TestConnection@tmp(COMMON[3]), 
		 -> MPU6050_ReadBit@tmp(COMMON[1]), MPU6050_ReadBits@tmp(COMMON[1]), MPU6050_WriteBit@tmp(COMMON[1]), MPU6050_WriteBits@tmp(COMMON[1]), 
		 -> MPU6050_GetRawAccel@tempBuffer(COMMON[6]), MPU6050_GetRawAccelGyro@tmpBuffer(COMMON[14]), 

    i2c2_object.pTrTail.pTrFlag	PTR enum E2993 size(2) Largest target is 24
		 -> I2C_BufferRead@ReadAddr(BANK0[1]), I2C_BufferRead@status(BANK0[1]), I2C_ByteWrite@data(BANK0[2]), I2C_ByteWrite@status(BANK0[1]), 
		 -> data(BANK3[8]), b1(BANK3[24]), HMC5883L_ReadBit@tmp(COMMON[1]), HMC5883L_ReadBits@tmp(BANK0[1]), 
		 -> HMC5883L_WriteBit@tmp(COMMON[1]), HMC5883L_WriteBits@tmp(COMMON[1]), heading(BANK3[8]), HMC5883L_TestConnection@tmp(COMMON[3]), 
		 -> MPU6050_ReadBit@tmp(COMMON[1]), MPU6050_ReadBits@tmp(COMMON[1]), MPU6050_WriteBit@tmp(COMMON[1]), MPU6050_WriteBits@tmp(COMMON[1]), 
		 -> MPU6050_GetRawAccel@tempBuffer(COMMON[6]), MPU6050_GetRawAccelGyro@tmpBuffer(COMMON[14]), 

    i2c2_object.pTrTail.ptrb_list	PTR struct . size(1) Largest target is 5
		 -> I2C2_MasterRead@trBlock(BANK2[5]), I2C2_MasterWrite@trBlock(BANK2[5]), 

    I2C2_MasterTRBInsert@ptrb_list	PTR struct . size(1) Largest target is 5
		 -> I2C2_MasterRead@trBlock(BANK2[5]), I2C2_MasterWrite@trBlock(BANK2[5]), 

    I2C2_MasterTRBInsert@pflag	PTR enum E2993 size(1) Largest target is 1
		 -> I2C_BufferRead@status(BANK0[1]), I2C_ByteWrite@status(BANK0[1]), 

    I2C2_MasterRead@pflag	PTR enum E2993 size(1) Largest target is 1
		 -> I2C_BufferRead@status(BANK0[1]), 

    I2C2_MasterRead@pdata	PTR unsigned char  size(2) Largest target is 24
		 -> data(BANK3[8]), b1(BANK3[24]), HMC5883L_ReadBit@tmp(COMMON[1]), HMC5883L_ReadBits@tmp(BANK0[1]), 
		 -> HMC5883L_WriteBit@tmp(COMMON[1]), HMC5883L_WriteBits@tmp(COMMON[1]), heading(BANK3[8]), HMC5883L_TestConnection@tmp(COMMON[3]), 
		 -> MPU6050_ReadBit@tmp(COMMON[1]), MPU6050_ReadBits@tmp(COMMON[1]), MPU6050_WriteBit@tmp(COMMON[1]), MPU6050_WriteBits@tmp(COMMON[1]), 
		 -> MPU6050_GetRawAccel@tempBuffer(COMMON[6]), MPU6050_GetRawAccelGyro@tmpBuffer(COMMON[14]), 

    F3105.pbuffer	PTR unsigned char  size(2) Largest target is 24
		 -> I2C_BufferRead@ReadAddr(BANK0[1]), I2C_BufferRead@status(BANK0[1]), I2C_ByteWrite@data(BANK0[2]), I2C_ByteWrite@status(BANK0[1]), 
		 -> data(BANK3[8]), b1(BANK3[24]), HMC5883L_ReadBit@tmp(COMMON[1]), HMC5883L_ReadBits@tmp(BANK0[1]), 
		 -> HMC5883L_WriteBit@tmp(COMMON[1]), HMC5883L_WriteBits@tmp(COMMON[1]), heading(BANK3[8]), HMC5883L_TestConnection@tmp(COMMON[3]), 
		 -> MPU6050_ReadBit@tmp(COMMON[1]), MPU6050_ReadBits@tmp(COMMON[1]), MPU6050_WriteBit@tmp(COMMON[1]), MPU6050_WriteBits@tmp(COMMON[1]), 
		 -> MPU6050_GetRawAccel@tempBuffer(COMMON[6]), MPU6050_GetRawAccelGyro@tmpBuffer(COMMON[14]), 

    I2C2_MasterWrite@pflag	PTR enum E2993 size(1) Largest target is 1
		 -> I2C_BufferRead@status(BANK0[1]), I2C_ByteWrite@status(BANK0[1]), 

    I2C2_MasterWrite@pdata	PTR unsigned char  size(1) Largest target is 2
		 -> I2C_BufferRead@ReadAddr(BANK0[1]), I2C_ByteWrite@data(BANK0[2]), 

    F3100.pbuffer	PTR unsigned char  size(2) Largest target is 24
		 -> I2C_BufferRead@ReadAddr(BANK0[1]), I2C_BufferRead@status(BANK0[1]), I2C_ByteWrite@data(BANK0[2]), I2C_ByteWrite@status(BANK0[1]), 
		 -> data(BANK3[8]), b1(BANK3[24]), HMC5883L_ReadBit@tmp(COMMON[1]), HMC5883L_ReadBits@tmp(BANK0[1]), 
		 -> HMC5883L_WriteBit@tmp(COMMON[1]), HMC5883L_WriteBits@tmp(COMMON[1]), heading(BANK3[8]), HMC5883L_TestConnection@tmp(COMMON[3]), 
		 -> MPU6050_ReadBit@tmp(COMMON[1]), MPU6050_ReadBits@tmp(COMMON[1]), MPU6050_WriteBit@tmp(COMMON[1]), MPU6050_WriteBits@tmp(COMMON[1]), 
		 -> MPU6050_GetRawAccel@tempBuffer(COMMON[6]), MPU6050_GetRawAccelGyro@tmpBuffer(COMMON[14]), 

    I2C2_ISR@pi2c_buf_ptr	PTR unsigned char  size(2) Largest target is 24
		 -> I2C_BufferRead@ReadAddr(BANK0[1]), I2C_BufferRead@status(BANK0[1]), I2C_ByteWrite@data(BANK0[2]), I2C_ByteWrite@status(BANK0[1]), 
		 -> data(BANK3[8]), b1(BANK3[24]), HMC5883L_ReadBit@tmp(COMMON[1]), HMC5883L_ReadBits@tmp(BANK0[1]), 
		 -> HMC5883L_WriteBit@tmp(COMMON[1]), HMC5883L_WriteBits@tmp(COMMON[1]), heading(BANK3[8]), HMC5883L_TestConnection@tmp(COMMON[3]), 
		 -> MPU6050_ReadBit@tmp(COMMON[1]), MPU6050_ReadBits@tmp(COMMON[1]), MPU6050_WriteBit@tmp(COMMON[1]), MPU6050_WriteBits@tmp(COMMON[1]), 
		 -> MPU6050_GetRawAccel@tempBuffer(COMMON[6]), MPU6050_GetRawAccelGyro@tmpBuffer(COMMON[14]), NULL(NULL[0]), 

    p_i2c2_trb_current.pbuffer	PTR unsigned char  size(2) Largest target is 24
		 -> I2C_BufferRead@ReadAddr(BANK0[1]), I2C_BufferRead@status(BANK0[1]), I2C_ByteWrite@data(BANK0[2]), I2C_ByteWrite@status(BANK0[1]), 
		 -> data(BANK3[8]), b1(BANK3[24]), HMC5883L_ReadBit@tmp(COMMON[1]), HMC5883L_ReadBits@tmp(BANK0[1]), 
		 -> HMC5883L_WriteBit@tmp(COMMON[1]), HMC5883L_WriteBits@tmp(COMMON[1]), heading(BANK3[8]), HMC5883L_TestConnection@tmp(COMMON[3]), 
		 -> MPU6050_ReadBit@tmp(COMMON[1]), MPU6050_ReadBits@tmp(COMMON[1]), MPU6050_WriteBit@tmp(COMMON[1]), MPU6050_WriteBits@tmp(COMMON[1]), 
		 -> MPU6050_GetRawAccel@tempBuffer(COMMON[6]), MPU6050_GetRawAccelGyro@tmpBuffer(COMMON[14]), 

    p_i2c2_trb_current	PTR struct . size(1) Largest target is 5
		 -> I2C2_MasterRead@trBlock(BANK2[5]), I2C2_MasterWrite@trBlock(BANK2[5]), NULL(NULL[0]), 

    i2c2_object.pTrHead.pTrFlag	PTR enum E2993 size(2) Largest target is 24
		 -> I2C_BufferRead@ReadAddr(BANK0[1]), I2C_BufferRead@status(BANK0[1]), I2C_ByteWrite@data(BANK0[2]), I2C_ByteWrite@status(BANK0[1]), 
		 -> data(BANK3[8]), b1(BANK3[24]), HMC5883L_ReadBit@tmp(COMMON[1]), HMC5883L_ReadBits@tmp(BANK0[1]), 
		 -> HMC5883L_WriteBit@tmp(COMMON[1]), HMC5883L_WriteBits@tmp(COMMON[1]), heading(BANK3[8]), HMC5883L_TestConnection@tmp(COMMON[3]), 
		 -> MPU6050_ReadBit@tmp(COMMON[1]), MPU6050_ReadBits@tmp(COMMON[1]), MPU6050_WriteBit@tmp(COMMON[1]), MPU6050_WriteBits@tmp(COMMON[1]), 
		 -> MPU6050_GetRawAccel@tempBuffer(COMMON[6]), MPU6050_GetRawAccelGyro@tmpBuffer(COMMON[14]), 

    i2c2_object.pTrHead.ptrb_list	PTR struct . size(1) Largest target is 5
		 -> I2C2_MasterRead@trBlock(BANK2[5]), I2C2_MasterWrite@trBlock(BANK2[5]), 

    S587$pbuffer	PTR unsigned char  size(2) Largest target is 24
		 -> I2C_BufferRead@ReadAddr(BANK0[1]), I2C_BufferRead@status(BANK0[1]), I2C_ByteWrite@data(BANK0[2]), I2C_ByteWrite@status(BANK0[1]), 
		 -> data(BANK3[8]), b1(BANK3[24]), HMC5883L_ReadBit@tmp(COMMON[1]), HMC5883L_ReadBits@tmp(BANK0[1]), 
		 -> HMC5883L_WriteBit@tmp(COMMON[1]), HMC5883L_WriteBits@tmp(COMMON[1]), heading(BANK3[8]), HMC5883L_TestConnection@tmp(COMMON[3]), 
		 -> MPU6050_ReadBit@tmp(COMMON[1]), MPU6050_ReadBits@tmp(COMMON[1]), MPU6050_WriteBit@tmp(COMMON[1]), MPU6050_WriteBits@tmp(COMMON[1]), 
		 -> MPU6050_GetRawAccel@tempBuffer(COMMON[6]), MPU6050_GetRawAccelGyro@tmpBuffer(COMMON[14]), 

    p_i2c2_current.pbuffer	PTR unsigned char  size(2) Largest target is 24
		 -> I2C_BufferRead@ReadAddr(BANK0[1]), I2C_BufferRead@status(BANK0[1]), I2C_ByteWrite@data(BANK0[2]), I2C_ByteWrite@status(BANK0[1]), 
		 -> data(BANK3[8]), b1(BANK3[24]), HMC5883L_ReadBit@tmp(COMMON[1]), HMC5883L_ReadBits@tmp(BANK0[1]), 
		 -> HMC5883L_WriteBit@tmp(COMMON[1]), HMC5883L_WriteBits@tmp(COMMON[1]), heading(BANK3[8]), HMC5883L_TestConnection@tmp(COMMON[3]), 
		 -> MPU6050_ReadBit@tmp(COMMON[1]), MPU6050_ReadBits@tmp(COMMON[1]), MPU6050_WriteBit@tmp(COMMON[1]), MPU6050_WriteBits@tmp(COMMON[1]), 
		 -> MPU6050_GetRawAccel@tempBuffer(COMMON[6]), MPU6050_GetRawAccelGyro@tmpBuffer(COMMON[14]), 

    S599$pTrFlag	PTR enum E2993 size(2) Largest target is 24
		 -> I2C_BufferRead@ReadAddr(BANK0[1]), I2C_BufferRead@status(BANK0[1]), I2C_ByteWrite@data(BANK0[2]), I2C_ByteWrite@status(BANK0[1]), 
		 -> data(BANK3[8]), b1(BANK3[24]), HMC5883L_ReadBit@tmp(COMMON[1]), HMC5883L_ReadBits@tmp(BANK0[1]), 
		 -> HMC5883L_WriteBit@tmp(COMMON[1]), HMC5883L_WriteBits@tmp(COMMON[1]), heading(BANK3[8]), HMC5883L_TestConnection@tmp(COMMON[3]), 
		 -> MPU6050_ReadBit@tmp(COMMON[1]), MPU6050_ReadBits@tmp(COMMON[1]), MPU6050_WriteBit@tmp(COMMON[1]), MPU6050_WriteBits@tmp(COMMON[1]), 
		 -> MPU6050_GetRawAccel@tempBuffer(COMMON[6]), MPU6050_GetRawAccelGyro@tmpBuffer(COMMON[14]), 

    p_i2c2_current.pTrFlag	PTR enum E2993 size(2) Largest target is 24
		 -> I2C_BufferRead@ReadAddr(BANK0[1]), I2C_BufferRead@status(BANK0[1]), I2C_ByteWrite@data(BANK0[2]), I2C_ByteWrite@status(BANK0[1]), 
		 -> data(BANK3[8]), b1(BANK3[24]), HMC5883L_ReadBit@tmp(COMMON[1]), HMC5883L_ReadBits@tmp(BANK0[1]), 
		 -> HMC5883L_WriteBit@tmp(COMMON[1]), HMC5883L_WriteBits@tmp(COMMON[1]), heading(BANK3[8]), HMC5883L_TestConnection@tmp(COMMON[3]), 
		 -> MPU6050_ReadBit@tmp(COMMON[1]), MPU6050_ReadBits@tmp(COMMON[1]), MPU6050_WriteBit@tmp(COMMON[1]), MPU6050_WriteBits@tmp(COMMON[1]), 
		 -> MPU6050_GetRawAccel@tempBuffer(COMMON[6]), MPU6050_GetRawAccelGyro@tmpBuffer(COMMON[14]), 

    S599$ptrb_list	PTR struct . size(1) Largest target is 5
		 -> I2C2_MasterRead@trBlock(BANK2[5]), I2C2_MasterWrite@trBlock(BANK2[5]), 

    p_i2c2_current.ptrb_list	PTR struct . size(1) Largest target is 5
		 -> I2C2_MasterRead@trBlock(BANK2[5]), I2C2_MasterWrite@trBlock(BANK2[5]), 

    p_i2c2_current	PTR struct . size(1) Largest target is 5
		 -> i2c2_tr_queue(BANK2[4]), NULL(NULL[0]), 

    S610$pTrHead	PTR struct . size(1) Largest target is 5
		 -> i2c2_tr_queue(BANK2[4]), 

    i2c2_object.pTrHead	PTR struct . size(1) Largest target is 5
		 -> i2c2_tr_queue(BANK2[4]), 

    S610$pTrTail	PTR struct . size(1) Largest target is 5
		 -> i2c2_tr_queue(BANK2[4]), 

    i2c2_object.pTrTail	PTR struct . size(1) Largest target is 5
		 -> i2c2_tr_queue(BANK2[4]), 

    TMR1_SetInterruptHandler@InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> TMR1_DefaultInterruptHandler(), 

    TMR1_InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> TMR1_DefaultInterruptHandler(), Absolute function(), 

    IOCAF2_SetInterruptHandler@InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> IOCAF2_DefaultInterruptHandler(), 

    IOCAF2_InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), IOCAF2_DefaultInterruptHandler(), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _INTERRUPT_InterruptManager in COMMON

    _INTERRUPT_InterruptManager->_I2C2_ISR
    _I2C2_ISR->_I2C2_Stop

Critical Paths under _main in BANK0

    _main->_Wireless_packageData
    _Wireless_wake->_RF_ReadRegisterData
    _Wireless_sleep->_RF_ReadRegisterData
    _Wireless_packageData->___fttol
    _Wireless_determineTransmitPower->_Wireless_sendData
    _Wireless_sendData->_RF_TxPayload
    _RF_TxPayload->_RF_WriteRegisterData
    _RF_Write->_SPI_WriteRead
    _RF_GetStatus->_RF_WriteRead
    _RF_WriteRead->_SPI_WriteRead
    _Wireless_changeTransmitPower->_RF_ReadRegisterData
    _Wireless_checkDataReceived->_RF_RxPayload
    _RF_RxPayload->_RF_ReadRegisterData
    _RF_ReadRegisterData->_SPI_WriteReadBuffer
    _SPI_WriteReadBuffer->_SPI_WriteRead
    _RF_DataIsReady->_RF_ReadRegister
    _RF_ReadRegister->_SPI_WriteRead
    _DOOR_update->_Storage_save
    _Storage_save->_DATAEE_WriteByte
    _Sensor_getSupplyVoltage->___ftdiv
    _Wireless_init->_RF_WriteRegisterData
    _RF_WriteRegisterData->_SPI_WriteBuffer
    _SPI_WriteBuffer->_SPI_WriteRead
    _RF_ResetStatusIRQ->_RF_WriteRegister
    _RF_WriteRegister->_SPI_WriteRead
    _SPI_WriteRead->_SPI1_Exchange8bit
    _Timeout_updateCurrentTime->___lmul
    _TMR1_Initialize->_TMR1_SetInterruptHandler
    _PIN_MANAGER_Initialize->_IOCAF2_SetInterruptHandler
    _BMP_readTemperature->___fttol
    ___lwtoft->___ftpack
    ___fttol->___ftmul
    ___ftneg->___ftdiv
    ___ftmul->___ftadd
    ___ftdiv->___altoft
    ___ftadd->_Sensor_getSupplyVoltage
    ___awtoft->___ftpack
    ___altoft->___ftpack
    ___altoft->___ftpack
    _HMC5883L_ReadBits->_HMC5883L_I2C_BufferRead
    _HMC5883L_I2C_BufferRead->_I2C_BufferRead
    _BMP_init->_I2C_BufferRead
    _I2C_ByteWrite->_I2C2_MasterWrite
    _I2C_BufferRead->_I2C2_MasterRead
    _I2C2_MasterWrite->_I2C2_MasterWriteTRBBuild
    _I2C2_MasterRead->_I2C2_MasterReadTRBBuild

Critical Paths under _INTERRUPT_InterruptManager in BANK0

    None.

Critical Paths under _main in BANK1

    _main->_Wireless_packageData
    _Wireless_packageData->_BMP_readTemperature
    _BMP_readTemperature->___fttol

Critical Paths under _INTERRUPT_InterruptManager in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK12

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                14    14      0  106355
                                             40 BANK1      2     2      0
                                              0 BANK3     12    12      0
                           _BMP_init
                _BMP_readTemperature
                          _DOOR_init
                           _DOOR_run
                  _SYSTEM_Initialize
             _Sensor_peripheralSleep
           _Timeout_getGlobalCounter
          _Timeout_updateCurrentTime
    _Wireless_determineTransmitPower
                      _Wireless_init
               _Wireless_packageData
                     _Wireless_sleep
                      _Wireless_wake
                            ___lldiv
                            ___lwdiv
                       _setSleepTime
 ---------------------------------------------------------------------------------
 (1) _setSleepTime                                         2     0      2      77
                                              1 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (1) ___lwdiv                                              8     4      4     703
                                              1 BANK0      8     4      4
 ---------------------------------------------------------------------------------
 (1) ___lldiv                                             14     6      8     395
                                              1 BANK0     14     6      8
 ---------------------------------------------------------------------------------
 (1) _Wireless_wake                                        2     2      0    2442
                                             15 BANK0      2     2      0
                _RF_ReadRegisterData
                   _RF_WriteRegister
 ---------------------------------------------------------------------------------
 (1) _Wireless_sleep                                       2     2      0    2442
                                             15 BANK0      2     2      0
                _RF_ReadRegisterData
                   _RF_WriteRegister
 ---------------------------------------------------------------------------------
 (1) _Wireless_packageData                                15    11      4   32936
                                             78 BANK0      1     1      0
                                             26 BANK1     14    10      4
                _BMP_readTemperature (ARG)
               _Diag_getSensorHealth
            _Sensor_getSupplyVoltage
         _Wireless_checkDataReceived
    _Wireless_determineTransmitPower
                  _Wireless_sendData
                            ___ftadd
                            ___ftmul
                            ___fttol
                            ___lldiv (ARG)
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (2) _Wireless_determineTransmitPower                      6     6      0    6384
                                             21 BANK0      6     6      0
       _Wireless_changeTransmitPower
  _Wireless_isDataTransmitSuccessful
                  _Wireless_sendData
                              _limit
 ---------------------------------------------------------------------------------
 (3) _limit                                                7     1      6     448
                                              1 BANK0      7     1      6
 ---------------------------------------------------------------------------------
 (2) _Wireless_sendData                                    4     3      1    3104
                                             17 BANK0      4     3      1
                       _RF_GetStatus
                  _RF_ResetStatusIRQ
                       _RF_TxPayload
 ---------------------------------------------------------------------------------
 (3) _RF_TxPayload                                         3     2      1    1536
                                             14 BANK0      3     2      1
                           _RF_Write
               _RF_WriteRegisterData
 ---------------------------------------------------------------------------------
 (4) _RF_Write                                             1     1      0      93
                                              3 BANK0      1     1      0
                      _SPI_WriteRead
 ---------------------------------------------------------------------------------
 (3) _Wireless_isDataTransmitSuccessful                    2     2      0     161
                                              5 BANK0      2     2      0
                       _RF_GetStatus
 ---------------------------------------------------------------------------------
 (3) _RF_GetStatus                                         0     0      0     127
                       _RF_WriteRead
 ---------------------------------------------------------------------------------
 (4) _RF_WriteRead                                         2     2      0     127
                                              3 BANK0      2     2      0
                      _SPI_WriteRead
 ---------------------------------------------------------------------------------
 (3) _Wireless_changeTransmitPower                         3     3      0    2476
                                             15 BANK0      3     3      0
                _RF_ReadRegisterData
                   _RF_WriteRegister
 ---------------------------------------------------------------------------------
 (2) _Wireless_checkDataReceived                           9     9      0    3463
                                             19 BANK0      9     9      0
                      _DOOR_resetPos
                        _DOOR_update
                     _RF_DataIsReady
                       _RF_RxPayload
                             ___lmul
 ---------------------------------------------------------------------------------
 (3) _RF_RxPayload                                         4     3      1    1415
                                             15 BANK0      4     3      1
                _RF_ReadRegisterData
 ---------------------------------------------------------------------------------
 (2) _RF_ReadRegisterData                                  5     3      2    1243
                                             10 BANK0      5     3      2
                      _SPI_WriteRead
                _SPI_WriteReadBuffer
 ---------------------------------------------------------------------------------
 (3) _SPI_WriteReadBuffer                                  7     5      2     441
                                              3 BANK0      7     5      2
                      _SPI_WriteRead
 ---------------------------------------------------------------------------------
 (3) _RF_DataIsReady                                       3     3      0     292
                                              6 BANK0      3     3      0
                    _RF_ReadRegister
 ---------------------------------------------------------------------------------
 (4) _RF_ReadRegister                                      3     3      0     127
                                              3 BANK0      3     3      0
                      _SPI_WriteRead
 ---------------------------------------------------------------------------------
 (3) _DOOR_update                                          3     2      1     978
                                              7 BANK0      3     2      1
                       _Storage_save
 ---------------------------------------------------------------------------------
 (4) _Storage_save                                         3     2      1     700
                                              4 BANK0      3     2      1
                   _DATAEE_WriteByte
 ---------------------------------------------------------------------------------
 (5) _DATAEE_WriteByte                                     3     2      1     561
                                              1 BANK0      3     2      1
 ---------------------------------------------------------------------------------
 (3) _DOOR_resetPos                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _Sensor_getSupplyVoltage                              8     5      3    7868
                                             33 BANK0      8     5      3
            _ADC_GetConversionResult
               _ADC_IsConversionDone
                  _ADC_SelectChannel
                _ADC_StartConversion
                  _FVR_IsOutputReady
             _Sensor_peripheralSleep
              _Sensor_peripheralWake
                            ___ftdiv
                           ___lwtoft
 ---------------------------------------------------------------------------------
 (3) _Sensor_peripheralWake                                0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _Sensor_peripheralSleep                               0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _FVR_IsOutputReady                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _ADC_StartConversion                                  0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _ADC_SelectChannel                                    2     2      0      31
                                              1 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (3) _ADC_IsConversionDone                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _ADC_GetConversionResult                              2     0      2       0
                                              1 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (2) _Diag_getSensorHealth                                 2     2      0      43
                                              1 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _Wireless_init                                        2     2      0    3552
                                             14 BANK0      2     2      0
                            _RF_Init
                  _RF_ResetStatusIRQ
                   _RF_WriteRegister
               _RF_WriteRegisterData
 ---------------------------------------------------------------------------------
 (4) _RF_WriteRegisterData                                 5     2      3    1271
                                              9 BANK0      5     2      3
                    _SPI_WriteBuffer
                      _SPI_WriteRead
 ---------------------------------------------------------------------------------
 (5) _SPI_WriteBuffer                                      6     3      3     346
                                              3 BANK0      6     3      3
                      _SPI_WriteRead
 ---------------------------------------------------------------------------------
 (3) _RF_ResetStatusIRQ                                    2     2      0    1156
                                              5 BANK0      2     2      0
                   _RF_WriteRegister
 ---------------------------------------------------------------------------------
 (2) _RF_WriteRegister                                     2     1      1    1125
                                              3 BANK0      2     1      1
                      _SPI_WriteRead
 ---------------------------------------------------------------------------------
 (3) _SPI_WriteRead                                        1     1      0      62
                                              2 BANK0      1     1      0
                  _SPI1_Exchange8bit
 ---------------------------------------------------------------------------------
 (4) _SPI1_Exchange8bit                                    1     1      0      31
                                              1 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _RF_Init                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Timeout_updateCurrentTime                            8     8      0     617
                                             13 BANK0      8     8      0
                     _TMR1_ReadTimer
                             ___lmul
 ---------------------------------------------------------------------------------
 (3) ___lmul                                              12     4      8     444
                                              1 BANK0     12     4      8
 ---------------------------------------------------------------------------------
 (2) _TMR1_ReadTimer                                      11     9      2     102
                                              1 BANK0     11     9      2
 ---------------------------------------------------------------------------------
 (1) _Timeout_getGlobalCounter                             4     0      4       0
                                              1 BANK0      4     0      4
 ---------------------------------------------------------------------------------
 (1) _SYSTEM_Initialize                                    0     0      0     216
                     _ADC_Initialize
                     _FVR_Initialize
                    _I2C2_Initialize
              _OSCILLATOR_Initialize
             _PIN_MANAGER_Initialize
                    _SPI1_Initialize
                    _TMR1_Initialize
                    _TMR2_Initialize
                     _WDT_Initialize
 ---------------------------------------------------------------------------------
 (2) _WDT_Initialize                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _TMR2_Initialize                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _TMR1_Initialize                                      0     0      0     108
           _TMR1_SetInterruptHandler
 ---------------------------------------------------------------------------------
 (3) _TMR1_SetInterruptHandler                             2     0      2     108
                                              1 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (2) _SPI1_Initialize                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _PIN_MANAGER_Initialize                               0     0      0     108
         _IOCAF2_SetInterruptHandler
 ---------------------------------------------------------------------------------
 (3) _IOCAF2_SetInterruptHandler                           2     0      2     108
                                              1 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (2) _OSCILLATOR_Initialize                                0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _I2C2_Initialize                                      1     1      0       0
                                              1 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _FVR_Initialize                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _ADC_Initialize                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _DOOR_run                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _DOOR_init                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _BMP_readTemperature                                 20    17      3   48745
                                              6 BANK1     20    17      3
                           _BMP_init
           _Diag_getTempSensorHealth
           _Diag_setTempSensorHealth
                  _HMC5883L_ReadBits
                     _I2C_BufferRead
                      _I2C_ByteWrite
                            ___aldiv
                           ___altoft
                           ___awtoft
                            ___ftadd
                            ___ftdiv
                            ___ftmul
                            ___ftneg
                            ___fttol
                           ___lwtoft
 ---------------------------------------------------------------------------------
 (3) ___lwtoft                                             4     1      3    2923
                                              9 BANK0      4     1      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (2) ___fttol                                             14    10      4     679
                                             70 BANK0      8     4      4
                                              0 BANK1      6     6      0
            _Sensor_getSupplyVoltage (ARG)
                           ___altoft (ARG)
                            ___ftadd (ARG)
                            ___ftmul (ARG)
 ---------------------------------------------------------------------------------
 (2) ___ftneg                                              3     0      3     524
                                             33 BANK0      3     0      3
                            ___ftdiv (ARG)
                           ___lwtoft (ARG)
 ---------------------------------------------------------------------------------
 (2) ___ftmul                                             16    10      6    4338
                                             54 BANK0     16    10      6
            _Sensor_getSupplyVoltage (ARG)
                           ___altoft (ARG)
                           ___awtoft (ARG)
                            ___ftadd (ARG)
                            ___ftdiv (ARG)
                            ___ftneg (ARG)
                           ___ftpack
                           ___lwtoft (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftdiv                                             16    10      6    4846
                                             17 BANK0     16    10      6
                           ___altoft (ARG)
                           ___ftpack
                           ___ftpack (ARG)
                           ___lwtoft (ARG)
 ---------------------------------------------------------------------------------
 (2) ___ftadd                                             13     7      6    5611
                                             41 BANK0     13     7      6
            _Sensor_getSupplyVoltage (ARG)
                           ___altoft (ARG)
                            ___ftdiv (ARG)
                            ___ftneg (ARG)
                           ___ftpack
                           ___lwtoft (ARG)
 ---------------------------------------------------------------------------------
 (2) ___awtoft                                             6     3      3    3025
                                              9 BANK0      6     3      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (2) ___altoft                                             8     4      4    3096
                                              9 BANK0      8     4      4
                           ___ftpack
                           ___ftpack (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftpack                                             8     3      5    2584
                                              1 BANK0      8     3      5
 ---------------------------------------------------------------------------------
 (2) ___aldiv                                             15     7      8     599
                                              1 BANK0     15     7      8
 ---------------------------------------------------------------------------------
 (2) _HMC5883L_ReadBits                                   10     6      4    8661
                                             35 BANK0     10     6      4
            _HMC5883L_I2C_BufferRead
 ---------------------------------------------------------------------------------
 (3) _HMC5883L_I2C_BufferRead                              7     2      5    6134
                                             28 BANK0      7     2      5
                     _I2C_BufferRead
 ---------------------------------------------------------------------------------
 (2) _Diag_getTempSensorHealth                             0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _BMP_init                                             4     4      0    7138
                                             28 BANK0      4     4      0
           _Diag_setTempSensorHealth
                     _I2C_BufferRead
                      _I2C_ByteWrite
 ---------------------------------------------------------------------------------
 (2) _I2C_ByteWrite                                       10     8      2    2674
                                             15 BANK0     10     8      2
                   _I2C2_MasterWrite
                 _Timeout_hasExpired
                 _Timeout_setTimeout
 ---------------------------------------------------------------------------------
 (2) _I2C_BufferRead                                      11     6      5    4393
                                             17 BANK0     11     6      5
                    _I2C2_MasterRead
                   _I2C2_MasterWrite
                 _Timeout_hasExpired
                 _Timeout_setTimeout
 ---------------------------------------------------------------------------------
 (3) _Timeout_setTimeout                                   2     0      2     262
                                              1 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (3) _Timeout_hasExpired                                  12    12      0       0
                                              1 BANK0     12    12      0
 ---------------------------------------------------------------------------------
 (3) _I2C2_MasterWrite                                     7     3      4    1627
                                              8 BANK0      7     3      4
               _I2C2_MasterTRBInsert
           _I2C2_MasterWriteTRBBuild
 ---------------------------------------------------------------------------------
 (4) _I2C2_MasterWriteTRBBuild                             7     3      4     450
                                              1 BANK0      7     3      4
 ---------------------------------------------------------------------------------
 (3) _I2C2_MasterRead                                      8     2      6    1398
                                              9 BANK0      8     2      6
            _I2C2_MasterReadTRBBuild
               _I2C2_MasterTRBInsert
 ---------------------------------------------------------------------------------
 (4) _I2C2_MasterTRBInsert                                 4     2      2     494
                                              1 BANK0      4     2      2
 ---------------------------------------------------------------------------------
 (4) _I2C2_MasterReadTRBBuild                              8     3      5     481
                                              1 BANK0      8     3      5
 ---------------------------------------------------------------------------------
 (2) _Diag_setTempSensorHealth                             2     2      0      31
                                              1 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (9) _INTERRUPT_InterruptManager                           1     1      0      22
                                              0 BANK0      1     1      0
               _I2C2_BusCollisionISR
                           _I2C2_ISR
                    _PIN_MANAGER_IOC
                           _TMR1_ISR
 ---------------------------------------------------------------------------------
 (10) _TMR1_ISR                                            0     0      0       0
                      _TMR1_CallBack
 ---------------------------------------------------------------------------------
 (11) _TMR1_CallBack                                       0     0      0       0
                   Absolute function *
       _TMR1_DefaultInterruptHandler *
                  _Timeout_increment
 ---------------------------------------------------------------------------------
 (12) _Timeout_increment                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (12) _TMR1_DefaultInterruptHandler                        0     0      0       0
 ---------------------------------------------------------------------------------
 (10) _PIN_MANAGER_IOC                                     0     0      0       0
                         _IOCAF2_ISR
 ---------------------------------------------------------------------------------
 (11) _IOCAF2_ISR                                          0     0      0       0
                   Absolute function *
     _IOCAF2_DefaultInterruptHandler *
 ---------------------------------------------------------------------------------
 (12) _IOCAF2_DefaultInterruptHandler                      0     0      0       0
 ---------------------------------------------------------------------------------
 (12) Absolute function(Fake)                              0     0      0       0
 ---------------------------------------------------------------------------------
 (10) _I2C2_ISR                                            4     4      0      22
                                              3 COMMON     4     4      0
              _I2C2_FunctionComplete
                          _I2C2_Stop
 ---------------------------------------------------------------------------------
 (11) _I2C2_Stop                                           3     3      0      22
                                              0 COMMON     3     3      0
 ---------------------------------------------------------------------------------
 (11) _I2C2_FunctionComplete                               1     1      0       0
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (10) _I2C2_BusCollisionISR                                0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 12
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _BMP_init
     _Diag_setTempSensorHealth
     _I2C_BufferRead
       _I2C2_MasterRead
         _I2C2_MasterReadTRBBuild
         _I2C2_MasterTRBInsert
       _I2C2_MasterWrite
         _I2C2_MasterTRBInsert
         _I2C2_MasterWriteTRBBuild
       _Timeout_hasExpired
       _Timeout_setTimeout
     _I2C_ByteWrite
       _I2C2_MasterWrite
         _I2C2_MasterTRBInsert
         _I2C2_MasterWriteTRBBuild
       _Timeout_hasExpired
       _Timeout_setTimeout
   _BMP_readTemperature
     _BMP_init
       _Diag_setTempSensorHealth
       _I2C_BufferRead
         _I2C2_MasterRead
           _I2C2_MasterReadTRBBuild
           _I2C2_MasterTRBInsert
         _I2C2_MasterWrite
           _I2C2_MasterTRBInsert
           _I2C2_MasterWriteTRBBuild
         _Timeout_hasExpired
         _Timeout_setTimeout
       _I2C_ByteWrite
         _I2C2_MasterWrite
           _I2C2_MasterTRBInsert
           _I2C2_MasterWriteTRBBuild
         _Timeout_hasExpired
         _Timeout_setTimeout
     _Diag_getTempSensorHealth
     _Diag_setTempSensorHealth
     _HMC5883L_ReadBits
       _HMC5883L_I2C_BufferRead
         _I2C_BufferRead
           _I2C2_MasterRead
             _I2C2_MasterReadTRBBuild
             _I2C2_MasterTRBInsert
           _I2C2_MasterWrite
             _I2C2_MasterTRBInsert
             _I2C2_MasterWriteTRBBuild
           _Timeout_hasExpired
           _Timeout_setTimeout
     _I2C_BufferRead
       _I2C2_MasterRead
         _I2C2_MasterReadTRBBuild
         _I2C2_MasterTRBInsert
       _I2C2_MasterWrite
         _I2C2_MasterTRBInsert
         _I2C2_MasterWriteTRBBuild
       _Timeout_hasExpired
       _Timeout_setTimeout
     _I2C_ByteWrite
       _I2C2_MasterWrite
         _I2C2_MasterTRBInsert
         _I2C2_MasterWriteTRBBuild
       _Timeout_hasExpired
       _Timeout_setTimeout
     ___aldiv
     ___altoft
       ___ftpack
       ___ftpack (ARG)
     ___awtoft
       ___ftpack
     ___ftadd
       _Sensor_getSupplyVoltage (ARG)
         _ADC_GetConversionResult
         _ADC_IsConversionDone
         _ADC_SelectChannel
         _ADC_StartConversion
         _FVR_IsOutputReady
         _Sensor_peripheralSleep
         _Sensor_peripheralWake
         ___ftdiv
           ___altoft (ARG)
             ___ftpack
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
         ___lwtoft
           ___ftpack
       ___altoft (ARG)
         ___ftpack
         ___ftpack (ARG)
       ___ftdiv (ARG)
         ___altoft (ARG)
           ___ftpack
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
       ___ftneg (ARG)
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
         ___lwtoft (ARG)
           ___ftpack
       ___ftpack (ARG)
       ___lwtoft (ARG)
         ___ftpack
     ___ftdiv
       ___altoft (ARG)
         ___ftpack
         ___ftpack (ARG)
       ___ftpack (ARG)
       ___ftpack (ARG)
       ___lwtoft (ARG)
         ___ftpack
     ___ftmul
       _Sensor_getSupplyVoltage (ARG)
         _ADC_GetConversionResult
         _ADC_IsConversionDone
         _ADC_SelectChannel
         _ADC_StartConversion
         _FVR_IsOutputReady
         _Sensor_peripheralSleep
         _Sensor_peripheralWake
         ___ftdiv
           ___altoft (ARG)
             ___ftpack
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
         ___lwtoft
           ___ftpack
       ___altoft (ARG)
         ___ftpack
         ___ftpack (ARG)
       ___awtoft (ARG)
         ___ftpack
       ___ftadd (ARG)
         _Sensor_getSupplyVoltage (ARG)
           _ADC_GetConversionResult
           _ADC_IsConversionDone
           _ADC_SelectChannel
           _ADC_StartConversion
           _FVR_IsOutputReady
           _Sensor_peripheralSleep
           _Sensor_peripheralWake
           ___ftdiv
             ___altoft (ARG)
               ___ftpack
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
           ___lwtoft
             ___ftpack
         ___altoft (ARG)
           ___ftpack
           ___ftpack (ARG)
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
         ___ftneg (ARG)
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
           ___lwtoft (ARG)
             ___ftpack
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
       ___ftdiv (ARG)
         ___altoft (ARG)
           ___ftpack
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
       ___ftneg (ARG)
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
         ___lwtoft (ARG)
           ___ftpack
       ___ftpack (ARG)
       ___lwtoft (ARG)
         ___ftpack
     ___ftneg
       ___ftdiv (ARG)
         ___altoft (ARG)
           ___ftpack
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
       ___lwtoft (ARG)
         ___ftpack
     ___fttol
       _Sensor_getSupplyVoltage (ARG)
         _ADC_GetConversionResult
         _ADC_IsConversionDone
         _ADC_SelectChannel
         _ADC_StartConversion
         _FVR_IsOutputReady
         _Sensor_peripheralSleep
         _Sensor_peripheralWake
         ___ftdiv
           ___altoft (ARG)
             ___ftpack
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
         ___lwtoft
           ___ftpack
       ___altoft (ARG)
         ___ftpack
         ___ftpack (ARG)
       ___ftadd (ARG)
         _Sensor_getSupplyVoltage (ARG)
           _ADC_GetConversionResult
           _ADC_IsConversionDone
           _ADC_SelectChannel
           _ADC_StartConversion
           _FVR_IsOutputReady
           _Sensor_peripheralSleep
           _Sensor_peripheralWake
           ___ftdiv
             ___altoft (ARG)
               ___ftpack
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
           ___lwtoft
             ___ftpack
         ___altoft (ARG)
           ___ftpack
           ___ftpack (ARG)
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
         ___ftneg (ARG)
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
           ___lwtoft (ARG)
             ___ftpack
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
       ___ftmul (ARG)
         _Sensor_getSupplyVoltage (ARG)
           _ADC_GetConversionResult
           _ADC_IsConversionDone
           _ADC_SelectChannel
           _ADC_StartConversion
           _FVR_IsOutputReady
           _Sensor_peripheralSleep
           _Sensor_peripheralWake
           ___ftdiv
             ___altoft (ARG)
               ___ftpack
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
           ___lwtoft
             ___ftpack
         ___altoft (ARG)
           ___ftpack
           ___ftpack (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           _Sensor_getSupplyVoltage (ARG)
             _ADC_GetConversionResult
             _ADC_IsConversionDone
             _ADC_SelectChannel
             _ADC_StartConversion
             _FVR_IsOutputReady
             _Sensor_peripheralSleep
             _Sensor_peripheralWake
             ___ftdiv
               ___altoft (ARG)
                 ___ftpack
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
             ___lwtoft
               ___ftpack
           ___altoft (ARG)
             ___ftpack
             ___ftpack (ARG)
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
           ___ftneg (ARG)
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
             ___lwtoft (ARG)
               ___ftpack
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
         ___ftneg (ARG)
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
           ___lwtoft (ARG)
             ___ftpack
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
     ___lwtoft
       ___ftpack
   _DOOR_init
   _DOOR_run
   _SYSTEM_Initialize
     _ADC_Initialize
     _FVR_Initialize
     _I2C2_Initialize
     _OSCILLATOR_Initialize
     _PIN_MANAGER_Initialize
       _IOCAF2_SetInterruptHandler
     _SPI1_Initialize
     _TMR1_Initialize
       _TMR1_SetInterruptHandler
     _TMR2_Initialize
     _WDT_Initialize
   _Sensor_peripheralSleep
   _Timeout_getGlobalCounter
   _Timeout_updateCurrentTime
     _TMR1_ReadTimer
     ___lmul
   _Wireless_determineTransmitPower
     _Wireless_changeTransmitPower
       _RF_ReadRegisterData
         _SPI_WriteRead
           _SPI1_Exchange8bit
         _SPI_WriteReadBuffer
           _SPI_WriteRead
             _SPI1_Exchange8bit
       _RF_WriteRegister
         _SPI_WriteRead
           _SPI1_Exchange8bit
     _Wireless_isDataTransmitSuccessful
       _RF_GetStatus
         _RF_WriteRead
           _SPI_WriteRead
             _SPI1_Exchange8bit
     _Wireless_sendData
       _RF_GetStatus
         _RF_WriteRead
           _SPI_WriteRead
             _SPI1_Exchange8bit
       _RF_ResetStatusIRQ
         _RF_WriteRegister
           _SPI_WriteRead
             _SPI1_Exchange8bit
       _RF_TxPayload
         _RF_Write
           _SPI_WriteRead
             _SPI1_Exchange8bit
         _RF_WriteRegisterData
           _SPI_WriteBuffer
             _SPI_WriteRead
               _SPI1_Exchange8bit
           _SPI_WriteRead
             _SPI1_Exchange8bit
     _limit
   _Wireless_init
     _RF_Init
     _RF_ResetStatusIRQ
       _RF_WriteRegister
         _SPI_WriteRead
           _SPI1_Exchange8bit
     _RF_WriteRegister
       _SPI_WriteRead
         _SPI1_Exchange8bit
     _RF_WriteRegisterData
       _SPI_WriteBuffer
         _SPI_WriteRead
           _SPI1_Exchange8bit
       _SPI_WriteRead
         _SPI1_Exchange8bit
   _Wireless_packageData
     _BMP_readTemperature (ARG)
       _BMP_init
         _Diag_setTempSensorHealth
         _I2C_BufferRead
           _I2C2_MasterRead
             _I2C2_MasterReadTRBBuild
             _I2C2_MasterTRBInsert
           _I2C2_MasterWrite
             _I2C2_MasterTRBInsert
             _I2C2_MasterWriteTRBBuild
           _Timeout_hasExpired
           _Timeout_setTimeout
         _I2C_ByteWrite
           _I2C2_MasterWrite
             _I2C2_MasterTRBInsert
             _I2C2_MasterWriteTRBBuild
           _Timeout_hasExpired
           _Timeout_setTimeout
       _Diag_getTempSensorHealth
       _Diag_setTempSensorHealth
       _HMC5883L_ReadBits
         _HMC5883L_I2C_BufferRead
           _I2C_BufferRead
             _I2C2_MasterRead
               _I2C2_MasterReadTRBBuild
               _I2C2_MasterTRBInsert
             _I2C2_MasterWrite
               _I2C2_MasterTRBInsert
               _I2C2_MasterWriteTRBBuild
             _Timeout_hasExpired
             _Timeout_setTimeout
       _I2C_BufferRead
         _I2C2_MasterRead
           _I2C2_MasterReadTRBBuild
           _I2C2_MasterTRBInsert
         _I2C2_MasterWrite
           _I2C2_MasterTRBInsert
           _I2C2_MasterWriteTRBBuild
         _Timeout_hasExpired
         _Timeout_setTimeout
       _I2C_ByteWrite
         _I2C2_MasterWrite
           _I2C2_MasterTRBInsert
           _I2C2_MasterWriteTRBBuild
         _Timeout_hasExpired
         _Timeout_setTimeout
       ___aldiv
       ___altoft
         ___ftpack
         ___ftpack (ARG)
       ___awtoft
         ___ftpack
       ___ftadd
         _Sensor_getSupplyVoltage (ARG)
           _ADC_GetConversionResult
           _ADC_IsConversionDone
           _ADC_SelectChannel
           _ADC_StartConversion
           _FVR_IsOutputReady
           _Sensor_peripheralSleep
           _Sensor_peripheralWake
           ___ftdiv
             ___altoft (ARG)
               ___ftpack
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
           ___lwtoft
             ___ftpack
         ___altoft (ARG)
           ___ftpack
           ___ftpack (ARG)
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
         ___ftneg (ARG)
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
           ___lwtoft (ARG)
             ___ftpack
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
       ___ftdiv
         ___altoft (ARG)
           ___ftpack
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
       ___ftmul
         _Sensor_getSupplyVoltage (ARG)
           _ADC_GetConversionResult
           _ADC_IsConversionDone
           _ADC_SelectChannel
           _ADC_StartConversion
           _FVR_IsOutputReady
           _Sensor_peripheralSleep
           _Sensor_peripheralWake
           ___ftdiv
             ___altoft (ARG)
               ___ftpack
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
           ___lwtoft
             ___ftpack
         ___altoft (ARG)
           ___ftpack
           ___ftpack (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           _Sensor_getSupplyVoltage (ARG)
             _ADC_GetConversionResult
             _ADC_IsConversionDone
             _ADC_SelectChannel
             _ADC_StartConversion
             _FVR_IsOutputReady
             _Sensor_peripheralSleep
             _Sensor_peripheralWake
             ___ftdiv
               ___altoft (ARG)
                 ___ftpack
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
             ___lwtoft
               ___ftpack
           ___altoft (ARG)
             ___ftpack
             ___ftpack (ARG)
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
           ___ftneg (ARG)
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
             ___lwtoft (ARG)
               ___ftpack
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
         ___ftneg (ARG)
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
           ___lwtoft (ARG)
             ___ftpack
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
       ___ftneg
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
         ___lwtoft (ARG)
           ___ftpack
       ___fttol
         _Sensor_getSupplyVoltage (ARG)
           _ADC_GetConversionResult
           _ADC_IsConversionDone
           _ADC_SelectChannel
           _ADC_StartConversion
           _FVR_IsOutputReady
           _Sensor_peripheralSleep
           _Sensor_peripheralWake
           ___ftdiv
             ___altoft (ARG)
               ___ftpack
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
           ___lwtoft
             ___ftpack
         ___altoft (ARG)
           ___ftpack
           ___ftpack (ARG)
         ___ftadd (ARG)
           _Sensor_getSupplyVoltage (ARG)
             _ADC_GetConversionResult
             _ADC_IsConversionDone
             _ADC_SelectChannel
             _ADC_StartConversion
             _FVR_IsOutputReady
             _Sensor_peripheralSleep
             _Sensor_peripheralWake
             ___ftdiv
               ___altoft (ARG)
                 ___ftpack
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
             ___lwtoft
               ___ftpack
           ___altoft (ARG)
             ___ftpack
             ___ftpack (ARG)
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
           ___ftneg (ARG)
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
             ___lwtoft (ARG)
               ___ftpack
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
         ___ftmul (ARG)
           _Sensor_getSupplyVoltage (ARG)
             _ADC_GetConversionResult
             _ADC_IsConversionDone
             _ADC_SelectChannel
             _ADC_StartConversion
             _FVR_IsOutputReady
             _Sensor_peripheralSleep
             _Sensor_peripheralWake
             ___ftdiv
               ___altoft (ARG)
                 ___ftpack
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
             ___lwtoft
               ___ftpack
           ___altoft (ARG)
             ___ftpack
             ___ftpack (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             _Sensor_getSupplyVoltage (ARG)
               _ADC_GetConversionResult
               _ADC_IsConversionDone
               _ADC_SelectChannel
               _ADC_StartConversion
               _FVR_IsOutputReady
               _Sensor_peripheralSleep
               _Sensor_peripheralWake
               ___ftdiv
                 ___altoft (ARG)
                   ___ftpack
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
               ___lwtoft
                 ___ftpack
             ___altoft (ARG)
               ___ftpack
               ___ftpack (ARG)
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
             ___ftneg (ARG)
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
           ___ftneg (ARG)
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
             ___lwtoft (ARG)
               ___ftpack
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
       ___lwtoft
         ___ftpack
     _Diag_getSensorHealth (ARG)
     _Sensor_getSupplyVoltage (ARG)
       _ADC_GetConversionResult
       _ADC_IsConversionDone
       _ADC_SelectChannel
       _ADC_StartConversion
       _FVR_IsOutputReady
       _Sensor_peripheralSleep
       _Sensor_peripheralWake
       ___ftdiv
         ___altoft (ARG)
           ___ftpack
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
       ___lwtoft
         ___ftpack
     _Wireless_checkDataReceived (ARG)
       _DOOR_resetPos
       _DOOR_update
         _Storage_save
           _DATAEE_WriteByte
       _RF_DataIsReady
         _RF_ReadRegister
           _SPI_WriteRead
             _SPI1_Exchange8bit
       _RF_RxPayload
         _RF_ReadRegisterData
           _SPI_WriteRead
             _SPI1_Exchange8bit
           _SPI_WriteReadBuffer
             _SPI_WriteRead
               _SPI1_Exchange8bit
       ___lmul
     _Wireless_determineTransmitPower (ARG)
       _Wireless_changeTransmitPower
         _RF_ReadRegisterData
           _SPI_WriteRead
             _SPI1_Exchange8bit
           _SPI_WriteReadBuffer
             _SPI_WriteRead
               _SPI1_Exchange8bit
         _RF_WriteRegister
           _SPI_WriteRead
             _SPI1_Exchange8bit
       _Wireless_isDataTransmitSuccessful
         _RF_GetStatus
           _RF_WriteRead
             _SPI_WriteRead
               _SPI1_Exchange8bit
       _Wireless_sendData
         _RF_GetStatus
           _RF_WriteRead
             _SPI_WriteRead
               _SPI1_Exchange8bit
         _RF_ResetStatusIRQ
           _RF_WriteRegister
             _SPI_WriteRead
               _SPI1_Exchange8bit
         _RF_TxPayload
           _RF_Write
             _SPI_WriteRead
               _SPI1_Exchange8bit
           _RF_WriteRegisterData
             _SPI_WriteBuffer
               _SPI_WriteRead
                 _SPI1_Exchange8bit
             _SPI_WriteRead
               _SPI1_Exchange8bit
       _limit
     _Wireless_sendData (ARG)
       _RF_GetStatus
         _RF_WriteRead
           _SPI_WriteRead
             _SPI1_Exchange8bit
       _RF_ResetStatusIRQ
         _RF_WriteRegister
           _SPI_WriteRead
             _SPI1_Exchange8bit
       _RF_TxPayload
         _RF_Write
           _SPI_WriteRead
             _SPI1_Exchange8bit
         _RF_WriteRegisterData
           _SPI_WriteBuffer
             _SPI_WriteRead
               _SPI1_Exchange8bit
           _SPI_WriteRead
             _SPI1_Exchange8bit
     ___ftadd (ARG)
       _Sensor_getSupplyVoltage (ARG)
         _ADC_GetConversionResult
         _ADC_IsConversionDone
         _ADC_SelectChannel
         _ADC_StartConversion
         _FVR_IsOutputReady
         _Sensor_peripheralSleep
         _Sensor_peripheralWake
         ___ftdiv
           ___altoft (ARG)
             ___ftpack
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
         ___lwtoft
           ___ftpack
       ___altoft (ARG)
         ___ftpack
         ___ftpack (ARG)
       ___ftdiv (ARG)
         ___altoft (ARG)
           ___ftpack
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
       ___ftneg (ARG)
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
         ___lwtoft (ARG)
           ___ftpack
       ___ftpack (ARG)
       ___lwtoft (ARG)
         ___ftpack
     ___ftmul (ARG)
       _Sensor_getSupplyVoltage (ARG)
         _ADC_GetConversionResult
         _ADC_IsConversionDone
         _ADC_SelectChannel
         _ADC_StartConversion
         _FVR_IsOutputReady
         _Sensor_peripheralSleep
         _Sensor_peripheralWake
         ___ftdiv
           ___altoft (ARG)
             ___ftpack
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
         ___lwtoft
           ___ftpack
       ___altoft (ARG)
         ___ftpack
         ___ftpack (ARG)
       ___awtoft (ARG)
         ___ftpack
       ___ftadd (ARG)
         _Sensor_getSupplyVoltage (ARG)
           _ADC_GetConversionResult
           _ADC_IsConversionDone
           _ADC_SelectChannel
           _ADC_StartConversion
           _FVR_IsOutputReady
           _Sensor_peripheralSleep
           _Sensor_peripheralWake
           ___ftdiv
             ___altoft (ARG)
               ___ftpack
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
           ___lwtoft
             ___ftpack
         ___altoft (ARG)
           ___ftpack
           ___ftpack (ARG)
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
         ___ftneg (ARG)
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
           ___lwtoft (ARG)
             ___ftpack
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
       ___ftdiv (ARG)
         ___altoft (ARG)
           ___ftpack
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
       ___ftneg (ARG)
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
         ___lwtoft (ARG)
           ___ftpack
       ___ftpack (ARG)
       ___lwtoft (ARG)
         ___ftpack
     ___fttol (ARG)
       _Sensor_getSupplyVoltage (ARG)
         _ADC_GetConversionResult
         _ADC_IsConversionDone
         _ADC_SelectChannel
         _ADC_StartConversion
         _FVR_IsOutputReady
         _Sensor_peripheralSleep
         _Sensor_peripheralWake
         ___ftdiv
           ___altoft (ARG)
             ___ftpack
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
         ___lwtoft
           ___ftpack
       ___altoft (ARG)
         ___ftpack
         ___ftpack (ARG)
       ___ftadd (ARG)
         _Sensor_getSupplyVoltage (ARG)
           _ADC_GetConversionResult
           _ADC_IsConversionDone
           _ADC_SelectChannel
           _ADC_StartConversion
           _FVR_IsOutputReady
           _Sensor_peripheralSleep
           _Sensor_peripheralWake
           ___ftdiv
             ___altoft (ARG)
               ___ftpack
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
           ___lwtoft
             ___ftpack
         ___altoft (ARG)
           ___ftpack
           ___ftpack (ARG)
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
         ___ftneg (ARG)
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
           ___lwtoft (ARG)
             ___ftpack
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
       ___ftmul (ARG)
         _Sensor_getSupplyVoltage (ARG)
           _ADC_GetConversionResult
           _ADC_IsConversionDone
           _ADC_SelectChannel
           _ADC_StartConversion
           _FVR_IsOutputReady
           _Sensor_peripheralSleep
           _Sensor_peripheralWake
           ___ftdiv
             ___altoft (ARG)
               ___ftpack
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
           ___lwtoft
             ___ftpack
         ___altoft (ARG)
           ___ftpack
           ___ftpack (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           _Sensor_getSupplyVoltage (ARG)
             _ADC_GetConversionResult
             _ADC_IsConversionDone
             _ADC_SelectChannel
             _ADC_StartConversion
             _FVR_IsOutputReady
             _Sensor_peripheralSleep
             _Sensor_peripheralWake
             ___ftdiv
               ___altoft (ARG)
                 ___ftpack
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
             ___lwtoft
               ___ftpack
           ___altoft (ARG)
             ___ftpack
             ___ftpack (ARG)
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
           ___ftneg (ARG)
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
             ___lwtoft (ARG)
               ___ftpack
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
         ___ftneg (ARG)
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
           ___lwtoft (ARG)
             ___ftpack
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
     ___lldiv (ARG)
     ___lwdiv (ARG)
   _Wireless_sleep
     _RF_ReadRegisterData
       _SPI_WriteRead
         _SPI1_Exchange8bit
       _SPI_WriteReadBuffer
         _SPI_WriteRead
           _SPI1_Exchange8bit
     _RF_WriteRegister
       _SPI_WriteRead
         _SPI1_Exchange8bit
   _Wireless_wake
     _RF_ReadRegisterData
       _SPI_WriteRead
         _SPI1_Exchange8bit
       _SPI_WriteReadBuffer
         _SPI_WriteRead
           _SPI1_Exchange8bit
     _RF_WriteRegister
       _SPI_WriteRead
         _SPI1_Exchange8bit
   ___lldiv
   ___lwdiv
   _setSleepTime

 _INTERRUPT_InterruptManager (ROOT)
   _I2C2_BusCollisionISR
   _I2C2_ISR
     _I2C2_FunctionComplete
     _I2C2_Stop
   _PIN_MANAGER_IOC
     _IOCAF2_ISR
       Absolute function(Fake) *
       _IOCAF2_DefaultInterruptHandler *
   _TMR1_ISR
     _TMR1_CallBack
       Absolute function(Fake) *
       _TMR1_DefaultInterruptHandler *
       _Timeout_increment *

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             3F0      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      7       E       2      100.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50     4F      4F       5       98.8%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BANK1               50     2A      46       7       87.5%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BITBANK2            50      0       0       8        0.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BANK2               50      0      4E       9       97.5%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BITBANK3            50      0       0      10        0.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BANK3               50      C      3C      11       75.0%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BITBANK4            50      0       0      12        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BANK4               50      0       0      13        0.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BITBANK5            50      0       0      14        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BANK5               50      0       0      15        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BITBANK6            50      0       0      16        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BANK6               50      0       0      17        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BITBANK7            50      0       0      18        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BANK7               50      0       0      19        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
ABS                  0      0     12D      20        0.0%
BITBANK8            50      0       0      21        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BANK8               50      0       0      22        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITBANK9            50      0       0      23        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BANK9               50      0       0      24        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITBANK10           50      0       0      25        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BANK10              50      0       0      26        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITBANK11           50      0       0      27        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BANK11              50      0       0      28        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITBANK12           30      0       0      29        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BANK12              30      0       0      30        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
DATA                 0      0     12D      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V1.45 build -152302408 
Symbol Table                                                                                   Mon Oct 07 21:54:44 2019

                                          _Wireless_init 0C08  
                                      _SPI1_Exchange8bit 1356  
                                          _Wireless_wake 1605  
                                     ??_RF_WriteRegister 0024  
                                           _RF_TxPayload 153C  
                                           ___altoft@exp 002F  
                                         _Wireless_sleep 1486  
                                                      pc 0002  
                           __end_of_Wireless_packageData 1000  
                                     ?_SPI1_Exchange8bit 0070  
                                            __CFG_CP$OFF 0000  
                                  ?_I2C2_MasterTRBInsert 0021  
                                          ___altoft@sign 0030  
                                                     _b1 01A8  
                           __size_of_RF_ReadRegisterData 001D  
                                 __end_of_FVR_Initialize 12BB  
                                    RF_TxPayload@payload 0030  
                                      ??_SPI_WriteBuffer 0026  
                        __size_of_Sensor_peripheralSleep 0005  
                         I2C2_MasterReadTRBBuild@address 0024  
                        HMC5883L_I2C_BufferRead@ReadAddr 003E  
                                           ___ftadd@exp1 0055  
                                           ___ftadd@exp2 0054  
                                          _doorOpenAngle 00DE  
                                            __CFG_LVP$ON 0000  
                                           ___ftadd@sign 0053  
                                                    l522 135E  
                                                    l358 09F4  
                                                    l498 16C2  
                                                    _PR2 001B  
                                       ??_RF_DataIsReady 0026  
                                           __CFG_CPD$OFF 0000  
                                        _timer1ReloadVal 007C  
                                    ??_SPI1_Exchange8bit 0021  
                                           ?_DOOR_update 0027  
                                        _TMR2_Initialize 1317  
                                           __CFG_BORV$LO 0000  
                                                    wreg 0009  
                                           _RF_WriteRead 1459  
                         HMC5883L_I2C_BufferRead@pBuffer 003C  
                                           __CFG_IESO$ON 0000  
                     __end_of_IOCAF2_SetInterruptHandler 133A  
                             _IOCAF2_SetInterruptHandler 1331  
                                          _globalCounter 00CF  
                                      _Wireless_sendData 1418  
                                    _BMP_readTemperature 0077  
                                 ??_RF_WriteRegisterData 002C  
                                          _DOOR_resetPos 12B4  
                                           ___ftdiv@cntr 003B  
                                       __end_of_I2C2_ISR 0685  
                                     ?_Wireless_sendData 0031  
                                           ___ftdiv@sign 0040  
                                 RF_ResetStatusIRQ@flags 0026  
                                                   l1100 0D3C  
                                                   l1026 0086  
                                                   l1027 0096  
                                                   l1125 0FF3  
                                                   l1143 0B8E  
                                                   l1408 078C  
                                                   l1550 0B03  
                                                   l1542 0AE8  
                                                   l1633 0D00  
                                                   l1549 0AFB  
                                                   l1573 0724  
                                                   l6101 0D84  
                                                   l6031 087C  
                                                   l6121 0D9D  
                                                   l6203 0BFA  
                                                   l6037 0889  
                                                   l6125 0DAD  
                                                   l6117 0D9B  
                                                   l6311 06F0  
                                                   l6207 0C00  
                                                   l6135 0DBD  
                                                   l5521 09E6  
                                                   l6065 0B4E  
                                                   l6057 0B32  
                                                   l6241 07E6  
                                                   l6313 06FA  
                                                   l6305 06DD  
                                                   l5523 09EC  
                                                   l6227 07AD  
                                                   l6219 079D  
                                                   l6323 0716  
                                                   l6315 06FF  
                                                   l6411 0C9E  
                                                   l6139 0DBF  
                                                   l5517 09DF  
                                                   l6165 0902  
                                                   l6245 07F4  
                                                   l6237 07DB  
                                                   l6229 07BB  
                                                   l6261 0861  
                                                   l6333 0748  
                                                   l6325 0720  
                                                   l6317 0703  
                                                   l6085 0D2D  
                                                   l5543 173D  
                                                   l5711 0ABE  
                                                   l6343 0763  
                                                   l6431 0CE8  
                                                   l6087 0D4C  
                                                   l5633 0A20  
                                                   l6273 166F  
                                                   l6329 0736  
                                                   l6353 0E87  
                                                   l5537 1523  
                                                   l6193 0BAA  
                                                   l6089 0D66  
                                                   l6601 0962  
                                                   l5619 094F  
                                                   l5643 0A44  
                                                   l5715 0AC5  
                                                   l6259 0851  
                                                   l6283 06AD  
                                                   l6371 0ED8  
                                                   l6443 0D12  
                                                   l6611 0990  
                                                   l6603 0970  
                                                   l5549 1713  
                                                   l5629 0A15  
                                                   l5725 0AED  
                                                   l5717 0ACF  
                                                   l6293 06C3  
                                                   l6437 0CF6  
                                                   l6429 0CD7  
                                                   l6197 0BB7  
                                                   l5805 16DF  
                                                   l6525 0FEA  
                                                   l5655 0A55  
                                                   l5647 0A4F  
                                                   l5639 0A26  
                                                   l5727 0AF5  
                                                   l5719 0AD4  
                                                   l6287 06B4  
                                                   l5911 0E35  
                                                   l6383 0EF4  
                                                   l6375 0EE0  
                                                   l6359 0E9D  
                                                   l6439 0D04  
                                                   l6615 099B  
                                                   l6631 17E0  
                                                   l5577 1647  
                                                   l6641 17FB  
                                                   l6387 0EFC  
                                                   l5827 15C2  
                                                   l6637 17F2  
                                                   l6629 17D4  
                                                   l6805 0519  
                                                   l5783 0829  
                                                   l5919 0E4E  
                                                   l6807 052C  
                                                   l6497 00E6  
                                                   l6489 00C5  
                                                   l5873 17A4  
                                                   l6753 042B  
                                                   l6737 03CE  
                                                   l5795 083A  
                                                   l5787 0834  
                                                   l5891 0DDE  
                                                   l5859 137A  
                                                   l6755 0433  
                                                   l5877 17AE  
                                                   l6767 0446  
                                                   l5897 0DF4  
                                                   l6793 04E1  
                                                   l6777 04A4  
                             __size_of_HMC5883L_ReadBits 0046  
                                                   _LATA 010C  
                                                   _LATB 010D  
                                                   _LATC 010E  
                                                   u6015 06F1  
                                                   u5065 094B  
                                                   u5235 0B0A  
                                                   u5155 0ACA  
                                                   u6045 0704  
                                                   u5405 0E36  
                                                   u5175 0AE3  
                                                   u5415 0E45  
                                                   u6215 0EFD  
                                                   u5335 17AF  
                                                   u5600 0DC5  
                                                   u5425 0E4F  
                                                   u6225 0F03  
                                                   u6145 0EA9  
                                                   u5345 17B6  
                                                   u5195 0AF0  
                                                   u6075 0717  
                                                   u6155 0EB9  
                                                   u6325 0CF7  
                                                   u6405 00FF  
                                                   u5285 16D7  
                                                   u6175 0EE1  
                                                   u6415 010D  
                                                   u7207 1552  
                                                   u5295 16EA  
                                                   u5385 0E06  
                                                   u6185 0EE7  
                                                   u6265 0CA6  
                                                   u7217 13A6  
                                                   u5395 0E16  
                                                   u7307 1640  
                                                   u7227 1469  
                                                   u5805 07BC  
                                                   u6445 0A9F  
                                                   u7317 143F  
                                                   u7237 15E4  
                                                   u6525 0965  
                                                   u5815 07D0  
                                                   u6295 0CD8  
                                                   u7247 14E5  
                                                   u6615 17E1  
                                                   u7167 0367  
                                                   u5680 08F7  
                                                   u5664 08D9  
                                                   u5665 08D8  
                                                   u5825 07DC  
                                                   u7257 0C0E  
                                                   u6545 0971  
                                                   u6625 17EB  
                                                   u7177 038A  
                                                   u5674 08E5  
                                                   u5675 08E4  
                                                   u7267 15AA  
                                                   u6555 0985  
                                                   u6635 17F3  
                                                   u7187 03DC  
                                                   u5685 08F5  
                                                   u7277 1627  
                                                   u7197 161E  
                                                   u6565 0991  
                                                   u7287 162D  
                                                   u5785 07B0  
                                                   u5865 0856  
                                                   u7297 163A  
                                                   u6595 17D7  
                                                   u5985 06DE  
                                                   u6885 04F7  
                                                   _TMR2 001A  
                                                   _WPUA 020C  
                                                   _WPUB 020D  
                                                   _WPUC 020E  
                                           __CFG_WRT$OFF 0000  
                                           _Storage_save 14B7  
                                          __CFG_FCMEN$ON 0000  
                                                   _data 01C0  
                                                   _main 0345  
                                     _Timeout_hasExpired 0904  
                                                   _curr 0120  
                                           ___ftpack@arg 0021  
                                                   _var1 0134  
                                                   _var2 0131  
                                           ___ftpack@exp 0024  
                                        __end_of_RF_Init 12C3  
                                                   fsr0h 0005  
                                                   fsr1h 0007  
                                                   indf0 0000  
                                                   fsr0l 0004  
                                                   indf1 0001  
                                                   fsr1l 0006  
                                                   btemp 007E  
                            ??_Timeout_updateCurrentTime 002D  
                            I2C2_MasterReadTRBBuild@ptrb 0028  
                                          __CFG_BOREN$ON 0000  
                                    ??_Wireless_sendData 0032  
                            RF_WriteRegisterData@bufSize 002B  
                                     __size_of_DOOR_init 0001  
                                                   start 0037  
                                      _Timeout_increment 134C  
                              __end_of_SPI1_Exchange8bit 1362  
                               ?_Sensor_getSupplyVoltage 0041  
                       __end_of_Diag_getTempSensorHealth 12AE  
                       __end_of_Diag_setTempSensorHealth 130F  
                                 __end_of_Wireless_sleep 149E  
                              HMC5883L_ReadBits@bitStart 0044  
                                         ?_Wireless_init 0070  
                             ??_TMR1_SetInterruptHandler 0023  
                                         ?_Wireless_wake 0070  
                                          _SPI_WriteRead 12E0  
                                          __CFG_MCLRE$ON 0000  
                                           ___ftmul@cntr 0064  
                                     ?_Timeout_increment 0070  
                                           ___ftmul@sign 0065  
                                    ?_Timeout_hasExpired 0070  
                                   ?_BMP_readTemperature 00A6  
                                           ___fttol@exp1 00A5  
                              __size_of_DATAEE_WriteByte 0023  
                                           ___fttol@lval 00A1  
                                       __end_of_BMP_init 0B8E  
                                             _i2c2_state 0079  
                                       __end_of_DOOR_run 12B1  
                                        ?_FVR_Initialize 0070  
                         __size_of_OSCILLATOR_Initialize 0007  
                                    __size_of_IOCAF2_ISR 000D  
                          __end_of_OSCILLATOR_Initialize 12F9  
                                    ??_Timeout_increment 0070  
                                _I2C2_MasterReadTRBBuild 176F  
                                        __end_of___aldiv 07FD  
                                                  ?_main 0070  
                                        __end_of___ftadd 077B  
                                      __end_of_I2C2_Stop 1574  
                                        __end_of___ftdiv 0E70  
                                        __end_of___ftneg 1331  
                                        __end_of___lldiv 09A4  
                                        __end_of___ftmul 0F24  
                                                  _T1CON 0018  
                                        __end_of___fttol 0D22  
                                                  _T2CON 001C  
                                        __end_of___lwdiv 1800  
                                                  i1l300 05B6  
                         __size_of_I2C2_FunctionComplete 0011  
                                                  i1l310 05FE  
                                                  i1l161 0032  
                                                  i1l153 0015  
                                                  i1l322 0666  
                                                  i1l314 061E  
                                                  i1l155 0021  
                                                  i1l317 0633  
                                                  i1l157 002D  
                                                  i1l318 0641  
                                                  i1l329 13B8  
                                                  i1l293 0582  
                                                  i1l294 0589  
                                                  i1l288 0554  
                                                  i1l299 05AA  
                          __end_of_I2C2_FunctionComplete 13BB  
                              __end_of_Wireless_sendData 142D  
                                    setSleepTime@timeSec 0021  
                                                  _TMR1H 0017  
                                                  _TMR1L 0016  
                                                  _TRISA 008C  
                                                  _TRISB 008D  
                                                  _TRISC 008E  
                       __size_of_ADC_GetConversionResult 0009  
                                    ___lmul@multiplicand 0025  
                                   ??_Timeout_hasExpired 0021  
                                       __end_of_TMR1_ISR 1328  
                                                  _cTemp 012B  
                                                  _adc_p 01A4  
                                                  _adc_t 0124  
                                         ?_DOOR_resetPos 0070  
                                 __size_of_I2C_ByteWrite 003C  
                                          ___awtoft@sign 002E  
                                __end_of_PIN_MANAGER_IOC 12E0  
                                         _WDT_Initialize 12BB  
                                                  _errno 013A  
                                                  _limit 16CC  
                                          ___ftpack@sign 0025  
                           I2C2_MasterReadTRBBuild@pdata 0021  
                                   _Diag_getSensorHealth 13DE  
                                __end_of_TMR1_Initialize 1486  
                                       __end_of_RF_Write 13AA  
                                                  pclath 000A  
                                 _Sensor_peripheralSleep 12CB  
                                   RF_DataIsReady@status 0028  
                              __end_of_Timeout_increment 1356  
                                                  status 0003  
                                                  wtemp0 007E  
                               __size_of_SPI1_Initialize 0007  
                                         ?_SPI_WriteRead 0070  
                                        ?_Wireless_sleep 0070  
                                      ??_I2C2_MasterRead 002F  
                                RF_WriteRegisterData@buf 0029  
                                RF_WriteRegisterData@reg 002D  
                                  ??_BMP_readTemperature 00A9  
                                    RF_WriteRegister@reg 0024  
                                      ??_I2C2_Initialize 0021  
                                        __initialization 0039  
                                    RF_WriteRegister@val 0023  
                             Wireless_packageData@status 00C5  
                                           __end_of_main 053C  
                                 ??_I2C2_MasterTRBInsert 0023  
                                __end_of_TMR2_Initialize 131F  
                            ?_INTERRUPT_InterruptManager 0070  
                       __end_of_I2C2_MasterWriteTRBBuild 16A9  
                                                 ??_main 00C8  
                                          ___fttol@sign1 00A0  
                              _Timeout_updateCurrentTime 0A57  
                                            _i2c2_object 00CA  
                                         __CFG_PLLEN$OFF 0000  
                                      __end_of_DOOR_init 0004  
                                 __end_of_WDT_Initialize 12BF  
                                __size_of_I2C_BufferRead 005E  
                          __size_of_ADC_IsConversionDone 0007  
                                                 _ADCON0 009D  
                                                 _ADCON1 009E  
                                     _Timeout_setTimeout 149E  
                                       __end_of___altoft 0879  
                                                 ?_limit 0021  
                                                 i1S7053 1000  
                                              ??_RF_Init 0021  
                                                 _ADRESH 009C  
                                                 _EEADRH 0192  
                                                 _ADRESL 009B  
                                                 _EEADRL 0191  
                                                 _EEDATH 0194  
                                                 _EEDATL 0193  
                                                 _EECON2 0196  
                                    I2C_ByteWrite@status 0038  
                                  ?_Diag_getSensorHealth 0070  
                                       __end_of___awtoft 1686  
                                                 _ANSELA 018C  
                                                 _ANSELB 018D  
                                                 _ANSELC 018E  
                                       __end_of___ftpack 0B1A  
                                                 _BORCON 0116  
                                                 _T1GCON 0019  
                                   _Wireless_packageData 0F24  
                           __end_of_I2C2_BusCollisionISR 12AA  
                                                 i1l4307 1572  
                                                 i1l4289 136C  
                                                 i1l4811 05EF  
                                                 i1l4833 0625  
                                                 i1l4825 060C  
                                                 i1l4817 05F9  
                                                 i1l4761 0576  
                                                 i1l4861 066A  
                                                 i1l4845 0647  
                                                 i1l4773 0595  
                                                 i1l4863 066D  
                                                 i1l4871 067A  
                                                 i1l4865 0671  
                                                 i1l4849 064E  
                                                 i1l4793 05D3  
                                                 i1l4779 05A5  
                                                 _FVRCON 0117  
                        __end_of_Sensor_getSupplyVoltage 08BE  
                               _BMP_readTemperature$2648 00B5  
                                       __end_of___lwtoft 1418  
                                                 _OSCCON 0099  
                                                 _WDTCON 0097  
                                    ?_Timeout_setTimeout 0021  
                                  I2C2_MasterRead@length 002B  
                                  SPI1_Exchange8bit@data 0021  
                                        ??_Wireless_init 002E  
                                        ??_Wireless_wake 002F  
                                    _SPI_WriteReadBuffer 1644  
                             __size_of_SPI1_Exchange8bit 000C  
                                         __CFG_PWRTE$OFF 0000  
                             HMC5883L_ReadBits@slaveAddr 004A  
                                       Wireless_wake@reg 0030  
                                       SPI_WriteBuffer@i 0028  
                   __end_of_TMR1_DefaultInterruptHandler 0003  
                  __size_of_TMR1_DefaultInterruptHandler 0001  
                           _TMR1_DefaultInterruptHandler 0002  
                                          _I2C_ByteWrite 0800  
                                   HMC5883L_ReadBits@tmp 004C  
                                  RF_DataIsReady@channel 0027  
                                                 ___lmul 179B  
                                              ??___aldiv 0029  
                                                 _dig_P1 0150  
                                                 _dig_P2 014E  
                                                 _dig_P3 014C  
                                                 _dig_P4 014A  
                                                 _dig_P5 0148  
                                                 _dig_P6 0146  
                                                 _dig_P7 0144  
                                                 _dig_P8 0142  
                                                 _dig_P9 0140  
                                                 _dig_T1 00D3  
                                                 _dig_T2 0156  
                                                 _dig_T3 0154  
                                                 _dig_T4 0152  
                                              ??___ftadd 004F  
                                         _p_i2c2_current 0077  
                                         __CFG_STVREN$ON 0000  
                              ??_I2C2_MasterReadTRBBuild 0026  
                                              ??___ftdiv 0037  
                                              ??___ftneg 0044  
                      Wireless_changeTransmitPower@power 0030  
                                              ??___lldiv 0029  
                                       SPI_WriteRead@val 0022  
                                              ??___ftmul 005C  
                                              ??___fttol 006A  
                                 RF_ReadRegisterData@buf 002A  
                               _Diag_getTempSensorHealth 12AB  
                                 RF_ReadRegisterData@reg 002E  
                                              ??___lwdiv 0025  
                               _Diag_setTempSensorHealth 1307  
Wireless_determineTransmitPower@numOfSuccessfulTransmits 00DA  
                         __size_of_Sensor_peripheralWake 0005  
                                                 _t_fine 012E  
                                              ?_I2C2_ISR 0070  
                          __end_of_Sensor_peripheralWake 12D5  
                               I2C2_Stop@completion_code 0072  
                                           _HMC5883Lmode 00DF  
                                   ??_Timeout_setTimeout 0023  
                          I2C2_MasterReadTRBBuild@length 0023  
                                  ___ftmul@f3_as_product 0061  
                                   ?_SPI_WriteReadBuffer 0023  
                             __size_of_Wireless_sendData 0015  
                                        ??_DOOR_resetPos 0021  
                                RF_TxPayload@payloadSize 002E  
                                        ?_WDT_Initialize 0070  
                                     _sensorUpdatePeriod 016A  
                                   __size_of_DOOR_update 0016  
               TMR1_SetInterruptHandler@InterruptHandler 0021  
             IOCAF2_SetInterruptHandler@InterruptHandler 0021  
                                   DOOR_update@openAngle 0029  
                                       ?_PIN_MANAGER_IOC 0070  
                                  ?_Wireless_packageData 00BA  
                                           ??_IOCAF2_ISR 0070  
                               HMC5883L_ReadBits@regAddr 0043  
                                  __end_of_TMR1_CallBack 138A  
                                    _RF_ReadRegisterData 15CB  
                                       ?_TMR1_Initialize 0070  
                                      _SYSTEM_Initialize 1506  
                                __end_of__initialization 0073  
                                             ___altoft@c 0029  
                             __size_of_Timeout_increment 000A  
                                              ?_BMP_init 0070  
                                              ?_DOOR_run 0070  
                                             ___ftadd@f1 0049  
                                             ___ftadd@f2 004C  
                                        ??_SPI_WriteRead 0022  
                                     ?_SYSTEM_Initialize 0070  
                      __size_of_Timeout_getGlobalCounter 0011  
                                             ___ftdiv@f1 0034  
                                             ___ftdiv@f2 0031  
                                             ___ftdiv@f3 003C  
                              ?_Timeout_getGlobalCounter 0021  
                                      ?_I2C2_MasterWrite 0028  
                                        _SPI_WriteBuffer 1521  
                                             ___ftneg@f1 0041  
                                             ___awtoft@c 0029  
                                         ?_I2C_ByteWrite 002F  
                                             ___ftmul@f1 0056  
                                             ___ftmul@f2 0059  
                                              BMP_init@t 003F  
                                     ??_I2C2_MasterWrite 002C  
                                             ___fttol@f1 0066  
                           __size_of_ADC_StartConversion 0003  
                                         __pcstackCOMMON 0070  
          Wireless_determineTransmitPower@numOfTransmits 00DB  
                              Wireless_packageData@tempC 00BB  
                            I2C_BufferRead@NumByteToRead 0034  
                                           __pidataBANK1 07FD  
                                           __pidataBANK2 12C7  
                                    ??_SYSTEM_Initialize 0023  
                                 I2C_ByteWrite@WriteAddr 0030  
                                              ?_TMR1_ISR 0070  
                          ?_TMR1_DefaultInterruptHandler 0070  
                                       _DATAEE_WriteByte 16A9  
                                          __end_of_limit 16F2  
                                      ??_SPI1_Initialize 0021  
                                   ?_RF_ReadRegisterData 002A  
                                         _i2c2_trb_count 00E2  
                                             ??_I2C2_ISR 0073  
                                       ?_TMR2_Initialize 0070  
                                              ?_RF_Write 0070  
                                     __end_of_IOCAF2_ISR 136F  
                                             ___lwtoft@c 0029  
                                  ??_SPI_WriteReadBuffer 0025  
                                _ADC_GetConversionResult 1343  
                              __size_of_RF_WriteRegister 0016  
                                         _OPTION_REGbits 0095  
                               ?_HMC5883L_I2C_BufferRead 003C  
                                 Storage_save@closeAngle 0024  
                                __size_of_TMR1_ReadTimer 001D  
                               _I2C2_MasterWriteTRBBuild 1686  
                            ?_IOCAF2_SetInterruptHandler 0021  
                       ??_IOCAF2_DefaultInterruptHandler 0070  
                        ?_IOCAF2_DefaultInterruptHandler 0070  
                              DOOR_run@doorStateDuration 01A0  
                                 ??_Diag_getSensorHealth 0021  
                           I2C2_MasterWriteTRBBuild@ptrb 0027  
                                                ??_limit 0027  
                              __end_of_SYSTEM_Initialize 1521  
                               __size_of_RF_ReadRegister 001A  
                                             __pbssBANK1 00CA  
                                             __pbssBANK2 0120  
                                             __pbssBANK3 01A0  
                                             ??_BMP_init 003C  
                                             ??_DOOR_run 0021  
                                             __pnvCOMMON 007C  
                                   I2C_ByteWrite@pBuffer 002F  
                              SPI_WriteReadBuffer@bufOut 0028  
                                       ??_FVR_Initialize 0021  
                                             __pmaintext 0345  
                                  SPI_WriteBuffer@bufOut 0023  
                                   SPI_WriteReadBuffer@i 0029  
                                                ?___lmul 0021  
                                Diag_getSensorHealth@var 0022  
                                             ??_TMR1_ISR 0070  
                                  ??_RF_ReadRegisterData 002C  
                                             __pintentry 0004  
                                          ?_setSleepTime 0021  
                                              ?___altoft 0029  
                                         ___lmul@product 0029  
                                         main@doorStatus 01DB  
                                              ?___awtoft 0029  
                                              ?___ftpack 0021  
                                                _APFCON0 011D  
                                                _APFCON1 011E  
                                   _I2C2_BusCollisionISR 12A9  
                                             ??_RF_Write 0023  
                              DOOR_run@previousDoorState 00D7  
                                __size_of_ADC_Initialize 0008  
                                              ?___lwtoft 0029  
                       __size_of_Sensor_getSupplyVoltage 0045  
                         Wireless_checkDataReceived@data 0037  
                           ??_Wireless_checkDataReceived 0033  
                                         _I2C_BufferRead 09F9  
                      I2C2_ISR@i2c_10bit_address_restart 00E0  
                                 I2C2_MasterRead@address 002C  
                                              _I2C2_Stop 1557  
                               SPI_WriteReadBuffer@bufIn 0023  
                                                _OSCTUNE 0098  
                                ?_Sensor_peripheralSleep 0070  
                                                _SSP1ADD 0212  
                                                _SSP2ADD 021A  
                                                _SSP1BUF 0211  
                                 ??_Wireless_packageData 006E  
                                                _SSP2BUF 0219  
                                 I2C_ByteWrite@slaveAddr 0035  
                                                _RF_Init 12BF  
                     __size_of_Timeout_updateCurrentTime 005E  
                   __end_of_Wireless_changeTransmitPower 1605  
                  __size_of_Wireless_changeTransmitPower 001D  
                           _Wireless_changeTransmitPower 15E8  
                                        _I2C2_MasterRead 16F2  
                                __end_of_SPI_WriteBuffer 153C  
                                       main@doorOpenTime 01D7  
                                        _I2C2_Initialize 14EB  
                          __size_of_RF_WriteRegisterData 001D  
                                       ??_Wireless_sleep 002F  
                                   DATAEE_WriteByte@bAdd 0022  
                                 I2C2_MasterRead@trBlock 0158  
                                        ??_I2C_ByteWrite 0031  
                                      Wireless_sleep@reg 0030  
                                  HMC5883L_ReadBits@data 0046  
                                                ___aldiv 077B  
                                  HMC5883L_ReadBits@mask 004B  
                                         ??_setSleepTime 0023  
                                        __size_of___lmul 0030  
                                                ___ftadd 0685  
                                                ___ftdiv 0DC7  
                                                ___ftneg 1328  
                                                ___lldiv 0951  
                                                ___ftmul 0E70  
                                                ___fttol 0C83  
                                                ___lwdiv 17CB  
                                             ??___altoft 002D  
                              ??_ADC_GetConversionResult 0023  
                        __end_of_HMC5883L_I2C_BufferRead 13DE  
                                  ?_I2C2_BusCollisionISR 0070  
                                             ??___awtoft 002C  
                                             ??___ftpack 0026  
                               TMR1_ReadTimer@readValLow 002B  
                                                _heading 01C8  
                              I2C2_MasterTRBInsert@count 0024  
                                                __ptext1 12D5  
                                                __ptext2 17CB  
                                                __ptext3 0951  
                                                __ptext4 1605  
                                                __ptext5 1486  
                                                __ptext6 0F24  
                                                __ptext7 0D22  
                                                __ptext8 16CC  
                                                __ptext9 1418  
                              I2C2_MasterTRBInsert@pflag 0022  
                                Wireless_packageData@var 00C4  
                                 __end_of_I2C_BufferRead 0A57  
                                             ??___lwtoft 002C  
                         ??_TMR1_DefaultInterruptHandler 0070  
                              TMR1_ReadTimer@readValHigh 002A  
                                              _T1CONbits 0018  
                                  _OSCILLATOR_Initialize 12F2  
                                              _T2CONbits 001C  
                             __end_ofWireless_init@TADDR 1826  
                         __end_of_Sensor_peripheralSleep 12D0  
                      __size_of_TMR1_SetInterruptHandler 0009  
                                       ___aldiv@dividend 0025  
                               ??_PIN_MANAGER_Initialize 0023  
                              ?_TMR1_SetInterruptHandler 0021  
                                              _IOCAFbits 0393  
                            main@doorClosedUpdateCounter 01D1  
                                              _IOCANbits 0392  
                                             ?_I2C2_Stop 0070  
                                              _IOCAPbits 0391  
                                  _I2C2_FunctionComplete 13AA  
                                                _timeOut 013C  
                            __size_of_Timeout_hasExpired 004D  
                                              _DOOR_init 0003  
                             __size_of_SYSTEM_Initialize 001B  
                                                main@dur 01D5  
                                                clrloop0 12ED  
                                   end_of_initialization 0073  
                                __size_of_RF_DataIsReady 001D  
                          ?_Wireless_changeTransmitPower 0070  
                            __end_of_BMP_readTemperature 0345  
                             ??_Diag_getTempSensorHealth 0021  
                             ??_Diag_setTempSensorHealth 0021  
                                      _FVR_IsOutputReady 12E6  
                                      ??_RF_ReadRegister 0023  
                                        ___lldiv@divisor 0021  
                           __end_of_ADC_IsConversionDone 1307  
                                        ___lldiv@counter 002E  
                                     ?_FVR_IsOutputReady 0070  
                                          ?_RF_GetStatus 0070  
                                  I2C2_MasterWrite@pdata 002E  
                                     _p_i2c2_trb_current 0078  
                                  I2C2_MasterWrite@pflag 002B  
                                       ___aldiv@quotient 002C  
                                 I2C2_ISR@i2c_bytes_left 00E1  
                Wireless_isDataTransmitSuccessful@status 0026  
                          __size_of_I2C2_MasterTRBInsert 0055  
                                    ??_FVR_IsOutputReady 0021  
                             Sensor_getSupplyVoltage@res 0047  
                                       ??_WDT_Initialize 0021  
                                              _PORTCbits 000E  
                                        ?_I2C_BufferRead 0031  
                                      __size_of_I2C2_ISR 0149  
                                       _RF_WriteRegister 142D  
                                __end_of_I2C2_MasterRead 171A  
                                       __CFG_FOSC$INTOSC 0000  
                                __end_of_I2C2_Initialize 1506  
                                         _TMR1_ReadTimer 1574  
                       __end_of_Timeout_getGlobalCounter 13CC  
                                    _ADC_StartConversion 12B1  
                           Timeout_updateCurrentTime@var 0031  
                                             ?_DOOR_init 0070  
                               __end_of_DATAEE_WriteByte 16CC  
                                       ?_SPI_WriteBuffer 0023  
                              __end_of_FVR_IsOutputReady 12EC  
                                            ___ftdiv@exp 003F  
                                        _SPI1_Initialize 12F9  
                             RF_ReadRegisterData@bufSize 002B  
                           HMC5883L_TestConnection@F3572 0137  
                                          ?_RF_RxPayload 002F  
              Wireless_determineTransmitPower@initialise 0038  
                                      __size_of_BMP_init 0074  
                           Wireless_packageData@openTime 00BA  
                                      __size_of_DOOR_run 0003  
                                  __end_of_Wireless_init 0C83  
                                         ??_RF_GetStatus 0025  
                                  __end_of_Wireless_wake 1624  
                                            ___ftmul@exp 0060  
                                   ?_ADC_StartConversion 0070  
                                          ?_RF_TxPayload 002E  
                                   _currentTransmitPower 00DC  
                                 ??_I2C2_BusCollisionISR 0070  
                                         __end_of___lmul 17CB  
                             ??_I2C2_MasterWriteTRBBuild 0025  
                                      __size_of_TMR1_ISR 0009  
                                _Sensor_getSupplyVoltage 0879  
                                         _ADC_Initialize 130F  
                                 ?_OSCILLATOR_Initialize 0070  
                                 __end_of_TMR1_ReadTimer 1591  
                     __end_of_Wireless_checkDataReceived 0C08  
                             _Wireless_checkDataReceived 0B8E  
                            __size_of_Timeout_setTimeout 0019  
                              __size_of_I2C2_MasterWrite 002A  
                                  _Sensor_peripheralWake 12D0  
                                        RF_WriteRead@val 0024  
                                          ??_DOOR_update 0028  
                                      __size_of_RF_Write 0010  
                                          ?_RF_WriteRead 0070  
                                 ?_I2C2_FunctionComplete 0070  
                                    start_initialization 0039  
                                RF_RxPayload@payloadSize 002F  
                                            ??_I2C2_Stop 0070  
                        __size_of_PIN_MANAGER_Initialize 002B  
                                  __end_of_DOOR_resetPos 12B7  
                                   __end_of_setSleepTime 12DA  
                                          ?_Storage_save 0024  
                       __size_of_HMC5883L_I2C_BufferRead 0012  
                                         ??_RF_RxPayload 0030  
                        I2C2_MasterWriteTRBBuild@address 0023  
                                            _addressSize 00E5  
                               __size_of_PIN_MANAGER_IOC 0006  
                                  __end_of_SPI_WriteRead 12E6  
                                   I2C2_MasterRead@pdata 0029  
                 __end_of_IOCAF2_DefaultInterruptHandler 12AB  
                __size_of_IOCAF2_DefaultInterruptHandler 0001  
                         _IOCAF2_DefaultInterruptHandler 12AA  
                               ?_I2C2_MasterReadTRBBuild 0021  
                         Sensor_getSupplyVoltage@voltage 0044  
                                   I2C2_MasterRead@pflag 002E  
                                            RF_Write@val 0023  
                         ??_Wireless_changeTransmitPower 002F  
                                         ??_RF_TxPayload 002F  
                                  ??_ADC_StartConversion 0021  
                               __size_of_TMR1_Initialize 0017  
                                               ??___lmul 0029  
                            __end_of_SPI_WriteReadBuffer 1664  
                          I2C2_MasterWriteTRBBuild@pdata 0021  
                                   I2C2_ISR@pi2c_buf_ptr 00D5  
                                 __end_of_ADC_Initialize 1317  
                                            __pdataBANK1 00E3  
                                            __pdataBANK2 016A  
                                 __size_of_TMR1_CallBack 000E  
                                        ?_TMR1_ReadTimer 0021  
                                      __size_of___altoft 003D  
                                HMC5883L_ReadBits@length 0045  
                                         ??_RF_WriteRead 0023  
                                      __size_of___awtoft 0022  
                                      __size_of___ftpack 0065  
                                       ?_I2C2_MasterRead 0029  
                                            __pbssCOMMON 0077  
                                       ?_I2C2_Initialize 0070  
                                              ___latbits 0002  
                                      __size_of___lwtoft 0015  
                                          __pcstackBANK0 0020  
                                          __pcstackBANK1 00A0  
                                          __pcstackBANK3 01D0  
                                   _ADC_IsConversionDone 1300  
                               __size_of_TMR2_Initialize 0008  
                                __end_of_SPI1_Initialize 1300  
                                            ??_DOOR_init 0021  
                                               ?_RF_Init 0070  
                                          _i2c2_tr_queue 0162  
                                         ??_Storage_save 0025  
                          __size_of_Diag_getSensorHealth 0012  
                      Wireless_checkDataReceived@channel 003B  
                                    __end_of_DOOR_update 1459  
                                         _RF_DataIsReady 15AE  
                               _Timeout_getGlobalCounter 13BB  
                             __size_of_FVR_IsOutputReady 0006  
                             SPI_WriteReadBuffer@bufSize 0024  
                                              __pnvBANK2 0166  
                            __end_of_RF_ReadRegisterData 15E8  
                              BMP_readTemperature@status 00B8  
                   HMC5883L_I2C_BufferRead@NumByteToRead 003F  
                                       ___lwdiv@dividend 0023  
                                 _PIN_MANAGER_Initialize 1744  
              __end_of_Wireless_isDataTransmitSuccessful 137C  
             __size_of_Wireless_isDataTransmitSuccessful 000D  
                    ??_Wireless_isDataTransmitSuccessful 0025  
                     ?_Wireless_isDataTransmitSuccessful 0070  
                      _Wireless_isDataTransmitSuccessful 136F  
                                      _RF_ResetStatusIRQ 1624  
                                 SPI_WriteBuffer@bufSize 0025  
                                      _ADC_SelectChannel 138A  
                               Wireless_sendData@payload 0034  
                       __end_of_TMR1_SetInterruptHandler 1343  
                                               ?___aldiv 0021  
                              ??_Sensor_getSupplyVoltage 0044  
                                               ?___ftadd 0049  
                                               ?___ftdiv 0031  
                                               ?___ftneg 0041  
                                               ?___lldiv 0021  
                                               ?___ftmul 0056  
                                               ?___fttol 0066  
                                               ?___lwdiv 0021  
                                     ?_RF_ResetStatusIRQ 0070  
                                        ?_ADC_Initialize 0070  
                           __end_of_RF_WriteRegisterData 15AE  
                                     ?_ADC_SelectChannel 0070  
                                               _I2C2_ISR 053C  
                           ??_INTERRUPT_InterruptManager 0020  
                                 ?_Sensor_peripheralWake 0070  
                                              __pswtext1 1000  
                                  Storage_save@openAngle 0026  
                                              _doorState 00D9  
                                    ??_RF_ResetStatusIRQ 0025  
                                    ??_ADC_SelectChannel 0021  
                                  ?_ADC_IsConversionDone 0070  
                                I2C_BufferRead@slaveAddr 003A  
                                       __CFG_WDTE$NSLEEP 0000  
                                   __end_of_RF_GetStatus 12C7  
                                        _RF_ReadRegister 14D1  
                                 __end_of_RF_DataIsReady 15CB  
                                       ___lwdiv@quotient 0027  
                                         __size_of_limit 0026  
                                 Wireless_packageData@t1 00C6  
                          __size_of_Wireless_packageData 00DC  
                        __end_of_I2C2_MasterReadTRBBuild 179B  
                                          _TMR1_CallBack 137C  
                                        ___aldiv@divisor 0021  
                                        ___aldiv@counter 002A  
                                               _BMP_init 0B1A  
                                               _DOOR_run 12AE  
                                               _LATCbits 010E  
                                     Wireless_init@TADDR 1821  
                                              clear_ram0 12EC  
                               __end_of_RF_WriteRegister 1443  
                                               _PIE1bits 0091  
                                               _PIE4bits 0094  
                              __end_of_RF_ResetStatusIRQ 1644  
                              __end_of_ADC_SelectChannel 139A  
                    __size_of_INTERRUPT_InterruptManager 0033  
                                  __end_of_I2C_ByteWrite 083C  
                                               _PIR1bits 0011  
                                               _PIR4bits 0014  
                                               _SSP1CON1 0215  
                                               _SSP2CON1 021D  
                                               _SSP2CON3 021F  
                                       ??_I2C_BufferRead 0036  
                                               _TMR1_ISR 131F  
                                               _SSP1STAT 0214  
                                               _SSP2STAT 021C  
                                      ??_PIN_MANAGER_IOC 0070  
                          I2C2_MasterTRBInsert@ptrb_list 0021  
                                      ??_TMR1_Initialize 0023  
                                               _RF_Write 139A  
                                             _ADCON0bits 009D  
                                       _I2C2_MasterWrite 171A  
                               ADC_SelectChannel@channel 0022  
                                __size_of_FVR_Initialize 0004  
                                   __end_of_RF_RxPayload 1403  
                             __end_of_Timeout_hasExpired 0951  
                                               _WPUCbits 020E  
                         Diag_setTempSensorHealth@health 0022  
                                            _DOOR_update 1443  
                                  __size_of_setSleepTime 0005  
                                 I2C_BufferRead@ReadAddr 0033  
                                  DATAEE_WriteByte@bData 0021  
                                   __end_of_RF_TxPayload 1557  
                                    __end_ofatan@coeff_a 1812  
                                    __end_ofatan@coeff_b 1821  
                                        ?_RF_DataIsReady 0070  
             Wireless_determineTransmitPower@testPayload 0039  
                                       ?_SPI1_Initialize 0070  
                                      ___lmul@multiplier 0021  
                           __end_of_I2C2_MasterTRBInsert 09F9  
                                       __size_of_RF_Init 0004  
                                         ?_TMR1_CallBack 0070  
                                      ?_DATAEE_WriteByte 0021  
                                _HMC5883L_I2C_BufferRead 13CC  
                                      ??_TMR2_Initialize 0021  
                             ?_Timeout_updateCurrentTime 0070  
                                     ??_DATAEE_WriteByte 0022  
                                      I2C_ByteWrite@data 0036  
                                             _EECON1bits 0195  
                                   __end_of_RF_WriteRead 146F  
                       HMC5883L_I2C_BufferRead@slaveAddr 0042  
                                 DOOR_update@closedAngle 0027  
                               ?_ADC_GetConversionResult 0021  
                                  TMR1_ReadTimer@readVal 0028  
                         I2C2_MasterWriteTRBBuild@length 0022  
                           __size_of_BMP_readTemperature 02CE  
                                __size_of_Wireless_sleep 0018  
                                ??_OSCILLATOR_Initialize 0021  
                                       __size_of___aldiv 0082  
                                       __size_of___ftadd 00F6  
                                           _setSleepTime 12D5  
                                       __size_of___ftdiv 00A9  
                                       __size_of___ftneg 0009  
                                       __size_of___lldiv 0053  
                                               ___altoft 083C  
                                       __size_of___ftmul 00B4  
                                       __size_of___fttol 009F  
                                   __end_of_Storage_save 14D1  
                                       __size_of___lwdiv 0035  
            Wireless_determineTransmitPower@latestResult 003A  
                                               ___awtoft 1664  
                                               ___ftpack 0AB5  
                                ??_I2C2_FunctionComplete 0070  
                               _TMR1_SetInterruptHandler 133A  
                      __size_of_Diag_getTempSensorHealth 0003  
                                __end_of_RF_ReadRegister 14EB  
                      __size_of_Diag_setTempSensorHealth 0008  
                              ?_Diag_getTempSensorHealth 0070  
                                               ___lwtoft 1403  
                              ?_Diag_setTempSensorHealth 0070  
                                  _TMR1_InterruptHandler 0166  
                            ?_Wireless_checkDataReceived 0070  
                                 ??_ADC_IsConversionDone 0021  
                                _IOCAF2_InterruptHandler 0168  
                                Wireless_sendData@length 0031  
                                            _initialised 00D8  
                                        ___lwdiv@divisor 0021  
                                        ___lwdiv@counter 0026  
                           ??_IOCAF2_SetInterruptHandler 0023  
                                               __ptext10 153C  
                                               __ptext11 139A  
                                               __ptext20 15AE  
                                               __ptext12 136F  
                                               __ptext21 14D1  
                                               __ptext13 12C3  
                                             _T1GCONbits 0019  
                                               __ptext30 12B1  
                                               __ptext22 1443  
                                               __ptext14 1459  
                                               __ptext31 138A  
                                               __ptext23 14B7  
                                               __ptext15 15E8  
                                               __ptext40 12E0  
                                               __ptext32 1300  
                                               __ptext24 16A9  
                                               __ptext16 0B8E  
                                               __ptext41 1356  
                                               __ptext33 1343  
                                               __ptext25 12B4  
                                               __ptext17 13F0  
                                               __ptext50 146F  
                                               __ptext42 12BF  
                                               __ptext34 13DE  
                                               __ptext26 0879  
                                               __ptext18 15CB  
                                               __ptext51 133A  
                                               __ptext43 0A57  
                                               __ptext35 0C08  
                                               __ptext27 12D0  
                                               __ptext19 1644  
                                               __ptext60 0003  
                                               __ptext52 12F9  
                                               __ptext44 179B  
                                               __ptext36 1591  
                                               __ptext28 12CB  
                                               __ptext61 0077  
                                               __ptext53 1744  
                                               __ptext45 1574  
                                               __ptext37 1521  
                                               __ptext29 12E6  
                                               __ptext70 0AB5  
                                               __ptext62 1403  
                                               __ptext54 1331  
                                               __ptext46 13BB  
                                               __ptext38 1624  
                                               __ptext71 077B  
                                               __ptext63 0C83  
                                               __ptext55 12F2  
                                               __ptext47 1506  
                                               __ptext39 142D  
                                               __ptext80 171A  
                                               __ptext72 08BE  
                                               __ptext64 1328  
                                               __ptext56 14EB  
                                               __ptext48 12BB  
                                               __ptext81 1686  
                                               __ptext73 13CC  
                                               __ptext65 0E70  
                                               __ptext57 12B7  
                                               __ptext49 1317  
                                               __ptext90 0002  
                                               __ptext82 16F2  
                                               __ptext74 12AB  
                                               __ptext66 0DC7  
                                               __ptext58 130F  
                                               __ptext91 12DA  
                                               __ptext83 09A4  
                                               __ptext75 0B1A  
                                               __ptext67 0685  
                                               __ptext59 12AE  
                                               __ptext92 1362  
                                               __ptext84 176F  
                                               __ptext76 0800  
                                               __ptext68 1664  
                                               __ptext93 12AA  
                                               __ptext85 1307  
                                               __ptext77 09F9  
                                               __ptext69 083C  
                                               __ptext94 053C  
                                               __ptext78 149E  
                                               __ptext95 1557  
                                               __ptext87 131F  
                                               __ptext79 0904  
                                               __ptext96 13AA  
                                               __ptext88 137C  
                                               __ptext97 12A9  
                                               __ptext89 134C  
                               Wireless_packageData@data 00BE  
                                           _SSP1CON1bits 0215  
                                Wireless_sendData@status 0033  
                                           _SSP2CON1bits 021D  
                                           _SSP2CON2bits 021E  
                                             _IOCAF2_ISR 1362  
                            DATAEE_WriteByte@GIEBitValue 0023  
                                    RF_RxPayload@payload 0032  
                                   _RF_WriteRegisterData 1591  
                                      _HMC5883L_ReadBits 08BE  
                                          __size_of_main 01F7  
                      __end_of_Timeout_updateCurrentTime 0AB5  
                        Wireless_changeTransmitPower@val 0031  
                             __size_of_RF_ResetStatusIRQ 0020  
                                     ?_HMC5883L_ReadBits 0043  
                             __size_of_ADC_SelectChannel 0010  
                                I2C2_MasterWrite@address 0029  
                               __size_of_SPI_WriteBuffer 001B  
                                       ??_TMR1_ReadTimer 0023  
                                               int$flags 007E  
                                               _pressure 0128  
                                    ??_HMC5883L_ReadBits 0047  
                     __end_of_INTERRUPT_InterruptManager 0037  
                             _INTERRUPT_InterruptManager 0004  
                             __end_of_Timeout_setTimeout 14B7  
                                I2C2_MasterWrite@trBlock 015D  
                                           _SSP1STATbits 0214  
                               ??_Sensor_peripheralSleep 0021  
                    __size_of_IOCAF2_SetInterruptHandler 0009  
                                 BMP_readTemperature@tmp 00B9  
                          __size_of_I2C2_BusCollisionISR 0001  
                                            atan@coeff_a 1800  
                                            atan@coeff_b 1812  
                                  __size_of_RF_GetStatus 0004  
                                     RF_ReadRegister@reg 0024  
                                     RF_ReadRegister@val 0025  
                       __size_of_I2C2_MasterReadTRBBuild 002C  
                             ??_Timeout_getGlobalCounter 0025  
                                             _INTCONbits 000B  
                                  Timeout_setTimeout@val 0021  
                __end_of_Wireless_determineTransmitPower 0DC7  
               __size_of_Wireless_determineTransmitPower 00A5  
                      ??_Wireless_determineTransmitPower 0035  
                       ?_Wireless_determineTransmitPower 0070  
                        _Wireless_determineTransmitPower 0D22  
                                             _FVRCONbits 0117  
                                           _sensorHealth 00E3  
                                 __size_of_Wireless_init 007B  
                                               limit@max 0025  
                                               limit@min 0023  
                                               limit@val 0021  
                                  I2C_BufferRead@pBuffer 0031  
                                 __size_of_Wireless_wake 001F  
                                        ??_TMR1_CallBack 0070  
                              ??_HMC5883L_I2C_BufferRead 0041  
                                __size_of_WDT_Initialize 0004  
                      __size_of_I2C2_MasterWriteTRBBuild 0023  
                              __end_of_HMC5883L_ReadBits 0904  
                              ?_I2C2_MasterWriteTRBBuild 0021  
                                               intlevel1 0000  
                                  ?_RF_WriteRegisterData 0029  
                            __end_of_ADC_StartConversion 12B4  
                                        _doorClosedAngle 00DD  
                                    I2C2_ISR@i2c_address 007A  
                                       ___lldiv@dividend 0025  
                                ?_PIN_MANAGER_Initialize 0070  
                        __end_of_ADC_GetConversionResult 134C  
                                      __CFG_CLKOUTEN$OFF 0000  
                                       ??_ADC_Initialize 0021  
                                           _RF_GetStatus 12C3  
                                 I2C2_MasterWrite@length 0028  
                                ??_Sensor_peripheralWake 0021  
                           __end_of_Diag_getSensorHealth 13F0  
                                 __size_of_DOOR_resetPos 0003  
                                  __size_of_RF_RxPayload 0013  
                                   _I2C2_MasterTRBInsert 09A4  
                                          __pstringtext1 1800  
                                          __pstringtext2 1812  
                                          __pstringtext3 1821  
                                  __size_of_RF_TxPayload 001B  
                                         _FVR_Initialize 12B7  
                                       ?_RF_ReadRegister 0070  
                           __size_of_SPI_WriteReadBuffer 0020  
                                       ___lldiv@quotient 002A  
                                   I2C_BufferRead@status 003B  
                                           ___aldiv@sign 002B  
                                 __size_of_SPI_WriteRead 0006  
                                            ?_IOCAF2_ISR 0070  
                         __end_of_PIN_MANAGER_Initialize 176F  
                                  __size_of_RF_WriteRead 0016  
                               __size_of_I2C2_MasterRead 0028  
                               __size_of_I2C2_Initialize 001B  
                                     _referenceDirection 013E  
                                     __size_of_I2C2_Stop 001D  
                                        _PIN_MANAGER_IOC 12DA  
                               __end_of_I2C2_MasterWrite 1744  
                                           _RF_RxPayload 13F0  
                                      ?_RF_WriteRegister 0023  
                                        _TMR1_Initialize 146F  
                    __size_of_Wireless_checkDataReceived 007A  
                                     main@prevDoorStatus 01D0  
                                  __size_of_Storage_save 001A  
